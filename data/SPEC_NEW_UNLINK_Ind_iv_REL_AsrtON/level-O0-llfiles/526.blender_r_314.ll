; ModuleID = 'blender/source/blender/blenlib/intern/math_matrix.c'
source_filename = "blender/source/blender/blenlib/intern/math_matrix.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.SpaceTransform = type { [4 x [4 x float]], [4 x [4 x float]] }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"%f %f %f\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"%f %f %f %f\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @zero_m2([2 x float]* %m) #0 !dbg !20 {
entry:
  %m.addr = alloca [2 x float]*, align 8
  store [2 x float]* %m, [2 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %m.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %0 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !29
  %1 = bitcast [2 x float]* %0 to i8*, !dbg !30
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 16, i1 false), !dbg !30
  ret void, !dbg !31
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @zero_m3([3 x float]* %m) #0 !dbg !32 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !41
  %1 = bitcast [3 x float]* %0 to i8*, !dbg !42
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 36, i1 false), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zero_m4([4 x float]* %m) #0 !dbg !44 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %0 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !52
  %1 = bitcast [4 x float]* %0 to i8*, !dbg !53
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 64, i1 false), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @unit_m2([2 x float]* %m) #0 !dbg !55 {
entry:
  %m.addr = alloca [2 x float]*, align 8
  store [2 x float]* %m, [2 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %m.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %0 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !58
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, !dbg !58
  %arrayidx1 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx, i64 0, i64 1, !dbg !58
  store float 1.000000e+00, float* %arrayidx1, align 4, !dbg !59
  %1 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !60
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, !dbg !60
  %arrayidx3 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx2, i64 0, i64 0, !dbg !60
  store float 1.000000e+00, float* %arrayidx3, align 4, !dbg !61
  %2 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !62
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %2, i64 0, !dbg !62
  %arrayidx5 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx4, i64 0, i64 1, !dbg !62
  store float 0.000000e+00, float* %arrayidx5, align 4, !dbg !63
  %3 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !64
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 1, !dbg !64
  %arrayidx7 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx6, i64 0, i64 0, !dbg !64
  store float 0.000000e+00, float* %arrayidx7, align 4, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @unit_m3([3 x float]* %m) #0 !dbg !67 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !70
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 2, !dbg !70
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 2, !dbg !70
  store float 1.000000e+00, float* %arrayidx1, align 4, !dbg !71
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !72
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %1, i64 1, !dbg !72
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 1, !dbg !72
  store float 1.000000e+00, float* %arrayidx3, align 4, !dbg !73
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !74
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, !dbg !74
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 0, !dbg !74
  store float 1.000000e+00, float* %arrayidx5, align 4, !dbg !75
  %3 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !76
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, !dbg !76
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 2, !dbg !76
  store float 0.000000e+00, float* %arrayidx7, align 4, !dbg !77
  %4 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !78
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, !dbg !78
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 1, !dbg !78
  store float 0.000000e+00, float* %arrayidx9, align 4, !dbg !79
  %5 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !80
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 1, !dbg !80
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 2, !dbg !80
  store float 0.000000e+00, float* %arrayidx11, align 4, !dbg !81
  %6 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !82
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 1, !dbg !82
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !82
  store float 0.000000e+00, float* %arrayidx13, align 4, !dbg !83
  %7 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !84
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 2, !dbg !84
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx14, i64 0, i64 1, !dbg !84
  store float 0.000000e+00, float* %arrayidx15, align 4, !dbg !85
  %8 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !86
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 2, !dbg !86
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 0, !dbg !86
  store float 0.000000e+00, float* %arrayidx17, align 4, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @unit_m4([4 x float]* %m) #0 !dbg !89 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %0 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !92
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 3, !dbg !92
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 3, !dbg !92
  store float 1.000000e+00, float* %arrayidx1, align 4, !dbg !93
  %1 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !94
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 2, !dbg !94
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 2, !dbg !94
  store float 1.000000e+00, float* %arrayidx3, align 4, !dbg !95
  %2 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !96
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 1, !dbg !96
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 1, !dbg !96
  store float 1.000000e+00, float* %arrayidx5, align 4, !dbg !97
  %3 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !98
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, !dbg !98
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 0, !dbg !98
  store float 1.000000e+00, float* %arrayidx7, align 4, !dbg !99
  %4 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !100
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !100
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 3, !dbg !100
  store float 0.000000e+00, float* %arrayidx9, align 4, !dbg !101
  %5 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !102
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !102
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 2, !dbg !102
  store float 0.000000e+00, float* %arrayidx11, align 4, !dbg !103
  %6 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !104
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !104
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 1, !dbg !104
  store float 0.000000e+00, float* %arrayidx13, align 4, !dbg !105
  %7 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !106
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 1, !dbg !106
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 3, !dbg !106
  store float 0.000000e+00, float* %arrayidx15, align 4, !dbg !107
  %8 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !108
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !108
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 2, !dbg !108
  store float 0.000000e+00, float* %arrayidx17, align 4, !dbg !109
  %9 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !110
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 1, !dbg !110
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !110
  store float 0.000000e+00, float* %arrayidx19, align 4, !dbg !111
  %10 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !112
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 2, !dbg !112
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 3, !dbg !112
  store float 0.000000e+00, float* %arrayidx21, align 4, !dbg !113
  %11 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !114
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 2, !dbg !114
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 1, !dbg !114
  store float 0.000000e+00, float* %arrayidx23, align 4, !dbg !115
  %12 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !116
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 2, !dbg !116
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !116
  store float 0.000000e+00, float* %arrayidx25, align 4, !dbg !117
  %13 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !118
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 3, !dbg !118
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 2, !dbg !118
  store float 0.000000e+00, float* %arrayidx27, align 4, !dbg !119
  %14 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !120
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 3, !dbg !120
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 1, !dbg !120
  store float 0.000000e+00, float* %arrayidx29, align 4, !dbg !121
  %15 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !122
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 3, !dbg !122
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 0, !dbg !122
  store float 0.000000e+00, float* %arrayidx31, align 4, !dbg !123
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_m2_m2([2 x float]* %m1, [2 x float]* %m2) #0 !dbg !125 {
entry:
  %m1.addr = alloca [2 x float]*, align 8
  %m2.addr = alloca [2 x float]*, align 8
  store [2 x float]* %m1, [2 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %m1.addr, metadata !128, metadata !DIExpression()), !dbg !129
  store [2 x float]* %m2, [2 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %m2.addr, metadata !130, metadata !DIExpression()), !dbg !131
  %0 = load [2 x float]*, [2 x float]** %m1.addr, align 8, !dbg !132
  %1 = bitcast [2 x float]* %0 to i8*, !dbg !133
  %2 = load [2 x float]*, [2 x float]** %m2.addr, align 8, !dbg !134
  %3 = bitcast [2 x float]* %2 to i8*, !dbg !133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %3, i64 16, i1 false), !dbg !133
  ret void, !dbg !135
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_m3_m3([3 x float]* %m1, [3 x float]* %m2) #0 !dbg !136 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !139, metadata !DIExpression()), !dbg !140
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !141, metadata !DIExpression()), !dbg !142
  %0 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !143
  %1 = bitcast [3 x float]* %0 to i8*, !dbg !144
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !145
  %3 = bitcast [3 x float]* %2 to i8*, !dbg !144
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %3, i64 36, i1 false), !dbg !144
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_m4_m4([4 x float]* %m1, [4 x float]* %m2) #0 !dbg !147 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !150, metadata !DIExpression()), !dbg !151
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !152, metadata !DIExpression()), !dbg !153
  %0 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !154
  %1 = bitcast [4 x float]* %0 to i8*, !dbg !155
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !156
  %3 = bitcast [4 x float]* %2 to i8*, !dbg !155
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %3, i64 64, i1 false), !dbg !155
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_m3_m4([3 x float]* %m1, [4 x float]* %m2) #0 !dbg !158 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !161, metadata !DIExpression()), !dbg !162
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !163, metadata !DIExpression()), !dbg !164
  %0 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !165
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !165
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !165
  %1 = load float, float* %arrayidx1, align 4, !dbg !165
  %2 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !166
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, !dbg !166
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !166
  store float %1, float* %arrayidx3, align 4, !dbg !167
  %3 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !168
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, !dbg !168
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 1, !dbg !168
  %4 = load float, float* %arrayidx5, align 4, !dbg !168
  %5 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !169
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, !dbg !169
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 1, !dbg !169
  store float %4, float* %arrayidx7, align 4, !dbg !170
  %6 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !171
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !171
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 2, !dbg !171
  %7 = load float, float* %arrayidx9, align 4, !dbg !171
  %8 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !172
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, !dbg !172
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 2, !dbg !172
  store float %7, float* %arrayidx11, align 4, !dbg !173
  %9 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !174
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 1, !dbg !174
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !174
  %10 = load float, float* %arrayidx13, align 4, !dbg !174
  %11 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !175
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 1, !dbg !175
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx14, i64 0, i64 0, !dbg !175
  store float %10, float* %arrayidx15, align 4, !dbg !176
  %12 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !177
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 1, !dbg !177
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 1, !dbg !177
  %13 = load float, float* %arrayidx17, align 4, !dbg !177
  %14 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !178
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 1, !dbg !178
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 1, !dbg !178
  store float %13, float* %arrayidx19, align 4, !dbg !179
  %15 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !180
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 1, !dbg !180
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 2, !dbg !180
  %16 = load float, float* %arrayidx21, align 4, !dbg !180
  %17 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !181
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 1, !dbg !181
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 2, !dbg !181
  store float %16, float* %arrayidx23, align 4, !dbg !182
  %18 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !183
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 2, !dbg !183
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !183
  %19 = load float, float* %arrayidx25, align 4, !dbg !183
  %20 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !184
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %20, i64 2, !dbg !184
  %arrayidx27 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx26, i64 0, i64 0, !dbg !184
  store float %19, float* %arrayidx27, align 4, !dbg !185
  %21 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !186
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 2, !dbg !186
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 1, !dbg !186
  %22 = load float, float* %arrayidx29, align 4, !dbg !186
  %23 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !187
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %23, i64 2, !dbg !187
  %arrayidx31 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx30, i64 0, i64 1, !dbg !187
  store float %22, float* %arrayidx31, align 4, !dbg !188
  %24 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !189
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 2, !dbg !189
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx32, i64 0, i64 2, !dbg !189
  %25 = load float, float* %arrayidx33, align 4, !dbg !189
  %26 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !190
  %arrayidx34 = getelementptr inbounds [3 x float], [3 x float]* %26, i64 2, !dbg !190
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx34, i64 0, i64 2, !dbg !190
  store float %25, float* %arrayidx35, align 4, !dbg !191
  ret void, !dbg !192
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_m4_m3([4 x float]* %m1, [3 x float]* %m2) #0 !dbg !193 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !196, metadata !DIExpression()), !dbg !197
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !198, metadata !DIExpression()), !dbg !199
  %0 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !200
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !200
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !200
  %1 = load float, float* %arrayidx1, align 4, !dbg !200
  %2 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !201
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, !dbg !201
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !201
  store float %1, float* %arrayidx3, align 4, !dbg !202
  %3 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !203
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, !dbg !203
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 1, !dbg !203
  %4 = load float, float* %arrayidx5, align 4, !dbg !203
  %5 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !204
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !204
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 1, !dbg !204
  store float %4, float* %arrayidx7, align 4, !dbg !205
  %6 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !206
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, !dbg !206
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 2, !dbg !206
  %7 = load float, float* %arrayidx9, align 4, !dbg !206
  %8 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !207
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, !dbg !207
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 2, !dbg !207
  store float %7, float* %arrayidx11, align 4, !dbg !208
  %9 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !209
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 1, !dbg !209
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !209
  %10 = load float, float* %arrayidx13, align 4, !dbg !209
  %11 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !210
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 1, !dbg !210
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 0, !dbg !210
  store float %10, float* %arrayidx15, align 4, !dbg !211
  %12 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !212
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %12, i64 1, !dbg !212
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 1, !dbg !212
  %13 = load float, float* %arrayidx17, align 4, !dbg !212
  %14 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !213
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 1, !dbg !213
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 1, !dbg !213
  store float %13, float* %arrayidx19, align 4, !dbg !214
  %15 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !215
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 1, !dbg !215
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx20, i64 0, i64 2, !dbg !215
  %16 = load float, float* %arrayidx21, align 4, !dbg !215
  %17 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !216
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 1, !dbg !216
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 2, !dbg !216
  store float %16, float* %arrayidx23, align 4, !dbg !217
  %18 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !218
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %18, i64 2, !dbg !218
  %arrayidx25 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx24, i64 0, i64 0, !dbg !218
  %19 = load float, float* %arrayidx25, align 4, !dbg !218
  %20 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !219
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 2, !dbg !219
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 0, !dbg !219
  store float %19, float* %arrayidx27, align 4, !dbg !220
  %21 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !221
  %arrayidx28 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 2, !dbg !221
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx28, i64 0, i64 1, !dbg !221
  %22 = load float, float* %arrayidx29, align 4, !dbg !221
  %23 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !222
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 2, !dbg !222
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 1, !dbg !222
  store float %22, float* %arrayidx31, align 4, !dbg !223
  %24 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !224
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %24, i64 2, !dbg !224
  %arrayidx33 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx32, i64 0, i64 2, !dbg !224
  %25 = load float, float* %arrayidx33, align 4, !dbg !224
  %26 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !225
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 2, !dbg !225
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx34, i64 0, i64 2, !dbg !225
  store float %25, float* %arrayidx35, align 4, !dbg !226
  %27 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !227
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 0, !dbg !227
  %arrayidx37 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx36, i64 0, i64 3, !dbg !227
  store float 0.000000e+00, float* %arrayidx37, align 4, !dbg !228
  %28 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !229
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 1, !dbg !229
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 3, !dbg !229
  store float 0.000000e+00, float* %arrayidx39, align 4, !dbg !230
  %29 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !231
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 2, !dbg !231
  %arrayidx41 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx40, i64 0, i64 3, !dbg !231
  store float 0.000000e+00, float* %arrayidx41, align 4, !dbg !232
  %30 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !233
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 3, !dbg !233
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 0, !dbg !233
  store float 0.000000e+00, float* %arrayidx43, align 4, !dbg !234
  %31 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !235
  %arrayidx44 = getelementptr inbounds [4 x float], [4 x float]* %31, i64 3, !dbg !235
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 1, !dbg !235
  store float 0.000000e+00, float* %arrayidx45, align 4, !dbg !236
  %32 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !237
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %32, i64 3, !dbg !237
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx46, i64 0, i64 2, !dbg !237
  store float 0.000000e+00, float* %arrayidx47, align 4, !dbg !238
  %33 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !239
  %arrayidx48 = getelementptr inbounds [4 x float], [4 x float]* %33, i64 3, !dbg !239
  %arrayidx49 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx48, i64 0, i64 3, !dbg !239
  store float 1.000000e+00, float* %arrayidx49, align 4, !dbg !240
  ret void, !dbg !241
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_m3_m3d([3 x float]* %R, [3 x double]* %A) #0 !dbg !242 {
entry:
  %R.addr = alloca [3 x float]*, align 8
  %A.addr = alloca [3 x double]*, align 8
  store [3 x float]* %R, [3 x float]** %R.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %R.addr, metadata !247, metadata !DIExpression()), !dbg !248
  store [3 x double]* %A, [3 x double]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x double]** %A.addr, metadata !249, metadata !DIExpression()), !dbg !250
  %0 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !251
  %arrayidx = getelementptr inbounds [3 x double], [3 x double]* %0, i64 0, !dbg !251
  %arrayidx1 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx, i64 0, i64 0, !dbg !251
  %1 = load double, double* %arrayidx1, align 8, !dbg !251
  %conv = fptrunc double %1 to float, !dbg !252
  %2 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !253
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, !dbg !253
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !253
  store float %conv, float* %arrayidx3, align 4, !dbg !254
  %3 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !255
  %arrayidx4 = getelementptr inbounds [3 x double], [3 x double]* %3, i64 0, !dbg !255
  %arrayidx5 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx4, i64 0, i64 1, !dbg !255
  %4 = load double, double* %arrayidx5, align 8, !dbg !255
  %conv6 = fptrunc double %4 to float, !dbg !256
  %5 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !257
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, !dbg !257
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 1, !dbg !257
  store float %conv6, float* %arrayidx8, align 4, !dbg !258
  %6 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !259
  %arrayidx9 = getelementptr inbounds [3 x double], [3 x double]* %6, i64 0, !dbg !259
  %arrayidx10 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx9, i64 0, i64 2, !dbg !259
  %7 = load double, double* %arrayidx10, align 8, !dbg !259
  %conv11 = fptrunc double %7 to float, !dbg !260
  %8 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !261
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, !dbg !261
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 2, !dbg !261
  store float %conv11, float* %arrayidx13, align 4, !dbg !262
  %9 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !263
  %arrayidx14 = getelementptr inbounds [3 x double], [3 x double]* %9, i64 1, !dbg !263
  %arrayidx15 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx14, i64 0, i64 0, !dbg !263
  %10 = load double, double* %arrayidx15, align 8, !dbg !263
  %conv16 = fptrunc double %10 to float, !dbg !264
  %11 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !265
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 1, !dbg !265
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx17, i64 0, i64 0, !dbg !265
  store float %conv16, float* %arrayidx18, align 4, !dbg !266
  %12 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !267
  %arrayidx19 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 1, !dbg !267
  %arrayidx20 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx19, i64 0, i64 1, !dbg !267
  %13 = load double, double* %arrayidx20, align 8, !dbg !267
  %conv21 = fptrunc double %13 to float, !dbg !268
  %14 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !269
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 1, !dbg !269
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 1, !dbg !269
  store float %conv21, float* %arrayidx23, align 4, !dbg !270
  %15 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !271
  %arrayidx24 = getelementptr inbounds [3 x double], [3 x double]* %15, i64 1, !dbg !271
  %arrayidx25 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx24, i64 0, i64 2, !dbg !271
  %16 = load double, double* %arrayidx25, align 8, !dbg !271
  %conv26 = fptrunc double %16 to float, !dbg !272
  %17 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !273
  %arrayidx27 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 1, !dbg !273
  %arrayidx28 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx27, i64 0, i64 2, !dbg !273
  store float %conv26, float* %arrayidx28, align 4, !dbg !274
  %18 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !275
  %arrayidx29 = getelementptr inbounds [3 x double], [3 x double]* %18, i64 2, !dbg !275
  %arrayidx30 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx29, i64 0, i64 0, !dbg !275
  %19 = load double, double* %arrayidx30, align 8, !dbg !275
  %conv31 = fptrunc double %19 to float, !dbg !276
  %20 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !277
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %20, i64 2, !dbg !277
  %arrayidx33 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx32, i64 0, i64 0, !dbg !277
  store float %conv31, float* %arrayidx33, align 4, !dbg !278
  %21 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !279
  %arrayidx34 = getelementptr inbounds [3 x double], [3 x double]* %21, i64 2, !dbg !279
  %arrayidx35 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx34, i64 0, i64 1, !dbg !279
  %22 = load double, double* %arrayidx35, align 8, !dbg !279
  %conv36 = fptrunc double %22 to float, !dbg !280
  %23 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !281
  %arrayidx37 = getelementptr inbounds [3 x float], [3 x float]* %23, i64 2, !dbg !281
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx37, i64 0, i64 1, !dbg !281
  store float %conv36, float* %arrayidx38, align 4, !dbg !282
  %24 = load [3 x double]*, [3 x double]** %A.addr, align 8, !dbg !283
  %arrayidx39 = getelementptr inbounds [3 x double], [3 x double]* %24, i64 2, !dbg !283
  %arrayidx40 = getelementptr inbounds [3 x double], [3 x double]* %arrayidx39, i64 0, i64 2, !dbg !283
  %25 = load double, double* %arrayidx40, align 8, !dbg !283
  %conv41 = fptrunc double %25 to float, !dbg !284
  %26 = load [3 x float]*, [3 x float]** %R.addr, align 8, !dbg !285
  %arrayidx42 = getelementptr inbounds [3 x float], [3 x float]* %26, i64 2, !dbg !285
  %arrayidx43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 2, !dbg !285
  store float %conv41, float* %arrayidx43, align 4, !dbg !286
  ret void, !dbg !287
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @swap_m3m3([3 x float]* %m1, [3 x float]* %m2) #0 !dbg !288 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %t = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !289, metadata !DIExpression()), !dbg !290
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !291, metadata !DIExpression()), !dbg !292
  call void @llvm.dbg.declare(metadata float* %t, metadata !293, metadata !DIExpression()), !dbg !294
  call void @llvm.dbg.declare(metadata i32* %i, metadata !295, metadata !DIExpression()), !dbg !297
  call void @llvm.dbg.declare(metadata i32* %j, metadata !298, metadata !DIExpression()), !dbg !299
  store i32 0, i32* %i, align 4, !dbg !300
  br label %for.cond, !dbg !302

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load i32, i32* %i, align 4, !dbg !303
  %cmp = icmp slt i32 %0, 3, !dbg !305
  br i1 %cmp, label %for.body, label %for.end20, !dbg !306

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !307
  br label %for.cond1, !dbg !310

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !311
  %cmp2 = icmp slt i32 %1, 3, !dbg !313
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !314

for.body3:                                        ; preds = %for.cond1
  %2 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !315
  %3 = load i32, i32* %i, align 4, !dbg !317
  %idxprom = sext i32 %3 to i64, !dbg !315
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %2, i64 %idxprom, !dbg !315
  %4 = load i32, i32* %j, align 4, !dbg !318
  %idxprom4 = sext i32 %4 to i64, !dbg !315
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !315
  %5 = load float, float* %arrayidx5, align 4, !dbg !315
  store float %5, float* %t, align 4, !dbg !319
  %6 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !320
  %7 = load i32, i32* %i, align 4, !dbg !321
  %idxprom6 = sext i32 %7 to i64, !dbg !320
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 %idxprom6, !dbg !320
  %8 = load i32, i32* %j, align 4, !dbg !322
  %idxprom8 = sext i32 %8 to i64, !dbg !320
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !320
  %9 = load float, float* %arrayidx9, align 4, !dbg !320
  %10 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !323
  %11 = load i32, i32* %i, align 4, !dbg !324
  %idxprom10 = sext i32 %11 to i64, !dbg !323
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 %idxprom10, !dbg !323
  %12 = load i32, i32* %j, align 4, !dbg !325
  %idxprom12 = sext i32 %12 to i64, !dbg !323
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx11, i64 0, i64 %idxprom12, !dbg !323
  store float %9, float* %arrayidx13, align 4, !dbg !326
  %13 = load float, float* %t, align 4, !dbg !327
  %14 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !328
  %15 = load i32, i32* %i, align 4, !dbg !329
  %idxprom14 = sext i32 %15 to i64, !dbg !328
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 %idxprom14, !dbg !328
  %16 = load i32, i32* %j, align 4, !dbg !330
  %idxprom16 = sext i32 %16 to i64, !dbg !328
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx15, i64 0, i64 %idxprom16, !dbg !328
  store float %13, float* %arrayidx17, align 4, !dbg !331
  br label %for.inc, !dbg !332

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4, !dbg !333
  %inc = add nsw i32 %17, 1, !dbg !333
  store i32 %inc, i32* %j, align 4, !dbg !333
  br label %for.cond1, !dbg !334, !llvm.loop !335

for.end:                                          ; preds = %for.cond1
  br label %for.inc18, !dbg !337

for.inc18:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !338
  %inc19 = add nsw i32 %18, 1, !dbg !338
  store i32 %inc19, i32* %i, align 4, !dbg !338
  br label %for.cond, !dbg !339, !llvm.loop !340

for.end20:                                        ; preds = %for.cond
  ret void, !dbg !342
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @swap_m4m4([4 x float]* %m1, [4 x float]* %m2) #0 !dbg !343 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %t = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !344, metadata !DIExpression()), !dbg !345
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !346, metadata !DIExpression()), !dbg !347
  call void @llvm.dbg.declare(metadata float* %t, metadata !348, metadata !DIExpression()), !dbg !349
  call void @llvm.dbg.declare(metadata i32* %i, metadata !350, metadata !DIExpression()), !dbg !351
  call void @llvm.dbg.declare(metadata i32* %j, metadata !352, metadata !DIExpression()), !dbg !353
  store i32 0, i32* %i, align 4, !dbg !354
  br label %for.cond, !dbg !356

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load i32, i32* %i, align 4, !dbg !357
  %cmp = icmp slt i32 %0, 4, !dbg !359
  br i1 %cmp, label %for.body, label %for.end20, !dbg !360

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !361
  br label %for.cond1, !dbg !364

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !365
  %cmp2 = icmp slt i32 %1, 4, !dbg !367
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !368

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !369
  %3 = load i32, i32* %i, align 4, !dbg !371
  %idxprom = sext i32 %3 to i64, !dbg !369
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !369
  %4 = load i32, i32* %j, align 4, !dbg !372
  %idxprom4 = sext i32 %4 to i64, !dbg !369
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !369
  %5 = load float, float* %arrayidx5, align 4, !dbg !369
  store float %5, float* %t, align 4, !dbg !373
  %6 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !374
  %7 = load i32, i32* %i, align 4, !dbg !375
  %idxprom6 = sext i32 %7 to i64, !dbg !374
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 %idxprom6, !dbg !374
  %8 = load i32, i32* %j, align 4, !dbg !376
  %idxprom8 = sext i32 %8 to i64, !dbg !374
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !374
  %9 = load float, float* %arrayidx9, align 4, !dbg !374
  %10 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !377
  %11 = load i32, i32* %i, align 4, !dbg !378
  %idxprom10 = sext i32 %11 to i64, !dbg !377
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 %idxprom10, !dbg !377
  %12 = load i32, i32* %j, align 4, !dbg !379
  %idxprom12 = sext i32 %12 to i64, !dbg !377
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx11, i64 0, i64 %idxprom12, !dbg !377
  store float %9, float* %arrayidx13, align 4, !dbg !380
  %13 = load float, float* %t, align 4, !dbg !381
  %14 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !382
  %15 = load i32, i32* %i, align 4, !dbg !383
  %idxprom14 = sext i32 %15 to i64, !dbg !382
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 %idxprom14, !dbg !382
  %16 = load i32, i32* %j, align 4, !dbg !384
  %idxprom16 = sext i32 %16 to i64, !dbg !382
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx15, i64 0, i64 %idxprom16, !dbg !382
  store float %13, float* %arrayidx17, align 4, !dbg !385
  br label %for.inc, !dbg !386

for.inc:                                          ; preds = %for.body3
  %17 = load i32, i32* %j, align 4, !dbg !387
  %inc = add nsw i32 %17, 1, !dbg !387
  store i32 %inc, i32* %j, align 4, !dbg !387
  br label %for.cond1, !dbg !388, !llvm.loop !389

for.end:                                          ; preds = %for.cond1
  br label %for.inc18, !dbg !391

for.inc18:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !392
  %inc19 = add nsw i32 %18, 1, !dbg !392
  store i32 %inc19, i32* %i, align 4, !dbg !392
  br label %for.cond, !dbg !393, !llvm.loop !394

for.end20:                                        ; preds = %for.cond
  ret void, !dbg !396
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_m4m4([4 x float]* %m1, [4 x float]* %m3_, [4 x float]* %m2_) #0 !dbg !397 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m3_.addr = alloca [4 x float]*, align 8
  %m2_.addr = alloca [4 x float]*, align 8
  %m2 = alloca [4 x [4 x float]], align 16
  %m3 = alloca [4 x [4 x float]], align 16
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !400, metadata !DIExpression()), !dbg !401
  store [4 x float]* %m3_, [4 x float]** %m3_.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3_.addr, metadata !402, metadata !DIExpression()), !dbg !403
  store [4 x float]* %m2_, [4 x float]** %m2_.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2_.addr, metadata !404, metadata !DIExpression()), !dbg !405
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m2, metadata !406, metadata !DIExpression()), !dbg !407
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m3, metadata !408, metadata !DIExpression()), !dbg !409
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !410
  %0 = load [4 x float]*, [4 x float]** %m2_.addr, align 8, !dbg !411
  call void @copy_m4_m4([4 x float]* %arraydecay, [4 x float]* %0), !dbg !412
  %arraydecay1 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !413
  %1 = load [4 x float]*, [4 x float]** %m3_.addr, align 8, !dbg !414
  call void @copy_m4_m4([4 x float]* %arraydecay1, [4 x float]* %1), !dbg !415
  %arrayidx = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !416
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !416
  %2 = load float, float* %arrayidx2, align 16, !dbg !416
  %arrayidx3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !417
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !417
  %3 = load float, float* %arrayidx4, align 16, !dbg !417
  %mul = fmul float %2, %3, !dbg !418
  %arrayidx5 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !419
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 1, !dbg !419
  %4 = load float, float* %arrayidx6, align 4, !dbg !419
  %arrayidx7 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !420
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !420
  %5 = load float, float* %arrayidx8, align 16, !dbg !420
  %mul9 = fmul float %4, %5, !dbg !421
  %add = fadd float %mul, %mul9, !dbg !422
  %arrayidx10 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !423
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 2, !dbg !423
  %6 = load float, float* %arrayidx11, align 8, !dbg !423
  %arrayidx12 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !424
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !424
  %7 = load float, float* %arrayidx13, align 16, !dbg !424
  %mul14 = fmul float %6, %7, !dbg !425
  %add15 = fadd float %add, %mul14, !dbg !426
  %arrayidx16 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !427
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 3, !dbg !427
  %8 = load float, float* %arrayidx17, align 4, !dbg !427
  %arrayidx18 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !428
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !428
  %9 = load float, float* %arrayidx19, align 16, !dbg !428
  %mul20 = fmul float %8, %9, !dbg !429
  %add21 = fadd float %add15, %mul20, !dbg !430
  %10 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !431
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 0, !dbg !431
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 0, !dbg !431
  store float %add21, float* %arrayidx23, align 4, !dbg !432
  %arrayidx24 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !433
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !433
  %11 = load float, float* %arrayidx25, align 16, !dbg !433
  %arrayidx26 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !434
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 1, !dbg !434
  %12 = load float, float* %arrayidx27, align 4, !dbg !434
  %mul28 = fmul float %11, %12, !dbg !435
  %arrayidx29 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !436
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 1, !dbg !436
  %13 = load float, float* %arrayidx30, align 4, !dbg !436
  %arrayidx31 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !437
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 1, !dbg !437
  %14 = load float, float* %arrayidx32, align 4, !dbg !437
  %mul33 = fmul float %13, %14, !dbg !438
  %add34 = fadd float %mul28, %mul33, !dbg !439
  %arrayidx35 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !440
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 2, !dbg !440
  %15 = load float, float* %arrayidx36, align 8, !dbg !440
  %arrayidx37 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !441
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx37, i64 0, i64 1, !dbg !441
  %16 = load float, float* %arrayidx38, align 4, !dbg !441
  %mul39 = fmul float %15, %16, !dbg !442
  %add40 = fadd float %add34, %mul39, !dbg !443
  %arrayidx41 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !444
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx41, i64 0, i64 3, !dbg !444
  %17 = load float, float* %arrayidx42, align 4, !dbg !444
  %arrayidx43 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !445
  %arrayidx44 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx43, i64 0, i64 1, !dbg !445
  %18 = load float, float* %arrayidx44, align 4, !dbg !445
  %mul45 = fmul float %17, %18, !dbg !446
  %add46 = fadd float %add40, %mul45, !dbg !447
  %19 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !448
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 0, !dbg !448
  %arrayidx48 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx47, i64 0, i64 1, !dbg !448
  store float %add46, float* %arrayidx48, align 4, !dbg !449
  %arrayidx49 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !450
  %arrayidx50 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx49, i64 0, i64 0, !dbg !450
  %20 = load float, float* %arrayidx50, align 16, !dbg !450
  %arrayidx51 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !451
  %arrayidx52 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx51, i64 0, i64 2, !dbg !451
  %21 = load float, float* %arrayidx52, align 8, !dbg !451
  %mul53 = fmul float %20, %21, !dbg !452
  %arrayidx54 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !453
  %arrayidx55 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx54, i64 0, i64 1, !dbg !453
  %22 = load float, float* %arrayidx55, align 4, !dbg !453
  %arrayidx56 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !454
  %arrayidx57 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx56, i64 0, i64 2, !dbg !454
  %23 = load float, float* %arrayidx57, align 8, !dbg !454
  %mul58 = fmul float %22, %23, !dbg !455
  %add59 = fadd float %mul53, %mul58, !dbg !456
  %arrayidx60 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !457
  %arrayidx61 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx60, i64 0, i64 2, !dbg !457
  %24 = load float, float* %arrayidx61, align 8, !dbg !457
  %arrayidx62 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !458
  %arrayidx63 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx62, i64 0, i64 2, !dbg !458
  %25 = load float, float* %arrayidx63, align 8, !dbg !458
  %mul64 = fmul float %24, %25, !dbg !459
  %add65 = fadd float %add59, %mul64, !dbg !460
  %arrayidx66 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !461
  %arrayidx67 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx66, i64 0, i64 3, !dbg !461
  %26 = load float, float* %arrayidx67, align 4, !dbg !461
  %arrayidx68 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !462
  %arrayidx69 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx68, i64 0, i64 2, !dbg !462
  %27 = load float, float* %arrayidx69, align 8, !dbg !462
  %mul70 = fmul float %26, %27, !dbg !463
  %add71 = fadd float %add65, %mul70, !dbg !464
  %28 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !465
  %arrayidx72 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 0, !dbg !465
  %arrayidx73 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx72, i64 0, i64 2, !dbg !465
  store float %add71, float* %arrayidx73, align 4, !dbg !466
  %arrayidx74 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !467
  %arrayidx75 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx74, i64 0, i64 0, !dbg !467
  %29 = load float, float* %arrayidx75, align 16, !dbg !467
  %arrayidx76 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !468
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx76, i64 0, i64 3, !dbg !468
  %30 = load float, float* %arrayidx77, align 4, !dbg !468
  %mul78 = fmul float %29, %30, !dbg !469
  %arrayidx79 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !470
  %arrayidx80 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx79, i64 0, i64 1, !dbg !470
  %31 = load float, float* %arrayidx80, align 4, !dbg !470
  %arrayidx81 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !471
  %arrayidx82 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx81, i64 0, i64 3, !dbg !471
  %32 = load float, float* %arrayidx82, align 4, !dbg !471
  %mul83 = fmul float %31, %32, !dbg !472
  %add84 = fadd float %mul78, %mul83, !dbg !473
  %arrayidx85 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !474
  %arrayidx86 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx85, i64 0, i64 2, !dbg !474
  %33 = load float, float* %arrayidx86, align 8, !dbg !474
  %arrayidx87 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !475
  %arrayidx88 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx87, i64 0, i64 3, !dbg !475
  %34 = load float, float* %arrayidx88, align 4, !dbg !475
  %mul89 = fmul float %33, %34, !dbg !476
  %add90 = fadd float %add84, %mul89, !dbg !477
  %arrayidx91 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !478
  %arrayidx92 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx91, i64 0, i64 3, !dbg !478
  %35 = load float, float* %arrayidx92, align 4, !dbg !478
  %arrayidx93 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !479
  %arrayidx94 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx93, i64 0, i64 3, !dbg !479
  %36 = load float, float* %arrayidx94, align 4, !dbg !479
  %mul95 = fmul float %35, %36, !dbg !480
  %add96 = fadd float %add90, %mul95, !dbg !481
  %37 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !482
  %arrayidx97 = getelementptr inbounds [4 x float], [4 x float]* %37, i64 0, !dbg !482
  %arrayidx98 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx97, i64 0, i64 3, !dbg !482
  store float %add96, float* %arrayidx98, align 4, !dbg !483
  %arrayidx99 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !484
  %arrayidx100 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx99, i64 0, i64 0, !dbg !484
  %38 = load float, float* %arrayidx100, align 16, !dbg !484
  %arrayidx101 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !485
  %arrayidx102 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx101, i64 0, i64 0, !dbg !485
  %39 = load float, float* %arrayidx102, align 16, !dbg !485
  %mul103 = fmul float %38, %39, !dbg !486
  %arrayidx104 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !487
  %arrayidx105 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx104, i64 0, i64 1, !dbg !487
  %40 = load float, float* %arrayidx105, align 4, !dbg !487
  %arrayidx106 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !488
  %arrayidx107 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx106, i64 0, i64 0, !dbg !488
  %41 = load float, float* %arrayidx107, align 16, !dbg !488
  %mul108 = fmul float %40, %41, !dbg !489
  %add109 = fadd float %mul103, %mul108, !dbg !490
  %arrayidx110 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !491
  %arrayidx111 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx110, i64 0, i64 2, !dbg !491
  %42 = load float, float* %arrayidx111, align 8, !dbg !491
  %arrayidx112 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !492
  %arrayidx113 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx112, i64 0, i64 0, !dbg !492
  %43 = load float, float* %arrayidx113, align 16, !dbg !492
  %mul114 = fmul float %42, %43, !dbg !493
  %add115 = fadd float %add109, %mul114, !dbg !494
  %arrayidx116 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !495
  %arrayidx117 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx116, i64 0, i64 3, !dbg !495
  %44 = load float, float* %arrayidx117, align 4, !dbg !495
  %arrayidx118 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !496
  %arrayidx119 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx118, i64 0, i64 0, !dbg !496
  %45 = load float, float* %arrayidx119, align 16, !dbg !496
  %mul120 = fmul float %44, %45, !dbg !497
  %add121 = fadd float %add115, %mul120, !dbg !498
  %46 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !499
  %arrayidx122 = getelementptr inbounds [4 x float], [4 x float]* %46, i64 1, !dbg !499
  %arrayidx123 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx122, i64 0, i64 0, !dbg !499
  store float %add121, float* %arrayidx123, align 4, !dbg !500
  %arrayidx124 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !501
  %arrayidx125 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx124, i64 0, i64 0, !dbg !501
  %47 = load float, float* %arrayidx125, align 16, !dbg !501
  %arrayidx126 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !502
  %arrayidx127 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx126, i64 0, i64 1, !dbg !502
  %48 = load float, float* %arrayidx127, align 4, !dbg !502
  %mul128 = fmul float %47, %48, !dbg !503
  %arrayidx129 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !504
  %arrayidx130 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx129, i64 0, i64 1, !dbg !504
  %49 = load float, float* %arrayidx130, align 4, !dbg !504
  %arrayidx131 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !505
  %arrayidx132 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx131, i64 0, i64 1, !dbg !505
  %50 = load float, float* %arrayidx132, align 4, !dbg !505
  %mul133 = fmul float %49, %50, !dbg !506
  %add134 = fadd float %mul128, %mul133, !dbg !507
  %arrayidx135 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !508
  %arrayidx136 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx135, i64 0, i64 2, !dbg !508
  %51 = load float, float* %arrayidx136, align 8, !dbg !508
  %arrayidx137 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !509
  %arrayidx138 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx137, i64 0, i64 1, !dbg !509
  %52 = load float, float* %arrayidx138, align 4, !dbg !509
  %mul139 = fmul float %51, %52, !dbg !510
  %add140 = fadd float %add134, %mul139, !dbg !511
  %arrayidx141 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !512
  %arrayidx142 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx141, i64 0, i64 3, !dbg !512
  %53 = load float, float* %arrayidx142, align 4, !dbg !512
  %arrayidx143 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !513
  %arrayidx144 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx143, i64 0, i64 1, !dbg !513
  %54 = load float, float* %arrayidx144, align 4, !dbg !513
  %mul145 = fmul float %53, %54, !dbg !514
  %add146 = fadd float %add140, %mul145, !dbg !515
  %55 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !516
  %arrayidx147 = getelementptr inbounds [4 x float], [4 x float]* %55, i64 1, !dbg !516
  %arrayidx148 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx147, i64 0, i64 1, !dbg !516
  store float %add146, float* %arrayidx148, align 4, !dbg !517
  %arrayidx149 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !518
  %arrayidx150 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx149, i64 0, i64 0, !dbg !518
  %56 = load float, float* %arrayidx150, align 16, !dbg !518
  %arrayidx151 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !519
  %arrayidx152 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx151, i64 0, i64 2, !dbg !519
  %57 = load float, float* %arrayidx152, align 8, !dbg !519
  %mul153 = fmul float %56, %57, !dbg !520
  %arrayidx154 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !521
  %arrayidx155 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx154, i64 0, i64 1, !dbg !521
  %58 = load float, float* %arrayidx155, align 4, !dbg !521
  %arrayidx156 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !522
  %arrayidx157 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx156, i64 0, i64 2, !dbg !522
  %59 = load float, float* %arrayidx157, align 8, !dbg !522
  %mul158 = fmul float %58, %59, !dbg !523
  %add159 = fadd float %mul153, %mul158, !dbg !524
  %arrayidx160 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !525
  %arrayidx161 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx160, i64 0, i64 2, !dbg !525
  %60 = load float, float* %arrayidx161, align 8, !dbg !525
  %arrayidx162 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !526
  %arrayidx163 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx162, i64 0, i64 2, !dbg !526
  %61 = load float, float* %arrayidx163, align 8, !dbg !526
  %mul164 = fmul float %60, %61, !dbg !527
  %add165 = fadd float %add159, %mul164, !dbg !528
  %arrayidx166 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !529
  %arrayidx167 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx166, i64 0, i64 3, !dbg !529
  %62 = load float, float* %arrayidx167, align 4, !dbg !529
  %arrayidx168 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !530
  %arrayidx169 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx168, i64 0, i64 2, !dbg !530
  %63 = load float, float* %arrayidx169, align 8, !dbg !530
  %mul170 = fmul float %62, %63, !dbg !531
  %add171 = fadd float %add165, %mul170, !dbg !532
  %64 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !533
  %arrayidx172 = getelementptr inbounds [4 x float], [4 x float]* %64, i64 1, !dbg !533
  %arrayidx173 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx172, i64 0, i64 2, !dbg !533
  store float %add171, float* %arrayidx173, align 4, !dbg !534
  %arrayidx174 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !535
  %arrayidx175 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx174, i64 0, i64 0, !dbg !535
  %65 = load float, float* %arrayidx175, align 16, !dbg !535
  %arrayidx176 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !536
  %arrayidx177 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx176, i64 0, i64 3, !dbg !536
  %66 = load float, float* %arrayidx177, align 4, !dbg !536
  %mul178 = fmul float %65, %66, !dbg !537
  %arrayidx179 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !538
  %arrayidx180 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx179, i64 0, i64 1, !dbg !538
  %67 = load float, float* %arrayidx180, align 4, !dbg !538
  %arrayidx181 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !539
  %arrayidx182 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx181, i64 0, i64 3, !dbg !539
  %68 = load float, float* %arrayidx182, align 4, !dbg !539
  %mul183 = fmul float %67, %68, !dbg !540
  %add184 = fadd float %mul178, %mul183, !dbg !541
  %arrayidx185 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !542
  %arrayidx186 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx185, i64 0, i64 2, !dbg !542
  %69 = load float, float* %arrayidx186, align 8, !dbg !542
  %arrayidx187 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !543
  %arrayidx188 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx187, i64 0, i64 3, !dbg !543
  %70 = load float, float* %arrayidx188, align 4, !dbg !543
  %mul189 = fmul float %69, %70, !dbg !544
  %add190 = fadd float %add184, %mul189, !dbg !545
  %arrayidx191 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !546
  %arrayidx192 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx191, i64 0, i64 3, !dbg !546
  %71 = load float, float* %arrayidx192, align 4, !dbg !546
  %arrayidx193 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !547
  %arrayidx194 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx193, i64 0, i64 3, !dbg !547
  %72 = load float, float* %arrayidx194, align 4, !dbg !547
  %mul195 = fmul float %71, %72, !dbg !548
  %add196 = fadd float %add190, %mul195, !dbg !549
  %73 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !550
  %arrayidx197 = getelementptr inbounds [4 x float], [4 x float]* %73, i64 1, !dbg !550
  %arrayidx198 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx197, i64 0, i64 3, !dbg !550
  store float %add196, float* %arrayidx198, align 4, !dbg !551
  %arrayidx199 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !552
  %arrayidx200 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx199, i64 0, i64 0, !dbg !552
  %74 = load float, float* %arrayidx200, align 16, !dbg !552
  %arrayidx201 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !553
  %arrayidx202 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx201, i64 0, i64 0, !dbg !553
  %75 = load float, float* %arrayidx202, align 16, !dbg !553
  %mul203 = fmul float %74, %75, !dbg !554
  %arrayidx204 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !555
  %arrayidx205 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx204, i64 0, i64 1, !dbg !555
  %76 = load float, float* %arrayidx205, align 4, !dbg !555
  %arrayidx206 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !556
  %arrayidx207 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx206, i64 0, i64 0, !dbg !556
  %77 = load float, float* %arrayidx207, align 16, !dbg !556
  %mul208 = fmul float %76, %77, !dbg !557
  %add209 = fadd float %mul203, %mul208, !dbg !558
  %arrayidx210 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !559
  %arrayidx211 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx210, i64 0, i64 2, !dbg !559
  %78 = load float, float* %arrayidx211, align 8, !dbg !559
  %arrayidx212 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !560
  %arrayidx213 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx212, i64 0, i64 0, !dbg !560
  %79 = load float, float* %arrayidx213, align 16, !dbg !560
  %mul214 = fmul float %78, %79, !dbg !561
  %add215 = fadd float %add209, %mul214, !dbg !562
  %arrayidx216 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !563
  %arrayidx217 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx216, i64 0, i64 3, !dbg !563
  %80 = load float, float* %arrayidx217, align 4, !dbg !563
  %arrayidx218 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !564
  %arrayidx219 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx218, i64 0, i64 0, !dbg !564
  %81 = load float, float* %arrayidx219, align 16, !dbg !564
  %mul220 = fmul float %80, %81, !dbg !565
  %add221 = fadd float %add215, %mul220, !dbg !566
  %82 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !567
  %arrayidx222 = getelementptr inbounds [4 x float], [4 x float]* %82, i64 2, !dbg !567
  %arrayidx223 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx222, i64 0, i64 0, !dbg !567
  store float %add221, float* %arrayidx223, align 4, !dbg !568
  %arrayidx224 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !569
  %arrayidx225 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx224, i64 0, i64 0, !dbg !569
  %83 = load float, float* %arrayidx225, align 16, !dbg !569
  %arrayidx226 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !570
  %arrayidx227 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx226, i64 0, i64 1, !dbg !570
  %84 = load float, float* %arrayidx227, align 4, !dbg !570
  %mul228 = fmul float %83, %84, !dbg !571
  %arrayidx229 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !572
  %arrayidx230 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx229, i64 0, i64 1, !dbg !572
  %85 = load float, float* %arrayidx230, align 4, !dbg !572
  %arrayidx231 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !573
  %arrayidx232 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx231, i64 0, i64 1, !dbg !573
  %86 = load float, float* %arrayidx232, align 4, !dbg !573
  %mul233 = fmul float %85, %86, !dbg !574
  %add234 = fadd float %mul228, %mul233, !dbg !575
  %arrayidx235 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !576
  %arrayidx236 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx235, i64 0, i64 2, !dbg !576
  %87 = load float, float* %arrayidx236, align 8, !dbg !576
  %arrayidx237 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !577
  %arrayidx238 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx237, i64 0, i64 1, !dbg !577
  %88 = load float, float* %arrayidx238, align 4, !dbg !577
  %mul239 = fmul float %87, %88, !dbg !578
  %add240 = fadd float %add234, %mul239, !dbg !579
  %arrayidx241 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !580
  %arrayidx242 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx241, i64 0, i64 3, !dbg !580
  %89 = load float, float* %arrayidx242, align 4, !dbg !580
  %arrayidx243 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !581
  %arrayidx244 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx243, i64 0, i64 1, !dbg !581
  %90 = load float, float* %arrayidx244, align 4, !dbg !581
  %mul245 = fmul float %89, %90, !dbg !582
  %add246 = fadd float %add240, %mul245, !dbg !583
  %91 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !584
  %arrayidx247 = getelementptr inbounds [4 x float], [4 x float]* %91, i64 2, !dbg !584
  %arrayidx248 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx247, i64 0, i64 1, !dbg !584
  store float %add246, float* %arrayidx248, align 4, !dbg !585
  %arrayidx249 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !586
  %arrayidx250 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx249, i64 0, i64 0, !dbg !586
  %92 = load float, float* %arrayidx250, align 16, !dbg !586
  %arrayidx251 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !587
  %arrayidx252 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx251, i64 0, i64 2, !dbg !587
  %93 = load float, float* %arrayidx252, align 8, !dbg !587
  %mul253 = fmul float %92, %93, !dbg !588
  %arrayidx254 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !589
  %arrayidx255 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx254, i64 0, i64 1, !dbg !589
  %94 = load float, float* %arrayidx255, align 4, !dbg !589
  %arrayidx256 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !590
  %arrayidx257 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx256, i64 0, i64 2, !dbg !590
  %95 = load float, float* %arrayidx257, align 8, !dbg !590
  %mul258 = fmul float %94, %95, !dbg !591
  %add259 = fadd float %mul253, %mul258, !dbg !592
  %arrayidx260 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !593
  %arrayidx261 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx260, i64 0, i64 2, !dbg !593
  %96 = load float, float* %arrayidx261, align 8, !dbg !593
  %arrayidx262 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !594
  %arrayidx263 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx262, i64 0, i64 2, !dbg !594
  %97 = load float, float* %arrayidx263, align 8, !dbg !594
  %mul264 = fmul float %96, %97, !dbg !595
  %add265 = fadd float %add259, %mul264, !dbg !596
  %arrayidx266 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !597
  %arrayidx267 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx266, i64 0, i64 3, !dbg !597
  %98 = load float, float* %arrayidx267, align 4, !dbg !597
  %arrayidx268 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !598
  %arrayidx269 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx268, i64 0, i64 2, !dbg !598
  %99 = load float, float* %arrayidx269, align 8, !dbg !598
  %mul270 = fmul float %98, %99, !dbg !599
  %add271 = fadd float %add265, %mul270, !dbg !600
  %100 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !601
  %arrayidx272 = getelementptr inbounds [4 x float], [4 x float]* %100, i64 2, !dbg !601
  %arrayidx273 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx272, i64 0, i64 2, !dbg !601
  store float %add271, float* %arrayidx273, align 4, !dbg !602
  %arrayidx274 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !603
  %arrayidx275 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx274, i64 0, i64 0, !dbg !603
  %101 = load float, float* %arrayidx275, align 16, !dbg !603
  %arrayidx276 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !604
  %arrayidx277 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx276, i64 0, i64 3, !dbg !604
  %102 = load float, float* %arrayidx277, align 4, !dbg !604
  %mul278 = fmul float %101, %102, !dbg !605
  %arrayidx279 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !606
  %arrayidx280 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx279, i64 0, i64 1, !dbg !606
  %103 = load float, float* %arrayidx280, align 4, !dbg !606
  %arrayidx281 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !607
  %arrayidx282 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx281, i64 0, i64 3, !dbg !607
  %104 = load float, float* %arrayidx282, align 4, !dbg !607
  %mul283 = fmul float %103, %104, !dbg !608
  %add284 = fadd float %mul278, %mul283, !dbg !609
  %arrayidx285 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !610
  %arrayidx286 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx285, i64 0, i64 2, !dbg !610
  %105 = load float, float* %arrayidx286, align 8, !dbg !610
  %arrayidx287 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !611
  %arrayidx288 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx287, i64 0, i64 3, !dbg !611
  %106 = load float, float* %arrayidx288, align 4, !dbg !611
  %mul289 = fmul float %105, %106, !dbg !612
  %add290 = fadd float %add284, %mul289, !dbg !613
  %arrayidx291 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !614
  %arrayidx292 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx291, i64 0, i64 3, !dbg !614
  %107 = load float, float* %arrayidx292, align 4, !dbg !614
  %arrayidx293 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !615
  %arrayidx294 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx293, i64 0, i64 3, !dbg !615
  %108 = load float, float* %arrayidx294, align 4, !dbg !615
  %mul295 = fmul float %107, %108, !dbg !616
  %add296 = fadd float %add290, %mul295, !dbg !617
  %109 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !618
  %arrayidx297 = getelementptr inbounds [4 x float], [4 x float]* %109, i64 2, !dbg !618
  %arrayidx298 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx297, i64 0, i64 3, !dbg !618
  store float %add296, float* %arrayidx298, align 4, !dbg !619
  %arrayidx299 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !620
  %arrayidx300 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx299, i64 0, i64 0, !dbg !620
  %110 = load float, float* %arrayidx300, align 16, !dbg !620
  %arrayidx301 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !621
  %arrayidx302 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx301, i64 0, i64 0, !dbg !621
  %111 = load float, float* %arrayidx302, align 16, !dbg !621
  %mul303 = fmul float %110, %111, !dbg !622
  %arrayidx304 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !623
  %arrayidx305 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx304, i64 0, i64 1, !dbg !623
  %112 = load float, float* %arrayidx305, align 4, !dbg !623
  %arrayidx306 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !624
  %arrayidx307 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx306, i64 0, i64 0, !dbg !624
  %113 = load float, float* %arrayidx307, align 16, !dbg !624
  %mul308 = fmul float %112, %113, !dbg !625
  %add309 = fadd float %mul303, %mul308, !dbg !626
  %arrayidx310 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !627
  %arrayidx311 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx310, i64 0, i64 2, !dbg !627
  %114 = load float, float* %arrayidx311, align 8, !dbg !627
  %arrayidx312 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !628
  %arrayidx313 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx312, i64 0, i64 0, !dbg !628
  %115 = load float, float* %arrayidx313, align 16, !dbg !628
  %mul314 = fmul float %114, %115, !dbg !629
  %add315 = fadd float %add309, %mul314, !dbg !630
  %arrayidx316 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !631
  %arrayidx317 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx316, i64 0, i64 3, !dbg !631
  %116 = load float, float* %arrayidx317, align 4, !dbg !631
  %arrayidx318 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !632
  %arrayidx319 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx318, i64 0, i64 0, !dbg !632
  %117 = load float, float* %arrayidx319, align 16, !dbg !632
  %mul320 = fmul float %116, %117, !dbg !633
  %add321 = fadd float %add315, %mul320, !dbg !634
  %118 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !635
  %arrayidx322 = getelementptr inbounds [4 x float], [4 x float]* %118, i64 3, !dbg !635
  %arrayidx323 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx322, i64 0, i64 0, !dbg !635
  store float %add321, float* %arrayidx323, align 4, !dbg !636
  %arrayidx324 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !637
  %arrayidx325 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx324, i64 0, i64 0, !dbg !637
  %119 = load float, float* %arrayidx325, align 16, !dbg !637
  %arrayidx326 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !638
  %arrayidx327 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx326, i64 0, i64 1, !dbg !638
  %120 = load float, float* %arrayidx327, align 4, !dbg !638
  %mul328 = fmul float %119, %120, !dbg !639
  %arrayidx329 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !640
  %arrayidx330 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx329, i64 0, i64 1, !dbg !640
  %121 = load float, float* %arrayidx330, align 4, !dbg !640
  %arrayidx331 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !641
  %arrayidx332 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx331, i64 0, i64 1, !dbg !641
  %122 = load float, float* %arrayidx332, align 4, !dbg !641
  %mul333 = fmul float %121, %122, !dbg !642
  %add334 = fadd float %mul328, %mul333, !dbg !643
  %arrayidx335 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !644
  %arrayidx336 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx335, i64 0, i64 2, !dbg !644
  %123 = load float, float* %arrayidx336, align 8, !dbg !644
  %arrayidx337 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !645
  %arrayidx338 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx337, i64 0, i64 1, !dbg !645
  %124 = load float, float* %arrayidx338, align 4, !dbg !645
  %mul339 = fmul float %123, %124, !dbg !646
  %add340 = fadd float %add334, %mul339, !dbg !647
  %arrayidx341 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !648
  %arrayidx342 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx341, i64 0, i64 3, !dbg !648
  %125 = load float, float* %arrayidx342, align 4, !dbg !648
  %arrayidx343 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !649
  %arrayidx344 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx343, i64 0, i64 1, !dbg !649
  %126 = load float, float* %arrayidx344, align 4, !dbg !649
  %mul345 = fmul float %125, %126, !dbg !650
  %add346 = fadd float %add340, %mul345, !dbg !651
  %127 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !652
  %arrayidx347 = getelementptr inbounds [4 x float], [4 x float]* %127, i64 3, !dbg !652
  %arrayidx348 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx347, i64 0, i64 1, !dbg !652
  store float %add346, float* %arrayidx348, align 4, !dbg !653
  %arrayidx349 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !654
  %arrayidx350 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx349, i64 0, i64 0, !dbg !654
  %128 = load float, float* %arrayidx350, align 16, !dbg !654
  %arrayidx351 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !655
  %arrayidx352 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx351, i64 0, i64 2, !dbg !655
  %129 = load float, float* %arrayidx352, align 8, !dbg !655
  %mul353 = fmul float %128, %129, !dbg !656
  %arrayidx354 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !657
  %arrayidx355 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx354, i64 0, i64 1, !dbg !657
  %130 = load float, float* %arrayidx355, align 4, !dbg !657
  %arrayidx356 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !658
  %arrayidx357 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx356, i64 0, i64 2, !dbg !658
  %131 = load float, float* %arrayidx357, align 8, !dbg !658
  %mul358 = fmul float %130, %131, !dbg !659
  %add359 = fadd float %mul353, %mul358, !dbg !660
  %arrayidx360 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !661
  %arrayidx361 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx360, i64 0, i64 2, !dbg !661
  %132 = load float, float* %arrayidx361, align 8, !dbg !661
  %arrayidx362 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !662
  %arrayidx363 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx362, i64 0, i64 2, !dbg !662
  %133 = load float, float* %arrayidx363, align 8, !dbg !662
  %mul364 = fmul float %132, %133, !dbg !663
  %add365 = fadd float %add359, %mul364, !dbg !664
  %arrayidx366 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !665
  %arrayidx367 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx366, i64 0, i64 3, !dbg !665
  %134 = load float, float* %arrayidx367, align 4, !dbg !665
  %arrayidx368 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !666
  %arrayidx369 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx368, i64 0, i64 2, !dbg !666
  %135 = load float, float* %arrayidx369, align 8, !dbg !666
  %mul370 = fmul float %134, %135, !dbg !667
  %add371 = fadd float %add365, %mul370, !dbg !668
  %136 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !669
  %arrayidx372 = getelementptr inbounds [4 x float], [4 x float]* %136, i64 3, !dbg !669
  %arrayidx373 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx372, i64 0, i64 2, !dbg !669
  store float %add371, float* %arrayidx373, align 4, !dbg !670
  %arrayidx374 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !671
  %arrayidx375 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx374, i64 0, i64 0, !dbg !671
  %137 = load float, float* %arrayidx375, align 16, !dbg !671
  %arrayidx376 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !672
  %arrayidx377 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx376, i64 0, i64 3, !dbg !672
  %138 = load float, float* %arrayidx377, align 4, !dbg !672
  %mul378 = fmul float %137, %138, !dbg !673
  %arrayidx379 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !674
  %arrayidx380 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx379, i64 0, i64 1, !dbg !674
  %139 = load float, float* %arrayidx380, align 4, !dbg !674
  %arrayidx381 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !675
  %arrayidx382 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx381, i64 0, i64 3, !dbg !675
  %140 = load float, float* %arrayidx382, align 4, !dbg !675
  %mul383 = fmul float %139, %140, !dbg !676
  %add384 = fadd float %mul378, %mul383, !dbg !677
  %arrayidx385 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !678
  %arrayidx386 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx385, i64 0, i64 2, !dbg !678
  %141 = load float, float* %arrayidx386, align 8, !dbg !678
  %arrayidx387 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !679
  %arrayidx388 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx387, i64 0, i64 3, !dbg !679
  %142 = load float, float* %arrayidx388, align 4, !dbg !679
  %mul389 = fmul float %141, %142, !dbg !680
  %add390 = fadd float %add384, %mul389, !dbg !681
  %arrayidx391 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 3, !dbg !682
  %arrayidx392 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx391, i64 0, i64 3, !dbg !682
  %143 = load float, float* %arrayidx392, align 4, !dbg !682
  %arrayidx393 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 3, !dbg !683
  %arrayidx394 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx393, i64 0, i64 3, !dbg !683
  %144 = load float, float* %arrayidx394, align 4, !dbg !683
  %mul395 = fmul float %143, %144, !dbg !684
  %add396 = fadd float %add390, %mul395, !dbg !685
  %145 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !686
  %arrayidx397 = getelementptr inbounds [4 x float], [4 x float]* %145, i64 3, !dbg !686
  %arrayidx398 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx397, i64 0, i64 3, !dbg !686
  store float %add396, float* %arrayidx398, align 4, !dbg !687
  ret void, !dbg !688
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m3_m3m3([3 x float]* %m1, [3 x float]* %m3_, [3 x float]* %m2_) #0 !dbg !689 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m3_.addr = alloca [3 x float]*, align 8
  %m2_.addr = alloca [3 x float]*, align 8
  %m2 = alloca [3 x [3 x float]], align 16
  %m3 = alloca [3 x [3 x float]], align 16
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !692, metadata !DIExpression()), !dbg !693
  store [3 x float]* %m3_, [3 x float]** %m3_.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3_.addr, metadata !694, metadata !DIExpression()), !dbg !695
  store [3 x float]* %m2_, [3 x float]** %m2_.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2_.addr, metadata !696, metadata !DIExpression()), !dbg !697
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %m2, metadata !698, metadata !DIExpression()), !dbg !701
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %m3, metadata !702, metadata !DIExpression()), !dbg !703
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !704
  %0 = load [3 x float]*, [3 x float]** %m2_.addr, align 8, !dbg !705
  call void @copy_m3_m3([3 x float]* %arraydecay, [3 x float]* %0), !dbg !706
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !707
  %1 = load [3 x float]*, [3 x float]** %m3_.addr, align 8, !dbg !708
  call void @copy_m3_m3([3 x float]* %arraydecay1, [3 x float]* %1), !dbg !709
  %arrayidx = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !710
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !710
  %2 = load float, float* %arrayidx2, align 16, !dbg !710
  %arrayidx3 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !711
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 0, !dbg !711
  %3 = load float, float* %arrayidx4, align 16, !dbg !711
  %mul = fmul float %2, %3, !dbg !712
  %arrayidx5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !713
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 1, !dbg !713
  %4 = load float, float* %arrayidx6, align 4, !dbg !713
  %arrayidx7 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !714
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 0, !dbg !714
  %5 = load float, float* %arrayidx8, align 4, !dbg !714
  %mul9 = fmul float %4, %5, !dbg !715
  %add = fadd float %mul, %mul9, !dbg !716
  %arrayidx10 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !717
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 2, !dbg !717
  %6 = load float, float* %arrayidx11, align 8, !dbg !717
  %arrayidx12 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !718
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !718
  %7 = load float, float* %arrayidx13, align 8, !dbg !718
  %mul14 = fmul float %6, %7, !dbg !719
  %add15 = fadd float %add, %mul14, !dbg !720
  %8 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !721
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, !dbg !721
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 0, !dbg !721
  store float %add15, float* %arrayidx17, align 4, !dbg !722
  %arrayidx18 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !723
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 0, !dbg !723
  %9 = load float, float* %arrayidx19, align 16, !dbg !723
  %arrayidx20 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !724
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx20, i64 0, i64 1, !dbg !724
  %10 = load float, float* %arrayidx21, align 4, !dbg !724
  %mul22 = fmul float %9, %10, !dbg !725
  %arrayidx23 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !726
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx23, i64 0, i64 1, !dbg !726
  %11 = load float, float* %arrayidx24, align 4, !dbg !726
  %arrayidx25 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !727
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx25, i64 0, i64 1, !dbg !727
  %12 = load float, float* %arrayidx26, align 4, !dbg !727
  %mul27 = fmul float %11, %12, !dbg !728
  %add28 = fadd float %mul22, %mul27, !dbg !729
  %arrayidx29 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !730
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 2, !dbg !730
  %13 = load float, float* %arrayidx30, align 8, !dbg !730
  %arrayidx31 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !731
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx31, i64 0, i64 1, !dbg !731
  %14 = load float, float* %arrayidx32, align 4, !dbg !731
  %mul33 = fmul float %13, %14, !dbg !732
  %add34 = fadd float %add28, %mul33, !dbg !733
  %15 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !734
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 0, !dbg !734
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx35, i64 0, i64 1, !dbg !734
  store float %add34, float* %arrayidx36, align 4, !dbg !735
  %arrayidx37 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !736
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx37, i64 0, i64 0, !dbg !736
  %16 = load float, float* %arrayidx38, align 16, !dbg !736
  %arrayidx39 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !737
  %arrayidx40 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx39, i64 0, i64 2, !dbg !737
  %17 = load float, float* %arrayidx40, align 8, !dbg !737
  %mul41 = fmul float %16, %17, !dbg !738
  %arrayidx42 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !739
  %arrayidx43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 1, !dbg !739
  %18 = load float, float* %arrayidx43, align 4, !dbg !739
  %arrayidx44 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !740
  %arrayidx45 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx44, i64 0, i64 2, !dbg !740
  %19 = load float, float* %arrayidx45, align 4, !dbg !740
  %mul46 = fmul float %18, %19, !dbg !741
  %add47 = fadd float %mul41, %mul46, !dbg !742
  %arrayidx48 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !743
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx48, i64 0, i64 2, !dbg !743
  %20 = load float, float* %arrayidx49, align 8, !dbg !743
  %arrayidx50 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !744
  %arrayidx51 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx50, i64 0, i64 2, !dbg !744
  %21 = load float, float* %arrayidx51, align 8, !dbg !744
  %mul52 = fmul float %20, %21, !dbg !745
  %add53 = fadd float %add47, %mul52, !dbg !746
  %22 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !747
  %arrayidx54 = getelementptr inbounds [3 x float], [3 x float]* %22, i64 0, !dbg !747
  %arrayidx55 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx54, i64 0, i64 2, !dbg !747
  store float %add53, float* %arrayidx55, align 4, !dbg !748
  %arrayidx56 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !749
  %arrayidx57 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx56, i64 0, i64 0, !dbg !749
  %23 = load float, float* %arrayidx57, align 4, !dbg !749
  %arrayidx58 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !750
  %arrayidx59 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx58, i64 0, i64 0, !dbg !750
  %24 = load float, float* %arrayidx59, align 16, !dbg !750
  %mul60 = fmul float %23, %24, !dbg !751
  %arrayidx61 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !752
  %arrayidx62 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx61, i64 0, i64 1, !dbg !752
  %25 = load float, float* %arrayidx62, align 4, !dbg !752
  %arrayidx63 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !753
  %arrayidx64 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx63, i64 0, i64 0, !dbg !753
  %26 = load float, float* %arrayidx64, align 4, !dbg !753
  %mul65 = fmul float %25, %26, !dbg !754
  %add66 = fadd float %mul60, %mul65, !dbg !755
  %arrayidx67 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !756
  %arrayidx68 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx67, i64 0, i64 2, !dbg !756
  %27 = load float, float* %arrayidx68, align 4, !dbg !756
  %arrayidx69 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !757
  %arrayidx70 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx69, i64 0, i64 0, !dbg !757
  %28 = load float, float* %arrayidx70, align 8, !dbg !757
  %mul71 = fmul float %27, %28, !dbg !758
  %add72 = fadd float %add66, %mul71, !dbg !759
  %29 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !760
  %arrayidx73 = getelementptr inbounds [3 x float], [3 x float]* %29, i64 1, !dbg !760
  %arrayidx74 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx73, i64 0, i64 0, !dbg !760
  store float %add72, float* %arrayidx74, align 4, !dbg !761
  %arrayidx75 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !762
  %arrayidx76 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx75, i64 0, i64 0, !dbg !762
  %30 = load float, float* %arrayidx76, align 4, !dbg !762
  %arrayidx77 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !763
  %arrayidx78 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx77, i64 0, i64 1, !dbg !763
  %31 = load float, float* %arrayidx78, align 4, !dbg !763
  %mul79 = fmul float %30, %31, !dbg !764
  %arrayidx80 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !765
  %arrayidx81 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx80, i64 0, i64 1, !dbg !765
  %32 = load float, float* %arrayidx81, align 4, !dbg !765
  %arrayidx82 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !766
  %arrayidx83 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx82, i64 0, i64 1, !dbg !766
  %33 = load float, float* %arrayidx83, align 4, !dbg !766
  %mul84 = fmul float %32, %33, !dbg !767
  %add85 = fadd float %mul79, %mul84, !dbg !768
  %arrayidx86 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !769
  %arrayidx87 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx86, i64 0, i64 2, !dbg !769
  %34 = load float, float* %arrayidx87, align 4, !dbg !769
  %arrayidx88 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !770
  %arrayidx89 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx88, i64 0, i64 1, !dbg !770
  %35 = load float, float* %arrayidx89, align 4, !dbg !770
  %mul90 = fmul float %34, %35, !dbg !771
  %add91 = fadd float %add85, %mul90, !dbg !772
  %36 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !773
  %arrayidx92 = getelementptr inbounds [3 x float], [3 x float]* %36, i64 1, !dbg !773
  %arrayidx93 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx92, i64 0, i64 1, !dbg !773
  store float %add91, float* %arrayidx93, align 4, !dbg !774
  %arrayidx94 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !775
  %arrayidx95 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx94, i64 0, i64 0, !dbg !775
  %37 = load float, float* %arrayidx95, align 4, !dbg !775
  %arrayidx96 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !776
  %arrayidx97 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx96, i64 0, i64 2, !dbg !776
  %38 = load float, float* %arrayidx97, align 8, !dbg !776
  %mul98 = fmul float %37, %38, !dbg !777
  %arrayidx99 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !778
  %arrayidx100 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx99, i64 0, i64 1, !dbg !778
  %39 = load float, float* %arrayidx100, align 4, !dbg !778
  %arrayidx101 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !779
  %arrayidx102 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx101, i64 0, i64 2, !dbg !779
  %40 = load float, float* %arrayidx102, align 4, !dbg !779
  %mul103 = fmul float %39, %40, !dbg !780
  %add104 = fadd float %mul98, %mul103, !dbg !781
  %arrayidx105 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !782
  %arrayidx106 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx105, i64 0, i64 2, !dbg !782
  %41 = load float, float* %arrayidx106, align 4, !dbg !782
  %arrayidx107 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !783
  %arrayidx108 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx107, i64 0, i64 2, !dbg !783
  %42 = load float, float* %arrayidx108, align 8, !dbg !783
  %mul109 = fmul float %41, %42, !dbg !784
  %add110 = fadd float %add104, %mul109, !dbg !785
  %43 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !786
  %arrayidx111 = getelementptr inbounds [3 x float], [3 x float]* %43, i64 1, !dbg !786
  %arrayidx112 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx111, i64 0, i64 2, !dbg !786
  store float %add110, float* %arrayidx112, align 4, !dbg !787
  %arrayidx113 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !788
  %arrayidx114 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx113, i64 0, i64 0, !dbg !788
  %44 = load float, float* %arrayidx114, align 8, !dbg !788
  %arrayidx115 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !789
  %arrayidx116 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx115, i64 0, i64 0, !dbg !789
  %45 = load float, float* %arrayidx116, align 16, !dbg !789
  %mul117 = fmul float %44, %45, !dbg !790
  %arrayidx118 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !791
  %arrayidx119 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx118, i64 0, i64 1, !dbg !791
  %46 = load float, float* %arrayidx119, align 4, !dbg !791
  %arrayidx120 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !792
  %arrayidx121 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx120, i64 0, i64 0, !dbg !792
  %47 = load float, float* %arrayidx121, align 4, !dbg !792
  %mul122 = fmul float %46, %47, !dbg !793
  %add123 = fadd float %mul117, %mul122, !dbg !794
  %arrayidx124 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !795
  %arrayidx125 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx124, i64 0, i64 2, !dbg !795
  %48 = load float, float* %arrayidx125, align 8, !dbg !795
  %arrayidx126 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !796
  %arrayidx127 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx126, i64 0, i64 0, !dbg !796
  %49 = load float, float* %arrayidx127, align 8, !dbg !796
  %mul128 = fmul float %48, %49, !dbg !797
  %add129 = fadd float %add123, %mul128, !dbg !798
  %50 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !799
  %arrayidx130 = getelementptr inbounds [3 x float], [3 x float]* %50, i64 2, !dbg !799
  %arrayidx131 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx130, i64 0, i64 0, !dbg !799
  store float %add129, float* %arrayidx131, align 4, !dbg !800
  %arrayidx132 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !801
  %arrayidx133 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx132, i64 0, i64 0, !dbg !801
  %51 = load float, float* %arrayidx133, align 8, !dbg !801
  %arrayidx134 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !802
  %arrayidx135 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx134, i64 0, i64 1, !dbg !802
  %52 = load float, float* %arrayidx135, align 4, !dbg !802
  %mul136 = fmul float %51, %52, !dbg !803
  %arrayidx137 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !804
  %arrayidx138 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx137, i64 0, i64 1, !dbg !804
  %53 = load float, float* %arrayidx138, align 4, !dbg !804
  %arrayidx139 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !805
  %arrayidx140 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx139, i64 0, i64 1, !dbg !805
  %54 = load float, float* %arrayidx140, align 4, !dbg !805
  %mul141 = fmul float %53, %54, !dbg !806
  %add142 = fadd float %mul136, %mul141, !dbg !807
  %arrayidx143 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !808
  %arrayidx144 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx143, i64 0, i64 2, !dbg !808
  %55 = load float, float* %arrayidx144, align 8, !dbg !808
  %arrayidx145 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !809
  %arrayidx146 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx145, i64 0, i64 1, !dbg !809
  %56 = load float, float* %arrayidx146, align 4, !dbg !809
  %mul147 = fmul float %55, %56, !dbg !810
  %add148 = fadd float %add142, %mul147, !dbg !811
  %57 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !812
  %arrayidx149 = getelementptr inbounds [3 x float], [3 x float]* %57, i64 2, !dbg !812
  %arrayidx150 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx149, i64 0, i64 1, !dbg !812
  store float %add148, float* %arrayidx150, align 4, !dbg !813
  %arrayidx151 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !814
  %arrayidx152 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx151, i64 0, i64 0, !dbg !814
  %58 = load float, float* %arrayidx152, align 8, !dbg !814
  %arrayidx153 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !815
  %arrayidx154 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx153, i64 0, i64 2, !dbg !815
  %59 = load float, float* %arrayidx154, align 8, !dbg !815
  %mul155 = fmul float %58, %59, !dbg !816
  %arrayidx156 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !817
  %arrayidx157 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx156, i64 0, i64 1, !dbg !817
  %60 = load float, float* %arrayidx157, align 4, !dbg !817
  %arrayidx158 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !818
  %arrayidx159 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx158, i64 0, i64 2, !dbg !818
  %61 = load float, float* %arrayidx159, align 4, !dbg !818
  %mul160 = fmul float %60, %61, !dbg !819
  %add161 = fadd float %mul155, %mul160, !dbg !820
  %arrayidx162 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !821
  %arrayidx163 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx162, i64 0, i64 2, !dbg !821
  %62 = load float, float* %arrayidx163, align 8, !dbg !821
  %arrayidx164 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !822
  %arrayidx165 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx164, i64 0, i64 2, !dbg !822
  %63 = load float, float* %arrayidx165, align 8, !dbg !822
  %mul166 = fmul float %62, %63, !dbg !823
  %add167 = fadd float %add161, %mul166, !dbg !824
  %64 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !825
  %arrayidx168 = getelementptr inbounds [3 x float], [3 x float]* %64, i64 2, !dbg !825
  %arrayidx169 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx168, i64 0, i64 2, !dbg !825
  store float %add167, float* %arrayidx169, align 4, !dbg !826
  ret void, !dbg !827
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_m4m3([4 x float]* %m1, [4 x float]* %m3_, [3 x float]* %m2_) #0 !dbg !828 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m3_.addr = alloca [4 x float]*, align 8
  %m2_.addr = alloca [3 x float]*, align 8
  %m2 = alloca [3 x [3 x float]], align 16
  %m3 = alloca [4 x [4 x float]], align 16
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !831, metadata !DIExpression()), !dbg !832
  store [4 x float]* %m3_, [4 x float]** %m3_.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3_.addr, metadata !833, metadata !DIExpression()), !dbg !834
  store [3 x float]* %m2_, [3 x float]** %m2_.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2_.addr, metadata !835, metadata !DIExpression()), !dbg !836
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %m2, metadata !837, metadata !DIExpression()), !dbg !838
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m3, metadata !839, metadata !DIExpression()), !dbg !840
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !841
  %0 = load [3 x float]*, [3 x float]** %m2_.addr, align 8, !dbg !842
  call void @copy_m3_m3([3 x float]* %arraydecay, [3 x float]* %0), !dbg !843
  %arraydecay1 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !844
  %1 = load [4 x float]*, [4 x float]** %m3_.addr, align 8, !dbg !845
  call void @copy_m4_m4([4 x float]* %arraydecay1, [4 x float]* %1), !dbg !846
  %arrayidx = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !847
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !847
  %2 = load float, float* %arrayidx2, align 16, !dbg !847
  %arrayidx3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !848
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !848
  %3 = load float, float* %arrayidx4, align 16, !dbg !848
  %mul = fmul float %2, %3, !dbg !849
  %arrayidx5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !850
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 1, !dbg !850
  %4 = load float, float* %arrayidx6, align 4, !dbg !850
  %arrayidx7 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !851
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !851
  %5 = load float, float* %arrayidx8, align 16, !dbg !851
  %mul9 = fmul float %4, %5, !dbg !852
  %add = fadd float %mul, %mul9, !dbg !853
  %arrayidx10 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !854
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 2, !dbg !854
  %6 = load float, float* %arrayidx11, align 8, !dbg !854
  %arrayidx12 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !855
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !855
  %7 = load float, float* %arrayidx13, align 16, !dbg !855
  %mul14 = fmul float %6, %7, !dbg !856
  %add15 = fadd float %add, %mul14, !dbg !857
  %8 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !858
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, !dbg !858
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 0, !dbg !858
  store float %add15, float* %arrayidx17, align 4, !dbg !859
  %arrayidx18 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !860
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 0, !dbg !860
  %9 = load float, float* %arrayidx19, align 16, !dbg !860
  %arrayidx20 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !861
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 1, !dbg !861
  %10 = load float, float* %arrayidx21, align 4, !dbg !861
  %mul22 = fmul float %9, %10, !dbg !862
  %arrayidx23 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !863
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx23, i64 0, i64 1, !dbg !863
  %11 = load float, float* %arrayidx24, align 4, !dbg !863
  %arrayidx25 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !864
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 1, !dbg !864
  %12 = load float, float* %arrayidx26, align 4, !dbg !864
  %mul27 = fmul float %11, %12, !dbg !865
  %add28 = fadd float %mul22, %mul27, !dbg !866
  %arrayidx29 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !867
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 2, !dbg !867
  %13 = load float, float* %arrayidx30, align 8, !dbg !867
  %arrayidx31 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !868
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 1, !dbg !868
  %14 = load float, float* %arrayidx32, align 4, !dbg !868
  %mul33 = fmul float %13, %14, !dbg !869
  %add34 = fadd float %add28, %mul33, !dbg !870
  %15 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !871
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, !dbg !871
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 1, !dbg !871
  store float %add34, float* %arrayidx36, align 4, !dbg !872
  %arrayidx37 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !873
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx37, i64 0, i64 0, !dbg !873
  %16 = load float, float* %arrayidx38, align 16, !dbg !873
  %arrayidx39 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !874
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx39, i64 0, i64 2, !dbg !874
  %17 = load float, float* %arrayidx40, align 8, !dbg !874
  %mul41 = fmul float %16, %17, !dbg !875
  %arrayidx42 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !876
  %arrayidx43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 1, !dbg !876
  %18 = load float, float* %arrayidx43, align 4, !dbg !876
  %arrayidx44 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !877
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 2, !dbg !877
  %19 = load float, float* %arrayidx45, align 8, !dbg !877
  %mul46 = fmul float %18, %19, !dbg !878
  %add47 = fadd float %mul41, %mul46, !dbg !879
  %arrayidx48 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !880
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx48, i64 0, i64 2, !dbg !880
  %20 = load float, float* %arrayidx49, align 8, !dbg !880
  %arrayidx50 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !881
  %arrayidx51 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx50, i64 0, i64 2, !dbg !881
  %21 = load float, float* %arrayidx51, align 8, !dbg !881
  %mul52 = fmul float %20, %21, !dbg !882
  %add53 = fadd float %add47, %mul52, !dbg !883
  %22 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !884
  %arrayidx54 = getelementptr inbounds [4 x float], [4 x float]* %22, i64 0, !dbg !884
  %arrayidx55 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx54, i64 0, i64 2, !dbg !884
  store float %add53, float* %arrayidx55, align 4, !dbg !885
  %arrayidx56 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !886
  %arrayidx57 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx56, i64 0, i64 0, !dbg !886
  %23 = load float, float* %arrayidx57, align 4, !dbg !886
  %arrayidx58 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !887
  %arrayidx59 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx58, i64 0, i64 0, !dbg !887
  %24 = load float, float* %arrayidx59, align 16, !dbg !887
  %mul60 = fmul float %23, %24, !dbg !888
  %arrayidx61 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !889
  %arrayidx62 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx61, i64 0, i64 1, !dbg !889
  %25 = load float, float* %arrayidx62, align 4, !dbg !889
  %arrayidx63 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !890
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx63, i64 0, i64 0, !dbg !890
  %26 = load float, float* %arrayidx64, align 16, !dbg !890
  %mul65 = fmul float %25, %26, !dbg !891
  %add66 = fadd float %mul60, %mul65, !dbg !892
  %arrayidx67 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !893
  %arrayidx68 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx67, i64 0, i64 2, !dbg !893
  %27 = load float, float* %arrayidx68, align 4, !dbg !893
  %arrayidx69 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !894
  %arrayidx70 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx69, i64 0, i64 0, !dbg !894
  %28 = load float, float* %arrayidx70, align 16, !dbg !894
  %mul71 = fmul float %27, %28, !dbg !895
  %add72 = fadd float %add66, %mul71, !dbg !896
  %29 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !897
  %arrayidx73 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 1, !dbg !897
  %arrayidx74 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx73, i64 0, i64 0, !dbg !897
  store float %add72, float* %arrayidx74, align 4, !dbg !898
  %arrayidx75 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !899
  %arrayidx76 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx75, i64 0, i64 0, !dbg !899
  %30 = load float, float* %arrayidx76, align 4, !dbg !899
  %arrayidx77 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !900
  %arrayidx78 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx77, i64 0, i64 1, !dbg !900
  %31 = load float, float* %arrayidx78, align 4, !dbg !900
  %mul79 = fmul float %30, %31, !dbg !901
  %arrayidx80 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !902
  %arrayidx81 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx80, i64 0, i64 1, !dbg !902
  %32 = load float, float* %arrayidx81, align 4, !dbg !902
  %arrayidx82 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !903
  %arrayidx83 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx82, i64 0, i64 1, !dbg !903
  %33 = load float, float* %arrayidx83, align 4, !dbg !903
  %mul84 = fmul float %32, %33, !dbg !904
  %add85 = fadd float %mul79, %mul84, !dbg !905
  %arrayidx86 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !906
  %arrayidx87 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx86, i64 0, i64 2, !dbg !906
  %34 = load float, float* %arrayidx87, align 4, !dbg !906
  %arrayidx88 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !907
  %arrayidx89 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx88, i64 0, i64 1, !dbg !907
  %35 = load float, float* %arrayidx89, align 4, !dbg !907
  %mul90 = fmul float %34, %35, !dbg !908
  %add91 = fadd float %add85, %mul90, !dbg !909
  %36 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !910
  %arrayidx92 = getelementptr inbounds [4 x float], [4 x float]* %36, i64 1, !dbg !910
  %arrayidx93 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx92, i64 0, i64 1, !dbg !910
  store float %add91, float* %arrayidx93, align 4, !dbg !911
  %arrayidx94 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !912
  %arrayidx95 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx94, i64 0, i64 0, !dbg !912
  %37 = load float, float* %arrayidx95, align 4, !dbg !912
  %arrayidx96 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !913
  %arrayidx97 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx96, i64 0, i64 2, !dbg !913
  %38 = load float, float* %arrayidx97, align 8, !dbg !913
  %mul98 = fmul float %37, %38, !dbg !914
  %arrayidx99 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !915
  %arrayidx100 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx99, i64 0, i64 1, !dbg !915
  %39 = load float, float* %arrayidx100, align 4, !dbg !915
  %arrayidx101 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !916
  %arrayidx102 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx101, i64 0, i64 2, !dbg !916
  %40 = load float, float* %arrayidx102, align 8, !dbg !916
  %mul103 = fmul float %39, %40, !dbg !917
  %add104 = fadd float %mul98, %mul103, !dbg !918
  %arrayidx105 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !919
  %arrayidx106 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx105, i64 0, i64 2, !dbg !919
  %41 = load float, float* %arrayidx106, align 4, !dbg !919
  %arrayidx107 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !920
  %arrayidx108 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx107, i64 0, i64 2, !dbg !920
  %42 = load float, float* %arrayidx108, align 8, !dbg !920
  %mul109 = fmul float %41, %42, !dbg !921
  %add110 = fadd float %add104, %mul109, !dbg !922
  %43 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !923
  %arrayidx111 = getelementptr inbounds [4 x float], [4 x float]* %43, i64 1, !dbg !923
  %arrayidx112 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx111, i64 0, i64 2, !dbg !923
  store float %add110, float* %arrayidx112, align 4, !dbg !924
  %arrayidx113 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !925
  %arrayidx114 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx113, i64 0, i64 0, !dbg !925
  %44 = load float, float* %arrayidx114, align 8, !dbg !925
  %arrayidx115 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !926
  %arrayidx116 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx115, i64 0, i64 0, !dbg !926
  %45 = load float, float* %arrayidx116, align 16, !dbg !926
  %mul117 = fmul float %44, %45, !dbg !927
  %arrayidx118 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !928
  %arrayidx119 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx118, i64 0, i64 1, !dbg !928
  %46 = load float, float* %arrayidx119, align 4, !dbg !928
  %arrayidx120 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !929
  %arrayidx121 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx120, i64 0, i64 0, !dbg !929
  %47 = load float, float* %arrayidx121, align 16, !dbg !929
  %mul122 = fmul float %46, %47, !dbg !930
  %add123 = fadd float %mul117, %mul122, !dbg !931
  %arrayidx124 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !932
  %arrayidx125 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx124, i64 0, i64 2, !dbg !932
  %48 = load float, float* %arrayidx125, align 8, !dbg !932
  %arrayidx126 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !933
  %arrayidx127 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx126, i64 0, i64 0, !dbg !933
  %49 = load float, float* %arrayidx127, align 16, !dbg !933
  %mul128 = fmul float %48, %49, !dbg !934
  %add129 = fadd float %add123, %mul128, !dbg !935
  %50 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !936
  %arrayidx130 = getelementptr inbounds [4 x float], [4 x float]* %50, i64 2, !dbg !936
  %arrayidx131 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx130, i64 0, i64 0, !dbg !936
  store float %add129, float* %arrayidx131, align 4, !dbg !937
  %arrayidx132 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !938
  %arrayidx133 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx132, i64 0, i64 0, !dbg !938
  %51 = load float, float* %arrayidx133, align 8, !dbg !938
  %arrayidx134 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !939
  %arrayidx135 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx134, i64 0, i64 1, !dbg !939
  %52 = load float, float* %arrayidx135, align 4, !dbg !939
  %mul136 = fmul float %51, %52, !dbg !940
  %arrayidx137 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !941
  %arrayidx138 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx137, i64 0, i64 1, !dbg !941
  %53 = load float, float* %arrayidx138, align 4, !dbg !941
  %arrayidx139 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !942
  %arrayidx140 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx139, i64 0, i64 1, !dbg !942
  %54 = load float, float* %arrayidx140, align 4, !dbg !942
  %mul141 = fmul float %53, %54, !dbg !943
  %add142 = fadd float %mul136, %mul141, !dbg !944
  %arrayidx143 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !945
  %arrayidx144 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx143, i64 0, i64 2, !dbg !945
  %55 = load float, float* %arrayidx144, align 8, !dbg !945
  %arrayidx145 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !946
  %arrayidx146 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx145, i64 0, i64 1, !dbg !946
  %56 = load float, float* %arrayidx146, align 4, !dbg !946
  %mul147 = fmul float %55, %56, !dbg !947
  %add148 = fadd float %add142, %mul147, !dbg !948
  %57 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !949
  %arrayidx149 = getelementptr inbounds [4 x float], [4 x float]* %57, i64 2, !dbg !949
  %arrayidx150 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx149, i64 0, i64 1, !dbg !949
  store float %add148, float* %arrayidx150, align 4, !dbg !950
  %arrayidx151 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !951
  %arrayidx152 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx151, i64 0, i64 0, !dbg !951
  %58 = load float, float* %arrayidx152, align 8, !dbg !951
  %arrayidx153 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !952
  %arrayidx154 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx153, i64 0, i64 2, !dbg !952
  %59 = load float, float* %arrayidx154, align 8, !dbg !952
  %mul155 = fmul float %58, %59, !dbg !953
  %arrayidx156 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !954
  %arrayidx157 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx156, i64 0, i64 1, !dbg !954
  %60 = load float, float* %arrayidx157, align 4, !dbg !954
  %arrayidx158 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !955
  %arrayidx159 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx158, i64 0, i64 2, !dbg !955
  %61 = load float, float* %arrayidx159, align 8, !dbg !955
  %mul160 = fmul float %60, %61, !dbg !956
  %add161 = fadd float %mul155, %mul160, !dbg !957
  %arrayidx162 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !958
  %arrayidx163 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx162, i64 0, i64 2, !dbg !958
  %62 = load float, float* %arrayidx163, align 8, !dbg !958
  %arrayidx164 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !959
  %arrayidx165 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx164, i64 0, i64 2, !dbg !959
  %63 = load float, float* %arrayidx165, align 8, !dbg !959
  %mul166 = fmul float %62, %63, !dbg !960
  %add167 = fadd float %add161, %mul166, !dbg !961
  %64 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !962
  %arrayidx168 = getelementptr inbounds [4 x float], [4 x float]* %64, i64 2, !dbg !962
  %arrayidx169 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx168, i64 0, i64 2, !dbg !962
  store float %add167, float* %arrayidx169, align 4, !dbg !963
  ret void, !dbg !964
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m3_m3m4([3 x float]* %m1, [4 x float]* %m3_, [3 x float]* %m2_) #0 !dbg !965 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m3_.addr = alloca [4 x float]*, align 8
  %m2_.addr = alloca [3 x float]*, align 8
  %m2 = alloca [3 x [3 x float]], align 16
  %m3 = alloca [4 x [4 x float]], align 16
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !968, metadata !DIExpression()), !dbg !969
  store [4 x float]* %m3_, [4 x float]** %m3_.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3_.addr, metadata !970, metadata !DIExpression()), !dbg !971
  store [3 x float]* %m2_, [3 x float]** %m2_.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2_.addr, metadata !972, metadata !DIExpression()), !dbg !973
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %m2, metadata !974, metadata !DIExpression()), !dbg !975
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m3, metadata !976, metadata !DIExpression()), !dbg !977
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !978
  %0 = load [3 x float]*, [3 x float]** %m2_.addr, align 8, !dbg !979
  call void @copy_m3_m3([3 x float]* %arraydecay, [3 x float]* %0), !dbg !980
  %arraydecay1 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !981
  %1 = load [4 x float]*, [4 x float]** %m3_.addr, align 8, !dbg !982
  call void @copy_m4_m4([4 x float]* %arraydecay1, [4 x float]* %1), !dbg !983
  %arrayidx = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !984
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !984
  %2 = load float, float* %arrayidx2, align 16, !dbg !984
  %arrayidx3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !985
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !985
  %3 = load float, float* %arrayidx4, align 16, !dbg !985
  %mul = fmul float %2, %3, !dbg !986
  %arrayidx5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !987
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 1, !dbg !987
  %4 = load float, float* %arrayidx6, align 4, !dbg !987
  %arrayidx7 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !988
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !988
  %5 = load float, float* %arrayidx8, align 16, !dbg !988
  %mul9 = fmul float %4, %5, !dbg !989
  %add = fadd float %mul, %mul9, !dbg !990
  %arrayidx10 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !991
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 2, !dbg !991
  %6 = load float, float* %arrayidx11, align 8, !dbg !991
  %arrayidx12 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !992
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !992
  %7 = load float, float* %arrayidx13, align 16, !dbg !992
  %mul14 = fmul float %6, %7, !dbg !993
  %add15 = fadd float %add, %mul14, !dbg !994
  %8 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !995
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, !dbg !995
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 0, !dbg !995
  store float %add15, float* %arrayidx17, align 4, !dbg !996
  %arrayidx18 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !997
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 0, !dbg !997
  %9 = load float, float* %arrayidx19, align 16, !dbg !997
  %arrayidx20 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !998
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 1, !dbg !998
  %10 = load float, float* %arrayidx21, align 4, !dbg !998
  %mul22 = fmul float %9, %10, !dbg !999
  %arrayidx23 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !1000
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx23, i64 0, i64 1, !dbg !1000
  %11 = load float, float* %arrayidx24, align 4, !dbg !1000
  %arrayidx25 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1001
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 1, !dbg !1001
  %12 = load float, float* %arrayidx26, align 4, !dbg !1001
  %mul27 = fmul float %11, %12, !dbg !1002
  %add28 = fadd float %mul22, %mul27, !dbg !1003
  %arrayidx29 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !1004
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 2, !dbg !1004
  %13 = load float, float* %arrayidx30, align 8, !dbg !1004
  %arrayidx31 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1005
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 1, !dbg !1005
  %14 = load float, float* %arrayidx32, align 4, !dbg !1005
  %mul33 = fmul float %13, %14, !dbg !1006
  %add34 = fadd float %add28, %mul33, !dbg !1007
  %15 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1008
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 0, !dbg !1008
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx35, i64 0, i64 1, !dbg !1008
  store float %add34, float* %arrayidx36, align 4, !dbg !1009
  %arrayidx37 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !1010
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx37, i64 0, i64 0, !dbg !1010
  %16 = load float, float* %arrayidx38, align 16, !dbg !1010
  %arrayidx39 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1011
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx39, i64 0, i64 2, !dbg !1011
  %17 = load float, float* %arrayidx40, align 8, !dbg !1011
  %mul41 = fmul float %16, %17, !dbg !1012
  %arrayidx42 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !1013
  %arrayidx43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 1, !dbg !1013
  %18 = load float, float* %arrayidx43, align 4, !dbg !1013
  %arrayidx44 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1014
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 2, !dbg !1014
  %19 = load float, float* %arrayidx45, align 8, !dbg !1014
  %mul46 = fmul float %18, %19, !dbg !1015
  %add47 = fadd float %mul41, %mul46, !dbg !1016
  %arrayidx48 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 0, !dbg !1017
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx48, i64 0, i64 2, !dbg !1017
  %20 = load float, float* %arrayidx49, align 8, !dbg !1017
  %arrayidx50 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1018
  %arrayidx51 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx50, i64 0, i64 2, !dbg !1018
  %21 = load float, float* %arrayidx51, align 8, !dbg !1018
  %mul52 = fmul float %20, %21, !dbg !1019
  %add53 = fadd float %add47, %mul52, !dbg !1020
  %22 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1021
  %arrayidx54 = getelementptr inbounds [3 x float], [3 x float]* %22, i64 0, !dbg !1021
  %arrayidx55 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx54, i64 0, i64 2, !dbg !1021
  store float %add53, float* %arrayidx55, align 4, !dbg !1022
  %arrayidx56 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1023
  %arrayidx57 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx56, i64 0, i64 0, !dbg !1023
  %23 = load float, float* %arrayidx57, align 4, !dbg !1023
  %arrayidx58 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1024
  %arrayidx59 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx58, i64 0, i64 0, !dbg !1024
  %24 = load float, float* %arrayidx59, align 16, !dbg !1024
  %mul60 = fmul float %23, %24, !dbg !1025
  %arrayidx61 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1026
  %arrayidx62 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx61, i64 0, i64 1, !dbg !1026
  %25 = load float, float* %arrayidx62, align 4, !dbg !1026
  %arrayidx63 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1027
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx63, i64 0, i64 0, !dbg !1027
  %26 = load float, float* %arrayidx64, align 16, !dbg !1027
  %mul65 = fmul float %25, %26, !dbg !1028
  %add66 = fadd float %mul60, %mul65, !dbg !1029
  %arrayidx67 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1030
  %arrayidx68 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx67, i64 0, i64 2, !dbg !1030
  %27 = load float, float* %arrayidx68, align 4, !dbg !1030
  %arrayidx69 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1031
  %arrayidx70 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx69, i64 0, i64 0, !dbg !1031
  %28 = load float, float* %arrayidx70, align 16, !dbg !1031
  %mul71 = fmul float %27, %28, !dbg !1032
  %add72 = fadd float %add66, %mul71, !dbg !1033
  %29 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1034
  %arrayidx73 = getelementptr inbounds [3 x float], [3 x float]* %29, i64 1, !dbg !1034
  %arrayidx74 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx73, i64 0, i64 0, !dbg !1034
  store float %add72, float* %arrayidx74, align 4, !dbg !1035
  %arrayidx75 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1036
  %arrayidx76 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx75, i64 0, i64 0, !dbg !1036
  %30 = load float, float* %arrayidx76, align 4, !dbg !1036
  %arrayidx77 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1037
  %arrayidx78 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx77, i64 0, i64 1, !dbg !1037
  %31 = load float, float* %arrayidx78, align 4, !dbg !1037
  %mul79 = fmul float %30, %31, !dbg !1038
  %arrayidx80 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1039
  %arrayidx81 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx80, i64 0, i64 1, !dbg !1039
  %32 = load float, float* %arrayidx81, align 4, !dbg !1039
  %arrayidx82 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1040
  %arrayidx83 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx82, i64 0, i64 1, !dbg !1040
  %33 = load float, float* %arrayidx83, align 4, !dbg !1040
  %mul84 = fmul float %32, %33, !dbg !1041
  %add85 = fadd float %mul79, %mul84, !dbg !1042
  %arrayidx86 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1043
  %arrayidx87 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx86, i64 0, i64 2, !dbg !1043
  %34 = load float, float* %arrayidx87, align 4, !dbg !1043
  %arrayidx88 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1044
  %arrayidx89 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx88, i64 0, i64 1, !dbg !1044
  %35 = load float, float* %arrayidx89, align 4, !dbg !1044
  %mul90 = fmul float %34, %35, !dbg !1045
  %add91 = fadd float %add85, %mul90, !dbg !1046
  %36 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1047
  %arrayidx92 = getelementptr inbounds [3 x float], [3 x float]* %36, i64 1, !dbg !1047
  %arrayidx93 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx92, i64 0, i64 1, !dbg !1047
  store float %add91, float* %arrayidx93, align 4, !dbg !1048
  %arrayidx94 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1049
  %arrayidx95 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx94, i64 0, i64 0, !dbg !1049
  %37 = load float, float* %arrayidx95, align 4, !dbg !1049
  %arrayidx96 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1050
  %arrayidx97 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx96, i64 0, i64 2, !dbg !1050
  %38 = load float, float* %arrayidx97, align 8, !dbg !1050
  %mul98 = fmul float %37, %38, !dbg !1051
  %arrayidx99 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1052
  %arrayidx100 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx99, i64 0, i64 1, !dbg !1052
  %39 = load float, float* %arrayidx100, align 4, !dbg !1052
  %arrayidx101 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1053
  %arrayidx102 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx101, i64 0, i64 2, !dbg !1053
  %40 = load float, float* %arrayidx102, align 8, !dbg !1053
  %mul103 = fmul float %39, %40, !dbg !1054
  %add104 = fadd float %mul98, %mul103, !dbg !1055
  %arrayidx105 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 1, !dbg !1056
  %arrayidx106 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx105, i64 0, i64 2, !dbg !1056
  %41 = load float, float* %arrayidx106, align 4, !dbg !1056
  %arrayidx107 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1057
  %arrayidx108 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx107, i64 0, i64 2, !dbg !1057
  %42 = load float, float* %arrayidx108, align 8, !dbg !1057
  %mul109 = fmul float %41, %42, !dbg !1058
  %add110 = fadd float %add104, %mul109, !dbg !1059
  %43 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1060
  %arrayidx111 = getelementptr inbounds [3 x float], [3 x float]* %43, i64 1, !dbg !1060
  %arrayidx112 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx111, i64 0, i64 2, !dbg !1060
  store float %add110, float* %arrayidx112, align 4, !dbg !1061
  %arrayidx113 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1062
  %arrayidx114 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx113, i64 0, i64 0, !dbg !1062
  %44 = load float, float* %arrayidx114, align 8, !dbg !1062
  %arrayidx115 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1063
  %arrayidx116 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx115, i64 0, i64 0, !dbg !1063
  %45 = load float, float* %arrayidx116, align 16, !dbg !1063
  %mul117 = fmul float %44, %45, !dbg !1064
  %arrayidx118 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1065
  %arrayidx119 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx118, i64 0, i64 1, !dbg !1065
  %46 = load float, float* %arrayidx119, align 4, !dbg !1065
  %arrayidx120 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1066
  %arrayidx121 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx120, i64 0, i64 0, !dbg !1066
  %47 = load float, float* %arrayidx121, align 16, !dbg !1066
  %mul122 = fmul float %46, %47, !dbg !1067
  %add123 = fadd float %mul117, %mul122, !dbg !1068
  %arrayidx124 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1069
  %arrayidx125 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx124, i64 0, i64 2, !dbg !1069
  %48 = load float, float* %arrayidx125, align 8, !dbg !1069
  %arrayidx126 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1070
  %arrayidx127 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx126, i64 0, i64 0, !dbg !1070
  %49 = load float, float* %arrayidx127, align 16, !dbg !1070
  %mul128 = fmul float %48, %49, !dbg !1071
  %add129 = fadd float %add123, %mul128, !dbg !1072
  %50 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1073
  %arrayidx130 = getelementptr inbounds [3 x float], [3 x float]* %50, i64 2, !dbg !1073
  %arrayidx131 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx130, i64 0, i64 0, !dbg !1073
  store float %add129, float* %arrayidx131, align 4, !dbg !1074
  %arrayidx132 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1075
  %arrayidx133 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx132, i64 0, i64 0, !dbg !1075
  %51 = load float, float* %arrayidx133, align 8, !dbg !1075
  %arrayidx134 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1076
  %arrayidx135 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx134, i64 0, i64 1, !dbg !1076
  %52 = load float, float* %arrayidx135, align 4, !dbg !1076
  %mul136 = fmul float %51, %52, !dbg !1077
  %arrayidx137 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1078
  %arrayidx138 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx137, i64 0, i64 1, !dbg !1078
  %53 = load float, float* %arrayidx138, align 4, !dbg !1078
  %arrayidx139 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1079
  %arrayidx140 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx139, i64 0, i64 1, !dbg !1079
  %54 = load float, float* %arrayidx140, align 4, !dbg !1079
  %mul141 = fmul float %53, %54, !dbg !1080
  %add142 = fadd float %mul136, %mul141, !dbg !1081
  %arrayidx143 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1082
  %arrayidx144 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx143, i64 0, i64 2, !dbg !1082
  %55 = load float, float* %arrayidx144, align 8, !dbg !1082
  %arrayidx145 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1083
  %arrayidx146 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx145, i64 0, i64 1, !dbg !1083
  %56 = load float, float* %arrayidx146, align 4, !dbg !1083
  %mul147 = fmul float %55, %56, !dbg !1084
  %add148 = fadd float %add142, %mul147, !dbg !1085
  %57 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1086
  %arrayidx149 = getelementptr inbounds [3 x float], [3 x float]* %57, i64 2, !dbg !1086
  %arrayidx150 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx149, i64 0, i64 1, !dbg !1086
  store float %add148, float* %arrayidx150, align 4, !dbg !1087
  %arrayidx151 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1088
  %arrayidx152 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx151, i64 0, i64 0, !dbg !1088
  %58 = load float, float* %arrayidx152, align 8, !dbg !1088
  %arrayidx153 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 0, !dbg !1089
  %arrayidx154 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx153, i64 0, i64 2, !dbg !1089
  %59 = load float, float* %arrayidx154, align 8, !dbg !1089
  %mul155 = fmul float %58, %59, !dbg !1090
  %arrayidx156 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1091
  %arrayidx157 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx156, i64 0, i64 1, !dbg !1091
  %60 = load float, float* %arrayidx157, align 4, !dbg !1091
  %arrayidx158 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 1, !dbg !1092
  %arrayidx159 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx158, i64 0, i64 2, !dbg !1092
  %61 = load float, float* %arrayidx159, align 8, !dbg !1092
  %mul160 = fmul float %60, %61, !dbg !1093
  %add161 = fadd float %mul155, %mul160, !dbg !1094
  %arrayidx162 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m2, i64 0, i64 2, !dbg !1095
  %arrayidx163 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx162, i64 0, i64 2, !dbg !1095
  %62 = load float, float* %arrayidx163, align 8, !dbg !1095
  %arrayidx164 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m3, i64 0, i64 2, !dbg !1096
  %arrayidx165 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx164, i64 0, i64 2, !dbg !1096
  %63 = load float, float* %arrayidx165, align 8, !dbg !1096
  %mul166 = fmul float %62, %63, !dbg !1097
  %add167 = fadd float %add161, %mul166, !dbg !1098
  %64 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1099
  %arrayidx168 = getelementptr inbounds [3 x float], [3 x float]* %64, i64 2, !dbg !1099
  %arrayidx169 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx168, i64 0, i64 2, !dbg !1099
  store float %add167, float* %arrayidx169, align 4, !dbg !1100
  ret void, !dbg !1101
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_m3m4([4 x float]* %m1, [3 x float]* %m3_, [4 x float]* %m2_) #0 !dbg !1102 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m3_.addr = alloca [3 x float]*, align 8
  %m2_.addr = alloca [4 x float]*, align 8
  %m2 = alloca [4 x [4 x float]], align 16
  %m3 = alloca [3 x [3 x float]], align 16
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1105, metadata !DIExpression()), !dbg !1106
  store [3 x float]* %m3_, [3 x float]** %m3_.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3_.addr, metadata !1107, metadata !DIExpression()), !dbg !1108
  store [4 x float]* %m2_, [4 x float]** %m2_.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2_.addr, metadata !1109, metadata !DIExpression()), !dbg !1110
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %m2, metadata !1111, metadata !DIExpression()), !dbg !1112
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %m3, metadata !1113, metadata !DIExpression()), !dbg !1114
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1115
  %0 = load [4 x float]*, [4 x float]** %m2_.addr, align 8, !dbg !1116
  call void @copy_m4_m4([4 x float]* %arraydecay, [4 x float]* %0), !dbg !1117
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1118
  %1 = load [3 x float]*, [3 x float]** %m3_.addr, align 8, !dbg !1119
  call void @copy_m3_m3([3 x float]* %arraydecay1, [3 x float]* %1), !dbg !1120
  %arrayidx = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1121
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !1121
  %2 = load float, float* %arrayidx2, align 16, !dbg !1121
  %arrayidx3 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1122
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 0, !dbg !1122
  %3 = load float, float* %arrayidx4, align 16, !dbg !1122
  %mul = fmul float %2, %3, !dbg !1123
  %arrayidx5 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1124
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 1, !dbg !1124
  %4 = load float, float* %arrayidx6, align 4, !dbg !1124
  %arrayidx7 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1125
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 0, !dbg !1125
  %5 = load float, float* %arrayidx8, align 4, !dbg !1125
  %mul9 = fmul float %4, %5, !dbg !1126
  %add = fadd float %mul, %mul9, !dbg !1127
  %arrayidx10 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1128
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 2, !dbg !1128
  %6 = load float, float* %arrayidx11, align 8, !dbg !1128
  %arrayidx12 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1129
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !1129
  %7 = load float, float* %arrayidx13, align 8, !dbg !1129
  %mul14 = fmul float %6, %7, !dbg !1130
  %add15 = fadd float %add, %mul14, !dbg !1131
  %8 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1132
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, !dbg !1132
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 0, !dbg !1132
  store float %add15, float* %arrayidx17, align 4, !dbg !1133
  %arrayidx18 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1134
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !1134
  %9 = load float, float* %arrayidx19, align 16, !dbg !1134
  %arrayidx20 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1135
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx20, i64 0, i64 1, !dbg !1135
  %10 = load float, float* %arrayidx21, align 4, !dbg !1135
  %mul22 = fmul float %9, %10, !dbg !1136
  %arrayidx23 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1137
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 1, !dbg !1137
  %11 = load float, float* %arrayidx24, align 4, !dbg !1137
  %arrayidx25 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1138
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx25, i64 0, i64 1, !dbg !1138
  %12 = load float, float* %arrayidx26, align 4, !dbg !1138
  %mul27 = fmul float %11, %12, !dbg !1139
  %add28 = fadd float %mul22, %mul27, !dbg !1140
  %arrayidx29 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1141
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 2, !dbg !1141
  %13 = load float, float* %arrayidx30, align 8, !dbg !1141
  %arrayidx31 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1142
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx31, i64 0, i64 1, !dbg !1142
  %14 = load float, float* %arrayidx32, align 4, !dbg !1142
  %mul33 = fmul float %13, %14, !dbg !1143
  %add34 = fadd float %add28, %mul33, !dbg !1144
  %15 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1145
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 0, !dbg !1145
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 1, !dbg !1145
  store float %add34, float* %arrayidx36, align 4, !dbg !1146
  %arrayidx37 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1147
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx37, i64 0, i64 0, !dbg !1147
  %16 = load float, float* %arrayidx38, align 16, !dbg !1147
  %arrayidx39 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1148
  %arrayidx40 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx39, i64 0, i64 2, !dbg !1148
  %17 = load float, float* %arrayidx40, align 8, !dbg !1148
  %mul41 = fmul float %16, %17, !dbg !1149
  %arrayidx42 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1150
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 1, !dbg !1150
  %18 = load float, float* %arrayidx43, align 4, !dbg !1150
  %arrayidx44 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1151
  %arrayidx45 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx44, i64 0, i64 2, !dbg !1151
  %19 = load float, float* %arrayidx45, align 4, !dbg !1151
  %mul46 = fmul float %18, %19, !dbg !1152
  %add47 = fadd float %mul41, %mul46, !dbg !1153
  %arrayidx48 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 0, !dbg !1154
  %arrayidx49 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx48, i64 0, i64 2, !dbg !1154
  %20 = load float, float* %arrayidx49, align 8, !dbg !1154
  %arrayidx50 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1155
  %arrayidx51 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx50, i64 0, i64 2, !dbg !1155
  %21 = load float, float* %arrayidx51, align 8, !dbg !1155
  %mul52 = fmul float %20, %21, !dbg !1156
  %add53 = fadd float %add47, %mul52, !dbg !1157
  %22 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1158
  %arrayidx54 = getelementptr inbounds [4 x float], [4 x float]* %22, i64 0, !dbg !1158
  %arrayidx55 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx54, i64 0, i64 2, !dbg !1158
  store float %add53, float* %arrayidx55, align 4, !dbg !1159
  %arrayidx56 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1160
  %arrayidx57 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx56, i64 0, i64 0, !dbg !1160
  %23 = load float, float* %arrayidx57, align 16, !dbg !1160
  %arrayidx58 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1161
  %arrayidx59 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx58, i64 0, i64 0, !dbg !1161
  %24 = load float, float* %arrayidx59, align 16, !dbg !1161
  %mul60 = fmul float %23, %24, !dbg !1162
  %arrayidx61 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1163
  %arrayidx62 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx61, i64 0, i64 1, !dbg !1163
  %25 = load float, float* %arrayidx62, align 4, !dbg !1163
  %arrayidx63 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1164
  %arrayidx64 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx63, i64 0, i64 0, !dbg !1164
  %26 = load float, float* %arrayidx64, align 4, !dbg !1164
  %mul65 = fmul float %25, %26, !dbg !1165
  %add66 = fadd float %mul60, %mul65, !dbg !1166
  %arrayidx67 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1167
  %arrayidx68 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx67, i64 0, i64 2, !dbg !1167
  %27 = load float, float* %arrayidx68, align 8, !dbg !1167
  %arrayidx69 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1168
  %arrayidx70 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx69, i64 0, i64 0, !dbg !1168
  %28 = load float, float* %arrayidx70, align 8, !dbg !1168
  %mul71 = fmul float %27, %28, !dbg !1169
  %add72 = fadd float %add66, %mul71, !dbg !1170
  %29 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1171
  %arrayidx73 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 1, !dbg !1171
  %arrayidx74 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx73, i64 0, i64 0, !dbg !1171
  store float %add72, float* %arrayidx74, align 4, !dbg !1172
  %arrayidx75 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1173
  %arrayidx76 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx75, i64 0, i64 0, !dbg !1173
  %30 = load float, float* %arrayidx76, align 16, !dbg !1173
  %arrayidx77 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1174
  %arrayidx78 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx77, i64 0, i64 1, !dbg !1174
  %31 = load float, float* %arrayidx78, align 4, !dbg !1174
  %mul79 = fmul float %30, %31, !dbg !1175
  %arrayidx80 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1176
  %arrayidx81 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx80, i64 0, i64 1, !dbg !1176
  %32 = load float, float* %arrayidx81, align 4, !dbg !1176
  %arrayidx82 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1177
  %arrayidx83 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx82, i64 0, i64 1, !dbg !1177
  %33 = load float, float* %arrayidx83, align 4, !dbg !1177
  %mul84 = fmul float %32, %33, !dbg !1178
  %add85 = fadd float %mul79, %mul84, !dbg !1179
  %arrayidx86 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1180
  %arrayidx87 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx86, i64 0, i64 2, !dbg !1180
  %34 = load float, float* %arrayidx87, align 8, !dbg !1180
  %arrayidx88 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1181
  %arrayidx89 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx88, i64 0, i64 1, !dbg !1181
  %35 = load float, float* %arrayidx89, align 4, !dbg !1181
  %mul90 = fmul float %34, %35, !dbg !1182
  %add91 = fadd float %add85, %mul90, !dbg !1183
  %36 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1184
  %arrayidx92 = getelementptr inbounds [4 x float], [4 x float]* %36, i64 1, !dbg !1184
  %arrayidx93 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx92, i64 0, i64 1, !dbg !1184
  store float %add91, float* %arrayidx93, align 4, !dbg !1185
  %arrayidx94 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1186
  %arrayidx95 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx94, i64 0, i64 0, !dbg !1186
  %37 = load float, float* %arrayidx95, align 16, !dbg !1186
  %arrayidx96 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1187
  %arrayidx97 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx96, i64 0, i64 2, !dbg !1187
  %38 = load float, float* %arrayidx97, align 8, !dbg !1187
  %mul98 = fmul float %37, %38, !dbg !1188
  %arrayidx99 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1189
  %arrayidx100 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx99, i64 0, i64 1, !dbg !1189
  %39 = load float, float* %arrayidx100, align 4, !dbg !1189
  %arrayidx101 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1190
  %arrayidx102 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx101, i64 0, i64 2, !dbg !1190
  %40 = load float, float* %arrayidx102, align 4, !dbg !1190
  %mul103 = fmul float %39, %40, !dbg !1191
  %add104 = fadd float %mul98, %mul103, !dbg !1192
  %arrayidx105 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 1, !dbg !1193
  %arrayidx106 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx105, i64 0, i64 2, !dbg !1193
  %41 = load float, float* %arrayidx106, align 8, !dbg !1193
  %arrayidx107 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1194
  %arrayidx108 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx107, i64 0, i64 2, !dbg !1194
  %42 = load float, float* %arrayidx108, align 8, !dbg !1194
  %mul109 = fmul float %41, %42, !dbg !1195
  %add110 = fadd float %add104, %mul109, !dbg !1196
  %43 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1197
  %arrayidx111 = getelementptr inbounds [4 x float], [4 x float]* %43, i64 1, !dbg !1197
  %arrayidx112 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx111, i64 0, i64 2, !dbg !1197
  store float %add110, float* %arrayidx112, align 4, !dbg !1198
  %arrayidx113 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1199
  %arrayidx114 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx113, i64 0, i64 0, !dbg !1199
  %44 = load float, float* %arrayidx114, align 16, !dbg !1199
  %arrayidx115 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1200
  %arrayidx116 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx115, i64 0, i64 0, !dbg !1200
  %45 = load float, float* %arrayidx116, align 16, !dbg !1200
  %mul117 = fmul float %44, %45, !dbg !1201
  %arrayidx118 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1202
  %arrayidx119 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx118, i64 0, i64 1, !dbg !1202
  %46 = load float, float* %arrayidx119, align 4, !dbg !1202
  %arrayidx120 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1203
  %arrayidx121 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx120, i64 0, i64 0, !dbg !1203
  %47 = load float, float* %arrayidx121, align 4, !dbg !1203
  %mul122 = fmul float %46, %47, !dbg !1204
  %add123 = fadd float %mul117, %mul122, !dbg !1205
  %arrayidx124 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1206
  %arrayidx125 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx124, i64 0, i64 2, !dbg !1206
  %48 = load float, float* %arrayidx125, align 8, !dbg !1206
  %arrayidx126 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1207
  %arrayidx127 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx126, i64 0, i64 0, !dbg !1207
  %49 = load float, float* %arrayidx127, align 8, !dbg !1207
  %mul128 = fmul float %48, %49, !dbg !1208
  %add129 = fadd float %add123, %mul128, !dbg !1209
  %50 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1210
  %arrayidx130 = getelementptr inbounds [4 x float], [4 x float]* %50, i64 2, !dbg !1210
  %arrayidx131 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx130, i64 0, i64 0, !dbg !1210
  store float %add129, float* %arrayidx131, align 4, !dbg !1211
  %arrayidx132 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1212
  %arrayidx133 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx132, i64 0, i64 0, !dbg !1212
  %51 = load float, float* %arrayidx133, align 16, !dbg !1212
  %arrayidx134 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1213
  %arrayidx135 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx134, i64 0, i64 1, !dbg !1213
  %52 = load float, float* %arrayidx135, align 4, !dbg !1213
  %mul136 = fmul float %51, %52, !dbg !1214
  %arrayidx137 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1215
  %arrayidx138 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx137, i64 0, i64 1, !dbg !1215
  %53 = load float, float* %arrayidx138, align 4, !dbg !1215
  %arrayidx139 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1216
  %arrayidx140 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx139, i64 0, i64 1, !dbg !1216
  %54 = load float, float* %arrayidx140, align 4, !dbg !1216
  %mul141 = fmul float %53, %54, !dbg !1217
  %add142 = fadd float %mul136, %mul141, !dbg !1218
  %arrayidx143 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1219
  %arrayidx144 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx143, i64 0, i64 2, !dbg !1219
  %55 = load float, float* %arrayidx144, align 8, !dbg !1219
  %arrayidx145 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1220
  %arrayidx146 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx145, i64 0, i64 1, !dbg !1220
  %56 = load float, float* %arrayidx146, align 4, !dbg !1220
  %mul147 = fmul float %55, %56, !dbg !1221
  %add148 = fadd float %add142, %mul147, !dbg !1222
  %57 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1223
  %arrayidx149 = getelementptr inbounds [4 x float], [4 x float]* %57, i64 2, !dbg !1223
  %arrayidx150 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx149, i64 0, i64 1, !dbg !1223
  store float %add148, float* %arrayidx150, align 4, !dbg !1224
  %arrayidx151 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1225
  %arrayidx152 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx151, i64 0, i64 0, !dbg !1225
  %58 = load float, float* %arrayidx152, align 16, !dbg !1225
  %arrayidx153 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 0, !dbg !1226
  %arrayidx154 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx153, i64 0, i64 2, !dbg !1226
  %59 = load float, float* %arrayidx154, align 8, !dbg !1226
  %mul155 = fmul float %58, %59, !dbg !1227
  %arrayidx156 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1228
  %arrayidx157 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx156, i64 0, i64 1, !dbg !1228
  %60 = load float, float* %arrayidx157, align 4, !dbg !1228
  %arrayidx158 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 1, !dbg !1229
  %arrayidx159 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx158, i64 0, i64 2, !dbg !1229
  %61 = load float, float* %arrayidx159, align 4, !dbg !1229
  %mul160 = fmul float %60, %61, !dbg !1230
  %add161 = fadd float %mul155, %mul160, !dbg !1231
  %arrayidx162 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %m2, i64 0, i64 2, !dbg !1232
  %arrayidx163 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx162, i64 0, i64 2, !dbg !1232
  %62 = load float, float* %arrayidx163, align 8, !dbg !1232
  %arrayidx164 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %m3, i64 0, i64 2, !dbg !1233
  %arrayidx165 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx164, i64 0, i64 2, !dbg !1233
  %63 = load float, float* %arrayidx165, align 8, !dbg !1233
  %mul166 = fmul float %62, %63, !dbg !1234
  %add167 = fadd float %add161, %mul166, !dbg !1235
  %64 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1236
  %arrayidx168 = getelementptr inbounds [4 x float], [4 x float]* %64, i64 2, !dbg !1236
  %arrayidx169 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx168, i64 0, i64 2, !dbg !1236
  store float %add167, float* %arrayidx169, align 4, !dbg !1237
  ret void, !dbg !1238
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_3([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2) #0 !dbg !1239 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1240, metadata !DIExpression()), !dbg !1241
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1242, metadata !DIExpression()), !dbg !1243
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1244, metadata !DIExpression()), !dbg !1245
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1246
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1247
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1248
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1249
  ret void, !dbg !1250
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_4([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3) #0 !dbg !1251 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1254, metadata !DIExpression()), !dbg !1255
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1256, metadata !DIExpression()), !dbg !1257
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1258, metadata !DIExpression()), !dbg !1259
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !1260, metadata !DIExpression()), !dbg !1261
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1262
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1263
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1264
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1265
  %3 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1266
  %4 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1267
  %5 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !1268
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %4, [3 x float]* %5), !dbg !1269
  ret void, !dbg !1270
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_5([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3, [3 x float]* %m4) #0 !dbg !1271 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %m4.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1274, metadata !DIExpression()), !dbg !1275
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1276, metadata !DIExpression()), !dbg !1277
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1278, metadata !DIExpression()), !dbg !1279
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !1280, metadata !DIExpression()), !dbg !1281
  store [3 x float]* %m4, [3 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m4.addr, metadata !1282, metadata !DIExpression()), !dbg !1283
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1284
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1285
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1286
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1287
  %3 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1288
  %4 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1289
  %5 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !1290
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %4, [3 x float]* %5), !dbg !1291
  %6 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1292
  %7 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1293
  %8 = load [3 x float]*, [3 x float]** %m4.addr, align 8, !dbg !1294
  call void @mul_m3_m3m3([3 x float]* %6, [3 x float]* %7, [3 x float]* %8), !dbg !1295
  ret void, !dbg !1296
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_6([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3, [3 x float]* %m4, [3 x float]* %m5) #0 !dbg !1297 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %m4.addr = alloca [3 x float]*, align 8
  %m5.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1300, metadata !DIExpression()), !dbg !1301
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1302, metadata !DIExpression()), !dbg !1303
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1304, metadata !DIExpression()), !dbg !1305
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !1306, metadata !DIExpression()), !dbg !1307
  store [3 x float]* %m4, [3 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m4.addr, metadata !1308, metadata !DIExpression()), !dbg !1309
  store [3 x float]* %m5, [3 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m5.addr, metadata !1310, metadata !DIExpression()), !dbg !1311
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1312
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1313
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1314
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1315
  %3 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1316
  %4 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1317
  %5 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !1318
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %4, [3 x float]* %5), !dbg !1319
  %6 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1320
  %7 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1321
  %8 = load [3 x float]*, [3 x float]** %m4.addr, align 8, !dbg !1322
  call void @mul_m3_m3m3([3 x float]* %6, [3 x float]* %7, [3 x float]* %8), !dbg !1323
  %9 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1324
  %10 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1325
  %11 = load [3 x float]*, [3 x float]** %m5.addr, align 8, !dbg !1326
  call void @mul_m3_m3m3([3 x float]* %9, [3 x float]* %10, [3 x float]* %11), !dbg !1327
  ret void, !dbg !1328
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_7([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3, [3 x float]* %m4, [3 x float]* %m5, [3 x float]* %m6) #0 !dbg !1329 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %m4.addr = alloca [3 x float]*, align 8
  %m5.addr = alloca [3 x float]*, align 8
  %m6.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1332, metadata !DIExpression()), !dbg !1333
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1334, metadata !DIExpression()), !dbg !1335
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1336, metadata !DIExpression()), !dbg !1337
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !1338, metadata !DIExpression()), !dbg !1339
  store [3 x float]* %m4, [3 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m4.addr, metadata !1340, metadata !DIExpression()), !dbg !1341
  store [3 x float]* %m5, [3 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m5.addr, metadata !1342, metadata !DIExpression()), !dbg !1343
  store [3 x float]* %m6, [3 x float]** %m6.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m6.addr, metadata !1344, metadata !DIExpression()), !dbg !1345
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1346
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1347
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1348
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1349
  %3 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1350
  %4 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1351
  %5 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !1352
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %4, [3 x float]* %5), !dbg !1353
  %6 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1354
  %7 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1355
  %8 = load [3 x float]*, [3 x float]** %m4.addr, align 8, !dbg !1356
  call void @mul_m3_m3m3([3 x float]* %6, [3 x float]* %7, [3 x float]* %8), !dbg !1357
  %9 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1358
  %10 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1359
  %11 = load [3 x float]*, [3 x float]** %m5.addr, align 8, !dbg !1360
  call void @mul_m3_m3m3([3 x float]* %9, [3 x float]* %10, [3 x float]* %11), !dbg !1361
  %12 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1362
  %13 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1363
  %14 = load [3 x float]*, [3 x float]** %m6.addr, align 8, !dbg !1364
  call void @mul_m3_m3m3([3 x float]* %12, [3 x float]* %13, [3 x float]* %14), !dbg !1365
  ret void, !dbg !1366
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_8([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3, [3 x float]* %m4, [3 x float]* %m5, [3 x float]* %m6, [3 x float]* %m7) #0 !dbg !1367 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %m4.addr = alloca [3 x float]*, align 8
  %m5.addr = alloca [3 x float]*, align 8
  %m6.addr = alloca [3 x float]*, align 8
  %m7.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1370, metadata !DIExpression()), !dbg !1371
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1372, metadata !DIExpression()), !dbg !1373
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1374, metadata !DIExpression()), !dbg !1375
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !1376, metadata !DIExpression()), !dbg !1377
  store [3 x float]* %m4, [3 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m4.addr, metadata !1378, metadata !DIExpression()), !dbg !1379
  store [3 x float]* %m5, [3 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m5.addr, metadata !1380, metadata !DIExpression()), !dbg !1381
  store [3 x float]* %m6, [3 x float]** %m6.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m6.addr, metadata !1382, metadata !DIExpression()), !dbg !1383
  store [3 x float]* %m7, [3 x float]** %m7.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m7.addr, metadata !1384, metadata !DIExpression()), !dbg !1385
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1386
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1387
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1388
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1389
  %3 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1390
  %4 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1391
  %5 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !1392
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %4, [3 x float]* %5), !dbg !1393
  %6 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1394
  %7 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1395
  %8 = load [3 x float]*, [3 x float]** %m4.addr, align 8, !dbg !1396
  call void @mul_m3_m3m3([3 x float]* %6, [3 x float]* %7, [3 x float]* %8), !dbg !1397
  %9 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1398
  %10 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1399
  %11 = load [3 x float]*, [3 x float]** %m5.addr, align 8, !dbg !1400
  call void @mul_m3_m3m3([3 x float]* %9, [3 x float]* %10, [3 x float]* %11), !dbg !1401
  %12 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1402
  %13 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1403
  %14 = load [3 x float]*, [3 x float]** %m6.addr, align 8, !dbg !1404
  call void @mul_m3_m3m3([3 x float]* %12, [3 x float]* %13, [3 x float]* %14), !dbg !1405
  %15 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1406
  %16 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1407
  %17 = load [3 x float]*, [3 x float]** %m7.addr, align 8, !dbg !1408
  call void @mul_m3_m3m3([3 x float]* %15, [3 x float]* %16, [3 x float]* %17), !dbg !1409
  ret void, !dbg !1410
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m3_series_9([3 x float]* %r, [3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3, [3 x float]* %m4, [3 x float]* %m5, [3 x float]* %m6, [3 x float]* %m7, [3 x float]* %m8) #0 !dbg !1411 {
entry:
  %r.addr = alloca [3 x float]*, align 8
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %m4.addr = alloca [3 x float]*, align 8
  %m5.addr = alloca [3 x float]*, align 8
  %m6.addr = alloca [3 x float]*, align 8
  %m7.addr = alloca [3 x float]*, align 8
  %m8.addr = alloca [3 x float]*, align 8
  store [3 x float]* %r, [3 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %r.addr, metadata !1414, metadata !DIExpression()), !dbg !1415
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !1416, metadata !DIExpression()), !dbg !1417
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !1418, metadata !DIExpression()), !dbg !1419
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !1420, metadata !DIExpression()), !dbg !1421
  store [3 x float]* %m4, [3 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m4.addr, metadata !1422, metadata !DIExpression()), !dbg !1423
  store [3 x float]* %m5, [3 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m5.addr, metadata !1424, metadata !DIExpression()), !dbg !1425
  store [3 x float]* %m6, [3 x float]** %m6.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m6.addr, metadata !1426, metadata !DIExpression()), !dbg !1427
  store [3 x float]* %m7, [3 x float]** %m7.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m7.addr, metadata !1428, metadata !DIExpression()), !dbg !1429
  store [3 x float]* %m8, [3 x float]** %m8.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m8.addr, metadata !1430, metadata !DIExpression()), !dbg !1431
  %0 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1432
  %1 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !1433
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !1434
  call void @mul_m3_m3m3([3 x float]* %0, [3 x float]* %1, [3 x float]* %2), !dbg !1435
  %3 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1436
  %4 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1437
  %5 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !1438
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %4, [3 x float]* %5), !dbg !1439
  %6 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1440
  %7 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1441
  %8 = load [3 x float]*, [3 x float]** %m4.addr, align 8, !dbg !1442
  call void @mul_m3_m3m3([3 x float]* %6, [3 x float]* %7, [3 x float]* %8), !dbg !1443
  %9 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1444
  %10 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1445
  %11 = load [3 x float]*, [3 x float]** %m5.addr, align 8, !dbg !1446
  call void @mul_m3_m3m3([3 x float]* %9, [3 x float]* %10, [3 x float]* %11), !dbg !1447
  %12 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1448
  %13 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1449
  %14 = load [3 x float]*, [3 x float]** %m6.addr, align 8, !dbg !1450
  call void @mul_m3_m3m3([3 x float]* %12, [3 x float]* %13, [3 x float]* %14), !dbg !1451
  %15 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1452
  %16 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1453
  %17 = load [3 x float]*, [3 x float]** %m7.addr, align 8, !dbg !1454
  call void @mul_m3_m3m3([3 x float]* %15, [3 x float]* %16, [3 x float]* %17), !dbg !1455
  %18 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1456
  %19 = load [3 x float]*, [3 x float]** %r.addr, align 8, !dbg !1457
  %20 = load [3 x float]*, [3 x float]** %m8.addr, align 8, !dbg !1458
  call void @mul_m3_m3m3([3 x float]* %18, [3 x float]* %19, [3 x float]* %20), !dbg !1459
  ret void, !dbg !1460
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_3([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2) #0 !dbg !1461 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1462, metadata !DIExpression()), !dbg !1463
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1464, metadata !DIExpression()), !dbg !1465
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1466, metadata !DIExpression()), !dbg !1467
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1468
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1469
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1470
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1471
  ret void, !dbg !1472
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_4([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3) #0 !dbg !1473 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1476, metadata !DIExpression()), !dbg !1477
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1478, metadata !DIExpression()), !dbg !1479
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1480, metadata !DIExpression()), !dbg !1481
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !1482, metadata !DIExpression()), !dbg !1483
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1484
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1485
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1486
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1487
  %3 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1488
  %4 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1489
  %5 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !1490
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %5), !dbg !1491
  ret void, !dbg !1492
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_5([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3, [4 x float]* %m4) #0 !dbg !1493 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %m4.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1496, metadata !DIExpression()), !dbg !1497
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1498, metadata !DIExpression()), !dbg !1499
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1500, metadata !DIExpression()), !dbg !1501
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !1502, metadata !DIExpression()), !dbg !1503
  store [4 x float]* %m4, [4 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m4.addr, metadata !1504, metadata !DIExpression()), !dbg !1505
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1506
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1507
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1508
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1509
  %3 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1510
  %4 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1511
  %5 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !1512
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %5), !dbg !1513
  %6 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1514
  %7 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1515
  %8 = load [4 x float]*, [4 x float]** %m4.addr, align 8, !dbg !1516
  call void @mul_m4_m4m4([4 x float]* %6, [4 x float]* %7, [4 x float]* %8), !dbg !1517
  ret void, !dbg !1518
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_6([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3, [4 x float]* %m4, [4 x float]* %m5) #0 !dbg !1519 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %m4.addr = alloca [4 x float]*, align 8
  %m5.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1522, metadata !DIExpression()), !dbg !1523
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1524, metadata !DIExpression()), !dbg !1525
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1526, metadata !DIExpression()), !dbg !1527
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !1528, metadata !DIExpression()), !dbg !1529
  store [4 x float]* %m4, [4 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m4.addr, metadata !1530, metadata !DIExpression()), !dbg !1531
  store [4 x float]* %m5, [4 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m5.addr, metadata !1532, metadata !DIExpression()), !dbg !1533
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1534
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1535
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1536
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1537
  %3 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1538
  %4 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1539
  %5 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !1540
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %5), !dbg !1541
  %6 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1542
  %7 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1543
  %8 = load [4 x float]*, [4 x float]** %m4.addr, align 8, !dbg !1544
  call void @mul_m4_m4m4([4 x float]* %6, [4 x float]* %7, [4 x float]* %8), !dbg !1545
  %9 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1546
  %10 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1547
  %11 = load [4 x float]*, [4 x float]** %m5.addr, align 8, !dbg !1548
  call void @mul_m4_m4m4([4 x float]* %9, [4 x float]* %10, [4 x float]* %11), !dbg !1549
  ret void, !dbg !1550
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_7([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3, [4 x float]* %m4, [4 x float]* %m5, [4 x float]* %m6) #0 !dbg !1551 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %m4.addr = alloca [4 x float]*, align 8
  %m5.addr = alloca [4 x float]*, align 8
  %m6.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1554, metadata !DIExpression()), !dbg !1555
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1556, metadata !DIExpression()), !dbg !1557
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1558, metadata !DIExpression()), !dbg !1559
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !1560, metadata !DIExpression()), !dbg !1561
  store [4 x float]* %m4, [4 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m4.addr, metadata !1562, metadata !DIExpression()), !dbg !1563
  store [4 x float]* %m5, [4 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m5.addr, metadata !1564, metadata !DIExpression()), !dbg !1565
  store [4 x float]* %m6, [4 x float]** %m6.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m6.addr, metadata !1566, metadata !DIExpression()), !dbg !1567
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1568
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1569
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1570
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1571
  %3 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1572
  %4 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1573
  %5 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !1574
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %5), !dbg !1575
  %6 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1576
  %7 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1577
  %8 = load [4 x float]*, [4 x float]** %m4.addr, align 8, !dbg !1578
  call void @mul_m4_m4m4([4 x float]* %6, [4 x float]* %7, [4 x float]* %8), !dbg !1579
  %9 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1580
  %10 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1581
  %11 = load [4 x float]*, [4 x float]** %m5.addr, align 8, !dbg !1582
  call void @mul_m4_m4m4([4 x float]* %9, [4 x float]* %10, [4 x float]* %11), !dbg !1583
  %12 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1584
  %13 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1585
  %14 = load [4 x float]*, [4 x float]** %m6.addr, align 8, !dbg !1586
  call void @mul_m4_m4m4([4 x float]* %12, [4 x float]* %13, [4 x float]* %14), !dbg !1587
  ret void, !dbg !1588
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_8([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3, [4 x float]* %m4, [4 x float]* %m5, [4 x float]* %m6, [4 x float]* %m7) #0 !dbg !1589 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %m4.addr = alloca [4 x float]*, align 8
  %m5.addr = alloca [4 x float]*, align 8
  %m6.addr = alloca [4 x float]*, align 8
  %m7.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1592, metadata !DIExpression()), !dbg !1593
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1594, metadata !DIExpression()), !dbg !1595
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1596, metadata !DIExpression()), !dbg !1597
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !1598, metadata !DIExpression()), !dbg !1599
  store [4 x float]* %m4, [4 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m4.addr, metadata !1600, metadata !DIExpression()), !dbg !1601
  store [4 x float]* %m5, [4 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m5.addr, metadata !1602, metadata !DIExpression()), !dbg !1603
  store [4 x float]* %m6, [4 x float]** %m6.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m6.addr, metadata !1604, metadata !DIExpression()), !dbg !1605
  store [4 x float]* %m7, [4 x float]** %m7.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m7.addr, metadata !1606, metadata !DIExpression()), !dbg !1607
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1608
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1609
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1610
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1611
  %3 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1612
  %4 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1613
  %5 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !1614
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %5), !dbg !1615
  %6 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1616
  %7 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1617
  %8 = load [4 x float]*, [4 x float]** %m4.addr, align 8, !dbg !1618
  call void @mul_m4_m4m4([4 x float]* %6, [4 x float]* %7, [4 x float]* %8), !dbg !1619
  %9 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1620
  %10 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1621
  %11 = load [4 x float]*, [4 x float]** %m5.addr, align 8, !dbg !1622
  call void @mul_m4_m4m4([4 x float]* %9, [4 x float]* %10, [4 x float]* %11), !dbg !1623
  %12 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1624
  %13 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1625
  %14 = load [4 x float]*, [4 x float]** %m6.addr, align 8, !dbg !1626
  call void @mul_m4_m4m4([4 x float]* %12, [4 x float]* %13, [4 x float]* %14), !dbg !1627
  %15 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1628
  %16 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1629
  %17 = load [4 x float]*, [4 x float]** %m7.addr, align 8, !dbg !1630
  call void @mul_m4_m4m4([4 x float]* %15, [4 x float]* %16, [4 x float]* %17), !dbg !1631
  ret void, !dbg !1632
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @_va_mul_m4_series_9([4 x float]* %r, [4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3, [4 x float]* %m4, [4 x float]* %m5, [4 x float]* %m6, [4 x float]* %m7, [4 x float]* %m8) #0 !dbg !1633 {
entry:
  %r.addr = alloca [4 x float]*, align 8
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %m4.addr = alloca [4 x float]*, align 8
  %m5.addr = alloca [4 x float]*, align 8
  %m6.addr = alloca [4 x float]*, align 8
  %m7.addr = alloca [4 x float]*, align 8
  %m8.addr = alloca [4 x float]*, align 8
  store [4 x float]* %r, [4 x float]** %r.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %r.addr, metadata !1636, metadata !DIExpression()), !dbg !1637
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !1638, metadata !DIExpression()), !dbg !1639
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !1640, metadata !DIExpression()), !dbg !1641
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !1642, metadata !DIExpression()), !dbg !1643
  store [4 x float]* %m4, [4 x float]** %m4.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m4.addr, metadata !1644, metadata !DIExpression()), !dbg !1645
  store [4 x float]* %m5, [4 x float]** %m5.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m5.addr, metadata !1646, metadata !DIExpression()), !dbg !1647
  store [4 x float]* %m6, [4 x float]** %m6.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m6.addr, metadata !1648, metadata !DIExpression()), !dbg !1649
  store [4 x float]* %m7, [4 x float]** %m7.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m7.addr, metadata !1650, metadata !DIExpression()), !dbg !1651
  store [4 x float]* %m8, [4 x float]** %m8.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m8.addr, metadata !1652, metadata !DIExpression()), !dbg !1653
  %0 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1654
  %1 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !1655
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !1656
  call void @mul_m4_m4m4([4 x float]* %0, [4 x float]* %1, [4 x float]* %2), !dbg !1657
  %3 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1658
  %4 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1659
  %5 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !1660
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %5), !dbg !1661
  %6 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1662
  %7 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1663
  %8 = load [4 x float]*, [4 x float]** %m4.addr, align 8, !dbg !1664
  call void @mul_m4_m4m4([4 x float]* %6, [4 x float]* %7, [4 x float]* %8), !dbg !1665
  %9 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1666
  %10 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1667
  %11 = load [4 x float]*, [4 x float]** %m5.addr, align 8, !dbg !1668
  call void @mul_m4_m4m4([4 x float]* %9, [4 x float]* %10, [4 x float]* %11), !dbg !1669
  %12 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1670
  %13 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1671
  %14 = load [4 x float]*, [4 x float]** %m6.addr, align 8, !dbg !1672
  call void @mul_m4_m4m4([4 x float]* %12, [4 x float]* %13, [4 x float]* %14), !dbg !1673
  %15 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1674
  %16 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1675
  %17 = load [4 x float]*, [4 x float]** %m7.addr, align 8, !dbg !1676
  call void @mul_m4_m4m4([4 x float]* %15, [4 x float]* %16, [4 x float]* %17), !dbg !1677
  %18 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1678
  %19 = load [4 x float]*, [4 x float]** %r.addr, align 8, !dbg !1679
  %20 = load [4 x float]*, [4 x float]** %m8.addr, align 8, !dbg !1680
  call void @mul_m4_m4m4([4 x float]* %18, [4 x float]* %19, [4 x float]* %20), !dbg !1681
  ret void, !dbg !1682
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v2_m3v2(float* %r, [3 x float]* %m, float* %v) #0 !dbg !1683 {
entry:
  %r.addr = alloca float*, align 8
  %m.addr = alloca [3 x float]*, align 8
  %v.addr = alloca float*, align 8
  %temp = alloca [3 x float], align 4
  %warped = alloca [3 x float], align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1687, metadata !DIExpression()), !dbg !1688
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !1689, metadata !DIExpression()), !dbg !1690
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !1691, metadata !DIExpression()), !dbg !1692
  call void @llvm.dbg.declare(metadata [3 x float]* %temp, metadata !1693, metadata !DIExpression()), !dbg !1694
  call void @llvm.dbg.declare(metadata [3 x float]* %warped, metadata !1695, metadata !DIExpression()), !dbg !1696
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %temp, i64 0, i64 0, !dbg !1697
  %0 = load float*, float** %v.addr, align 8, !dbg !1698
  call void @copy_v2_v2(float* %arraydecay, float* %0), !dbg !1699
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %temp, i64 0, i64 2, !dbg !1700
  store float 1.000000e+00, float* %arrayidx, align 4, !dbg !1701
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %warped, i64 0, i64 0, !dbg !1702
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !1703
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %temp, i64 0, i64 0, !dbg !1704
  call void @mul_v3_m3v3(float* %arraydecay1, [3 x float]* %1, float* %arraydecay2), !dbg !1705
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %warped, i64 0, i64 0, !dbg !1706
  %2 = load float, float* %arrayidx3, align 4, !dbg !1706
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %warped, i64 0, i64 2, !dbg !1707
  %3 = load float, float* %arrayidx4, align 4, !dbg !1707
  %div = fdiv float %2, %3, !dbg !1708
  %4 = load float*, float** %r.addr, align 8, !dbg !1709
  %arrayidx5 = getelementptr inbounds float, float* %4, i64 0, !dbg !1709
  store float %div, float* %arrayidx5, align 4, !dbg !1710
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %warped, i64 0, i64 1, !dbg !1711
  %5 = load float, float* %arrayidx6, align 4, !dbg !1711
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %warped, i64 0, i64 2, !dbg !1712
  %6 = load float, float* %arrayidx7, align 4, !dbg !1712
  %div8 = fdiv float %5, %6, !dbg !1713
  %7 = load float*, float** %r.addr, align 8, !dbg !1714
  %arrayidx9 = getelementptr inbounds float, float* %7, i64 1, !dbg !1714
  store float %div8, float* %arrayidx9, align 4, !dbg !1715
  ret void, !dbg !1716
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v2_v2(float* %r, float* %a) #0 !dbg !1717 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1723, metadata !DIExpression()), !dbg !1724
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !1725, metadata !DIExpression()), !dbg !1726
  %0 = load float*, float** %a.addr, align 8, !dbg !1727
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !1727
  %1 = load float, float* %arrayidx, align 4, !dbg !1727
  %2 = load float*, float** %r.addr, align 8, !dbg !1728
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !1728
  store float %1, float* %arrayidx1, align 4, !dbg !1729
  %3 = load float*, float** %a.addr, align 8, !dbg !1730
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !1730
  %4 = load float, float* %arrayidx2, align 4, !dbg !1730
  %5 = load float*, float** %r.addr, align 8, !dbg !1731
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !1731
  store float %4, float* %arrayidx3, align 4, !dbg !1732
  ret void, !dbg !1733
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v3_m3v3(float* %r, [3 x float]* %M, float* %a) #0 !dbg !1734 {
entry:
  %r.addr = alloca float*, align 8
  %M.addr = alloca [3 x float]*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1737, metadata !DIExpression()), !dbg !1738
  store [3 x float]* %M, [3 x float]** %M.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %M.addr, metadata !1739, metadata !DIExpression()), !dbg !1740
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !1741, metadata !DIExpression()), !dbg !1742
  %0 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1743
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !1743
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !1743
  %1 = load float, float* %arrayidx1, align 4, !dbg !1743
  %2 = load float*, float** %a.addr, align 8, !dbg !1744
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 0, !dbg !1744
  %3 = load float, float* %arrayidx2, align 4, !dbg !1744
  %mul = fmul float %1, %3, !dbg !1745
  %4 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1746
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 1, !dbg !1746
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 0, !dbg !1746
  %5 = load float, float* %arrayidx4, align 4, !dbg !1746
  %6 = load float*, float** %a.addr, align 8, !dbg !1747
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 1, !dbg !1747
  %7 = load float, float* %arrayidx5, align 4, !dbg !1747
  %mul6 = fmul float %5, %7, !dbg !1748
  %add = fadd float %mul, %mul6, !dbg !1749
  %8 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1750
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 2, !dbg !1750
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 0, !dbg !1750
  %9 = load float, float* %arrayidx8, align 4, !dbg !1750
  %10 = load float*, float** %a.addr, align 8, !dbg !1751
  %arrayidx9 = getelementptr inbounds float, float* %10, i64 2, !dbg !1751
  %11 = load float, float* %arrayidx9, align 4, !dbg !1751
  %mul10 = fmul float %9, %11, !dbg !1752
  %add11 = fadd float %add, %mul10, !dbg !1753
  %12 = load float*, float** %r.addr, align 8, !dbg !1754
  %arrayidx12 = getelementptr inbounds float, float* %12, i64 0, !dbg !1754
  store float %add11, float* %arrayidx12, align 4, !dbg !1755
  %13 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1756
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, !dbg !1756
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx13, i64 0, i64 1, !dbg !1756
  %14 = load float, float* %arrayidx14, align 4, !dbg !1756
  %15 = load float*, float** %a.addr, align 8, !dbg !1757
  %arrayidx15 = getelementptr inbounds float, float* %15, i64 0, !dbg !1757
  %16 = load float, float* %arrayidx15, align 4, !dbg !1757
  %mul16 = fmul float %14, %16, !dbg !1758
  %17 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1759
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 1, !dbg !1759
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx17, i64 0, i64 1, !dbg !1759
  %18 = load float, float* %arrayidx18, align 4, !dbg !1759
  %19 = load float*, float** %a.addr, align 8, !dbg !1760
  %arrayidx19 = getelementptr inbounds float, float* %19, i64 1, !dbg !1760
  %20 = load float, float* %arrayidx19, align 4, !dbg !1760
  %mul20 = fmul float %18, %20, !dbg !1761
  %add21 = fadd float %mul16, %mul20, !dbg !1762
  %21 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1763
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 2, !dbg !1763
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 1, !dbg !1763
  %22 = load float, float* %arrayidx23, align 4, !dbg !1763
  %23 = load float*, float** %a.addr, align 8, !dbg !1764
  %arrayidx24 = getelementptr inbounds float, float* %23, i64 2, !dbg !1764
  %24 = load float, float* %arrayidx24, align 4, !dbg !1764
  %mul25 = fmul float %22, %24, !dbg !1765
  %add26 = fadd float %add21, %mul25, !dbg !1766
  %25 = load float*, float** %r.addr, align 8, !dbg !1767
  %arrayidx27 = getelementptr inbounds float, float* %25, i64 1, !dbg !1767
  store float %add26, float* %arrayidx27, align 4, !dbg !1768
  %26 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1769
  %arrayidx28 = getelementptr inbounds [3 x float], [3 x float]* %26, i64 0, !dbg !1769
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx28, i64 0, i64 2, !dbg !1769
  %27 = load float, float* %arrayidx29, align 4, !dbg !1769
  %28 = load float*, float** %a.addr, align 8, !dbg !1770
  %arrayidx30 = getelementptr inbounds float, float* %28, i64 0, !dbg !1770
  %29 = load float, float* %arrayidx30, align 4, !dbg !1770
  %mul31 = fmul float %27, %29, !dbg !1771
  %30 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1772
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %30, i64 1, !dbg !1772
  %arrayidx33 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx32, i64 0, i64 2, !dbg !1772
  %31 = load float, float* %arrayidx33, align 4, !dbg !1772
  %32 = load float*, float** %a.addr, align 8, !dbg !1773
  %arrayidx34 = getelementptr inbounds float, float* %32, i64 1, !dbg !1773
  %33 = load float, float* %arrayidx34, align 4, !dbg !1773
  %mul35 = fmul float %31, %33, !dbg !1774
  %add36 = fadd float %mul31, %mul35, !dbg !1775
  %34 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !1776
  %arrayidx37 = getelementptr inbounds [3 x float], [3 x float]* %34, i64 2, !dbg !1776
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx37, i64 0, i64 2, !dbg !1776
  %35 = load float, float* %arrayidx38, align 4, !dbg !1776
  %36 = load float*, float** %a.addr, align 8, !dbg !1777
  %arrayidx39 = getelementptr inbounds float, float* %36, i64 2, !dbg !1777
  %37 = load float, float* %arrayidx39, align 4, !dbg !1777
  %mul40 = fmul float %35, %37, !dbg !1778
  %add41 = fadd float %add36, %mul40, !dbg !1779
  %38 = load float*, float** %r.addr, align 8, !dbg !1780
  %arrayidx42 = getelementptr inbounds float, float* %38, i64 2, !dbg !1780
  store float %add41, float* %arrayidx42, align 4, !dbg !1781
  ret void, !dbg !1782
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m3_v2([3 x float]* %m, float* %r) #0 !dbg !1783 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  %r.addr = alloca float*, align 8
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !1786, metadata !DIExpression()), !dbg !1787
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1788, metadata !DIExpression()), !dbg !1789
  %0 = load float*, float** %r.addr, align 8, !dbg !1790
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !1791
  %2 = load float*, float** %r.addr, align 8, !dbg !1792
  call void @mul_v2_m3v2(float* %0, [3 x float]* %1, float* %2), !dbg !1793
  ret void, !dbg !1794
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_v3([4 x float]* %mat, float* %vec) #0 !dbg !1795 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !1798, metadata !DIExpression()), !dbg !1799
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !1800, metadata !DIExpression()), !dbg !1801
  call void @llvm.dbg.declare(metadata float* %x, metadata !1802, metadata !DIExpression()), !dbg !1803
  %0 = load float*, float** %vec.addr, align 8, !dbg !1804
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !1804
  %1 = load float, float* %arrayidx, align 4, !dbg !1804
  store float %1, float* %x, align 4, !dbg !1803
  call void @llvm.dbg.declare(metadata float* %y, metadata !1805, metadata !DIExpression()), !dbg !1806
  %2 = load float*, float** %vec.addr, align 8, !dbg !1807
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !1807
  %3 = load float, float* %arrayidx1, align 4, !dbg !1807
  store float %3, float* %y, align 4, !dbg !1806
  %4 = load float, float* %x, align 4, !dbg !1808
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1809
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !1809
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !1809
  %6 = load float, float* %arrayidx3, align 4, !dbg !1809
  %mul = fmul float %4, %6, !dbg !1810
  %7 = load float, float* %y, align 4, !dbg !1811
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1812
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !1812
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 0, !dbg !1812
  %9 = load float, float* %arrayidx5, align 4, !dbg !1812
  %mul6 = fmul float %7, %9, !dbg !1813
  %add = fadd float %mul, %mul6, !dbg !1814
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1815
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 2, !dbg !1815
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !1815
  %11 = load float, float* %arrayidx8, align 4, !dbg !1815
  %12 = load float*, float** %vec.addr, align 8, !dbg !1816
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 2, !dbg !1816
  %13 = load float, float* %arrayidx9, align 4, !dbg !1816
  %mul10 = fmul float %11, %13, !dbg !1817
  %add11 = fadd float %add, %mul10, !dbg !1818
  %14 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1819
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 3, !dbg !1819
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !1819
  %15 = load float, float* %arrayidx13, align 4, !dbg !1819
  %add14 = fadd float %add11, %15, !dbg !1820
  %16 = load float*, float** %vec.addr, align 8, !dbg !1821
  %arrayidx15 = getelementptr inbounds float, float* %16, i64 0, !dbg !1821
  store float %add14, float* %arrayidx15, align 4, !dbg !1822
  %17 = load float, float* %x, align 4, !dbg !1823
  %18 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1824
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 0, !dbg !1824
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 1, !dbg !1824
  %19 = load float, float* %arrayidx17, align 4, !dbg !1824
  %mul18 = fmul float %17, %19, !dbg !1825
  %20 = load float, float* %y, align 4, !dbg !1826
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1827
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 1, !dbg !1827
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx19, i64 0, i64 1, !dbg !1827
  %22 = load float, float* %arrayidx20, align 4, !dbg !1827
  %mul21 = fmul float %20, %22, !dbg !1828
  %add22 = fadd float %mul18, %mul21, !dbg !1829
  %23 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1830
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 2, !dbg !1830
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 1, !dbg !1830
  %24 = load float, float* %arrayidx24, align 4, !dbg !1830
  %25 = load float*, float** %vec.addr, align 8, !dbg !1831
  %arrayidx25 = getelementptr inbounds float, float* %25, i64 2, !dbg !1831
  %26 = load float, float* %arrayidx25, align 4, !dbg !1831
  %mul26 = fmul float %24, %26, !dbg !1832
  %add27 = fadd float %add22, %mul26, !dbg !1833
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1834
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 3, !dbg !1834
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 1, !dbg !1834
  %28 = load float, float* %arrayidx29, align 4, !dbg !1834
  %add30 = fadd float %add27, %28, !dbg !1835
  %29 = load float*, float** %vec.addr, align 8, !dbg !1836
  %arrayidx31 = getelementptr inbounds float, float* %29, i64 1, !dbg !1836
  store float %add30, float* %arrayidx31, align 4, !dbg !1837
  %30 = load float, float* %x, align 4, !dbg !1838
  %31 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1839
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %31, i64 0, !dbg !1839
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx32, i64 0, i64 2, !dbg !1839
  %32 = load float, float* %arrayidx33, align 4, !dbg !1839
  %mul34 = fmul float %30, %32, !dbg !1840
  %33 = load float, float* %y, align 4, !dbg !1841
  %34 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1842
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %34, i64 1, !dbg !1842
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 2, !dbg !1842
  %35 = load float, float* %arrayidx36, align 4, !dbg !1842
  %mul37 = fmul float %33, %35, !dbg !1843
  %add38 = fadd float %mul34, %mul37, !dbg !1844
  %36 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1845
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %36, i64 2, !dbg !1845
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx39, i64 0, i64 2, !dbg !1845
  %37 = load float, float* %arrayidx40, align 4, !dbg !1845
  %38 = load float*, float** %vec.addr, align 8, !dbg !1846
  %arrayidx41 = getelementptr inbounds float, float* %38, i64 2, !dbg !1846
  %39 = load float, float* %arrayidx41, align 4, !dbg !1846
  %mul42 = fmul float %37, %39, !dbg !1847
  %add43 = fadd float %add38, %mul42, !dbg !1848
  %40 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1849
  %arrayidx44 = getelementptr inbounds [4 x float], [4 x float]* %40, i64 3, !dbg !1849
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 2, !dbg !1849
  %41 = load float, float* %arrayidx45, align 4, !dbg !1849
  %add46 = fadd float %add43, %41, !dbg !1850
  %42 = load float*, float** %vec.addr, align 8, !dbg !1851
  %arrayidx47 = getelementptr inbounds float, float* %42, i64 2, !dbg !1851
  store float %add46, float* %arrayidx47, align 4, !dbg !1852
  ret void, !dbg !1853
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v3_m4v3(float* %r, [4 x float]* %mat, float* %vec) #0 !dbg !1854 {
entry:
  %r.addr = alloca float*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1857, metadata !DIExpression()), !dbg !1858
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !1859, metadata !DIExpression()), !dbg !1860
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !1861, metadata !DIExpression()), !dbg !1862
  call void @llvm.dbg.declare(metadata float* %x, metadata !1863, metadata !DIExpression()), !dbg !1864
  %0 = load float*, float** %vec.addr, align 8, !dbg !1865
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !1865
  %1 = load float, float* %arrayidx, align 4, !dbg !1865
  store float %1, float* %x, align 4, !dbg !1864
  call void @llvm.dbg.declare(metadata float* %y, metadata !1866, metadata !DIExpression()), !dbg !1867
  %2 = load float*, float** %vec.addr, align 8, !dbg !1868
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !1868
  %3 = load float, float* %arrayidx1, align 4, !dbg !1868
  store float %3, float* %y, align 4, !dbg !1867
  %4 = load float, float* %x, align 4, !dbg !1869
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1870
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !1870
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !1870
  %6 = load float, float* %arrayidx3, align 4, !dbg !1870
  %mul = fmul float %4, %6, !dbg !1871
  %7 = load float, float* %y, align 4, !dbg !1872
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1873
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !1873
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 0, !dbg !1873
  %9 = load float, float* %arrayidx5, align 4, !dbg !1873
  %mul6 = fmul float %7, %9, !dbg !1874
  %add = fadd float %mul, %mul6, !dbg !1875
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1876
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 2, !dbg !1876
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !1876
  %11 = load float, float* %arrayidx8, align 4, !dbg !1876
  %12 = load float*, float** %vec.addr, align 8, !dbg !1877
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 2, !dbg !1877
  %13 = load float, float* %arrayidx9, align 4, !dbg !1877
  %mul10 = fmul float %11, %13, !dbg !1878
  %add11 = fadd float %add, %mul10, !dbg !1879
  %14 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1880
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 3, !dbg !1880
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !1880
  %15 = load float, float* %arrayidx13, align 4, !dbg !1880
  %add14 = fadd float %add11, %15, !dbg !1881
  %16 = load float*, float** %r.addr, align 8, !dbg !1882
  %arrayidx15 = getelementptr inbounds float, float* %16, i64 0, !dbg !1882
  store float %add14, float* %arrayidx15, align 4, !dbg !1883
  %17 = load float, float* %x, align 4, !dbg !1884
  %18 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1885
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 0, !dbg !1885
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 1, !dbg !1885
  %19 = load float, float* %arrayidx17, align 4, !dbg !1885
  %mul18 = fmul float %17, %19, !dbg !1886
  %20 = load float, float* %y, align 4, !dbg !1887
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1888
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 1, !dbg !1888
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx19, i64 0, i64 1, !dbg !1888
  %22 = load float, float* %arrayidx20, align 4, !dbg !1888
  %mul21 = fmul float %20, %22, !dbg !1889
  %add22 = fadd float %mul18, %mul21, !dbg !1890
  %23 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1891
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 2, !dbg !1891
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 1, !dbg !1891
  %24 = load float, float* %arrayidx24, align 4, !dbg !1891
  %25 = load float*, float** %vec.addr, align 8, !dbg !1892
  %arrayidx25 = getelementptr inbounds float, float* %25, i64 2, !dbg !1892
  %26 = load float, float* %arrayidx25, align 4, !dbg !1892
  %mul26 = fmul float %24, %26, !dbg !1893
  %add27 = fadd float %add22, %mul26, !dbg !1894
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1895
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 3, !dbg !1895
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 1, !dbg !1895
  %28 = load float, float* %arrayidx29, align 4, !dbg !1895
  %add30 = fadd float %add27, %28, !dbg !1896
  %29 = load float*, float** %r.addr, align 8, !dbg !1897
  %arrayidx31 = getelementptr inbounds float, float* %29, i64 1, !dbg !1897
  store float %add30, float* %arrayidx31, align 4, !dbg !1898
  %30 = load float, float* %x, align 4, !dbg !1899
  %31 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1900
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %31, i64 0, !dbg !1900
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx32, i64 0, i64 2, !dbg !1900
  %32 = load float, float* %arrayidx33, align 4, !dbg !1900
  %mul34 = fmul float %30, %32, !dbg !1901
  %33 = load float, float* %y, align 4, !dbg !1902
  %34 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1903
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %34, i64 1, !dbg !1903
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 2, !dbg !1903
  %35 = load float, float* %arrayidx36, align 4, !dbg !1903
  %mul37 = fmul float %33, %35, !dbg !1904
  %add38 = fadd float %mul34, %mul37, !dbg !1905
  %36 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1906
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %36, i64 2, !dbg !1906
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx39, i64 0, i64 2, !dbg !1906
  %37 = load float, float* %arrayidx40, align 4, !dbg !1906
  %38 = load float*, float** %vec.addr, align 8, !dbg !1907
  %arrayidx41 = getelementptr inbounds float, float* %38, i64 2, !dbg !1907
  %39 = load float, float* %arrayidx41, align 4, !dbg !1907
  %mul42 = fmul float %37, %39, !dbg !1908
  %add43 = fadd float %add38, %mul42, !dbg !1909
  %40 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1910
  %arrayidx44 = getelementptr inbounds [4 x float], [4 x float]* %40, i64 3, !dbg !1910
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 2, !dbg !1910
  %41 = load float, float* %arrayidx45, align 4, !dbg !1910
  %add46 = fadd float %add43, %41, !dbg !1911
  %42 = load float*, float** %r.addr, align 8, !dbg !1912
  %arrayidx47 = getelementptr inbounds float, float* %42, i64 2, !dbg !1912
  store float %add46, float* %arrayidx47, align 4, !dbg !1913
  ret void, !dbg !1914
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v2_m4v3(float* %r, [4 x float]* %mat, float* %vec) #0 !dbg !1915 {
entry:
  %r.addr = alloca float*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1916, metadata !DIExpression()), !dbg !1917
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !1918, metadata !DIExpression()), !dbg !1919
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !1920, metadata !DIExpression()), !dbg !1921
  call void @llvm.dbg.declare(metadata float* %x, metadata !1922, metadata !DIExpression()), !dbg !1923
  %0 = load float*, float** %vec.addr, align 8, !dbg !1924
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !1924
  %1 = load float, float* %arrayidx, align 4, !dbg !1924
  store float %1, float* %x, align 4, !dbg !1923
  %2 = load float, float* %x, align 4, !dbg !1925
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1926
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, !dbg !1926
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 0, !dbg !1926
  %4 = load float, float* %arrayidx2, align 4, !dbg !1926
  %mul = fmul float %2, %4, !dbg !1927
  %5 = load float*, float** %vec.addr, align 8, !dbg !1928
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !1928
  %6 = load float, float* %arrayidx3, align 4, !dbg !1928
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1929
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 1, !dbg !1929
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 0, !dbg !1929
  %8 = load float, float* %arrayidx5, align 4, !dbg !1929
  %mul6 = fmul float %6, %8, !dbg !1930
  %add = fadd float %mul, %mul6, !dbg !1931
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1932
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 2, !dbg !1932
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !1932
  %10 = load float, float* %arrayidx8, align 4, !dbg !1932
  %11 = load float*, float** %vec.addr, align 8, !dbg !1933
  %arrayidx9 = getelementptr inbounds float, float* %11, i64 2, !dbg !1933
  %12 = load float, float* %arrayidx9, align 4, !dbg !1933
  %mul10 = fmul float %10, %12, !dbg !1934
  %add11 = fadd float %add, %mul10, !dbg !1935
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1936
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 3, !dbg !1936
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !1936
  %14 = load float, float* %arrayidx13, align 4, !dbg !1936
  %add14 = fadd float %add11, %14, !dbg !1937
  %15 = load float*, float** %r.addr, align 8, !dbg !1938
  %arrayidx15 = getelementptr inbounds float, float* %15, i64 0, !dbg !1938
  store float %add14, float* %arrayidx15, align 4, !dbg !1939
  %16 = load float, float* %x, align 4, !dbg !1940
  %17 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1941
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 0, !dbg !1941
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 1, !dbg !1941
  %18 = load float, float* %arrayidx17, align 4, !dbg !1941
  %mul18 = fmul float %16, %18, !dbg !1942
  %19 = load float*, float** %vec.addr, align 8, !dbg !1943
  %arrayidx19 = getelementptr inbounds float, float* %19, i64 1, !dbg !1943
  %20 = load float, float* %arrayidx19, align 4, !dbg !1943
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1944
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 1, !dbg !1944
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 1, !dbg !1944
  %22 = load float, float* %arrayidx21, align 4, !dbg !1944
  %mul22 = fmul float %20, %22, !dbg !1945
  %add23 = fadd float %mul18, %mul22, !dbg !1946
  %23 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1947
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 2, !dbg !1947
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 1, !dbg !1947
  %24 = load float, float* %arrayidx25, align 4, !dbg !1947
  %25 = load float*, float** %vec.addr, align 8, !dbg !1948
  %arrayidx26 = getelementptr inbounds float, float* %25, i64 2, !dbg !1948
  %26 = load float, float* %arrayidx26, align 4, !dbg !1948
  %mul27 = fmul float %24, %26, !dbg !1949
  %add28 = fadd float %add23, %mul27, !dbg !1950
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !1951
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 3, !dbg !1951
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 1, !dbg !1951
  %28 = load float, float* %arrayidx30, align 4, !dbg !1951
  %add31 = fadd float %add28, %28, !dbg !1952
  %29 = load float*, float** %r.addr, align 8, !dbg !1953
  %arrayidx32 = getelementptr inbounds float, float* %29, i64 1, !dbg !1953
  store float %add31, float* %arrayidx32, align 4, !dbg !1954
  ret void, !dbg !1955
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v2_m2v2(float* %r, [2 x float]* %mat, float* %vec) #0 !dbg !1956 {
entry:
  %r.addr = alloca float*, align 8
  %mat.addr = alloca [2 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !1959, metadata !DIExpression()), !dbg !1960
  store [2 x float]* %mat, [2 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %mat.addr, metadata !1961, metadata !DIExpression()), !dbg !1962
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !1963, metadata !DIExpression()), !dbg !1964
  call void @llvm.dbg.declare(metadata float* %x, metadata !1965, metadata !DIExpression()), !dbg !1966
  %0 = load float*, float** %vec.addr, align 8, !dbg !1967
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !1967
  %1 = load float, float* %arrayidx, align 4, !dbg !1967
  store float %1, float* %x, align 4, !dbg !1966
  %2 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !1968
  %arrayidx1 = getelementptr inbounds [2 x float], [2 x float]* %2, i64 0, !dbg !1968
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx1, i64 0, i64 0, !dbg !1968
  %3 = load float, float* %arrayidx2, align 4, !dbg !1968
  %4 = load float, float* %x, align 4, !dbg !1969
  %mul = fmul float %3, %4, !dbg !1970
  %5 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !1971
  %arrayidx3 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 1, !dbg !1971
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx3, i64 0, i64 0, !dbg !1971
  %6 = load float, float* %arrayidx4, align 4, !dbg !1971
  %7 = load float*, float** %vec.addr, align 8, !dbg !1972
  %arrayidx5 = getelementptr inbounds float, float* %7, i64 1, !dbg !1972
  %8 = load float, float* %arrayidx5, align 4, !dbg !1972
  %mul6 = fmul float %6, %8, !dbg !1973
  %add = fadd float %mul, %mul6, !dbg !1974
  %9 = load float*, float** %r.addr, align 8, !dbg !1975
  %arrayidx7 = getelementptr inbounds float, float* %9, i64 0, !dbg !1975
  store float %add, float* %arrayidx7, align 4, !dbg !1976
  %10 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !1977
  %arrayidx8 = getelementptr inbounds [2 x float], [2 x float]* %10, i64 0, !dbg !1977
  %arrayidx9 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx8, i64 0, i64 1, !dbg !1977
  %11 = load float, float* %arrayidx9, align 4, !dbg !1977
  %12 = load float, float* %x, align 4, !dbg !1978
  %mul10 = fmul float %11, %12, !dbg !1979
  %13 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !1980
  %arrayidx11 = getelementptr inbounds [2 x float], [2 x float]* %13, i64 1, !dbg !1980
  %arrayidx12 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx11, i64 0, i64 1, !dbg !1980
  %14 = load float, float* %arrayidx12, align 4, !dbg !1980
  %15 = load float*, float** %vec.addr, align 8, !dbg !1981
  %arrayidx13 = getelementptr inbounds float, float* %15, i64 1, !dbg !1981
  %16 = load float, float* %arrayidx13, align 4, !dbg !1981
  %mul14 = fmul float %14, %16, !dbg !1982
  %add15 = fadd float %mul10, %mul14, !dbg !1983
  %17 = load float*, float** %r.addr, align 8, !dbg !1984
  %arrayidx16 = getelementptr inbounds float, float* %17, i64 1, !dbg !1984
  store float %add15, float* %arrayidx16, align 4, !dbg !1985
  ret void, !dbg !1986
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m2v2([2 x float]* %mat, float* %vec) #0 !dbg !1987 {
entry:
  %mat.addr = alloca [2 x float]*, align 8
  %vec.addr = alloca float*, align 8
  store [2 x float]* %mat, [2 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %mat.addr, metadata !1990, metadata !DIExpression()), !dbg !1991
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !1992, metadata !DIExpression()), !dbg !1993
  %0 = load float*, float** %vec.addr, align 8, !dbg !1994
  %1 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !1995
  %2 = load float*, float** %vec.addr, align 8, !dbg !1996
  call void @mul_v2_m2v2(float* %0, [2 x float]* %1, float* %2), !dbg !1997
  ret void, !dbg !1998
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_mat3_m4_v3([4 x float]* %mat, float* %vec) #0 !dbg !1999 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2000, metadata !DIExpression()), !dbg !2001
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !2002, metadata !DIExpression()), !dbg !2003
  call void @llvm.dbg.declare(metadata float* %x, metadata !2004, metadata !DIExpression()), !dbg !2005
  %0 = load float*, float** %vec.addr, align 8, !dbg !2006
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2006
  %1 = load float, float* %arrayidx, align 4, !dbg !2006
  store float %1, float* %x, align 4, !dbg !2005
  call void @llvm.dbg.declare(metadata float* %y, metadata !2007, metadata !DIExpression()), !dbg !2008
  %2 = load float*, float** %vec.addr, align 8, !dbg !2009
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !2009
  %3 = load float, float* %arrayidx1, align 4, !dbg !2009
  store float %3, float* %y, align 4, !dbg !2008
  %4 = load float, float* %x, align 4, !dbg !2010
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2011
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !2011
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !2011
  %6 = load float, float* %arrayidx3, align 4, !dbg !2011
  %mul = fmul float %4, %6, !dbg !2012
  %7 = load float, float* %y, align 4, !dbg !2013
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2014
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !2014
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 0, !dbg !2014
  %9 = load float, float* %arrayidx5, align 4, !dbg !2014
  %mul6 = fmul float %7, %9, !dbg !2015
  %add = fadd float %mul, %mul6, !dbg !2016
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2017
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 2, !dbg !2017
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !2017
  %11 = load float, float* %arrayidx8, align 4, !dbg !2017
  %12 = load float*, float** %vec.addr, align 8, !dbg !2018
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 2, !dbg !2018
  %13 = load float, float* %arrayidx9, align 4, !dbg !2018
  %mul10 = fmul float %11, %13, !dbg !2019
  %add11 = fadd float %add, %mul10, !dbg !2020
  %14 = load float*, float** %vec.addr, align 8, !dbg !2021
  %arrayidx12 = getelementptr inbounds float, float* %14, i64 0, !dbg !2021
  store float %add11, float* %arrayidx12, align 4, !dbg !2022
  %15 = load float, float* %x, align 4, !dbg !2023
  %16 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2024
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 0, !dbg !2024
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx13, i64 0, i64 1, !dbg !2024
  %17 = load float, float* %arrayidx14, align 4, !dbg !2024
  %mul15 = fmul float %15, %17, !dbg !2025
  %18 = load float, float* %y, align 4, !dbg !2026
  %19 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2027
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 1, !dbg !2027
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 1, !dbg !2027
  %20 = load float, float* %arrayidx17, align 4, !dbg !2027
  %mul18 = fmul float %18, %20, !dbg !2028
  %add19 = fadd float %mul15, %mul18, !dbg !2029
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2030
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 2, !dbg !2030
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 1, !dbg !2030
  %22 = load float, float* %arrayidx21, align 4, !dbg !2030
  %23 = load float*, float** %vec.addr, align 8, !dbg !2031
  %arrayidx22 = getelementptr inbounds float, float* %23, i64 2, !dbg !2031
  %24 = load float, float* %arrayidx22, align 4, !dbg !2031
  %mul23 = fmul float %22, %24, !dbg !2032
  %add24 = fadd float %add19, %mul23, !dbg !2033
  %25 = load float*, float** %vec.addr, align 8, !dbg !2034
  %arrayidx25 = getelementptr inbounds float, float* %25, i64 1, !dbg !2034
  store float %add24, float* %arrayidx25, align 4, !dbg !2035
  %26 = load float, float* %x, align 4, !dbg !2036
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2037
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 0, !dbg !2037
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 2, !dbg !2037
  %28 = load float, float* %arrayidx27, align 4, !dbg !2037
  %mul28 = fmul float %26, %28, !dbg !2038
  %29 = load float, float* %y, align 4, !dbg !2039
  %30 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2040
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 1, !dbg !2040
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 2, !dbg !2040
  %31 = load float, float* %arrayidx30, align 4, !dbg !2040
  %mul31 = fmul float %29, %31, !dbg !2041
  %add32 = fadd float %mul28, %mul31, !dbg !2042
  %32 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2043
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %32, i64 2, !dbg !2043
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 2, !dbg !2043
  %33 = load float, float* %arrayidx34, align 4, !dbg !2043
  %34 = load float*, float** %vec.addr, align 8, !dbg !2044
  %arrayidx35 = getelementptr inbounds float, float* %34, i64 2, !dbg !2044
  %35 = load float, float* %arrayidx35, align 4, !dbg !2044
  %mul36 = fmul float %33, %35, !dbg !2045
  %add37 = fadd float %add32, %mul36, !dbg !2046
  %36 = load float*, float** %vec.addr, align 8, !dbg !2047
  %arrayidx38 = getelementptr inbounds float, float* %36, i64 2, !dbg !2047
  store float %add37, float* %arrayidx38, align 4, !dbg !2048
  ret void, !dbg !2049
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_project_m4_v3([4 x float]* %mat, float* %vec) #0 !dbg !2050 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %w = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2051, metadata !DIExpression()), !dbg !2052
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !2053, metadata !DIExpression()), !dbg !2054
  call void @llvm.dbg.declare(metadata float* %w, metadata !2055, metadata !DIExpression()), !dbg !2056
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2057
  %1 = load float*, float** %vec.addr, align 8, !dbg !2058
  %call = call float @mul_project_m4_v3_zfac([4 x float]* %0, float* %1), !dbg !2059
  store float %call, float* %w, align 4, !dbg !2056
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2060
  %3 = load float*, float** %vec.addr, align 8, !dbg !2061
  call void @mul_m4_v3([4 x float]* %2, float* %3), !dbg !2062
  %4 = load float, float* %w, align 4, !dbg !2063
  %5 = load float*, float** %vec.addr, align 8, !dbg !2064
  %arrayidx = getelementptr inbounds float, float* %5, i64 0, !dbg !2064
  %6 = load float, float* %arrayidx, align 4, !dbg !2065
  %div = fdiv float %6, %4, !dbg !2065
  store float %div, float* %arrayidx, align 4, !dbg !2065
  %7 = load float, float* %w, align 4, !dbg !2066
  %8 = load float*, float** %vec.addr, align 8, !dbg !2067
  %arrayidx1 = getelementptr inbounds float, float* %8, i64 1, !dbg !2067
  %9 = load float, float* %arrayidx1, align 4, !dbg !2068
  %div2 = fdiv float %9, %7, !dbg !2068
  store float %div2, float* %arrayidx1, align 4, !dbg !2068
  %10 = load float, float* %w, align 4, !dbg !2069
  %11 = load float*, float** %vec.addr, align 8, !dbg !2070
  %arrayidx3 = getelementptr inbounds float, float* %11, i64 2, !dbg !2070
  %12 = load float, float* %arrayidx3, align 4, !dbg !2071
  %div4 = fdiv float %12, %10, !dbg !2071
  store float %div4, float* %arrayidx3, align 4, !dbg !2071
  ret void, !dbg !2072
}

; Function Attrs: noinline nounwind uwtable
define internal float @mul_project_m4_v3_zfac([4 x float]* %mat, float* %co) #0 !dbg !2073 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %co.addr = alloca float*, align 8
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2076, metadata !DIExpression()), !dbg !2077
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !2078, metadata !DIExpression()), !dbg !2079
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2080
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !2080
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 3, !dbg !2080
  %1 = load float, float* %arrayidx1, align 4, !dbg !2080
  %2 = load float*, float** %co.addr, align 8, !dbg !2081
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 0, !dbg !2081
  %3 = load float, float* %arrayidx2, align 4, !dbg !2081
  %mul = fmul float %1, %3, !dbg !2082
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2083
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 1, !dbg !2083
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 3, !dbg !2083
  %5 = load float, float* %arrayidx4, align 4, !dbg !2083
  %6 = load float*, float** %co.addr, align 8, !dbg !2084
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 1, !dbg !2084
  %7 = load float, float* %arrayidx5, align 4, !dbg !2084
  %mul6 = fmul float %5, %7, !dbg !2085
  %add = fadd float %mul, %mul6, !dbg !2086
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2087
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 2, !dbg !2087
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 3, !dbg !2087
  %9 = load float, float* %arrayidx8, align 4, !dbg !2087
  %10 = load float*, float** %co.addr, align 8, !dbg !2088
  %arrayidx9 = getelementptr inbounds float, float* %10, i64 2, !dbg !2088
  %11 = load float, float* %arrayidx9, align 4, !dbg !2088
  %mul10 = fmul float %9, %11, !dbg !2089
  %add11 = fadd float %add, %mul10, !dbg !2090
  %12 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2091
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 3, !dbg !2091
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 3, !dbg !2091
  %13 = load float, float* %arrayidx13, align 4, !dbg !2091
  %add14 = fadd float %add11, %13, !dbg !2092
  ret float %add14, !dbg !2093
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v3_project_m4_v3(float* %r, [4 x float]* %mat, float* %vec) #0 !dbg !2094 {
entry:
  %r.addr = alloca float*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %w = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2095, metadata !DIExpression()), !dbg !2096
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2097, metadata !DIExpression()), !dbg !2098
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !2099, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.declare(metadata float* %w, metadata !2101, metadata !DIExpression()), !dbg !2102
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2103
  %1 = load float*, float** %vec.addr, align 8, !dbg !2104
  %call = call float @mul_project_m4_v3_zfac([4 x float]* %0, float* %1), !dbg !2105
  store float %call, float* %w, align 4, !dbg !2102
  %2 = load float*, float** %r.addr, align 8, !dbg !2106
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2107
  %4 = load float*, float** %vec.addr, align 8, !dbg !2108
  call void @mul_v3_m4v3(float* %2, [4 x float]* %3, float* %4), !dbg !2109
  %5 = load float, float* %w, align 4, !dbg !2110
  %6 = load float*, float** %r.addr, align 8, !dbg !2111
  %arrayidx = getelementptr inbounds float, float* %6, i64 0, !dbg !2111
  %7 = load float, float* %arrayidx, align 4, !dbg !2112
  %div = fdiv float %7, %5, !dbg !2112
  store float %div, float* %arrayidx, align 4, !dbg !2112
  %8 = load float, float* %w, align 4, !dbg !2113
  %9 = load float*, float** %r.addr, align 8, !dbg !2114
  %arrayidx1 = getelementptr inbounds float, float* %9, i64 1, !dbg !2114
  %10 = load float, float* %arrayidx1, align 4, !dbg !2115
  %div2 = fdiv float %10, %8, !dbg !2115
  store float %div2, float* %arrayidx1, align 4, !dbg !2115
  %11 = load float, float* %w, align 4, !dbg !2116
  %12 = load float*, float** %r.addr, align 8, !dbg !2117
  %arrayidx3 = getelementptr inbounds float, float* %12, i64 2, !dbg !2117
  %13 = load float, float* %arrayidx3, align 4, !dbg !2118
  %div4 = fdiv float %13, %11, !dbg !2118
  store float %div4, float* %arrayidx3, align 4, !dbg !2118
  ret void, !dbg !2119
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v2_project_m4_v3(float* %r, [4 x float]* %mat, float* %vec) #0 !dbg !2120 {
entry:
  %r.addr = alloca float*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %w = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2121, metadata !DIExpression()), !dbg !2122
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2123, metadata !DIExpression()), !dbg !2124
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !2125, metadata !DIExpression()), !dbg !2126
  call void @llvm.dbg.declare(metadata float* %w, metadata !2127, metadata !DIExpression()), !dbg !2128
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2129
  %1 = load float*, float** %vec.addr, align 8, !dbg !2130
  %call = call float @mul_project_m4_v3_zfac([4 x float]* %0, float* %1), !dbg !2131
  store float %call, float* %w, align 4, !dbg !2128
  %2 = load float*, float** %r.addr, align 8, !dbg !2132
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2133
  %4 = load float*, float** %vec.addr, align 8, !dbg !2134
  call void @mul_v2_m4v3(float* %2, [4 x float]* %3, float* %4), !dbg !2135
  %5 = load float, float* %w, align 4, !dbg !2136
  %6 = load float*, float** %r.addr, align 8, !dbg !2137
  %arrayidx = getelementptr inbounds float, float* %6, i64 0, !dbg !2137
  %7 = load float, float* %arrayidx, align 4, !dbg !2138
  %div = fdiv float %7, %5, !dbg !2138
  store float %div, float* %arrayidx, align 4, !dbg !2138
  %8 = load float, float* %w, align 4, !dbg !2139
  %9 = load float*, float** %r.addr, align 8, !dbg !2140
  %arrayidx1 = getelementptr inbounds float, float* %9, i64 1, !dbg !2140
  %10 = load float, float* %arrayidx1, align 4, !dbg !2141
  %div2 = fdiv float %10, %8, !dbg !2141
  store float %div2, float* %arrayidx1, align 4, !dbg !2141
  ret void, !dbg !2142
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v4_m4v4(float* %r, [4 x float]* %mat, float* %v) #0 !dbg !2143 {
entry:
  %r.addr = alloca float*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %v.addr = alloca float*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2144, metadata !DIExpression()), !dbg !2145
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2146, metadata !DIExpression()), !dbg !2147
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !2148, metadata !DIExpression()), !dbg !2149
  call void @llvm.dbg.declare(metadata float* %x, metadata !2150, metadata !DIExpression()), !dbg !2151
  %0 = load float*, float** %v.addr, align 8, !dbg !2152
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2152
  %1 = load float, float* %arrayidx, align 4, !dbg !2152
  store float %1, float* %x, align 4, !dbg !2151
  call void @llvm.dbg.declare(metadata float* %y, metadata !2153, metadata !DIExpression()), !dbg !2154
  %2 = load float*, float** %v.addr, align 8, !dbg !2155
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !2155
  %3 = load float, float* %arrayidx1, align 4, !dbg !2155
  store float %3, float* %y, align 4, !dbg !2154
  call void @llvm.dbg.declare(metadata float* %z, metadata !2156, metadata !DIExpression()), !dbg !2157
  %4 = load float*, float** %v.addr, align 8, !dbg !2158
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 2, !dbg !2158
  %5 = load float, float* %arrayidx2, align 4, !dbg !2158
  store float %5, float* %z, align 4, !dbg !2157
  %6 = load float, float* %x, align 4, !dbg !2159
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2160
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, !dbg !2160
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !2160
  %8 = load float, float* %arrayidx4, align 4, !dbg !2160
  %mul = fmul float %6, %8, !dbg !2161
  %9 = load float, float* %y, align 4, !dbg !2162
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2163
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !2163
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !2163
  %11 = load float, float* %arrayidx6, align 4, !dbg !2163
  %mul7 = fmul float %9, %11, !dbg !2164
  %add = fadd float %mul, %mul7, !dbg !2165
  %12 = load float, float* %z, align 4, !dbg !2166
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2167
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !2167
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 0, !dbg !2167
  %14 = load float, float* %arrayidx9, align 4, !dbg !2167
  %mul10 = fmul float %12, %14, !dbg !2168
  %add11 = fadd float %add, %mul10, !dbg !2169
  %15 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2170
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 3, !dbg !2170
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !2170
  %16 = load float, float* %arrayidx13, align 4, !dbg !2170
  %17 = load float*, float** %v.addr, align 8, !dbg !2171
  %arrayidx14 = getelementptr inbounds float, float* %17, i64 3, !dbg !2171
  %18 = load float, float* %arrayidx14, align 4, !dbg !2171
  %mul15 = fmul float %16, %18, !dbg !2172
  %add16 = fadd float %add11, %mul15, !dbg !2173
  %19 = load float*, float** %r.addr, align 8, !dbg !2174
  %arrayidx17 = getelementptr inbounds float, float* %19, i64 0, !dbg !2174
  store float %add16, float* %arrayidx17, align 4, !dbg !2175
  %20 = load float, float* %x, align 4, !dbg !2176
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2177
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, !dbg !2177
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 1, !dbg !2177
  %22 = load float, float* %arrayidx19, align 4, !dbg !2177
  %mul20 = fmul float %20, %22, !dbg !2178
  %23 = load float, float* %y, align 4, !dbg !2179
  %24 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2180
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 1, !dbg !2180
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx21, i64 0, i64 1, !dbg !2180
  %25 = load float, float* %arrayidx22, align 4, !dbg !2180
  %mul23 = fmul float %23, %25, !dbg !2181
  %add24 = fadd float %mul20, %mul23, !dbg !2182
  %26 = load float, float* %z, align 4, !dbg !2183
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2184
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 2, !dbg !2184
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 1, !dbg !2184
  %28 = load float, float* %arrayidx26, align 4, !dbg !2184
  %mul27 = fmul float %26, %28, !dbg !2185
  %add28 = fadd float %add24, %mul27, !dbg !2186
  %29 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2187
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 3, !dbg !2187
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 1, !dbg !2187
  %30 = load float, float* %arrayidx30, align 4, !dbg !2187
  %31 = load float*, float** %v.addr, align 8, !dbg !2188
  %arrayidx31 = getelementptr inbounds float, float* %31, i64 3, !dbg !2188
  %32 = load float, float* %arrayidx31, align 4, !dbg !2188
  %mul32 = fmul float %30, %32, !dbg !2189
  %add33 = fadd float %add28, %mul32, !dbg !2190
  %33 = load float*, float** %r.addr, align 8, !dbg !2191
  %arrayidx34 = getelementptr inbounds float, float* %33, i64 1, !dbg !2191
  store float %add33, float* %arrayidx34, align 4, !dbg !2192
  %34 = load float, float* %x, align 4, !dbg !2193
  %35 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2194
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %35, i64 0, !dbg !2194
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 2, !dbg !2194
  %36 = load float, float* %arrayidx36, align 4, !dbg !2194
  %mul37 = fmul float %34, %36, !dbg !2195
  %37 = load float, float* %y, align 4, !dbg !2196
  %38 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2197
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %38, i64 1, !dbg !2197
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 2, !dbg !2197
  %39 = load float, float* %arrayidx39, align 4, !dbg !2197
  %mul40 = fmul float %37, %39, !dbg !2198
  %add41 = fadd float %mul37, %mul40, !dbg !2199
  %40 = load float, float* %z, align 4, !dbg !2200
  %41 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2201
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %41, i64 2, !dbg !2201
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 2, !dbg !2201
  %42 = load float, float* %arrayidx43, align 4, !dbg !2201
  %mul44 = fmul float %40, %42, !dbg !2202
  %add45 = fadd float %add41, %mul44, !dbg !2203
  %43 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2204
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %43, i64 3, !dbg !2204
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx46, i64 0, i64 2, !dbg !2204
  %44 = load float, float* %arrayidx47, align 4, !dbg !2204
  %45 = load float*, float** %v.addr, align 8, !dbg !2205
  %arrayidx48 = getelementptr inbounds float, float* %45, i64 3, !dbg !2205
  %46 = load float, float* %arrayidx48, align 4, !dbg !2205
  %mul49 = fmul float %44, %46, !dbg !2206
  %add50 = fadd float %add45, %mul49, !dbg !2207
  %47 = load float*, float** %r.addr, align 8, !dbg !2208
  %arrayidx51 = getelementptr inbounds float, float* %47, i64 2, !dbg !2208
  store float %add50, float* %arrayidx51, align 4, !dbg !2209
  %48 = load float, float* %x, align 4, !dbg !2210
  %49 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2211
  %arrayidx52 = getelementptr inbounds [4 x float], [4 x float]* %49, i64 0, !dbg !2211
  %arrayidx53 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx52, i64 0, i64 3, !dbg !2211
  %50 = load float, float* %arrayidx53, align 4, !dbg !2211
  %mul54 = fmul float %48, %50, !dbg !2212
  %51 = load float, float* %y, align 4, !dbg !2213
  %52 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2214
  %arrayidx55 = getelementptr inbounds [4 x float], [4 x float]* %52, i64 1, !dbg !2214
  %arrayidx56 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx55, i64 0, i64 3, !dbg !2214
  %53 = load float, float* %arrayidx56, align 4, !dbg !2214
  %mul57 = fmul float %51, %53, !dbg !2215
  %add58 = fadd float %mul54, %mul57, !dbg !2216
  %54 = load float, float* %z, align 4, !dbg !2217
  %55 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2218
  %arrayidx59 = getelementptr inbounds [4 x float], [4 x float]* %55, i64 2, !dbg !2218
  %arrayidx60 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx59, i64 0, i64 3, !dbg !2218
  %56 = load float, float* %arrayidx60, align 4, !dbg !2218
  %mul61 = fmul float %54, %56, !dbg !2219
  %add62 = fadd float %add58, %mul61, !dbg !2220
  %57 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2221
  %arrayidx63 = getelementptr inbounds [4 x float], [4 x float]* %57, i64 3, !dbg !2221
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx63, i64 0, i64 3, !dbg !2221
  %58 = load float, float* %arrayidx64, align 4, !dbg !2221
  %59 = load float*, float** %v.addr, align 8, !dbg !2222
  %arrayidx65 = getelementptr inbounds float, float* %59, i64 3, !dbg !2222
  %60 = load float, float* %arrayidx65, align 4, !dbg !2222
  %mul66 = fmul float %58, %60, !dbg !2223
  %add67 = fadd float %add62, %mul66, !dbg !2224
  %61 = load float*, float** %r.addr, align 8, !dbg !2225
  %arrayidx68 = getelementptr inbounds float, float* %61, i64 3, !dbg !2225
  store float %add67, float* %arrayidx68, align 4, !dbg !2226
  ret void, !dbg !2227
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_v4([4 x float]* %mat, float* %r) #0 !dbg !2228 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %r.addr = alloca float*, align 8
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2229, metadata !DIExpression()), !dbg !2230
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2231, metadata !DIExpression()), !dbg !2232
  %0 = load float*, float** %r.addr, align 8, !dbg !2233
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2234
  %2 = load float*, float** %r.addr, align 8, !dbg !2235
  call void @mul_v4_m4v4(float* %0, [4 x float]* %1, float* %2), !dbg !2236
  ret void, !dbg !2237
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v4d_m4v4d(double* %r, [4 x float]* %mat, double* %v) #0 !dbg !2238 {
entry:
  %r.addr = alloca double*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %v.addr = alloca double*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  store double* %r, double** %r.addr, align 8
  call void @llvm.dbg.declare(metadata double** %r.addr, metadata !2242, metadata !DIExpression()), !dbg !2243
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2244, metadata !DIExpression()), !dbg !2245
  store double* %v, double** %v.addr, align 8
  call void @llvm.dbg.declare(metadata double** %v.addr, metadata !2246, metadata !DIExpression()), !dbg !2247
  call void @llvm.dbg.declare(metadata double* %x, metadata !2248, metadata !DIExpression()), !dbg !2250
  %0 = load double*, double** %v.addr, align 8, !dbg !2251
  %arrayidx = getelementptr inbounds double, double* %0, i64 0, !dbg !2251
  %1 = load double, double* %arrayidx, align 8, !dbg !2251
  store double %1, double* %x, align 8, !dbg !2250
  call void @llvm.dbg.declare(metadata double* %y, metadata !2252, metadata !DIExpression()), !dbg !2253
  %2 = load double*, double** %v.addr, align 8, !dbg !2254
  %arrayidx1 = getelementptr inbounds double, double* %2, i64 1, !dbg !2254
  %3 = load double, double* %arrayidx1, align 8, !dbg !2254
  store double %3, double* %y, align 8, !dbg !2253
  call void @llvm.dbg.declare(metadata double* %z, metadata !2255, metadata !DIExpression()), !dbg !2256
  %4 = load double*, double** %v.addr, align 8, !dbg !2257
  %arrayidx2 = getelementptr inbounds double, double* %4, i64 2, !dbg !2257
  %5 = load double, double* %arrayidx2, align 8, !dbg !2257
  store double %5, double* %z, align 8, !dbg !2256
  %6 = load double, double* %x, align 8, !dbg !2258
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2259
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, !dbg !2259
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !2259
  %8 = load float, float* %arrayidx4, align 4, !dbg !2259
  %conv = fpext float %8 to double, !dbg !2260
  %mul = fmul double %6, %conv, !dbg !2261
  %9 = load double, double* %y, align 8, !dbg !2262
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2263
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !2263
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !2263
  %11 = load float, float* %arrayidx6, align 4, !dbg !2263
  %conv7 = fpext float %11 to double, !dbg !2264
  %mul8 = fmul double %9, %conv7, !dbg !2265
  %add = fadd double %mul, %mul8, !dbg !2266
  %12 = load double, double* %z, align 8, !dbg !2267
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2268
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !2268
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 0, !dbg !2268
  %14 = load float, float* %arrayidx10, align 4, !dbg !2268
  %conv11 = fpext float %14 to double, !dbg !2269
  %mul12 = fmul double %12, %conv11, !dbg !2270
  %add13 = fadd double %add, %mul12, !dbg !2271
  %15 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2272
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 3, !dbg !2272
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 0, !dbg !2272
  %16 = load float, float* %arrayidx15, align 4, !dbg !2272
  %conv16 = fpext float %16 to double, !dbg !2273
  %17 = load double*, double** %v.addr, align 8, !dbg !2274
  %arrayidx17 = getelementptr inbounds double, double* %17, i64 3, !dbg !2274
  %18 = load double, double* %arrayidx17, align 8, !dbg !2274
  %mul18 = fmul double %conv16, %18, !dbg !2275
  %add19 = fadd double %add13, %mul18, !dbg !2276
  %19 = load double*, double** %r.addr, align 8, !dbg !2277
  %arrayidx20 = getelementptr inbounds double, double* %19, i64 0, !dbg !2277
  store double %add19, double* %arrayidx20, align 8, !dbg !2278
  %20 = load double, double* %x, align 8, !dbg !2279
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2280
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 0, !dbg !2280
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx21, i64 0, i64 1, !dbg !2280
  %22 = load float, float* %arrayidx22, align 4, !dbg !2280
  %conv23 = fpext float %22 to double, !dbg !2281
  %mul24 = fmul double %20, %conv23, !dbg !2282
  %23 = load double, double* %y, align 8, !dbg !2283
  %24 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2284
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 1, !dbg !2284
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 1, !dbg !2284
  %25 = load float, float* %arrayidx26, align 4, !dbg !2284
  %conv27 = fpext float %25 to double, !dbg !2285
  %mul28 = fmul double %23, %conv27, !dbg !2286
  %add29 = fadd double %mul24, %mul28, !dbg !2287
  %26 = load double, double* %z, align 8, !dbg !2288
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2289
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 2, !dbg !2289
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 1, !dbg !2289
  %28 = load float, float* %arrayidx31, align 4, !dbg !2289
  %conv32 = fpext float %28 to double, !dbg !2290
  %mul33 = fmul double %26, %conv32, !dbg !2291
  %add34 = fadd double %add29, %mul33, !dbg !2292
  %29 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2293
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 3, !dbg !2293
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 1, !dbg !2293
  %30 = load float, float* %arrayidx36, align 4, !dbg !2293
  %conv37 = fpext float %30 to double, !dbg !2294
  %31 = load double*, double** %v.addr, align 8, !dbg !2295
  %arrayidx38 = getelementptr inbounds double, double* %31, i64 3, !dbg !2295
  %32 = load double, double* %arrayidx38, align 8, !dbg !2295
  %mul39 = fmul double %conv37, %32, !dbg !2296
  %add40 = fadd double %add34, %mul39, !dbg !2297
  %33 = load double*, double** %r.addr, align 8, !dbg !2298
  %arrayidx41 = getelementptr inbounds double, double* %33, i64 1, !dbg !2298
  store double %add40, double* %arrayidx41, align 8, !dbg !2299
  %34 = load double, double* %x, align 8, !dbg !2300
  %35 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2301
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %35, i64 0, !dbg !2301
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 2, !dbg !2301
  %36 = load float, float* %arrayidx43, align 4, !dbg !2301
  %conv44 = fpext float %36 to double, !dbg !2302
  %mul45 = fmul double %34, %conv44, !dbg !2303
  %37 = load double, double* %y, align 8, !dbg !2304
  %38 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2305
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %38, i64 1, !dbg !2305
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx46, i64 0, i64 2, !dbg !2305
  %39 = load float, float* %arrayidx47, align 4, !dbg !2305
  %conv48 = fpext float %39 to double, !dbg !2306
  %mul49 = fmul double %37, %conv48, !dbg !2307
  %add50 = fadd double %mul45, %mul49, !dbg !2308
  %40 = load double, double* %z, align 8, !dbg !2309
  %41 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2310
  %arrayidx51 = getelementptr inbounds [4 x float], [4 x float]* %41, i64 2, !dbg !2310
  %arrayidx52 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx51, i64 0, i64 2, !dbg !2310
  %42 = load float, float* %arrayidx52, align 4, !dbg !2310
  %conv53 = fpext float %42 to double, !dbg !2311
  %mul54 = fmul double %40, %conv53, !dbg !2312
  %add55 = fadd double %add50, %mul54, !dbg !2313
  %43 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2314
  %arrayidx56 = getelementptr inbounds [4 x float], [4 x float]* %43, i64 3, !dbg !2314
  %arrayidx57 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx56, i64 0, i64 2, !dbg !2314
  %44 = load float, float* %arrayidx57, align 4, !dbg !2314
  %conv58 = fpext float %44 to double, !dbg !2315
  %45 = load double*, double** %v.addr, align 8, !dbg !2316
  %arrayidx59 = getelementptr inbounds double, double* %45, i64 3, !dbg !2316
  %46 = load double, double* %arrayidx59, align 8, !dbg !2316
  %mul60 = fmul double %conv58, %46, !dbg !2317
  %add61 = fadd double %add55, %mul60, !dbg !2318
  %47 = load double*, double** %r.addr, align 8, !dbg !2319
  %arrayidx62 = getelementptr inbounds double, double* %47, i64 2, !dbg !2319
  store double %add61, double* %arrayidx62, align 8, !dbg !2320
  %48 = load double, double* %x, align 8, !dbg !2321
  %49 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2322
  %arrayidx63 = getelementptr inbounds [4 x float], [4 x float]* %49, i64 0, !dbg !2322
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx63, i64 0, i64 3, !dbg !2322
  %50 = load float, float* %arrayidx64, align 4, !dbg !2322
  %conv65 = fpext float %50 to double, !dbg !2323
  %mul66 = fmul double %48, %conv65, !dbg !2324
  %51 = load double, double* %y, align 8, !dbg !2325
  %52 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2326
  %arrayidx67 = getelementptr inbounds [4 x float], [4 x float]* %52, i64 1, !dbg !2326
  %arrayidx68 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx67, i64 0, i64 3, !dbg !2326
  %53 = load float, float* %arrayidx68, align 4, !dbg !2326
  %conv69 = fpext float %53 to double, !dbg !2327
  %mul70 = fmul double %51, %conv69, !dbg !2328
  %add71 = fadd double %mul66, %mul70, !dbg !2329
  %54 = load double, double* %z, align 8, !dbg !2330
  %55 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2331
  %arrayidx72 = getelementptr inbounds [4 x float], [4 x float]* %55, i64 2, !dbg !2331
  %arrayidx73 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx72, i64 0, i64 3, !dbg !2331
  %56 = load float, float* %arrayidx73, align 4, !dbg !2331
  %conv74 = fpext float %56 to double, !dbg !2332
  %mul75 = fmul double %54, %conv74, !dbg !2333
  %add76 = fadd double %add71, %mul75, !dbg !2334
  %57 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2335
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %57, i64 3, !dbg !2335
  %arrayidx78 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx77, i64 0, i64 3, !dbg !2335
  %58 = load float, float* %arrayidx78, align 4, !dbg !2335
  %conv79 = fpext float %58 to double, !dbg !2336
  %59 = load double*, double** %v.addr, align 8, !dbg !2337
  %arrayidx80 = getelementptr inbounds double, double* %59, i64 3, !dbg !2337
  %60 = load double, double* %arrayidx80, align 8, !dbg !2337
  %mul81 = fmul double %conv79, %60, !dbg !2338
  %add82 = fadd double %add76, %mul81, !dbg !2339
  %61 = load double*, double** %r.addr, align 8, !dbg !2340
  %arrayidx83 = getelementptr inbounds double, double* %61, i64 3, !dbg !2340
  store double %add82, double* %arrayidx83, align 8, !dbg !2341
  ret void, !dbg !2342
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_v4d([4 x float]* %mat, double* %r) #0 !dbg !2343 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %r.addr = alloca double*, align 8
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2346, metadata !DIExpression()), !dbg !2347
  store double* %r, double** %r.addr, align 8
  call void @llvm.dbg.declare(metadata double** %r.addr, metadata !2348, metadata !DIExpression()), !dbg !2349
  %0 = load double*, double** %r.addr, align 8, !dbg !2350
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2351
  %2 = load double*, double** %r.addr, align 8, !dbg !2352
  call void @mul_v4d_m4v4d(double* %0, [4 x float]* %1, double* %2), !dbg !2353
  ret void, !dbg !2354
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_v2_m3v3(float* %r, [3 x float]* %M, float* %a) #0 !dbg !2355 {
entry:
  %r.addr = alloca float*, align 8
  %M.addr = alloca [3 x float]*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2356, metadata !DIExpression()), !dbg !2357
  store [3 x float]* %M, [3 x float]** %M.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %M.addr, metadata !2358, metadata !DIExpression()), !dbg !2359
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !2360, metadata !DIExpression()), !dbg !2361
  %0 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2362
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !2362
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !2362
  %1 = load float, float* %arrayidx1, align 4, !dbg !2362
  %2 = load float*, float** %a.addr, align 8, !dbg !2363
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 0, !dbg !2363
  %3 = load float, float* %arrayidx2, align 4, !dbg !2363
  %mul = fmul float %1, %3, !dbg !2364
  %4 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2365
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 1, !dbg !2365
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 0, !dbg !2365
  %5 = load float, float* %arrayidx4, align 4, !dbg !2365
  %6 = load float*, float** %a.addr, align 8, !dbg !2366
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 1, !dbg !2366
  %7 = load float, float* %arrayidx5, align 4, !dbg !2366
  %mul6 = fmul float %5, %7, !dbg !2367
  %add = fadd float %mul, %mul6, !dbg !2368
  %8 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2369
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 2, !dbg !2369
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 0, !dbg !2369
  %9 = load float, float* %arrayidx8, align 4, !dbg !2369
  %10 = load float*, float** %a.addr, align 8, !dbg !2370
  %arrayidx9 = getelementptr inbounds float, float* %10, i64 2, !dbg !2370
  %11 = load float, float* %arrayidx9, align 4, !dbg !2370
  %mul10 = fmul float %9, %11, !dbg !2371
  %add11 = fadd float %add, %mul10, !dbg !2372
  %12 = load float*, float** %r.addr, align 8, !dbg !2373
  %arrayidx12 = getelementptr inbounds float, float* %12, i64 0, !dbg !2373
  store float %add11, float* %arrayidx12, align 4, !dbg !2374
  %13 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2375
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, !dbg !2375
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx13, i64 0, i64 1, !dbg !2375
  %14 = load float, float* %arrayidx14, align 4, !dbg !2375
  %15 = load float*, float** %a.addr, align 8, !dbg !2376
  %arrayidx15 = getelementptr inbounds float, float* %15, i64 0, !dbg !2376
  %16 = load float, float* %arrayidx15, align 4, !dbg !2376
  %mul16 = fmul float %14, %16, !dbg !2377
  %17 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2378
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 1, !dbg !2378
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx17, i64 0, i64 1, !dbg !2378
  %18 = load float, float* %arrayidx18, align 4, !dbg !2378
  %19 = load float*, float** %a.addr, align 8, !dbg !2379
  %arrayidx19 = getelementptr inbounds float, float* %19, i64 1, !dbg !2379
  %20 = load float, float* %arrayidx19, align 4, !dbg !2379
  %mul20 = fmul float %18, %20, !dbg !2380
  %add21 = fadd float %mul16, %mul20, !dbg !2381
  %21 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2382
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 2, !dbg !2382
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 1, !dbg !2382
  %22 = load float, float* %arrayidx23, align 4, !dbg !2382
  %23 = load float*, float** %a.addr, align 8, !dbg !2383
  %arrayidx24 = getelementptr inbounds float, float* %23, i64 2, !dbg !2383
  %24 = load float, float* %arrayidx24, align 4, !dbg !2383
  %mul25 = fmul float %22, %24, !dbg !2384
  %add26 = fadd float %add21, %mul25, !dbg !2385
  %25 = load float*, float** %r.addr, align 8, !dbg !2386
  %arrayidx27 = getelementptr inbounds float, float* %25, i64 1, !dbg !2386
  store float %add26, float* %arrayidx27, align 4, !dbg !2387
  ret void, !dbg !2388
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m3_v3([3 x float]* %M, float* %r) #0 !dbg !2389 {
entry:
  %M.addr = alloca [3 x float]*, align 8
  %r.addr = alloca float*, align 8
  %tmp = alloca [3 x float], align 4
  store [3 x float]* %M, [3 x float]** %M.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %M.addr, metadata !2390, metadata !DIExpression()), !dbg !2391
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2392, metadata !DIExpression()), !dbg !2393
  call void @llvm.dbg.declare(metadata [3 x float]* %tmp, metadata !2394, metadata !DIExpression()), !dbg !2395
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %tmp, i64 0, i64 0, !dbg !2396
  %0 = load [3 x float]*, [3 x float]** %M.addr, align 8, !dbg !2397
  %1 = load float*, float** %r.addr, align 8, !dbg !2398
  call void @mul_v3_m3v3(float* %arraydecay, [3 x float]* %0, float* %1), !dbg !2399
  %2 = load float*, float** %r.addr, align 8, !dbg !2400
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %tmp, i64 0, i64 0, !dbg !2401
  call void @copy_v3_v3(float* %2, float* %arraydecay1), !dbg !2402
  ret void, !dbg !2403
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_v3(float* %r, float* %a) #0 !dbg !2404 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !2405, metadata !DIExpression()), !dbg !2406
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !2407, metadata !DIExpression()), !dbg !2408
  %0 = load float*, float** %a.addr, align 8, !dbg !2409
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2409
  %1 = load float, float* %arrayidx, align 4, !dbg !2409
  %2 = load float*, float** %r.addr, align 8, !dbg !2410
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !2410
  store float %1, float* %arrayidx1, align 4, !dbg !2411
  %3 = load float*, float** %a.addr, align 8, !dbg !2412
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !2412
  %4 = load float, float* %arrayidx2, align 4, !dbg !2412
  %5 = load float*, float** %r.addr, align 8, !dbg !2413
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !2413
  store float %4, float* %arrayidx3, align 4, !dbg !2414
  %6 = load float*, float** %a.addr, align 8, !dbg !2415
  %arrayidx4 = getelementptr inbounds float, float* %6, i64 2, !dbg !2415
  %7 = load float, float* %arrayidx4, align 4, !dbg !2415
  %8 = load float*, float** %r.addr, align 8, !dbg !2416
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !2416
  store float %7, float* %arrayidx5, align 4, !dbg !2417
  ret void, !dbg !2418
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_transposed_m3_v3([3 x float]* %mat, float* %vec) #0 !dbg !2419 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !2420, metadata !DIExpression()), !dbg !2421
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !2422, metadata !DIExpression()), !dbg !2423
  call void @llvm.dbg.declare(metadata float* %x, metadata !2424, metadata !DIExpression()), !dbg !2425
  %0 = load float*, float** %vec.addr, align 8, !dbg !2426
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2426
  %1 = load float, float* %arrayidx, align 4, !dbg !2426
  store float %1, float* %x, align 4, !dbg !2425
  call void @llvm.dbg.declare(metadata float* %y, metadata !2427, metadata !DIExpression()), !dbg !2428
  %2 = load float*, float** %vec.addr, align 8, !dbg !2429
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !2429
  %3 = load float, float* %arrayidx1, align 4, !dbg !2429
  store float %3, float* %y, align 4, !dbg !2428
  %4 = load float, float* %x, align 4, !dbg !2430
  %5 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2431
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, !dbg !2431
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !2431
  %6 = load float, float* %arrayidx3, align 4, !dbg !2431
  %mul = fmul float %4, %6, !dbg !2432
  %7 = load float, float* %y, align 4, !dbg !2433
  %8 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2434
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, !dbg !2434
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 1, !dbg !2434
  %9 = load float, float* %arrayidx5, align 4, !dbg !2434
  %mul6 = fmul float %7, %9, !dbg !2435
  %add = fadd float %mul, %mul6, !dbg !2436
  %10 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2437
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 0, !dbg !2437
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 2, !dbg !2437
  %11 = load float, float* %arrayidx8, align 4, !dbg !2437
  %12 = load float*, float** %vec.addr, align 8, !dbg !2438
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 2, !dbg !2438
  %13 = load float, float* %arrayidx9, align 4, !dbg !2438
  %mul10 = fmul float %11, %13, !dbg !2439
  %add11 = fadd float %add, %mul10, !dbg !2440
  %14 = load float*, float** %vec.addr, align 8, !dbg !2441
  %arrayidx12 = getelementptr inbounds float, float* %14, i64 0, !dbg !2441
  store float %add11, float* %arrayidx12, align 4, !dbg !2442
  %15 = load float, float* %x, align 4, !dbg !2443
  %16 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2444
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 1, !dbg !2444
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx13, i64 0, i64 0, !dbg !2444
  %17 = load float, float* %arrayidx14, align 4, !dbg !2444
  %mul15 = fmul float %15, %17, !dbg !2445
  %18 = load float, float* %y, align 4, !dbg !2446
  %19 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2447
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %19, i64 1, !dbg !2447
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 1, !dbg !2447
  %20 = load float, float* %arrayidx17, align 4, !dbg !2447
  %mul18 = fmul float %18, %20, !dbg !2448
  %add19 = fadd float %mul15, %mul18, !dbg !2449
  %21 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2450
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 1, !dbg !2450
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx20, i64 0, i64 2, !dbg !2450
  %22 = load float, float* %arrayidx21, align 4, !dbg !2450
  %23 = load float*, float** %vec.addr, align 8, !dbg !2451
  %arrayidx22 = getelementptr inbounds float, float* %23, i64 2, !dbg !2451
  %24 = load float, float* %arrayidx22, align 4, !dbg !2451
  %mul23 = fmul float %22, %24, !dbg !2452
  %add24 = fadd float %add19, %mul23, !dbg !2453
  %25 = load float*, float** %vec.addr, align 8, !dbg !2454
  %arrayidx25 = getelementptr inbounds float, float* %25, i64 1, !dbg !2454
  store float %add24, float* %arrayidx25, align 4, !dbg !2455
  %26 = load float, float* %x, align 4, !dbg !2456
  %27 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2457
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %27, i64 2, !dbg !2457
  %arrayidx27 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx26, i64 0, i64 0, !dbg !2457
  %28 = load float, float* %arrayidx27, align 4, !dbg !2457
  %mul28 = fmul float %26, %28, !dbg !2458
  %29 = load float, float* %y, align 4, !dbg !2459
  %30 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2460
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %30, i64 2, !dbg !2460
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 1, !dbg !2460
  %31 = load float, float* %arrayidx30, align 4, !dbg !2460
  %mul31 = fmul float %29, %31, !dbg !2461
  %add32 = fadd float %mul28, %mul31, !dbg !2462
  %32 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2463
  %arrayidx33 = getelementptr inbounds [3 x float], [3 x float]* %32, i64 2, !dbg !2463
  %arrayidx34 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx33, i64 0, i64 2, !dbg !2463
  %33 = load float, float* %arrayidx34, align 4, !dbg !2463
  %34 = load float*, float** %vec.addr, align 8, !dbg !2464
  %arrayidx35 = getelementptr inbounds float, float* %34, i64 2, !dbg !2464
  %35 = load float, float* %arrayidx35, align 4, !dbg !2464
  %mul36 = fmul float %33, %35, !dbg !2465
  %add37 = fadd float %add32, %mul36, !dbg !2466
  %36 = load float*, float** %vec.addr, align 8, !dbg !2467
  %arrayidx38 = getelementptr inbounds float, float* %36, i64 2, !dbg !2467
  store float %add37, float* %arrayidx38, align 4, !dbg !2468
  ret void, !dbg !2469
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_transposed_mat3_m4_v3([4 x float]* %mat, float* %vec) #0 !dbg !2470 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %vec.addr = alloca float*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !2471, metadata !DIExpression()), !dbg !2472
  store float* %vec, float** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata float** %vec.addr, metadata !2473, metadata !DIExpression()), !dbg !2474
  call void @llvm.dbg.declare(metadata float* %x, metadata !2475, metadata !DIExpression()), !dbg !2476
  %0 = load float*, float** %vec.addr, align 8, !dbg !2477
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !2477
  %1 = load float, float* %arrayidx, align 4, !dbg !2477
  store float %1, float* %x, align 4, !dbg !2476
  call void @llvm.dbg.declare(metadata float* %y, metadata !2478, metadata !DIExpression()), !dbg !2479
  %2 = load float*, float** %vec.addr, align 8, !dbg !2480
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !2480
  %3 = load float, float* %arrayidx1, align 4, !dbg !2480
  store float %3, float* %y, align 4, !dbg !2479
  %4 = load float, float* %x, align 4, !dbg !2481
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2482
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !2482
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !2482
  %6 = load float, float* %arrayidx3, align 4, !dbg !2482
  %mul = fmul float %4, %6, !dbg !2483
  %7 = load float, float* %y, align 4, !dbg !2484
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2485
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 0, !dbg !2485
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 1, !dbg !2485
  %9 = load float, float* %arrayidx5, align 4, !dbg !2485
  %mul6 = fmul float %7, %9, !dbg !2486
  %add = fadd float %mul, %mul6, !dbg !2487
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2488
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 0, !dbg !2488
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 2, !dbg !2488
  %11 = load float, float* %arrayidx8, align 4, !dbg !2488
  %12 = load float*, float** %vec.addr, align 8, !dbg !2489
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 2, !dbg !2489
  %13 = load float, float* %arrayidx9, align 4, !dbg !2489
  %mul10 = fmul float %11, %13, !dbg !2490
  %add11 = fadd float %add, %mul10, !dbg !2491
  %14 = load float*, float** %vec.addr, align 8, !dbg !2492
  %arrayidx12 = getelementptr inbounds float, float* %14, i64 0, !dbg !2492
  store float %add11, float* %arrayidx12, align 4, !dbg !2493
  %15 = load float, float* %x, align 4, !dbg !2494
  %16 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2495
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 1, !dbg !2495
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx13, i64 0, i64 0, !dbg !2495
  %17 = load float, float* %arrayidx14, align 4, !dbg !2495
  %mul15 = fmul float %15, %17, !dbg !2496
  %18 = load float, float* %y, align 4, !dbg !2497
  %19 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2498
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 1, !dbg !2498
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 1, !dbg !2498
  %20 = load float, float* %arrayidx17, align 4, !dbg !2498
  %mul18 = fmul float %18, %20, !dbg !2499
  %add19 = fadd float %mul15, %mul18, !dbg !2500
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2501
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 1, !dbg !2501
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 2, !dbg !2501
  %22 = load float, float* %arrayidx21, align 4, !dbg !2501
  %23 = load float*, float** %vec.addr, align 8, !dbg !2502
  %arrayidx22 = getelementptr inbounds float, float* %23, i64 2, !dbg !2502
  %24 = load float, float* %arrayidx22, align 4, !dbg !2502
  %mul23 = fmul float %22, %24, !dbg !2503
  %add24 = fadd float %add19, %mul23, !dbg !2504
  %25 = load float*, float** %vec.addr, align 8, !dbg !2505
  %arrayidx25 = getelementptr inbounds float, float* %25, i64 1, !dbg !2505
  store float %add24, float* %arrayidx25, align 4, !dbg !2506
  %26 = load float, float* %x, align 4, !dbg !2507
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2508
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 2, !dbg !2508
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 0, !dbg !2508
  %28 = load float, float* %arrayidx27, align 4, !dbg !2508
  %mul28 = fmul float %26, %28, !dbg !2509
  %29 = load float, float* %y, align 4, !dbg !2510
  %30 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2511
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 2, !dbg !2511
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 1, !dbg !2511
  %31 = load float, float* %arrayidx30, align 4, !dbg !2511
  %mul31 = fmul float %29, %31, !dbg !2512
  %add32 = fadd float %mul28, %mul31, !dbg !2513
  %32 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !2514
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %32, i64 2, !dbg !2514
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 2, !dbg !2514
  %33 = load float, float* %arrayidx34, align 4, !dbg !2514
  %34 = load float*, float** %vec.addr, align 8, !dbg !2515
  %arrayidx35 = getelementptr inbounds float, float* %34, i64 2, !dbg !2515
  %35 = load float, float* %arrayidx35, align 4, !dbg !2515
  %mul36 = fmul float %33, %35, !dbg !2516
  %add37 = fadd float %add32, %mul36, !dbg !2517
  %36 = load float*, float** %vec.addr, align 8, !dbg !2518
  %arrayidx38 = getelementptr inbounds float, float* %36, i64 2, !dbg !2518
  store float %add37, float* %arrayidx38, align 4, !dbg !2519
  ret void, !dbg !2520
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m3_fl([3 x float]* %m, float %f) #0 !dbg !2521 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !2524, metadata !DIExpression()), !dbg !2525
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !2526, metadata !DIExpression()), !dbg !2527
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2528, metadata !DIExpression()), !dbg !2529
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2530, metadata !DIExpression()), !dbg !2531
  store i32 0, i32* %i, align 4, !dbg !2532
  br label %for.cond, !dbg !2534

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2535
  %cmp = icmp slt i32 %0, 3, !dbg !2537
  br i1 %cmp, label %for.body, label %for.end8, !dbg !2538

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2539
  br label %for.cond1, !dbg !2541

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2542
  %cmp2 = icmp slt i32 %1, 3, !dbg !2544
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2545

for.body3:                                        ; preds = %for.cond1
  %2 = load float, float* %f.addr, align 4, !dbg !2546
  %3 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2547
  %4 = load i32, i32* %i, align 4, !dbg !2548
  %idxprom = sext i32 %4 to i64, !dbg !2547
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %3, i64 %idxprom, !dbg !2547
  %5 = load i32, i32* %j, align 4, !dbg !2549
  %idxprom4 = sext i32 %5 to i64, !dbg !2547
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2547
  %6 = load float, float* %arrayidx5, align 4, !dbg !2550
  %mul = fmul float %6, %2, !dbg !2550
  store float %mul, float* %arrayidx5, align 4, !dbg !2550
  br label %for.inc, !dbg !2547

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4, !dbg !2551
  %inc = add nsw i32 %7, 1, !dbg !2551
  store i32 %inc, i32* %j, align 4, !dbg !2551
  br label %for.cond1, !dbg !2552, !llvm.loop !2553

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !2554

for.inc6:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4, !dbg !2555
  %inc7 = add nsw i32 %8, 1, !dbg !2555
  store i32 %inc7, i32* %i, align 4, !dbg !2555
  br label %for.cond, !dbg !2556, !llvm.loop !2557

for.end8:                                         ; preds = %for.cond
  ret void, !dbg !2559
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m4_fl([4 x float]* %m, float %f) #0 !dbg !2560 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !2563, metadata !DIExpression()), !dbg !2564
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !2565, metadata !DIExpression()), !dbg !2566
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2567, metadata !DIExpression()), !dbg !2568
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2569, metadata !DIExpression()), !dbg !2570
  store i32 0, i32* %i, align 4, !dbg !2571
  br label %for.cond, !dbg !2573

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2574
  %cmp = icmp slt i32 %0, 4, !dbg !2576
  br i1 %cmp, label %for.body, label %for.end8, !dbg !2577

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2578
  br label %for.cond1, !dbg !2580

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2581
  %cmp2 = icmp slt i32 %1, 4, !dbg !2583
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2584

for.body3:                                        ; preds = %for.cond1
  %2 = load float, float* %f.addr, align 4, !dbg !2585
  %3 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !2586
  %4 = load i32, i32* %i, align 4, !dbg !2587
  %idxprom = sext i32 %4 to i64, !dbg !2586
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %3, i64 %idxprom, !dbg !2586
  %5 = load i32, i32* %j, align 4, !dbg !2588
  %idxprom4 = sext i32 %5 to i64, !dbg !2586
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2586
  %6 = load float, float* %arrayidx5, align 4, !dbg !2589
  %mul = fmul float %6, %2, !dbg !2589
  store float %mul, float* %arrayidx5, align 4, !dbg !2589
  br label %for.inc, !dbg !2586

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4, !dbg !2590
  %inc = add nsw i32 %7, 1, !dbg !2590
  store i32 %inc, i32* %j, align 4, !dbg !2590
  br label %for.cond1, !dbg !2591, !llvm.loop !2592

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !2593

for.inc6:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4, !dbg !2594
  %inc7 = add nsw i32 %8, 1, !dbg !2594
  store i32 %inc7, i32* %i, align 4, !dbg !2594
  br label %for.cond, !dbg !2595, !llvm.loop !2596

for.end8:                                         ; preds = %for.cond
  ret void, !dbg !2598
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_mat3_m4_fl([4 x float]* %m, float %f) #0 !dbg !2599 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %f.addr = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !2600, metadata !DIExpression()), !dbg !2601
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !2602, metadata !DIExpression()), !dbg !2603
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2604, metadata !DIExpression()), !dbg !2605
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2606, metadata !DIExpression()), !dbg !2607
  store i32 0, i32* %i, align 4, !dbg !2608
  br label %for.cond, !dbg !2610

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2611
  %cmp = icmp slt i32 %0, 3, !dbg !2613
  br i1 %cmp, label %for.body, label %for.end8, !dbg !2614

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2615
  br label %for.cond1, !dbg !2617

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2618
  %cmp2 = icmp slt i32 %1, 3, !dbg !2620
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2621

for.body3:                                        ; preds = %for.cond1
  %2 = load float, float* %f.addr, align 4, !dbg !2622
  %3 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !2623
  %4 = load i32, i32* %i, align 4, !dbg !2624
  %idxprom = sext i32 %4 to i64, !dbg !2623
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %3, i64 %idxprom, !dbg !2623
  %5 = load i32, i32* %j, align 4, !dbg !2625
  %idxprom4 = sext i32 %5 to i64, !dbg !2623
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2623
  %6 = load float, float* %arrayidx5, align 4, !dbg !2626
  %mul = fmul float %6, %2, !dbg !2626
  store float %mul, float* %arrayidx5, align 4, !dbg !2626
  br label %for.inc, !dbg !2623

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4, !dbg !2627
  %inc = add nsw i32 %7, 1, !dbg !2627
  store i32 %inc, i32* %j, align 4, !dbg !2627
  br label %for.cond1, !dbg !2628, !llvm.loop !2629

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !2630

for.inc6:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4, !dbg !2631
  %inc7 = add nsw i32 %8, 1, !dbg !2631
  store i32 %inc7, i32* %i, align 4, !dbg !2631
  br label %for.cond, !dbg !2632, !llvm.loop !2633

for.end8:                                         ; preds = %for.cond
  ret void, !dbg !2635
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @negate_m3([4 x float]* %m) #0 !dbg !2636 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !2637, metadata !DIExpression()), !dbg !2638
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2639, metadata !DIExpression()), !dbg !2640
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2641, metadata !DIExpression()), !dbg !2642
  store i32 0, i32* %i, align 4, !dbg !2643
  br label %for.cond, !dbg !2645

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2646
  %cmp = icmp slt i32 %0, 3, !dbg !2648
  br i1 %cmp, label %for.body, label %for.end8, !dbg !2649

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2650
  br label %for.cond1, !dbg !2652

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2653
  %cmp2 = icmp slt i32 %1, 3, !dbg !2655
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2656

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !2657
  %3 = load i32, i32* %i, align 4, !dbg !2658
  %idxprom = sext i32 %3 to i64, !dbg !2657
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !2657
  %4 = load i32, i32* %j, align 4, !dbg !2659
  %idxprom4 = sext i32 %4 to i64, !dbg !2657
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2657
  %5 = load float, float* %arrayidx5, align 4, !dbg !2660
  %mul = fmul float %5, -1.000000e+00, !dbg !2660
  store float %mul, float* %arrayidx5, align 4, !dbg !2660
  br label %for.inc, !dbg !2657

for.inc:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4, !dbg !2661
  %inc = add nsw i32 %6, 1, !dbg !2661
  store i32 %inc, i32* %j, align 4, !dbg !2661
  br label %for.cond1, !dbg !2662, !llvm.loop !2663

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !2664

for.inc6:                                         ; preds = %for.end
  %7 = load i32, i32* %i, align 4, !dbg !2665
  %inc7 = add nsw i32 %7, 1, !dbg !2665
  store i32 %inc7, i32* %i, align 4, !dbg !2665
  br label %for.cond, !dbg !2666, !llvm.loop !2667

for.end8:                                         ; preds = %for.cond
  ret void, !dbg !2669
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @negate_m4([4 x float]* %m) #0 !dbg !2670 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !2671, metadata !DIExpression()), !dbg !2672
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2673, metadata !DIExpression()), !dbg !2674
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2675, metadata !DIExpression()), !dbg !2676
  store i32 0, i32* %i, align 4, !dbg !2677
  br label %for.cond, !dbg !2679

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2680
  %cmp = icmp slt i32 %0, 4, !dbg !2682
  br i1 %cmp, label %for.body, label %for.end8, !dbg !2683

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2684
  br label %for.cond1, !dbg !2686

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2687
  %cmp2 = icmp slt i32 %1, 4, !dbg !2689
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2690

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !2691
  %3 = load i32, i32* %i, align 4, !dbg !2692
  %idxprom = sext i32 %3 to i64, !dbg !2691
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !2691
  %4 = load i32, i32* %j, align 4, !dbg !2693
  %idxprom4 = sext i32 %4 to i64, !dbg !2691
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2691
  %5 = load float, float* %arrayidx5, align 4, !dbg !2694
  %mul = fmul float %5, -1.000000e+00, !dbg !2694
  store float %mul, float* %arrayidx5, align 4, !dbg !2694
  br label %for.inc, !dbg !2691

for.inc:                                          ; preds = %for.body3
  %6 = load i32, i32* %j, align 4, !dbg !2695
  %inc = add nsw i32 %6, 1, !dbg !2695
  store i32 %inc, i32* %j, align 4, !dbg !2695
  br label %for.cond1, !dbg !2696, !llvm.loop !2697

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !2698

for.inc6:                                         ; preds = %for.end
  %7 = load i32, i32* %i, align 4, !dbg !2699
  %inc7 = add nsw i32 %7, 1, !dbg !2699
  store i32 %inc7, i32* %i, align 4, !dbg !2699
  br label %for.cond, !dbg !2700, !llvm.loop !2701

for.end8:                                         ; preds = %for.cond
  ret void, !dbg !2703
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mul_m3_v3_double([3 x float]* %mat, double* %vec) #0 !dbg !2704 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %vec.addr = alloca double*, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !2707, metadata !DIExpression()), !dbg !2708
  store double* %vec, double** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata double** %vec.addr, metadata !2709, metadata !DIExpression()), !dbg !2710
  call void @llvm.dbg.declare(metadata double* %x, metadata !2711, metadata !DIExpression()), !dbg !2712
  %0 = load double*, double** %vec.addr, align 8, !dbg !2713
  %arrayidx = getelementptr inbounds double, double* %0, i64 0, !dbg !2713
  %1 = load double, double* %arrayidx, align 8, !dbg !2713
  store double %1, double* %x, align 8, !dbg !2712
  call void @llvm.dbg.declare(metadata double* %y, metadata !2714, metadata !DIExpression()), !dbg !2715
  %2 = load double*, double** %vec.addr, align 8, !dbg !2716
  %arrayidx1 = getelementptr inbounds double, double* %2, i64 1, !dbg !2716
  %3 = load double, double* %arrayidx1, align 8, !dbg !2716
  store double %3, double* %y, align 8, !dbg !2715
  %4 = load double, double* %x, align 8, !dbg !2717
  %5 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2718
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, !dbg !2718
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !2718
  %6 = load float, float* %arrayidx3, align 4, !dbg !2718
  %conv = fpext float %6 to double, !dbg !2719
  %mul = fmul double %4, %conv, !dbg !2720
  %7 = load double, double* %y, align 8, !dbg !2721
  %8 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2722
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 1, !dbg !2722
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 0, !dbg !2722
  %9 = load float, float* %arrayidx5, align 4, !dbg !2722
  %conv6 = fpext float %9 to double, !dbg !2723
  %mul7 = fmul double %7, %conv6, !dbg !2724
  %add = fadd double %mul, %mul7, !dbg !2725
  %10 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2726
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 2, !dbg !2726
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 0, !dbg !2726
  %11 = load float, float* %arrayidx9, align 4, !dbg !2726
  %conv10 = fpext float %11 to double, !dbg !2727
  %12 = load double*, double** %vec.addr, align 8, !dbg !2728
  %arrayidx11 = getelementptr inbounds double, double* %12, i64 2, !dbg !2728
  %13 = load double, double* %arrayidx11, align 8, !dbg !2728
  %mul12 = fmul double %conv10, %13, !dbg !2729
  %add13 = fadd double %add, %mul12, !dbg !2730
  %14 = load double*, double** %vec.addr, align 8, !dbg !2731
  %arrayidx14 = getelementptr inbounds double, double* %14, i64 0, !dbg !2731
  store double %add13, double* %arrayidx14, align 8, !dbg !2732
  %15 = load double, double* %x, align 8, !dbg !2733
  %16 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2734
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 0, !dbg !2734
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx15, i64 0, i64 1, !dbg !2734
  %17 = load float, float* %arrayidx16, align 4, !dbg !2734
  %conv17 = fpext float %17 to double, !dbg !2735
  %mul18 = fmul double %15, %conv17, !dbg !2736
  %18 = load double, double* %y, align 8, !dbg !2737
  %19 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2738
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %19, i64 1, !dbg !2738
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx19, i64 0, i64 1, !dbg !2738
  %20 = load float, float* %arrayidx20, align 4, !dbg !2738
  %conv21 = fpext float %20 to double, !dbg !2739
  %mul22 = fmul double %18, %conv21, !dbg !2740
  %add23 = fadd double %mul18, %mul22, !dbg !2741
  %21 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2742
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 2, !dbg !2742
  %arrayidx25 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx24, i64 0, i64 1, !dbg !2742
  %22 = load float, float* %arrayidx25, align 4, !dbg !2742
  %conv26 = fpext float %22 to double, !dbg !2743
  %23 = load double*, double** %vec.addr, align 8, !dbg !2744
  %arrayidx27 = getelementptr inbounds double, double* %23, i64 2, !dbg !2744
  %24 = load double, double* %arrayidx27, align 8, !dbg !2744
  %mul28 = fmul double %conv26, %24, !dbg !2745
  %add29 = fadd double %add23, %mul28, !dbg !2746
  %25 = load double*, double** %vec.addr, align 8, !dbg !2747
  %arrayidx30 = getelementptr inbounds double, double* %25, i64 1, !dbg !2747
  store double %add29, double* %arrayidx30, align 8, !dbg !2748
  %26 = load double, double* %x, align 8, !dbg !2749
  %27 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2750
  %arrayidx31 = getelementptr inbounds [3 x float], [3 x float]* %27, i64 0, !dbg !2750
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx31, i64 0, i64 2, !dbg !2750
  %28 = load float, float* %arrayidx32, align 4, !dbg !2750
  %conv33 = fpext float %28 to double, !dbg !2751
  %mul34 = fmul double %26, %conv33, !dbg !2752
  %29 = load double, double* %y, align 8, !dbg !2753
  %30 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2754
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %30, i64 1, !dbg !2754
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx35, i64 0, i64 2, !dbg !2754
  %31 = load float, float* %arrayidx36, align 4, !dbg !2754
  %conv37 = fpext float %31 to double, !dbg !2755
  %mul38 = fmul double %29, %conv37, !dbg !2756
  %add39 = fadd double %mul34, %mul38, !dbg !2757
  %32 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !2758
  %arrayidx40 = getelementptr inbounds [3 x float], [3 x float]* %32, i64 2, !dbg !2758
  %arrayidx41 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx40, i64 0, i64 2, !dbg !2758
  %33 = load float, float* %arrayidx41, align 4, !dbg !2758
  %conv42 = fpext float %33 to double, !dbg !2759
  %34 = load double*, double** %vec.addr, align 8, !dbg !2760
  %arrayidx43 = getelementptr inbounds double, double* %34, i64 2, !dbg !2760
  %35 = load double, double* %arrayidx43, align 8, !dbg !2760
  %mul44 = fmul double %conv42, %35, !dbg !2761
  %add45 = fadd double %add39, %mul44, !dbg !2762
  %36 = load double*, double** %vec.addr, align 8, !dbg !2763
  %arrayidx46 = getelementptr inbounds double, double* %36, i64 2, !dbg !2763
  store double %add45, double* %arrayidx46, align 8, !dbg !2764
  ret void, !dbg !2765
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_m3_m3m3([3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3) #0 !dbg !2766 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !2767, metadata !DIExpression()), !dbg !2768
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !2769, metadata !DIExpression()), !dbg !2770
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !2771, metadata !DIExpression()), !dbg !2772
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2773, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2775, metadata !DIExpression()), !dbg !2776
  store i32 0, i32* %i, align 4, !dbg !2777
  br label %for.cond, !dbg !2779

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2780
  %cmp = icmp slt i32 %0, 3, !dbg !2782
  br i1 %cmp, label %for.body, label %for.end16, !dbg !2783

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2784
  br label %for.cond1, !dbg !2786

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2787
  %cmp2 = icmp slt i32 %1, 3, !dbg !2789
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2790

for.body3:                                        ; preds = %for.cond1
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !2791
  %3 = load i32, i32* %i, align 4, !dbg !2792
  %idxprom = sext i32 %3 to i64, !dbg !2791
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %2, i64 %idxprom, !dbg !2791
  %4 = load i32, i32* %j, align 4, !dbg !2793
  %idxprom4 = sext i32 %4 to i64, !dbg !2791
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2791
  %5 = load float, float* %arrayidx5, align 4, !dbg !2791
  %6 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !2794
  %7 = load i32, i32* %i, align 4, !dbg !2795
  %idxprom6 = sext i32 %7 to i64, !dbg !2794
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 %idxprom6, !dbg !2794
  %8 = load i32, i32* %j, align 4, !dbg !2796
  %idxprom8 = sext i32 %8 to i64, !dbg !2794
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !2794
  %9 = load float, float* %arrayidx9, align 4, !dbg !2794
  %add = fadd float %5, %9, !dbg !2797
  %10 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !2798
  %11 = load i32, i32* %i, align 4, !dbg !2799
  %idxprom10 = sext i32 %11 to i64, !dbg !2798
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 %idxprom10, !dbg !2798
  %12 = load i32, i32* %j, align 4, !dbg !2800
  %idxprom12 = sext i32 %12 to i64, !dbg !2798
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx11, i64 0, i64 %idxprom12, !dbg !2798
  store float %add, float* %arrayidx13, align 4, !dbg !2801
  br label %for.inc, !dbg !2798

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4, !dbg !2802
  %inc = add nsw i32 %13, 1, !dbg !2802
  store i32 %inc, i32* %j, align 4, !dbg !2802
  br label %for.cond1, !dbg !2803, !llvm.loop !2804

for.end:                                          ; preds = %for.cond1
  br label %for.inc14, !dbg !2805

for.inc14:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !2806
  %inc15 = add nsw i32 %14, 1, !dbg !2806
  store i32 %inc15, i32* %i, align 4, !dbg !2806
  br label %for.cond, !dbg !2807, !llvm.loop !2808

for.end16:                                        ; preds = %for.cond
  ret void, !dbg !2810
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_m4_m4m4([4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3) #0 !dbg !2811 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !2812, metadata !DIExpression()), !dbg !2813
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !2814, metadata !DIExpression()), !dbg !2815
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !2816, metadata !DIExpression()), !dbg !2817
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2818, metadata !DIExpression()), !dbg !2819
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2820, metadata !DIExpression()), !dbg !2821
  store i32 0, i32* %i, align 4, !dbg !2822
  br label %for.cond, !dbg !2824

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2825
  %cmp = icmp slt i32 %0, 4, !dbg !2827
  br i1 %cmp, label %for.body, label %for.end16, !dbg !2828

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2829
  br label %for.cond1, !dbg !2831

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2832
  %cmp2 = icmp slt i32 %1, 4, !dbg !2834
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2835

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !2836
  %3 = load i32, i32* %i, align 4, !dbg !2837
  %idxprom = sext i32 %3 to i64, !dbg !2836
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !2836
  %4 = load i32, i32* %j, align 4, !dbg !2838
  %idxprom4 = sext i32 %4 to i64, !dbg !2836
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2836
  %5 = load float, float* %arrayidx5, align 4, !dbg !2836
  %6 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !2839
  %7 = load i32, i32* %i, align 4, !dbg !2840
  %idxprom6 = sext i32 %7 to i64, !dbg !2839
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 %idxprom6, !dbg !2839
  %8 = load i32, i32* %j, align 4, !dbg !2841
  %idxprom8 = sext i32 %8 to i64, !dbg !2839
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !2839
  %9 = load float, float* %arrayidx9, align 4, !dbg !2839
  %add = fadd float %5, %9, !dbg !2842
  %10 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !2843
  %11 = load i32, i32* %i, align 4, !dbg !2844
  %idxprom10 = sext i32 %11 to i64, !dbg !2843
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 %idxprom10, !dbg !2843
  %12 = load i32, i32* %j, align 4, !dbg !2845
  %idxprom12 = sext i32 %12 to i64, !dbg !2843
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx11, i64 0, i64 %idxprom12, !dbg !2843
  store float %add, float* %arrayidx13, align 4, !dbg !2846
  br label %for.inc, !dbg !2843

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4, !dbg !2847
  %inc = add nsw i32 %13, 1, !dbg !2847
  store i32 %inc, i32* %j, align 4, !dbg !2847
  br label %for.cond1, !dbg !2848, !llvm.loop !2849

for.end:                                          ; preds = %for.cond1
  br label %for.inc14, !dbg !2850

for.inc14:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !2851
  %inc15 = add nsw i32 %14, 1, !dbg !2851
  store i32 %inc15, i32* %i, align 4, !dbg !2851
  br label %for.cond, !dbg !2852, !llvm.loop !2853

for.end16:                                        ; preds = %for.cond
  ret void, !dbg !2855
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sub_m3_m3m3([3 x float]* %m1, [3 x float]* %m2, [3 x float]* %m3) #0 !dbg !2856 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %m3.addr = alloca [3 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !2857, metadata !DIExpression()), !dbg !2858
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !2859, metadata !DIExpression()), !dbg !2860
  store [3 x float]* %m3, [3 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m3.addr, metadata !2861, metadata !DIExpression()), !dbg !2862
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2863, metadata !DIExpression()), !dbg !2864
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2865, metadata !DIExpression()), !dbg !2866
  store i32 0, i32* %i, align 4, !dbg !2867
  br label %for.cond, !dbg !2869

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2870
  %cmp = icmp slt i32 %0, 3, !dbg !2872
  br i1 %cmp, label %for.body, label %for.end16, !dbg !2873

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2874
  br label %for.cond1, !dbg !2876

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2877
  %cmp2 = icmp slt i32 %1, 3, !dbg !2879
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2880

for.body3:                                        ; preds = %for.cond1
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !2881
  %3 = load i32, i32* %i, align 4, !dbg !2882
  %idxprom = sext i32 %3 to i64, !dbg !2881
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %2, i64 %idxprom, !dbg !2881
  %4 = load i32, i32* %j, align 4, !dbg !2883
  %idxprom4 = sext i32 %4 to i64, !dbg !2881
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2881
  %5 = load float, float* %arrayidx5, align 4, !dbg !2881
  %6 = load [3 x float]*, [3 x float]** %m3.addr, align 8, !dbg !2884
  %7 = load i32, i32* %i, align 4, !dbg !2885
  %idxprom6 = sext i32 %7 to i64, !dbg !2884
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 %idxprom6, !dbg !2884
  %8 = load i32, i32* %j, align 4, !dbg !2886
  %idxprom8 = sext i32 %8 to i64, !dbg !2884
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !2884
  %9 = load float, float* %arrayidx9, align 4, !dbg !2884
  %sub = fsub float %5, %9, !dbg !2887
  %10 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !2888
  %11 = load i32, i32* %i, align 4, !dbg !2889
  %idxprom10 = sext i32 %11 to i64, !dbg !2888
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 %idxprom10, !dbg !2888
  %12 = load i32, i32* %j, align 4, !dbg !2890
  %idxprom12 = sext i32 %12 to i64, !dbg !2888
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx11, i64 0, i64 %idxprom12, !dbg !2888
  store float %sub, float* %arrayidx13, align 4, !dbg !2891
  br label %for.inc, !dbg !2888

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4, !dbg !2892
  %inc = add nsw i32 %13, 1, !dbg !2892
  store i32 %inc, i32* %j, align 4, !dbg !2892
  br label %for.cond1, !dbg !2893, !llvm.loop !2894

for.end:                                          ; preds = %for.cond1
  br label %for.inc14, !dbg !2895

for.inc14:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !2896
  %inc15 = add nsw i32 %14, 1, !dbg !2896
  store i32 %inc15, i32* %i, align 4, !dbg !2896
  br label %for.cond, !dbg !2897, !llvm.loop !2898

for.end16:                                        ; preds = %for.cond
  ret void, !dbg !2900
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sub_m4_m4m4([4 x float]* %m1, [4 x float]* %m2, [4 x float]* %m3) #0 !dbg !2901 {
entry:
  %m1.addr = alloca [4 x float]*, align 8
  %m2.addr = alloca [4 x float]*, align 8
  %m3.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m1, [4 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m1.addr, metadata !2902, metadata !DIExpression()), !dbg !2903
  store [4 x float]* %m2, [4 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m2.addr, metadata !2904, metadata !DIExpression()), !dbg !2905
  store [4 x float]* %m3, [4 x float]** %m3.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m3.addr, metadata !2906, metadata !DIExpression()), !dbg !2907
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2908, metadata !DIExpression()), !dbg !2909
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2910, metadata !DIExpression()), !dbg !2911
  store i32 0, i32* %i, align 4, !dbg !2912
  br label %for.cond, !dbg !2914

for.cond:                                         ; preds = %for.inc14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2915
  %cmp = icmp slt i32 %0, 4, !dbg !2917
  br i1 %cmp, label %for.body, label %for.end16, !dbg !2918

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !2919
  br label %for.cond1, !dbg !2921

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !2922
  %cmp2 = icmp slt i32 %1, 4, !dbg !2924
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !2925

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %m2.addr, align 8, !dbg !2926
  %3 = load i32, i32* %i, align 4, !dbg !2927
  %idxprom = sext i32 %3 to i64, !dbg !2926
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !2926
  %4 = load i32, i32* %j, align 4, !dbg !2928
  %idxprom4 = sext i32 %4 to i64, !dbg !2926
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !2926
  %5 = load float, float* %arrayidx5, align 4, !dbg !2926
  %6 = load [4 x float]*, [4 x float]** %m3.addr, align 8, !dbg !2929
  %7 = load i32, i32* %i, align 4, !dbg !2930
  %idxprom6 = sext i32 %7 to i64, !dbg !2929
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 %idxprom6, !dbg !2929
  %8 = load i32, i32* %j, align 4, !dbg !2931
  %idxprom8 = sext i32 %8 to i64, !dbg !2929
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !2929
  %9 = load float, float* %arrayidx9, align 4, !dbg !2929
  %sub = fsub float %5, %9, !dbg !2932
  %10 = load [4 x float]*, [4 x float]** %m1.addr, align 8, !dbg !2933
  %11 = load i32, i32* %i, align 4, !dbg !2934
  %idxprom10 = sext i32 %11 to i64, !dbg !2933
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 %idxprom10, !dbg !2933
  %12 = load i32, i32* %j, align 4, !dbg !2935
  %idxprom12 = sext i32 %12 to i64, !dbg !2933
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx11, i64 0, i64 %idxprom12, !dbg !2933
  store float %sub, float* %arrayidx13, align 4, !dbg !2936
  br label %for.inc, !dbg !2933

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4, !dbg !2937
  %inc = add nsw i32 %13, 1, !dbg !2937
  store i32 %inc, i32* %j, align 4, !dbg !2937
  br label %for.cond1, !dbg !2938, !llvm.loop !2939

for.end:                                          ; preds = %for.cond1
  br label %for.inc14, !dbg !2940

for.inc14:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !2941
  %inc15 = add nsw i32 %14, 1, !dbg !2941
  store i32 %inc15, i32* %i, align 4, !dbg !2941
  br label %for.cond, !dbg !2942, !llvm.loop !2943

for.end16:                                        ; preds = %for.cond
  ret void, !dbg !2945
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @determinant_m3_array([3 x float]* %m) #0 !dbg !2946 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !2949, metadata !DIExpression()), !dbg !2950
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2951
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !2951
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !2951
  %1 = load float, float* %arrayidx1, align 4, !dbg !2951
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2952
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, !dbg !2952
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 1, !dbg !2952
  %3 = load float, float* %arrayidx3, align 4, !dbg !2952
  %4 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2953
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 2, !dbg !2953
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 2, !dbg !2953
  %5 = load float, float* %arrayidx5, align 4, !dbg !2953
  %mul = fmul float %3, %5, !dbg !2954
  %6 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2955
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 1, !dbg !2955
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 2, !dbg !2955
  %7 = load float, float* %arrayidx7, align 4, !dbg !2955
  %8 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2956
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 2, !dbg !2956
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 1, !dbg !2956
  %9 = load float, float* %arrayidx9, align 4, !dbg !2956
  %mul10 = fmul float %7, %9, !dbg !2957
  %sub = fsub float %mul, %mul10, !dbg !2958
  %mul11 = fmul float %1, %sub, !dbg !2959
  %10 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2960
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 1, !dbg !2960
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !2960
  %11 = load float, float* %arrayidx13, align 4, !dbg !2960
  %12 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2961
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %12, i64 0, !dbg !2961
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx14, i64 0, i64 1, !dbg !2961
  %13 = load float, float* %arrayidx15, align 4, !dbg !2961
  %14 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2962
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 2, !dbg !2962
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 2, !dbg !2962
  %15 = load float, float* %arrayidx17, align 4, !dbg !2962
  %mul18 = fmul float %13, %15, !dbg !2963
  %16 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2964
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 0, !dbg !2964
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx19, i64 0, i64 2, !dbg !2964
  %17 = load float, float* %arrayidx20, align 4, !dbg !2964
  %18 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2965
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %18, i64 2, !dbg !2965
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx21, i64 0, i64 1, !dbg !2965
  %19 = load float, float* %arrayidx22, align 4, !dbg !2965
  %mul23 = fmul float %17, %19, !dbg !2966
  %sub24 = fsub float %mul18, %mul23, !dbg !2967
  %mul25 = fmul float %11, %sub24, !dbg !2968
  %sub26 = fsub float %mul11, %mul25, !dbg !2969
  %20 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2970
  %arrayidx27 = getelementptr inbounds [3 x float], [3 x float]* %20, i64 2, !dbg !2970
  %arrayidx28 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx27, i64 0, i64 0, !dbg !2970
  %21 = load float, float* %arrayidx28, align 4, !dbg !2970
  %22 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2971
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %22, i64 0, !dbg !2971
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 1, !dbg !2971
  %23 = load float, float* %arrayidx30, align 4, !dbg !2971
  %24 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2972
  %arrayidx31 = getelementptr inbounds [3 x float], [3 x float]* %24, i64 1, !dbg !2972
  %arrayidx32 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx31, i64 0, i64 2, !dbg !2972
  %25 = load float, float* %arrayidx32, align 4, !dbg !2972
  %mul33 = fmul float %23, %25, !dbg !2973
  %26 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2974
  %arrayidx34 = getelementptr inbounds [3 x float], [3 x float]* %26, i64 0, !dbg !2974
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx34, i64 0, i64 2, !dbg !2974
  %27 = load float, float* %arrayidx35, align 4, !dbg !2974
  %28 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2975
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %28, i64 1, !dbg !2975
  %arrayidx37 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx36, i64 0, i64 1, !dbg !2975
  %29 = load float, float* %arrayidx37, align 4, !dbg !2975
  %mul38 = fmul float %27, %29, !dbg !2976
  %sub39 = fsub float %mul33, %mul38, !dbg !2977
  %mul40 = fmul float %21, %sub39, !dbg !2978
  %add = fadd float %sub26, %mul40, !dbg !2979
  ret float %add, !dbg !2980
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @invert_m3_ex([3 x float]* %m, float %epsilon) #0 !dbg !2981 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  %epsilon.addr = alloca float, align 4
  %tmp = alloca [3 x [3 x float]], align 16
  %success = alloca i8, align 1
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !2985, metadata !DIExpression()), !dbg !2986
  store float %epsilon, float* %epsilon.addr, align 4
  call void @llvm.dbg.declare(metadata float* %epsilon.addr, metadata !2987, metadata !DIExpression()), !dbg !2988
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %tmp, metadata !2989, metadata !DIExpression()), !dbg !2990
  call void @llvm.dbg.declare(metadata i8* %success, metadata !2991, metadata !DIExpression()), !dbg !2993
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmp, i64 0, i64 0, !dbg !2994
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2995
  %1 = load float, float* %epsilon.addr, align 4, !dbg !2996
  %call = call zeroext i8 @invert_m3_m3_ex([3 x float]* %arraydecay, [3 x float]* %0, float %1), !dbg !2997
  store i8 %call, i8* %success, align 1, !dbg !2993
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !2998
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmp, i64 0, i64 0, !dbg !2999
  call void @copy_m3_m3([3 x float]* %2, [3 x float]* %arraydecay1), !dbg !3000
  %3 = load i8, i8* %success, align 1, !dbg !3001
  ret i8 %3, !dbg !3002
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @invert_m3_m3_ex([3 x float]* %m1, [3 x float]* %m2, float %epsilon) #0 !dbg !3003 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %epsilon.addr = alloca float, align 4
  %det = alloca float, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %success = alloca i8, align 1
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !3006, metadata !DIExpression()), !dbg !3007
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !3008, metadata !DIExpression()), !dbg !3009
  store float %epsilon, float* %epsilon.addr, align 4
  call void @llvm.dbg.declare(metadata float* %epsilon.addr, metadata !3010, metadata !DIExpression()), !dbg !3011
  call void @llvm.dbg.declare(metadata float* %det, metadata !3012, metadata !DIExpression()), !dbg !3013
  call void @llvm.dbg.declare(metadata i32* %a, metadata !3014, metadata !DIExpression()), !dbg !3015
  call void @llvm.dbg.declare(metadata i32* %b, metadata !3016, metadata !DIExpression()), !dbg !3017
  call void @llvm.dbg.declare(metadata i8* %success, metadata !3018, metadata !DIExpression()), !dbg !3019
  %0 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3020
  %1 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !3021
  call void @adjoint_m3_m3([3 x float]* %0, [3 x float]* %1), !dbg !3022
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !3023
  %call = call float @determinant_m3_array([3 x float]* %2), !dbg !3024
  store float %call, float* %det, align 4, !dbg !3025
  %3 = load float, float* %det, align 4, !dbg !3026
  %4 = call float @llvm.fabs.f32(float %3), !dbg !3027
  %5 = load float, float* %epsilon.addr, align 4, !dbg !3028
  %cmp = fcmp ogt float %4, %5, !dbg !3029
  %conv = zext i1 %cmp to i32, !dbg !3029
  %conv1 = trunc i32 %conv to i8, !dbg !3030
  store i8 %conv1, i8* %success, align 1, !dbg !3031
  %6 = load float, float* %det, align 4, !dbg !3032
  %cmp2 = fcmp une float %6, 0.000000e+00, !dbg !3032
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3034

if.then:                                          ; preds = %entry
  %7 = load float, float* %det, align 4, !dbg !3035
  %div = fdiv float 1.000000e+00, %7, !dbg !3037
  store float %div, float* %det, align 4, !dbg !3038
  store i32 0, i32* %a, align 4, !dbg !3039
  br label %for.cond, !dbg !3041

for.cond:                                         ; preds = %for.inc12, %if.then
  %8 = load i32, i32* %a, align 4, !dbg !3042
  %cmp4 = icmp slt i32 %8, 3, !dbg !3044
  br i1 %cmp4, label %for.body, label %for.end14, !dbg !3045

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %b, align 4, !dbg !3046
  br label %for.cond6, !dbg !3049

for.cond6:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %b, align 4, !dbg !3050
  %cmp7 = icmp slt i32 %9, 3, !dbg !3052
  br i1 %cmp7, label %for.body9, label %for.end, !dbg !3053

for.body9:                                        ; preds = %for.cond6
  %10 = load float, float* %det, align 4, !dbg !3054
  %11 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3056
  %12 = load i32, i32* %a, align 4, !dbg !3057
  %idxprom = sext i32 %12 to i64, !dbg !3056
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %11, i64 %idxprom, !dbg !3056
  %13 = load i32, i32* %b, align 4, !dbg !3058
  %idxprom10 = sext i32 %13 to i64, !dbg !3056
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 %idxprom10, !dbg !3056
  %14 = load float, float* %arrayidx11, align 4, !dbg !3059
  %mul = fmul float %14, %10, !dbg !3059
  store float %mul, float* %arrayidx11, align 4, !dbg !3059
  br label %for.inc, !dbg !3060

for.inc:                                          ; preds = %for.body9
  %15 = load i32, i32* %b, align 4, !dbg !3061
  %inc = add nsw i32 %15, 1, !dbg !3061
  store i32 %inc, i32* %b, align 4, !dbg !3061
  br label %for.cond6, !dbg !3062, !llvm.loop !3063

for.end:                                          ; preds = %for.cond6
  br label %for.inc12, !dbg !3065

for.inc12:                                        ; preds = %for.end
  %16 = load i32, i32* %a, align 4, !dbg !3066
  %inc13 = add nsw i32 %16, 1, !dbg !3066
  store i32 %inc13, i32* %a, align 4, !dbg !3066
  br label %for.cond, !dbg !3067, !llvm.loop !3068

for.end14:                                        ; preds = %for.cond
  br label %if.end, !dbg !3070

if.end:                                           ; preds = %for.end14, %entry
  %17 = load i8, i8* %success, align 1, !dbg !3071
  ret i8 %17, !dbg !3072
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @adjoint_m3_m3([3 x float]* %m1, [3 x float]* %m) #0 !dbg !3073 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m.addr = alloca [3 x float]*, align 8
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !3074, metadata !DIExpression()), !dbg !3075
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !3076, metadata !DIExpression()), !dbg !3077
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3078
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 1, !dbg !3078
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 1, !dbg !3078
  %1 = load float, float* %arrayidx1, align 4, !dbg !3078
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3079
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, !dbg !3079
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 2, !dbg !3079
  %3 = load float, float* %arrayidx3, align 4, !dbg !3079
  %mul = fmul float %1, %3, !dbg !3080
  %4 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3081
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 1, !dbg !3081
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 2, !dbg !3081
  %5 = load float, float* %arrayidx5, align 4, !dbg !3081
  %6 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3082
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 2, !dbg !3082
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 1, !dbg !3082
  %7 = load float, float* %arrayidx7, align 4, !dbg !3082
  %mul8 = fmul float %5, %7, !dbg !3083
  %sub = fsub float %mul, %mul8, !dbg !3084
  %8 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3085
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 0, !dbg !3085
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx9, i64 0, i64 0, !dbg !3085
  store float %sub, float* %arrayidx10, align 4, !dbg !3086
  %9 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3087
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, !dbg !3087
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx11, i64 0, i64 1, !dbg !3087
  %10 = load float, float* %arrayidx12, align 4, !dbg !3087
  %fneg = fneg float %10, !dbg !3088
  %11 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3089
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 2, !dbg !3089
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx13, i64 0, i64 2, !dbg !3089
  %12 = load float, float* %arrayidx14, align 4, !dbg !3089
  %mul15 = fmul float %fneg, %12, !dbg !3090
  %13 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3091
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, !dbg !3091
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 2, !dbg !3091
  %14 = load float, float* %arrayidx17, align 4, !dbg !3091
  %15 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3092
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 2, !dbg !3092
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 1, !dbg !3092
  %16 = load float, float* %arrayidx19, align 4, !dbg !3092
  %mul20 = fmul float %14, %16, !dbg !3093
  %add = fadd float %mul15, %mul20, !dbg !3094
  %17 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3095
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 0, !dbg !3095
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx21, i64 0, i64 1, !dbg !3095
  store float %add, float* %arrayidx22, align 4, !dbg !3096
  %18 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3097
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %18, i64 0, !dbg !3097
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx23, i64 0, i64 1, !dbg !3097
  %19 = load float, float* %arrayidx24, align 4, !dbg !3097
  %20 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3098
  %arrayidx25 = getelementptr inbounds [3 x float], [3 x float]* %20, i64 1, !dbg !3098
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx25, i64 0, i64 2, !dbg !3098
  %21 = load float, float* %arrayidx26, align 4, !dbg !3098
  %mul27 = fmul float %19, %21, !dbg !3099
  %22 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3100
  %arrayidx28 = getelementptr inbounds [3 x float], [3 x float]* %22, i64 0, !dbg !3100
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx28, i64 0, i64 2, !dbg !3100
  %23 = load float, float* %arrayidx29, align 4, !dbg !3100
  %24 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3101
  %arrayidx30 = getelementptr inbounds [3 x float], [3 x float]* %24, i64 1, !dbg !3101
  %arrayidx31 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx30, i64 0, i64 1, !dbg !3101
  %25 = load float, float* %arrayidx31, align 4, !dbg !3101
  %mul32 = fmul float %23, %25, !dbg !3102
  %sub33 = fsub float %mul27, %mul32, !dbg !3103
  %26 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3104
  %arrayidx34 = getelementptr inbounds [3 x float], [3 x float]* %26, i64 0, !dbg !3104
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx34, i64 0, i64 2, !dbg !3104
  store float %sub33, float* %arrayidx35, align 4, !dbg !3105
  %27 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3106
  %arrayidx36 = getelementptr inbounds [3 x float], [3 x float]* %27, i64 1, !dbg !3106
  %arrayidx37 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx36, i64 0, i64 0, !dbg !3106
  %28 = load float, float* %arrayidx37, align 4, !dbg !3106
  %fneg38 = fneg float %28, !dbg !3107
  %29 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3108
  %arrayidx39 = getelementptr inbounds [3 x float], [3 x float]* %29, i64 2, !dbg !3108
  %arrayidx40 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx39, i64 0, i64 2, !dbg !3108
  %30 = load float, float* %arrayidx40, align 4, !dbg !3108
  %mul41 = fmul float %fneg38, %30, !dbg !3109
  %31 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3110
  %arrayidx42 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 1, !dbg !3110
  %arrayidx43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 2, !dbg !3110
  %32 = load float, float* %arrayidx43, align 4, !dbg !3110
  %33 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3111
  %arrayidx44 = getelementptr inbounds [3 x float], [3 x float]* %33, i64 2, !dbg !3111
  %arrayidx45 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx44, i64 0, i64 0, !dbg !3111
  %34 = load float, float* %arrayidx45, align 4, !dbg !3111
  %mul46 = fmul float %32, %34, !dbg !3112
  %add47 = fadd float %mul41, %mul46, !dbg !3113
  %35 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3114
  %arrayidx48 = getelementptr inbounds [3 x float], [3 x float]* %35, i64 1, !dbg !3114
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx48, i64 0, i64 0, !dbg !3114
  store float %add47, float* %arrayidx49, align 4, !dbg !3115
  %36 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3116
  %arrayidx50 = getelementptr inbounds [3 x float], [3 x float]* %36, i64 0, !dbg !3116
  %arrayidx51 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx50, i64 0, i64 0, !dbg !3116
  %37 = load float, float* %arrayidx51, align 4, !dbg !3116
  %38 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3117
  %arrayidx52 = getelementptr inbounds [3 x float], [3 x float]* %38, i64 2, !dbg !3117
  %arrayidx53 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx52, i64 0, i64 2, !dbg !3117
  %39 = load float, float* %arrayidx53, align 4, !dbg !3117
  %mul54 = fmul float %37, %39, !dbg !3118
  %40 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3119
  %arrayidx55 = getelementptr inbounds [3 x float], [3 x float]* %40, i64 0, !dbg !3119
  %arrayidx56 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx55, i64 0, i64 2, !dbg !3119
  %41 = load float, float* %arrayidx56, align 4, !dbg !3119
  %42 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3120
  %arrayidx57 = getelementptr inbounds [3 x float], [3 x float]* %42, i64 2, !dbg !3120
  %arrayidx58 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx57, i64 0, i64 0, !dbg !3120
  %43 = load float, float* %arrayidx58, align 4, !dbg !3120
  %mul59 = fmul float %41, %43, !dbg !3121
  %sub60 = fsub float %mul54, %mul59, !dbg !3122
  %44 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3123
  %arrayidx61 = getelementptr inbounds [3 x float], [3 x float]* %44, i64 1, !dbg !3123
  %arrayidx62 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx61, i64 0, i64 1, !dbg !3123
  store float %sub60, float* %arrayidx62, align 4, !dbg !3124
  %45 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3125
  %arrayidx63 = getelementptr inbounds [3 x float], [3 x float]* %45, i64 0, !dbg !3125
  %arrayidx64 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx63, i64 0, i64 0, !dbg !3125
  %46 = load float, float* %arrayidx64, align 4, !dbg !3125
  %fneg65 = fneg float %46, !dbg !3126
  %47 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3127
  %arrayidx66 = getelementptr inbounds [3 x float], [3 x float]* %47, i64 1, !dbg !3127
  %arrayidx67 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx66, i64 0, i64 2, !dbg !3127
  %48 = load float, float* %arrayidx67, align 4, !dbg !3127
  %mul68 = fmul float %fneg65, %48, !dbg !3128
  %49 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3129
  %arrayidx69 = getelementptr inbounds [3 x float], [3 x float]* %49, i64 0, !dbg !3129
  %arrayidx70 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx69, i64 0, i64 2, !dbg !3129
  %50 = load float, float* %arrayidx70, align 4, !dbg !3129
  %51 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3130
  %arrayidx71 = getelementptr inbounds [3 x float], [3 x float]* %51, i64 1, !dbg !3130
  %arrayidx72 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx71, i64 0, i64 0, !dbg !3130
  %52 = load float, float* %arrayidx72, align 4, !dbg !3130
  %mul73 = fmul float %50, %52, !dbg !3131
  %add74 = fadd float %mul68, %mul73, !dbg !3132
  %53 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3133
  %arrayidx75 = getelementptr inbounds [3 x float], [3 x float]* %53, i64 1, !dbg !3133
  %arrayidx76 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx75, i64 0, i64 2, !dbg !3133
  store float %add74, float* %arrayidx76, align 4, !dbg !3134
  %54 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3135
  %arrayidx77 = getelementptr inbounds [3 x float], [3 x float]* %54, i64 1, !dbg !3135
  %arrayidx78 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx77, i64 0, i64 0, !dbg !3135
  %55 = load float, float* %arrayidx78, align 4, !dbg !3135
  %56 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3136
  %arrayidx79 = getelementptr inbounds [3 x float], [3 x float]* %56, i64 2, !dbg !3136
  %arrayidx80 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx79, i64 0, i64 1, !dbg !3136
  %57 = load float, float* %arrayidx80, align 4, !dbg !3136
  %mul81 = fmul float %55, %57, !dbg !3137
  %58 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3138
  %arrayidx82 = getelementptr inbounds [3 x float], [3 x float]* %58, i64 1, !dbg !3138
  %arrayidx83 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx82, i64 0, i64 1, !dbg !3138
  %59 = load float, float* %arrayidx83, align 4, !dbg !3138
  %60 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3139
  %arrayidx84 = getelementptr inbounds [3 x float], [3 x float]* %60, i64 2, !dbg !3139
  %arrayidx85 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx84, i64 0, i64 0, !dbg !3139
  %61 = load float, float* %arrayidx85, align 4, !dbg !3139
  %mul86 = fmul float %59, %61, !dbg !3140
  %sub87 = fsub float %mul81, %mul86, !dbg !3141
  %62 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3142
  %arrayidx88 = getelementptr inbounds [3 x float], [3 x float]* %62, i64 2, !dbg !3142
  %arrayidx89 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx88, i64 0, i64 0, !dbg !3142
  store float %sub87, float* %arrayidx89, align 4, !dbg !3143
  %63 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3144
  %arrayidx90 = getelementptr inbounds [3 x float], [3 x float]* %63, i64 0, !dbg !3144
  %arrayidx91 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx90, i64 0, i64 0, !dbg !3144
  %64 = load float, float* %arrayidx91, align 4, !dbg !3144
  %fneg92 = fneg float %64, !dbg !3145
  %65 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3146
  %arrayidx93 = getelementptr inbounds [3 x float], [3 x float]* %65, i64 2, !dbg !3146
  %arrayidx94 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx93, i64 0, i64 1, !dbg !3146
  %66 = load float, float* %arrayidx94, align 4, !dbg !3146
  %mul95 = fmul float %fneg92, %66, !dbg !3147
  %67 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3148
  %arrayidx96 = getelementptr inbounds [3 x float], [3 x float]* %67, i64 0, !dbg !3148
  %arrayidx97 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx96, i64 0, i64 1, !dbg !3148
  %68 = load float, float* %arrayidx97, align 4, !dbg !3148
  %69 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3149
  %arrayidx98 = getelementptr inbounds [3 x float], [3 x float]* %69, i64 2, !dbg !3149
  %arrayidx99 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx98, i64 0, i64 0, !dbg !3149
  %70 = load float, float* %arrayidx99, align 4, !dbg !3149
  %mul100 = fmul float %68, %70, !dbg !3150
  %add101 = fadd float %mul95, %mul100, !dbg !3151
  %71 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3152
  %arrayidx102 = getelementptr inbounds [3 x float], [3 x float]* %71, i64 2, !dbg !3152
  %arrayidx103 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx102, i64 0, i64 1, !dbg !3152
  store float %add101, float* %arrayidx103, align 4, !dbg !3153
  %72 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3154
  %arrayidx104 = getelementptr inbounds [3 x float], [3 x float]* %72, i64 0, !dbg !3154
  %arrayidx105 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx104, i64 0, i64 0, !dbg !3154
  %73 = load float, float* %arrayidx105, align 4, !dbg !3154
  %74 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3155
  %arrayidx106 = getelementptr inbounds [3 x float], [3 x float]* %74, i64 1, !dbg !3155
  %arrayidx107 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx106, i64 0, i64 1, !dbg !3155
  %75 = load float, float* %arrayidx107, align 4, !dbg !3155
  %mul108 = fmul float %73, %75, !dbg !3156
  %76 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3157
  %arrayidx109 = getelementptr inbounds [3 x float], [3 x float]* %76, i64 0, !dbg !3157
  %arrayidx110 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx109, i64 0, i64 1, !dbg !3157
  %77 = load float, float* %arrayidx110, align 4, !dbg !3157
  %78 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3158
  %arrayidx111 = getelementptr inbounds [3 x float], [3 x float]* %78, i64 1, !dbg !3158
  %arrayidx112 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx111, i64 0, i64 0, !dbg !3158
  %79 = load float, float* %arrayidx112, align 4, !dbg !3158
  %mul113 = fmul float %77, %79, !dbg !3159
  %sub114 = fsub float %mul108, %mul113, !dbg !3160
  %80 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3161
  %arrayidx115 = getelementptr inbounds [3 x float], [3 x float]* %80, i64 2, !dbg !3161
  %arrayidx116 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx115, i64 0, i64 2, !dbg !3161
  store float %sub114, float* %arrayidx116, align 4, !dbg !3162
  ret void, !dbg !3163
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @invert_m3([3 x float]* %m) #0 !dbg !3164 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  %tmp = alloca [3 x [3 x float]], align 16
  %success = alloca i8, align 1
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !3167, metadata !DIExpression()), !dbg !3168
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %tmp, metadata !3169, metadata !DIExpression()), !dbg !3170
  call void @llvm.dbg.declare(metadata i8* %success, metadata !3171, metadata !DIExpression()), !dbg !3172
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmp, i64 0, i64 0, !dbg !3173
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3174
  %call = call zeroext i8 @invert_m3_m3([3 x float]* %arraydecay, [3 x float]* %0), !dbg !3175
  store i8 %call, i8* %success, align 1, !dbg !3172
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !3176
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmp, i64 0, i64 0, !dbg !3177
  call void @copy_m3_m3([3 x float]* %1, [3 x float]* %arraydecay1), !dbg !3178
  %2 = load i8, i8* %success, align 1, !dbg !3179
  ret i8 %2, !dbg !3180
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @invert_m3_m3([3 x float]* %m1, [3 x float]* %m2) #0 !dbg !3181 {
entry:
  %m1.addr = alloca [3 x float]*, align 8
  %m2.addr = alloca [3 x float]*, align 8
  %det = alloca float, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %success = alloca i8, align 1
  store [3 x float]* %m1, [3 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m1.addr, metadata !3184, metadata !DIExpression()), !dbg !3185
  store [3 x float]* %m2, [3 x float]** %m2.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m2.addr, metadata !3186, metadata !DIExpression()), !dbg !3187
  call void @llvm.dbg.declare(metadata float* %det, metadata !3188, metadata !DIExpression()), !dbg !3189
  call void @llvm.dbg.declare(metadata i32* %a, metadata !3190, metadata !DIExpression()), !dbg !3191
  call void @llvm.dbg.declare(metadata i32* %b, metadata !3192, metadata !DIExpression()), !dbg !3193
  call void @llvm.dbg.declare(metadata i8* %success, metadata !3194, metadata !DIExpression()), !dbg !3195
  %0 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3196
  %1 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !3197
  call void @adjoint_m3_m3([3 x float]* %0, [3 x float]* %1), !dbg !3198
  %2 = load [3 x float]*, [3 x float]** %m2.addr, align 8, !dbg !3199
  %call = call float @determinant_m3_array([3 x float]* %2), !dbg !3200
  store float %call, float* %det, align 4, !dbg !3201
  %3 = load float, float* %det, align 4, !dbg !3202
  %cmp = fcmp une float %3, 0.000000e+00, !dbg !3203
  %conv = zext i1 %cmp to i32, !dbg !3203
  %conv1 = trunc i32 %conv to i8, !dbg !3204
  store i8 %conv1, i8* %success, align 1, !dbg !3205
  %4 = load float, float* %det, align 4, !dbg !3206
  %cmp2 = fcmp une float %4, 0.000000e+00, !dbg !3206
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3208

if.then:                                          ; preds = %entry
  %5 = load float, float* %det, align 4, !dbg !3209
  %div = fdiv float 1.000000e+00, %5, !dbg !3211
  store float %div, float* %det, align 4, !dbg !3212
  store i32 0, i32* %a, align 4, !dbg !3213
  br label %for.cond, !dbg !3215

for.cond:                                         ; preds = %for.inc12, %if.then
  %6 = load i32, i32* %a, align 4, !dbg !3216
  %cmp4 = icmp slt i32 %6, 3, !dbg !3218
  br i1 %cmp4, label %for.body, label %for.end14, !dbg !3219

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %b, align 4, !dbg !3220
  br label %for.cond6, !dbg !3223

for.cond6:                                        ; preds = %for.inc, %for.body
  %7 = load i32, i32* %b, align 4, !dbg !3224
  %cmp7 = icmp slt i32 %7, 3, !dbg !3226
  br i1 %cmp7, label %for.body9, label %for.end, !dbg !3227

for.body9:                                        ; preds = %for.cond6
  %8 = load float, float* %det, align 4, !dbg !3228
  %9 = load [3 x float]*, [3 x float]** %m1.addr, align 8, !dbg !3230
  %10 = load i32, i32* %a, align 4, !dbg !3231
  %idxprom = sext i32 %10 to i64, !dbg !3230
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %9, i64 %idxprom, !dbg !3230
  %11 = load i32, i32* %b, align 4, !dbg !3232
  %idxprom10 = sext i32 %11 to i64, !dbg !3230
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 %idxprom10, !dbg !3230
  %12 = load float, float* %arrayidx11, align 4, !dbg !3233
  %mul = fmul float %12, %8, !dbg !3233
  store float %mul, float* %arrayidx11, align 4, !dbg !3233
  br label %for.inc, !dbg !3234

for.inc:                                          ; preds = %for.body9
  %13 = load i32, i32* %b, align 4, !dbg !3235
  %inc = add nsw i32 %13, 1, !dbg !3235
  store i32 %inc, i32* %b, align 4, !dbg !3235
  br label %for.cond6, !dbg !3236, !llvm.loop !3237

for.end:                                          ; preds = %for.cond6
  br label %for.inc12, !dbg !3239

for.inc12:                                        ; preds = %for.end
  %14 = load i32, i32* %a, align 4, !dbg !3240
  %inc13 = add nsw i32 %14, 1, !dbg !3240
  store i32 %inc13, i32* %a, align 4, !dbg !3240
  br label %for.cond, !dbg !3241, !llvm.loop !3242

for.end14:                                        ; preds = %for.cond
  br label %if.end, !dbg !3244

if.end:                                           ; preds = %for.end14, %entry
  %15 = load i8, i8* %success, align 1, !dbg !3245
  ret i8 %15, !dbg !3246
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @invert_m4([4 x float]* %m) #0 !dbg !3247 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %tmp = alloca [4 x [4 x float]], align 16
  %success = alloca i8, align 1
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !3250, metadata !DIExpression()), !dbg !3251
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %tmp, metadata !3252, metadata !DIExpression()), !dbg !3253
  call void @llvm.dbg.declare(metadata i8* %success, metadata !3254, metadata !DIExpression()), !dbg !3255
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmp, i64 0, i64 0, !dbg !3256
  %0 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !3257
  %call = call zeroext i8 @invert_m4_m4([4 x float]* %arraydecay, [4 x float]* %0), !dbg !3258
  store i8 %call, i8* %success, align 1, !dbg !3255
  %1 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !3259
  %arraydecay1 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmp, i64 0, i64 0, !dbg !3260
  call void @copy_m4_m4([4 x float]* %1, [4 x float]* %arraydecay1), !dbg !3261
  %2 = load i8, i8* %success, align 1, !dbg !3262
  ret i8 %2, !dbg !3263
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @invert_m4_m4([4 x float]* %inverse, [4 x float]* %mat) #0 !dbg !3264 {
entry:
  %retval = alloca i8, align 1
  %inverse.addr = alloca [4 x float]*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca double, align 8
  %tempmat = alloca [4 x [4 x float]], align 16
  %max = alloca float, align 4
  %maxj = alloca i32, align 4
  %sw_ap = alloca float, align 4
  %sw_ap82 = alloca float, align 4
  store [4 x float]* %inverse, [4 x float]** %inverse.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %inverse.addr, metadata !3267, metadata !DIExpression()), !dbg !3268
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !3269, metadata !DIExpression()), !dbg !3270
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3271, metadata !DIExpression()), !dbg !3272
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3273, metadata !DIExpression()), !dbg !3274
  call void @llvm.dbg.declare(metadata i32* %k, metadata !3275, metadata !DIExpression()), !dbg !3276
  call void @llvm.dbg.declare(metadata double* %temp, metadata !3277, metadata !DIExpression()), !dbg !3278
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %tempmat, metadata !3279, metadata !DIExpression()), !dbg !3280
  call void @llvm.dbg.declare(metadata float* %max, metadata !3281, metadata !DIExpression()), !dbg !3282
  call void @llvm.dbg.declare(metadata i32* %maxj, metadata !3283, metadata !DIExpression()), !dbg !3284
  store i32 0, i32* %i, align 4, !dbg !3285
  br label %for.cond, !dbg !3287

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3288
  %cmp = icmp slt i32 %0, 4, !dbg !3290
  br i1 %cmp, label %for.body, label %for.end8, !dbg !3291

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !3292
  br label %for.cond1, !dbg !3294

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !3295
  %cmp2 = icmp slt i32 %1, 4, !dbg !3297
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !3298

for.body3:                                        ; preds = %for.cond1
  %2 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3299
  %3 = load i32, i32* %i, align 4, !dbg !3300
  %idxprom = sext i32 %3 to i64, !dbg !3299
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !3299
  %4 = load i32, i32* %j, align 4, !dbg !3301
  %idxprom4 = sext i32 %4 to i64, !dbg !3299
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom4, !dbg !3299
  store float 0.000000e+00, float* %arrayidx5, align 4, !dbg !3302
  br label %for.inc, !dbg !3299

for.inc:                                          ; preds = %for.body3
  %5 = load i32, i32* %j, align 4, !dbg !3303
  %inc = add nsw i32 %5, 1, !dbg !3303
  store i32 %inc, i32* %j, align 4, !dbg !3303
  br label %for.cond1, !dbg !3304, !llvm.loop !3305

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !3306

for.inc6:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4, !dbg !3307
  %inc7 = add nsw i32 %6, 1, !dbg !3307
  store i32 %inc7, i32* %i, align 4, !dbg !3307
  br label %for.cond, !dbg !3308, !llvm.loop !3309

for.end8:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3311
  br label %for.cond9, !dbg !3313

for.cond9:                                        ; preds = %for.inc16, %for.end8
  %7 = load i32, i32* %i, align 4, !dbg !3314
  %cmp10 = icmp slt i32 %7, 4, !dbg !3316
  br i1 %cmp10, label %for.body11, label %for.end18, !dbg !3317

for.body11:                                       ; preds = %for.cond9
  %8 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3318
  %9 = load i32, i32* %i, align 4, !dbg !3319
  %idxprom12 = sext i32 %9 to i64, !dbg !3318
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 %idxprom12, !dbg !3318
  %10 = load i32, i32* %i, align 4, !dbg !3320
  %idxprom14 = sext i32 %10 to i64, !dbg !3318
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx13, i64 0, i64 %idxprom14, !dbg !3318
  store float 1.000000e+00, float* %arrayidx15, align 4, !dbg !3321
  br label %for.inc16, !dbg !3318

for.inc16:                                        ; preds = %for.body11
  %11 = load i32, i32* %i, align 4, !dbg !3322
  %inc17 = add nsw i32 %11, 1, !dbg !3322
  store i32 %inc17, i32* %i, align 4, !dbg !3322
  br label %for.cond9, !dbg !3323, !llvm.loop !3324

for.end18:                                        ; preds = %for.cond9
  store i32 0, i32* %i, align 4, !dbg !3326
  br label %for.cond19, !dbg !3328

for.cond19:                                       ; preds = %for.inc36, %for.end18
  %12 = load i32, i32* %i, align 4, !dbg !3329
  %cmp20 = icmp slt i32 %12, 4, !dbg !3331
  br i1 %cmp20, label %for.body21, label %for.end38, !dbg !3332

for.body21:                                       ; preds = %for.cond19
  store i32 0, i32* %j, align 4, !dbg !3333
  br label %for.cond22, !dbg !3335

for.cond22:                                       ; preds = %for.inc33, %for.body21
  %13 = load i32, i32* %j, align 4, !dbg !3336
  %cmp23 = icmp slt i32 %13, 4, !dbg !3338
  br i1 %cmp23, label %for.body24, label %for.end35, !dbg !3339

for.body24:                                       ; preds = %for.cond22
  %14 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3340
  %15 = load i32, i32* %i, align 4, !dbg !3341
  %idxprom25 = sext i32 %15 to i64, !dbg !3340
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 %idxprom25, !dbg !3340
  %16 = load i32, i32* %j, align 4, !dbg !3342
  %idxprom27 = sext i32 %16 to i64, !dbg !3340
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 %idxprom27, !dbg !3340
  %17 = load float, float* %arrayidx28, align 4, !dbg !3340
  %18 = load i32, i32* %i, align 4, !dbg !3343
  %idxprom29 = sext i32 %18 to i64, !dbg !3344
  %arrayidx30 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom29, !dbg !3344
  %19 = load i32, i32* %j, align 4, !dbg !3345
  %idxprom31 = sext i32 %19 to i64, !dbg !3344
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 %idxprom31, !dbg !3344
  store float %17, float* %arrayidx32, align 4, !dbg !3346
  br label %for.inc33, !dbg !3344

for.inc33:                                        ; preds = %for.body24
  %20 = load i32, i32* %j, align 4, !dbg !3347
  %inc34 = add nsw i32 %20, 1, !dbg !3347
  store i32 %inc34, i32* %j, align 4, !dbg !3347
  br label %for.cond22, !dbg !3348, !llvm.loop !3349

for.end35:                                        ; preds = %for.cond22
  br label %for.inc36, !dbg !3350

for.inc36:                                        ; preds = %for.end35
  %21 = load i32, i32* %i, align 4, !dbg !3351
  %inc37 = add nsw i32 %21, 1, !dbg !3351
  store i32 %inc37, i32* %i, align 4, !dbg !3351
  br label %for.cond19, !dbg !3352, !llvm.loop !3353

for.end38:                                        ; preds = %for.cond19
  store i32 0, i32* %i, align 4, !dbg !3355
  br label %for.cond39, !dbg !3357

for.cond39:                                       ; preds = %for.inc184, %for.end38
  %22 = load i32, i32* %i, align 4, !dbg !3358
  %cmp40 = icmp slt i32 %22, 4, !dbg !3360
  br i1 %cmp40, label %for.body41, label %for.end186, !dbg !3361

for.body41:                                       ; preds = %for.cond39
  %23 = load i32, i32* %i, align 4, !dbg !3362
  %idxprom42 = sext i32 %23 to i64, !dbg !3364
  %arrayidx43 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom42, !dbg !3364
  %24 = load i32, i32* %i, align 4, !dbg !3365
  %idxprom44 = sext i32 %24 to i64, !dbg !3364
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx43, i64 0, i64 %idxprom44, !dbg !3364
  %25 = load float, float* %arrayidx45, align 4, !dbg !3364
  %26 = call float @llvm.fabs.f32(float %25), !dbg !3366
  store float %26, float* %max, align 4, !dbg !3367
  %27 = load i32, i32* %i, align 4, !dbg !3368
  store i32 %27, i32* %maxj, align 4, !dbg !3369
  %28 = load i32, i32* %i, align 4, !dbg !3370
  %add = add nsw i32 %28, 1, !dbg !3372
  store i32 %add, i32* %j, align 4, !dbg !3373
  br label %for.cond46, !dbg !3374

for.cond46:                                       ; preds = %for.inc58, %for.body41
  %29 = load i32, i32* %j, align 4, !dbg !3375
  %cmp47 = icmp slt i32 %29, 4, !dbg !3377
  br i1 %cmp47, label %for.body48, label %for.end60, !dbg !3378

for.body48:                                       ; preds = %for.cond46
  %30 = load i32, i32* %j, align 4, !dbg !3379
  %idxprom49 = sext i32 %30 to i64, !dbg !3382
  %arrayidx50 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom49, !dbg !3382
  %31 = load i32, i32* %i, align 4, !dbg !3383
  %idxprom51 = sext i32 %31 to i64, !dbg !3382
  %arrayidx52 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx50, i64 0, i64 %idxprom51, !dbg !3382
  %32 = load float, float* %arrayidx52, align 4, !dbg !3382
  %33 = call float @llvm.fabs.f32(float %32), !dbg !3384
  %34 = load float, float* %max, align 4, !dbg !3385
  %cmp53 = fcmp ogt float %33, %34, !dbg !3386
  br i1 %cmp53, label %if.then, label %if.end, !dbg !3387

if.then:                                          ; preds = %for.body48
  %35 = load i32, i32* %j, align 4, !dbg !3388
  %idxprom54 = sext i32 %35 to i64, !dbg !3390
  %arrayidx55 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom54, !dbg !3390
  %36 = load i32, i32* %i, align 4, !dbg !3391
  %idxprom56 = sext i32 %36 to i64, !dbg !3390
  %arrayidx57 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx55, i64 0, i64 %idxprom56, !dbg !3390
  %37 = load float, float* %arrayidx57, align 4, !dbg !3390
  %38 = call float @llvm.fabs.f32(float %37), !dbg !3392
  store float %38, float* %max, align 4, !dbg !3393
  %39 = load i32, i32* %j, align 4, !dbg !3394
  store i32 %39, i32* %maxj, align 4, !dbg !3395
  br label %if.end, !dbg !3396

if.end:                                           ; preds = %if.then, %for.body48
  br label %for.inc58, !dbg !3397

for.inc58:                                        ; preds = %if.end
  %40 = load i32, i32* %j, align 4, !dbg !3398
  %inc59 = add nsw i32 %40, 1, !dbg !3398
  store i32 %inc59, i32* %j, align 4, !dbg !3398
  br label %for.cond46, !dbg !3399, !llvm.loop !3400

for.end60:                                        ; preds = %for.cond46
  %41 = load i32, i32* %maxj, align 4, !dbg !3402
  %42 = load i32, i32* %i, align 4, !dbg !3404
  %cmp61 = icmp ne i32 %41, %42, !dbg !3405
  br i1 %cmp61, label %if.then62, label %if.end102, !dbg !3406

if.then62:                                        ; preds = %for.end60
  store i32 0, i32* %k, align 4, !dbg !3407
  br label %for.cond63, !dbg !3410

for.cond63:                                       ; preds = %for.inc99, %if.then62
  %43 = load i32, i32* %k, align 4, !dbg !3411
  %cmp64 = icmp slt i32 %43, 4, !dbg !3413
  br i1 %cmp64, label %for.body65, label %for.end101, !dbg !3414

for.body65:                                       ; preds = %for.cond63
  call void @llvm.dbg.declare(metadata float* %sw_ap, metadata !3415, metadata !DIExpression()), !dbg !3418
  %44 = load i32, i32* %i, align 4, !dbg !3418
  %idxprom66 = sext i32 %44 to i64, !dbg !3418
  %arrayidx67 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom66, !dbg !3418
  %45 = load i32, i32* %k, align 4, !dbg !3418
  %idxprom68 = sext i32 %45 to i64, !dbg !3418
  %arrayidx69 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx67, i64 0, i64 %idxprom68, !dbg !3418
  %46 = load float, float* %arrayidx69, align 4, !dbg !3418
  store float %46, float* %sw_ap, align 4, !dbg !3418
  %47 = load i32, i32* %maxj, align 4, !dbg !3418
  %idxprom70 = sext i32 %47 to i64, !dbg !3418
  %arrayidx71 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom70, !dbg !3418
  %48 = load i32, i32* %k, align 4, !dbg !3418
  %idxprom72 = sext i32 %48 to i64, !dbg !3418
  %arrayidx73 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx71, i64 0, i64 %idxprom72, !dbg !3418
  %49 = load float, float* %arrayidx73, align 4, !dbg !3418
  %50 = load i32, i32* %i, align 4, !dbg !3418
  %idxprom74 = sext i32 %50 to i64, !dbg !3418
  %arrayidx75 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom74, !dbg !3418
  %51 = load i32, i32* %k, align 4, !dbg !3418
  %idxprom76 = sext i32 %51 to i64, !dbg !3418
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx75, i64 0, i64 %idxprom76, !dbg !3418
  store float %49, float* %arrayidx77, align 4, !dbg !3418
  %52 = load float, float* %sw_ap, align 4, !dbg !3418
  %53 = load i32, i32* %maxj, align 4, !dbg !3418
  %idxprom78 = sext i32 %53 to i64, !dbg !3418
  %arrayidx79 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom78, !dbg !3418
  %54 = load i32, i32* %k, align 4, !dbg !3418
  %idxprom80 = sext i32 %54 to i64, !dbg !3418
  %arrayidx81 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx79, i64 0, i64 %idxprom80, !dbg !3418
  store float %52, float* %arrayidx81, align 4, !dbg !3418
  call void @llvm.dbg.declare(metadata float* %sw_ap82, metadata !3419, metadata !DIExpression()), !dbg !3421
  %55 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3421
  %56 = load i32, i32* %i, align 4, !dbg !3421
  %idxprom83 = sext i32 %56 to i64, !dbg !3421
  %arrayidx84 = getelementptr inbounds [4 x float], [4 x float]* %55, i64 %idxprom83, !dbg !3421
  %57 = load i32, i32* %k, align 4, !dbg !3421
  %idxprom85 = sext i32 %57 to i64, !dbg !3421
  %arrayidx86 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx84, i64 0, i64 %idxprom85, !dbg !3421
  %58 = load float, float* %arrayidx86, align 4, !dbg !3421
  store float %58, float* %sw_ap82, align 4, !dbg !3421
  %59 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3421
  %60 = load i32, i32* %maxj, align 4, !dbg !3421
  %idxprom87 = sext i32 %60 to i64, !dbg !3421
  %arrayidx88 = getelementptr inbounds [4 x float], [4 x float]* %59, i64 %idxprom87, !dbg !3421
  %61 = load i32, i32* %k, align 4, !dbg !3421
  %idxprom89 = sext i32 %61 to i64, !dbg !3421
  %arrayidx90 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx88, i64 0, i64 %idxprom89, !dbg !3421
  %62 = load float, float* %arrayidx90, align 4, !dbg !3421
  %63 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3421
  %64 = load i32, i32* %i, align 4, !dbg !3421
  %idxprom91 = sext i32 %64 to i64, !dbg !3421
  %arrayidx92 = getelementptr inbounds [4 x float], [4 x float]* %63, i64 %idxprom91, !dbg !3421
  %65 = load i32, i32* %k, align 4, !dbg !3421
  %idxprom93 = sext i32 %65 to i64, !dbg !3421
  %arrayidx94 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx92, i64 0, i64 %idxprom93, !dbg !3421
  store float %62, float* %arrayidx94, align 4, !dbg !3421
  %66 = load float, float* %sw_ap82, align 4, !dbg !3421
  %67 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3421
  %68 = load i32, i32* %maxj, align 4, !dbg !3421
  %idxprom95 = sext i32 %68 to i64, !dbg !3421
  %arrayidx96 = getelementptr inbounds [4 x float], [4 x float]* %67, i64 %idxprom95, !dbg !3421
  %69 = load i32, i32* %k, align 4, !dbg !3421
  %idxprom97 = sext i32 %69 to i64, !dbg !3421
  %arrayidx98 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx96, i64 0, i64 %idxprom97, !dbg !3421
  store float %66, float* %arrayidx98, align 4, !dbg !3421
  br label %for.inc99, !dbg !3422

for.inc99:                                        ; preds = %for.body65
  %70 = load i32, i32* %k, align 4, !dbg !3423
  %inc100 = add nsw i32 %70, 1, !dbg !3423
  store i32 %inc100, i32* %k, align 4, !dbg !3423
  br label %for.cond63, !dbg !3424, !llvm.loop !3425

for.end101:                                       ; preds = %for.cond63
  br label %if.end102, !dbg !3427

if.end102:                                        ; preds = %for.end101, %for.end60
  %71 = load i32, i32* %i, align 4, !dbg !3428
  %idxprom103 = sext i32 %71 to i64, !dbg !3429
  %arrayidx104 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom103, !dbg !3429
  %72 = load i32, i32* %i, align 4, !dbg !3430
  %idxprom105 = sext i32 %72 to i64, !dbg !3429
  %arrayidx106 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx104, i64 0, i64 %idxprom105, !dbg !3429
  %73 = load float, float* %arrayidx106, align 4, !dbg !3429
  %conv = fpext float %73 to double, !dbg !3429
  store double %conv, double* %temp, align 8, !dbg !3431
  %74 = load double, double* %temp, align 8, !dbg !3432
  %cmp107 = fcmp oeq double %74, 0.000000e+00, !dbg !3434
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !3435

if.then109:                                       ; preds = %if.end102
  store i8 0, i8* %retval, align 1, !dbg !3436
  br label %return, !dbg !3436

if.end110:                                        ; preds = %if.end102
  store i32 0, i32* %k, align 4, !dbg !3437
  br label %for.cond111, !dbg !3439

for.cond111:                                      ; preds = %for.inc136, %if.end110
  %75 = load i32, i32* %k, align 4, !dbg !3440
  %cmp112 = icmp slt i32 %75, 4, !dbg !3442
  br i1 %cmp112, label %for.body114, label %for.end138, !dbg !3443

for.body114:                                      ; preds = %for.cond111
  %76 = load i32, i32* %i, align 4, !dbg !3444
  %idxprom115 = sext i32 %76 to i64, !dbg !3446
  %arrayidx116 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom115, !dbg !3446
  %77 = load i32, i32* %k, align 4, !dbg !3447
  %idxprom117 = sext i32 %77 to i64, !dbg !3446
  %arrayidx118 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx116, i64 0, i64 %idxprom117, !dbg !3446
  %78 = load float, float* %arrayidx118, align 4, !dbg !3446
  %conv119 = fpext float %78 to double, !dbg !3448
  %79 = load double, double* %temp, align 8, !dbg !3449
  %div = fdiv double %conv119, %79, !dbg !3450
  %conv120 = fptrunc double %div to float, !dbg !3451
  %80 = load i32, i32* %i, align 4, !dbg !3452
  %idxprom121 = sext i32 %80 to i64, !dbg !3453
  %arrayidx122 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom121, !dbg !3453
  %81 = load i32, i32* %k, align 4, !dbg !3454
  %idxprom123 = sext i32 %81 to i64, !dbg !3453
  %arrayidx124 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx122, i64 0, i64 %idxprom123, !dbg !3453
  store float %conv120, float* %arrayidx124, align 4, !dbg !3455
  %82 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3456
  %83 = load i32, i32* %i, align 4, !dbg !3457
  %idxprom125 = sext i32 %83 to i64, !dbg !3456
  %arrayidx126 = getelementptr inbounds [4 x float], [4 x float]* %82, i64 %idxprom125, !dbg !3456
  %84 = load i32, i32* %k, align 4, !dbg !3458
  %idxprom127 = sext i32 %84 to i64, !dbg !3456
  %arrayidx128 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx126, i64 0, i64 %idxprom127, !dbg !3456
  %85 = load float, float* %arrayidx128, align 4, !dbg !3456
  %conv129 = fpext float %85 to double, !dbg !3459
  %86 = load double, double* %temp, align 8, !dbg !3460
  %div130 = fdiv double %conv129, %86, !dbg !3461
  %conv131 = fptrunc double %div130 to float, !dbg !3462
  %87 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3463
  %88 = load i32, i32* %i, align 4, !dbg !3464
  %idxprom132 = sext i32 %88 to i64, !dbg !3463
  %arrayidx133 = getelementptr inbounds [4 x float], [4 x float]* %87, i64 %idxprom132, !dbg !3463
  %89 = load i32, i32* %k, align 4, !dbg !3465
  %idxprom134 = sext i32 %89 to i64, !dbg !3463
  %arrayidx135 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx133, i64 0, i64 %idxprom134, !dbg !3463
  store float %conv131, float* %arrayidx135, align 4, !dbg !3466
  br label %for.inc136, !dbg !3467

for.inc136:                                       ; preds = %for.body114
  %90 = load i32, i32* %k, align 4, !dbg !3468
  %inc137 = add nsw i32 %90, 1, !dbg !3468
  store i32 %inc137, i32* %k, align 4, !dbg !3468
  br label %for.cond111, !dbg !3469, !llvm.loop !3470

for.end138:                                       ; preds = %for.cond111
  store i32 0, i32* %j, align 4, !dbg !3472
  br label %for.cond139, !dbg !3474

for.cond139:                                      ; preds = %for.inc181, %for.end138
  %91 = load i32, i32* %j, align 4, !dbg !3475
  %cmp140 = icmp slt i32 %91, 4, !dbg !3477
  br i1 %cmp140, label %for.body142, label %for.end183, !dbg !3478

for.body142:                                      ; preds = %for.cond139
  %92 = load i32, i32* %j, align 4, !dbg !3479
  %93 = load i32, i32* %i, align 4, !dbg !3482
  %cmp143 = icmp ne i32 %92, %93, !dbg !3483
  br i1 %cmp143, label %if.then145, label %if.end180, !dbg !3484

if.then145:                                       ; preds = %for.body142
  %94 = load i32, i32* %j, align 4, !dbg !3485
  %idxprom146 = sext i32 %94 to i64, !dbg !3487
  %arrayidx147 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom146, !dbg !3487
  %95 = load i32, i32* %i, align 4, !dbg !3488
  %idxprom148 = sext i32 %95 to i64, !dbg !3487
  %arrayidx149 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx147, i64 0, i64 %idxprom148, !dbg !3487
  %96 = load float, float* %arrayidx149, align 4, !dbg !3487
  %conv150 = fpext float %96 to double, !dbg !3487
  store double %conv150, double* %temp, align 8, !dbg !3489
  store i32 0, i32* %k, align 4, !dbg !3490
  br label %for.cond151, !dbg !3492

for.cond151:                                      ; preds = %for.inc177, %if.then145
  %97 = load i32, i32* %k, align 4, !dbg !3493
  %cmp152 = icmp slt i32 %97, 4, !dbg !3495
  br i1 %cmp152, label %for.body154, label %for.end179, !dbg !3496

for.body154:                                      ; preds = %for.cond151
  %98 = load i32, i32* %i, align 4, !dbg !3497
  %idxprom155 = sext i32 %98 to i64, !dbg !3499
  %arrayidx156 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom155, !dbg !3499
  %99 = load i32, i32* %k, align 4, !dbg !3500
  %idxprom157 = sext i32 %99 to i64, !dbg !3499
  %arrayidx158 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx156, i64 0, i64 %idxprom157, !dbg !3499
  %100 = load float, float* %arrayidx158, align 4, !dbg !3499
  %conv159 = fpext float %100 to double, !dbg !3501
  %101 = load double, double* %temp, align 8, !dbg !3502
  %mul = fmul double %conv159, %101, !dbg !3503
  %conv160 = fptrunc double %mul to float, !dbg !3504
  %102 = load i32, i32* %j, align 4, !dbg !3505
  %idxprom161 = sext i32 %102 to i64, !dbg !3506
  %arrayidx162 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tempmat, i64 0, i64 %idxprom161, !dbg !3506
  %103 = load i32, i32* %k, align 4, !dbg !3507
  %idxprom163 = sext i32 %103 to i64, !dbg !3506
  %arrayidx164 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx162, i64 0, i64 %idxprom163, !dbg !3506
  %104 = load float, float* %arrayidx164, align 4, !dbg !3508
  %sub = fsub float %104, %conv160, !dbg !3508
  store float %sub, float* %arrayidx164, align 4, !dbg !3508
  %105 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3509
  %106 = load i32, i32* %i, align 4, !dbg !3510
  %idxprom165 = sext i32 %106 to i64, !dbg !3509
  %arrayidx166 = getelementptr inbounds [4 x float], [4 x float]* %105, i64 %idxprom165, !dbg !3509
  %107 = load i32, i32* %k, align 4, !dbg !3511
  %idxprom167 = sext i32 %107 to i64, !dbg !3509
  %arrayidx168 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx166, i64 0, i64 %idxprom167, !dbg !3509
  %108 = load float, float* %arrayidx168, align 4, !dbg !3509
  %conv169 = fpext float %108 to double, !dbg !3512
  %109 = load double, double* %temp, align 8, !dbg !3513
  %mul170 = fmul double %conv169, %109, !dbg !3514
  %conv171 = fptrunc double %mul170 to float, !dbg !3515
  %110 = load [4 x float]*, [4 x float]** %inverse.addr, align 8, !dbg !3516
  %111 = load i32, i32* %j, align 4, !dbg !3517
  %idxprom172 = sext i32 %111 to i64, !dbg !3516
  %arrayidx173 = getelementptr inbounds [4 x float], [4 x float]* %110, i64 %idxprom172, !dbg !3516
  %112 = load i32, i32* %k, align 4, !dbg !3518
  %idxprom174 = sext i32 %112 to i64, !dbg !3516
  %arrayidx175 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx173, i64 0, i64 %idxprom174, !dbg !3516
  %113 = load float, float* %arrayidx175, align 4, !dbg !3519
  %sub176 = fsub float %113, %conv171, !dbg !3519
  store float %sub176, float* %arrayidx175, align 4, !dbg !3519
  br label %for.inc177, !dbg !3520

for.inc177:                                       ; preds = %for.body154
  %114 = load i32, i32* %k, align 4, !dbg !3521
  %inc178 = add nsw i32 %114, 1, !dbg !3521
  store i32 %inc178, i32* %k, align 4, !dbg !3521
  br label %for.cond151, !dbg !3522, !llvm.loop !3523

for.end179:                                       ; preds = %for.cond151
  br label %if.end180, !dbg !3525

if.end180:                                        ; preds = %for.end179, %for.body142
  br label %for.inc181, !dbg !3526

for.inc181:                                       ; preds = %if.end180
  %115 = load i32, i32* %j, align 4, !dbg !3527
  %inc182 = add nsw i32 %115, 1, !dbg !3527
  store i32 %inc182, i32* %j, align 4, !dbg !3527
  br label %for.cond139, !dbg !3528, !llvm.loop !3529

for.end183:                                       ; preds = %for.cond139
  br label %for.inc184, !dbg !3531

for.inc184:                                       ; preds = %for.end183
  %116 = load i32, i32* %i, align 4, !dbg !3532
  %inc185 = add nsw i32 %116, 1, !dbg !3532
  store i32 %inc185, i32* %i, align 4, !dbg !3532
  br label %for.cond39, !dbg !3533, !llvm.loop !3534

for.end186:                                       ; preds = %for.cond39
  store i8 1, i8* %retval, align 1, !dbg !3536
  br label %return, !dbg !3536

return:                                           ; preds = %for.end186, %if.then109
  %117 = load i8, i8* %retval, align 1, !dbg !3537
  ret i8 %117, !dbg !3537
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @transpose_m3([3 x float]* %mat) #0 !dbg !3538 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %t = alloca float, align 4
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !3539, metadata !DIExpression()), !dbg !3540
  call void @llvm.dbg.declare(metadata float* %t, metadata !3541, metadata !DIExpression()), !dbg !3542
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3543
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !3543
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 1, !dbg !3543
  %1 = load float, float* %arrayidx1, align 4, !dbg !3543
  store float %1, float* %t, align 4, !dbg !3544
  %2 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3545
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, !dbg !3545
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !3545
  %3 = load float, float* %arrayidx3, align 4, !dbg !3545
  %4 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3546
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, !dbg !3546
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 1, !dbg !3546
  store float %3, float* %arrayidx5, align 4, !dbg !3547
  %5 = load float, float* %t, align 4, !dbg !3548
  %6 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3549
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 1, !dbg !3549
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 0, !dbg !3549
  store float %5, float* %arrayidx7, align 4, !dbg !3550
  %7 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3551
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, !dbg !3551
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 2, !dbg !3551
  %8 = load float, float* %arrayidx9, align 4, !dbg !3551
  store float %8, float* %t, align 4, !dbg !3552
  %9 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3553
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 2, !dbg !3553
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 0, !dbg !3553
  %10 = load float, float* %arrayidx11, align 4, !dbg !3553
  %11 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3554
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 0, !dbg !3554
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 2, !dbg !3554
  store float %10, float* %arrayidx13, align 4, !dbg !3555
  %12 = load float, float* %t, align 4, !dbg !3556
  %13 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3557
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 2, !dbg !3557
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx14, i64 0, i64 0, !dbg !3557
  store float %12, float* %arrayidx15, align 4, !dbg !3558
  %14 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3559
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 1, !dbg !3559
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 2, !dbg !3559
  %15 = load float, float* %arrayidx17, align 4, !dbg !3559
  store float %15, float* %t, align 4, !dbg !3560
  %16 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3561
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 2, !dbg !3561
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 1, !dbg !3561
  %17 = load float, float* %arrayidx19, align 4, !dbg !3561
  %18 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3562
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %18, i64 1, !dbg !3562
  %arrayidx21 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx20, i64 0, i64 2, !dbg !3562
  store float %17, float* %arrayidx21, align 4, !dbg !3563
  %19 = load float, float* %t, align 4, !dbg !3564
  %20 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3565
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %20, i64 2, !dbg !3565
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 1, !dbg !3565
  store float %19, float* %arrayidx23, align 4, !dbg !3566
  ret void, !dbg !3567
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @transpose_m4([4 x float]* %mat) #0 !dbg !3568 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %t = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !3569, metadata !DIExpression()), !dbg !3570
  call void @llvm.dbg.declare(metadata float* %t, metadata !3571, metadata !DIExpression()), !dbg !3572
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3573
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !3573
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 1, !dbg !3573
  %1 = load float, float* %arrayidx1, align 4, !dbg !3573
  store float %1, float* %t, align 4, !dbg !3574
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3575
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 1, !dbg !3575
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !3575
  %3 = load float, float* %arrayidx3, align 4, !dbg !3575
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3576
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !3576
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 1, !dbg !3576
  store float %3, float* %arrayidx5, align 4, !dbg !3577
  %5 = load float, float* %t, align 4, !dbg !3578
  %6 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3579
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 1, !dbg !3579
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 0, !dbg !3579
  store float %5, float* %arrayidx7, align 4, !dbg !3580
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3581
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, !dbg !3581
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 2, !dbg !3581
  %8 = load float, float* %arrayidx9, align 4, !dbg !3581
  store float %8, float* %t, align 4, !dbg !3582
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3583
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 2, !dbg !3583
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 0, !dbg !3583
  %10 = load float, float* %arrayidx11, align 4, !dbg !3583
  %11 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3584
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 0, !dbg !3584
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 2, !dbg !3584
  store float %10, float* %arrayidx13, align 4, !dbg !3585
  %12 = load float, float* %t, align 4, !dbg !3586
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3587
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !3587
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 0, !dbg !3587
  store float %12, float* %arrayidx15, align 4, !dbg !3588
  %14 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3589
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 0, !dbg !3589
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 3, !dbg !3589
  %15 = load float, float* %arrayidx17, align 4, !dbg !3589
  store float %15, float* %t, align 4, !dbg !3590
  %16 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3591
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 3, !dbg !3591
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !3591
  %17 = load float, float* %arrayidx19, align 4, !dbg !3591
  %18 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3592
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 0, !dbg !3592
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 3, !dbg !3592
  store float %17, float* %arrayidx21, align 4, !dbg !3593
  %19 = load float, float* %t, align 4, !dbg !3594
  %20 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3595
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 3, !dbg !3595
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 0, !dbg !3595
  store float %19, float* %arrayidx23, align 4, !dbg !3596
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3597
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 1, !dbg !3597
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 2, !dbg !3597
  %22 = load float, float* %arrayidx25, align 4, !dbg !3597
  store float %22, float* %t, align 4, !dbg !3598
  %23 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3599
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 2, !dbg !3599
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 1, !dbg !3599
  %24 = load float, float* %arrayidx27, align 4, !dbg !3599
  %25 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3600
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %25, i64 1, !dbg !3600
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 2, !dbg !3600
  store float %24, float* %arrayidx29, align 4, !dbg !3601
  %26 = load float, float* %t, align 4, !dbg !3602
  %27 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3603
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 2, !dbg !3603
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 1, !dbg !3603
  store float %26, float* %arrayidx31, align 4, !dbg !3604
  %28 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3605
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 1, !dbg !3605
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx32, i64 0, i64 3, !dbg !3605
  %29 = load float, float* %arrayidx33, align 4, !dbg !3605
  store float %29, float* %t, align 4, !dbg !3606
  %30 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3607
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 3, !dbg !3607
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx34, i64 0, i64 1, !dbg !3607
  %31 = load float, float* %arrayidx35, align 4, !dbg !3607
  %32 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3608
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %32, i64 1, !dbg !3608
  %arrayidx37 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx36, i64 0, i64 3, !dbg !3608
  store float %31, float* %arrayidx37, align 4, !dbg !3609
  %33 = load float, float* %t, align 4, !dbg !3610
  %34 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3611
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %34, i64 3, !dbg !3611
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 1, !dbg !3611
  store float %33, float* %arrayidx39, align 4, !dbg !3612
  %35 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3613
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %35, i64 2, !dbg !3613
  %arrayidx41 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx40, i64 0, i64 3, !dbg !3613
  %36 = load float, float* %arrayidx41, align 4, !dbg !3613
  store float %36, float* %t, align 4, !dbg !3614
  %37 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3615
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %37, i64 3, !dbg !3615
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 2, !dbg !3615
  %38 = load float, float* %arrayidx43, align 4, !dbg !3615
  %39 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3616
  %arrayidx44 = getelementptr inbounds [4 x float], [4 x float]* %39, i64 2, !dbg !3616
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 3, !dbg !3616
  store float %38, float* %arrayidx45, align 4, !dbg !3617
  %40 = load float, float* %t, align 4, !dbg !3618
  %41 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !3619
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %41, i64 3, !dbg !3619
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx46, i64 0, i64 2, !dbg !3619
  store float %40, float* %arrayidx47, align 4, !dbg !3620
  ret void, !dbg !3621
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @compare_m4m4([4 x float]* %mat1, [4 x float]* %mat2, float %limit) #0 !dbg !3622 {
entry:
  %retval = alloca i32, align 4
  %mat1.addr = alloca [4 x float]*, align 8
  %mat2.addr = alloca [4 x float]*, align 8
  %limit.addr = alloca float, align 4
  store [4 x float]* %mat1, [4 x float]** %mat1.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat1.addr, metadata !3625, metadata !DIExpression()), !dbg !3626
  store [4 x float]* %mat2, [4 x float]** %mat2.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat2.addr, metadata !3627, metadata !DIExpression()), !dbg !3628
  store float %limit, float* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata float* %limit.addr, metadata !3629, metadata !DIExpression()), !dbg !3630
  %0 = load [4 x float]*, [4 x float]** %mat1.addr, align 8, !dbg !3631
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !3631
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !3631
  %1 = load [4 x float]*, [4 x float]** %mat2.addr, align 8, !dbg !3633
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, !dbg !3633
  %arraydecay2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 0, !dbg !3633
  %2 = load float, float* %limit.addr, align 4, !dbg !3634
  %call = call zeroext i8 @compare_v4v4(float* %arraydecay, float* %arraydecay2, float %2), !dbg !3635
  %tobool = icmp ne i8 %call, 0, !dbg !3635
  br i1 %tobool, label %if.then, label %if.end26, !dbg !3636

if.then:                                          ; preds = %entry
  %3 = load [4 x float]*, [4 x float]** %mat1.addr, align 8, !dbg !3637
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 1, !dbg !3637
  %arraydecay4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !3637
  %4 = load [4 x float]*, [4 x float]** %mat2.addr, align 8, !dbg !3639
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 1, !dbg !3639
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !3639
  %5 = load float, float* %limit.addr, align 4, !dbg !3640
  %call7 = call zeroext i8 @compare_v4v4(float* %arraydecay4, float* %arraydecay6, float %5), !dbg !3641
  %tobool8 = icmp ne i8 %call7, 0, !dbg !3641
  br i1 %tobool8, label %if.then9, label %if.end25, !dbg !3642

if.then9:                                         ; preds = %if.then
  %6 = load [4 x float]*, [4 x float]** %mat1.addr, align 8, !dbg !3643
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 2, !dbg !3643
  %arraydecay11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 0, !dbg !3643
  %7 = load [4 x float]*, [4 x float]** %mat2.addr, align 8, !dbg !3645
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 2, !dbg !3645
  %arraydecay13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !3645
  %8 = load float, float* %limit.addr, align 4, !dbg !3646
  %call14 = call zeroext i8 @compare_v4v4(float* %arraydecay11, float* %arraydecay13, float %8), !dbg !3647
  %tobool15 = icmp ne i8 %call14, 0, !dbg !3647
  br i1 %tobool15, label %if.then16, label %if.end24, !dbg !3648

if.then16:                                        ; preds = %if.then9
  %9 = load [4 x float]*, [4 x float]** %mat1.addr, align 8, !dbg !3649
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 3, !dbg !3649
  %arraydecay18 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx17, i64 0, i64 0, !dbg !3649
  %10 = load [4 x float]*, [4 x float]** %mat2.addr, align 8, !dbg !3651
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 3, !dbg !3651
  %arraydecay20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx19, i64 0, i64 0, !dbg !3651
  %11 = load float, float* %limit.addr, align 4, !dbg !3652
  %call21 = call zeroext i8 @compare_v4v4(float* %arraydecay18, float* %arraydecay20, float %11), !dbg !3653
  %tobool22 = icmp ne i8 %call21, 0, !dbg !3653
  br i1 %tobool22, label %if.then23, label %if.end, !dbg !3654

if.then23:                                        ; preds = %if.then16
  store i32 1, i32* %retval, align 4, !dbg !3655
  br label %return, !dbg !3655

if.end:                                           ; preds = %if.then16
  br label %if.end24, !dbg !3656

if.end24:                                         ; preds = %if.end, %if.then9
  br label %if.end25, !dbg !3657

if.end25:                                         ; preds = %if.end24, %if.then
  br label %if.end26, !dbg !3658

if.end26:                                         ; preds = %if.end25, %entry
  store i32 0, i32* %retval, align 4, !dbg !3659
  br label %return, !dbg !3659

return:                                           ; preds = %if.end26, %if.then23
  %12 = load i32, i32* %retval, align 4, !dbg !3660
  ret i32 %12, !dbg !3660
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compare_v4v4(float* %v1, float* %v2, float %limit) #0 !dbg !3661 {
entry:
  %retval = alloca i8, align 1
  %v1.addr = alloca float*, align 8
  %v2.addr = alloca float*, align 8
  %limit.addr = alloca float, align 4
  store float* %v1, float** %v1.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v1.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  store float* %v2, float** %v2.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v2.addr, metadata !3666, metadata !DIExpression()), !dbg !3667
  store float %limit, float* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata float* %limit.addr, metadata !3668, metadata !DIExpression()), !dbg !3669
  %0 = load float*, float** %v1.addr, align 8, !dbg !3670
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !3670
  %1 = load float, float* %arrayidx, align 4, !dbg !3670
  %2 = load float*, float** %v2.addr, align 8, !dbg !3672
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !3672
  %3 = load float, float* %arrayidx1, align 4, !dbg !3672
  %sub = fsub float %1, %3, !dbg !3673
  %4 = call float @llvm.fabs.f32(float %sub), !dbg !3674
  %5 = load float, float* %limit.addr, align 4, !dbg !3675
  %cmp = fcmp ole float %4, %5, !dbg !3676
  br i1 %cmp, label %if.then, label %if.end19, !dbg !3677

if.then:                                          ; preds = %entry
  %6 = load float*, float** %v1.addr, align 8, !dbg !3678
  %arrayidx2 = getelementptr inbounds float, float* %6, i64 1, !dbg !3678
  %7 = load float, float* %arrayidx2, align 4, !dbg !3678
  %8 = load float*, float** %v2.addr, align 8, !dbg !3680
  %arrayidx3 = getelementptr inbounds float, float* %8, i64 1, !dbg !3680
  %9 = load float, float* %arrayidx3, align 4, !dbg !3680
  %sub4 = fsub float %7, %9, !dbg !3681
  %10 = call float @llvm.fabs.f32(float %sub4), !dbg !3682
  %11 = load float, float* %limit.addr, align 4, !dbg !3683
  %cmp5 = fcmp ole float %10, %11, !dbg !3684
  br i1 %cmp5, label %if.then6, label %if.end18, !dbg !3685

if.then6:                                         ; preds = %if.then
  %12 = load float*, float** %v1.addr, align 8, !dbg !3686
  %arrayidx7 = getelementptr inbounds float, float* %12, i64 2, !dbg !3686
  %13 = load float, float* %arrayidx7, align 4, !dbg !3686
  %14 = load float*, float** %v2.addr, align 8, !dbg !3688
  %arrayidx8 = getelementptr inbounds float, float* %14, i64 2, !dbg !3688
  %15 = load float, float* %arrayidx8, align 4, !dbg !3688
  %sub9 = fsub float %13, %15, !dbg !3689
  %16 = call float @llvm.fabs.f32(float %sub9), !dbg !3690
  %17 = load float, float* %limit.addr, align 4, !dbg !3691
  %cmp10 = fcmp ole float %16, %17, !dbg !3692
  br i1 %cmp10, label %if.then11, label %if.end17, !dbg !3693

if.then11:                                        ; preds = %if.then6
  %18 = load float*, float** %v1.addr, align 8, !dbg !3694
  %arrayidx12 = getelementptr inbounds float, float* %18, i64 3, !dbg !3694
  %19 = load float, float* %arrayidx12, align 4, !dbg !3694
  %20 = load float*, float** %v2.addr, align 8, !dbg !3696
  %arrayidx13 = getelementptr inbounds float, float* %20, i64 3, !dbg !3696
  %21 = load float, float* %arrayidx13, align 4, !dbg !3696
  %sub14 = fsub float %19, %21, !dbg !3697
  %22 = call float @llvm.fabs.f32(float %sub14), !dbg !3698
  %23 = load float, float* %limit.addr, align 4, !dbg !3699
  %cmp15 = fcmp ole float %22, %23, !dbg !3700
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !3701

if.then16:                                        ; preds = %if.then11
  store i8 1, i8* %retval, align 1, !dbg !3702
  br label %return, !dbg !3702

if.end:                                           ; preds = %if.then11
  br label %if.end17, !dbg !3699

if.end17:                                         ; preds = %if.end, %if.then6
  br label %if.end18, !dbg !3691

if.end18:                                         ; preds = %if.end17, %if.then
  br label %if.end19, !dbg !3683

if.end19:                                         ; preds = %if.end18, %entry
  store i8 0, i8* %retval, align 1, !dbg !3703
  br label %return, !dbg !3703

return:                                           ; preds = %if.end19, %if.then16
  %24 = load i8, i8* %retval, align 1, !dbg !3704
  ret i8 %24, !dbg !3704
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @orthogonalize_m3([3 x float]* %mat, i32 %axis) #0 !dbg !3705 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %axis.addr = alloca i32, align 4
  %size = alloca [3 x float], align 4
  %vec = alloca [3 x float], align 4
  %vec116 = alloca [3 x float], align 4
  %vec189 = alloca [3 x float], align 4
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  store i32 %axis, i32* %axis.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %axis.addr, metadata !3710, metadata !DIExpression()), !dbg !3711
  call void @llvm.dbg.declare(metadata [3 x float]* %size, metadata !3712, metadata !DIExpression()), !dbg !3713
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 0, !dbg !3714
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3715
  call void @mat3_to_size(float* %arraydecay, [3 x float]* %0), !dbg !3716
  %1 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3717
  %2 = load i32, i32* %axis.addr, align 4, !dbg !3718
  %idxprom = sext i32 %2 to i64, !dbg !3717
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %1, i64 %idxprom, !dbg !3717
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !3717
  %call = call float @normalize_v3(float* %arraydecay1), !dbg !3719
  %3 = load i32, i32* %axis.addr, align 4, !dbg !3720
  switch i32 %3, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb69
    i32 2, label %sw.bb142
  ], !dbg !3721

sw.bb:                                            ; preds = %entry
  %4 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3722
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, !dbg !3722
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !3722
  %5 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3725
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 1, !dbg !3725
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 0, !dbg !3725
  %call6 = call float @dot_v3v3(float* %arraydecay3, float* %arraydecay5), !dbg !3726
  %cmp = fcmp olt float %call6, 1.000000e+00, !dbg !3727
  br i1 %cmp, label %if.then, label %if.else, !dbg !3728

if.then:                                          ; preds = %sw.bb
  %6 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3729
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 2, !dbg !3729
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 0, !dbg !3729
  %7 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3731
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, !dbg !3731
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx9, i64 0, i64 0, !dbg !3731
  %8 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3732
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 1, !dbg !3732
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx11, i64 0, i64 0, !dbg !3732
  call void @cross_v3_v3v3(float* %arraydecay8, float* %arraydecay10, float* %arraydecay12), !dbg !3733
  %9 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3734
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 2, !dbg !3734
  %arraydecay14 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx13, i64 0, i64 0, !dbg !3734
  %call15 = call float @normalize_v3(float* %arraydecay14), !dbg !3735
  %10 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3736
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %10, i64 1, !dbg !3736
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 0, !dbg !3736
  %11 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3737
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 2, !dbg !3737
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx18, i64 0, i64 0, !dbg !3737
  %12 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3738
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %12, i64 0, !dbg !3738
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx20, i64 0, i64 0, !dbg !3738
  call void @cross_v3_v3v3(float* %arraydecay17, float* %arraydecay19, float* %arraydecay21), !dbg !3739
  br label %if.end68, !dbg !3740

if.else:                                          ; preds = %sw.bb
  %13 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3741
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, !dbg !3741
  %arraydecay23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 0, !dbg !3741
  %14 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3743
  %arrayidx24 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 2, !dbg !3743
  %arraydecay25 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx24, i64 0, i64 0, !dbg !3743
  %call26 = call float @dot_v3v3(float* %arraydecay23, float* %arraydecay25), !dbg !3744
  %cmp27 = fcmp olt float %call26, 1.000000e+00, !dbg !3745
  br i1 %cmp27, label %if.then28, label %if.else44, !dbg !3746

if.then28:                                        ; preds = %if.else
  %15 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3747
  %arrayidx29 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 1, !dbg !3747
  %arraydecay30 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx29, i64 0, i64 0, !dbg !3747
  %16 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3749
  %arrayidx31 = getelementptr inbounds [3 x float], [3 x float]* %16, i64 2, !dbg !3749
  %arraydecay32 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx31, i64 0, i64 0, !dbg !3749
  %17 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3750
  %arrayidx33 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 0, !dbg !3750
  %arraydecay34 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx33, i64 0, i64 0, !dbg !3750
  call void @cross_v3_v3v3(float* %arraydecay30, float* %arraydecay32, float* %arraydecay34), !dbg !3751
  %18 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3752
  %arrayidx35 = getelementptr inbounds [3 x float], [3 x float]* %18, i64 1, !dbg !3752
  %arraydecay36 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx35, i64 0, i64 0, !dbg !3752
  %call37 = call float @normalize_v3(float* %arraydecay36), !dbg !3753
  %19 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3754
  %arrayidx38 = getelementptr inbounds [3 x float], [3 x float]* %19, i64 2, !dbg !3754
  %arraydecay39 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx38, i64 0, i64 0, !dbg !3754
  %20 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3755
  %arrayidx40 = getelementptr inbounds [3 x float], [3 x float]* %20, i64 0, !dbg !3755
  %arraydecay41 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx40, i64 0, i64 0, !dbg !3755
  %21 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3756
  %arrayidx42 = getelementptr inbounds [3 x float], [3 x float]* %21, i64 1, !dbg !3756
  %arraydecay43 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx42, i64 0, i64 0, !dbg !3756
  call void @cross_v3_v3v3(float* %arraydecay39, float* %arraydecay41, float* %arraydecay43), !dbg !3757
  br label %if.end, !dbg !3758

if.else44:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata [3 x float]* %vec, metadata !3759, metadata !DIExpression()), !dbg !3761
  %22 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3762
  %arrayidx45 = getelementptr inbounds [3 x float], [3 x float]* %22, i64 0, !dbg !3762
  %arrayidx46 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx45, i64 0, i64 1, !dbg !3762
  %23 = load float, float* %arrayidx46, align 4, !dbg !3762
  %arrayidx47 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !3763
  store float %23, float* %arrayidx47, align 4, !dbg !3764
  %24 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3765
  %arrayidx48 = getelementptr inbounds [3 x float], [3 x float]* %24, i64 0, !dbg !3765
  %arrayidx49 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx48, i64 0, i64 2, !dbg !3765
  %25 = load float, float* %arrayidx49, align 4, !dbg !3765
  %arrayidx50 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 1, !dbg !3766
  store float %25, float* %arrayidx50, align 4, !dbg !3767
  %26 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3768
  %arrayidx51 = getelementptr inbounds [3 x float], [3 x float]* %26, i64 0, !dbg !3768
  %arrayidx52 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx51, i64 0, i64 0, !dbg !3768
  %27 = load float, float* %arrayidx52, align 4, !dbg !3768
  %arrayidx53 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 2, !dbg !3769
  store float %27, float* %arrayidx53, align 4, !dbg !3770
  %28 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3771
  %arrayidx54 = getelementptr inbounds [3 x float], [3 x float]* %28, i64 2, !dbg !3771
  %arraydecay55 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx54, i64 0, i64 0, !dbg !3771
  %29 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3772
  %arrayidx56 = getelementptr inbounds [3 x float], [3 x float]* %29, i64 0, !dbg !3772
  %arraydecay57 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx56, i64 0, i64 0, !dbg !3772
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !3773
  call void @cross_v3_v3v3(float* %arraydecay55, float* %arraydecay57, float* %arraydecay58), !dbg !3774
  %30 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3775
  %arrayidx59 = getelementptr inbounds [3 x float], [3 x float]* %30, i64 2, !dbg !3775
  %arraydecay60 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx59, i64 0, i64 0, !dbg !3775
  %call61 = call float @normalize_v3(float* %arraydecay60), !dbg !3776
  %31 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3777
  %arrayidx62 = getelementptr inbounds [3 x float], [3 x float]* %31, i64 1, !dbg !3777
  %arraydecay63 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx62, i64 0, i64 0, !dbg !3777
  %32 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3778
  %arrayidx64 = getelementptr inbounds [3 x float], [3 x float]* %32, i64 2, !dbg !3778
  %arraydecay65 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx64, i64 0, i64 0, !dbg !3778
  %33 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3779
  %arrayidx66 = getelementptr inbounds [3 x float], [3 x float]* %33, i64 0, !dbg !3779
  %arraydecay67 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx66, i64 0, i64 0, !dbg !3779
  call void @cross_v3_v3v3(float* %arraydecay63, float* %arraydecay65, float* %arraydecay67), !dbg !3780
  br label %if.end

if.end:                                           ; preds = %if.else44, %if.then28
  br label %if.end68

if.end68:                                         ; preds = %if.end, %if.then
  br label %sw.epilog, !dbg !3781

sw.bb69:                                          ; preds = %entry
  %34 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3782
  %arrayidx70 = getelementptr inbounds [3 x float], [3 x float]* %34, i64 1, !dbg !3782
  %arraydecay71 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx70, i64 0, i64 0, !dbg !3782
  %35 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3784
  %arrayidx72 = getelementptr inbounds [3 x float], [3 x float]* %35, i64 0, !dbg !3784
  %arraydecay73 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx72, i64 0, i64 0, !dbg !3784
  %call74 = call float @dot_v3v3(float* %arraydecay71, float* %arraydecay73), !dbg !3785
  %cmp75 = fcmp olt float %call74, 1.000000e+00, !dbg !3786
  br i1 %cmp75, label %if.then76, label %if.else92, !dbg !3787

if.then76:                                        ; preds = %sw.bb69
  %36 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3788
  %arrayidx77 = getelementptr inbounds [3 x float], [3 x float]* %36, i64 2, !dbg !3788
  %arraydecay78 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx77, i64 0, i64 0, !dbg !3788
  %37 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3790
  %arrayidx79 = getelementptr inbounds [3 x float], [3 x float]* %37, i64 0, !dbg !3790
  %arraydecay80 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx79, i64 0, i64 0, !dbg !3790
  %38 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3791
  %arrayidx81 = getelementptr inbounds [3 x float], [3 x float]* %38, i64 1, !dbg !3791
  %arraydecay82 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx81, i64 0, i64 0, !dbg !3791
  call void @cross_v3_v3v3(float* %arraydecay78, float* %arraydecay80, float* %arraydecay82), !dbg !3792
  %39 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3793
  %arrayidx83 = getelementptr inbounds [3 x float], [3 x float]* %39, i64 2, !dbg !3793
  %arraydecay84 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx83, i64 0, i64 0, !dbg !3793
  %call85 = call float @normalize_v3(float* %arraydecay84), !dbg !3794
  %40 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3795
  %arrayidx86 = getelementptr inbounds [3 x float], [3 x float]* %40, i64 0, !dbg !3795
  %arraydecay87 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx86, i64 0, i64 0, !dbg !3795
  %41 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3796
  %arrayidx88 = getelementptr inbounds [3 x float], [3 x float]* %41, i64 1, !dbg !3796
  %arraydecay89 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx88, i64 0, i64 0, !dbg !3796
  %42 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3797
  %arrayidx90 = getelementptr inbounds [3 x float], [3 x float]* %42, i64 2, !dbg !3797
  %arraydecay91 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx90, i64 0, i64 0, !dbg !3797
  call void @cross_v3_v3v3(float* %arraydecay87, float* %arraydecay89, float* %arraydecay91), !dbg !3798
  br label %if.end141, !dbg !3799

if.else92:                                        ; preds = %sw.bb69
  %43 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3800
  %arrayidx93 = getelementptr inbounds [3 x float], [3 x float]* %43, i64 0, !dbg !3800
  %arraydecay94 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx93, i64 0, i64 0, !dbg !3800
  %44 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3802
  %arrayidx95 = getelementptr inbounds [3 x float], [3 x float]* %44, i64 2, !dbg !3802
  %arraydecay96 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx95, i64 0, i64 0, !dbg !3802
  %call97 = call float @dot_v3v3(float* %arraydecay94, float* %arraydecay96), !dbg !3803
  %cmp98 = fcmp olt float %call97, 1.000000e+00, !dbg !3804
  br i1 %cmp98, label %if.then99, label %if.else115, !dbg !3805

if.then99:                                        ; preds = %if.else92
  %45 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3806
  %arrayidx100 = getelementptr inbounds [3 x float], [3 x float]* %45, i64 0, !dbg !3806
  %arraydecay101 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx100, i64 0, i64 0, !dbg !3806
  %46 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3808
  %arrayidx102 = getelementptr inbounds [3 x float], [3 x float]* %46, i64 1, !dbg !3808
  %arraydecay103 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx102, i64 0, i64 0, !dbg !3808
  %47 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3809
  %arrayidx104 = getelementptr inbounds [3 x float], [3 x float]* %47, i64 2, !dbg !3809
  %arraydecay105 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx104, i64 0, i64 0, !dbg !3809
  call void @cross_v3_v3v3(float* %arraydecay101, float* %arraydecay103, float* %arraydecay105), !dbg !3810
  %48 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3811
  %arrayidx106 = getelementptr inbounds [3 x float], [3 x float]* %48, i64 0, !dbg !3811
  %arraydecay107 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx106, i64 0, i64 0, !dbg !3811
  %call108 = call float @normalize_v3(float* %arraydecay107), !dbg !3812
  %49 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3813
  %arrayidx109 = getelementptr inbounds [3 x float], [3 x float]* %49, i64 2, !dbg !3813
  %arraydecay110 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx109, i64 0, i64 0, !dbg !3813
  %50 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3814
  %arrayidx111 = getelementptr inbounds [3 x float], [3 x float]* %50, i64 0, !dbg !3814
  %arraydecay112 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx111, i64 0, i64 0, !dbg !3814
  %51 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3815
  %arrayidx113 = getelementptr inbounds [3 x float], [3 x float]* %51, i64 1, !dbg !3815
  %arraydecay114 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx113, i64 0, i64 0, !dbg !3815
  call void @cross_v3_v3v3(float* %arraydecay110, float* %arraydecay112, float* %arraydecay114), !dbg !3816
  br label %if.end140, !dbg !3817

if.else115:                                       ; preds = %if.else92
  call void @llvm.dbg.declare(metadata [3 x float]* %vec116, metadata !3818, metadata !DIExpression()), !dbg !3820
  %52 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3821
  %arrayidx117 = getelementptr inbounds [3 x float], [3 x float]* %52, i64 1, !dbg !3821
  %arrayidx118 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx117, i64 0, i64 1, !dbg !3821
  %53 = load float, float* %arrayidx118, align 4, !dbg !3821
  %arrayidx119 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 0, !dbg !3822
  store float %53, float* %arrayidx119, align 4, !dbg !3823
  %54 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3824
  %arrayidx120 = getelementptr inbounds [3 x float], [3 x float]* %54, i64 1, !dbg !3824
  %arrayidx121 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx120, i64 0, i64 2, !dbg !3824
  %55 = load float, float* %arrayidx121, align 4, !dbg !3824
  %arrayidx122 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 1, !dbg !3825
  store float %55, float* %arrayidx122, align 4, !dbg !3826
  %56 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3827
  %arrayidx123 = getelementptr inbounds [3 x float], [3 x float]* %56, i64 1, !dbg !3827
  %arrayidx124 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx123, i64 0, i64 0, !dbg !3827
  %57 = load float, float* %arrayidx124, align 4, !dbg !3827
  %arrayidx125 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 2, !dbg !3828
  store float %57, float* %arrayidx125, align 4, !dbg !3829
  %58 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3830
  %arrayidx126 = getelementptr inbounds [3 x float], [3 x float]* %58, i64 0, !dbg !3830
  %arraydecay127 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx126, i64 0, i64 0, !dbg !3830
  %59 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3831
  %arrayidx128 = getelementptr inbounds [3 x float], [3 x float]* %59, i64 1, !dbg !3831
  %arraydecay129 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx128, i64 0, i64 0, !dbg !3831
  %arraydecay130 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 0, !dbg !3832
  call void @cross_v3_v3v3(float* %arraydecay127, float* %arraydecay129, float* %arraydecay130), !dbg !3833
  %60 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3834
  %arrayidx131 = getelementptr inbounds [3 x float], [3 x float]* %60, i64 0, !dbg !3834
  %arraydecay132 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx131, i64 0, i64 0, !dbg !3834
  %call133 = call float @normalize_v3(float* %arraydecay132), !dbg !3835
  %61 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3836
  %arrayidx134 = getelementptr inbounds [3 x float], [3 x float]* %61, i64 2, !dbg !3836
  %arraydecay135 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx134, i64 0, i64 0, !dbg !3836
  %62 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3837
  %arrayidx136 = getelementptr inbounds [3 x float], [3 x float]* %62, i64 0, !dbg !3837
  %arraydecay137 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx136, i64 0, i64 0, !dbg !3837
  %63 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3838
  %arrayidx138 = getelementptr inbounds [3 x float], [3 x float]* %63, i64 1, !dbg !3838
  %arraydecay139 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx138, i64 0, i64 0, !dbg !3838
  call void @cross_v3_v3v3(float* %arraydecay135, float* %arraydecay137, float* %arraydecay139), !dbg !3839
  br label %if.end140

if.end140:                                        ; preds = %if.else115, %if.then99
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.then76
  br label %sw.epilog, !dbg !3840

sw.bb142:                                         ; preds = %entry
  %64 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3841
  %arrayidx143 = getelementptr inbounds [3 x float], [3 x float]* %64, i64 2, !dbg !3841
  %arraydecay144 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx143, i64 0, i64 0, !dbg !3841
  %65 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3843
  %arrayidx145 = getelementptr inbounds [3 x float], [3 x float]* %65, i64 0, !dbg !3843
  %arraydecay146 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx145, i64 0, i64 0, !dbg !3843
  %call147 = call float @dot_v3v3(float* %arraydecay144, float* %arraydecay146), !dbg !3844
  %cmp148 = fcmp olt float %call147, 1.000000e+00, !dbg !3845
  br i1 %cmp148, label %if.then149, label %if.else165, !dbg !3846

if.then149:                                       ; preds = %sw.bb142
  %66 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3847
  %arrayidx150 = getelementptr inbounds [3 x float], [3 x float]* %66, i64 1, !dbg !3847
  %arraydecay151 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx150, i64 0, i64 0, !dbg !3847
  %67 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3849
  %arrayidx152 = getelementptr inbounds [3 x float], [3 x float]* %67, i64 2, !dbg !3849
  %arraydecay153 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx152, i64 0, i64 0, !dbg !3849
  %68 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3850
  %arrayidx154 = getelementptr inbounds [3 x float], [3 x float]* %68, i64 0, !dbg !3850
  %arraydecay155 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx154, i64 0, i64 0, !dbg !3850
  call void @cross_v3_v3v3(float* %arraydecay151, float* %arraydecay153, float* %arraydecay155), !dbg !3851
  %69 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3852
  %arrayidx156 = getelementptr inbounds [3 x float], [3 x float]* %69, i64 1, !dbg !3852
  %arraydecay157 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx156, i64 0, i64 0, !dbg !3852
  %call158 = call float @normalize_v3(float* %arraydecay157), !dbg !3853
  %70 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3854
  %arrayidx159 = getelementptr inbounds [3 x float], [3 x float]* %70, i64 0, !dbg !3854
  %arraydecay160 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx159, i64 0, i64 0, !dbg !3854
  %71 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3855
  %arrayidx161 = getelementptr inbounds [3 x float], [3 x float]* %71, i64 1, !dbg !3855
  %arraydecay162 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx161, i64 0, i64 0, !dbg !3855
  %72 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3856
  %arrayidx163 = getelementptr inbounds [3 x float], [3 x float]* %72, i64 2, !dbg !3856
  %arraydecay164 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx163, i64 0, i64 0, !dbg !3856
  call void @cross_v3_v3v3(float* %arraydecay160, float* %arraydecay162, float* %arraydecay164), !dbg !3857
  br label %if.end214, !dbg !3858

if.else165:                                       ; preds = %sw.bb142
  %73 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3859
  %arrayidx166 = getelementptr inbounds [3 x float], [3 x float]* %73, i64 2, !dbg !3859
  %arraydecay167 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx166, i64 0, i64 0, !dbg !3859
  %74 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3861
  %arrayidx168 = getelementptr inbounds [3 x float], [3 x float]* %74, i64 1, !dbg !3861
  %arraydecay169 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx168, i64 0, i64 0, !dbg !3861
  %call170 = call float @dot_v3v3(float* %arraydecay167, float* %arraydecay169), !dbg !3862
  %cmp171 = fcmp olt float %call170, 1.000000e+00, !dbg !3863
  br i1 %cmp171, label %if.then172, label %if.else188, !dbg !3864

if.then172:                                       ; preds = %if.else165
  %75 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3865
  %arrayidx173 = getelementptr inbounds [3 x float], [3 x float]* %75, i64 0, !dbg !3865
  %arraydecay174 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx173, i64 0, i64 0, !dbg !3865
  %76 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3867
  %arrayidx175 = getelementptr inbounds [3 x float], [3 x float]* %76, i64 1, !dbg !3867
  %arraydecay176 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx175, i64 0, i64 0, !dbg !3867
  %77 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3868
  %arrayidx177 = getelementptr inbounds [3 x float], [3 x float]* %77, i64 2, !dbg !3868
  %arraydecay178 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx177, i64 0, i64 0, !dbg !3868
  call void @cross_v3_v3v3(float* %arraydecay174, float* %arraydecay176, float* %arraydecay178), !dbg !3869
  %78 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3870
  %arrayidx179 = getelementptr inbounds [3 x float], [3 x float]* %78, i64 0, !dbg !3870
  %arraydecay180 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx179, i64 0, i64 0, !dbg !3870
  %call181 = call float @normalize_v3(float* %arraydecay180), !dbg !3871
  %79 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3872
  %arrayidx182 = getelementptr inbounds [3 x float], [3 x float]* %79, i64 1, !dbg !3872
  %arraydecay183 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx182, i64 0, i64 0, !dbg !3872
  %80 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3873
  %arrayidx184 = getelementptr inbounds [3 x float], [3 x float]* %80, i64 2, !dbg !3873
  %arraydecay185 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx184, i64 0, i64 0, !dbg !3873
  %81 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3874
  %arrayidx186 = getelementptr inbounds [3 x float], [3 x float]* %81, i64 0, !dbg !3874
  %arraydecay187 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx186, i64 0, i64 0, !dbg !3874
  call void @cross_v3_v3v3(float* %arraydecay183, float* %arraydecay185, float* %arraydecay187), !dbg !3875
  br label %if.end213, !dbg !3876

if.else188:                                       ; preds = %if.else165
  call void @llvm.dbg.declare(metadata [3 x float]* %vec189, metadata !3877, metadata !DIExpression()), !dbg !3879
  %82 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3880
  %arrayidx190 = getelementptr inbounds [3 x float], [3 x float]* %82, i64 2, !dbg !3880
  %arrayidx191 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx190, i64 0, i64 1, !dbg !3880
  %83 = load float, float* %arrayidx191, align 4, !dbg !3880
  %arrayidx192 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 0, !dbg !3881
  store float %83, float* %arrayidx192, align 4, !dbg !3882
  %84 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3883
  %arrayidx193 = getelementptr inbounds [3 x float], [3 x float]* %84, i64 2, !dbg !3883
  %arrayidx194 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx193, i64 0, i64 2, !dbg !3883
  %85 = load float, float* %arrayidx194, align 4, !dbg !3883
  %arrayidx195 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 1, !dbg !3884
  store float %85, float* %arrayidx195, align 4, !dbg !3885
  %86 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3886
  %arrayidx196 = getelementptr inbounds [3 x float], [3 x float]* %86, i64 2, !dbg !3886
  %arrayidx197 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx196, i64 0, i64 0, !dbg !3886
  %87 = load float, float* %arrayidx197, align 4, !dbg !3886
  %arrayidx198 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 2, !dbg !3887
  store float %87, float* %arrayidx198, align 4, !dbg !3888
  %88 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3889
  %arrayidx199 = getelementptr inbounds [3 x float], [3 x float]* %88, i64 0, !dbg !3889
  %arraydecay200 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx199, i64 0, i64 0, !dbg !3889
  %arraydecay201 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 0, !dbg !3890
  %89 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3891
  %arrayidx202 = getelementptr inbounds [3 x float], [3 x float]* %89, i64 2, !dbg !3891
  %arraydecay203 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx202, i64 0, i64 0, !dbg !3891
  call void @cross_v3_v3v3(float* %arraydecay200, float* %arraydecay201, float* %arraydecay203), !dbg !3892
  %90 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3893
  %arrayidx204 = getelementptr inbounds [3 x float], [3 x float]* %90, i64 0, !dbg !3893
  %arraydecay205 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx204, i64 0, i64 0, !dbg !3893
  %call206 = call float @normalize_v3(float* %arraydecay205), !dbg !3894
  %91 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3895
  %arrayidx207 = getelementptr inbounds [3 x float], [3 x float]* %91, i64 1, !dbg !3895
  %arraydecay208 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx207, i64 0, i64 0, !dbg !3895
  %92 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3896
  %arrayidx209 = getelementptr inbounds [3 x float], [3 x float]* %92, i64 2, !dbg !3896
  %arraydecay210 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx209, i64 0, i64 0, !dbg !3896
  %93 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3897
  %arrayidx211 = getelementptr inbounds [3 x float], [3 x float]* %93, i64 0, !dbg !3897
  %arraydecay212 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx211, i64 0, i64 0, !dbg !3897
  call void @cross_v3_v3v3(float* %arraydecay208, float* %arraydecay210, float* %arraydecay212), !dbg !3898
  br label %if.end213

if.end213:                                        ; preds = %if.else188, %if.then172
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %if.then149
  br label %sw.epilog, !dbg !3899

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !3900

sw.epilog:                                        ; preds = %sw.default, %if.end214, %if.end141, %if.end68
  %94 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3901
  %arrayidx215 = getelementptr inbounds [3 x float], [3 x float]* %94, i64 0, !dbg !3901
  %arraydecay216 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx215, i64 0, i64 0, !dbg !3901
  %arrayidx217 = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 0, !dbg !3902
  %95 = load float, float* %arrayidx217, align 4, !dbg !3902
  call void @mul_v3_fl(float* %arraydecay216, float %95), !dbg !3903
  %96 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3904
  %arrayidx218 = getelementptr inbounds [3 x float], [3 x float]* %96, i64 1, !dbg !3904
  %arraydecay219 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx218, i64 0, i64 0, !dbg !3904
  %arrayidx220 = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 1, !dbg !3905
  %97 = load float, float* %arrayidx220, align 4, !dbg !3905
  call void @mul_v3_fl(float* %arraydecay219, float %97), !dbg !3906
  %98 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3907
  %arrayidx221 = getelementptr inbounds [3 x float], [3 x float]* %98, i64 2, !dbg !3907
  %arraydecay222 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx221, i64 0, i64 0, !dbg !3907
  %arrayidx223 = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 2, !dbg !3908
  %99 = load float, float* %arrayidx223, align 4, !dbg !3908
  call void @mul_v3_fl(float* %arraydecay222, float %99), !dbg !3909
  ret void, !dbg !3910
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mat3_to_size(float* %size, [3 x float]* %mat) #0 !dbg !3911 {
entry:
  %size.addr = alloca float*, align 8
  %mat.addr = alloca [3 x float]*, align 8
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !3914, metadata !DIExpression()), !dbg !3915
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !3916, metadata !DIExpression()), !dbg !3917
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3918
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !3918
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !3918
  %call = call float @len_v3(float* %arraydecay), !dbg !3919
  %1 = load float*, float** %size.addr, align 8, !dbg !3920
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 0, !dbg !3920
  store float %call, float* %arrayidx1, align 4, !dbg !3921
  %2 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3922
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, !dbg !3922
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !3922
  %call4 = call float @len_v3(float* %arraydecay3), !dbg !3923
  %3 = load float*, float** %size.addr, align 8, !dbg !3924
  %arrayidx5 = getelementptr inbounds float, float* %3, i64 1, !dbg !3924
  store float %call4, float* %arrayidx5, align 4, !dbg !3925
  %4 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !3926
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 2, !dbg !3926
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 0, !dbg !3926
  %call8 = call float @len_v3(float* %arraydecay7), !dbg !3927
  %5 = load float*, float** %size.addr, align 8, !dbg !3928
  %arrayidx9 = getelementptr inbounds float, float* %5, i64 2, !dbg !3928
  store float %call8, float* %arrayidx9, align 4, !dbg !3929
  ret void, !dbg !3930
}

; Function Attrs: noinline nounwind uwtable
define internal float @normalize_v3(float* %n) #0 !dbg !3931 {
entry:
  %n.addr = alloca float*, align 8
  store float* %n, float** %n.addr, align 8
  call void @llvm.dbg.declare(metadata float** %n.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  %0 = load float*, float** %n.addr, align 8, !dbg !3936
  %1 = load float*, float** %n.addr, align 8, !dbg !3937
  %call = call float @normalize_v3_v3(float* %0, float* %1), !dbg !3938
  ret float %call, !dbg !3939
}

; Function Attrs: noinline nounwind uwtable
define internal float @dot_v3v3(float* %a, float* %b) #0 !dbg !3940 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !3943, metadata !DIExpression()), !dbg !3944
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !3945, metadata !DIExpression()), !dbg !3946
  %0 = load float*, float** %a.addr, align 8, !dbg !3947
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !3947
  %1 = load float, float* %arrayidx, align 4, !dbg !3947
  %2 = load float*, float** %b.addr, align 8, !dbg !3948
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !3948
  %3 = load float, float* %arrayidx1, align 4, !dbg !3948
  %mul = fmul float %1, %3, !dbg !3949
  %4 = load float*, float** %a.addr, align 8, !dbg !3950
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !3950
  %5 = load float, float* %arrayidx2, align 4, !dbg !3950
  %6 = load float*, float** %b.addr, align 8, !dbg !3951
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !3951
  %7 = load float, float* %arrayidx3, align 4, !dbg !3951
  %mul4 = fmul float %5, %7, !dbg !3952
  %add = fadd float %mul, %mul4, !dbg !3953
  %8 = load float*, float** %a.addr, align 8, !dbg !3954
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !3954
  %9 = load float, float* %arrayidx5, align 4, !dbg !3954
  %10 = load float*, float** %b.addr, align 8, !dbg !3955
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !3955
  %11 = load float, float* %arrayidx6, align 4, !dbg !3955
  %mul7 = fmul float %9, %11, !dbg !3956
  %add8 = fadd float %add, %mul7, !dbg !3957
  ret float %add8, !dbg !3958
}

; Function Attrs: noinline nounwind uwtable
define internal void @cross_v3_v3v3(float* %r, float* %a, float* %b) #0 !dbg !3959 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !3962, metadata !DIExpression()), !dbg !3963
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !3964, metadata !DIExpression()), !dbg !3965
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !3966, metadata !DIExpression()), !dbg !3967
  %0 = load float*, float** %a.addr, align 8, !dbg !3968
  %arrayidx = getelementptr inbounds float, float* %0, i64 1, !dbg !3968
  %1 = load float, float* %arrayidx, align 4, !dbg !3968
  %2 = load float*, float** %b.addr, align 8, !dbg !3969
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 2, !dbg !3969
  %3 = load float, float* %arrayidx1, align 4, !dbg !3969
  %mul = fmul float %1, %3, !dbg !3970
  %4 = load float*, float** %a.addr, align 8, !dbg !3971
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 2, !dbg !3971
  %5 = load float, float* %arrayidx2, align 4, !dbg !3971
  %6 = load float*, float** %b.addr, align 8, !dbg !3972
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !3972
  %7 = load float, float* %arrayidx3, align 4, !dbg !3972
  %mul4 = fmul float %5, %7, !dbg !3973
  %sub = fsub float %mul, %mul4, !dbg !3974
  %8 = load float*, float** %r.addr, align 8, !dbg !3975
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 0, !dbg !3975
  store float %sub, float* %arrayidx5, align 4, !dbg !3976
  %9 = load float*, float** %a.addr, align 8, !dbg !3977
  %arrayidx6 = getelementptr inbounds float, float* %9, i64 2, !dbg !3977
  %10 = load float, float* %arrayidx6, align 4, !dbg !3977
  %11 = load float*, float** %b.addr, align 8, !dbg !3978
  %arrayidx7 = getelementptr inbounds float, float* %11, i64 0, !dbg !3978
  %12 = load float, float* %arrayidx7, align 4, !dbg !3978
  %mul8 = fmul float %10, %12, !dbg !3979
  %13 = load float*, float** %a.addr, align 8, !dbg !3980
  %arrayidx9 = getelementptr inbounds float, float* %13, i64 0, !dbg !3980
  %14 = load float, float* %arrayidx9, align 4, !dbg !3980
  %15 = load float*, float** %b.addr, align 8, !dbg !3981
  %arrayidx10 = getelementptr inbounds float, float* %15, i64 2, !dbg !3981
  %16 = load float, float* %arrayidx10, align 4, !dbg !3981
  %mul11 = fmul float %14, %16, !dbg !3982
  %sub12 = fsub float %mul8, %mul11, !dbg !3983
  %17 = load float*, float** %r.addr, align 8, !dbg !3984
  %arrayidx13 = getelementptr inbounds float, float* %17, i64 1, !dbg !3984
  store float %sub12, float* %arrayidx13, align 4, !dbg !3985
  %18 = load float*, float** %a.addr, align 8, !dbg !3986
  %arrayidx14 = getelementptr inbounds float, float* %18, i64 0, !dbg !3986
  %19 = load float, float* %arrayidx14, align 4, !dbg !3986
  %20 = load float*, float** %b.addr, align 8, !dbg !3987
  %arrayidx15 = getelementptr inbounds float, float* %20, i64 1, !dbg !3987
  %21 = load float, float* %arrayidx15, align 4, !dbg !3987
  %mul16 = fmul float %19, %21, !dbg !3988
  %22 = load float*, float** %a.addr, align 8, !dbg !3989
  %arrayidx17 = getelementptr inbounds float, float* %22, i64 1, !dbg !3989
  %23 = load float, float* %arrayidx17, align 4, !dbg !3989
  %24 = load float*, float** %b.addr, align 8, !dbg !3990
  %arrayidx18 = getelementptr inbounds float, float* %24, i64 0, !dbg !3990
  %25 = load float, float* %arrayidx18, align 4, !dbg !3990
  %mul19 = fmul float %23, %25, !dbg !3991
  %sub20 = fsub float %mul16, %mul19, !dbg !3992
  %26 = load float*, float** %r.addr, align 8, !dbg !3993
  %arrayidx21 = getelementptr inbounds float, float* %26, i64 2, !dbg !3993
  store float %sub20, float* %arrayidx21, align 4, !dbg !3994
  ret void, !dbg !3995
}

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v3_fl(float* %r, float %f) #0 !dbg !3996 {
entry:
  %r.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !3999, metadata !DIExpression()), !dbg !4000
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !4001, metadata !DIExpression()), !dbg !4002
  %0 = load float, float* %f.addr, align 4, !dbg !4003
  %1 = load float*, float** %r.addr, align 8, !dbg !4004
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !4004
  %2 = load float, float* %arrayidx, align 4, !dbg !4005
  %mul = fmul float %2, %0, !dbg !4005
  store float %mul, float* %arrayidx, align 4, !dbg !4005
  %3 = load float, float* %f.addr, align 4, !dbg !4006
  %4 = load float*, float** %r.addr, align 8, !dbg !4007
  %arrayidx1 = getelementptr inbounds float, float* %4, i64 1, !dbg !4007
  %5 = load float, float* %arrayidx1, align 4, !dbg !4008
  %mul2 = fmul float %5, %3, !dbg !4008
  store float %mul2, float* %arrayidx1, align 4, !dbg !4008
  %6 = load float, float* %f.addr, align 4, !dbg !4009
  %7 = load float*, float** %r.addr, align 8, !dbg !4010
  %arrayidx3 = getelementptr inbounds float, float* %7, i64 2, !dbg !4010
  %8 = load float, float* %arrayidx3, align 4, !dbg !4011
  %mul4 = fmul float %8, %6, !dbg !4011
  store float %mul4, float* %arrayidx3, align 4, !dbg !4011
  ret void, !dbg !4012
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @orthogonalize_m4([4 x float]* %mat, i32 %axis) #0 !dbg !4013 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %axis.addr = alloca i32, align 4
  %size = alloca [3 x float], align 4
  %vec = alloca [3 x float], align 4
  %vec116 = alloca [3 x float], align 4
  %vec189 = alloca [3 x float], align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !4016, metadata !DIExpression()), !dbg !4017
  store i32 %axis, i32* %axis.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %axis.addr, metadata !4018, metadata !DIExpression()), !dbg !4019
  call void @llvm.dbg.declare(metadata [3 x float]* %size, metadata !4020, metadata !DIExpression()), !dbg !4021
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 0, !dbg !4022
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4023
  call void @mat4_to_size(float* %arraydecay, [4 x float]* %0), !dbg !4024
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4025
  %2 = load i32, i32* %axis.addr, align 4, !dbg !4026
  %idxprom = sext i32 %2 to i64, !dbg !4025
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %1, i64 %idxprom, !dbg !4025
  %arraydecay1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !4025
  %call = call float @normalize_v3(float* %arraydecay1), !dbg !4027
  %3 = load i32, i32* %axis.addr, align 4, !dbg !4028
  switch i32 %3, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb69
    i32 2, label %sw.bb142
  ], !dbg !4029

sw.bb:                                            ; preds = %entry
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4030
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !4030
  %arraydecay3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !4030
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4033
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 1, !dbg !4033
  %arraydecay5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 0, !dbg !4033
  %call6 = call float @dot_v3v3(float* %arraydecay3, float* %arraydecay5), !dbg !4034
  %cmp = fcmp olt float %call6, 1.000000e+00, !dbg !4035
  br i1 %cmp, label %if.then, label %if.else, !dbg !4036

if.then:                                          ; preds = %sw.bb
  %6 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4037
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 2, !dbg !4037
  %arraydecay8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !4037
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4039
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, !dbg !4039
  %arraydecay10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 0, !dbg !4039
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4040
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !4040
  %arraydecay12 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx11, i64 0, i64 0, !dbg !4040
  call void @cross_v3_v3v3(float* %arraydecay8, float* %arraydecay10, float* %arraydecay12), !dbg !4041
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4042
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 2, !dbg !4042
  %arraydecay14 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx13, i64 0, i64 0, !dbg !4042
  %call15 = call float @normalize_v3(float* %arraydecay14), !dbg !4043
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4044
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !4044
  %arraydecay17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 0, !dbg !4044
  %11 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4045
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 2, !dbg !4045
  %arraydecay19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !4045
  %12 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4046
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 0, !dbg !4046
  %arraydecay21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 0, !dbg !4046
  call void @cross_v3_v3v3(float* %arraydecay17, float* %arraydecay19, float* %arraydecay21), !dbg !4047
  br label %if.end68, !dbg !4048

if.else:                                          ; preds = %sw.bb
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4049
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 0, !dbg !4049
  %arraydecay23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 0, !dbg !4049
  %14 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4051
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 2, !dbg !4051
  %arraydecay25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !4051
  %call26 = call float @dot_v3v3(float* %arraydecay23, float* %arraydecay25), !dbg !4052
  %cmp27 = fcmp olt float %call26, 1.000000e+00, !dbg !4053
  br i1 %cmp27, label %if.then28, label %if.else44, !dbg !4054

if.then28:                                        ; preds = %if.else
  %15 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4055
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 1, !dbg !4055
  %arraydecay30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 0, !dbg !4055
  %16 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4057
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 2, !dbg !4057
  %arraydecay32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 0, !dbg !4057
  %17 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4058
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 0, !dbg !4058
  %arraydecay34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 0, !dbg !4058
  call void @cross_v3_v3v3(float* %arraydecay30, float* %arraydecay32, float* %arraydecay34), !dbg !4059
  %18 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4060
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 1, !dbg !4060
  %arraydecay36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 0, !dbg !4060
  %call37 = call float @normalize_v3(float* %arraydecay36), !dbg !4061
  %19 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4062
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 2, !dbg !4062
  %arraydecay39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 0, !dbg !4062
  %20 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4063
  %arrayidx40 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 0, !dbg !4063
  %arraydecay41 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx40, i64 0, i64 0, !dbg !4063
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4064
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 1, !dbg !4064
  %arraydecay43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 0, !dbg !4064
  call void @cross_v3_v3v3(float* %arraydecay39, float* %arraydecay41, float* %arraydecay43), !dbg !4065
  br label %if.end, !dbg !4066

if.else44:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata [3 x float]* %vec, metadata !4067, metadata !DIExpression()), !dbg !4069
  %22 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4070
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %22, i64 0, !dbg !4070
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx45, i64 0, i64 1, !dbg !4070
  %23 = load float, float* %arrayidx46, align 4, !dbg !4070
  %arrayidx47 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !4071
  store float %23, float* %arrayidx47, align 4, !dbg !4072
  %24 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4073
  %arrayidx48 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 0, !dbg !4073
  %arrayidx49 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx48, i64 0, i64 2, !dbg !4073
  %25 = load float, float* %arrayidx49, align 4, !dbg !4073
  %arrayidx50 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 1, !dbg !4074
  store float %25, float* %arrayidx50, align 4, !dbg !4075
  %26 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4076
  %arrayidx51 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 0, !dbg !4076
  %arrayidx52 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx51, i64 0, i64 0, !dbg !4076
  %27 = load float, float* %arrayidx52, align 4, !dbg !4076
  %arrayidx53 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 2, !dbg !4077
  store float %27, float* %arrayidx53, align 4, !dbg !4078
  %28 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4079
  %arrayidx54 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 2, !dbg !4079
  %arraydecay55 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx54, i64 0, i64 0, !dbg !4079
  %29 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4080
  %arrayidx56 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 0, !dbg !4080
  %arraydecay57 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx56, i64 0, i64 0, !dbg !4080
  %arraydecay58 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !4081
  call void @cross_v3_v3v3(float* %arraydecay55, float* %arraydecay57, float* %arraydecay58), !dbg !4082
  %30 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4083
  %arrayidx59 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 2, !dbg !4083
  %arraydecay60 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx59, i64 0, i64 0, !dbg !4083
  %call61 = call float @normalize_v3(float* %arraydecay60), !dbg !4084
  %31 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4085
  %arrayidx62 = getelementptr inbounds [4 x float], [4 x float]* %31, i64 1, !dbg !4085
  %arraydecay63 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx62, i64 0, i64 0, !dbg !4085
  %32 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4086
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %32, i64 2, !dbg !4086
  %arraydecay65 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx64, i64 0, i64 0, !dbg !4086
  %33 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4087
  %arrayidx66 = getelementptr inbounds [4 x float], [4 x float]* %33, i64 0, !dbg !4087
  %arraydecay67 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx66, i64 0, i64 0, !dbg !4087
  call void @cross_v3_v3v3(float* %arraydecay63, float* %arraydecay65, float* %arraydecay67), !dbg !4088
  br label %if.end

if.end:                                           ; preds = %if.else44, %if.then28
  br label %if.end68

if.end68:                                         ; preds = %if.end, %if.then
  br label %sw.epilog, !dbg !4089

sw.bb69:                                          ; preds = %entry
  %34 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4090
  %arrayidx70 = getelementptr inbounds [4 x float], [4 x float]* %34, i64 1, !dbg !4090
  %arraydecay71 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx70, i64 0, i64 0, !dbg !4090
  %35 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4092
  %arrayidx72 = getelementptr inbounds [4 x float], [4 x float]* %35, i64 0, !dbg !4092
  %arraydecay73 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx72, i64 0, i64 0, !dbg !4092
  %call74 = call float @dot_v3v3(float* %arraydecay71, float* %arraydecay73), !dbg !4093
  %cmp75 = fcmp olt float %call74, 1.000000e+00, !dbg !4094
  br i1 %cmp75, label %if.then76, label %if.else92, !dbg !4095

if.then76:                                        ; preds = %sw.bb69
  %36 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4096
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %36, i64 2, !dbg !4096
  %arraydecay78 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx77, i64 0, i64 0, !dbg !4096
  %37 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4098
  %arrayidx79 = getelementptr inbounds [4 x float], [4 x float]* %37, i64 0, !dbg !4098
  %arraydecay80 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx79, i64 0, i64 0, !dbg !4098
  %38 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4099
  %arrayidx81 = getelementptr inbounds [4 x float], [4 x float]* %38, i64 1, !dbg !4099
  %arraydecay82 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx81, i64 0, i64 0, !dbg !4099
  call void @cross_v3_v3v3(float* %arraydecay78, float* %arraydecay80, float* %arraydecay82), !dbg !4100
  %39 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4101
  %arrayidx83 = getelementptr inbounds [4 x float], [4 x float]* %39, i64 2, !dbg !4101
  %arraydecay84 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx83, i64 0, i64 0, !dbg !4101
  %call85 = call float @normalize_v3(float* %arraydecay84), !dbg !4102
  %40 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4103
  %arrayidx86 = getelementptr inbounds [4 x float], [4 x float]* %40, i64 0, !dbg !4103
  %arraydecay87 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx86, i64 0, i64 0, !dbg !4103
  %41 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4104
  %arrayidx88 = getelementptr inbounds [4 x float], [4 x float]* %41, i64 1, !dbg !4104
  %arraydecay89 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx88, i64 0, i64 0, !dbg !4104
  %42 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4105
  %arrayidx90 = getelementptr inbounds [4 x float], [4 x float]* %42, i64 2, !dbg !4105
  %arraydecay91 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx90, i64 0, i64 0, !dbg !4105
  call void @cross_v3_v3v3(float* %arraydecay87, float* %arraydecay89, float* %arraydecay91), !dbg !4106
  br label %if.end141, !dbg !4107

if.else92:                                        ; preds = %sw.bb69
  %43 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4108
  %arrayidx93 = getelementptr inbounds [4 x float], [4 x float]* %43, i64 0, !dbg !4108
  %arraydecay94 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx93, i64 0, i64 0, !dbg !4108
  %44 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4110
  %arrayidx95 = getelementptr inbounds [4 x float], [4 x float]* %44, i64 2, !dbg !4110
  %arraydecay96 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx95, i64 0, i64 0, !dbg !4110
  %call97 = call float @dot_v3v3(float* %arraydecay94, float* %arraydecay96), !dbg !4111
  %cmp98 = fcmp olt float %call97, 1.000000e+00, !dbg !4112
  br i1 %cmp98, label %if.then99, label %if.else115, !dbg !4113

if.then99:                                        ; preds = %if.else92
  %45 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4114
  %arrayidx100 = getelementptr inbounds [4 x float], [4 x float]* %45, i64 0, !dbg !4114
  %arraydecay101 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx100, i64 0, i64 0, !dbg !4114
  %46 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4116
  %arrayidx102 = getelementptr inbounds [4 x float], [4 x float]* %46, i64 1, !dbg !4116
  %arraydecay103 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx102, i64 0, i64 0, !dbg !4116
  %47 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4117
  %arrayidx104 = getelementptr inbounds [4 x float], [4 x float]* %47, i64 2, !dbg !4117
  %arraydecay105 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx104, i64 0, i64 0, !dbg !4117
  call void @cross_v3_v3v3(float* %arraydecay101, float* %arraydecay103, float* %arraydecay105), !dbg !4118
  %48 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4119
  %arrayidx106 = getelementptr inbounds [4 x float], [4 x float]* %48, i64 0, !dbg !4119
  %arraydecay107 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx106, i64 0, i64 0, !dbg !4119
  %call108 = call float @normalize_v3(float* %arraydecay107), !dbg !4120
  %49 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4121
  %arrayidx109 = getelementptr inbounds [4 x float], [4 x float]* %49, i64 2, !dbg !4121
  %arraydecay110 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx109, i64 0, i64 0, !dbg !4121
  %50 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4122
  %arrayidx111 = getelementptr inbounds [4 x float], [4 x float]* %50, i64 0, !dbg !4122
  %arraydecay112 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx111, i64 0, i64 0, !dbg !4122
  %51 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4123
  %arrayidx113 = getelementptr inbounds [4 x float], [4 x float]* %51, i64 1, !dbg !4123
  %arraydecay114 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx113, i64 0, i64 0, !dbg !4123
  call void @cross_v3_v3v3(float* %arraydecay110, float* %arraydecay112, float* %arraydecay114), !dbg !4124
  br label %if.end140, !dbg !4125

if.else115:                                       ; preds = %if.else92
  call void @llvm.dbg.declare(metadata [3 x float]* %vec116, metadata !4126, metadata !DIExpression()), !dbg !4128
  %52 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4129
  %arrayidx117 = getelementptr inbounds [4 x float], [4 x float]* %52, i64 1, !dbg !4129
  %arrayidx118 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx117, i64 0, i64 1, !dbg !4129
  %53 = load float, float* %arrayidx118, align 4, !dbg !4129
  %arrayidx119 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 0, !dbg !4130
  store float %53, float* %arrayidx119, align 4, !dbg !4131
  %54 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4132
  %arrayidx120 = getelementptr inbounds [4 x float], [4 x float]* %54, i64 1, !dbg !4132
  %arrayidx121 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx120, i64 0, i64 2, !dbg !4132
  %55 = load float, float* %arrayidx121, align 4, !dbg !4132
  %arrayidx122 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 1, !dbg !4133
  store float %55, float* %arrayidx122, align 4, !dbg !4134
  %56 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4135
  %arrayidx123 = getelementptr inbounds [4 x float], [4 x float]* %56, i64 1, !dbg !4135
  %arrayidx124 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx123, i64 0, i64 0, !dbg !4135
  %57 = load float, float* %arrayidx124, align 4, !dbg !4135
  %arrayidx125 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 2, !dbg !4136
  store float %57, float* %arrayidx125, align 4, !dbg !4137
  %58 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4138
  %arrayidx126 = getelementptr inbounds [4 x float], [4 x float]* %58, i64 0, !dbg !4138
  %arraydecay127 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx126, i64 0, i64 0, !dbg !4138
  %59 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4139
  %arrayidx128 = getelementptr inbounds [4 x float], [4 x float]* %59, i64 1, !dbg !4139
  %arraydecay129 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx128, i64 0, i64 0, !dbg !4139
  %arraydecay130 = getelementptr inbounds [3 x float], [3 x float]* %vec116, i64 0, i64 0, !dbg !4140
  call void @cross_v3_v3v3(float* %arraydecay127, float* %arraydecay129, float* %arraydecay130), !dbg !4141
  %60 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4142
  %arrayidx131 = getelementptr inbounds [4 x float], [4 x float]* %60, i64 0, !dbg !4142
  %arraydecay132 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx131, i64 0, i64 0, !dbg !4142
  %call133 = call float @normalize_v3(float* %arraydecay132), !dbg !4143
  %61 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4144
  %arrayidx134 = getelementptr inbounds [4 x float], [4 x float]* %61, i64 2, !dbg !4144
  %arraydecay135 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx134, i64 0, i64 0, !dbg !4144
  %62 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4145
  %arrayidx136 = getelementptr inbounds [4 x float], [4 x float]* %62, i64 0, !dbg !4145
  %arraydecay137 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx136, i64 0, i64 0, !dbg !4145
  %63 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4146
  %arrayidx138 = getelementptr inbounds [4 x float], [4 x float]* %63, i64 1, !dbg !4146
  %arraydecay139 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx138, i64 0, i64 0, !dbg !4146
  call void @cross_v3_v3v3(float* %arraydecay135, float* %arraydecay137, float* %arraydecay139), !dbg !4147
  br label %if.end140

if.end140:                                        ; preds = %if.else115, %if.then99
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.then76
  br label %sw.epilog, !dbg !4148

sw.bb142:                                         ; preds = %entry
  %64 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4149
  %arrayidx143 = getelementptr inbounds [4 x float], [4 x float]* %64, i64 2, !dbg !4149
  %arraydecay144 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx143, i64 0, i64 0, !dbg !4149
  %65 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4151
  %arrayidx145 = getelementptr inbounds [4 x float], [4 x float]* %65, i64 0, !dbg !4151
  %arraydecay146 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx145, i64 0, i64 0, !dbg !4151
  %call147 = call float @dot_v3v3(float* %arraydecay144, float* %arraydecay146), !dbg !4152
  %cmp148 = fcmp olt float %call147, 1.000000e+00, !dbg !4153
  br i1 %cmp148, label %if.then149, label %if.else165, !dbg !4154

if.then149:                                       ; preds = %sw.bb142
  %66 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4155
  %arrayidx150 = getelementptr inbounds [4 x float], [4 x float]* %66, i64 1, !dbg !4155
  %arraydecay151 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx150, i64 0, i64 0, !dbg !4155
  %67 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4157
  %arrayidx152 = getelementptr inbounds [4 x float], [4 x float]* %67, i64 2, !dbg !4157
  %arraydecay153 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx152, i64 0, i64 0, !dbg !4157
  %68 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4158
  %arrayidx154 = getelementptr inbounds [4 x float], [4 x float]* %68, i64 0, !dbg !4158
  %arraydecay155 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx154, i64 0, i64 0, !dbg !4158
  call void @cross_v3_v3v3(float* %arraydecay151, float* %arraydecay153, float* %arraydecay155), !dbg !4159
  %69 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4160
  %arrayidx156 = getelementptr inbounds [4 x float], [4 x float]* %69, i64 1, !dbg !4160
  %arraydecay157 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx156, i64 0, i64 0, !dbg !4160
  %call158 = call float @normalize_v3(float* %arraydecay157), !dbg !4161
  %70 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4162
  %arrayidx159 = getelementptr inbounds [4 x float], [4 x float]* %70, i64 0, !dbg !4162
  %arraydecay160 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx159, i64 0, i64 0, !dbg !4162
  %71 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4163
  %arrayidx161 = getelementptr inbounds [4 x float], [4 x float]* %71, i64 1, !dbg !4163
  %arraydecay162 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx161, i64 0, i64 0, !dbg !4163
  %72 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4164
  %arrayidx163 = getelementptr inbounds [4 x float], [4 x float]* %72, i64 2, !dbg !4164
  %arraydecay164 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx163, i64 0, i64 0, !dbg !4164
  call void @cross_v3_v3v3(float* %arraydecay160, float* %arraydecay162, float* %arraydecay164), !dbg !4165
  br label %if.end214, !dbg !4166

if.else165:                                       ; preds = %sw.bb142
  %73 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4167
  %arrayidx166 = getelementptr inbounds [4 x float], [4 x float]* %73, i64 2, !dbg !4167
  %arraydecay167 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx166, i64 0, i64 0, !dbg !4167
  %74 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4169
  %arrayidx168 = getelementptr inbounds [4 x float], [4 x float]* %74, i64 1, !dbg !4169
  %arraydecay169 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx168, i64 0, i64 0, !dbg !4169
  %call170 = call float @dot_v3v3(float* %arraydecay167, float* %arraydecay169), !dbg !4170
  %cmp171 = fcmp olt float %call170, 1.000000e+00, !dbg !4171
  br i1 %cmp171, label %if.then172, label %if.else188, !dbg !4172

if.then172:                                       ; preds = %if.else165
  %75 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4173
  %arrayidx173 = getelementptr inbounds [4 x float], [4 x float]* %75, i64 0, !dbg !4173
  %arraydecay174 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx173, i64 0, i64 0, !dbg !4173
  %76 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4175
  %arrayidx175 = getelementptr inbounds [4 x float], [4 x float]* %76, i64 1, !dbg !4175
  %arraydecay176 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx175, i64 0, i64 0, !dbg !4175
  %77 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4176
  %arrayidx177 = getelementptr inbounds [4 x float], [4 x float]* %77, i64 2, !dbg !4176
  %arraydecay178 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx177, i64 0, i64 0, !dbg !4176
  call void @cross_v3_v3v3(float* %arraydecay174, float* %arraydecay176, float* %arraydecay178), !dbg !4177
  %78 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4178
  %arrayidx179 = getelementptr inbounds [4 x float], [4 x float]* %78, i64 0, !dbg !4178
  %arraydecay180 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx179, i64 0, i64 0, !dbg !4178
  %call181 = call float @normalize_v3(float* %arraydecay180), !dbg !4179
  %79 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4180
  %arrayidx182 = getelementptr inbounds [4 x float], [4 x float]* %79, i64 1, !dbg !4180
  %arraydecay183 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx182, i64 0, i64 0, !dbg !4180
  %80 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4181
  %arrayidx184 = getelementptr inbounds [4 x float], [4 x float]* %80, i64 2, !dbg !4181
  %arraydecay185 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx184, i64 0, i64 0, !dbg !4181
  %81 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4182
  %arrayidx186 = getelementptr inbounds [4 x float], [4 x float]* %81, i64 0, !dbg !4182
  %arraydecay187 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx186, i64 0, i64 0, !dbg !4182
  call void @cross_v3_v3v3(float* %arraydecay183, float* %arraydecay185, float* %arraydecay187), !dbg !4183
  br label %if.end213, !dbg !4184

if.else188:                                       ; preds = %if.else165
  call void @llvm.dbg.declare(metadata [3 x float]* %vec189, metadata !4185, metadata !DIExpression()), !dbg !4187
  %82 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4188
  %arrayidx190 = getelementptr inbounds [4 x float], [4 x float]* %82, i64 2, !dbg !4188
  %arrayidx191 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx190, i64 0, i64 1, !dbg !4188
  %83 = load float, float* %arrayidx191, align 4, !dbg !4188
  %arrayidx192 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 0, !dbg !4189
  store float %83, float* %arrayidx192, align 4, !dbg !4190
  %84 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4191
  %arrayidx193 = getelementptr inbounds [4 x float], [4 x float]* %84, i64 2, !dbg !4191
  %arrayidx194 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx193, i64 0, i64 2, !dbg !4191
  %85 = load float, float* %arrayidx194, align 4, !dbg !4191
  %arrayidx195 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 1, !dbg !4192
  store float %85, float* %arrayidx195, align 4, !dbg !4193
  %86 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4194
  %arrayidx196 = getelementptr inbounds [4 x float], [4 x float]* %86, i64 2, !dbg !4194
  %arrayidx197 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx196, i64 0, i64 0, !dbg !4194
  %87 = load float, float* %arrayidx197, align 4, !dbg !4194
  %arrayidx198 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 2, !dbg !4195
  store float %87, float* %arrayidx198, align 4, !dbg !4196
  %88 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4197
  %arrayidx199 = getelementptr inbounds [4 x float], [4 x float]* %88, i64 0, !dbg !4197
  %arraydecay200 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx199, i64 0, i64 0, !dbg !4197
  %arraydecay201 = getelementptr inbounds [3 x float], [3 x float]* %vec189, i64 0, i64 0, !dbg !4198
  %89 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4199
  %arrayidx202 = getelementptr inbounds [4 x float], [4 x float]* %89, i64 2, !dbg !4199
  %arraydecay203 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx202, i64 0, i64 0, !dbg !4199
  call void @cross_v3_v3v3(float* %arraydecay200, float* %arraydecay201, float* %arraydecay203), !dbg !4200
  %90 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4201
  %arrayidx204 = getelementptr inbounds [4 x float], [4 x float]* %90, i64 0, !dbg !4201
  %arraydecay205 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx204, i64 0, i64 0, !dbg !4201
  %call206 = call float @normalize_v3(float* %arraydecay205), !dbg !4202
  %91 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4203
  %arrayidx207 = getelementptr inbounds [4 x float], [4 x float]* %91, i64 1, !dbg !4203
  %arraydecay208 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx207, i64 0, i64 0, !dbg !4203
  %92 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4204
  %arrayidx209 = getelementptr inbounds [4 x float], [4 x float]* %92, i64 2, !dbg !4204
  %arraydecay210 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx209, i64 0, i64 0, !dbg !4204
  %93 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4205
  %arrayidx211 = getelementptr inbounds [4 x float], [4 x float]* %93, i64 0, !dbg !4205
  %arraydecay212 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx211, i64 0, i64 0, !dbg !4205
  call void @cross_v3_v3v3(float* %arraydecay208, float* %arraydecay210, float* %arraydecay212), !dbg !4206
  br label %if.end213

if.end213:                                        ; preds = %if.else188, %if.then172
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %if.then149
  br label %sw.epilog, !dbg !4207

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !4208

sw.epilog:                                        ; preds = %sw.default, %if.end214, %if.end141, %if.end68
  %94 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4209
  %arrayidx215 = getelementptr inbounds [4 x float], [4 x float]* %94, i64 0, !dbg !4209
  %arraydecay216 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx215, i64 0, i64 0, !dbg !4209
  %arrayidx217 = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 0, !dbg !4210
  %95 = load float, float* %arrayidx217, align 4, !dbg !4210
  call void @mul_v3_fl(float* %arraydecay216, float %95), !dbg !4211
  %96 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4212
  %arrayidx218 = getelementptr inbounds [4 x float], [4 x float]* %96, i64 1, !dbg !4212
  %arraydecay219 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx218, i64 0, i64 0, !dbg !4212
  %arrayidx220 = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 1, !dbg !4213
  %97 = load float, float* %arrayidx220, align 4, !dbg !4213
  call void @mul_v3_fl(float* %arraydecay219, float %97), !dbg !4214
  %98 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4215
  %arrayidx221 = getelementptr inbounds [4 x float], [4 x float]* %98, i64 2, !dbg !4215
  %arraydecay222 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx221, i64 0, i64 0, !dbg !4215
  %arrayidx223 = getelementptr inbounds [3 x float], [3 x float]* %size, i64 0, i64 2, !dbg !4216
  %99 = load float, float* %arrayidx223, align 4, !dbg !4216
  call void @mul_v3_fl(float* %arraydecay222, float %99), !dbg !4217
  ret void, !dbg !4218
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mat4_to_size(float* %size, [4 x float]* %mat) #0 !dbg !4219 {
entry:
  %size.addr = alloca float*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !4222, metadata !DIExpression()), !dbg !4223
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !4224, metadata !DIExpression()), !dbg !4225
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4226
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !4226
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !4226
  %call = call float @len_v3(float* %arraydecay), !dbg !4227
  %1 = load float*, float** %size.addr, align 8, !dbg !4228
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 0, !dbg !4228
  store float %call, float* %arrayidx1, align 4, !dbg !4229
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4230
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 1, !dbg !4230
  %arraydecay3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !4230
  %call4 = call float @len_v3(float* %arraydecay3), !dbg !4231
  %3 = load float*, float** %size.addr, align 8, !dbg !4232
  %arrayidx5 = getelementptr inbounds float, float* %3, i64 1, !dbg !4232
  store float %call4, float* %arrayidx5, align 4, !dbg !4233
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4234
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 2, !dbg !4234
  %arraydecay7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 0, !dbg !4234
  %call8 = call float @len_v3(float* %arraydecay7), !dbg !4235
  %5 = load float*, float** %size.addr, align 8, !dbg !4236
  %arrayidx9 = getelementptr inbounds float, float* %5, i64 2, !dbg !4236
  store float %call8, float* %arrayidx9, align 4, !dbg !4237
  ret void, !dbg !4238
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_orthogonal_m3([3 x float]* %m) #0 !dbg !4239 {
entry:
  %retval = alloca i8, align 1
  %m.addr = alloca [3 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !4240, metadata !DIExpression()), !dbg !4241
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4242, metadata !DIExpression()), !dbg !4243
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4244, metadata !DIExpression()), !dbg !4245
  store i32 0, i32* %i, align 4, !dbg !4246
  br label %for.cond, !dbg !4248

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4249
  %cmp = icmp slt i32 %0, 3, !dbg !4251
  br i1 %cmp, label %for.body, label %for.end10, !dbg !4252

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !4253
  br label %for.cond1, !dbg !4256

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !4257
  %2 = load i32, i32* %i, align 4, !dbg !4259
  %cmp2 = icmp slt i32 %1, %2, !dbg !4260
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !4261

for.body3:                                        ; preds = %for.cond1
  %3 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4262
  %4 = load i32, i32* %i, align 4, !dbg !4265
  %idxprom = sext i32 %4 to i64, !dbg !4262
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %3, i64 %idxprom, !dbg !4262
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !4262
  %5 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4266
  %6 = load i32, i32* %j, align 4, !dbg !4267
  %idxprom4 = sext i32 %6 to i64, !dbg !4266
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 %idxprom4, !dbg !4266
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 0, !dbg !4266
  %call = call float @dot_v3v3(float* %arraydecay, float* %arraydecay6), !dbg !4268
  %7 = call float @llvm.fabs.f32(float %call), !dbg !4269
  %cmp7 = fcmp ogt float %7, 0x3E88000000000000, !dbg !4270
  br i1 %cmp7, label %if.then, label %if.end, !dbg !4271

if.then:                                          ; preds = %for.body3
  store i8 0, i8* %retval, align 1, !dbg !4272
  br label %return, !dbg !4272

if.end:                                           ; preds = %for.body3
  br label %for.inc, !dbg !4273

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %j, align 4, !dbg !4274
  %inc = add nsw i32 %8, 1, !dbg !4274
  store i32 %inc, i32* %j, align 4, !dbg !4274
  br label %for.cond1, !dbg !4275, !llvm.loop !4276

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !4278

for.inc8:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4, !dbg !4279
  %inc9 = add nsw i32 %9, 1, !dbg !4279
  store i32 %inc9, i32* %i, align 4, !dbg !4279
  br label %for.cond, !dbg !4280, !llvm.loop !4281

for.end10:                                        ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4283
  br label %return, !dbg !4283

return:                                           ; preds = %for.end10, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !4284
  ret i8 %10, !dbg !4284
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_orthogonal_m4([4 x float]* %m) #0 !dbg !4285 {
entry:
  %retval = alloca i8, align 1
  %m.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !4286, metadata !DIExpression()), !dbg !4287
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4288, metadata !DIExpression()), !dbg !4289
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4290, metadata !DIExpression()), !dbg !4291
  store i32 0, i32* %i, align 4, !dbg !4292
  br label %for.cond, !dbg !4294

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4295
  %cmp = icmp slt i32 %0, 4, !dbg !4297
  br i1 %cmp, label %for.body, label %for.end10, !dbg !4298

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !4299
  br label %for.cond1, !dbg !4302

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !4303
  %2 = load i32, i32* %i, align 4, !dbg !4305
  %cmp2 = icmp slt i32 %1, %2, !dbg !4306
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !4307

for.body3:                                        ; preds = %for.cond1
  %3 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !4308
  %4 = load i32, i32* %i, align 4, !dbg !4311
  %idxprom = sext i32 %4 to i64, !dbg !4308
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %3, i64 %idxprom, !dbg !4308
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !4308
  %5 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !4312
  %6 = load i32, i32* %j, align 4, !dbg !4313
  %idxprom4 = sext i32 %6 to i64, !dbg !4312
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 %idxprom4, !dbg !4312
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !4312
  %call = call float @dot_v4v4(float* %arraydecay, float* %arraydecay6), !dbg !4314
  %7 = call float @llvm.fabs.f32(float %call), !dbg !4315
  %cmp7 = fcmp ogt float %7, 0x3E88000000000000, !dbg !4316
  br i1 %cmp7, label %if.then, label %if.end, !dbg !4317

if.then:                                          ; preds = %for.body3
  store i8 0, i8* %retval, align 1, !dbg !4318
  br label %return, !dbg !4318

if.end:                                           ; preds = %for.body3
  br label %for.inc, !dbg !4319

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %j, align 4, !dbg !4320
  %inc = add nsw i32 %8, 1, !dbg !4320
  store i32 %inc, i32* %j, align 4, !dbg !4320
  br label %for.cond1, !dbg !4321, !llvm.loop !4322

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !4324

for.inc8:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4, !dbg !4325
  %inc9 = add nsw i32 %9, 1, !dbg !4325
  store i32 %inc9, i32* %i, align 4, !dbg !4325
  br label %for.cond, !dbg !4326, !llvm.loop !4327

for.end10:                                        ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4329
  br label %return, !dbg !4329

return:                                           ; preds = %for.end10, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !4330
  ret i8 %10, !dbg !4330
}

; Function Attrs: noinline nounwind uwtable
define internal float @dot_v4v4(float* %a, float* %b) #0 !dbg !4331 {
entry:
  %a.addr = alloca float*, align 8
  %b.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !4332, metadata !DIExpression()), !dbg !4333
  store float* %b, float** %b.addr, align 8
  call void @llvm.dbg.declare(metadata float** %b.addr, metadata !4334, metadata !DIExpression()), !dbg !4335
  %0 = load float*, float** %a.addr, align 8, !dbg !4336
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !4336
  %1 = load float, float* %arrayidx, align 4, !dbg !4336
  %2 = load float*, float** %b.addr, align 8, !dbg !4337
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !4337
  %3 = load float, float* %arrayidx1, align 4, !dbg !4337
  %mul = fmul float %1, %3, !dbg !4338
  %4 = load float*, float** %a.addr, align 8, !dbg !4339
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !4339
  %5 = load float, float* %arrayidx2, align 4, !dbg !4339
  %6 = load float*, float** %b.addr, align 8, !dbg !4340
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !4340
  %7 = load float, float* %arrayidx3, align 4, !dbg !4340
  %mul4 = fmul float %5, %7, !dbg !4341
  %add = fadd float %mul, %mul4, !dbg !4342
  %8 = load float*, float** %a.addr, align 8, !dbg !4343
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !4343
  %9 = load float, float* %arrayidx5, align 4, !dbg !4343
  %10 = load float*, float** %b.addr, align 8, !dbg !4344
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !4344
  %11 = load float, float* %arrayidx6, align 4, !dbg !4344
  %mul7 = fmul float %9, %11, !dbg !4345
  %add8 = fadd float %add, %mul7, !dbg !4346
  %12 = load float*, float** %a.addr, align 8, !dbg !4347
  %arrayidx9 = getelementptr inbounds float, float* %12, i64 3, !dbg !4347
  %13 = load float, float* %arrayidx9, align 4, !dbg !4347
  %14 = load float*, float** %b.addr, align 8, !dbg !4348
  %arrayidx10 = getelementptr inbounds float, float* %14, i64 3, !dbg !4348
  %15 = load float, float* %arrayidx10, align 4, !dbg !4348
  %mul11 = fmul float %13, %15, !dbg !4349
  %add12 = fadd float %add8, %mul11, !dbg !4350
  ret float %add12, !dbg !4351
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_orthonormal_m3([3 x float]* %m) #0 !dbg !4352 {
entry:
  %retval = alloca i8, align 1
  %m.addr = alloca [3 x float]*, align 8
  %i = alloca i32, align 4
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !4353, metadata !DIExpression()), !dbg !4354
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4355
  %call = call zeroext i8 @is_orthogonal_m3([3 x float]* %0), !dbg !4357
  %tobool = icmp ne i8 %call, 0, !dbg !4357
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4358

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4359, metadata !DIExpression()), !dbg !4361
  store i32 0, i32* %i, align 4, !dbg !4362
  br label %for.cond, !dbg !4364

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !4365
  %cmp = icmp slt i32 %1, 3, !dbg !4367
  br i1 %cmp, label %for.body, label %for.end, !dbg !4368

for.body:                                         ; preds = %for.cond
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4369
  %3 = load i32, i32* %i, align 4, !dbg !4371
  %idxprom = sext i32 %3 to i64, !dbg !4369
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %2, i64 %idxprom, !dbg !4369
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !4369
  %4 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4372
  %5 = load i32, i32* %i, align 4, !dbg !4373
  %idxprom1 = sext i32 %5 to i64, !dbg !4372
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 %idxprom1, !dbg !4372
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !4372
  %call4 = call float @dot_v3v3(float* %arraydecay, float* %arraydecay3), !dbg !4374
  %sub = fsub float %call4, 1.000000e+00, !dbg !4375
  %6 = call float @llvm.fabs.f32(float %sub), !dbg !4376
  %cmp5 = fcmp ogt float %6, 0x3E88000000000000, !dbg !4377
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !4378

if.then6:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4379
  br label %return, !dbg !4379

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4380

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !4381
  %inc = add nsw i32 %7, 1, !dbg !4381
  store i32 %inc, i32* %i, align 4, !dbg !4381
  br label %for.cond, !dbg !4382, !llvm.loop !4383

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4385
  br label %return, !dbg !4385

if.end7:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4386
  br label %return, !dbg !4386

return:                                           ; preds = %if.end7, %for.end, %if.then6
  %8 = load i8, i8* %retval, align 1, !dbg !4387
  ret i8 %8, !dbg !4387
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_orthonormal_m4([4 x float]* %m) #0 !dbg !4388 {
entry:
  %retval = alloca i8, align 1
  %m.addr = alloca [4 x float]*, align 8
  %i = alloca i32, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !4389, metadata !DIExpression()), !dbg !4390
  %0 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !4391
  %call = call zeroext i8 @is_orthogonal_m4([4 x float]* %0), !dbg !4393
  %tobool = icmp ne i8 %call, 0, !dbg !4393
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4394

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4395, metadata !DIExpression()), !dbg !4397
  store i32 0, i32* %i, align 4, !dbg !4398
  br label %for.cond, !dbg !4400

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !4401
  %cmp = icmp slt i32 %1, 4, !dbg !4403
  br i1 %cmp, label %for.body, label %for.end, !dbg !4404

for.body:                                         ; preds = %for.cond
  %2 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !4405
  %3 = load i32, i32* %i, align 4, !dbg !4407
  %idxprom = sext i32 %3 to i64, !dbg !4405
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %2, i64 %idxprom, !dbg !4405
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !4405
  %4 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !4408
  %5 = load i32, i32* %i, align 4, !dbg !4409
  %idxprom1 = sext i32 %5 to i64, !dbg !4408
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 %idxprom1, !dbg !4408
  %arraydecay3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !4408
  %call4 = call float @dot_v4v4(float* %arraydecay, float* %arraydecay3), !dbg !4410
  %sub = fsub float %call4, 1.000000e+00, !dbg !4411
  %6 = call float @llvm.fabs.f32(float %sub), !dbg !4412
  %cmp5 = fcmp ogt float %6, 0x3E88000000000000, !dbg !4413
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !4414

if.then6:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4415
  br label %return, !dbg !4415

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4416

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !4417
  %inc = add nsw i32 %7, 1, !dbg !4417
  store i32 %inc, i32* %i, align 4, !dbg !4417
  br label %for.cond, !dbg !4418, !llvm.loop !4419

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4421
  br label %return, !dbg !4421

if.end7:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4422
  br label %return, !dbg !4422

return:                                           ; preds = %if.end7, %for.end, %if.then6
  %8 = load i8, i8* %retval, align 1, !dbg !4423
  ret i8 %8, !dbg !4423
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_uniform_scaled_m3([3 x float]* %m) #0 !dbg !4424 {
entry:
  %retval = alloca i8, align 1
  %m.addr = alloca [3 x float]*, align 8
  %eps = alloca float, align 4
  %t = alloca [3 x [3 x float]], align 16
  %l1 = alloca float, align 4
  %l2 = alloca float, align 4
  %l3 = alloca float, align 4
  %l4 = alloca float, align 4
  %l5 = alloca float, align 4
  %l6 = alloca float, align 4
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !4425, metadata !DIExpression()), !dbg !4426
  call void @llvm.dbg.declare(metadata float* %eps, metadata !4427, metadata !DIExpression()), !dbg !4428
  store float 0x3E7AD7F2A0000000, float* %eps, align 4, !dbg !4428
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %t, metadata !4429, metadata !DIExpression()), !dbg !4430
  call void @llvm.dbg.declare(metadata float* %l1, metadata !4431, metadata !DIExpression()), !dbg !4432
  call void @llvm.dbg.declare(metadata float* %l2, metadata !4433, metadata !DIExpression()), !dbg !4434
  call void @llvm.dbg.declare(metadata float* %l3, metadata !4435, metadata !DIExpression()), !dbg !4436
  call void @llvm.dbg.declare(metadata float* %l4, metadata !4437, metadata !DIExpression()), !dbg !4438
  call void @llvm.dbg.declare(metadata float* %l5, metadata !4439, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.declare(metadata float* %l6, metadata !4441, metadata !DIExpression()), !dbg !4442
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 0, !dbg !4443
  %0 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4444
  call void @copy_m3_m3([3 x float]* %arraydecay, [3 x float]* %0), !dbg !4445
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 0, !dbg !4446
  call void @transpose_m3([3 x float]* %arraydecay1), !dbg !4447
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4448
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %1, i64 0, !dbg !4448
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !4448
  %call = call float @len_squared_v3(float* %arraydecay2), !dbg !4449
  store float %call, float* %l1, align 4, !dbg !4450
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4451
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, !dbg !4451
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 0, !dbg !4451
  %call5 = call float @len_squared_v3(float* %arraydecay4), !dbg !4452
  store float %call5, float* %l2, align 4, !dbg !4453
  %3 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !4454
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, !dbg !4454
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 0, !dbg !4454
  %call8 = call float @len_squared_v3(float* %arraydecay7), !dbg !4455
  store float %call8, float* %l3, align 4, !dbg !4456
  %arrayidx9 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 0, !dbg !4457
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx9, i64 0, i64 0, !dbg !4457
  %call11 = call float @len_squared_v3(float* %arraydecay10), !dbg !4458
  store float %call11, float* %l4, align 4, !dbg !4459
  %arrayidx12 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 1, !dbg !4460
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !4460
  %call14 = call float @len_squared_v3(float* %arraydecay13), !dbg !4461
  store float %call14, float* %l5, align 4, !dbg !4462
  %arrayidx15 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 2, !dbg !4463
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx15, i64 0, i64 0, !dbg !4463
  %call17 = call float @len_squared_v3(float* %arraydecay16), !dbg !4464
  store float %call17, float* %l6, align 4, !dbg !4465
  %4 = load float, float* %l2, align 4, !dbg !4466
  %5 = load float, float* %l1, align 4, !dbg !4468
  %sub = fsub float %4, %5, !dbg !4469
  %6 = call float @llvm.fabs.f32(float %sub), !dbg !4470
  %cmp = fcmp ole float %6, 0x3E7AD7F2A0000000, !dbg !4471
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4472

land.lhs.true:                                    ; preds = %entry
  %7 = load float, float* %l3, align 4, !dbg !4473
  %8 = load float, float* %l1, align 4, !dbg !4474
  %sub18 = fsub float %7, %8, !dbg !4475
  %9 = call float @llvm.fabs.f32(float %sub18), !dbg !4476
  %cmp19 = fcmp ole float %9, 0x3E7AD7F2A0000000, !dbg !4477
  br i1 %cmp19, label %land.lhs.true20, label %if.end, !dbg !4478

land.lhs.true20:                                  ; preds = %land.lhs.true
  %10 = load float, float* %l4, align 4, !dbg !4479
  %11 = load float, float* %l1, align 4, !dbg !4480
  %sub21 = fsub float %10, %11, !dbg !4481
  %12 = call float @llvm.fabs.f32(float %sub21), !dbg !4482
  %cmp22 = fcmp ole float %12, 0x3E7AD7F2A0000000, !dbg !4483
  br i1 %cmp22, label %land.lhs.true23, label %if.end, !dbg !4484

land.lhs.true23:                                  ; preds = %land.lhs.true20
  %13 = load float, float* %l5, align 4, !dbg !4485
  %14 = load float, float* %l1, align 4, !dbg !4486
  %sub24 = fsub float %13, %14, !dbg !4487
  %15 = call float @llvm.fabs.f32(float %sub24), !dbg !4488
  %cmp25 = fcmp ole float %15, 0x3E7AD7F2A0000000, !dbg !4489
  br i1 %cmp25, label %land.lhs.true26, label %if.end, !dbg !4490

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %16 = load float, float* %l6, align 4, !dbg !4491
  %17 = load float, float* %l1, align 4, !dbg !4492
  %sub27 = fsub float %16, %17, !dbg !4493
  %18 = call float @llvm.fabs.f32(float %sub27), !dbg !4494
  %cmp28 = fcmp ole float %18, 0x3E7AD7F2A0000000, !dbg !4495
  br i1 %cmp28, label %if.then, label %if.end, !dbg !4496

if.then:                                          ; preds = %land.lhs.true26
  store i8 1, i8* %retval, align 1, !dbg !4497
  br label %return, !dbg !4497

if.end:                                           ; preds = %land.lhs.true26, %land.lhs.true23, %land.lhs.true20, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !4499
  br label %return, !dbg !4499

return:                                           ; preds = %if.end, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !4500
  ret i8 %19, !dbg !4500
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_squared_v3(float* %v) #0 !dbg !4501 {
entry:
  %v.addr = alloca float*, align 8
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !4504, metadata !DIExpression()), !dbg !4505
  %0 = load float*, float** %v.addr, align 8, !dbg !4506
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !4506
  %1 = load float, float* %arrayidx, align 4, !dbg !4506
  %2 = load float*, float** %v.addr, align 8, !dbg !4507
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !4507
  %3 = load float, float* %arrayidx1, align 4, !dbg !4507
  %mul = fmul float %1, %3, !dbg !4508
  %4 = load float*, float** %v.addr, align 8, !dbg !4509
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !4509
  %5 = load float, float* %arrayidx2, align 4, !dbg !4509
  %6 = load float*, float** %v.addr, align 8, !dbg !4510
  %arrayidx3 = getelementptr inbounds float, float* %6, i64 1, !dbg !4510
  %7 = load float, float* %arrayidx3, align 4, !dbg !4510
  %mul4 = fmul float %5, %7, !dbg !4511
  %add = fadd float %mul, %mul4, !dbg !4512
  %8 = load float*, float** %v.addr, align 8, !dbg !4513
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !4513
  %9 = load float, float* %arrayidx5, align 4, !dbg !4513
  %10 = load float*, float** %v.addr, align 8, !dbg !4514
  %arrayidx6 = getelementptr inbounds float, float* %10, i64 2, !dbg !4514
  %11 = load float, float* %arrayidx6, align 4, !dbg !4514
  %mul7 = fmul float %9, %11, !dbg !4515
  %add8 = fadd float %add, %mul7, !dbg !4516
  ret float %add8, !dbg !4517
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_uniform_scaled_m4([4 x float]* %m) #0 !dbg !4518 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %t = alloca [3 x [3 x float]], align 16
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !4519, metadata !DIExpression()), !dbg !4520
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %t, metadata !4521, metadata !DIExpression()), !dbg !4522
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 0, !dbg !4523
  %0 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !4524
  call void @copy_m3_m4([3 x float]* %arraydecay, [4 x float]* %0), !dbg !4525
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %t, i64 0, i64 0, !dbg !4526
  %call = call zeroext i8 @is_uniform_scaled_m3([3 x float]* %arraydecay1), !dbg !4527
  ret i8 %call, !dbg !4528
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @normalize_m3([3 x float]* %mat) #0 !dbg !4529 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !4530, metadata !DIExpression()), !dbg !4531
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !4532
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !4532
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !4532
  %call = call float @normalize_v3(float* %arraydecay), !dbg !4533
  %1 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !4534
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %1, i64 1, !dbg !4534
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx1, i64 0, i64 0, !dbg !4534
  %call3 = call float @normalize_v3(float* %arraydecay2), !dbg !4535
  %2 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !4536
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, !dbg !4536
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 0, !dbg !4536
  %call6 = call float @normalize_v3(float* %arraydecay5), !dbg !4537
  ret void, !dbg !4538
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @normalize_m3_m3([3 x float]* %rmat, [3 x float]* %mat) #0 !dbg !4539 {
entry:
  %rmat.addr = alloca [3 x float]*, align 8
  %mat.addr = alloca [3 x float]*, align 8
  store [3 x float]* %rmat, [3 x float]** %rmat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %rmat.addr, metadata !4540, metadata !DIExpression()), !dbg !4541
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !4542, metadata !DIExpression()), !dbg !4543
  %0 = load [3 x float]*, [3 x float]** %rmat.addr, align 8, !dbg !4544
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !4544
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !4544
  %1 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !4545
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %1, i64 0, !dbg !4545
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx1, i64 0, i64 0, !dbg !4545
  %call = call float @normalize_v3_v3(float* %arraydecay, float* %arraydecay2), !dbg !4546
  %2 = load [3 x float]*, [3 x float]** %rmat.addr, align 8, !dbg !4547
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, !dbg !4547
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 0, !dbg !4547
  %3 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !4548
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, !dbg !4548
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 0, !dbg !4548
  %call7 = call float @normalize_v3_v3(float* %arraydecay4, float* %arraydecay6), !dbg !4549
  %4 = load [3 x float]*, [3 x float]** %rmat.addr, align 8, !dbg !4550
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 2, !dbg !4550
  %arraydecay9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 0, !dbg !4550
  %5 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !4551
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 2, !dbg !4551
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 0, !dbg !4551
  %call12 = call float @normalize_v3_v3(float* %arraydecay9, float* %arraydecay11), !dbg !4552
  ret void, !dbg !4553
}

; Function Attrs: noinline nounwind uwtable
define internal float @normalize_v3_v3(float* %r, float* %a) #0 !dbg !4554 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %d = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !4557, metadata !DIExpression()), !dbg !4558
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !4559, metadata !DIExpression()), !dbg !4560
  call void @llvm.dbg.declare(metadata float* %d, metadata !4561, metadata !DIExpression()), !dbg !4562
  %0 = load float*, float** %a.addr, align 8, !dbg !4563
  %1 = load float*, float** %a.addr, align 8, !dbg !4564
  %call = call float @dot_v3v3(float* %0, float* %1), !dbg !4565
  store float %call, float* %d, align 4, !dbg !4562
  %2 = load float, float* %d, align 4, !dbg !4566
  %cmp = fcmp ogt float %2, 0x38AA95A5C0000000, !dbg !4568
  br i1 %cmp, label %if.then, label %if.else, !dbg !4569

if.then:                                          ; preds = %entry
  %3 = load float, float* %d, align 4, !dbg !4570
  %call1 = call float @sqrtf(float %3) #5, !dbg !4572
  store float %call1, float* %d, align 4, !dbg !4573
  %4 = load float*, float** %r.addr, align 8, !dbg !4574
  %5 = load float*, float** %a.addr, align 8, !dbg !4575
  %6 = load float, float* %d, align 4, !dbg !4576
  %div = fdiv float 1.000000e+00, %6, !dbg !4577
  call void @mul_v3_v3fl(float* %4, float* %5, float %div), !dbg !4578
  br label %if.end, !dbg !4579

if.else:                                          ; preds = %entry
  %7 = load float*, float** %r.addr, align 8, !dbg !4580
  call void @zero_v3(float* %7), !dbg !4582
  store float 0.000000e+00, float* %d, align 4, !dbg !4583
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load float, float* %d, align 4, !dbg !4584
  ret float %8, !dbg !4585
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @normalize_m4([4 x float]* %mat) #0 !dbg !4586 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %len = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !4587, metadata !DIExpression()), !dbg !4588
  call void @llvm.dbg.declare(metadata float* %len, metadata !4589, metadata !DIExpression()), !dbg !4590
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4591
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !4591
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !4591
  %call = call float @normalize_v3(float* %arraydecay), !dbg !4592
  store float %call, float* %len, align 4, !dbg !4593
  %1 = load float, float* %len, align 4, !dbg !4594
  %cmp = fcmp une float %1, 0.000000e+00, !dbg !4596
  br i1 %cmp, label %if.then, label %if.end, !dbg !4597

if.then:                                          ; preds = %entry
  %2 = load float, float* %len, align 4, !dbg !4598
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4599
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, !dbg !4599
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 3, !dbg !4599
  %4 = load float, float* %arrayidx2, align 4, !dbg !4600
  %div = fdiv float %4, %2, !dbg !4600
  store float %div, float* %arrayidx2, align 4, !dbg !4600
  br label %if.end, !dbg !4599

if.end:                                           ; preds = %if.then, %entry
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4601
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 1, !dbg !4601
  %arraydecay4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !4601
  %call5 = call float @normalize_v3(float* %arraydecay4), !dbg !4602
  store float %call5, float* %len, align 4, !dbg !4603
  %6 = load float, float* %len, align 4, !dbg !4604
  %cmp6 = fcmp une float %6, 0.000000e+00, !dbg !4606
  br i1 %cmp6, label %if.then7, label %if.end11, !dbg !4607

if.then7:                                         ; preds = %if.end
  %7 = load float, float* %len, align 4, !dbg !4608
  %8 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4609
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !4609
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 3, !dbg !4609
  %9 = load float, float* %arrayidx9, align 4, !dbg !4610
  %div10 = fdiv float %9, %7, !dbg !4610
  store float %div10, float* %arrayidx9, align 4, !dbg !4610
  br label %if.end11, !dbg !4609

if.end11:                                         ; preds = %if.then7, %if.end
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4611
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 2, !dbg !4611
  %arraydecay13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !4611
  %call14 = call float @normalize_v3(float* %arraydecay13), !dbg !4612
  store float %call14, float* %len, align 4, !dbg !4613
  %11 = load float, float* %len, align 4, !dbg !4614
  %cmp15 = fcmp une float %11, 0.000000e+00, !dbg !4616
  br i1 %cmp15, label %if.then16, label %if.end20, !dbg !4617

if.then16:                                        ; preds = %if.end11
  %12 = load float, float* %len, align 4, !dbg !4618
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4619
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !4619
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx17, i64 0, i64 3, !dbg !4619
  %14 = load float, float* %arrayidx18, align 4, !dbg !4620
  %div19 = fdiv float %14, %12, !dbg !4620
  store float %div19, float* %arrayidx18, align 4, !dbg !4620
  br label %if.end20, !dbg !4619

if.end20:                                         ; preds = %if.then16, %if.end11
  ret void, !dbg !4621
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @normalize_m4_m4([4 x float]* %rmat, [4 x float]* %mat) #0 !dbg !4622 {
entry:
  %rmat.addr = alloca [4 x float]*, align 8
  %mat.addr = alloca [4 x float]*, align 8
  store [4 x float]* %rmat, [4 x float]** %rmat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %rmat.addr, metadata !4623, metadata !DIExpression()), !dbg !4624
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !4625, metadata !DIExpression()), !dbg !4626
  %0 = load [4 x float]*, [4 x float]** %rmat.addr, align 8, !dbg !4627
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !4628
  call void @copy_m4_m4([4 x float]* %0, [4 x float]* %1), !dbg !4629
  %2 = load [4 x float]*, [4 x float]** %rmat.addr, align 8, !dbg !4630
  call void @normalize_m4([4 x float]* %2), !dbg !4631
  ret void, !dbg !4632
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @adjoint_m2_m2([2 x float]* %m1, [2 x float]* %m) #0 !dbg !4633 {
entry:
  %m1.addr = alloca [2 x float]*, align 8
  %m.addr = alloca [2 x float]*, align 8
  store [2 x float]* %m1, [2 x float]** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %m1.addr, metadata !4634, metadata !DIExpression()), !dbg !4635
  store [2 x float]* %m, [2 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %m.addr, metadata !4636, metadata !DIExpression()), !dbg !4637
  %0 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !4638
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, !dbg !4638
  %arrayidx1 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx, i64 0, i64 1, !dbg !4638
  %1 = load float, float* %arrayidx1, align 4, !dbg !4638
  %2 = load [2 x float]*, [2 x float]** %m1.addr, align 8, !dbg !4639
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %2, i64 0, !dbg !4639
  %arrayidx3 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx2, i64 0, i64 0, !dbg !4639
  store float %1, float* %arrayidx3, align 4, !dbg !4640
  %3 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !4641
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, !dbg !4641
  %arrayidx5 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx4, i64 0, i64 1, !dbg !4641
  %4 = load float, float* %arrayidx5, align 4, !dbg !4641
  %fneg = fneg float %4, !dbg !4642
  %5 = load [2 x float]*, [2 x float]** %m1.addr, align 8, !dbg !4643
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, !dbg !4643
  %arrayidx7 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx6, i64 0, i64 1, !dbg !4643
  store float %fneg, float* %arrayidx7, align 4, !dbg !4644
  %6 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !4645
  %arrayidx8 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 1, !dbg !4645
  %arrayidx9 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx8, i64 0, i64 0, !dbg !4645
  %7 = load float, float* %arrayidx9, align 4, !dbg !4645
  %fneg10 = fneg float %7, !dbg !4646
  %8 = load [2 x float]*, [2 x float]** %m1.addr, align 8, !dbg !4647
  %arrayidx11 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 1, !dbg !4647
  %arrayidx12 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx11, i64 0, i64 0, !dbg !4647
  store float %fneg10, float* %arrayidx12, align 4, !dbg !4648
  %9 = load [2 x float]*, [2 x float]** %m.addr, align 8, !dbg !4649
  %arrayidx13 = getelementptr inbounds [2 x float], [2 x float]* %9, i64 0, !dbg !4649
  %arrayidx14 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx13, i64 0, i64 0, !dbg !4649
  %10 = load float, float* %arrayidx14, align 4, !dbg !4649
  %11 = load [2 x float]*, [2 x float]** %m1.addr, align 8, !dbg !4650
  %arrayidx15 = getelementptr inbounds [2 x float], [2 x float]* %11, i64 1, !dbg !4650
  %arrayidx16 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx15, i64 0, i64 1, !dbg !4650
  store float %10, float* %arrayidx16, align 4, !dbg !4651
  ret void, !dbg !4652
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @adjoint_m4_m4([4 x float]* %out, [4 x float]* %in) #0 !dbg !4653 {
entry:
  %out.addr = alloca [4 x float]*, align 8
  %in.addr = alloca [4 x float]*, align 8
  %a1 = alloca float, align 4
  %a2 = alloca float, align 4
  %a3 = alloca float, align 4
  %a4 = alloca float, align 4
  %b1 = alloca float, align 4
  %b2 = alloca float, align 4
  %b3 = alloca float, align 4
  %b4 = alloca float, align 4
  %c1 = alloca float, align 4
  %c2 = alloca float, align 4
  %c3 = alloca float, align 4
  %c4 = alloca float, align 4
  %d1 = alloca float, align 4
  %d2 = alloca float, align 4
  %d3 = alloca float, align 4
  %d4 = alloca float, align 4
  store [4 x float]* %out, [4 x float]** %out.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %out.addr, metadata !4654, metadata !DIExpression()), !dbg !4655
  store [4 x float]* %in, [4 x float]** %in.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %in.addr, metadata !4656, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.declare(metadata float* %a1, metadata !4658, metadata !DIExpression()), !dbg !4659
  call void @llvm.dbg.declare(metadata float* %a2, metadata !4660, metadata !DIExpression()), !dbg !4661
  call void @llvm.dbg.declare(metadata float* %a3, metadata !4662, metadata !DIExpression()), !dbg !4663
  call void @llvm.dbg.declare(metadata float* %a4, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.declare(metadata float* %b1, metadata !4666, metadata !DIExpression()), !dbg !4667
  call void @llvm.dbg.declare(metadata float* %b2, metadata !4668, metadata !DIExpression()), !dbg !4669
  call void @llvm.dbg.declare(metadata float* %b3, metadata !4670, metadata !DIExpression()), !dbg !4671
  call void @llvm.dbg.declare(metadata float* %b4, metadata !4672, metadata !DIExpression()), !dbg !4673
  call void @llvm.dbg.declare(metadata float* %c1, metadata !4674, metadata !DIExpression()), !dbg !4675
  call void @llvm.dbg.declare(metadata float* %c2, metadata !4676, metadata !DIExpression()), !dbg !4677
  call void @llvm.dbg.declare(metadata float* %c3, metadata !4678, metadata !DIExpression()), !dbg !4679
  call void @llvm.dbg.declare(metadata float* %c4, metadata !4680, metadata !DIExpression()), !dbg !4681
  call void @llvm.dbg.declare(metadata float* %d1, metadata !4682, metadata !DIExpression()), !dbg !4683
  call void @llvm.dbg.declare(metadata float* %d2, metadata !4684, metadata !DIExpression()), !dbg !4685
  call void @llvm.dbg.declare(metadata float* %d3, metadata !4686, metadata !DIExpression()), !dbg !4687
  call void @llvm.dbg.declare(metadata float* %d4, metadata !4688, metadata !DIExpression()), !dbg !4689
  %0 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4690
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !4690
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !4690
  %1 = load float, float* %arrayidx1, align 4, !dbg !4690
  store float %1, float* %a1, align 4, !dbg !4691
  %2 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4692
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, !dbg !4692
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 1, !dbg !4692
  %3 = load float, float* %arrayidx3, align 4, !dbg !4692
  store float %3, float* %b1, align 4, !dbg !4693
  %4 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4694
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !4694
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 2, !dbg !4694
  %5 = load float, float* %arrayidx5, align 4, !dbg !4694
  store float %5, float* %c1, align 4, !dbg !4695
  %6 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4696
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !4696
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 3, !dbg !4696
  %7 = load float, float* %arrayidx7, align 4, !dbg !4696
  store float %7, float* %d1, align 4, !dbg !4697
  %8 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4698
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !4698
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 0, !dbg !4698
  %9 = load float, float* %arrayidx9, align 4, !dbg !4698
  store float %9, float* %a2, align 4, !dbg !4699
  %10 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4700
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !4700
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 1, !dbg !4700
  %11 = load float, float* %arrayidx11, align 4, !dbg !4700
  store float %11, float* %b2, align 4, !dbg !4701
  %12 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4702
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 1, !dbg !4702
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 2, !dbg !4702
  %13 = load float, float* %arrayidx13, align 4, !dbg !4702
  store float %13, float* %c2, align 4, !dbg !4703
  %14 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4704
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 1, !dbg !4704
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 3, !dbg !4704
  %15 = load float, float* %arrayidx15, align 4, !dbg !4704
  store float %15, float* %d2, align 4, !dbg !4705
  %16 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4706
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 2, !dbg !4706
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 0, !dbg !4706
  %17 = load float, float* %arrayidx17, align 4, !dbg !4706
  store float %17, float* %a3, align 4, !dbg !4707
  %18 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4708
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 2, !dbg !4708
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 1, !dbg !4708
  %19 = load float, float* %arrayidx19, align 4, !dbg !4708
  store float %19, float* %b3, align 4, !dbg !4709
  %20 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4710
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 2, !dbg !4710
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 2, !dbg !4710
  %21 = load float, float* %arrayidx21, align 4, !dbg !4710
  store float %21, float* %c3, align 4, !dbg !4711
  %22 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4712
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %22, i64 2, !dbg !4712
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 3, !dbg !4712
  %23 = load float, float* %arrayidx23, align 4, !dbg !4712
  store float %23, float* %d3, align 4, !dbg !4713
  %24 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4714
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 3, !dbg !4714
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !4714
  %25 = load float, float* %arrayidx25, align 4, !dbg !4714
  store float %25, float* %a4, align 4, !dbg !4715
  %26 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4716
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 3, !dbg !4716
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 1, !dbg !4716
  %27 = load float, float* %arrayidx27, align 4, !dbg !4716
  store float %27, float* %b4, align 4, !dbg !4717
  %28 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4718
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 3, !dbg !4718
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 2, !dbg !4718
  %29 = load float, float* %arrayidx29, align 4, !dbg !4718
  store float %29, float* %c4, align 4, !dbg !4719
  %30 = load [4 x float]*, [4 x float]** %in.addr, align 8, !dbg !4720
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 3, !dbg !4720
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 3, !dbg !4720
  %31 = load float, float* %arrayidx31, align 4, !dbg !4720
  store float %31, float* %d4, align 4, !dbg !4721
  %32 = load float, float* %b2, align 4, !dbg !4722
  %33 = load float, float* %b3, align 4, !dbg !4723
  %34 = load float, float* %b4, align 4, !dbg !4724
  %35 = load float, float* %c2, align 4, !dbg !4725
  %36 = load float, float* %c3, align 4, !dbg !4726
  %37 = load float, float* %c4, align 4, !dbg !4727
  %38 = load float, float* %d2, align 4, !dbg !4728
  %39 = load float, float* %d3, align 4, !dbg !4729
  %40 = load float, float* %d4, align 4, !dbg !4730
  %call = call float @determinant_m3(float %32, float %33, float %34, float %35, float %36, float %37, float %38, float %39, float %40), !dbg !4731
  %41 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4732
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %41, i64 0, !dbg !4732
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx32, i64 0, i64 0, !dbg !4732
  store float %call, float* %arrayidx33, align 4, !dbg !4733
  %42 = load float, float* %a2, align 4, !dbg !4734
  %43 = load float, float* %a3, align 4, !dbg !4735
  %44 = load float, float* %a4, align 4, !dbg !4736
  %45 = load float, float* %c2, align 4, !dbg !4737
  %46 = load float, float* %c3, align 4, !dbg !4738
  %47 = load float, float* %c4, align 4, !dbg !4739
  %48 = load float, float* %d2, align 4, !dbg !4740
  %49 = load float, float* %d3, align 4, !dbg !4741
  %50 = load float, float* %d4, align 4, !dbg !4742
  %call34 = call float @determinant_m3(float %42, float %43, float %44, float %45, float %46, float %47, float %48, float %49, float %50), !dbg !4743
  %fneg = fneg float %call34, !dbg !4744
  %51 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4745
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %51, i64 1, !dbg !4745
  %arrayidx36 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx35, i64 0, i64 0, !dbg !4745
  store float %fneg, float* %arrayidx36, align 4, !dbg !4746
  %52 = load float, float* %a2, align 4, !dbg !4747
  %53 = load float, float* %a3, align 4, !dbg !4748
  %54 = load float, float* %a4, align 4, !dbg !4749
  %55 = load float, float* %b2, align 4, !dbg !4750
  %56 = load float, float* %b3, align 4, !dbg !4751
  %57 = load float, float* %b4, align 4, !dbg !4752
  %58 = load float, float* %d2, align 4, !dbg !4753
  %59 = load float, float* %d3, align 4, !dbg !4754
  %60 = load float, float* %d4, align 4, !dbg !4755
  %call37 = call float @determinant_m3(float %52, float %53, float %54, float %55, float %56, float %57, float %58, float %59, float %60), !dbg !4756
  %61 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4757
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %61, i64 2, !dbg !4757
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 0, !dbg !4757
  store float %call37, float* %arrayidx39, align 4, !dbg !4758
  %62 = load float, float* %a2, align 4, !dbg !4759
  %63 = load float, float* %a3, align 4, !dbg !4760
  %64 = load float, float* %a4, align 4, !dbg !4761
  %65 = load float, float* %b2, align 4, !dbg !4762
  %66 = load float, float* %b3, align 4, !dbg !4763
  %67 = load float, float* %b4, align 4, !dbg !4764
  %68 = load float, float* %c2, align 4, !dbg !4765
  %69 = load float, float* %c3, align 4, !dbg !4766
  %70 = load float, float* %c4, align 4, !dbg !4767
  %call40 = call float @determinant_m3(float %62, float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70), !dbg !4768
  %fneg41 = fneg float %call40, !dbg !4769
  %71 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4770
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %71, i64 3, !dbg !4770
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx42, i64 0, i64 0, !dbg !4770
  store float %fneg41, float* %arrayidx43, align 4, !dbg !4771
  %72 = load float, float* %b1, align 4, !dbg !4772
  %73 = load float, float* %b3, align 4, !dbg !4773
  %74 = load float, float* %b4, align 4, !dbg !4774
  %75 = load float, float* %c1, align 4, !dbg !4775
  %76 = load float, float* %c3, align 4, !dbg !4776
  %77 = load float, float* %c4, align 4, !dbg !4777
  %78 = load float, float* %d1, align 4, !dbg !4778
  %79 = load float, float* %d3, align 4, !dbg !4779
  %80 = load float, float* %d4, align 4, !dbg !4780
  %call44 = call float @determinant_m3(float %72, float %73, float %74, float %75, float %76, float %77, float %78, float %79, float %80), !dbg !4781
  %fneg45 = fneg float %call44, !dbg !4782
  %81 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4783
  %arrayidx46 = getelementptr inbounds [4 x float], [4 x float]* %81, i64 0, !dbg !4783
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx46, i64 0, i64 1, !dbg !4783
  store float %fneg45, float* %arrayidx47, align 4, !dbg !4784
  %82 = load float, float* %a1, align 4, !dbg !4785
  %83 = load float, float* %a3, align 4, !dbg !4786
  %84 = load float, float* %a4, align 4, !dbg !4787
  %85 = load float, float* %c1, align 4, !dbg !4788
  %86 = load float, float* %c3, align 4, !dbg !4789
  %87 = load float, float* %c4, align 4, !dbg !4790
  %88 = load float, float* %d1, align 4, !dbg !4791
  %89 = load float, float* %d3, align 4, !dbg !4792
  %90 = load float, float* %d4, align 4, !dbg !4793
  %call48 = call float @determinant_m3(float %82, float %83, float %84, float %85, float %86, float %87, float %88, float %89, float %90), !dbg !4794
  %91 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4795
  %arrayidx49 = getelementptr inbounds [4 x float], [4 x float]* %91, i64 1, !dbg !4795
  %arrayidx50 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx49, i64 0, i64 1, !dbg !4795
  store float %call48, float* %arrayidx50, align 4, !dbg !4796
  %92 = load float, float* %a1, align 4, !dbg !4797
  %93 = load float, float* %a3, align 4, !dbg !4798
  %94 = load float, float* %a4, align 4, !dbg !4799
  %95 = load float, float* %b1, align 4, !dbg !4800
  %96 = load float, float* %b3, align 4, !dbg !4801
  %97 = load float, float* %b4, align 4, !dbg !4802
  %98 = load float, float* %d1, align 4, !dbg !4803
  %99 = load float, float* %d3, align 4, !dbg !4804
  %100 = load float, float* %d4, align 4, !dbg !4805
  %call51 = call float @determinant_m3(float %92, float %93, float %94, float %95, float %96, float %97, float %98, float %99, float %100), !dbg !4806
  %fneg52 = fneg float %call51, !dbg !4807
  %101 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4808
  %arrayidx53 = getelementptr inbounds [4 x float], [4 x float]* %101, i64 2, !dbg !4808
  %arrayidx54 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx53, i64 0, i64 1, !dbg !4808
  store float %fneg52, float* %arrayidx54, align 4, !dbg !4809
  %102 = load float, float* %a1, align 4, !dbg !4810
  %103 = load float, float* %a3, align 4, !dbg !4811
  %104 = load float, float* %a4, align 4, !dbg !4812
  %105 = load float, float* %b1, align 4, !dbg !4813
  %106 = load float, float* %b3, align 4, !dbg !4814
  %107 = load float, float* %b4, align 4, !dbg !4815
  %108 = load float, float* %c1, align 4, !dbg !4816
  %109 = load float, float* %c3, align 4, !dbg !4817
  %110 = load float, float* %c4, align 4, !dbg !4818
  %call55 = call float @determinant_m3(float %102, float %103, float %104, float %105, float %106, float %107, float %108, float %109, float %110), !dbg !4819
  %111 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4820
  %arrayidx56 = getelementptr inbounds [4 x float], [4 x float]* %111, i64 3, !dbg !4820
  %arrayidx57 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx56, i64 0, i64 1, !dbg !4820
  store float %call55, float* %arrayidx57, align 4, !dbg !4821
  %112 = load float, float* %b1, align 4, !dbg !4822
  %113 = load float, float* %b2, align 4, !dbg !4823
  %114 = load float, float* %b4, align 4, !dbg !4824
  %115 = load float, float* %c1, align 4, !dbg !4825
  %116 = load float, float* %c2, align 4, !dbg !4826
  %117 = load float, float* %c4, align 4, !dbg !4827
  %118 = load float, float* %d1, align 4, !dbg !4828
  %119 = load float, float* %d2, align 4, !dbg !4829
  %120 = load float, float* %d4, align 4, !dbg !4830
  %call58 = call float @determinant_m3(float %112, float %113, float %114, float %115, float %116, float %117, float %118, float %119, float %120), !dbg !4831
  %121 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4832
  %arrayidx59 = getelementptr inbounds [4 x float], [4 x float]* %121, i64 0, !dbg !4832
  %arrayidx60 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx59, i64 0, i64 2, !dbg !4832
  store float %call58, float* %arrayidx60, align 4, !dbg !4833
  %122 = load float, float* %a1, align 4, !dbg !4834
  %123 = load float, float* %a2, align 4, !dbg !4835
  %124 = load float, float* %a4, align 4, !dbg !4836
  %125 = load float, float* %c1, align 4, !dbg !4837
  %126 = load float, float* %c2, align 4, !dbg !4838
  %127 = load float, float* %c4, align 4, !dbg !4839
  %128 = load float, float* %d1, align 4, !dbg !4840
  %129 = load float, float* %d2, align 4, !dbg !4841
  %130 = load float, float* %d4, align 4, !dbg !4842
  %call61 = call float @determinant_m3(float %122, float %123, float %124, float %125, float %126, float %127, float %128, float %129, float %130), !dbg !4843
  %fneg62 = fneg float %call61, !dbg !4844
  %131 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4845
  %arrayidx63 = getelementptr inbounds [4 x float], [4 x float]* %131, i64 1, !dbg !4845
  %arrayidx64 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx63, i64 0, i64 2, !dbg !4845
  store float %fneg62, float* %arrayidx64, align 4, !dbg !4846
  %132 = load float, float* %a1, align 4, !dbg !4847
  %133 = load float, float* %a2, align 4, !dbg !4848
  %134 = load float, float* %a4, align 4, !dbg !4849
  %135 = load float, float* %b1, align 4, !dbg !4850
  %136 = load float, float* %b2, align 4, !dbg !4851
  %137 = load float, float* %b4, align 4, !dbg !4852
  %138 = load float, float* %d1, align 4, !dbg !4853
  %139 = load float, float* %d2, align 4, !dbg !4854
  %140 = load float, float* %d4, align 4, !dbg !4855
  %call65 = call float @determinant_m3(float %132, float %133, float %134, float %135, float %136, float %137, float %138, float %139, float %140), !dbg !4856
  %141 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4857
  %arrayidx66 = getelementptr inbounds [4 x float], [4 x float]* %141, i64 2, !dbg !4857
  %arrayidx67 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx66, i64 0, i64 2, !dbg !4857
  store float %call65, float* %arrayidx67, align 4, !dbg !4858
  %142 = load float, float* %a1, align 4, !dbg !4859
  %143 = load float, float* %a2, align 4, !dbg !4860
  %144 = load float, float* %a4, align 4, !dbg !4861
  %145 = load float, float* %b1, align 4, !dbg !4862
  %146 = load float, float* %b2, align 4, !dbg !4863
  %147 = load float, float* %b4, align 4, !dbg !4864
  %148 = load float, float* %c1, align 4, !dbg !4865
  %149 = load float, float* %c2, align 4, !dbg !4866
  %150 = load float, float* %c4, align 4, !dbg !4867
  %call68 = call float @determinant_m3(float %142, float %143, float %144, float %145, float %146, float %147, float %148, float %149, float %150), !dbg !4868
  %fneg69 = fneg float %call68, !dbg !4869
  %151 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4870
  %arrayidx70 = getelementptr inbounds [4 x float], [4 x float]* %151, i64 3, !dbg !4870
  %arrayidx71 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx70, i64 0, i64 2, !dbg !4870
  store float %fneg69, float* %arrayidx71, align 4, !dbg !4871
  %152 = load float, float* %b1, align 4, !dbg !4872
  %153 = load float, float* %b2, align 4, !dbg !4873
  %154 = load float, float* %b3, align 4, !dbg !4874
  %155 = load float, float* %c1, align 4, !dbg !4875
  %156 = load float, float* %c2, align 4, !dbg !4876
  %157 = load float, float* %c3, align 4, !dbg !4877
  %158 = load float, float* %d1, align 4, !dbg !4878
  %159 = load float, float* %d2, align 4, !dbg !4879
  %160 = load float, float* %d3, align 4, !dbg !4880
  %call72 = call float @determinant_m3(float %152, float %153, float %154, float %155, float %156, float %157, float %158, float %159, float %160), !dbg !4881
  %fneg73 = fneg float %call72, !dbg !4882
  %161 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4883
  %arrayidx74 = getelementptr inbounds [4 x float], [4 x float]* %161, i64 0, !dbg !4883
  %arrayidx75 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx74, i64 0, i64 3, !dbg !4883
  store float %fneg73, float* %arrayidx75, align 4, !dbg !4884
  %162 = load float, float* %a1, align 4, !dbg !4885
  %163 = load float, float* %a2, align 4, !dbg !4886
  %164 = load float, float* %a3, align 4, !dbg !4887
  %165 = load float, float* %c1, align 4, !dbg !4888
  %166 = load float, float* %c2, align 4, !dbg !4889
  %167 = load float, float* %c3, align 4, !dbg !4890
  %168 = load float, float* %d1, align 4, !dbg !4891
  %169 = load float, float* %d2, align 4, !dbg !4892
  %170 = load float, float* %d3, align 4, !dbg !4893
  %call76 = call float @determinant_m3(float %162, float %163, float %164, float %165, float %166, float %167, float %168, float %169, float %170), !dbg !4894
  %171 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4895
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %171, i64 1, !dbg !4895
  %arrayidx78 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx77, i64 0, i64 3, !dbg !4895
  store float %call76, float* %arrayidx78, align 4, !dbg !4896
  %172 = load float, float* %a1, align 4, !dbg !4897
  %173 = load float, float* %a2, align 4, !dbg !4898
  %174 = load float, float* %a3, align 4, !dbg !4899
  %175 = load float, float* %b1, align 4, !dbg !4900
  %176 = load float, float* %b2, align 4, !dbg !4901
  %177 = load float, float* %b3, align 4, !dbg !4902
  %178 = load float, float* %d1, align 4, !dbg !4903
  %179 = load float, float* %d2, align 4, !dbg !4904
  %180 = load float, float* %d3, align 4, !dbg !4905
  %call79 = call float @determinant_m3(float %172, float %173, float %174, float %175, float %176, float %177, float %178, float %179, float %180), !dbg !4906
  %fneg80 = fneg float %call79, !dbg !4907
  %181 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4908
  %arrayidx81 = getelementptr inbounds [4 x float], [4 x float]* %181, i64 2, !dbg !4908
  %arrayidx82 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx81, i64 0, i64 3, !dbg !4908
  store float %fneg80, float* %arrayidx82, align 4, !dbg !4909
  %182 = load float, float* %a1, align 4, !dbg !4910
  %183 = load float, float* %a2, align 4, !dbg !4911
  %184 = load float, float* %a3, align 4, !dbg !4912
  %185 = load float, float* %b1, align 4, !dbg !4913
  %186 = load float, float* %b2, align 4, !dbg !4914
  %187 = load float, float* %b3, align 4, !dbg !4915
  %188 = load float, float* %c1, align 4, !dbg !4916
  %189 = load float, float* %c2, align 4, !dbg !4917
  %190 = load float, float* %c3, align 4, !dbg !4918
  %call83 = call float @determinant_m3(float %182, float %183, float %184, float %185, float %186, float %187, float %188, float %189, float %190), !dbg !4919
  %191 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !4920
  %arrayidx84 = getelementptr inbounds [4 x float], [4 x float]* %191, i64 3, !dbg !4920
  %arrayidx85 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx84, i64 0, i64 3, !dbg !4920
  store float %call83, float* %arrayidx85, align 4, !dbg !4921
  ret void, !dbg !4922
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @determinant_m3(float %a1, float %a2, float %a3, float %b1, float %b2, float %b3, float %c1, float %c2, float %c3) #0 !dbg !4923 {
entry:
  %a1.addr = alloca float, align 4
  %a2.addr = alloca float, align 4
  %a3.addr = alloca float, align 4
  %b1.addr = alloca float, align 4
  %b2.addr = alloca float, align 4
  %b3.addr = alloca float, align 4
  %c1.addr = alloca float, align 4
  %c2.addr = alloca float, align 4
  %c3.addr = alloca float, align 4
  %ans = alloca float, align 4
  store float %a1, float* %a1.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a1.addr, metadata !4926, metadata !DIExpression()), !dbg !4927
  store float %a2, float* %a2.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a2.addr, metadata !4928, metadata !DIExpression()), !dbg !4929
  store float %a3, float* %a3.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a3.addr, metadata !4930, metadata !DIExpression()), !dbg !4931
  store float %b1, float* %b1.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b1.addr, metadata !4932, metadata !DIExpression()), !dbg !4933
  store float %b2, float* %b2.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b2.addr, metadata !4934, metadata !DIExpression()), !dbg !4935
  store float %b3, float* %b3.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b3.addr, metadata !4936, metadata !DIExpression()), !dbg !4937
  store float %c1, float* %c1.addr, align 4
  call void @llvm.dbg.declare(metadata float* %c1.addr, metadata !4938, metadata !DIExpression()), !dbg !4939
  store float %c2, float* %c2.addr, align 4
  call void @llvm.dbg.declare(metadata float* %c2.addr, metadata !4940, metadata !DIExpression()), !dbg !4941
  store float %c3, float* %c3.addr, align 4
  call void @llvm.dbg.declare(metadata float* %c3.addr, metadata !4942, metadata !DIExpression()), !dbg !4943
  call void @llvm.dbg.declare(metadata float* %ans, metadata !4944, metadata !DIExpression()), !dbg !4945
  %0 = load float, float* %a1.addr, align 4, !dbg !4946
  %1 = load float, float* %b2.addr, align 4, !dbg !4947
  %2 = load float, float* %b3.addr, align 4, !dbg !4948
  %3 = load float, float* %c2.addr, align 4, !dbg !4949
  %4 = load float, float* %c3.addr, align 4, !dbg !4950
  %call = call float @determinant_m2(float %1, float %2, float %3, float %4), !dbg !4951
  %mul = fmul float %0, %call, !dbg !4952
  %5 = load float, float* %b1.addr, align 4, !dbg !4953
  %6 = load float, float* %a2.addr, align 4, !dbg !4954
  %7 = load float, float* %a3.addr, align 4, !dbg !4955
  %8 = load float, float* %c2.addr, align 4, !dbg !4956
  %9 = load float, float* %c3.addr, align 4, !dbg !4957
  %call1 = call float @determinant_m2(float %6, float %7, float %8, float %9), !dbg !4958
  %mul2 = fmul float %5, %call1, !dbg !4959
  %sub = fsub float %mul, %mul2, !dbg !4960
  %10 = load float, float* %c1.addr, align 4, !dbg !4961
  %11 = load float, float* %a2.addr, align 4, !dbg !4962
  %12 = load float, float* %a3.addr, align 4, !dbg !4963
  %13 = load float, float* %b2.addr, align 4, !dbg !4964
  %14 = load float, float* %b3.addr, align 4, !dbg !4965
  %call3 = call float @determinant_m2(float %11, float %12, float %13, float %14), !dbg !4966
  %mul4 = fmul float %10, %call3, !dbg !4967
  %add = fadd float %sub, %mul4, !dbg !4968
  store float %add, float* %ans, align 4, !dbg !4969
  %15 = load float, float* %ans, align 4, !dbg !4970
  ret float %15, !dbg !4971
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @determinant_m2(float %a, float %b, float %c, float %d) #0 !dbg !4972 {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  %c.addr = alloca float, align 4
  %d.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr, metadata !4975, metadata !DIExpression()), !dbg !4976
  store float %b, float* %b.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b.addr, metadata !4977, metadata !DIExpression()), !dbg !4978
  store float %c, float* %c.addr, align 4
  call void @llvm.dbg.declare(metadata float* %c.addr, metadata !4979, metadata !DIExpression()), !dbg !4980
  store float %d, float* %d.addr, align 4
  call void @llvm.dbg.declare(metadata float* %d.addr, metadata !4981, metadata !DIExpression()), !dbg !4982
  %0 = load float, float* %a.addr, align 4, !dbg !4983
  %1 = load float, float* %d.addr, align 4, !dbg !4984
  %mul = fmul float %0, %1, !dbg !4985
  %2 = load float, float* %b.addr, align 4, !dbg !4986
  %3 = load float, float* %c.addr, align 4, !dbg !4987
  %mul1 = fmul float %2, %3, !dbg !4988
  %sub = fsub float %mul, %mul1, !dbg !4989
  ret float %sub, !dbg !4990
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @determinant_m4([4 x float]* %m) #0 !dbg !4991 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %ans = alloca float, align 4
  %a1 = alloca float, align 4
  %a2 = alloca float, align 4
  %a3 = alloca float, align 4
  %a4 = alloca float, align 4
  %b1 = alloca float, align 4
  %b2 = alloca float, align 4
  %b3 = alloca float, align 4
  %b4 = alloca float, align 4
  %c1 = alloca float, align 4
  %c2 = alloca float, align 4
  %c3 = alloca float, align 4
  %c4 = alloca float, align 4
  %d1 = alloca float, align 4
  %d2 = alloca float, align 4
  %d3 = alloca float, align 4
  %d4 = alloca float, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !4994, metadata !DIExpression()), !dbg !4995
  call void @llvm.dbg.declare(metadata float* %ans, metadata !4996, metadata !DIExpression()), !dbg !4997
  call void @llvm.dbg.declare(metadata float* %a1, metadata !4998, metadata !DIExpression()), !dbg !4999
  call void @llvm.dbg.declare(metadata float* %a2, metadata !5000, metadata !DIExpression()), !dbg !5001
  call void @llvm.dbg.declare(metadata float* %a3, metadata !5002, metadata !DIExpression()), !dbg !5003
  call void @llvm.dbg.declare(metadata float* %a4, metadata !5004, metadata !DIExpression()), !dbg !5005
  call void @llvm.dbg.declare(metadata float* %b1, metadata !5006, metadata !DIExpression()), !dbg !5007
  call void @llvm.dbg.declare(metadata float* %b2, metadata !5008, metadata !DIExpression()), !dbg !5009
  call void @llvm.dbg.declare(metadata float* %b3, metadata !5010, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.declare(metadata float* %b4, metadata !5012, metadata !DIExpression()), !dbg !5013
  call void @llvm.dbg.declare(metadata float* %c1, metadata !5014, metadata !DIExpression()), !dbg !5015
  call void @llvm.dbg.declare(metadata float* %c2, metadata !5016, metadata !DIExpression()), !dbg !5017
  call void @llvm.dbg.declare(metadata float* %c3, metadata !5018, metadata !DIExpression()), !dbg !5019
  call void @llvm.dbg.declare(metadata float* %c4, metadata !5020, metadata !DIExpression()), !dbg !5021
  call void @llvm.dbg.declare(metadata float* %d1, metadata !5022, metadata !DIExpression()), !dbg !5023
  call void @llvm.dbg.declare(metadata float* %d2, metadata !5024, metadata !DIExpression()), !dbg !5025
  call void @llvm.dbg.declare(metadata float* %d3, metadata !5026, metadata !DIExpression()), !dbg !5027
  call void @llvm.dbg.declare(metadata float* %d4, metadata !5028, metadata !DIExpression()), !dbg !5029
  %0 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5030
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !5030
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !5030
  %1 = load float, float* %arrayidx1, align 4, !dbg !5030
  store float %1, float* %a1, align 4, !dbg !5031
  %2 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5032
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, !dbg !5032
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 1, !dbg !5032
  %3 = load float, float* %arrayidx3, align 4, !dbg !5032
  store float %3, float* %b1, align 4, !dbg !5033
  %4 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5034
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !5034
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 2, !dbg !5034
  %5 = load float, float* %arrayidx5, align 4, !dbg !5034
  store float %5, float* %c1, align 4, !dbg !5035
  %6 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5036
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !5036
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 3, !dbg !5036
  %7 = load float, float* %arrayidx7, align 4, !dbg !5036
  store float %7, float* %d1, align 4, !dbg !5037
  %8 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5038
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !5038
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 0, !dbg !5038
  %9 = load float, float* %arrayidx9, align 4, !dbg !5038
  store float %9, float* %a2, align 4, !dbg !5039
  %10 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5040
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !5040
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 1, !dbg !5040
  %11 = load float, float* %arrayidx11, align 4, !dbg !5040
  store float %11, float* %b2, align 4, !dbg !5041
  %12 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5042
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 1, !dbg !5042
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 2, !dbg !5042
  %13 = load float, float* %arrayidx13, align 4, !dbg !5042
  store float %13, float* %c2, align 4, !dbg !5043
  %14 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5044
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 1, !dbg !5044
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 3, !dbg !5044
  %15 = load float, float* %arrayidx15, align 4, !dbg !5044
  store float %15, float* %d2, align 4, !dbg !5045
  %16 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5046
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 2, !dbg !5046
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 0, !dbg !5046
  %17 = load float, float* %arrayidx17, align 4, !dbg !5046
  store float %17, float* %a3, align 4, !dbg !5047
  %18 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5048
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 2, !dbg !5048
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 1, !dbg !5048
  %19 = load float, float* %arrayidx19, align 4, !dbg !5048
  store float %19, float* %b3, align 4, !dbg !5049
  %20 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5050
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 2, !dbg !5050
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 2, !dbg !5050
  %21 = load float, float* %arrayidx21, align 4, !dbg !5050
  store float %21, float* %c3, align 4, !dbg !5051
  %22 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5052
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %22, i64 2, !dbg !5052
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 3, !dbg !5052
  %23 = load float, float* %arrayidx23, align 4, !dbg !5052
  store float %23, float* %d3, align 4, !dbg !5053
  %24 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5054
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 3, !dbg !5054
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !5054
  %25 = load float, float* %arrayidx25, align 4, !dbg !5054
  store float %25, float* %a4, align 4, !dbg !5055
  %26 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5056
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 3, !dbg !5056
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 1, !dbg !5056
  %27 = load float, float* %arrayidx27, align 4, !dbg !5056
  store float %27, float* %b4, align 4, !dbg !5057
  %28 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5058
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 3, !dbg !5058
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 2, !dbg !5058
  %29 = load float, float* %arrayidx29, align 4, !dbg !5058
  store float %29, float* %c4, align 4, !dbg !5059
  %30 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5060
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %30, i64 3, !dbg !5060
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 3, !dbg !5060
  %31 = load float, float* %arrayidx31, align 4, !dbg !5060
  store float %31, float* %d4, align 4, !dbg !5061
  %32 = load float, float* %a1, align 4, !dbg !5062
  %33 = load float, float* %b2, align 4, !dbg !5063
  %34 = load float, float* %b3, align 4, !dbg !5064
  %35 = load float, float* %b4, align 4, !dbg !5065
  %36 = load float, float* %c2, align 4, !dbg !5066
  %37 = load float, float* %c3, align 4, !dbg !5067
  %38 = load float, float* %c4, align 4, !dbg !5068
  %39 = load float, float* %d2, align 4, !dbg !5069
  %40 = load float, float* %d3, align 4, !dbg !5070
  %41 = load float, float* %d4, align 4, !dbg !5071
  %call = call float @determinant_m3(float %33, float %34, float %35, float %36, float %37, float %38, float %39, float %40, float %41), !dbg !5072
  %mul = fmul float %32, %call, !dbg !5073
  %42 = load float, float* %b1, align 4, !dbg !5074
  %43 = load float, float* %a2, align 4, !dbg !5075
  %44 = load float, float* %a3, align 4, !dbg !5076
  %45 = load float, float* %a4, align 4, !dbg !5077
  %46 = load float, float* %c2, align 4, !dbg !5078
  %47 = load float, float* %c3, align 4, !dbg !5079
  %48 = load float, float* %c4, align 4, !dbg !5080
  %49 = load float, float* %d2, align 4, !dbg !5081
  %50 = load float, float* %d3, align 4, !dbg !5082
  %51 = load float, float* %d4, align 4, !dbg !5083
  %call32 = call float @determinant_m3(float %43, float %44, float %45, float %46, float %47, float %48, float %49, float %50, float %51), !dbg !5084
  %mul33 = fmul float %42, %call32, !dbg !5085
  %sub = fsub float %mul, %mul33, !dbg !5086
  %52 = load float, float* %c1, align 4, !dbg !5087
  %53 = load float, float* %a2, align 4, !dbg !5088
  %54 = load float, float* %a3, align 4, !dbg !5089
  %55 = load float, float* %a4, align 4, !dbg !5090
  %56 = load float, float* %b2, align 4, !dbg !5091
  %57 = load float, float* %b3, align 4, !dbg !5092
  %58 = load float, float* %b4, align 4, !dbg !5093
  %59 = load float, float* %d2, align 4, !dbg !5094
  %60 = load float, float* %d3, align 4, !dbg !5095
  %61 = load float, float* %d4, align 4, !dbg !5096
  %call34 = call float @determinant_m3(float %53, float %54, float %55, float %56, float %57, float %58, float %59, float %60, float %61), !dbg !5097
  %mul35 = fmul float %52, %call34, !dbg !5098
  %add = fadd float %sub, %mul35, !dbg !5099
  %62 = load float, float* %d1, align 4, !dbg !5100
  %63 = load float, float* %a2, align 4, !dbg !5101
  %64 = load float, float* %a3, align 4, !dbg !5102
  %65 = load float, float* %a4, align 4, !dbg !5103
  %66 = load float, float* %b2, align 4, !dbg !5104
  %67 = load float, float* %b3, align 4, !dbg !5105
  %68 = load float, float* %b4, align 4, !dbg !5106
  %69 = load float, float* %c2, align 4, !dbg !5107
  %70 = load float, float* %c3, align 4, !dbg !5108
  %71 = load float, float* %c4, align 4, !dbg !5109
  %call36 = call float @determinant_m3(float %63, float %64, float %65, float %66, float %67, float %68, float %69, float %70, float %71), !dbg !5110
  %mul37 = fmul float %62, %call36, !dbg !5111
  %sub38 = fsub float %add, %mul37, !dbg !5112
  store float %sub38, float* %ans, align 4, !dbg !5113
  %72 = load float, float* %ans, align 4, !dbg !5114
  ret float %72, !dbg !5115
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @size_to_mat3([3 x float]* %mat, float* %size) #0 !dbg !5116 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %size.addr = alloca float*, align 8
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !5119, metadata !DIExpression()), !dbg !5120
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !5121, metadata !DIExpression()), !dbg !5122
  %0 = load float*, float** %size.addr, align 8, !dbg !5123
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !5123
  %1 = load float, float* %arrayidx, align 4, !dbg !5123
  %2 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5124
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, !dbg !5124
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx1, i64 0, i64 0, !dbg !5124
  store float %1, float* %arrayidx2, align 4, !dbg !5125
  %3 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5126
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, !dbg !5126
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx3, i64 0, i64 1, !dbg !5126
  store float 0.000000e+00, float* %arrayidx4, align 4, !dbg !5127
  %4 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5128
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, !dbg !5128
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 2, !dbg !5128
  store float 0.000000e+00, float* %arrayidx6, align 4, !dbg !5129
  %5 = load float*, float** %size.addr, align 8, !dbg !5130
  %arrayidx7 = getelementptr inbounds float, float* %5, i64 1, !dbg !5130
  %6 = load float, float* %arrayidx7, align 4, !dbg !5130
  %7 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5131
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 1, !dbg !5131
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 1, !dbg !5131
  store float %6, float* %arrayidx9, align 4, !dbg !5132
  %8 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5133
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 1, !dbg !5133
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 0, !dbg !5133
  store float 0.000000e+00, float* %arrayidx11, align 4, !dbg !5134
  %9 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5135
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 1, !dbg !5135
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 2, !dbg !5135
  store float 0.000000e+00, float* %arrayidx13, align 4, !dbg !5136
  %10 = load float*, float** %size.addr, align 8, !dbg !5137
  %arrayidx14 = getelementptr inbounds float, float* %10, i64 2, !dbg !5137
  %11 = load float, float* %arrayidx14, align 4, !dbg !5137
  %12 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5138
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %12, i64 2, !dbg !5138
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx15, i64 0, i64 2, !dbg !5138
  store float %11, float* %arrayidx16, align 4, !dbg !5139
  %13 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5140
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 2, !dbg !5140
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx17, i64 0, i64 1, !dbg !5140
  store float 0.000000e+00, float* %arrayidx18, align 4, !dbg !5141
  %14 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5142
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %14, i64 2, !dbg !5142
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx19, i64 0, i64 0, !dbg !5142
  store float 0.000000e+00, float* %arrayidx20, align 4, !dbg !5143
  ret void, !dbg !5144
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @size_to_mat4([4 x float]* %mat, float* %size) #0 !dbg !5145 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %size.addr = alloca float*, align 8
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5148, metadata !DIExpression()), !dbg !5149
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !5150, metadata !DIExpression()), !dbg !5151
  %0 = load float*, float** %size.addr, align 8, !dbg !5152
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !5152
  %1 = load float, float* %arrayidx, align 4, !dbg !5152
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5153
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, !dbg !5153
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 0, !dbg !5153
  store float %1, float* %arrayidx2, align 4, !dbg !5154
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5155
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, !dbg !5155
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 1, !dbg !5155
  store float 0.000000e+00, float* %arrayidx4, align 4, !dbg !5156
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5157
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, !dbg !5157
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 2, !dbg !5157
  store float 0.000000e+00, float* %arrayidx6, align 4, !dbg !5158
  %5 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5159
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !5159
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 3, !dbg !5159
  store float 0.000000e+00, float* %arrayidx8, align 4, !dbg !5160
  %6 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5161
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 1, !dbg !5161
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 0, !dbg !5161
  store float 0.000000e+00, float* %arrayidx10, align 4, !dbg !5162
  %7 = load float*, float** %size.addr, align 8, !dbg !5163
  %arrayidx11 = getelementptr inbounds float, float* %7, i64 1, !dbg !5163
  %8 = load float, float* %arrayidx11, align 4, !dbg !5163
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5164
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 1, !dbg !5164
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 1, !dbg !5164
  store float %8, float* %arrayidx13, align 4, !dbg !5165
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5166
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !5166
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 2, !dbg !5166
  store float 0.000000e+00, float* %arrayidx15, align 4, !dbg !5167
  %11 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5168
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 1, !dbg !5168
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 3, !dbg !5168
  store float 0.000000e+00, float* %arrayidx17, align 4, !dbg !5169
  %12 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5170
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 2, !dbg !5170
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !5170
  store float 0.000000e+00, float* %arrayidx19, align 4, !dbg !5171
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5172
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !5172
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 1, !dbg !5172
  store float 0.000000e+00, float* %arrayidx21, align 4, !dbg !5173
  %14 = load float*, float** %size.addr, align 8, !dbg !5174
  %arrayidx22 = getelementptr inbounds float, float* %14, i64 2, !dbg !5174
  %15 = load float, float* %arrayidx22, align 4, !dbg !5174
  %16 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5175
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 2, !dbg !5175
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 2, !dbg !5175
  store float %15, float* %arrayidx24, align 4, !dbg !5176
  %17 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5177
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 2, !dbg !5177
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 3, !dbg !5177
  store float 0.000000e+00, float* %arrayidx26, align 4, !dbg !5178
  %18 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5179
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 3, !dbg !5179
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx27, i64 0, i64 0, !dbg !5179
  store float 0.000000e+00, float* %arrayidx28, align 4, !dbg !5180
  %19 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5181
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 3, !dbg !5181
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 1, !dbg !5181
  store float 0.000000e+00, float* %arrayidx30, align 4, !dbg !5182
  %20 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5183
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 3, !dbg !5183
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 2, !dbg !5183
  store float 0.000000e+00, float* %arrayidx32, align 4, !dbg !5184
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5185
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 3, !dbg !5185
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 3, !dbg !5185
  store float 1.000000e+00, float* %arrayidx34, align 4, !dbg !5186
  ret void, !dbg !5187
}

; Function Attrs: noinline nounwind uwtable
define internal float @len_v3(float* %a) #0 !dbg !5188 {
entry:
  %a.addr = alloca float*, align 8
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  %0 = load float*, float** %a.addr, align 8, !dbg !5191
  %1 = load float*, float** %a.addr, align 8, !dbg !5192
  %call = call float @dot_v3v3(float* %0, float* %1), !dbg !5193
  %call1 = call float @sqrtf(float %call) #5, !dbg !5194
  ret float %call1, !dbg !5195
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @mat3_to_scale([3 x float]* %mat) #0 !dbg !5196 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %unit_vec = alloca [3 x float], align 4
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !5197, metadata !DIExpression()), !dbg !5198
  call void @llvm.dbg.declare(metadata [3 x float]* %unit_vec, metadata !5199, metadata !DIExpression()), !dbg !5200
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %unit_vec, i64 0, i64 0, !dbg !5201
  call void @copy_v3_fl(float* %arraydecay, float 0x3FE279A740000000), !dbg !5202
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5203
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %unit_vec, i64 0, i64 0, !dbg !5204
  call void @mul_m3_v3([3 x float]* %0, float* %arraydecay1), !dbg !5205
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %unit_vec, i64 0, i64 0, !dbg !5206
  %call = call float @len_v3(float* %arraydecay2), !dbg !5207
  ret float %call, !dbg !5208
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v3_fl(float* %r, float %f) #0 !dbg !5209 {
entry:
  %r.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !5210, metadata !DIExpression()), !dbg !5211
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !5212, metadata !DIExpression()), !dbg !5213
  %0 = load float, float* %f.addr, align 4, !dbg !5214
  %1 = load float*, float** %r.addr, align 8, !dbg !5215
  %arrayidx = getelementptr inbounds float, float* %1, i64 0, !dbg !5215
  store float %0, float* %arrayidx, align 4, !dbg !5216
  %2 = load float, float* %f.addr, align 4, !dbg !5217
  %3 = load float*, float** %r.addr, align 8, !dbg !5218
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 1, !dbg !5218
  store float %2, float* %arrayidx1, align 4, !dbg !5219
  %4 = load float, float* %f.addr, align 4, !dbg !5220
  %5 = load float*, float** %r.addr, align 8, !dbg !5221
  %arrayidx2 = getelementptr inbounds float, float* %5, i64 2, !dbg !5221
  store float %4, float* %arrayidx2, align 4, !dbg !5222
  ret void, !dbg !5223
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @mat4_to_scale([4 x float]* %mat) #0 !dbg !5224 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %unit_vec = alloca [3 x float], align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5225, metadata !DIExpression()), !dbg !5226
  call void @llvm.dbg.declare(metadata [3 x float]* %unit_vec, metadata !5227, metadata !DIExpression()), !dbg !5228
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %unit_vec, i64 0, i64 0, !dbg !5229
  call void @copy_v3_fl(float* %arraydecay, float 0x3FE279A740000000), !dbg !5230
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5231
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %unit_vec, i64 0, i64 0, !dbg !5232
  call void @mul_mat3_m4_v3([4 x float]* %0, float* %arraydecay1), !dbg !5233
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %unit_vec, i64 0, i64 0, !dbg !5234
  %call = call float @len_v3(float* %arraydecay2), !dbg !5235
  ret float %call, !dbg !5236
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mat3_to_rot_size([3 x float]* %rot, float* %size, [3 x float]* %mat3) #0 !dbg !5237 {
entry:
  %rot.addr = alloca [3 x float]*, align 8
  %size.addr = alloca float*, align 8
  %mat3.addr = alloca [3 x float]*, align 8
  %mat3_n = alloca [3 x [3 x float]], align 16
  %imat3_n = alloca [3 x [3 x float]], align 16
  store [3 x float]* %rot, [3 x float]** %rot.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %rot.addr, metadata !5240, metadata !DIExpression()), !dbg !5241
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !5242, metadata !DIExpression()), !dbg !5243
  store [3 x float]* %mat3, [3 x float]** %mat3.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat3.addr, metadata !5244, metadata !DIExpression()), !dbg !5245
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %mat3_n, metadata !5246, metadata !DIExpression()), !dbg !5247
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %imat3_n, metadata !5248, metadata !DIExpression()), !dbg !5249
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5250
  %0 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5251
  call void @normalize_m3_m3([3 x float]* %arraydecay, [3 x float]* %0), !dbg !5252
  %1 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5253
  %call = call zeroext i8 @is_negative_m3([3 x float]* %1), !dbg !5255
  %tobool = icmp ne i8 %call, 0, !dbg !5255
  br i1 %tobool, label %if.then, label %if.end, !dbg !5256

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5257
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !5257
  call void @negate_v3(float* %arraydecay1), !dbg !5259
  %arrayidx2 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 1, !dbg !5260
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !5260
  call void @negate_v3(float* %arraydecay3), !dbg !5261
  %arrayidx4 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 2, !dbg !5262
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 0, !dbg !5262
  call void @negate_v3(float* %arraydecay5), !dbg !5263
  br label %if.end, !dbg !5264

if.end:                                           ; preds = %if.then, %entry
  %2 = load [3 x float]*, [3 x float]** %rot.addr, align 8, !dbg !5265
  %arraydecay6 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5266
  call void @copy_m3_m3([3 x float]* %2, [3 x float]* %arraydecay6), !dbg !5267
  %arraydecay7 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %imat3_n, i64 0, i64 0, !dbg !5268
  %arraydecay8 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5269
  %call9 = call zeroext i8 @invert_m3_m3([3 x float]* %arraydecay7, [3 x float]* %arraydecay8), !dbg !5270
  %3 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5271
  %arraydecay10 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %imat3_n, i64 0, i64 0, !dbg !5272
  %4 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5273
  call void @mul_m3_m3m3([3 x float]* %3, [3 x float]* %arraydecay10, [3 x float]* %4), !dbg !5274
  %5 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5275
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, !dbg !5275
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx11, i64 0, i64 0, !dbg !5275
  %6 = load float, float* %arrayidx12, align 4, !dbg !5275
  %7 = load float*, float** %size.addr, align 8, !dbg !5276
  %arrayidx13 = getelementptr inbounds float, float* %7, i64 0, !dbg !5276
  store float %6, float* %arrayidx13, align 4, !dbg !5277
  %8 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5278
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 1, !dbg !5278
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx14, i64 0, i64 1, !dbg !5278
  %9 = load float, float* %arrayidx15, align 4, !dbg !5278
  %10 = load float*, float** %size.addr, align 8, !dbg !5279
  %arrayidx16 = getelementptr inbounds float, float* %10, i64 1, !dbg !5279
  store float %9, float* %arrayidx16, align 4, !dbg !5280
  %11 = load [3 x float]*, [3 x float]** %mat3.addr, align 8, !dbg !5281
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 2, !dbg !5281
  %arrayidx18 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx17, i64 0, i64 2, !dbg !5281
  %12 = load float, float* %arrayidx18, align 4, !dbg !5281
  %13 = load float*, float** %size.addr, align 8, !dbg !5282
  %arrayidx19 = getelementptr inbounds float, float* %13, i64 2, !dbg !5282
  store float %12, float* %arrayidx19, align 4, !dbg !5283
  ret void, !dbg !5284
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_negative_m3([3 x float]* %mat) #0 !dbg !5285 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  %vec = alloca [3 x float], align 4
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !5286, metadata !DIExpression()), !dbg !5287
  call void @llvm.dbg.declare(metadata [3 x float]* %vec, metadata !5288, metadata !DIExpression()), !dbg !5289
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !5290
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5291
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !5291
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !5291
  %1 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5292
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %1, i64 1, !dbg !5292
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !5292
  call void @cross_v3_v3v3(float* %arraydecay, float* %arraydecay1, float* %arraydecay3), !dbg !5293
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !5294
  %2 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5295
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, !dbg !5295
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 0, !dbg !5295
  %call = call float @dot_v3v3(float* %arraydecay4, float* %arraydecay6), !dbg !5296
  %cmp = fcmp olt float %call, 0.000000e+00, !dbg !5297
  %conv = zext i1 %cmp to i32, !dbg !5297
  %conv7 = trunc i32 %conv to i8, !dbg !5298
  ret i8 %conv7, !dbg !5299
}

; Function Attrs: noinline nounwind uwtable
define internal void @negate_v3(float* %r) #0 !dbg !5300 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !5303, metadata !DIExpression()), !dbg !5304
  %0 = load float*, float** %r.addr, align 8, !dbg !5305
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !5305
  %1 = load float, float* %arrayidx, align 4, !dbg !5305
  %fneg = fneg float %1, !dbg !5306
  %2 = load float*, float** %r.addr, align 8, !dbg !5307
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !5307
  store float %fneg, float* %arrayidx1, align 4, !dbg !5308
  %3 = load float*, float** %r.addr, align 8, !dbg !5309
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !5309
  %4 = load float, float* %arrayidx2, align 4, !dbg !5309
  %fneg3 = fneg float %4, !dbg !5310
  %5 = load float*, float** %r.addr, align 8, !dbg !5311
  %arrayidx4 = getelementptr inbounds float, float* %5, i64 1, !dbg !5311
  store float %fneg3, float* %arrayidx4, align 4, !dbg !5312
  %6 = load float*, float** %r.addr, align 8, !dbg !5313
  %arrayidx5 = getelementptr inbounds float, float* %6, i64 2, !dbg !5313
  %7 = load float, float* %arrayidx5, align 4, !dbg !5313
  %fneg6 = fneg float %7, !dbg !5314
  %8 = load float*, float** %r.addr, align 8, !dbg !5315
  %arrayidx7 = getelementptr inbounds float, float* %8, i64 2, !dbg !5315
  store float %fneg6, float* %arrayidx7, align 4, !dbg !5316
  ret void, !dbg !5317
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mat4_to_loc_rot_size(float* %loc, [3 x float]* %rot, float* %size, [4 x float]* %wmat) #0 !dbg !5318 {
entry:
  %loc.addr = alloca float*, align 8
  %rot.addr = alloca [3 x float]*, align 8
  %size.addr = alloca float*, align 8
  %wmat.addr = alloca [4 x float]*, align 8
  %mat3 = alloca [3 x [3 x float]], align 16
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !5321, metadata !DIExpression()), !dbg !5322
  store [3 x float]* %rot, [3 x float]** %rot.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %rot.addr, metadata !5323, metadata !DIExpression()), !dbg !5324
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !5325, metadata !DIExpression()), !dbg !5326
  store [4 x float]* %wmat, [4 x float]** %wmat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %wmat.addr, metadata !5327, metadata !DIExpression()), !dbg !5328
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %mat3, metadata !5329, metadata !DIExpression()), !dbg !5330
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3, i64 0, i64 0, !dbg !5331
  %0 = load [4 x float]*, [4 x float]** %wmat.addr, align 8, !dbg !5332
  call void @copy_m3_m4([3 x float]* %arraydecay, [4 x float]* %0), !dbg !5333
  %1 = load [3 x float]*, [3 x float]** %rot.addr, align 8, !dbg !5334
  %2 = load float*, float** %size.addr, align 8, !dbg !5335
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3, i64 0, i64 0, !dbg !5336
  call void @mat3_to_rot_size([3 x float]* %1, float* %2, [3 x float]* %arraydecay1), !dbg !5337
  %3 = load float*, float** %loc.addr, align 8, !dbg !5338
  %4 = load [4 x float]*, [4 x float]** %wmat.addr, align 8, !dbg !5339
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %4, i64 3, !dbg !5339
  %arraydecay2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !5339
  call void @copy_v3_v3(float* %3, float* %arraydecay2), !dbg !5340
  ret void, !dbg !5341
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mat4_to_loc_quat(float* %loc, float* %quat, [4 x float]* %wmat) #0 !dbg !5342 {
entry:
  %loc.addr = alloca float*, align 8
  %quat.addr = alloca float*, align 8
  %wmat.addr = alloca [4 x float]*, align 8
  %mat3 = alloca [3 x [3 x float]], align 16
  %mat3_n = alloca [3 x [3 x float]], align 16
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !5345, metadata !DIExpression()), !dbg !5346
  store float* %quat, float** %quat.addr, align 8
  call void @llvm.dbg.declare(metadata float** %quat.addr, metadata !5347, metadata !DIExpression()), !dbg !5348
  store [4 x float]* %wmat, [4 x float]** %wmat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %wmat.addr, metadata !5349, metadata !DIExpression()), !dbg !5350
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %mat3, metadata !5351, metadata !DIExpression()), !dbg !5352
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %mat3_n, metadata !5353, metadata !DIExpression()), !dbg !5354
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3, i64 0, i64 0, !dbg !5355
  %0 = load [4 x float]*, [4 x float]** %wmat.addr, align 8, !dbg !5356
  call void @copy_m3_m4([3 x float]* %arraydecay, [4 x float]* %0), !dbg !5357
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5358
  %arraydecay2 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3, i64 0, i64 0, !dbg !5359
  call void @normalize_m3_m3([3 x float]* %arraydecay1, [3 x float]* %arraydecay2), !dbg !5360
  %arraydecay3 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3, i64 0, i64 0, !dbg !5361
  %call = call zeroext i8 @is_negative_m3([3 x float]* %arraydecay3), !dbg !5363
  %tobool = icmp ne i8 %call, 0, !dbg !5363
  br i1 %tobool, label %if.then, label %if.end, !dbg !5364

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5365
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !5365
  call void @negate_v3(float* %arraydecay4), !dbg !5367
  %arrayidx5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 1, !dbg !5368
  %arraydecay6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 0, !dbg !5368
  call void @negate_v3(float* %arraydecay6), !dbg !5369
  %arrayidx7 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 2, !dbg !5370
  %arraydecay8 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx7, i64 0, i64 0, !dbg !5370
  call void @negate_v3(float* %arraydecay8), !dbg !5371
  br label %if.end, !dbg !5372

if.end:                                           ; preds = %if.then, %entry
  %1 = load float*, float** %quat.addr, align 8, !dbg !5373
  %arraydecay9 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %mat3_n, i64 0, i64 0, !dbg !5374
  call void @mat3_to_quat(float* %1, [3 x float]* %arraydecay9), !dbg !5375
  %2 = load float*, float** %loc.addr, align 8, !dbg !5376
  %3 = load [4 x float]*, [4 x float]** %wmat.addr, align 8, !dbg !5377
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 3, !dbg !5377
  %arraydecay11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 0, !dbg !5377
  call void @copy_v3_v3(float* %2, float* %arraydecay11), !dbg !5378
  ret void, !dbg !5379
}

declare dso_local void @mat3_to_quat(float*, [3 x float]*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @mat4_decompose(float* %loc, float* %quat, float* %size, [4 x float]* %wmat) #0 !dbg !5380 {
entry:
  %loc.addr = alloca float*, align 8
  %quat.addr = alloca float*, align 8
  %size.addr = alloca float*, align 8
  %wmat.addr = alloca [4 x float]*, align 8
  %rot = alloca [3 x [3 x float]], align 16
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !5383, metadata !DIExpression()), !dbg !5384
  store float* %quat, float** %quat.addr, align 8
  call void @llvm.dbg.declare(metadata float** %quat.addr, metadata !5385, metadata !DIExpression()), !dbg !5386
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !5387, metadata !DIExpression()), !dbg !5388
  store [4 x float]* %wmat, [4 x float]** %wmat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %wmat.addr, metadata !5389, metadata !DIExpression()), !dbg !5390
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %rot, metadata !5391, metadata !DIExpression()), !dbg !5392
  %0 = load float*, float** %loc.addr, align 8, !dbg !5393
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rot, i64 0, i64 0, !dbg !5394
  %1 = load float*, float** %size.addr, align 8, !dbg !5395
  %2 = load [4 x float]*, [4 x float]** %wmat.addr, align 8, !dbg !5396
  call void @mat4_to_loc_rot_size(float* %0, [3 x float]* %arraydecay, float* %1, [4 x float]* %2), !dbg !5397
  %3 = load float*, float** %quat.addr, align 8, !dbg !5398
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rot, i64 0, i64 0, !dbg !5399
  call void @mat3_to_quat(float* %3, [3 x float]* %arraydecay1), !dbg !5400
  ret void, !dbg !5401
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scale_m3_fl([3 x float]* %m, float %scale) #0 !dbg !5402 {
entry:
  %m.addr = alloca [3 x float]*, align 8
  %scale.addr = alloca float, align 4
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !5403, metadata !DIExpression()), !dbg !5404
  store float %scale, float* %scale.addr, align 4
  call void @llvm.dbg.declare(metadata float* %scale.addr, metadata !5405, metadata !DIExpression()), !dbg !5406
  %0 = load float, float* %scale.addr, align 4, !dbg !5407
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5408
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %1, i64 2, !dbg !5408
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 2, !dbg !5408
  store float %0, float* %arrayidx1, align 4, !dbg !5409
  %2 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5410
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, !dbg !5410
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 1, !dbg !5410
  store float %0, float* %arrayidx3, align 4, !dbg !5411
  %3 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5412
  %arrayidx4 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, !dbg !5412
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx4, i64 0, i64 0, !dbg !5412
  store float %0, float* %arrayidx5, align 4, !dbg !5413
  %4 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5414
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, !dbg !5414
  %arrayidx7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 2, !dbg !5414
  store float 0.000000e+00, float* %arrayidx7, align 4, !dbg !5415
  %5 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5416
  %arrayidx8 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, !dbg !5416
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx8, i64 0, i64 1, !dbg !5416
  store float 0.000000e+00, float* %arrayidx9, align 4, !dbg !5417
  %6 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5418
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 1, !dbg !5418
  %arrayidx11 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx10, i64 0, i64 2, !dbg !5418
  store float 0.000000e+00, float* %arrayidx11, align 4, !dbg !5419
  %7 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5420
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 1, !dbg !5420
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 0, !dbg !5420
  store float 0.000000e+00, float* %arrayidx13, align 4, !dbg !5421
  %8 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5422
  %arrayidx14 = getelementptr inbounds [3 x float], [3 x float]* %8, i64 2, !dbg !5422
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx14, i64 0, i64 1, !dbg !5422
  store float 0.000000e+00, float* %arrayidx15, align 4, !dbg !5423
  %9 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !5424
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 2, !dbg !5424
  %arrayidx17 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx16, i64 0, i64 0, !dbg !5424
  store float 0.000000e+00, float* %arrayidx17, align 4, !dbg !5425
  ret void, !dbg !5426
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scale_m4_fl([4 x float]* %m, float %scale) #0 !dbg !5427 {
entry:
  %m.addr = alloca [4 x float]*, align 8
  %scale.addr = alloca float, align 4
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !5428, metadata !DIExpression()), !dbg !5429
  store float %scale, float* %scale.addr, align 4
  call void @llvm.dbg.declare(metadata float* %scale.addr, metadata !5430, metadata !DIExpression()), !dbg !5431
  %0 = load float, float* %scale.addr, align 4, !dbg !5432
  %1 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5433
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %1, i64 2, !dbg !5433
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 2, !dbg !5433
  store float %0, float* %arrayidx1, align 4, !dbg !5434
  %2 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5435
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 1, !dbg !5435
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 1, !dbg !5435
  store float %0, float* %arrayidx3, align 4, !dbg !5436
  %3 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5437
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, !dbg !5437
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 0, !dbg !5437
  store float %0, float* %arrayidx5, align 4, !dbg !5438
  %4 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5439
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 3, !dbg !5439
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 3, !dbg !5439
  store float 1.000000e+00, float* %arrayidx7, align 4, !dbg !5440
  %5 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5441
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, !dbg !5441
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 3, !dbg !5441
  store float 0.000000e+00, float* %arrayidx9, align 4, !dbg !5442
  %6 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5443
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, !dbg !5443
  %arrayidx11 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 2, !dbg !5443
  store float 0.000000e+00, float* %arrayidx11, align 4, !dbg !5444
  %7 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5445
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 0, !dbg !5445
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 1, !dbg !5445
  store float 0.000000e+00, float* %arrayidx13, align 4, !dbg !5446
  %8 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5447
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %8, i64 1, !dbg !5447
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 3, !dbg !5447
  store float 0.000000e+00, float* %arrayidx15, align 4, !dbg !5448
  %9 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5449
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 1, !dbg !5449
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx16, i64 0, i64 2, !dbg !5449
  store float 0.000000e+00, float* %arrayidx17, align 4, !dbg !5450
  %10 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5451
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 1, !dbg !5451
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 0, !dbg !5451
  store float 0.000000e+00, float* %arrayidx19, align 4, !dbg !5452
  %11 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5453
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 2, !dbg !5453
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx20, i64 0, i64 3, !dbg !5453
  store float 0.000000e+00, float* %arrayidx21, align 4, !dbg !5454
  %12 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5455
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 2, !dbg !5455
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx22, i64 0, i64 1, !dbg !5455
  store float 0.000000e+00, float* %arrayidx23, align 4, !dbg !5456
  %13 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5457
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !5457
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx24, i64 0, i64 0, !dbg !5457
  store float 0.000000e+00, float* %arrayidx25, align 4, !dbg !5458
  %14 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5459
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %14, i64 3, !dbg !5459
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 2, !dbg !5459
  store float 0.000000e+00, float* %arrayidx27, align 4, !dbg !5460
  %15 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5461
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 3, !dbg !5461
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 1, !dbg !5461
  store float 0.000000e+00, float* %arrayidx29, align 4, !dbg !5462
  %16 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !5463
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %16, i64 3, !dbg !5463
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx30, i64 0, i64 0, !dbg !5463
  store float 0.000000e+00, float* %arrayidx31, align 4, !dbg !5464
  ret void, !dbg !5465
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @translate_m4([4 x float]* %mat, float %Tx, float %Ty, float %Tz) #0 !dbg !5466 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %Tx.addr = alloca float, align 4
  %Ty.addr = alloca float, align 4
  %Tz.addr = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5469, metadata !DIExpression()), !dbg !5470
  store float %Tx, float* %Tx.addr, align 4
  call void @llvm.dbg.declare(metadata float* %Tx.addr, metadata !5471, metadata !DIExpression()), !dbg !5472
  store float %Ty, float* %Ty.addr, align 4
  call void @llvm.dbg.declare(metadata float* %Ty.addr, metadata !5473, metadata !DIExpression()), !dbg !5474
  store float %Tz, float* %Tz.addr, align 4
  call void @llvm.dbg.declare(metadata float* %Tz.addr, metadata !5475, metadata !DIExpression()), !dbg !5476
  %0 = load float, float* %Tx.addr, align 4, !dbg !5477
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5478
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, !dbg !5478
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !5478
  %2 = load float, float* %arrayidx1, align 4, !dbg !5478
  %mul = fmul float %0, %2, !dbg !5479
  %3 = load float, float* %Ty.addr, align 4, !dbg !5480
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5481
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 1, !dbg !5481
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !5481
  %5 = load float, float* %arrayidx3, align 4, !dbg !5481
  %mul4 = fmul float %3, %5, !dbg !5482
  %add = fadd float %mul, %mul4, !dbg !5483
  %6 = load float, float* %Tz.addr, align 4, !dbg !5484
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5485
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 2, !dbg !5485
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !5485
  %8 = load float, float* %arrayidx6, align 4, !dbg !5485
  %mul7 = fmul float %6, %8, !dbg !5486
  %add8 = fadd float %add, %mul7, !dbg !5487
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5488
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 3, !dbg !5488
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 0, !dbg !5488
  %10 = load float, float* %arrayidx10, align 4, !dbg !5489
  %add11 = fadd float %10, %add8, !dbg !5489
  store float %add11, float* %arrayidx10, align 4, !dbg !5489
  %11 = load float, float* %Tx.addr, align 4, !dbg !5490
  %12 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5491
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 0, !dbg !5491
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 1, !dbg !5491
  %13 = load float, float* %arrayidx13, align 4, !dbg !5491
  %mul14 = fmul float %11, %13, !dbg !5492
  %14 = load float, float* %Ty.addr, align 4, !dbg !5493
  %15 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5494
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 1, !dbg !5494
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx15, i64 0, i64 1, !dbg !5494
  %16 = load float, float* %arrayidx16, align 4, !dbg !5494
  %mul17 = fmul float %14, %16, !dbg !5495
  %add18 = fadd float %mul14, %mul17, !dbg !5496
  %17 = load float, float* %Tz.addr, align 4, !dbg !5497
  %18 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5498
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %18, i64 2, !dbg !5498
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx19, i64 0, i64 1, !dbg !5498
  %19 = load float, float* %arrayidx20, align 4, !dbg !5498
  %mul21 = fmul float %17, %19, !dbg !5499
  %add22 = fadd float %add18, %mul21, !dbg !5500
  %20 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5501
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 3, !dbg !5501
  %arrayidx24 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 1, !dbg !5501
  %21 = load float, float* %arrayidx24, align 4, !dbg !5502
  %add25 = fadd float %21, %add22, !dbg !5502
  store float %add25, float* %arrayidx24, align 4, !dbg !5502
  %22 = load float, float* %Tx.addr, align 4, !dbg !5503
  %23 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5504
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 0, !dbg !5504
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 2, !dbg !5504
  %24 = load float, float* %arrayidx27, align 4, !dbg !5504
  %mul28 = fmul float %22, %24, !dbg !5505
  %25 = load float, float* %Ty.addr, align 4, !dbg !5506
  %26 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5507
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %26, i64 1, !dbg !5507
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx29, i64 0, i64 2, !dbg !5507
  %27 = load float, float* %arrayidx30, align 4, !dbg !5507
  %mul31 = fmul float %25, %27, !dbg !5508
  %add32 = fadd float %mul28, %mul31, !dbg !5509
  %28 = load float, float* %Tz.addr, align 4, !dbg !5510
  %29 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5511
  %arrayidx33 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 2, !dbg !5511
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx33, i64 0, i64 2, !dbg !5511
  %30 = load float, float* %arrayidx34, align 4, !dbg !5511
  %mul35 = fmul float %28, %30, !dbg !5512
  %add36 = fadd float %add32, %mul35, !dbg !5513
  %31 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5514
  %arrayidx37 = getelementptr inbounds [4 x float], [4 x float]* %31, i64 3, !dbg !5514
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx37, i64 0, i64 2, !dbg !5514
  %32 = load float, float* %arrayidx38, align 4, !dbg !5515
  %add39 = fadd float %32, %add36, !dbg !5515
  store float %add39, float* %arrayidx38, align 4, !dbg !5515
  ret void, !dbg !5516
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rotate_m4([4 x float]* %mat, i8 zeroext %axis, float %angle) #0 !dbg !5517 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %axis.addr = alloca i8, align 1
  %angle.addr = alloca float, align 4
  %col = alloca i32, align 4
  %temp = alloca [4 x float], align 16
  %cosine = alloca float, align 4
  %sine = alloca float, align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  store i8 %axis, i8* %axis.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %axis.addr, metadata !5524, metadata !DIExpression()), !dbg !5525
  store float %angle, float* %angle.addr, align 4
  call void @llvm.dbg.declare(metadata float* %angle.addr, metadata !5526, metadata !DIExpression()), !dbg !5527
  call void @llvm.dbg.declare(metadata i32* %col, metadata !5528, metadata !DIExpression()), !dbg !5529
  call void @llvm.dbg.declare(metadata [4 x float]* %temp, metadata !5530, metadata !DIExpression()), !dbg !5531
  %0 = bitcast [4 x float]* %temp to i8*, !dbg !5531
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 16, i1 false), !dbg !5531
  call void @llvm.dbg.declare(metadata float* %cosine, metadata !5532, metadata !DIExpression()), !dbg !5533
  call void @llvm.dbg.declare(metadata float* %sine, metadata !5534, metadata !DIExpression()), !dbg !5535
  %1 = load float, float* %angle.addr, align 4, !dbg !5536
  %call = call float @cosf(float %1) #5, !dbg !5537
  store float %call, float* %cosine, align 4, !dbg !5538
  %2 = load float, float* %angle.addr, align 4, !dbg !5539
  %call1 = call float @sinf(float %2) #5, !dbg !5540
  store float %call1, float* %sine, align 4, !dbg !5541
  %3 = load i8, i8* %axis.addr, align 1, !dbg !5542
  %conv = zext i8 %3 to i32, !dbg !5542
  switch i32 %conv, label %sw.epilog [
    i32 88, label %sw.bb
    i32 89, label %sw.bb34
    i32 90, label %sw.bb76
  ], !dbg !5543

sw.bb:                                            ; preds = %entry
  store i32 0, i32* %col, align 4, !dbg !5544
  br label %for.cond, !dbg !5547

for.cond:                                         ; preds = %for.inc, %sw.bb
  %4 = load i32, i32* %col, align 4, !dbg !5548
  %cmp = icmp slt i32 %4, 4, !dbg !5550
  br i1 %cmp, label %for.body, label %for.end, !dbg !5551

for.body:                                         ; preds = %for.cond
  %5 = load float, float* %cosine, align 4, !dbg !5552
  %6 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5553
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %6, i64 1, !dbg !5553
  %7 = load i32, i32* %col, align 4, !dbg !5554
  %idxprom = sext i32 %7 to i64, !dbg !5553
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 %idxprom, !dbg !5553
  %8 = load float, float* %arrayidx3, align 4, !dbg !5553
  %mul = fmul float %5, %8, !dbg !5555
  %9 = load float, float* %sine, align 4, !dbg !5556
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5557
  %arrayidx4 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 2, !dbg !5557
  %11 = load i32, i32* %col, align 4, !dbg !5558
  %idxprom5 = sext i32 %11 to i64, !dbg !5557
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx4, i64 0, i64 %idxprom5, !dbg !5557
  %12 = load float, float* %arrayidx6, align 4, !dbg !5557
  %mul7 = fmul float %9, %12, !dbg !5559
  %add = fadd float %mul, %mul7, !dbg !5560
  %13 = load i32, i32* %col, align 4, !dbg !5561
  %idxprom8 = sext i32 %13 to i64, !dbg !5562
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %temp, i64 0, i64 %idxprom8, !dbg !5562
  store float %add, float* %arrayidx9, align 4, !dbg !5563
  br label %for.inc, !dbg !5562

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %col, align 4, !dbg !5564
  %inc = add nsw i32 %14, 1, !dbg !5564
  store i32 %inc, i32* %col, align 4, !dbg !5564
  br label %for.cond, !dbg !5565, !llvm.loop !5566

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %col, align 4, !dbg !5568
  br label %for.cond10, !dbg !5570

for.cond10:                                       ; preds = %for.inc31, %for.end
  %15 = load i32, i32* %col, align 4, !dbg !5571
  %cmp11 = icmp slt i32 %15, 4, !dbg !5573
  br i1 %cmp11, label %for.body13, label %for.end33, !dbg !5574

for.body13:                                       ; preds = %for.cond10
  %16 = load float, float* %sine, align 4, !dbg !5575
  %fneg = fneg float %16, !dbg !5577
  %17 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5578
  %arrayidx14 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 1, !dbg !5578
  %18 = load i32, i32* %col, align 4, !dbg !5579
  %idxprom15 = sext i32 %18 to i64, !dbg !5578
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx14, i64 0, i64 %idxprom15, !dbg !5578
  %19 = load float, float* %arrayidx16, align 4, !dbg !5578
  %mul17 = fmul float %fneg, %19, !dbg !5580
  %20 = load float, float* %cosine, align 4, !dbg !5581
  %21 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5582
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 2, !dbg !5582
  %22 = load i32, i32* %col, align 4, !dbg !5583
  %idxprom19 = sext i32 %22 to i64, !dbg !5582
  %arrayidx20 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 %idxprom19, !dbg !5582
  %23 = load float, float* %arrayidx20, align 4, !dbg !5582
  %mul21 = fmul float %20, %23, !dbg !5584
  %add22 = fadd float %mul17, %mul21, !dbg !5585
  %24 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5586
  %arrayidx23 = getelementptr inbounds [4 x float], [4 x float]* %24, i64 2, !dbg !5586
  %25 = load i32, i32* %col, align 4, !dbg !5587
  %idxprom24 = sext i32 %25 to i64, !dbg !5586
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx23, i64 0, i64 %idxprom24, !dbg !5586
  store float %add22, float* %arrayidx25, align 4, !dbg !5588
  %26 = load i32, i32* %col, align 4, !dbg !5589
  %idxprom26 = sext i32 %26 to i64, !dbg !5590
  %arrayidx27 = getelementptr inbounds [4 x float], [4 x float]* %temp, i64 0, i64 %idxprom26, !dbg !5590
  %27 = load float, float* %arrayidx27, align 4, !dbg !5590
  %28 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5591
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %28, i64 1, !dbg !5591
  %29 = load i32, i32* %col, align 4, !dbg !5592
  %idxprom29 = sext i32 %29 to i64, !dbg !5591
  %arrayidx30 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 %idxprom29, !dbg !5591
  store float %27, float* %arrayidx30, align 4, !dbg !5593
  br label %for.inc31, !dbg !5594

for.inc31:                                        ; preds = %for.body13
  %30 = load i32, i32* %col, align 4, !dbg !5595
  %inc32 = add nsw i32 %30, 1, !dbg !5595
  store i32 %inc32, i32* %col, align 4, !dbg !5595
  br label %for.cond10, !dbg !5596, !llvm.loop !5597

for.end33:                                        ; preds = %for.cond10
  br label %sw.epilog, !dbg !5599

sw.bb34:                                          ; preds = %entry
  store i32 0, i32* %col, align 4, !dbg !5600
  br label %for.cond35, !dbg !5602

for.cond35:                                       ; preds = %for.inc49, %sw.bb34
  %31 = load i32, i32* %col, align 4, !dbg !5603
  %cmp36 = icmp slt i32 %31, 4, !dbg !5605
  br i1 %cmp36, label %for.body38, label %for.end51, !dbg !5606

for.body38:                                       ; preds = %for.cond35
  %32 = load float, float* %cosine, align 4, !dbg !5607
  %33 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5608
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %33, i64 0, !dbg !5608
  %34 = load i32, i32* %col, align 4, !dbg !5609
  %idxprom40 = sext i32 %34 to i64, !dbg !5608
  %arrayidx41 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx39, i64 0, i64 %idxprom40, !dbg !5608
  %35 = load float, float* %arrayidx41, align 4, !dbg !5608
  %mul42 = fmul float %32, %35, !dbg !5610
  %36 = load float, float* %sine, align 4, !dbg !5611
  %37 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5612
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %37, i64 2, !dbg !5612
  %38 = load i32, i32* %col, align 4, !dbg !5613
  %idxprom44 = sext i32 %38 to i64, !dbg !5612
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx43, i64 0, i64 %idxprom44, !dbg !5612
  %39 = load float, float* %arrayidx45, align 4, !dbg !5612
  %mul46 = fmul float %36, %39, !dbg !5614
  %sub = fsub float %mul42, %mul46, !dbg !5615
  %40 = load i32, i32* %col, align 4, !dbg !5616
  %idxprom47 = sext i32 %40 to i64, !dbg !5617
  %arrayidx48 = getelementptr inbounds [4 x float], [4 x float]* %temp, i64 0, i64 %idxprom47, !dbg !5617
  store float %sub, float* %arrayidx48, align 4, !dbg !5618
  br label %for.inc49, !dbg !5617

for.inc49:                                        ; preds = %for.body38
  %41 = load i32, i32* %col, align 4, !dbg !5619
  %inc50 = add nsw i32 %41, 1, !dbg !5619
  store i32 %inc50, i32* %col, align 4, !dbg !5619
  br label %for.cond35, !dbg !5620, !llvm.loop !5621

for.end51:                                        ; preds = %for.cond35
  store i32 0, i32* %col, align 4, !dbg !5623
  br label %for.cond52, !dbg !5625

for.cond52:                                       ; preds = %for.inc73, %for.end51
  %42 = load i32, i32* %col, align 4, !dbg !5626
  %cmp53 = icmp slt i32 %42, 4, !dbg !5628
  br i1 %cmp53, label %for.body55, label %for.end75, !dbg !5629

for.body55:                                       ; preds = %for.cond52
  %43 = load float, float* %sine, align 4, !dbg !5630
  %44 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5632
  %arrayidx56 = getelementptr inbounds [4 x float], [4 x float]* %44, i64 0, !dbg !5632
  %45 = load i32, i32* %col, align 4, !dbg !5633
  %idxprom57 = sext i32 %45 to i64, !dbg !5632
  %arrayidx58 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx56, i64 0, i64 %idxprom57, !dbg !5632
  %46 = load float, float* %arrayidx58, align 4, !dbg !5632
  %mul59 = fmul float %43, %46, !dbg !5634
  %47 = load float, float* %cosine, align 4, !dbg !5635
  %48 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5636
  %arrayidx60 = getelementptr inbounds [4 x float], [4 x float]* %48, i64 2, !dbg !5636
  %49 = load i32, i32* %col, align 4, !dbg !5637
  %idxprom61 = sext i32 %49 to i64, !dbg !5636
  %arrayidx62 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx60, i64 0, i64 %idxprom61, !dbg !5636
  %50 = load float, float* %arrayidx62, align 4, !dbg !5636
  %mul63 = fmul float %47, %50, !dbg !5638
  %add64 = fadd float %mul59, %mul63, !dbg !5639
  %51 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5640
  %arrayidx65 = getelementptr inbounds [4 x float], [4 x float]* %51, i64 2, !dbg !5640
  %52 = load i32, i32* %col, align 4, !dbg !5641
  %idxprom66 = sext i32 %52 to i64, !dbg !5640
  %arrayidx67 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx65, i64 0, i64 %idxprom66, !dbg !5640
  store float %add64, float* %arrayidx67, align 4, !dbg !5642
  %53 = load i32, i32* %col, align 4, !dbg !5643
  %idxprom68 = sext i32 %53 to i64, !dbg !5644
  %arrayidx69 = getelementptr inbounds [4 x float], [4 x float]* %temp, i64 0, i64 %idxprom68, !dbg !5644
  %54 = load float, float* %arrayidx69, align 4, !dbg !5644
  %55 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5645
  %arrayidx70 = getelementptr inbounds [4 x float], [4 x float]* %55, i64 0, !dbg !5645
  %56 = load i32, i32* %col, align 4, !dbg !5646
  %idxprom71 = sext i32 %56 to i64, !dbg !5645
  %arrayidx72 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx70, i64 0, i64 %idxprom71, !dbg !5645
  store float %54, float* %arrayidx72, align 4, !dbg !5647
  br label %for.inc73, !dbg !5648

for.inc73:                                        ; preds = %for.body55
  %57 = load i32, i32* %col, align 4, !dbg !5649
  %inc74 = add nsw i32 %57, 1, !dbg !5649
  store i32 %inc74, i32* %col, align 4, !dbg !5649
  br label %for.cond52, !dbg !5650, !llvm.loop !5651

for.end75:                                        ; preds = %for.cond52
  br label %sw.epilog, !dbg !5653

sw.bb76:                                          ; preds = %entry
  store i32 0, i32* %col, align 4, !dbg !5654
  br label %for.cond77, !dbg !5656

for.cond77:                                       ; preds = %for.inc92, %sw.bb76
  %58 = load i32, i32* %col, align 4, !dbg !5657
  %cmp78 = icmp slt i32 %58, 4, !dbg !5659
  br i1 %cmp78, label %for.body80, label %for.end94, !dbg !5660

for.body80:                                       ; preds = %for.cond77
  %59 = load float, float* %cosine, align 4, !dbg !5661
  %60 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5662
  %arrayidx81 = getelementptr inbounds [4 x float], [4 x float]* %60, i64 0, !dbg !5662
  %61 = load i32, i32* %col, align 4, !dbg !5663
  %idxprom82 = sext i32 %61 to i64, !dbg !5662
  %arrayidx83 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx81, i64 0, i64 %idxprom82, !dbg !5662
  %62 = load float, float* %arrayidx83, align 4, !dbg !5662
  %mul84 = fmul float %59, %62, !dbg !5664
  %63 = load float, float* %sine, align 4, !dbg !5665
  %64 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5666
  %arrayidx85 = getelementptr inbounds [4 x float], [4 x float]* %64, i64 1, !dbg !5666
  %65 = load i32, i32* %col, align 4, !dbg !5667
  %idxprom86 = sext i32 %65 to i64, !dbg !5666
  %arrayidx87 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx85, i64 0, i64 %idxprom86, !dbg !5666
  %66 = load float, float* %arrayidx87, align 4, !dbg !5666
  %mul88 = fmul float %63, %66, !dbg !5668
  %add89 = fadd float %mul84, %mul88, !dbg !5669
  %67 = load i32, i32* %col, align 4, !dbg !5670
  %idxprom90 = sext i32 %67 to i64, !dbg !5671
  %arrayidx91 = getelementptr inbounds [4 x float], [4 x float]* %temp, i64 0, i64 %idxprom90, !dbg !5671
  store float %add89, float* %arrayidx91, align 4, !dbg !5672
  br label %for.inc92, !dbg !5671

for.inc92:                                        ; preds = %for.body80
  %68 = load i32, i32* %col, align 4, !dbg !5673
  %inc93 = add nsw i32 %68, 1, !dbg !5673
  store i32 %inc93, i32* %col, align 4, !dbg !5673
  br label %for.cond77, !dbg !5674, !llvm.loop !5675

for.end94:                                        ; preds = %for.cond77
  store i32 0, i32* %col, align 4, !dbg !5677
  br label %for.cond95, !dbg !5679

for.cond95:                                       ; preds = %for.inc117, %for.end94
  %69 = load i32, i32* %col, align 4, !dbg !5680
  %cmp96 = icmp slt i32 %69, 4, !dbg !5682
  br i1 %cmp96, label %for.body98, label %for.end119, !dbg !5683

for.body98:                                       ; preds = %for.cond95
  %70 = load float, float* %sine, align 4, !dbg !5684
  %fneg99 = fneg float %70, !dbg !5686
  %71 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5687
  %arrayidx100 = getelementptr inbounds [4 x float], [4 x float]* %71, i64 0, !dbg !5687
  %72 = load i32, i32* %col, align 4, !dbg !5688
  %idxprom101 = sext i32 %72 to i64, !dbg !5687
  %arrayidx102 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx100, i64 0, i64 %idxprom101, !dbg !5687
  %73 = load float, float* %arrayidx102, align 4, !dbg !5687
  %mul103 = fmul float %fneg99, %73, !dbg !5689
  %74 = load float, float* %cosine, align 4, !dbg !5690
  %75 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5691
  %arrayidx104 = getelementptr inbounds [4 x float], [4 x float]* %75, i64 1, !dbg !5691
  %76 = load i32, i32* %col, align 4, !dbg !5692
  %idxprom105 = sext i32 %76 to i64, !dbg !5691
  %arrayidx106 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx104, i64 0, i64 %idxprom105, !dbg !5691
  %77 = load float, float* %arrayidx106, align 4, !dbg !5691
  %mul107 = fmul float %74, %77, !dbg !5693
  %add108 = fadd float %mul103, %mul107, !dbg !5694
  %78 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5695
  %arrayidx109 = getelementptr inbounds [4 x float], [4 x float]* %78, i64 1, !dbg !5695
  %79 = load i32, i32* %col, align 4, !dbg !5696
  %idxprom110 = sext i32 %79 to i64, !dbg !5695
  %arrayidx111 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx109, i64 0, i64 %idxprom110, !dbg !5695
  store float %add108, float* %arrayidx111, align 4, !dbg !5697
  %80 = load i32, i32* %col, align 4, !dbg !5698
  %idxprom112 = sext i32 %80 to i64, !dbg !5699
  %arrayidx113 = getelementptr inbounds [4 x float], [4 x float]* %temp, i64 0, i64 %idxprom112, !dbg !5699
  %81 = load float, float* %arrayidx113, align 4, !dbg !5699
  %82 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5700
  %arrayidx114 = getelementptr inbounds [4 x float], [4 x float]* %82, i64 0, !dbg !5700
  %83 = load i32, i32* %col, align 4, !dbg !5701
  %idxprom115 = sext i32 %83 to i64, !dbg !5700
  %arrayidx116 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx114, i64 0, i64 %idxprom115, !dbg !5700
  store float %81, float* %arrayidx116, align 4, !dbg !5702
  br label %for.inc117, !dbg !5703

for.inc117:                                       ; preds = %for.body98
  %84 = load i32, i32* %col, align 4, !dbg !5704
  %inc118 = add nsw i32 %84, 1, !dbg !5704
  store i32 %inc118, i32* %col, align 4, !dbg !5704
  br label %for.cond95, !dbg !5705, !llvm.loop !5706

for.end119:                                       ; preds = %for.cond95
  br label %sw.epilog, !dbg !5708

sw.epilog:                                        ; preds = %entry, %for.end119, %for.end75, %for.end33
  ret void, !dbg !5709
}

; Function Attrs: nounwind
declare dso_local float @cosf(float) #4

; Function Attrs: nounwind
declare dso_local float @sinf(float) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @rotate_m2([2 x float]* %mat, float %angle) #0 !dbg !5710 {
entry:
  %mat.addr = alloca [2 x float]*, align 8
  %angle.addr = alloca float, align 4
  store [2 x float]* %mat, [2 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x float]** %mat.addr, metadata !5713, metadata !DIExpression()), !dbg !5714
  store float %angle, float* %angle.addr, align 4
  call void @llvm.dbg.declare(metadata float* %angle.addr, metadata !5715, metadata !DIExpression()), !dbg !5716
  %0 = load float, float* %angle.addr, align 4, !dbg !5717
  %call = call float @cosf(float %0) #5, !dbg !5718
  %1 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !5719
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, !dbg !5719
  %arrayidx1 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx, i64 0, i64 1, !dbg !5719
  store float %call, float* %arrayidx1, align 4, !dbg !5720
  %2 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !5721
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %2, i64 0, !dbg !5721
  %arrayidx3 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx2, i64 0, i64 0, !dbg !5721
  store float %call, float* %arrayidx3, align 4, !dbg !5722
  %3 = load float, float* %angle.addr, align 4, !dbg !5723
  %call4 = call float @sinf(float %3) #5, !dbg !5724
  %4 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !5725
  %arrayidx5 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, !dbg !5725
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx5, i64 0, i64 1, !dbg !5725
  store float %call4, float* %arrayidx6, align 4, !dbg !5726
  %5 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !5727
  %arrayidx7 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, !dbg !5727
  %arrayidx8 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx7, i64 0, i64 1, !dbg !5727
  %6 = load float, float* %arrayidx8, align 4, !dbg !5727
  %fneg = fneg float %6, !dbg !5728
  %7 = load [2 x float]*, [2 x float]** %mat.addr, align 8, !dbg !5729
  %arrayidx9 = getelementptr inbounds [2 x float], [2 x float]* %7, i64 1, !dbg !5729
  %arrayidx10 = getelementptr inbounds [2 x float], [2 x float]* %arrayidx9, i64 0, i64 0, !dbg !5729
  store float %fneg, float* %arrayidx10, align 4, !dbg !5730
  ret void, !dbg !5731
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @transform_pivot_set_m4([4 x float]* %mat, float* %pivot) #0 !dbg !5732 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %pivot.addr = alloca float*, align 8
  %tmat = alloca [4 x [4 x float]], align 16
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5733, metadata !DIExpression()), !dbg !5734
  store float* %pivot, float** %pivot.addr, align 8
  call void @llvm.dbg.declare(metadata float** %pivot.addr, metadata !5735, metadata !DIExpression()), !dbg !5736
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %tmat, metadata !5737, metadata !DIExpression()), !dbg !5738
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmat, i64 0, i64 0, !dbg !5739
  call void @unit_m4([4 x float]* %arraydecay), !dbg !5740
  %arrayidx = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmat, i64 0, i64 3, !dbg !5741
  %arraydecay1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !5741
  %0 = load float*, float** %pivot.addr, align 8, !dbg !5742
  call void @copy_v3_v3(float* %arraydecay1, float* %0), !dbg !5743
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5744
  %arraydecay2 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmat, i64 0, i64 0, !dbg !5745
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5746
  call void @mul_m4_m4m4([4 x float]* %1, [4 x float]* %arraydecay2, [4 x float]* %2), !dbg !5747
  %arrayidx3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmat, i64 0, i64 3, !dbg !5748
  %arraydecay4 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx3, i64 0, i64 0, !dbg !5748
  call void @negate_v3(float* %arraydecay4), !dbg !5749
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5750
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5751
  %arraydecay5 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmat, i64 0, i64 0, !dbg !5752
  call void @mul_m4_m4m4([4 x float]* %3, [4 x float]* %4, [4 x float]* %arraydecay5), !dbg !5753
  ret void, !dbg !5754
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @blend_m3_m3m3([3 x float]* %out, [3 x float]* %dst, [3 x float]* %src, float %srcweight) #0 !dbg !5755 {
entry:
  %out.addr = alloca [3 x float]*, align 8
  %dst.addr = alloca [3 x float]*, align 8
  %src.addr = alloca [3 x float]*, align 8
  %srcweight.addr = alloca float, align 4
  %srot = alloca [3 x [3 x float]], align 16
  %drot = alloca [3 x [3 x float]], align 16
  %squat = alloca [4 x float], align 16
  %dquat = alloca [4 x float], align 16
  %fquat = alloca [4 x float], align 16
  %sscale = alloca [3 x float], align 4
  %dscale = alloca [3 x float], align 4
  %fsize = alloca [3 x float], align 4
  %rmat = alloca [3 x [3 x float]], align 16
  %smat = alloca [3 x [3 x float]], align 16
  store [3 x float]* %out, [3 x float]** %out.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %out.addr, metadata !5758, metadata !DIExpression()), !dbg !5759
  store [3 x float]* %dst, [3 x float]** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %dst.addr, metadata !5760, metadata !DIExpression()), !dbg !5761
  store [3 x float]* %src, [3 x float]** %src.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %src.addr, metadata !5762, metadata !DIExpression()), !dbg !5763
  store float %srcweight, float* %srcweight.addr, align 4
  call void @llvm.dbg.declare(metadata float* %srcweight.addr, metadata !5764, metadata !DIExpression()), !dbg !5765
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %srot, metadata !5766, metadata !DIExpression()), !dbg !5767
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %drot, metadata !5768, metadata !DIExpression()), !dbg !5769
  call void @llvm.dbg.declare(metadata [4 x float]* %squat, metadata !5770, metadata !DIExpression()), !dbg !5771
  call void @llvm.dbg.declare(metadata [4 x float]* %dquat, metadata !5772, metadata !DIExpression()), !dbg !5773
  call void @llvm.dbg.declare(metadata [4 x float]* %fquat, metadata !5774, metadata !DIExpression()), !dbg !5775
  call void @llvm.dbg.declare(metadata [3 x float]* %sscale, metadata !5776, metadata !DIExpression()), !dbg !5777
  call void @llvm.dbg.declare(metadata [3 x float]* %dscale, metadata !5778, metadata !DIExpression()), !dbg !5779
  call void @llvm.dbg.declare(metadata [3 x float]* %fsize, metadata !5780, metadata !DIExpression()), !dbg !5781
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %rmat, metadata !5782, metadata !DIExpression()), !dbg !5783
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %smat, metadata !5784, metadata !DIExpression()), !dbg !5785
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %drot, i64 0, i64 0, !dbg !5786
  %arraydecay1 = getelementptr inbounds [3 x float], [3 x float]* %dscale, i64 0, i64 0, !dbg !5787
  %0 = load [3 x float]*, [3 x float]** %dst.addr, align 8, !dbg !5788
  call void @mat3_to_rot_size([3 x float]* %arraydecay, float* %arraydecay1, [3 x float]* %0), !dbg !5789
  %arraydecay2 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %srot, i64 0, i64 0, !dbg !5790
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %sscale, i64 0, i64 0, !dbg !5791
  %1 = load [3 x float]*, [3 x float]** %src.addr, align 8, !dbg !5792
  call void @mat3_to_rot_size([3 x float]* %arraydecay2, float* %arraydecay3, [3 x float]* %1), !dbg !5793
  %arraydecay4 = getelementptr inbounds [4 x float], [4 x float]* %dquat, i64 0, i64 0, !dbg !5794
  %arraydecay5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %drot, i64 0, i64 0, !dbg !5795
  call void @mat3_to_quat(float* %arraydecay4, [3 x float]* %arraydecay5), !dbg !5796
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %squat, i64 0, i64 0, !dbg !5797
  %arraydecay7 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %srot, i64 0, i64 0, !dbg !5798
  call void @mat3_to_quat(float* %arraydecay6, [3 x float]* %arraydecay7), !dbg !5799
  %arraydecay8 = getelementptr inbounds [4 x float], [4 x float]* %fquat, i64 0, i64 0, !dbg !5800
  %arraydecay9 = getelementptr inbounds [4 x float], [4 x float]* %dquat, i64 0, i64 0, !dbg !5801
  %arraydecay10 = getelementptr inbounds [4 x float], [4 x float]* %squat, i64 0, i64 0, !dbg !5802
  %2 = load float, float* %srcweight.addr, align 4, !dbg !5803
  call void @interp_qt_qtqt(float* %arraydecay8, float* %arraydecay9, float* %arraydecay10, float %2), !dbg !5804
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %fsize, i64 0, i64 0, !dbg !5805
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %dscale, i64 0, i64 0, !dbg !5806
  %arraydecay13 = getelementptr inbounds [3 x float], [3 x float]* %sscale, i64 0, i64 0, !dbg !5807
  %3 = load float, float* %srcweight.addr, align 4, !dbg !5808
  call void @interp_v3_v3v3(float* %arraydecay11, float* %arraydecay12, float* %arraydecay13, float %3), !dbg !5809
  %arraydecay14 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !5810
  %arraydecay15 = getelementptr inbounds [4 x float], [4 x float]* %fquat, i64 0, i64 0, !dbg !5811
  call void @quat_to_mat3([3 x float]* %arraydecay14, float* %arraydecay15), !dbg !5812
  %arraydecay16 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !5813
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %fsize, i64 0, i64 0, !dbg !5814
  call void @size_to_mat3([3 x float]* %arraydecay16, float* %arraydecay17), !dbg !5815
  %4 = load [3 x float]*, [3 x float]** %out.addr, align 8, !dbg !5816
  %arraydecay18 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !5817
  %arraydecay19 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !5818
  call void @mul_m3_m3m3([3 x float]* %4, [3 x float]* %arraydecay18, [3 x float]* %arraydecay19), !dbg !5819
  ret void, !dbg !5820
}

declare dso_local void @interp_qt_qtqt(float*, float*, float*, float) #3

declare dso_local void @interp_v3_v3v3(float*, float*, float*, float) #3

declare dso_local void @quat_to_mat3([3 x float]*, float*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @blend_m4_m4m4([4 x float]* %out, [4 x float]* %dst, [4 x float]* %src, float %srcweight) #0 !dbg !5821 {
entry:
  %out.addr = alloca [4 x float]*, align 8
  %dst.addr = alloca [4 x float]*, align 8
  %src.addr = alloca [4 x float]*, align 8
  %srcweight.addr = alloca float, align 4
  %sloc = alloca [3 x float], align 4
  %dloc = alloca [3 x float], align 4
  %floc = alloca [3 x float], align 4
  %srot = alloca [3 x [3 x float]], align 16
  %drot = alloca [3 x [3 x float]], align 16
  %squat = alloca [4 x float], align 16
  %dquat = alloca [4 x float], align 16
  %fquat = alloca [4 x float], align 16
  %sscale = alloca [3 x float], align 4
  %dscale = alloca [3 x float], align 4
  %fsize = alloca [3 x float], align 4
  store [4 x float]* %out, [4 x float]** %out.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %out.addr, metadata !5824, metadata !DIExpression()), !dbg !5825
  store [4 x float]* %dst, [4 x float]** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %dst.addr, metadata !5826, metadata !DIExpression()), !dbg !5827
  store [4 x float]* %src, [4 x float]** %src.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %src.addr, metadata !5828, metadata !DIExpression()), !dbg !5829
  store float %srcweight, float* %srcweight.addr, align 4
  call void @llvm.dbg.declare(metadata float* %srcweight.addr, metadata !5830, metadata !DIExpression()), !dbg !5831
  call void @llvm.dbg.declare(metadata [3 x float]* %sloc, metadata !5832, metadata !DIExpression()), !dbg !5833
  call void @llvm.dbg.declare(metadata [3 x float]* %dloc, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata [3 x float]* %floc, metadata !5836, metadata !DIExpression()), !dbg !5837
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %srot, metadata !5838, metadata !DIExpression()), !dbg !5839
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %drot, metadata !5840, metadata !DIExpression()), !dbg !5841
  call void @llvm.dbg.declare(metadata [4 x float]* %squat, metadata !5842, metadata !DIExpression()), !dbg !5843
  call void @llvm.dbg.declare(metadata [4 x float]* %dquat, metadata !5844, metadata !DIExpression()), !dbg !5845
  call void @llvm.dbg.declare(metadata [4 x float]* %fquat, metadata !5846, metadata !DIExpression()), !dbg !5847
  call void @llvm.dbg.declare(metadata [3 x float]* %sscale, metadata !5848, metadata !DIExpression()), !dbg !5849
  call void @llvm.dbg.declare(metadata [3 x float]* %dscale, metadata !5850, metadata !DIExpression()), !dbg !5851
  call void @llvm.dbg.declare(metadata [3 x float]* %fsize, metadata !5852, metadata !DIExpression()), !dbg !5853
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %dloc, i64 0, i64 0, !dbg !5854
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %drot, i64 0, i64 0, !dbg !5855
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %dscale, i64 0, i64 0, !dbg !5856
  %0 = load [4 x float]*, [4 x float]** %dst.addr, align 8, !dbg !5857
  call void @mat4_to_loc_rot_size(float* %arraydecay, [3 x float]* %arraydecay1, float* %arraydecay2, [4 x float]* %0), !dbg !5858
  %arraydecay3 = getelementptr inbounds [3 x float], [3 x float]* %sloc, i64 0, i64 0, !dbg !5859
  %arraydecay4 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %srot, i64 0, i64 0, !dbg !5860
  %arraydecay5 = getelementptr inbounds [3 x float], [3 x float]* %sscale, i64 0, i64 0, !dbg !5861
  %1 = load [4 x float]*, [4 x float]** %src.addr, align 8, !dbg !5862
  call void @mat4_to_loc_rot_size(float* %arraydecay3, [3 x float]* %arraydecay4, float* %arraydecay5, [4 x float]* %1), !dbg !5863
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %dquat, i64 0, i64 0, !dbg !5864
  %arraydecay7 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %drot, i64 0, i64 0, !dbg !5865
  call void @mat3_to_quat(float* %arraydecay6, [3 x float]* %arraydecay7), !dbg !5866
  %arraydecay8 = getelementptr inbounds [4 x float], [4 x float]* %squat, i64 0, i64 0, !dbg !5867
  %arraydecay9 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %srot, i64 0, i64 0, !dbg !5868
  call void @mat3_to_quat(float* %arraydecay8, [3 x float]* %arraydecay9), !dbg !5869
  %arraydecay10 = getelementptr inbounds [3 x float], [3 x float]* %floc, i64 0, i64 0, !dbg !5870
  %arraydecay11 = getelementptr inbounds [3 x float], [3 x float]* %dloc, i64 0, i64 0, !dbg !5871
  %arraydecay12 = getelementptr inbounds [3 x float], [3 x float]* %sloc, i64 0, i64 0, !dbg !5872
  %2 = load float, float* %srcweight.addr, align 4, !dbg !5873
  call void @interp_v3_v3v3(float* %arraydecay10, float* %arraydecay11, float* %arraydecay12, float %2), !dbg !5874
  %arraydecay13 = getelementptr inbounds [4 x float], [4 x float]* %fquat, i64 0, i64 0, !dbg !5875
  %arraydecay14 = getelementptr inbounds [4 x float], [4 x float]* %dquat, i64 0, i64 0, !dbg !5876
  %arraydecay15 = getelementptr inbounds [4 x float], [4 x float]* %squat, i64 0, i64 0, !dbg !5877
  %3 = load float, float* %srcweight.addr, align 4, !dbg !5878
  call void @interp_qt_qtqt(float* %arraydecay13, float* %arraydecay14, float* %arraydecay15, float %3), !dbg !5879
  %arraydecay16 = getelementptr inbounds [3 x float], [3 x float]* %fsize, i64 0, i64 0, !dbg !5880
  %arraydecay17 = getelementptr inbounds [3 x float], [3 x float]* %dscale, i64 0, i64 0, !dbg !5881
  %arraydecay18 = getelementptr inbounds [3 x float], [3 x float]* %sscale, i64 0, i64 0, !dbg !5882
  %4 = load float, float* %srcweight.addr, align 4, !dbg !5883
  call void @interp_v3_v3v3(float* %arraydecay16, float* %arraydecay17, float* %arraydecay18, float %4), !dbg !5884
  %5 = load [4 x float]*, [4 x float]** %out.addr, align 8, !dbg !5885
  %arraydecay19 = getelementptr inbounds [3 x float], [3 x float]* %floc, i64 0, i64 0, !dbg !5886
  %arraydecay20 = getelementptr inbounds [4 x float], [4 x float]* %fquat, i64 0, i64 0, !dbg !5887
  %arraydecay21 = getelementptr inbounds [3 x float], [3 x float]* %fsize, i64 0, i64 0, !dbg !5888
  call void @loc_quat_size_to_mat4([4 x float]* %5, float* %arraydecay19, float* %arraydecay20, float* %arraydecay21), !dbg !5889
  ret void, !dbg !5890
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @loc_quat_size_to_mat4([4 x float]* %mat, float* %loc, float* %quat, float* %size) #0 !dbg !5891 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %loc.addr = alloca float*, align 8
  %quat.addr = alloca float*, align 8
  %size.addr = alloca float*, align 8
  %rmat = alloca [3 x [3 x float]], align 16
  %smat = alloca [3 x [3 x float]], align 16
  %tmat = alloca [3 x [3 x float]], align 16
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5894, metadata !DIExpression()), !dbg !5895
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !5896, metadata !DIExpression()), !dbg !5897
  store float* %quat, float** %quat.addr, align 8
  call void @llvm.dbg.declare(metadata float** %quat.addr, metadata !5898, metadata !DIExpression()), !dbg !5899
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !5900, metadata !DIExpression()), !dbg !5901
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %rmat, metadata !5902, metadata !DIExpression()), !dbg !5903
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %smat, metadata !5904, metadata !DIExpression()), !dbg !5905
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %tmat, metadata !5906, metadata !DIExpression()), !dbg !5907
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5908
  call void @unit_m4([4 x float]* %0), !dbg !5909
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !5910
  %1 = load float*, float** %quat.addr, align 8, !dbg !5911
  call void @quat_to_mat3([3 x float]* %arraydecay, float* %1), !dbg !5912
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !5913
  %2 = load float*, float** %size.addr, align 8, !dbg !5914
  call void @size_to_mat3([3 x float]* %arraydecay1, float* %2), !dbg !5915
  %arraydecay2 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmat, i64 0, i64 0, !dbg !5916
  %arraydecay3 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !5917
  %arraydecay4 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !5918
  call void @mul_m3_m3m3([3 x float]* %arraydecay2, [3 x float]* %arraydecay3, [3 x float]* %arraydecay4), !dbg !5919
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5920
  %arraydecay5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmat, i64 0, i64 0, !dbg !5921
  call void @copy_m4_m3([4 x float]* %3, [3 x float]* %arraydecay5), !dbg !5922
  %4 = load float*, float** %loc.addr, align 8, !dbg !5923
  %arrayidx = getelementptr inbounds float, float* %4, i64 0, !dbg !5923
  %5 = load float, float* %arrayidx, align 4, !dbg !5923
  %6 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5924
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 3, !dbg !5924
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 0, !dbg !5924
  store float %5, float* %arrayidx7, align 4, !dbg !5925
  %7 = load float*, float** %loc.addr, align 8, !dbg !5926
  %arrayidx8 = getelementptr inbounds float, float* %7, i64 1, !dbg !5926
  %8 = load float, float* %arrayidx8, align 4, !dbg !5926
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5927
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 3, !dbg !5927
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 1, !dbg !5927
  store float %8, float* %arrayidx10, align 4, !dbg !5928
  %10 = load float*, float** %loc.addr, align 8, !dbg !5929
  %arrayidx11 = getelementptr inbounds float, float* %10, i64 2, !dbg !5929
  %11 = load float, float* %arrayidx11, align 4, !dbg !5929
  %12 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5930
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 3, !dbg !5930
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 2, !dbg !5930
  store float %11, float* %arrayidx13, align 4, !dbg !5931
  ret void, !dbg !5932
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_negative_m4([4 x float]* %mat) #0 !dbg !5933 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %vec = alloca [3 x float], align 4
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5934, metadata !DIExpression()), !dbg !5935
  call void @llvm.dbg.declare(metadata [3 x float]* %vec, metadata !5936, metadata !DIExpression()), !dbg !5937
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !5938
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5939
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !5939
  %arraydecay1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !5939
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5940
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 1, !dbg !5940
  %arraydecay3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !5940
  call void @cross_v3_v3v3(float* %arraydecay, float* %arraydecay1, float* %arraydecay3), !dbg !5941
  %arraydecay4 = getelementptr inbounds [3 x float], [3 x float]* %vec, i64 0, i64 0, !dbg !5942
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5943
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 2, !dbg !5943
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !5943
  %call = call float @dot_v3v3(float* %arraydecay4, float* %arraydecay6), !dbg !5944
  %cmp = fcmp olt float %call, 0.000000e+00, !dbg !5945
  %conv = zext i1 %cmp to i32, !dbg !5945
  %conv7 = trunc i32 %conv to i8, !dbg !5946
  ret i8 %conv7, !dbg !5947
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_zero_m3([3 x float]* %mat) #0 !dbg !5948 {
entry:
  %mat.addr = alloca [3 x float]*, align 8
  store [3 x float]* %mat, [3 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %mat.addr, metadata !5949, metadata !DIExpression()), !dbg !5950
  %0 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5951
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %0, i64 0, !dbg !5951
  %arraydecay = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !5951
  %call = call zeroext i8 @is_zero_v3(float* %arraydecay), !dbg !5952
  %conv = zext i8 %call to i32, !dbg !5952
  %tobool = icmp ne i32 %conv, 0, !dbg !5952
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !5953

land.lhs.true:                                    ; preds = %entry
  %1 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5954
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %1, i64 1, !dbg !5954
  %arraydecay2 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx1, i64 0, i64 0, !dbg !5954
  %call3 = call zeroext i8 @is_zero_v3(float* %arraydecay2), !dbg !5955
  %conv4 = zext i8 %call3 to i32, !dbg !5955
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !5955
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !5956

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load [3 x float]*, [3 x float]** %mat.addr, align 8, !dbg !5957
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, !dbg !5957
  %arraydecay7 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx6, i64 0, i64 0, !dbg !5957
  %call8 = call zeroext i8 @is_zero_v3(float* %arraydecay7), !dbg !5958
  %conv9 = zext i8 %call8 to i32, !dbg !5958
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !5956
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %3 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool10, %land.rhs ], !dbg !5959
  %land.ext = zext i1 %3 to i32, !dbg !5956
  %conv11 = trunc i32 %land.ext to i8, !dbg !5960
  ret i8 %conv11, !dbg !5961
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_zero_v3(float* %v) #0 !dbg !5962 {
entry:
  %v.addr = alloca float*, align 8
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !5965, metadata !DIExpression()), !dbg !5966
  %0 = load float*, float** %v.addr, align 8, !dbg !5967
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !5967
  %1 = load float, float* %arrayidx, align 4, !dbg !5967
  %cmp = fcmp oeq float %1, 0.000000e+00, !dbg !5968
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !5969

land.lhs.true:                                    ; preds = %entry
  %2 = load float*, float** %v.addr, align 8, !dbg !5970
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !5970
  %3 = load float, float* %arrayidx1, align 4, !dbg !5970
  %cmp2 = fcmp oeq float %3, 0.000000e+00, !dbg !5971
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !5972

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load float*, float** %v.addr, align 8, !dbg !5973
  %arrayidx3 = getelementptr inbounds float, float* %4, i64 2, !dbg !5973
  %5 = load float, float* %arrayidx3, align 4, !dbg !5973
  %cmp4 = fcmp oeq float %5, 0.000000e+00, !dbg !5974
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp4, %land.rhs ], !dbg !5975
  %land.ext = zext i1 %6 to i32, !dbg !5972
  %conv = trunc i32 %land.ext to i8, !dbg !5976
  ret i8 %conv, !dbg !5977
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_zero_m4([4 x float]* %mat) #0 !dbg !5978 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !5979, metadata !DIExpression()), !dbg !5980
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5981
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !5981
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !5981
  %call = call zeroext i8 @is_zero_v4(float* %arraydecay), !dbg !5982
  %conv = zext i8 %call to i32, !dbg !5982
  %tobool = icmp ne i32 %conv, 0, !dbg !5982
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !5983

land.lhs.true:                                    ; preds = %entry
  %1 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5984
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 1, !dbg !5984
  %arraydecay2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 0, !dbg !5984
  %call3 = call zeroext i8 @is_zero_v4(float* %arraydecay2), !dbg !5985
  %conv4 = zext i8 %call3 to i32, !dbg !5985
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !5985
  br i1 %tobool5, label %land.lhs.true6, label %land.end, !dbg !5986

land.lhs.true6:                                   ; preds = %land.lhs.true
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5987
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 2, !dbg !5987
  %arraydecay8 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx7, i64 0, i64 0, !dbg !5987
  %call9 = call zeroext i8 @is_zero_v4(float* %arraydecay8), !dbg !5988
  %conv10 = zext i8 %call9 to i32, !dbg !5988
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !5988
  br i1 %tobool11, label %land.rhs, label %land.end, !dbg !5989

land.rhs:                                         ; preds = %land.lhs.true6
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !5990
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 3, !dbg !5990
  %arraydecay13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 0, !dbg !5990
  %call14 = call zeroext i8 @is_zero_v4(float* %arraydecay13), !dbg !5991
  %conv15 = zext i8 %call14 to i32, !dbg !5991
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !5989
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true6, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true6 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool16, %land.rhs ], !dbg !5992
  %land.ext = zext i1 %4 to i32, !dbg !5989
  %conv17 = trunc i32 %land.ext to i8, !dbg !5993
  ret i8 %conv17, !dbg !5994
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_zero_v4(float* %v) #0 !dbg !5995 {
entry:
  %v.addr = alloca float*, align 8
  store float* %v, float** %v.addr, align 8
  call void @llvm.dbg.declare(metadata float** %v.addr, metadata !5996, metadata !DIExpression()), !dbg !5997
  %0 = load float*, float** %v.addr, align 8, !dbg !5998
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !5998
  %1 = load float, float* %arrayidx, align 4, !dbg !5998
  %cmp = fcmp oeq float %1, 0.000000e+00, !dbg !5999
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6000

land.lhs.true:                                    ; preds = %entry
  %2 = load float*, float** %v.addr, align 8, !dbg !6001
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 1, !dbg !6001
  %3 = load float, float* %arrayidx1, align 4, !dbg !6001
  %cmp2 = fcmp oeq float %3, 0.000000e+00, !dbg !6002
  br i1 %cmp2, label %land.lhs.true3, label %land.end, !dbg !6003

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load float*, float** %v.addr, align 8, !dbg !6004
  %arrayidx4 = getelementptr inbounds float, float* %4, i64 2, !dbg !6004
  %5 = load float, float* %arrayidx4, align 4, !dbg !6004
  %cmp5 = fcmp oeq float %5, 0.000000e+00, !dbg !6005
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !6006

land.rhs:                                         ; preds = %land.lhs.true3
  %6 = load float*, float** %v.addr, align 8, !dbg !6007
  %arrayidx6 = getelementptr inbounds float, float* %6, i64 3, !dbg !6007
  %7 = load float, float* %arrayidx6, align 4, !dbg !6007
  %cmp7 = fcmp oeq float %7, 0.000000e+00, !dbg !6008
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true, %entry
  %8 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp7, %land.rhs ], !dbg !6009
  %land.ext = zext i1 %8 to i32, !dbg !6006
  %conv = trunc i32 %land.ext to i8, !dbg !6010
  ret i8 %conv, !dbg !6011
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @loc_eul_size_to_mat4([4 x float]* %mat, float* %loc, float* %eul, float* %size) #0 !dbg !6012 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %loc.addr = alloca float*, align 8
  %eul.addr = alloca float*, align 8
  %size.addr = alloca float*, align 8
  %rmat = alloca [3 x [3 x float]], align 16
  %smat = alloca [3 x [3 x float]], align 16
  %tmat = alloca [3 x [3 x float]], align 16
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !6013, metadata !DIExpression()), !dbg !6014
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !6015, metadata !DIExpression()), !dbg !6016
  store float* %eul, float** %eul.addr, align 8
  call void @llvm.dbg.declare(metadata float** %eul.addr, metadata !6017, metadata !DIExpression()), !dbg !6018
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !6019, metadata !DIExpression()), !dbg !6020
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %rmat, metadata !6021, metadata !DIExpression()), !dbg !6022
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %smat, metadata !6023, metadata !DIExpression()), !dbg !6024
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %tmat, metadata !6025, metadata !DIExpression()), !dbg !6026
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6027
  call void @unit_m4([4 x float]* %0), !dbg !6028
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !6029
  %1 = load float*, float** %eul.addr, align 8, !dbg !6030
  call void @eul_to_mat3([3 x float]* %arraydecay, float* %1), !dbg !6031
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !6032
  %2 = load float*, float** %size.addr, align 8, !dbg !6033
  call void @size_to_mat3([3 x float]* %arraydecay1, float* %2), !dbg !6034
  %arraydecay2 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmat, i64 0, i64 0, !dbg !6035
  %arraydecay3 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !6036
  %arraydecay4 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !6037
  call void @mul_m3_m3m3([3 x float]* %arraydecay2, [3 x float]* %arraydecay3, [3 x float]* %arraydecay4), !dbg !6038
  %3 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6039
  %arraydecay5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmat, i64 0, i64 0, !dbg !6040
  call void @copy_m4_m3([4 x float]* %3, [3 x float]* %arraydecay5), !dbg !6041
  %4 = load float*, float** %loc.addr, align 8, !dbg !6042
  %arrayidx = getelementptr inbounds float, float* %4, i64 0, !dbg !6042
  %5 = load float, float* %arrayidx, align 4, !dbg !6042
  %6 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6043
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 3, !dbg !6043
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 0, !dbg !6043
  store float %5, float* %arrayidx7, align 4, !dbg !6044
  %7 = load float*, float** %loc.addr, align 8, !dbg !6045
  %arrayidx8 = getelementptr inbounds float, float* %7, i64 1, !dbg !6045
  %8 = load float, float* %arrayidx8, align 4, !dbg !6045
  %9 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6046
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 3, !dbg !6046
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 1, !dbg !6046
  store float %8, float* %arrayidx10, align 4, !dbg !6047
  %10 = load float*, float** %loc.addr, align 8, !dbg !6048
  %arrayidx11 = getelementptr inbounds float, float* %10, i64 2, !dbg !6048
  %11 = load float, float* %arrayidx11, align 4, !dbg !6048
  %12 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6049
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 3, !dbg !6049
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 2, !dbg !6049
  store float %11, float* %arrayidx13, align 4, !dbg !6050
  ret void, !dbg !6051
}

declare dso_local void @eul_to_mat3([3 x float]*, float*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @loc_eulO_size_to_mat4([4 x float]* %mat, float* %loc, float* %eul, float* %size, i16 signext %rotOrder) #0 !dbg !6052 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %loc.addr = alloca float*, align 8
  %eul.addr = alloca float*, align 8
  %size.addr = alloca float*, align 8
  %rotOrder.addr = alloca i16, align 2
  %rmat = alloca [3 x [3 x float]], align 16
  %smat = alloca [3 x [3 x float]], align 16
  %tmat = alloca [3 x [3 x float]], align 16
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !6057, metadata !DIExpression()), !dbg !6058
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  store float* %eul, float** %eul.addr, align 8
  call void @llvm.dbg.declare(metadata float** %eul.addr, metadata !6061, metadata !DIExpression()), !dbg !6062
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !6063, metadata !DIExpression()), !dbg !6064
  store i16 %rotOrder, i16* %rotOrder.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %rotOrder.addr, metadata !6065, metadata !DIExpression()), !dbg !6066
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %rmat, metadata !6067, metadata !DIExpression()), !dbg !6068
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %smat, metadata !6069, metadata !DIExpression()), !dbg !6070
  call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %tmat, metadata !6071, metadata !DIExpression()), !dbg !6072
  %0 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6073
  call void @unit_m4([4 x float]* %0), !dbg !6074
  %arraydecay = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !6075
  %1 = load float*, float** %eul.addr, align 8, !dbg !6076
  %2 = load i16, i16* %rotOrder.addr, align 2, !dbg !6077
  call void @eulO_to_mat3([3 x float]* %arraydecay, float* %1, i16 signext %2), !dbg !6078
  %arraydecay1 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !6079
  %3 = load float*, float** %size.addr, align 8, !dbg !6080
  call void @size_to_mat3([3 x float]* %arraydecay1, float* %3), !dbg !6081
  %arraydecay2 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmat, i64 0, i64 0, !dbg !6082
  %arraydecay3 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %rmat, i64 0, i64 0, !dbg !6083
  %arraydecay4 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %smat, i64 0, i64 0, !dbg !6084
  call void @mul_m3_m3m3([3 x float]* %arraydecay2, [3 x float]* %arraydecay3, [3 x float]* %arraydecay4), !dbg !6085
  %4 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6086
  %arraydecay5 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %tmat, i64 0, i64 0, !dbg !6087
  call void @copy_m4_m3([4 x float]* %4, [3 x float]* %arraydecay5), !dbg !6088
  %5 = load float*, float** %loc.addr, align 8, !dbg !6089
  %arrayidx = getelementptr inbounds float, float* %5, i64 0, !dbg !6089
  %6 = load float, float* %arrayidx, align 4, !dbg !6089
  %7 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6090
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 3, !dbg !6090
  %arrayidx7 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx6, i64 0, i64 0, !dbg !6090
  store float %6, float* %arrayidx7, align 4, !dbg !6091
  %8 = load float*, float** %loc.addr, align 8, !dbg !6092
  %arrayidx8 = getelementptr inbounds float, float* %8, i64 1, !dbg !6092
  %9 = load float, float* %arrayidx8, align 4, !dbg !6092
  %10 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6093
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %10, i64 3, !dbg !6093
  %arrayidx10 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx9, i64 0, i64 1, !dbg !6093
  store float %9, float* %arrayidx10, align 4, !dbg !6094
  %11 = load float*, float** %loc.addr, align 8, !dbg !6095
  %arrayidx11 = getelementptr inbounds float, float* %11, i64 2, !dbg !6095
  %12 = load float, float* %arrayidx11, align 4, !dbg !6095
  %13 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6096
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 3, !dbg !6096
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 2, !dbg !6096
  store float %12, float* %arrayidx13, align 4, !dbg !6097
  ret void, !dbg !6098
}

declare dso_local void @eulO_to_mat3([3 x float]*, float*, i16 signext) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @loc_axisangle_size_to_mat4([4 x float]* %mat, float* %loc, float* %axis, float %angle, float* %size) #0 !dbg !6099 {
entry:
  %mat.addr = alloca [4 x float]*, align 8
  %loc.addr = alloca float*, align 8
  %axis.addr = alloca float*, align 8
  %angle.addr = alloca float, align 4
  %size.addr = alloca float*, align 8
  %q = alloca [4 x float], align 16
  store [4 x float]* %mat, [4 x float]** %mat.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %mat.addr, metadata !6102, metadata !DIExpression()), !dbg !6103
  store float* %loc, float** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata float** %loc.addr, metadata !6104, metadata !DIExpression()), !dbg !6105
  store float* %axis, float** %axis.addr, align 8
  call void @llvm.dbg.declare(metadata float** %axis.addr, metadata !6106, metadata !DIExpression()), !dbg !6107
  store float %angle, float* %angle.addr, align 4
  call void @llvm.dbg.declare(metadata float* %angle.addr, metadata !6108, metadata !DIExpression()), !dbg !6109
  store float* %size, float** %size.addr, align 8
  call void @llvm.dbg.declare(metadata float** %size.addr, metadata !6110, metadata !DIExpression()), !dbg !6111
  call void @llvm.dbg.declare(metadata [4 x float]* %q, metadata !6112, metadata !DIExpression()), !dbg !6113
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %q, i64 0, i64 0, !dbg !6114
  %0 = load float*, float** %axis.addr, align 8, !dbg !6115
  %1 = load float, float* %angle.addr, align 4, !dbg !6116
  call void @axis_angle_to_quat(float* %arraydecay, float* %0, float %1), !dbg !6117
  %2 = load [4 x float]*, [4 x float]** %mat.addr, align 8, !dbg !6118
  %3 = load float*, float** %loc.addr, align 8, !dbg !6119
  %arraydecay1 = getelementptr inbounds [4 x float], [4 x float]* %q, i64 0, i64 0, !dbg !6120
  %4 = load float*, float** %size.addr, align 8, !dbg !6121
  call void @loc_quat_size_to_mat4([4 x float]* %2, float* %3, float* %arraydecay1, float* %4), !dbg !6122
  ret void, !dbg !6123
}

declare dso_local void @axis_angle_to_quat(float*, float*, float) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_m3(i8* %str, [3 x float]* %m) #0 !dbg !6124 {
entry:
  %str.addr = alloca i8*, align 8
  %m.addr = alloca [3 x float]*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !6128, metadata !DIExpression()), !dbg !6129
  store [3 x float]* %m, [3 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %m.addr, metadata !6130, metadata !DIExpression()), !dbg !6131
  %0 = load i8*, i8** %str.addr, align 8, !dbg !6132
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %0), !dbg !6133
  %1 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6134
  %arrayidx = getelementptr inbounds [3 x float], [3 x float]* %1, i64 0, !dbg !6134
  %arrayidx1 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx, i64 0, i64 0, !dbg !6134
  %2 = load float, float* %arrayidx1, align 4, !dbg !6134
  %conv = fpext float %2 to double, !dbg !6134
  %3 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6135
  %arrayidx2 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, !dbg !6135
  %arrayidx3 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx2, i64 0, i64 0, !dbg !6135
  %4 = load float, float* %arrayidx3, align 4, !dbg !6135
  %conv4 = fpext float %4 to double, !dbg !6135
  %5 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6136
  %arrayidx5 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 2, !dbg !6136
  %arrayidx6 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx5, i64 0, i64 0, !dbg !6136
  %6 = load float, float* %arrayidx6, align 4, !dbg !6136
  %conv7 = fpext float %6 to double, !dbg !6136
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), double %conv, double %conv4, double %conv7), !dbg !6137
  %7 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6138
  %arrayidx9 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, !dbg !6138
  %arrayidx10 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx9, i64 0, i64 1, !dbg !6138
  %8 = load float, float* %arrayidx10, align 4, !dbg !6138
  %conv11 = fpext float %8 to double, !dbg !6138
  %9 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6139
  %arrayidx12 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 1, !dbg !6139
  %arrayidx13 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx12, i64 0, i64 1, !dbg !6139
  %10 = load float, float* %arrayidx13, align 4, !dbg !6139
  %conv14 = fpext float %10 to double, !dbg !6139
  %11 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6140
  %arrayidx15 = getelementptr inbounds [3 x float], [3 x float]* %11, i64 2, !dbg !6140
  %arrayidx16 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx15, i64 0, i64 1, !dbg !6140
  %12 = load float, float* %arrayidx16, align 4, !dbg !6140
  %conv17 = fpext float %12 to double, !dbg !6140
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), double %conv11, double %conv14, double %conv17), !dbg !6141
  %13 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6142
  %arrayidx19 = getelementptr inbounds [3 x float], [3 x float]* %13, i64 0, !dbg !6142
  %arrayidx20 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx19, i64 0, i64 2, !dbg !6142
  %14 = load float, float* %arrayidx20, align 4, !dbg !6142
  %conv21 = fpext float %14 to double, !dbg !6142
  %15 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6143
  %arrayidx22 = getelementptr inbounds [3 x float], [3 x float]* %15, i64 1, !dbg !6143
  %arrayidx23 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx22, i64 0, i64 2, !dbg !6143
  %16 = load float, float* %arrayidx23, align 4, !dbg !6143
  %conv24 = fpext float %16 to double, !dbg !6143
  %17 = load [3 x float]*, [3 x float]** %m.addr, align 8, !dbg !6144
  %arrayidx25 = getelementptr inbounds [3 x float], [3 x float]* %17, i64 2, !dbg !6144
  %arrayidx26 = getelementptr inbounds [3 x float], [3 x float]* %arrayidx25, i64 0, i64 2, !dbg !6144
  %18 = load float, float* %arrayidx26, align 4, !dbg !6144
  %conv27 = fpext float %18 to double, !dbg !6144
  %call28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), double %conv21, double %conv24, double %conv27), !dbg !6145
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6146
  ret void, !dbg !6147
}

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_m4(i8* %str, [4 x float]* %m) #0 !dbg !6148 {
entry:
  %str.addr = alloca i8*, align 8
  %m.addr = alloca [4 x float]*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !6151, metadata !DIExpression()), !dbg !6152
  store [4 x float]* %m, [4 x float]** %m.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %m.addr, metadata !6153, metadata !DIExpression()), !dbg !6154
  %0 = load i8*, i8** %str.addr, align 8, !dbg !6155
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %0), !dbg !6156
  %1 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6157
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, !dbg !6157
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !6157
  %2 = load float, float* %arrayidx1, align 4, !dbg !6157
  %conv = fpext float %2 to double, !dbg !6157
  %3 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6158
  %arrayidx2 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 1, !dbg !6158
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 0, !dbg !6158
  %4 = load float, float* %arrayidx3, align 4, !dbg !6158
  %conv4 = fpext float %4 to double, !dbg !6158
  %5 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6159
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 2, !dbg !6159
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !6159
  %6 = load float, float* %arrayidx6, align 4, !dbg !6159
  %conv7 = fpext float %6 to double, !dbg !6159
  %7 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6160
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %7, i64 3, !dbg !6160
  %arrayidx9 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx8, i64 0, i64 0, !dbg !6160
  %8 = load float, float* %arrayidx9, align 4, !dbg !6160
  %conv10 = fpext float %8 to double, !dbg !6160
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), double %conv, double %conv4, double %conv7, double %conv10), !dbg !6161
  %9 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6162
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %9, i64 0, !dbg !6162
  %arrayidx13 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx12, i64 0, i64 1, !dbg !6162
  %10 = load float, float* %arrayidx13, align 4, !dbg !6162
  %conv14 = fpext float %10 to double, !dbg !6162
  %11 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6163
  %arrayidx15 = getelementptr inbounds [4 x float], [4 x float]* %11, i64 1, !dbg !6163
  %arrayidx16 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx15, i64 0, i64 1, !dbg !6163
  %12 = load float, float* %arrayidx16, align 4, !dbg !6163
  %conv17 = fpext float %12 to double, !dbg !6163
  %13 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6164
  %arrayidx18 = getelementptr inbounds [4 x float], [4 x float]* %13, i64 2, !dbg !6164
  %arrayidx19 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx18, i64 0, i64 1, !dbg !6164
  %14 = load float, float* %arrayidx19, align 4, !dbg !6164
  %conv20 = fpext float %14 to double, !dbg !6164
  %15 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6165
  %arrayidx21 = getelementptr inbounds [4 x float], [4 x float]* %15, i64 3, !dbg !6165
  %arrayidx22 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx21, i64 0, i64 1, !dbg !6165
  %16 = load float, float* %arrayidx22, align 4, !dbg !6165
  %conv23 = fpext float %16 to double, !dbg !6165
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), double %conv14, double %conv17, double %conv20, double %conv23), !dbg !6166
  %17 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6167
  %arrayidx25 = getelementptr inbounds [4 x float], [4 x float]* %17, i64 0, !dbg !6167
  %arrayidx26 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx25, i64 0, i64 2, !dbg !6167
  %18 = load float, float* %arrayidx26, align 4, !dbg !6167
  %conv27 = fpext float %18 to double, !dbg !6167
  %19 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6168
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %19, i64 1, !dbg !6168
  %arrayidx29 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx28, i64 0, i64 2, !dbg !6168
  %20 = load float, float* %arrayidx29, align 4, !dbg !6168
  %conv30 = fpext float %20 to double, !dbg !6168
  %21 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6169
  %arrayidx31 = getelementptr inbounds [4 x float], [4 x float]* %21, i64 2, !dbg !6169
  %arrayidx32 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx31, i64 0, i64 2, !dbg !6169
  %22 = load float, float* %arrayidx32, align 4, !dbg !6169
  %conv33 = fpext float %22 to double, !dbg !6169
  %23 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6170
  %arrayidx34 = getelementptr inbounds [4 x float], [4 x float]* %23, i64 3, !dbg !6170
  %arrayidx35 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx34, i64 0, i64 2, !dbg !6170
  %24 = load float, float* %arrayidx35, align 4, !dbg !6170
  %conv36 = fpext float %24 to double, !dbg !6170
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), double %conv27, double %conv30, double %conv33, double %conv36), !dbg !6171
  %25 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6172
  %arrayidx38 = getelementptr inbounds [4 x float], [4 x float]* %25, i64 0, !dbg !6172
  %arrayidx39 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx38, i64 0, i64 3, !dbg !6172
  %26 = load float, float* %arrayidx39, align 4, !dbg !6172
  %conv40 = fpext float %26 to double, !dbg !6172
  %27 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6173
  %arrayidx41 = getelementptr inbounds [4 x float], [4 x float]* %27, i64 1, !dbg !6173
  %arrayidx42 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx41, i64 0, i64 3, !dbg !6173
  %28 = load float, float* %arrayidx42, align 4, !dbg !6173
  %conv43 = fpext float %28 to double, !dbg !6173
  %29 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6174
  %arrayidx44 = getelementptr inbounds [4 x float], [4 x float]* %29, i64 2, !dbg !6174
  %arrayidx45 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx44, i64 0, i64 3, !dbg !6174
  %30 = load float, float* %arrayidx45, align 4, !dbg !6174
  %conv46 = fpext float %30 to double, !dbg !6174
  %31 = load [4 x float]*, [4 x float]** %m.addr, align 8, !dbg !6175
  %arrayidx47 = getelementptr inbounds [4 x float], [4 x float]* %31, i64 3, !dbg !6175
  %arrayidx48 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx47, i64 0, i64 3, !dbg !6175
  %32 = load float, float* %arrayidx48, align 4, !dbg !6175
  %conv49 = fpext float %32 to double, !dbg !6175
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), double %conv40, double %conv43, double %conv46, double %conv49), !dbg !6176
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6177
  ret void, !dbg !6178
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @svd_m4([4 x float]* %U, float* %s, [4 x float]* %V, [4 x float]* %A_) #0 !dbg !6179 {
entry:
  %U.addr = alloca [4 x float]*, align 8
  %s.addr = alloca float*, align 8
  %V.addr = alloca [4 x float]*, align 8
  %A_.addr = alloca [4 x float]*, align 8
  %A = alloca [4 x [4 x float]], align 16
  %work1 = alloca [4 x float], align 16
  %work2 = alloca [4 x float], align 16
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %maxiter = alloca i32, align 4
  %nu = alloca i32, align 4
  %work = alloca float*, align 8
  %e = alloca float*, align 8
  %eps = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %p = alloca i32, align 4
  %pp = alloca i32, align 4
  %iter = alloca i32, align 4
  %nct = alloca i32, align 4
  %nrt = alloca i32, align 4
  %invsk = alloca float, align 4
  %t = alloca float, align 4
  %invek = alloca float, align 4
  %invek1 = alloca float, align 4
  %t240 = alloca float, align 4
  %t354 = alloca float, align 4
  %t472 = alloca float, align 4
  %kase = alloca i32, align 4
  %ks = alloca i32, align 4
  %t584 = alloca float, align 4
  %f = alloca float, align 4
  %t640 = alloca float, align 4
  %invt = alloca float, align 4
  %cs = alloca float, align 4
  %sn = alloca float, align 4
  %f712 = alloca float, align 4
  %t723 = alloca float, align 4
  %invt727 = alloca float, align 4
  %cs729 = alloca float, align 4
  %sn733 = alloca float, align 4
  %scale = alloca float, align 4
  %invscale = alloca float, align 4
  %sp = alloca float, align 4
  %spm1 = alloca float, align 4
  %epm1 = alloca float, align 4
  %sk = alloca float, align 4
  %ek = alloca float, align 4
  %b = alloca float, align 4
  %c = alloca float, align 4
  %shift = alloca float, align 4
  %f836 = alloca float, align 4
  %g = alloca float, align 4
  %t863 = alloca float, align 4
  %cs865 = alloca float, align 4
  %sn873 = alloca float, align 4
  %t1097 = alloca float, align 4
  store [4 x float]* %U, [4 x float]** %U.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %U.addr, metadata !6182, metadata !DIExpression()), !dbg !6183
  store float* %s, float** %s.addr, align 8
  call void @llvm.dbg.declare(metadata float** %s.addr, metadata !6184, metadata !DIExpression()), !dbg !6185
  store [4 x float]* %V, [4 x float]** %V.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %V.addr, metadata !6186, metadata !DIExpression()), !dbg !6187
  store [4 x float]* %A_, [4 x float]** %A_.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %A_.addr, metadata !6188, metadata !DIExpression()), !dbg !6189
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %A, metadata !6190, metadata !DIExpression()), !dbg !6191
  call void @llvm.dbg.declare(metadata [4 x float]* %work1, metadata !6192, metadata !DIExpression()), !dbg !6193
  call void @llvm.dbg.declare(metadata [4 x float]* %work2, metadata !6194, metadata !DIExpression()), !dbg !6195
  call void @llvm.dbg.declare(metadata i32* %m, metadata !6196, metadata !DIExpression()), !dbg !6197
  store i32 4, i32* %m, align 4, !dbg !6197
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6198, metadata !DIExpression()), !dbg !6199
  store i32 4, i32* %n, align 4, !dbg !6199
  call void @llvm.dbg.declare(metadata i32* %maxiter, metadata !6200, metadata !DIExpression()), !dbg !6201
  store i32 200, i32* %maxiter, align 4, !dbg !6201
  call void @llvm.dbg.declare(metadata i32* %nu, metadata !6202, metadata !DIExpression()), !dbg !6203
  %0 = load i32, i32* %m, align 4, !dbg !6204
  %1 = load i32, i32* %n, align 4, !dbg !6205
  %call = call i32 @min_ii(i32 %0, i32 %1), !dbg !6206
  store i32 %call, i32* %nu, align 4, !dbg !6203
  call void @llvm.dbg.declare(metadata float** %work, metadata !6207, metadata !DIExpression()), !dbg !6208
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %work1, i64 0, i64 0, !dbg !6209
  store float* %arraydecay, float** %work, align 8, !dbg !6208
  call void @llvm.dbg.declare(metadata float** %e, metadata !6210, metadata !DIExpression()), !dbg !6211
  %arraydecay1 = getelementptr inbounds [4 x float], [4 x float]* %work2, i64 0, i64 0, !dbg !6212
  store float* %arraydecay1, float** %e, align 8, !dbg !6211
  call void @llvm.dbg.declare(metadata float* %eps, metadata !6213, metadata !DIExpression()), !dbg !6214
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6215, metadata !DIExpression()), !dbg !6216
  store i32 0, i32* %i, align 4, !dbg !6216
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6217, metadata !DIExpression()), !dbg !6218
  store i32 0, i32* %j, align 4, !dbg !6218
  call void @llvm.dbg.declare(metadata i32* %k, metadata !6219, metadata !DIExpression()), !dbg !6220
  store i32 0, i32* %k, align 4, !dbg !6220
  call void @llvm.dbg.declare(metadata i32* %p, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata i32* %pp, metadata !6223, metadata !DIExpression()), !dbg !6224
  call void @llvm.dbg.declare(metadata i32* %iter, metadata !6225, metadata !DIExpression()), !dbg !6226
  call void @llvm.dbg.declare(metadata i32* %nct, metadata !6227, metadata !DIExpression()), !dbg !6228
  %2 = load i32, i32* %m, align 4, !dbg !6229
  %sub = sub nsw i32 %2, 1, !dbg !6230
  %3 = load i32, i32* %n, align 4, !dbg !6231
  %call2 = call i32 @min_ii(i32 %sub, i32 %3), !dbg !6232
  store i32 %call2, i32* %nct, align 4, !dbg !6228
  call void @llvm.dbg.declare(metadata i32* %nrt, metadata !6233, metadata !DIExpression()), !dbg !6234
  %4 = load i32, i32* %n, align 4, !dbg !6235
  %sub3 = sub nsw i32 %4, 2, !dbg !6236
  %5 = load i32, i32* %m, align 4, !dbg !6237
  %call4 = call i32 @min_ii(i32 %sub3, i32 %5), !dbg !6238
  %call5 = call i32 @max_ii(i32 0, i32 %call4), !dbg !6239
  store i32 %call5, i32* %nrt, align 4, !dbg !6234
  %arraydecay6 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 0, !dbg !6240
  %6 = load [4 x float]*, [4 x float]** %A_.addr, align 8, !dbg !6241
  call void @copy_m4_m4([4 x float]* %arraydecay6, [4 x float]* %6), !dbg !6242
  %7 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6243
  call void @zero_m4([4 x float]* %7), !dbg !6244
  %8 = load float*, float** %s.addr, align 8, !dbg !6245
  call void @zero_v4(float* %8), !dbg !6246
  store i32 0, i32* %k, align 4, !dbg !6247
  br label %for.cond, !dbg !6249

for.cond:                                         ; preds = %for.inc280, %entry
  %9 = load i32, i32* %k, align 4, !dbg !6250
  %10 = load i32, i32* %nct, align 4, !dbg !6252
  %11 = load i32, i32* %nrt, align 4, !dbg !6253
  %call7 = call i32 @max_ii(i32 %10, i32 %11), !dbg !6254
  %cmp = icmp slt i32 %9, %call7, !dbg !6255
  br i1 %cmp, label %for.body, label %for.end282, !dbg !6256

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %k, align 4, !dbg !6257
  %13 = load i32, i32* %nct, align 4, !dbg !6260
  %cmp8 = icmp slt i32 %12, %13, !dbg !6261
  br i1 %cmp8, label %if.then, label %if.end57, !dbg !6262

if.then:                                          ; preds = %for.body
  %14 = load float*, float** %s.addr, align 8, !dbg !6263
  %15 = load i32, i32* %k, align 4, !dbg !6265
  %idxprom = sext i32 %15 to i64, !dbg !6263
  %arrayidx = getelementptr inbounds float, float* %14, i64 %idxprom, !dbg !6263
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !6266
  %16 = load i32, i32* %k, align 4, !dbg !6267
  store i32 %16, i32* %i, align 4, !dbg !6269
  br label %for.cond9, !dbg !6270

for.cond9:                                        ; preds = %for.inc, %if.then
  %17 = load i32, i32* %i, align 4, !dbg !6271
  %18 = load i32, i32* %m, align 4, !dbg !6273
  %cmp10 = icmp slt i32 %17, %18, !dbg !6274
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !6275

for.body11:                                       ; preds = %for.cond9
  %19 = load float*, float** %s.addr, align 8, !dbg !6276
  %20 = load i32, i32* %k, align 4, !dbg !6278
  %idxprom12 = sext i32 %20 to i64, !dbg !6276
  %arrayidx13 = getelementptr inbounds float, float* %19, i64 %idxprom12, !dbg !6276
  %21 = load float, float* %arrayidx13, align 4, !dbg !6276
  %22 = load i32, i32* %i, align 4, !dbg !6279
  %idxprom14 = sext i32 %22 to i64, !dbg !6280
  %arrayidx15 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom14, !dbg !6280
  %23 = load i32, i32* %k, align 4, !dbg !6281
  %idxprom16 = sext i32 %23 to i64, !dbg !6280
  %arrayidx17 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx15, i64 0, i64 %idxprom16, !dbg !6280
  %24 = load float, float* %arrayidx17, align 4, !dbg !6280
  %call18 = call float @hypotf(float %21, float %24) #5, !dbg !6282
  %25 = load float*, float** %s.addr, align 8, !dbg !6283
  %26 = load i32, i32* %k, align 4, !dbg !6284
  %idxprom19 = sext i32 %26 to i64, !dbg !6283
  %arrayidx20 = getelementptr inbounds float, float* %25, i64 %idxprom19, !dbg !6283
  store float %call18, float* %arrayidx20, align 4, !dbg !6285
  br label %for.inc, !dbg !6286

for.inc:                                          ; preds = %for.body11
  %27 = load i32, i32* %i, align 4, !dbg !6287
  %inc = add nsw i32 %27, 1, !dbg !6287
  store i32 %inc, i32* %i, align 4, !dbg !6287
  br label %for.cond9, !dbg !6288, !llvm.loop !6289

for.end:                                          ; preds = %for.cond9
  %28 = load float*, float** %s.addr, align 8, !dbg !6291
  %29 = load i32, i32* %k, align 4, !dbg !6293
  %idxprom21 = sext i32 %29 to i64, !dbg !6291
  %arrayidx22 = getelementptr inbounds float, float* %28, i64 %idxprom21, !dbg !6291
  %30 = load float, float* %arrayidx22, align 4, !dbg !6291
  %cmp23 = fcmp une float %30, 0.000000e+00, !dbg !6294
  br i1 %cmp23, label %if.then24, label %if.end51, !dbg !6295

if.then24:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata float* %invsk, metadata !6296, metadata !DIExpression()), !dbg !6298
  %31 = load i32, i32* %k, align 4, !dbg !6299
  %idxprom25 = sext i32 %31 to i64, !dbg !6301
  %arrayidx26 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom25, !dbg !6301
  %32 = load i32, i32* %k, align 4, !dbg !6302
  %idxprom27 = sext i32 %32 to i64, !dbg !6301
  %arrayidx28 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx26, i64 0, i64 %idxprom27, !dbg !6301
  %33 = load float, float* %arrayidx28, align 4, !dbg !6301
  %cmp29 = fcmp olt float %33, 0.000000e+00, !dbg !6303
  br i1 %cmp29, label %if.then30, label %if.end, !dbg !6304

if.then30:                                        ; preds = %if.then24
  %34 = load float*, float** %s.addr, align 8, !dbg !6305
  %35 = load i32, i32* %k, align 4, !dbg !6307
  %idxprom31 = sext i32 %35 to i64, !dbg !6305
  %arrayidx32 = getelementptr inbounds float, float* %34, i64 %idxprom31, !dbg !6305
  %36 = load float, float* %arrayidx32, align 4, !dbg !6305
  %fneg = fneg float %36, !dbg !6308
  %37 = load float*, float** %s.addr, align 8, !dbg !6309
  %38 = load i32, i32* %k, align 4, !dbg !6310
  %idxprom33 = sext i32 %38 to i64, !dbg !6309
  %arrayidx34 = getelementptr inbounds float, float* %37, i64 %idxprom33, !dbg !6309
  store float %fneg, float* %arrayidx34, align 4, !dbg !6311
  br label %if.end, !dbg !6312

if.end:                                           ; preds = %if.then30, %if.then24
  %39 = load float*, float** %s.addr, align 8, !dbg !6313
  %40 = load i32, i32* %k, align 4, !dbg !6314
  %idxprom35 = sext i32 %40 to i64, !dbg !6313
  %arrayidx36 = getelementptr inbounds float, float* %39, i64 %idxprom35, !dbg !6313
  %41 = load float, float* %arrayidx36, align 4, !dbg !6313
  %div = fdiv float 1.000000e+00, %41, !dbg !6315
  store float %div, float* %invsk, align 4, !dbg !6316
  %42 = load i32, i32* %k, align 4, !dbg !6317
  store i32 %42, i32* %i, align 4, !dbg !6319
  br label %for.cond37, !dbg !6320

for.cond37:                                       ; preds = %for.inc44, %if.end
  %43 = load i32, i32* %i, align 4, !dbg !6321
  %44 = load i32, i32* %m, align 4, !dbg !6323
  %cmp38 = icmp slt i32 %43, %44, !dbg !6324
  br i1 %cmp38, label %for.body39, label %for.end46, !dbg !6325

for.body39:                                       ; preds = %for.cond37
  %45 = load float, float* %invsk, align 4, !dbg !6326
  %46 = load i32, i32* %i, align 4, !dbg !6328
  %idxprom40 = sext i32 %46 to i64, !dbg !6329
  %arrayidx41 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom40, !dbg !6329
  %47 = load i32, i32* %k, align 4, !dbg !6330
  %idxprom42 = sext i32 %47 to i64, !dbg !6329
  %arrayidx43 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx41, i64 0, i64 %idxprom42, !dbg !6329
  %48 = load float, float* %arrayidx43, align 4, !dbg !6331
  %mul = fmul float %48, %45, !dbg !6331
  store float %mul, float* %arrayidx43, align 4, !dbg !6331
  br label %for.inc44, !dbg !6332

for.inc44:                                        ; preds = %for.body39
  %49 = load i32, i32* %i, align 4, !dbg !6333
  %inc45 = add nsw i32 %49, 1, !dbg !6333
  store i32 %inc45, i32* %i, align 4, !dbg !6333
  br label %for.cond37, !dbg !6334, !llvm.loop !6335

for.end46:                                        ; preds = %for.cond37
  %50 = load i32, i32* %k, align 4, !dbg !6337
  %idxprom47 = sext i32 %50 to i64, !dbg !6338
  %arrayidx48 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom47, !dbg !6338
  %51 = load i32, i32* %k, align 4, !dbg !6339
  %idxprom49 = sext i32 %51 to i64, !dbg !6338
  %arrayidx50 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx48, i64 0, i64 %idxprom49, !dbg !6338
  %52 = load float, float* %arrayidx50, align 4, !dbg !6340
  %add = fadd float %52, 1.000000e+00, !dbg !6340
  store float %add, float* %arrayidx50, align 4, !dbg !6340
  br label %if.end51, !dbg !6341

if.end51:                                         ; preds = %for.end46, %for.end
  %53 = load float*, float** %s.addr, align 8, !dbg !6342
  %54 = load i32, i32* %k, align 4, !dbg !6343
  %idxprom52 = sext i32 %54 to i64, !dbg !6342
  %arrayidx53 = getelementptr inbounds float, float* %53, i64 %idxprom52, !dbg !6342
  %55 = load float, float* %arrayidx53, align 4, !dbg !6342
  %fneg54 = fneg float %55, !dbg !6344
  %56 = load float*, float** %s.addr, align 8, !dbg !6345
  %57 = load i32, i32* %k, align 4, !dbg !6346
  %idxprom55 = sext i32 %57 to i64, !dbg !6345
  %arrayidx56 = getelementptr inbounds float, float* %56, i64 %idxprom55, !dbg !6345
  store float %fneg54, float* %arrayidx56, align 4, !dbg !6347
  br label %if.end57, !dbg !6348

if.end57:                                         ; preds = %if.end51, %for.body
  %58 = load i32, i32* %k, align 4, !dbg !6349
  %add58 = add nsw i32 %58, 1, !dbg !6351
  store i32 %add58, i32* %j, align 4, !dbg !6352
  br label %for.cond59, !dbg !6353

for.cond59:                                       ; preds = %for.inc112, %if.end57
  %59 = load i32, i32* %j, align 4, !dbg !6354
  %60 = load i32, i32* %n, align 4, !dbg !6356
  %cmp60 = icmp slt i32 %59, %60, !dbg !6357
  br i1 %cmp60, label %for.body61, label %for.end114, !dbg !6358

for.body61:                                       ; preds = %for.cond59
  %61 = load i32, i32* %k, align 4, !dbg !6359
  %62 = load i32, i32* %nct, align 4, !dbg !6362
  %cmp62 = icmp slt i32 %61, %62, !dbg !6363
  br i1 %cmp62, label %land.lhs.true, label %if.end105, !dbg !6364

land.lhs.true:                                    ; preds = %for.body61
  %63 = load float*, float** %s.addr, align 8, !dbg !6365
  %64 = load i32, i32* %k, align 4, !dbg !6366
  %idxprom63 = sext i32 %64 to i64, !dbg !6365
  %arrayidx64 = getelementptr inbounds float, float* %63, i64 %idxprom63, !dbg !6365
  %65 = load float, float* %arrayidx64, align 4, !dbg !6365
  %cmp65 = fcmp une float %65, 0.000000e+00, !dbg !6367
  br i1 %cmp65, label %if.then66, label %if.end105, !dbg !6368

if.then66:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata float* %t, metadata !6369, metadata !DIExpression()), !dbg !6371
  store float 0.000000e+00, float* %t, align 4, !dbg !6371
  %66 = load i32, i32* %k, align 4, !dbg !6372
  store i32 %66, i32* %i, align 4, !dbg !6374
  br label %for.cond67, !dbg !6375

for.cond67:                                       ; preds = %for.inc80, %if.then66
  %67 = load i32, i32* %i, align 4, !dbg !6376
  %68 = load i32, i32* %m, align 4, !dbg !6378
  %cmp68 = icmp slt i32 %67, %68, !dbg !6379
  br i1 %cmp68, label %for.body69, label %for.end82, !dbg !6380

for.body69:                                       ; preds = %for.cond67
  %69 = load i32, i32* %i, align 4, !dbg !6381
  %idxprom70 = sext i32 %69 to i64, !dbg !6383
  %arrayidx71 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom70, !dbg !6383
  %70 = load i32, i32* %k, align 4, !dbg !6384
  %idxprom72 = sext i32 %70 to i64, !dbg !6383
  %arrayidx73 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx71, i64 0, i64 %idxprom72, !dbg !6383
  %71 = load float, float* %arrayidx73, align 4, !dbg !6383
  %72 = load i32, i32* %i, align 4, !dbg !6385
  %idxprom74 = sext i32 %72 to i64, !dbg !6386
  %arrayidx75 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom74, !dbg !6386
  %73 = load i32, i32* %j, align 4, !dbg !6387
  %idxprom76 = sext i32 %73 to i64, !dbg !6386
  %arrayidx77 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx75, i64 0, i64 %idxprom76, !dbg !6386
  %74 = load float, float* %arrayidx77, align 4, !dbg !6386
  %mul78 = fmul float %71, %74, !dbg !6388
  %75 = load float, float* %t, align 4, !dbg !6389
  %add79 = fadd float %75, %mul78, !dbg !6389
  store float %add79, float* %t, align 4, !dbg !6389
  br label %for.inc80, !dbg !6390

for.inc80:                                        ; preds = %for.body69
  %76 = load i32, i32* %i, align 4, !dbg !6391
  %inc81 = add nsw i32 %76, 1, !dbg !6391
  store i32 %inc81, i32* %i, align 4, !dbg !6391
  br label %for.cond67, !dbg !6392, !llvm.loop !6393

for.end82:                                        ; preds = %for.cond67
  %77 = load float, float* %t, align 4, !dbg !6395
  %fneg83 = fneg float %77, !dbg !6396
  %78 = load i32, i32* %k, align 4, !dbg !6397
  %idxprom84 = sext i32 %78 to i64, !dbg !6398
  %arrayidx85 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom84, !dbg !6398
  %79 = load i32, i32* %k, align 4, !dbg !6399
  %idxprom86 = sext i32 %79 to i64, !dbg !6398
  %arrayidx87 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx85, i64 0, i64 %idxprom86, !dbg !6398
  %80 = load float, float* %arrayidx87, align 4, !dbg !6398
  %div88 = fdiv float %fneg83, %80, !dbg !6400
  store float %div88, float* %t, align 4, !dbg !6401
  %81 = load i32, i32* %k, align 4, !dbg !6402
  store i32 %81, i32* %i, align 4, !dbg !6404
  br label %for.cond89, !dbg !6405

for.cond89:                                       ; preds = %for.inc102, %for.end82
  %82 = load i32, i32* %i, align 4, !dbg !6406
  %83 = load i32, i32* %m, align 4, !dbg !6408
  %cmp90 = icmp slt i32 %82, %83, !dbg !6409
  br i1 %cmp90, label %for.body91, label %for.end104, !dbg !6410

for.body91:                                       ; preds = %for.cond89
  %84 = load float, float* %t, align 4, !dbg !6411
  %85 = load i32, i32* %i, align 4, !dbg !6413
  %idxprom92 = sext i32 %85 to i64, !dbg !6414
  %arrayidx93 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom92, !dbg !6414
  %86 = load i32, i32* %k, align 4, !dbg !6415
  %idxprom94 = sext i32 %86 to i64, !dbg !6414
  %arrayidx95 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx93, i64 0, i64 %idxprom94, !dbg !6414
  %87 = load float, float* %arrayidx95, align 4, !dbg !6414
  %mul96 = fmul float %84, %87, !dbg !6416
  %88 = load i32, i32* %i, align 4, !dbg !6417
  %idxprom97 = sext i32 %88 to i64, !dbg !6418
  %arrayidx98 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom97, !dbg !6418
  %89 = load i32, i32* %j, align 4, !dbg !6419
  %idxprom99 = sext i32 %89 to i64, !dbg !6418
  %arrayidx100 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx98, i64 0, i64 %idxprom99, !dbg !6418
  %90 = load float, float* %arrayidx100, align 4, !dbg !6420
  %add101 = fadd float %90, %mul96, !dbg !6420
  store float %add101, float* %arrayidx100, align 4, !dbg !6420
  br label %for.inc102, !dbg !6421

for.inc102:                                       ; preds = %for.body91
  %91 = load i32, i32* %i, align 4, !dbg !6422
  %inc103 = add nsw i32 %91, 1, !dbg !6422
  store i32 %inc103, i32* %i, align 4, !dbg !6422
  br label %for.cond89, !dbg !6423, !llvm.loop !6424

for.end104:                                       ; preds = %for.cond89
  br label %if.end105, !dbg !6426

if.end105:                                        ; preds = %for.end104, %land.lhs.true, %for.body61
  %92 = load i32, i32* %k, align 4, !dbg !6427
  %idxprom106 = sext i32 %92 to i64, !dbg !6428
  %arrayidx107 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom106, !dbg !6428
  %93 = load i32, i32* %j, align 4, !dbg !6429
  %idxprom108 = sext i32 %93 to i64, !dbg !6428
  %arrayidx109 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx107, i64 0, i64 %idxprom108, !dbg !6428
  %94 = load float, float* %arrayidx109, align 4, !dbg !6428
  %95 = load float*, float** %e, align 8, !dbg !6430
  %96 = load i32, i32* %j, align 4, !dbg !6431
  %idxprom110 = sext i32 %96 to i64, !dbg !6430
  %arrayidx111 = getelementptr inbounds float, float* %95, i64 %idxprom110, !dbg !6430
  store float %94, float* %arrayidx111, align 4, !dbg !6432
  br label %for.inc112, !dbg !6433

for.inc112:                                       ; preds = %if.end105
  %97 = load i32, i32* %j, align 4, !dbg !6434
  %inc113 = add nsw i32 %97, 1, !dbg !6434
  store i32 %inc113, i32* %j, align 4, !dbg !6434
  br label %for.cond59, !dbg !6435, !llvm.loop !6436

for.end114:                                       ; preds = %for.cond59
  %98 = load i32, i32* %k, align 4, !dbg !6438
  %99 = load i32, i32* %nct, align 4, !dbg !6440
  %cmp115 = icmp slt i32 %98, %99, !dbg !6441
  br i1 %cmp115, label %if.then116, label %if.end131, !dbg !6442

if.then116:                                       ; preds = %for.end114
  %100 = load i32, i32* %k, align 4, !dbg !6443
  store i32 %100, i32* %i, align 4, !dbg !6446
  br label %for.cond117, !dbg !6447

for.cond117:                                      ; preds = %for.inc128, %if.then116
  %101 = load i32, i32* %i, align 4, !dbg !6448
  %102 = load i32, i32* %m, align 4, !dbg !6450
  %cmp118 = icmp slt i32 %101, %102, !dbg !6451
  br i1 %cmp118, label %for.body119, label %for.end130, !dbg !6452

for.body119:                                      ; preds = %for.cond117
  %103 = load i32, i32* %i, align 4, !dbg !6453
  %idxprom120 = sext i32 %103 to i64, !dbg !6454
  %arrayidx121 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom120, !dbg !6454
  %104 = load i32, i32* %k, align 4, !dbg !6455
  %idxprom122 = sext i32 %104 to i64, !dbg !6454
  %arrayidx123 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx121, i64 0, i64 %idxprom122, !dbg !6454
  %105 = load float, float* %arrayidx123, align 4, !dbg !6454
  %106 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6456
  %107 = load i32, i32* %i, align 4, !dbg !6457
  %idxprom124 = sext i32 %107 to i64, !dbg !6456
  %arrayidx125 = getelementptr inbounds [4 x float], [4 x float]* %106, i64 %idxprom124, !dbg !6456
  %108 = load i32, i32* %k, align 4, !dbg !6458
  %idxprom126 = sext i32 %108 to i64, !dbg !6456
  %arrayidx127 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx125, i64 0, i64 %idxprom126, !dbg !6456
  store float %105, float* %arrayidx127, align 4, !dbg !6459
  br label %for.inc128, !dbg !6456

for.inc128:                                       ; preds = %for.body119
  %109 = load i32, i32* %i, align 4, !dbg !6460
  %inc129 = add nsw i32 %109, 1, !dbg !6460
  store i32 %inc129, i32* %i, align 4, !dbg !6460
  br label %for.cond117, !dbg !6461, !llvm.loop !6462

for.end130:                                       ; preds = %for.cond117
  br label %if.end131, !dbg !6464

if.end131:                                        ; preds = %for.end130, %for.end114
  %110 = load i32, i32* %k, align 4, !dbg !6465
  %111 = load i32, i32* %nrt, align 4, !dbg !6467
  %cmp132 = icmp slt i32 %110, %111, !dbg !6468
  br i1 %cmp132, label %if.then133, label %if.end279, !dbg !6469

if.then133:                                       ; preds = %if.end131
  %112 = load float*, float** %e, align 8, !dbg !6470
  %113 = load i32, i32* %k, align 4, !dbg !6472
  %idxprom134 = sext i32 %113 to i64, !dbg !6470
  %arrayidx135 = getelementptr inbounds float, float* %112, i64 %idxprom134, !dbg !6470
  store float 0.000000e+00, float* %arrayidx135, align 4, !dbg !6473
  %114 = load i32, i32* %k, align 4, !dbg !6474
  %add136 = add nsw i32 %114, 1, !dbg !6476
  store i32 %add136, i32* %i, align 4, !dbg !6477
  br label %for.cond137, !dbg !6478

for.cond137:                                      ; preds = %for.inc147, %if.then133
  %115 = load i32, i32* %i, align 4, !dbg !6479
  %116 = load i32, i32* %n, align 4, !dbg !6481
  %cmp138 = icmp slt i32 %115, %116, !dbg !6482
  br i1 %cmp138, label %for.body139, label %for.end149, !dbg !6483

for.body139:                                      ; preds = %for.cond137
  %117 = load float*, float** %e, align 8, !dbg !6484
  %118 = load i32, i32* %k, align 4, !dbg !6486
  %idxprom140 = sext i32 %118 to i64, !dbg !6484
  %arrayidx141 = getelementptr inbounds float, float* %117, i64 %idxprom140, !dbg !6484
  %119 = load float, float* %arrayidx141, align 4, !dbg !6484
  %120 = load float*, float** %e, align 8, !dbg !6487
  %121 = load i32, i32* %i, align 4, !dbg !6488
  %idxprom142 = sext i32 %121 to i64, !dbg !6487
  %arrayidx143 = getelementptr inbounds float, float* %120, i64 %idxprom142, !dbg !6487
  %122 = load float, float* %arrayidx143, align 4, !dbg !6487
  %call144 = call float @hypotf(float %119, float %122) #5, !dbg !6489
  %123 = load float*, float** %e, align 8, !dbg !6490
  %124 = load i32, i32* %k, align 4, !dbg !6491
  %idxprom145 = sext i32 %124 to i64, !dbg !6490
  %arrayidx146 = getelementptr inbounds float, float* %123, i64 %idxprom145, !dbg !6490
  store float %call144, float* %arrayidx146, align 4, !dbg !6492
  br label %for.inc147, !dbg !6493

for.inc147:                                       ; preds = %for.body139
  %125 = load i32, i32* %i, align 4, !dbg !6494
  %inc148 = add nsw i32 %125, 1, !dbg !6494
  store i32 %inc148, i32* %i, align 4, !dbg !6494
  br label %for.cond137, !dbg !6495, !llvm.loop !6496

for.end149:                                       ; preds = %for.cond137
  %126 = load float*, float** %e, align 8, !dbg !6498
  %127 = load i32, i32* %k, align 4, !dbg !6500
  %idxprom150 = sext i32 %127 to i64, !dbg !6498
  %arrayidx151 = getelementptr inbounds float, float* %126, i64 %idxprom150, !dbg !6498
  %128 = load float, float* %arrayidx151, align 4, !dbg !6498
  %cmp152 = fcmp une float %128, 0.000000e+00, !dbg !6501
  br i1 %cmp152, label %if.then153, label %if.end182, !dbg !6502

if.then153:                                       ; preds = %for.end149
  call void @llvm.dbg.declare(metadata float* %invek, metadata !6503, metadata !DIExpression()), !dbg !6505
  %129 = load float*, float** %e, align 8, !dbg !6506
  %130 = load i32, i32* %k, align 4, !dbg !6508
  %add154 = add nsw i32 %130, 1, !dbg !6509
  %idxprom155 = sext i32 %add154 to i64, !dbg !6506
  %arrayidx156 = getelementptr inbounds float, float* %129, i64 %idxprom155, !dbg !6506
  %131 = load float, float* %arrayidx156, align 4, !dbg !6506
  %cmp157 = fcmp olt float %131, 0.000000e+00, !dbg !6510
  br i1 %cmp157, label %if.then158, label %if.end164, !dbg !6511

if.then158:                                       ; preds = %if.then153
  %132 = load float*, float** %e, align 8, !dbg !6512
  %133 = load i32, i32* %k, align 4, !dbg !6514
  %idxprom159 = sext i32 %133 to i64, !dbg !6512
  %arrayidx160 = getelementptr inbounds float, float* %132, i64 %idxprom159, !dbg !6512
  %134 = load float, float* %arrayidx160, align 4, !dbg !6512
  %fneg161 = fneg float %134, !dbg !6515
  %135 = load float*, float** %e, align 8, !dbg !6516
  %136 = load i32, i32* %k, align 4, !dbg !6517
  %idxprom162 = sext i32 %136 to i64, !dbg !6516
  %arrayidx163 = getelementptr inbounds float, float* %135, i64 %idxprom162, !dbg !6516
  store float %fneg161, float* %arrayidx163, align 4, !dbg !6518
  br label %if.end164, !dbg !6519

if.end164:                                        ; preds = %if.then158, %if.then153
  %137 = load float*, float** %e, align 8, !dbg !6520
  %138 = load i32, i32* %k, align 4, !dbg !6521
  %idxprom165 = sext i32 %138 to i64, !dbg !6520
  %arrayidx166 = getelementptr inbounds float, float* %137, i64 %idxprom165, !dbg !6520
  %139 = load float, float* %arrayidx166, align 4, !dbg !6520
  %div167 = fdiv float 1.000000e+00, %139, !dbg !6522
  store float %div167, float* %invek, align 4, !dbg !6523
  %140 = load i32, i32* %k, align 4, !dbg !6524
  %add168 = add nsw i32 %140, 1, !dbg !6526
  store i32 %add168, i32* %i, align 4, !dbg !6527
  br label %for.cond169, !dbg !6528

for.cond169:                                      ; preds = %for.inc175, %if.end164
  %141 = load i32, i32* %i, align 4, !dbg !6529
  %142 = load i32, i32* %n, align 4, !dbg !6531
  %cmp170 = icmp slt i32 %141, %142, !dbg !6532
  br i1 %cmp170, label %for.body171, label %for.end177, !dbg !6533

for.body171:                                      ; preds = %for.cond169
  %143 = load float, float* %invek, align 4, !dbg !6534
  %144 = load float*, float** %e, align 8, !dbg !6536
  %145 = load i32, i32* %i, align 4, !dbg !6537
  %idxprom172 = sext i32 %145 to i64, !dbg !6536
  %arrayidx173 = getelementptr inbounds float, float* %144, i64 %idxprom172, !dbg !6536
  %146 = load float, float* %arrayidx173, align 4, !dbg !6538
  %mul174 = fmul float %146, %143, !dbg !6538
  store float %mul174, float* %arrayidx173, align 4, !dbg !6538
  br label %for.inc175, !dbg !6539

for.inc175:                                       ; preds = %for.body171
  %147 = load i32, i32* %i, align 4, !dbg !6540
  %inc176 = add nsw i32 %147, 1, !dbg !6540
  store i32 %inc176, i32* %i, align 4, !dbg !6540
  br label %for.cond169, !dbg !6541, !llvm.loop !6542

for.end177:                                       ; preds = %for.cond169
  %148 = load float*, float** %e, align 8, !dbg !6544
  %149 = load i32, i32* %k, align 4, !dbg !6545
  %add178 = add nsw i32 %149, 1, !dbg !6546
  %idxprom179 = sext i32 %add178 to i64, !dbg !6544
  %arrayidx180 = getelementptr inbounds float, float* %148, i64 %idxprom179, !dbg !6544
  %150 = load float, float* %arrayidx180, align 4, !dbg !6547
  %add181 = fadd float %150, 1.000000e+00, !dbg !6547
  store float %add181, float* %arrayidx180, align 4, !dbg !6547
  br label %if.end182, !dbg !6548

if.end182:                                        ; preds = %for.end177, %for.end149
  %151 = load float*, float** %e, align 8, !dbg !6549
  %152 = load i32, i32* %k, align 4, !dbg !6550
  %idxprom183 = sext i32 %152 to i64, !dbg !6549
  %arrayidx184 = getelementptr inbounds float, float* %151, i64 %idxprom183, !dbg !6549
  %153 = load float, float* %arrayidx184, align 4, !dbg !6549
  %fneg185 = fneg float %153, !dbg !6551
  %154 = load float*, float** %e, align 8, !dbg !6552
  %155 = load i32, i32* %k, align 4, !dbg !6553
  %idxprom186 = sext i32 %155 to i64, !dbg !6552
  %arrayidx187 = getelementptr inbounds float, float* %154, i64 %idxprom186, !dbg !6552
  store float %fneg185, float* %arrayidx187, align 4, !dbg !6554
  %156 = load i32, i32* %k, align 4, !dbg !6555
  %add188 = add nsw i32 %156, 1, !dbg !6557
  %157 = load i32, i32* %m, align 4, !dbg !6558
  %cmp189 = icmp slt i32 %add188, %157, !dbg !6559
  %conv = zext i1 %cmp189 to i32, !dbg !6559
  %158 = load float*, float** %e, align 8, !dbg !6560
  %159 = load i32, i32* %k, align 4, !dbg !6561
  %idxprom190 = sext i32 %159 to i64, !dbg !6560
  %arrayidx191 = getelementptr inbounds float, float* %158, i64 %idxprom190, !dbg !6560
  %160 = load float, float* %arrayidx191, align 4, !dbg !6560
  %cmp192 = fcmp une float %160, 0.000000e+00, !dbg !6562
  %conv193 = zext i1 %cmp192 to i32, !dbg !6562
  %and = and i32 %conv, %conv193, !dbg !6563
  %tobool = icmp ne i32 %and, 0, !dbg !6563
  br i1 %tobool, label %if.then194, label %if.end264, !dbg !6564

if.then194:                                       ; preds = %if.end182
  call void @llvm.dbg.declare(metadata float* %invek1, metadata !6565, metadata !DIExpression()), !dbg !6567
  %161 = load i32, i32* %k, align 4, !dbg !6568
  %add195 = add nsw i32 %161, 1, !dbg !6570
  store i32 %add195, i32* %i, align 4, !dbg !6571
  br label %for.cond196, !dbg !6572

for.cond196:                                      ; preds = %for.inc202, %if.then194
  %162 = load i32, i32* %i, align 4, !dbg !6573
  %163 = load i32, i32* %m, align 4, !dbg !6575
  %cmp197 = icmp slt i32 %162, %163, !dbg !6576
  br i1 %cmp197, label %for.body199, label %for.end204, !dbg !6577

for.body199:                                      ; preds = %for.cond196
  %164 = load float*, float** %work, align 8, !dbg !6578
  %165 = load i32, i32* %i, align 4, !dbg !6580
  %idxprom200 = sext i32 %165 to i64, !dbg !6578
  %arrayidx201 = getelementptr inbounds float, float* %164, i64 %idxprom200, !dbg !6578
  store float 0.000000e+00, float* %arrayidx201, align 4, !dbg !6581
  br label %for.inc202, !dbg !6582

for.inc202:                                       ; preds = %for.body199
  %166 = load i32, i32* %i, align 4, !dbg !6583
  %inc203 = add nsw i32 %166, 1, !dbg !6583
  store i32 %inc203, i32* %i, align 4, !dbg !6583
  br label %for.cond196, !dbg !6584, !llvm.loop !6585

for.end204:                                       ; preds = %for.cond196
  %167 = load i32, i32* %k, align 4, !dbg !6587
  %add205 = add nsw i32 %167, 1, !dbg !6589
  store i32 %add205, i32* %j, align 4, !dbg !6590
  br label %for.cond206, !dbg !6591

for.cond206:                                      ; preds = %for.inc228, %for.end204
  %168 = load i32, i32* %j, align 4, !dbg !6592
  %169 = load i32, i32* %n, align 4, !dbg !6594
  %cmp207 = icmp slt i32 %168, %169, !dbg !6595
  br i1 %cmp207, label %for.body209, label %for.end230, !dbg !6596

for.body209:                                      ; preds = %for.cond206
  %170 = load i32, i32* %k, align 4, !dbg !6597
  %add210 = add nsw i32 %170, 1, !dbg !6600
  store i32 %add210, i32* %i, align 4, !dbg !6601
  br label %for.cond211, !dbg !6602

for.cond211:                                      ; preds = %for.inc225, %for.body209
  %171 = load i32, i32* %i, align 4, !dbg !6603
  %172 = load i32, i32* %m, align 4, !dbg !6605
  %cmp212 = icmp slt i32 %171, %172, !dbg !6606
  br i1 %cmp212, label %for.body214, label %for.end227, !dbg !6607

for.body214:                                      ; preds = %for.cond211
  %173 = load float*, float** %e, align 8, !dbg !6608
  %174 = load i32, i32* %j, align 4, !dbg !6610
  %idxprom215 = sext i32 %174 to i64, !dbg !6608
  %arrayidx216 = getelementptr inbounds float, float* %173, i64 %idxprom215, !dbg !6608
  %175 = load float, float* %arrayidx216, align 4, !dbg !6608
  %176 = load i32, i32* %i, align 4, !dbg !6611
  %idxprom217 = sext i32 %176 to i64, !dbg !6612
  %arrayidx218 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom217, !dbg !6612
  %177 = load i32, i32* %j, align 4, !dbg !6613
  %idxprom219 = sext i32 %177 to i64, !dbg !6612
  %arrayidx220 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx218, i64 0, i64 %idxprom219, !dbg !6612
  %178 = load float, float* %arrayidx220, align 4, !dbg !6612
  %mul221 = fmul float %175, %178, !dbg !6614
  %179 = load float*, float** %work, align 8, !dbg !6615
  %180 = load i32, i32* %i, align 4, !dbg !6616
  %idxprom222 = sext i32 %180 to i64, !dbg !6615
  %arrayidx223 = getelementptr inbounds float, float* %179, i64 %idxprom222, !dbg !6615
  %181 = load float, float* %arrayidx223, align 4, !dbg !6617
  %add224 = fadd float %181, %mul221, !dbg !6617
  store float %add224, float* %arrayidx223, align 4, !dbg !6617
  br label %for.inc225, !dbg !6618

for.inc225:                                       ; preds = %for.body214
  %182 = load i32, i32* %i, align 4, !dbg !6619
  %inc226 = add nsw i32 %182, 1, !dbg !6619
  store i32 %inc226, i32* %i, align 4, !dbg !6619
  br label %for.cond211, !dbg !6620, !llvm.loop !6621

for.end227:                                       ; preds = %for.cond211
  br label %for.inc228, !dbg !6623

for.inc228:                                       ; preds = %for.end227
  %183 = load i32, i32* %j, align 4, !dbg !6624
  %inc229 = add nsw i32 %183, 1, !dbg !6624
  store i32 %inc229, i32* %j, align 4, !dbg !6624
  br label %for.cond206, !dbg !6625, !llvm.loop !6626

for.end230:                                       ; preds = %for.cond206
  %184 = load float*, float** %e, align 8, !dbg !6628
  %185 = load i32, i32* %k, align 4, !dbg !6629
  %add231 = add nsw i32 %185, 1, !dbg !6630
  %idxprom232 = sext i32 %add231 to i64, !dbg !6628
  %arrayidx233 = getelementptr inbounds float, float* %184, i64 %idxprom232, !dbg !6628
  %186 = load float, float* %arrayidx233, align 4, !dbg !6628
  %div234 = fdiv float 1.000000e+00, %186, !dbg !6631
  store float %div234, float* %invek1, align 4, !dbg !6632
  %187 = load i32, i32* %k, align 4, !dbg !6633
  %add235 = add nsw i32 %187, 1, !dbg !6635
  store i32 %add235, i32* %j, align 4, !dbg !6636
  br label %for.cond236, !dbg !6637

for.cond236:                                      ; preds = %for.inc261, %for.end230
  %188 = load i32, i32* %j, align 4, !dbg !6638
  %189 = load i32, i32* %n, align 4, !dbg !6640
  %cmp237 = icmp slt i32 %188, %189, !dbg !6641
  br i1 %cmp237, label %for.body239, label %for.end263, !dbg !6642

for.body239:                                      ; preds = %for.cond236
  call void @llvm.dbg.declare(metadata float* %t240, metadata !6643, metadata !DIExpression()), !dbg !6645
  %190 = load float*, float** %e, align 8, !dbg !6646
  %191 = load i32, i32* %j, align 4, !dbg !6647
  %idxprom241 = sext i32 %191 to i64, !dbg !6646
  %arrayidx242 = getelementptr inbounds float, float* %190, i64 %idxprom241, !dbg !6646
  %192 = load float, float* %arrayidx242, align 4, !dbg !6646
  %fneg243 = fneg float %192, !dbg !6648
  %193 = load float, float* %invek1, align 4, !dbg !6649
  %mul244 = fmul float %fneg243, %193, !dbg !6650
  store float %mul244, float* %t240, align 4, !dbg !6645
  %194 = load i32, i32* %k, align 4, !dbg !6651
  %add245 = add nsw i32 %194, 1, !dbg !6653
  store i32 %add245, i32* %i, align 4, !dbg !6654
  br label %for.cond246, !dbg !6655

for.cond246:                                      ; preds = %for.inc258, %for.body239
  %195 = load i32, i32* %i, align 4, !dbg !6656
  %196 = load i32, i32* %m, align 4, !dbg !6658
  %cmp247 = icmp slt i32 %195, %196, !dbg !6659
  br i1 %cmp247, label %for.body249, label %for.end260, !dbg !6660

for.body249:                                      ; preds = %for.cond246
  %197 = load float, float* %t240, align 4, !dbg !6661
  %198 = load float*, float** %work, align 8, !dbg !6663
  %199 = load i32, i32* %i, align 4, !dbg !6664
  %idxprom250 = sext i32 %199 to i64, !dbg !6663
  %arrayidx251 = getelementptr inbounds float, float* %198, i64 %idxprom250, !dbg !6663
  %200 = load float, float* %arrayidx251, align 4, !dbg !6663
  %mul252 = fmul float %197, %200, !dbg !6665
  %201 = load i32, i32* %i, align 4, !dbg !6666
  %idxprom253 = sext i32 %201 to i64, !dbg !6667
  %arrayidx254 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom253, !dbg !6667
  %202 = load i32, i32* %j, align 4, !dbg !6668
  %idxprom255 = sext i32 %202 to i64, !dbg !6667
  %arrayidx256 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx254, i64 0, i64 %idxprom255, !dbg !6667
  %203 = load float, float* %arrayidx256, align 4, !dbg !6669
  %add257 = fadd float %203, %mul252, !dbg !6669
  store float %add257, float* %arrayidx256, align 4, !dbg !6669
  br label %for.inc258, !dbg !6670

for.inc258:                                       ; preds = %for.body249
  %204 = load i32, i32* %i, align 4, !dbg !6671
  %inc259 = add nsw i32 %204, 1, !dbg !6671
  store i32 %inc259, i32* %i, align 4, !dbg !6671
  br label %for.cond246, !dbg !6672, !llvm.loop !6673

for.end260:                                       ; preds = %for.cond246
  br label %for.inc261, !dbg !6675

for.inc261:                                       ; preds = %for.end260
  %205 = load i32, i32* %j, align 4, !dbg !6676
  %inc262 = add nsw i32 %205, 1, !dbg !6676
  store i32 %inc262, i32* %j, align 4, !dbg !6676
  br label %for.cond236, !dbg !6677, !llvm.loop !6678

for.end263:                                       ; preds = %for.cond236
  br label %if.end264, !dbg !6680

if.end264:                                        ; preds = %for.end263, %if.end182
  %206 = load i32, i32* %k, align 4, !dbg !6681
  %add265 = add nsw i32 %206, 1, !dbg !6683
  store i32 %add265, i32* %i, align 4, !dbg !6684
  br label %for.cond266, !dbg !6685

for.cond266:                                      ; preds = %for.inc276, %if.end264
  %207 = load i32, i32* %i, align 4, !dbg !6686
  %208 = load i32, i32* %n, align 4, !dbg !6688
  %cmp267 = icmp slt i32 %207, %208, !dbg !6689
  br i1 %cmp267, label %for.body269, label %for.end278, !dbg !6690

for.body269:                                      ; preds = %for.cond266
  %209 = load float*, float** %e, align 8, !dbg !6691
  %210 = load i32, i32* %i, align 4, !dbg !6692
  %idxprom270 = sext i32 %210 to i64, !dbg !6691
  %arrayidx271 = getelementptr inbounds float, float* %209, i64 %idxprom270, !dbg !6691
  %211 = load float, float* %arrayidx271, align 4, !dbg !6691
  %212 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !6693
  %213 = load i32, i32* %i, align 4, !dbg !6694
  %idxprom272 = sext i32 %213 to i64, !dbg !6693
  %arrayidx273 = getelementptr inbounds [4 x float], [4 x float]* %212, i64 %idxprom272, !dbg !6693
  %214 = load i32, i32* %k, align 4, !dbg !6695
  %idxprom274 = sext i32 %214 to i64, !dbg !6693
  %arrayidx275 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx273, i64 0, i64 %idxprom274, !dbg !6693
  store float %211, float* %arrayidx275, align 4, !dbg !6696
  br label %for.inc276, !dbg !6693

for.inc276:                                       ; preds = %for.body269
  %215 = load i32, i32* %i, align 4, !dbg !6697
  %inc277 = add nsw i32 %215, 1, !dbg !6697
  store i32 %inc277, i32* %i, align 4, !dbg !6697
  br label %for.cond266, !dbg !6698, !llvm.loop !6699

for.end278:                                       ; preds = %for.cond266
  br label %if.end279, !dbg !6701

if.end279:                                        ; preds = %for.end278, %if.end131
  br label %for.inc280, !dbg !6702

for.inc280:                                       ; preds = %if.end279
  %216 = load i32, i32* %k, align 4, !dbg !6703
  %inc281 = add nsw i32 %216, 1, !dbg !6703
  store i32 %inc281, i32* %k, align 4, !dbg !6703
  br label %for.cond, !dbg !6704, !llvm.loop !6705

for.end282:                                       ; preds = %for.cond
  %217 = load i32, i32* %n, align 4, !dbg !6707
  %218 = load i32, i32* %m, align 4, !dbg !6708
  %add283 = add nsw i32 %218, 1, !dbg !6709
  %call284 = call i32 @min_ii(i32 %217, i32 %add283), !dbg !6710
  store i32 %call284, i32* %p, align 4, !dbg !6711
  %219 = load i32, i32* %nct, align 4, !dbg !6712
  %220 = load i32, i32* %n, align 4, !dbg !6714
  %cmp285 = icmp slt i32 %219, %220, !dbg !6715
  br i1 %cmp285, label %if.then287, label %if.end294, !dbg !6716

if.then287:                                       ; preds = %for.end282
  %221 = load i32, i32* %nct, align 4, !dbg !6717
  %idxprom288 = sext i32 %221 to i64, !dbg !6719
  %arrayidx289 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom288, !dbg !6719
  %222 = load i32, i32* %nct, align 4, !dbg !6720
  %idxprom290 = sext i32 %222 to i64, !dbg !6719
  %arrayidx291 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx289, i64 0, i64 %idxprom290, !dbg !6719
  %223 = load float, float* %arrayidx291, align 4, !dbg !6719
  %224 = load float*, float** %s.addr, align 8, !dbg !6721
  %225 = load i32, i32* %nct, align 4, !dbg !6722
  %idxprom292 = sext i32 %225 to i64, !dbg !6721
  %arrayidx293 = getelementptr inbounds float, float* %224, i64 %idxprom292, !dbg !6721
  store float %223, float* %arrayidx293, align 4, !dbg !6723
  br label %if.end294, !dbg !6724

if.end294:                                        ; preds = %if.then287, %for.end282
  %226 = load i32, i32* %m, align 4, !dbg !6725
  %227 = load i32, i32* %p, align 4, !dbg !6727
  %cmp295 = icmp slt i32 %226, %227, !dbg !6728
  br i1 %cmp295, label %if.then297, label %if.end301, !dbg !6729

if.then297:                                       ; preds = %if.end294
  %228 = load float*, float** %s.addr, align 8, !dbg !6730
  %229 = load i32, i32* %p, align 4, !dbg !6732
  %sub298 = sub nsw i32 %229, 1, !dbg !6733
  %idxprom299 = sext i32 %sub298 to i64, !dbg !6730
  %arrayidx300 = getelementptr inbounds float, float* %228, i64 %idxprom299, !dbg !6730
  store float 0.000000e+00, float* %arrayidx300, align 4, !dbg !6734
  br label %if.end301, !dbg !6735

if.end301:                                        ; preds = %if.then297, %if.end294
  %230 = load i32, i32* %nrt, align 4, !dbg !6736
  %add302 = add nsw i32 %230, 1, !dbg !6738
  %231 = load i32, i32* %p, align 4, !dbg !6739
  %cmp303 = icmp slt i32 %add302, %231, !dbg !6740
  br i1 %cmp303, label %if.then305, label %if.end313, !dbg !6741

if.then305:                                       ; preds = %if.end301
  %232 = load i32, i32* %nrt, align 4, !dbg !6742
  %idxprom306 = sext i32 %232 to i64, !dbg !6744
  %arrayidx307 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %A, i64 0, i64 %idxprom306, !dbg !6744
  %233 = load i32, i32* %p, align 4, !dbg !6745
  %sub308 = sub nsw i32 %233, 1, !dbg !6746
  %idxprom309 = sext i32 %sub308 to i64, !dbg !6744
  %arrayidx310 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx307, i64 0, i64 %idxprom309, !dbg !6744
  %234 = load float, float* %arrayidx310, align 4, !dbg !6744
  %235 = load float*, float** %e, align 8, !dbg !6747
  %236 = load i32, i32* %nrt, align 4, !dbg !6748
  %idxprom311 = sext i32 %236 to i64, !dbg !6747
  %arrayidx312 = getelementptr inbounds float, float* %235, i64 %idxprom311, !dbg !6747
  store float %234, float* %arrayidx312, align 4, !dbg !6749
  br label %if.end313, !dbg !6750

if.end313:                                        ; preds = %if.then305, %if.end301
  %237 = load float*, float** %e, align 8, !dbg !6751
  %238 = load i32, i32* %p, align 4, !dbg !6752
  %sub314 = sub nsw i32 %238, 1, !dbg !6753
  %idxprom315 = sext i32 %sub314 to i64, !dbg !6751
  %arrayidx316 = getelementptr inbounds float, float* %237, i64 %idxprom315, !dbg !6751
  store float 0.000000e+00, float* %arrayidx316, align 4, !dbg !6754
  %239 = load i32, i32* %nct, align 4, !dbg !6755
  store i32 %239, i32* %j, align 4, !dbg !6757
  br label %for.cond317, !dbg !6758

for.cond317:                                      ; preds = %for.inc336, %if.end313
  %240 = load i32, i32* %j, align 4, !dbg !6759
  %241 = load i32, i32* %nu, align 4, !dbg !6761
  %cmp318 = icmp slt i32 %240, %241, !dbg !6762
  br i1 %cmp318, label %for.body320, label %for.end338, !dbg !6763

for.body320:                                      ; preds = %for.cond317
  store i32 0, i32* %i, align 4, !dbg !6764
  br label %for.cond321, !dbg !6767

for.cond321:                                      ; preds = %for.inc329, %for.body320
  %242 = load i32, i32* %i, align 4, !dbg !6768
  %243 = load i32, i32* %m, align 4, !dbg !6770
  %cmp322 = icmp slt i32 %242, %243, !dbg !6771
  br i1 %cmp322, label %for.body324, label %for.end331, !dbg !6772

for.body324:                                      ; preds = %for.cond321
  %244 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6773
  %245 = load i32, i32* %i, align 4, !dbg !6775
  %idxprom325 = sext i32 %245 to i64, !dbg !6773
  %arrayidx326 = getelementptr inbounds [4 x float], [4 x float]* %244, i64 %idxprom325, !dbg !6773
  %246 = load i32, i32* %j, align 4, !dbg !6776
  %idxprom327 = sext i32 %246 to i64, !dbg !6773
  %arrayidx328 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx326, i64 0, i64 %idxprom327, !dbg !6773
  store float 0.000000e+00, float* %arrayidx328, align 4, !dbg !6777
  br label %for.inc329, !dbg !6778

for.inc329:                                       ; preds = %for.body324
  %247 = load i32, i32* %i, align 4, !dbg !6779
  %inc330 = add nsw i32 %247, 1, !dbg !6779
  store i32 %inc330, i32* %i, align 4, !dbg !6779
  br label %for.cond321, !dbg !6780, !llvm.loop !6781

for.end331:                                       ; preds = %for.cond321
  %248 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6783
  %249 = load i32, i32* %j, align 4, !dbg !6784
  %idxprom332 = sext i32 %249 to i64, !dbg !6783
  %arrayidx333 = getelementptr inbounds [4 x float], [4 x float]* %248, i64 %idxprom332, !dbg !6783
  %250 = load i32, i32* %j, align 4, !dbg !6785
  %idxprom334 = sext i32 %250 to i64, !dbg !6783
  %arrayidx335 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx333, i64 0, i64 %idxprom334, !dbg !6783
  store float 1.000000e+00, float* %arrayidx335, align 4, !dbg !6786
  br label %for.inc336, !dbg !6787

for.inc336:                                       ; preds = %for.end331
  %251 = load i32, i32* %j, align 4, !dbg !6788
  %inc337 = add nsw i32 %251, 1, !dbg !6788
  store i32 %inc337, i32* %j, align 4, !dbg !6788
  br label %for.cond317, !dbg !6789, !llvm.loop !6790

for.end338:                                       ; preds = %for.cond317
  %252 = load i32, i32* %nct, align 4, !dbg !6792
  %sub339 = sub nsw i32 %252, 1, !dbg !6794
  store i32 %sub339, i32* %k, align 4, !dbg !6795
  br label %for.cond340, !dbg !6796

for.cond340:                                      ; preds = %for.inc451, %for.end338
  %253 = load i32, i32* %k, align 4, !dbg !6797
  %cmp341 = icmp sge i32 %253, 0, !dbg !6799
  br i1 %cmp341, label %for.body343, label %for.end452, !dbg !6800

for.body343:                                      ; preds = %for.cond340
  %254 = load float*, float** %s.addr, align 8, !dbg !6801
  %255 = load i32, i32* %k, align 4, !dbg !6804
  %idxprom344 = sext i32 %255 to i64, !dbg !6801
  %arrayidx345 = getelementptr inbounds float, float* %254, i64 %idxprom344, !dbg !6801
  %256 = load float, float* %arrayidx345, align 4, !dbg !6801
  %cmp346 = fcmp une float %256, 0.000000e+00, !dbg !6805
  br i1 %cmp346, label %if.then348, label %if.else, !dbg !6806

if.then348:                                       ; preds = %for.body343
  %257 = load i32, i32* %k, align 4, !dbg !6807
  %add349 = add nsw i32 %257, 1, !dbg !6810
  store i32 %add349, i32* %j, align 4, !dbg !6811
  br label %for.cond350, !dbg !6812

for.cond350:                                      ; preds = %for.inc395, %if.then348
  %258 = load i32, i32* %j, align 4, !dbg !6813
  %259 = load i32, i32* %nu, align 4, !dbg !6815
  %cmp351 = icmp slt i32 %258, %259, !dbg !6816
  br i1 %cmp351, label %for.body353, label %for.end397, !dbg !6817

for.body353:                                      ; preds = %for.cond350
  call void @llvm.dbg.declare(metadata float* %t354, metadata !6818, metadata !DIExpression()), !dbg !6820
  store float 0.000000e+00, float* %t354, align 4, !dbg !6820
  %260 = load i32, i32* %k, align 4, !dbg !6821
  store i32 %260, i32* %i, align 4, !dbg !6823
  br label %for.cond355, !dbg !6824

for.cond355:                                      ; preds = %for.inc369, %for.body353
  %261 = load i32, i32* %i, align 4, !dbg !6825
  %262 = load i32, i32* %m, align 4, !dbg !6827
  %cmp356 = icmp slt i32 %261, %262, !dbg !6828
  br i1 %cmp356, label %for.body358, label %for.end371, !dbg !6829

for.body358:                                      ; preds = %for.cond355
  %263 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6830
  %264 = load i32, i32* %i, align 4, !dbg !6832
  %idxprom359 = sext i32 %264 to i64, !dbg !6830
  %arrayidx360 = getelementptr inbounds [4 x float], [4 x float]* %263, i64 %idxprom359, !dbg !6830
  %265 = load i32, i32* %k, align 4, !dbg !6833
  %idxprom361 = sext i32 %265 to i64, !dbg !6830
  %arrayidx362 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx360, i64 0, i64 %idxprom361, !dbg !6830
  %266 = load float, float* %arrayidx362, align 4, !dbg !6830
  %267 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6834
  %268 = load i32, i32* %i, align 4, !dbg !6835
  %idxprom363 = sext i32 %268 to i64, !dbg !6834
  %arrayidx364 = getelementptr inbounds [4 x float], [4 x float]* %267, i64 %idxprom363, !dbg !6834
  %269 = load i32, i32* %j, align 4, !dbg !6836
  %idxprom365 = sext i32 %269 to i64, !dbg !6834
  %arrayidx366 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx364, i64 0, i64 %idxprom365, !dbg !6834
  %270 = load float, float* %arrayidx366, align 4, !dbg !6834
  %mul367 = fmul float %266, %270, !dbg !6837
  %271 = load float, float* %t354, align 4, !dbg !6838
  %add368 = fadd float %271, %mul367, !dbg !6838
  store float %add368, float* %t354, align 4, !dbg !6838
  br label %for.inc369, !dbg !6839

for.inc369:                                       ; preds = %for.body358
  %272 = load i32, i32* %i, align 4, !dbg !6840
  %inc370 = add nsw i32 %272, 1, !dbg !6840
  store i32 %inc370, i32* %i, align 4, !dbg !6840
  br label %for.cond355, !dbg !6841, !llvm.loop !6842

for.end371:                                       ; preds = %for.cond355
  %273 = load float, float* %t354, align 4, !dbg !6844
  %fneg372 = fneg float %273, !dbg !6845
  %274 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6846
  %275 = load i32, i32* %k, align 4, !dbg !6847
  %idxprom373 = sext i32 %275 to i64, !dbg !6846
  %arrayidx374 = getelementptr inbounds [4 x float], [4 x float]* %274, i64 %idxprom373, !dbg !6846
  %276 = load i32, i32* %k, align 4, !dbg !6848
  %idxprom375 = sext i32 %276 to i64, !dbg !6846
  %arrayidx376 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx374, i64 0, i64 %idxprom375, !dbg !6846
  %277 = load float, float* %arrayidx376, align 4, !dbg !6846
  %div377 = fdiv float %fneg372, %277, !dbg !6849
  store float %div377, float* %t354, align 4, !dbg !6850
  %278 = load i32, i32* %k, align 4, !dbg !6851
  store i32 %278, i32* %i, align 4, !dbg !6853
  br label %for.cond378, !dbg !6854

for.cond378:                                      ; preds = %for.inc392, %for.end371
  %279 = load i32, i32* %i, align 4, !dbg !6855
  %280 = load i32, i32* %m, align 4, !dbg !6857
  %cmp379 = icmp slt i32 %279, %280, !dbg !6858
  br i1 %cmp379, label %for.body381, label %for.end394, !dbg !6859

for.body381:                                      ; preds = %for.cond378
  %281 = load float, float* %t354, align 4, !dbg !6860
  %282 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6862
  %283 = load i32, i32* %i, align 4, !dbg !6863
  %idxprom382 = sext i32 %283 to i64, !dbg !6862
  %arrayidx383 = getelementptr inbounds [4 x float], [4 x float]* %282, i64 %idxprom382, !dbg !6862
  %284 = load i32, i32* %k, align 4, !dbg !6864
  %idxprom384 = sext i32 %284 to i64, !dbg !6862
  %arrayidx385 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx383, i64 0, i64 %idxprom384, !dbg !6862
  %285 = load float, float* %arrayidx385, align 4, !dbg !6862
  %mul386 = fmul float %281, %285, !dbg !6865
  %286 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6866
  %287 = load i32, i32* %i, align 4, !dbg !6867
  %idxprom387 = sext i32 %287 to i64, !dbg !6866
  %arrayidx388 = getelementptr inbounds [4 x float], [4 x float]* %286, i64 %idxprom387, !dbg !6866
  %288 = load i32, i32* %j, align 4, !dbg !6868
  %idxprom389 = sext i32 %288 to i64, !dbg !6866
  %arrayidx390 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx388, i64 0, i64 %idxprom389, !dbg !6866
  %289 = load float, float* %arrayidx390, align 4, !dbg !6869
  %add391 = fadd float %289, %mul386, !dbg !6869
  store float %add391, float* %arrayidx390, align 4, !dbg !6869
  br label %for.inc392, !dbg !6870

for.inc392:                                       ; preds = %for.body381
  %290 = load i32, i32* %i, align 4, !dbg !6871
  %inc393 = add nsw i32 %290, 1, !dbg !6871
  store i32 %inc393, i32* %i, align 4, !dbg !6871
  br label %for.cond378, !dbg !6872, !llvm.loop !6873

for.end394:                                       ; preds = %for.cond378
  br label %for.inc395, !dbg !6875

for.inc395:                                       ; preds = %for.end394
  %291 = load i32, i32* %j, align 4, !dbg !6876
  %inc396 = add nsw i32 %291, 1, !dbg !6876
  store i32 %inc396, i32* %j, align 4, !dbg !6876
  br label %for.cond350, !dbg !6877, !llvm.loop !6878

for.end397:                                       ; preds = %for.cond350
  %292 = load i32, i32* %k, align 4, !dbg !6880
  store i32 %292, i32* %i, align 4, !dbg !6882
  br label %for.cond398, !dbg !6883

for.cond398:                                      ; preds = %for.inc411, %for.end397
  %293 = load i32, i32* %i, align 4, !dbg !6884
  %294 = load i32, i32* %m, align 4, !dbg !6886
  %cmp399 = icmp slt i32 %293, %294, !dbg !6887
  br i1 %cmp399, label %for.body401, label %for.end413, !dbg !6888

for.body401:                                      ; preds = %for.cond398
  %295 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6889
  %296 = load i32, i32* %i, align 4, !dbg !6891
  %idxprom402 = sext i32 %296 to i64, !dbg !6889
  %arrayidx403 = getelementptr inbounds [4 x float], [4 x float]* %295, i64 %idxprom402, !dbg !6889
  %297 = load i32, i32* %k, align 4, !dbg !6892
  %idxprom404 = sext i32 %297 to i64, !dbg !6889
  %arrayidx405 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx403, i64 0, i64 %idxprom404, !dbg !6889
  %298 = load float, float* %arrayidx405, align 4, !dbg !6889
  %fneg406 = fneg float %298, !dbg !6893
  %299 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6894
  %300 = load i32, i32* %i, align 4, !dbg !6895
  %idxprom407 = sext i32 %300 to i64, !dbg !6894
  %arrayidx408 = getelementptr inbounds [4 x float], [4 x float]* %299, i64 %idxprom407, !dbg !6894
  %301 = load i32, i32* %k, align 4, !dbg !6896
  %idxprom409 = sext i32 %301 to i64, !dbg !6894
  %arrayidx410 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx408, i64 0, i64 %idxprom409, !dbg !6894
  store float %fneg406, float* %arrayidx410, align 4, !dbg !6897
  br label %for.inc411, !dbg !6898

for.inc411:                                       ; preds = %for.body401
  %302 = load i32, i32* %i, align 4, !dbg !6899
  %inc412 = add nsw i32 %302, 1, !dbg !6899
  store i32 %inc412, i32* %i, align 4, !dbg !6899
  br label %for.cond398, !dbg !6900, !llvm.loop !6901

for.end413:                                       ; preds = %for.cond398
  %303 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6903
  %304 = load i32, i32* %k, align 4, !dbg !6904
  %idxprom414 = sext i32 %304 to i64, !dbg !6903
  %arrayidx415 = getelementptr inbounds [4 x float], [4 x float]* %303, i64 %idxprom414, !dbg !6903
  %305 = load i32, i32* %k, align 4, !dbg !6905
  %idxprom416 = sext i32 %305 to i64, !dbg !6903
  %arrayidx417 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx415, i64 0, i64 %idxprom416, !dbg !6903
  %306 = load float, float* %arrayidx417, align 4, !dbg !6903
  %add418 = fadd float 1.000000e+00, %306, !dbg !6906
  %307 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6907
  %308 = load i32, i32* %k, align 4, !dbg !6908
  %idxprom419 = sext i32 %308 to i64, !dbg !6907
  %arrayidx420 = getelementptr inbounds [4 x float], [4 x float]* %307, i64 %idxprom419, !dbg !6907
  %309 = load i32, i32* %k, align 4, !dbg !6909
  %idxprom421 = sext i32 %309 to i64, !dbg !6907
  %arrayidx422 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx420, i64 0, i64 %idxprom421, !dbg !6907
  store float %add418, float* %arrayidx422, align 4, !dbg !6910
  store i32 0, i32* %i, align 4, !dbg !6911
  br label %for.cond423, !dbg !6913

for.cond423:                                      ; preds = %for.inc432, %for.end413
  %310 = load i32, i32* %i, align 4, !dbg !6914
  %311 = load i32, i32* %k, align 4, !dbg !6916
  %sub424 = sub nsw i32 %311, 1, !dbg !6917
  %cmp425 = icmp slt i32 %310, %sub424, !dbg !6918
  br i1 %cmp425, label %for.body427, label %for.end434, !dbg !6919

for.body427:                                      ; preds = %for.cond423
  %312 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6920
  %313 = load i32, i32* %i, align 4, !dbg !6922
  %idxprom428 = sext i32 %313 to i64, !dbg !6920
  %arrayidx429 = getelementptr inbounds [4 x float], [4 x float]* %312, i64 %idxprom428, !dbg !6920
  %314 = load i32, i32* %k, align 4, !dbg !6923
  %idxprom430 = sext i32 %314 to i64, !dbg !6920
  %arrayidx431 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx429, i64 0, i64 %idxprom430, !dbg !6920
  store float 0.000000e+00, float* %arrayidx431, align 4, !dbg !6924
  br label %for.inc432, !dbg !6925

for.inc432:                                       ; preds = %for.body427
  %315 = load i32, i32* %i, align 4, !dbg !6926
  %inc433 = add nsw i32 %315, 1, !dbg !6926
  store i32 %inc433, i32* %i, align 4, !dbg !6926
  br label %for.cond423, !dbg !6927, !llvm.loop !6928

for.end434:                                       ; preds = %for.cond423
  br label %if.end450, !dbg !6930

if.else:                                          ; preds = %for.body343
  store i32 0, i32* %i, align 4, !dbg !6931
  br label %for.cond435, !dbg !6934

for.cond435:                                      ; preds = %for.inc443, %if.else
  %316 = load i32, i32* %i, align 4, !dbg !6935
  %317 = load i32, i32* %m, align 4, !dbg !6937
  %cmp436 = icmp slt i32 %316, %317, !dbg !6938
  br i1 %cmp436, label %for.body438, label %for.end445, !dbg !6939

for.body438:                                      ; preds = %for.cond435
  %318 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6940
  %319 = load i32, i32* %i, align 4, !dbg !6942
  %idxprom439 = sext i32 %319 to i64, !dbg !6940
  %arrayidx440 = getelementptr inbounds [4 x float], [4 x float]* %318, i64 %idxprom439, !dbg !6940
  %320 = load i32, i32* %k, align 4, !dbg !6943
  %idxprom441 = sext i32 %320 to i64, !dbg !6940
  %arrayidx442 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx440, i64 0, i64 %idxprom441, !dbg !6940
  store float 0.000000e+00, float* %arrayidx442, align 4, !dbg !6944
  br label %for.inc443, !dbg !6945

for.inc443:                                       ; preds = %for.body438
  %321 = load i32, i32* %i, align 4, !dbg !6946
  %inc444 = add nsw i32 %321, 1, !dbg !6946
  store i32 %inc444, i32* %i, align 4, !dbg !6946
  br label %for.cond435, !dbg !6947, !llvm.loop !6948

for.end445:                                       ; preds = %for.cond435
  %322 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !6950
  %323 = load i32, i32* %k, align 4, !dbg !6951
  %idxprom446 = sext i32 %323 to i64, !dbg !6950
  %arrayidx447 = getelementptr inbounds [4 x float], [4 x float]* %322, i64 %idxprom446, !dbg !6950
  %324 = load i32, i32* %k, align 4, !dbg !6952
  %idxprom448 = sext i32 %324 to i64, !dbg !6950
  %arrayidx449 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx447, i64 0, i64 %idxprom448, !dbg !6950
  store float 1.000000e+00, float* %arrayidx449, align 4, !dbg !6953
  br label %if.end450

if.end450:                                        ; preds = %for.end445, %for.end434
  br label %for.inc451, !dbg !6954

for.inc451:                                       ; preds = %if.end450
  %325 = load i32, i32* %k, align 4, !dbg !6955
  %dec = add nsw i32 %325, -1, !dbg !6955
  store i32 %dec, i32* %k, align 4, !dbg !6955
  br label %for.cond340, !dbg !6956, !llvm.loop !6957

for.end452:                                       ; preds = %for.cond340
  %326 = load i32, i32* %n, align 4, !dbg !6959
  %sub453 = sub nsw i32 %326, 1, !dbg !6961
  store i32 %sub453, i32* %k, align 4, !dbg !6962
  br label %for.cond454, !dbg !6963

for.cond454:                                      ; preds = %for.inc535, %for.end452
  %327 = load i32, i32* %k, align 4, !dbg !6964
  %cmp455 = icmp sge i32 %327, 0, !dbg !6966
  br i1 %cmp455, label %for.body457, label %for.end537, !dbg !6967

for.body457:                                      ; preds = %for.cond454
  %328 = load i32, i32* %k, align 4, !dbg !6968
  %329 = load i32, i32* %nrt, align 4, !dbg !6971
  %cmp458 = icmp slt i32 %328, %329, !dbg !6972
  %conv459 = zext i1 %cmp458 to i32, !dbg !6972
  %330 = load float*, float** %e, align 8, !dbg !6973
  %331 = load i32, i32* %k, align 4, !dbg !6974
  %idxprom460 = sext i32 %331 to i64, !dbg !6973
  %arrayidx461 = getelementptr inbounds float, float* %330, i64 %idxprom460, !dbg !6973
  %332 = load float, float* %arrayidx461, align 4, !dbg !6973
  %cmp462 = fcmp une float %332, 0.000000e+00, !dbg !6975
  %conv463 = zext i1 %cmp462 to i32, !dbg !6975
  %and464 = and i32 %conv459, %conv463, !dbg !6976
  %tobool465 = icmp ne i32 %and464, 0, !dbg !6976
  br i1 %tobool465, label %if.then466, label %if.end519, !dbg !6977

if.then466:                                       ; preds = %for.body457
  %333 = load i32, i32* %k, align 4, !dbg !6978
  %add467 = add nsw i32 %333, 1, !dbg !6981
  store i32 %add467, i32* %j, align 4, !dbg !6982
  br label %for.cond468, !dbg !6983

for.cond468:                                      ; preds = %for.inc516, %if.then466
  %334 = load i32, i32* %j, align 4, !dbg !6984
  %335 = load i32, i32* %nu, align 4, !dbg !6986
  %cmp469 = icmp slt i32 %334, %335, !dbg !6987
  br i1 %cmp469, label %for.body471, label %for.end518, !dbg !6988

for.body471:                                      ; preds = %for.cond468
  call void @llvm.dbg.declare(metadata float* %t472, metadata !6989, metadata !DIExpression()), !dbg !6991
  store float 0.000000e+00, float* %t472, align 4, !dbg !6991
  %336 = load i32, i32* %k, align 4, !dbg !6992
  %add473 = add nsw i32 %336, 1, !dbg !6994
  store i32 %add473, i32* %i, align 4, !dbg !6995
  br label %for.cond474, !dbg !6996

for.cond474:                                      ; preds = %for.inc488, %for.body471
  %337 = load i32, i32* %i, align 4, !dbg !6997
  %338 = load i32, i32* %n, align 4, !dbg !6999
  %cmp475 = icmp slt i32 %337, %338, !dbg !7000
  br i1 %cmp475, label %for.body477, label %for.end490, !dbg !7001

for.body477:                                      ; preds = %for.cond474
  %339 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7002
  %340 = load i32, i32* %i, align 4, !dbg !7004
  %idxprom478 = sext i32 %340 to i64, !dbg !7002
  %arrayidx479 = getelementptr inbounds [4 x float], [4 x float]* %339, i64 %idxprom478, !dbg !7002
  %341 = load i32, i32* %k, align 4, !dbg !7005
  %idxprom480 = sext i32 %341 to i64, !dbg !7002
  %arrayidx481 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx479, i64 0, i64 %idxprom480, !dbg !7002
  %342 = load float, float* %arrayidx481, align 4, !dbg !7002
  %343 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7006
  %344 = load i32, i32* %i, align 4, !dbg !7007
  %idxprom482 = sext i32 %344 to i64, !dbg !7006
  %arrayidx483 = getelementptr inbounds [4 x float], [4 x float]* %343, i64 %idxprom482, !dbg !7006
  %345 = load i32, i32* %j, align 4, !dbg !7008
  %idxprom484 = sext i32 %345 to i64, !dbg !7006
  %arrayidx485 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx483, i64 0, i64 %idxprom484, !dbg !7006
  %346 = load float, float* %arrayidx485, align 4, !dbg !7006
  %mul486 = fmul float %342, %346, !dbg !7009
  %347 = load float, float* %t472, align 4, !dbg !7010
  %add487 = fadd float %347, %mul486, !dbg !7010
  store float %add487, float* %t472, align 4, !dbg !7010
  br label %for.inc488, !dbg !7011

for.inc488:                                       ; preds = %for.body477
  %348 = load i32, i32* %i, align 4, !dbg !7012
  %inc489 = add nsw i32 %348, 1, !dbg !7012
  store i32 %inc489, i32* %i, align 4, !dbg !7012
  br label %for.cond474, !dbg !7013, !llvm.loop !7014

for.end490:                                       ; preds = %for.cond474
  %349 = load float, float* %t472, align 4, !dbg !7016
  %fneg491 = fneg float %349, !dbg !7017
  %350 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7018
  %351 = load i32, i32* %k, align 4, !dbg !7019
  %add492 = add nsw i32 %351, 1, !dbg !7020
  %idxprom493 = sext i32 %add492 to i64, !dbg !7018
  %arrayidx494 = getelementptr inbounds [4 x float], [4 x float]* %350, i64 %idxprom493, !dbg !7018
  %352 = load i32, i32* %k, align 4, !dbg !7021
  %idxprom495 = sext i32 %352 to i64, !dbg !7018
  %arrayidx496 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx494, i64 0, i64 %idxprom495, !dbg !7018
  %353 = load float, float* %arrayidx496, align 4, !dbg !7018
  %div497 = fdiv float %fneg491, %353, !dbg !7022
  store float %div497, float* %t472, align 4, !dbg !7023
  %354 = load i32, i32* %k, align 4, !dbg !7024
  %add498 = add nsw i32 %354, 1, !dbg !7026
  store i32 %add498, i32* %i, align 4, !dbg !7027
  br label %for.cond499, !dbg !7028

for.cond499:                                      ; preds = %for.inc513, %for.end490
  %355 = load i32, i32* %i, align 4, !dbg !7029
  %356 = load i32, i32* %n, align 4, !dbg !7031
  %cmp500 = icmp slt i32 %355, %356, !dbg !7032
  br i1 %cmp500, label %for.body502, label %for.end515, !dbg !7033

for.body502:                                      ; preds = %for.cond499
  %357 = load float, float* %t472, align 4, !dbg !7034
  %358 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7036
  %359 = load i32, i32* %i, align 4, !dbg !7037
  %idxprom503 = sext i32 %359 to i64, !dbg !7036
  %arrayidx504 = getelementptr inbounds [4 x float], [4 x float]* %358, i64 %idxprom503, !dbg !7036
  %360 = load i32, i32* %k, align 4, !dbg !7038
  %idxprom505 = sext i32 %360 to i64, !dbg !7036
  %arrayidx506 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx504, i64 0, i64 %idxprom505, !dbg !7036
  %361 = load float, float* %arrayidx506, align 4, !dbg !7036
  %mul507 = fmul float %357, %361, !dbg !7039
  %362 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7040
  %363 = load i32, i32* %i, align 4, !dbg !7041
  %idxprom508 = sext i32 %363 to i64, !dbg !7040
  %arrayidx509 = getelementptr inbounds [4 x float], [4 x float]* %362, i64 %idxprom508, !dbg !7040
  %364 = load i32, i32* %j, align 4, !dbg !7042
  %idxprom510 = sext i32 %364 to i64, !dbg !7040
  %arrayidx511 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx509, i64 0, i64 %idxprom510, !dbg !7040
  %365 = load float, float* %arrayidx511, align 4, !dbg !7043
  %add512 = fadd float %365, %mul507, !dbg !7043
  store float %add512, float* %arrayidx511, align 4, !dbg !7043
  br label %for.inc513, !dbg !7044

for.inc513:                                       ; preds = %for.body502
  %366 = load i32, i32* %i, align 4, !dbg !7045
  %inc514 = add nsw i32 %366, 1, !dbg !7045
  store i32 %inc514, i32* %i, align 4, !dbg !7045
  br label %for.cond499, !dbg !7046, !llvm.loop !7047

for.end515:                                       ; preds = %for.cond499
  br label %for.inc516, !dbg !7049

for.inc516:                                       ; preds = %for.end515
  %367 = load i32, i32* %j, align 4, !dbg !7050
  %inc517 = add nsw i32 %367, 1, !dbg !7050
  store i32 %inc517, i32* %j, align 4, !dbg !7050
  br label %for.cond468, !dbg !7051, !llvm.loop !7052

for.end518:                                       ; preds = %for.cond468
  br label %if.end519, !dbg !7054

if.end519:                                        ; preds = %for.end518, %for.body457
  store i32 0, i32* %i, align 4, !dbg !7055
  br label %for.cond520, !dbg !7057

for.cond520:                                      ; preds = %for.inc528, %if.end519
  %368 = load i32, i32* %i, align 4, !dbg !7058
  %369 = load i32, i32* %n, align 4, !dbg !7060
  %cmp521 = icmp slt i32 %368, %369, !dbg !7061
  br i1 %cmp521, label %for.body523, label %for.end530, !dbg !7062

for.body523:                                      ; preds = %for.cond520
  %370 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7063
  %371 = load i32, i32* %i, align 4, !dbg !7065
  %idxprom524 = sext i32 %371 to i64, !dbg !7063
  %arrayidx525 = getelementptr inbounds [4 x float], [4 x float]* %370, i64 %idxprom524, !dbg !7063
  %372 = load i32, i32* %k, align 4, !dbg !7066
  %idxprom526 = sext i32 %372 to i64, !dbg !7063
  %arrayidx527 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx525, i64 0, i64 %idxprom526, !dbg !7063
  store float 0.000000e+00, float* %arrayidx527, align 4, !dbg !7067
  br label %for.inc528, !dbg !7068

for.inc528:                                       ; preds = %for.body523
  %373 = load i32, i32* %i, align 4, !dbg !7069
  %inc529 = add nsw i32 %373, 1, !dbg !7069
  store i32 %inc529, i32* %i, align 4, !dbg !7069
  br label %for.cond520, !dbg !7070, !llvm.loop !7071

for.end530:                                       ; preds = %for.cond520
  %374 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7073
  %375 = load i32, i32* %k, align 4, !dbg !7074
  %idxprom531 = sext i32 %375 to i64, !dbg !7073
  %arrayidx532 = getelementptr inbounds [4 x float], [4 x float]* %374, i64 %idxprom531, !dbg !7073
  %376 = load i32, i32* %k, align 4, !dbg !7075
  %idxprom533 = sext i32 %376 to i64, !dbg !7073
  %arrayidx534 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx532, i64 0, i64 %idxprom533, !dbg !7073
  store float 1.000000e+00, float* %arrayidx534, align 4, !dbg !7076
  br label %for.inc535, !dbg !7077

for.inc535:                                       ; preds = %for.end530
  %377 = load i32, i32* %k, align 4, !dbg !7078
  %dec536 = add nsw i32 %377, -1, !dbg !7078
  store i32 %dec536, i32* %k, align 4, !dbg !7078
  br label %for.cond454, !dbg !7079, !llvm.loop !7080

for.end537:                                       ; preds = %for.cond454
  %378 = load i32, i32* %p, align 4, !dbg !7082
  %sub538 = sub nsw i32 %378, 1, !dbg !7083
  store i32 %sub538, i32* %pp, align 4, !dbg !7084
  store i32 0, i32* %iter, align 4, !dbg !7085
  %call539 = call float @powf(float 2.000000e+00, float -5.200000e+01) #5, !dbg !7086
  store float %call539, float* %eps, align 4, !dbg !7087
  br label %while.cond, !dbg !7088

while.cond:                                       ; preds = %sw.epilog, %for.end537
  %379 = load i32, i32* %p, align 4, !dbg !7089
  %cmp540 = icmp sgt i32 %379, 0, !dbg !7090
  br i1 %cmp540, label %while.body, label %while.end1179, !dbg !7088

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %kase, metadata !7091, metadata !DIExpression()), !dbg !7093
  store i32 0, i32* %kase, align 4, !dbg !7093
  %380 = load i32, i32* %maxiter, align 4, !dbg !7094
  %cmp542 = icmp eq i32 %380, 0, !dbg !7096
  br i1 %cmp542, label %if.then544, label %if.end545, !dbg !7097

if.then544:                                       ; preds = %while.body
  br label %while.end1179, !dbg !7098

if.end545:                                        ; preds = %while.body
  %381 = load i32, i32* %maxiter, align 4, !dbg !7099
  %dec546 = add nsw i32 %381, -1, !dbg !7099
  store i32 %dec546, i32* %maxiter, align 4, !dbg !7099
  %382 = load i32, i32* %p, align 4, !dbg !7100
  %sub547 = sub nsw i32 %382, 2, !dbg !7102
  store i32 %sub547, i32* %k, align 4, !dbg !7103
  br label %for.cond548, !dbg !7104

for.cond548:                                      ; preds = %for.inc571, %if.end545
  %383 = load i32, i32* %k, align 4, !dbg !7105
  %cmp549 = icmp sge i32 %383, -1, !dbg !7107
  br i1 %cmp549, label %for.body551, label %for.end573, !dbg !7108

for.body551:                                      ; preds = %for.cond548
  %384 = load i32, i32* %k, align 4, !dbg !7109
  %cmp552 = icmp eq i32 %384, -1, !dbg !7112
  br i1 %cmp552, label %if.then554, label %if.end555, !dbg !7113

if.then554:                                       ; preds = %for.body551
  br label %for.end573, !dbg !7114

if.end555:                                        ; preds = %for.body551
  %385 = load float*, float** %e, align 8, !dbg !7116
  %386 = load i32, i32* %k, align 4, !dbg !7118
  %idxprom556 = sext i32 %386 to i64, !dbg !7116
  %arrayidx557 = getelementptr inbounds float, float* %385, i64 %idxprom556, !dbg !7116
  %387 = load float, float* %arrayidx557, align 4, !dbg !7116
  %388 = call float @llvm.fabs.f32(float %387), !dbg !7119
  %389 = load float, float* %eps, align 4, !dbg !7120
  %390 = load float*, float** %s.addr, align 8, !dbg !7121
  %391 = load i32, i32* %k, align 4, !dbg !7122
  %idxprom558 = sext i32 %391 to i64, !dbg !7121
  %arrayidx559 = getelementptr inbounds float, float* %390, i64 %idxprom558, !dbg !7121
  %392 = load float, float* %arrayidx559, align 4, !dbg !7121
  %393 = call float @llvm.fabs.f32(float %392), !dbg !7123
  %394 = load float*, float** %s.addr, align 8, !dbg !7124
  %395 = load i32, i32* %k, align 4, !dbg !7125
  %add560 = add nsw i32 %395, 1, !dbg !7126
  %idxprom561 = sext i32 %add560 to i64, !dbg !7124
  %arrayidx562 = getelementptr inbounds float, float* %394, i64 %idxprom561, !dbg !7124
  %396 = load float, float* %arrayidx562, align 4, !dbg !7124
  %397 = call float @llvm.fabs.f32(float %396), !dbg !7127
  %add563 = fadd float %393, %397, !dbg !7128
  %mul564 = fmul float %389, %add563, !dbg !7129
  %cmp565 = fcmp ole float %388, %mul564, !dbg !7130
  br i1 %cmp565, label %if.then567, label %if.end570, !dbg !7131

if.then567:                                       ; preds = %if.end555
  %398 = load float*, float** %e, align 8, !dbg !7132
  %399 = load i32, i32* %k, align 4, !dbg !7134
  %idxprom568 = sext i32 %399 to i64, !dbg !7132
  %arrayidx569 = getelementptr inbounds float, float* %398, i64 %idxprom568, !dbg !7132
  store float 0.000000e+00, float* %arrayidx569, align 4, !dbg !7135
  br label %for.end573, !dbg !7136

if.end570:                                        ; preds = %if.end555
  br label %for.inc571, !dbg !7137

for.inc571:                                       ; preds = %if.end570
  %400 = load i32, i32* %k, align 4, !dbg !7138
  %dec572 = add nsw i32 %400, -1, !dbg !7138
  store i32 %dec572, i32* %k, align 4, !dbg !7138
  br label %for.cond548, !dbg !7139, !llvm.loop !7140

for.end573:                                       ; preds = %if.then567, %if.then554, %for.cond548
  %401 = load i32, i32* %k, align 4, !dbg !7142
  %402 = load i32, i32* %p, align 4, !dbg !7144
  %sub574 = sub nsw i32 %402, 2, !dbg !7145
  %cmp575 = icmp eq i32 %401, %sub574, !dbg !7146
  br i1 %cmp575, label %if.then577, label %if.else578, !dbg !7147

if.then577:                                       ; preds = %for.end573
  store i32 4, i32* %kase, align 4, !dbg !7148
  br label %if.end627, !dbg !7150

if.else578:                                       ; preds = %for.end573
  call void @llvm.dbg.declare(metadata i32* %ks, metadata !7151, metadata !DIExpression()), !dbg !7153
  %403 = load i32, i32* %p, align 4, !dbg !7154
  %sub579 = sub nsw i32 %403, 1, !dbg !7156
  store i32 %sub579, i32* %ks, align 4, !dbg !7157
  br label %for.cond580, !dbg !7158

for.cond580:                                      ; preds = %for.inc613, %if.else578
  %404 = load i32, i32* %ks, align 4, !dbg !7159
  %405 = load i32, i32* %k, align 4, !dbg !7161
  %cmp581 = icmp sge i32 %404, %405, !dbg !7162
  br i1 %cmp581, label %for.body583, label %for.end615, !dbg !7163

for.body583:                                      ; preds = %for.cond580
  call void @llvm.dbg.declare(metadata float* %t584, metadata !7164, metadata !DIExpression()), !dbg !7166
  %406 = load i32, i32* %ks, align 4, !dbg !7167
  %407 = load i32, i32* %k, align 4, !dbg !7169
  %cmp585 = icmp eq i32 %406, %407, !dbg !7170
  br i1 %cmp585, label %if.then587, label %if.end588, !dbg !7171

if.then587:                                       ; preds = %for.body583
  br label %for.end615, !dbg !7172

if.end588:                                        ; preds = %for.body583
  %408 = load i32, i32* %ks, align 4, !dbg !7174
  %409 = load i32, i32* %p, align 4, !dbg !7175
  %cmp589 = icmp ne i32 %408, %409, !dbg !7176
  br i1 %cmp589, label %cond.true, label %cond.false, !dbg !7174

cond.true:                                        ; preds = %if.end588
  %410 = load float*, float** %e, align 8, !dbg !7177
  %411 = load i32, i32* %ks, align 4, !dbg !7178
  %idxprom591 = sext i32 %411 to i64, !dbg !7177
  %arrayidx592 = getelementptr inbounds float, float* %410, i64 %idxprom591, !dbg !7177
  %412 = load float, float* %arrayidx592, align 4, !dbg !7177
  %413 = call float @llvm.fabs.f32(float %412), !dbg !7179
  br label %cond.end, !dbg !7174

cond.false:                                       ; preds = %if.end588
  br label %cond.end, !dbg !7174

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %413, %cond.true ], [ 0.000000e+00, %cond.false ], !dbg !7174
  %414 = load i32, i32* %ks, align 4, !dbg !7180
  %415 = load i32, i32* %k, align 4, !dbg !7181
  %add593 = add nsw i32 %415, 1, !dbg !7182
  %cmp594 = icmp ne i32 %414, %add593, !dbg !7183
  br i1 %cmp594, label %cond.true596, label %cond.false600, !dbg !7180

cond.true596:                                     ; preds = %cond.end
  %416 = load float*, float** %e, align 8, !dbg !7184
  %417 = load i32, i32* %ks, align 4, !dbg !7185
  %sub597 = sub nsw i32 %417, 1, !dbg !7186
  %idxprom598 = sext i32 %sub597 to i64, !dbg !7184
  %arrayidx599 = getelementptr inbounds float, float* %416, i64 %idxprom598, !dbg !7184
  %418 = load float, float* %arrayidx599, align 4, !dbg !7184
  %419 = call float @llvm.fabs.f32(float %418), !dbg !7187
  br label %cond.end601, !dbg !7180

cond.false600:                                    ; preds = %cond.end
  br label %cond.end601, !dbg !7180

cond.end601:                                      ; preds = %cond.false600, %cond.true596
  %cond602 = phi float [ %419, %cond.true596 ], [ 0.000000e+00, %cond.false600 ], !dbg !7180
  %add603 = fadd float %cond, %cond602, !dbg !7188
  store float %add603, float* %t584, align 4, !dbg !7189
  %420 = load float*, float** %s.addr, align 8, !dbg !7190
  %421 = load i32, i32* %ks, align 4, !dbg !7192
  %idxprom604 = sext i32 %421 to i64, !dbg !7190
  %arrayidx605 = getelementptr inbounds float, float* %420, i64 %idxprom604, !dbg !7190
  %422 = load float, float* %arrayidx605, align 4, !dbg !7190
  %423 = call float @llvm.fabs.f32(float %422), !dbg !7193
  %424 = load float, float* %eps, align 4, !dbg !7194
  %425 = load float, float* %t584, align 4, !dbg !7195
  %mul606 = fmul float %424, %425, !dbg !7196
  %cmp607 = fcmp ole float %423, %mul606, !dbg !7197
  br i1 %cmp607, label %if.then609, label %if.end612, !dbg !7198

if.then609:                                       ; preds = %cond.end601
  %426 = load float*, float** %s.addr, align 8, !dbg !7199
  %427 = load i32, i32* %ks, align 4, !dbg !7201
  %idxprom610 = sext i32 %427 to i64, !dbg !7199
  %arrayidx611 = getelementptr inbounds float, float* %426, i64 %idxprom610, !dbg !7199
  store float 0.000000e+00, float* %arrayidx611, align 4, !dbg !7202
  br label %for.end615, !dbg !7203

if.end612:                                        ; preds = %cond.end601
  br label %for.inc613, !dbg !7204

for.inc613:                                       ; preds = %if.end612
  %428 = load i32, i32* %ks, align 4, !dbg !7205
  %dec614 = add nsw i32 %428, -1, !dbg !7205
  store i32 %dec614, i32* %ks, align 4, !dbg !7205
  br label %for.cond580, !dbg !7206, !llvm.loop !7207

for.end615:                                       ; preds = %if.then609, %if.then587, %for.cond580
  %429 = load i32, i32* %ks, align 4, !dbg !7209
  %430 = load i32, i32* %k, align 4, !dbg !7211
  %cmp616 = icmp eq i32 %429, %430, !dbg !7212
  br i1 %cmp616, label %if.then618, label %if.else619, !dbg !7213

if.then618:                                       ; preds = %for.end615
  store i32 3, i32* %kase, align 4, !dbg !7214
  br label %if.end626, !dbg !7216

if.else619:                                       ; preds = %for.end615
  %431 = load i32, i32* %ks, align 4, !dbg !7217
  %432 = load i32, i32* %p, align 4, !dbg !7219
  %sub620 = sub nsw i32 %432, 1, !dbg !7220
  %cmp621 = icmp eq i32 %431, %sub620, !dbg !7221
  br i1 %cmp621, label %if.then623, label %if.else624, !dbg !7222

if.then623:                                       ; preds = %if.else619
  store i32 1, i32* %kase, align 4, !dbg !7223
  br label %if.end625, !dbg !7225

if.else624:                                       ; preds = %if.else619
  store i32 2, i32* %kase, align 4, !dbg !7226
  %433 = load i32, i32* %ks, align 4, !dbg !7228
  store i32 %433, i32* %k, align 4, !dbg !7229
  br label %if.end625

if.end625:                                        ; preds = %if.else624, %if.then623
  br label %if.end626

if.end626:                                        ; preds = %if.end625, %if.then618
  br label %if.end627

if.end627:                                        ; preds = %if.end626, %if.then577
  %434 = load i32, i32* %k, align 4, !dbg !7230
  %inc628 = add nsw i32 %434, 1, !dbg !7230
  store i32 %inc628, i32* %k, align 4, !dbg !7230
  %435 = load i32, i32* %kase, align 4, !dbg !7231
  switch i32 %435, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb711
    i32 3, label %sw.bb790
    i32 4, label %sw.bb1057
  ], !dbg !7232

sw.bb:                                            ; preds = %if.end627
  call void @llvm.dbg.declare(metadata float* %f, metadata !7233, metadata !DIExpression()), !dbg !7236
  %436 = load float*, float** %e, align 8, !dbg !7237
  %437 = load i32, i32* %p, align 4, !dbg !7238
  %sub629 = sub nsw i32 %437, 2, !dbg !7239
  %idxprom630 = sext i32 %sub629 to i64, !dbg !7237
  %arrayidx631 = getelementptr inbounds float, float* %436, i64 %idxprom630, !dbg !7237
  %438 = load float, float* %arrayidx631, align 4, !dbg !7237
  store float %438, float* %f, align 4, !dbg !7236
  %439 = load float*, float** %e, align 8, !dbg !7240
  %440 = load i32, i32* %p, align 4, !dbg !7241
  %sub632 = sub nsw i32 %440, 2, !dbg !7242
  %idxprom633 = sext i32 %sub632 to i64, !dbg !7240
  %arrayidx634 = getelementptr inbounds float, float* %439, i64 %idxprom633, !dbg !7240
  store float 0.000000e+00, float* %arrayidx634, align 4, !dbg !7243
  %441 = load i32, i32* %p, align 4, !dbg !7244
  %sub635 = sub nsw i32 %441, 2, !dbg !7246
  store i32 %sub635, i32* %j, align 4, !dbg !7247
  br label %for.cond636, !dbg !7248

for.cond636:                                      ; preds = %for.inc708, %sw.bb
  %442 = load i32, i32* %j, align 4, !dbg !7249
  %443 = load i32, i32* %k, align 4, !dbg !7251
  %cmp637 = icmp sge i32 %442, %443, !dbg !7252
  br i1 %cmp637, label %for.body639, label %for.end710, !dbg !7253

for.body639:                                      ; preds = %for.cond636
  call void @llvm.dbg.declare(metadata float* %t640, metadata !7254, metadata !DIExpression()), !dbg !7256
  %444 = load float*, float** %s.addr, align 8, !dbg !7257
  %445 = load i32, i32* %j, align 4, !dbg !7258
  %idxprom641 = sext i32 %445 to i64, !dbg !7257
  %arrayidx642 = getelementptr inbounds float, float* %444, i64 %idxprom641, !dbg !7257
  %446 = load float, float* %arrayidx642, align 4, !dbg !7257
  %447 = load float, float* %f, align 4, !dbg !7259
  %call643 = call float @hypotf(float %446, float %447) #5, !dbg !7260
  store float %call643, float* %t640, align 4, !dbg !7256
  call void @llvm.dbg.declare(metadata float* %invt, metadata !7261, metadata !DIExpression()), !dbg !7262
  %448 = load float, float* %t640, align 4, !dbg !7263
  %div644 = fdiv float 1.000000e+00, %448, !dbg !7264
  store float %div644, float* %invt, align 4, !dbg !7262
  call void @llvm.dbg.declare(metadata float* %cs, metadata !7265, metadata !DIExpression()), !dbg !7266
  %449 = load float*, float** %s.addr, align 8, !dbg !7267
  %450 = load i32, i32* %j, align 4, !dbg !7268
  %idxprom645 = sext i32 %450 to i64, !dbg !7267
  %arrayidx646 = getelementptr inbounds float, float* %449, i64 %idxprom645, !dbg !7267
  %451 = load float, float* %arrayidx646, align 4, !dbg !7267
  %452 = load float, float* %invt, align 4, !dbg !7269
  %mul647 = fmul float %451, %452, !dbg !7270
  store float %mul647, float* %cs, align 4, !dbg !7266
  call void @llvm.dbg.declare(metadata float* %sn, metadata !7271, metadata !DIExpression()), !dbg !7272
  %453 = load float, float* %f, align 4, !dbg !7273
  %454 = load float, float* %invt, align 4, !dbg !7274
  %mul648 = fmul float %453, %454, !dbg !7275
  store float %mul648, float* %sn, align 4, !dbg !7272
  %455 = load float, float* %t640, align 4, !dbg !7276
  %456 = load float*, float** %s.addr, align 8, !dbg !7277
  %457 = load i32, i32* %j, align 4, !dbg !7278
  %idxprom649 = sext i32 %457 to i64, !dbg !7277
  %arrayidx650 = getelementptr inbounds float, float* %456, i64 %idxprom649, !dbg !7277
  store float %455, float* %arrayidx650, align 4, !dbg !7279
  %458 = load i32, i32* %j, align 4, !dbg !7280
  %459 = load i32, i32* %k, align 4, !dbg !7282
  %cmp651 = icmp ne i32 %458, %459, !dbg !7283
  br i1 %cmp651, label %if.then653, label %if.end666, !dbg !7284

if.then653:                                       ; preds = %for.body639
  %460 = load float, float* %sn, align 4, !dbg !7285
  %fneg654 = fneg float %460, !dbg !7287
  %461 = load float*, float** %e, align 8, !dbg !7288
  %462 = load i32, i32* %j, align 4, !dbg !7289
  %sub655 = sub nsw i32 %462, 1, !dbg !7290
  %idxprom656 = sext i32 %sub655 to i64, !dbg !7288
  %arrayidx657 = getelementptr inbounds float, float* %461, i64 %idxprom656, !dbg !7288
  %463 = load float, float* %arrayidx657, align 4, !dbg !7288
  %mul658 = fmul float %fneg654, %463, !dbg !7291
  store float %mul658, float* %f, align 4, !dbg !7292
  %464 = load float, float* %cs, align 4, !dbg !7293
  %465 = load float*, float** %e, align 8, !dbg !7294
  %466 = load i32, i32* %j, align 4, !dbg !7295
  %sub659 = sub nsw i32 %466, 1, !dbg !7296
  %idxprom660 = sext i32 %sub659 to i64, !dbg !7294
  %arrayidx661 = getelementptr inbounds float, float* %465, i64 %idxprom660, !dbg !7294
  %467 = load float, float* %arrayidx661, align 4, !dbg !7294
  %mul662 = fmul float %464, %467, !dbg !7297
  %468 = load float*, float** %e, align 8, !dbg !7298
  %469 = load i32, i32* %j, align 4, !dbg !7299
  %sub663 = sub nsw i32 %469, 1, !dbg !7300
  %idxprom664 = sext i32 %sub663 to i64, !dbg !7298
  %arrayidx665 = getelementptr inbounds float, float* %468, i64 %idxprom664, !dbg !7298
  store float %mul662, float* %arrayidx665, align 4, !dbg !7301
  br label %if.end666, !dbg !7302

if.end666:                                        ; preds = %if.then653, %for.body639
  store i32 0, i32* %i, align 4, !dbg !7303
  br label %for.cond667, !dbg !7305

for.cond667:                                      ; preds = %for.inc705, %if.end666
  %470 = load i32, i32* %i, align 4, !dbg !7306
  %471 = load i32, i32* %n, align 4, !dbg !7308
  %cmp668 = icmp slt i32 %470, %471, !dbg !7309
  br i1 %cmp668, label %for.body670, label %for.end707, !dbg !7310

for.body670:                                      ; preds = %for.cond667
  %472 = load float, float* %cs, align 4, !dbg !7311
  %473 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7313
  %474 = load i32, i32* %i, align 4, !dbg !7314
  %idxprom671 = sext i32 %474 to i64, !dbg !7313
  %arrayidx672 = getelementptr inbounds [4 x float], [4 x float]* %473, i64 %idxprom671, !dbg !7313
  %475 = load i32, i32* %j, align 4, !dbg !7315
  %idxprom673 = sext i32 %475 to i64, !dbg !7313
  %arrayidx674 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx672, i64 0, i64 %idxprom673, !dbg !7313
  %476 = load float, float* %arrayidx674, align 4, !dbg !7313
  %mul675 = fmul float %472, %476, !dbg !7316
  %477 = load float, float* %sn, align 4, !dbg !7317
  %478 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7318
  %479 = load i32, i32* %i, align 4, !dbg !7319
  %idxprom676 = sext i32 %479 to i64, !dbg !7318
  %arrayidx677 = getelementptr inbounds [4 x float], [4 x float]* %478, i64 %idxprom676, !dbg !7318
  %480 = load i32, i32* %p, align 4, !dbg !7320
  %sub678 = sub nsw i32 %480, 1, !dbg !7321
  %idxprom679 = sext i32 %sub678 to i64, !dbg !7318
  %arrayidx680 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx677, i64 0, i64 %idxprom679, !dbg !7318
  %481 = load float, float* %arrayidx680, align 4, !dbg !7318
  %mul681 = fmul float %477, %481, !dbg !7322
  %add682 = fadd float %mul675, %mul681, !dbg !7323
  store float %add682, float* %t640, align 4, !dbg !7324
  %482 = load float, float* %sn, align 4, !dbg !7325
  %fneg683 = fneg float %482, !dbg !7326
  %483 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7327
  %484 = load i32, i32* %i, align 4, !dbg !7328
  %idxprom684 = sext i32 %484 to i64, !dbg !7327
  %arrayidx685 = getelementptr inbounds [4 x float], [4 x float]* %483, i64 %idxprom684, !dbg !7327
  %485 = load i32, i32* %j, align 4, !dbg !7329
  %idxprom686 = sext i32 %485 to i64, !dbg !7327
  %arrayidx687 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx685, i64 0, i64 %idxprom686, !dbg !7327
  %486 = load float, float* %arrayidx687, align 4, !dbg !7327
  %mul688 = fmul float %fneg683, %486, !dbg !7330
  %487 = load float, float* %cs, align 4, !dbg !7331
  %488 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7332
  %489 = load i32, i32* %i, align 4, !dbg !7333
  %idxprom689 = sext i32 %489 to i64, !dbg !7332
  %arrayidx690 = getelementptr inbounds [4 x float], [4 x float]* %488, i64 %idxprom689, !dbg !7332
  %490 = load i32, i32* %p, align 4, !dbg !7334
  %sub691 = sub nsw i32 %490, 1, !dbg !7335
  %idxprom692 = sext i32 %sub691 to i64, !dbg !7332
  %arrayidx693 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx690, i64 0, i64 %idxprom692, !dbg !7332
  %491 = load float, float* %arrayidx693, align 4, !dbg !7332
  %mul694 = fmul float %487, %491, !dbg !7336
  %add695 = fadd float %mul688, %mul694, !dbg !7337
  %492 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7338
  %493 = load i32, i32* %i, align 4, !dbg !7339
  %idxprom696 = sext i32 %493 to i64, !dbg !7338
  %arrayidx697 = getelementptr inbounds [4 x float], [4 x float]* %492, i64 %idxprom696, !dbg !7338
  %494 = load i32, i32* %p, align 4, !dbg !7340
  %sub698 = sub nsw i32 %494, 1, !dbg !7341
  %idxprom699 = sext i32 %sub698 to i64, !dbg !7338
  %arrayidx700 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx697, i64 0, i64 %idxprom699, !dbg !7338
  store float %add695, float* %arrayidx700, align 4, !dbg !7342
  %495 = load float, float* %t640, align 4, !dbg !7343
  %496 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7344
  %497 = load i32, i32* %i, align 4, !dbg !7345
  %idxprom701 = sext i32 %497 to i64, !dbg !7344
  %arrayidx702 = getelementptr inbounds [4 x float], [4 x float]* %496, i64 %idxprom701, !dbg !7344
  %498 = load i32, i32* %j, align 4, !dbg !7346
  %idxprom703 = sext i32 %498 to i64, !dbg !7344
  %arrayidx704 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx702, i64 0, i64 %idxprom703, !dbg !7344
  store float %495, float* %arrayidx704, align 4, !dbg !7347
  br label %for.inc705, !dbg !7348

for.inc705:                                       ; preds = %for.body670
  %499 = load i32, i32* %i, align 4, !dbg !7349
  %inc706 = add nsw i32 %499, 1, !dbg !7349
  store i32 %inc706, i32* %i, align 4, !dbg !7349
  br label %for.cond667, !dbg !7350, !llvm.loop !7351

for.end707:                                       ; preds = %for.cond667
  br label %for.inc708, !dbg !7353

for.inc708:                                       ; preds = %for.end707
  %500 = load i32, i32* %j, align 4, !dbg !7354
  %dec709 = add nsw i32 %500, -1, !dbg !7354
  store i32 %dec709, i32* %j, align 4, !dbg !7354
  br label %for.cond636, !dbg !7355, !llvm.loop !7356

for.end710:                                       ; preds = %for.cond636
  br label %sw.epilog, !dbg !7358

sw.bb711:                                         ; preds = %if.end627
  call void @llvm.dbg.declare(metadata float* %f712, metadata !7359, metadata !DIExpression()), !dbg !7361
  %501 = load float*, float** %e, align 8, !dbg !7362
  %502 = load i32, i32* %k, align 4, !dbg !7363
  %sub713 = sub nsw i32 %502, 1, !dbg !7364
  %idxprom714 = sext i32 %sub713 to i64, !dbg !7362
  %arrayidx715 = getelementptr inbounds float, float* %501, i64 %idxprom714, !dbg !7362
  %503 = load float, float* %arrayidx715, align 4, !dbg !7362
  store float %503, float* %f712, align 4, !dbg !7361
  %504 = load float*, float** %e, align 8, !dbg !7365
  %505 = load i32, i32* %k, align 4, !dbg !7366
  %sub716 = sub nsw i32 %505, 1, !dbg !7367
  %idxprom717 = sext i32 %sub716 to i64, !dbg !7365
  %arrayidx718 = getelementptr inbounds float, float* %504, i64 %idxprom717, !dbg !7365
  store float 0.000000e+00, float* %arrayidx718, align 4, !dbg !7368
  %506 = load i32, i32* %k, align 4, !dbg !7369
  store i32 %506, i32* %j, align 4, !dbg !7371
  br label %for.cond719, !dbg !7372

for.cond719:                                      ; preds = %for.inc787, %sw.bb711
  %507 = load i32, i32* %j, align 4, !dbg !7373
  %508 = load i32, i32* %p, align 4, !dbg !7375
  %cmp720 = icmp slt i32 %507, %508, !dbg !7376
  br i1 %cmp720, label %for.body722, label %for.end789, !dbg !7377

for.body722:                                      ; preds = %for.cond719
  call void @llvm.dbg.declare(metadata float* %t723, metadata !7378, metadata !DIExpression()), !dbg !7380
  %509 = load float*, float** %s.addr, align 8, !dbg !7381
  %510 = load i32, i32* %j, align 4, !dbg !7382
  %idxprom724 = sext i32 %510 to i64, !dbg !7381
  %arrayidx725 = getelementptr inbounds float, float* %509, i64 %idxprom724, !dbg !7381
  %511 = load float, float* %arrayidx725, align 4, !dbg !7381
  %512 = load float, float* %f712, align 4, !dbg !7383
  %call726 = call float @hypotf(float %511, float %512) #5, !dbg !7384
  store float %call726, float* %t723, align 4, !dbg !7380
  call void @llvm.dbg.declare(metadata float* %invt727, metadata !7385, metadata !DIExpression()), !dbg !7386
  %513 = load float, float* %t723, align 4, !dbg !7387
  %div728 = fdiv float 1.000000e+00, %513, !dbg !7388
  store float %div728, float* %invt727, align 4, !dbg !7386
  call void @llvm.dbg.declare(metadata float* %cs729, metadata !7389, metadata !DIExpression()), !dbg !7390
  %514 = load float*, float** %s.addr, align 8, !dbg !7391
  %515 = load i32, i32* %j, align 4, !dbg !7392
  %idxprom730 = sext i32 %515 to i64, !dbg !7391
  %arrayidx731 = getelementptr inbounds float, float* %514, i64 %idxprom730, !dbg !7391
  %516 = load float, float* %arrayidx731, align 4, !dbg !7391
  %517 = load float, float* %invt727, align 4, !dbg !7393
  %mul732 = fmul float %516, %517, !dbg !7394
  store float %mul732, float* %cs729, align 4, !dbg !7390
  call void @llvm.dbg.declare(metadata float* %sn733, metadata !7395, metadata !DIExpression()), !dbg !7396
  %518 = load float, float* %f712, align 4, !dbg !7397
  %519 = load float, float* %invt727, align 4, !dbg !7398
  %mul734 = fmul float %518, %519, !dbg !7399
  store float %mul734, float* %sn733, align 4, !dbg !7396
  %520 = load float, float* %t723, align 4, !dbg !7400
  %521 = load float*, float** %s.addr, align 8, !dbg !7401
  %522 = load i32, i32* %j, align 4, !dbg !7402
  %idxprom735 = sext i32 %522 to i64, !dbg !7401
  %arrayidx736 = getelementptr inbounds float, float* %521, i64 %idxprom735, !dbg !7401
  store float %520, float* %arrayidx736, align 4, !dbg !7403
  %523 = load float, float* %sn733, align 4, !dbg !7404
  %fneg737 = fneg float %523, !dbg !7405
  %524 = load float*, float** %e, align 8, !dbg !7406
  %525 = load i32, i32* %j, align 4, !dbg !7407
  %idxprom738 = sext i32 %525 to i64, !dbg !7406
  %arrayidx739 = getelementptr inbounds float, float* %524, i64 %idxprom738, !dbg !7406
  %526 = load float, float* %arrayidx739, align 4, !dbg !7406
  %mul740 = fmul float %fneg737, %526, !dbg !7408
  store float %mul740, float* %f712, align 4, !dbg !7409
  %527 = load float, float* %cs729, align 4, !dbg !7410
  %528 = load float*, float** %e, align 8, !dbg !7411
  %529 = load i32, i32* %j, align 4, !dbg !7412
  %idxprom741 = sext i32 %529 to i64, !dbg !7411
  %arrayidx742 = getelementptr inbounds float, float* %528, i64 %idxprom741, !dbg !7411
  %530 = load float, float* %arrayidx742, align 4, !dbg !7411
  %mul743 = fmul float %527, %530, !dbg !7413
  %531 = load float*, float** %e, align 8, !dbg !7414
  %532 = load i32, i32* %j, align 4, !dbg !7415
  %idxprom744 = sext i32 %532 to i64, !dbg !7414
  %arrayidx745 = getelementptr inbounds float, float* %531, i64 %idxprom744, !dbg !7414
  store float %mul743, float* %arrayidx745, align 4, !dbg !7416
  store i32 0, i32* %i, align 4, !dbg !7417
  br label %for.cond746, !dbg !7419

for.cond746:                                      ; preds = %for.inc784, %for.body722
  %533 = load i32, i32* %i, align 4, !dbg !7420
  %534 = load i32, i32* %m, align 4, !dbg !7422
  %cmp747 = icmp slt i32 %533, %534, !dbg !7423
  br i1 %cmp747, label %for.body749, label %for.end786, !dbg !7424

for.body749:                                      ; preds = %for.cond746
  %535 = load float, float* %cs729, align 4, !dbg !7425
  %536 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7427
  %537 = load i32, i32* %i, align 4, !dbg !7428
  %idxprom750 = sext i32 %537 to i64, !dbg !7427
  %arrayidx751 = getelementptr inbounds [4 x float], [4 x float]* %536, i64 %idxprom750, !dbg !7427
  %538 = load i32, i32* %j, align 4, !dbg !7429
  %idxprom752 = sext i32 %538 to i64, !dbg !7427
  %arrayidx753 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx751, i64 0, i64 %idxprom752, !dbg !7427
  %539 = load float, float* %arrayidx753, align 4, !dbg !7427
  %mul754 = fmul float %535, %539, !dbg !7430
  %540 = load float, float* %sn733, align 4, !dbg !7431
  %541 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7432
  %542 = load i32, i32* %i, align 4, !dbg !7433
  %idxprom755 = sext i32 %542 to i64, !dbg !7432
  %arrayidx756 = getelementptr inbounds [4 x float], [4 x float]* %541, i64 %idxprom755, !dbg !7432
  %543 = load i32, i32* %k, align 4, !dbg !7434
  %sub757 = sub nsw i32 %543, 1, !dbg !7435
  %idxprom758 = sext i32 %sub757 to i64, !dbg !7432
  %arrayidx759 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx756, i64 0, i64 %idxprom758, !dbg !7432
  %544 = load float, float* %arrayidx759, align 4, !dbg !7432
  %mul760 = fmul float %540, %544, !dbg !7436
  %add761 = fadd float %mul754, %mul760, !dbg !7437
  store float %add761, float* %t723, align 4, !dbg !7438
  %545 = load float, float* %sn733, align 4, !dbg !7439
  %fneg762 = fneg float %545, !dbg !7440
  %546 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7441
  %547 = load i32, i32* %i, align 4, !dbg !7442
  %idxprom763 = sext i32 %547 to i64, !dbg !7441
  %arrayidx764 = getelementptr inbounds [4 x float], [4 x float]* %546, i64 %idxprom763, !dbg !7441
  %548 = load i32, i32* %j, align 4, !dbg !7443
  %idxprom765 = sext i32 %548 to i64, !dbg !7441
  %arrayidx766 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx764, i64 0, i64 %idxprom765, !dbg !7441
  %549 = load float, float* %arrayidx766, align 4, !dbg !7441
  %mul767 = fmul float %fneg762, %549, !dbg !7444
  %550 = load float, float* %cs729, align 4, !dbg !7445
  %551 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7446
  %552 = load i32, i32* %i, align 4, !dbg !7447
  %idxprom768 = sext i32 %552 to i64, !dbg !7446
  %arrayidx769 = getelementptr inbounds [4 x float], [4 x float]* %551, i64 %idxprom768, !dbg !7446
  %553 = load i32, i32* %k, align 4, !dbg !7448
  %sub770 = sub nsw i32 %553, 1, !dbg !7449
  %idxprom771 = sext i32 %sub770 to i64, !dbg !7446
  %arrayidx772 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx769, i64 0, i64 %idxprom771, !dbg !7446
  %554 = load float, float* %arrayidx772, align 4, !dbg !7446
  %mul773 = fmul float %550, %554, !dbg !7450
  %add774 = fadd float %mul767, %mul773, !dbg !7451
  %555 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7452
  %556 = load i32, i32* %i, align 4, !dbg !7453
  %idxprom775 = sext i32 %556 to i64, !dbg !7452
  %arrayidx776 = getelementptr inbounds [4 x float], [4 x float]* %555, i64 %idxprom775, !dbg !7452
  %557 = load i32, i32* %k, align 4, !dbg !7454
  %sub777 = sub nsw i32 %557, 1, !dbg !7455
  %idxprom778 = sext i32 %sub777 to i64, !dbg !7452
  %arrayidx779 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx776, i64 0, i64 %idxprom778, !dbg !7452
  store float %add774, float* %arrayidx779, align 4, !dbg !7456
  %558 = load float, float* %t723, align 4, !dbg !7457
  %559 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7458
  %560 = load i32, i32* %i, align 4, !dbg !7459
  %idxprom780 = sext i32 %560 to i64, !dbg !7458
  %arrayidx781 = getelementptr inbounds [4 x float], [4 x float]* %559, i64 %idxprom780, !dbg !7458
  %561 = load i32, i32* %j, align 4, !dbg !7460
  %idxprom782 = sext i32 %561 to i64, !dbg !7458
  %arrayidx783 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx781, i64 0, i64 %idxprom782, !dbg !7458
  store float %558, float* %arrayidx783, align 4, !dbg !7461
  br label %for.inc784, !dbg !7462

for.inc784:                                       ; preds = %for.body749
  %562 = load i32, i32* %i, align 4, !dbg !7463
  %inc785 = add nsw i32 %562, 1, !dbg !7463
  store i32 %inc785, i32* %i, align 4, !dbg !7463
  br label %for.cond746, !dbg !7464, !llvm.loop !7465

for.end786:                                       ; preds = %for.cond746
  br label %for.inc787, !dbg !7467

for.inc787:                                       ; preds = %for.end786
  %563 = load i32, i32* %j, align 4, !dbg !7468
  %inc788 = add nsw i32 %563, 1, !dbg !7468
  store i32 %inc788, i32* %j, align 4, !dbg !7468
  br label %for.cond719, !dbg !7469, !llvm.loop !7470

for.end789:                                       ; preds = %for.cond719
  br label %sw.epilog, !dbg !7472

sw.bb790:                                         ; preds = %if.end627
  call void @llvm.dbg.declare(metadata float* %scale, metadata !7473, metadata !DIExpression()), !dbg !7475
  %564 = load float*, float** %s.addr, align 8, !dbg !7476
  %565 = load i32, i32* %p, align 4, !dbg !7477
  %sub791 = sub nsw i32 %565, 1, !dbg !7478
  %idxprom792 = sext i32 %sub791 to i64, !dbg !7476
  %arrayidx793 = getelementptr inbounds float, float* %564, i64 %idxprom792, !dbg !7476
  %566 = load float, float* %arrayidx793, align 4, !dbg !7476
  %567 = call float @llvm.fabs.f32(float %566), !dbg !7479
  %568 = load float*, float** %s.addr, align 8, !dbg !7480
  %569 = load i32, i32* %p, align 4, !dbg !7481
  %sub794 = sub nsw i32 %569, 2, !dbg !7482
  %idxprom795 = sext i32 %sub794 to i64, !dbg !7480
  %arrayidx796 = getelementptr inbounds float, float* %568, i64 %idxprom795, !dbg !7480
  %570 = load float, float* %arrayidx796, align 4, !dbg !7480
  %571 = call float @llvm.fabs.f32(float %570), !dbg !7483
  %call797 = call float @max_ff(float %567, float %571), !dbg !7484
  %572 = load float*, float** %e, align 8, !dbg !7485
  %573 = load i32, i32* %p, align 4, !dbg !7486
  %sub798 = sub nsw i32 %573, 2, !dbg !7487
  %idxprom799 = sext i32 %sub798 to i64, !dbg !7485
  %arrayidx800 = getelementptr inbounds float, float* %572, i64 %idxprom799, !dbg !7485
  %574 = load float, float* %arrayidx800, align 4, !dbg !7485
  %575 = call float @llvm.fabs.f32(float %574), !dbg !7488
  %call801 = call float @max_ff(float %call797, float %575), !dbg !7489
  %576 = load float*, float** %s.addr, align 8, !dbg !7490
  %577 = load i32, i32* %k, align 4, !dbg !7491
  %idxprom802 = sext i32 %577 to i64, !dbg !7490
  %arrayidx803 = getelementptr inbounds float, float* %576, i64 %idxprom802, !dbg !7490
  %578 = load float, float* %arrayidx803, align 4, !dbg !7490
  %579 = call float @llvm.fabs.f32(float %578), !dbg !7492
  %call804 = call float @max_ff(float %call801, float %579), !dbg !7493
  %580 = load float*, float** %e, align 8, !dbg !7494
  %581 = load i32, i32* %k, align 4, !dbg !7495
  %idxprom805 = sext i32 %581 to i64, !dbg !7494
  %arrayidx806 = getelementptr inbounds float, float* %580, i64 %idxprom805, !dbg !7494
  %582 = load float, float* %arrayidx806, align 4, !dbg !7494
  %583 = call float @llvm.fabs.f32(float %582), !dbg !7496
  %call807 = call float @max_ff(float %call804, float %583), !dbg !7497
  store float %call807, float* %scale, align 4, !dbg !7475
  call void @llvm.dbg.declare(metadata float* %invscale, metadata !7498, metadata !DIExpression()), !dbg !7499
  %584 = load float, float* %scale, align 4, !dbg !7500
  %div808 = fdiv float 1.000000e+00, %584, !dbg !7501
  store float %div808, float* %invscale, align 4, !dbg !7499
  call void @llvm.dbg.declare(metadata float* %sp, metadata !7502, metadata !DIExpression()), !dbg !7503
  %585 = load float*, float** %s.addr, align 8, !dbg !7504
  %586 = load i32, i32* %p, align 4, !dbg !7505
  %sub809 = sub nsw i32 %586, 1, !dbg !7506
  %idxprom810 = sext i32 %sub809 to i64, !dbg !7504
  %arrayidx811 = getelementptr inbounds float, float* %585, i64 %idxprom810, !dbg !7504
  %587 = load float, float* %arrayidx811, align 4, !dbg !7504
  %588 = load float, float* %invscale, align 4, !dbg !7507
  %mul812 = fmul float %587, %588, !dbg !7508
  store float %mul812, float* %sp, align 4, !dbg !7503
  call void @llvm.dbg.declare(metadata float* %spm1, metadata !7509, metadata !DIExpression()), !dbg !7510
  %589 = load float*, float** %s.addr, align 8, !dbg !7511
  %590 = load i32, i32* %p, align 4, !dbg !7512
  %sub813 = sub nsw i32 %590, 2, !dbg !7513
  %idxprom814 = sext i32 %sub813 to i64, !dbg !7511
  %arrayidx815 = getelementptr inbounds float, float* %589, i64 %idxprom814, !dbg !7511
  %591 = load float, float* %arrayidx815, align 4, !dbg !7511
  %592 = load float, float* %invscale, align 4, !dbg !7514
  %mul816 = fmul float %591, %592, !dbg !7515
  store float %mul816, float* %spm1, align 4, !dbg !7510
  call void @llvm.dbg.declare(metadata float* %epm1, metadata !7516, metadata !DIExpression()), !dbg !7517
  %593 = load float*, float** %e, align 8, !dbg !7518
  %594 = load i32, i32* %p, align 4, !dbg !7519
  %sub817 = sub nsw i32 %594, 2, !dbg !7520
  %idxprom818 = sext i32 %sub817 to i64, !dbg !7518
  %arrayidx819 = getelementptr inbounds float, float* %593, i64 %idxprom818, !dbg !7518
  %595 = load float, float* %arrayidx819, align 4, !dbg !7518
  %596 = load float, float* %invscale, align 4, !dbg !7521
  %mul820 = fmul float %595, %596, !dbg !7522
  store float %mul820, float* %epm1, align 4, !dbg !7517
  call void @llvm.dbg.declare(metadata float* %sk, metadata !7523, metadata !DIExpression()), !dbg !7524
  %597 = load float*, float** %s.addr, align 8, !dbg !7525
  %598 = load i32, i32* %k, align 4, !dbg !7526
  %idxprom821 = sext i32 %598 to i64, !dbg !7525
  %arrayidx822 = getelementptr inbounds float, float* %597, i64 %idxprom821, !dbg !7525
  %599 = load float, float* %arrayidx822, align 4, !dbg !7525
  %600 = load float, float* %invscale, align 4, !dbg !7527
  %mul823 = fmul float %599, %600, !dbg !7528
  store float %mul823, float* %sk, align 4, !dbg !7524
  call void @llvm.dbg.declare(metadata float* %ek, metadata !7529, metadata !DIExpression()), !dbg !7530
  %601 = load float*, float** %e, align 8, !dbg !7531
  %602 = load i32, i32* %k, align 4, !dbg !7532
  %idxprom824 = sext i32 %602 to i64, !dbg !7531
  %arrayidx825 = getelementptr inbounds float, float* %601, i64 %idxprom824, !dbg !7531
  %603 = load float, float* %arrayidx825, align 4, !dbg !7531
  %604 = load float, float* %invscale, align 4, !dbg !7533
  %mul826 = fmul float %603, %604, !dbg !7534
  store float %mul826, float* %ek, align 4, !dbg !7530
  call void @llvm.dbg.declare(metadata float* %b, metadata !7535, metadata !DIExpression()), !dbg !7536
  %605 = load float, float* %spm1, align 4, !dbg !7537
  %606 = load float, float* %sp, align 4, !dbg !7538
  %add827 = fadd float %605, %606, !dbg !7539
  %607 = load float, float* %spm1, align 4, !dbg !7540
  %608 = load float, float* %sp, align 4, !dbg !7541
  %sub828 = fsub float %607, %608, !dbg !7542
  %mul829 = fmul float %add827, %sub828, !dbg !7543
  %609 = load float, float* %epm1, align 4, !dbg !7544
  %610 = load float, float* %epm1, align 4, !dbg !7545
  %mul830 = fmul float %609, %610, !dbg !7546
  %add831 = fadd float %mul829, %mul830, !dbg !7547
  %mul832 = fmul float %add831, 5.000000e-01, !dbg !7548
  store float %mul832, float* %b, align 4, !dbg !7536
  call void @llvm.dbg.declare(metadata float* %c, metadata !7549, metadata !DIExpression()), !dbg !7550
  %611 = load float, float* %sp, align 4, !dbg !7551
  %612 = load float, float* %epm1, align 4, !dbg !7552
  %mul833 = fmul float %611, %612, !dbg !7553
  %613 = load float, float* %sp, align 4, !dbg !7554
  %614 = load float, float* %epm1, align 4, !dbg !7555
  %mul834 = fmul float %613, %614, !dbg !7556
  %mul835 = fmul float %mul833, %mul834, !dbg !7557
  store float %mul835, float* %c, align 4, !dbg !7550
  call void @llvm.dbg.declare(metadata float* %shift, metadata !7558, metadata !DIExpression()), !dbg !7559
  store float 0.000000e+00, float* %shift, align 4, !dbg !7559
  call void @llvm.dbg.declare(metadata float* %f836, metadata !7560, metadata !DIExpression()), !dbg !7561
  call void @llvm.dbg.declare(metadata float* %g, metadata !7562, metadata !DIExpression()), !dbg !7563
  %615 = load float, float* %b, align 4, !dbg !7564
  %cmp837 = fcmp une float %615, 0.000000e+00, !dbg !7566
  br i1 %cmp837, label %if.then841, label %lor.lhs.false, !dbg !7567

lor.lhs.false:                                    ; preds = %sw.bb790
  %616 = load float, float* %c, align 4, !dbg !7568
  %cmp839 = fcmp une float %616, 0.000000e+00, !dbg !7569
  br i1 %cmp839, label %if.then841, label %if.end852, !dbg !7570

if.then841:                                       ; preds = %lor.lhs.false, %sw.bb790
  %617 = load float, float* %b, align 4, !dbg !7571
  %618 = load float, float* %b, align 4, !dbg !7573
  %mul842 = fmul float %617, %618, !dbg !7574
  %619 = load float, float* %c, align 4, !dbg !7575
  %add843 = fadd float %mul842, %619, !dbg !7576
  %call844 = call float @sqrtf(float %add843) #5, !dbg !7577
  store float %call844, float* %shift, align 4, !dbg !7578
  %620 = load float, float* %b, align 4, !dbg !7579
  %cmp845 = fcmp olt float %620, 0.000000e+00, !dbg !7581
  br i1 %cmp845, label %if.then847, label %if.end849, !dbg !7582

if.then847:                                       ; preds = %if.then841
  %621 = load float, float* %shift, align 4, !dbg !7583
  %fneg848 = fneg float %621, !dbg !7585
  store float %fneg848, float* %shift, align 4, !dbg !7586
  br label %if.end849, !dbg !7587

if.end849:                                        ; preds = %if.then847, %if.then841
  %622 = load float, float* %c, align 4, !dbg !7588
  %623 = load float, float* %b, align 4, !dbg !7589
  %624 = load float, float* %shift, align 4, !dbg !7590
  %add850 = fadd float %623, %624, !dbg !7591
  %div851 = fdiv float %622, %add850, !dbg !7592
  store float %div851, float* %shift, align 4, !dbg !7593
  br label %if.end852, !dbg !7594

if.end852:                                        ; preds = %if.end849, %lor.lhs.false
  %625 = load float, float* %sk, align 4, !dbg !7595
  %626 = load float, float* %sp, align 4, !dbg !7596
  %add853 = fadd float %625, %626, !dbg !7597
  %627 = load float, float* %sk, align 4, !dbg !7598
  %628 = load float, float* %sp, align 4, !dbg !7599
  %sub854 = fsub float %627, %628, !dbg !7600
  %mul855 = fmul float %add853, %sub854, !dbg !7601
  %629 = load float, float* %shift, align 4, !dbg !7602
  %add856 = fadd float %mul855, %629, !dbg !7603
  store float %add856, float* %f836, align 4, !dbg !7604
  %630 = load float, float* %sk, align 4, !dbg !7605
  %631 = load float, float* %ek, align 4, !dbg !7606
  %mul857 = fmul float %630, %631, !dbg !7607
  store float %mul857, float* %g, align 4, !dbg !7608
  %632 = load i32, i32* %k, align 4, !dbg !7609
  store i32 %632, i32* %j, align 4, !dbg !7611
  br label %for.cond858, !dbg !7612

for.cond858:                                      ; preds = %for.inc1050, %if.end852
  %633 = load i32, i32* %j, align 4, !dbg !7613
  %634 = load i32, i32* %p, align 4, !dbg !7615
  %sub859 = sub nsw i32 %634, 1, !dbg !7616
  %cmp860 = icmp slt i32 %633, %sub859, !dbg !7617
  br i1 %cmp860, label %for.body862, label %for.end1052, !dbg !7618

for.body862:                                      ; preds = %for.cond858
  call void @llvm.dbg.declare(metadata float* %t863, metadata !7619, metadata !DIExpression()), !dbg !7621
  %635 = load float, float* %f836, align 4, !dbg !7622
  %636 = load float, float* %g, align 4, !dbg !7623
  %call864 = call float @hypotf(float %635, float %636) #5, !dbg !7624
  store float %call864, float* %t863, align 4, !dbg !7621
  call void @llvm.dbg.declare(metadata float* %cs865, metadata !7625, metadata !DIExpression()), !dbg !7626
  %637 = load float, float* %t863, align 4, !dbg !7627
  %cmp866 = fcmp oeq float %637, 0.000000e+00, !dbg !7628
  br i1 %cmp866, label %cond.true868, label %cond.false869, !dbg !7629

cond.true868:                                     ; preds = %for.body862
  br label %cond.end871, !dbg !7629

cond.false869:                                    ; preds = %for.body862
  %638 = load float, float* %f836, align 4, !dbg !7630
  %639 = load float, float* %t863, align 4, !dbg !7631
  %div870 = fdiv float %638, %639, !dbg !7632
  br label %cond.end871, !dbg !7629

cond.end871:                                      ; preds = %cond.false869, %cond.true868
  %cond872 = phi float [ 0.000000e+00, %cond.true868 ], [ %div870, %cond.false869 ], !dbg !7629
  store float %cond872, float* %cs865, align 4, !dbg !7626
  call void @llvm.dbg.declare(metadata float* %sn873, metadata !7633, metadata !DIExpression()), !dbg !7634
  %640 = load float, float* %t863, align 4, !dbg !7635
  %cmp874 = fcmp oeq float %640, 0.000000e+00, !dbg !7636
  br i1 %cmp874, label %cond.true876, label %cond.false877, !dbg !7637

cond.true876:                                     ; preds = %cond.end871
  br label %cond.end879, !dbg !7637

cond.false877:                                    ; preds = %cond.end871
  %641 = load float, float* %g, align 4, !dbg !7638
  %642 = load float, float* %t863, align 4, !dbg !7639
  %div878 = fdiv float %641, %642, !dbg !7640
  br label %cond.end879, !dbg !7637

cond.end879:                                      ; preds = %cond.false877, %cond.true876
  %cond880 = phi float [ 0.000000e+00, %cond.true876 ], [ %div878, %cond.false877 ], !dbg !7637
  store float %cond880, float* %sn873, align 4, !dbg !7634
  %643 = load i32, i32* %j, align 4, !dbg !7641
  %644 = load i32, i32* %k, align 4, !dbg !7643
  %cmp881 = icmp ne i32 %643, %644, !dbg !7644
  br i1 %cmp881, label %if.then883, label %if.end887, !dbg !7645

if.then883:                                       ; preds = %cond.end879
  %645 = load float, float* %t863, align 4, !dbg !7646
  %646 = load float*, float** %e, align 8, !dbg !7648
  %647 = load i32, i32* %j, align 4, !dbg !7649
  %sub884 = sub nsw i32 %647, 1, !dbg !7650
  %idxprom885 = sext i32 %sub884 to i64, !dbg !7648
  %arrayidx886 = getelementptr inbounds float, float* %646, i64 %idxprom885, !dbg !7648
  store float %645, float* %arrayidx886, align 4, !dbg !7651
  br label %if.end887, !dbg !7652

if.end887:                                        ; preds = %if.then883, %cond.end879
  %648 = load float, float* %cs865, align 4, !dbg !7653
  %649 = load float*, float** %s.addr, align 8, !dbg !7654
  %650 = load i32, i32* %j, align 4, !dbg !7655
  %idxprom888 = sext i32 %650 to i64, !dbg !7654
  %arrayidx889 = getelementptr inbounds float, float* %649, i64 %idxprom888, !dbg !7654
  %651 = load float, float* %arrayidx889, align 4, !dbg !7654
  %mul890 = fmul float %648, %651, !dbg !7656
  %652 = load float, float* %sn873, align 4, !dbg !7657
  %653 = load float*, float** %e, align 8, !dbg !7658
  %654 = load i32, i32* %j, align 4, !dbg !7659
  %idxprom891 = sext i32 %654 to i64, !dbg !7658
  %arrayidx892 = getelementptr inbounds float, float* %653, i64 %idxprom891, !dbg !7658
  %655 = load float, float* %arrayidx892, align 4, !dbg !7658
  %mul893 = fmul float %652, %655, !dbg !7660
  %add894 = fadd float %mul890, %mul893, !dbg !7661
  store float %add894, float* %f836, align 4, !dbg !7662
  %656 = load float, float* %cs865, align 4, !dbg !7663
  %657 = load float*, float** %e, align 8, !dbg !7664
  %658 = load i32, i32* %j, align 4, !dbg !7665
  %idxprom895 = sext i32 %658 to i64, !dbg !7664
  %arrayidx896 = getelementptr inbounds float, float* %657, i64 %idxprom895, !dbg !7664
  %659 = load float, float* %arrayidx896, align 4, !dbg !7664
  %mul897 = fmul float %656, %659, !dbg !7666
  %660 = load float, float* %sn873, align 4, !dbg !7667
  %661 = load float*, float** %s.addr, align 8, !dbg !7668
  %662 = load i32, i32* %j, align 4, !dbg !7669
  %idxprom898 = sext i32 %662 to i64, !dbg !7668
  %arrayidx899 = getelementptr inbounds float, float* %661, i64 %idxprom898, !dbg !7668
  %663 = load float, float* %arrayidx899, align 4, !dbg !7668
  %mul900 = fmul float %660, %663, !dbg !7670
  %sub901 = fsub float %mul897, %mul900, !dbg !7671
  %664 = load float*, float** %e, align 8, !dbg !7672
  %665 = load i32, i32* %j, align 4, !dbg !7673
  %idxprom902 = sext i32 %665 to i64, !dbg !7672
  %arrayidx903 = getelementptr inbounds float, float* %664, i64 %idxprom902, !dbg !7672
  store float %sub901, float* %arrayidx903, align 4, !dbg !7674
  %666 = load float, float* %sn873, align 4, !dbg !7675
  %667 = load float*, float** %s.addr, align 8, !dbg !7676
  %668 = load i32, i32* %j, align 4, !dbg !7677
  %add904 = add nsw i32 %668, 1, !dbg !7678
  %idxprom905 = sext i32 %add904 to i64, !dbg !7676
  %arrayidx906 = getelementptr inbounds float, float* %667, i64 %idxprom905, !dbg !7676
  %669 = load float, float* %arrayidx906, align 4, !dbg !7676
  %mul907 = fmul float %666, %669, !dbg !7679
  store float %mul907, float* %g, align 4, !dbg !7680
  %670 = load float, float* %cs865, align 4, !dbg !7681
  %671 = load float*, float** %s.addr, align 8, !dbg !7682
  %672 = load i32, i32* %j, align 4, !dbg !7683
  %add908 = add nsw i32 %672, 1, !dbg !7684
  %idxprom909 = sext i32 %add908 to i64, !dbg !7682
  %arrayidx910 = getelementptr inbounds float, float* %671, i64 %idxprom909, !dbg !7682
  %673 = load float, float* %arrayidx910, align 4, !dbg !7682
  %mul911 = fmul float %670, %673, !dbg !7685
  %674 = load float*, float** %s.addr, align 8, !dbg !7686
  %675 = load i32, i32* %j, align 4, !dbg !7687
  %add912 = add nsw i32 %675, 1, !dbg !7688
  %idxprom913 = sext i32 %add912 to i64, !dbg !7686
  %arrayidx914 = getelementptr inbounds float, float* %674, i64 %idxprom913, !dbg !7686
  store float %mul911, float* %arrayidx914, align 4, !dbg !7689
  store i32 0, i32* %i, align 4, !dbg !7690
  br label %for.cond915, !dbg !7692

for.cond915:                                      ; preds = %for.inc953, %if.end887
  %676 = load i32, i32* %i, align 4, !dbg !7693
  %677 = load i32, i32* %n, align 4, !dbg !7695
  %cmp916 = icmp slt i32 %676, %677, !dbg !7696
  br i1 %cmp916, label %for.body918, label %for.end955, !dbg !7697

for.body918:                                      ; preds = %for.cond915
  %678 = load float, float* %cs865, align 4, !dbg !7698
  %679 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7700
  %680 = load i32, i32* %i, align 4, !dbg !7701
  %idxprom919 = sext i32 %680 to i64, !dbg !7700
  %arrayidx920 = getelementptr inbounds [4 x float], [4 x float]* %679, i64 %idxprom919, !dbg !7700
  %681 = load i32, i32* %j, align 4, !dbg !7702
  %idxprom921 = sext i32 %681 to i64, !dbg !7700
  %arrayidx922 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx920, i64 0, i64 %idxprom921, !dbg !7700
  %682 = load float, float* %arrayidx922, align 4, !dbg !7700
  %mul923 = fmul float %678, %682, !dbg !7703
  %683 = load float, float* %sn873, align 4, !dbg !7704
  %684 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7705
  %685 = load i32, i32* %i, align 4, !dbg !7706
  %idxprom924 = sext i32 %685 to i64, !dbg !7705
  %arrayidx925 = getelementptr inbounds [4 x float], [4 x float]* %684, i64 %idxprom924, !dbg !7705
  %686 = load i32, i32* %j, align 4, !dbg !7707
  %add926 = add nsw i32 %686, 1, !dbg !7708
  %idxprom927 = sext i32 %add926 to i64, !dbg !7705
  %arrayidx928 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx925, i64 0, i64 %idxprom927, !dbg !7705
  %687 = load float, float* %arrayidx928, align 4, !dbg !7705
  %mul929 = fmul float %683, %687, !dbg !7709
  %add930 = fadd float %mul923, %mul929, !dbg !7710
  store float %add930, float* %t863, align 4, !dbg !7711
  %688 = load float, float* %sn873, align 4, !dbg !7712
  %fneg931 = fneg float %688, !dbg !7713
  %689 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7714
  %690 = load i32, i32* %i, align 4, !dbg !7715
  %idxprom932 = sext i32 %690 to i64, !dbg !7714
  %arrayidx933 = getelementptr inbounds [4 x float], [4 x float]* %689, i64 %idxprom932, !dbg !7714
  %691 = load i32, i32* %j, align 4, !dbg !7716
  %idxprom934 = sext i32 %691 to i64, !dbg !7714
  %arrayidx935 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx933, i64 0, i64 %idxprom934, !dbg !7714
  %692 = load float, float* %arrayidx935, align 4, !dbg !7714
  %mul936 = fmul float %fneg931, %692, !dbg !7717
  %693 = load float, float* %cs865, align 4, !dbg !7718
  %694 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7719
  %695 = load i32, i32* %i, align 4, !dbg !7720
  %idxprom937 = sext i32 %695 to i64, !dbg !7719
  %arrayidx938 = getelementptr inbounds [4 x float], [4 x float]* %694, i64 %idxprom937, !dbg !7719
  %696 = load i32, i32* %j, align 4, !dbg !7721
  %add939 = add nsw i32 %696, 1, !dbg !7722
  %idxprom940 = sext i32 %add939 to i64, !dbg !7719
  %arrayidx941 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx938, i64 0, i64 %idxprom940, !dbg !7719
  %697 = load float, float* %arrayidx941, align 4, !dbg !7719
  %mul942 = fmul float %693, %697, !dbg !7723
  %add943 = fadd float %mul936, %mul942, !dbg !7724
  %698 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7725
  %699 = load i32, i32* %i, align 4, !dbg !7726
  %idxprom944 = sext i32 %699 to i64, !dbg !7725
  %arrayidx945 = getelementptr inbounds [4 x float], [4 x float]* %698, i64 %idxprom944, !dbg !7725
  %700 = load i32, i32* %j, align 4, !dbg !7727
  %add946 = add nsw i32 %700, 1, !dbg !7728
  %idxprom947 = sext i32 %add946 to i64, !dbg !7725
  %arrayidx948 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx945, i64 0, i64 %idxprom947, !dbg !7725
  store float %add943, float* %arrayidx948, align 4, !dbg !7729
  %701 = load float, float* %t863, align 4, !dbg !7730
  %702 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7731
  %703 = load i32, i32* %i, align 4, !dbg !7732
  %idxprom949 = sext i32 %703 to i64, !dbg !7731
  %arrayidx950 = getelementptr inbounds [4 x float], [4 x float]* %702, i64 %idxprom949, !dbg !7731
  %704 = load i32, i32* %j, align 4, !dbg !7733
  %idxprom951 = sext i32 %704 to i64, !dbg !7731
  %arrayidx952 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx950, i64 0, i64 %idxprom951, !dbg !7731
  store float %701, float* %arrayidx952, align 4, !dbg !7734
  br label %for.inc953, !dbg !7735

for.inc953:                                       ; preds = %for.body918
  %705 = load i32, i32* %i, align 4, !dbg !7736
  %inc954 = add nsw i32 %705, 1, !dbg !7736
  store i32 %inc954, i32* %i, align 4, !dbg !7736
  br label %for.cond915, !dbg !7737, !llvm.loop !7738

for.end955:                                       ; preds = %for.cond915
  %706 = load float, float* %f836, align 4, !dbg !7740
  %707 = load float, float* %g, align 4, !dbg !7741
  %call956 = call float @hypotf(float %706, float %707) #5, !dbg !7742
  store float %call956, float* %t863, align 4, !dbg !7743
  %708 = load float, float* %t863, align 4, !dbg !7744
  %cmp957 = fcmp oeq float %708, 0.000000e+00, !dbg !7745
  br i1 %cmp957, label %cond.true959, label %cond.false960, !dbg !7746

cond.true959:                                     ; preds = %for.end955
  br label %cond.end962, !dbg !7746

cond.false960:                                    ; preds = %for.end955
  %709 = load float, float* %f836, align 4, !dbg !7747
  %710 = load float, float* %t863, align 4, !dbg !7748
  %div961 = fdiv float %709, %710, !dbg !7749
  br label %cond.end962, !dbg !7746

cond.end962:                                      ; preds = %cond.false960, %cond.true959
  %cond963 = phi float [ 0.000000e+00, %cond.true959 ], [ %div961, %cond.false960 ], !dbg !7746
  store float %cond963, float* %cs865, align 4, !dbg !7750
  %711 = load float, float* %t863, align 4, !dbg !7751
  %cmp964 = fcmp oeq float %711, 0.000000e+00, !dbg !7752
  br i1 %cmp964, label %cond.true966, label %cond.false967, !dbg !7753

cond.true966:                                     ; preds = %cond.end962
  br label %cond.end969, !dbg !7753

cond.false967:                                    ; preds = %cond.end962
  %712 = load float, float* %g, align 4, !dbg !7754
  %713 = load float, float* %t863, align 4, !dbg !7755
  %div968 = fdiv float %712, %713, !dbg !7756
  br label %cond.end969, !dbg !7753

cond.end969:                                      ; preds = %cond.false967, %cond.true966
  %cond970 = phi float [ 0.000000e+00, %cond.true966 ], [ %div968, %cond.false967 ], !dbg !7753
  store float %cond970, float* %sn873, align 4, !dbg !7757
  %714 = load float, float* %t863, align 4, !dbg !7758
  %715 = load float*, float** %s.addr, align 8, !dbg !7759
  %716 = load i32, i32* %j, align 4, !dbg !7760
  %idxprom971 = sext i32 %716 to i64, !dbg !7759
  %arrayidx972 = getelementptr inbounds float, float* %715, i64 %idxprom971, !dbg !7759
  store float %714, float* %arrayidx972, align 4, !dbg !7761
  %717 = load float, float* %cs865, align 4, !dbg !7762
  %718 = load float*, float** %e, align 8, !dbg !7763
  %719 = load i32, i32* %j, align 4, !dbg !7764
  %idxprom973 = sext i32 %719 to i64, !dbg !7763
  %arrayidx974 = getelementptr inbounds float, float* %718, i64 %idxprom973, !dbg !7763
  %720 = load float, float* %arrayidx974, align 4, !dbg !7763
  %mul975 = fmul float %717, %720, !dbg !7765
  %721 = load float, float* %sn873, align 4, !dbg !7766
  %722 = load float*, float** %s.addr, align 8, !dbg !7767
  %723 = load i32, i32* %j, align 4, !dbg !7768
  %add976 = add nsw i32 %723, 1, !dbg !7769
  %idxprom977 = sext i32 %add976 to i64, !dbg !7767
  %arrayidx978 = getelementptr inbounds float, float* %722, i64 %idxprom977, !dbg !7767
  %724 = load float, float* %arrayidx978, align 4, !dbg !7767
  %mul979 = fmul float %721, %724, !dbg !7770
  %add980 = fadd float %mul975, %mul979, !dbg !7771
  store float %add980, float* %f836, align 4, !dbg !7772
  %725 = load float, float* %sn873, align 4, !dbg !7773
  %fneg981 = fneg float %725, !dbg !7774
  %726 = load float*, float** %e, align 8, !dbg !7775
  %727 = load i32, i32* %j, align 4, !dbg !7776
  %idxprom982 = sext i32 %727 to i64, !dbg !7775
  %arrayidx983 = getelementptr inbounds float, float* %726, i64 %idxprom982, !dbg !7775
  %728 = load float, float* %arrayidx983, align 4, !dbg !7775
  %mul984 = fmul float %fneg981, %728, !dbg !7777
  %729 = load float, float* %cs865, align 4, !dbg !7778
  %730 = load float*, float** %s.addr, align 8, !dbg !7779
  %731 = load i32, i32* %j, align 4, !dbg !7780
  %add985 = add nsw i32 %731, 1, !dbg !7781
  %idxprom986 = sext i32 %add985 to i64, !dbg !7779
  %arrayidx987 = getelementptr inbounds float, float* %730, i64 %idxprom986, !dbg !7779
  %732 = load float, float* %arrayidx987, align 4, !dbg !7779
  %mul988 = fmul float %729, %732, !dbg !7782
  %add989 = fadd float %mul984, %mul988, !dbg !7783
  %733 = load float*, float** %s.addr, align 8, !dbg !7784
  %734 = load i32, i32* %j, align 4, !dbg !7785
  %add990 = add nsw i32 %734, 1, !dbg !7786
  %idxprom991 = sext i32 %add990 to i64, !dbg !7784
  %arrayidx992 = getelementptr inbounds float, float* %733, i64 %idxprom991, !dbg !7784
  store float %add989, float* %arrayidx992, align 4, !dbg !7787
  %735 = load float, float* %sn873, align 4, !dbg !7788
  %736 = load float*, float** %e, align 8, !dbg !7789
  %737 = load i32, i32* %j, align 4, !dbg !7790
  %add993 = add nsw i32 %737, 1, !dbg !7791
  %idxprom994 = sext i32 %add993 to i64, !dbg !7789
  %arrayidx995 = getelementptr inbounds float, float* %736, i64 %idxprom994, !dbg !7789
  %738 = load float, float* %arrayidx995, align 4, !dbg !7789
  %mul996 = fmul float %735, %738, !dbg !7792
  store float %mul996, float* %g, align 4, !dbg !7793
  %739 = load float, float* %cs865, align 4, !dbg !7794
  %740 = load float*, float** %e, align 8, !dbg !7795
  %741 = load i32, i32* %j, align 4, !dbg !7796
  %add997 = add nsw i32 %741, 1, !dbg !7797
  %idxprom998 = sext i32 %add997 to i64, !dbg !7795
  %arrayidx999 = getelementptr inbounds float, float* %740, i64 %idxprom998, !dbg !7795
  %742 = load float, float* %arrayidx999, align 4, !dbg !7795
  %mul1000 = fmul float %739, %742, !dbg !7798
  %743 = load float*, float** %e, align 8, !dbg !7799
  %744 = load i32, i32* %j, align 4, !dbg !7800
  %add1001 = add nsw i32 %744, 1, !dbg !7801
  %idxprom1002 = sext i32 %add1001 to i64, !dbg !7799
  %arrayidx1003 = getelementptr inbounds float, float* %743, i64 %idxprom1002, !dbg !7799
  store float %mul1000, float* %arrayidx1003, align 4, !dbg !7802
  %745 = load i32, i32* %j, align 4, !dbg !7803
  %746 = load i32, i32* %m, align 4, !dbg !7805
  %sub1004 = sub nsw i32 %746, 1, !dbg !7806
  %cmp1005 = icmp slt i32 %745, %sub1004, !dbg !7807
  br i1 %cmp1005, label %if.then1007, label %if.end1049, !dbg !7808

if.then1007:                                      ; preds = %cond.end969
  store i32 0, i32* %i, align 4, !dbg !7809
  br label %for.cond1008, !dbg !7812

for.cond1008:                                     ; preds = %for.inc1046, %if.then1007
  %747 = load i32, i32* %i, align 4, !dbg !7813
  %748 = load i32, i32* %m, align 4, !dbg !7815
  %cmp1009 = icmp slt i32 %747, %748, !dbg !7816
  br i1 %cmp1009, label %for.body1011, label %for.end1048, !dbg !7817

for.body1011:                                     ; preds = %for.cond1008
  %749 = load float, float* %cs865, align 4, !dbg !7818
  %750 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7820
  %751 = load i32, i32* %i, align 4, !dbg !7821
  %idxprom1012 = sext i32 %751 to i64, !dbg !7820
  %arrayidx1013 = getelementptr inbounds [4 x float], [4 x float]* %750, i64 %idxprom1012, !dbg !7820
  %752 = load i32, i32* %j, align 4, !dbg !7822
  %idxprom1014 = sext i32 %752 to i64, !dbg !7820
  %arrayidx1015 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1013, i64 0, i64 %idxprom1014, !dbg !7820
  %753 = load float, float* %arrayidx1015, align 4, !dbg !7820
  %mul1016 = fmul float %749, %753, !dbg !7823
  %754 = load float, float* %sn873, align 4, !dbg !7824
  %755 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7825
  %756 = load i32, i32* %i, align 4, !dbg !7826
  %idxprom1017 = sext i32 %756 to i64, !dbg !7825
  %arrayidx1018 = getelementptr inbounds [4 x float], [4 x float]* %755, i64 %idxprom1017, !dbg !7825
  %757 = load i32, i32* %j, align 4, !dbg !7827
  %add1019 = add nsw i32 %757, 1, !dbg !7828
  %idxprom1020 = sext i32 %add1019 to i64, !dbg !7825
  %arrayidx1021 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1018, i64 0, i64 %idxprom1020, !dbg !7825
  %758 = load float, float* %arrayidx1021, align 4, !dbg !7825
  %mul1022 = fmul float %754, %758, !dbg !7829
  %add1023 = fadd float %mul1016, %mul1022, !dbg !7830
  store float %add1023, float* %t863, align 4, !dbg !7831
  %759 = load float, float* %sn873, align 4, !dbg !7832
  %fneg1024 = fneg float %759, !dbg !7833
  %760 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7834
  %761 = load i32, i32* %i, align 4, !dbg !7835
  %idxprom1025 = sext i32 %761 to i64, !dbg !7834
  %arrayidx1026 = getelementptr inbounds [4 x float], [4 x float]* %760, i64 %idxprom1025, !dbg !7834
  %762 = load i32, i32* %j, align 4, !dbg !7836
  %idxprom1027 = sext i32 %762 to i64, !dbg !7834
  %arrayidx1028 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1026, i64 0, i64 %idxprom1027, !dbg !7834
  %763 = load float, float* %arrayidx1028, align 4, !dbg !7834
  %mul1029 = fmul float %fneg1024, %763, !dbg !7837
  %764 = load float, float* %cs865, align 4, !dbg !7838
  %765 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7839
  %766 = load i32, i32* %i, align 4, !dbg !7840
  %idxprom1030 = sext i32 %766 to i64, !dbg !7839
  %arrayidx1031 = getelementptr inbounds [4 x float], [4 x float]* %765, i64 %idxprom1030, !dbg !7839
  %767 = load i32, i32* %j, align 4, !dbg !7841
  %add1032 = add nsw i32 %767, 1, !dbg !7842
  %idxprom1033 = sext i32 %add1032 to i64, !dbg !7839
  %arrayidx1034 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1031, i64 0, i64 %idxprom1033, !dbg !7839
  %768 = load float, float* %arrayidx1034, align 4, !dbg !7839
  %mul1035 = fmul float %764, %768, !dbg !7843
  %add1036 = fadd float %mul1029, %mul1035, !dbg !7844
  %769 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7845
  %770 = load i32, i32* %i, align 4, !dbg !7846
  %idxprom1037 = sext i32 %770 to i64, !dbg !7845
  %arrayidx1038 = getelementptr inbounds [4 x float], [4 x float]* %769, i64 %idxprom1037, !dbg !7845
  %771 = load i32, i32* %j, align 4, !dbg !7847
  %add1039 = add nsw i32 %771, 1, !dbg !7848
  %idxprom1040 = sext i32 %add1039 to i64, !dbg !7845
  %arrayidx1041 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1038, i64 0, i64 %idxprom1040, !dbg !7845
  store float %add1036, float* %arrayidx1041, align 4, !dbg !7849
  %772 = load float, float* %t863, align 4, !dbg !7850
  %773 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7851
  %774 = load i32, i32* %i, align 4, !dbg !7852
  %idxprom1042 = sext i32 %774 to i64, !dbg !7851
  %arrayidx1043 = getelementptr inbounds [4 x float], [4 x float]* %773, i64 %idxprom1042, !dbg !7851
  %775 = load i32, i32* %j, align 4, !dbg !7853
  %idxprom1044 = sext i32 %775 to i64, !dbg !7851
  %arrayidx1045 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1043, i64 0, i64 %idxprom1044, !dbg !7851
  store float %772, float* %arrayidx1045, align 4, !dbg !7854
  br label %for.inc1046, !dbg !7855

for.inc1046:                                      ; preds = %for.body1011
  %776 = load i32, i32* %i, align 4, !dbg !7856
  %inc1047 = add nsw i32 %776, 1, !dbg !7856
  store i32 %inc1047, i32* %i, align 4, !dbg !7856
  br label %for.cond1008, !dbg !7857, !llvm.loop !7858

for.end1048:                                      ; preds = %for.cond1008
  br label %if.end1049, !dbg !7860

if.end1049:                                       ; preds = %for.end1048, %cond.end969
  br label %for.inc1050, !dbg !7861

for.inc1050:                                      ; preds = %if.end1049
  %777 = load i32, i32* %j, align 4, !dbg !7862
  %inc1051 = add nsw i32 %777, 1, !dbg !7862
  store i32 %inc1051, i32* %j, align 4, !dbg !7862
  br label %for.cond858, !dbg !7863, !llvm.loop !7864

for.end1052:                                      ; preds = %for.cond858
  %778 = load float, float* %f836, align 4, !dbg !7866
  %779 = load float*, float** %e, align 8, !dbg !7867
  %780 = load i32, i32* %p, align 4, !dbg !7868
  %sub1053 = sub nsw i32 %780, 2, !dbg !7869
  %idxprom1054 = sext i32 %sub1053 to i64, !dbg !7867
  %arrayidx1055 = getelementptr inbounds float, float* %779, i64 %idxprom1054, !dbg !7867
  store float %778, float* %arrayidx1055, align 4, !dbg !7870
  %781 = load i32, i32* %iter, align 4, !dbg !7871
  %add1056 = add nsw i32 %781, 1, !dbg !7872
  store i32 %add1056, i32* %iter, align 4, !dbg !7873
  br label %sw.epilog, !dbg !7874

sw.bb1057:                                        ; preds = %if.end627
  %782 = load float*, float** %s.addr, align 8, !dbg !7875
  %783 = load i32, i32* %k, align 4, !dbg !7878
  %idxprom1058 = sext i32 %783 to i64, !dbg !7875
  %arrayidx1059 = getelementptr inbounds float, float* %782, i64 %idxprom1058, !dbg !7875
  %784 = load float, float* %arrayidx1059, align 4, !dbg !7875
  %cmp1060 = fcmp ole float %784, 0.000000e+00, !dbg !7879
  br i1 %cmp1060, label %if.then1062, label %if.end1092, !dbg !7880

if.then1062:                                      ; preds = %sw.bb1057
  %785 = load float*, float** %s.addr, align 8, !dbg !7881
  %786 = load i32, i32* %k, align 4, !dbg !7883
  %idxprom1063 = sext i32 %786 to i64, !dbg !7881
  %arrayidx1064 = getelementptr inbounds float, float* %785, i64 %idxprom1063, !dbg !7881
  %787 = load float, float* %arrayidx1064, align 4, !dbg !7881
  %cmp1065 = fcmp olt float %787, 0.000000e+00, !dbg !7884
  br i1 %cmp1065, label %cond.true1067, label %cond.false1071, !dbg !7881

cond.true1067:                                    ; preds = %if.then1062
  %788 = load float*, float** %s.addr, align 8, !dbg !7885
  %789 = load i32, i32* %k, align 4, !dbg !7886
  %idxprom1068 = sext i32 %789 to i64, !dbg !7885
  %arrayidx1069 = getelementptr inbounds float, float* %788, i64 %idxprom1068, !dbg !7885
  %790 = load float, float* %arrayidx1069, align 4, !dbg !7885
  %fneg1070 = fneg float %790, !dbg !7887
  br label %cond.end1072, !dbg !7881

cond.false1071:                                   ; preds = %if.then1062
  br label %cond.end1072, !dbg !7881

cond.end1072:                                     ; preds = %cond.false1071, %cond.true1067
  %cond1073 = phi float [ %fneg1070, %cond.true1067 ], [ 0.000000e+00, %cond.false1071 ], !dbg !7881
  %791 = load float*, float** %s.addr, align 8, !dbg !7888
  %792 = load i32, i32* %k, align 4, !dbg !7889
  %idxprom1074 = sext i32 %792 to i64, !dbg !7888
  %arrayidx1075 = getelementptr inbounds float, float* %791, i64 %idxprom1074, !dbg !7888
  store float %cond1073, float* %arrayidx1075, align 4, !dbg !7890
  store i32 0, i32* %i, align 4, !dbg !7891
  br label %for.cond1076, !dbg !7893

for.cond1076:                                     ; preds = %for.inc1089, %cond.end1072
  %793 = load i32, i32* %i, align 4, !dbg !7894
  %794 = load i32, i32* %pp, align 4, !dbg !7896
  %cmp1077 = icmp sle i32 %793, %794, !dbg !7897
  br i1 %cmp1077, label %for.body1079, label %for.end1091, !dbg !7898

for.body1079:                                     ; preds = %for.cond1076
  %795 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7899
  %796 = load i32, i32* %i, align 4, !dbg !7900
  %idxprom1080 = sext i32 %796 to i64, !dbg !7899
  %arrayidx1081 = getelementptr inbounds [4 x float], [4 x float]* %795, i64 %idxprom1080, !dbg !7899
  %797 = load i32, i32* %k, align 4, !dbg !7901
  %idxprom1082 = sext i32 %797 to i64, !dbg !7899
  %arrayidx1083 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1081, i64 0, i64 %idxprom1082, !dbg !7899
  %798 = load float, float* %arrayidx1083, align 4, !dbg !7899
  %fneg1084 = fneg float %798, !dbg !7902
  %799 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7903
  %800 = load i32, i32* %i, align 4, !dbg !7904
  %idxprom1085 = sext i32 %800 to i64, !dbg !7903
  %arrayidx1086 = getelementptr inbounds [4 x float], [4 x float]* %799, i64 %idxprom1085, !dbg !7903
  %801 = load i32, i32* %k, align 4, !dbg !7905
  %idxprom1087 = sext i32 %801 to i64, !dbg !7903
  %arrayidx1088 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1086, i64 0, i64 %idxprom1087, !dbg !7903
  store float %fneg1084, float* %arrayidx1088, align 4, !dbg !7906
  br label %for.inc1089, !dbg !7903

for.inc1089:                                      ; preds = %for.body1079
  %802 = load i32, i32* %i, align 4, !dbg !7907
  %inc1090 = add nsw i32 %802, 1, !dbg !7907
  store i32 %inc1090, i32* %i, align 4, !dbg !7907
  br label %for.cond1076, !dbg !7908, !llvm.loop !7909

for.end1091:                                      ; preds = %for.cond1076
  br label %if.end1092, !dbg !7911

if.end1092:                                       ; preds = %for.end1091, %sw.bb1057
  br label %while.cond1093, !dbg !7912

while.cond1093:                                   ; preds = %if.end1176, %if.end1092
  %803 = load i32, i32* %k, align 4, !dbg !7913
  %804 = load i32, i32* %pp, align 4, !dbg !7914
  %cmp1094 = icmp slt i32 %803, %804, !dbg !7915
  br i1 %cmp1094, label %while.body1096, label %while.end, !dbg !7912

while.body1096:                                   ; preds = %while.cond1093
  call void @llvm.dbg.declare(metadata float* %t1097, metadata !7916, metadata !DIExpression()), !dbg !7918
  %805 = load float*, float** %s.addr, align 8, !dbg !7919
  %806 = load i32, i32* %k, align 4, !dbg !7921
  %idxprom1098 = sext i32 %806 to i64, !dbg !7919
  %arrayidx1099 = getelementptr inbounds float, float* %805, i64 %idxprom1098, !dbg !7919
  %807 = load float, float* %arrayidx1099, align 4, !dbg !7919
  %808 = load float*, float** %s.addr, align 8, !dbg !7922
  %809 = load i32, i32* %k, align 4, !dbg !7923
  %add1100 = add nsw i32 %809, 1, !dbg !7924
  %idxprom1101 = sext i32 %add1100 to i64, !dbg !7922
  %arrayidx1102 = getelementptr inbounds float, float* %808, i64 %idxprom1101, !dbg !7922
  %810 = load float, float* %arrayidx1102, align 4, !dbg !7922
  %cmp1103 = fcmp oge float %807, %810, !dbg !7925
  br i1 %cmp1103, label %if.then1105, label %if.end1106, !dbg !7926

if.then1105:                                      ; preds = %while.body1096
  br label %while.end, !dbg !7927

if.end1106:                                       ; preds = %while.body1096
  %811 = load float*, float** %s.addr, align 8, !dbg !7929
  %812 = load i32, i32* %k, align 4, !dbg !7930
  %idxprom1107 = sext i32 %812 to i64, !dbg !7929
  %arrayidx1108 = getelementptr inbounds float, float* %811, i64 %idxprom1107, !dbg !7929
  %813 = load float, float* %arrayidx1108, align 4, !dbg !7929
  store float %813, float* %t1097, align 4, !dbg !7931
  %814 = load float*, float** %s.addr, align 8, !dbg !7932
  %815 = load i32, i32* %k, align 4, !dbg !7933
  %add1109 = add nsw i32 %815, 1, !dbg !7934
  %idxprom1110 = sext i32 %add1109 to i64, !dbg !7932
  %arrayidx1111 = getelementptr inbounds float, float* %814, i64 %idxprom1110, !dbg !7932
  %816 = load float, float* %arrayidx1111, align 4, !dbg !7932
  %817 = load float*, float** %s.addr, align 8, !dbg !7935
  %818 = load i32, i32* %k, align 4, !dbg !7936
  %idxprom1112 = sext i32 %818 to i64, !dbg !7935
  %arrayidx1113 = getelementptr inbounds float, float* %817, i64 %idxprom1112, !dbg !7935
  store float %816, float* %arrayidx1113, align 4, !dbg !7937
  %819 = load float, float* %t1097, align 4, !dbg !7938
  %820 = load float*, float** %s.addr, align 8, !dbg !7939
  %821 = load i32, i32* %k, align 4, !dbg !7940
  %add1114 = add nsw i32 %821, 1, !dbg !7941
  %idxprom1115 = sext i32 %add1114 to i64, !dbg !7939
  %arrayidx1116 = getelementptr inbounds float, float* %820, i64 %idxprom1115, !dbg !7939
  store float %819, float* %arrayidx1116, align 4, !dbg !7942
  %822 = load i32, i32* %k, align 4, !dbg !7943
  %823 = load i32, i32* %n, align 4, !dbg !7945
  %sub1117 = sub nsw i32 %823, 1, !dbg !7946
  %cmp1118 = icmp slt i32 %822, %sub1117, !dbg !7947
  br i1 %cmp1118, label %if.then1120, label %if.end1146, !dbg !7948

if.then1120:                                      ; preds = %if.end1106
  store i32 0, i32* %i, align 4, !dbg !7949
  br label %for.cond1121, !dbg !7952

for.cond1121:                                     ; preds = %for.inc1143, %if.then1120
  %824 = load i32, i32* %i, align 4, !dbg !7953
  %825 = load i32, i32* %n, align 4, !dbg !7955
  %cmp1122 = icmp slt i32 %824, %825, !dbg !7956
  br i1 %cmp1122, label %for.body1124, label %for.end1145, !dbg !7957

for.body1124:                                     ; preds = %for.cond1121
  %826 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7958
  %827 = load i32, i32* %i, align 4, !dbg !7960
  %idxprom1125 = sext i32 %827 to i64, !dbg !7958
  %arrayidx1126 = getelementptr inbounds [4 x float], [4 x float]* %826, i64 %idxprom1125, !dbg !7958
  %828 = load i32, i32* %k, align 4, !dbg !7961
  %add1127 = add nsw i32 %828, 1, !dbg !7962
  %idxprom1128 = sext i32 %add1127 to i64, !dbg !7958
  %arrayidx1129 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1126, i64 0, i64 %idxprom1128, !dbg !7958
  %829 = load float, float* %arrayidx1129, align 4, !dbg !7958
  store float %829, float* %t1097, align 4, !dbg !7963
  %830 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7964
  %831 = load i32, i32* %i, align 4, !dbg !7965
  %idxprom1130 = sext i32 %831 to i64, !dbg !7964
  %arrayidx1131 = getelementptr inbounds [4 x float], [4 x float]* %830, i64 %idxprom1130, !dbg !7964
  %832 = load i32, i32* %k, align 4, !dbg !7966
  %idxprom1132 = sext i32 %832 to i64, !dbg !7964
  %arrayidx1133 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1131, i64 0, i64 %idxprom1132, !dbg !7964
  %833 = load float, float* %arrayidx1133, align 4, !dbg !7964
  %834 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7967
  %835 = load i32, i32* %i, align 4, !dbg !7968
  %idxprom1134 = sext i32 %835 to i64, !dbg !7967
  %arrayidx1135 = getelementptr inbounds [4 x float], [4 x float]* %834, i64 %idxprom1134, !dbg !7967
  %836 = load i32, i32* %k, align 4, !dbg !7969
  %add1136 = add nsw i32 %836, 1, !dbg !7970
  %idxprom1137 = sext i32 %add1136 to i64, !dbg !7967
  %arrayidx1138 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1135, i64 0, i64 %idxprom1137, !dbg !7967
  store float %833, float* %arrayidx1138, align 4, !dbg !7971
  %837 = load float, float* %t1097, align 4, !dbg !7972
  %838 = load [4 x float]*, [4 x float]** %V.addr, align 8, !dbg !7973
  %839 = load i32, i32* %i, align 4, !dbg !7974
  %idxprom1139 = sext i32 %839 to i64, !dbg !7973
  %arrayidx1140 = getelementptr inbounds [4 x float], [4 x float]* %838, i64 %idxprom1139, !dbg !7973
  %840 = load i32, i32* %k, align 4, !dbg !7975
  %idxprom1141 = sext i32 %840 to i64, !dbg !7973
  %arrayidx1142 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1140, i64 0, i64 %idxprom1141, !dbg !7973
  store float %837, float* %arrayidx1142, align 4, !dbg !7976
  br label %for.inc1143, !dbg !7977

for.inc1143:                                      ; preds = %for.body1124
  %841 = load i32, i32* %i, align 4, !dbg !7978
  %inc1144 = add nsw i32 %841, 1, !dbg !7978
  store i32 %inc1144, i32* %i, align 4, !dbg !7978
  br label %for.cond1121, !dbg !7979, !llvm.loop !7980

for.end1145:                                      ; preds = %for.cond1121
  br label %if.end1146, !dbg !7982

if.end1146:                                       ; preds = %for.end1145, %if.end1106
  %842 = load i32, i32* %k, align 4, !dbg !7983
  %843 = load i32, i32* %m, align 4, !dbg !7985
  %sub1147 = sub nsw i32 %843, 1, !dbg !7986
  %cmp1148 = icmp slt i32 %842, %sub1147, !dbg !7987
  br i1 %cmp1148, label %if.then1150, label %if.end1176, !dbg !7988

if.then1150:                                      ; preds = %if.end1146
  store i32 0, i32* %i, align 4, !dbg !7989
  br label %for.cond1151, !dbg !7992

for.cond1151:                                     ; preds = %for.inc1173, %if.then1150
  %844 = load i32, i32* %i, align 4, !dbg !7993
  %845 = load i32, i32* %m, align 4, !dbg !7995
  %cmp1152 = icmp slt i32 %844, %845, !dbg !7996
  br i1 %cmp1152, label %for.body1154, label %for.end1175, !dbg !7997

for.body1154:                                     ; preds = %for.cond1151
  %846 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !7998
  %847 = load i32, i32* %i, align 4, !dbg !8000
  %idxprom1155 = sext i32 %847 to i64, !dbg !7998
  %arrayidx1156 = getelementptr inbounds [4 x float], [4 x float]* %846, i64 %idxprom1155, !dbg !7998
  %848 = load i32, i32* %k, align 4, !dbg !8001
  %add1157 = add nsw i32 %848, 1, !dbg !8002
  %idxprom1158 = sext i32 %add1157 to i64, !dbg !7998
  %arrayidx1159 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1156, i64 0, i64 %idxprom1158, !dbg !7998
  %849 = load float, float* %arrayidx1159, align 4, !dbg !7998
  store float %849, float* %t1097, align 4, !dbg !8003
  %850 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !8004
  %851 = load i32, i32* %i, align 4, !dbg !8005
  %idxprom1160 = sext i32 %851 to i64, !dbg !8004
  %arrayidx1161 = getelementptr inbounds [4 x float], [4 x float]* %850, i64 %idxprom1160, !dbg !8004
  %852 = load i32, i32* %k, align 4, !dbg !8006
  %idxprom1162 = sext i32 %852 to i64, !dbg !8004
  %arrayidx1163 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1161, i64 0, i64 %idxprom1162, !dbg !8004
  %853 = load float, float* %arrayidx1163, align 4, !dbg !8004
  %854 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !8007
  %855 = load i32, i32* %i, align 4, !dbg !8008
  %idxprom1164 = sext i32 %855 to i64, !dbg !8007
  %arrayidx1165 = getelementptr inbounds [4 x float], [4 x float]* %854, i64 %idxprom1164, !dbg !8007
  %856 = load i32, i32* %k, align 4, !dbg !8009
  %add1166 = add nsw i32 %856, 1, !dbg !8010
  %idxprom1167 = sext i32 %add1166 to i64, !dbg !8007
  %arrayidx1168 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1165, i64 0, i64 %idxprom1167, !dbg !8007
  store float %853, float* %arrayidx1168, align 4, !dbg !8011
  %857 = load float, float* %t1097, align 4, !dbg !8012
  %858 = load [4 x float]*, [4 x float]** %U.addr, align 8, !dbg !8013
  %859 = load i32, i32* %i, align 4, !dbg !8014
  %idxprom1169 = sext i32 %859 to i64, !dbg !8013
  %arrayidx1170 = getelementptr inbounds [4 x float], [4 x float]* %858, i64 %idxprom1169, !dbg !8013
  %860 = load i32, i32* %k, align 4, !dbg !8015
  %idxprom1171 = sext i32 %860 to i64, !dbg !8013
  %arrayidx1172 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1170, i64 0, i64 %idxprom1171, !dbg !8013
  store float %857, float* %arrayidx1172, align 4, !dbg !8016
  br label %for.inc1173, !dbg !8017

for.inc1173:                                      ; preds = %for.body1154
  %861 = load i32, i32* %i, align 4, !dbg !8018
  %inc1174 = add nsw i32 %861, 1, !dbg !8018
  store i32 %inc1174, i32* %i, align 4, !dbg !8018
  br label %for.cond1151, !dbg !8019, !llvm.loop !8020

for.end1175:                                      ; preds = %for.cond1151
  br label %if.end1176, !dbg !8022

if.end1176:                                       ; preds = %for.end1175, %if.end1146
  %862 = load i32, i32* %k, align 4, !dbg !8023
  %inc1177 = add nsw i32 %862, 1, !dbg !8023
  store i32 %inc1177, i32* %k, align 4, !dbg !8023
  br label %while.cond1093, !dbg !7912, !llvm.loop !8024

while.end:                                        ; preds = %if.then1105, %while.cond1093
  store i32 0, i32* %iter, align 4, !dbg !8026
  %863 = load i32, i32* %p, align 4, !dbg !8027
  %dec1178 = add nsw i32 %863, -1, !dbg !8027
  store i32 %dec1178, i32* %p, align 4, !dbg !8027
  br label %sw.epilog, !dbg !8028

sw.epilog:                                        ; preds = %if.end627, %while.end, %for.end1052, %for.end789, %for.end710
  br label %while.cond, !dbg !7088, !llvm.loop !8029

while.end1179:                                    ; preds = %if.then544, %while.cond
  ret void, !dbg !8031
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @min_ii(i32 %a, i32 %b) #0 !dbg !8032 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !8036, metadata !DIExpression()), !dbg !8037
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !8038, metadata !DIExpression()), !dbg !8039
  %0 = load i32, i32* %a.addr, align 4, !dbg !8040
  %1 = load i32, i32* %b.addr, align 4, !dbg !8041
  %cmp = icmp slt i32 %0, %1, !dbg !8042
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8043

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !8044
  br label %cond.end, !dbg !8043

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !8045
  br label %cond.end, !dbg !8043

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !8043
  ret i32 %cond, !dbg !8046
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @max_ii(i32 %a, i32 %b) #0 !dbg !8047 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !8048, metadata !DIExpression()), !dbg !8049
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !8050, metadata !DIExpression()), !dbg !8051
  %0 = load i32, i32* %b.addr, align 4, !dbg !8052
  %1 = load i32, i32* %a.addr, align 4, !dbg !8053
  %cmp = icmp slt i32 %0, %1, !dbg !8054
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8055

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !8056
  br label %cond.end, !dbg !8055

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !8057
  br label %cond.end, !dbg !8055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !8055
  ret i32 %cond, !dbg !8058
}

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v4(float* %r) #0 !dbg !8059 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !8060, metadata !DIExpression()), !dbg !8061
  %0 = load float*, float** %r.addr, align 8, !dbg !8062
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !8062
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !8063
  %1 = load float*, float** %r.addr, align 8, !dbg !8064
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !8064
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !8065
  %2 = load float*, float** %r.addr, align 8, !dbg !8066
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 2, !dbg !8066
  store float 0.000000e+00, float* %arrayidx2, align 4, !dbg !8067
  %3 = load float*, float** %r.addr, align 8, !dbg !8068
  %arrayidx3 = getelementptr inbounds float, float* %3, i64 3, !dbg !8068
  store float 0.000000e+00, float* %arrayidx3, align 4, !dbg !8069
  ret void, !dbg !8070
}

; Function Attrs: nounwind
declare dso_local float @hypotf(float, float) #4

; Function Attrs: nounwind
declare dso_local float @powf(float, float) #4

; Function Attrs: noinline nounwind uwtable
define internal float @max_ff(float %a, float %b) #0 !dbg !8071 {
entry:
  %a.addr = alloca float, align 4
  %b.addr = alloca float, align 4
  store float %a, float* %a.addr, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr, metadata !8074, metadata !DIExpression()), !dbg !8075
  store float %b, float* %b.addr, align 4
  call void @llvm.dbg.declare(metadata float* %b.addr, metadata !8076, metadata !DIExpression()), !dbg !8077
  %0 = load float, float* %a.addr, align 4, !dbg !8078
  %1 = load float, float* %b.addr, align 4, !dbg !8079
  %cmp = fcmp ogt float %0, %1, !dbg !8080
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8081

cond.true:                                        ; preds = %entry
  %2 = load float, float* %a.addr, align 4, !dbg !8082
  br label %cond.end, !dbg !8081

cond.false:                                       ; preds = %entry
  %3 = load float, float* %b.addr, align 4, !dbg !8083
  br label %cond.end, !dbg !8081

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ], !dbg !8081
  ret float %cond, !dbg !8084
}

; Function Attrs: nounwind
declare dso_local float @sqrtf(float) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @pseudoinverse_m4_m4([4 x float]* %Ainv, [4 x float]* %A, float %epsilon) #0 !dbg !8085 {
entry:
  %Ainv.addr = alloca [4 x float]*, align 8
  %A.addr = alloca [4 x float]*, align 8
  %epsilon.addr = alloca float, align 4
  %V = alloca [4 x [4 x float]], align 16
  %W = alloca [4 x float], align 16
  %Wm = alloca [4 x [4 x float]], align 16
  %U = alloca [4 x [4 x float]], align 16
  %i = alloca i32, align 4
  store [4 x float]* %Ainv, [4 x float]** %Ainv.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %Ainv.addr, metadata !8088, metadata !DIExpression()), !dbg !8089
  store [4 x float]* %A, [4 x float]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %A.addr, metadata !8090, metadata !DIExpression()), !dbg !8091
  store float %epsilon, float* %epsilon.addr, align 4
  call void @llvm.dbg.declare(metadata float* %epsilon.addr, metadata !8092, metadata !DIExpression()), !dbg !8093
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %V, metadata !8094, metadata !DIExpression()), !dbg !8095
  call void @llvm.dbg.declare(metadata [4 x float]* %W, metadata !8096, metadata !DIExpression()), !dbg !8097
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %Wm, metadata !8098, metadata !DIExpression()), !dbg !8099
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %U, metadata !8100, metadata !DIExpression()), !dbg !8101
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8102, metadata !DIExpression()), !dbg !8103
  %0 = load [4 x float]*, [4 x float]** %A.addr, align 8, !dbg !8104
  call void @transpose_m4([4 x float]* %0), !dbg !8105
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %V, i64 0, i64 0, !dbg !8106
  %arraydecay1 = getelementptr inbounds [4 x float], [4 x float]* %W, i64 0, i64 0, !dbg !8107
  %arraydecay2 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %U, i64 0, i64 0, !dbg !8108
  %1 = load [4 x float]*, [4 x float]** %A.addr, align 8, !dbg !8109
  call void @svd_m4([4 x float]* %arraydecay, float* %arraydecay1, [4 x float]* %arraydecay2, [4 x float]* %1), !dbg !8110
  %arraydecay3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %U, i64 0, i64 0, !dbg !8111
  call void @transpose_m4([4 x float]* %arraydecay3), !dbg !8112
  %arraydecay4 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %V, i64 0, i64 0, !dbg !8113
  call void @transpose_m4([4 x float]* %arraydecay4), !dbg !8114
  %arraydecay5 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Wm, i64 0, i64 0, !dbg !8115
  call void @zero_m4([4 x float]* %arraydecay5), !dbg !8116
  store i32 0, i32* %i, align 4, !dbg !8117
  br label %for.cond, !dbg !8119

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !8120
  %cmp = icmp slt i32 %2, 4, !dbg !8122
  br i1 %cmp, label %for.body, label %for.end, !dbg !8123

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !8124
  %idxprom = sext i32 %3 to i64, !dbg !8125
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %W, i64 0, i64 %idxprom, !dbg !8125
  %4 = load float, float* %arrayidx, align 4, !dbg !8125
  %5 = load float, float* %epsilon.addr, align 4, !dbg !8126
  %cmp6 = fcmp olt float %4, %5, !dbg !8127
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !8128

cond.true:                                        ; preds = %for.body
  br label %cond.end, !dbg !8128

cond.false:                                       ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !8129
  %idxprom7 = sext i32 %6 to i64, !dbg !8130
  %arrayidx8 = getelementptr inbounds [4 x float], [4 x float]* %W, i64 0, i64 %idxprom7, !dbg !8130
  %7 = load float, float* %arrayidx8, align 4, !dbg !8130
  %div = fdiv float 1.000000e+00, %7, !dbg !8131
  br label %cond.end, !dbg !8128

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ 0.000000e+00, %cond.true ], [ %div, %cond.false ], !dbg !8128
  %8 = load i32, i32* %i, align 4, !dbg !8132
  %idxprom9 = sext i32 %8 to i64, !dbg !8133
  %arrayidx10 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Wm, i64 0, i64 %idxprom9, !dbg !8133
  %9 = load i32, i32* %i, align 4, !dbg !8134
  %idxprom11 = sext i32 %9 to i64, !dbg !8133
  %arrayidx12 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx10, i64 0, i64 %idxprom11, !dbg !8133
  store float %cond, float* %arrayidx12, align 4, !dbg !8135
  br label %for.inc, !dbg !8133

for.inc:                                          ; preds = %cond.end
  %10 = load i32, i32* %i, align 4, !dbg !8136
  %inc = add nsw i32 %10, 1, !dbg !8136
  store i32 %inc, i32* %i, align 4, !dbg !8136
  br label %for.cond, !dbg !8137, !llvm.loop !8138

for.end:                                          ; preds = %for.cond
  %arraydecay13 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %V, i64 0, i64 0, !dbg !8140
  call void @transpose_m4([4 x float]* %arraydecay13), !dbg !8141
  %11 = load [4 x float]*, [4 x float]** %Ainv.addr, align 8, !dbg !8142
  %arraydecay14 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %U, i64 0, i64 0, !dbg !8142
  %arraydecay15 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Wm, i64 0, i64 0, !dbg !8142
  %arraydecay16 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %V, i64 0, i64 0, !dbg !8142
  call void @_va_mul_m4_series_4([4 x float]* %11, [4 x float]* %arraydecay14, [4 x float]* %arraydecay15, [4 x float]* %arraydecay16), !dbg !8142
  ret void, !dbg !8143
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pseudoinverse_m3_m3([3 x float]* %Ainv, [3 x float]* %A, float %epsilon) #0 !dbg !8144 {
entry:
  %Ainv.addr = alloca [3 x float]*, align 8
  %A.addr = alloca [3 x float]*, align 8
  %epsilon.addr = alloca float, align 4
  %tmp = alloca [4 x [4 x float]], align 16
  %tmpinv = alloca [4 x [4 x float]], align 16
  store [3 x float]* %Ainv, [3 x float]** %Ainv.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %Ainv.addr, metadata !8147, metadata !DIExpression()), !dbg !8148
  store [3 x float]* %A, [3 x float]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [3 x float]** %A.addr, metadata !8149, metadata !DIExpression()), !dbg !8150
  store float %epsilon, float* %epsilon.addr, align 4
  call void @llvm.dbg.declare(metadata float* %epsilon.addr, metadata !8151, metadata !DIExpression()), !dbg !8152
  %0 = load [3 x float]*, [3 x float]** %Ainv.addr, align 8, !dbg !8153
  %1 = load [3 x float]*, [3 x float]** %A.addr, align 8, !dbg !8155
  %call = call zeroext i8 @invert_m3_m3([3 x float]* %0, [3 x float]* %1), !dbg !8156
  %tobool = icmp ne i8 %call, 0, !dbg !8156
  br i1 %tobool, label %if.end, label %if.then, !dbg !8157

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %tmp, metadata !8158, metadata !DIExpression()), !dbg !8160
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %tmpinv, metadata !8161, metadata !DIExpression()), !dbg !8162
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmp, i64 0, i64 0, !dbg !8163
  %2 = load [3 x float]*, [3 x float]** %A.addr, align 8, !dbg !8164
  call void @copy_m4_m3([4 x float]* %arraydecay, [3 x float]* %2), !dbg !8165
  %arraydecay1 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmpinv, i64 0, i64 0, !dbg !8166
  %arraydecay2 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmp, i64 0, i64 0, !dbg !8167
  %3 = load float, float* %epsilon.addr, align 4, !dbg !8168
  call void @pseudoinverse_m4_m4([4 x float]* %arraydecay1, [4 x float]* %arraydecay2, float %3), !dbg !8169
  %4 = load [3 x float]*, [3 x float]** %Ainv.addr, align 8, !dbg !8170
  %arraydecay3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %tmpinv, i64 0, i64 0, !dbg !8171
  call void @copy_m3_m4([3 x float]* %4, [4 x float]* %arraydecay3), !dbg !8172
  br label %if.end, !dbg !8173

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8174
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @has_zero_axis_m4([4 x float]* %matrix) #0 !dbg !8175 {
entry:
  %matrix.addr = alloca [4 x float]*, align 8
  store [4 x float]* %matrix, [4 x float]** %matrix.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %matrix.addr, metadata !8176, metadata !DIExpression()), !dbg !8177
  %0 = load [4 x float]*, [4 x float]** %matrix.addr, align 8, !dbg !8178
  %arrayidx = getelementptr inbounds [4 x float], [4 x float]* %0, i64 0, !dbg !8178
  %arraydecay = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !8178
  %call = call float @len_squared_v3(float* %arraydecay), !dbg !8179
  %cmp = fcmp olt float %call, 0x3E80000000000000, !dbg !8180
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !8181

lor.lhs.false:                                    ; preds = %entry
  %1 = load [4 x float]*, [4 x float]** %matrix.addr, align 8, !dbg !8182
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 1, !dbg !8182
  %arraydecay2 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx1, i64 0, i64 0, !dbg !8182
  %call3 = call float @len_squared_v3(float* %arraydecay2), !dbg !8183
  %cmp4 = fcmp olt float %call3, 0x3E80000000000000, !dbg !8184
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !8185

lor.rhs:                                          ; preds = %lor.lhs.false
  %2 = load [4 x float]*, [4 x float]** %matrix.addr, align 8, !dbg !8186
  %arrayidx5 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 2, !dbg !8186
  %arraydecay6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 0, !dbg !8186
  %call7 = call float @len_squared_v3(float* %arraydecay6), !dbg !8187
  %cmp8 = fcmp olt float %call7, 0x3E80000000000000, !dbg !8188
  br label %lor.end, !dbg !8185

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %3 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp8, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !8185
  %conv = trunc i32 %lor.ext to i8, !dbg !8179
  ret i8 %conv, !dbg !8189
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @invert_m4_m4_safe([4 x float]* %Ainv, [4 x float]* %A) #0 !dbg !8190 {
entry:
  %Ainv.addr = alloca [4 x float]*, align 8
  %A.addr = alloca [4 x float]*, align 8
  %Atemp = alloca [4 x [4 x float]], align 16
  store [4 x float]* %Ainv, [4 x float]** %Ainv.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %Ainv.addr, metadata !8191, metadata !DIExpression()), !dbg !8192
  store [4 x float]* %A, [4 x float]** %A.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %A.addr, metadata !8193, metadata !DIExpression()), !dbg !8194
  %0 = load [4 x float]*, [4 x float]** %Ainv.addr, align 8, !dbg !8195
  %1 = load [4 x float]*, [4 x float]** %A.addr, align 8, !dbg !8197
  %call = call zeroext i8 @invert_m4_m4([4 x float]* %0, [4 x float]* %1), !dbg !8198
  %tobool = icmp ne i8 %call, 0, !dbg !8198
  br i1 %tobool, label %if.end12, label %if.then, !dbg !8199

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %Atemp, metadata !8200, metadata !DIExpression()), !dbg !8202
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Atemp, i64 0, i64 0, !dbg !8203
  %2 = load [4 x float]*, [4 x float]** %A.addr, align 8, !dbg !8204
  call void @copy_m4_m4([4 x float]* %arraydecay, [4 x float]* %2), !dbg !8205
  %arrayidx = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Atemp, i64 0, i64 0, !dbg !8206
  %arrayidx1 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx, i64 0, i64 0, !dbg !8206
  %3 = load float, float* %arrayidx1, align 16, !dbg !8207
  %add = fadd float %3, 0x3E45798EE0000000, !dbg !8207
  store float %add, float* %arrayidx1, align 16, !dbg !8207
  %arrayidx2 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Atemp, i64 0, i64 1, !dbg !8208
  %arrayidx3 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx2, i64 0, i64 1, !dbg !8208
  %4 = load float, float* %arrayidx3, align 4, !dbg !8209
  %add4 = fadd float %4, 0x3E45798EE0000000, !dbg !8209
  store float %add4, float* %arrayidx3, align 4, !dbg !8209
  %arrayidx5 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Atemp, i64 0, i64 2, !dbg !8210
  %arrayidx6 = getelementptr inbounds [4 x float], [4 x float]* %arrayidx5, i64 0, i64 2, !dbg !8210
  %5 = load float, float* %arrayidx6, align 8, !dbg !8211
  %add7 = fadd float %5, 0x3E45798EE0000000, !dbg !8211
  store float %add7, float* %arrayidx6, align 8, !dbg !8211
  %6 = load [4 x float]*, [4 x float]** %Ainv.addr, align 8, !dbg !8212
  %arraydecay8 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %Atemp, i64 0, i64 0, !dbg !8214
  %call9 = call zeroext i8 @invert_m4_m4([4 x float]* %6, [4 x float]* %arraydecay8), !dbg !8215
  %tobool10 = icmp ne i8 %call9, 0, !dbg !8215
  br i1 %tobool10, label %if.end, label %if.then11, !dbg !8216

if.then11:                                        ; preds = %if.then
  %7 = load [4 x float]*, [4 x float]** %Ainv.addr, align 8, !dbg !8217
  call void @unit_m4([4 x float]* %7), !dbg !8219
  br label %if.end, !dbg !8220

if.end:                                           ; preds = %if.then11, %if.then
  br label %if.end12, !dbg !8221

if.end12:                                         ; preds = %if.end, %entry
  ret void, !dbg !8222
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BLI_space_transform_from_matrices(%struct.SpaceTransform* %data, [4 x float]* %local, [4 x float]* %target) #0 !dbg !8223 {
entry:
  %data.addr = alloca %struct.SpaceTransform*, align 8
  %local.addr = alloca [4 x float]*, align 8
  %target.addr = alloca [4 x float]*, align 8
  %itarget = alloca [4 x [4 x float]], align 16
  store %struct.SpaceTransform* %data, %struct.SpaceTransform** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceTransform** %data.addr, metadata !8226, metadata !DIExpression()), !dbg !8227
  store [4 x float]* %local, [4 x float]** %local.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %local.addr, metadata !8228, metadata !DIExpression()), !dbg !8229
  store [4 x float]* %target, [4 x float]** %target.addr, align 8
  call void @llvm.dbg.declare(metadata [4 x float]** %target.addr, metadata !8230, metadata !DIExpression()), !dbg !8231
  call void @llvm.dbg.declare(metadata [4 x [4 x float]]* %itarget, metadata !8232, metadata !DIExpression()), !dbg !8233
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %itarget, i64 0, i64 0, !dbg !8234
  %0 = load [4 x float]*, [4 x float]** %target.addr, align 8, !dbg !8235
  %call = call zeroext i8 @invert_m4_m4([4 x float]* %arraydecay, [4 x float]* %0), !dbg !8236
  %1 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8237
  %local2target = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %1, i32 0, i32 0, !dbg !8238
  %arraydecay1 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %local2target, i64 0, i64 0, !dbg !8237
  %arraydecay2 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %itarget, i64 0, i64 0, !dbg !8239
  %2 = load [4 x float]*, [4 x float]** %local.addr, align 8, !dbg !8240
  call void @mul_m4_m4m4([4 x float]* %arraydecay1, [4 x float]* %arraydecay2, [4 x float]* %2), !dbg !8241
  %3 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8242
  %target2local = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %3, i32 0, i32 1, !dbg !8243
  %arraydecay3 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %target2local, i64 0, i64 0, !dbg !8242
  %4 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8244
  %local2target4 = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %4, i32 0, i32 0, !dbg !8245
  %arraydecay5 = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %local2target4, i64 0, i64 0, !dbg !8244
  %call6 = call zeroext i8 @invert_m4_m4([4 x float]* %arraydecay3, [4 x float]* %arraydecay5), !dbg !8246
  ret void, !dbg !8247
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BLI_space_transform_apply(%struct.SpaceTransform* %data, float* %co) #0 !dbg !8248 {
entry:
  %data.addr = alloca %struct.SpaceTransform*, align 8
  %co.addr = alloca float*, align 8
  store %struct.SpaceTransform* %data, %struct.SpaceTransform** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceTransform** %data.addr, metadata !8253, metadata !DIExpression()), !dbg !8254
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !8255, metadata !DIExpression()), !dbg !8256
  %0 = load float*, float** %co.addr, align 8, !dbg !8257
  %1 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8258
  %local2target = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %1, i32 0, i32 0, !dbg !8259
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %local2target, i64 0, i64 0, !dbg !8260
  %2 = load float*, float** %co.addr, align 8, !dbg !8261
  call void @mul_v3_m4v3(float* %0, [4 x float]* %arraydecay, float* %2), !dbg !8262
  ret void, !dbg !8263
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BLI_space_transform_invert(%struct.SpaceTransform* %data, float* %co) #0 !dbg !8264 {
entry:
  %data.addr = alloca %struct.SpaceTransform*, align 8
  %co.addr = alloca float*, align 8
  store %struct.SpaceTransform* %data, %struct.SpaceTransform** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceTransform** %data.addr, metadata !8265, metadata !DIExpression()), !dbg !8266
  store float* %co, float** %co.addr, align 8
  call void @llvm.dbg.declare(metadata float** %co.addr, metadata !8267, metadata !DIExpression()), !dbg !8268
  %0 = load float*, float** %co.addr, align 8, !dbg !8269
  %1 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8270
  %target2local = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %1, i32 0, i32 1, !dbg !8271
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %target2local, i64 0, i64 0, !dbg !8272
  %2 = load float*, float** %co.addr, align 8, !dbg !8273
  call void @mul_v3_m4v3(float* %0, [4 x float]* %arraydecay, float* %2), !dbg !8274
  ret void, !dbg !8275
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BLI_space_transform_apply_normal(%struct.SpaceTransform* %data, float* %no) #0 !dbg !8276 {
entry:
  %data.addr = alloca %struct.SpaceTransform*, align 8
  %no.addr = alloca float*, align 8
  store %struct.SpaceTransform* %data, %struct.SpaceTransform** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceTransform** %data.addr, metadata !8277, metadata !DIExpression()), !dbg !8278
  store float* %no, float** %no.addr, align 8
  call void @llvm.dbg.declare(metadata float** %no.addr, metadata !8279, metadata !DIExpression()), !dbg !8280
  %0 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8281
  %local2target = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %0, i32 0, i32 0, !dbg !8282
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %local2target, i64 0, i64 0, !dbg !8283
  %1 = load float*, float** %no.addr, align 8, !dbg !8284
  call void @mul_mat3_m4_v3([4 x float]* %arraydecay, float* %1), !dbg !8285
  %2 = load float*, float** %no.addr, align 8, !dbg !8286
  %call = call float @normalize_v3(float* %2), !dbg !8287
  ret void, !dbg !8288
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BLI_space_transform_invert_normal(%struct.SpaceTransform* %data, float* %no) #0 !dbg !8289 {
entry:
  %data.addr = alloca %struct.SpaceTransform*, align 8
  %no.addr = alloca float*, align 8
  store %struct.SpaceTransform* %data, %struct.SpaceTransform** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceTransform** %data.addr, metadata !8290, metadata !DIExpression()), !dbg !8291
  store float* %no, float** %no.addr, align 8
  call void @llvm.dbg.declare(metadata float** %no.addr, metadata !8292, metadata !DIExpression()), !dbg !8293
  %0 = load %struct.SpaceTransform*, %struct.SpaceTransform** %data.addr, align 8, !dbg !8294
  %target2local = getelementptr inbounds %struct.SpaceTransform, %struct.SpaceTransform* %0, i32 0, i32 1, !dbg !8295
  %arraydecay = getelementptr inbounds [4 x [4 x float]], [4 x [4 x float]]* %target2local, i64 0, i64 0, !dbg !8296
  %1 = load float*, float** %no.addr, align 8, !dbg !8297
  call void @mul_mat3_m4_v3([4 x float]* %arraydecay, float* %1), !dbg !8298
  %2 = load float*, float** %no.addr, align 8, !dbg !8299
  %call = call float @normalize_v3(float* %2), !dbg !8300
  ret void, !dbg !8301
}

; Function Attrs: noinline nounwind uwtable
define internal void @mul_v3_v3fl(float* %r, float* %a, float %f) #0 !dbg !8302 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  %f.addr = alloca float, align 4
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !8305, metadata !DIExpression()), !dbg !8306
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !8307, metadata !DIExpression()), !dbg !8308
  store float %f, float* %f.addr, align 4
  call void @llvm.dbg.declare(metadata float* %f.addr, metadata !8309, metadata !DIExpression()), !dbg !8310
  %0 = load float*, float** %a.addr, align 8, !dbg !8311
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !8311
  %1 = load float, float* %arrayidx, align 4, !dbg !8311
  %2 = load float, float* %f.addr, align 4, !dbg !8312
  %mul = fmul float %1, %2, !dbg !8313
  %3 = load float*, float** %r.addr, align 8, !dbg !8314
  %arrayidx1 = getelementptr inbounds float, float* %3, i64 0, !dbg !8314
  store float %mul, float* %arrayidx1, align 4, !dbg !8315
  %4 = load float*, float** %a.addr, align 8, !dbg !8316
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !8316
  %5 = load float, float* %arrayidx2, align 4, !dbg !8316
  %6 = load float, float* %f.addr, align 4, !dbg !8317
  %mul3 = fmul float %5, %6, !dbg !8318
  %7 = load float*, float** %r.addr, align 8, !dbg !8319
  %arrayidx4 = getelementptr inbounds float, float* %7, i64 1, !dbg !8319
  store float %mul3, float* %arrayidx4, align 4, !dbg !8320
  %8 = load float*, float** %a.addr, align 8, !dbg !8321
  %arrayidx5 = getelementptr inbounds float, float* %8, i64 2, !dbg !8321
  %9 = load float, float* %arrayidx5, align 4, !dbg !8321
  %10 = load float, float* %f.addr, align 4, !dbg !8322
  %mul6 = fmul float %9, %10, !dbg !8323
  %11 = load float*, float** %r.addr, align 8, !dbg !8324
  %arrayidx7 = getelementptr inbounds float, float* %11, i64 2, !dbg !8324
  store float %mul6, float* %arrayidx7, align 4, !dbg !8325
  ret void, !dbg !8326
}

; Function Attrs: noinline nounwind uwtable
define internal void @zero_v3(float* %r) #0 !dbg !8327 {
entry:
  %r.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !8328, metadata !DIExpression()), !dbg !8329
  %0 = load float*, float** %r.addr, align 8, !dbg !8330
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !8330
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !8331
  %1 = load float*, float** %r.addr, align 8, !dbg !8332
  %arrayidx1 = getelementptr inbounds float, float* %1, i64 1, !dbg !8332
  store float 0.000000e+00, float* %arrayidx1, align 4, !dbg !8333
  %2 = load float*, float** %r.addr, align 8, !dbg !8334
  %arrayidx2 = getelementptr inbounds float, float* %2, i64 2, !dbg !8334
  store float 0.000000e+00, float* %arrayidx2, align 4, !dbg !8335
  ret void, !dbg !8336
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!16, !17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_matrix.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{}
!3 = !{!4, !5, !6}
!4 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!5 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "SpaceTransform", file: !8, line: 247, baseType: !9)
!8 = !DIFile(filename: "blender/source/blender/blenlib/BLI_math_matrix.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!9 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SpaceTransform", file: !8, line: 243, size: 1024, elements: !10)
!10 = !{!11, !15}
!11 = !DIDerivedType(tag: DW_TAG_member, name: "local2target", scope: !9, file: !8, line: 244, baseType: !12, size: 512)
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 512, elements: !13)
!13 = !{!14, !14}
!14 = !DISubrange(count: 4)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "target2local", scope: !9, file: !8, line: 245, baseType: !12, size: 512, offset: 512)
!16 = !{i32 7, !"Dwarf Version", i32 4}
!17 = !{i32 2, !"Debug Info Version", i32 3}
!18 = !{i32 1, !"wchar_size", i32 4}
!19 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!20 = distinct !DISubprogram(name: "zero_m2", scope: !1, file: !1, line: 38, type: !21, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DISubroutineType(types: !22)
!22 = !{null, !23}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 64, elements: !25)
!25 = !{!26}
!26 = !DISubrange(count: 2)
!27 = !DILocalVariable(name: "m", arg: 1, scope: !20, file: !1, line: 38, type: !23)
!28 = !DILocation(line: 38, column: 20, scope: !20)
!29 = !DILocation(line: 40, column: 9, scope: !20)
!30 = !DILocation(line: 40, column: 2, scope: !20)
!31 = !DILocation(line: 41, column: 1, scope: !20)
!32 = distinct !DISubprogram(name: "zero_m3", scope: !1, file: !1, line: 43, type: !33, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DISubroutineType(types: !34)
!34 = !{null, !35}
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 96, elements: !37)
!37 = !{!38}
!38 = !DISubrange(count: 3)
!39 = !DILocalVariable(name: "m", arg: 1, scope: !32, file: !1, line: 43, type: !35)
!40 = !DILocation(line: 43, column: 20, scope: !32)
!41 = !DILocation(line: 45, column: 9, scope: !32)
!42 = !DILocation(line: 45, column: 2, scope: !32)
!43 = !DILocation(line: 46, column: 1, scope: !32)
!44 = distinct !DISubprogram(name: "zero_m4", scope: !1, file: !1, line: 48, type: !45, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DISubroutineType(types: !46)
!46 = !{null, !47}
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, elements: !49)
!49 = !{!14}
!50 = !DILocalVariable(name: "m", arg: 1, scope: !44, file: !1, line: 48, type: !47)
!51 = !DILocation(line: 48, column: 20, scope: !44)
!52 = !DILocation(line: 50, column: 9, scope: !44)
!53 = !DILocation(line: 50, column: 2, scope: !44)
!54 = !DILocation(line: 51, column: 1, scope: !44)
!55 = distinct !DISubprogram(name: "unit_m2", scope: !1, file: !1, line: 53, type: !21, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!56 = !DILocalVariable(name: "m", arg: 1, scope: !55, file: !1, line: 53, type: !23)
!57 = !DILocation(line: 53, column: 20, scope: !55)
!58 = !DILocation(line: 55, column: 12, scope: !55)
!59 = !DILocation(line: 55, column: 20, scope: !55)
!60 = !DILocation(line: 55, column: 2, scope: !55)
!61 = !DILocation(line: 55, column: 10, scope: !55)
!62 = !DILocation(line: 56, column: 2, scope: !55)
!63 = !DILocation(line: 56, column: 10, scope: !55)
!64 = !DILocation(line: 57, column: 2, scope: !55)
!65 = !DILocation(line: 57, column: 10, scope: !55)
!66 = !DILocation(line: 58, column: 1, scope: !55)
!67 = distinct !DISubprogram(name: "unit_m3", scope: !1, file: !1, line: 60, type: !33, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!68 = !DILocalVariable(name: "m", arg: 1, scope: !67, file: !1, line: 60, type: !35)
!69 = !DILocation(line: 60, column: 20, scope: !67)
!70 = !DILocation(line: 62, column: 22, scope: !67)
!71 = !DILocation(line: 62, column: 30, scope: !67)
!72 = !DILocation(line: 62, column: 12, scope: !67)
!73 = !DILocation(line: 62, column: 20, scope: !67)
!74 = !DILocation(line: 62, column: 2, scope: !67)
!75 = !DILocation(line: 62, column: 10, scope: !67)
!76 = !DILocation(line: 63, column: 12, scope: !67)
!77 = !DILocation(line: 63, column: 20, scope: !67)
!78 = !DILocation(line: 63, column: 2, scope: !67)
!79 = !DILocation(line: 63, column: 10, scope: !67)
!80 = !DILocation(line: 64, column: 12, scope: !67)
!81 = !DILocation(line: 64, column: 20, scope: !67)
!82 = !DILocation(line: 64, column: 2, scope: !67)
!83 = !DILocation(line: 64, column: 10, scope: !67)
!84 = !DILocation(line: 65, column: 12, scope: !67)
!85 = !DILocation(line: 65, column: 20, scope: !67)
!86 = !DILocation(line: 65, column: 2, scope: !67)
!87 = !DILocation(line: 65, column: 10, scope: !67)
!88 = !DILocation(line: 66, column: 1, scope: !67)
!89 = distinct !DISubprogram(name: "unit_m4", scope: !1, file: !1, line: 68, type: !45, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!90 = !DILocalVariable(name: "m", arg: 1, scope: !89, file: !1, line: 68, type: !47)
!91 = !DILocation(line: 68, column: 20, scope: !89)
!92 = !DILocation(line: 70, column: 32, scope: !89)
!93 = !DILocation(line: 70, column: 40, scope: !89)
!94 = !DILocation(line: 70, column: 22, scope: !89)
!95 = !DILocation(line: 70, column: 30, scope: !89)
!96 = !DILocation(line: 70, column: 12, scope: !89)
!97 = !DILocation(line: 70, column: 20, scope: !89)
!98 = !DILocation(line: 70, column: 2, scope: !89)
!99 = !DILocation(line: 70, column: 10, scope: !89)
!100 = !DILocation(line: 71, column: 22, scope: !89)
!101 = !DILocation(line: 71, column: 30, scope: !89)
!102 = !DILocation(line: 71, column: 12, scope: !89)
!103 = !DILocation(line: 71, column: 20, scope: !89)
!104 = !DILocation(line: 71, column: 2, scope: !89)
!105 = !DILocation(line: 71, column: 10, scope: !89)
!106 = !DILocation(line: 72, column: 22, scope: !89)
!107 = !DILocation(line: 72, column: 30, scope: !89)
!108 = !DILocation(line: 72, column: 12, scope: !89)
!109 = !DILocation(line: 72, column: 20, scope: !89)
!110 = !DILocation(line: 72, column: 2, scope: !89)
!111 = !DILocation(line: 72, column: 10, scope: !89)
!112 = !DILocation(line: 73, column: 22, scope: !89)
!113 = !DILocation(line: 73, column: 30, scope: !89)
!114 = !DILocation(line: 73, column: 12, scope: !89)
!115 = !DILocation(line: 73, column: 20, scope: !89)
!116 = !DILocation(line: 73, column: 2, scope: !89)
!117 = !DILocation(line: 73, column: 10, scope: !89)
!118 = !DILocation(line: 74, column: 22, scope: !89)
!119 = !DILocation(line: 74, column: 30, scope: !89)
!120 = !DILocation(line: 74, column: 12, scope: !89)
!121 = !DILocation(line: 74, column: 20, scope: !89)
!122 = !DILocation(line: 74, column: 2, scope: !89)
!123 = !DILocation(line: 74, column: 10, scope: !89)
!124 = !DILocation(line: 75, column: 1, scope: !89)
!125 = distinct !DISubprogram(name: "copy_m2_m2", scope: !1, file: !1, line: 77, type: !126, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !23, !23}
!128 = !DILocalVariable(name: "m1", arg: 1, scope: !125, file: !1, line: 77, type: !23)
!129 = !DILocation(line: 77, column: 23, scope: !125)
!130 = !DILocalVariable(name: "m2", arg: 2, scope: !125, file: !1, line: 77, type: !23)
!131 = !DILocation(line: 77, column: 39, scope: !125)
!132 = !DILocation(line: 79, column: 9, scope: !125)
!133 = !DILocation(line: 79, column: 2, scope: !125)
!134 = !DILocation(line: 79, column: 13, scope: !125)
!135 = !DILocation(line: 80, column: 1, scope: !125)
!136 = distinct !DISubprogram(name: "copy_m3_m3", scope: !1, file: !1, line: 82, type: !137, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!137 = !DISubroutineType(types: !138)
!138 = !{null, !35, !35}
!139 = !DILocalVariable(name: "m1", arg: 1, scope: !136, file: !1, line: 82, type: !35)
!140 = !DILocation(line: 82, column: 23, scope: !136)
!141 = !DILocalVariable(name: "m2", arg: 2, scope: !136, file: !1, line: 82, type: !35)
!142 = !DILocation(line: 82, column: 39, scope: !136)
!143 = !DILocation(line: 85, column: 9, scope: !136)
!144 = !DILocation(line: 85, column: 2, scope: !136)
!145 = !DILocation(line: 85, column: 13, scope: !136)
!146 = !DILocation(line: 86, column: 1, scope: !136)
!147 = distinct !DISubprogram(name: "copy_m4_m4", scope: !1, file: !1, line: 88, type: !148, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!148 = !DISubroutineType(types: !149)
!149 = !{null, !47, !47}
!150 = !DILocalVariable(name: "m1", arg: 1, scope: !147, file: !1, line: 88, type: !47)
!151 = !DILocation(line: 88, column: 23, scope: !147)
!152 = !DILocalVariable(name: "m2", arg: 2, scope: !147, file: !1, line: 88, type: !47)
!153 = !DILocation(line: 88, column: 39, scope: !147)
!154 = !DILocation(line: 90, column: 9, scope: !147)
!155 = !DILocation(line: 90, column: 2, scope: !147)
!156 = !DILocation(line: 90, column: 13, scope: !147)
!157 = !DILocation(line: 91, column: 1, scope: !147)
!158 = distinct !DISubprogram(name: "copy_m3_m4", scope: !1, file: !1, line: 93, type: !159, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!159 = !DISubroutineType(types: !160)
!160 = !{null, !35, !47}
!161 = !DILocalVariable(name: "m1", arg: 1, scope: !158, file: !1, line: 93, type: !35)
!162 = !DILocation(line: 93, column: 23, scope: !158)
!163 = !DILocalVariable(name: "m2", arg: 2, scope: !158, file: !1, line: 93, type: !47)
!164 = !DILocation(line: 93, column: 39, scope: !158)
!165 = !DILocation(line: 95, column: 13, scope: !158)
!166 = !DILocation(line: 95, column: 2, scope: !158)
!167 = !DILocation(line: 95, column: 11, scope: !158)
!168 = !DILocation(line: 96, column: 13, scope: !158)
!169 = !DILocation(line: 96, column: 2, scope: !158)
!170 = !DILocation(line: 96, column: 11, scope: !158)
!171 = !DILocation(line: 97, column: 13, scope: !158)
!172 = !DILocation(line: 97, column: 2, scope: !158)
!173 = !DILocation(line: 97, column: 11, scope: !158)
!174 = !DILocation(line: 99, column: 13, scope: !158)
!175 = !DILocation(line: 99, column: 2, scope: !158)
!176 = !DILocation(line: 99, column: 11, scope: !158)
!177 = !DILocation(line: 100, column: 13, scope: !158)
!178 = !DILocation(line: 100, column: 2, scope: !158)
!179 = !DILocation(line: 100, column: 11, scope: !158)
!180 = !DILocation(line: 101, column: 13, scope: !158)
!181 = !DILocation(line: 101, column: 2, scope: !158)
!182 = !DILocation(line: 101, column: 11, scope: !158)
!183 = !DILocation(line: 103, column: 13, scope: !158)
!184 = !DILocation(line: 103, column: 2, scope: !158)
!185 = !DILocation(line: 103, column: 11, scope: !158)
!186 = !DILocation(line: 104, column: 13, scope: !158)
!187 = !DILocation(line: 104, column: 2, scope: !158)
!188 = !DILocation(line: 104, column: 11, scope: !158)
!189 = !DILocation(line: 105, column: 13, scope: !158)
!190 = !DILocation(line: 105, column: 2, scope: !158)
!191 = !DILocation(line: 105, column: 11, scope: !158)
!192 = !DILocation(line: 106, column: 1, scope: !158)
!193 = distinct !DISubprogram(name: "copy_m4_m3", scope: !1, file: !1, line: 108, type: !194, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!194 = !DISubroutineType(types: !195)
!195 = !{null, !47, !35}
!196 = !DILocalVariable(name: "m1", arg: 1, scope: !193, file: !1, line: 108, type: !47)
!197 = !DILocation(line: 108, column: 23, scope: !193)
!198 = !DILocalVariable(name: "m2", arg: 2, scope: !193, file: !1, line: 108, type: !35)
!199 = !DILocation(line: 108, column: 39, scope: !193)
!200 = !DILocation(line: 110, column: 13, scope: !193)
!201 = !DILocation(line: 110, column: 2, scope: !193)
!202 = !DILocation(line: 110, column: 11, scope: !193)
!203 = !DILocation(line: 111, column: 13, scope: !193)
!204 = !DILocation(line: 111, column: 2, scope: !193)
!205 = !DILocation(line: 111, column: 11, scope: !193)
!206 = !DILocation(line: 112, column: 13, scope: !193)
!207 = !DILocation(line: 112, column: 2, scope: !193)
!208 = !DILocation(line: 112, column: 11, scope: !193)
!209 = !DILocation(line: 114, column: 13, scope: !193)
!210 = !DILocation(line: 114, column: 2, scope: !193)
!211 = !DILocation(line: 114, column: 11, scope: !193)
!212 = !DILocation(line: 115, column: 13, scope: !193)
!213 = !DILocation(line: 115, column: 2, scope: !193)
!214 = !DILocation(line: 115, column: 11, scope: !193)
!215 = !DILocation(line: 116, column: 13, scope: !193)
!216 = !DILocation(line: 116, column: 2, scope: !193)
!217 = !DILocation(line: 116, column: 11, scope: !193)
!218 = !DILocation(line: 118, column: 13, scope: !193)
!219 = !DILocation(line: 118, column: 2, scope: !193)
!220 = !DILocation(line: 118, column: 11, scope: !193)
!221 = !DILocation(line: 119, column: 13, scope: !193)
!222 = !DILocation(line: 119, column: 2, scope: !193)
!223 = !DILocation(line: 119, column: 11, scope: !193)
!224 = !DILocation(line: 120, column: 13, scope: !193)
!225 = !DILocation(line: 120, column: 2, scope: !193)
!226 = !DILocation(line: 120, column: 11, scope: !193)
!227 = !DILocation(line: 123, column: 2, scope: !193)
!228 = !DILocation(line: 123, column: 11, scope: !193)
!229 = !DILocation(line: 124, column: 2, scope: !193)
!230 = !DILocation(line: 124, column: 11, scope: !193)
!231 = !DILocation(line: 125, column: 2, scope: !193)
!232 = !DILocation(line: 125, column: 11, scope: !193)
!233 = !DILocation(line: 127, column: 2, scope: !193)
!234 = !DILocation(line: 127, column: 11, scope: !193)
!235 = !DILocation(line: 128, column: 2, scope: !193)
!236 = !DILocation(line: 128, column: 11, scope: !193)
!237 = !DILocation(line: 129, column: 2, scope: !193)
!238 = !DILocation(line: 129, column: 11, scope: !193)
!239 = !DILocation(line: 130, column: 2, scope: !193)
!240 = !DILocation(line: 130, column: 11, scope: !193)
!241 = !DILocation(line: 132, column: 1, scope: !193)
!242 = distinct !DISubprogram(name: "copy_m3_m3d", scope: !1, file: !1, line: 134, type: !243, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!243 = !DISubroutineType(types: !244)
!244 = !{null, !35, !245}
!245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !246, size: 64)
!246 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 192, elements: !37)
!247 = !DILocalVariable(name: "R", arg: 1, scope: !242, file: !1, line: 134, type: !35)
!248 = !DILocation(line: 134, column: 24, scope: !242)
!249 = !DILocalVariable(name: "A", arg: 2, scope: !242, file: !1, line: 134, type: !245)
!250 = !DILocation(line: 134, column: 40, scope: !242)
!251 = !DILocation(line: 137, column: 19, scope: !242)
!252 = !DILocation(line: 137, column: 12, scope: !242)
!253 = !DILocation(line: 137, column: 2, scope: !242)
!254 = !DILocation(line: 137, column: 10, scope: !242)
!255 = !DILocation(line: 138, column: 19, scope: !242)
!256 = !DILocation(line: 138, column: 12, scope: !242)
!257 = !DILocation(line: 138, column: 2, scope: !242)
!258 = !DILocation(line: 138, column: 10, scope: !242)
!259 = !DILocation(line: 139, column: 19, scope: !242)
!260 = !DILocation(line: 139, column: 12, scope: !242)
!261 = !DILocation(line: 139, column: 2, scope: !242)
!262 = !DILocation(line: 139, column: 10, scope: !242)
!263 = !DILocation(line: 141, column: 19, scope: !242)
!264 = !DILocation(line: 141, column: 12, scope: !242)
!265 = !DILocation(line: 141, column: 2, scope: !242)
!266 = !DILocation(line: 141, column: 10, scope: !242)
!267 = !DILocation(line: 142, column: 19, scope: !242)
!268 = !DILocation(line: 142, column: 12, scope: !242)
!269 = !DILocation(line: 142, column: 2, scope: !242)
!270 = !DILocation(line: 142, column: 10, scope: !242)
!271 = !DILocation(line: 143, column: 19, scope: !242)
!272 = !DILocation(line: 143, column: 12, scope: !242)
!273 = !DILocation(line: 143, column: 2, scope: !242)
!274 = !DILocation(line: 143, column: 10, scope: !242)
!275 = !DILocation(line: 145, column: 19, scope: !242)
!276 = !DILocation(line: 145, column: 12, scope: !242)
!277 = !DILocation(line: 145, column: 2, scope: !242)
!278 = !DILocation(line: 145, column: 10, scope: !242)
!279 = !DILocation(line: 146, column: 19, scope: !242)
!280 = !DILocation(line: 146, column: 12, scope: !242)
!281 = !DILocation(line: 146, column: 2, scope: !242)
!282 = !DILocation(line: 146, column: 10, scope: !242)
!283 = !DILocation(line: 147, column: 19, scope: !242)
!284 = !DILocation(line: 147, column: 12, scope: !242)
!285 = !DILocation(line: 147, column: 2, scope: !242)
!286 = !DILocation(line: 147, column: 10, scope: !242)
!287 = !DILocation(line: 148, column: 1, scope: !242)
!288 = distinct !DISubprogram(name: "swap_m3m3", scope: !1, file: !1, line: 150, type: !137, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!289 = !DILocalVariable(name: "m1", arg: 1, scope: !288, file: !1, line: 150, type: !35)
!290 = !DILocation(line: 150, column: 22, scope: !288)
!291 = !DILocalVariable(name: "m2", arg: 2, scope: !288, file: !1, line: 150, type: !35)
!292 = !DILocation(line: 150, column: 38, scope: !288)
!293 = !DILocalVariable(name: "t", scope: !288, file: !1, line: 152, type: !4)
!294 = !DILocation(line: 152, column: 8, scope: !288)
!295 = !DILocalVariable(name: "i", scope: !288, file: !1, line: 153, type: !296)
!296 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!297 = !DILocation(line: 153, column: 6, scope: !288)
!298 = !DILocalVariable(name: "j", scope: !288, file: !1, line: 153, type: !296)
!299 = !DILocation(line: 153, column: 9, scope: !288)
!300 = !DILocation(line: 155, column: 9, scope: !301)
!301 = distinct !DILexicalBlock(scope: !288, file: !1, line: 155, column: 2)
!302 = !DILocation(line: 155, column: 7, scope: !301)
!303 = !DILocation(line: 155, column: 14, scope: !304)
!304 = distinct !DILexicalBlock(scope: !301, file: !1, line: 155, column: 2)
!305 = !DILocation(line: 155, column: 16, scope: !304)
!306 = !DILocation(line: 155, column: 2, scope: !301)
!307 = !DILocation(line: 156, column: 10, scope: !308)
!308 = distinct !DILexicalBlock(scope: !309, file: !1, line: 156, column: 3)
!309 = distinct !DILexicalBlock(scope: !304, file: !1, line: 155, column: 26)
!310 = !DILocation(line: 156, column: 8, scope: !308)
!311 = !DILocation(line: 156, column: 15, scope: !312)
!312 = distinct !DILexicalBlock(scope: !308, file: !1, line: 156, column: 3)
!313 = !DILocation(line: 156, column: 17, scope: !312)
!314 = !DILocation(line: 156, column: 3, scope: !308)
!315 = !DILocation(line: 157, column: 8, scope: !316)
!316 = distinct !DILexicalBlock(scope: !312, file: !1, line: 156, column: 27)
!317 = !DILocation(line: 157, column: 11, scope: !316)
!318 = !DILocation(line: 157, column: 14, scope: !316)
!319 = !DILocation(line: 157, column: 6, scope: !316)
!320 = !DILocation(line: 158, column: 15, scope: !316)
!321 = !DILocation(line: 158, column: 18, scope: !316)
!322 = !DILocation(line: 158, column: 21, scope: !316)
!323 = !DILocation(line: 158, column: 4, scope: !316)
!324 = !DILocation(line: 158, column: 7, scope: !316)
!325 = !DILocation(line: 158, column: 10, scope: !316)
!326 = !DILocation(line: 158, column: 13, scope: !316)
!327 = !DILocation(line: 159, column: 15, scope: !316)
!328 = !DILocation(line: 159, column: 4, scope: !316)
!329 = !DILocation(line: 159, column: 7, scope: !316)
!330 = !DILocation(line: 159, column: 10, scope: !316)
!331 = !DILocation(line: 159, column: 13, scope: !316)
!332 = !DILocation(line: 160, column: 3, scope: !316)
!333 = !DILocation(line: 156, column: 23, scope: !312)
!334 = !DILocation(line: 156, column: 3, scope: !312)
!335 = distinct !{!335, !314, !336}
!336 = !DILocation(line: 160, column: 3, scope: !308)
!337 = !DILocation(line: 161, column: 2, scope: !309)
!338 = !DILocation(line: 155, column: 22, scope: !304)
!339 = !DILocation(line: 155, column: 2, scope: !304)
!340 = distinct !{!340, !306, !341}
!341 = !DILocation(line: 161, column: 2, scope: !301)
!342 = !DILocation(line: 162, column: 1, scope: !288)
!343 = distinct !DISubprogram(name: "swap_m4m4", scope: !1, file: !1, line: 164, type: !148, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!344 = !DILocalVariable(name: "m1", arg: 1, scope: !343, file: !1, line: 164, type: !47)
!345 = !DILocation(line: 164, column: 22, scope: !343)
!346 = !DILocalVariable(name: "m2", arg: 2, scope: !343, file: !1, line: 164, type: !47)
!347 = !DILocation(line: 164, column: 38, scope: !343)
!348 = !DILocalVariable(name: "t", scope: !343, file: !1, line: 166, type: !4)
!349 = !DILocation(line: 166, column: 8, scope: !343)
!350 = !DILocalVariable(name: "i", scope: !343, file: !1, line: 167, type: !296)
!351 = !DILocation(line: 167, column: 6, scope: !343)
!352 = !DILocalVariable(name: "j", scope: !343, file: !1, line: 167, type: !296)
!353 = !DILocation(line: 167, column: 9, scope: !343)
!354 = !DILocation(line: 169, column: 9, scope: !355)
!355 = distinct !DILexicalBlock(scope: !343, file: !1, line: 169, column: 2)
!356 = !DILocation(line: 169, column: 7, scope: !355)
!357 = !DILocation(line: 169, column: 14, scope: !358)
!358 = distinct !DILexicalBlock(scope: !355, file: !1, line: 169, column: 2)
!359 = !DILocation(line: 169, column: 16, scope: !358)
!360 = !DILocation(line: 169, column: 2, scope: !355)
!361 = !DILocation(line: 170, column: 10, scope: !362)
!362 = distinct !DILexicalBlock(scope: !363, file: !1, line: 170, column: 3)
!363 = distinct !DILexicalBlock(scope: !358, file: !1, line: 169, column: 26)
!364 = !DILocation(line: 170, column: 8, scope: !362)
!365 = !DILocation(line: 170, column: 15, scope: !366)
!366 = distinct !DILexicalBlock(scope: !362, file: !1, line: 170, column: 3)
!367 = !DILocation(line: 170, column: 17, scope: !366)
!368 = !DILocation(line: 170, column: 3, scope: !362)
!369 = !DILocation(line: 171, column: 8, scope: !370)
!370 = distinct !DILexicalBlock(scope: !366, file: !1, line: 170, column: 27)
!371 = !DILocation(line: 171, column: 11, scope: !370)
!372 = !DILocation(line: 171, column: 14, scope: !370)
!373 = !DILocation(line: 171, column: 6, scope: !370)
!374 = !DILocation(line: 172, column: 15, scope: !370)
!375 = !DILocation(line: 172, column: 18, scope: !370)
!376 = !DILocation(line: 172, column: 21, scope: !370)
!377 = !DILocation(line: 172, column: 4, scope: !370)
!378 = !DILocation(line: 172, column: 7, scope: !370)
!379 = !DILocation(line: 172, column: 10, scope: !370)
!380 = !DILocation(line: 172, column: 13, scope: !370)
!381 = !DILocation(line: 173, column: 15, scope: !370)
!382 = !DILocation(line: 173, column: 4, scope: !370)
!383 = !DILocation(line: 173, column: 7, scope: !370)
!384 = !DILocation(line: 173, column: 10, scope: !370)
!385 = !DILocation(line: 173, column: 13, scope: !370)
!386 = !DILocation(line: 174, column: 3, scope: !370)
!387 = !DILocation(line: 170, column: 23, scope: !366)
!388 = !DILocation(line: 170, column: 3, scope: !366)
!389 = distinct !{!389, !368, !390}
!390 = !DILocation(line: 174, column: 3, scope: !362)
!391 = !DILocation(line: 175, column: 2, scope: !363)
!392 = !DILocation(line: 169, column: 22, scope: !358)
!393 = !DILocation(line: 169, column: 2, scope: !358)
!394 = distinct !{!394, !360, !395}
!395 = !DILocation(line: 175, column: 2, scope: !355)
!396 = !DILocation(line: 176, column: 1, scope: !343)
!397 = distinct !DISubprogram(name: "mul_m4_m4m4", scope: !1, file: !1, line: 180, type: !398, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!398 = !DISubroutineType(types: !399)
!399 = !{null, !47, !47, !47}
!400 = !DILocalVariable(name: "m1", arg: 1, scope: !397, file: !1, line: 180, type: !47)
!401 = !DILocation(line: 180, column: 24, scope: !397)
!402 = !DILocalVariable(name: "m3_", arg: 2, scope: !397, file: !1, line: 180, type: !47)
!403 = !DILocation(line: 180, column: 40, scope: !397)
!404 = !DILocalVariable(name: "m2_", arg: 3, scope: !397, file: !1, line: 180, type: !47)
!405 = !DILocation(line: 180, column: 57, scope: !397)
!406 = !DILocalVariable(name: "m2", scope: !397, file: !1, line: 182, type: !12)
!407 = !DILocation(line: 182, column: 8, scope: !397)
!408 = !DILocalVariable(name: "m3", scope: !397, file: !1, line: 182, type: !12)
!409 = !DILocation(line: 182, column: 18, scope: !397)
!410 = !DILocation(line: 185, column: 13, scope: !397)
!411 = !DILocation(line: 185, column: 17, scope: !397)
!412 = !DILocation(line: 185, column: 2, scope: !397)
!413 = !DILocation(line: 186, column: 13, scope: !397)
!414 = !DILocation(line: 186, column: 17, scope: !397)
!415 = !DILocation(line: 186, column: 2, scope: !397)
!416 = !DILocation(line: 189, column: 13, scope: !397)
!417 = !DILocation(line: 189, column: 24, scope: !397)
!418 = !DILocation(line: 189, column: 22, scope: !397)
!419 = !DILocation(line: 189, column: 35, scope: !397)
!420 = !DILocation(line: 189, column: 46, scope: !397)
!421 = !DILocation(line: 189, column: 44, scope: !397)
!422 = !DILocation(line: 189, column: 33, scope: !397)
!423 = !DILocation(line: 189, column: 57, scope: !397)
!424 = !DILocation(line: 189, column: 68, scope: !397)
!425 = !DILocation(line: 189, column: 66, scope: !397)
!426 = !DILocation(line: 189, column: 55, scope: !397)
!427 = !DILocation(line: 189, column: 79, scope: !397)
!428 = !DILocation(line: 189, column: 90, scope: !397)
!429 = !DILocation(line: 189, column: 88, scope: !397)
!430 = !DILocation(line: 189, column: 77, scope: !397)
!431 = !DILocation(line: 189, column: 2, scope: !397)
!432 = !DILocation(line: 189, column: 11, scope: !397)
!433 = !DILocation(line: 190, column: 13, scope: !397)
!434 = !DILocation(line: 190, column: 24, scope: !397)
!435 = !DILocation(line: 190, column: 22, scope: !397)
!436 = !DILocation(line: 190, column: 35, scope: !397)
!437 = !DILocation(line: 190, column: 46, scope: !397)
!438 = !DILocation(line: 190, column: 44, scope: !397)
!439 = !DILocation(line: 190, column: 33, scope: !397)
!440 = !DILocation(line: 190, column: 57, scope: !397)
!441 = !DILocation(line: 190, column: 68, scope: !397)
!442 = !DILocation(line: 190, column: 66, scope: !397)
!443 = !DILocation(line: 190, column: 55, scope: !397)
!444 = !DILocation(line: 190, column: 79, scope: !397)
!445 = !DILocation(line: 190, column: 90, scope: !397)
!446 = !DILocation(line: 190, column: 88, scope: !397)
!447 = !DILocation(line: 190, column: 77, scope: !397)
!448 = !DILocation(line: 190, column: 2, scope: !397)
!449 = !DILocation(line: 190, column: 11, scope: !397)
!450 = !DILocation(line: 191, column: 13, scope: !397)
!451 = !DILocation(line: 191, column: 24, scope: !397)
!452 = !DILocation(line: 191, column: 22, scope: !397)
!453 = !DILocation(line: 191, column: 35, scope: !397)
!454 = !DILocation(line: 191, column: 46, scope: !397)
!455 = !DILocation(line: 191, column: 44, scope: !397)
!456 = !DILocation(line: 191, column: 33, scope: !397)
!457 = !DILocation(line: 191, column: 57, scope: !397)
!458 = !DILocation(line: 191, column: 68, scope: !397)
!459 = !DILocation(line: 191, column: 66, scope: !397)
!460 = !DILocation(line: 191, column: 55, scope: !397)
!461 = !DILocation(line: 191, column: 79, scope: !397)
!462 = !DILocation(line: 191, column: 90, scope: !397)
!463 = !DILocation(line: 191, column: 88, scope: !397)
!464 = !DILocation(line: 191, column: 77, scope: !397)
!465 = !DILocation(line: 191, column: 2, scope: !397)
!466 = !DILocation(line: 191, column: 11, scope: !397)
!467 = !DILocation(line: 192, column: 13, scope: !397)
!468 = !DILocation(line: 192, column: 24, scope: !397)
!469 = !DILocation(line: 192, column: 22, scope: !397)
!470 = !DILocation(line: 192, column: 35, scope: !397)
!471 = !DILocation(line: 192, column: 46, scope: !397)
!472 = !DILocation(line: 192, column: 44, scope: !397)
!473 = !DILocation(line: 192, column: 33, scope: !397)
!474 = !DILocation(line: 192, column: 57, scope: !397)
!475 = !DILocation(line: 192, column: 68, scope: !397)
!476 = !DILocation(line: 192, column: 66, scope: !397)
!477 = !DILocation(line: 192, column: 55, scope: !397)
!478 = !DILocation(line: 192, column: 79, scope: !397)
!479 = !DILocation(line: 192, column: 90, scope: !397)
!480 = !DILocation(line: 192, column: 88, scope: !397)
!481 = !DILocation(line: 192, column: 77, scope: !397)
!482 = !DILocation(line: 192, column: 2, scope: !397)
!483 = !DILocation(line: 192, column: 11, scope: !397)
!484 = !DILocation(line: 194, column: 13, scope: !397)
!485 = !DILocation(line: 194, column: 24, scope: !397)
!486 = !DILocation(line: 194, column: 22, scope: !397)
!487 = !DILocation(line: 194, column: 35, scope: !397)
!488 = !DILocation(line: 194, column: 46, scope: !397)
!489 = !DILocation(line: 194, column: 44, scope: !397)
!490 = !DILocation(line: 194, column: 33, scope: !397)
!491 = !DILocation(line: 194, column: 57, scope: !397)
!492 = !DILocation(line: 194, column: 68, scope: !397)
!493 = !DILocation(line: 194, column: 66, scope: !397)
!494 = !DILocation(line: 194, column: 55, scope: !397)
!495 = !DILocation(line: 194, column: 79, scope: !397)
!496 = !DILocation(line: 194, column: 90, scope: !397)
!497 = !DILocation(line: 194, column: 88, scope: !397)
!498 = !DILocation(line: 194, column: 77, scope: !397)
!499 = !DILocation(line: 194, column: 2, scope: !397)
!500 = !DILocation(line: 194, column: 11, scope: !397)
!501 = !DILocation(line: 195, column: 13, scope: !397)
!502 = !DILocation(line: 195, column: 24, scope: !397)
!503 = !DILocation(line: 195, column: 22, scope: !397)
!504 = !DILocation(line: 195, column: 35, scope: !397)
!505 = !DILocation(line: 195, column: 46, scope: !397)
!506 = !DILocation(line: 195, column: 44, scope: !397)
!507 = !DILocation(line: 195, column: 33, scope: !397)
!508 = !DILocation(line: 195, column: 57, scope: !397)
!509 = !DILocation(line: 195, column: 68, scope: !397)
!510 = !DILocation(line: 195, column: 66, scope: !397)
!511 = !DILocation(line: 195, column: 55, scope: !397)
!512 = !DILocation(line: 195, column: 79, scope: !397)
!513 = !DILocation(line: 195, column: 90, scope: !397)
!514 = !DILocation(line: 195, column: 88, scope: !397)
!515 = !DILocation(line: 195, column: 77, scope: !397)
!516 = !DILocation(line: 195, column: 2, scope: !397)
!517 = !DILocation(line: 195, column: 11, scope: !397)
!518 = !DILocation(line: 196, column: 13, scope: !397)
!519 = !DILocation(line: 196, column: 24, scope: !397)
!520 = !DILocation(line: 196, column: 22, scope: !397)
!521 = !DILocation(line: 196, column: 35, scope: !397)
!522 = !DILocation(line: 196, column: 46, scope: !397)
!523 = !DILocation(line: 196, column: 44, scope: !397)
!524 = !DILocation(line: 196, column: 33, scope: !397)
!525 = !DILocation(line: 196, column: 57, scope: !397)
!526 = !DILocation(line: 196, column: 68, scope: !397)
!527 = !DILocation(line: 196, column: 66, scope: !397)
!528 = !DILocation(line: 196, column: 55, scope: !397)
!529 = !DILocation(line: 196, column: 79, scope: !397)
!530 = !DILocation(line: 196, column: 90, scope: !397)
!531 = !DILocation(line: 196, column: 88, scope: !397)
!532 = !DILocation(line: 196, column: 77, scope: !397)
!533 = !DILocation(line: 196, column: 2, scope: !397)
!534 = !DILocation(line: 196, column: 11, scope: !397)
!535 = !DILocation(line: 197, column: 13, scope: !397)
!536 = !DILocation(line: 197, column: 24, scope: !397)
!537 = !DILocation(line: 197, column: 22, scope: !397)
!538 = !DILocation(line: 197, column: 35, scope: !397)
!539 = !DILocation(line: 197, column: 46, scope: !397)
!540 = !DILocation(line: 197, column: 44, scope: !397)
!541 = !DILocation(line: 197, column: 33, scope: !397)
!542 = !DILocation(line: 197, column: 57, scope: !397)
!543 = !DILocation(line: 197, column: 68, scope: !397)
!544 = !DILocation(line: 197, column: 66, scope: !397)
!545 = !DILocation(line: 197, column: 55, scope: !397)
!546 = !DILocation(line: 197, column: 79, scope: !397)
!547 = !DILocation(line: 197, column: 90, scope: !397)
!548 = !DILocation(line: 197, column: 88, scope: !397)
!549 = !DILocation(line: 197, column: 77, scope: !397)
!550 = !DILocation(line: 197, column: 2, scope: !397)
!551 = !DILocation(line: 197, column: 11, scope: !397)
!552 = !DILocation(line: 199, column: 13, scope: !397)
!553 = !DILocation(line: 199, column: 24, scope: !397)
!554 = !DILocation(line: 199, column: 22, scope: !397)
!555 = !DILocation(line: 199, column: 35, scope: !397)
!556 = !DILocation(line: 199, column: 46, scope: !397)
!557 = !DILocation(line: 199, column: 44, scope: !397)
!558 = !DILocation(line: 199, column: 33, scope: !397)
!559 = !DILocation(line: 199, column: 57, scope: !397)
!560 = !DILocation(line: 199, column: 68, scope: !397)
!561 = !DILocation(line: 199, column: 66, scope: !397)
!562 = !DILocation(line: 199, column: 55, scope: !397)
!563 = !DILocation(line: 199, column: 79, scope: !397)
!564 = !DILocation(line: 199, column: 90, scope: !397)
!565 = !DILocation(line: 199, column: 88, scope: !397)
!566 = !DILocation(line: 199, column: 77, scope: !397)
!567 = !DILocation(line: 199, column: 2, scope: !397)
!568 = !DILocation(line: 199, column: 11, scope: !397)
!569 = !DILocation(line: 200, column: 13, scope: !397)
!570 = !DILocation(line: 200, column: 24, scope: !397)
!571 = !DILocation(line: 200, column: 22, scope: !397)
!572 = !DILocation(line: 200, column: 35, scope: !397)
!573 = !DILocation(line: 200, column: 46, scope: !397)
!574 = !DILocation(line: 200, column: 44, scope: !397)
!575 = !DILocation(line: 200, column: 33, scope: !397)
!576 = !DILocation(line: 200, column: 57, scope: !397)
!577 = !DILocation(line: 200, column: 68, scope: !397)
!578 = !DILocation(line: 200, column: 66, scope: !397)
!579 = !DILocation(line: 200, column: 55, scope: !397)
!580 = !DILocation(line: 200, column: 79, scope: !397)
!581 = !DILocation(line: 200, column: 90, scope: !397)
!582 = !DILocation(line: 200, column: 88, scope: !397)
!583 = !DILocation(line: 200, column: 77, scope: !397)
!584 = !DILocation(line: 200, column: 2, scope: !397)
!585 = !DILocation(line: 200, column: 11, scope: !397)
!586 = !DILocation(line: 201, column: 13, scope: !397)
!587 = !DILocation(line: 201, column: 24, scope: !397)
!588 = !DILocation(line: 201, column: 22, scope: !397)
!589 = !DILocation(line: 201, column: 35, scope: !397)
!590 = !DILocation(line: 201, column: 46, scope: !397)
!591 = !DILocation(line: 201, column: 44, scope: !397)
!592 = !DILocation(line: 201, column: 33, scope: !397)
!593 = !DILocation(line: 201, column: 57, scope: !397)
!594 = !DILocation(line: 201, column: 68, scope: !397)
!595 = !DILocation(line: 201, column: 66, scope: !397)
!596 = !DILocation(line: 201, column: 55, scope: !397)
!597 = !DILocation(line: 201, column: 79, scope: !397)
!598 = !DILocation(line: 201, column: 90, scope: !397)
!599 = !DILocation(line: 201, column: 88, scope: !397)
!600 = !DILocation(line: 201, column: 77, scope: !397)
!601 = !DILocation(line: 201, column: 2, scope: !397)
!602 = !DILocation(line: 201, column: 11, scope: !397)
!603 = !DILocation(line: 202, column: 13, scope: !397)
!604 = !DILocation(line: 202, column: 24, scope: !397)
!605 = !DILocation(line: 202, column: 22, scope: !397)
!606 = !DILocation(line: 202, column: 35, scope: !397)
!607 = !DILocation(line: 202, column: 46, scope: !397)
!608 = !DILocation(line: 202, column: 44, scope: !397)
!609 = !DILocation(line: 202, column: 33, scope: !397)
!610 = !DILocation(line: 202, column: 57, scope: !397)
!611 = !DILocation(line: 202, column: 68, scope: !397)
!612 = !DILocation(line: 202, column: 66, scope: !397)
!613 = !DILocation(line: 202, column: 55, scope: !397)
!614 = !DILocation(line: 202, column: 79, scope: !397)
!615 = !DILocation(line: 202, column: 90, scope: !397)
!616 = !DILocation(line: 202, column: 88, scope: !397)
!617 = !DILocation(line: 202, column: 77, scope: !397)
!618 = !DILocation(line: 202, column: 2, scope: !397)
!619 = !DILocation(line: 202, column: 11, scope: !397)
!620 = !DILocation(line: 204, column: 13, scope: !397)
!621 = !DILocation(line: 204, column: 24, scope: !397)
!622 = !DILocation(line: 204, column: 22, scope: !397)
!623 = !DILocation(line: 204, column: 35, scope: !397)
!624 = !DILocation(line: 204, column: 46, scope: !397)
!625 = !DILocation(line: 204, column: 44, scope: !397)
!626 = !DILocation(line: 204, column: 33, scope: !397)
!627 = !DILocation(line: 204, column: 57, scope: !397)
!628 = !DILocation(line: 204, column: 68, scope: !397)
!629 = !DILocation(line: 204, column: 66, scope: !397)
!630 = !DILocation(line: 204, column: 55, scope: !397)
!631 = !DILocation(line: 204, column: 79, scope: !397)
!632 = !DILocation(line: 204, column: 90, scope: !397)
!633 = !DILocation(line: 204, column: 88, scope: !397)
!634 = !DILocation(line: 204, column: 77, scope: !397)
!635 = !DILocation(line: 204, column: 2, scope: !397)
!636 = !DILocation(line: 204, column: 11, scope: !397)
!637 = !DILocation(line: 205, column: 13, scope: !397)
!638 = !DILocation(line: 205, column: 24, scope: !397)
!639 = !DILocation(line: 205, column: 22, scope: !397)
!640 = !DILocation(line: 205, column: 35, scope: !397)
!641 = !DILocation(line: 205, column: 46, scope: !397)
!642 = !DILocation(line: 205, column: 44, scope: !397)
!643 = !DILocation(line: 205, column: 33, scope: !397)
!644 = !DILocation(line: 205, column: 57, scope: !397)
!645 = !DILocation(line: 205, column: 68, scope: !397)
!646 = !DILocation(line: 205, column: 66, scope: !397)
!647 = !DILocation(line: 205, column: 55, scope: !397)
!648 = !DILocation(line: 205, column: 79, scope: !397)
!649 = !DILocation(line: 205, column: 90, scope: !397)
!650 = !DILocation(line: 205, column: 88, scope: !397)
!651 = !DILocation(line: 205, column: 77, scope: !397)
!652 = !DILocation(line: 205, column: 2, scope: !397)
!653 = !DILocation(line: 205, column: 11, scope: !397)
!654 = !DILocation(line: 206, column: 13, scope: !397)
!655 = !DILocation(line: 206, column: 24, scope: !397)
!656 = !DILocation(line: 206, column: 22, scope: !397)
!657 = !DILocation(line: 206, column: 35, scope: !397)
!658 = !DILocation(line: 206, column: 46, scope: !397)
!659 = !DILocation(line: 206, column: 44, scope: !397)
!660 = !DILocation(line: 206, column: 33, scope: !397)
!661 = !DILocation(line: 206, column: 57, scope: !397)
!662 = !DILocation(line: 206, column: 68, scope: !397)
!663 = !DILocation(line: 206, column: 66, scope: !397)
!664 = !DILocation(line: 206, column: 55, scope: !397)
!665 = !DILocation(line: 206, column: 79, scope: !397)
!666 = !DILocation(line: 206, column: 90, scope: !397)
!667 = !DILocation(line: 206, column: 88, scope: !397)
!668 = !DILocation(line: 206, column: 77, scope: !397)
!669 = !DILocation(line: 206, column: 2, scope: !397)
!670 = !DILocation(line: 206, column: 11, scope: !397)
!671 = !DILocation(line: 207, column: 13, scope: !397)
!672 = !DILocation(line: 207, column: 24, scope: !397)
!673 = !DILocation(line: 207, column: 22, scope: !397)
!674 = !DILocation(line: 207, column: 35, scope: !397)
!675 = !DILocation(line: 207, column: 46, scope: !397)
!676 = !DILocation(line: 207, column: 44, scope: !397)
!677 = !DILocation(line: 207, column: 33, scope: !397)
!678 = !DILocation(line: 207, column: 57, scope: !397)
!679 = !DILocation(line: 207, column: 68, scope: !397)
!680 = !DILocation(line: 207, column: 66, scope: !397)
!681 = !DILocation(line: 207, column: 55, scope: !397)
!682 = !DILocation(line: 207, column: 79, scope: !397)
!683 = !DILocation(line: 207, column: 90, scope: !397)
!684 = !DILocation(line: 207, column: 88, scope: !397)
!685 = !DILocation(line: 207, column: 77, scope: !397)
!686 = !DILocation(line: 207, column: 2, scope: !397)
!687 = !DILocation(line: 207, column: 11, scope: !397)
!688 = !DILocation(line: 209, column: 1, scope: !397)
!689 = distinct !DISubprogram(name: "mul_m3_m3m3", scope: !1, file: !1, line: 211, type: !690, scopeLine: 212, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!690 = !DISubroutineType(types: !691)
!691 = !{null, !35, !35, !35}
!692 = !DILocalVariable(name: "m1", arg: 1, scope: !689, file: !1, line: 211, type: !35)
!693 = !DILocation(line: 211, column: 24, scope: !689)
!694 = !DILocalVariable(name: "m3_", arg: 2, scope: !689, file: !1, line: 211, type: !35)
!695 = !DILocation(line: 211, column: 40, scope: !689)
!696 = !DILocalVariable(name: "m2_", arg: 3, scope: !689, file: !1, line: 211, type: !35)
!697 = !DILocation(line: 211, column: 57, scope: !689)
!698 = !DILocalVariable(name: "m2", scope: !689, file: !1, line: 213, type: !699)
!699 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 288, elements: !700)
!700 = !{!38, !38}
!701 = !DILocation(line: 213, column: 8, scope: !689)
!702 = !DILocalVariable(name: "m3", scope: !689, file: !1, line: 213, type: !699)
!703 = !DILocation(line: 213, column: 18, scope: !689)
!704 = !DILocation(line: 216, column: 13, scope: !689)
!705 = !DILocation(line: 216, column: 17, scope: !689)
!706 = !DILocation(line: 216, column: 2, scope: !689)
!707 = !DILocation(line: 217, column: 13, scope: !689)
!708 = !DILocation(line: 217, column: 17, scope: !689)
!709 = !DILocation(line: 217, column: 2, scope: !689)
!710 = !DILocation(line: 220, column: 13, scope: !689)
!711 = !DILocation(line: 220, column: 24, scope: !689)
!712 = !DILocation(line: 220, column: 22, scope: !689)
!713 = !DILocation(line: 220, column: 35, scope: !689)
!714 = !DILocation(line: 220, column: 46, scope: !689)
!715 = !DILocation(line: 220, column: 44, scope: !689)
!716 = !DILocation(line: 220, column: 33, scope: !689)
!717 = !DILocation(line: 220, column: 57, scope: !689)
!718 = !DILocation(line: 220, column: 68, scope: !689)
!719 = !DILocation(line: 220, column: 66, scope: !689)
!720 = !DILocation(line: 220, column: 55, scope: !689)
!721 = !DILocation(line: 220, column: 2, scope: !689)
!722 = !DILocation(line: 220, column: 11, scope: !689)
!723 = !DILocation(line: 221, column: 13, scope: !689)
!724 = !DILocation(line: 221, column: 24, scope: !689)
!725 = !DILocation(line: 221, column: 22, scope: !689)
!726 = !DILocation(line: 221, column: 35, scope: !689)
!727 = !DILocation(line: 221, column: 46, scope: !689)
!728 = !DILocation(line: 221, column: 44, scope: !689)
!729 = !DILocation(line: 221, column: 33, scope: !689)
!730 = !DILocation(line: 221, column: 57, scope: !689)
!731 = !DILocation(line: 221, column: 68, scope: !689)
!732 = !DILocation(line: 221, column: 66, scope: !689)
!733 = !DILocation(line: 221, column: 55, scope: !689)
!734 = !DILocation(line: 221, column: 2, scope: !689)
!735 = !DILocation(line: 221, column: 11, scope: !689)
!736 = !DILocation(line: 222, column: 13, scope: !689)
!737 = !DILocation(line: 222, column: 24, scope: !689)
!738 = !DILocation(line: 222, column: 22, scope: !689)
!739 = !DILocation(line: 222, column: 35, scope: !689)
!740 = !DILocation(line: 222, column: 46, scope: !689)
!741 = !DILocation(line: 222, column: 44, scope: !689)
!742 = !DILocation(line: 222, column: 33, scope: !689)
!743 = !DILocation(line: 222, column: 57, scope: !689)
!744 = !DILocation(line: 222, column: 68, scope: !689)
!745 = !DILocation(line: 222, column: 66, scope: !689)
!746 = !DILocation(line: 222, column: 55, scope: !689)
!747 = !DILocation(line: 222, column: 2, scope: !689)
!748 = !DILocation(line: 222, column: 11, scope: !689)
!749 = !DILocation(line: 224, column: 13, scope: !689)
!750 = !DILocation(line: 224, column: 24, scope: !689)
!751 = !DILocation(line: 224, column: 22, scope: !689)
!752 = !DILocation(line: 224, column: 35, scope: !689)
!753 = !DILocation(line: 224, column: 46, scope: !689)
!754 = !DILocation(line: 224, column: 44, scope: !689)
!755 = !DILocation(line: 224, column: 33, scope: !689)
!756 = !DILocation(line: 224, column: 57, scope: !689)
!757 = !DILocation(line: 224, column: 68, scope: !689)
!758 = !DILocation(line: 224, column: 66, scope: !689)
!759 = !DILocation(line: 224, column: 55, scope: !689)
!760 = !DILocation(line: 224, column: 2, scope: !689)
!761 = !DILocation(line: 224, column: 11, scope: !689)
!762 = !DILocation(line: 225, column: 13, scope: !689)
!763 = !DILocation(line: 225, column: 24, scope: !689)
!764 = !DILocation(line: 225, column: 22, scope: !689)
!765 = !DILocation(line: 225, column: 35, scope: !689)
!766 = !DILocation(line: 225, column: 46, scope: !689)
!767 = !DILocation(line: 225, column: 44, scope: !689)
!768 = !DILocation(line: 225, column: 33, scope: !689)
!769 = !DILocation(line: 225, column: 57, scope: !689)
!770 = !DILocation(line: 225, column: 68, scope: !689)
!771 = !DILocation(line: 225, column: 66, scope: !689)
!772 = !DILocation(line: 225, column: 55, scope: !689)
!773 = !DILocation(line: 225, column: 2, scope: !689)
!774 = !DILocation(line: 225, column: 11, scope: !689)
!775 = !DILocation(line: 226, column: 13, scope: !689)
!776 = !DILocation(line: 226, column: 24, scope: !689)
!777 = !DILocation(line: 226, column: 22, scope: !689)
!778 = !DILocation(line: 226, column: 35, scope: !689)
!779 = !DILocation(line: 226, column: 46, scope: !689)
!780 = !DILocation(line: 226, column: 44, scope: !689)
!781 = !DILocation(line: 226, column: 33, scope: !689)
!782 = !DILocation(line: 226, column: 57, scope: !689)
!783 = !DILocation(line: 226, column: 68, scope: !689)
!784 = !DILocation(line: 226, column: 66, scope: !689)
!785 = !DILocation(line: 226, column: 55, scope: !689)
!786 = !DILocation(line: 226, column: 2, scope: !689)
!787 = !DILocation(line: 226, column: 11, scope: !689)
!788 = !DILocation(line: 228, column: 13, scope: !689)
!789 = !DILocation(line: 228, column: 24, scope: !689)
!790 = !DILocation(line: 228, column: 22, scope: !689)
!791 = !DILocation(line: 228, column: 35, scope: !689)
!792 = !DILocation(line: 228, column: 46, scope: !689)
!793 = !DILocation(line: 228, column: 44, scope: !689)
!794 = !DILocation(line: 228, column: 33, scope: !689)
!795 = !DILocation(line: 228, column: 57, scope: !689)
!796 = !DILocation(line: 228, column: 68, scope: !689)
!797 = !DILocation(line: 228, column: 66, scope: !689)
!798 = !DILocation(line: 228, column: 55, scope: !689)
!799 = !DILocation(line: 228, column: 2, scope: !689)
!800 = !DILocation(line: 228, column: 11, scope: !689)
!801 = !DILocation(line: 229, column: 13, scope: !689)
!802 = !DILocation(line: 229, column: 24, scope: !689)
!803 = !DILocation(line: 229, column: 22, scope: !689)
!804 = !DILocation(line: 229, column: 35, scope: !689)
!805 = !DILocation(line: 229, column: 46, scope: !689)
!806 = !DILocation(line: 229, column: 44, scope: !689)
!807 = !DILocation(line: 229, column: 33, scope: !689)
!808 = !DILocation(line: 229, column: 57, scope: !689)
!809 = !DILocation(line: 229, column: 68, scope: !689)
!810 = !DILocation(line: 229, column: 66, scope: !689)
!811 = !DILocation(line: 229, column: 55, scope: !689)
!812 = !DILocation(line: 229, column: 2, scope: !689)
!813 = !DILocation(line: 229, column: 11, scope: !689)
!814 = !DILocation(line: 230, column: 13, scope: !689)
!815 = !DILocation(line: 230, column: 24, scope: !689)
!816 = !DILocation(line: 230, column: 22, scope: !689)
!817 = !DILocation(line: 230, column: 35, scope: !689)
!818 = !DILocation(line: 230, column: 46, scope: !689)
!819 = !DILocation(line: 230, column: 44, scope: !689)
!820 = !DILocation(line: 230, column: 33, scope: !689)
!821 = !DILocation(line: 230, column: 57, scope: !689)
!822 = !DILocation(line: 230, column: 68, scope: !689)
!823 = !DILocation(line: 230, column: 66, scope: !689)
!824 = !DILocation(line: 230, column: 55, scope: !689)
!825 = !DILocation(line: 230, column: 2, scope: !689)
!826 = !DILocation(line: 230, column: 11, scope: !689)
!827 = !DILocation(line: 231, column: 1, scope: !689)
!828 = distinct !DISubprogram(name: "mul_m4_m4m3", scope: !1, file: !1, line: 233, type: !829, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!829 = !DISubroutineType(types: !830)
!830 = !{null, !47, !47, !35}
!831 = !DILocalVariable(name: "m1", arg: 1, scope: !828, file: !1, line: 233, type: !47)
!832 = !DILocation(line: 233, column: 24, scope: !828)
!833 = !DILocalVariable(name: "m3_", arg: 2, scope: !828, file: !1, line: 233, type: !47)
!834 = !DILocation(line: 233, column: 40, scope: !828)
!835 = !DILocalVariable(name: "m2_", arg: 3, scope: !828, file: !1, line: 233, type: !35)
!836 = !DILocation(line: 233, column: 57, scope: !828)
!837 = !DILocalVariable(name: "m2", scope: !828, file: !1, line: 235, type: !699)
!838 = !DILocation(line: 235, column: 8, scope: !828)
!839 = !DILocalVariable(name: "m3", scope: !828, file: !1, line: 235, type: !12)
!840 = !DILocation(line: 235, column: 18, scope: !828)
!841 = !DILocation(line: 238, column: 13, scope: !828)
!842 = !DILocation(line: 238, column: 17, scope: !828)
!843 = !DILocation(line: 238, column: 2, scope: !828)
!844 = !DILocation(line: 239, column: 13, scope: !828)
!845 = !DILocation(line: 239, column: 17, scope: !828)
!846 = !DILocation(line: 239, column: 2, scope: !828)
!847 = !DILocation(line: 241, column: 13, scope: !828)
!848 = !DILocation(line: 241, column: 24, scope: !828)
!849 = !DILocation(line: 241, column: 22, scope: !828)
!850 = !DILocation(line: 241, column: 35, scope: !828)
!851 = !DILocation(line: 241, column: 46, scope: !828)
!852 = !DILocation(line: 241, column: 44, scope: !828)
!853 = !DILocation(line: 241, column: 33, scope: !828)
!854 = !DILocation(line: 241, column: 57, scope: !828)
!855 = !DILocation(line: 241, column: 68, scope: !828)
!856 = !DILocation(line: 241, column: 66, scope: !828)
!857 = !DILocation(line: 241, column: 55, scope: !828)
!858 = !DILocation(line: 241, column: 2, scope: !828)
!859 = !DILocation(line: 241, column: 11, scope: !828)
!860 = !DILocation(line: 242, column: 13, scope: !828)
!861 = !DILocation(line: 242, column: 24, scope: !828)
!862 = !DILocation(line: 242, column: 22, scope: !828)
!863 = !DILocation(line: 242, column: 35, scope: !828)
!864 = !DILocation(line: 242, column: 46, scope: !828)
!865 = !DILocation(line: 242, column: 44, scope: !828)
!866 = !DILocation(line: 242, column: 33, scope: !828)
!867 = !DILocation(line: 242, column: 57, scope: !828)
!868 = !DILocation(line: 242, column: 68, scope: !828)
!869 = !DILocation(line: 242, column: 66, scope: !828)
!870 = !DILocation(line: 242, column: 55, scope: !828)
!871 = !DILocation(line: 242, column: 2, scope: !828)
!872 = !DILocation(line: 242, column: 11, scope: !828)
!873 = !DILocation(line: 243, column: 13, scope: !828)
!874 = !DILocation(line: 243, column: 24, scope: !828)
!875 = !DILocation(line: 243, column: 22, scope: !828)
!876 = !DILocation(line: 243, column: 35, scope: !828)
!877 = !DILocation(line: 243, column: 46, scope: !828)
!878 = !DILocation(line: 243, column: 44, scope: !828)
!879 = !DILocation(line: 243, column: 33, scope: !828)
!880 = !DILocation(line: 243, column: 57, scope: !828)
!881 = !DILocation(line: 243, column: 68, scope: !828)
!882 = !DILocation(line: 243, column: 66, scope: !828)
!883 = !DILocation(line: 243, column: 55, scope: !828)
!884 = !DILocation(line: 243, column: 2, scope: !828)
!885 = !DILocation(line: 243, column: 11, scope: !828)
!886 = !DILocation(line: 244, column: 13, scope: !828)
!887 = !DILocation(line: 244, column: 24, scope: !828)
!888 = !DILocation(line: 244, column: 22, scope: !828)
!889 = !DILocation(line: 244, column: 35, scope: !828)
!890 = !DILocation(line: 244, column: 46, scope: !828)
!891 = !DILocation(line: 244, column: 44, scope: !828)
!892 = !DILocation(line: 244, column: 33, scope: !828)
!893 = !DILocation(line: 244, column: 57, scope: !828)
!894 = !DILocation(line: 244, column: 68, scope: !828)
!895 = !DILocation(line: 244, column: 66, scope: !828)
!896 = !DILocation(line: 244, column: 55, scope: !828)
!897 = !DILocation(line: 244, column: 2, scope: !828)
!898 = !DILocation(line: 244, column: 11, scope: !828)
!899 = !DILocation(line: 245, column: 13, scope: !828)
!900 = !DILocation(line: 245, column: 24, scope: !828)
!901 = !DILocation(line: 245, column: 22, scope: !828)
!902 = !DILocation(line: 245, column: 35, scope: !828)
!903 = !DILocation(line: 245, column: 46, scope: !828)
!904 = !DILocation(line: 245, column: 44, scope: !828)
!905 = !DILocation(line: 245, column: 33, scope: !828)
!906 = !DILocation(line: 245, column: 57, scope: !828)
!907 = !DILocation(line: 245, column: 68, scope: !828)
!908 = !DILocation(line: 245, column: 66, scope: !828)
!909 = !DILocation(line: 245, column: 55, scope: !828)
!910 = !DILocation(line: 245, column: 2, scope: !828)
!911 = !DILocation(line: 245, column: 11, scope: !828)
!912 = !DILocation(line: 246, column: 13, scope: !828)
!913 = !DILocation(line: 246, column: 24, scope: !828)
!914 = !DILocation(line: 246, column: 22, scope: !828)
!915 = !DILocation(line: 246, column: 35, scope: !828)
!916 = !DILocation(line: 246, column: 46, scope: !828)
!917 = !DILocation(line: 246, column: 44, scope: !828)
!918 = !DILocation(line: 246, column: 33, scope: !828)
!919 = !DILocation(line: 246, column: 57, scope: !828)
!920 = !DILocation(line: 246, column: 68, scope: !828)
!921 = !DILocation(line: 246, column: 66, scope: !828)
!922 = !DILocation(line: 246, column: 55, scope: !828)
!923 = !DILocation(line: 246, column: 2, scope: !828)
!924 = !DILocation(line: 246, column: 11, scope: !828)
!925 = !DILocation(line: 247, column: 13, scope: !828)
!926 = !DILocation(line: 247, column: 24, scope: !828)
!927 = !DILocation(line: 247, column: 22, scope: !828)
!928 = !DILocation(line: 247, column: 35, scope: !828)
!929 = !DILocation(line: 247, column: 46, scope: !828)
!930 = !DILocation(line: 247, column: 44, scope: !828)
!931 = !DILocation(line: 247, column: 33, scope: !828)
!932 = !DILocation(line: 247, column: 57, scope: !828)
!933 = !DILocation(line: 247, column: 68, scope: !828)
!934 = !DILocation(line: 247, column: 66, scope: !828)
!935 = !DILocation(line: 247, column: 55, scope: !828)
!936 = !DILocation(line: 247, column: 2, scope: !828)
!937 = !DILocation(line: 247, column: 11, scope: !828)
!938 = !DILocation(line: 248, column: 13, scope: !828)
!939 = !DILocation(line: 248, column: 24, scope: !828)
!940 = !DILocation(line: 248, column: 22, scope: !828)
!941 = !DILocation(line: 248, column: 35, scope: !828)
!942 = !DILocation(line: 248, column: 46, scope: !828)
!943 = !DILocation(line: 248, column: 44, scope: !828)
!944 = !DILocation(line: 248, column: 33, scope: !828)
!945 = !DILocation(line: 248, column: 57, scope: !828)
!946 = !DILocation(line: 248, column: 68, scope: !828)
!947 = !DILocation(line: 248, column: 66, scope: !828)
!948 = !DILocation(line: 248, column: 55, scope: !828)
!949 = !DILocation(line: 248, column: 2, scope: !828)
!950 = !DILocation(line: 248, column: 11, scope: !828)
!951 = !DILocation(line: 249, column: 13, scope: !828)
!952 = !DILocation(line: 249, column: 24, scope: !828)
!953 = !DILocation(line: 249, column: 22, scope: !828)
!954 = !DILocation(line: 249, column: 35, scope: !828)
!955 = !DILocation(line: 249, column: 46, scope: !828)
!956 = !DILocation(line: 249, column: 44, scope: !828)
!957 = !DILocation(line: 249, column: 33, scope: !828)
!958 = !DILocation(line: 249, column: 57, scope: !828)
!959 = !DILocation(line: 249, column: 68, scope: !828)
!960 = !DILocation(line: 249, column: 66, scope: !828)
!961 = !DILocation(line: 249, column: 55, scope: !828)
!962 = !DILocation(line: 249, column: 2, scope: !828)
!963 = !DILocation(line: 249, column: 11, scope: !828)
!964 = !DILocation(line: 250, column: 1, scope: !828)
!965 = distinct !DISubprogram(name: "mul_m3_m3m4", scope: !1, file: !1, line: 253, type: !966, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!966 = !DISubroutineType(types: !967)
!967 = !{null, !35, !47, !35}
!968 = !DILocalVariable(name: "m1", arg: 1, scope: !965, file: !1, line: 253, type: !35)
!969 = !DILocation(line: 253, column: 24, scope: !965)
!970 = !DILocalVariable(name: "m3_", arg: 2, scope: !965, file: !1, line: 253, type: !47)
!971 = !DILocation(line: 253, column: 40, scope: !965)
!972 = !DILocalVariable(name: "m2_", arg: 3, scope: !965, file: !1, line: 253, type: !35)
!973 = !DILocation(line: 253, column: 57, scope: !965)
!974 = !DILocalVariable(name: "m2", scope: !965, file: !1, line: 255, type: !699)
!975 = !DILocation(line: 255, column: 8, scope: !965)
!976 = !DILocalVariable(name: "m3", scope: !965, file: !1, line: 255, type: !12)
!977 = !DILocation(line: 255, column: 18, scope: !965)
!978 = !DILocation(line: 258, column: 13, scope: !965)
!979 = !DILocation(line: 258, column: 17, scope: !965)
!980 = !DILocation(line: 258, column: 2, scope: !965)
!981 = !DILocation(line: 259, column: 13, scope: !965)
!982 = !DILocation(line: 259, column: 17, scope: !965)
!983 = !DILocation(line: 259, column: 2, scope: !965)
!984 = !DILocation(line: 262, column: 13, scope: !965)
!985 = !DILocation(line: 262, column: 24, scope: !965)
!986 = !DILocation(line: 262, column: 22, scope: !965)
!987 = !DILocation(line: 262, column: 35, scope: !965)
!988 = !DILocation(line: 262, column: 46, scope: !965)
!989 = !DILocation(line: 262, column: 44, scope: !965)
!990 = !DILocation(line: 262, column: 33, scope: !965)
!991 = !DILocation(line: 262, column: 57, scope: !965)
!992 = !DILocation(line: 262, column: 68, scope: !965)
!993 = !DILocation(line: 262, column: 66, scope: !965)
!994 = !DILocation(line: 262, column: 55, scope: !965)
!995 = !DILocation(line: 262, column: 2, scope: !965)
!996 = !DILocation(line: 262, column: 11, scope: !965)
!997 = !DILocation(line: 263, column: 13, scope: !965)
!998 = !DILocation(line: 263, column: 24, scope: !965)
!999 = !DILocation(line: 263, column: 22, scope: !965)
!1000 = !DILocation(line: 263, column: 35, scope: !965)
!1001 = !DILocation(line: 263, column: 46, scope: !965)
!1002 = !DILocation(line: 263, column: 44, scope: !965)
!1003 = !DILocation(line: 263, column: 33, scope: !965)
!1004 = !DILocation(line: 263, column: 57, scope: !965)
!1005 = !DILocation(line: 263, column: 68, scope: !965)
!1006 = !DILocation(line: 263, column: 66, scope: !965)
!1007 = !DILocation(line: 263, column: 55, scope: !965)
!1008 = !DILocation(line: 263, column: 2, scope: !965)
!1009 = !DILocation(line: 263, column: 11, scope: !965)
!1010 = !DILocation(line: 264, column: 13, scope: !965)
!1011 = !DILocation(line: 264, column: 24, scope: !965)
!1012 = !DILocation(line: 264, column: 22, scope: !965)
!1013 = !DILocation(line: 264, column: 35, scope: !965)
!1014 = !DILocation(line: 264, column: 46, scope: !965)
!1015 = !DILocation(line: 264, column: 44, scope: !965)
!1016 = !DILocation(line: 264, column: 33, scope: !965)
!1017 = !DILocation(line: 264, column: 57, scope: !965)
!1018 = !DILocation(line: 264, column: 68, scope: !965)
!1019 = !DILocation(line: 264, column: 66, scope: !965)
!1020 = !DILocation(line: 264, column: 55, scope: !965)
!1021 = !DILocation(line: 264, column: 2, scope: !965)
!1022 = !DILocation(line: 264, column: 11, scope: !965)
!1023 = !DILocation(line: 266, column: 13, scope: !965)
!1024 = !DILocation(line: 266, column: 24, scope: !965)
!1025 = !DILocation(line: 266, column: 22, scope: !965)
!1026 = !DILocation(line: 266, column: 35, scope: !965)
!1027 = !DILocation(line: 266, column: 46, scope: !965)
!1028 = !DILocation(line: 266, column: 44, scope: !965)
!1029 = !DILocation(line: 266, column: 33, scope: !965)
!1030 = !DILocation(line: 266, column: 57, scope: !965)
!1031 = !DILocation(line: 266, column: 68, scope: !965)
!1032 = !DILocation(line: 266, column: 66, scope: !965)
!1033 = !DILocation(line: 266, column: 55, scope: !965)
!1034 = !DILocation(line: 266, column: 2, scope: !965)
!1035 = !DILocation(line: 266, column: 11, scope: !965)
!1036 = !DILocation(line: 267, column: 13, scope: !965)
!1037 = !DILocation(line: 267, column: 24, scope: !965)
!1038 = !DILocation(line: 267, column: 22, scope: !965)
!1039 = !DILocation(line: 267, column: 35, scope: !965)
!1040 = !DILocation(line: 267, column: 46, scope: !965)
!1041 = !DILocation(line: 267, column: 44, scope: !965)
!1042 = !DILocation(line: 267, column: 33, scope: !965)
!1043 = !DILocation(line: 267, column: 57, scope: !965)
!1044 = !DILocation(line: 267, column: 68, scope: !965)
!1045 = !DILocation(line: 267, column: 66, scope: !965)
!1046 = !DILocation(line: 267, column: 55, scope: !965)
!1047 = !DILocation(line: 267, column: 2, scope: !965)
!1048 = !DILocation(line: 267, column: 11, scope: !965)
!1049 = !DILocation(line: 268, column: 13, scope: !965)
!1050 = !DILocation(line: 268, column: 24, scope: !965)
!1051 = !DILocation(line: 268, column: 22, scope: !965)
!1052 = !DILocation(line: 268, column: 35, scope: !965)
!1053 = !DILocation(line: 268, column: 46, scope: !965)
!1054 = !DILocation(line: 268, column: 44, scope: !965)
!1055 = !DILocation(line: 268, column: 33, scope: !965)
!1056 = !DILocation(line: 268, column: 57, scope: !965)
!1057 = !DILocation(line: 268, column: 68, scope: !965)
!1058 = !DILocation(line: 268, column: 66, scope: !965)
!1059 = !DILocation(line: 268, column: 55, scope: !965)
!1060 = !DILocation(line: 268, column: 2, scope: !965)
!1061 = !DILocation(line: 268, column: 11, scope: !965)
!1062 = !DILocation(line: 270, column: 13, scope: !965)
!1063 = !DILocation(line: 270, column: 24, scope: !965)
!1064 = !DILocation(line: 270, column: 22, scope: !965)
!1065 = !DILocation(line: 270, column: 35, scope: !965)
!1066 = !DILocation(line: 270, column: 46, scope: !965)
!1067 = !DILocation(line: 270, column: 44, scope: !965)
!1068 = !DILocation(line: 270, column: 33, scope: !965)
!1069 = !DILocation(line: 270, column: 57, scope: !965)
!1070 = !DILocation(line: 270, column: 68, scope: !965)
!1071 = !DILocation(line: 270, column: 66, scope: !965)
!1072 = !DILocation(line: 270, column: 55, scope: !965)
!1073 = !DILocation(line: 270, column: 2, scope: !965)
!1074 = !DILocation(line: 270, column: 11, scope: !965)
!1075 = !DILocation(line: 271, column: 13, scope: !965)
!1076 = !DILocation(line: 271, column: 24, scope: !965)
!1077 = !DILocation(line: 271, column: 22, scope: !965)
!1078 = !DILocation(line: 271, column: 35, scope: !965)
!1079 = !DILocation(line: 271, column: 46, scope: !965)
!1080 = !DILocation(line: 271, column: 44, scope: !965)
!1081 = !DILocation(line: 271, column: 33, scope: !965)
!1082 = !DILocation(line: 271, column: 57, scope: !965)
!1083 = !DILocation(line: 271, column: 68, scope: !965)
!1084 = !DILocation(line: 271, column: 66, scope: !965)
!1085 = !DILocation(line: 271, column: 55, scope: !965)
!1086 = !DILocation(line: 271, column: 2, scope: !965)
!1087 = !DILocation(line: 271, column: 11, scope: !965)
!1088 = !DILocation(line: 272, column: 13, scope: !965)
!1089 = !DILocation(line: 272, column: 24, scope: !965)
!1090 = !DILocation(line: 272, column: 22, scope: !965)
!1091 = !DILocation(line: 272, column: 35, scope: !965)
!1092 = !DILocation(line: 272, column: 46, scope: !965)
!1093 = !DILocation(line: 272, column: 44, scope: !965)
!1094 = !DILocation(line: 272, column: 33, scope: !965)
!1095 = !DILocation(line: 272, column: 57, scope: !965)
!1096 = !DILocation(line: 272, column: 68, scope: !965)
!1097 = !DILocation(line: 272, column: 66, scope: !965)
!1098 = !DILocation(line: 272, column: 55, scope: !965)
!1099 = !DILocation(line: 272, column: 2, scope: !965)
!1100 = !DILocation(line: 272, column: 11, scope: !965)
!1101 = !DILocation(line: 273, column: 1, scope: !965)
!1102 = distinct !DISubprogram(name: "mul_m4_m3m4", scope: !1, file: !1, line: 275, type: !1103, scopeLine: 276, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{null, !47, !35, !47}
!1105 = !DILocalVariable(name: "m1", arg: 1, scope: !1102, file: !1, line: 275, type: !47)
!1106 = !DILocation(line: 275, column: 24, scope: !1102)
!1107 = !DILocalVariable(name: "m3_", arg: 2, scope: !1102, file: !1, line: 275, type: !35)
!1108 = !DILocation(line: 275, column: 40, scope: !1102)
!1109 = !DILocalVariable(name: "m2_", arg: 3, scope: !1102, file: !1, line: 275, type: !47)
!1110 = !DILocation(line: 275, column: 57, scope: !1102)
!1111 = !DILocalVariable(name: "m2", scope: !1102, file: !1, line: 277, type: !12)
!1112 = !DILocation(line: 277, column: 8, scope: !1102)
!1113 = !DILocalVariable(name: "m3", scope: !1102, file: !1, line: 277, type: !699)
!1114 = !DILocation(line: 277, column: 18, scope: !1102)
!1115 = !DILocation(line: 280, column: 13, scope: !1102)
!1116 = !DILocation(line: 280, column: 17, scope: !1102)
!1117 = !DILocation(line: 280, column: 2, scope: !1102)
!1118 = !DILocation(line: 281, column: 13, scope: !1102)
!1119 = !DILocation(line: 281, column: 17, scope: !1102)
!1120 = !DILocation(line: 281, column: 2, scope: !1102)
!1121 = !DILocation(line: 283, column: 13, scope: !1102)
!1122 = !DILocation(line: 283, column: 24, scope: !1102)
!1123 = !DILocation(line: 283, column: 22, scope: !1102)
!1124 = !DILocation(line: 283, column: 35, scope: !1102)
!1125 = !DILocation(line: 283, column: 46, scope: !1102)
!1126 = !DILocation(line: 283, column: 44, scope: !1102)
!1127 = !DILocation(line: 283, column: 33, scope: !1102)
!1128 = !DILocation(line: 283, column: 57, scope: !1102)
!1129 = !DILocation(line: 283, column: 68, scope: !1102)
!1130 = !DILocation(line: 283, column: 66, scope: !1102)
!1131 = !DILocation(line: 283, column: 55, scope: !1102)
!1132 = !DILocation(line: 283, column: 2, scope: !1102)
!1133 = !DILocation(line: 283, column: 11, scope: !1102)
!1134 = !DILocation(line: 284, column: 13, scope: !1102)
!1135 = !DILocation(line: 284, column: 24, scope: !1102)
!1136 = !DILocation(line: 284, column: 22, scope: !1102)
!1137 = !DILocation(line: 284, column: 35, scope: !1102)
!1138 = !DILocation(line: 284, column: 46, scope: !1102)
!1139 = !DILocation(line: 284, column: 44, scope: !1102)
!1140 = !DILocation(line: 284, column: 33, scope: !1102)
!1141 = !DILocation(line: 284, column: 57, scope: !1102)
!1142 = !DILocation(line: 284, column: 68, scope: !1102)
!1143 = !DILocation(line: 284, column: 66, scope: !1102)
!1144 = !DILocation(line: 284, column: 55, scope: !1102)
!1145 = !DILocation(line: 284, column: 2, scope: !1102)
!1146 = !DILocation(line: 284, column: 11, scope: !1102)
!1147 = !DILocation(line: 285, column: 13, scope: !1102)
!1148 = !DILocation(line: 285, column: 24, scope: !1102)
!1149 = !DILocation(line: 285, column: 22, scope: !1102)
!1150 = !DILocation(line: 285, column: 35, scope: !1102)
!1151 = !DILocation(line: 285, column: 46, scope: !1102)
!1152 = !DILocation(line: 285, column: 44, scope: !1102)
!1153 = !DILocation(line: 285, column: 33, scope: !1102)
!1154 = !DILocation(line: 285, column: 57, scope: !1102)
!1155 = !DILocation(line: 285, column: 68, scope: !1102)
!1156 = !DILocation(line: 285, column: 66, scope: !1102)
!1157 = !DILocation(line: 285, column: 55, scope: !1102)
!1158 = !DILocation(line: 285, column: 2, scope: !1102)
!1159 = !DILocation(line: 285, column: 11, scope: !1102)
!1160 = !DILocation(line: 286, column: 13, scope: !1102)
!1161 = !DILocation(line: 286, column: 24, scope: !1102)
!1162 = !DILocation(line: 286, column: 22, scope: !1102)
!1163 = !DILocation(line: 286, column: 35, scope: !1102)
!1164 = !DILocation(line: 286, column: 46, scope: !1102)
!1165 = !DILocation(line: 286, column: 44, scope: !1102)
!1166 = !DILocation(line: 286, column: 33, scope: !1102)
!1167 = !DILocation(line: 286, column: 57, scope: !1102)
!1168 = !DILocation(line: 286, column: 68, scope: !1102)
!1169 = !DILocation(line: 286, column: 66, scope: !1102)
!1170 = !DILocation(line: 286, column: 55, scope: !1102)
!1171 = !DILocation(line: 286, column: 2, scope: !1102)
!1172 = !DILocation(line: 286, column: 11, scope: !1102)
!1173 = !DILocation(line: 287, column: 13, scope: !1102)
!1174 = !DILocation(line: 287, column: 24, scope: !1102)
!1175 = !DILocation(line: 287, column: 22, scope: !1102)
!1176 = !DILocation(line: 287, column: 35, scope: !1102)
!1177 = !DILocation(line: 287, column: 46, scope: !1102)
!1178 = !DILocation(line: 287, column: 44, scope: !1102)
!1179 = !DILocation(line: 287, column: 33, scope: !1102)
!1180 = !DILocation(line: 287, column: 57, scope: !1102)
!1181 = !DILocation(line: 287, column: 68, scope: !1102)
!1182 = !DILocation(line: 287, column: 66, scope: !1102)
!1183 = !DILocation(line: 287, column: 55, scope: !1102)
!1184 = !DILocation(line: 287, column: 2, scope: !1102)
!1185 = !DILocation(line: 287, column: 11, scope: !1102)
!1186 = !DILocation(line: 288, column: 13, scope: !1102)
!1187 = !DILocation(line: 288, column: 24, scope: !1102)
!1188 = !DILocation(line: 288, column: 22, scope: !1102)
!1189 = !DILocation(line: 288, column: 35, scope: !1102)
!1190 = !DILocation(line: 288, column: 46, scope: !1102)
!1191 = !DILocation(line: 288, column: 44, scope: !1102)
!1192 = !DILocation(line: 288, column: 33, scope: !1102)
!1193 = !DILocation(line: 288, column: 57, scope: !1102)
!1194 = !DILocation(line: 288, column: 68, scope: !1102)
!1195 = !DILocation(line: 288, column: 66, scope: !1102)
!1196 = !DILocation(line: 288, column: 55, scope: !1102)
!1197 = !DILocation(line: 288, column: 2, scope: !1102)
!1198 = !DILocation(line: 288, column: 11, scope: !1102)
!1199 = !DILocation(line: 289, column: 13, scope: !1102)
!1200 = !DILocation(line: 289, column: 24, scope: !1102)
!1201 = !DILocation(line: 289, column: 22, scope: !1102)
!1202 = !DILocation(line: 289, column: 35, scope: !1102)
!1203 = !DILocation(line: 289, column: 46, scope: !1102)
!1204 = !DILocation(line: 289, column: 44, scope: !1102)
!1205 = !DILocation(line: 289, column: 33, scope: !1102)
!1206 = !DILocation(line: 289, column: 57, scope: !1102)
!1207 = !DILocation(line: 289, column: 68, scope: !1102)
!1208 = !DILocation(line: 289, column: 66, scope: !1102)
!1209 = !DILocation(line: 289, column: 55, scope: !1102)
!1210 = !DILocation(line: 289, column: 2, scope: !1102)
!1211 = !DILocation(line: 289, column: 11, scope: !1102)
!1212 = !DILocation(line: 290, column: 13, scope: !1102)
!1213 = !DILocation(line: 290, column: 24, scope: !1102)
!1214 = !DILocation(line: 290, column: 22, scope: !1102)
!1215 = !DILocation(line: 290, column: 35, scope: !1102)
!1216 = !DILocation(line: 290, column: 46, scope: !1102)
!1217 = !DILocation(line: 290, column: 44, scope: !1102)
!1218 = !DILocation(line: 290, column: 33, scope: !1102)
!1219 = !DILocation(line: 290, column: 57, scope: !1102)
!1220 = !DILocation(line: 290, column: 68, scope: !1102)
!1221 = !DILocation(line: 290, column: 66, scope: !1102)
!1222 = !DILocation(line: 290, column: 55, scope: !1102)
!1223 = !DILocation(line: 290, column: 2, scope: !1102)
!1224 = !DILocation(line: 290, column: 11, scope: !1102)
!1225 = !DILocation(line: 291, column: 13, scope: !1102)
!1226 = !DILocation(line: 291, column: 24, scope: !1102)
!1227 = !DILocation(line: 291, column: 22, scope: !1102)
!1228 = !DILocation(line: 291, column: 35, scope: !1102)
!1229 = !DILocation(line: 291, column: 46, scope: !1102)
!1230 = !DILocation(line: 291, column: 44, scope: !1102)
!1231 = !DILocation(line: 291, column: 33, scope: !1102)
!1232 = !DILocation(line: 291, column: 57, scope: !1102)
!1233 = !DILocation(line: 291, column: 68, scope: !1102)
!1234 = !DILocation(line: 291, column: 66, scope: !1102)
!1235 = !DILocation(line: 291, column: 55, scope: !1102)
!1236 = !DILocation(line: 291, column: 2, scope: !1102)
!1237 = !DILocation(line: 291, column: 11, scope: !1102)
!1238 = !DILocation(line: 292, column: 1, scope: !1102)
!1239 = distinct !DISubprogram(name: "_va_mul_m3_series_3", scope: !1, file: !1, line: 297, type: !690, scopeLine: 300, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1240 = !DILocalVariable(name: "r", arg: 1, scope: !1239, file: !1, line: 298, type: !35)
!1241 = !DILocation(line: 298, column: 15, scope: !1239)
!1242 = !DILocalVariable(name: "m1", arg: 2, scope: !1239, file: !1, line: 299, type: !35)
!1243 = !DILocation(line: 299, column: 15, scope: !1239)
!1244 = !DILocalVariable(name: "m2", arg: 3, scope: !1239, file: !1, line: 299, type: !35)
!1245 = !DILocation(line: 299, column: 31, scope: !1239)
!1246 = !DILocation(line: 301, column: 14, scope: !1239)
!1247 = !DILocation(line: 301, column: 17, scope: !1239)
!1248 = !DILocation(line: 301, column: 21, scope: !1239)
!1249 = !DILocation(line: 301, column: 2, scope: !1239)
!1250 = !DILocation(line: 302, column: 1, scope: !1239)
!1251 = distinct !DISubprogram(name: "_va_mul_m3_series_4", scope: !1, file: !1, line: 303, type: !1252, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1252 = !DISubroutineType(types: !1253)
!1253 = !{null, !35, !35, !35, !35}
!1254 = !DILocalVariable(name: "r", arg: 1, scope: !1251, file: !1, line: 304, type: !35)
!1255 = !DILocation(line: 304, column: 15, scope: !1251)
!1256 = !DILocalVariable(name: "m1", arg: 2, scope: !1251, file: !1, line: 305, type: !35)
!1257 = !DILocation(line: 305, column: 15, scope: !1251)
!1258 = !DILocalVariable(name: "m2", arg: 3, scope: !1251, file: !1, line: 305, type: !35)
!1259 = !DILocation(line: 305, column: 31, scope: !1251)
!1260 = !DILocalVariable(name: "m3", arg: 4, scope: !1251, file: !1, line: 305, type: !35)
!1261 = !DILocation(line: 305, column: 47, scope: !1251)
!1262 = !DILocation(line: 307, column: 14, scope: !1251)
!1263 = !DILocation(line: 307, column: 17, scope: !1251)
!1264 = !DILocation(line: 307, column: 21, scope: !1251)
!1265 = !DILocation(line: 307, column: 2, scope: !1251)
!1266 = !DILocation(line: 308, column: 14, scope: !1251)
!1267 = !DILocation(line: 308, column: 17, scope: !1251)
!1268 = !DILocation(line: 308, column: 20, scope: !1251)
!1269 = !DILocation(line: 308, column: 2, scope: !1251)
!1270 = !DILocation(line: 309, column: 1, scope: !1251)
!1271 = distinct !DISubprogram(name: "_va_mul_m3_series_5", scope: !1, file: !1, line: 310, type: !1272, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1272 = !DISubroutineType(types: !1273)
!1273 = !{null, !35, !35, !35, !35, !35}
!1274 = !DILocalVariable(name: "r", arg: 1, scope: !1271, file: !1, line: 311, type: !35)
!1275 = !DILocation(line: 311, column: 15, scope: !1271)
!1276 = !DILocalVariable(name: "m1", arg: 2, scope: !1271, file: !1, line: 312, type: !35)
!1277 = !DILocation(line: 312, column: 15, scope: !1271)
!1278 = !DILocalVariable(name: "m2", arg: 3, scope: !1271, file: !1, line: 312, type: !35)
!1279 = !DILocation(line: 312, column: 31, scope: !1271)
!1280 = !DILocalVariable(name: "m3", arg: 4, scope: !1271, file: !1, line: 312, type: !35)
!1281 = !DILocation(line: 312, column: 47, scope: !1271)
!1282 = !DILocalVariable(name: "m4", arg: 5, scope: !1271, file: !1, line: 312, type: !35)
!1283 = !DILocation(line: 312, column: 63, scope: !1271)
!1284 = !DILocation(line: 314, column: 14, scope: !1271)
!1285 = !DILocation(line: 314, column: 17, scope: !1271)
!1286 = !DILocation(line: 314, column: 21, scope: !1271)
!1287 = !DILocation(line: 314, column: 2, scope: !1271)
!1288 = !DILocation(line: 315, column: 14, scope: !1271)
!1289 = !DILocation(line: 315, column: 17, scope: !1271)
!1290 = !DILocation(line: 315, column: 20, scope: !1271)
!1291 = !DILocation(line: 315, column: 2, scope: !1271)
!1292 = !DILocation(line: 316, column: 14, scope: !1271)
!1293 = !DILocation(line: 316, column: 17, scope: !1271)
!1294 = !DILocation(line: 316, column: 20, scope: !1271)
!1295 = !DILocation(line: 316, column: 2, scope: !1271)
!1296 = !DILocation(line: 317, column: 1, scope: !1271)
!1297 = distinct !DISubprogram(name: "_va_mul_m3_series_6", scope: !1, file: !1, line: 318, type: !1298, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1298 = !DISubroutineType(types: !1299)
!1299 = !{null, !35, !35, !35, !35, !35, !35}
!1300 = !DILocalVariable(name: "r", arg: 1, scope: !1297, file: !1, line: 319, type: !35)
!1301 = !DILocation(line: 319, column: 15, scope: !1297)
!1302 = !DILocalVariable(name: "m1", arg: 2, scope: !1297, file: !1, line: 320, type: !35)
!1303 = !DILocation(line: 320, column: 15, scope: !1297)
!1304 = !DILocalVariable(name: "m2", arg: 3, scope: !1297, file: !1, line: 320, type: !35)
!1305 = !DILocation(line: 320, column: 31, scope: !1297)
!1306 = !DILocalVariable(name: "m3", arg: 4, scope: !1297, file: !1, line: 320, type: !35)
!1307 = !DILocation(line: 320, column: 47, scope: !1297)
!1308 = !DILocalVariable(name: "m4", arg: 5, scope: !1297, file: !1, line: 320, type: !35)
!1309 = !DILocation(line: 320, column: 63, scope: !1297)
!1310 = !DILocalVariable(name: "m5", arg: 6, scope: !1297, file: !1, line: 321, type: !35)
!1311 = !DILocation(line: 321, column: 15, scope: !1297)
!1312 = !DILocation(line: 323, column: 14, scope: !1297)
!1313 = !DILocation(line: 323, column: 17, scope: !1297)
!1314 = !DILocation(line: 323, column: 21, scope: !1297)
!1315 = !DILocation(line: 323, column: 2, scope: !1297)
!1316 = !DILocation(line: 324, column: 14, scope: !1297)
!1317 = !DILocation(line: 324, column: 17, scope: !1297)
!1318 = !DILocation(line: 324, column: 20, scope: !1297)
!1319 = !DILocation(line: 324, column: 2, scope: !1297)
!1320 = !DILocation(line: 325, column: 14, scope: !1297)
!1321 = !DILocation(line: 325, column: 17, scope: !1297)
!1322 = !DILocation(line: 325, column: 20, scope: !1297)
!1323 = !DILocation(line: 325, column: 2, scope: !1297)
!1324 = !DILocation(line: 326, column: 14, scope: !1297)
!1325 = !DILocation(line: 326, column: 17, scope: !1297)
!1326 = !DILocation(line: 326, column: 20, scope: !1297)
!1327 = !DILocation(line: 326, column: 2, scope: !1297)
!1328 = !DILocation(line: 327, column: 1, scope: !1297)
!1329 = distinct !DISubprogram(name: "_va_mul_m3_series_7", scope: !1, file: !1, line: 328, type: !1330, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1330 = !DISubroutineType(types: !1331)
!1331 = !{null, !35, !35, !35, !35, !35, !35, !35}
!1332 = !DILocalVariable(name: "r", arg: 1, scope: !1329, file: !1, line: 329, type: !35)
!1333 = !DILocation(line: 329, column: 15, scope: !1329)
!1334 = !DILocalVariable(name: "m1", arg: 2, scope: !1329, file: !1, line: 330, type: !35)
!1335 = !DILocation(line: 330, column: 15, scope: !1329)
!1336 = !DILocalVariable(name: "m2", arg: 3, scope: !1329, file: !1, line: 330, type: !35)
!1337 = !DILocation(line: 330, column: 31, scope: !1329)
!1338 = !DILocalVariable(name: "m3", arg: 4, scope: !1329, file: !1, line: 330, type: !35)
!1339 = !DILocation(line: 330, column: 47, scope: !1329)
!1340 = !DILocalVariable(name: "m4", arg: 5, scope: !1329, file: !1, line: 330, type: !35)
!1341 = !DILocation(line: 330, column: 63, scope: !1329)
!1342 = !DILocalVariable(name: "m5", arg: 6, scope: !1329, file: !1, line: 331, type: !35)
!1343 = !DILocation(line: 331, column: 15, scope: !1329)
!1344 = !DILocalVariable(name: "m6", arg: 7, scope: !1329, file: !1, line: 331, type: !35)
!1345 = !DILocation(line: 331, column: 31, scope: !1329)
!1346 = !DILocation(line: 333, column: 14, scope: !1329)
!1347 = !DILocation(line: 333, column: 17, scope: !1329)
!1348 = !DILocation(line: 333, column: 21, scope: !1329)
!1349 = !DILocation(line: 333, column: 2, scope: !1329)
!1350 = !DILocation(line: 334, column: 14, scope: !1329)
!1351 = !DILocation(line: 334, column: 17, scope: !1329)
!1352 = !DILocation(line: 334, column: 20, scope: !1329)
!1353 = !DILocation(line: 334, column: 2, scope: !1329)
!1354 = !DILocation(line: 335, column: 14, scope: !1329)
!1355 = !DILocation(line: 335, column: 17, scope: !1329)
!1356 = !DILocation(line: 335, column: 20, scope: !1329)
!1357 = !DILocation(line: 335, column: 2, scope: !1329)
!1358 = !DILocation(line: 336, column: 14, scope: !1329)
!1359 = !DILocation(line: 336, column: 17, scope: !1329)
!1360 = !DILocation(line: 336, column: 20, scope: !1329)
!1361 = !DILocation(line: 336, column: 2, scope: !1329)
!1362 = !DILocation(line: 337, column: 14, scope: !1329)
!1363 = !DILocation(line: 337, column: 17, scope: !1329)
!1364 = !DILocation(line: 337, column: 20, scope: !1329)
!1365 = !DILocation(line: 337, column: 2, scope: !1329)
!1366 = !DILocation(line: 338, column: 1, scope: !1329)
!1367 = distinct !DISubprogram(name: "_va_mul_m3_series_8", scope: !1, file: !1, line: 339, type: !1368, scopeLine: 343, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1368 = !DISubroutineType(types: !1369)
!1369 = !{null, !35, !35, !35, !35, !35, !35, !35, !35}
!1370 = !DILocalVariable(name: "r", arg: 1, scope: !1367, file: !1, line: 340, type: !35)
!1371 = !DILocation(line: 340, column: 15, scope: !1367)
!1372 = !DILocalVariable(name: "m1", arg: 2, scope: !1367, file: !1, line: 341, type: !35)
!1373 = !DILocation(line: 341, column: 15, scope: !1367)
!1374 = !DILocalVariable(name: "m2", arg: 3, scope: !1367, file: !1, line: 341, type: !35)
!1375 = !DILocation(line: 341, column: 31, scope: !1367)
!1376 = !DILocalVariable(name: "m3", arg: 4, scope: !1367, file: !1, line: 341, type: !35)
!1377 = !DILocation(line: 341, column: 47, scope: !1367)
!1378 = !DILocalVariable(name: "m4", arg: 5, scope: !1367, file: !1, line: 341, type: !35)
!1379 = !DILocation(line: 341, column: 63, scope: !1367)
!1380 = !DILocalVariable(name: "m5", arg: 6, scope: !1367, file: !1, line: 342, type: !35)
!1381 = !DILocation(line: 342, column: 15, scope: !1367)
!1382 = !DILocalVariable(name: "m6", arg: 7, scope: !1367, file: !1, line: 342, type: !35)
!1383 = !DILocation(line: 342, column: 31, scope: !1367)
!1384 = !DILocalVariable(name: "m7", arg: 8, scope: !1367, file: !1, line: 342, type: !35)
!1385 = !DILocation(line: 342, column: 47, scope: !1367)
!1386 = !DILocation(line: 344, column: 14, scope: !1367)
!1387 = !DILocation(line: 344, column: 17, scope: !1367)
!1388 = !DILocation(line: 344, column: 21, scope: !1367)
!1389 = !DILocation(line: 344, column: 2, scope: !1367)
!1390 = !DILocation(line: 345, column: 14, scope: !1367)
!1391 = !DILocation(line: 345, column: 17, scope: !1367)
!1392 = !DILocation(line: 345, column: 20, scope: !1367)
!1393 = !DILocation(line: 345, column: 2, scope: !1367)
!1394 = !DILocation(line: 346, column: 14, scope: !1367)
!1395 = !DILocation(line: 346, column: 17, scope: !1367)
!1396 = !DILocation(line: 346, column: 20, scope: !1367)
!1397 = !DILocation(line: 346, column: 2, scope: !1367)
!1398 = !DILocation(line: 347, column: 14, scope: !1367)
!1399 = !DILocation(line: 347, column: 17, scope: !1367)
!1400 = !DILocation(line: 347, column: 20, scope: !1367)
!1401 = !DILocation(line: 347, column: 2, scope: !1367)
!1402 = !DILocation(line: 348, column: 14, scope: !1367)
!1403 = !DILocation(line: 348, column: 17, scope: !1367)
!1404 = !DILocation(line: 348, column: 20, scope: !1367)
!1405 = !DILocation(line: 348, column: 2, scope: !1367)
!1406 = !DILocation(line: 349, column: 14, scope: !1367)
!1407 = !DILocation(line: 349, column: 17, scope: !1367)
!1408 = !DILocation(line: 349, column: 20, scope: !1367)
!1409 = !DILocation(line: 349, column: 2, scope: !1367)
!1410 = !DILocation(line: 350, column: 1, scope: !1367)
!1411 = distinct !DISubprogram(name: "_va_mul_m3_series_9", scope: !1, file: !1, line: 351, type: !1412, scopeLine: 355, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1412 = !DISubroutineType(types: !1413)
!1413 = !{null, !35, !35, !35, !35, !35, !35, !35, !35, !35}
!1414 = !DILocalVariable(name: "r", arg: 1, scope: !1411, file: !1, line: 352, type: !35)
!1415 = !DILocation(line: 352, column: 15, scope: !1411)
!1416 = !DILocalVariable(name: "m1", arg: 2, scope: !1411, file: !1, line: 353, type: !35)
!1417 = !DILocation(line: 353, column: 15, scope: !1411)
!1418 = !DILocalVariable(name: "m2", arg: 3, scope: !1411, file: !1, line: 353, type: !35)
!1419 = !DILocation(line: 353, column: 31, scope: !1411)
!1420 = !DILocalVariable(name: "m3", arg: 4, scope: !1411, file: !1, line: 353, type: !35)
!1421 = !DILocation(line: 353, column: 47, scope: !1411)
!1422 = !DILocalVariable(name: "m4", arg: 5, scope: !1411, file: !1, line: 353, type: !35)
!1423 = !DILocation(line: 353, column: 63, scope: !1411)
!1424 = !DILocalVariable(name: "m5", arg: 6, scope: !1411, file: !1, line: 354, type: !35)
!1425 = !DILocation(line: 354, column: 15, scope: !1411)
!1426 = !DILocalVariable(name: "m6", arg: 7, scope: !1411, file: !1, line: 354, type: !35)
!1427 = !DILocation(line: 354, column: 31, scope: !1411)
!1428 = !DILocalVariable(name: "m7", arg: 8, scope: !1411, file: !1, line: 354, type: !35)
!1429 = !DILocation(line: 354, column: 47, scope: !1411)
!1430 = !DILocalVariable(name: "m8", arg: 9, scope: !1411, file: !1, line: 354, type: !35)
!1431 = !DILocation(line: 354, column: 63, scope: !1411)
!1432 = !DILocation(line: 356, column: 14, scope: !1411)
!1433 = !DILocation(line: 356, column: 17, scope: !1411)
!1434 = !DILocation(line: 356, column: 21, scope: !1411)
!1435 = !DILocation(line: 356, column: 2, scope: !1411)
!1436 = !DILocation(line: 357, column: 14, scope: !1411)
!1437 = !DILocation(line: 357, column: 17, scope: !1411)
!1438 = !DILocation(line: 357, column: 20, scope: !1411)
!1439 = !DILocation(line: 357, column: 2, scope: !1411)
!1440 = !DILocation(line: 358, column: 14, scope: !1411)
!1441 = !DILocation(line: 358, column: 17, scope: !1411)
!1442 = !DILocation(line: 358, column: 20, scope: !1411)
!1443 = !DILocation(line: 358, column: 2, scope: !1411)
!1444 = !DILocation(line: 359, column: 14, scope: !1411)
!1445 = !DILocation(line: 359, column: 17, scope: !1411)
!1446 = !DILocation(line: 359, column: 20, scope: !1411)
!1447 = !DILocation(line: 359, column: 2, scope: !1411)
!1448 = !DILocation(line: 360, column: 14, scope: !1411)
!1449 = !DILocation(line: 360, column: 17, scope: !1411)
!1450 = !DILocation(line: 360, column: 20, scope: !1411)
!1451 = !DILocation(line: 360, column: 2, scope: !1411)
!1452 = !DILocation(line: 361, column: 14, scope: !1411)
!1453 = !DILocation(line: 361, column: 17, scope: !1411)
!1454 = !DILocation(line: 361, column: 20, scope: !1411)
!1455 = !DILocation(line: 361, column: 2, scope: !1411)
!1456 = !DILocation(line: 362, column: 14, scope: !1411)
!1457 = !DILocation(line: 362, column: 17, scope: !1411)
!1458 = !DILocation(line: 362, column: 20, scope: !1411)
!1459 = !DILocation(line: 362, column: 2, scope: !1411)
!1460 = !DILocation(line: 363, column: 1, scope: !1411)
!1461 = distinct !DISubprogram(name: "_va_mul_m4_series_3", scope: !1, file: !1, line: 368, type: !398, scopeLine: 371, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1462 = !DILocalVariable(name: "r", arg: 1, scope: !1461, file: !1, line: 369, type: !47)
!1463 = !DILocation(line: 369, column: 15, scope: !1461)
!1464 = !DILocalVariable(name: "m1", arg: 2, scope: !1461, file: !1, line: 370, type: !47)
!1465 = !DILocation(line: 370, column: 15, scope: !1461)
!1466 = !DILocalVariable(name: "m2", arg: 3, scope: !1461, file: !1, line: 370, type: !47)
!1467 = !DILocation(line: 370, column: 31, scope: !1461)
!1468 = !DILocation(line: 372, column: 14, scope: !1461)
!1469 = !DILocation(line: 372, column: 17, scope: !1461)
!1470 = !DILocation(line: 372, column: 21, scope: !1461)
!1471 = !DILocation(line: 372, column: 2, scope: !1461)
!1472 = !DILocation(line: 373, column: 1, scope: !1461)
!1473 = distinct !DISubprogram(name: "_va_mul_m4_series_4", scope: !1, file: !1, line: 374, type: !1474, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1474 = !DISubroutineType(types: !1475)
!1475 = !{null, !47, !47, !47, !47}
!1476 = !DILocalVariable(name: "r", arg: 1, scope: !1473, file: !1, line: 375, type: !47)
!1477 = !DILocation(line: 375, column: 15, scope: !1473)
!1478 = !DILocalVariable(name: "m1", arg: 2, scope: !1473, file: !1, line: 376, type: !47)
!1479 = !DILocation(line: 376, column: 15, scope: !1473)
!1480 = !DILocalVariable(name: "m2", arg: 3, scope: !1473, file: !1, line: 376, type: !47)
!1481 = !DILocation(line: 376, column: 31, scope: !1473)
!1482 = !DILocalVariable(name: "m3", arg: 4, scope: !1473, file: !1, line: 376, type: !47)
!1483 = !DILocation(line: 376, column: 47, scope: !1473)
!1484 = !DILocation(line: 378, column: 14, scope: !1473)
!1485 = !DILocation(line: 378, column: 17, scope: !1473)
!1486 = !DILocation(line: 378, column: 21, scope: !1473)
!1487 = !DILocation(line: 378, column: 2, scope: !1473)
!1488 = !DILocation(line: 379, column: 14, scope: !1473)
!1489 = !DILocation(line: 379, column: 17, scope: !1473)
!1490 = !DILocation(line: 379, column: 20, scope: !1473)
!1491 = !DILocation(line: 379, column: 2, scope: !1473)
!1492 = !DILocation(line: 380, column: 1, scope: !1473)
!1493 = distinct !DISubprogram(name: "_va_mul_m4_series_5", scope: !1, file: !1, line: 381, type: !1494, scopeLine: 384, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1494 = !DISubroutineType(types: !1495)
!1495 = !{null, !47, !47, !47, !47, !47}
!1496 = !DILocalVariable(name: "r", arg: 1, scope: !1493, file: !1, line: 382, type: !47)
!1497 = !DILocation(line: 382, column: 15, scope: !1493)
!1498 = !DILocalVariable(name: "m1", arg: 2, scope: !1493, file: !1, line: 383, type: !47)
!1499 = !DILocation(line: 383, column: 15, scope: !1493)
!1500 = !DILocalVariable(name: "m2", arg: 3, scope: !1493, file: !1, line: 383, type: !47)
!1501 = !DILocation(line: 383, column: 31, scope: !1493)
!1502 = !DILocalVariable(name: "m3", arg: 4, scope: !1493, file: !1, line: 383, type: !47)
!1503 = !DILocation(line: 383, column: 47, scope: !1493)
!1504 = !DILocalVariable(name: "m4", arg: 5, scope: !1493, file: !1, line: 383, type: !47)
!1505 = !DILocation(line: 383, column: 63, scope: !1493)
!1506 = !DILocation(line: 385, column: 14, scope: !1493)
!1507 = !DILocation(line: 385, column: 17, scope: !1493)
!1508 = !DILocation(line: 385, column: 21, scope: !1493)
!1509 = !DILocation(line: 385, column: 2, scope: !1493)
!1510 = !DILocation(line: 386, column: 14, scope: !1493)
!1511 = !DILocation(line: 386, column: 17, scope: !1493)
!1512 = !DILocation(line: 386, column: 20, scope: !1493)
!1513 = !DILocation(line: 386, column: 2, scope: !1493)
!1514 = !DILocation(line: 387, column: 14, scope: !1493)
!1515 = !DILocation(line: 387, column: 17, scope: !1493)
!1516 = !DILocation(line: 387, column: 20, scope: !1493)
!1517 = !DILocation(line: 387, column: 2, scope: !1493)
!1518 = !DILocation(line: 388, column: 1, scope: !1493)
!1519 = distinct !DISubprogram(name: "_va_mul_m4_series_6", scope: !1, file: !1, line: 389, type: !1520, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1520 = !DISubroutineType(types: !1521)
!1521 = !{null, !47, !47, !47, !47, !47, !47}
!1522 = !DILocalVariable(name: "r", arg: 1, scope: !1519, file: !1, line: 390, type: !47)
!1523 = !DILocation(line: 390, column: 15, scope: !1519)
!1524 = !DILocalVariable(name: "m1", arg: 2, scope: !1519, file: !1, line: 391, type: !47)
!1525 = !DILocation(line: 391, column: 15, scope: !1519)
!1526 = !DILocalVariable(name: "m2", arg: 3, scope: !1519, file: !1, line: 391, type: !47)
!1527 = !DILocation(line: 391, column: 31, scope: !1519)
!1528 = !DILocalVariable(name: "m3", arg: 4, scope: !1519, file: !1, line: 391, type: !47)
!1529 = !DILocation(line: 391, column: 47, scope: !1519)
!1530 = !DILocalVariable(name: "m4", arg: 5, scope: !1519, file: !1, line: 391, type: !47)
!1531 = !DILocation(line: 391, column: 63, scope: !1519)
!1532 = !DILocalVariable(name: "m5", arg: 6, scope: !1519, file: !1, line: 392, type: !47)
!1533 = !DILocation(line: 392, column: 15, scope: !1519)
!1534 = !DILocation(line: 394, column: 14, scope: !1519)
!1535 = !DILocation(line: 394, column: 17, scope: !1519)
!1536 = !DILocation(line: 394, column: 21, scope: !1519)
!1537 = !DILocation(line: 394, column: 2, scope: !1519)
!1538 = !DILocation(line: 395, column: 14, scope: !1519)
!1539 = !DILocation(line: 395, column: 17, scope: !1519)
!1540 = !DILocation(line: 395, column: 20, scope: !1519)
!1541 = !DILocation(line: 395, column: 2, scope: !1519)
!1542 = !DILocation(line: 396, column: 14, scope: !1519)
!1543 = !DILocation(line: 396, column: 17, scope: !1519)
!1544 = !DILocation(line: 396, column: 20, scope: !1519)
!1545 = !DILocation(line: 396, column: 2, scope: !1519)
!1546 = !DILocation(line: 397, column: 14, scope: !1519)
!1547 = !DILocation(line: 397, column: 17, scope: !1519)
!1548 = !DILocation(line: 397, column: 20, scope: !1519)
!1549 = !DILocation(line: 397, column: 2, scope: !1519)
!1550 = !DILocation(line: 398, column: 1, scope: !1519)
!1551 = distinct !DISubprogram(name: "_va_mul_m4_series_7", scope: !1, file: !1, line: 399, type: !1552, scopeLine: 403, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1552 = !DISubroutineType(types: !1553)
!1553 = !{null, !47, !47, !47, !47, !47, !47, !47}
!1554 = !DILocalVariable(name: "r", arg: 1, scope: !1551, file: !1, line: 400, type: !47)
!1555 = !DILocation(line: 400, column: 15, scope: !1551)
!1556 = !DILocalVariable(name: "m1", arg: 2, scope: !1551, file: !1, line: 401, type: !47)
!1557 = !DILocation(line: 401, column: 15, scope: !1551)
!1558 = !DILocalVariable(name: "m2", arg: 3, scope: !1551, file: !1, line: 401, type: !47)
!1559 = !DILocation(line: 401, column: 31, scope: !1551)
!1560 = !DILocalVariable(name: "m3", arg: 4, scope: !1551, file: !1, line: 401, type: !47)
!1561 = !DILocation(line: 401, column: 47, scope: !1551)
!1562 = !DILocalVariable(name: "m4", arg: 5, scope: !1551, file: !1, line: 401, type: !47)
!1563 = !DILocation(line: 401, column: 63, scope: !1551)
!1564 = !DILocalVariable(name: "m5", arg: 6, scope: !1551, file: !1, line: 402, type: !47)
!1565 = !DILocation(line: 402, column: 15, scope: !1551)
!1566 = !DILocalVariable(name: "m6", arg: 7, scope: !1551, file: !1, line: 402, type: !47)
!1567 = !DILocation(line: 402, column: 31, scope: !1551)
!1568 = !DILocation(line: 404, column: 14, scope: !1551)
!1569 = !DILocation(line: 404, column: 17, scope: !1551)
!1570 = !DILocation(line: 404, column: 21, scope: !1551)
!1571 = !DILocation(line: 404, column: 2, scope: !1551)
!1572 = !DILocation(line: 405, column: 14, scope: !1551)
!1573 = !DILocation(line: 405, column: 17, scope: !1551)
!1574 = !DILocation(line: 405, column: 20, scope: !1551)
!1575 = !DILocation(line: 405, column: 2, scope: !1551)
!1576 = !DILocation(line: 406, column: 14, scope: !1551)
!1577 = !DILocation(line: 406, column: 17, scope: !1551)
!1578 = !DILocation(line: 406, column: 20, scope: !1551)
!1579 = !DILocation(line: 406, column: 2, scope: !1551)
!1580 = !DILocation(line: 407, column: 14, scope: !1551)
!1581 = !DILocation(line: 407, column: 17, scope: !1551)
!1582 = !DILocation(line: 407, column: 20, scope: !1551)
!1583 = !DILocation(line: 407, column: 2, scope: !1551)
!1584 = !DILocation(line: 408, column: 14, scope: !1551)
!1585 = !DILocation(line: 408, column: 17, scope: !1551)
!1586 = !DILocation(line: 408, column: 20, scope: !1551)
!1587 = !DILocation(line: 408, column: 2, scope: !1551)
!1588 = !DILocation(line: 409, column: 1, scope: !1551)
!1589 = distinct !DISubprogram(name: "_va_mul_m4_series_8", scope: !1, file: !1, line: 410, type: !1590, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1590 = !DISubroutineType(types: !1591)
!1591 = !{null, !47, !47, !47, !47, !47, !47, !47, !47}
!1592 = !DILocalVariable(name: "r", arg: 1, scope: !1589, file: !1, line: 411, type: !47)
!1593 = !DILocation(line: 411, column: 15, scope: !1589)
!1594 = !DILocalVariable(name: "m1", arg: 2, scope: !1589, file: !1, line: 412, type: !47)
!1595 = !DILocation(line: 412, column: 15, scope: !1589)
!1596 = !DILocalVariable(name: "m2", arg: 3, scope: !1589, file: !1, line: 412, type: !47)
!1597 = !DILocation(line: 412, column: 31, scope: !1589)
!1598 = !DILocalVariable(name: "m3", arg: 4, scope: !1589, file: !1, line: 412, type: !47)
!1599 = !DILocation(line: 412, column: 47, scope: !1589)
!1600 = !DILocalVariable(name: "m4", arg: 5, scope: !1589, file: !1, line: 412, type: !47)
!1601 = !DILocation(line: 412, column: 63, scope: !1589)
!1602 = !DILocalVariable(name: "m5", arg: 6, scope: !1589, file: !1, line: 413, type: !47)
!1603 = !DILocation(line: 413, column: 15, scope: !1589)
!1604 = !DILocalVariable(name: "m6", arg: 7, scope: !1589, file: !1, line: 413, type: !47)
!1605 = !DILocation(line: 413, column: 31, scope: !1589)
!1606 = !DILocalVariable(name: "m7", arg: 8, scope: !1589, file: !1, line: 413, type: !47)
!1607 = !DILocation(line: 413, column: 47, scope: !1589)
!1608 = !DILocation(line: 415, column: 14, scope: !1589)
!1609 = !DILocation(line: 415, column: 17, scope: !1589)
!1610 = !DILocation(line: 415, column: 21, scope: !1589)
!1611 = !DILocation(line: 415, column: 2, scope: !1589)
!1612 = !DILocation(line: 416, column: 14, scope: !1589)
!1613 = !DILocation(line: 416, column: 17, scope: !1589)
!1614 = !DILocation(line: 416, column: 20, scope: !1589)
!1615 = !DILocation(line: 416, column: 2, scope: !1589)
!1616 = !DILocation(line: 417, column: 14, scope: !1589)
!1617 = !DILocation(line: 417, column: 17, scope: !1589)
!1618 = !DILocation(line: 417, column: 20, scope: !1589)
!1619 = !DILocation(line: 417, column: 2, scope: !1589)
!1620 = !DILocation(line: 418, column: 14, scope: !1589)
!1621 = !DILocation(line: 418, column: 17, scope: !1589)
!1622 = !DILocation(line: 418, column: 20, scope: !1589)
!1623 = !DILocation(line: 418, column: 2, scope: !1589)
!1624 = !DILocation(line: 419, column: 14, scope: !1589)
!1625 = !DILocation(line: 419, column: 17, scope: !1589)
!1626 = !DILocation(line: 419, column: 20, scope: !1589)
!1627 = !DILocation(line: 419, column: 2, scope: !1589)
!1628 = !DILocation(line: 420, column: 14, scope: !1589)
!1629 = !DILocation(line: 420, column: 17, scope: !1589)
!1630 = !DILocation(line: 420, column: 20, scope: !1589)
!1631 = !DILocation(line: 420, column: 2, scope: !1589)
!1632 = !DILocation(line: 421, column: 1, scope: !1589)
!1633 = distinct !DISubprogram(name: "_va_mul_m4_series_9", scope: !1, file: !1, line: 422, type: !1634, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1634 = !DISubroutineType(types: !1635)
!1635 = !{null, !47, !47, !47, !47, !47, !47, !47, !47, !47}
!1636 = !DILocalVariable(name: "r", arg: 1, scope: !1633, file: !1, line: 423, type: !47)
!1637 = !DILocation(line: 423, column: 15, scope: !1633)
!1638 = !DILocalVariable(name: "m1", arg: 2, scope: !1633, file: !1, line: 424, type: !47)
!1639 = !DILocation(line: 424, column: 15, scope: !1633)
!1640 = !DILocalVariable(name: "m2", arg: 3, scope: !1633, file: !1, line: 424, type: !47)
!1641 = !DILocation(line: 424, column: 31, scope: !1633)
!1642 = !DILocalVariable(name: "m3", arg: 4, scope: !1633, file: !1, line: 424, type: !47)
!1643 = !DILocation(line: 424, column: 47, scope: !1633)
!1644 = !DILocalVariable(name: "m4", arg: 5, scope: !1633, file: !1, line: 424, type: !47)
!1645 = !DILocation(line: 424, column: 63, scope: !1633)
!1646 = !DILocalVariable(name: "m5", arg: 6, scope: !1633, file: !1, line: 425, type: !47)
!1647 = !DILocation(line: 425, column: 15, scope: !1633)
!1648 = !DILocalVariable(name: "m6", arg: 7, scope: !1633, file: !1, line: 425, type: !47)
!1649 = !DILocation(line: 425, column: 31, scope: !1633)
!1650 = !DILocalVariable(name: "m7", arg: 8, scope: !1633, file: !1, line: 425, type: !47)
!1651 = !DILocation(line: 425, column: 47, scope: !1633)
!1652 = !DILocalVariable(name: "m8", arg: 9, scope: !1633, file: !1, line: 425, type: !47)
!1653 = !DILocation(line: 425, column: 63, scope: !1633)
!1654 = !DILocation(line: 427, column: 14, scope: !1633)
!1655 = !DILocation(line: 427, column: 17, scope: !1633)
!1656 = !DILocation(line: 427, column: 21, scope: !1633)
!1657 = !DILocation(line: 427, column: 2, scope: !1633)
!1658 = !DILocation(line: 428, column: 14, scope: !1633)
!1659 = !DILocation(line: 428, column: 17, scope: !1633)
!1660 = !DILocation(line: 428, column: 20, scope: !1633)
!1661 = !DILocation(line: 428, column: 2, scope: !1633)
!1662 = !DILocation(line: 429, column: 14, scope: !1633)
!1663 = !DILocation(line: 429, column: 17, scope: !1633)
!1664 = !DILocation(line: 429, column: 20, scope: !1633)
!1665 = !DILocation(line: 429, column: 2, scope: !1633)
!1666 = !DILocation(line: 430, column: 14, scope: !1633)
!1667 = !DILocation(line: 430, column: 17, scope: !1633)
!1668 = !DILocation(line: 430, column: 20, scope: !1633)
!1669 = !DILocation(line: 430, column: 2, scope: !1633)
!1670 = !DILocation(line: 431, column: 14, scope: !1633)
!1671 = !DILocation(line: 431, column: 17, scope: !1633)
!1672 = !DILocation(line: 431, column: 20, scope: !1633)
!1673 = !DILocation(line: 431, column: 2, scope: !1633)
!1674 = !DILocation(line: 432, column: 14, scope: !1633)
!1675 = !DILocation(line: 432, column: 17, scope: !1633)
!1676 = !DILocation(line: 432, column: 20, scope: !1633)
!1677 = !DILocation(line: 432, column: 2, scope: !1633)
!1678 = !DILocation(line: 433, column: 14, scope: !1633)
!1679 = !DILocation(line: 433, column: 17, scope: !1633)
!1680 = !DILocation(line: 433, column: 20, scope: !1633)
!1681 = !DILocation(line: 433, column: 2, scope: !1633)
!1682 = !DILocation(line: 434, column: 1, scope: !1633)
!1683 = distinct !DISubprogram(name: "mul_v2_m3v2", scope: !1, file: !1, line: 437, type: !1684, scopeLine: 438, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1684 = !DISubroutineType(types: !1685)
!1685 = !{null, !1686, !35, !1686}
!1686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!1687 = !DILocalVariable(name: "r", arg: 1, scope: !1683, file: !1, line: 437, type: !1686)
!1688 = !DILocation(line: 437, column: 24, scope: !1683)
!1689 = !DILocalVariable(name: "m", arg: 2, scope: !1683, file: !1, line: 437, type: !35)
!1690 = !DILocation(line: 437, column: 36, scope: !1683)
!1691 = !DILocalVariable(name: "v", arg: 3, scope: !1683, file: !1, line: 437, type: !1686)
!1692 = !DILocation(line: 437, column: 51, scope: !1683)
!1693 = !DILocalVariable(name: "temp", scope: !1683, file: !1, line: 439, type: !36)
!1694 = !DILocation(line: 439, column: 8, scope: !1683)
!1695 = !DILocalVariable(name: "warped", scope: !1683, file: !1, line: 439, type: !36)
!1696 = !DILocation(line: 439, column: 17, scope: !1683)
!1697 = !DILocation(line: 441, column: 13, scope: !1683)
!1698 = !DILocation(line: 441, column: 19, scope: !1683)
!1699 = !DILocation(line: 441, column: 2, scope: !1683)
!1700 = !DILocation(line: 442, column: 2, scope: !1683)
!1701 = !DILocation(line: 442, column: 10, scope: !1683)
!1702 = !DILocation(line: 444, column: 14, scope: !1683)
!1703 = !DILocation(line: 444, column: 22, scope: !1683)
!1704 = !DILocation(line: 444, column: 25, scope: !1683)
!1705 = !DILocation(line: 444, column: 2, scope: !1683)
!1706 = !DILocation(line: 446, column: 9, scope: !1683)
!1707 = !DILocation(line: 446, column: 21, scope: !1683)
!1708 = !DILocation(line: 446, column: 19, scope: !1683)
!1709 = !DILocation(line: 446, column: 2, scope: !1683)
!1710 = !DILocation(line: 446, column: 7, scope: !1683)
!1711 = !DILocation(line: 447, column: 9, scope: !1683)
!1712 = !DILocation(line: 447, column: 21, scope: !1683)
!1713 = !DILocation(line: 447, column: 19, scope: !1683)
!1714 = !DILocation(line: 447, column: 2, scope: !1683)
!1715 = !DILocation(line: 447, column: 7, scope: !1683)
!1716 = !DILocation(line: 448, column: 1, scope: !1683)
!1717 = distinct !DISubprogram(name: "copy_v2_v2", scope: !1718, file: !1718, line: 58, type: !1719, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1718 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_vector_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1719 = !DISubroutineType(types: !1720)
!1720 = !{null, !1686, !1721}
!1721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1722, size: 64)
!1722 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!1723 = !DILocalVariable(name: "r", arg: 1, scope: !1717, file: !1718, line: 58, type: !1686)
!1724 = !DILocation(line: 58, column: 31, scope: !1717)
!1725 = !DILocalVariable(name: "a", arg: 2, scope: !1717, file: !1718, line: 58, type: !1721)
!1726 = !DILocation(line: 58, column: 49, scope: !1717)
!1727 = !DILocation(line: 60, column: 9, scope: !1717)
!1728 = !DILocation(line: 60, column: 2, scope: !1717)
!1729 = !DILocation(line: 60, column: 7, scope: !1717)
!1730 = !DILocation(line: 61, column: 9, scope: !1717)
!1731 = !DILocation(line: 61, column: 2, scope: !1717)
!1732 = !DILocation(line: 61, column: 7, scope: !1717)
!1733 = !DILocation(line: 62, column: 1, scope: !1717)
!1734 = distinct !DISubprogram(name: "mul_v3_m3v3", scope: !1, file: !1, line: 570, type: !1735, scopeLine: 571, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1735 = !DISubroutineType(types: !1736)
!1736 = !{null, !1686, !35, !1721}
!1737 = !DILocalVariable(name: "r", arg: 1, scope: !1734, file: !1, line: 570, type: !1686)
!1738 = !DILocation(line: 570, column: 24, scope: !1734)
!1739 = !DILocalVariable(name: "M", arg: 2, scope: !1734, file: !1, line: 570, type: !35)
!1740 = !DILocation(line: 570, column: 36, scope: !1734)
!1741 = !DILocalVariable(name: "a", arg: 3, scope: !1734, file: !1, line: 570, type: !1721)
!1742 = !DILocation(line: 570, column: 57, scope: !1734)
!1743 = !DILocation(line: 574, column: 9, scope: !1734)
!1744 = !DILocation(line: 574, column: 19, scope: !1734)
!1745 = !DILocation(line: 574, column: 17, scope: !1734)
!1746 = !DILocation(line: 574, column: 26, scope: !1734)
!1747 = !DILocation(line: 574, column: 36, scope: !1734)
!1748 = !DILocation(line: 574, column: 34, scope: !1734)
!1749 = !DILocation(line: 574, column: 24, scope: !1734)
!1750 = !DILocation(line: 574, column: 43, scope: !1734)
!1751 = !DILocation(line: 574, column: 53, scope: !1734)
!1752 = !DILocation(line: 574, column: 51, scope: !1734)
!1753 = !DILocation(line: 574, column: 41, scope: !1734)
!1754 = !DILocation(line: 574, column: 2, scope: !1734)
!1755 = !DILocation(line: 574, column: 7, scope: !1734)
!1756 = !DILocation(line: 575, column: 9, scope: !1734)
!1757 = !DILocation(line: 575, column: 19, scope: !1734)
!1758 = !DILocation(line: 575, column: 17, scope: !1734)
!1759 = !DILocation(line: 575, column: 26, scope: !1734)
!1760 = !DILocation(line: 575, column: 36, scope: !1734)
!1761 = !DILocation(line: 575, column: 34, scope: !1734)
!1762 = !DILocation(line: 575, column: 24, scope: !1734)
!1763 = !DILocation(line: 575, column: 43, scope: !1734)
!1764 = !DILocation(line: 575, column: 53, scope: !1734)
!1765 = !DILocation(line: 575, column: 51, scope: !1734)
!1766 = !DILocation(line: 575, column: 41, scope: !1734)
!1767 = !DILocation(line: 575, column: 2, scope: !1734)
!1768 = !DILocation(line: 575, column: 7, scope: !1734)
!1769 = !DILocation(line: 576, column: 9, scope: !1734)
!1770 = !DILocation(line: 576, column: 19, scope: !1734)
!1771 = !DILocation(line: 576, column: 17, scope: !1734)
!1772 = !DILocation(line: 576, column: 26, scope: !1734)
!1773 = !DILocation(line: 576, column: 36, scope: !1734)
!1774 = !DILocation(line: 576, column: 34, scope: !1734)
!1775 = !DILocation(line: 576, column: 24, scope: !1734)
!1776 = !DILocation(line: 576, column: 43, scope: !1734)
!1777 = !DILocation(line: 576, column: 53, scope: !1734)
!1778 = !DILocation(line: 576, column: 51, scope: !1734)
!1779 = !DILocation(line: 576, column: 41, scope: !1734)
!1780 = !DILocation(line: 576, column: 2, scope: !1734)
!1781 = !DILocation(line: 576, column: 7, scope: !1734)
!1782 = !DILocation(line: 577, column: 1, scope: !1734)
!1783 = distinct !DISubprogram(name: "mul_m3_v2", scope: !1, file: !1, line: 450, type: !1784, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1784 = !DISubroutineType(types: !1785)
!1785 = !{null, !35, !1686}
!1786 = !DILocalVariable(name: "m", arg: 1, scope: !1783, file: !1, line: 450, type: !35)
!1787 = !DILocation(line: 450, column: 22, scope: !1783)
!1788 = !DILocalVariable(name: "r", arg: 2, scope: !1783, file: !1, line: 450, type: !1686)
!1789 = !DILocation(line: 450, column: 37, scope: !1783)
!1790 = !DILocation(line: 452, column: 14, scope: !1783)
!1791 = !DILocation(line: 452, column: 17, scope: !1783)
!1792 = !DILocation(line: 452, column: 20, scope: !1783)
!1793 = !DILocation(line: 452, column: 2, scope: !1783)
!1794 = !DILocation(line: 453, column: 1, scope: !1783)
!1795 = distinct !DISubprogram(name: "mul_m4_v3", scope: !1, file: !1, line: 455, type: !1796, scopeLine: 456, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1796 = !DISubroutineType(types: !1797)
!1797 = !{null, !47, !1686}
!1798 = !DILocalVariable(name: "mat", arg: 1, scope: !1795, file: !1, line: 455, type: !47)
!1799 = !DILocation(line: 455, column: 22, scope: !1795)
!1800 = !DILocalVariable(name: "vec", arg: 2, scope: !1795, file: !1, line: 455, type: !1686)
!1801 = !DILocation(line: 455, column: 39, scope: !1795)
!1802 = !DILocalVariable(name: "x", scope: !1795, file: !1, line: 457, type: !1722)
!1803 = !DILocation(line: 457, column: 14, scope: !1795)
!1804 = !DILocation(line: 457, column: 18, scope: !1795)
!1805 = !DILocalVariable(name: "y", scope: !1795, file: !1, line: 458, type: !1722)
!1806 = !DILocation(line: 458, column: 14, scope: !1795)
!1807 = !DILocation(line: 458, column: 18, scope: !1795)
!1808 = !DILocation(line: 460, column: 11, scope: !1795)
!1809 = !DILocation(line: 460, column: 15, scope: !1795)
!1810 = !DILocation(line: 460, column: 13, scope: !1795)
!1811 = !DILocation(line: 460, column: 27, scope: !1795)
!1812 = !DILocation(line: 460, column: 31, scope: !1795)
!1813 = !DILocation(line: 460, column: 29, scope: !1795)
!1814 = !DILocation(line: 460, column: 25, scope: !1795)
!1815 = !DILocation(line: 460, column: 43, scope: !1795)
!1816 = !DILocation(line: 460, column: 55, scope: !1795)
!1817 = !DILocation(line: 460, column: 53, scope: !1795)
!1818 = !DILocation(line: 460, column: 41, scope: !1795)
!1819 = !DILocation(line: 460, column: 64, scope: !1795)
!1820 = !DILocation(line: 460, column: 62, scope: !1795)
!1821 = !DILocation(line: 460, column: 2, scope: !1795)
!1822 = !DILocation(line: 460, column: 9, scope: !1795)
!1823 = !DILocation(line: 461, column: 11, scope: !1795)
!1824 = !DILocation(line: 461, column: 15, scope: !1795)
!1825 = !DILocation(line: 461, column: 13, scope: !1795)
!1826 = !DILocation(line: 461, column: 27, scope: !1795)
!1827 = !DILocation(line: 461, column: 31, scope: !1795)
!1828 = !DILocation(line: 461, column: 29, scope: !1795)
!1829 = !DILocation(line: 461, column: 25, scope: !1795)
!1830 = !DILocation(line: 461, column: 43, scope: !1795)
!1831 = !DILocation(line: 461, column: 55, scope: !1795)
!1832 = !DILocation(line: 461, column: 53, scope: !1795)
!1833 = !DILocation(line: 461, column: 41, scope: !1795)
!1834 = !DILocation(line: 461, column: 64, scope: !1795)
!1835 = !DILocation(line: 461, column: 62, scope: !1795)
!1836 = !DILocation(line: 461, column: 2, scope: !1795)
!1837 = !DILocation(line: 461, column: 9, scope: !1795)
!1838 = !DILocation(line: 462, column: 11, scope: !1795)
!1839 = !DILocation(line: 462, column: 15, scope: !1795)
!1840 = !DILocation(line: 462, column: 13, scope: !1795)
!1841 = !DILocation(line: 462, column: 27, scope: !1795)
!1842 = !DILocation(line: 462, column: 31, scope: !1795)
!1843 = !DILocation(line: 462, column: 29, scope: !1795)
!1844 = !DILocation(line: 462, column: 25, scope: !1795)
!1845 = !DILocation(line: 462, column: 43, scope: !1795)
!1846 = !DILocation(line: 462, column: 55, scope: !1795)
!1847 = !DILocation(line: 462, column: 53, scope: !1795)
!1848 = !DILocation(line: 462, column: 41, scope: !1795)
!1849 = !DILocation(line: 462, column: 64, scope: !1795)
!1850 = !DILocation(line: 462, column: 62, scope: !1795)
!1851 = !DILocation(line: 462, column: 2, scope: !1795)
!1852 = !DILocation(line: 462, column: 9, scope: !1795)
!1853 = !DILocation(line: 463, column: 1, scope: !1795)
!1854 = distinct !DISubprogram(name: "mul_v3_m4v3", scope: !1, file: !1, line: 465, type: !1855, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1855 = !DISubroutineType(types: !1856)
!1856 = !{null, !1686, !47, !1721}
!1857 = !DILocalVariable(name: "r", arg: 1, scope: !1854, file: !1, line: 465, type: !1686)
!1858 = !DILocation(line: 465, column: 24, scope: !1854)
!1859 = !DILocalVariable(name: "mat", arg: 2, scope: !1854, file: !1, line: 465, type: !47)
!1860 = !DILocation(line: 465, column: 36, scope: !1854)
!1861 = !DILocalVariable(name: "vec", arg: 3, scope: !1854, file: !1, line: 465, type: !1721)
!1862 = !DILocation(line: 465, column: 59, scope: !1854)
!1863 = !DILocalVariable(name: "x", scope: !1854, file: !1, line: 467, type: !1722)
!1864 = !DILocation(line: 467, column: 14, scope: !1854)
!1865 = !DILocation(line: 467, column: 18, scope: !1854)
!1866 = !DILocalVariable(name: "y", scope: !1854, file: !1, line: 468, type: !1722)
!1867 = !DILocation(line: 468, column: 14, scope: !1854)
!1868 = !DILocation(line: 468, column: 18, scope: !1854)
!1869 = !DILocation(line: 470, column: 9, scope: !1854)
!1870 = !DILocation(line: 470, column: 13, scope: !1854)
!1871 = !DILocation(line: 470, column: 11, scope: !1854)
!1872 = !DILocation(line: 470, column: 25, scope: !1854)
!1873 = !DILocation(line: 470, column: 29, scope: !1854)
!1874 = !DILocation(line: 470, column: 27, scope: !1854)
!1875 = !DILocation(line: 470, column: 23, scope: !1854)
!1876 = !DILocation(line: 470, column: 41, scope: !1854)
!1877 = !DILocation(line: 470, column: 53, scope: !1854)
!1878 = !DILocation(line: 470, column: 51, scope: !1854)
!1879 = !DILocation(line: 470, column: 39, scope: !1854)
!1880 = !DILocation(line: 470, column: 62, scope: !1854)
!1881 = !DILocation(line: 470, column: 60, scope: !1854)
!1882 = !DILocation(line: 470, column: 2, scope: !1854)
!1883 = !DILocation(line: 470, column: 7, scope: !1854)
!1884 = !DILocation(line: 471, column: 9, scope: !1854)
!1885 = !DILocation(line: 471, column: 13, scope: !1854)
!1886 = !DILocation(line: 471, column: 11, scope: !1854)
!1887 = !DILocation(line: 471, column: 25, scope: !1854)
!1888 = !DILocation(line: 471, column: 29, scope: !1854)
!1889 = !DILocation(line: 471, column: 27, scope: !1854)
!1890 = !DILocation(line: 471, column: 23, scope: !1854)
!1891 = !DILocation(line: 471, column: 41, scope: !1854)
!1892 = !DILocation(line: 471, column: 53, scope: !1854)
!1893 = !DILocation(line: 471, column: 51, scope: !1854)
!1894 = !DILocation(line: 471, column: 39, scope: !1854)
!1895 = !DILocation(line: 471, column: 62, scope: !1854)
!1896 = !DILocation(line: 471, column: 60, scope: !1854)
!1897 = !DILocation(line: 471, column: 2, scope: !1854)
!1898 = !DILocation(line: 471, column: 7, scope: !1854)
!1899 = !DILocation(line: 472, column: 9, scope: !1854)
!1900 = !DILocation(line: 472, column: 13, scope: !1854)
!1901 = !DILocation(line: 472, column: 11, scope: !1854)
!1902 = !DILocation(line: 472, column: 25, scope: !1854)
!1903 = !DILocation(line: 472, column: 29, scope: !1854)
!1904 = !DILocation(line: 472, column: 27, scope: !1854)
!1905 = !DILocation(line: 472, column: 23, scope: !1854)
!1906 = !DILocation(line: 472, column: 41, scope: !1854)
!1907 = !DILocation(line: 472, column: 53, scope: !1854)
!1908 = !DILocation(line: 472, column: 51, scope: !1854)
!1909 = !DILocation(line: 472, column: 39, scope: !1854)
!1910 = !DILocation(line: 472, column: 62, scope: !1854)
!1911 = !DILocation(line: 472, column: 60, scope: !1854)
!1912 = !DILocation(line: 472, column: 2, scope: !1854)
!1913 = !DILocation(line: 472, column: 7, scope: !1854)
!1914 = !DILocation(line: 473, column: 1, scope: !1854)
!1915 = distinct !DISubprogram(name: "mul_v2_m4v3", scope: !1, file: !1, line: 475, type: !1855, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1916 = !DILocalVariable(name: "r", arg: 1, scope: !1915, file: !1, line: 475, type: !1686)
!1917 = !DILocation(line: 475, column: 24, scope: !1915)
!1918 = !DILocalVariable(name: "mat", arg: 2, scope: !1915, file: !1, line: 475, type: !47)
!1919 = !DILocation(line: 475, column: 36, scope: !1915)
!1920 = !DILocalVariable(name: "vec", arg: 3, scope: !1915, file: !1, line: 475, type: !1721)
!1921 = !DILocation(line: 475, column: 59, scope: !1915)
!1922 = !DILocalVariable(name: "x", scope: !1915, file: !1, line: 477, type: !1722)
!1923 = !DILocation(line: 477, column: 14, scope: !1915)
!1924 = !DILocation(line: 477, column: 18, scope: !1915)
!1925 = !DILocation(line: 479, column: 9, scope: !1915)
!1926 = !DILocation(line: 479, column: 13, scope: !1915)
!1927 = !DILocation(line: 479, column: 11, scope: !1915)
!1928 = !DILocation(line: 479, column: 25, scope: !1915)
!1929 = !DILocation(line: 479, column: 34, scope: !1915)
!1930 = !DILocation(line: 479, column: 32, scope: !1915)
!1931 = !DILocation(line: 479, column: 23, scope: !1915)
!1932 = !DILocation(line: 479, column: 46, scope: !1915)
!1933 = !DILocation(line: 479, column: 58, scope: !1915)
!1934 = !DILocation(line: 479, column: 56, scope: !1915)
!1935 = !DILocation(line: 479, column: 44, scope: !1915)
!1936 = !DILocation(line: 479, column: 67, scope: !1915)
!1937 = !DILocation(line: 479, column: 65, scope: !1915)
!1938 = !DILocation(line: 479, column: 2, scope: !1915)
!1939 = !DILocation(line: 479, column: 7, scope: !1915)
!1940 = !DILocation(line: 480, column: 9, scope: !1915)
!1941 = !DILocation(line: 480, column: 13, scope: !1915)
!1942 = !DILocation(line: 480, column: 11, scope: !1915)
!1943 = !DILocation(line: 480, column: 25, scope: !1915)
!1944 = !DILocation(line: 480, column: 34, scope: !1915)
!1945 = !DILocation(line: 480, column: 32, scope: !1915)
!1946 = !DILocation(line: 480, column: 23, scope: !1915)
!1947 = !DILocation(line: 480, column: 46, scope: !1915)
!1948 = !DILocation(line: 480, column: 58, scope: !1915)
!1949 = !DILocation(line: 480, column: 56, scope: !1915)
!1950 = !DILocation(line: 480, column: 44, scope: !1915)
!1951 = !DILocation(line: 480, column: 67, scope: !1915)
!1952 = !DILocation(line: 480, column: 65, scope: !1915)
!1953 = !DILocation(line: 480, column: 2, scope: !1915)
!1954 = !DILocation(line: 480, column: 7, scope: !1915)
!1955 = !DILocation(line: 481, column: 1, scope: !1915)
!1956 = distinct !DISubprogram(name: "mul_v2_m2v2", scope: !1, file: !1, line: 483, type: !1957, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1957 = !DISubroutineType(types: !1958)
!1958 = !{null, !1686, !23, !1721}
!1959 = !DILocalVariable(name: "r", arg: 1, scope: !1956, file: !1, line: 483, type: !1686)
!1960 = !DILocation(line: 483, column: 24, scope: !1956)
!1961 = !DILocalVariable(name: "mat", arg: 2, scope: !1956, file: !1, line: 483, type: !23)
!1962 = !DILocation(line: 483, column: 36, scope: !1956)
!1963 = !DILocalVariable(name: "vec", arg: 3, scope: !1956, file: !1, line: 483, type: !1721)
!1964 = !DILocation(line: 483, column: 59, scope: !1956)
!1965 = !DILocalVariable(name: "x", scope: !1956, file: !1, line: 485, type: !1722)
!1966 = !DILocation(line: 485, column: 14, scope: !1956)
!1967 = !DILocation(line: 485, column: 18, scope: !1956)
!1968 = !DILocation(line: 487, column: 9, scope: !1956)
!1969 = !DILocation(line: 487, column: 21, scope: !1956)
!1970 = !DILocation(line: 487, column: 19, scope: !1956)
!1971 = !DILocation(line: 487, column: 25, scope: !1956)
!1972 = !DILocation(line: 487, column: 37, scope: !1956)
!1973 = !DILocation(line: 487, column: 35, scope: !1956)
!1974 = !DILocation(line: 487, column: 23, scope: !1956)
!1975 = !DILocation(line: 487, column: 2, scope: !1956)
!1976 = !DILocation(line: 487, column: 7, scope: !1956)
!1977 = !DILocation(line: 488, column: 9, scope: !1956)
!1978 = !DILocation(line: 488, column: 21, scope: !1956)
!1979 = !DILocation(line: 488, column: 19, scope: !1956)
!1980 = !DILocation(line: 488, column: 25, scope: !1956)
!1981 = !DILocation(line: 488, column: 37, scope: !1956)
!1982 = !DILocation(line: 488, column: 35, scope: !1956)
!1983 = !DILocation(line: 488, column: 23, scope: !1956)
!1984 = !DILocation(line: 488, column: 2, scope: !1956)
!1985 = !DILocation(line: 488, column: 7, scope: !1956)
!1986 = !DILocation(line: 489, column: 1, scope: !1956)
!1987 = distinct !DISubprogram(name: "mul_m2v2", scope: !1, file: !1, line: 491, type: !1988, scopeLine: 492, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!1988 = !DISubroutineType(types: !1989)
!1989 = !{null, !23, !1686}
!1990 = !DILocalVariable(name: "mat", arg: 1, scope: !1987, file: !1, line: 491, type: !23)
!1991 = !DILocation(line: 491, column: 21, scope: !1987)
!1992 = !DILocalVariable(name: "vec", arg: 2, scope: !1987, file: !1, line: 491, type: !1686)
!1993 = !DILocation(line: 491, column: 38, scope: !1987)
!1994 = !DILocation(line: 493, column: 14, scope: !1987)
!1995 = !DILocation(line: 493, column: 19, scope: !1987)
!1996 = !DILocation(line: 493, column: 24, scope: !1987)
!1997 = !DILocation(line: 493, column: 2, scope: !1987)
!1998 = !DILocation(line: 494, column: 1, scope: !1987)
!1999 = distinct !DISubprogram(name: "mul_mat3_m4_v3", scope: !1, file: !1, line: 497, type: !1796, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2000 = !DILocalVariable(name: "mat", arg: 1, scope: !1999, file: !1, line: 497, type: !47)
!2001 = !DILocation(line: 497, column: 27, scope: !1999)
!2002 = !DILocalVariable(name: "vec", arg: 2, scope: !1999, file: !1, line: 497, type: !1686)
!2003 = !DILocation(line: 497, column: 44, scope: !1999)
!2004 = !DILocalVariable(name: "x", scope: !1999, file: !1, line: 499, type: !1722)
!2005 = !DILocation(line: 499, column: 14, scope: !1999)
!2006 = !DILocation(line: 499, column: 18, scope: !1999)
!2007 = !DILocalVariable(name: "y", scope: !1999, file: !1, line: 500, type: !1722)
!2008 = !DILocation(line: 500, column: 14, scope: !1999)
!2009 = !DILocation(line: 500, column: 18, scope: !1999)
!2010 = !DILocation(line: 502, column: 11, scope: !1999)
!2011 = !DILocation(line: 502, column: 15, scope: !1999)
!2012 = !DILocation(line: 502, column: 13, scope: !1999)
!2013 = !DILocation(line: 502, column: 27, scope: !1999)
!2014 = !DILocation(line: 502, column: 31, scope: !1999)
!2015 = !DILocation(line: 502, column: 29, scope: !1999)
!2016 = !DILocation(line: 502, column: 25, scope: !1999)
!2017 = !DILocation(line: 502, column: 43, scope: !1999)
!2018 = !DILocation(line: 502, column: 55, scope: !1999)
!2019 = !DILocation(line: 502, column: 53, scope: !1999)
!2020 = !DILocation(line: 502, column: 41, scope: !1999)
!2021 = !DILocation(line: 502, column: 2, scope: !1999)
!2022 = !DILocation(line: 502, column: 9, scope: !1999)
!2023 = !DILocation(line: 503, column: 11, scope: !1999)
!2024 = !DILocation(line: 503, column: 15, scope: !1999)
!2025 = !DILocation(line: 503, column: 13, scope: !1999)
!2026 = !DILocation(line: 503, column: 27, scope: !1999)
!2027 = !DILocation(line: 503, column: 31, scope: !1999)
!2028 = !DILocation(line: 503, column: 29, scope: !1999)
!2029 = !DILocation(line: 503, column: 25, scope: !1999)
!2030 = !DILocation(line: 503, column: 43, scope: !1999)
!2031 = !DILocation(line: 503, column: 55, scope: !1999)
!2032 = !DILocation(line: 503, column: 53, scope: !1999)
!2033 = !DILocation(line: 503, column: 41, scope: !1999)
!2034 = !DILocation(line: 503, column: 2, scope: !1999)
!2035 = !DILocation(line: 503, column: 9, scope: !1999)
!2036 = !DILocation(line: 504, column: 11, scope: !1999)
!2037 = !DILocation(line: 504, column: 15, scope: !1999)
!2038 = !DILocation(line: 504, column: 13, scope: !1999)
!2039 = !DILocation(line: 504, column: 27, scope: !1999)
!2040 = !DILocation(line: 504, column: 31, scope: !1999)
!2041 = !DILocation(line: 504, column: 29, scope: !1999)
!2042 = !DILocation(line: 504, column: 25, scope: !1999)
!2043 = !DILocation(line: 504, column: 43, scope: !1999)
!2044 = !DILocation(line: 504, column: 55, scope: !1999)
!2045 = !DILocation(line: 504, column: 53, scope: !1999)
!2046 = !DILocation(line: 504, column: 41, scope: !1999)
!2047 = !DILocation(line: 504, column: 2, scope: !1999)
!2048 = !DILocation(line: 504, column: 9, scope: !1999)
!2049 = !DILocation(line: 505, column: 1, scope: !1999)
!2050 = distinct !DISubprogram(name: "mul_project_m4_v3", scope: !1, file: !1, line: 507, type: !1796, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2051 = !DILocalVariable(name: "mat", arg: 1, scope: !2050, file: !1, line: 507, type: !47)
!2052 = !DILocation(line: 507, column: 30, scope: !2050)
!2053 = !DILocalVariable(name: "vec", arg: 2, scope: !2050, file: !1, line: 507, type: !1686)
!2054 = !DILocation(line: 507, column: 47, scope: !2050)
!2055 = !DILocalVariable(name: "w", scope: !2050, file: !1, line: 509, type: !1722)
!2056 = !DILocation(line: 509, column: 14, scope: !2050)
!2057 = !DILocation(line: 509, column: 41, scope: !2050)
!2058 = !DILocation(line: 509, column: 46, scope: !2050)
!2059 = !DILocation(line: 509, column: 18, scope: !2050)
!2060 = !DILocation(line: 510, column: 12, scope: !2050)
!2061 = !DILocation(line: 510, column: 17, scope: !2050)
!2062 = !DILocation(line: 510, column: 2, scope: !2050)
!2063 = !DILocation(line: 512, column: 12, scope: !2050)
!2064 = !DILocation(line: 512, column: 2, scope: !2050)
!2065 = !DILocation(line: 512, column: 9, scope: !2050)
!2066 = !DILocation(line: 513, column: 12, scope: !2050)
!2067 = !DILocation(line: 513, column: 2, scope: !2050)
!2068 = !DILocation(line: 513, column: 9, scope: !2050)
!2069 = !DILocation(line: 514, column: 12, scope: !2050)
!2070 = !DILocation(line: 514, column: 2, scope: !2050)
!2071 = !DILocation(line: 514, column: 9, scope: !2050)
!2072 = !DILocation(line: 515, column: 1, scope: !2050)
!2073 = distinct !DISubprogram(name: "mul_project_m4_v3_zfac", scope: !1718, file: !1718, line: 461, type: !2074, scopeLine: 462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2074 = !DISubroutineType(types: !2075)
!2075 = !{!4, !47, !1721}
!2076 = !DILocalVariable(name: "mat", arg: 1, scope: !2073, file: !1718, line: 461, type: !47)
!2077 = !DILocation(line: 461, column: 44, scope: !2073)
!2078 = !DILocalVariable(name: "co", arg: 2, scope: !2073, file: !1718, line: 461, type: !1721)
!2079 = !DILocation(line: 461, column: 67, scope: !2073)
!2080 = !DILocation(line: 463, column: 10, scope: !2073)
!2081 = !DILocation(line: 463, column: 22, scope: !2073)
!2082 = !DILocation(line: 463, column: 20, scope: !2073)
!2083 = !DILocation(line: 464, column: 10, scope: !2073)
!2084 = !DILocation(line: 464, column: 22, scope: !2073)
!2085 = !DILocation(line: 464, column: 20, scope: !2073)
!2086 = !DILocation(line: 463, column: 29, scope: !2073)
!2087 = !DILocation(line: 465, column: 10, scope: !2073)
!2088 = !DILocation(line: 465, column: 22, scope: !2073)
!2089 = !DILocation(line: 465, column: 20, scope: !2073)
!2090 = !DILocation(line: 464, column: 29, scope: !2073)
!2091 = !DILocation(line: 465, column: 31, scope: !2073)
!2092 = !DILocation(line: 465, column: 29, scope: !2073)
!2093 = !DILocation(line: 463, column: 2, scope: !2073)
!2094 = distinct !DISubprogram(name: "mul_v3_project_m4_v3", scope: !1, file: !1, line: 517, type: !1855, scopeLine: 518, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2095 = !DILocalVariable(name: "r", arg: 1, scope: !2094, file: !1, line: 517, type: !1686)
!2096 = !DILocation(line: 517, column: 33, scope: !2094)
!2097 = !DILocalVariable(name: "mat", arg: 2, scope: !2094, file: !1, line: 517, type: !47)
!2098 = !DILocation(line: 517, column: 45, scope: !2094)
!2099 = !DILocalVariable(name: "vec", arg: 3, scope: !2094, file: !1, line: 517, type: !1721)
!2100 = !DILocation(line: 517, column: 68, scope: !2094)
!2101 = !DILocalVariable(name: "w", scope: !2094, file: !1, line: 519, type: !1722)
!2102 = !DILocation(line: 519, column: 14, scope: !2094)
!2103 = !DILocation(line: 519, column: 41, scope: !2094)
!2104 = !DILocation(line: 519, column: 46, scope: !2094)
!2105 = !DILocation(line: 519, column: 18, scope: !2094)
!2106 = !DILocation(line: 520, column: 14, scope: !2094)
!2107 = !DILocation(line: 520, column: 17, scope: !2094)
!2108 = !DILocation(line: 520, column: 22, scope: !2094)
!2109 = !DILocation(line: 520, column: 2, scope: !2094)
!2110 = !DILocation(line: 522, column: 10, scope: !2094)
!2111 = !DILocation(line: 522, column: 2, scope: !2094)
!2112 = !DILocation(line: 522, column: 7, scope: !2094)
!2113 = !DILocation(line: 523, column: 10, scope: !2094)
!2114 = !DILocation(line: 523, column: 2, scope: !2094)
!2115 = !DILocation(line: 523, column: 7, scope: !2094)
!2116 = !DILocation(line: 524, column: 10, scope: !2094)
!2117 = !DILocation(line: 524, column: 2, scope: !2094)
!2118 = !DILocation(line: 524, column: 7, scope: !2094)
!2119 = !DILocation(line: 525, column: 1, scope: !2094)
!2120 = distinct !DISubprogram(name: "mul_v2_project_m4_v3", scope: !1, file: !1, line: 527, type: !1855, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2121 = !DILocalVariable(name: "r", arg: 1, scope: !2120, file: !1, line: 527, type: !1686)
!2122 = !DILocation(line: 527, column: 33, scope: !2120)
!2123 = !DILocalVariable(name: "mat", arg: 2, scope: !2120, file: !1, line: 527, type: !47)
!2124 = !DILocation(line: 527, column: 45, scope: !2120)
!2125 = !DILocalVariable(name: "vec", arg: 3, scope: !2120, file: !1, line: 527, type: !1721)
!2126 = !DILocation(line: 527, column: 68, scope: !2120)
!2127 = !DILocalVariable(name: "w", scope: !2120, file: !1, line: 529, type: !1722)
!2128 = !DILocation(line: 529, column: 14, scope: !2120)
!2129 = !DILocation(line: 529, column: 41, scope: !2120)
!2130 = !DILocation(line: 529, column: 46, scope: !2120)
!2131 = !DILocation(line: 529, column: 18, scope: !2120)
!2132 = !DILocation(line: 530, column: 14, scope: !2120)
!2133 = !DILocation(line: 530, column: 17, scope: !2120)
!2134 = !DILocation(line: 530, column: 22, scope: !2120)
!2135 = !DILocation(line: 530, column: 2, scope: !2120)
!2136 = !DILocation(line: 532, column: 10, scope: !2120)
!2137 = !DILocation(line: 532, column: 2, scope: !2120)
!2138 = !DILocation(line: 532, column: 7, scope: !2120)
!2139 = !DILocation(line: 533, column: 10, scope: !2120)
!2140 = !DILocation(line: 533, column: 2, scope: !2120)
!2141 = !DILocation(line: 533, column: 7, scope: !2120)
!2142 = !DILocation(line: 534, column: 1, scope: !2120)
!2143 = distinct !DISubprogram(name: "mul_v4_m4v4", scope: !1, file: !1, line: 536, type: !1855, scopeLine: 537, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2144 = !DILocalVariable(name: "r", arg: 1, scope: !2143, file: !1, line: 536, type: !1686)
!2145 = !DILocation(line: 536, column: 24, scope: !2143)
!2146 = !DILocalVariable(name: "mat", arg: 2, scope: !2143, file: !1, line: 536, type: !47)
!2147 = !DILocation(line: 536, column: 36, scope: !2143)
!2148 = !DILocalVariable(name: "v", arg: 3, scope: !2143, file: !1, line: 536, type: !1721)
!2149 = !DILocation(line: 536, column: 59, scope: !2143)
!2150 = !DILocalVariable(name: "x", scope: !2143, file: !1, line: 538, type: !1722)
!2151 = !DILocation(line: 538, column: 14, scope: !2143)
!2152 = !DILocation(line: 538, column: 18, scope: !2143)
!2153 = !DILocalVariable(name: "y", scope: !2143, file: !1, line: 539, type: !1722)
!2154 = !DILocation(line: 539, column: 14, scope: !2143)
!2155 = !DILocation(line: 539, column: 18, scope: !2143)
!2156 = !DILocalVariable(name: "z", scope: !2143, file: !1, line: 540, type: !1722)
!2157 = !DILocation(line: 540, column: 14, scope: !2143)
!2158 = !DILocation(line: 540, column: 18, scope: !2143)
!2159 = !DILocation(line: 542, column: 9, scope: !2143)
!2160 = !DILocation(line: 542, column: 13, scope: !2143)
!2161 = !DILocation(line: 542, column: 11, scope: !2143)
!2162 = !DILocation(line: 542, column: 25, scope: !2143)
!2163 = !DILocation(line: 542, column: 29, scope: !2143)
!2164 = !DILocation(line: 542, column: 27, scope: !2143)
!2165 = !DILocation(line: 542, column: 23, scope: !2143)
!2166 = !DILocation(line: 542, column: 41, scope: !2143)
!2167 = !DILocation(line: 542, column: 45, scope: !2143)
!2168 = !DILocation(line: 542, column: 43, scope: !2143)
!2169 = !DILocation(line: 542, column: 39, scope: !2143)
!2170 = !DILocation(line: 542, column: 57, scope: !2143)
!2171 = !DILocation(line: 542, column: 69, scope: !2143)
!2172 = !DILocation(line: 542, column: 67, scope: !2143)
!2173 = !DILocation(line: 542, column: 55, scope: !2143)
!2174 = !DILocation(line: 542, column: 2, scope: !2143)
!2175 = !DILocation(line: 542, column: 7, scope: !2143)
!2176 = !DILocation(line: 543, column: 9, scope: !2143)
!2177 = !DILocation(line: 543, column: 13, scope: !2143)
!2178 = !DILocation(line: 543, column: 11, scope: !2143)
!2179 = !DILocation(line: 543, column: 25, scope: !2143)
!2180 = !DILocation(line: 543, column: 29, scope: !2143)
!2181 = !DILocation(line: 543, column: 27, scope: !2143)
!2182 = !DILocation(line: 543, column: 23, scope: !2143)
!2183 = !DILocation(line: 543, column: 41, scope: !2143)
!2184 = !DILocation(line: 543, column: 45, scope: !2143)
!2185 = !DILocation(line: 543, column: 43, scope: !2143)
!2186 = !DILocation(line: 543, column: 39, scope: !2143)
!2187 = !DILocation(line: 543, column: 57, scope: !2143)
!2188 = !DILocation(line: 543, column: 69, scope: !2143)
!2189 = !DILocation(line: 543, column: 67, scope: !2143)
!2190 = !DILocation(line: 543, column: 55, scope: !2143)
!2191 = !DILocation(line: 543, column: 2, scope: !2143)
!2192 = !DILocation(line: 543, column: 7, scope: !2143)
!2193 = !DILocation(line: 544, column: 9, scope: !2143)
!2194 = !DILocation(line: 544, column: 13, scope: !2143)
!2195 = !DILocation(line: 544, column: 11, scope: !2143)
!2196 = !DILocation(line: 544, column: 25, scope: !2143)
!2197 = !DILocation(line: 544, column: 29, scope: !2143)
!2198 = !DILocation(line: 544, column: 27, scope: !2143)
!2199 = !DILocation(line: 544, column: 23, scope: !2143)
!2200 = !DILocation(line: 544, column: 41, scope: !2143)
!2201 = !DILocation(line: 544, column: 45, scope: !2143)
!2202 = !DILocation(line: 544, column: 43, scope: !2143)
!2203 = !DILocation(line: 544, column: 39, scope: !2143)
!2204 = !DILocation(line: 544, column: 57, scope: !2143)
!2205 = !DILocation(line: 544, column: 69, scope: !2143)
!2206 = !DILocation(line: 544, column: 67, scope: !2143)
!2207 = !DILocation(line: 544, column: 55, scope: !2143)
!2208 = !DILocation(line: 544, column: 2, scope: !2143)
!2209 = !DILocation(line: 544, column: 7, scope: !2143)
!2210 = !DILocation(line: 545, column: 9, scope: !2143)
!2211 = !DILocation(line: 545, column: 13, scope: !2143)
!2212 = !DILocation(line: 545, column: 11, scope: !2143)
!2213 = !DILocation(line: 545, column: 25, scope: !2143)
!2214 = !DILocation(line: 545, column: 29, scope: !2143)
!2215 = !DILocation(line: 545, column: 27, scope: !2143)
!2216 = !DILocation(line: 545, column: 23, scope: !2143)
!2217 = !DILocation(line: 545, column: 41, scope: !2143)
!2218 = !DILocation(line: 545, column: 45, scope: !2143)
!2219 = !DILocation(line: 545, column: 43, scope: !2143)
!2220 = !DILocation(line: 545, column: 39, scope: !2143)
!2221 = !DILocation(line: 545, column: 57, scope: !2143)
!2222 = !DILocation(line: 545, column: 69, scope: !2143)
!2223 = !DILocation(line: 545, column: 67, scope: !2143)
!2224 = !DILocation(line: 545, column: 55, scope: !2143)
!2225 = !DILocation(line: 545, column: 2, scope: !2143)
!2226 = !DILocation(line: 545, column: 7, scope: !2143)
!2227 = !DILocation(line: 546, column: 1, scope: !2143)
!2228 = distinct !DISubprogram(name: "mul_m4_v4", scope: !1, file: !1, line: 548, type: !1796, scopeLine: 549, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2229 = !DILocalVariable(name: "mat", arg: 1, scope: !2228, file: !1, line: 548, type: !47)
!2230 = !DILocation(line: 548, column: 22, scope: !2228)
!2231 = !DILocalVariable(name: "r", arg: 2, scope: !2228, file: !1, line: 548, type: !1686)
!2232 = !DILocation(line: 548, column: 39, scope: !2228)
!2233 = !DILocation(line: 550, column: 14, scope: !2228)
!2234 = !DILocation(line: 550, column: 17, scope: !2228)
!2235 = !DILocation(line: 550, column: 22, scope: !2228)
!2236 = !DILocation(line: 550, column: 2, scope: !2228)
!2237 = !DILocation(line: 551, column: 1, scope: !2228)
!2238 = distinct !DISubprogram(name: "mul_v4d_m4v4d", scope: !1, file: !1, line: 553, type: !2239, scopeLine: 554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2239 = !DISubroutineType(types: !2240)
!2240 = !{null, !2241, !47, !2241}
!2241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!2242 = !DILocalVariable(name: "r", arg: 1, scope: !2238, file: !1, line: 553, type: !2241)
!2243 = !DILocation(line: 553, column: 27, scope: !2238)
!2244 = !DILocalVariable(name: "mat", arg: 2, scope: !2238, file: !1, line: 553, type: !47)
!2245 = !DILocation(line: 553, column: 39, scope: !2238)
!2246 = !DILocalVariable(name: "v", arg: 3, scope: !2238, file: !1, line: 553, type: !2241)
!2247 = !DILocation(line: 553, column: 57, scope: !2238)
!2248 = !DILocalVariable(name: "x", scope: !2238, file: !1, line: 555, type: !2249)
!2249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!2250 = !DILocation(line: 555, column: 15, scope: !2238)
!2251 = !DILocation(line: 555, column: 19, scope: !2238)
!2252 = !DILocalVariable(name: "y", scope: !2238, file: !1, line: 556, type: !2249)
!2253 = !DILocation(line: 556, column: 15, scope: !2238)
!2254 = !DILocation(line: 556, column: 19, scope: !2238)
!2255 = !DILocalVariable(name: "z", scope: !2238, file: !1, line: 557, type: !2249)
!2256 = !DILocation(line: 557, column: 15, scope: !2238)
!2257 = !DILocation(line: 557, column: 19, scope: !2238)
!2258 = !DILocation(line: 559, column: 9, scope: !2238)
!2259 = !DILocation(line: 559, column: 21, scope: !2238)
!2260 = !DILocation(line: 559, column: 13, scope: !2238)
!2261 = !DILocation(line: 559, column: 11, scope: !2238)
!2262 = !DILocation(line: 559, column: 33, scope: !2238)
!2263 = !DILocation(line: 559, column: 45, scope: !2238)
!2264 = !DILocation(line: 559, column: 37, scope: !2238)
!2265 = !DILocation(line: 559, column: 35, scope: !2238)
!2266 = !DILocation(line: 559, column: 31, scope: !2238)
!2267 = !DILocation(line: 559, column: 57, scope: !2238)
!2268 = !DILocation(line: 559, column: 69, scope: !2238)
!2269 = !DILocation(line: 559, column: 61, scope: !2238)
!2270 = !DILocation(line: 559, column: 59, scope: !2238)
!2271 = !DILocation(line: 559, column: 55, scope: !2238)
!2272 = !DILocation(line: 559, column: 89, scope: !2238)
!2273 = !DILocation(line: 559, column: 81, scope: !2238)
!2274 = !DILocation(line: 559, column: 101, scope: !2238)
!2275 = !DILocation(line: 559, column: 99, scope: !2238)
!2276 = !DILocation(line: 559, column: 79, scope: !2238)
!2277 = !DILocation(line: 559, column: 2, scope: !2238)
!2278 = !DILocation(line: 559, column: 7, scope: !2238)
!2279 = !DILocation(line: 560, column: 9, scope: !2238)
!2280 = !DILocation(line: 560, column: 21, scope: !2238)
!2281 = !DILocation(line: 560, column: 13, scope: !2238)
!2282 = !DILocation(line: 560, column: 11, scope: !2238)
!2283 = !DILocation(line: 560, column: 33, scope: !2238)
!2284 = !DILocation(line: 560, column: 45, scope: !2238)
!2285 = !DILocation(line: 560, column: 37, scope: !2238)
!2286 = !DILocation(line: 560, column: 35, scope: !2238)
!2287 = !DILocation(line: 560, column: 31, scope: !2238)
!2288 = !DILocation(line: 560, column: 57, scope: !2238)
!2289 = !DILocation(line: 560, column: 69, scope: !2238)
!2290 = !DILocation(line: 560, column: 61, scope: !2238)
!2291 = !DILocation(line: 560, column: 59, scope: !2238)
!2292 = !DILocation(line: 560, column: 55, scope: !2238)
!2293 = !DILocation(line: 560, column: 89, scope: !2238)
!2294 = !DILocation(line: 560, column: 81, scope: !2238)
!2295 = !DILocation(line: 560, column: 101, scope: !2238)
!2296 = !DILocation(line: 560, column: 99, scope: !2238)
!2297 = !DILocation(line: 560, column: 79, scope: !2238)
!2298 = !DILocation(line: 560, column: 2, scope: !2238)
!2299 = !DILocation(line: 560, column: 7, scope: !2238)
!2300 = !DILocation(line: 561, column: 9, scope: !2238)
!2301 = !DILocation(line: 561, column: 21, scope: !2238)
!2302 = !DILocation(line: 561, column: 13, scope: !2238)
!2303 = !DILocation(line: 561, column: 11, scope: !2238)
!2304 = !DILocation(line: 561, column: 33, scope: !2238)
!2305 = !DILocation(line: 561, column: 45, scope: !2238)
!2306 = !DILocation(line: 561, column: 37, scope: !2238)
!2307 = !DILocation(line: 561, column: 35, scope: !2238)
!2308 = !DILocation(line: 561, column: 31, scope: !2238)
!2309 = !DILocation(line: 561, column: 57, scope: !2238)
!2310 = !DILocation(line: 561, column: 69, scope: !2238)
!2311 = !DILocation(line: 561, column: 61, scope: !2238)
!2312 = !DILocation(line: 561, column: 59, scope: !2238)
!2313 = !DILocation(line: 561, column: 55, scope: !2238)
!2314 = !DILocation(line: 561, column: 89, scope: !2238)
!2315 = !DILocation(line: 561, column: 81, scope: !2238)
!2316 = !DILocation(line: 561, column: 101, scope: !2238)
!2317 = !DILocation(line: 561, column: 99, scope: !2238)
!2318 = !DILocation(line: 561, column: 79, scope: !2238)
!2319 = !DILocation(line: 561, column: 2, scope: !2238)
!2320 = !DILocation(line: 561, column: 7, scope: !2238)
!2321 = !DILocation(line: 562, column: 9, scope: !2238)
!2322 = !DILocation(line: 562, column: 21, scope: !2238)
!2323 = !DILocation(line: 562, column: 13, scope: !2238)
!2324 = !DILocation(line: 562, column: 11, scope: !2238)
!2325 = !DILocation(line: 562, column: 33, scope: !2238)
!2326 = !DILocation(line: 562, column: 45, scope: !2238)
!2327 = !DILocation(line: 562, column: 37, scope: !2238)
!2328 = !DILocation(line: 562, column: 35, scope: !2238)
!2329 = !DILocation(line: 562, column: 31, scope: !2238)
!2330 = !DILocation(line: 562, column: 57, scope: !2238)
!2331 = !DILocation(line: 562, column: 69, scope: !2238)
!2332 = !DILocation(line: 562, column: 61, scope: !2238)
!2333 = !DILocation(line: 562, column: 59, scope: !2238)
!2334 = !DILocation(line: 562, column: 55, scope: !2238)
!2335 = !DILocation(line: 562, column: 89, scope: !2238)
!2336 = !DILocation(line: 562, column: 81, scope: !2238)
!2337 = !DILocation(line: 562, column: 101, scope: !2238)
!2338 = !DILocation(line: 562, column: 99, scope: !2238)
!2339 = !DILocation(line: 562, column: 79, scope: !2238)
!2340 = !DILocation(line: 562, column: 2, scope: !2238)
!2341 = !DILocation(line: 562, column: 7, scope: !2238)
!2342 = !DILocation(line: 563, column: 1, scope: !2238)
!2343 = distinct !DISubprogram(name: "mul_m4_v4d", scope: !1, file: !1, line: 565, type: !2344, scopeLine: 566, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2344 = !DISubroutineType(types: !2345)
!2345 = !{null, !47, !2241}
!2346 = !DILocalVariable(name: "mat", arg: 1, scope: !2343, file: !1, line: 565, type: !47)
!2347 = !DILocation(line: 565, column: 23, scope: !2343)
!2348 = !DILocalVariable(name: "r", arg: 2, scope: !2343, file: !1, line: 565, type: !2241)
!2349 = !DILocation(line: 565, column: 41, scope: !2343)
!2350 = !DILocation(line: 567, column: 16, scope: !2343)
!2351 = !DILocation(line: 567, column: 19, scope: !2343)
!2352 = !DILocation(line: 567, column: 24, scope: !2343)
!2353 = !DILocation(line: 567, column: 2, scope: !2343)
!2354 = !DILocation(line: 568, column: 1, scope: !2343)
!2355 = distinct !DISubprogram(name: "mul_v2_m3v3", scope: !1, file: !1, line: 579, type: !1735, scopeLine: 580, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2356 = !DILocalVariable(name: "r", arg: 1, scope: !2355, file: !1, line: 579, type: !1686)
!2357 = !DILocation(line: 579, column: 24, scope: !2355)
!2358 = !DILocalVariable(name: "M", arg: 2, scope: !2355, file: !1, line: 579, type: !35)
!2359 = !DILocation(line: 579, column: 36, scope: !2355)
!2360 = !DILocalVariable(name: "a", arg: 3, scope: !2355, file: !1, line: 579, type: !1721)
!2361 = !DILocation(line: 579, column: 57, scope: !2355)
!2362 = !DILocation(line: 583, column: 9, scope: !2355)
!2363 = !DILocation(line: 583, column: 19, scope: !2355)
!2364 = !DILocation(line: 583, column: 17, scope: !2355)
!2365 = !DILocation(line: 583, column: 26, scope: !2355)
!2366 = !DILocation(line: 583, column: 36, scope: !2355)
!2367 = !DILocation(line: 583, column: 34, scope: !2355)
!2368 = !DILocation(line: 583, column: 24, scope: !2355)
!2369 = !DILocation(line: 583, column: 43, scope: !2355)
!2370 = !DILocation(line: 583, column: 53, scope: !2355)
!2371 = !DILocation(line: 583, column: 51, scope: !2355)
!2372 = !DILocation(line: 583, column: 41, scope: !2355)
!2373 = !DILocation(line: 583, column: 2, scope: !2355)
!2374 = !DILocation(line: 583, column: 7, scope: !2355)
!2375 = !DILocation(line: 584, column: 9, scope: !2355)
!2376 = !DILocation(line: 584, column: 19, scope: !2355)
!2377 = !DILocation(line: 584, column: 17, scope: !2355)
!2378 = !DILocation(line: 584, column: 26, scope: !2355)
!2379 = !DILocation(line: 584, column: 36, scope: !2355)
!2380 = !DILocation(line: 584, column: 34, scope: !2355)
!2381 = !DILocation(line: 584, column: 24, scope: !2355)
!2382 = !DILocation(line: 584, column: 43, scope: !2355)
!2383 = !DILocation(line: 584, column: 53, scope: !2355)
!2384 = !DILocation(line: 584, column: 51, scope: !2355)
!2385 = !DILocation(line: 584, column: 41, scope: !2355)
!2386 = !DILocation(line: 584, column: 2, scope: !2355)
!2387 = !DILocation(line: 584, column: 7, scope: !2355)
!2388 = !DILocation(line: 585, column: 1, scope: !2355)
!2389 = distinct !DISubprogram(name: "mul_m3_v3", scope: !1, file: !1, line: 587, type: !1784, scopeLine: 588, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2390 = !DILocalVariable(name: "M", arg: 1, scope: !2389, file: !1, line: 587, type: !35)
!2391 = !DILocation(line: 587, column: 22, scope: !2389)
!2392 = !DILocalVariable(name: "r", arg: 2, scope: !2389, file: !1, line: 587, type: !1686)
!2393 = !DILocation(line: 587, column: 37, scope: !2389)
!2394 = !DILocalVariable(name: "tmp", scope: !2389, file: !1, line: 589, type: !36)
!2395 = !DILocation(line: 589, column: 8, scope: !2389)
!2396 = !DILocation(line: 591, column: 14, scope: !2389)
!2397 = !DILocation(line: 591, column: 19, scope: !2389)
!2398 = !DILocation(line: 591, column: 22, scope: !2389)
!2399 = !DILocation(line: 591, column: 2, scope: !2389)
!2400 = !DILocation(line: 592, column: 13, scope: !2389)
!2401 = !DILocation(line: 592, column: 16, scope: !2389)
!2402 = !DILocation(line: 592, column: 2, scope: !2389)
!2403 = !DILocation(line: 593, column: 1, scope: !2389)
!2404 = distinct !DISubprogram(name: "copy_v3_v3", scope: !1718, file: !1718, line: 64, type: !1719, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2405 = !DILocalVariable(name: "r", arg: 1, scope: !2404, file: !1718, line: 64, type: !1686)
!2406 = !DILocation(line: 64, column: 31, scope: !2404)
!2407 = !DILocalVariable(name: "a", arg: 2, scope: !2404, file: !1718, line: 64, type: !1721)
!2408 = !DILocation(line: 64, column: 49, scope: !2404)
!2409 = !DILocation(line: 66, column: 9, scope: !2404)
!2410 = !DILocation(line: 66, column: 2, scope: !2404)
!2411 = !DILocation(line: 66, column: 7, scope: !2404)
!2412 = !DILocation(line: 67, column: 9, scope: !2404)
!2413 = !DILocation(line: 67, column: 2, scope: !2404)
!2414 = !DILocation(line: 67, column: 7, scope: !2404)
!2415 = !DILocation(line: 68, column: 9, scope: !2404)
!2416 = !DILocation(line: 68, column: 2, scope: !2404)
!2417 = !DILocation(line: 68, column: 7, scope: !2404)
!2418 = !DILocation(line: 69, column: 1, scope: !2404)
!2419 = distinct !DISubprogram(name: "mul_transposed_m3_v3", scope: !1, file: !1, line: 595, type: !1784, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2420 = !DILocalVariable(name: "mat", arg: 1, scope: !2419, file: !1, line: 595, type: !35)
!2421 = !DILocation(line: 595, column: 33, scope: !2419)
!2422 = !DILocalVariable(name: "vec", arg: 2, scope: !2419, file: !1, line: 595, type: !1686)
!2423 = !DILocation(line: 595, column: 50, scope: !2419)
!2424 = !DILocalVariable(name: "x", scope: !2419, file: !1, line: 597, type: !1722)
!2425 = !DILocation(line: 597, column: 14, scope: !2419)
!2426 = !DILocation(line: 597, column: 18, scope: !2419)
!2427 = !DILocalVariable(name: "y", scope: !2419, file: !1, line: 598, type: !1722)
!2428 = !DILocation(line: 598, column: 14, scope: !2419)
!2429 = !DILocation(line: 598, column: 18, scope: !2419)
!2430 = !DILocation(line: 600, column: 11, scope: !2419)
!2431 = !DILocation(line: 600, column: 15, scope: !2419)
!2432 = !DILocation(line: 600, column: 13, scope: !2419)
!2433 = !DILocation(line: 600, column: 27, scope: !2419)
!2434 = !DILocation(line: 600, column: 31, scope: !2419)
!2435 = !DILocation(line: 600, column: 29, scope: !2419)
!2436 = !DILocation(line: 600, column: 25, scope: !2419)
!2437 = !DILocation(line: 600, column: 43, scope: !2419)
!2438 = !DILocation(line: 600, column: 55, scope: !2419)
!2439 = !DILocation(line: 600, column: 53, scope: !2419)
!2440 = !DILocation(line: 600, column: 41, scope: !2419)
!2441 = !DILocation(line: 600, column: 2, scope: !2419)
!2442 = !DILocation(line: 600, column: 9, scope: !2419)
!2443 = !DILocation(line: 601, column: 11, scope: !2419)
!2444 = !DILocation(line: 601, column: 15, scope: !2419)
!2445 = !DILocation(line: 601, column: 13, scope: !2419)
!2446 = !DILocation(line: 601, column: 27, scope: !2419)
!2447 = !DILocation(line: 601, column: 31, scope: !2419)
!2448 = !DILocation(line: 601, column: 29, scope: !2419)
!2449 = !DILocation(line: 601, column: 25, scope: !2419)
!2450 = !DILocation(line: 601, column: 43, scope: !2419)
!2451 = !DILocation(line: 601, column: 55, scope: !2419)
!2452 = !DILocation(line: 601, column: 53, scope: !2419)
!2453 = !DILocation(line: 601, column: 41, scope: !2419)
!2454 = !DILocation(line: 601, column: 2, scope: !2419)
!2455 = !DILocation(line: 601, column: 9, scope: !2419)
!2456 = !DILocation(line: 602, column: 11, scope: !2419)
!2457 = !DILocation(line: 602, column: 15, scope: !2419)
!2458 = !DILocation(line: 602, column: 13, scope: !2419)
!2459 = !DILocation(line: 602, column: 27, scope: !2419)
!2460 = !DILocation(line: 602, column: 31, scope: !2419)
!2461 = !DILocation(line: 602, column: 29, scope: !2419)
!2462 = !DILocation(line: 602, column: 25, scope: !2419)
!2463 = !DILocation(line: 602, column: 43, scope: !2419)
!2464 = !DILocation(line: 602, column: 55, scope: !2419)
!2465 = !DILocation(line: 602, column: 53, scope: !2419)
!2466 = !DILocation(line: 602, column: 41, scope: !2419)
!2467 = !DILocation(line: 602, column: 2, scope: !2419)
!2468 = !DILocation(line: 602, column: 9, scope: !2419)
!2469 = !DILocation(line: 603, column: 1, scope: !2419)
!2470 = distinct !DISubprogram(name: "mul_transposed_mat3_m4_v3", scope: !1, file: !1, line: 605, type: !1796, scopeLine: 606, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2471 = !DILocalVariable(name: "mat", arg: 1, scope: !2470, file: !1, line: 605, type: !47)
!2472 = !DILocation(line: 605, column: 38, scope: !2470)
!2473 = !DILocalVariable(name: "vec", arg: 2, scope: !2470, file: !1, line: 605, type: !1686)
!2474 = !DILocation(line: 605, column: 55, scope: !2470)
!2475 = !DILocalVariable(name: "x", scope: !2470, file: !1, line: 607, type: !1722)
!2476 = !DILocation(line: 607, column: 14, scope: !2470)
!2477 = !DILocation(line: 607, column: 18, scope: !2470)
!2478 = !DILocalVariable(name: "y", scope: !2470, file: !1, line: 608, type: !1722)
!2479 = !DILocation(line: 608, column: 14, scope: !2470)
!2480 = !DILocation(line: 608, column: 18, scope: !2470)
!2481 = !DILocation(line: 610, column: 11, scope: !2470)
!2482 = !DILocation(line: 610, column: 15, scope: !2470)
!2483 = !DILocation(line: 610, column: 13, scope: !2470)
!2484 = !DILocation(line: 610, column: 27, scope: !2470)
!2485 = !DILocation(line: 610, column: 31, scope: !2470)
!2486 = !DILocation(line: 610, column: 29, scope: !2470)
!2487 = !DILocation(line: 610, column: 25, scope: !2470)
!2488 = !DILocation(line: 610, column: 43, scope: !2470)
!2489 = !DILocation(line: 610, column: 55, scope: !2470)
!2490 = !DILocation(line: 610, column: 53, scope: !2470)
!2491 = !DILocation(line: 610, column: 41, scope: !2470)
!2492 = !DILocation(line: 610, column: 2, scope: !2470)
!2493 = !DILocation(line: 610, column: 9, scope: !2470)
!2494 = !DILocation(line: 611, column: 11, scope: !2470)
!2495 = !DILocation(line: 611, column: 15, scope: !2470)
!2496 = !DILocation(line: 611, column: 13, scope: !2470)
!2497 = !DILocation(line: 611, column: 27, scope: !2470)
!2498 = !DILocation(line: 611, column: 31, scope: !2470)
!2499 = !DILocation(line: 611, column: 29, scope: !2470)
!2500 = !DILocation(line: 611, column: 25, scope: !2470)
!2501 = !DILocation(line: 611, column: 43, scope: !2470)
!2502 = !DILocation(line: 611, column: 55, scope: !2470)
!2503 = !DILocation(line: 611, column: 53, scope: !2470)
!2504 = !DILocation(line: 611, column: 41, scope: !2470)
!2505 = !DILocation(line: 611, column: 2, scope: !2470)
!2506 = !DILocation(line: 611, column: 9, scope: !2470)
!2507 = !DILocation(line: 612, column: 11, scope: !2470)
!2508 = !DILocation(line: 612, column: 15, scope: !2470)
!2509 = !DILocation(line: 612, column: 13, scope: !2470)
!2510 = !DILocation(line: 612, column: 27, scope: !2470)
!2511 = !DILocation(line: 612, column: 31, scope: !2470)
!2512 = !DILocation(line: 612, column: 29, scope: !2470)
!2513 = !DILocation(line: 612, column: 25, scope: !2470)
!2514 = !DILocation(line: 612, column: 43, scope: !2470)
!2515 = !DILocation(line: 612, column: 55, scope: !2470)
!2516 = !DILocation(line: 612, column: 53, scope: !2470)
!2517 = !DILocation(line: 612, column: 41, scope: !2470)
!2518 = !DILocation(line: 612, column: 2, scope: !2470)
!2519 = !DILocation(line: 612, column: 9, scope: !2470)
!2520 = !DILocation(line: 613, column: 1, scope: !2470)
!2521 = distinct !DISubprogram(name: "mul_m3_fl", scope: !1, file: !1, line: 615, type: !2522, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2522 = !DISubroutineType(types: !2523)
!2523 = !{null, !35, !4}
!2524 = !DILocalVariable(name: "m", arg: 1, scope: !2521, file: !1, line: 615, type: !35)
!2525 = !DILocation(line: 615, column: 22, scope: !2521)
!2526 = !DILocalVariable(name: "f", arg: 2, scope: !2521, file: !1, line: 615, type: !4)
!2527 = !DILocation(line: 615, column: 37, scope: !2521)
!2528 = !DILocalVariable(name: "i", scope: !2521, file: !1, line: 617, type: !296)
!2529 = !DILocation(line: 617, column: 6, scope: !2521)
!2530 = !DILocalVariable(name: "j", scope: !2521, file: !1, line: 617, type: !296)
!2531 = !DILocation(line: 617, column: 9, scope: !2521)
!2532 = !DILocation(line: 619, column: 9, scope: !2533)
!2533 = distinct !DILexicalBlock(scope: !2521, file: !1, line: 619, column: 2)
!2534 = !DILocation(line: 619, column: 7, scope: !2533)
!2535 = !DILocation(line: 619, column: 14, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !2533, file: !1, line: 619, column: 2)
!2537 = !DILocation(line: 619, column: 16, scope: !2536)
!2538 = !DILocation(line: 619, column: 2, scope: !2533)
!2539 = !DILocation(line: 620, column: 10, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2536, file: !1, line: 620, column: 3)
!2541 = !DILocation(line: 620, column: 8, scope: !2540)
!2542 = !DILocation(line: 620, column: 15, scope: !2543)
!2543 = distinct !DILexicalBlock(scope: !2540, file: !1, line: 620, column: 3)
!2544 = !DILocation(line: 620, column: 17, scope: !2543)
!2545 = !DILocation(line: 620, column: 3, scope: !2540)
!2546 = !DILocation(line: 621, column: 15, scope: !2543)
!2547 = !DILocation(line: 621, column: 4, scope: !2543)
!2548 = !DILocation(line: 621, column: 6, scope: !2543)
!2549 = !DILocation(line: 621, column: 9, scope: !2543)
!2550 = !DILocation(line: 621, column: 12, scope: !2543)
!2551 = !DILocation(line: 620, column: 23, scope: !2543)
!2552 = !DILocation(line: 620, column: 3, scope: !2543)
!2553 = distinct !{!2553, !2545, !2554}
!2554 = !DILocation(line: 621, column: 15, scope: !2540)
!2555 = !DILocation(line: 619, column: 22, scope: !2536)
!2556 = !DILocation(line: 619, column: 2, scope: !2536)
!2557 = distinct !{!2557, !2538, !2558}
!2558 = !DILocation(line: 621, column: 15, scope: !2533)
!2559 = !DILocation(line: 622, column: 1, scope: !2521)
!2560 = distinct !DISubprogram(name: "mul_m4_fl", scope: !1, file: !1, line: 624, type: !2561, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2561 = !DISubroutineType(types: !2562)
!2562 = !{null, !47, !4}
!2563 = !DILocalVariable(name: "m", arg: 1, scope: !2560, file: !1, line: 624, type: !47)
!2564 = !DILocation(line: 624, column: 22, scope: !2560)
!2565 = !DILocalVariable(name: "f", arg: 2, scope: !2560, file: !1, line: 624, type: !4)
!2566 = !DILocation(line: 624, column: 37, scope: !2560)
!2567 = !DILocalVariable(name: "i", scope: !2560, file: !1, line: 626, type: !296)
!2568 = !DILocation(line: 626, column: 6, scope: !2560)
!2569 = !DILocalVariable(name: "j", scope: !2560, file: !1, line: 626, type: !296)
!2570 = !DILocation(line: 626, column: 9, scope: !2560)
!2571 = !DILocation(line: 628, column: 9, scope: !2572)
!2572 = distinct !DILexicalBlock(scope: !2560, file: !1, line: 628, column: 2)
!2573 = !DILocation(line: 628, column: 7, scope: !2572)
!2574 = !DILocation(line: 628, column: 14, scope: !2575)
!2575 = distinct !DILexicalBlock(scope: !2572, file: !1, line: 628, column: 2)
!2576 = !DILocation(line: 628, column: 16, scope: !2575)
!2577 = !DILocation(line: 628, column: 2, scope: !2572)
!2578 = !DILocation(line: 629, column: 10, scope: !2579)
!2579 = distinct !DILexicalBlock(scope: !2575, file: !1, line: 629, column: 3)
!2580 = !DILocation(line: 629, column: 8, scope: !2579)
!2581 = !DILocation(line: 629, column: 15, scope: !2582)
!2582 = distinct !DILexicalBlock(scope: !2579, file: !1, line: 629, column: 3)
!2583 = !DILocation(line: 629, column: 17, scope: !2582)
!2584 = !DILocation(line: 629, column: 3, scope: !2579)
!2585 = !DILocation(line: 630, column: 15, scope: !2582)
!2586 = !DILocation(line: 630, column: 4, scope: !2582)
!2587 = !DILocation(line: 630, column: 6, scope: !2582)
!2588 = !DILocation(line: 630, column: 9, scope: !2582)
!2589 = !DILocation(line: 630, column: 12, scope: !2582)
!2590 = !DILocation(line: 629, column: 23, scope: !2582)
!2591 = !DILocation(line: 629, column: 3, scope: !2582)
!2592 = distinct !{!2592, !2584, !2593}
!2593 = !DILocation(line: 630, column: 15, scope: !2579)
!2594 = !DILocation(line: 628, column: 22, scope: !2575)
!2595 = !DILocation(line: 628, column: 2, scope: !2575)
!2596 = distinct !{!2596, !2577, !2597}
!2597 = !DILocation(line: 630, column: 15, scope: !2572)
!2598 = !DILocation(line: 631, column: 1, scope: !2560)
!2599 = distinct !DISubprogram(name: "mul_mat3_m4_fl", scope: !1, file: !1, line: 633, type: !2561, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2600 = !DILocalVariable(name: "m", arg: 1, scope: !2599, file: !1, line: 633, type: !47)
!2601 = !DILocation(line: 633, column: 27, scope: !2599)
!2602 = !DILocalVariable(name: "f", arg: 2, scope: !2599, file: !1, line: 633, type: !4)
!2603 = !DILocation(line: 633, column: 42, scope: !2599)
!2604 = !DILocalVariable(name: "i", scope: !2599, file: !1, line: 635, type: !296)
!2605 = !DILocation(line: 635, column: 6, scope: !2599)
!2606 = !DILocalVariable(name: "j", scope: !2599, file: !1, line: 635, type: !296)
!2607 = !DILocation(line: 635, column: 9, scope: !2599)
!2608 = !DILocation(line: 637, column: 9, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !2599, file: !1, line: 637, column: 2)
!2610 = !DILocation(line: 637, column: 7, scope: !2609)
!2611 = !DILocation(line: 637, column: 14, scope: !2612)
!2612 = distinct !DILexicalBlock(scope: !2609, file: !1, line: 637, column: 2)
!2613 = !DILocation(line: 637, column: 16, scope: !2612)
!2614 = !DILocation(line: 637, column: 2, scope: !2609)
!2615 = !DILocation(line: 638, column: 10, scope: !2616)
!2616 = distinct !DILexicalBlock(scope: !2612, file: !1, line: 638, column: 3)
!2617 = !DILocation(line: 638, column: 8, scope: !2616)
!2618 = !DILocation(line: 638, column: 15, scope: !2619)
!2619 = distinct !DILexicalBlock(scope: !2616, file: !1, line: 638, column: 3)
!2620 = !DILocation(line: 638, column: 17, scope: !2619)
!2621 = !DILocation(line: 638, column: 3, scope: !2616)
!2622 = !DILocation(line: 639, column: 15, scope: !2619)
!2623 = !DILocation(line: 639, column: 4, scope: !2619)
!2624 = !DILocation(line: 639, column: 6, scope: !2619)
!2625 = !DILocation(line: 639, column: 9, scope: !2619)
!2626 = !DILocation(line: 639, column: 12, scope: !2619)
!2627 = !DILocation(line: 638, column: 23, scope: !2619)
!2628 = !DILocation(line: 638, column: 3, scope: !2619)
!2629 = distinct !{!2629, !2621, !2630}
!2630 = !DILocation(line: 639, column: 15, scope: !2616)
!2631 = !DILocation(line: 637, column: 22, scope: !2612)
!2632 = !DILocation(line: 637, column: 2, scope: !2612)
!2633 = distinct !{!2633, !2614, !2634}
!2634 = !DILocation(line: 639, column: 15, scope: !2609)
!2635 = !DILocation(line: 640, column: 1, scope: !2599)
!2636 = distinct !DISubprogram(name: "negate_m3", scope: !1, file: !1, line: 642, type: !45, scopeLine: 643, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2637 = !DILocalVariable(name: "m", arg: 1, scope: !2636, file: !1, line: 642, type: !47)
!2638 = !DILocation(line: 642, column: 22, scope: !2636)
!2639 = !DILocalVariable(name: "i", scope: !2636, file: !1, line: 644, type: !296)
!2640 = !DILocation(line: 644, column: 6, scope: !2636)
!2641 = !DILocalVariable(name: "j", scope: !2636, file: !1, line: 644, type: !296)
!2642 = !DILocation(line: 644, column: 9, scope: !2636)
!2643 = !DILocation(line: 646, column: 9, scope: !2644)
!2644 = distinct !DILexicalBlock(scope: !2636, file: !1, line: 646, column: 2)
!2645 = !DILocation(line: 646, column: 7, scope: !2644)
!2646 = !DILocation(line: 646, column: 14, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !2644, file: !1, line: 646, column: 2)
!2648 = !DILocation(line: 646, column: 16, scope: !2647)
!2649 = !DILocation(line: 646, column: 2, scope: !2644)
!2650 = !DILocation(line: 647, column: 10, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2647, file: !1, line: 647, column: 3)
!2652 = !DILocation(line: 647, column: 8, scope: !2651)
!2653 = !DILocation(line: 647, column: 15, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2651, file: !1, line: 647, column: 3)
!2655 = !DILocation(line: 647, column: 17, scope: !2654)
!2656 = !DILocation(line: 647, column: 3, scope: !2651)
!2657 = !DILocation(line: 648, column: 4, scope: !2654)
!2658 = !DILocation(line: 648, column: 6, scope: !2654)
!2659 = !DILocation(line: 648, column: 9, scope: !2654)
!2660 = !DILocation(line: 648, column: 12, scope: !2654)
!2661 = !DILocation(line: 647, column: 23, scope: !2654)
!2662 = !DILocation(line: 647, column: 3, scope: !2654)
!2663 = distinct !{!2663, !2656, !2664}
!2664 = !DILocation(line: 648, column: 16, scope: !2651)
!2665 = !DILocation(line: 646, column: 22, scope: !2647)
!2666 = !DILocation(line: 646, column: 2, scope: !2647)
!2667 = distinct !{!2667, !2649, !2668}
!2668 = !DILocation(line: 648, column: 16, scope: !2644)
!2669 = !DILocation(line: 649, column: 1, scope: !2636)
!2670 = distinct !DISubprogram(name: "negate_m4", scope: !1, file: !1, line: 651, type: !45, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2671 = !DILocalVariable(name: "m", arg: 1, scope: !2670, file: !1, line: 651, type: !47)
!2672 = !DILocation(line: 651, column: 22, scope: !2670)
!2673 = !DILocalVariable(name: "i", scope: !2670, file: !1, line: 653, type: !296)
!2674 = !DILocation(line: 653, column: 6, scope: !2670)
!2675 = !DILocalVariable(name: "j", scope: !2670, file: !1, line: 653, type: !296)
!2676 = !DILocation(line: 653, column: 9, scope: !2670)
!2677 = !DILocation(line: 655, column: 9, scope: !2678)
!2678 = distinct !DILexicalBlock(scope: !2670, file: !1, line: 655, column: 2)
!2679 = !DILocation(line: 655, column: 7, scope: !2678)
!2680 = !DILocation(line: 655, column: 14, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2678, file: !1, line: 655, column: 2)
!2682 = !DILocation(line: 655, column: 16, scope: !2681)
!2683 = !DILocation(line: 655, column: 2, scope: !2678)
!2684 = !DILocation(line: 656, column: 10, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2681, file: !1, line: 656, column: 3)
!2686 = !DILocation(line: 656, column: 8, scope: !2685)
!2687 = !DILocation(line: 656, column: 15, scope: !2688)
!2688 = distinct !DILexicalBlock(scope: !2685, file: !1, line: 656, column: 3)
!2689 = !DILocation(line: 656, column: 17, scope: !2688)
!2690 = !DILocation(line: 656, column: 3, scope: !2685)
!2691 = !DILocation(line: 657, column: 4, scope: !2688)
!2692 = !DILocation(line: 657, column: 6, scope: !2688)
!2693 = !DILocation(line: 657, column: 9, scope: !2688)
!2694 = !DILocation(line: 657, column: 12, scope: !2688)
!2695 = !DILocation(line: 656, column: 23, scope: !2688)
!2696 = !DILocation(line: 656, column: 3, scope: !2688)
!2697 = distinct !{!2697, !2690, !2698}
!2698 = !DILocation(line: 657, column: 16, scope: !2685)
!2699 = !DILocation(line: 655, column: 22, scope: !2681)
!2700 = !DILocation(line: 655, column: 2, scope: !2681)
!2701 = distinct !{!2701, !2683, !2702}
!2702 = !DILocation(line: 657, column: 16, scope: !2678)
!2703 = !DILocation(line: 658, column: 1, scope: !2670)
!2704 = distinct !DISubprogram(name: "mul_m3_v3_double", scope: !1, file: !1, line: 660, type: !2705, scopeLine: 661, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2705 = !DISubroutineType(types: !2706)
!2706 = !{null, !35, !2241}
!2707 = !DILocalVariable(name: "mat", arg: 1, scope: !2704, file: !1, line: 660, type: !35)
!2708 = !DILocation(line: 660, column: 29, scope: !2704)
!2709 = !DILocalVariable(name: "vec", arg: 2, scope: !2704, file: !1, line: 660, type: !2241)
!2710 = !DILocation(line: 660, column: 47, scope: !2704)
!2711 = !DILocalVariable(name: "x", scope: !2704, file: !1, line: 662, type: !2249)
!2712 = !DILocation(line: 662, column: 15, scope: !2704)
!2713 = !DILocation(line: 662, column: 19, scope: !2704)
!2714 = !DILocalVariable(name: "y", scope: !2704, file: !1, line: 663, type: !2249)
!2715 = !DILocation(line: 663, column: 15, scope: !2704)
!2716 = !DILocation(line: 663, column: 19, scope: !2704)
!2717 = !DILocation(line: 665, column: 11, scope: !2704)
!2718 = !DILocation(line: 665, column: 23, scope: !2704)
!2719 = !DILocation(line: 665, column: 15, scope: !2704)
!2720 = !DILocation(line: 665, column: 13, scope: !2704)
!2721 = !DILocation(line: 665, column: 35, scope: !2704)
!2722 = !DILocation(line: 665, column: 47, scope: !2704)
!2723 = !DILocation(line: 665, column: 39, scope: !2704)
!2724 = !DILocation(line: 665, column: 37, scope: !2704)
!2725 = !DILocation(line: 665, column: 33, scope: !2704)
!2726 = !DILocation(line: 665, column: 67, scope: !2704)
!2727 = !DILocation(line: 665, column: 59, scope: !2704)
!2728 = !DILocation(line: 665, column: 79, scope: !2704)
!2729 = !DILocation(line: 665, column: 77, scope: !2704)
!2730 = !DILocation(line: 665, column: 57, scope: !2704)
!2731 = !DILocation(line: 665, column: 2, scope: !2704)
!2732 = !DILocation(line: 665, column: 9, scope: !2704)
!2733 = !DILocation(line: 666, column: 11, scope: !2704)
!2734 = !DILocation(line: 666, column: 23, scope: !2704)
!2735 = !DILocation(line: 666, column: 15, scope: !2704)
!2736 = !DILocation(line: 666, column: 13, scope: !2704)
!2737 = !DILocation(line: 666, column: 35, scope: !2704)
!2738 = !DILocation(line: 666, column: 47, scope: !2704)
!2739 = !DILocation(line: 666, column: 39, scope: !2704)
!2740 = !DILocation(line: 666, column: 37, scope: !2704)
!2741 = !DILocation(line: 666, column: 33, scope: !2704)
!2742 = !DILocation(line: 666, column: 67, scope: !2704)
!2743 = !DILocation(line: 666, column: 59, scope: !2704)
!2744 = !DILocation(line: 666, column: 79, scope: !2704)
!2745 = !DILocation(line: 666, column: 77, scope: !2704)
!2746 = !DILocation(line: 666, column: 57, scope: !2704)
!2747 = !DILocation(line: 666, column: 2, scope: !2704)
!2748 = !DILocation(line: 666, column: 9, scope: !2704)
!2749 = !DILocation(line: 667, column: 11, scope: !2704)
!2750 = !DILocation(line: 667, column: 23, scope: !2704)
!2751 = !DILocation(line: 667, column: 15, scope: !2704)
!2752 = !DILocation(line: 667, column: 13, scope: !2704)
!2753 = !DILocation(line: 667, column: 35, scope: !2704)
!2754 = !DILocation(line: 667, column: 47, scope: !2704)
!2755 = !DILocation(line: 667, column: 39, scope: !2704)
!2756 = !DILocation(line: 667, column: 37, scope: !2704)
!2757 = !DILocation(line: 667, column: 33, scope: !2704)
!2758 = !DILocation(line: 667, column: 67, scope: !2704)
!2759 = !DILocation(line: 667, column: 59, scope: !2704)
!2760 = !DILocation(line: 667, column: 79, scope: !2704)
!2761 = !DILocation(line: 667, column: 77, scope: !2704)
!2762 = !DILocation(line: 667, column: 57, scope: !2704)
!2763 = !DILocation(line: 667, column: 2, scope: !2704)
!2764 = !DILocation(line: 667, column: 9, scope: !2704)
!2765 = !DILocation(line: 668, column: 1, scope: !2704)
!2766 = distinct !DISubprogram(name: "add_m3_m3m3", scope: !1, file: !1, line: 670, type: !690, scopeLine: 671, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2767 = !DILocalVariable(name: "m1", arg: 1, scope: !2766, file: !1, line: 670, type: !35)
!2768 = !DILocation(line: 670, column: 24, scope: !2766)
!2769 = !DILocalVariable(name: "m2", arg: 2, scope: !2766, file: !1, line: 670, type: !35)
!2770 = !DILocation(line: 670, column: 40, scope: !2766)
!2771 = !DILocalVariable(name: "m3", arg: 3, scope: !2766, file: !1, line: 670, type: !35)
!2772 = !DILocation(line: 670, column: 56, scope: !2766)
!2773 = !DILocalVariable(name: "i", scope: !2766, file: !1, line: 672, type: !296)
!2774 = !DILocation(line: 672, column: 6, scope: !2766)
!2775 = !DILocalVariable(name: "j", scope: !2766, file: !1, line: 672, type: !296)
!2776 = !DILocation(line: 672, column: 9, scope: !2766)
!2777 = !DILocation(line: 674, column: 9, scope: !2778)
!2778 = distinct !DILexicalBlock(scope: !2766, file: !1, line: 674, column: 2)
!2779 = !DILocation(line: 674, column: 7, scope: !2778)
!2780 = !DILocation(line: 674, column: 14, scope: !2781)
!2781 = distinct !DILexicalBlock(scope: !2778, file: !1, line: 674, column: 2)
!2782 = !DILocation(line: 674, column: 16, scope: !2781)
!2783 = !DILocation(line: 674, column: 2, scope: !2778)
!2784 = !DILocation(line: 675, column: 10, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2781, file: !1, line: 675, column: 3)
!2786 = !DILocation(line: 675, column: 8, scope: !2785)
!2787 = !DILocation(line: 675, column: 15, scope: !2788)
!2788 = distinct !DILexicalBlock(scope: !2785, file: !1, line: 675, column: 3)
!2789 = !DILocation(line: 675, column: 17, scope: !2788)
!2790 = !DILocation(line: 675, column: 3, scope: !2785)
!2791 = !DILocation(line: 676, column: 15, scope: !2788)
!2792 = !DILocation(line: 676, column: 18, scope: !2788)
!2793 = !DILocation(line: 676, column: 21, scope: !2788)
!2794 = !DILocation(line: 676, column: 26, scope: !2788)
!2795 = !DILocation(line: 676, column: 29, scope: !2788)
!2796 = !DILocation(line: 676, column: 32, scope: !2788)
!2797 = !DILocation(line: 676, column: 24, scope: !2788)
!2798 = !DILocation(line: 676, column: 4, scope: !2788)
!2799 = !DILocation(line: 676, column: 7, scope: !2788)
!2800 = !DILocation(line: 676, column: 10, scope: !2788)
!2801 = !DILocation(line: 676, column: 13, scope: !2788)
!2802 = !DILocation(line: 675, column: 23, scope: !2788)
!2803 = !DILocation(line: 675, column: 3, scope: !2788)
!2804 = distinct !{!2804, !2790, !2805}
!2805 = !DILocation(line: 676, column: 33, scope: !2785)
!2806 = !DILocation(line: 674, column: 22, scope: !2781)
!2807 = !DILocation(line: 674, column: 2, scope: !2781)
!2808 = distinct !{!2808, !2783, !2809}
!2809 = !DILocation(line: 676, column: 33, scope: !2778)
!2810 = !DILocation(line: 677, column: 1, scope: !2766)
!2811 = distinct !DISubprogram(name: "add_m4_m4m4", scope: !1, file: !1, line: 679, type: !398, scopeLine: 680, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2812 = !DILocalVariable(name: "m1", arg: 1, scope: !2811, file: !1, line: 679, type: !47)
!2813 = !DILocation(line: 679, column: 24, scope: !2811)
!2814 = !DILocalVariable(name: "m2", arg: 2, scope: !2811, file: !1, line: 679, type: !47)
!2815 = !DILocation(line: 679, column: 40, scope: !2811)
!2816 = !DILocalVariable(name: "m3", arg: 3, scope: !2811, file: !1, line: 679, type: !47)
!2817 = !DILocation(line: 679, column: 56, scope: !2811)
!2818 = !DILocalVariable(name: "i", scope: !2811, file: !1, line: 681, type: !296)
!2819 = !DILocation(line: 681, column: 6, scope: !2811)
!2820 = !DILocalVariable(name: "j", scope: !2811, file: !1, line: 681, type: !296)
!2821 = !DILocation(line: 681, column: 9, scope: !2811)
!2822 = !DILocation(line: 683, column: 9, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2811, file: !1, line: 683, column: 2)
!2824 = !DILocation(line: 683, column: 7, scope: !2823)
!2825 = !DILocation(line: 683, column: 14, scope: !2826)
!2826 = distinct !DILexicalBlock(scope: !2823, file: !1, line: 683, column: 2)
!2827 = !DILocation(line: 683, column: 16, scope: !2826)
!2828 = !DILocation(line: 683, column: 2, scope: !2823)
!2829 = !DILocation(line: 684, column: 10, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2826, file: !1, line: 684, column: 3)
!2831 = !DILocation(line: 684, column: 8, scope: !2830)
!2832 = !DILocation(line: 684, column: 15, scope: !2833)
!2833 = distinct !DILexicalBlock(scope: !2830, file: !1, line: 684, column: 3)
!2834 = !DILocation(line: 684, column: 17, scope: !2833)
!2835 = !DILocation(line: 684, column: 3, scope: !2830)
!2836 = !DILocation(line: 685, column: 15, scope: !2833)
!2837 = !DILocation(line: 685, column: 18, scope: !2833)
!2838 = !DILocation(line: 685, column: 21, scope: !2833)
!2839 = !DILocation(line: 685, column: 26, scope: !2833)
!2840 = !DILocation(line: 685, column: 29, scope: !2833)
!2841 = !DILocation(line: 685, column: 32, scope: !2833)
!2842 = !DILocation(line: 685, column: 24, scope: !2833)
!2843 = !DILocation(line: 685, column: 4, scope: !2833)
!2844 = !DILocation(line: 685, column: 7, scope: !2833)
!2845 = !DILocation(line: 685, column: 10, scope: !2833)
!2846 = !DILocation(line: 685, column: 13, scope: !2833)
!2847 = !DILocation(line: 684, column: 23, scope: !2833)
!2848 = !DILocation(line: 684, column: 3, scope: !2833)
!2849 = distinct !{!2849, !2835, !2850}
!2850 = !DILocation(line: 685, column: 33, scope: !2830)
!2851 = !DILocation(line: 683, column: 22, scope: !2826)
!2852 = !DILocation(line: 683, column: 2, scope: !2826)
!2853 = distinct !{!2853, !2828, !2854}
!2854 = !DILocation(line: 685, column: 33, scope: !2823)
!2855 = !DILocation(line: 686, column: 1, scope: !2811)
!2856 = distinct !DISubprogram(name: "sub_m3_m3m3", scope: !1, file: !1, line: 688, type: !690, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2857 = !DILocalVariable(name: "m1", arg: 1, scope: !2856, file: !1, line: 688, type: !35)
!2858 = !DILocation(line: 688, column: 24, scope: !2856)
!2859 = !DILocalVariable(name: "m2", arg: 2, scope: !2856, file: !1, line: 688, type: !35)
!2860 = !DILocation(line: 688, column: 40, scope: !2856)
!2861 = !DILocalVariable(name: "m3", arg: 3, scope: !2856, file: !1, line: 688, type: !35)
!2862 = !DILocation(line: 688, column: 56, scope: !2856)
!2863 = !DILocalVariable(name: "i", scope: !2856, file: !1, line: 690, type: !296)
!2864 = !DILocation(line: 690, column: 6, scope: !2856)
!2865 = !DILocalVariable(name: "j", scope: !2856, file: !1, line: 690, type: !296)
!2866 = !DILocation(line: 690, column: 9, scope: !2856)
!2867 = !DILocation(line: 692, column: 9, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2856, file: !1, line: 692, column: 2)
!2869 = !DILocation(line: 692, column: 7, scope: !2868)
!2870 = !DILocation(line: 692, column: 14, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2868, file: !1, line: 692, column: 2)
!2872 = !DILocation(line: 692, column: 16, scope: !2871)
!2873 = !DILocation(line: 692, column: 2, scope: !2868)
!2874 = !DILocation(line: 693, column: 10, scope: !2875)
!2875 = distinct !DILexicalBlock(scope: !2871, file: !1, line: 693, column: 3)
!2876 = !DILocation(line: 693, column: 8, scope: !2875)
!2877 = !DILocation(line: 693, column: 15, scope: !2878)
!2878 = distinct !DILexicalBlock(scope: !2875, file: !1, line: 693, column: 3)
!2879 = !DILocation(line: 693, column: 17, scope: !2878)
!2880 = !DILocation(line: 693, column: 3, scope: !2875)
!2881 = !DILocation(line: 694, column: 15, scope: !2878)
!2882 = !DILocation(line: 694, column: 18, scope: !2878)
!2883 = !DILocation(line: 694, column: 21, scope: !2878)
!2884 = !DILocation(line: 694, column: 26, scope: !2878)
!2885 = !DILocation(line: 694, column: 29, scope: !2878)
!2886 = !DILocation(line: 694, column: 32, scope: !2878)
!2887 = !DILocation(line: 694, column: 24, scope: !2878)
!2888 = !DILocation(line: 694, column: 4, scope: !2878)
!2889 = !DILocation(line: 694, column: 7, scope: !2878)
!2890 = !DILocation(line: 694, column: 10, scope: !2878)
!2891 = !DILocation(line: 694, column: 13, scope: !2878)
!2892 = !DILocation(line: 693, column: 23, scope: !2878)
!2893 = !DILocation(line: 693, column: 3, scope: !2878)
!2894 = distinct !{!2894, !2880, !2895}
!2895 = !DILocation(line: 694, column: 33, scope: !2875)
!2896 = !DILocation(line: 692, column: 22, scope: !2871)
!2897 = !DILocation(line: 692, column: 2, scope: !2871)
!2898 = distinct !{!2898, !2873, !2899}
!2899 = !DILocation(line: 694, column: 33, scope: !2868)
!2900 = !DILocation(line: 695, column: 1, scope: !2856)
!2901 = distinct !DISubprogram(name: "sub_m4_m4m4", scope: !1, file: !1, line: 697, type: !398, scopeLine: 698, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2902 = !DILocalVariable(name: "m1", arg: 1, scope: !2901, file: !1, line: 697, type: !47)
!2903 = !DILocation(line: 697, column: 24, scope: !2901)
!2904 = !DILocalVariable(name: "m2", arg: 2, scope: !2901, file: !1, line: 697, type: !47)
!2905 = !DILocation(line: 697, column: 40, scope: !2901)
!2906 = !DILocalVariable(name: "m3", arg: 3, scope: !2901, file: !1, line: 697, type: !47)
!2907 = !DILocation(line: 697, column: 56, scope: !2901)
!2908 = !DILocalVariable(name: "i", scope: !2901, file: !1, line: 699, type: !296)
!2909 = !DILocation(line: 699, column: 6, scope: !2901)
!2910 = !DILocalVariable(name: "j", scope: !2901, file: !1, line: 699, type: !296)
!2911 = !DILocation(line: 699, column: 9, scope: !2901)
!2912 = !DILocation(line: 701, column: 9, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2901, file: !1, line: 701, column: 2)
!2914 = !DILocation(line: 701, column: 7, scope: !2913)
!2915 = !DILocation(line: 701, column: 14, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2913, file: !1, line: 701, column: 2)
!2917 = !DILocation(line: 701, column: 16, scope: !2916)
!2918 = !DILocation(line: 701, column: 2, scope: !2913)
!2919 = !DILocation(line: 702, column: 10, scope: !2920)
!2920 = distinct !DILexicalBlock(scope: !2916, file: !1, line: 702, column: 3)
!2921 = !DILocation(line: 702, column: 8, scope: !2920)
!2922 = !DILocation(line: 702, column: 15, scope: !2923)
!2923 = distinct !DILexicalBlock(scope: !2920, file: !1, line: 702, column: 3)
!2924 = !DILocation(line: 702, column: 17, scope: !2923)
!2925 = !DILocation(line: 702, column: 3, scope: !2920)
!2926 = !DILocation(line: 703, column: 15, scope: !2923)
!2927 = !DILocation(line: 703, column: 18, scope: !2923)
!2928 = !DILocation(line: 703, column: 21, scope: !2923)
!2929 = !DILocation(line: 703, column: 26, scope: !2923)
!2930 = !DILocation(line: 703, column: 29, scope: !2923)
!2931 = !DILocation(line: 703, column: 32, scope: !2923)
!2932 = !DILocation(line: 703, column: 24, scope: !2923)
!2933 = !DILocation(line: 703, column: 4, scope: !2923)
!2934 = !DILocation(line: 703, column: 7, scope: !2923)
!2935 = !DILocation(line: 703, column: 10, scope: !2923)
!2936 = !DILocation(line: 703, column: 13, scope: !2923)
!2937 = !DILocation(line: 702, column: 23, scope: !2923)
!2938 = !DILocation(line: 702, column: 3, scope: !2923)
!2939 = distinct !{!2939, !2925, !2940}
!2940 = !DILocation(line: 703, column: 33, scope: !2920)
!2941 = !DILocation(line: 701, column: 22, scope: !2916)
!2942 = !DILocation(line: 701, column: 2, scope: !2916)
!2943 = distinct !{!2943, !2918, !2944}
!2944 = !DILocation(line: 703, column: 33, scope: !2913)
!2945 = !DILocation(line: 704, column: 1, scope: !2901)
!2946 = distinct !DISubprogram(name: "determinant_m3_array", scope: !1, file: !1, line: 706, type: !2947, scopeLine: 707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2947 = !DISubroutineType(types: !2948)
!2948 = !{!4, !35}
!2949 = !DILocalVariable(name: "m", arg: 1, scope: !2946, file: !1, line: 706, type: !35)
!2950 = !DILocation(line: 706, column: 34, scope: !2946)
!2951 = !DILocation(line: 708, column: 10, scope: !2946)
!2952 = !DILocation(line: 708, column: 21, scope: !2946)
!2953 = !DILocation(line: 708, column: 31, scope: !2946)
!2954 = !DILocation(line: 708, column: 29, scope: !2946)
!2955 = !DILocation(line: 708, column: 41, scope: !2946)
!2956 = !DILocation(line: 708, column: 51, scope: !2946)
!2957 = !DILocation(line: 708, column: 49, scope: !2946)
!2958 = !DILocation(line: 708, column: 39, scope: !2946)
!2959 = !DILocation(line: 708, column: 18, scope: !2946)
!2960 = !DILocation(line: 709, column: 10, scope: !2946)
!2961 = !DILocation(line: 709, column: 21, scope: !2946)
!2962 = !DILocation(line: 709, column: 31, scope: !2946)
!2963 = !DILocation(line: 709, column: 29, scope: !2946)
!2964 = !DILocation(line: 709, column: 41, scope: !2946)
!2965 = !DILocation(line: 709, column: 51, scope: !2946)
!2966 = !DILocation(line: 709, column: 49, scope: !2946)
!2967 = !DILocation(line: 709, column: 39, scope: !2946)
!2968 = !DILocation(line: 709, column: 18, scope: !2946)
!2969 = !DILocation(line: 708, column: 60, scope: !2946)
!2970 = !DILocation(line: 710, column: 10, scope: !2946)
!2971 = !DILocation(line: 710, column: 21, scope: !2946)
!2972 = !DILocation(line: 710, column: 31, scope: !2946)
!2973 = !DILocation(line: 710, column: 29, scope: !2946)
!2974 = !DILocation(line: 710, column: 41, scope: !2946)
!2975 = !DILocation(line: 710, column: 51, scope: !2946)
!2976 = !DILocation(line: 710, column: 49, scope: !2946)
!2977 = !DILocation(line: 710, column: 39, scope: !2946)
!2978 = !DILocation(line: 710, column: 18, scope: !2946)
!2979 = !DILocation(line: 709, column: 60, scope: !2946)
!2980 = !DILocation(line: 708, column: 2, scope: !2946)
!2981 = distinct !DISubprogram(name: "invert_m3_ex", scope: !1, file: !1, line: 713, type: !2982, scopeLine: 714, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!2982 = !DISubroutineType(types: !2983)
!2983 = !{!2984, !35, !1722}
!2984 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2985 = !DILocalVariable(name: "m", arg: 1, scope: !2981, file: !1, line: 713, type: !35)
!2986 = !DILocation(line: 713, column: 25, scope: !2981)
!2987 = !DILocalVariable(name: "epsilon", arg: 2, scope: !2981, file: !1, line: 713, type: !1722)
!2988 = !DILocation(line: 713, column: 46, scope: !2981)
!2989 = !DILocalVariable(name: "tmp", scope: !2981, file: !1, line: 715, type: !699)
!2990 = !DILocation(line: 715, column: 8, scope: !2981)
!2991 = !DILocalVariable(name: "success", scope: !2981, file: !1, line: 716, type: !2992)
!2992 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2984)
!2993 = !DILocation(line: 716, column: 13, scope: !2981)
!2994 = !DILocation(line: 716, column: 39, scope: !2981)
!2995 = !DILocation(line: 716, column: 44, scope: !2981)
!2996 = !DILocation(line: 716, column: 47, scope: !2981)
!2997 = !DILocation(line: 716, column: 23, scope: !2981)
!2998 = !DILocation(line: 718, column: 13, scope: !2981)
!2999 = !DILocation(line: 718, column: 16, scope: !2981)
!3000 = !DILocation(line: 718, column: 2, scope: !2981)
!3001 = !DILocation(line: 719, column: 9, scope: !2981)
!3002 = !DILocation(line: 719, column: 2, scope: !2981)
!3003 = distinct !DISubprogram(name: "invert_m3_m3_ex", scope: !1, file: !1, line: 722, type: !3004, scopeLine: 723, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3004 = !DISubroutineType(types: !3005)
!3005 = !{!2984, !35, !35, !1722}
!3006 = !DILocalVariable(name: "m1", arg: 1, scope: !3003, file: !1, line: 722, type: !35)
!3007 = !DILocation(line: 722, column: 28, scope: !3003)
!3008 = !DILocalVariable(name: "m2", arg: 2, scope: !3003, file: !1, line: 722, type: !35)
!3009 = !DILocation(line: 722, column: 44, scope: !3003)
!3010 = !DILocalVariable(name: "epsilon", arg: 3, scope: !3003, file: !1, line: 722, type: !1722)
!3011 = !DILocation(line: 722, column: 66, scope: !3003)
!3012 = !DILocalVariable(name: "det", scope: !3003, file: !1, line: 724, type: !4)
!3013 = !DILocation(line: 724, column: 8, scope: !3003)
!3014 = !DILocalVariable(name: "a", scope: !3003, file: !1, line: 725, type: !296)
!3015 = !DILocation(line: 725, column: 6, scope: !3003)
!3016 = !DILocalVariable(name: "b", scope: !3003, file: !1, line: 725, type: !296)
!3017 = !DILocation(line: 725, column: 9, scope: !3003)
!3018 = !DILocalVariable(name: "success", scope: !3003, file: !1, line: 726, type: !2984)
!3019 = !DILocation(line: 726, column: 7, scope: !3003)
!3020 = !DILocation(line: 731, column: 16, scope: !3003)
!3021 = !DILocation(line: 731, column: 20, scope: !3003)
!3022 = !DILocation(line: 731, column: 2, scope: !3003)
!3023 = !DILocation(line: 734, column: 29, scope: !3003)
!3024 = !DILocation(line: 734, column: 8, scope: !3003)
!3025 = !DILocation(line: 734, column: 6, scope: !3003)
!3026 = !DILocation(line: 736, column: 19, scope: !3003)
!3027 = !DILocation(line: 736, column: 13, scope: !3003)
!3028 = !DILocation(line: 736, column: 26, scope: !3003)
!3029 = !DILocation(line: 736, column: 24, scope: !3003)
!3030 = !DILocation(line: 736, column: 12, scope: !3003)
!3031 = !DILocation(line: 736, column: 10, scope: !3003)
!3032 = !DILocation(line: 738, column: 6, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3003, file: !1, line: 738, column: 6)
!3034 = !DILocation(line: 738, column: 6, scope: !3003)
!3035 = !DILocation(line: 739, column: 16, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3033, file: !1, line: 738, column: 27)
!3037 = !DILocation(line: 739, column: 14, scope: !3036)
!3038 = !DILocation(line: 739, column: 7, scope: !3036)
!3039 = !DILocation(line: 740, column: 10, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3036, file: !1, line: 740, column: 3)
!3041 = !DILocation(line: 740, column: 8, scope: !3040)
!3042 = !DILocation(line: 740, column: 15, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3040, file: !1, line: 740, column: 3)
!3044 = !DILocation(line: 740, column: 17, scope: !3043)
!3045 = !DILocation(line: 740, column: 3, scope: !3040)
!3046 = !DILocation(line: 741, column: 11, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3048, file: !1, line: 741, column: 4)
!3048 = distinct !DILexicalBlock(scope: !3043, file: !1, line: 740, column: 27)
!3049 = !DILocation(line: 741, column: 9, scope: !3047)
!3050 = !DILocation(line: 741, column: 16, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3047, file: !1, line: 741, column: 4)
!3052 = !DILocation(line: 741, column: 18, scope: !3051)
!3053 = !DILocation(line: 741, column: 4, scope: !3047)
!3054 = !DILocation(line: 742, column: 17, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !3051, file: !1, line: 741, column: 28)
!3056 = !DILocation(line: 742, column: 5, scope: !3055)
!3057 = !DILocation(line: 742, column: 8, scope: !3055)
!3058 = !DILocation(line: 742, column: 11, scope: !3055)
!3059 = !DILocation(line: 742, column: 14, scope: !3055)
!3060 = !DILocation(line: 743, column: 4, scope: !3055)
!3061 = !DILocation(line: 741, column: 24, scope: !3051)
!3062 = !DILocation(line: 741, column: 4, scope: !3051)
!3063 = distinct !{!3063, !3053, !3064}
!3064 = !DILocation(line: 743, column: 4, scope: !3047)
!3065 = !DILocation(line: 744, column: 3, scope: !3048)
!3066 = !DILocation(line: 740, column: 23, scope: !3043)
!3067 = !DILocation(line: 740, column: 3, scope: !3043)
!3068 = distinct !{!3068, !3045, !3069}
!3069 = !DILocation(line: 744, column: 3, scope: !3040)
!3070 = !DILocation(line: 745, column: 2, scope: !3036)
!3071 = !DILocation(line: 746, column: 9, scope: !3003)
!3072 = !DILocation(line: 746, column: 2, scope: !3003)
!3073 = distinct !DISubprogram(name: "adjoint_m3_m3", scope: !1, file: !1, line: 1219, type: !137, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3074 = !DILocalVariable(name: "m1", arg: 1, scope: !3073, file: !1, line: 1219, type: !35)
!3075 = !DILocation(line: 1219, column: 26, scope: !3073)
!3076 = !DILocalVariable(name: "m", arg: 2, scope: !3073, file: !1, line: 1219, type: !35)
!3077 = !DILocation(line: 1219, column: 42, scope: !3073)
!3078 = !DILocation(line: 1222, column: 13, scope: !3073)
!3079 = !DILocation(line: 1222, column: 23, scope: !3073)
!3080 = !DILocation(line: 1222, column: 21, scope: !3073)
!3081 = !DILocation(line: 1222, column: 33, scope: !3073)
!3082 = !DILocation(line: 1222, column: 43, scope: !3073)
!3083 = !DILocation(line: 1222, column: 41, scope: !3073)
!3084 = !DILocation(line: 1222, column: 31, scope: !3073)
!3085 = !DILocation(line: 1222, column: 2, scope: !3073)
!3086 = !DILocation(line: 1222, column: 11, scope: !3073)
!3087 = !DILocation(line: 1223, column: 14, scope: !3073)
!3088 = !DILocation(line: 1223, column: 13, scope: !3073)
!3089 = !DILocation(line: 1223, column: 24, scope: !3073)
!3090 = !DILocation(line: 1223, column: 22, scope: !3073)
!3091 = !DILocation(line: 1223, column: 34, scope: !3073)
!3092 = !DILocation(line: 1223, column: 44, scope: !3073)
!3093 = !DILocation(line: 1223, column: 42, scope: !3073)
!3094 = !DILocation(line: 1223, column: 32, scope: !3073)
!3095 = !DILocation(line: 1223, column: 2, scope: !3073)
!3096 = !DILocation(line: 1223, column: 11, scope: !3073)
!3097 = !DILocation(line: 1224, column: 13, scope: !3073)
!3098 = !DILocation(line: 1224, column: 23, scope: !3073)
!3099 = !DILocation(line: 1224, column: 21, scope: !3073)
!3100 = !DILocation(line: 1224, column: 33, scope: !3073)
!3101 = !DILocation(line: 1224, column: 43, scope: !3073)
!3102 = !DILocation(line: 1224, column: 41, scope: !3073)
!3103 = !DILocation(line: 1224, column: 31, scope: !3073)
!3104 = !DILocation(line: 1224, column: 2, scope: !3073)
!3105 = !DILocation(line: 1224, column: 11, scope: !3073)
!3106 = !DILocation(line: 1226, column: 14, scope: !3073)
!3107 = !DILocation(line: 1226, column: 13, scope: !3073)
!3108 = !DILocation(line: 1226, column: 24, scope: !3073)
!3109 = !DILocation(line: 1226, column: 22, scope: !3073)
!3110 = !DILocation(line: 1226, column: 34, scope: !3073)
!3111 = !DILocation(line: 1226, column: 44, scope: !3073)
!3112 = !DILocation(line: 1226, column: 42, scope: !3073)
!3113 = !DILocation(line: 1226, column: 32, scope: !3073)
!3114 = !DILocation(line: 1226, column: 2, scope: !3073)
!3115 = !DILocation(line: 1226, column: 11, scope: !3073)
!3116 = !DILocation(line: 1227, column: 13, scope: !3073)
!3117 = !DILocation(line: 1227, column: 23, scope: !3073)
!3118 = !DILocation(line: 1227, column: 21, scope: !3073)
!3119 = !DILocation(line: 1227, column: 33, scope: !3073)
!3120 = !DILocation(line: 1227, column: 43, scope: !3073)
!3121 = !DILocation(line: 1227, column: 41, scope: !3073)
!3122 = !DILocation(line: 1227, column: 31, scope: !3073)
!3123 = !DILocation(line: 1227, column: 2, scope: !3073)
!3124 = !DILocation(line: 1227, column: 11, scope: !3073)
!3125 = !DILocation(line: 1228, column: 14, scope: !3073)
!3126 = !DILocation(line: 1228, column: 13, scope: !3073)
!3127 = !DILocation(line: 1228, column: 24, scope: !3073)
!3128 = !DILocation(line: 1228, column: 22, scope: !3073)
!3129 = !DILocation(line: 1228, column: 34, scope: !3073)
!3130 = !DILocation(line: 1228, column: 44, scope: !3073)
!3131 = !DILocation(line: 1228, column: 42, scope: !3073)
!3132 = !DILocation(line: 1228, column: 32, scope: !3073)
!3133 = !DILocation(line: 1228, column: 2, scope: !3073)
!3134 = !DILocation(line: 1228, column: 11, scope: !3073)
!3135 = !DILocation(line: 1230, column: 13, scope: !3073)
!3136 = !DILocation(line: 1230, column: 23, scope: !3073)
!3137 = !DILocation(line: 1230, column: 21, scope: !3073)
!3138 = !DILocation(line: 1230, column: 33, scope: !3073)
!3139 = !DILocation(line: 1230, column: 43, scope: !3073)
!3140 = !DILocation(line: 1230, column: 41, scope: !3073)
!3141 = !DILocation(line: 1230, column: 31, scope: !3073)
!3142 = !DILocation(line: 1230, column: 2, scope: !3073)
!3143 = !DILocation(line: 1230, column: 11, scope: !3073)
!3144 = !DILocation(line: 1231, column: 14, scope: !3073)
!3145 = !DILocation(line: 1231, column: 13, scope: !3073)
!3146 = !DILocation(line: 1231, column: 24, scope: !3073)
!3147 = !DILocation(line: 1231, column: 22, scope: !3073)
!3148 = !DILocation(line: 1231, column: 34, scope: !3073)
!3149 = !DILocation(line: 1231, column: 44, scope: !3073)
!3150 = !DILocation(line: 1231, column: 42, scope: !3073)
!3151 = !DILocation(line: 1231, column: 32, scope: !3073)
!3152 = !DILocation(line: 1231, column: 2, scope: !3073)
!3153 = !DILocation(line: 1231, column: 11, scope: !3073)
!3154 = !DILocation(line: 1232, column: 13, scope: !3073)
!3155 = !DILocation(line: 1232, column: 23, scope: !3073)
!3156 = !DILocation(line: 1232, column: 21, scope: !3073)
!3157 = !DILocation(line: 1232, column: 33, scope: !3073)
!3158 = !DILocation(line: 1232, column: 43, scope: !3073)
!3159 = !DILocation(line: 1232, column: 41, scope: !3073)
!3160 = !DILocation(line: 1232, column: 31, scope: !3073)
!3161 = !DILocation(line: 1232, column: 2, scope: !3073)
!3162 = !DILocation(line: 1232, column: 11, scope: !3073)
!3163 = !DILocation(line: 1233, column: 1, scope: !3073)
!3164 = distinct !DISubprogram(name: "invert_m3", scope: !1, file: !1, line: 749, type: !3165, scopeLine: 750, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3165 = !DISubroutineType(types: !3166)
!3166 = !{!2984, !35}
!3167 = !DILocalVariable(name: "m", arg: 1, scope: !3164, file: !1, line: 749, type: !35)
!3168 = !DILocation(line: 749, column: 22, scope: !3164)
!3169 = !DILocalVariable(name: "tmp", scope: !3164, file: !1, line: 751, type: !699)
!3170 = !DILocation(line: 751, column: 8, scope: !3164)
!3171 = !DILocalVariable(name: "success", scope: !3164, file: !1, line: 752, type: !2992)
!3172 = !DILocation(line: 752, column: 13, scope: !3164)
!3173 = !DILocation(line: 752, column: 36, scope: !3164)
!3174 = !DILocation(line: 752, column: 41, scope: !3164)
!3175 = !DILocation(line: 752, column: 23, scope: !3164)
!3176 = !DILocation(line: 754, column: 13, scope: !3164)
!3177 = !DILocation(line: 754, column: 16, scope: !3164)
!3178 = !DILocation(line: 754, column: 2, scope: !3164)
!3179 = !DILocation(line: 755, column: 9, scope: !3164)
!3180 = !DILocation(line: 755, column: 2, scope: !3164)
!3181 = distinct !DISubprogram(name: "invert_m3_m3", scope: !1, file: !1, line: 758, type: !3182, scopeLine: 759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3182 = !DISubroutineType(types: !3183)
!3183 = !{!2984, !35, !35}
!3184 = !DILocalVariable(name: "m1", arg: 1, scope: !3181, file: !1, line: 758, type: !35)
!3185 = !DILocation(line: 758, column: 25, scope: !3181)
!3186 = !DILocalVariable(name: "m2", arg: 2, scope: !3181, file: !1, line: 758, type: !35)
!3187 = !DILocation(line: 758, column: 41, scope: !3181)
!3188 = !DILocalVariable(name: "det", scope: !3181, file: !1, line: 760, type: !4)
!3189 = !DILocation(line: 760, column: 8, scope: !3181)
!3190 = !DILocalVariable(name: "a", scope: !3181, file: !1, line: 761, type: !296)
!3191 = !DILocation(line: 761, column: 6, scope: !3181)
!3192 = !DILocalVariable(name: "b", scope: !3181, file: !1, line: 761, type: !296)
!3193 = !DILocation(line: 761, column: 9, scope: !3181)
!3194 = !DILocalVariable(name: "success", scope: !3181, file: !1, line: 762, type: !2984)
!3195 = !DILocation(line: 762, column: 7, scope: !3181)
!3196 = !DILocation(line: 765, column: 16, scope: !3181)
!3197 = !DILocation(line: 765, column: 20, scope: !3181)
!3198 = !DILocation(line: 765, column: 2, scope: !3181)
!3199 = !DILocation(line: 768, column: 29, scope: !3181)
!3200 = !DILocation(line: 768, column: 8, scope: !3181)
!3201 = !DILocation(line: 768, column: 6, scope: !3181)
!3202 = !DILocation(line: 770, column: 13, scope: !3181)
!3203 = !DILocation(line: 770, column: 17, scope: !3181)
!3204 = !DILocation(line: 770, column: 12, scope: !3181)
!3205 = !DILocation(line: 770, column: 10, scope: !3181)
!3206 = !DILocation(line: 772, column: 6, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3181, file: !1, line: 772, column: 6)
!3208 = !DILocation(line: 772, column: 6, scope: !3181)
!3209 = !DILocation(line: 773, column: 16, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3207, file: !1, line: 772, column: 27)
!3211 = !DILocation(line: 773, column: 14, scope: !3210)
!3212 = !DILocation(line: 773, column: 7, scope: !3210)
!3213 = !DILocation(line: 774, column: 10, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3210, file: !1, line: 774, column: 3)
!3215 = !DILocation(line: 774, column: 8, scope: !3214)
!3216 = !DILocation(line: 774, column: 15, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3214, file: !1, line: 774, column: 3)
!3218 = !DILocation(line: 774, column: 17, scope: !3217)
!3219 = !DILocation(line: 774, column: 3, scope: !3214)
!3220 = !DILocation(line: 775, column: 11, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3222, file: !1, line: 775, column: 4)
!3222 = distinct !DILexicalBlock(scope: !3217, file: !1, line: 774, column: 27)
!3223 = !DILocation(line: 775, column: 9, scope: !3221)
!3224 = !DILocation(line: 775, column: 16, scope: !3225)
!3225 = distinct !DILexicalBlock(scope: !3221, file: !1, line: 775, column: 4)
!3226 = !DILocation(line: 775, column: 18, scope: !3225)
!3227 = !DILocation(line: 775, column: 4, scope: !3221)
!3228 = !DILocation(line: 776, column: 17, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3225, file: !1, line: 775, column: 28)
!3230 = !DILocation(line: 776, column: 5, scope: !3229)
!3231 = !DILocation(line: 776, column: 8, scope: !3229)
!3232 = !DILocation(line: 776, column: 11, scope: !3229)
!3233 = !DILocation(line: 776, column: 14, scope: !3229)
!3234 = !DILocation(line: 777, column: 4, scope: !3229)
!3235 = !DILocation(line: 775, column: 24, scope: !3225)
!3236 = !DILocation(line: 775, column: 4, scope: !3225)
!3237 = distinct !{!3237, !3227, !3238}
!3238 = !DILocation(line: 777, column: 4, scope: !3221)
!3239 = !DILocation(line: 778, column: 3, scope: !3222)
!3240 = !DILocation(line: 774, column: 23, scope: !3217)
!3241 = !DILocation(line: 774, column: 3, scope: !3217)
!3242 = distinct !{!3242, !3219, !3243}
!3243 = !DILocation(line: 778, column: 3, scope: !3214)
!3244 = !DILocation(line: 779, column: 2, scope: !3210)
!3245 = !DILocation(line: 781, column: 9, scope: !3181)
!3246 = !DILocation(line: 781, column: 2, scope: !3181)
!3247 = distinct !DISubprogram(name: "invert_m4", scope: !1, file: !1, line: 784, type: !3248, scopeLine: 785, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3248 = !DISubroutineType(types: !3249)
!3249 = !{!2984, !47}
!3250 = !DILocalVariable(name: "m", arg: 1, scope: !3247, file: !1, line: 784, type: !47)
!3251 = !DILocation(line: 784, column: 22, scope: !3247)
!3252 = !DILocalVariable(name: "tmp", scope: !3247, file: !1, line: 786, type: !12)
!3253 = !DILocation(line: 786, column: 8, scope: !3247)
!3254 = !DILocalVariable(name: "success", scope: !3247, file: !1, line: 787, type: !2992)
!3255 = !DILocation(line: 787, column: 13, scope: !3247)
!3256 = !DILocation(line: 787, column: 36, scope: !3247)
!3257 = !DILocation(line: 787, column: 41, scope: !3247)
!3258 = !DILocation(line: 787, column: 23, scope: !3247)
!3259 = !DILocation(line: 789, column: 13, scope: !3247)
!3260 = !DILocation(line: 789, column: 16, scope: !3247)
!3261 = !DILocation(line: 789, column: 2, scope: !3247)
!3262 = !DILocation(line: 790, column: 9, scope: !3247)
!3263 = !DILocation(line: 790, column: 2, scope: !3247)
!3264 = distinct !DISubprogram(name: "invert_m4_m4", scope: !1, file: !1, line: 802, type: !3265, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3265 = !DISubroutineType(types: !3266)
!3266 = !{!2984, !47, !47}
!3267 = !DILocalVariable(name: "inverse", arg: 1, scope: !3264, file: !1, line: 802, type: !47)
!3268 = !DILocation(line: 802, column: 25, scope: !3264)
!3269 = !DILocalVariable(name: "mat", arg: 2, scope: !3264, file: !1, line: 802, type: !47)
!3270 = !DILocation(line: 802, column: 46, scope: !3264)
!3271 = !DILocalVariable(name: "i", scope: !3264, file: !1, line: 804, type: !296)
!3272 = !DILocation(line: 804, column: 6, scope: !3264)
!3273 = !DILocalVariable(name: "j", scope: !3264, file: !1, line: 804, type: !296)
!3274 = !DILocation(line: 804, column: 9, scope: !3264)
!3275 = !DILocalVariable(name: "k", scope: !3264, file: !1, line: 804, type: !296)
!3276 = !DILocation(line: 804, column: 12, scope: !3264)
!3277 = !DILocalVariable(name: "temp", scope: !3264, file: !1, line: 805, type: !5)
!3278 = !DILocation(line: 805, column: 9, scope: !3264)
!3279 = !DILocalVariable(name: "tempmat", scope: !3264, file: !1, line: 806, type: !12)
!3280 = !DILocation(line: 806, column: 8, scope: !3264)
!3281 = !DILocalVariable(name: "max", scope: !3264, file: !1, line: 807, type: !4)
!3282 = !DILocation(line: 807, column: 8, scope: !3264)
!3283 = !DILocalVariable(name: "maxj", scope: !3264, file: !1, line: 808, type: !296)
!3284 = !DILocation(line: 808, column: 6, scope: !3264)
!3285 = !DILocation(line: 813, column: 9, scope: !3286)
!3286 = distinct !DILexicalBlock(scope: !3264, file: !1, line: 813, column: 2)
!3287 = !DILocation(line: 813, column: 7, scope: !3286)
!3288 = !DILocation(line: 813, column: 14, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3286, file: !1, line: 813, column: 2)
!3290 = !DILocation(line: 813, column: 16, scope: !3289)
!3291 = !DILocation(line: 813, column: 2, scope: !3286)
!3292 = !DILocation(line: 814, column: 10, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !3289, file: !1, line: 814, column: 3)
!3294 = !DILocation(line: 814, column: 8, scope: !3293)
!3295 = !DILocation(line: 814, column: 15, scope: !3296)
!3296 = distinct !DILexicalBlock(scope: !3293, file: !1, line: 814, column: 3)
!3297 = !DILocation(line: 814, column: 17, scope: !3296)
!3298 = !DILocation(line: 814, column: 3, scope: !3293)
!3299 = !DILocation(line: 815, column: 4, scope: !3296)
!3300 = !DILocation(line: 815, column: 12, scope: !3296)
!3301 = !DILocation(line: 815, column: 15, scope: !3296)
!3302 = !DILocation(line: 815, column: 18, scope: !3296)
!3303 = !DILocation(line: 814, column: 23, scope: !3296)
!3304 = !DILocation(line: 814, column: 3, scope: !3296)
!3305 = distinct !{!3305, !3298, !3306}
!3306 = !DILocation(line: 815, column: 20, scope: !3293)
!3307 = !DILocation(line: 813, column: 22, scope: !3289)
!3308 = !DILocation(line: 813, column: 2, scope: !3289)
!3309 = distinct !{!3309, !3291, !3310}
!3310 = !DILocation(line: 815, column: 20, scope: !3286)
!3311 = !DILocation(line: 816, column: 9, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3264, file: !1, line: 816, column: 2)
!3313 = !DILocation(line: 816, column: 7, scope: !3312)
!3314 = !DILocation(line: 816, column: 14, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3312, file: !1, line: 816, column: 2)
!3316 = !DILocation(line: 816, column: 16, scope: !3315)
!3317 = !DILocation(line: 816, column: 2, scope: !3312)
!3318 = !DILocation(line: 817, column: 3, scope: !3315)
!3319 = !DILocation(line: 817, column: 11, scope: !3315)
!3320 = !DILocation(line: 817, column: 14, scope: !3315)
!3321 = !DILocation(line: 817, column: 17, scope: !3315)
!3322 = !DILocation(line: 816, column: 22, scope: !3315)
!3323 = !DILocation(line: 816, column: 2, scope: !3315)
!3324 = distinct !{!3324, !3317, !3325}
!3325 = !DILocation(line: 817, column: 19, scope: !3312)
!3326 = !DILocation(line: 820, column: 9, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3264, file: !1, line: 820, column: 2)
!3328 = !DILocation(line: 820, column: 7, scope: !3327)
!3329 = !DILocation(line: 820, column: 14, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3327, file: !1, line: 820, column: 2)
!3331 = !DILocation(line: 820, column: 16, scope: !3330)
!3332 = !DILocation(line: 820, column: 2, scope: !3327)
!3333 = !DILocation(line: 821, column: 10, scope: !3334)
!3334 = distinct !DILexicalBlock(scope: !3330, file: !1, line: 821, column: 3)
!3335 = !DILocation(line: 821, column: 8, scope: !3334)
!3336 = !DILocation(line: 821, column: 15, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3334, file: !1, line: 821, column: 3)
!3338 = !DILocation(line: 821, column: 17, scope: !3337)
!3339 = !DILocation(line: 821, column: 3, scope: !3334)
!3340 = !DILocation(line: 822, column: 20, scope: !3337)
!3341 = !DILocation(line: 822, column: 24, scope: !3337)
!3342 = !DILocation(line: 822, column: 27, scope: !3337)
!3343 = !DILocation(line: 822, column: 12, scope: !3337)
!3344 = !DILocation(line: 822, column: 4, scope: !3337)
!3345 = !DILocation(line: 822, column: 15, scope: !3337)
!3346 = !DILocation(line: 822, column: 18, scope: !3337)
!3347 = !DILocation(line: 821, column: 23, scope: !3337)
!3348 = !DILocation(line: 821, column: 3, scope: !3337)
!3349 = distinct !{!3349, !3339, !3350}
!3350 = !DILocation(line: 822, column: 28, scope: !3334)
!3351 = !DILocation(line: 820, column: 22, scope: !3330)
!3352 = !DILocation(line: 820, column: 2, scope: !3330)
!3353 = distinct !{!3353, !3332, !3354}
!3354 = !DILocation(line: 822, column: 28, scope: !3327)
!3355 = !DILocation(line: 824, column: 9, scope: !3356)
!3356 = distinct !DILexicalBlock(scope: !3264, file: !1, line: 824, column: 2)
!3357 = !DILocation(line: 824, column: 7, scope: !3356)
!3358 = !DILocation(line: 824, column: 14, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3356, file: !1, line: 824, column: 2)
!3360 = !DILocation(line: 824, column: 16, scope: !3359)
!3361 = !DILocation(line: 824, column: 2, scope: !3356)
!3362 = !DILocation(line: 826, column: 23, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3359, file: !1, line: 824, column: 26)
!3364 = !DILocation(line: 826, column: 15, scope: !3363)
!3365 = !DILocation(line: 826, column: 26, scope: !3363)
!3366 = !DILocation(line: 826, column: 9, scope: !3363)
!3367 = !DILocation(line: 826, column: 7, scope: !3363)
!3368 = !DILocation(line: 827, column: 10, scope: !3363)
!3369 = !DILocation(line: 827, column: 8, scope: !3363)
!3370 = !DILocation(line: 828, column: 12, scope: !3371)
!3371 = distinct !DILexicalBlock(scope: !3363, file: !1, line: 828, column: 3)
!3372 = !DILocation(line: 828, column: 14, scope: !3371)
!3373 = !DILocation(line: 828, column: 10, scope: !3371)
!3374 = !DILocation(line: 828, column: 8, scope: !3371)
!3375 = !DILocation(line: 828, column: 19, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3371, file: !1, line: 828, column: 3)
!3377 = !DILocation(line: 828, column: 21, scope: !3376)
!3378 = !DILocation(line: 828, column: 3, scope: !3371)
!3379 = !DILocation(line: 829, column: 22, scope: !3380)
!3380 = distinct !DILexicalBlock(scope: !3381, file: !1, line: 829, column: 8)
!3381 = distinct !DILexicalBlock(scope: !3376, file: !1, line: 828, column: 31)
!3382 = !DILocation(line: 829, column: 14, scope: !3380)
!3383 = !DILocation(line: 829, column: 25, scope: !3380)
!3384 = !DILocation(line: 829, column: 8, scope: !3380)
!3385 = !DILocation(line: 829, column: 31, scope: !3380)
!3386 = !DILocation(line: 829, column: 29, scope: !3380)
!3387 = !DILocation(line: 829, column: 8, scope: !3381)
!3388 = !DILocation(line: 830, column: 25, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3380, file: !1, line: 829, column: 36)
!3390 = !DILocation(line: 830, column: 17, scope: !3389)
!3391 = !DILocation(line: 830, column: 28, scope: !3389)
!3392 = !DILocation(line: 830, column: 11, scope: !3389)
!3393 = !DILocation(line: 830, column: 9, scope: !3389)
!3394 = !DILocation(line: 831, column: 12, scope: !3389)
!3395 = !DILocation(line: 831, column: 10, scope: !3389)
!3396 = !DILocation(line: 832, column: 4, scope: !3389)
!3397 = !DILocation(line: 833, column: 3, scope: !3381)
!3398 = !DILocation(line: 828, column: 27, scope: !3376)
!3399 = !DILocation(line: 828, column: 3, scope: !3376)
!3400 = distinct !{!3400, !3378, !3401}
!3401 = !DILocation(line: 833, column: 3, scope: !3371)
!3402 = !DILocation(line: 835, column: 7, scope: !3403)
!3403 = distinct !DILexicalBlock(scope: !3363, file: !1, line: 835, column: 7)
!3404 = !DILocation(line: 835, column: 15, scope: !3403)
!3405 = !DILocation(line: 835, column: 12, scope: !3403)
!3406 = !DILocation(line: 835, column: 7, scope: !3363)
!3407 = !DILocation(line: 836, column: 11, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3409, file: !1, line: 836, column: 4)
!3409 = distinct !DILexicalBlock(scope: !3403, file: !1, line: 835, column: 18)
!3410 = !DILocation(line: 836, column: 9, scope: !3408)
!3411 = !DILocation(line: 836, column: 16, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3408, file: !1, line: 836, column: 4)
!3413 = !DILocation(line: 836, column: 18, scope: !3412)
!3414 = !DILocation(line: 836, column: 4, scope: !3408)
!3415 = !DILocalVariable(name: "sw_ap", scope: !3416, file: !1, line: 837, type: !4)
!3416 = distinct !DILexicalBlock(scope: !3417, file: !1, line: 837, column: 5)
!3417 = distinct !DILexicalBlock(scope: !3412, file: !1, line: 836, column: 28)
!3418 = !DILocation(line: 837, column: 5, scope: !3416)
!3419 = !DILocalVariable(name: "sw_ap", scope: !3420, file: !1, line: 838, type: !4)
!3420 = distinct !DILexicalBlock(scope: !3417, file: !1, line: 838, column: 5)
!3421 = !DILocation(line: 838, column: 5, scope: !3420)
!3422 = !DILocation(line: 839, column: 4, scope: !3417)
!3423 = !DILocation(line: 836, column: 24, scope: !3412)
!3424 = !DILocation(line: 836, column: 4, scope: !3412)
!3425 = distinct !{!3425, !3414, !3426}
!3426 = !DILocation(line: 839, column: 4, scope: !3408)
!3427 = !DILocation(line: 840, column: 3, scope: !3409)
!3428 = !DILocation(line: 842, column: 18, scope: !3363)
!3429 = !DILocation(line: 842, column: 10, scope: !3363)
!3430 = !DILocation(line: 842, column: 21, scope: !3363)
!3431 = !DILocation(line: 842, column: 8, scope: !3363)
!3432 = !DILocation(line: 843, column: 7, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3363, file: !1, line: 843, column: 7)
!3434 = !DILocation(line: 843, column: 12, scope: !3433)
!3435 = !DILocation(line: 843, column: 7, scope: !3363)
!3436 = !DILocation(line: 844, column: 4, scope: !3433)
!3437 = !DILocation(line: 845, column: 10, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3363, file: !1, line: 845, column: 3)
!3439 = !DILocation(line: 845, column: 8, scope: !3438)
!3440 = !DILocation(line: 845, column: 15, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3438, file: !1, line: 845, column: 3)
!3442 = !DILocation(line: 845, column: 17, scope: !3441)
!3443 = !DILocation(line: 845, column: 3, scope: !3438)
!3444 = !DILocation(line: 846, column: 44, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3441, file: !1, line: 845, column: 27)
!3446 = !DILocation(line: 846, column: 36, scope: !3445)
!3447 = !DILocation(line: 846, column: 47, scope: !3445)
!3448 = !DILocation(line: 846, column: 28, scope: !3445)
!3449 = !DILocation(line: 846, column: 52, scope: !3445)
!3450 = !DILocation(line: 846, column: 50, scope: !3445)
!3451 = !DILocation(line: 846, column: 20, scope: !3445)
!3452 = !DILocation(line: 846, column: 12, scope: !3445)
!3453 = !DILocation(line: 846, column: 4, scope: !3445)
!3454 = !DILocation(line: 846, column: 15, scope: !3445)
!3455 = !DILocation(line: 846, column: 18, scope: !3445)
!3456 = !DILocation(line: 847, column: 36, scope: !3445)
!3457 = !DILocation(line: 847, column: 44, scope: !3445)
!3458 = !DILocation(line: 847, column: 47, scope: !3445)
!3459 = !DILocation(line: 847, column: 28, scope: !3445)
!3460 = !DILocation(line: 847, column: 52, scope: !3445)
!3461 = !DILocation(line: 847, column: 50, scope: !3445)
!3462 = !DILocation(line: 847, column: 20, scope: !3445)
!3463 = !DILocation(line: 847, column: 4, scope: !3445)
!3464 = !DILocation(line: 847, column: 12, scope: !3445)
!3465 = !DILocation(line: 847, column: 15, scope: !3445)
!3466 = !DILocation(line: 847, column: 18, scope: !3445)
!3467 = !DILocation(line: 848, column: 3, scope: !3445)
!3468 = !DILocation(line: 845, column: 23, scope: !3441)
!3469 = !DILocation(line: 845, column: 3, scope: !3441)
!3470 = distinct !{!3470, !3443, !3471}
!3471 = !DILocation(line: 848, column: 3, scope: !3438)
!3472 = !DILocation(line: 849, column: 10, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !3363, file: !1, line: 849, column: 3)
!3474 = !DILocation(line: 849, column: 8, scope: !3473)
!3475 = !DILocation(line: 849, column: 15, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3473, file: !1, line: 849, column: 3)
!3477 = !DILocation(line: 849, column: 17, scope: !3476)
!3478 = !DILocation(line: 849, column: 3, scope: !3473)
!3479 = !DILocation(line: 850, column: 8, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3481, file: !1, line: 850, column: 8)
!3481 = distinct !DILexicalBlock(scope: !3476, file: !1, line: 849, column: 27)
!3482 = !DILocation(line: 850, column: 13, scope: !3480)
!3483 = !DILocation(line: 850, column: 10, scope: !3480)
!3484 = !DILocation(line: 850, column: 8, scope: !3481)
!3485 = !DILocation(line: 851, column: 20, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3480, file: !1, line: 850, column: 16)
!3487 = !DILocation(line: 851, column: 12, scope: !3486)
!3488 = !DILocation(line: 851, column: 23, scope: !3486)
!3489 = !DILocation(line: 851, column: 10, scope: !3486)
!3490 = !DILocation(line: 852, column: 12, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3486, file: !1, line: 852, column: 5)
!3492 = !DILocation(line: 852, column: 10, scope: !3491)
!3493 = !DILocation(line: 852, column: 17, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3491, file: !1, line: 852, column: 5)
!3495 = !DILocation(line: 852, column: 19, scope: !3494)
!3496 = !DILocation(line: 852, column: 5, scope: !3491)
!3497 = !DILocation(line: 853, column: 47, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3494, file: !1, line: 852, column: 29)
!3499 = !DILocation(line: 853, column: 39, scope: !3498)
!3500 = !DILocation(line: 853, column: 50, scope: !3498)
!3501 = !DILocation(line: 853, column: 31, scope: !3498)
!3502 = !DILocation(line: 853, column: 55, scope: !3498)
!3503 = !DILocation(line: 853, column: 53, scope: !3498)
!3504 = !DILocation(line: 853, column: 23, scope: !3498)
!3505 = !DILocation(line: 853, column: 14, scope: !3498)
!3506 = !DILocation(line: 853, column: 6, scope: !3498)
!3507 = !DILocation(line: 853, column: 17, scope: !3498)
!3508 = !DILocation(line: 853, column: 20, scope: !3498)
!3509 = !DILocation(line: 854, column: 39, scope: !3498)
!3510 = !DILocation(line: 854, column: 47, scope: !3498)
!3511 = !DILocation(line: 854, column: 50, scope: !3498)
!3512 = !DILocation(line: 854, column: 31, scope: !3498)
!3513 = !DILocation(line: 854, column: 55, scope: !3498)
!3514 = !DILocation(line: 854, column: 53, scope: !3498)
!3515 = !DILocation(line: 854, column: 23, scope: !3498)
!3516 = !DILocation(line: 854, column: 6, scope: !3498)
!3517 = !DILocation(line: 854, column: 14, scope: !3498)
!3518 = !DILocation(line: 854, column: 17, scope: !3498)
!3519 = !DILocation(line: 854, column: 20, scope: !3498)
!3520 = !DILocation(line: 855, column: 5, scope: !3498)
!3521 = !DILocation(line: 852, column: 25, scope: !3494)
!3522 = !DILocation(line: 852, column: 5, scope: !3494)
!3523 = distinct !{!3523, !3496, !3524}
!3524 = !DILocation(line: 855, column: 5, scope: !3491)
!3525 = !DILocation(line: 856, column: 4, scope: !3486)
!3526 = !DILocation(line: 857, column: 3, scope: !3481)
!3527 = !DILocation(line: 849, column: 23, scope: !3476)
!3528 = !DILocation(line: 849, column: 3, scope: !3476)
!3529 = distinct !{!3529, !3478, !3530}
!3530 = !DILocation(line: 857, column: 3, scope: !3473)
!3531 = !DILocation(line: 858, column: 2, scope: !3363)
!3532 = !DILocation(line: 824, column: 22, scope: !3359)
!3533 = !DILocation(line: 824, column: 2, scope: !3359)
!3534 = distinct !{!3534, !3361, !3535}
!3535 = !DILocation(line: 858, column: 2, scope: !3356)
!3536 = !DILocation(line: 859, column: 2, scope: !3264)
!3537 = !DILocation(line: 860, column: 1, scope: !3264)
!3538 = distinct !DISubprogram(name: "transpose_m3", scope: !1, file: !1, line: 864, type: !33, scopeLine: 865, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3539 = !DILocalVariable(name: "mat", arg: 1, scope: !3538, file: !1, line: 864, type: !35)
!3540 = !DILocation(line: 864, column: 25, scope: !3538)
!3541 = !DILocalVariable(name: "t", scope: !3538, file: !1, line: 866, type: !4)
!3542 = !DILocation(line: 866, column: 8, scope: !3538)
!3543 = !DILocation(line: 868, column: 6, scope: !3538)
!3544 = !DILocation(line: 868, column: 4, scope: !3538)
!3545 = !DILocation(line: 869, column: 14, scope: !3538)
!3546 = !DILocation(line: 869, column: 2, scope: !3538)
!3547 = !DILocation(line: 869, column: 12, scope: !3538)
!3548 = !DILocation(line: 870, column: 14, scope: !3538)
!3549 = !DILocation(line: 870, column: 2, scope: !3538)
!3550 = !DILocation(line: 870, column: 12, scope: !3538)
!3551 = !DILocation(line: 871, column: 6, scope: !3538)
!3552 = !DILocation(line: 871, column: 4, scope: !3538)
!3553 = !DILocation(line: 872, column: 14, scope: !3538)
!3554 = !DILocation(line: 872, column: 2, scope: !3538)
!3555 = !DILocation(line: 872, column: 12, scope: !3538)
!3556 = !DILocation(line: 873, column: 14, scope: !3538)
!3557 = !DILocation(line: 873, column: 2, scope: !3538)
!3558 = !DILocation(line: 873, column: 12, scope: !3538)
!3559 = !DILocation(line: 874, column: 6, scope: !3538)
!3560 = !DILocation(line: 874, column: 4, scope: !3538)
!3561 = !DILocation(line: 875, column: 14, scope: !3538)
!3562 = !DILocation(line: 875, column: 2, scope: !3538)
!3563 = !DILocation(line: 875, column: 12, scope: !3538)
!3564 = !DILocation(line: 876, column: 14, scope: !3538)
!3565 = !DILocation(line: 876, column: 2, scope: !3538)
!3566 = !DILocation(line: 876, column: 12, scope: !3538)
!3567 = !DILocation(line: 877, column: 1, scope: !3538)
!3568 = distinct !DISubprogram(name: "transpose_m4", scope: !1, file: !1, line: 879, type: !45, scopeLine: 880, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3569 = !DILocalVariable(name: "mat", arg: 1, scope: !3568, file: !1, line: 879, type: !47)
!3570 = !DILocation(line: 879, column: 25, scope: !3568)
!3571 = !DILocalVariable(name: "t", scope: !3568, file: !1, line: 881, type: !4)
!3572 = !DILocation(line: 881, column: 8, scope: !3568)
!3573 = !DILocation(line: 883, column: 6, scope: !3568)
!3574 = !DILocation(line: 883, column: 4, scope: !3568)
!3575 = !DILocation(line: 884, column: 14, scope: !3568)
!3576 = !DILocation(line: 884, column: 2, scope: !3568)
!3577 = !DILocation(line: 884, column: 12, scope: !3568)
!3578 = !DILocation(line: 885, column: 14, scope: !3568)
!3579 = !DILocation(line: 885, column: 2, scope: !3568)
!3580 = !DILocation(line: 885, column: 12, scope: !3568)
!3581 = !DILocation(line: 886, column: 6, scope: !3568)
!3582 = !DILocation(line: 886, column: 4, scope: !3568)
!3583 = !DILocation(line: 887, column: 14, scope: !3568)
!3584 = !DILocation(line: 887, column: 2, scope: !3568)
!3585 = !DILocation(line: 887, column: 12, scope: !3568)
!3586 = !DILocation(line: 888, column: 14, scope: !3568)
!3587 = !DILocation(line: 888, column: 2, scope: !3568)
!3588 = !DILocation(line: 888, column: 12, scope: !3568)
!3589 = !DILocation(line: 889, column: 6, scope: !3568)
!3590 = !DILocation(line: 889, column: 4, scope: !3568)
!3591 = !DILocation(line: 890, column: 14, scope: !3568)
!3592 = !DILocation(line: 890, column: 2, scope: !3568)
!3593 = !DILocation(line: 890, column: 12, scope: !3568)
!3594 = !DILocation(line: 891, column: 14, scope: !3568)
!3595 = !DILocation(line: 891, column: 2, scope: !3568)
!3596 = !DILocation(line: 891, column: 12, scope: !3568)
!3597 = !DILocation(line: 893, column: 6, scope: !3568)
!3598 = !DILocation(line: 893, column: 4, scope: !3568)
!3599 = !DILocation(line: 894, column: 14, scope: !3568)
!3600 = !DILocation(line: 894, column: 2, scope: !3568)
!3601 = !DILocation(line: 894, column: 12, scope: !3568)
!3602 = !DILocation(line: 895, column: 14, scope: !3568)
!3603 = !DILocation(line: 895, column: 2, scope: !3568)
!3604 = !DILocation(line: 895, column: 12, scope: !3568)
!3605 = !DILocation(line: 896, column: 6, scope: !3568)
!3606 = !DILocation(line: 896, column: 4, scope: !3568)
!3607 = !DILocation(line: 897, column: 14, scope: !3568)
!3608 = !DILocation(line: 897, column: 2, scope: !3568)
!3609 = !DILocation(line: 897, column: 12, scope: !3568)
!3610 = !DILocation(line: 898, column: 14, scope: !3568)
!3611 = !DILocation(line: 898, column: 2, scope: !3568)
!3612 = !DILocation(line: 898, column: 12, scope: !3568)
!3613 = !DILocation(line: 900, column: 6, scope: !3568)
!3614 = !DILocation(line: 900, column: 4, scope: !3568)
!3615 = !DILocation(line: 901, column: 14, scope: !3568)
!3616 = !DILocation(line: 901, column: 2, scope: !3568)
!3617 = !DILocation(line: 901, column: 12, scope: !3568)
!3618 = !DILocation(line: 902, column: 14, scope: !3568)
!3619 = !DILocation(line: 902, column: 2, scope: !3568)
!3620 = !DILocation(line: 902, column: 12, scope: !3568)
!3621 = !DILocation(line: 903, column: 1, scope: !3568)
!3622 = distinct !DISubprogram(name: "compare_m4m4", scope: !1, file: !1, line: 905, type: !3623, scopeLine: 906, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3623 = !DISubroutineType(types: !3624)
!3624 = !{!296, !47, !47, !4}
!3625 = !DILocalVariable(name: "mat1", arg: 1, scope: !3622, file: !1, line: 905, type: !47)
!3626 = !DILocation(line: 905, column: 24, scope: !3622)
!3627 = !DILocalVariable(name: "mat2", arg: 2, scope: !3622, file: !1, line: 905, type: !47)
!3628 = !DILocation(line: 905, column: 42, scope: !3622)
!3629 = !DILocalVariable(name: "limit", arg: 3, scope: !3622, file: !1, line: 905, type: !4)
!3630 = !DILocation(line: 905, column: 60, scope: !3622)
!3631 = !DILocation(line: 907, column: 19, scope: !3632)
!3632 = distinct !DILexicalBlock(scope: !3622, file: !1, line: 907, column: 6)
!3633 = !DILocation(line: 907, column: 28, scope: !3632)
!3634 = !DILocation(line: 907, column: 37, scope: !3632)
!3635 = !DILocation(line: 907, column: 6, scope: !3632)
!3636 = !DILocation(line: 907, column: 6, scope: !3622)
!3637 = !DILocation(line: 908, column: 20, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3632, file: !1, line: 908, column: 7)
!3639 = !DILocation(line: 908, column: 29, scope: !3638)
!3640 = !DILocation(line: 908, column: 38, scope: !3638)
!3641 = !DILocation(line: 908, column: 7, scope: !3638)
!3642 = !DILocation(line: 908, column: 7, scope: !3632)
!3643 = !DILocation(line: 909, column: 21, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3638, file: !1, line: 909, column: 8)
!3645 = !DILocation(line: 909, column: 30, scope: !3644)
!3646 = !DILocation(line: 909, column: 39, scope: !3644)
!3647 = !DILocation(line: 909, column: 8, scope: !3644)
!3648 = !DILocation(line: 909, column: 8, scope: !3638)
!3649 = !DILocation(line: 910, column: 22, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3644, file: !1, line: 910, column: 9)
!3651 = !DILocation(line: 910, column: 31, scope: !3650)
!3652 = !DILocation(line: 910, column: 40, scope: !3650)
!3653 = !DILocation(line: 910, column: 9, scope: !3650)
!3654 = !DILocation(line: 910, column: 9, scope: !3644)
!3655 = !DILocation(line: 911, column: 6, scope: !3650)
!3656 = !DILocation(line: 910, column: 45, scope: !3650)
!3657 = !DILocation(line: 909, column: 44, scope: !3644)
!3658 = !DILocation(line: 908, column: 43, scope: !3638)
!3659 = !DILocation(line: 912, column: 2, scope: !3622)
!3660 = !DILocation(line: 913, column: 1, scope: !3622)
!3661 = distinct !DISubprogram(name: "compare_v4v4", scope: !1718, file: !1718, line: 979, type: !3662, scopeLine: 980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3662 = !DISubroutineType(types: !3663)
!3663 = !{!2984, !1721, !1721, !1722}
!3664 = !DILocalVariable(name: "v1", arg: 1, scope: !3661, file: !1718, line: 979, type: !1721)
!3665 = !DILocation(line: 979, column: 39, scope: !3661)
!3666 = !DILocalVariable(name: "v2", arg: 2, scope: !3661, file: !1718, line: 979, type: !1721)
!3667 = !DILocation(line: 979, column: 58, scope: !3661)
!3668 = !DILocalVariable(name: "limit", arg: 3, scope: !3661, file: !1718, line: 979, type: !1722)
!3669 = !DILocation(line: 979, column: 77, scope: !3661)
!3670 = !DILocation(line: 981, column: 12, scope: !3671)
!3671 = distinct !DILexicalBlock(scope: !3661, file: !1718, line: 981, column: 6)
!3672 = !DILocation(line: 981, column: 20, scope: !3671)
!3673 = !DILocation(line: 981, column: 18, scope: !3671)
!3674 = !DILocation(line: 981, column: 6, scope: !3671)
!3675 = !DILocation(line: 981, column: 30, scope: !3671)
!3676 = !DILocation(line: 981, column: 27, scope: !3671)
!3677 = !DILocation(line: 981, column: 6, scope: !3661)
!3678 = !DILocation(line: 982, column: 13, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !3671, file: !1718, line: 982, column: 7)
!3680 = !DILocation(line: 982, column: 21, scope: !3679)
!3681 = !DILocation(line: 982, column: 19, scope: !3679)
!3682 = !DILocation(line: 982, column: 7, scope: !3679)
!3683 = !DILocation(line: 982, column: 31, scope: !3679)
!3684 = !DILocation(line: 982, column: 28, scope: !3679)
!3685 = !DILocation(line: 982, column: 7, scope: !3671)
!3686 = !DILocation(line: 983, column: 14, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3679, file: !1718, line: 983, column: 8)
!3688 = !DILocation(line: 983, column: 22, scope: !3687)
!3689 = !DILocation(line: 983, column: 20, scope: !3687)
!3690 = !DILocation(line: 983, column: 8, scope: !3687)
!3691 = !DILocation(line: 983, column: 32, scope: !3687)
!3692 = !DILocation(line: 983, column: 29, scope: !3687)
!3693 = !DILocation(line: 983, column: 8, scope: !3679)
!3694 = !DILocation(line: 984, column: 15, scope: !3695)
!3695 = distinct !DILexicalBlock(scope: !3687, file: !1718, line: 984, column: 9)
!3696 = !DILocation(line: 984, column: 23, scope: !3695)
!3697 = !DILocation(line: 984, column: 21, scope: !3695)
!3698 = !DILocation(line: 984, column: 9, scope: !3695)
!3699 = !DILocation(line: 984, column: 33, scope: !3695)
!3700 = !DILocation(line: 984, column: 30, scope: !3695)
!3701 = !DILocation(line: 984, column: 9, scope: !3687)
!3702 = !DILocation(line: 985, column: 6, scope: !3695)
!3703 = !DILocation(line: 987, column: 2, scope: !3661)
!3704 = !DILocation(line: 988, column: 1, scope: !3661)
!3705 = distinct !DISubprogram(name: "orthogonalize_m3", scope: !1, file: !1, line: 915, type: !3706, scopeLine: 916, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3706 = !DISubroutineType(types: !3707)
!3707 = !{null, !35, !296}
!3708 = !DILocalVariable(name: "mat", arg: 1, scope: !3705, file: !1, line: 915, type: !35)
!3709 = !DILocation(line: 915, column: 29, scope: !3705)
!3710 = !DILocalVariable(name: "axis", arg: 2, scope: !3705, file: !1, line: 915, type: !296)
!3711 = !DILocation(line: 915, column: 44, scope: !3705)
!3712 = !DILocalVariable(name: "size", scope: !3705, file: !1, line: 917, type: !36)
!3713 = !DILocation(line: 917, column: 8, scope: !3705)
!3714 = !DILocation(line: 918, column: 15, scope: !3705)
!3715 = !DILocation(line: 918, column: 21, scope: !3705)
!3716 = !DILocation(line: 918, column: 2, scope: !3705)
!3717 = !DILocation(line: 919, column: 15, scope: !3705)
!3718 = !DILocation(line: 919, column: 19, scope: !3705)
!3719 = !DILocation(line: 919, column: 2, scope: !3705)
!3720 = !DILocation(line: 920, column: 10, scope: !3705)
!3721 = !DILocation(line: 920, column: 2, scope: !3705)
!3722 = !DILocation(line: 922, column: 17, scope: !3723)
!3723 = distinct !DILexicalBlock(scope: !3724, file: !1, line: 922, column: 8)
!3724 = distinct !DILexicalBlock(scope: !3705, file: !1, line: 920, column: 16)
!3725 = !DILocation(line: 922, column: 25, scope: !3723)
!3726 = !DILocation(line: 922, column: 8, scope: !3723)
!3727 = !DILocation(line: 922, column: 33, scope: !3723)
!3728 = !DILocation(line: 922, column: 8, scope: !3724)
!3729 = !DILocation(line: 923, column: 19, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3723, file: !1, line: 922, column: 38)
!3731 = !DILocation(line: 923, column: 27, scope: !3730)
!3732 = !DILocation(line: 923, column: 35, scope: !3730)
!3733 = !DILocation(line: 923, column: 5, scope: !3730)
!3734 = !DILocation(line: 924, column: 18, scope: !3730)
!3735 = !DILocation(line: 924, column: 5, scope: !3730)
!3736 = !DILocation(line: 925, column: 19, scope: !3730)
!3737 = !DILocation(line: 925, column: 27, scope: !3730)
!3738 = !DILocation(line: 925, column: 35, scope: !3730)
!3739 = !DILocation(line: 925, column: 5, scope: !3730)
!3740 = !DILocation(line: 926, column: 4, scope: !3730)
!3741 = !DILocation(line: 927, column: 22, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3723, file: !1, line: 927, column: 13)
!3743 = !DILocation(line: 927, column: 30, scope: !3742)
!3744 = !DILocation(line: 927, column: 13, scope: !3742)
!3745 = !DILocation(line: 927, column: 38, scope: !3742)
!3746 = !DILocation(line: 927, column: 13, scope: !3723)
!3747 = !DILocation(line: 928, column: 19, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3742, file: !1, line: 927, column: 43)
!3749 = !DILocation(line: 928, column: 27, scope: !3748)
!3750 = !DILocation(line: 928, column: 35, scope: !3748)
!3751 = !DILocation(line: 928, column: 5, scope: !3748)
!3752 = !DILocation(line: 929, column: 18, scope: !3748)
!3753 = !DILocation(line: 929, column: 5, scope: !3748)
!3754 = !DILocation(line: 930, column: 19, scope: !3748)
!3755 = !DILocation(line: 930, column: 27, scope: !3748)
!3756 = !DILocation(line: 930, column: 35, scope: !3748)
!3757 = !DILocation(line: 930, column: 5, scope: !3748)
!3758 = !DILocation(line: 931, column: 4, scope: !3748)
!3759 = !DILocalVariable(name: "vec", scope: !3760, file: !1, line: 933, type: !36)
!3760 = distinct !DILexicalBlock(scope: !3742, file: !1, line: 932, column: 9)
!3761 = !DILocation(line: 933, column: 11, scope: !3760)
!3762 = !DILocation(line: 935, column: 14, scope: !3760)
!3763 = !DILocation(line: 935, column: 5, scope: !3760)
!3764 = !DILocation(line: 935, column: 12, scope: !3760)
!3765 = !DILocation(line: 936, column: 14, scope: !3760)
!3766 = !DILocation(line: 936, column: 5, scope: !3760)
!3767 = !DILocation(line: 936, column: 12, scope: !3760)
!3768 = !DILocation(line: 937, column: 14, scope: !3760)
!3769 = !DILocation(line: 937, column: 5, scope: !3760)
!3770 = !DILocation(line: 937, column: 12, scope: !3760)
!3771 = !DILocation(line: 939, column: 19, scope: !3760)
!3772 = !DILocation(line: 939, column: 27, scope: !3760)
!3773 = !DILocation(line: 939, column: 35, scope: !3760)
!3774 = !DILocation(line: 939, column: 5, scope: !3760)
!3775 = !DILocation(line: 940, column: 18, scope: !3760)
!3776 = !DILocation(line: 940, column: 5, scope: !3760)
!3777 = !DILocation(line: 941, column: 19, scope: !3760)
!3778 = !DILocation(line: 941, column: 27, scope: !3760)
!3779 = !DILocation(line: 941, column: 35, scope: !3760)
!3780 = !DILocation(line: 941, column: 5, scope: !3760)
!3781 = !DILocation(line: 943, column: 4, scope: !3724)
!3782 = !DILocation(line: 945, column: 17, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3724, file: !1, line: 945, column: 8)
!3784 = !DILocation(line: 945, column: 25, scope: !3783)
!3785 = !DILocation(line: 945, column: 8, scope: !3783)
!3786 = !DILocation(line: 945, column: 33, scope: !3783)
!3787 = !DILocation(line: 945, column: 8, scope: !3724)
!3788 = !DILocation(line: 946, column: 19, scope: !3789)
!3789 = distinct !DILexicalBlock(scope: !3783, file: !1, line: 945, column: 38)
!3790 = !DILocation(line: 946, column: 27, scope: !3789)
!3791 = !DILocation(line: 946, column: 35, scope: !3789)
!3792 = !DILocation(line: 946, column: 5, scope: !3789)
!3793 = !DILocation(line: 947, column: 18, scope: !3789)
!3794 = !DILocation(line: 947, column: 5, scope: !3789)
!3795 = !DILocation(line: 948, column: 19, scope: !3789)
!3796 = !DILocation(line: 948, column: 27, scope: !3789)
!3797 = !DILocation(line: 948, column: 35, scope: !3789)
!3798 = !DILocation(line: 948, column: 5, scope: !3789)
!3799 = !DILocation(line: 949, column: 4, scope: !3789)
!3800 = !DILocation(line: 950, column: 22, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3783, file: !1, line: 950, column: 13)
!3802 = !DILocation(line: 950, column: 30, scope: !3801)
!3803 = !DILocation(line: 950, column: 13, scope: !3801)
!3804 = !DILocation(line: 950, column: 38, scope: !3801)
!3805 = !DILocation(line: 950, column: 13, scope: !3783)
!3806 = !DILocation(line: 951, column: 19, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3801, file: !1, line: 950, column: 43)
!3808 = !DILocation(line: 951, column: 27, scope: !3807)
!3809 = !DILocation(line: 951, column: 35, scope: !3807)
!3810 = !DILocation(line: 951, column: 5, scope: !3807)
!3811 = !DILocation(line: 952, column: 18, scope: !3807)
!3812 = !DILocation(line: 952, column: 5, scope: !3807)
!3813 = !DILocation(line: 953, column: 19, scope: !3807)
!3814 = !DILocation(line: 953, column: 27, scope: !3807)
!3815 = !DILocation(line: 953, column: 35, scope: !3807)
!3816 = !DILocation(line: 953, column: 5, scope: !3807)
!3817 = !DILocation(line: 954, column: 4, scope: !3807)
!3818 = !DILocalVariable(name: "vec", scope: !3819, file: !1, line: 956, type: !36)
!3819 = distinct !DILexicalBlock(scope: !3801, file: !1, line: 955, column: 9)
!3820 = !DILocation(line: 956, column: 11, scope: !3819)
!3821 = !DILocation(line: 958, column: 14, scope: !3819)
!3822 = !DILocation(line: 958, column: 5, scope: !3819)
!3823 = !DILocation(line: 958, column: 12, scope: !3819)
!3824 = !DILocation(line: 959, column: 14, scope: !3819)
!3825 = !DILocation(line: 959, column: 5, scope: !3819)
!3826 = !DILocation(line: 959, column: 12, scope: !3819)
!3827 = !DILocation(line: 960, column: 14, scope: !3819)
!3828 = !DILocation(line: 960, column: 5, scope: !3819)
!3829 = !DILocation(line: 960, column: 12, scope: !3819)
!3830 = !DILocation(line: 962, column: 19, scope: !3819)
!3831 = !DILocation(line: 962, column: 27, scope: !3819)
!3832 = !DILocation(line: 962, column: 35, scope: !3819)
!3833 = !DILocation(line: 962, column: 5, scope: !3819)
!3834 = !DILocation(line: 963, column: 18, scope: !3819)
!3835 = !DILocation(line: 963, column: 5, scope: !3819)
!3836 = !DILocation(line: 964, column: 19, scope: !3819)
!3837 = !DILocation(line: 964, column: 27, scope: !3819)
!3838 = !DILocation(line: 964, column: 35, scope: !3819)
!3839 = !DILocation(line: 964, column: 5, scope: !3819)
!3840 = !DILocation(line: 966, column: 4, scope: !3724)
!3841 = !DILocation(line: 968, column: 17, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3724, file: !1, line: 968, column: 8)
!3843 = !DILocation(line: 968, column: 25, scope: !3842)
!3844 = !DILocation(line: 968, column: 8, scope: !3842)
!3845 = !DILocation(line: 968, column: 33, scope: !3842)
!3846 = !DILocation(line: 968, column: 8, scope: !3724)
!3847 = !DILocation(line: 969, column: 19, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3842, file: !1, line: 968, column: 38)
!3849 = !DILocation(line: 969, column: 27, scope: !3848)
!3850 = !DILocation(line: 969, column: 35, scope: !3848)
!3851 = !DILocation(line: 969, column: 5, scope: !3848)
!3852 = !DILocation(line: 970, column: 18, scope: !3848)
!3853 = !DILocation(line: 970, column: 5, scope: !3848)
!3854 = !DILocation(line: 971, column: 19, scope: !3848)
!3855 = !DILocation(line: 971, column: 27, scope: !3848)
!3856 = !DILocation(line: 971, column: 35, scope: !3848)
!3857 = !DILocation(line: 971, column: 5, scope: !3848)
!3858 = !DILocation(line: 972, column: 4, scope: !3848)
!3859 = !DILocation(line: 973, column: 22, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3842, file: !1, line: 973, column: 13)
!3861 = !DILocation(line: 973, column: 30, scope: !3860)
!3862 = !DILocation(line: 973, column: 13, scope: !3860)
!3863 = !DILocation(line: 973, column: 38, scope: !3860)
!3864 = !DILocation(line: 973, column: 13, scope: !3842)
!3865 = !DILocation(line: 974, column: 19, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3860, file: !1, line: 973, column: 43)
!3867 = !DILocation(line: 974, column: 27, scope: !3866)
!3868 = !DILocation(line: 974, column: 35, scope: !3866)
!3869 = !DILocation(line: 974, column: 5, scope: !3866)
!3870 = !DILocation(line: 975, column: 18, scope: !3866)
!3871 = !DILocation(line: 975, column: 5, scope: !3866)
!3872 = !DILocation(line: 976, column: 19, scope: !3866)
!3873 = !DILocation(line: 976, column: 27, scope: !3866)
!3874 = !DILocation(line: 976, column: 35, scope: !3866)
!3875 = !DILocation(line: 976, column: 5, scope: !3866)
!3876 = !DILocation(line: 977, column: 4, scope: !3866)
!3877 = !DILocalVariable(name: "vec", scope: !3878, file: !1, line: 979, type: !36)
!3878 = distinct !DILexicalBlock(scope: !3860, file: !1, line: 978, column: 9)
!3879 = !DILocation(line: 979, column: 11, scope: !3878)
!3880 = !DILocation(line: 981, column: 14, scope: !3878)
!3881 = !DILocation(line: 981, column: 5, scope: !3878)
!3882 = !DILocation(line: 981, column: 12, scope: !3878)
!3883 = !DILocation(line: 982, column: 14, scope: !3878)
!3884 = !DILocation(line: 982, column: 5, scope: !3878)
!3885 = !DILocation(line: 982, column: 12, scope: !3878)
!3886 = !DILocation(line: 983, column: 14, scope: !3878)
!3887 = !DILocation(line: 983, column: 5, scope: !3878)
!3888 = !DILocation(line: 983, column: 12, scope: !3878)
!3889 = !DILocation(line: 985, column: 19, scope: !3878)
!3890 = !DILocation(line: 985, column: 27, scope: !3878)
!3891 = !DILocation(line: 985, column: 32, scope: !3878)
!3892 = !DILocation(line: 985, column: 5, scope: !3878)
!3893 = !DILocation(line: 986, column: 18, scope: !3878)
!3894 = !DILocation(line: 986, column: 5, scope: !3878)
!3895 = !DILocation(line: 987, column: 19, scope: !3878)
!3896 = !DILocation(line: 987, column: 27, scope: !3878)
!3897 = !DILocation(line: 987, column: 35, scope: !3878)
!3898 = !DILocation(line: 987, column: 5, scope: !3878)
!3899 = !DILocation(line: 989, column: 4, scope: !3724)
!3900 = !DILocation(line: 992, column: 4, scope: !3724)
!3901 = !DILocation(line: 994, column: 12, scope: !3705)
!3902 = !DILocation(line: 994, column: 20, scope: !3705)
!3903 = !DILocation(line: 994, column: 2, scope: !3705)
!3904 = !DILocation(line: 995, column: 12, scope: !3705)
!3905 = !DILocation(line: 995, column: 20, scope: !3705)
!3906 = !DILocation(line: 995, column: 2, scope: !3705)
!3907 = !DILocation(line: 996, column: 12, scope: !3705)
!3908 = !DILocation(line: 996, column: 20, scope: !3705)
!3909 = !DILocation(line: 996, column: 2, scope: !3705)
!3910 = !DILocation(line: 997, column: 1, scope: !3705)
!3911 = distinct !DISubprogram(name: "mat3_to_size", scope: !1, file: !1, line: 1369, type: !3912, scopeLine: 1370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3912 = !DISubroutineType(types: !3913)
!3913 = !{null, !1686, !35}
!3914 = !DILocalVariable(name: "size", arg: 1, scope: !3911, file: !1, line: 1369, type: !1686)
!3915 = !DILocation(line: 1369, column: 25, scope: !3911)
!3916 = !DILocalVariable(name: "mat", arg: 2, scope: !3911, file: !1, line: 1369, type: !35)
!3917 = !DILocation(line: 1369, column: 40, scope: !3911)
!3918 = !DILocation(line: 1371, column: 19, scope: !3911)
!3919 = !DILocation(line: 1371, column: 12, scope: !3911)
!3920 = !DILocation(line: 1371, column: 2, scope: !3911)
!3921 = !DILocation(line: 1371, column: 10, scope: !3911)
!3922 = !DILocation(line: 1372, column: 19, scope: !3911)
!3923 = !DILocation(line: 1372, column: 12, scope: !3911)
!3924 = !DILocation(line: 1372, column: 2, scope: !3911)
!3925 = !DILocation(line: 1372, column: 10, scope: !3911)
!3926 = !DILocation(line: 1373, column: 19, scope: !3911)
!3927 = !DILocation(line: 1373, column: 12, scope: !3911)
!3928 = !DILocation(line: 1373, column: 2, scope: !3911)
!3929 = !DILocation(line: 1373, column: 10, scope: !3911)
!3930 = !DILocation(line: 1374, column: 1, scope: !3911)
!3931 = distinct !DISubprogram(name: "normalize_v3", scope: !1718, file: !1718, line: 830, type: !3932, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3932 = !DISubroutineType(types: !3933)
!3933 = !{!4, !1686}
!3934 = !DILocalVariable(name: "n", arg: 1, scope: !3931, file: !1718, line: 830, type: !1686)
!3935 = !DILocation(line: 830, column: 34, scope: !3931)
!3936 = !DILocation(line: 832, column: 25, scope: !3931)
!3937 = !DILocation(line: 832, column: 28, scope: !3931)
!3938 = !DILocation(line: 832, column: 9, scope: !3931)
!3939 = !DILocation(line: 832, column: 2, scope: !3931)
!3940 = distinct !DISubprogram(name: "dot_v3v3", scope: !1718, file: !1718, line: 619, type: !3941, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3941 = !DISubroutineType(types: !3942)
!3942 = !{!4, !1721, !1721}
!3943 = !DILocalVariable(name: "a", arg: 1, scope: !3940, file: !1718, line: 619, type: !1721)
!3944 = !DILocation(line: 619, column: 36, scope: !3940)
!3945 = !DILocalVariable(name: "b", arg: 2, scope: !3940, file: !1718, line: 619, type: !1721)
!3946 = !DILocation(line: 619, column: 54, scope: !3940)
!3947 = !DILocation(line: 621, column: 9, scope: !3940)
!3948 = !DILocation(line: 621, column: 16, scope: !3940)
!3949 = !DILocation(line: 621, column: 14, scope: !3940)
!3950 = !DILocation(line: 621, column: 23, scope: !3940)
!3951 = !DILocation(line: 621, column: 30, scope: !3940)
!3952 = !DILocation(line: 621, column: 28, scope: !3940)
!3953 = !DILocation(line: 621, column: 21, scope: !3940)
!3954 = !DILocation(line: 621, column: 37, scope: !3940)
!3955 = !DILocation(line: 621, column: 44, scope: !3940)
!3956 = !DILocation(line: 621, column: 42, scope: !3940)
!3957 = !DILocation(line: 621, column: 35, scope: !3940)
!3958 = !DILocation(line: 621, column: 2, scope: !3940)
!3959 = distinct !DISubprogram(name: "cross_v3_v3v3", scope: !1718, file: !1718, line: 634, type: !3960, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3960 = !DISubroutineType(types: !3961)
!3961 = !{null, !1686, !1721, !1721}
!3962 = !DILocalVariable(name: "r", arg: 1, scope: !3959, file: !1718, line: 634, type: !1686)
!3963 = !DILocation(line: 634, column: 34, scope: !3959)
!3964 = !DILocalVariable(name: "a", arg: 2, scope: !3959, file: !1718, line: 634, type: !1721)
!3965 = !DILocation(line: 634, column: 52, scope: !3959)
!3966 = !DILocalVariable(name: "b", arg: 3, scope: !3959, file: !1718, line: 634, type: !1721)
!3967 = !DILocation(line: 634, column: 70, scope: !3959)
!3968 = !DILocation(line: 637, column: 9, scope: !3959)
!3969 = !DILocation(line: 637, column: 16, scope: !3959)
!3970 = !DILocation(line: 637, column: 14, scope: !3959)
!3971 = !DILocation(line: 637, column: 23, scope: !3959)
!3972 = !DILocation(line: 637, column: 30, scope: !3959)
!3973 = !DILocation(line: 637, column: 28, scope: !3959)
!3974 = !DILocation(line: 637, column: 21, scope: !3959)
!3975 = !DILocation(line: 637, column: 2, scope: !3959)
!3976 = !DILocation(line: 637, column: 7, scope: !3959)
!3977 = !DILocation(line: 638, column: 9, scope: !3959)
!3978 = !DILocation(line: 638, column: 16, scope: !3959)
!3979 = !DILocation(line: 638, column: 14, scope: !3959)
!3980 = !DILocation(line: 638, column: 23, scope: !3959)
!3981 = !DILocation(line: 638, column: 30, scope: !3959)
!3982 = !DILocation(line: 638, column: 28, scope: !3959)
!3983 = !DILocation(line: 638, column: 21, scope: !3959)
!3984 = !DILocation(line: 638, column: 2, scope: !3959)
!3985 = !DILocation(line: 638, column: 7, scope: !3959)
!3986 = !DILocation(line: 639, column: 9, scope: !3959)
!3987 = !DILocation(line: 639, column: 16, scope: !3959)
!3988 = !DILocation(line: 639, column: 14, scope: !3959)
!3989 = !DILocation(line: 639, column: 23, scope: !3959)
!3990 = !DILocation(line: 639, column: 30, scope: !3959)
!3991 = !DILocation(line: 639, column: 28, scope: !3959)
!3992 = !DILocation(line: 639, column: 21, scope: !3959)
!3993 = !DILocation(line: 639, column: 2, scope: !3959)
!3994 = !DILocation(line: 639, column: 7, scope: !3959)
!3995 = !DILocation(line: 640, column: 1, scope: !3959)
!3996 = distinct !DISubprogram(name: "mul_v3_fl", scope: !1718, file: !1718, line: 392, type: !3997, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!3997 = !DISubroutineType(types: !3998)
!3998 = !{null, !1686, !4}
!3999 = !DILocalVariable(name: "r", arg: 1, scope: !3996, file: !1718, line: 392, type: !1686)
!4000 = !DILocation(line: 392, column: 30, scope: !3996)
!4001 = !DILocalVariable(name: "f", arg: 2, scope: !3996, file: !1718, line: 392, type: !4)
!4002 = !DILocation(line: 392, column: 42, scope: !3996)
!4003 = !DILocation(line: 394, column: 10, scope: !3996)
!4004 = !DILocation(line: 394, column: 2, scope: !3996)
!4005 = !DILocation(line: 394, column: 7, scope: !3996)
!4006 = !DILocation(line: 395, column: 10, scope: !3996)
!4007 = !DILocation(line: 395, column: 2, scope: !3996)
!4008 = !DILocation(line: 395, column: 7, scope: !3996)
!4009 = !DILocation(line: 396, column: 10, scope: !3996)
!4010 = !DILocation(line: 396, column: 2, scope: !3996)
!4011 = !DILocation(line: 396, column: 7, scope: !3996)
!4012 = !DILocation(line: 397, column: 1, scope: !3996)
!4013 = distinct !DISubprogram(name: "orthogonalize_m4", scope: !1, file: !1, line: 999, type: !4014, scopeLine: 1000, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4014 = !DISubroutineType(types: !4015)
!4015 = !{null, !47, !296}
!4016 = !DILocalVariable(name: "mat", arg: 1, scope: !4013, file: !1, line: 999, type: !47)
!4017 = !DILocation(line: 999, column: 29, scope: !4013)
!4018 = !DILocalVariable(name: "axis", arg: 2, scope: !4013, file: !1, line: 999, type: !296)
!4019 = !DILocation(line: 999, column: 44, scope: !4013)
!4020 = !DILocalVariable(name: "size", scope: !4013, file: !1, line: 1001, type: !36)
!4021 = !DILocation(line: 1001, column: 8, scope: !4013)
!4022 = !DILocation(line: 1002, column: 15, scope: !4013)
!4023 = !DILocation(line: 1002, column: 21, scope: !4013)
!4024 = !DILocation(line: 1002, column: 2, scope: !4013)
!4025 = !DILocation(line: 1003, column: 15, scope: !4013)
!4026 = !DILocation(line: 1003, column: 19, scope: !4013)
!4027 = !DILocation(line: 1003, column: 2, scope: !4013)
!4028 = !DILocation(line: 1004, column: 10, scope: !4013)
!4029 = !DILocation(line: 1004, column: 2, scope: !4013)
!4030 = !DILocation(line: 1006, column: 17, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !4032, file: !1, line: 1006, column: 8)
!4032 = distinct !DILexicalBlock(scope: !4013, file: !1, line: 1004, column: 16)
!4033 = !DILocation(line: 1006, column: 25, scope: !4031)
!4034 = !DILocation(line: 1006, column: 8, scope: !4031)
!4035 = !DILocation(line: 1006, column: 33, scope: !4031)
!4036 = !DILocation(line: 1006, column: 8, scope: !4032)
!4037 = !DILocation(line: 1007, column: 19, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4031, file: !1, line: 1006, column: 38)
!4039 = !DILocation(line: 1007, column: 27, scope: !4038)
!4040 = !DILocation(line: 1007, column: 35, scope: !4038)
!4041 = !DILocation(line: 1007, column: 5, scope: !4038)
!4042 = !DILocation(line: 1008, column: 18, scope: !4038)
!4043 = !DILocation(line: 1008, column: 5, scope: !4038)
!4044 = !DILocation(line: 1009, column: 19, scope: !4038)
!4045 = !DILocation(line: 1009, column: 27, scope: !4038)
!4046 = !DILocation(line: 1009, column: 35, scope: !4038)
!4047 = !DILocation(line: 1009, column: 5, scope: !4038)
!4048 = !DILocation(line: 1010, column: 4, scope: !4038)
!4049 = !DILocation(line: 1011, column: 22, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4031, file: !1, line: 1011, column: 13)
!4051 = !DILocation(line: 1011, column: 30, scope: !4050)
!4052 = !DILocation(line: 1011, column: 13, scope: !4050)
!4053 = !DILocation(line: 1011, column: 38, scope: !4050)
!4054 = !DILocation(line: 1011, column: 13, scope: !4031)
!4055 = !DILocation(line: 1012, column: 19, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4050, file: !1, line: 1011, column: 43)
!4057 = !DILocation(line: 1012, column: 27, scope: !4056)
!4058 = !DILocation(line: 1012, column: 35, scope: !4056)
!4059 = !DILocation(line: 1012, column: 5, scope: !4056)
!4060 = !DILocation(line: 1013, column: 18, scope: !4056)
!4061 = !DILocation(line: 1013, column: 5, scope: !4056)
!4062 = !DILocation(line: 1014, column: 19, scope: !4056)
!4063 = !DILocation(line: 1014, column: 27, scope: !4056)
!4064 = !DILocation(line: 1014, column: 35, scope: !4056)
!4065 = !DILocation(line: 1014, column: 5, scope: !4056)
!4066 = !DILocation(line: 1015, column: 4, scope: !4056)
!4067 = !DILocalVariable(name: "vec", scope: !4068, file: !1, line: 1017, type: !36)
!4068 = distinct !DILexicalBlock(scope: !4050, file: !1, line: 1016, column: 9)
!4069 = !DILocation(line: 1017, column: 11, scope: !4068)
!4070 = !DILocation(line: 1019, column: 14, scope: !4068)
!4071 = !DILocation(line: 1019, column: 5, scope: !4068)
!4072 = !DILocation(line: 1019, column: 12, scope: !4068)
!4073 = !DILocation(line: 1020, column: 14, scope: !4068)
!4074 = !DILocation(line: 1020, column: 5, scope: !4068)
!4075 = !DILocation(line: 1020, column: 12, scope: !4068)
!4076 = !DILocation(line: 1021, column: 14, scope: !4068)
!4077 = !DILocation(line: 1021, column: 5, scope: !4068)
!4078 = !DILocation(line: 1021, column: 12, scope: !4068)
!4079 = !DILocation(line: 1023, column: 19, scope: !4068)
!4080 = !DILocation(line: 1023, column: 27, scope: !4068)
!4081 = !DILocation(line: 1023, column: 35, scope: !4068)
!4082 = !DILocation(line: 1023, column: 5, scope: !4068)
!4083 = !DILocation(line: 1024, column: 18, scope: !4068)
!4084 = !DILocation(line: 1024, column: 5, scope: !4068)
!4085 = !DILocation(line: 1025, column: 19, scope: !4068)
!4086 = !DILocation(line: 1025, column: 27, scope: !4068)
!4087 = !DILocation(line: 1025, column: 35, scope: !4068)
!4088 = !DILocation(line: 1025, column: 5, scope: !4068)
!4089 = !DILocation(line: 1027, column: 4, scope: !4032)
!4090 = !DILocation(line: 1029, column: 17, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4032, file: !1, line: 1029, column: 8)
!4092 = !DILocation(line: 1029, column: 25, scope: !4091)
!4093 = !DILocation(line: 1029, column: 8, scope: !4091)
!4094 = !DILocation(line: 1029, column: 33, scope: !4091)
!4095 = !DILocation(line: 1029, column: 8, scope: !4032)
!4096 = !DILocation(line: 1030, column: 19, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4091, file: !1, line: 1029, column: 38)
!4098 = !DILocation(line: 1030, column: 27, scope: !4097)
!4099 = !DILocation(line: 1030, column: 35, scope: !4097)
!4100 = !DILocation(line: 1030, column: 5, scope: !4097)
!4101 = !DILocation(line: 1031, column: 18, scope: !4097)
!4102 = !DILocation(line: 1031, column: 5, scope: !4097)
!4103 = !DILocation(line: 1032, column: 19, scope: !4097)
!4104 = !DILocation(line: 1032, column: 27, scope: !4097)
!4105 = !DILocation(line: 1032, column: 35, scope: !4097)
!4106 = !DILocation(line: 1032, column: 5, scope: !4097)
!4107 = !DILocation(line: 1033, column: 4, scope: !4097)
!4108 = !DILocation(line: 1034, column: 22, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4091, file: !1, line: 1034, column: 13)
!4110 = !DILocation(line: 1034, column: 30, scope: !4109)
!4111 = !DILocation(line: 1034, column: 13, scope: !4109)
!4112 = !DILocation(line: 1034, column: 38, scope: !4109)
!4113 = !DILocation(line: 1034, column: 13, scope: !4091)
!4114 = !DILocation(line: 1035, column: 19, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4109, file: !1, line: 1034, column: 43)
!4116 = !DILocation(line: 1035, column: 27, scope: !4115)
!4117 = !DILocation(line: 1035, column: 35, scope: !4115)
!4118 = !DILocation(line: 1035, column: 5, scope: !4115)
!4119 = !DILocation(line: 1036, column: 18, scope: !4115)
!4120 = !DILocation(line: 1036, column: 5, scope: !4115)
!4121 = !DILocation(line: 1037, column: 19, scope: !4115)
!4122 = !DILocation(line: 1037, column: 27, scope: !4115)
!4123 = !DILocation(line: 1037, column: 35, scope: !4115)
!4124 = !DILocation(line: 1037, column: 5, scope: !4115)
!4125 = !DILocation(line: 1038, column: 4, scope: !4115)
!4126 = !DILocalVariable(name: "vec", scope: !4127, file: !1, line: 1040, type: !36)
!4127 = distinct !DILexicalBlock(scope: !4109, file: !1, line: 1039, column: 9)
!4128 = !DILocation(line: 1040, column: 11, scope: !4127)
!4129 = !DILocation(line: 1042, column: 14, scope: !4127)
!4130 = !DILocation(line: 1042, column: 5, scope: !4127)
!4131 = !DILocation(line: 1042, column: 12, scope: !4127)
!4132 = !DILocation(line: 1043, column: 14, scope: !4127)
!4133 = !DILocation(line: 1043, column: 5, scope: !4127)
!4134 = !DILocation(line: 1043, column: 12, scope: !4127)
!4135 = !DILocation(line: 1044, column: 14, scope: !4127)
!4136 = !DILocation(line: 1044, column: 5, scope: !4127)
!4137 = !DILocation(line: 1044, column: 12, scope: !4127)
!4138 = !DILocation(line: 1046, column: 19, scope: !4127)
!4139 = !DILocation(line: 1046, column: 27, scope: !4127)
!4140 = !DILocation(line: 1046, column: 35, scope: !4127)
!4141 = !DILocation(line: 1046, column: 5, scope: !4127)
!4142 = !DILocation(line: 1047, column: 18, scope: !4127)
!4143 = !DILocation(line: 1047, column: 5, scope: !4127)
!4144 = !DILocation(line: 1048, column: 19, scope: !4127)
!4145 = !DILocation(line: 1048, column: 27, scope: !4127)
!4146 = !DILocation(line: 1048, column: 35, scope: !4127)
!4147 = !DILocation(line: 1048, column: 5, scope: !4127)
!4148 = !DILocation(line: 1050, column: 4, scope: !4032)
!4149 = !DILocation(line: 1052, column: 17, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4032, file: !1, line: 1052, column: 8)
!4151 = !DILocation(line: 1052, column: 25, scope: !4150)
!4152 = !DILocation(line: 1052, column: 8, scope: !4150)
!4153 = !DILocation(line: 1052, column: 33, scope: !4150)
!4154 = !DILocation(line: 1052, column: 8, scope: !4032)
!4155 = !DILocation(line: 1053, column: 19, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !4150, file: !1, line: 1052, column: 38)
!4157 = !DILocation(line: 1053, column: 27, scope: !4156)
!4158 = !DILocation(line: 1053, column: 35, scope: !4156)
!4159 = !DILocation(line: 1053, column: 5, scope: !4156)
!4160 = !DILocation(line: 1054, column: 18, scope: !4156)
!4161 = !DILocation(line: 1054, column: 5, scope: !4156)
!4162 = !DILocation(line: 1055, column: 19, scope: !4156)
!4163 = !DILocation(line: 1055, column: 27, scope: !4156)
!4164 = !DILocation(line: 1055, column: 35, scope: !4156)
!4165 = !DILocation(line: 1055, column: 5, scope: !4156)
!4166 = !DILocation(line: 1056, column: 4, scope: !4156)
!4167 = !DILocation(line: 1057, column: 22, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4150, file: !1, line: 1057, column: 13)
!4169 = !DILocation(line: 1057, column: 30, scope: !4168)
!4170 = !DILocation(line: 1057, column: 13, scope: !4168)
!4171 = !DILocation(line: 1057, column: 38, scope: !4168)
!4172 = !DILocation(line: 1057, column: 13, scope: !4150)
!4173 = !DILocation(line: 1058, column: 19, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4168, file: !1, line: 1057, column: 43)
!4175 = !DILocation(line: 1058, column: 27, scope: !4174)
!4176 = !DILocation(line: 1058, column: 35, scope: !4174)
!4177 = !DILocation(line: 1058, column: 5, scope: !4174)
!4178 = !DILocation(line: 1059, column: 18, scope: !4174)
!4179 = !DILocation(line: 1059, column: 5, scope: !4174)
!4180 = !DILocation(line: 1060, column: 19, scope: !4174)
!4181 = !DILocation(line: 1060, column: 27, scope: !4174)
!4182 = !DILocation(line: 1060, column: 35, scope: !4174)
!4183 = !DILocation(line: 1060, column: 5, scope: !4174)
!4184 = !DILocation(line: 1061, column: 4, scope: !4174)
!4185 = !DILocalVariable(name: "vec", scope: !4186, file: !1, line: 1063, type: !36)
!4186 = distinct !DILexicalBlock(scope: !4168, file: !1, line: 1062, column: 9)
!4187 = !DILocation(line: 1063, column: 11, scope: !4186)
!4188 = !DILocation(line: 1065, column: 14, scope: !4186)
!4189 = !DILocation(line: 1065, column: 5, scope: !4186)
!4190 = !DILocation(line: 1065, column: 12, scope: !4186)
!4191 = !DILocation(line: 1066, column: 14, scope: !4186)
!4192 = !DILocation(line: 1066, column: 5, scope: !4186)
!4193 = !DILocation(line: 1066, column: 12, scope: !4186)
!4194 = !DILocation(line: 1067, column: 14, scope: !4186)
!4195 = !DILocation(line: 1067, column: 5, scope: !4186)
!4196 = !DILocation(line: 1067, column: 12, scope: !4186)
!4197 = !DILocation(line: 1069, column: 19, scope: !4186)
!4198 = !DILocation(line: 1069, column: 27, scope: !4186)
!4199 = !DILocation(line: 1069, column: 32, scope: !4186)
!4200 = !DILocation(line: 1069, column: 5, scope: !4186)
!4201 = !DILocation(line: 1070, column: 18, scope: !4186)
!4202 = !DILocation(line: 1070, column: 5, scope: !4186)
!4203 = !DILocation(line: 1071, column: 19, scope: !4186)
!4204 = !DILocation(line: 1071, column: 27, scope: !4186)
!4205 = !DILocation(line: 1071, column: 35, scope: !4186)
!4206 = !DILocation(line: 1071, column: 5, scope: !4186)
!4207 = !DILocation(line: 1073, column: 4, scope: !4032)
!4208 = !DILocation(line: 1076, column: 4, scope: !4032)
!4209 = !DILocation(line: 1078, column: 12, scope: !4013)
!4210 = !DILocation(line: 1078, column: 20, scope: !4013)
!4211 = !DILocation(line: 1078, column: 2, scope: !4013)
!4212 = !DILocation(line: 1079, column: 12, scope: !4013)
!4213 = !DILocation(line: 1079, column: 20, scope: !4013)
!4214 = !DILocation(line: 1079, column: 2, scope: !4013)
!4215 = !DILocation(line: 1080, column: 12, scope: !4013)
!4216 = !DILocation(line: 1080, column: 20, scope: !4013)
!4217 = !DILocation(line: 1080, column: 2, scope: !4013)
!4218 = !DILocation(line: 1081, column: 1, scope: !4013)
!4219 = distinct !DISubprogram(name: "mat4_to_size", scope: !1, file: !1, line: 1376, type: !4220, scopeLine: 1377, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4220 = !DISubroutineType(types: !4221)
!4221 = !{null, !1686, !47}
!4222 = !DILocalVariable(name: "size", arg: 1, scope: !4219, file: !1, line: 1376, type: !1686)
!4223 = !DILocation(line: 1376, column: 25, scope: !4219)
!4224 = !DILocalVariable(name: "mat", arg: 2, scope: !4219, file: !1, line: 1376, type: !47)
!4225 = !DILocation(line: 1376, column: 40, scope: !4219)
!4226 = !DILocation(line: 1378, column: 19, scope: !4219)
!4227 = !DILocation(line: 1378, column: 12, scope: !4219)
!4228 = !DILocation(line: 1378, column: 2, scope: !4219)
!4229 = !DILocation(line: 1378, column: 10, scope: !4219)
!4230 = !DILocation(line: 1379, column: 19, scope: !4219)
!4231 = !DILocation(line: 1379, column: 12, scope: !4219)
!4232 = !DILocation(line: 1379, column: 2, scope: !4219)
!4233 = !DILocation(line: 1379, column: 10, scope: !4219)
!4234 = !DILocation(line: 1380, column: 19, scope: !4219)
!4235 = !DILocation(line: 1380, column: 12, scope: !4219)
!4236 = !DILocation(line: 1380, column: 2, scope: !4219)
!4237 = !DILocation(line: 1380, column: 10, scope: !4219)
!4238 = !DILocation(line: 1381, column: 1, scope: !4219)
!4239 = distinct !DISubprogram(name: "is_orthogonal_m3", scope: !1, file: !1, line: 1083, type: !3165, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4240 = !DILocalVariable(name: "m", arg: 1, scope: !4239, file: !1, line: 1083, type: !35)
!4241 = !DILocation(line: 1083, column: 29, scope: !4239)
!4242 = !DILocalVariable(name: "i", scope: !4239, file: !1, line: 1085, type: !296)
!4243 = !DILocation(line: 1085, column: 6, scope: !4239)
!4244 = !DILocalVariable(name: "j", scope: !4239, file: !1, line: 1085, type: !296)
!4245 = !DILocation(line: 1085, column: 9, scope: !4239)
!4246 = !DILocation(line: 1087, column: 9, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !4239, file: !1, line: 1087, column: 2)
!4248 = !DILocation(line: 1087, column: 7, scope: !4247)
!4249 = !DILocation(line: 1087, column: 14, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4247, file: !1, line: 1087, column: 2)
!4251 = !DILocation(line: 1087, column: 16, scope: !4250)
!4252 = !DILocation(line: 1087, column: 2, scope: !4247)
!4253 = !DILocation(line: 1088, column: 10, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4255, file: !1, line: 1088, column: 3)
!4255 = distinct !DILexicalBlock(scope: !4250, file: !1, line: 1087, column: 26)
!4256 = !DILocation(line: 1088, column: 8, scope: !4254)
!4257 = !DILocation(line: 1088, column: 15, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !4254, file: !1, line: 1088, column: 3)
!4259 = !DILocation(line: 1088, column: 19, scope: !4258)
!4260 = !DILocation(line: 1088, column: 17, scope: !4258)
!4261 = !DILocation(line: 1088, column: 3, scope: !4254)
!4262 = !DILocation(line: 1089, column: 23, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4264, file: !1, line: 1089, column: 8)
!4264 = distinct !DILexicalBlock(scope: !4258, file: !1, line: 1088, column: 27)
!4265 = !DILocation(line: 1089, column: 25, scope: !4263)
!4266 = !DILocation(line: 1089, column: 29, scope: !4263)
!4267 = !DILocation(line: 1089, column: 31, scope: !4263)
!4268 = !DILocation(line: 1089, column: 14, scope: !4263)
!4269 = !DILocation(line: 1089, column: 8, scope: !4263)
!4270 = !DILocation(line: 1089, column: 36, scope: !4263)
!4271 = !DILocation(line: 1089, column: 8, scope: !4264)
!4272 = !DILocation(line: 1090, column: 5, scope: !4263)
!4273 = !DILocation(line: 1091, column: 3, scope: !4264)
!4274 = !DILocation(line: 1088, column: 23, scope: !4258)
!4275 = !DILocation(line: 1088, column: 3, scope: !4258)
!4276 = distinct !{!4276, !4261, !4277}
!4277 = !DILocation(line: 1091, column: 3, scope: !4254)
!4278 = !DILocation(line: 1092, column: 2, scope: !4255)
!4279 = !DILocation(line: 1087, column: 22, scope: !4250)
!4280 = !DILocation(line: 1087, column: 2, scope: !4250)
!4281 = distinct !{!4281, !4252, !4282}
!4282 = !DILocation(line: 1092, column: 2, scope: !4247)
!4283 = !DILocation(line: 1094, column: 2, scope: !4239)
!4284 = !DILocation(line: 1095, column: 1, scope: !4239)
!4285 = distinct !DISubprogram(name: "is_orthogonal_m4", scope: !1, file: !1, line: 1097, type: !3248, scopeLine: 1098, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4286 = !DILocalVariable(name: "m", arg: 1, scope: !4285, file: !1, line: 1097, type: !47)
!4287 = !DILocation(line: 1097, column: 29, scope: !4285)
!4288 = !DILocalVariable(name: "i", scope: !4285, file: !1, line: 1099, type: !296)
!4289 = !DILocation(line: 1099, column: 6, scope: !4285)
!4290 = !DILocalVariable(name: "j", scope: !4285, file: !1, line: 1099, type: !296)
!4291 = !DILocation(line: 1099, column: 9, scope: !4285)
!4292 = !DILocation(line: 1101, column: 9, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4285, file: !1, line: 1101, column: 2)
!4294 = !DILocation(line: 1101, column: 7, scope: !4293)
!4295 = !DILocation(line: 1101, column: 14, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4293, file: !1, line: 1101, column: 2)
!4297 = !DILocation(line: 1101, column: 16, scope: !4296)
!4298 = !DILocation(line: 1101, column: 2, scope: !4293)
!4299 = !DILocation(line: 1102, column: 10, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4301, file: !1, line: 1102, column: 3)
!4301 = distinct !DILexicalBlock(scope: !4296, file: !1, line: 1101, column: 26)
!4302 = !DILocation(line: 1102, column: 8, scope: !4300)
!4303 = !DILocation(line: 1102, column: 15, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4300, file: !1, line: 1102, column: 3)
!4305 = !DILocation(line: 1102, column: 19, scope: !4304)
!4306 = !DILocation(line: 1102, column: 17, scope: !4304)
!4307 = !DILocation(line: 1102, column: 3, scope: !4300)
!4308 = !DILocation(line: 1103, column: 23, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4310, file: !1, line: 1103, column: 8)
!4310 = distinct !DILexicalBlock(scope: !4304, file: !1, line: 1102, column: 27)
!4311 = !DILocation(line: 1103, column: 25, scope: !4309)
!4312 = !DILocation(line: 1103, column: 29, scope: !4309)
!4313 = !DILocation(line: 1103, column: 31, scope: !4309)
!4314 = !DILocation(line: 1103, column: 14, scope: !4309)
!4315 = !DILocation(line: 1103, column: 8, scope: !4309)
!4316 = !DILocation(line: 1103, column: 36, scope: !4309)
!4317 = !DILocation(line: 1103, column: 8, scope: !4310)
!4318 = !DILocation(line: 1104, column: 5, scope: !4309)
!4319 = !DILocation(line: 1105, column: 3, scope: !4310)
!4320 = !DILocation(line: 1102, column: 23, scope: !4304)
!4321 = !DILocation(line: 1102, column: 3, scope: !4304)
!4322 = distinct !{!4322, !4307, !4323}
!4323 = !DILocation(line: 1105, column: 3, scope: !4300)
!4324 = !DILocation(line: 1107, column: 2, scope: !4301)
!4325 = !DILocation(line: 1101, column: 22, scope: !4296)
!4326 = !DILocation(line: 1101, column: 2, scope: !4296)
!4327 = distinct !{!4327, !4298, !4328}
!4328 = !DILocation(line: 1107, column: 2, scope: !4293)
!4329 = !DILocation(line: 1109, column: 2, scope: !4285)
!4330 = !DILocation(line: 1110, column: 1, scope: !4285)
!4331 = distinct !DISubprogram(name: "dot_v4v4", scope: !1718, file: !1718, line: 624, type: !3941, scopeLine: 625, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4332 = !DILocalVariable(name: "a", arg: 1, scope: !4331, file: !1718, line: 624, type: !1721)
!4333 = !DILocation(line: 624, column: 36, scope: !4331)
!4334 = !DILocalVariable(name: "b", arg: 2, scope: !4331, file: !1718, line: 624, type: !1721)
!4335 = !DILocation(line: 624, column: 54, scope: !4331)
!4336 = !DILocation(line: 626, column: 9, scope: !4331)
!4337 = !DILocation(line: 626, column: 16, scope: !4331)
!4338 = !DILocation(line: 626, column: 14, scope: !4331)
!4339 = !DILocation(line: 626, column: 23, scope: !4331)
!4340 = !DILocation(line: 626, column: 30, scope: !4331)
!4341 = !DILocation(line: 626, column: 28, scope: !4331)
!4342 = !DILocation(line: 626, column: 21, scope: !4331)
!4343 = !DILocation(line: 626, column: 37, scope: !4331)
!4344 = !DILocation(line: 626, column: 44, scope: !4331)
!4345 = !DILocation(line: 626, column: 42, scope: !4331)
!4346 = !DILocation(line: 626, column: 35, scope: !4331)
!4347 = !DILocation(line: 626, column: 51, scope: !4331)
!4348 = !DILocation(line: 626, column: 58, scope: !4331)
!4349 = !DILocation(line: 626, column: 56, scope: !4331)
!4350 = !DILocation(line: 626, column: 49, scope: !4331)
!4351 = !DILocation(line: 626, column: 2, scope: !4331)
!4352 = distinct !DISubprogram(name: "is_orthonormal_m3", scope: !1, file: !1, line: 1112, type: !3165, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4353 = !DILocalVariable(name: "m", arg: 1, scope: !4352, file: !1, line: 1112, type: !35)
!4354 = !DILocation(line: 1112, column: 30, scope: !4352)
!4355 = !DILocation(line: 1114, column: 23, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4352, file: !1, line: 1114, column: 6)
!4357 = !DILocation(line: 1114, column: 6, scope: !4356)
!4358 = !DILocation(line: 1114, column: 6, scope: !4352)
!4359 = !DILocalVariable(name: "i", scope: !4360, file: !1, line: 1115, type: !296)
!4360 = distinct !DILexicalBlock(scope: !4356, file: !1, line: 1114, column: 27)
!4361 = !DILocation(line: 1115, column: 7, scope: !4360)
!4362 = !DILocation(line: 1117, column: 10, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4360, file: !1, line: 1117, column: 3)
!4364 = !DILocation(line: 1117, column: 8, scope: !4363)
!4365 = !DILocation(line: 1117, column: 15, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4363, file: !1, line: 1117, column: 3)
!4367 = !DILocation(line: 1117, column: 17, scope: !4366)
!4368 = !DILocation(line: 1117, column: 3, scope: !4363)
!4369 = !DILocation(line: 1118, column: 23, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4366, file: !1, line: 1118, column: 8)
!4371 = !DILocation(line: 1118, column: 25, scope: !4370)
!4372 = !DILocation(line: 1118, column: 29, scope: !4370)
!4373 = !DILocation(line: 1118, column: 31, scope: !4370)
!4374 = !DILocation(line: 1118, column: 14, scope: !4370)
!4375 = !DILocation(line: 1118, column: 35, scope: !4370)
!4376 = !DILocation(line: 1118, column: 8, scope: !4370)
!4377 = !DILocation(line: 1118, column: 40, scope: !4370)
!4378 = !DILocation(line: 1118, column: 8, scope: !4366)
!4379 = !DILocation(line: 1119, column: 5, scope: !4370)
!4380 = !DILocation(line: 1118, column: 49, scope: !4370)
!4381 = !DILocation(line: 1117, column: 23, scope: !4366)
!4382 = !DILocation(line: 1117, column: 3, scope: !4366)
!4383 = distinct !{!4383, !4368, !4384}
!4384 = !DILocation(line: 1119, column: 12, scope: !4363)
!4385 = !DILocation(line: 1121, column: 3, scope: !4360)
!4386 = !DILocation(line: 1124, column: 2, scope: !4352)
!4387 = !DILocation(line: 1125, column: 1, scope: !4352)
!4388 = distinct !DISubprogram(name: "is_orthonormal_m4", scope: !1, file: !1, line: 1127, type: !3248, scopeLine: 1128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4389 = !DILocalVariable(name: "m", arg: 1, scope: !4388, file: !1, line: 1127, type: !47)
!4390 = !DILocation(line: 1127, column: 30, scope: !4388)
!4391 = !DILocation(line: 1129, column: 23, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4388, file: !1, line: 1129, column: 6)
!4393 = !DILocation(line: 1129, column: 6, scope: !4392)
!4394 = !DILocation(line: 1129, column: 6, scope: !4388)
!4395 = !DILocalVariable(name: "i", scope: !4396, file: !1, line: 1130, type: !296)
!4396 = distinct !DILexicalBlock(scope: !4392, file: !1, line: 1129, column: 27)
!4397 = !DILocation(line: 1130, column: 7, scope: !4396)
!4398 = !DILocation(line: 1132, column: 10, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4396, file: !1, line: 1132, column: 3)
!4400 = !DILocation(line: 1132, column: 8, scope: !4399)
!4401 = !DILocation(line: 1132, column: 15, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4399, file: !1, line: 1132, column: 3)
!4403 = !DILocation(line: 1132, column: 17, scope: !4402)
!4404 = !DILocation(line: 1132, column: 3, scope: !4399)
!4405 = !DILocation(line: 1133, column: 23, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4402, file: !1, line: 1133, column: 8)
!4407 = !DILocation(line: 1133, column: 25, scope: !4406)
!4408 = !DILocation(line: 1133, column: 29, scope: !4406)
!4409 = !DILocation(line: 1133, column: 31, scope: !4406)
!4410 = !DILocation(line: 1133, column: 14, scope: !4406)
!4411 = !DILocation(line: 1133, column: 35, scope: !4406)
!4412 = !DILocation(line: 1133, column: 8, scope: !4406)
!4413 = !DILocation(line: 1133, column: 40, scope: !4406)
!4414 = !DILocation(line: 1133, column: 8, scope: !4402)
!4415 = !DILocation(line: 1134, column: 5, scope: !4406)
!4416 = !DILocation(line: 1133, column: 49, scope: !4406)
!4417 = !DILocation(line: 1132, column: 23, scope: !4402)
!4418 = !DILocation(line: 1132, column: 3, scope: !4402)
!4419 = distinct !{!4419, !4404, !4420}
!4420 = !DILocation(line: 1134, column: 12, scope: !4399)
!4421 = !DILocation(line: 1136, column: 3, scope: !4396)
!4422 = !DILocation(line: 1139, column: 2, scope: !4388)
!4423 = !DILocation(line: 1140, column: 1, scope: !4388)
!4424 = distinct !DISubprogram(name: "is_uniform_scaled_m3", scope: !1, file: !1, line: 1142, type: !3165, scopeLine: 1143, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4425 = !DILocalVariable(name: "m", arg: 1, scope: !4424, file: !1, line: 1142, type: !35)
!4426 = !DILocation(line: 1142, column: 33, scope: !4424)
!4427 = !DILocalVariable(name: "eps", scope: !4424, file: !1, line: 1144, type: !1722)
!4428 = !DILocation(line: 1144, column: 14, scope: !4424)
!4429 = !DILocalVariable(name: "t", scope: !4424, file: !1, line: 1145, type: !699)
!4430 = !DILocation(line: 1145, column: 8, scope: !4424)
!4431 = !DILocalVariable(name: "l1", scope: !4424, file: !1, line: 1146, type: !4)
!4432 = !DILocation(line: 1146, column: 8, scope: !4424)
!4433 = !DILocalVariable(name: "l2", scope: !4424, file: !1, line: 1146, type: !4)
!4434 = !DILocation(line: 1146, column: 12, scope: !4424)
!4435 = !DILocalVariable(name: "l3", scope: !4424, file: !1, line: 1146, type: !4)
!4436 = !DILocation(line: 1146, column: 16, scope: !4424)
!4437 = !DILocalVariable(name: "l4", scope: !4424, file: !1, line: 1146, type: !4)
!4438 = !DILocation(line: 1146, column: 20, scope: !4424)
!4439 = !DILocalVariable(name: "l5", scope: !4424, file: !1, line: 1146, type: !4)
!4440 = !DILocation(line: 1146, column: 24, scope: !4424)
!4441 = !DILocalVariable(name: "l6", scope: !4424, file: !1, line: 1146, type: !4)
!4442 = !DILocation(line: 1146, column: 28, scope: !4424)
!4443 = !DILocation(line: 1148, column: 13, scope: !4424)
!4444 = !DILocation(line: 1148, column: 16, scope: !4424)
!4445 = !DILocation(line: 1148, column: 2, scope: !4424)
!4446 = !DILocation(line: 1149, column: 15, scope: !4424)
!4447 = !DILocation(line: 1149, column: 2, scope: !4424)
!4448 = !DILocation(line: 1151, column: 22, scope: !4424)
!4449 = !DILocation(line: 1151, column: 7, scope: !4424)
!4450 = !DILocation(line: 1151, column: 5, scope: !4424)
!4451 = !DILocation(line: 1152, column: 22, scope: !4424)
!4452 = !DILocation(line: 1152, column: 7, scope: !4424)
!4453 = !DILocation(line: 1152, column: 5, scope: !4424)
!4454 = !DILocation(line: 1153, column: 22, scope: !4424)
!4455 = !DILocation(line: 1153, column: 7, scope: !4424)
!4456 = !DILocation(line: 1153, column: 5, scope: !4424)
!4457 = !DILocation(line: 1155, column: 22, scope: !4424)
!4458 = !DILocation(line: 1155, column: 7, scope: !4424)
!4459 = !DILocation(line: 1155, column: 5, scope: !4424)
!4460 = !DILocation(line: 1156, column: 22, scope: !4424)
!4461 = !DILocation(line: 1156, column: 7, scope: !4424)
!4462 = !DILocation(line: 1156, column: 5, scope: !4424)
!4463 = !DILocation(line: 1157, column: 22, scope: !4424)
!4464 = !DILocation(line: 1157, column: 7, scope: !4424)
!4465 = !DILocation(line: 1157, column: 5, scope: !4424)
!4466 = !DILocation(line: 1159, column: 12, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4424, file: !1, line: 1159, column: 6)
!4468 = !DILocation(line: 1159, column: 17, scope: !4467)
!4469 = !DILocation(line: 1159, column: 15, scope: !4467)
!4470 = !DILocation(line: 1159, column: 6, scope: !4467)
!4471 = !DILocation(line: 1159, column: 21, scope: !4467)
!4472 = !DILocation(line: 1159, column: 28, scope: !4467)
!4473 = !DILocation(line: 1160, column: 12, scope: !4467)
!4474 = !DILocation(line: 1160, column: 17, scope: !4467)
!4475 = !DILocation(line: 1160, column: 15, scope: !4467)
!4476 = !DILocation(line: 1160, column: 6, scope: !4467)
!4477 = !DILocation(line: 1160, column: 21, scope: !4467)
!4478 = !DILocation(line: 1160, column: 28, scope: !4467)
!4479 = !DILocation(line: 1161, column: 12, scope: !4467)
!4480 = !DILocation(line: 1161, column: 17, scope: !4467)
!4481 = !DILocation(line: 1161, column: 15, scope: !4467)
!4482 = !DILocation(line: 1161, column: 6, scope: !4467)
!4483 = !DILocation(line: 1161, column: 21, scope: !4467)
!4484 = !DILocation(line: 1161, column: 28, scope: !4467)
!4485 = !DILocation(line: 1162, column: 12, scope: !4467)
!4486 = !DILocation(line: 1162, column: 17, scope: !4467)
!4487 = !DILocation(line: 1162, column: 15, scope: !4467)
!4488 = !DILocation(line: 1162, column: 6, scope: !4467)
!4489 = !DILocation(line: 1162, column: 21, scope: !4467)
!4490 = !DILocation(line: 1162, column: 28, scope: !4467)
!4491 = !DILocation(line: 1163, column: 12, scope: !4467)
!4492 = !DILocation(line: 1163, column: 17, scope: !4467)
!4493 = !DILocation(line: 1163, column: 15, scope: !4467)
!4494 = !DILocation(line: 1163, column: 6, scope: !4467)
!4495 = !DILocation(line: 1163, column: 21, scope: !4467)
!4496 = !DILocation(line: 1159, column: 6, scope: !4424)
!4497 = !DILocation(line: 1165, column: 3, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4467, file: !1, line: 1164, column: 2)
!4499 = !DILocation(line: 1168, column: 2, scope: !4424)
!4500 = !DILocation(line: 1169, column: 1, scope: !4424)
!4501 = distinct !DISubprogram(name: "len_squared_v3", scope: !1718, file: !1718, line: 671, type: !4502, scopeLine: 672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4502 = !DISubroutineType(types: !4503)
!4503 = !{!4, !1721}
!4504 = !DILocalVariable(name: "v", arg: 1, scope: !4501, file: !1718, line: 671, type: !1721)
!4505 = !DILocation(line: 671, column: 42, scope: !4501)
!4506 = !DILocation(line: 673, column: 9, scope: !4501)
!4507 = !DILocation(line: 673, column: 16, scope: !4501)
!4508 = !DILocation(line: 673, column: 14, scope: !4501)
!4509 = !DILocation(line: 673, column: 23, scope: !4501)
!4510 = !DILocation(line: 673, column: 30, scope: !4501)
!4511 = !DILocation(line: 673, column: 28, scope: !4501)
!4512 = !DILocation(line: 673, column: 21, scope: !4501)
!4513 = !DILocation(line: 673, column: 37, scope: !4501)
!4514 = !DILocation(line: 673, column: 44, scope: !4501)
!4515 = !DILocation(line: 673, column: 42, scope: !4501)
!4516 = !DILocation(line: 673, column: 35, scope: !4501)
!4517 = !DILocation(line: 673, column: 2, scope: !4501)
!4518 = distinct !DISubprogram(name: "is_uniform_scaled_m4", scope: !1, file: !1, line: 1171, type: !3248, scopeLine: 1172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4519 = !DILocalVariable(name: "m", arg: 1, scope: !4518, file: !1, line: 1171, type: !47)
!4520 = !DILocation(line: 1171, column: 33, scope: !4518)
!4521 = !DILocalVariable(name: "t", scope: !4518, file: !1, line: 1173, type: !699)
!4522 = !DILocation(line: 1173, column: 8, scope: !4518)
!4523 = !DILocation(line: 1174, column: 13, scope: !4518)
!4524 = !DILocation(line: 1174, column: 16, scope: !4518)
!4525 = !DILocation(line: 1174, column: 2, scope: !4518)
!4526 = !DILocation(line: 1175, column: 30, scope: !4518)
!4527 = !DILocation(line: 1175, column: 9, scope: !4518)
!4528 = !DILocation(line: 1175, column: 2, scope: !4518)
!4529 = distinct !DISubprogram(name: "normalize_m3", scope: !1, file: !1, line: 1178, type: !33, scopeLine: 1179, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4530 = !DILocalVariable(name: "mat", arg: 1, scope: !4529, file: !1, line: 1178, type: !35)
!4531 = !DILocation(line: 1178, column: 25, scope: !4529)
!4532 = !DILocation(line: 1180, column: 15, scope: !4529)
!4533 = !DILocation(line: 1180, column: 2, scope: !4529)
!4534 = !DILocation(line: 1181, column: 15, scope: !4529)
!4535 = !DILocation(line: 1181, column: 2, scope: !4529)
!4536 = !DILocation(line: 1182, column: 15, scope: !4529)
!4537 = !DILocation(line: 1182, column: 2, scope: !4529)
!4538 = !DILocation(line: 1183, column: 1, scope: !4529)
!4539 = distinct !DISubprogram(name: "normalize_m3_m3", scope: !1, file: !1, line: 1185, type: !137, scopeLine: 1186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4540 = !DILocalVariable(name: "rmat", arg: 1, scope: !4539, file: !1, line: 1185, type: !35)
!4541 = !DILocation(line: 1185, column: 28, scope: !4539)
!4542 = !DILocalVariable(name: "mat", arg: 2, scope: !4539, file: !1, line: 1185, type: !35)
!4543 = !DILocation(line: 1185, column: 46, scope: !4539)
!4544 = !DILocation(line: 1187, column: 18, scope: !4539)
!4545 = !DILocation(line: 1187, column: 27, scope: !4539)
!4546 = !DILocation(line: 1187, column: 2, scope: !4539)
!4547 = !DILocation(line: 1188, column: 18, scope: !4539)
!4548 = !DILocation(line: 1188, column: 27, scope: !4539)
!4549 = !DILocation(line: 1188, column: 2, scope: !4539)
!4550 = !DILocation(line: 1189, column: 18, scope: !4539)
!4551 = !DILocation(line: 1189, column: 27, scope: !4539)
!4552 = !DILocation(line: 1189, column: 2, scope: !4539)
!4553 = !DILocation(line: 1190, column: 1, scope: !4539)
!4554 = distinct !DISubprogram(name: "normalize_v3_v3", scope: !1718, file: !1718, line: 788, type: !4555, scopeLine: 789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4555 = !DISubroutineType(types: !4556)
!4556 = !{!4, !1686, !1721}
!4557 = !DILocalVariable(name: "r", arg: 1, scope: !4554, file: !1718, line: 788, type: !1686)
!4558 = !DILocation(line: 788, column: 37, scope: !4554)
!4559 = !DILocalVariable(name: "a", arg: 2, scope: !4554, file: !1718, line: 788, type: !1721)
!4560 = !DILocation(line: 788, column: 55, scope: !4554)
!4561 = !DILocalVariable(name: "d", scope: !4554, file: !1718, line: 790, type: !4)
!4562 = !DILocation(line: 790, column: 8, scope: !4554)
!4563 = !DILocation(line: 790, column: 21, scope: !4554)
!4564 = !DILocation(line: 790, column: 24, scope: !4554)
!4565 = !DILocation(line: 790, column: 12, scope: !4554)
!4566 = !DILocation(line: 794, column: 6, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4554, file: !1718, line: 794, column: 6)
!4568 = !DILocation(line: 794, column: 8, scope: !4567)
!4569 = !DILocation(line: 794, column: 6, scope: !4554)
!4570 = !DILocation(line: 795, column: 13, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4567, file: !1718, line: 794, column: 20)
!4572 = !DILocation(line: 795, column: 7, scope: !4571)
!4573 = !DILocation(line: 795, column: 5, scope: !4571)
!4574 = !DILocation(line: 796, column: 15, scope: !4571)
!4575 = !DILocation(line: 796, column: 18, scope: !4571)
!4576 = !DILocation(line: 796, column: 28, scope: !4571)
!4577 = !DILocation(line: 796, column: 26, scope: !4571)
!4578 = !DILocation(line: 796, column: 3, scope: !4571)
!4579 = !DILocation(line: 797, column: 2, scope: !4571)
!4580 = !DILocation(line: 799, column: 11, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4567, file: !1718, line: 798, column: 7)
!4582 = !DILocation(line: 799, column: 3, scope: !4581)
!4583 = !DILocation(line: 800, column: 5, scope: !4581)
!4584 = !DILocation(line: 803, column: 9, scope: !4554)
!4585 = !DILocation(line: 803, column: 2, scope: !4554)
!4586 = distinct !DISubprogram(name: "normalize_m4", scope: !1, file: !1, line: 1192, type: !45, scopeLine: 1193, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4587 = !DILocalVariable(name: "mat", arg: 1, scope: !4586, file: !1, line: 1192, type: !47)
!4588 = !DILocation(line: 1192, column: 25, scope: !4586)
!4589 = !DILocalVariable(name: "len", scope: !4586, file: !1, line: 1194, type: !4)
!4590 = !DILocation(line: 1194, column: 8, scope: !4586)
!4591 = !DILocation(line: 1196, column: 21, scope: !4586)
!4592 = !DILocation(line: 1196, column: 8, scope: !4586)
!4593 = !DILocation(line: 1196, column: 6, scope: !4586)
!4594 = !DILocation(line: 1197, column: 6, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4586, file: !1, line: 1197, column: 6)
!4596 = !DILocation(line: 1197, column: 10, scope: !4595)
!4597 = !DILocation(line: 1197, column: 6, scope: !4586)
!4598 = !DILocation(line: 1197, column: 32, scope: !4595)
!4599 = !DILocation(line: 1197, column: 19, scope: !4595)
!4600 = !DILocation(line: 1197, column: 29, scope: !4595)
!4601 = !DILocation(line: 1198, column: 21, scope: !4586)
!4602 = !DILocation(line: 1198, column: 8, scope: !4586)
!4603 = !DILocation(line: 1198, column: 6, scope: !4586)
!4604 = !DILocation(line: 1199, column: 6, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4586, file: !1, line: 1199, column: 6)
!4606 = !DILocation(line: 1199, column: 10, scope: !4605)
!4607 = !DILocation(line: 1199, column: 6, scope: !4586)
!4608 = !DILocation(line: 1199, column: 32, scope: !4605)
!4609 = !DILocation(line: 1199, column: 19, scope: !4605)
!4610 = !DILocation(line: 1199, column: 29, scope: !4605)
!4611 = !DILocation(line: 1200, column: 21, scope: !4586)
!4612 = !DILocation(line: 1200, column: 8, scope: !4586)
!4613 = !DILocation(line: 1200, column: 6, scope: !4586)
!4614 = !DILocation(line: 1201, column: 6, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4586, file: !1, line: 1201, column: 6)
!4616 = !DILocation(line: 1201, column: 10, scope: !4615)
!4617 = !DILocation(line: 1201, column: 6, scope: !4586)
!4618 = !DILocation(line: 1201, column: 32, scope: !4615)
!4619 = !DILocation(line: 1201, column: 19, scope: !4615)
!4620 = !DILocation(line: 1201, column: 29, scope: !4615)
!4621 = !DILocation(line: 1202, column: 1, scope: !4586)
!4622 = distinct !DISubprogram(name: "normalize_m4_m4", scope: !1, file: !1, line: 1204, type: !148, scopeLine: 1205, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4623 = !DILocalVariable(name: "rmat", arg: 1, scope: !4622, file: !1, line: 1204, type: !47)
!4624 = !DILocation(line: 1204, column: 28, scope: !4622)
!4625 = !DILocalVariable(name: "mat", arg: 2, scope: !4622, file: !1, line: 1204, type: !47)
!4626 = !DILocation(line: 1204, column: 46, scope: !4622)
!4627 = !DILocation(line: 1206, column: 13, scope: !4622)
!4628 = !DILocation(line: 1206, column: 19, scope: !4622)
!4629 = !DILocation(line: 1206, column: 2, scope: !4622)
!4630 = !DILocation(line: 1207, column: 15, scope: !4622)
!4631 = !DILocation(line: 1207, column: 2, scope: !4622)
!4632 = !DILocation(line: 1208, column: 1, scope: !4622)
!4633 = distinct !DISubprogram(name: "adjoint_m2_m2", scope: !1, file: !1, line: 1210, type: !126, scopeLine: 1211, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4634 = !DILocalVariable(name: "m1", arg: 1, scope: !4633, file: !1, line: 1210, type: !23)
!4635 = !DILocation(line: 1210, column: 26, scope: !4633)
!4636 = !DILocalVariable(name: "m", arg: 2, scope: !4633, file: !1, line: 1210, type: !23)
!4637 = !DILocation(line: 1210, column: 42, scope: !4633)
!4638 = !DILocation(line: 1213, column: 14, scope: !4633)
!4639 = !DILocation(line: 1213, column: 2, scope: !4633)
!4640 = !DILocation(line: 1213, column: 11, scope: !4633)
!4641 = !DILocation(line: 1214, column: 14, scope: !4633)
!4642 = !DILocation(line: 1214, column: 13, scope: !4633)
!4643 = !DILocation(line: 1214, column: 2, scope: !4633)
!4644 = !DILocation(line: 1214, column: 11, scope: !4633)
!4645 = !DILocation(line: 1215, column: 14, scope: !4633)
!4646 = !DILocation(line: 1215, column: 13, scope: !4633)
!4647 = !DILocation(line: 1215, column: 2, scope: !4633)
!4648 = !DILocation(line: 1215, column: 11, scope: !4633)
!4649 = !DILocation(line: 1216, column: 14, scope: !4633)
!4650 = !DILocation(line: 1216, column: 2, scope: !4633)
!4651 = !DILocation(line: 1216, column: 11, scope: !4633)
!4652 = !DILocation(line: 1217, column: 1, scope: !4633)
!4653 = distinct !DISubprogram(name: "adjoint_m4_m4", scope: !1, file: !1, line: 1235, type: !148, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4654 = !DILocalVariable(name: "out", arg: 1, scope: !4653, file: !1, line: 1235, type: !47)
!4655 = !DILocation(line: 1235, column: 26, scope: !4653)
!4656 = !DILocalVariable(name: "in", arg: 2, scope: !4653, file: !1, line: 1235, type: !47)
!4657 = !DILocation(line: 1235, column: 43, scope: !4653)
!4658 = !DILocalVariable(name: "a1", scope: !4653, file: !1, line: 1237, type: !4)
!4659 = !DILocation(line: 1237, column: 8, scope: !4653)
!4660 = !DILocalVariable(name: "a2", scope: !4653, file: !1, line: 1237, type: !4)
!4661 = !DILocation(line: 1237, column: 12, scope: !4653)
!4662 = !DILocalVariable(name: "a3", scope: !4653, file: !1, line: 1237, type: !4)
!4663 = !DILocation(line: 1237, column: 16, scope: !4653)
!4664 = !DILocalVariable(name: "a4", scope: !4653, file: !1, line: 1237, type: !4)
!4665 = !DILocation(line: 1237, column: 20, scope: !4653)
!4666 = !DILocalVariable(name: "b1", scope: !4653, file: !1, line: 1237, type: !4)
!4667 = !DILocation(line: 1237, column: 24, scope: !4653)
!4668 = !DILocalVariable(name: "b2", scope: !4653, file: !1, line: 1237, type: !4)
!4669 = !DILocation(line: 1237, column: 28, scope: !4653)
!4670 = !DILocalVariable(name: "b3", scope: !4653, file: !1, line: 1237, type: !4)
!4671 = !DILocation(line: 1237, column: 32, scope: !4653)
!4672 = !DILocalVariable(name: "b4", scope: !4653, file: !1, line: 1237, type: !4)
!4673 = !DILocation(line: 1237, column: 36, scope: !4653)
!4674 = !DILocalVariable(name: "c1", scope: !4653, file: !1, line: 1238, type: !4)
!4675 = !DILocation(line: 1238, column: 8, scope: !4653)
!4676 = !DILocalVariable(name: "c2", scope: !4653, file: !1, line: 1238, type: !4)
!4677 = !DILocation(line: 1238, column: 12, scope: !4653)
!4678 = !DILocalVariable(name: "c3", scope: !4653, file: !1, line: 1238, type: !4)
!4679 = !DILocation(line: 1238, column: 16, scope: !4653)
!4680 = !DILocalVariable(name: "c4", scope: !4653, file: !1, line: 1238, type: !4)
!4681 = !DILocation(line: 1238, column: 20, scope: !4653)
!4682 = !DILocalVariable(name: "d1", scope: !4653, file: !1, line: 1238, type: !4)
!4683 = !DILocation(line: 1238, column: 24, scope: !4653)
!4684 = !DILocalVariable(name: "d2", scope: !4653, file: !1, line: 1238, type: !4)
!4685 = !DILocation(line: 1238, column: 28, scope: !4653)
!4686 = !DILocalVariable(name: "d3", scope: !4653, file: !1, line: 1238, type: !4)
!4687 = !DILocation(line: 1238, column: 32, scope: !4653)
!4688 = !DILocalVariable(name: "d4", scope: !4653, file: !1, line: 1238, type: !4)
!4689 = !DILocation(line: 1238, column: 36, scope: !4653)
!4690 = !DILocation(line: 1240, column: 7, scope: !4653)
!4691 = !DILocation(line: 1240, column: 5, scope: !4653)
!4692 = !DILocation(line: 1241, column: 7, scope: !4653)
!4693 = !DILocation(line: 1241, column: 5, scope: !4653)
!4694 = !DILocation(line: 1242, column: 7, scope: !4653)
!4695 = !DILocation(line: 1242, column: 5, scope: !4653)
!4696 = !DILocation(line: 1243, column: 7, scope: !4653)
!4697 = !DILocation(line: 1243, column: 5, scope: !4653)
!4698 = !DILocation(line: 1245, column: 7, scope: !4653)
!4699 = !DILocation(line: 1245, column: 5, scope: !4653)
!4700 = !DILocation(line: 1246, column: 7, scope: !4653)
!4701 = !DILocation(line: 1246, column: 5, scope: !4653)
!4702 = !DILocation(line: 1247, column: 7, scope: !4653)
!4703 = !DILocation(line: 1247, column: 5, scope: !4653)
!4704 = !DILocation(line: 1248, column: 7, scope: !4653)
!4705 = !DILocation(line: 1248, column: 5, scope: !4653)
!4706 = !DILocation(line: 1250, column: 7, scope: !4653)
!4707 = !DILocation(line: 1250, column: 5, scope: !4653)
!4708 = !DILocation(line: 1251, column: 7, scope: !4653)
!4709 = !DILocation(line: 1251, column: 5, scope: !4653)
!4710 = !DILocation(line: 1252, column: 7, scope: !4653)
!4711 = !DILocation(line: 1252, column: 5, scope: !4653)
!4712 = !DILocation(line: 1253, column: 7, scope: !4653)
!4713 = !DILocation(line: 1253, column: 5, scope: !4653)
!4714 = !DILocation(line: 1255, column: 7, scope: !4653)
!4715 = !DILocation(line: 1255, column: 5, scope: !4653)
!4716 = !DILocation(line: 1256, column: 7, scope: !4653)
!4717 = !DILocation(line: 1256, column: 5, scope: !4653)
!4718 = !DILocation(line: 1257, column: 7, scope: !4653)
!4719 = !DILocation(line: 1257, column: 5, scope: !4653)
!4720 = !DILocation(line: 1258, column: 7, scope: !4653)
!4721 = !DILocation(line: 1258, column: 5, scope: !4653)
!4722 = !DILocation(line: 1261, column: 29, scope: !4653)
!4723 = !DILocation(line: 1261, column: 33, scope: !4653)
!4724 = !DILocation(line: 1261, column: 37, scope: !4653)
!4725 = !DILocation(line: 1261, column: 41, scope: !4653)
!4726 = !DILocation(line: 1261, column: 45, scope: !4653)
!4727 = !DILocation(line: 1261, column: 49, scope: !4653)
!4728 = !DILocation(line: 1261, column: 53, scope: !4653)
!4729 = !DILocation(line: 1261, column: 57, scope: !4653)
!4730 = !DILocation(line: 1261, column: 61, scope: !4653)
!4731 = !DILocation(line: 1261, column: 14, scope: !4653)
!4732 = !DILocation(line: 1261, column: 2, scope: !4653)
!4733 = !DILocation(line: 1261, column: 12, scope: !4653)
!4734 = !DILocation(line: 1262, column: 30, scope: !4653)
!4735 = !DILocation(line: 1262, column: 34, scope: !4653)
!4736 = !DILocation(line: 1262, column: 38, scope: !4653)
!4737 = !DILocation(line: 1262, column: 42, scope: !4653)
!4738 = !DILocation(line: 1262, column: 46, scope: !4653)
!4739 = !DILocation(line: 1262, column: 50, scope: !4653)
!4740 = !DILocation(line: 1262, column: 54, scope: !4653)
!4741 = !DILocation(line: 1262, column: 58, scope: !4653)
!4742 = !DILocation(line: 1262, column: 62, scope: !4653)
!4743 = !DILocation(line: 1262, column: 15, scope: !4653)
!4744 = !DILocation(line: 1262, column: 14, scope: !4653)
!4745 = !DILocation(line: 1262, column: 2, scope: !4653)
!4746 = !DILocation(line: 1262, column: 12, scope: !4653)
!4747 = !DILocation(line: 1263, column: 29, scope: !4653)
!4748 = !DILocation(line: 1263, column: 33, scope: !4653)
!4749 = !DILocation(line: 1263, column: 37, scope: !4653)
!4750 = !DILocation(line: 1263, column: 41, scope: !4653)
!4751 = !DILocation(line: 1263, column: 45, scope: !4653)
!4752 = !DILocation(line: 1263, column: 49, scope: !4653)
!4753 = !DILocation(line: 1263, column: 53, scope: !4653)
!4754 = !DILocation(line: 1263, column: 57, scope: !4653)
!4755 = !DILocation(line: 1263, column: 61, scope: !4653)
!4756 = !DILocation(line: 1263, column: 14, scope: !4653)
!4757 = !DILocation(line: 1263, column: 2, scope: !4653)
!4758 = !DILocation(line: 1263, column: 12, scope: !4653)
!4759 = !DILocation(line: 1264, column: 30, scope: !4653)
!4760 = !DILocation(line: 1264, column: 34, scope: !4653)
!4761 = !DILocation(line: 1264, column: 38, scope: !4653)
!4762 = !DILocation(line: 1264, column: 42, scope: !4653)
!4763 = !DILocation(line: 1264, column: 46, scope: !4653)
!4764 = !DILocation(line: 1264, column: 50, scope: !4653)
!4765 = !DILocation(line: 1264, column: 54, scope: !4653)
!4766 = !DILocation(line: 1264, column: 58, scope: !4653)
!4767 = !DILocation(line: 1264, column: 62, scope: !4653)
!4768 = !DILocation(line: 1264, column: 15, scope: !4653)
!4769 = !DILocation(line: 1264, column: 14, scope: !4653)
!4770 = !DILocation(line: 1264, column: 2, scope: !4653)
!4771 = !DILocation(line: 1264, column: 12, scope: !4653)
!4772 = !DILocation(line: 1266, column: 30, scope: !4653)
!4773 = !DILocation(line: 1266, column: 34, scope: !4653)
!4774 = !DILocation(line: 1266, column: 38, scope: !4653)
!4775 = !DILocation(line: 1266, column: 42, scope: !4653)
!4776 = !DILocation(line: 1266, column: 46, scope: !4653)
!4777 = !DILocation(line: 1266, column: 50, scope: !4653)
!4778 = !DILocation(line: 1266, column: 54, scope: !4653)
!4779 = !DILocation(line: 1266, column: 58, scope: !4653)
!4780 = !DILocation(line: 1266, column: 62, scope: !4653)
!4781 = !DILocation(line: 1266, column: 15, scope: !4653)
!4782 = !DILocation(line: 1266, column: 14, scope: !4653)
!4783 = !DILocation(line: 1266, column: 2, scope: !4653)
!4784 = !DILocation(line: 1266, column: 12, scope: !4653)
!4785 = !DILocation(line: 1267, column: 29, scope: !4653)
!4786 = !DILocation(line: 1267, column: 33, scope: !4653)
!4787 = !DILocation(line: 1267, column: 37, scope: !4653)
!4788 = !DILocation(line: 1267, column: 41, scope: !4653)
!4789 = !DILocation(line: 1267, column: 45, scope: !4653)
!4790 = !DILocation(line: 1267, column: 49, scope: !4653)
!4791 = !DILocation(line: 1267, column: 53, scope: !4653)
!4792 = !DILocation(line: 1267, column: 57, scope: !4653)
!4793 = !DILocation(line: 1267, column: 61, scope: !4653)
!4794 = !DILocation(line: 1267, column: 14, scope: !4653)
!4795 = !DILocation(line: 1267, column: 2, scope: !4653)
!4796 = !DILocation(line: 1267, column: 12, scope: !4653)
!4797 = !DILocation(line: 1268, column: 30, scope: !4653)
!4798 = !DILocation(line: 1268, column: 34, scope: !4653)
!4799 = !DILocation(line: 1268, column: 38, scope: !4653)
!4800 = !DILocation(line: 1268, column: 42, scope: !4653)
!4801 = !DILocation(line: 1268, column: 46, scope: !4653)
!4802 = !DILocation(line: 1268, column: 50, scope: !4653)
!4803 = !DILocation(line: 1268, column: 54, scope: !4653)
!4804 = !DILocation(line: 1268, column: 58, scope: !4653)
!4805 = !DILocation(line: 1268, column: 62, scope: !4653)
!4806 = !DILocation(line: 1268, column: 15, scope: !4653)
!4807 = !DILocation(line: 1268, column: 14, scope: !4653)
!4808 = !DILocation(line: 1268, column: 2, scope: !4653)
!4809 = !DILocation(line: 1268, column: 12, scope: !4653)
!4810 = !DILocation(line: 1269, column: 29, scope: !4653)
!4811 = !DILocation(line: 1269, column: 33, scope: !4653)
!4812 = !DILocation(line: 1269, column: 37, scope: !4653)
!4813 = !DILocation(line: 1269, column: 41, scope: !4653)
!4814 = !DILocation(line: 1269, column: 45, scope: !4653)
!4815 = !DILocation(line: 1269, column: 49, scope: !4653)
!4816 = !DILocation(line: 1269, column: 53, scope: !4653)
!4817 = !DILocation(line: 1269, column: 57, scope: !4653)
!4818 = !DILocation(line: 1269, column: 61, scope: !4653)
!4819 = !DILocation(line: 1269, column: 14, scope: !4653)
!4820 = !DILocation(line: 1269, column: 2, scope: !4653)
!4821 = !DILocation(line: 1269, column: 12, scope: !4653)
!4822 = !DILocation(line: 1271, column: 29, scope: !4653)
!4823 = !DILocation(line: 1271, column: 33, scope: !4653)
!4824 = !DILocation(line: 1271, column: 37, scope: !4653)
!4825 = !DILocation(line: 1271, column: 41, scope: !4653)
!4826 = !DILocation(line: 1271, column: 45, scope: !4653)
!4827 = !DILocation(line: 1271, column: 49, scope: !4653)
!4828 = !DILocation(line: 1271, column: 53, scope: !4653)
!4829 = !DILocation(line: 1271, column: 57, scope: !4653)
!4830 = !DILocation(line: 1271, column: 61, scope: !4653)
!4831 = !DILocation(line: 1271, column: 14, scope: !4653)
!4832 = !DILocation(line: 1271, column: 2, scope: !4653)
!4833 = !DILocation(line: 1271, column: 12, scope: !4653)
!4834 = !DILocation(line: 1272, column: 30, scope: !4653)
!4835 = !DILocation(line: 1272, column: 34, scope: !4653)
!4836 = !DILocation(line: 1272, column: 38, scope: !4653)
!4837 = !DILocation(line: 1272, column: 42, scope: !4653)
!4838 = !DILocation(line: 1272, column: 46, scope: !4653)
!4839 = !DILocation(line: 1272, column: 50, scope: !4653)
!4840 = !DILocation(line: 1272, column: 54, scope: !4653)
!4841 = !DILocation(line: 1272, column: 58, scope: !4653)
!4842 = !DILocation(line: 1272, column: 62, scope: !4653)
!4843 = !DILocation(line: 1272, column: 15, scope: !4653)
!4844 = !DILocation(line: 1272, column: 14, scope: !4653)
!4845 = !DILocation(line: 1272, column: 2, scope: !4653)
!4846 = !DILocation(line: 1272, column: 12, scope: !4653)
!4847 = !DILocation(line: 1273, column: 29, scope: !4653)
!4848 = !DILocation(line: 1273, column: 33, scope: !4653)
!4849 = !DILocation(line: 1273, column: 37, scope: !4653)
!4850 = !DILocation(line: 1273, column: 41, scope: !4653)
!4851 = !DILocation(line: 1273, column: 45, scope: !4653)
!4852 = !DILocation(line: 1273, column: 49, scope: !4653)
!4853 = !DILocation(line: 1273, column: 53, scope: !4653)
!4854 = !DILocation(line: 1273, column: 57, scope: !4653)
!4855 = !DILocation(line: 1273, column: 61, scope: !4653)
!4856 = !DILocation(line: 1273, column: 14, scope: !4653)
!4857 = !DILocation(line: 1273, column: 2, scope: !4653)
!4858 = !DILocation(line: 1273, column: 12, scope: !4653)
!4859 = !DILocation(line: 1274, column: 30, scope: !4653)
!4860 = !DILocation(line: 1274, column: 34, scope: !4653)
!4861 = !DILocation(line: 1274, column: 38, scope: !4653)
!4862 = !DILocation(line: 1274, column: 42, scope: !4653)
!4863 = !DILocation(line: 1274, column: 46, scope: !4653)
!4864 = !DILocation(line: 1274, column: 50, scope: !4653)
!4865 = !DILocation(line: 1274, column: 54, scope: !4653)
!4866 = !DILocation(line: 1274, column: 58, scope: !4653)
!4867 = !DILocation(line: 1274, column: 62, scope: !4653)
!4868 = !DILocation(line: 1274, column: 15, scope: !4653)
!4869 = !DILocation(line: 1274, column: 14, scope: !4653)
!4870 = !DILocation(line: 1274, column: 2, scope: !4653)
!4871 = !DILocation(line: 1274, column: 12, scope: !4653)
!4872 = !DILocation(line: 1276, column: 30, scope: !4653)
!4873 = !DILocation(line: 1276, column: 34, scope: !4653)
!4874 = !DILocation(line: 1276, column: 38, scope: !4653)
!4875 = !DILocation(line: 1276, column: 42, scope: !4653)
!4876 = !DILocation(line: 1276, column: 46, scope: !4653)
!4877 = !DILocation(line: 1276, column: 50, scope: !4653)
!4878 = !DILocation(line: 1276, column: 54, scope: !4653)
!4879 = !DILocation(line: 1276, column: 58, scope: !4653)
!4880 = !DILocation(line: 1276, column: 62, scope: !4653)
!4881 = !DILocation(line: 1276, column: 15, scope: !4653)
!4882 = !DILocation(line: 1276, column: 14, scope: !4653)
!4883 = !DILocation(line: 1276, column: 2, scope: !4653)
!4884 = !DILocation(line: 1276, column: 12, scope: !4653)
!4885 = !DILocation(line: 1277, column: 29, scope: !4653)
!4886 = !DILocation(line: 1277, column: 33, scope: !4653)
!4887 = !DILocation(line: 1277, column: 37, scope: !4653)
!4888 = !DILocation(line: 1277, column: 41, scope: !4653)
!4889 = !DILocation(line: 1277, column: 45, scope: !4653)
!4890 = !DILocation(line: 1277, column: 49, scope: !4653)
!4891 = !DILocation(line: 1277, column: 53, scope: !4653)
!4892 = !DILocation(line: 1277, column: 57, scope: !4653)
!4893 = !DILocation(line: 1277, column: 61, scope: !4653)
!4894 = !DILocation(line: 1277, column: 14, scope: !4653)
!4895 = !DILocation(line: 1277, column: 2, scope: !4653)
!4896 = !DILocation(line: 1277, column: 12, scope: !4653)
!4897 = !DILocation(line: 1278, column: 30, scope: !4653)
!4898 = !DILocation(line: 1278, column: 34, scope: !4653)
!4899 = !DILocation(line: 1278, column: 38, scope: !4653)
!4900 = !DILocation(line: 1278, column: 42, scope: !4653)
!4901 = !DILocation(line: 1278, column: 46, scope: !4653)
!4902 = !DILocation(line: 1278, column: 50, scope: !4653)
!4903 = !DILocation(line: 1278, column: 54, scope: !4653)
!4904 = !DILocation(line: 1278, column: 58, scope: !4653)
!4905 = !DILocation(line: 1278, column: 62, scope: !4653)
!4906 = !DILocation(line: 1278, column: 15, scope: !4653)
!4907 = !DILocation(line: 1278, column: 14, scope: !4653)
!4908 = !DILocation(line: 1278, column: 2, scope: !4653)
!4909 = !DILocation(line: 1278, column: 12, scope: !4653)
!4910 = !DILocation(line: 1279, column: 29, scope: !4653)
!4911 = !DILocation(line: 1279, column: 33, scope: !4653)
!4912 = !DILocation(line: 1279, column: 37, scope: !4653)
!4913 = !DILocation(line: 1279, column: 41, scope: !4653)
!4914 = !DILocation(line: 1279, column: 45, scope: !4653)
!4915 = !DILocation(line: 1279, column: 49, scope: !4653)
!4916 = !DILocation(line: 1279, column: 53, scope: !4653)
!4917 = !DILocation(line: 1279, column: 57, scope: !4653)
!4918 = !DILocation(line: 1279, column: 61, scope: !4653)
!4919 = !DILocation(line: 1279, column: 14, scope: !4653)
!4920 = !DILocation(line: 1279, column: 2, scope: !4653)
!4921 = !DILocation(line: 1279, column: 12, scope: !4653)
!4922 = !DILocation(line: 1280, column: 1, scope: !4653)
!4923 = distinct !DISubprogram(name: "determinant_m3", scope: !1, file: !1, line: 1288, type: !4924, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4924 = !DISubroutineType(types: !4925)
!4925 = !{!4, !4, !4, !4, !4, !4, !4, !4, !4, !4}
!4926 = !DILocalVariable(name: "a1", arg: 1, scope: !4923, file: !1, line: 1288, type: !4)
!4927 = !DILocation(line: 1288, column: 28, scope: !4923)
!4928 = !DILocalVariable(name: "a2", arg: 2, scope: !4923, file: !1, line: 1288, type: !4)
!4929 = !DILocation(line: 1288, column: 38, scope: !4923)
!4930 = !DILocalVariable(name: "a3", arg: 3, scope: !4923, file: !1, line: 1288, type: !4)
!4931 = !DILocation(line: 1288, column: 48, scope: !4923)
!4932 = !DILocalVariable(name: "b1", arg: 4, scope: !4923, file: !1, line: 1289, type: !4)
!4933 = !DILocation(line: 1289, column: 28, scope: !4923)
!4934 = !DILocalVariable(name: "b2", arg: 5, scope: !4923, file: !1, line: 1289, type: !4)
!4935 = !DILocation(line: 1289, column: 38, scope: !4923)
!4936 = !DILocalVariable(name: "b3", arg: 6, scope: !4923, file: !1, line: 1289, type: !4)
!4937 = !DILocation(line: 1289, column: 48, scope: !4923)
!4938 = !DILocalVariable(name: "c1", arg: 7, scope: !4923, file: !1, line: 1290, type: !4)
!4939 = !DILocation(line: 1290, column: 28, scope: !4923)
!4940 = !DILocalVariable(name: "c2", arg: 8, scope: !4923, file: !1, line: 1290, type: !4)
!4941 = !DILocation(line: 1290, column: 38, scope: !4923)
!4942 = !DILocalVariable(name: "c3", arg: 9, scope: !4923, file: !1, line: 1290, type: !4)
!4943 = !DILocation(line: 1290, column: 48, scope: !4923)
!4944 = !DILocalVariable(name: "ans", scope: !4923, file: !1, line: 1292, type: !4)
!4945 = !DILocation(line: 1292, column: 8, scope: !4923)
!4946 = !DILocation(line: 1294, column: 9, scope: !4923)
!4947 = !DILocation(line: 1294, column: 29, scope: !4923)
!4948 = !DILocation(line: 1294, column: 33, scope: !4923)
!4949 = !DILocation(line: 1294, column: 37, scope: !4923)
!4950 = !DILocation(line: 1294, column: 41, scope: !4923)
!4951 = !DILocation(line: 1294, column: 14, scope: !4923)
!4952 = !DILocation(line: 1294, column: 12, scope: !4923)
!4953 = !DILocation(line: 1295, column: 9, scope: !4923)
!4954 = !DILocation(line: 1295, column: 29, scope: !4923)
!4955 = !DILocation(line: 1295, column: 33, scope: !4923)
!4956 = !DILocation(line: 1295, column: 37, scope: !4923)
!4957 = !DILocation(line: 1295, column: 41, scope: !4923)
!4958 = !DILocation(line: 1295, column: 14, scope: !4923)
!4959 = !DILocation(line: 1295, column: 12, scope: !4923)
!4960 = !DILocation(line: 1294, column: 45, scope: !4923)
!4961 = !DILocation(line: 1296, column: 9, scope: !4923)
!4962 = !DILocation(line: 1296, column: 29, scope: !4923)
!4963 = !DILocation(line: 1296, column: 33, scope: !4923)
!4964 = !DILocation(line: 1296, column: 37, scope: !4923)
!4965 = !DILocation(line: 1296, column: 41, scope: !4923)
!4966 = !DILocation(line: 1296, column: 14, scope: !4923)
!4967 = !DILocation(line: 1296, column: 12, scope: !4923)
!4968 = !DILocation(line: 1295, column: 45, scope: !4923)
!4969 = !DILocation(line: 1294, column: 6, scope: !4923)
!4970 = !DILocation(line: 1298, column: 9, scope: !4923)
!4971 = !DILocation(line: 1298, column: 2, scope: !4923)
!4972 = distinct !DISubprogram(name: "determinant_m2", scope: !1, file: !1, line: 1282, type: !4973, scopeLine: 1283, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4973 = !DISubroutineType(types: !4974)
!4974 = !{!4, !4, !4, !4, !4}
!4975 = !DILocalVariable(name: "a", arg: 1, scope: !4972, file: !1, line: 1282, type: !4)
!4976 = !DILocation(line: 1282, column: 28, scope: !4972)
!4977 = !DILocalVariable(name: "b", arg: 2, scope: !4972, file: !1, line: 1282, type: !4)
!4978 = !DILocation(line: 1282, column: 37, scope: !4972)
!4979 = !DILocalVariable(name: "c", arg: 3, scope: !4972, file: !1, line: 1282, type: !4)
!4980 = !DILocation(line: 1282, column: 46, scope: !4972)
!4981 = !DILocalVariable(name: "d", arg: 4, scope: !4972, file: !1, line: 1282, type: !4)
!4982 = !DILocation(line: 1282, column: 55, scope: !4972)
!4983 = !DILocation(line: 1285, column: 9, scope: !4972)
!4984 = !DILocation(line: 1285, column: 13, scope: !4972)
!4985 = !DILocation(line: 1285, column: 11, scope: !4972)
!4986 = !DILocation(line: 1285, column: 17, scope: !4972)
!4987 = !DILocation(line: 1285, column: 21, scope: !4972)
!4988 = !DILocation(line: 1285, column: 19, scope: !4972)
!4989 = !DILocation(line: 1285, column: 15, scope: !4972)
!4990 = !DILocation(line: 1285, column: 2, scope: !4972)
!4991 = distinct !DISubprogram(name: "determinant_m4", scope: !1, file: !1, line: 1301, type: !4992, scopeLine: 1302, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!4992 = !DISubroutineType(types: !4993)
!4993 = !{!4, !47}
!4994 = !DILocalVariable(name: "m", arg: 1, scope: !4991, file: !1, line: 1301, type: !47)
!4995 = !DILocation(line: 1301, column: 28, scope: !4991)
!4996 = !DILocalVariable(name: "ans", scope: !4991, file: !1, line: 1303, type: !4)
!4997 = !DILocation(line: 1303, column: 8, scope: !4991)
!4998 = !DILocalVariable(name: "a1", scope: !4991, file: !1, line: 1304, type: !4)
!4999 = !DILocation(line: 1304, column: 8, scope: !4991)
!5000 = !DILocalVariable(name: "a2", scope: !4991, file: !1, line: 1304, type: !4)
!5001 = !DILocation(line: 1304, column: 12, scope: !4991)
!5002 = !DILocalVariable(name: "a3", scope: !4991, file: !1, line: 1304, type: !4)
!5003 = !DILocation(line: 1304, column: 16, scope: !4991)
!5004 = !DILocalVariable(name: "a4", scope: !4991, file: !1, line: 1304, type: !4)
!5005 = !DILocation(line: 1304, column: 20, scope: !4991)
!5006 = !DILocalVariable(name: "b1", scope: !4991, file: !1, line: 1304, type: !4)
!5007 = !DILocation(line: 1304, column: 24, scope: !4991)
!5008 = !DILocalVariable(name: "b2", scope: !4991, file: !1, line: 1304, type: !4)
!5009 = !DILocation(line: 1304, column: 28, scope: !4991)
!5010 = !DILocalVariable(name: "b3", scope: !4991, file: !1, line: 1304, type: !4)
!5011 = !DILocation(line: 1304, column: 32, scope: !4991)
!5012 = !DILocalVariable(name: "b4", scope: !4991, file: !1, line: 1304, type: !4)
!5013 = !DILocation(line: 1304, column: 36, scope: !4991)
!5014 = !DILocalVariable(name: "c1", scope: !4991, file: !1, line: 1304, type: !4)
!5015 = !DILocation(line: 1304, column: 40, scope: !4991)
!5016 = !DILocalVariable(name: "c2", scope: !4991, file: !1, line: 1304, type: !4)
!5017 = !DILocation(line: 1304, column: 44, scope: !4991)
!5018 = !DILocalVariable(name: "c3", scope: !4991, file: !1, line: 1304, type: !4)
!5019 = !DILocation(line: 1304, column: 48, scope: !4991)
!5020 = !DILocalVariable(name: "c4", scope: !4991, file: !1, line: 1304, type: !4)
!5021 = !DILocation(line: 1304, column: 52, scope: !4991)
!5022 = !DILocalVariable(name: "d1", scope: !4991, file: !1, line: 1304, type: !4)
!5023 = !DILocation(line: 1304, column: 56, scope: !4991)
!5024 = !DILocalVariable(name: "d2", scope: !4991, file: !1, line: 1304, type: !4)
!5025 = !DILocation(line: 1304, column: 60, scope: !4991)
!5026 = !DILocalVariable(name: "d3", scope: !4991, file: !1, line: 1304, type: !4)
!5027 = !DILocation(line: 1304, column: 64, scope: !4991)
!5028 = !DILocalVariable(name: "d4", scope: !4991, file: !1, line: 1304, type: !4)
!5029 = !DILocation(line: 1304, column: 68, scope: !4991)
!5030 = !DILocation(line: 1306, column: 7, scope: !4991)
!5031 = !DILocation(line: 1306, column: 5, scope: !4991)
!5032 = !DILocation(line: 1307, column: 7, scope: !4991)
!5033 = !DILocation(line: 1307, column: 5, scope: !4991)
!5034 = !DILocation(line: 1308, column: 7, scope: !4991)
!5035 = !DILocation(line: 1308, column: 5, scope: !4991)
!5036 = !DILocation(line: 1309, column: 7, scope: !4991)
!5037 = !DILocation(line: 1309, column: 5, scope: !4991)
!5038 = !DILocation(line: 1311, column: 7, scope: !4991)
!5039 = !DILocation(line: 1311, column: 5, scope: !4991)
!5040 = !DILocation(line: 1312, column: 7, scope: !4991)
!5041 = !DILocation(line: 1312, column: 5, scope: !4991)
!5042 = !DILocation(line: 1313, column: 7, scope: !4991)
!5043 = !DILocation(line: 1313, column: 5, scope: !4991)
!5044 = !DILocation(line: 1314, column: 7, scope: !4991)
!5045 = !DILocation(line: 1314, column: 5, scope: !4991)
!5046 = !DILocation(line: 1316, column: 7, scope: !4991)
!5047 = !DILocation(line: 1316, column: 5, scope: !4991)
!5048 = !DILocation(line: 1317, column: 7, scope: !4991)
!5049 = !DILocation(line: 1317, column: 5, scope: !4991)
!5050 = !DILocation(line: 1318, column: 7, scope: !4991)
!5051 = !DILocation(line: 1318, column: 5, scope: !4991)
!5052 = !DILocation(line: 1319, column: 7, scope: !4991)
!5053 = !DILocation(line: 1319, column: 5, scope: !4991)
!5054 = !DILocation(line: 1321, column: 7, scope: !4991)
!5055 = !DILocation(line: 1321, column: 5, scope: !4991)
!5056 = !DILocation(line: 1322, column: 7, scope: !4991)
!5057 = !DILocation(line: 1322, column: 5, scope: !4991)
!5058 = !DILocation(line: 1323, column: 7, scope: !4991)
!5059 = !DILocation(line: 1323, column: 5, scope: !4991)
!5060 = !DILocation(line: 1324, column: 7, scope: !4991)
!5061 = !DILocation(line: 1324, column: 5, scope: !4991)
!5062 = !DILocation(line: 1326, column: 9, scope: !4991)
!5063 = !DILocation(line: 1326, column: 29, scope: !4991)
!5064 = !DILocation(line: 1326, column: 33, scope: !4991)
!5065 = !DILocation(line: 1326, column: 37, scope: !4991)
!5066 = !DILocation(line: 1326, column: 41, scope: !4991)
!5067 = !DILocation(line: 1326, column: 45, scope: !4991)
!5068 = !DILocation(line: 1326, column: 49, scope: !4991)
!5069 = !DILocation(line: 1326, column: 53, scope: !4991)
!5070 = !DILocation(line: 1326, column: 57, scope: !4991)
!5071 = !DILocation(line: 1326, column: 61, scope: !4991)
!5072 = !DILocation(line: 1326, column: 14, scope: !4991)
!5073 = !DILocation(line: 1326, column: 12, scope: !4991)
!5074 = !DILocation(line: 1327, column: 9, scope: !4991)
!5075 = !DILocation(line: 1327, column: 29, scope: !4991)
!5076 = !DILocation(line: 1327, column: 33, scope: !4991)
!5077 = !DILocation(line: 1327, column: 37, scope: !4991)
!5078 = !DILocation(line: 1327, column: 41, scope: !4991)
!5079 = !DILocation(line: 1327, column: 45, scope: !4991)
!5080 = !DILocation(line: 1327, column: 49, scope: !4991)
!5081 = !DILocation(line: 1327, column: 53, scope: !4991)
!5082 = !DILocation(line: 1327, column: 57, scope: !4991)
!5083 = !DILocation(line: 1327, column: 61, scope: !4991)
!5084 = !DILocation(line: 1327, column: 14, scope: !4991)
!5085 = !DILocation(line: 1327, column: 12, scope: !4991)
!5086 = !DILocation(line: 1326, column: 65, scope: !4991)
!5087 = !DILocation(line: 1328, column: 9, scope: !4991)
!5088 = !DILocation(line: 1328, column: 29, scope: !4991)
!5089 = !DILocation(line: 1328, column: 33, scope: !4991)
!5090 = !DILocation(line: 1328, column: 37, scope: !4991)
!5091 = !DILocation(line: 1328, column: 41, scope: !4991)
!5092 = !DILocation(line: 1328, column: 45, scope: !4991)
!5093 = !DILocation(line: 1328, column: 49, scope: !4991)
!5094 = !DILocation(line: 1328, column: 53, scope: !4991)
!5095 = !DILocation(line: 1328, column: 57, scope: !4991)
!5096 = !DILocation(line: 1328, column: 61, scope: !4991)
!5097 = !DILocation(line: 1328, column: 14, scope: !4991)
!5098 = !DILocation(line: 1328, column: 12, scope: !4991)
!5099 = !DILocation(line: 1327, column: 65, scope: !4991)
!5100 = !DILocation(line: 1329, column: 9, scope: !4991)
!5101 = !DILocation(line: 1329, column: 29, scope: !4991)
!5102 = !DILocation(line: 1329, column: 33, scope: !4991)
!5103 = !DILocation(line: 1329, column: 37, scope: !4991)
!5104 = !DILocation(line: 1329, column: 41, scope: !4991)
!5105 = !DILocation(line: 1329, column: 45, scope: !4991)
!5106 = !DILocation(line: 1329, column: 49, scope: !4991)
!5107 = !DILocation(line: 1329, column: 53, scope: !4991)
!5108 = !DILocation(line: 1329, column: 57, scope: !4991)
!5109 = !DILocation(line: 1329, column: 61, scope: !4991)
!5110 = !DILocation(line: 1329, column: 14, scope: !4991)
!5111 = !DILocation(line: 1329, column: 12, scope: !4991)
!5112 = !DILocation(line: 1328, column: 65, scope: !4991)
!5113 = !DILocation(line: 1326, column: 6, scope: !4991)
!5114 = !DILocation(line: 1331, column: 9, scope: !4991)
!5115 = !DILocation(line: 1331, column: 2, scope: !4991)
!5116 = distinct !DISubprogram(name: "size_to_mat3", scope: !1, file: !1, line: 1336, type: !5117, scopeLine: 1337, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5117 = !DISubroutineType(types: !5118)
!5118 = !{null, !35, !1721}
!5119 = !DILocalVariable(name: "mat", arg: 1, scope: !5116, file: !1, line: 1336, type: !35)
!5120 = !DILocation(line: 1336, column: 25, scope: !5116)
!5121 = !DILocalVariable(name: "size", arg: 2, scope: !5116, file: !1, line: 1336, type: !1721)
!5122 = !DILocation(line: 1336, column: 48, scope: !5116)
!5123 = !DILocation(line: 1338, column: 14, scope: !5116)
!5124 = !DILocation(line: 1338, column: 2, scope: !5116)
!5125 = !DILocation(line: 1338, column: 12, scope: !5116)
!5126 = !DILocation(line: 1339, column: 2, scope: !5116)
!5127 = !DILocation(line: 1339, column: 12, scope: !5116)
!5128 = !DILocation(line: 1340, column: 2, scope: !5116)
!5129 = !DILocation(line: 1340, column: 12, scope: !5116)
!5130 = !DILocation(line: 1341, column: 14, scope: !5116)
!5131 = !DILocation(line: 1341, column: 2, scope: !5116)
!5132 = !DILocation(line: 1341, column: 12, scope: !5116)
!5133 = !DILocation(line: 1342, column: 2, scope: !5116)
!5134 = !DILocation(line: 1342, column: 12, scope: !5116)
!5135 = !DILocation(line: 1343, column: 2, scope: !5116)
!5136 = !DILocation(line: 1343, column: 12, scope: !5116)
!5137 = !DILocation(line: 1344, column: 14, scope: !5116)
!5138 = !DILocation(line: 1344, column: 2, scope: !5116)
!5139 = !DILocation(line: 1344, column: 12, scope: !5116)
!5140 = !DILocation(line: 1345, column: 2, scope: !5116)
!5141 = !DILocation(line: 1345, column: 12, scope: !5116)
!5142 = !DILocation(line: 1346, column: 2, scope: !5116)
!5143 = !DILocation(line: 1346, column: 12, scope: !5116)
!5144 = !DILocation(line: 1347, column: 1, scope: !5116)
!5145 = distinct !DISubprogram(name: "size_to_mat4", scope: !1, file: !1, line: 1349, type: !5146, scopeLine: 1350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5146 = !DISubroutineType(types: !5147)
!5147 = !{null, !47, !1721}
!5148 = !DILocalVariable(name: "mat", arg: 1, scope: !5145, file: !1, line: 1349, type: !47)
!5149 = !DILocation(line: 1349, column: 25, scope: !5145)
!5150 = !DILocalVariable(name: "size", arg: 2, scope: !5145, file: !1, line: 1349, type: !1721)
!5151 = !DILocation(line: 1349, column: 48, scope: !5145)
!5152 = !DILocation(line: 1351, column: 14, scope: !5145)
!5153 = !DILocation(line: 1351, column: 2, scope: !5145)
!5154 = !DILocation(line: 1351, column: 12, scope: !5145)
!5155 = !DILocation(line: 1352, column: 2, scope: !5145)
!5156 = !DILocation(line: 1352, column: 12, scope: !5145)
!5157 = !DILocation(line: 1353, column: 2, scope: !5145)
!5158 = !DILocation(line: 1353, column: 12, scope: !5145)
!5159 = !DILocation(line: 1354, column: 2, scope: !5145)
!5160 = !DILocation(line: 1354, column: 12, scope: !5145)
!5161 = !DILocation(line: 1355, column: 2, scope: !5145)
!5162 = !DILocation(line: 1355, column: 12, scope: !5145)
!5163 = !DILocation(line: 1356, column: 14, scope: !5145)
!5164 = !DILocation(line: 1356, column: 2, scope: !5145)
!5165 = !DILocation(line: 1356, column: 12, scope: !5145)
!5166 = !DILocation(line: 1357, column: 2, scope: !5145)
!5167 = !DILocation(line: 1357, column: 12, scope: !5145)
!5168 = !DILocation(line: 1358, column: 2, scope: !5145)
!5169 = !DILocation(line: 1358, column: 12, scope: !5145)
!5170 = !DILocation(line: 1359, column: 2, scope: !5145)
!5171 = !DILocation(line: 1359, column: 12, scope: !5145)
!5172 = !DILocation(line: 1360, column: 2, scope: !5145)
!5173 = !DILocation(line: 1360, column: 12, scope: !5145)
!5174 = !DILocation(line: 1361, column: 14, scope: !5145)
!5175 = !DILocation(line: 1361, column: 2, scope: !5145)
!5176 = !DILocation(line: 1361, column: 12, scope: !5145)
!5177 = !DILocation(line: 1362, column: 2, scope: !5145)
!5178 = !DILocation(line: 1362, column: 12, scope: !5145)
!5179 = !DILocation(line: 1363, column: 2, scope: !5145)
!5180 = !DILocation(line: 1363, column: 12, scope: !5145)
!5181 = !DILocation(line: 1364, column: 2, scope: !5145)
!5182 = !DILocation(line: 1364, column: 12, scope: !5145)
!5183 = !DILocation(line: 1365, column: 2, scope: !5145)
!5184 = !DILocation(line: 1365, column: 12, scope: !5145)
!5185 = !DILocation(line: 1366, column: 2, scope: !5145)
!5186 = !DILocation(line: 1366, column: 12, scope: !5145)
!5187 = !DILocation(line: 1367, column: 1, scope: !5145)
!5188 = distinct !DISubprogram(name: "len_v3", scope: !1718, file: !1718, line: 714, type: !4502, scopeLine: 715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5189 = !DILocalVariable(name: "a", arg: 1, scope: !5188, file: !1718, line: 714, type: !1721)
!5190 = !DILocation(line: 714, column: 34, scope: !5188)
!5191 = !DILocation(line: 716, column: 24, scope: !5188)
!5192 = !DILocation(line: 716, column: 27, scope: !5188)
!5193 = !DILocation(line: 716, column: 15, scope: !5188)
!5194 = !DILocation(line: 716, column: 9, scope: !5188)
!5195 = !DILocation(line: 716, column: 2, scope: !5188)
!5196 = distinct !DISubprogram(name: "mat3_to_scale", scope: !1, file: !1, line: 1386, type: !2947, scopeLine: 1387, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5197 = !DILocalVariable(name: "mat", arg: 1, scope: !5196, file: !1, line: 1386, type: !35)
!5198 = !DILocation(line: 1386, column: 27, scope: !5196)
!5199 = !DILocalVariable(name: "unit_vec", scope: !5196, file: !1, line: 1389, type: !36)
!5200 = !DILocation(line: 1389, column: 8, scope: !5196)
!5201 = !DILocation(line: 1390, column: 13, scope: !5196)
!5202 = !DILocation(line: 1390, column: 2, scope: !5196)
!5203 = !DILocation(line: 1391, column: 12, scope: !5196)
!5204 = !DILocation(line: 1391, column: 17, scope: !5196)
!5205 = !DILocation(line: 1391, column: 2, scope: !5196)
!5206 = !DILocation(line: 1392, column: 16, scope: !5196)
!5207 = !DILocation(line: 1392, column: 9, scope: !5196)
!5208 = !DILocation(line: 1392, column: 2, scope: !5196)
!5209 = distinct !DISubprogram(name: "copy_v3_fl", scope: !1718, file: !1718, line: 85, type: !3997, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5210 = !DILocalVariable(name: "r", arg: 1, scope: !5209, file: !1718, line: 85, type: !1686)
!5211 = !DILocation(line: 85, column: 31, scope: !5209)
!5212 = !DILocalVariable(name: "f", arg: 2, scope: !5209, file: !1718, line: 85, type: !4)
!5213 = !DILocation(line: 85, column: 43, scope: !5209)
!5214 = !DILocation(line: 87, column: 9, scope: !5209)
!5215 = !DILocation(line: 87, column: 2, scope: !5209)
!5216 = !DILocation(line: 87, column: 7, scope: !5209)
!5217 = !DILocation(line: 88, column: 9, scope: !5209)
!5218 = !DILocation(line: 88, column: 2, scope: !5209)
!5219 = !DILocation(line: 88, column: 7, scope: !5209)
!5220 = !DILocation(line: 89, column: 9, scope: !5209)
!5221 = !DILocation(line: 89, column: 2, scope: !5209)
!5222 = !DILocation(line: 89, column: 7, scope: !5209)
!5223 = !DILocation(line: 90, column: 1, scope: !5209)
!5224 = distinct !DISubprogram(name: "mat4_to_scale", scope: !1, file: !1, line: 1395, type: !4992, scopeLine: 1396, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5225 = !DILocalVariable(name: "mat", arg: 1, scope: !5224, file: !1, line: 1395, type: !47)
!5226 = !DILocation(line: 1395, column: 27, scope: !5224)
!5227 = !DILocalVariable(name: "unit_vec", scope: !5224, file: !1, line: 1398, type: !36)
!5228 = !DILocation(line: 1398, column: 8, scope: !5224)
!5229 = !DILocation(line: 1399, column: 13, scope: !5224)
!5230 = !DILocation(line: 1399, column: 2, scope: !5224)
!5231 = !DILocation(line: 1400, column: 17, scope: !5224)
!5232 = !DILocation(line: 1400, column: 22, scope: !5224)
!5233 = !DILocation(line: 1400, column: 2, scope: !5224)
!5234 = !DILocation(line: 1401, column: 16, scope: !5224)
!5235 = !DILocation(line: 1401, column: 9, scope: !5224)
!5236 = !DILocation(line: 1401, column: 2, scope: !5224)
!5237 = distinct !DISubprogram(name: "mat3_to_rot_size", scope: !1, file: !1, line: 1404, type: !5238, scopeLine: 1405, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5238 = !DISubroutineType(types: !5239)
!5239 = !{null, !35, !1686, !35}
!5240 = !DILocalVariable(name: "rot", arg: 1, scope: !5237, file: !1, line: 1404, type: !35)
!5241 = !DILocation(line: 1404, column: 29, scope: !5237)
!5242 = !DILocalVariable(name: "size", arg: 2, scope: !5237, file: !1, line: 1404, type: !1686)
!5243 = !DILocation(line: 1404, column: 46, scope: !5237)
!5244 = !DILocalVariable(name: "mat3", arg: 3, scope: !5237, file: !1, line: 1404, type: !35)
!5245 = !DILocation(line: 1404, column: 61, scope: !5237)
!5246 = !DILocalVariable(name: "mat3_n", scope: !5237, file: !1, line: 1406, type: !699)
!5247 = !DILocation(line: 1406, column: 8, scope: !5237)
!5248 = !DILocalVariable(name: "imat3_n", scope: !5237, file: !1, line: 1407, type: !699)
!5249 = !DILocation(line: 1407, column: 8, scope: !5237)
!5250 = !DILocation(line: 1414, column: 18, scope: !5237)
!5251 = !DILocation(line: 1414, column: 26, scope: !5237)
!5252 = !DILocation(line: 1414, column: 2, scope: !5237)
!5253 = !DILocation(line: 1415, column: 21, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5237, file: !1, line: 1415, column: 6)
!5255 = !DILocation(line: 1415, column: 6, scope: !5254)
!5256 = !DILocation(line: 1415, column: 6, scope: !5237)
!5257 = !DILocation(line: 1416, column: 13, scope: !5258)
!5258 = distinct !DILexicalBlock(scope: !5254, file: !1, line: 1415, column: 28)
!5259 = !DILocation(line: 1416, column: 3, scope: !5258)
!5260 = !DILocation(line: 1417, column: 13, scope: !5258)
!5261 = !DILocation(line: 1417, column: 3, scope: !5258)
!5262 = !DILocation(line: 1418, column: 13, scope: !5258)
!5263 = !DILocation(line: 1418, column: 3, scope: !5258)
!5264 = !DILocation(line: 1419, column: 2, scope: !5258)
!5265 = !DILocation(line: 1423, column: 13, scope: !5237)
!5266 = !DILocation(line: 1423, column: 18, scope: !5237)
!5267 = !DILocation(line: 1423, column: 2, scope: !5237)
!5268 = !DILocation(line: 1427, column: 15, scope: !5237)
!5269 = !DILocation(line: 1427, column: 24, scope: !5237)
!5270 = !DILocation(line: 1427, column: 2, scope: !5237)
!5271 = !DILocation(line: 1428, column: 14, scope: !5237)
!5272 = !DILocation(line: 1428, column: 20, scope: !5237)
!5273 = !DILocation(line: 1428, column: 29, scope: !5237)
!5274 = !DILocation(line: 1428, column: 2, scope: !5237)
!5275 = !DILocation(line: 1430, column: 12, scope: !5237)
!5276 = !DILocation(line: 1430, column: 2, scope: !5237)
!5277 = !DILocation(line: 1430, column: 10, scope: !5237)
!5278 = !DILocation(line: 1431, column: 12, scope: !5237)
!5279 = !DILocation(line: 1431, column: 2, scope: !5237)
!5280 = !DILocation(line: 1431, column: 10, scope: !5237)
!5281 = !DILocation(line: 1432, column: 12, scope: !5237)
!5282 = !DILocation(line: 1432, column: 2, scope: !5237)
!5283 = !DILocation(line: 1432, column: 10, scope: !5237)
!5284 = !DILocation(line: 1433, column: 1, scope: !5237)
!5285 = distinct !DISubprogram(name: "is_negative_m3", scope: !1, file: !1, line: 1612, type: !3165, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5286 = !DILocalVariable(name: "mat", arg: 1, scope: !5285, file: !1, line: 1612, type: !35)
!5287 = !DILocation(line: 1612, column: 27, scope: !5285)
!5288 = !DILocalVariable(name: "vec", scope: !5285, file: !1, line: 1614, type: !36)
!5289 = !DILocation(line: 1614, column: 8, scope: !5285)
!5290 = !DILocation(line: 1615, column: 16, scope: !5285)
!5291 = !DILocation(line: 1615, column: 21, scope: !5285)
!5292 = !DILocation(line: 1615, column: 29, scope: !5285)
!5293 = !DILocation(line: 1615, column: 2, scope: !5285)
!5294 = !DILocation(line: 1616, column: 19, scope: !5285)
!5295 = !DILocation(line: 1616, column: 24, scope: !5285)
!5296 = !DILocation(line: 1616, column: 10, scope: !5285)
!5297 = !DILocation(line: 1616, column: 32, scope: !5285)
!5298 = !DILocation(line: 1616, column: 9, scope: !5285)
!5299 = !DILocation(line: 1616, column: 2, scope: !5285)
!5300 = distinct !DISubprogram(name: "negate_v3", scope: !1718, file: !1718, line: 576, type: !5301, scopeLine: 577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5301 = !DISubroutineType(types: !5302)
!5302 = !{null, !1686}
!5303 = !DILocalVariable(name: "r", arg: 1, scope: !5300, file: !1718, line: 576, type: !1686)
!5304 = !DILocation(line: 576, column: 30, scope: !5300)
!5305 = !DILocation(line: 578, column: 10, scope: !5300)
!5306 = !DILocation(line: 578, column: 9, scope: !5300)
!5307 = !DILocation(line: 578, column: 2, scope: !5300)
!5308 = !DILocation(line: 578, column: 7, scope: !5300)
!5309 = !DILocation(line: 579, column: 10, scope: !5300)
!5310 = !DILocation(line: 579, column: 9, scope: !5300)
!5311 = !DILocation(line: 579, column: 2, scope: !5300)
!5312 = !DILocation(line: 579, column: 7, scope: !5300)
!5313 = !DILocation(line: 580, column: 10, scope: !5300)
!5314 = !DILocation(line: 580, column: 9, scope: !5300)
!5315 = !DILocation(line: 580, column: 2, scope: !5300)
!5316 = !DILocation(line: 580, column: 7, scope: !5300)
!5317 = !DILocation(line: 581, column: 1, scope: !5300)
!5318 = distinct !DISubprogram(name: "mat4_to_loc_rot_size", scope: !1, file: !1, line: 1435, type: !5319, scopeLine: 1436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5319 = !DISubroutineType(types: !5320)
!5320 = !{null, !1686, !35, !1686, !47}
!5321 = !DILocalVariable(name: "loc", arg: 1, scope: !5318, file: !1, line: 1435, type: !1686)
!5322 = !DILocation(line: 1435, column: 33, scope: !5318)
!5323 = !DILocalVariable(name: "rot", arg: 2, scope: !5318, file: !1, line: 1435, type: !35)
!5324 = !DILocation(line: 1435, column: 47, scope: !5318)
!5325 = !DILocalVariable(name: "size", arg: 3, scope: !5318, file: !1, line: 1435, type: !1686)
!5326 = !DILocation(line: 1435, column: 64, scope: !5318)
!5327 = !DILocalVariable(name: "wmat", arg: 4, scope: !5318, file: !1, line: 1435, type: !47)
!5328 = !DILocation(line: 1435, column: 79, scope: !5318)
!5329 = !DILocalVariable(name: "mat3", scope: !5318, file: !1, line: 1437, type: !699)
!5330 = !DILocation(line: 1437, column: 8, scope: !5318)
!5331 = !DILocation(line: 1439, column: 13, scope: !5318)
!5332 = !DILocation(line: 1439, column: 19, scope: !5318)
!5333 = !DILocation(line: 1439, column: 2, scope: !5318)
!5334 = !DILocation(line: 1440, column: 19, scope: !5318)
!5335 = !DILocation(line: 1440, column: 24, scope: !5318)
!5336 = !DILocation(line: 1440, column: 30, scope: !5318)
!5337 = !DILocation(line: 1440, column: 2, scope: !5318)
!5338 = !DILocation(line: 1443, column: 13, scope: !5318)
!5339 = !DILocation(line: 1443, column: 18, scope: !5318)
!5340 = !DILocation(line: 1443, column: 2, scope: !5318)
!5341 = !DILocation(line: 1444, column: 1, scope: !5318)
!5342 = distinct !DISubprogram(name: "mat4_to_loc_quat", scope: !1, file: !1, line: 1446, type: !5343, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5343 = !DISubroutineType(types: !5344)
!5344 = !{null, !1686, !1686, !47}
!5345 = !DILocalVariable(name: "loc", arg: 1, scope: !5342, file: !1, line: 1446, type: !1686)
!5346 = !DILocation(line: 1446, column: 29, scope: !5342)
!5347 = !DILocalVariable(name: "quat", arg: 2, scope: !5342, file: !1, line: 1446, type: !1686)
!5348 = !DILocation(line: 1446, column: 43, scope: !5342)
!5349 = !DILocalVariable(name: "wmat", arg: 3, scope: !5342, file: !1, line: 1446, type: !47)
!5350 = !DILocation(line: 1446, column: 58, scope: !5342)
!5351 = !DILocalVariable(name: "mat3", scope: !5342, file: !1, line: 1448, type: !699)
!5352 = !DILocation(line: 1448, column: 8, scope: !5342)
!5353 = !DILocalVariable(name: "mat3_n", scope: !5342, file: !1, line: 1449, type: !699)
!5354 = !DILocation(line: 1449, column: 8, scope: !5342)
!5355 = !DILocation(line: 1451, column: 13, scope: !5342)
!5356 = !DILocation(line: 1451, column: 19, scope: !5342)
!5357 = !DILocation(line: 1451, column: 2, scope: !5342)
!5358 = !DILocation(line: 1452, column: 18, scope: !5342)
!5359 = !DILocation(line: 1452, column: 26, scope: !5342)
!5360 = !DILocation(line: 1452, column: 2, scope: !5342)
!5361 = !DILocation(line: 1456, column: 21, scope: !5362)
!5362 = distinct !DILexicalBlock(scope: !5342, file: !1, line: 1456, column: 6)
!5363 = !DILocation(line: 1456, column: 6, scope: !5362)
!5364 = !DILocation(line: 1456, column: 6, scope: !5342)
!5365 = !DILocation(line: 1457, column: 13, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5362, file: !1, line: 1456, column: 28)
!5367 = !DILocation(line: 1457, column: 3, scope: !5366)
!5368 = !DILocation(line: 1458, column: 13, scope: !5366)
!5369 = !DILocation(line: 1458, column: 3, scope: !5366)
!5370 = !DILocation(line: 1459, column: 13, scope: !5366)
!5371 = !DILocation(line: 1459, column: 3, scope: !5366)
!5372 = !DILocation(line: 1460, column: 2, scope: !5366)
!5373 = !DILocation(line: 1462, column: 15, scope: !5342)
!5374 = !DILocation(line: 1462, column: 21, scope: !5342)
!5375 = !DILocation(line: 1462, column: 2, scope: !5342)
!5376 = !DILocation(line: 1463, column: 13, scope: !5342)
!5377 = !DILocation(line: 1463, column: 18, scope: !5342)
!5378 = !DILocation(line: 1463, column: 2, scope: !5342)
!5379 = !DILocation(line: 1464, column: 1, scope: !5342)
!5380 = distinct !DISubprogram(name: "mat4_decompose", scope: !1, file: !1, line: 1466, type: !5381, scopeLine: 1467, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5381 = !DISubroutineType(types: !5382)
!5382 = !{null, !1686, !1686, !1686, !47}
!5383 = !DILocalVariable(name: "loc", arg: 1, scope: !5380, file: !1, line: 1466, type: !1686)
!5384 = !DILocation(line: 1466, column: 27, scope: !5380)
!5385 = !DILocalVariable(name: "quat", arg: 2, scope: !5380, file: !1, line: 1466, type: !1686)
!5386 = !DILocation(line: 1466, column: 41, scope: !5380)
!5387 = !DILocalVariable(name: "size", arg: 3, scope: !5380, file: !1, line: 1466, type: !1686)
!5388 = !DILocation(line: 1466, column: 56, scope: !5380)
!5389 = !DILocalVariable(name: "wmat", arg: 4, scope: !5380, file: !1, line: 1466, type: !47)
!5390 = !DILocation(line: 1466, column: 71, scope: !5380)
!5391 = !DILocalVariable(name: "rot", scope: !5380, file: !1, line: 1468, type: !699)
!5392 = !DILocation(line: 1468, column: 8, scope: !5380)
!5393 = !DILocation(line: 1469, column: 23, scope: !5380)
!5394 = !DILocation(line: 1469, column: 28, scope: !5380)
!5395 = !DILocation(line: 1469, column: 33, scope: !5380)
!5396 = !DILocation(line: 1469, column: 39, scope: !5380)
!5397 = !DILocation(line: 1469, column: 2, scope: !5380)
!5398 = !DILocation(line: 1470, column: 15, scope: !5380)
!5399 = !DILocation(line: 1470, column: 21, scope: !5380)
!5400 = !DILocation(line: 1470, column: 2, scope: !5380)
!5401 = !DILocation(line: 1471, column: 1, scope: !5380)
!5402 = distinct !DISubprogram(name: "scale_m3_fl", scope: !1, file: !1, line: 1473, type: !2522, scopeLine: 1474, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5403 = !DILocalVariable(name: "m", arg: 1, scope: !5402, file: !1, line: 1473, type: !35)
!5404 = !DILocation(line: 1473, column: 24, scope: !5402)
!5405 = !DILocalVariable(name: "scale", arg: 2, scope: !5402, file: !1, line: 1473, type: !4)
!5406 = !DILocation(line: 1473, column: 39, scope: !5402)
!5407 = !DILocation(line: 1475, column: 32, scope: !5402)
!5408 = !DILocation(line: 1475, column: 22, scope: !5402)
!5409 = !DILocation(line: 1475, column: 30, scope: !5402)
!5410 = !DILocation(line: 1475, column: 12, scope: !5402)
!5411 = !DILocation(line: 1475, column: 20, scope: !5402)
!5412 = !DILocation(line: 1475, column: 2, scope: !5402)
!5413 = !DILocation(line: 1475, column: 10, scope: !5402)
!5414 = !DILocation(line: 1476, column: 12, scope: !5402)
!5415 = !DILocation(line: 1476, column: 20, scope: !5402)
!5416 = !DILocation(line: 1476, column: 2, scope: !5402)
!5417 = !DILocation(line: 1476, column: 10, scope: !5402)
!5418 = !DILocation(line: 1477, column: 12, scope: !5402)
!5419 = !DILocation(line: 1477, column: 20, scope: !5402)
!5420 = !DILocation(line: 1477, column: 2, scope: !5402)
!5421 = !DILocation(line: 1477, column: 10, scope: !5402)
!5422 = !DILocation(line: 1478, column: 12, scope: !5402)
!5423 = !DILocation(line: 1478, column: 20, scope: !5402)
!5424 = !DILocation(line: 1478, column: 2, scope: !5402)
!5425 = !DILocation(line: 1478, column: 10, scope: !5402)
!5426 = !DILocation(line: 1479, column: 1, scope: !5402)
!5427 = distinct !DISubprogram(name: "scale_m4_fl", scope: !1, file: !1, line: 1481, type: !2561, scopeLine: 1482, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5428 = !DILocalVariable(name: "m", arg: 1, scope: !5427, file: !1, line: 1481, type: !47)
!5429 = !DILocation(line: 1481, column: 24, scope: !5427)
!5430 = !DILocalVariable(name: "scale", arg: 2, scope: !5427, file: !1, line: 1481, type: !4)
!5431 = !DILocation(line: 1481, column: 39, scope: !5427)
!5432 = !DILocation(line: 1483, column: 32, scope: !5427)
!5433 = !DILocation(line: 1483, column: 22, scope: !5427)
!5434 = !DILocation(line: 1483, column: 30, scope: !5427)
!5435 = !DILocation(line: 1483, column: 12, scope: !5427)
!5436 = !DILocation(line: 1483, column: 20, scope: !5427)
!5437 = !DILocation(line: 1483, column: 2, scope: !5427)
!5438 = !DILocation(line: 1483, column: 10, scope: !5427)
!5439 = !DILocation(line: 1484, column: 2, scope: !5427)
!5440 = !DILocation(line: 1484, column: 10, scope: !5427)
!5441 = !DILocation(line: 1485, column: 22, scope: !5427)
!5442 = !DILocation(line: 1485, column: 30, scope: !5427)
!5443 = !DILocation(line: 1485, column: 12, scope: !5427)
!5444 = !DILocation(line: 1485, column: 20, scope: !5427)
!5445 = !DILocation(line: 1485, column: 2, scope: !5427)
!5446 = !DILocation(line: 1485, column: 10, scope: !5427)
!5447 = !DILocation(line: 1486, column: 22, scope: !5427)
!5448 = !DILocation(line: 1486, column: 30, scope: !5427)
!5449 = !DILocation(line: 1486, column: 12, scope: !5427)
!5450 = !DILocation(line: 1486, column: 20, scope: !5427)
!5451 = !DILocation(line: 1486, column: 2, scope: !5427)
!5452 = !DILocation(line: 1486, column: 10, scope: !5427)
!5453 = !DILocation(line: 1487, column: 22, scope: !5427)
!5454 = !DILocation(line: 1487, column: 30, scope: !5427)
!5455 = !DILocation(line: 1487, column: 12, scope: !5427)
!5456 = !DILocation(line: 1487, column: 20, scope: !5427)
!5457 = !DILocation(line: 1487, column: 2, scope: !5427)
!5458 = !DILocation(line: 1487, column: 10, scope: !5427)
!5459 = !DILocation(line: 1488, column: 22, scope: !5427)
!5460 = !DILocation(line: 1488, column: 30, scope: !5427)
!5461 = !DILocation(line: 1488, column: 12, scope: !5427)
!5462 = !DILocation(line: 1488, column: 20, scope: !5427)
!5463 = !DILocation(line: 1488, column: 2, scope: !5427)
!5464 = !DILocation(line: 1488, column: 10, scope: !5427)
!5465 = !DILocation(line: 1489, column: 1, scope: !5427)
!5466 = distinct !DISubprogram(name: "translate_m4", scope: !1, file: !1, line: 1491, type: !5467, scopeLine: 1492, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5467 = !DISubroutineType(types: !5468)
!5468 = !{null, !47, !4, !4, !4}
!5469 = !DILocalVariable(name: "mat", arg: 1, scope: !5466, file: !1, line: 1491, type: !47)
!5470 = !DILocation(line: 1491, column: 25, scope: !5466)
!5471 = !DILocalVariable(name: "Tx", arg: 2, scope: !5466, file: !1, line: 1491, type: !4)
!5472 = !DILocation(line: 1491, column: 42, scope: !5466)
!5473 = !DILocalVariable(name: "Ty", arg: 3, scope: !5466, file: !1, line: 1491, type: !4)
!5474 = !DILocation(line: 1491, column: 52, scope: !5466)
!5475 = !DILocalVariable(name: "Tz", arg: 4, scope: !5466, file: !1, line: 1491, type: !4)
!5476 = !DILocation(line: 1491, column: 62, scope: !5466)
!5477 = !DILocation(line: 1493, column: 16, scope: !5466)
!5478 = !DILocation(line: 1493, column: 21, scope: !5466)
!5479 = !DILocation(line: 1493, column: 19, scope: !5466)
!5480 = !DILocation(line: 1493, column: 33, scope: !5466)
!5481 = !DILocation(line: 1493, column: 38, scope: !5466)
!5482 = !DILocation(line: 1493, column: 36, scope: !5466)
!5483 = !DILocation(line: 1493, column: 31, scope: !5466)
!5484 = !DILocation(line: 1493, column: 50, scope: !5466)
!5485 = !DILocation(line: 1493, column: 55, scope: !5466)
!5486 = !DILocation(line: 1493, column: 53, scope: !5466)
!5487 = !DILocation(line: 1493, column: 48, scope: !5466)
!5488 = !DILocation(line: 1493, column: 2, scope: !5466)
!5489 = !DILocation(line: 1493, column: 12, scope: !5466)
!5490 = !DILocation(line: 1494, column: 16, scope: !5466)
!5491 = !DILocation(line: 1494, column: 21, scope: !5466)
!5492 = !DILocation(line: 1494, column: 19, scope: !5466)
!5493 = !DILocation(line: 1494, column: 33, scope: !5466)
!5494 = !DILocation(line: 1494, column: 38, scope: !5466)
!5495 = !DILocation(line: 1494, column: 36, scope: !5466)
!5496 = !DILocation(line: 1494, column: 31, scope: !5466)
!5497 = !DILocation(line: 1494, column: 50, scope: !5466)
!5498 = !DILocation(line: 1494, column: 55, scope: !5466)
!5499 = !DILocation(line: 1494, column: 53, scope: !5466)
!5500 = !DILocation(line: 1494, column: 48, scope: !5466)
!5501 = !DILocation(line: 1494, column: 2, scope: !5466)
!5502 = !DILocation(line: 1494, column: 12, scope: !5466)
!5503 = !DILocation(line: 1495, column: 16, scope: !5466)
!5504 = !DILocation(line: 1495, column: 21, scope: !5466)
!5505 = !DILocation(line: 1495, column: 19, scope: !5466)
!5506 = !DILocation(line: 1495, column: 33, scope: !5466)
!5507 = !DILocation(line: 1495, column: 38, scope: !5466)
!5508 = !DILocation(line: 1495, column: 36, scope: !5466)
!5509 = !DILocation(line: 1495, column: 31, scope: !5466)
!5510 = !DILocation(line: 1495, column: 50, scope: !5466)
!5511 = !DILocation(line: 1495, column: 55, scope: !5466)
!5512 = !DILocation(line: 1495, column: 53, scope: !5466)
!5513 = !DILocation(line: 1495, column: 48, scope: !5466)
!5514 = !DILocation(line: 1495, column: 2, scope: !5466)
!5515 = !DILocation(line: 1495, column: 12, scope: !5466)
!5516 = !DILocation(line: 1496, column: 1, scope: !5466)
!5517 = distinct !DISubprogram(name: "rotate_m4", scope: !1, file: !1, line: 1498, type: !5518, scopeLine: 1499, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5518 = !DISubroutineType(types: !5519)
!5519 = !{null, !47, !5520, !1722}
!5520 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5521)
!5521 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!5522 = !DILocalVariable(name: "mat", arg: 1, scope: !5517, file: !1, line: 1498, type: !47)
!5523 = !DILocation(line: 1498, column: 22, scope: !5517)
!5524 = !DILocalVariable(name: "axis", arg: 2, scope: !5517, file: !1, line: 1498, type: !5520)
!5525 = !DILocation(line: 1498, column: 44, scope: !5517)
!5526 = !DILocalVariable(name: "angle", arg: 3, scope: !5517, file: !1, line: 1498, type: !1722)
!5527 = !DILocation(line: 1498, column: 62, scope: !5517)
!5528 = !DILocalVariable(name: "col", scope: !5517, file: !1, line: 1500, type: !296)
!5529 = !DILocation(line: 1500, column: 6, scope: !5517)
!5530 = !DILocalVariable(name: "temp", scope: !5517, file: !1, line: 1501, type: !48)
!5531 = !DILocation(line: 1501, column: 8, scope: !5517)
!5532 = !DILocalVariable(name: "cosine", scope: !5517, file: !1, line: 1502, type: !4)
!5533 = !DILocation(line: 1502, column: 8, scope: !5517)
!5534 = !DILocalVariable(name: "sine", scope: !5517, file: !1, line: 1502, type: !4)
!5535 = !DILocation(line: 1502, column: 16, scope: !5517)
!5536 = !DILocation(line: 1506, column: 16, scope: !5517)
!5537 = !DILocation(line: 1506, column: 11, scope: !5517)
!5538 = !DILocation(line: 1506, column: 9, scope: !5517)
!5539 = !DILocation(line: 1507, column: 16, scope: !5517)
!5540 = !DILocation(line: 1507, column: 11, scope: !5517)
!5541 = !DILocation(line: 1507, column: 9, scope: !5517)
!5542 = !DILocation(line: 1508, column: 10, scope: !5517)
!5543 = !DILocation(line: 1508, column: 2, scope: !5517)
!5544 = !DILocation(line: 1510, column: 13, scope: !5545)
!5545 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 1510, column: 4)
!5546 = distinct !DILexicalBlock(scope: !5517, file: !1, line: 1508, column: 16)
!5547 = !DILocation(line: 1510, column: 9, scope: !5545)
!5548 = !DILocation(line: 1510, column: 18, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5545, file: !1, line: 1510, column: 4)
!5550 = !DILocation(line: 1510, column: 22, scope: !5549)
!5551 = !DILocation(line: 1510, column: 4, scope: !5545)
!5552 = !DILocation(line: 1511, column: 17, scope: !5549)
!5553 = !DILocation(line: 1511, column: 26, scope: !5549)
!5554 = !DILocation(line: 1511, column: 33, scope: !5549)
!5555 = !DILocation(line: 1511, column: 24, scope: !5549)
!5556 = !DILocation(line: 1511, column: 40, scope: !5549)
!5557 = !DILocation(line: 1511, column: 47, scope: !5549)
!5558 = !DILocation(line: 1511, column: 54, scope: !5549)
!5559 = !DILocation(line: 1511, column: 45, scope: !5549)
!5560 = !DILocation(line: 1511, column: 38, scope: !5549)
!5561 = !DILocation(line: 1511, column: 10, scope: !5549)
!5562 = !DILocation(line: 1511, column: 5, scope: !5549)
!5563 = !DILocation(line: 1511, column: 15, scope: !5549)
!5564 = !DILocation(line: 1510, column: 30, scope: !5549)
!5565 = !DILocation(line: 1510, column: 4, scope: !5549)
!5566 = distinct !{!5566, !5551, !5567}
!5567 = !DILocation(line: 1511, column: 57, scope: !5545)
!5568 = !DILocation(line: 1512, column: 13, scope: !5569)
!5569 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 1512, column: 4)
!5570 = !DILocation(line: 1512, column: 9, scope: !5569)
!5571 = !DILocation(line: 1512, column: 18, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5569, file: !1, line: 1512, column: 4)
!5573 = !DILocation(line: 1512, column: 22, scope: !5572)
!5574 = !DILocation(line: 1512, column: 4, scope: !5569)
!5575 = !DILocation(line: 1513, column: 20, scope: !5576)
!5576 = distinct !DILexicalBlock(scope: !5572, file: !1, line: 1512, column: 34)
!5577 = !DILocation(line: 1513, column: 19, scope: !5576)
!5578 = !DILocation(line: 1513, column: 27, scope: !5576)
!5579 = !DILocation(line: 1513, column: 34, scope: !5576)
!5580 = !DILocation(line: 1513, column: 25, scope: !5576)
!5581 = !DILocation(line: 1513, column: 41, scope: !5576)
!5582 = !DILocation(line: 1513, column: 50, scope: !5576)
!5583 = !DILocation(line: 1513, column: 57, scope: !5576)
!5584 = !DILocation(line: 1513, column: 48, scope: !5576)
!5585 = !DILocation(line: 1513, column: 39, scope: !5576)
!5586 = !DILocation(line: 1513, column: 5, scope: !5576)
!5587 = !DILocation(line: 1513, column: 12, scope: !5576)
!5588 = !DILocation(line: 1513, column: 17, scope: !5576)
!5589 = !DILocation(line: 1514, column: 24, scope: !5576)
!5590 = !DILocation(line: 1514, column: 19, scope: !5576)
!5591 = !DILocation(line: 1514, column: 5, scope: !5576)
!5592 = !DILocation(line: 1514, column: 12, scope: !5576)
!5593 = !DILocation(line: 1514, column: 17, scope: !5576)
!5594 = !DILocation(line: 1515, column: 4, scope: !5576)
!5595 = !DILocation(line: 1512, column: 30, scope: !5572)
!5596 = !DILocation(line: 1512, column: 4, scope: !5572)
!5597 = distinct !{!5597, !5574, !5598}
!5598 = !DILocation(line: 1515, column: 4, scope: !5569)
!5599 = !DILocation(line: 1516, column: 4, scope: !5546)
!5600 = !DILocation(line: 1519, column: 13, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 1519, column: 4)
!5602 = !DILocation(line: 1519, column: 9, scope: !5601)
!5603 = !DILocation(line: 1519, column: 18, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5601, file: !1, line: 1519, column: 4)
!5605 = !DILocation(line: 1519, column: 22, scope: !5604)
!5606 = !DILocation(line: 1519, column: 4, scope: !5601)
!5607 = !DILocation(line: 1520, column: 17, scope: !5604)
!5608 = !DILocation(line: 1520, column: 26, scope: !5604)
!5609 = !DILocation(line: 1520, column: 33, scope: !5604)
!5610 = !DILocation(line: 1520, column: 24, scope: !5604)
!5611 = !DILocation(line: 1520, column: 40, scope: !5604)
!5612 = !DILocation(line: 1520, column: 47, scope: !5604)
!5613 = !DILocation(line: 1520, column: 54, scope: !5604)
!5614 = !DILocation(line: 1520, column: 45, scope: !5604)
!5615 = !DILocation(line: 1520, column: 38, scope: !5604)
!5616 = !DILocation(line: 1520, column: 10, scope: !5604)
!5617 = !DILocation(line: 1520, column: 5, scope: !5604)
!5618 = !DILocation(line: 1520, column: 15, scope: !5604)
!5619 = !DILocation(line: 1519, column: 30, scope: !5604)
!5620 = !DILocation(line: 1519, column: 4, scope: !5604)
!5621 = distinct !{!5621, !5606, !5622}
!5622 = !DILocation(line: 1520, column: 57, scope: !5601)
!5623 = !DILocation(line: 1521, column: 13, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 1521, column: 4)
!5625 = !DILocation(line: 1521, column: 9, scope: !5624)
!5626 = !DILocation(line: 1521, column: 18, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5624, file: !1, line: 1521, column: 4)
!5628 = !DILocation(line: 1521, column: 22, scope: !5627)
!5629 = !DILocation(line: 1521, column: 4, scope: !5624)
!5630 = !DILocation(line: 1522, column: 19, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5627, file: !1, line: 1521, column: 34)
!5632 = !DILocation(line: 1522, column: 26, scope: !5631)
!5633 = !DILocation(line: 1522, column: 33, scope: !5631)
!5634 = !DILocation(line: 1522, column: 24, scope: !5631)
!5635 = !DILocation(line: 1522, column: 40, scope: !5631)
!5636 = !DILocation(line: 1522, column: 49, scope: !5631)
!5637 = !DILocation(line: 1522, column: 56, scope: !5631)
!5638 = !DILocation(line: 1522, column: 47, scope: !5631)
!5639 = !DILocation(line: 1522, column: 38, scope: !5631)
!5640 = !DILocation(line: 1522, column: 5, scope: !5631)
!5641 = !DILocation(line: 1522, column: 12, scope: !5631)
!5642 = !DILocation(line: 1522, column: 17, scope: !5631)
!5643 = !DILocation(line: 1523, column: 24, scope: !5631)
!5644 = !DILocation(line: 1523, column: 19, scope: !5631)
!5645 = !DILocation(line: 1523, column: 5, scope: !5631)
!5646 = !DILocation(line: 1523, column: 12, scope: !5631)
!5647 = !DILocation(line: 1523, column: 17, scope: !5631)
!5648 = !DILocation(line: 1524, column: 4, scope: !5631)
!5649 = !DILocation(line: 1521, column: 30, scope: !5627)
!5650 = !DILocation(line: 1521, column: 4, scope: !5627)
!5651 = distinct !{!5651, !5629, !5652}
!5652 = !DILocation(line: 1524, column: 4, scope: !5624)
!5653 = !DILocation(line: 1525, column: 4, scope: !5546)
!5654 = !DILocation(line: 1528, column: 13, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 1528, column: 4)
!5656 = !DILocation(line: 1528, column: 9, scope: !5655)
!5657 = !DILocation(line: 1528, column: 18, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5655, file: !1, line: 1528, column: 4)
!5659 = !DILocation(line: 1528, column: 22, scope: !5658)
!5660 = !DILocation(line: 1528, column: 4, scope: !5655)
!5661 = !DILocation(line: 1529, column: 17, scope: !5658)
!5662 = !DILocation(line: 1529, column: 26, scope: !5658)
!5663 = !DILocation(line: 1529, column: 33, scope: !5658)
!5664 = !DILocation(line: 1529, column: 24, scope: !5658)
!5665 = !DILocation(line: 1529, column: 40, scope: !5658)
!5666 = !DILocation(line: 1529, column: 47, scope: !5658)
!5667 = !DILocation(line: 1529, column: 54, scope: !5658)
!5668 = !DILocation(line: 1529, column: 45, scope: !5658)
!5669 = !DILocation(line: 1529, column: 38, scope: !5658)
!5670 = !DILocation(line: 1529, column: 10, scope: !5658)
!5671 = !DILocation(line: 1529, column: 5, scope: !5658)
!5672 = !DILocation(line: 1529, column: 15, scope: !5658)
!5673 = !DILocation(line: 1528, column: 30, scope: !5658)
!5674 = !DILocation(line: 1528, column: 4, scope: !5658)
!5675 = distinct !{!5675, !5660, !5676}
!5676 = !DILocation(line: 1529, column: 57, scope: !5655)
!5677 = !DILocation(line: 1530, column: 13, scope: !5678)
!5678 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 1530, column: 4)
!5679 = !DILocation(line: 1530, column: 9, scope: !5678)
!5680 = !DILocation(line: 1530, column: 18, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5678, file: !1, line: 1530, column: 4)
!5682 = !DILocation(line: 1530, column: 22, scope: !5681)
!5683 = !DILocation(line: 1530, column: 4, scope: !5678)
!5684 = !DILocation(line: 1531, column: 20, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5681, file: !1, line: 1530, column: 34)
!5686 = !DILocation(line: 1531, column: 19, scope: !5685)
!5687 = !DILocation(line: 1531, column: 27, scope: !5685)
!5688 = !DILocation(line: 1531, column: 34, scope: !5685)
!5689 = !DILocation(line: 1531, column: 25, scope: !5685)
!5690 = !DILocation(line: 1531, column: 41, scope: !5685)
!5691 = !DILocation(line: 1531, column: 50, scope: !5685)
!5692 = !DILocation(line: 1531, column: 57, scope: !5685)
!5693 = !DILocation(line: 1531, column: 48, scope: !5685)
!5694 = !DILocation(line: 1531, column: 39, scope: !5685)
!5695 = !DILocation(line: 1531, column: 5, scope: !5685)
!5696 = !DILocation(line: 1531, column: 12, scope: !5685)
!5697 = !DILocation(line: 1531, column: 17, scope: !5685)
!5698 = !DILocation(line: 1532, column: 24, scope: !5685)
!5699 = !DILocation(line: 1532, column: 19, scope: !5685)
!5700 = !DILocation(line: 1532, column: 5, scope: !5685)
!5701 = !DILocation(line: 1532, column: 12, scope: !5685)
!5702 = !DILocation(line: 1532, column: 17, scope: !5685)
!5703 = !DILocation(line: 1533, column: 4, scope: !5685)
!5704 = !DILocation(line: 1530, column: 30, scope: !5681)
!5705 = !DILocation(line: 1530, column: 4, scope: !5681)
!5706 = distinct !{!5706, !5683, !5707}
!5707 = !DILocation(line: 1533, column: 4, scope: !5678)
!5708 = !DILocation(line: 1534, column: 4, scope: !5546)
!5709 = !DILocation(line: 1536, column: 1, scope: !5517)
!5710 = distinct !DISubprogram(name: "rotate_m2", scope: !1, file: !1, line: 1538, type: !5711, scopeLine: 1539, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5711 = !DISubroutineType(types: !5712)
!5712 = !{null, !23, !1722}
!5713 = !DILocalVariable(name: "mat", arg: 1, scope: !5710, file: !1, line: 1538, type: !23)
!5714 = !DILocation(line: 1538, column: 22, scope: !5710)
!5715 = !DILocalVariable(name: "angle", arg: 2, scope: !5710, file: !1, line: 1538, type: !1722)
!5716 = !DILocation(line: 1538, column: 45, scope: !5710)
!5717 = !DILocation(line: 1540, column: 31, scope: !5710)
!5718 = !DILocation(line: 1540, column: 26, scope: !5710)
!5719 = !DILocation(line: 1540, column: 14, scope: !5710)
!5720 = !DILocation(line: 1540, column: 24, scope: !5710)
!5721 = !DILocation(line: 1540, column: 2, scope: !5710)
!5722 = !DILocation(line: 1540, column: 12, scope: !5710)
!5723 = !DILocation(line: 1541, column: 19, scope: !5710)
!5724 = !DILocation(line: 1541, column: 14, scope: !5710)
!5725 = !DILocation(line: 1541, column: 2, scope: !5710)
!5726 = !DILocation(line: 1541, column: 12, scope: !5710)
!5727 = !DILocation(line: 1542, column: 15, scope: !5710)
!5728 = !DILocation(line: 1542, column: 14, scope: !5710)
!5729 = !DILocation(line: 1542, column: 2, scope: !5710)
!5730 = !DILocation(line: 1542, column: 12, scope: !5710)
!5731 = !DILocation(line: 1543, column: 1, scope: !5710)
!5732 = distinct !DISubprogram(name: "transform_pivot_set_m4", scope: !1, file: !1, line: 1553, type: !5146, scopeLine: 1554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5733 = !DILocalVariable(name: "mat", arg: 1, scope: !5732, file: !1, line: 1553, type: !47)
!5734 = !DILocation(line: 1553, column: 35, scope: !5732)
!5735 = !DILocalVariable(name: "pivot", arg: 2, scope: !5732, file: !1, line: 1553, type: !1721)
!5736 = !DILocation(line: 1553, column: 58, scope: !5732)
!5737 = !DILocalVariable(name: "tmat", scope: !5732, file: !1, line: 1555, type: !12)
!5738 = !DILocation(line: 1555, column: 8, scope: !5732)
!5739 = !DILocation(line: 1557, column: 10, scope: !5732)
!5740 = !DILocation(line: 1557, column: 2, scope: !5732)
!5741 = !DILocation(line: 1559, column: 13, scope: !5732)
!5742 = !DILocation(line: 1559, column: 22, scope: !5732)
!5743 = !DILocation(line: 1559, column: 2, scope: !5732)
!5744 = !DILocation(line: 1560, column: 14, scope: !5732)
!5745 = !DILocation(line: 1560, column: 19, scope: !5732)
!5746 = !DILocation(line: 1560, column: 25, scope: !5732)
!5747 = !DILocation(line: 1560, column: 2, scope: !5732)
!5748 = !DILocation(line: 1563, column: 12, scope: !5732)
!5749 = !DILocation(line: 1563, column: 2, scope: !5732)
!5750 = !DILocation(line: 1564, column: 14, scope: !5732)
!5751 = !DILocation(line: 1564, column: 19, scope: !5732)
!5752 = !DILocation(line: 1564, column: 24, scope: !5732)
!5753 = !DILocation(line: 1564, column: 2, scope: !5732)
!5754 = !DILocation(line: 1565, column: 1, scope: !5732)
!5755 = distinct !DISubprogram(name: "blend_m3_m3m3", scope: !1, file: !1, line: 1567, type: !5756, scopeLine: 1568, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5756 = !DISubroutineType(types: !5757)
!5757 = !{null, !35, !35, !35, !1722}
!5758 = !DILocalVariable(name: "out", arg: 1, scope: !5755, file: !1, line: 1567, type: !35)
!5759 = !DILocation(line: 1567, column: 26, scope: !5755)
!5760 = !DILocalVariable(name: "dst", arg: 2, scope: !5755, file: !1, line: 1567, type: !35)
!5761 = !DILocation(line: 1567, column: 43, scope: !5755)
!5762 = !DILocalVariable(name: "src", arg: 3, scope: !5755, file: !1, line: 1567, type: !35)
!5763 = !DILocation(line: 1567, column: 60, scope: !5755)
!5764 = !DILocalVariable(name: "srcweight", arg: 4, scope: !5755, file: !1, line: 1567, type: !1722)
!5765 = !DILocation(line: 1567, column: 83, scope: !5755)
!5766 = !DILocalVariable(name: "srot", scope: !5755, file: !1, line: 1569, type: !699)
!5767 = !DILocation(line: 1569, column: 8, scope: !5755)
!5768 = !DILocalVariable(name: "drot", scope: !5755, file: !1, line: 1569, type: !699)
!5769 = !DILocation(line: 1569, column: 20, scope: !5755)
!5770 = !DILocalVariable(name: "squat", scope: !5755, file: !1, line: 1570, type: !48)
!5771 = !DILocation(line: 1570, column: 8, scope: !5755)
!5772 = !DILocalVariable(name: "dquat", scope: !5755, file: !1, line: 1570, type: !48)
!5773 = !DILocation(line: 1570, column: 18, scope: !5755)
!5774 = !DILocalVariable(name: "fquat", scope: !5755, file: !1, line: 1570, type: !48)
!5775 = !DILocation(line: 1570, column: 28, scope: !5755)
!5776 = !DILocalVariable(name: "sscale", scope: !5755, file: !1, line: 1571, type: !36)
!5777 = !DILocation(line: 1571, column: 8, scope: !5755)
!5778 = !DILocalVariable(name: "dscale", scope: !5755, file: !1, line: 1571, type: !36)
!5779 = !DILocation(line: 1571, column: 19, scope: !5755)
!5780 = !DILocalVariable(name: "fsize", scope: !5755, file: !1, line: 1571, type: !36)
!5781 = !DILocation(line: 1571, column: 30, scope: !5755)
!5782 = !DILocalVariable(name: "rmat", scope: !5755, file: !1, line: 1572, type: !699)
!5783 = !DILocation(line: 1572, column: 8, scope: !5755)
!5784 = !DILocalVariable(name: "smat", scope: !5755, file: !1, line: 1572, type: !699)
!5785 = !DILocation(line: 1572, column: 20, scope: !5755)
!5786 = !DILocation(line: 1574, column: 19, scope: !5755)
!5787 = !DILocation(line: 1574, column: 25, scope: !5755)
!5788 = !DILocation(line: 1574, column: 33, scope: !5755)
!5789 = !DILocation(line: 1574, column: 2, scope: !5755)
!5790 = !DILocation(line: 1575, column: 19, scope: !5755)
!5791 = !DILocation(line: 1575, column: 25, scope: !5755)
!5792 = !DILocation(line: 1575, column: 33, scope: !5755)
!5793 = !DILocation(line: 1575, column: 2, scope: !5755)
!5794 = !DILocation(line: 1577, column: 15, scope: !5755)
!5795 = !DILocation(line: 1577, column: 22, scope: !5755)
!5796 = !DILocation(line: 1577, column: 2, scope: !5755)
!5797 = !DILocation(line: 1578, column: 15, scope: !5755)
!5798 = !DILocation(line: 1578, column: 22, scope: !5755)
!5799 = !DILocation(line: 1578, column: 2, scope: !5755)
!5800 = !DILocation(line: 1581, column: 17, scope: !5755)
!5801 = !DILocation(line: 1581, column: 24, scope: !5755)
!5802 = !DILocation(line: 1581, column: 31, scope: !5755)
!5803 = !DILocation(line: 1581, column: 38, scope: !5755)
!5804 = !DILocation(line: 1581, column: 2, scope: !5755)
!5805 = !DILocation(line: 1582, column: 17, scope: !5755)
!5806 = !DILocation(line: 1582, column: 24, scope: !5755)
!5807 = !DILocation(line: 1582, column: 32, scope: !5755)
!5808 = !DILocation(line: 1582, column: 40, scope: !5755)
!5809 = !DILocation(line: 1582, column: 2, scope: !5755)
!5810 = !DILocation(line: 1585, column: 15, scope: !5755)
!5811 = !DILocation(line: 1585, column: 21, scope: !5755)
!5812 = !DILocation(line: 1585, column: 2, scope: !5755)
!5813 = !DILocation(line: 1586, column: 15, scope: !5755)
!5814 = !DILocation(line: 1586, column: 21, scope: !5755)
!5815 = !DILocation(line: 1586, column: 2, scope: !5755)
!5816 = !DILocation(line: 1587, column: 14, scope: !5755)
!5817 = !DILocation(line: 1587, column: 19, scope: !5755)
!5818 = !DILocation(line: 1587, column: 25, scope: !5755)
!5819 = !DILocation(line: 1587, column: 2, scope: !5755)
!5820 = !DILocation(line: 1588, column: 1, scope: !5755)
!5821 = distinct !DISubprogram(name: "blend_m4_m4m4", scope: !1, file: !1, line: 1590, type: !5822, scopeLine: 1591, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5822 = !DISubroutineType(types: !5823)
!5823 = !{null, !47, !47, !47, !1722}
!5824 = !DILocalVariable(name: "out", arg: 1, scope: !5821, file: !1, line: 1590, type: !47)
!5825 = !DILocation(line: 1590, column: 26, scope: !5821)
!5826 = !DILocalVariable(name: "dst", arg: 2, scope: !5821, file: !1, line: 1590, type: !47)
!5827 = !DILocation(line: 1590, column: 43, scope: !5821)
!5828 = !DILocalVariable(name: "src", arg: 3, scope: !5821, file: !1, line: 1590, type: !47)
!5829 = !DILocation(line: 1590, column: 60, scope: !5821)
!5830 = !DILocalVariable(name: "srcweight", arg: 4, scope: !5821, file: !1, line: 1590, type: !1722)
!5831 = !DILocation(line: 1590, column: 83, scope: !5821)
!5832 = !DILocalVariable(name: "sloc", scope: !5821, file: !1, line: 1592, type: !36)
!5833 = !DILocation(line: 1592, column: 8, scope: !5821)
!5834 = !DILocalVariable(name: "dloc", scope: !5821, file: !1, line: 1592, type: !36)
!5835 = !DILocation(line: 1592, column: 17, scope: !5821)
!5836 = !DILocalVariable(name: "floc", scope: !5821, file: !1, line: 1592, type: !36)
!5837 = !DILocation(line: 1592, column: 26, scope: !5821)
!5838 = !DILocalVariable(name: "srot", scope: !5821, file: !1, line: 1593, type: !699)
!5839 = !DILocation(line: 1593, column: 8, scope: !5821)
!5840 = !DILocalVariable(name: "drot", scope: !5821, file: !1, line: 1593, type: !699)
!5841 = !DILocation(line: 1593, column: 20, scope: !5821)
!5842 = !DILocalVariable(name: "squat", scope: !5821, file: !1, line: 1594, type: !48)
!5843 = !DILocation(line: 1594, column: 8, scope: !5821)
!5844 = !DILocalVariable(name: "dquat", scope: !5821, file: !1, line: 1594, type: !48)
!5845 = !DILocation(line: 1594, column: 18, scope: !5821)
!5846 = !DILocalVariable(name: "fquat", scope: !5821, file: !1, line: 1594, type: !48)
!5847 = !DILocation(line: 1594, column: 28, scope: !5821)
!5848 = !DILocalVariable(name: "sscale", scope: !5821, file: !1, line: 1595, type: !36)
!5849 = !DILocation(line: 1595, column: 8, scope: !5821)
!5850 = !DILocalVariable(name: "dscale", scope: !5821, file: !1, line: 1595, type: !36)
!5851 = !DILocation(line: 1595, column: 19, scope: !5821)
!5852 = !DILocalVariable(name: "fsize", scope: !5821, file: !1, line: 1595, type: !36)
!5853 = !DILocation(line: 1595, column: 30, scope: !5821)
!5854 = !DILocation(line: 1597, column: 23, scope: !5821)
!5855 = !DILocation(line: 1597, column: 29, scope: !5821)
!5856 = !DILocation(line: 1597, column: 35, scope: !5821)
!5857 = !DILocation(line: 1597, column: 43, scope: !5821)
!5858 = !DILocation(line: 1597, column: 2, scope: !5821)
!5859 = !DILocation(line: 1598, column: 23, scope: !5821)
!5860 = !DILocation(line: 1598, column: 29, scope: !5821)
!5861 = !DILocation(line: 1598, column: 35, scope: !5821)
!5862 = !DILocation(line: 1598, column: 43, scope: !5821)
!5863 = !DILocation(line: 1598, column: 2, scope: !5821)
!5864 = !DILocation(line: 1600, column: 15, scope: !5821)
!5865 = !DILocation(line: 1600, column: 22, scope: !5821)
!5866 = !DILocation(line: 1600, column: 2, scope: !5821)
!5867 = !DILocation(line: 1601, column: 15, scope: !5821)
!5868 = !DILocation(line: 1601, column: 22, scope: !5821)
!5869 = !DILocation(line: 1601, column: 2, scope: !5821)
!5870 = !DILocation(line: 1604, column: 17, scope: !5821)
!5871 = !DILocation(line: 1604, column: 23, scope: !5821)
!5872 = !DILocation(line: 1604, column: 29, scope: !5821)
!5873 = !DILocation(line: 1604, column: 35, scope: !5821)
!5874 = !DILocation(line: 1604, column: 2, scope: !5821)
!5875 = !DILocation(line: 1605, column: 17, scope: !5821)
!5876 = !DILocation(line: 1605, column: 24, scope: !5821)
!5877 = !DILocation(line: 1605, column: 31, scope: !5821)
!5878 = !DILocation(line: 1605, column: 38, scope: !5821)
!5879 = !DILocation(line: 1605, column: 2, scope: !5821)
!5880 = !DILocation(line: 1606, column: 17, scope: !5821)
!5881 = !DILocation(line: 1606, column: 24, scope: !5821)
!5882 = !DILocation(line: 1606, column: 32, scope: !5821)
!5883 = !DILocation(line: 1606, column: 40, scope: !5821)
!5884 = !DILocation(line: 1606, column: 2, scope: !5821)
!5885 = !DILocation(line: 1609, column: 24, scope: !5821)
!5886 = !DILocation(line: 1609, column: 29, scope: !5821)
!5887 = !DILocation(line: 1609, column: 35, scope: !5821)
!5888 = !DILocation(line: 1609, column: 42, scope: !5821)
!5889 = !DILocation(line: 1609, column: 2, scope: !5821)
!5890 = !DILocation(line: 1610, column: 1, scope: !5821)
!5891 = distinct !DISubprogram(name: "loc_quat_size_to_mat4", scope: !1, file: !1, line: 1693, type: !5892, scopeLine: 1694, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5892 = !DISubroutineType(types: !5893)
!5893 = !{null, !47, !1721, !1721, !1721}
!5894 = !DILocalVariable(name: "mat", arg: 1, scope: !5891, file: !1, line: 1693, type: !47)
!5895 = !DILocation(line: 1693, column: 34, scope: !5891)
!5896 = !DILocalVariable(name: "loc", arg: 2, scope: !5891, file: !1, line: 1693, type: !1721)
!5897 = !DILocation(line: 1693, column: 57, scope: !5891)
!5898 = !DILocalVariable(name: "quat", arg: 3, scope: !5891, file: !1, line: 1693, type: !1721)
!5899 = !DILocation(line: 1693, column: 77, scope: !5891)
!5900 = !DILocalVariable(name: "size", arg: 4, scope: !5891, file: !1, line: 1693, type: !1721)
!5901 = !DILocation(line: 1693, column: 98, scope: !5891)
!5902 = !DILocalVariable(name: "rmat", scope: !5891, file: !1, line: 1695, type: !699)
!5903 = !DILocation(line: 1695, column: 8, scope: !5891)
!5904 = !DILocalVariable(name: "smat", scope: !5891, file: !1, line: 1695, type: !699)
!5905 = !DILocation(line: 1695, column: 20, scope: !5891)
!5906 = !DILocalVariable(name: "tmat", scope: !5891, file: !1, line: 1695, type: !699)
!5907 = !DILocation(line: 1695, column: 32, scope: !5891)
!5908 = !DILocation(line: 1698, column: 10, scope: !5891)
!5909 = !DILocation(line: 1698, column: 2, scope: !5891)
!5910 = !DILocation(line: 1701, column: 15, scope: !5891)
!5911 = !DILocation(line: 1701, column: 21, scope: !5891)
!5912 = !DILocation(line: 1701, column: 2, scope: !5891)
!5913 = !DILocation(line: 1702, column: 15, scope: !5891)
!5914 = !DILocation(line: 1702, column: 21, scope: !5891)
!5915 = !DILocation(line: 1702, column: 2, scope: !5891)
!5916 = !DILocation(line: 1703, column: 14, scope: !5891)
!5917 = !DILocation(line: 1703, column: 20, scope: !5891)
!5918 = !DILocation(line: 1703, column: 26, scope: !5891)
!5919 = !DILocation(line: 1703, column: 2, scope: !5891)
!5920 = !DILocation(line: 1706, column: 13, scope: !5891)
!5921 = !DILocation(line: 1706, column: 18, scope: !5891)
!5922 = !DILocation(line: 1706, column: 2, scope: !5891)
!5923 = !DILocation(line: 1709, column: 14, scope: !5891)
!5924 = !DILocation(line: 1709, column: 2, scope: !5891)
!5925 = !DILocation(line: 1709, column: 12, scope: !5891)
!5926 = !DILocation(line: 1710, column: 14, scope: !5891)
!5927 = !DILocation(line: 1710, column: 2, scope: !5891)
!5928 = !DILocation(line: 1710, column: 12, scope: !5891)
!5929 = !DILocation(line: 1711, column: 14, scope: !5891)
!5930 = !DILocation(line: 1711, column: 2, scope: !5891)
!5931 = !DILocation(line: 1711, column: 12, scope: !5891)
!5932 = !DILocation(line: 1712, column: 1, scope: !5891)
!5933 = distinct !DISubprogram(name: "is_negative_m4", scope: !1, file: !1, line: 1619, type: !3248, scopeLine: 1620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5934 = !DILocalVariable(name: "mat", arg: 1, scope: !5933, file: !1, line: 1619, type: !47)
!5935 = !DILocation(line: 1619, column: 27, scope: !5933)
!5936 = !DILocalVariable(name: "vec", scope: !5933, file: !1, line: 1621, type: !36)
!5937 = !DILocation(line: 1621, column: 8, scope: !5933)
!5938 = !DILocation(line: 1622, column: 16, scope: !5933)
!5939 = !DILocation(line: 1622, column: 21, scope: !5933)
!5940 = !DILocation(line: 1622, column: 29, scope: !5933)
!5941 = !DILocation(line: 1622, column: 2, scope: !5933)
!5942 = !DILocation(line: 1623, column: 19, scope: !5933)
!5943 = !DILocation(line: 1623, column: 24, scope: !5933)
!5944 = !DILocation(line: 1623, column: 10, scope: !5933)
!5945 = !DILocation(line: 1623, column: 32, scope: !5933)
!5946 = !DILocation(line: 1623, column: 9, scope: !5933)
!5947 = !DILocation(line: 1623, column: 2, scope: !5933)
!5948 = distinct !DISubprogram(name: "is_zero_m3", scope: !1, file: !1, line: 1626, type: !3165, scopeLine: 1627, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5949 = !DILocalVariable(name: "mat", arg: 1, scope: !5948, file: !1, line: 1626, type: !35)
!5950 = !DILocation(line: 1626, column: 23, scope: !5948)
!5951 = !DILocation(line: 1628, column: 21, scope: !5948)
!5952 = !DILocation(line: 1628, column: 10, scope: !5948)
!5953 = !DILocation(line: 1628, column: 29, scope: !5948)
!5954 = !DILocation(line: 1629, column: 21, scope: !5948)
!5955 = !DILocation(line: 1629, column: 10, scope: !5948)
!5956 = !DILocation(line: 1629, column: 29, scope: !5948)
!5957 = !DILocation(line: 1630, column: 21, scope: !5948)
!5958 = !DILocation(line: 1630, column: 10, scope: !5948)
!5959 = !DILocation(line: 0, scope: !5948)
!5960 = !DILocation(line: 1628, column: 9, scope: !5948)
!5961 = !DILocation(line: 1628, column: 2, scope: !5948)
!5962 = distinct !DISubprogram(name: "is_zero_v3", scope: !1718, file: !1718, line: 857, type: !5963, scopeLine: 858, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5963 = !DISubroutineType(types: !5964)
!5964 = !{!2984, !1721}
!5965 = !DILocalVariable(name: "v", arg: 1, scope: !5962, file: !1718, line: 857, type: !1721)
!5966 = !DILocation(line: 857, column: 37, scope: !5962)
!5967 = !DILocation(line: 859, column: 10, scope: !5962)
!5968 = !DILocation(line: 859, column: 15, scope: !5962)
!5969 = !DILocation(line: 859, column: 23, scope: !5962)
!5970 = !DILocation(line: 859, column: 26, scope: !5962)
!5971 = !DILocation(line: 859, column: 31, scope: !5962)
!5972 = !DILocation(line: 859, column: 39, scope: !5962)
!5973 = !DILocation(line: 859, column: 42, scope: !5962)
!5974 = !DILocation(line: 859, column: 47, scope: !5962)
!5975 = !DILocation(line: 0, scope: !5962)
!5976 = !DILocation(line: 859, column: 9, scope: !5962)
!5977 = !DILocation(line: 859, column: 2, scope: !5962)
!5978 = distinct !DISubprogram(name: "is_zero_m4", scope: !1, file: !1, line: 1632, type: !3248, scopeLine: 1633, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5979 = !DILocalVariable(name: "mat", arg: 1, scope: !5978, file: !1, line: 1632, type: !47)
!5980 = !DILocation(line: 1632, column: 23, scope: !5978)
!5981 = !DILocation(line: 1634, column: 21, scope: !5978)
!5982 = !DILocation(line: 1634, column: 10, scope: !5978)
!5983 = !DILocation(line: 1634, column: 29, scope: !5978)
!5984 = !DILocation(line: 1635, column: 21, scope: !5978)
!5985 = !DILocation(line: 1635, column: 10, scope: !5978)
!5986 = !DILocation(line: 1635, column: 29, scope: !5978)
!5987 = !DILocation(line: 1636, column: 21, scope: !5978)
!5988 = !DILocation(line: 1636, column: 10, scope: !5978)
!5989 = !DILocation(line: 1636, column: 29, scope: !5978)
!5990 = !DILocation(line: 1637, column: 21, scope: !5978)
!5991 = !DILocation(line: 1637, column: 10, scope: !5978)
!5992 = !DILocation(line: 0, scope: !5978)
!5993 = !DILocation(line: 1634, column: 9, scope: !5978)
!5994 = !DILocation(line: 1634, column: 2, scope: !5978)
!5995 = distinct !DISubprogram(name: "is_zero_v4", scope: !1718, file: !1718, line: 862, type: !5963, scopeLine: 863, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!5996 = !DILocalVariable(name: "v", arg: 1, scope: !5995, file: !1718, line: 862, type: !1721)
!5997 = !DILocation(line: 862, column: 37, scope: !5995)
!5998 = !DILocation(line: 864, column: 10, scope: !5995)
!5999 = !DILocation(line: 864, column: 15, scope: !5995)
!6000 = !DILocation(line: 864, column: 23, scope: !5995)
!6001 = !DILocation(line: 864, column: 26, scope: !5995)
!6002 = !DILocation(line: 864, column: 31, scope: !5995)
!6003 = !DILocation(line: 864, column: 39, scope: !5995)
!6004 = !DILocation(line: 864, column: 42, scope: !5995)
!6005 = !DILocation(line: 864, column: 47, scope: !5995)
!6006 = !DILocation(line: 864, column: 55, scope: !5995)
!6007 = !DILocation(line: 864, column: 58, scope: !5995)
!6008 = !DILocation(line: 864, column: 63, scope: !5995)
!6009 = !DILocation(line: 0, scope: !5995)
!6010 = !DILocation(line: 864, column: 9, scope: !5995)
!6011 = !DILocation(line: 864, column: 2, scope: !5995)
!6012 = distinct !DISubprogram(name: "loc_eul_size_to_mat4", scope: !1, file: !1, line: 1644, type: !5892, scopeLine: 1645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!6013 = !DILocalVariable(name: "mat", arg: 1, scope: !6012, file: !1, line: 1644, type: !47)
!6014 = !DILocation(line: 1644, column: 33, scope: !6012)
!6015 = !DILocalVariable(name: "loc", arg: 2, scope: !6012, file: !1, line: 1644, type: !1721)
!6016 = !DILocation(line: 1644, column: 56, scope: !6012)
!6017 = !DILocalVariable(name: "eul", arg: 3, scope: !6012, file: !1, line: 1644, type: !1721)
!6018 = !DILocation(line: 1644, column: 76, scope: !6012)
!6019 = !DILocalVariable(name: "size", arg: 4, scope: !6012, file: !1, line: 1644, type: !1721)
!6020 = !DILocation(line: 1644, column: 96, scope: !6012)
!6021 = !DILocalVariable(name: "rmat", scope: !6012, file: !1, line: 1646, type: !699)
!6022 = !DILocation(line: 1646, column: 8, scope: !6012)
!6023 = !DILocalVariable(name: "smat", scope: !6012, file: !1, line: 1646, type: !699)
!6024 = !DILocation(line: 1646, column: 20, scope: !6012)
!6025 = !DILocalVariable(name: "tmat", scope: !6012, file: !1, line: 1646, type: !699)
!6026 = !DILocation(line: 1646, column: 32, scope: !6012)
!6027 = !DILocation(line: 1649, column: 10, scope: !6012)
!6028 = !DILocation(line: 1649, column: 2, scope: !6012)
!6029 = !DILocation(line: 1652, column: 14, scope: !6012)
!6030 = !DILocation(line: 1652, column: 20, scope: !6012)
!6031 = !DILocation(line: 1652, column: 2, scope: !6012)
!6032 = !DILocation(line: 1653, column: 15, scope: !6012)
!6033 = !DILocation(line: 1653, column: 21, scope: !6012)
!6034 = !DILocation(line: 1653, column: 2, scope: !6012)
!6035 = !DILocation(line: 1654, column: 14, scope: !6012)
!6036 = !DILocation(line: 1654, column: 20, scope: !6012)
!6037 = !DILocation(line: 1654, column: 26, scope: !6012)
!6038 = !DILocation(line: 1654, column: 2, scope: !6012)
!6039 = !DILocation(line: 1657, column: 13, scope: !6012)
!6040 = !DILocation(line: 1657, column: 18, scope: !6012)
!6041 = !DILocation(line: 1657, column: 2, scope: !6012)
!6042 = !DILocation(line: 1660, column: 14, scope: !6012)
!6043 = !DILocation(line: 1660, column: 2, scope: !6012)
!6044 = !DILocation(line: 1660, column: 12, scope: !6012)
!6045 = !DILocation(line: 1661, column: 14, scope: !6012)
!6046 = !DILocation(line: 1661, column: 2, scope: !6012)
!6047 = !DILocation(line: 1661, column: 12, scope: !6012)
!6048 = !DILocation(line: 1662, column: 14, scope: !6012)
!6049 = !DILocation(line: 1662, column: 2, scope: !6012)
!6050 = !DILocation(line: 1662, column: 12, scope: !6012)
!6051 = !DILocation(line: 1663, column: 1, scope: !6012)
!6052 = distinct !DISubprogram(name: "loc_eulO_size_to_mat4", scope: !1, file: !1, line: 1668, type: !6053, scopeLine: 1669, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!6053 = !DISubroutineType(types: !6054)
!6054 = !{null, !47, !1721, !1721, !1721, !6055}
!6055 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6056)
!6056 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!6057 = !DILocalVariable(name: "mat", arg: 1, scope: !6052, file: !1, line: 1668, type: !47)
!6058 = !DILocation(line: 1668, column: 34, scope: !6052)
!6059 = !DILocalVariable(name: "loc", arg: 2, scope: !6052, file: !1, line: 1668, type: !1721)
!6060 = !DILocation(line: 1668, column: 57, scope: !6052)
!6061 = !DILocalVariable(name: "eul", arg: 3, scope: !6052, file: !1, line: 1668, type: !1721)
!6062 = !DILocation(line: 1668, column: 77, scope: !6052)
!6063 = !DILocalVariable(name: "size", arg: 4, scope: !6052, file: !1, line: 1668, type: !1721)
!6064 = !DILocation(line: 1668, column: 97, scope: !6052)
!6065 = !DILocalVariable(name: "rotOrder", arg: 5, scope: !6052, file: !1, line: 1668, type: !6055)
!6066 = !DILocation(line: 1668, column: 118, scope: !6052)
!6067 = !DILocalVariable(name: "rmat", scope: !6052, file: !1, line: 1670, type: !699)
!6068 = !DILocation(line: 1670, column: 8, scope: !6052)
!6069 = !DILocalVariable(name: "smat", scope: !6052, file: !1, line: 1670, type: !699)
!6070 = !DILocation(line: 1670, column: 20, scope: !6052)
!6071 = !DILocalVariable(name: "tmat", scope: !6052, file: !1, line: 1670, type: !699)
!6072 = !DILocation(line: 1670, column: 32, scope: !6052)
!6073 = !DILocation(line: 1673, column: 10, scope: !6052)
!6074 = !DILocation(line: 1673, column: 2, scope: !6052)
!6075 = !DILocation(line: 1676, column: 15, scope: !6052)
!6076 = !DILocation(line: 1676, column: 21, scope: !6052)
!6077 = !DILocation(line: 1676, column: 26, scope: !6052)
!6078 = !DILocation(line: 1676, column: 2, scope: !6052)
!6079 = !DILocation(line: 1677, column: 15, scope: !6052)
!6080 = !DILocation(line: 1677, column: 21, scope: !6052)
!6081 = !DILocation(line: 1677, column: 2, scope: !6052)
!6082 = !DILocation(line: 1678, column: 14, scope: !6052)
!6083 = !DILocation(line: 1678, column: 20, scope: !6052)
!6084 = !DILocation(line: 1678, column: 26, scope: !6052)
!6085 = !DILocation(line: 1678, column: 2, scope: !6052)
!6086 = !DILocation(line: 1681, column: 13, scope: !6052)
!6087 = !DILocation(line: 1681, column: 18, scope: !6052)
!6088 = !DILocation(line: 1681, column: 2, scope: !6052)
!6089 = !DILocation(line: 1684, column: 14, scope: !6052)
!6090 = !DILocation(line: 1684, column: 2, scope: !6052)
!6091 = !DILocation(line: 1684, column: 12, scope: !6052)
!6092 = !DILocation(line: 1685, column: 14, scope: !6052)
!6093 = !DILocation(line: 1685, column: 2, scope: !6052)
!6094 = !DILocation(line: 1685, column: 12, scope: !6052)
!6095 = !DILocation(line: 1686, column: 14, scope: !6052)
!6096 = !DILocation(line: 1686, column: 2, scope: !6052)
!6097 = !DILocation(line: 1686, column: 12, scope: !6052)
!6098 = !DILocation(line: 1687, column: 1, scope: !6052)
!6099 = distinct !DISubprogram(name: "loc_axisangle_size_to_mat4", scope: !1, file: !1, line: 1714, type: !6100, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!6100 = !DISubroutineType(types: !6101)
!6101 = !{null, !47, !1721, !1721, !1722, !1721}
!6102 = !DILocalVariable(name: "mat", arg: 1, scope: !6099, file: !1, line: 1714, type: !47)
!6103 = !DILocation(line: 1714, column: 39, scope: !6099)
!6104 = !DILocalVariable(name: "loc", arg: 2, scope: !6099, file: !1, line: 1714, type: !1721)
!6105 = !DILocation(line: 1714, column: 62, scope: !6099)
!6106 = !DILocalVariable(name: "axis", arg: 3, scope: !6099, file: !1, line: 1714, type: !1721)
!6107 = !DILocation(line: 1714, column: 82, scope: !6099)
!6108 = !DILocalVariable(name: "angle", arg: 4, scope: !6099, file: !1, line: 1714, type: !1722)
!6109 = !DILocation(line: 1714, column: 103, scope: !6099)
!6110 = !DILocalVariable(name: "size", arg: 5, scope: !6099, file: !1, line: 1714, type: !1721)
!6111 = !DILocation(line: 1714, column: 122, scope: !6099)
!6112 = !DILocalVariable(name: "q", scope: !6099, file: !1, line: 1716, type: !48)
!6113 = !DILocation(line: 1716, column: 8, scope: !6099)
!6114 = !DILocation(line: 1717, column: 21, scope: !6099)
!6115 = !DILocation(line: 1717, column: 24, scope: !6099)
!6116 = !DILocation(line: 1717, column: 30, scope: !6099)
!6117 = !DILocation(line: 1717, column: 2, scope: !6099)
!6118 = !DILocation(line: 1718, column: 24, scope: !6099)
!6119 = !DILocation(line: 1718, column: 29, scope: !6099)
!6120 = !DILocation(line: 1718, column: 34, scope: !6099)
!6121 = !DILocation(line: 1718, column: 37, scope: !6099)
!6122 = !DILocation(line: 1718, column: 2, scope: !6099)
!6123 = !DILocation(line: 1719, column: 1, scope: !6099)
!6124 = distinct !DISubprogram(name: "print_m3", scope: !1, file: !1, line: 1723, type: !6125, scopeLine: 1724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!6125 = !DISubroutineType(types: !6126)
!6126 = !{null, !6127, !35}
!6127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5520, size: 64)
!6128 = !DILocalVariable(name: "str", arg: 1, scope: !6124, file: !1, line: 1723, type: !6127)
!6129 = !DILocation(line: 1723, column: 27, scope: !6124)
!6130 = !DILocalVariable(name: "m", arg: 2, scope: !6124, file: !1, line: 1723, type: !35)
!6131 = !DILocation(line: 1723, column: 38, scope: !6124)
!6132 = !DILocation(line: 1725, column: 17, scope: !6124)
!6133 = !DILocation(line: 1725, column: 2, scope: !6124)
!6134 = !DILocation(line: 1726, column: 23, scope: !6124)
!6135 = !DILocation(line: 1726, column: 32, scope: !6124)
!6136 = !DILocation(line: 1726, column: 41, scope: !6124)
!6137 = !DILocation(line: 1726, column: 2, scope: !6124)
!6138 = !DILocation(line: 1727, column: 23, scope: !6124)
!6139 = !DILocation(line: 1727, column: 32, scope: !6124)
!6140 = !DILocation(line: 1727, column: 41, scope: !6124)
!6141 = !DILocation(line: 1727, column: 2, scope: !6124)
!6142 = !DILocation(line: 1728, column: 23, scope: !6124)
!6143 = !DILocation(line: 1728, column: 32, scope: !6124)
!6144 = !DILocation(line: 1728, column: 41, scope: !6124)
!6145 = !DILocation(line: 1728, column: 2, scope: !6124)
!6146 = !DILocation(line: 1729, column: 2, scope: !6124)
!6147 = !DILocation(line: 1730, column: 1, scope: !6124)
!6148 = distinct !DISubprogram(name: "print_m4", scope: !1, file: !1, line: 1732, type: !6149, scopeLine: 1733, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!6149 = !DISubroutineType(types: !6150)
!6150 = !{null, !6127, !47}
!6151 = !DILocalVariable(name: "str", arg: 1, scope: !6148, file: !1, line: 1732, type: !6127)
!6152 = !DILocation(line: 1732, column: 27, scope: !6148)
!6153 = !DILocalVariable(name: "m", arg: 2, scope: !6148, file: !1, line: 1732, type: !47)
!6154 = !DILocation(line: 1732, column: 38, scope: !6148)
!6155 = !DILocation(line: 1734, column: 17, scope: !6148)
!6156 = !DILocation(line: 1734, column: 2, scope: !6148)
!6157 = !DILocation(line: 1735, column: 26, scope: !6148)
!6158 = !DILocation(line: 1735, column: 35, scope: !6148)
!6159 = !DILocation(line: 1735, column: 44, scope: !6148)
!6160 = !DILocation(line: 1735, column: 53, scope: !6148)
!6161 = !DILocation(line: 1735, column: 2, scope: !6148)
!6162 = !DILocation(line: 1736, column: 26, scope: !6148)
!6163 = !DILocation(line: 1736, column: 35, scope: !6148)
!6164 = !DILocation(line: 1736, column: 44, scope: !6148)
!6165 = !DILocation(line: 1736, column: 53, scope: !6148)
!6166 = !DILocation(line: 1736, column: 2, scope: !6148)
!6167 = !DILocation(line: 1737, column: 26, scope: !6148)
!6168 = !DILocation(line: 1737, column: 35, scope: !6148)
!6169 = !DILocation(line: 1737, column: 44, scope: !6148)
!6170 = !DILocation(line: 1737, column: 53, scope: !6148)
!6171 = !DILocation(line: 1737, column: 2, scope: !6148)
!6172 = !DILocation(line: 1738, column: 26, scope: !6148)
!6173 = !DILocation(line: 1738, column: 35, scope: !6148)
!6174 = !DILocation(line: 1738, column: 44, scope: !6148)
!6175 = !DILocation(line: 1738, column: 53, scope: !6148)
!6176 = !DILocation(line: 1738, column: 2, scope: !6148)
!6177 = !DILocation(line: 1739, column: 2, scope: !6148)
!6178 = !DILocation(line: 1740, column: 1, scope: !6148)
!6179 = distinct !DISubprogram(name: "svd_m4", scope: !1, file: !1, line: 1752, type: !6180, scopeLine: 1753, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!6180 = !DISubroutineType(types: !6181)
!6181 = !{null, !47, !1686, !47, !47}
!6182 = !DILocalVariable(name: "U", arg: 1, scope: !6179, file: !1, line: 1752, type: !47)
!6183 = !DILocation(line: 1752, column: 19, scope: !6179)
!6184 = !DILocalVariable(name: "s", arg: 2, scope: !6179, file: !1, line: 1752, type: !1686)
!6185 = !DILocation(line: 1752, column: 34, scope: !6179)
!6186 = !DILocalVariable(name: "V", arg: 3, scope: !6179, file: !1, line: 1752, type: !47)
!6187 = !DILocation(line: 1752, column: 46, scope: !6179)
!6188 = !DILocalVariable(name: "A_", arg: 4, scope: !6179, file: !1, line: 1752, type: !47)
!6189 = !DILocation(line: 1752, column: 61, scope: !6179)
!6190 = !DILocalVariable(name: "A", scope: !6179, file: !1, line: 1754, type: !12)
!6191 = !DILocation(line: 1754, column: 8, scope: !6179)
!6192 = !DILocalVariable(name: "work1", scope: !6179, file: !1, line: 1755, type: !48)
!6193 = !DILocation(line: 1755, column: 8, scope: !6179)
!6194 = !DILocalVariable(name: "work2", scope: !6179, file: !1, line: 1755, type: !48)
!6195 = !DILocation(line: 1755, column: 18, scope: !6179)
!6196 = !DILocalVariable(name: "m", scope: !6179, file: !1, line: 1756, type: !296)
!6197 = !DILocation(line: 1756, column: 6, scope: !6179)
!6198 = !DILocalVariable(name: "n", scope: !6179, file: !1, line: 1757, type: !296)
!6199 = !DILocation(line: 1757, column: 6, scope: !6179)
!6200 = !DILocalVariable(name: "maxiter", scope: !6179, file: !1, line: 1758, type: !296)
!6201 = !DILocation(line: 1758, column: 6, scope: !6179)
!6202 = !DILocalVariable(name: "nu", scope: !6179, file: !1, line: 1759, type: !296)
!6203 = !DILocation(line: 1759, column: 6, scope: !6179)
!6204 = !DILocation(line: 1759, column: 18, scope: !6179)
!6205 = !DILocation(line: 1759, column: 21, scope: !6179)
!6206 = !DILocation(line: 1759, column: 11, scope: !6179)
!6207 = !DILocalVariable(name: "work", scope: !6179, file: !1, line: 1761, type: !1686)
!6208 = !DILocation(line: 1761, column: 9, scope: !6179)
!6209 = !DILocation(line: 1761, column: 16, scope: !6179)
!6210 = !DILocalVariable(name: "e", scope: !6179, file: !1, line: 1762, type: !1686)
!6211 = !DILocation(line: 1762, column: 9, scope: !6179)
!6212 = !DILocation(line: 1762, column: 13, scope: !6179)
!6213 = !DILocalVariable(name: "eps", scope: !6179, file: !1, line: 1763, type: !4)
!6214 = !DILocation(line: 1763, column: 8, scope: !6179)
!6215 = !DILocalVariable(name: "i", scope: !6179, file: !1, line: 1765, type: !296)
!6216 = !DILocation(line: 1765, column: 6, scope: !6179)
!6217 = !DILocalVariable(name: "j", scope: !6179, file: !1, line: 1765, type: !296)
!6218 = !DILocation(line: 1765, column: 13, scope: !6179)
!6219 = !DILocalVariable(name: "k", scope: !6179, file: !1, line: 1765, type: !296)
!6220 = !DILocation(line: 1765, column: 20, scope: !6179)
!6221 = !DILocalVariable(name: "p", scope: !6179, file: !1, line: 1765, type: !296)
!6222 = !DILocation(line: 1765, column: 27, scope: !6179)
!6223 = !DILocalVariable(name: "pp", scope: !6179, file: !1, line: 1765, type: !296)
!6224 = !DILocation(line: 1765, column: 30, scope: !6179)
!6225 = !DILocalVariable(name: "iter", scope: !6179, file: !1, line: 1765, type: !296)
!6226 = !DILocation(line: 1765, column: 34, scope: !6179)
!6227 = !DILocalVariable(name: "nct", scope: !6179, file: !1, line: 1770, type: !296)
!6228 = !DILocation(line: 1770, column: 6, scope: !6179)
!6229 = !DILocation(line: 1770, column: 19, scope: !6179)
!6230 = !DILocation(line: 1770, column: 21, scope: !6179)
!6231 = !DILocation(line: 1770, column: 26, scope: !6179)
!6232 = !DILocation(line: 1770, column: 12, scope: !6179)
!6233 = !DILocalVariable(name: "nrt", scope: !6179, file: !1, line: 1771, type: !296)
!6234 = !DILocation(line: 1771, column: 6, scope: !6179)
!6235 = !DILocation(line: 1771, column: 29, scope: !6179)
!6236 = !DILocation(line: 1771, column: 31, scope: !6179)
!6237 = !DILocation(line: 1771, column: 36, scope: !6179)
!6238 = !DILocation(line: 1771, column: 22, scope: !6179)
!6239 = !DILocation(line: 1771, column: 12, scope: !6179)
!6240 = !DILocation(line: 1773, column: 13, scope: !6179)
!6241 = !DILocation(line: 1773, column: 16, scope: !6179)
!6242 = !DILocation(line: 1773, column: 2, scope: !6179)
!6243 = !DILocation(line: 1774, column: 10, scope: !6179)
!6244 = !DILocation(line: 1774, column: 2, scope: !6179)
!6245 = !DILocation(line: 1775, column: 10, scope: !6179)
!6246 = !DILocation(line: 1775, column: 2, scope: !6179)
!6247 = !DILocation(line: 1777, column: 9, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1777, column: 2)
!6249 = !DILocation(line: 1777, column: 7, scope: !6248)
!6250 = !DILocation(line: 1777, column: 14, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6248, file: !1, line: 1777, column: 2)
!6252 = !DILocation(line: 1777, column: 25, scope: !6251)
!6253 = !DILocation(line: 1777, column: 30, scope: !6251)
!6254 = !DILocation(line: 1777, column: 18, scope: !6251)
!6255 = !DILocation(line: 1777, column: 16, scope: !6251)
!6256 = !DILocation(line: 1777, column: 2, scope: !6248)
!6257 = !DILocation(line: 1778, column: 7, scope: !6258)
!6258 = distinct !DILexicalBlock(scope: !6259, file: !1, line: 1778, column: 7)
!6259 = distinct !DILexicalBlock(scope: !6251, file: !1, line: 1777, column: 41)
!6260 = !DILocation(line: 1778, column: 11, scope: !6258)
!6261 = !DILocation(line: 1778, column: 9, scope: !6258)
!6262 = !DILocation(line: 1778, column: 7, scope: !6259)
!6263 = !DILocation(line: 1783, column: 4, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6258, file: !1, line: 1778, column: 16)
!6265 = !DILocation(line: 1783, column: 6, scope: !6264)
!6266 = !DILocation(line: 1783, column: 9, scope: !6264)
!6267 = !DILocation(line: 1784, column: 13, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 1784, column: 4)
!6269 = !DILocation(line: 1784, column: 11, scope: !6268)
!6270 = !DILocation(line: 1784, column: 9, scope: !6268)
!6271 = !DILocation(line: 1784, column: 16, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6268, file: !1, line: 1784, column: 4)
!6273 = !DILocation(line: 1784, column: 20, scope: !6272)
!6274 = !DILocation(line: 1784, column: 18, scope: !6272)
!6275 = !DILocation(line: 1784, column: 4, scope: !6268)
!6276 = !DILocation(line: 1785, column: 19, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6272, file: !1, line: 1784, column: 28)
!6278 = !DILocation(line: 1785, column: 21, scope: !6277)
!6279 = !DILocation(line: 1785, column: 27, scope: !6277)
!6280 = !DILocation(line: 1785, column: 25, scope: !6277)
!6281 = !DILocation(line: 1785, column: 30, scope: !6277)
!6282 = !DILocation(line: 1785, column: 12, scope: !6277)
!6283 = !DILocation(line: 1785, column: 5, scope: !6277)
!6284 = !DILocation(line: 1785, column: 7, scope: !6277)
!6285 = !DILocation(line: 1785, column: 10, scope: !6277)
!6286 = !DILocation(line: 1786, column: 4, scope: !6277)
!6287 = !DILocation(line: 1784, column: 24, scope: !6272)
!6288 = !DILocation(line: 1784, column: 4, scope: !6272)
!6289 = distinct !{!6289, !6275, !6290}
!6290 = !DILocation(line: 1786, column: 4, scope: !6268)
!6291 = !DILocation(line: 1787, column: 8, scope: !6292)
!6292 = distinct !DILexicalBlock(scope: !6264, file: !1, line: 1787, column: 8)
!6293 = !DILocation(line: 1787, column: 10, scope: !6292)
!6294 = !DILocation(line: 1787, column: 13, scope: !6292)
!6295 = !DILocation(line: 1787, column: 8, scope: !6264)
!6296 = !DILocalVariable(name: "invsk", scope: !6297, file: !1, line: 1788, type: !4)
!6297 = distinct !DILexicalBlock(scope: !6292, file: !1, line: 1787, column: 22)
!6298 = !DILocation(line: 1788, column: 11, scope: !6297)
!6299 = !DILocation(line: 1789, column: 11, scope: !6300)
!6300 = distinct !DILexicalBlock(scope: !6297, file: !1, line: 1789, column: 9)
!6301 = !DILocation(line: 1789, column: 9, scope: !6300)
!6302 = !DILocation(line: 1789, column: 14, scope: !6300)
!6303 = !DILocation(line: 1789, column: 17, scope: !6300)
!6304 = !DILocation(line: 1789, column: 9, scope: !6297)
!6305 = !DILocation(line: 1790, column: 14, scope: !6306)
!6306 = distinct !DILexicalBlock(scope: !6300, file: !1, line: 1789, column: 25)
!6307 = !DILocation(line: 1790, column: 16, scope: !6306)
!6308 = !DILocation(line: 1790, column: 13, scope: !6306)
!6309 = !DILocation(line: 1790, column: 6, scope: !6306)
!6310 = !DILocation(line: 1790, column: 8, scope: !6306)
!6311 = !DILocation(line: 1790, column: 11, scope: !6306)
!6312 = !DILocation(line: 1791, column: 5, scope: !6306)
!6313 = !DILocation(line: 1792, column: 20, scope: !6297)
!6314 = !DILocation(line: 1792, column: 22, scope: !6297)
!6315 = !DILocation(line: 1792, column: 18, scope: !6297)
!6316 = !DILocation(line: 1792, column: 11, scope: !6297)
!6317 = !DILocation(line: 1793, column: 14, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6297, file: !1, line: 1793, column: 5)
!6319 = !DILocation(line: 1793, column: 12, scope: !6318)
!6320 = !DILocation(line: 1793, column: 10, scope: !6318)
!6321 = !DILocation(line: 1793, column: 17, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6318, file: !1, line: 1793, column: 5)
!6323 = !DILocation(line: 1793, column: 21, scope: !6322)
!6324 = !DILocation(line: 1793, column: 19, scope: !6322)
!6325 = !DILocation(line: 1793, column: 5, scope: !6318)
!6326 = !DILocation(line: 1794, column: 17, scope: !6327)
!6327 = distinct !DILexicalBlock(scope: !6322, file: !1, line: 1793, column: 29)
!6328 = !DILocation(line: 1794, column: 8, scope: !6327)
!6329 = !DILocation(line: 1794, column: 6, scope: !6327)
!6330 = !DILocation(line: 1794, column: 11, scope: !6327)
!6331 = !DILocation(line: 1794, column: 14, scope: !6327)
!6332 = !DILocation(line: 1795, column: 5, scope: !6327)
!6333 = !DILocation(line: 1793, column: 25, scope: !6322)
!6334 = !DILocation(line: 1793, column: 5, scope: !6322)
!6335 = distinct !{!6335, !6325, !6336}
!6336 = !DILocation(line: 1795, column: 5, scope: !6318)
!6337 = !DILocation(line: 1796, column: 7, scope: !6297)
!6338 = !DILocation(line: 1796, column: 5, scope: !6297)
!6339 = !DILocation(line: 1796, column: 10, scope: !6297)
!6340 = !DILocation(line: 1796, column: 13, scope: !6297)
!6341 = !DILocation(line: 1797, column: 4, scope: !6297)
!6342 = !DILocation(line: 1798, column: 12, scope: !6264)
!6343 = !DILocation(line: 1798, column: 14, scope: !6264)
!6344 = !DILocation(line: 1798, column: 11, scope: !6264)
!6345 = !DILocation(line: 1798, column: 4, scope: !6264)
!6346 = !DILocation(line: 1798, column: 6, scope: !6264)
!6347 = !DILocation(line: 1798, column: 9, scope: !6264)
!6348 = !DILocation(line: 1799, column: 3, scope: !6264)
!6349 = !DILocation(line: 1800, column: 12, scope: !6350)
!6350 = distinct !DILexicalBlock(scope: !6259, file: !1, line: 1800, column: 3)
!6351 = !DILocation(line: 1800, column: 14, scope: !6350)
!6352 = !DILocation(line: 1800, column: 10, scope: !6350)
!6353 = !DILocation(line: 1800, column: 8, scope: !6350)
!6354 = !DILocation(line: 1800, column: 19, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6350, file: !1, line: 1800, column: 3)
!6356 = !DILocation(line: 1800, column: 23, scope: !6355)
!6357 = !DILocation(line: 1800, column: 21, scope: !6355)
!6358 = !DILocation(line: 1800, column: 3, scope: !6350)
!6359 = !DILocation(line: 1801, column: 9, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6361, file: !1, line: 1801, column: 8)
!6361 = distinct !DILexicalBlock(scope: !6355, file: !1, line: 1800, column: 31)
!6362 = !DILocation(line: 1801, column: 13, scope: !6360)
!6363 = !DILocation(line: 1801, column: 11, scope: !6360)
!6364 = !DILocation(line: 1801, column: 18, scope: !6360)
!6365 = !DILocation(line: 1801, column: 22, scope: !6360)
!6366 = !DILocation(line: 1801, column: 24, scope: !6360)
!6367 = !DILocation(line: 1801, column: 27, scope: !6360)
!6368 = !DILocation(line: 1801, column: 8, scope: !6361)
!6369 = !DILocalVariable(name: "t", scope: !6370, file: !1, line: 1805, type: !4)
!6370 = distinct !DILexicalBlock(scope: !6360, file: !1, line: 1801, column: 37)
!6371 = !DILocation(line: 1805, column: 11, scope: !6370)
!6372 = !DILocation(line: 1806, column: 14, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6370, file: !1, line: 1806, column: 5)
!6374 = !DILocation(line: 1806, column: 12, scope: !6373)
!6375 = !DILocation(line: 1806, column: 10, scope: !6373)
!6376 = !DILocation(line: 1806, column: 17, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6373, file: !1, line: 1806, column: 5)
!6378 = !DILocation(line: 1806, column: 21, scope: !6377)
!6379 = !DILocation(line: 1806, column: 19, scope: !6377)
!6380 = !DILocation(line: 1806, column: 5, scope: !6373)
!6381 = !DILocation(line: 1807, column: 13, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6377, file: !1, line: 1806, column: 29)
!6383 = !DILocation(line: 1807, column: 11, scope: !6382)
!6384 = !DILocation(line: 1807, column: 16, scope: !6382)
!6385 = !DILocation(line: 1807, column: 23, scope: !6382)
!6386 = !DILocation(line: 1807, column: 21, scope: !6382)
!6387 = !DILocation(line: 1807, column: 26, scope: !6382)
!6388 = !DILocation(line: 1807, column: 19, scope: !6382)
!6389 = !DILocation(line: 1807, column: 8, scope: !6382)
!6390 = !DILocation(line: 1808, column: 5, scope: !6382)
!6391 = !DILocation(line: 1806, column: 25, scope: !6377)
!6392 = !DILocation(line: 1806, column: 5, scope: !6377)
!6393 = distinct !{!6393, !6380, !6394}
!6394 = !DILocation(line: 1808, column: 5, scope: !6373)
!6395 = !DILocation(line: 1809, column: 10, scope: !6370)
!6396 = !DILocation(line: 1809, column: 9, scope: !6370)
!6397 = !DILocation(line: 1809, column: 16, scope: !6370)
!6398 = !DILocation(line: 1809, column: 14, scope: !6370)
!6399 = !DILocation(line: 1809, column: 19, scope: !6370)
!6400 = !DILocation(line: 1809, column: 12, scope: !6370)
!6401 = !DILocation(line: 1809, column: 7, scope: !6370)
!6402 = !DILocation(line: 1810, column: 14, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6370, file: !1, line: 1810, column: 5)
!6404 = !DILocation(line: 1810, column: 12, scope: !6403)
!6405 = !DILocation(line: 1810, column: 10, scope: !6403)
!6406 = !DILocation(line: 1810, column: 17, scope: !6407)
!6407 = distinct !DILexicalBlock(scope: !6403, file: !1, line: 1810, column: 5)
!6408 = !DILocation(line: 1810, column: 21, scope: !6407)
!6409 = !DILocation(line: 1810, column: 19, scope: !6407)
!6410 = !DILocation(line: 1810, column: 5, scope: !6403)
!6411 = !DILocation(line: 1811, column: 17, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6407, file: !1, line: 1810, column: 29)
!6413 = !DILocation(line: 1811, column: 23, scope: !6412)
!6414 = !DILocation(line: 1811, column: 21, scope: !6412)
!6415 = !DILocation(line: 1811, column: 26, scope: !6412)
!6416 = !DILocation(line: 1811, column: 19, scope: !6412)
!6417 = !DILocation(line: 1811, column: 8, scope: !6412)
!6418 = !DILocation(line: 1811, column: 6, scope: !6412)
!6419 = !DILocation(line: 1811, column: 11, scope: !6412)
!6420 = !DILocation(line: 1811, column: 14, scope: !6412)
!6421 = !DILocation(line: 1812, column: 5, scope: !6412)
!6422 = !DILocation(line: 1810, column: 25, scope: !6407)
!6423 = !DILocation(line: 1810, column: 5, scope: !6407)
!6424 = distinct !{!6424, !6410, !6425}
!6425 = !DILocation(line: 1812, column: 5, scope: !6403)
!6426 = !DILocation(line: 1813, column: 4, scope: !6370)
!6427 = !DILocation(line: 1818, column: 13, scope: !6361)
!6428 = !DILocation(line: 1818, column: 11, scope: !6361)
!6429 = !DILocation(line: 1818, column: 16, scope: !6361)
!6430 = !DILocation(line: 1818, column: 4, scope: !6361)
!6431 = !DILocation(line: 1818, column: 6, scope: !6361)
!6432 = !DILocation(line: 1818, column: 9, scope: !6361)
!6433 = !DILocation(line: 1819, column: 3, scope: !6361)
!6434 = !DILocation(line: 1800, column: 27, scope: !6355)
!6435 = !DILocation(line: 1800, column: 3, scope: !6355)
!6436 = distinct !{!6436, !6358, !6437}
!6437 = !DILocation(line: 1819, column: 3, scope: !6350)
!6438 = !DILocation(line: 1820, column: 7, scope: !6439)
!6439 = distinct !DILexicalBlock(scope: !6259, file: !1, line: 1820, column: 7)
!6440 = !DILocation(line: 1820, column: 11, scope: !6439)
!6441 = !DILocation(line: 1820, column: 9, scope: !6439)
!6442 = !DILocation(line: 1820, column: 7, scope: !6259)
!6443 = !DILocation(line: 1825, column: 13, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6445, file: !1, line: 1825, column: 4)
!6445 = distinct !DILexicalBlock(scope: !6439, file: !1, line: 1820, column: 16)
!6446 = !DILocation(line: 1825, column: 11, scope: !6444)
!6447 = !DILocation(line: 1825, column: 9, scope: !6444)
!6448 = !DILocation(line: 1825, column: 16, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6444, file: !1, line: 1825, column: 4)
!6450 = !DILocation(line: 1825, column: 20, scope: !6449)
!6451 = !DILocation(line: 1825, column: 18, scope: !6449)
!6452 = !DILocation(line: 1825, column: 4, scope: !6444)
!6453 = !DILocation(line: 1826, column: 17, scope: !6449)
!6454 = !DILocation(line: 1826, column: 15, scope: !6449)
!6455 = !DILocation(line: 1826, column: 20, scope: !6449)
!6456 = !DILocation(line: 1826, column: 5, scope: !6449)
!6457 = !DILocation(line: 1826, column: 7, scope: !6449)
!6458 = !DILocation(line: 1826, column: 10, scope: !6449)
!6459 = !DILocation(line: 1826, column: 13, scope: !6449)
!6460 = !DILocation(line: 1825, column: 24, scope: !6449)
!6461 = !DILocation(line: 1825, column: 4, scope: !6449)
!6462 = distinct !{!6462, !6452, !6463}
!6463 = !DILocation(line: 1826, column: 21, scope: !6444)
!6464 = !DILocation(line: 1827, column: 3, scope: !6445)
!6465 = !DILocation(line: 1828, column: 7, scope: !6466)
!6466 = distinct !DILexicalBlock(scope: !6259, file: !1, line: 1828, column: 7)
!6467 = !DILocation(line: 1828, column: 11, scope: !6466)
!6468 = !DILocation(line: 1828, column: 9, scope: !6466)
!6469 = !DILocation(line: 1828, column: 7, scope: !6259)
!6470 = !DILocation(line: 1833, column: 4, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6466, file: !1, line: 1828, column: 16)
!6472 = !DILocation(line: 1833, column: 6, scope: !6471)
!6473 = !DILocation(line: 1833, column: 9, scope: !6471)
!6474 = !DILocation(line: 1834, column: 13, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6471, file: !1, line: 1834, column: 4)
!6476 = !DILocation(line: 1834, column: 15, scope: !6475)
!6477 = !DILocation(line: 1834, column: 11, scope: !6475)
!6478 = !DILocation(line: 1834, column: 9, scope: !6475)
!6479 = !DILocation(line: 1834, column: 20, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6475, file: !1, line: 1834, column: 4)
!6481 = !DILocation(line: 1834, column: 24, scope: !6480)
!6482 = !DILocation(line: 1834, column: 22, scope: !6480)
!6483 = !DILocation(line: 1834, column: 4, scope: !6475)
!6484 = !DILocation(line: 1835, column: 19, scope: !6485)
!6485 = distinct !DILexicalBlock(scope: !6480, file: !1, line: 1834, column: 32)
!6486 = !DILocation(line: 1835, column: 21, scope: !6485)
!6487 = !DILocation(line: 1835, column: 25, scope: !6485)
!6488 = !DILocation(line: 1835, column: 27, scope: !6485)
!6489 = !DILocation(line: 1835, column: 12, scope: !6485)
!6490 = !DILocation(line: 1835, column: 5, scope: !6485)
!6491 = !DILocation(line: 1835, column: 7, scope: !6485)
!6492 = !DILocation(line: 1835, column: 10, scope: !6485)
!6493 = !DILocation(line: 1836, column: 4, scope: !6485)
!6494 = !DILocation(line: 1834, column: 28, scope: !6480)
!6495 = !DILocation(line: 1834, column: 4, scope: !6480)
!6496 = distinct !{!6496, !6483, !6497}
!6497 = !DILocation(line: 1836, column: 4, scope: !6475)
!6498 = !DILocation(line: 1837, column: 8, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !6471, file: !1, line: 1837, column: 8)
!6500 = !DILocation(line: 1837, column: 10, scope: !6499)
!6501 = !DILocation(line: 1837, column: 13, scope: !6499)
!6502 = !DILocation(line: 1837, column: 8, scope: !6471)
!6503 = !DILocalVariable(name: "invek", scope: !6504, file: !1, line: 1838, type: !4)
!6504 = distinct !DILexicalBlock(scope: !6499, file: !1, line: 1837, column: 22)
!6505 = !DILocation(line: 1838, column: 11, scope: !6504)
!6506 = !DILocation(line: 1839, column: 9, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6504, file: !1, line: 1839, column: 9)
!6508 = !DILocation(line: 1839, column: 11, scope: !6507)
!6509 = !DILocation(line: 1839, column: 13, scope: !6507)
!6510 = !DILocation(line: 1839, column: 18, scope: !6507)
!6511 = !DILocation(line: 1839, column: 9, scope: !6504)
!6512 = !DILocation(line: 1840, column: 14, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6507, file: !1, line: 1839, column: 26)
!6514 = !DILocation(line: 1840, column: 16, scope: !6513)
!6515 = !DILocation(line: 1840, column: 13, scope: !6513)
!6516 = !DILocation(line: 1840, column: 6, scope: !6513)
!6517 = !DILocation(line: 1840, column: 8, scope: !6513)
!6518 = !DILocation(line: 1840, column: 11, scope: !6513)
!6519 = !DILocation(line: 1841, column: 5, scope: !6513)
!6520 = !DILocation(line: 1842, column: 20, scope: !6504)
!6521 = !DILocation(line: 1842, column: 22, scope: !6504)
!6522 = !DILocation(line: 1842, column: 18, scope: !6504)
!6523 = !DILocation(line: 1842, column: 11, scope: !6504)
!6524 = !DILocation(line: 1843, column: 14, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6504, file: !1, line: 1843, column: 5)
!6526 = !DILocation(line: 1843, column: 16, scope: !6525)
!6527 = !DILocation(line: 1843, column: 12, scope: !6525)
!6528 = !DILocation(line: 1843, column: 10, scope: !6525)
!6529 = !DILocation(line: 1843, column: 21, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6525, file: !1, line: 1843, column: 5)
!6531 = !DILocation(line: 1843, column: 25, scope: !6530)
!6532 = !DILocation(line: 1843, column: 23, scope: !6530)
!6533 = !DILocation(line: 1843, column: 5, scope: !6525)
!6534 = !DILocation(line: 1844, column: 14, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6530, file: !1, line: 1843, column: 33)
!6536 = !DILocation(line: 1844, column: 6, scope: !6535)
!6537 = !DILocation(line: 1844, column: 8, scope: !6535)
!6538 = !DILocation(line: 1844, column: 11, scope: !6535)
!6539 = !DILocation(line: 1845, column: 5, scope: !6535)
!6540 = !DILocation(line: 1843, column: 29, scope: !6530)
!6541 = !DILocation(line: 1843, column: 5, scope: !6530)
!6542 = distinct !{!6542, !6533, !6543}
!6543 = !DILocation(line: 1845, column: 5, scope: !6525)
!6544 = !DILocation(line: 1846, column: 5, scope: !6504)
!6545 = !DILocation(line: 1846, column: 7, scope: !6504)
!6546 = !DILocation(line: 1846, column: 9, scope: !6504)
!6547 = !DILocation(line: 1846, column: 14, scope: !6504)
!6548 = !DILocation(line: 1847, column: 4, scope: !6504)
!6549 = !DILocation(line: 1848, column: 12, scope: !6471)
!6550 = !DILocation(line: 1848, column: 14, scope: !6471)
!6551 = !DILocation(line: 1848, column: 11, scope: !6471)
!6552 = !DILocation(line: 1848, column: 4, scope: !6471)
!6553 = !DILocation(line: 1848, column: 6, scope: !6471)
!6554 = !DILocation(line: 1848, column: 9, scope: !6471)
!6555 = !DILocation(line: 1849, column: 9, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6471, file: !1, line: 1849, column: 8)
!6557 = !DILocation(line: 1849, column: 11, scope: !6556)
!6558 = !DILocation(line: 1849, column: 17, scope: !6556)
!6559 = !DILocation(line: 1849, column: 15, scope: !6556)
!6560 = !DILocation(line: 1849, column: 23, scope: !6556)
!6561 = !DILocation(line: 1849, column: 25, scope: !6556)
!6562 = !DILocation(line: 1849, column: 28, scope: !6556)
!6563 = !DILocation(line: 1849, column: 20, scope: !6556)
!6564 = !DILocation(line: 1849, column: 8, scope: !6471)
!6565 = !DILocalVariable(name: "invek1", scope: !6566, file: !1, line: 1850, type: !4)
!6566 = distinct !DILexicalBlock(scope: !6556, file: !1, line: 1849, column: 38)
!6567 = !DILocation(line: 1850, column: 11, scope: !6566)
!6568 = !DILocation(line: 1854, column: 14, scope: !6569)
!6569 = distinct !DILexicalBlock(scope: !6566, file: !1, line: 1854, column: 5)
!6570 = !DILocation(line: 1854, column: 16, scope: !6569)
!6571 = !DILocation(line: 1854, column: 12, scope: !6569)
!6572 = !DILocation(line: 1854, column: 10, scope: !6569)
!6573 = !DILocation(line: 1854, column: 21, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6569, file: !1, line: 1854, column: 5)
!6575 = !DILocation(line: 1854, column: 25, scope: !6574)
!6576 = !DILocation(line: 1854, column: 23, scope: !6574)
!6577 = !DILocation(line: 1854, column: 5, scope: !6569)
!6578 = !DILocation(line: 1855, column: 6, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6574, file: !1, line: 1854, column: 33)
!6580 = !DILocation(line: 1855, column: 11, scope: !6579)
!6581 = !DILocation(line: 1855, column: 14, scope: !6579)
!6582 = !DILocation(line: 1856, column: 5, scope: !6579)
!6583 = !DILocation(line: 1854, column: 29, scope: !6574)
!6584 = !DILocation(line: 1854, column: 5, scope: !6574)
!6585 = distinct !{!6585, !6577, !6586}
!6586 = !DILocation(line: 1856, column: 5, scope: !6569)
!6587 = !DILocation(line: 1857, column: 14, scope: !6588)
!6588 = distinct !DILexicalBlock(scope: !6566, file: !1, line: 1857, column: 5)
!6589 = !DILocation(line: 1857, column: 16, scope: !6588)
!6590 = !DILocation(line: 1857, column: 12, scope: !6588)
!6591 = !DILocation(line: 1857, column: 10, scope: !6588)
!6592 = !DILocation(line: 1857, column: 21, scope: !6593)
!6593 = distinct !DILexicalBlock(scope: !6588, file: !1, line: 1857, column: 5)
!6594 = !DILocation(line: 1857, column: 25, scope: !6593)
!6595 = !DILocation(line: 1857, column: 23, scope: !6593)
!6596 = !DILocation(line: 1857, column: 5, scope: !6588)
!6597 = !DILocation(line: 1858, column: 15, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6599, file: !1, line: 1858, column: 6)
!6599 = distinct !DILexicalBlock(scope: !6593, file: !1, line: 1857, column: 33)
!6600 = !DILocation(line: 1858, column: 17, scope: !6598)
!6601 = !DILocation(line: 1858, column: 13, scope: !6598)
!6602 = !DILocation(line: 1858, column: 11, scope: !6598)
!6603 = !DILocation(line: 1858, column: 22, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6598, file: !1, line: 1858, column: 6)
!6605 = !DILocation(line: 1858, column: 26, scope: !6604)
!6606 = !DILocation(line: 1858, column: 24, scope: !6604)
!6607 = !DILocation(line: 1858, column: 6, scope: !6598)
!6608 = !DILocation(line: 1859, column: 18, scope: !6609)
!6609 = distinct !DILexicalBlock(scope: !6604, file: !1, line: 1858, column: 34)
!6610 = !DILocation(line: 1859, column: 20, scope: !6609)
!6611 = !DILocation(line: 1859, column: 27, scope: !6609)
!6612 = !DILocation(line: 1859, column: 25, scope: !6609)
!6613 = !DILocation(line: 1859, column: 30, scope: !6609)
!6614 = !DILocation(line: 1859, column: 23, scope: !6609)
!6615 = !DILocation(line: 1859, column: 7, scope: !6609)
!6616 = !DILocation(line: 1859, column: 12, scope: !6609)
!6617 = !DILocation(line: 1859, column: 15, scope: !6609)
!6618 = !DILocation(line: 1860, column: 6, scope: !6609)
!6619 = !DILocation(line: 1858, column: 30, scope: !6604)
!6620 = !DILocation(line: 1858, column: 6, scope: !6604)
!6621 = distinct !{!6621, !6607, !6622}
!6622 = !DILocation(line: 1860, column: 6, scope: !6598)
!6623 = !DILocation(line: 1861, column: 5, scope: !6599)
!6624 = !DILocation(line: 1857, column: 29, scope: !6593)
!6625 = !DILocation(line: 1857, column: 5, scope: !6593)
!6626 = distinct !{!6626, !6596, !6627}
!6627 = !DILocation(line: 1861, column: 5, scope: !6588)
!6628 = !DILocation(line: 1862, column: 21, scope: !6566)
!6629 = !DILocation(line: 1862, column: 23, scope: !6566)
!6630 = !DILocation(line: 1862, column: 25, scope: !6566)
!6631 = !DILocation(line: 1862, column: 19, scope: !6566)
!6632 = !DILocation(line: 1862, column: 12, scope: !6566)
!6633 = !DILocation(line: 1863, column: 14, scope: !6634)
!6634 = distinct !DILexicalBlock(scope: !6566, file: !1, line: 1863, column: 5)
!6635 = !DILocation(line: 1863, column: 16, scope: !6634)
!6636 = !DILocation(line: 1863, column: 12, scope: !6634)
!6637 = !DILocation(line: 1863, column: 10, scope: !6634)
!6638 = !DILocation(line: 1863, column: 21, scope: !6639)
!6639 = distinct !DILexicalBlock(scope: !6634, file: !1, line: 1863, column: 5)
!6640 = !DILocation(line: 1863, column: 25, scope: !6639)
!6641 = !DILocation(line: 1863, column: 23, scope: !6639)
!6642 = !DILocation(line: 1863, column: 5, scope: !6634)
!6643 = !DILocalVariable(name: "t", scope: !6644, file: !1, line: 1864, type: !4)
!6644 = distinct !DILexicalBlock(scope: !6639, file: !1, line: 1863, column: 33)
!6645 = !DILocation(line: 1864, column: 12, scope: !6644)
!6646 = !DILocation(line: 1864, column: 17, scope: !6644)
!6647 = !DILocation(line: 1864, column: 19, scope: !6644)
!6648 = !DILocation(line: 1864, column: 16, scope: !6644)
!6649 = !DILocation(line: 1864, column: 24, scope: !6644)
!6650 = !DILocation(line: 1864, column: 22, scope: !6644)
!6651 = !DILocation(line: 1865, column: 15, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6644, file: !1, line: 1865, column: 6)
!6653 = !DILocation(line: 1865, column: 17, scope: !6652)
!6654 = !DILocation(line: 1865, column: 13, scope: !6652)
!6655 = !DILocation(line: 1865, column: 11, scope: !6652)
!6656 = !DILocation(line: 1865, column: 22, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6652, file: !1, line: 1865, column: 6)
!6658 = !DILocation(line: 1865, column: 26, scope: !6657)
!6659 = !DILocation(line: 1865, column: 24, scope: !6657)
!6660 = !DILocation(line: 1865, column: 6, scope: !6652)
!6661 = !DILocation(line: 1866, column: 18, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6657, file: !1, line: 1865, column: 34)
!6663 = !DILocation(line: 1866, column: 22, scope: !6662)
!6664 = !DILocation(line: 1866, column: 27, scope: !6662)
!6665 = !DILocation(line: 1866, column: 20, scope: !6662)
!6666 = !DILocation(line: 1866, column: 9, scope: !6662)
!6667 = !DILocation(line: 1866, column: 7, scope: !6662)
!6668 = !DILocation(line: 1866, column: 12, scope: !6662)
!6669 = !DILocation(line: 1866, column: 15, scope: !6662)
!6670 = !DILocation(line: 1867, column: 6, scope: !6662)
!6671 = !DILocation(line: 1865, column: 30, scope: !6657)
!6672 = !DILocation(line: 1865, column: 6, scope: !6657)
!6673 = distinct !{!6673, !6660, !6674}
!6674 = !DILocation(line: 1867, column: 6, scope: !6652)
!6675 = !DILocation(line: 1868, column: 5, scope: !6644)
!6676 = !DILocation(line: 1863, column: 29, scope: !6639)
!6677 = !DILocation(line: 1863, column: 5, scope: !6639)
!6678 = distinct !{!6678, !6642, !6679}
!6679 = !DILocation(line: 1868, column: 5, scope: !6634)
!6680 = !DILocation(line: 1869, column: 4, scope: !6566)
!6681 = !DILocation(line: 1874, column: 13, scope: !6682)
!6682 = distinct !DILexicalBlock(scope: !6471, file: !1, line: 1874, column: 4)
!6683 = !DILocation(line: 1874, column: 15, scope: !6682)
!6684 = !DILocation(line: 1874, column: 11, scope: !6682)
!6685 = !DILocation(line: 1874, column: 9, scope: !6682)
!6686 = !DILocation(line: 1874, column: 20, scope: !6687)
!6687 = distinct !DILexicalBlock(scope: !6682, file: !1, line: 1874, column: 4)
!6688 = !DILocation(line: 1874, column: 24, scope: !6687)
!6689 = !DILocation(line: 1874, column: 22, scope: !6687)
!6690 = !DILocation(line: 1874, column: 4, scope: !6682)
!6691 = !DILocation(line: 1875, column: 15, scope: !6687)
!6692 = !DILocation(line: 1875, column: 17, scope: !6687)
!6693 = !DILocation(line: 1875, column: 5, scope: !6687)
!6694 = !DILocation(line: 1875, column: 7, scope: !6687)
!6695 = !DILocation(line: 1875, column: 10, scope: !6687)
!6696 = !DILocation(line: 1875, column: 13, scope: !6687)
!6697 = !DILocation(line: 1874, column: 28, scope: !6687)
!6698 = !DILocation(line: 1874, column: 4, scope: !6687)
!6699 = distinct !{!6699, !6690, !6700}
!6700 = !DILocation(line: 1875, column: 18, scope: !6682)
!6701 = !DILocation(line: 1876, column: 3, scope: !6471)
!6702 = !DILocation(line: 1877, column: 2, scope: !6259)
!6703 = !DILocation(line: 1777, column: 37, scope: !6251)
!6704 = !DILocation(line: 1777, column: 2, scope: !6251)
!6705 = distinct !{!6705, !6256, !6706}
!6706 = !DILocation(line: 1877, column: 2, scope: !6248)
!6707 = !DILocation(line: 1881, column: 13, scope: !6179)
!6708 = !DILocation(line: 1881, column: 16, scope: !6179)
!6709 = !DILocation(line: 1881, column: 18, scope: !6179)
!6710 = !DILocation(line: 1881, column: 6, scope: !6179)
!6711 = !DILocation(line: 1881, column: 4, scope: !6179)
!6712 = !DILocation(line: 1882, column: 6, scope: !6713)
!6713 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1882, column: 6)
!6714 = !DILocation(line: 1882, column: 12, scope: !6713)
!6715 = !DILocation(line: 1882, column: 10, scope: !6713)
!6716 = !DILocation(line: 1882, column: 6, scope: !6179)
!6717 = !DILocation(line: 1883, column: 14, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6713, file: !1, line: 1882, column: 15)
!6719 = !DILocation(line: 1883, column: 12, scope: !6718)
!6720 = !DILocation(line: 1883, column: 19, scope: !6718)
!6721 = !DILocation(line: 1883, column: 3, scope: !6718)
!6722 = !DILocation(line: 1883, column: 5, scope: !6718)
!6723 = !DILocation(line: 1883, column: 10, scope: !6718)
!6724 = !DILocation(line: 1884, column: 2, scope: !6718)
!6725 = !DILocation(line: 1885, column: 6, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1885, column: 6)
!6727 = !DILocation(line: 1885, column: 10, scope: !6726)
!6728 = !DILocation(line: 1885, column: 8, scope: !6726)
!6729 = !DILocation(line: 1885, column: 6, scope: !6179)
!6730 = !DILocation(line: 1886, column: 3, scope: !6731)
!6731 = distinct !DILexicalBlock(scope: !6726, file: !1, line: 1885, column: 13)
!6732 = !DILocation(line: 1886, column: 5, scope: !6731)
!6733 = !DILocation(line: 1886, column: 7, scope: !6731)
!6734 = !DILocation(line: 1886, column: 12, scope: !6731)
!6735 = !DILocation(line: 1887, column: 2, scope: !6731)
!6736 = !DILocation(line: 1888, column: 6, scope: !6737)
!6737 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1888, column: 6)
!6738 = !DILocation(line: 1888, column: 10, scope: !6737)
!6739 = !DILocation(line: 1888, column: 16, scope: !6737)
!6740 = !DILocation(line: 1888, column: 14, scope: !6737)
!6741 = !DILocation(line: 1888, column: 6, scope: !6179)
!6742 = !DILocation(line: 1889, column: 14, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6737, file: !1, line: 1888, column: 19)
!6744 = !DILocation(line: 1889, column: 12, scope: !6743)
!6745 = !DILocation(line: 1889, column: 19, scope: !6743)
!6746 = !DILocation(line: 1889, column: 21, scope: !6743)
!6747 = !DILocation(line: 1889, column: 3, scope: !6743)
!6748 = !DILocation(line: 1889, column: 5, scope: !6743)
!6749 = !DILocation(line: 1889, column: 10, scope: !6743)
!6750 = !DILocation(line: 1890, column: 2, scope: !6743)
!6751 = !DILocation(line: 1891, column: 2, scope: !6179)
!6752 = !DILocation(line: 1891, column: 4, scope: !6179)
!6753 = !DILocation(line: 1891, column: 6, scope: !6179)
!6754 = !DILocation(line: 1891, column: 11, scope: !6179)
!6755 = !DILocation(line: 1895, column: 11, scope: !6756)
!6756 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1895, column: 2)
!6757 = !DILocation(line: 1895, column: 9, scope: !6756)
!6758 = !DILocation(line: 1895, column: 7, scope: !6756)
!6759 = !DILocation(line: 1895, column: 16, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6756, file: !1, line: 1895, column: 2)
!6761 = !DILocation(line: 1895, column: 20, scope: !6760)
!6762 = !DILocation(line: 1895, column: 18, scope: !6760)
!6763 = !DILocation(line: 1895, column: 2, scope: !6756)
!6764 = !DILocation(line: 1896, column: 10, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !6766, file: !1, line: 1896, column: 3)
!6766 = distinct !DILexicalBlock(scope: !6760, file: !1, line: 1895, column: 29)
!6767 = !DILocation(line: 1896, column: 8, scope: !6765)
!6768 = !DILocation(line: 1896, column: 15, scope: !6769)
!6769 = distinct !DILexicalBlock(scope: !6765, file: !1, line: 1896, column: 3)
!6770 = !DILocation(line: 1896, column: 19, scope: !6769)
!6771 = !DILocation(line: 1896, column: 17, scope: !6769)
!6772 = !DILocation(line: 1896, column: 3, scope: !6765)
!6773 = !DILocation(line: 1897, column: 4, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6769, file: !1, line: 1896, column: 27)
!6775 = !DILocation(line: 1897, column: 6, scope: !6774)
!6776 = !DILocation(line: 1897, column: 9, scope: !6774)
!6777 = !DILocation(line: 1897, column: 12, scope: !6774)
!6778 = !DILocation(line: 1898, column: 3, scope: !6774)
!6779 = !DILocation(line: 1896, column: 23, scope: !6769)
!6780 = !DILocation(line: 1896, column: 3, scope: !6769)
!6781 = distinct !{!6781, !6772, !6782}
!6782 = !DILocation(line: 1898, column: 3, scope: !6765)
!6783 = !DILocation(line: 1899, column: 3, scope: !6766)
!6784 = !DILocation(line: 1899, column: 5, scope: !6766)
!6785 = !DILocation(line: 1899, column: 8, scope: !6766)
!6786 = !DILocation(line: 1899, column: 11, scope: !6766)
!6787 = !DILocation(line: 1900, column: 2, scope: !6766)
!6788 = !DILocation(line: 1895, column: 25, scope: !6760)
!6789 = !DILocation(line: 1895, column: 2, scope: !6760)
!6790 = distinct !{!6790, !6763, !6791}
!6791 = !DILocation(line: 1900, column: 2, scope: !6756)
!6792 = !DILocation(line: 1901, column: 11, scope: !6793)
!6793 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1901, column: 2)
!6794 = !DILocation(line: 1901, column: 15, scope: !6793)
!6795 = !DILocation(line: 1901, column: 9, scope: !6793)
!6796 = !DILocation(line: 1901, column: 7, scope: !6793)
!6797 = !DILocation(line: 1901, column: 20, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6793, file: !1, line: 1901, column: 2)
!6799 = !DILocation(line: 1901, column: 22, scope: !6798)
!6800 = !DILocation(line: 1901, column: 2, scope: !6793)
!6801 = !DILocation(line: 1902, column: 7, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6803, file: !1, line: 1902, column: 7)
!6803 = distinct !DILexicalBlock(scope: !6798, file: !1, line: 1901, column: 33)
!6804 = !DILocation(line: 1902, column: 9, scope: !6802)
!6805 = !DILocation(line: 1902, column: 12, scope: !6802)
!6806 = !DILocation(line: 1902, column: 7, scope: !6803)
!6807 = !DILocation(line: 1903, column: 13, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6809, file: !1, line: 1903, column: 4)
!6809 = distinct !DILexicalBlock(scope: !6802, file: !1, line: 1902, column: 21)
!6810 = !DILocation(line: 1903, column: 15, scope: !6808)
!6811 = !DILocation(line: 1903, column: 11, scope: !6808)
!6812 = !DILocation(line: 1903, column: 9, scope: !6808)
!6813 = !DILocation(line: 1903, column: 20, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6808, file: !1, line: 1903, column: 4)
!6815 = !DILocation(line: 1903, column: 24, scope: !6814)
!6816 = !DILocation(line: 1903, column: 22, scope: !6814)
!6817 = !DILocation(line: 1903, column: 4, scope: !6808)
!6818 = !DILocalVariable(name: "t", scope: !6819, file: !1, line: 1904, type: !4)
!6819 = distinct !DILexicalBlock(scope: !6814, file: !1, line: 1903, column: 33)
!6820 = !DILocation(line: 1904, column: 11, scope: !6819)
!6821 = !DILocation(line: 1905, column: 14, scope: !6822)
!6822 = distinct !DILexicalBlock(scope: !6819, file: !1, line: 1905, column: 5)
!6823 = !DILocation(line: 1905, column: 12, scope: !6822)
!6824 = !DILocation(line: 1905, column: 10, scope: !6822)
!6825 = !DILocation(line: 1905, column: 17, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6822, file: !1, line: 1905, column: 5)
!6827 = !DILocation(line: 1905, column: 21, scope: !6826)
!6828 = !DILocation(line: 1905, column: 19, scope: !6826)
!6829 = !DILocation(line: 1905, column: 5, scope: !6822)
!6830 = !DILocation(line: 1906, column: 11, scope: !6831)
!6831 = distinct !DILexicalBlock(scope: !6826, file: !1, line: 1905, column: 29)
!6832 = !DILocation(line: 1906, column: 13, scope: !6831)
!6833 = !DILocation(line: 1906, column: 16, scope: !6831)
!6834 = !DILocation(line: 1906, column: 21, scope: !6831)
!6835 = !DILocation(line: 1906, column: 23, scope: !6831)
!6836 = !DILocation(line: 1906, column: 26, scope: !6831)
!6837 = !DILocation(line: 1906, column: 19, scope: !6831)
!6838 = !DILocation(line: 1906, column: 8, scope: !6831)
!6839 = !DILocation(line: 1907, column: 5, scope: !6831)
!6840 = !DILocation(line: 1905, column: 25, scope: !6826)
!6841 = !DILocation(line: 1905, column: 5, scope: !6826)
!6842 = distinct !{!6842, !6829, !6843}
!6843 = !DILocation(line: 1907, column: 5, scope: !6822)
!6844 = !DILocation(line: 1908, column: 10, scope: !6819)
!6845 = !DILocation(line: 1908, column: 9, scope: !6819)
!6846 = !DILocation(line: 1908, column: 14, scope: !6819)
!6847 = !DILocation(line: 1908, column: 16, scope: !6819)
!6848 = !DILocation(line: 1908, column: 19, scope: !6819)
!6849 = !DILocation(line: 1908, column: 12, scope: !6819)
!6850 = !DILocation(line: 1908, column: 7, scope: !6819)
!6851 = !DILocation(line: 1909, column: 14, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6819, file: !1, line: 1909, column: 5)
!6853 = !DILocation(line: 1909, column: 12, scope: !6852)
!6854 = !DILocation(line: 1909, column: 10, scope: !6852)
!6855 = !DILocation(line: 1909, column: 17, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6852, file: !1, line: 1909, column: 5)
!6857 = !DILocation(line: 1909, column: 21, scope: !6856)
!6858 = !DILocation(line: 1909, column: 19, scope: !6856)
!6859 = !DILocation(line: 1909, column: 5, scope: !6852)
!6860 = !DILocation(line: 1910, column: 17, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6856, file: !1, line: 1909, column: 29)
!6862 = !DILocation(line: 1910, column: 21, scope: !6861)
!6863 = !DILocation(line: 1910, column: 23, scope: !6861)
!6864 = !DILocation(line: 1910, column: 26, scope: !6861)
!6865 = !DILocation(line: 1910, column: 19, scope: !6861)
!6866 = !DILocation(line: 1910, column: 6, scope: !6861)
!6867 = !DILocation(line: 1910, column: 8, scope: !6861)
!6868 = !DILocation(line: 1910, column: 11, scope: !6861)
!6869 = !DILocation(line: 1910, column: 14, scope: !6861)
!6870 = !DILocation(line: 1911, column: 5, scope: !6861)
!6871 = !DILocation(line: 1909, column: 25, scope: !6856)
!6872 = !DILocation(line: 1909, column: 5, scope: !6856)
!6873 = distinct !{!6873, !6859, !6874}
!6874 = !DILocation(line: 1911, column: 5, scope: !6852)
!6875 = !DILocation(line: 1912, column: 4, scope: !6819)
!6876 = !DILocation(line: 1903, column: 29, scope: !6814)
!6877 = !DILocation(line: 1903, column: 4, scope: !6814)
!6878 = distinct !{!6878, !6817, !6879}
!6879 = !DILocation(line: 1912, column: 4, scope: !6808)
!6880 = !DILocation(line: 1913, column: 13, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6809, file: !1, line: 1913, column: 4)
!6882 = !DILocation(line: 1913, column: 11, scope: !6881)
!6883 = !DILocation(line: 1913, column: 9, scope: !6881)
!6884 = !DILocation(line: 1913, column: 16, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6881, file: !1, line: 1913, column: 4)
!6886 = !DILocation(line: 1913, column: 20, scope: !6885)
!6887 = !DILocation(line: 1913, column: 18, scope: !6885)
!6888 = !DILocation(line: 1913, column: 4, scope: !6881)
!6889 = !DILocation(line: 1914, column: 16, scope: !6890)
!6890 = distinct !DILexicalBlock(scope: !6885, file: !1, line: 1913, column: 28)
!6891 = !DILocation(line: 1914, column: 18, scope: !6890)
!6892 = !DILocation(line: 1914, column: 21, scope: !6890)
!6893 = !DILocation(line: 1914, column: 15, scope: !6890)
!6894 = !DILocation(line: 1914, column: 5, scope: !6890)
!6895 = !DILocation(line: 1914, column: 7, scope: !6890)
!6896 = !DILocation(line: 1914, column: 10, scope: !6890)
!6897 = !DILocation(line: 1914, column: 13, scope: !6890)
!6898 = !DILocation(line: 1915, column: 4, scope: !6890)
!6899 = !DILocation(line: 1913, column: 24, scope: !6885)
!6900 = !DILocation(line: 1913, column: 4, scope: !6885)
!6901 = distinct !{!6901, !6888, !6902}
!6902 = !DILocation(line: 1915, column: 4, scope: !6881)
!6903 = !DILocation(line: 1916, column: 21, scope: !6809)
!6904 = !DILocation(line: 1916, column: 23, scope: !6809)
!6905 = !DILocation(line: 1916, column: 26, scope: !6809)
!6906 = !DILocation(line: 1916, column: 19, scope: !6809)
!6907 = !DILocation(line: 1916, column: 4, scope: !6809)
!6908 = !DILocation(line: 1916, column: 6, scope: !6809)
!6909 = !DILocation(line: 1916, column: 9, scope: !6809)
!6910 = !DILocation(line: 1916, column: 12, scope: !6809)
!6911 = !DILocation(line: 1917, column: 11, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6809, file: !1, line: 1917, column: 4)
!6913 = !DILocation(line: 1917, column: 9, scope: !6912)
!6914 = !DILocation(line: 1917, column: 16, scope: !6915)
!6915 = distinct !DILexicalBlock(scope: !6912, file: !1, line: 1917, column: 4)
!6916 = !DILocation(line: 1917, column: 20, scope: !6915)
!6917 = !DILocation(line: 1917, column: 22, scope: !6915)
!6918 = !DILocation(line: 1917, column: 18, scope: !6915)
!6919 = !DILocation(line: 1917, column: 4, scope: !6912)
!6920 = !DILocation(line: 1918, column: 5, scope: !6921)
!6921 = distinct !DILexicalBlock(scope: !6915, file: !1, line: 1917, column: 32)
!6922 = !DILocation(line: 1918, column: 7, scope: !6921)
!6923 = !DILocation(line: 1918, column: 10, scope: !6921)
!6924 = !DILocation(line: 1918, column: 13, scope: !6921)
!6925 = !DILocation(line: 1919, column: 4, scope: !6921)
!6926 = !DILocation(line: 1917, column: 28, scope: !6915)
!6927 = !DILocation(line: 1917, column: 4, scope: !6915)
!6928 = distinct !{!6928, !6919, !6929}
!6929 = !DILocation(line: 1919, column: 4, scope: !6912)
!6930 = !DILocation(line: 1920, column: 3, scope: !6809)
!6931 = !DILocation(line: 1922, column: 11, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6933, file: !1, line: 1922, column: 4)
!6933 = distinct !DILexicalBlock(scope: !6802, file: !1, line: 1921, column: 8)
!6934 = !DILocation(line: 1922, column: 9, scope: !6932)
!6935 = !DILocation(line: 1922, column: 16, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6932, file: !1, line: 1922, column: 4)
!6937 = !DILocation(line: 1922, column: 20, scope: !6936)
!6938 = !DILocation(line: 1922, column: 18, scope: !6936)
!6939 = !DILocation(line: 1922, column: 4, scope: !6932)
!6940 = !DILocation(line: 1923, column: 5, scope: !6941)
!6941 = distinct !DILexicalBlock(scope: !6936, file: !1, line: 1922, column: 28)
!6942 = !DILocation(line: 1923, column: 7, scope: !6941)
!6943 = !DILocation(line: 1923, column: 10, scope: !6941)
!6944 = !DILocation(line: 1923, column: 13, scope: !6941)
!6945 = !DILocation(line: 1924, column: 4, scope: !6941)
!6946 = !DILocation(line: 1922, column: 24, scope: !6936)
!6947 = !DILocation(line: 1922, column: 4, scope: !6936)
!6948 = distinct !{!6948, !6939, !6949}
!6949 = !DILocation(line: 1924, column: 4, scope: !6932)
!6950 = !DILocation(line: 1925, column: 4, scope: !6933)
!6951 = !DILocation(line: 1925, column: 6, scope: !6933)
!6952 = !DILocation(line: 1925, column: 9, scope: !6933)
!6953 = !DILocation(line: 1925, column: 12, scope: !6933)
!6954 = !DILocation(line: 1927, column: 2, scope: !6803)
!6955 = !DILocation(line: 1901, column: 29, scope: !6798)
!6956 = !DILocation(line: 1901, column: 2, scope: !6798)
!6957 = distinct !{!6957, !6800, !6958}
!6958 = !DILocation(line: 1927, column: 2, scope: !6793)
!6959 = !DILocation(line: 1931, column: 11, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1931, column: 2)
!6961 = !DILocation(line: 1931, column: 13, scope: !6960)
!6962 = !DILocation(line: 1931, column: 9, scope: !6960)
!6963 = !DILocation(line: 1931, column: 7, scope: !6960)
!6964 = !DILocation(line: 1931, column: 18, scope: !6965)
!6965 = distinct !DILexicalBlock(scope: !6960, file: !1, line: 1931, column: 2)
!6966 = !DILocation(line: 1931, column: 20, scope: !6965)
!6967 = !DILocation(line: 1931, column: 2, scope: !6960)
!6968 = !DILocation(line: 1932, column: 8, scope: !6969)
!6969 = distinct !DILexicalBlock(scope: !6970, file: !1, line: 1932, column: 7)
!6970 = distinct !DILexicalBlock(scope: !6965, file: !1, line: 1931, column: 31)
!6971 = !DILocation(line: 1932, column: 12, scope: !6969)
!6972 = !DILocation(line: 1932, column: 10, scope: !6969)
!6973 = !DILocation(line: 1932, column: 20, scope: !6969)
!6974 = !DILocation(line: 1932, column: 22, scope: !6969)
!6975 = !DILocation(line: 1932, column: 25, scope: !6969)
!6976 = !DILocation(line: 1932, column: 17, scope: !6969)
!6977 = !DILocation(line: 1932, column: 7, scope: !6970)
!6978 = !DILocation(line: 1933, column: 13, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6980, file: !1, line: 1933, column: 4)
!6980 = distinct !DILexicalBlock(scope: !6969, file: !1, line: 1932, column: 35)
!6981 = !DILocation(line: 1933, column: 15, scope: !6979)
!6982 = !DILocation(line: 1933, column: 11, scope: !6979)
!6983 = !DILocation(line: 1933, column: 9, scope: !6979)
!6984 = !DILocation(line: 1933, column: 20, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6979, file: !1, line: 1933, column: 4)
!6986 = !DILocation(line: 1933, column: 24, scope: !6985)
!6987 = !DILocation(line: 1933, column: 22, scope: !6985)
!6988 = !DILocation(line: 1933, column: 4, scope: !6979)
!6989 = !DILocalVariable(name: "t", scope: !6990, file: !1, line: 1934, type: !4)
!6990 = distinct !DILexicalBlock(scope: !6985, file: !1, line: 1933, column: 33)
!6991 = !DILocation(line: 1934, column: 11, scope: !6990)
!6992 = !DILocation(line: 1935, column: 14, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6990, file: !1, line: 1935, column: 5)
!6994 = !DILocation(line: 1935, column: 16, scope: !6993)
!6995 = !DILocation(line: 1935, column: 12, scope: !6993)
!6996 = !DILocation(line: 1935, column: 10, scope: !6993)
!6997 = !DILocation(line: 1935, column: 21, scope: !6998)
!6998 = distinct !DILexicalBlock(scope: !6993, file: !1, line: 1935, column: 5)
!6999 = !DILocation(line: 1935, column: 25, scope: !6998)
!7000 = !DILocation(line: 1935, column: 23, scope: !6998)
!7001 = !DILocation(line: 1935, column: 5, scope: !6993)
!7002 = !DILocation(line: 1936, column: 11, scope: !7003)
!7003 = distinct !DILexicalBlock(scope: !6998, file: !1, line: 1935, column: 33)
!7004 = !DILocation(line: 1936, column: 13, scope: !7003)
!7005 = !DILocation(line: 1936, column: 16, scope: !7003)
!7006 = !DILocation(line: 1936, column: 21, scope: !7003)
!7007 = !DILocation(line: 1936, column: 23, scope: !7003)
!7008 = !DILocation(line: 1936, column: 26, scope: !7003)
!7009 = !DILocation(line: 1936, column: 19, scope: !7003)
!7010 = !DILocation(line: 1936, column: 8, scope: !7003)
!7011 = !DILocation(line: 1937, column: 5, scope: !7003)
!7012 = !DILocation(line: 1935, column: 29, scope: !6998)
!7013 = !DILocation(line: 1935, column: 5, scope: !6998)
!7014 = distinct !{!7014, !7001, !7015}
!7015 = !DILocation(line: 1937, column: 5, scope: !6993)
!7016 = !DILocation(line: 1938, column: 10, scope: !6990)
!7017 = !DILocation(line: 1938, column: 9, scope: !6990)
!7018 = !DILocation(line: 1938, column: 14, scope: !6990)
!7019 = !DILocation(line: 1938, column: 16, scope: !6990)
!7020 = !DILocation(line: 1938, column: 18, scope: !6990)
!7021 = !DILocation(line: 1938, column: 23, scope: !6990)
!7022 = !DILocation(line: 1938, column: 12, scope: !6990)
!7023 = !DILocation(line: 1938, column: 7, scope: !6990)
!7024 = !DILocation(line: 1939, column: 14, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !6990, file: !1, line: 1939, column: 5)
!7026 = !DILocation(line: 1939, column: 16, scope: !7025)
!7027 = !DILocation(line: 1939, column: 12, scope: !7025)
!7028 = !DILocation(line: 1939, column: 10, scope: !7025)
!7029 = !DILocation(line: 1939, column: 21, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !7025, file: !1, line: 1939, column: 5)
!7031 = !DILocation(line: 1939, column: 25, scope: !7030)
!7032 = !DILocation(line: 1939, column: 23, scope: !7030)
!7033 = !DILocation(line: 1939, column: 5, scope: !7025)
!7034 = !DILocation(line: 1940, column: 17, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !7030, file: !1, line: 1939, column: 33)
!7036 = !DILocation(line: 1940, column: 21, scope: !7035)
!7037 = !DILocation(line: 1940, column: 23, scope: !7035)
!7038 = !DILocation(line: 1940, column: 26, scope: !7035)
!7039 = !DILocation(line: 1940, column: 19, scope: !7035)
!7040 = !DILocation(line: 1940, column: 6, scope: !7035)
!7041 = !DILocation(line: 1940, column: 8, scope: !7035)
!7042 = !DILocation(line: 1940, column: 11, scope: !7035)
!7043 = !DILocation(line: 1940, column: 14, scope: !7035)
!7044 = !DILocation(line: 1941, column: 5, scope: !7035)
!7045 = !DILocation(line: 1939, column: 29, scope: !7030)
!7046 = !DILocation(line: 1939, column: 5, scope: !7030)
!7047 = distinct !{!7047, !7033, !7048}
!7048 = !DILocation(line: 1941, column: 5, scope: !7025)
!7049 = !DILocation(line: 1942, column: 4, scope: !6990)
!7050 = !DILocation(line: 1933, column: 29, scope: !6985)
!7051 = !DILocation(line: 1933, column: 4, scope: !6985)
!7052 = distinct !{!7052, !6988, !7053}
!7053 = !DILocation(line: 1942, column: 4, scope: !6979)
!7054 = !DILocation(line: 1943, column: 3, scope: !6980)
!7055 = !DILocation(line: 1944, column: 10, scope: !7056)
!7056 = distinct !DILexicalBlock(scope: !6970, file: !1, line: 1944, column: 3)
!7057 = !DILocation(line: 1944, column: 8, scope: !7056)
!7058 = !DILocation(line: 1944, column: 15, scope: !7059)
!7059 = distinct !DILexicalBlock(scope: !7056, file: !1, line: 1944, column: 3)
!7060 = !DILocation(line: 1944, column: 19, scope: !7059)
!7061 = !DILocation(line: 1944, column: 17, scope: !7059)
!7062 = !DILocation(line: 1944, column: 3, scope: !7056)
!7063 = !DILocation(line: 1945, column: 4, scope: !7064)
!7064 = distinct !DILexicalBlock(scope: !7059, file: !1, line: 1944, column: 27)
!7065 = !DILocation(line: 1945, column: 6, scope: !7064)
!7066 = !DILocation(line: 1945, column: 9, scope: !7064)
!7067 = !DILocation(line: 1945, column: 12, scope: !7064)
!7068 = !DILocation(line: 1946, column: 3, scope: !7064)
!7069 = !DILocation(line: 1944, column: 23, scope: !7059)
!7070 = !DILocation(line: 1944, column: 3, scope: !7059)
!7071 = distinct !{!7071, !7062, !7072}
!7072 = !DILocation(line: 1946, column: 3, scope: !7056)
!7073 = !DILocation(line: 1947, column: 3, scope: !6970)
!7074 = !DILocation(line: 1947, column: 5, scope: !6970)
!7075 = !DILocation(line: 1947, column: 8, scope: !6970)
!7076 = !DILocation(line: 1947, column: 11, scope: !6970)
!7077 = !DILocation(line: 1948, column: 2, scope: !6970)
!7078 = !DILocation(line: 1931, column: 27, scope: !6965)
!7079 = !DILocation(line: 1931, column: 2, scope: !6965)
!7080 = distinct !{!7080, !6967, !7081}
!7081 = !DILocation(line: 1948, column: 2, scope: !6960)
!7082 = !DILocation(line: 1952, column: 7, scope: !6179)
!7083 = !DILocation(line: 1952, column: 9, scope: !6179)
!7084 = !DILocation(line: 1952, column: 5, scope: !6179)
!7085 = !DILocation(line: 1953, column: 7, scope: !6179)
!7086 = !DILocation(line: 1954, column: 8, scope: !6179)
!7087 = !DILocation(line: 1954, column: 6, scope: !6179)
!7088 = !DILocation(line: 1955, column: 2, scope: !6179)
!7089 = !DILocation(line: 1955, column: 9, scope: !6179)
!7090 = !DILocation(line: 1955, column: 11, scope: !6179)
!7091 = !DILocalVariable(name: "kase", scope: !7092, file: !1, line: 1956, type: !296)
!7092 = distinct !DILexicalBlock(scope: !6179, file: !1, line: 1955, column: 16)
!7093 = !DILocation(line: 1956, column: 7, scope: !7092)
!7094 = !DILocation(line: 1959, column: 7, scope: !7095)
!7095 = distinct !DILexicalBlock(scope: !7092, file: !1, line: 1959, column: 7)
!7096 = !DILocation(line: 1959, column: 15, scope: !7095)
!7097 = !DILocation(line: 1959, column: 7, scope: !7092)
!7098 = !DILocation(line: 1960, column: 4, scope: !7095)
!7099 = !DILocation(line: 1961, column: 10, scope: !7092)
!7100 = !DILocation(line: 1973, column: 12, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7092, file: !1, line: 1973, column: 3)
!7102 = !DILocation(line: 1973, column: 14, scope: !7101)
!7103 = !DILocation(line: 1973, column: 10, scope: !7101)
!7104 = !DILocation(line: 1973, column: 8, scope: !7101)
!7105 = !DILocation(line: 1973, column: 19, scope: !7106)
!7106 = distinct !DILexicalBlock(scope: !7101, file: !1, line: 1973, column: 3)
!7107 = !DILocation(line: 1973, column: 21, scope: !7106)
!7108 = !DILocation(line: 1973, column: 3, scope: !7101)
!7109 = !DILocation(line: 1974, column: 8, scope: !7110)
!7110 = distinct !DILexicalBlock(scope: !7111, file: !1, line: 1974, column: 8)
!7111 = distinct !DILexicalBlock(scope: !7106, file: !1, line: 1973, column: 33)
!7112 = !DILocation(line: 1974, column: 10, scope: !7110)
!7113 = !DILocation(line: 1974, column: 8, scope: !7111)
!7114 = !DILocation(line: 1975, column: 5, scope: !7115)
!7115 = distinct !DILexicalBlock(scope: !7110, file: !1, line: 1974, column: 17)
!7116 = !DILocation(line: 1977, column: 14, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7111, file: !1, line: 1977, column: 8)
!7118 = !DILocation(line: 1977, column: 16, scope: !7117)
!7119 = !DILocation(line: 1977, column: 8, scope: !7117)
!7120 = !DILocation(line: 1977, column: 23, scope: !7117)
!7121 = !DILocation(line: 1977, column: 36, scope: !7117)
!7122 = !DILocation(line: 1977, column: 38, scope: !7117)
!7123 = !DILocation(line: 1977, column: 30, scope: !7117)
!7124 = !DILocation(line: 1977, column: 50, scope: !7117)
!7125 = !DILocation(line: 1977, column: 52, scope: !7117)
!7126 = !DILocation(line: 1977, column: 54, scope: !7117)
!7127 = !DILocation(line: 1977, column: 44, scope: !7117)
!7128 = !DILocation(line: 1977, column: 42, scope: !7117)
!7129 = !DILocation(line: 1977, column: 27, scope: !7117)
!7130 = !DILocation(line: 1977, column: 20, scope: !7117)
!7131 = !DILocation(line: 1977, column: 8, scope: !7111)
!7132 = !DILocation(line: 1978, column: 5, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7117, file: !1, line: 1977, column: 62)
!7134 = !DILocation(line: 1978, column: 7, scope: !7133)
!7135 = !DILocation(line: 1978, column: 10, scope: !7133)
!7136 = !DILocation(line: 1979, column: 5, scope: !7133)
!7137 = !DILocation(line: 1981, column: 3, scope: !7111)
!7138 = !DILocation(line: 1973, column: 29, scope: !7106)
!7139 = !DILocation(line: 1973, column: 3, scope: !7106)
!7140 = distinct !{!7140, !7108, !7141}
!7141 = !DILocation(line: 1981, column: 3, scope: !7101)
!7142 = !DILocation(line: 1982, column: 7, scope: !7143)
!7143 = distinct !DILexicalBlock(scope: !7092, file: !1, line: 1982, column: 7)
!7144 = !DILocation(line: 1982, column: 12, scope: !7143)
!7145 = !DILocation(line: 1982, column: 14, scope: !7143)
!7146 = !DILocation(line: 1982, column: 9, scope: !7143)
!7147 = !DILocation(line: 1982, column: 7, scope: !7092)
!7148 = !DILocation(line: 1983, column: 9, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7143, file: !1, line: 1982, column: 19)
!7150 = !DILocation(line: 1984, column: 3, scope: !7149)
!7151 = !DILocalVariable(name: "ks", scope: !7152, file: !1, line: 1986, type: !296)
!7152 = distinct !DILexicalBlock(scope: !7143, file: !1, line: 1985, column: 8)
!7153 = !DILocation(line: 1986, column: 8, scope: !7152)
!7154 = !DILocation(line: 1987, column: 14, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7152, file: !1, line: 1987, column: 4)
!7156 = !DILocation(line: 1987, column: 16, scope: !7155)
!7157 = !DILocation(line: 1987, column: 12, scope: !7155)
!7158 = !DILocation(line: 1987, column: 9, scope: !7155)
!7159 = !DILocation(line: 1987, column: 21, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7155, file: !1, line: 1987, column: 4)
!7161 = !DILocation(line: 1987, column: 27, scope: !7160)
!7162 = !DILocation(line: 1987, column: 24, scope: !7160)
!7163 = !DILocation(line: 1987, column: 4, scope: !7155)
!7164 = !DILocalVariable(name: "t", scope: !7165, file: !1, line: 1988, type: !4)
!7165 = distinct !DILexicalBlock(scope: !7160, file: !1, line: 1987, column: 36)
!7166 = !DILocation(line: 1988, column: 11, scope: !7165)
!7167 = !DILocation(line: 1989, column: 9, scope: !7168)
!7168 = distinct !DILexicalBlock(scope: !7165, file: !1, line: 1989, column: 9)
!7169 = !DILocation(line: 1989, column: 15, scope: !7168)
!7170 = !DILocation(line: 1989, column: 12, scope: !7168)
!7171 = !DILocation(line: 1989, column: 9, scope: !7165)
!7172 = !DILocation(line: 1990, column: 6, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7168, file: !1, line: 1989, column: 18)
!7174 = !DILocation(line: 1992, column: 10, scope: !7165)
!7175 = !DILocation(line: 1992, column: 16, scope: !7165)
!7176 = !DILocation(line: 1992, column: 13, scope: !7165)
!7177 = !DILocation(line: 1992, column: 26, scope: !7165)
!7178 = !DILocation(line: 1992, column: 28, scope: !7165)
!7179 = !DILocation(line: 1992, column: 20, scope: !7165)
!7180 = !DILocation(line: 1993, column: 10, scope: !7165)
!7181 = !DILocation(line: 1993, column: 16, scope: !7165)
!7182 = !DILocation(line: 1993, column: 18, scope: !7165)
!7183 = !DILocation(line: 1993, column: 13, scope: !7165)
!7184 = !DILocation(line: 1993, column: 30, scope: !7165)
!7185 = !DILocation(line: 1993, column: 32, scope: !7165)
!7186 = !DILocation(line: 1993, column: 35, scope: !7165)
!7187 = !DILocation(line: 1993, column: 24, scope: !7165)
!7188 = !DILocation(line: 1992, column: 40, scope: !7165)
!7189 = !DILocation(line: 1992, column: 7, scope: !7165)
!7190 = !DILocation(line: 1994, column: 15, scope: !7191)
!7191 = distinct !DILexicalBlock(scope: !7165, file: !1, line: 1994, column: 9)
!7192 = !DILocation(line: 1994, column: 17, scope: !7191)
!7193 = !DILocation(line: 1994, column: 9, scope: !7191)
!7194 = !DILocation(line: 1994, column: 25, scope: !7191)
!7195 = !DILocation(line: 1994, column: 31, scope: !7191)
!7196 = !DILocation(line: 1994, column: 29, scope: !7191)
!7197 = !DILocation(line: 1994, column: 22, scope: !7191)
!7198 = !DILocation(line: 1994, column: 9, scope: !7165)
!7199 = !DILocation(line: 1995, column: 6, scope: !7200)
!7200 = distinct !DILexicalBlock(scope: !7191, file: !1, line: 1994, column: 34)
!7201 = !DILocation(line: 1995, column: 8, scope: !7200)
!7202 = !DILocation(line: 1995, column: 12, scope: !7200)
!7203 = !DILocation(line: 1996, column: 6, scope: !7200)
!7204 = !DILocation(line: 1998, column: 4, scope: !7165)
!7205 = !DILocation(line: 1987, column: 32, scope: !7160)
!7206 = !DILocation(line: 1987, column: 4, scope: !7160)
!7207 = distinct !{!7207, !7163, !7208}
!7208 = !DILocation(line: 1998, column: 4, scope: !7155)
!7209 = !DILocation(line: 1999, column: 8, scope: !7210)
!7210 = distinct !DILexicalBlock(scope: !7152, file: !1, line: 1999, column: 8)
!7211 = !DILocation(line: 1999, column: 14, scope: !7210)
!7212 = !DILocation(line: 1999, column: 11, scope: !7210)
!7213 = !DILocation(line: 1999, column: 8, scope: !7152)
!7214 = !DILocation(line: 2000, column: 10, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7210, file: !1, line: 1999, column: 17)
!7216 = !DILocation(line: 2001, column: 4, scope: !7215)
!7217 = !DILocation(line: 2002, column: 13, scope: !7218)
!7218 = distinct !DILexicalBlock(scope: !7210, file: !1, line: 2002, column: 13)
!7219 = !DILocation(line: 2002, column: 19, scope: !7218)
!7220 = !DILocation(line: 2002, column: 21, scope: !7218)
!7221 = !DILocation(line: 2002, column: 16, scope: !7218)
!7222 = !DILocation(line: 2002, column: 13, scope: !7210)
!7223 = !DILocation(line: 2003, column: 10, scope: !7224)
!7224 = distinct !DILexicalBlock(scope: !7218, file: !1, line: 2002, column: 26)
!7225 = !DILocation(line: 2004, column: 4, scope: !7224)
!7226 = !DILocation(line: 2006, column: 10, scope: !7227)
!7227 = distinct !DILexicalBlock(scope: !7218, file: !1, line: 2005, column: 9)
!7228 = !DILocation(line: 2007, column: 9, scope: !7227)
!7229 = !DILocation(line: 2007, column: 7, scope: !7227)
!7230 = !DILocation(line: 2010, column: 4, scope: !7092)
!7231 = !DILocation(line: 2014, column: 11, scope: !7092)
!7232 = !DILocation(line: 2014, column: 3, scope: !7092)
!7233 = !DILocalVariable(name: "f", scope: !7234, file: !1, line: 2020, type: !4)
!7234 = distinct !DILexicalBlock(scope: !7235, file: !1, line: 2019, column: 4)
!7235 = distinct !DILexicalBlock(scope: !7092, file: !1, line: 2014, column: 17)
!7236 = !DILocation(line: 2020, column: 11, scope: !7234)
!7237 = !DILocation(line: 2020, column: 15, scope: !7234)
!7238 = !DILocation(line: 2020, column: 17, scope: !7234)
!7239 = !DILocation(line: 2020, column: 19, scope: !7234)
!7240 = !DILocation(line: 2021, column: 5, scope: !7234)
!7241 = !DILocation(line: 2021, column: 7, scope: !7234)
!7242 = !DILocation(line: 2021, column: 9, scope: !7234)
!7243 = !DILocation(line: 2021, column: 14, scope: !7234)
!7244 = !DILocation(line: 2022, column: 14, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7234, file: !1, line: 2022, column: 5)
!7246 = !DILocation(line: 2022, column: 16, scope: !7245)
!7247 = !DILocation(line: 2022, column: 12, scope: !7245)
!7248 = !DILocation(line: 2022, column: 10, scope: !7245)
!7249 = !DILocation(line: 2022, column: 21, scope: !7250)
!7250 = distinct !DILexicalBlock(scope: !7245, file: !1, line: 2022, column: 5)
!7251 = !DILocation(line: 2022, column: 26, scope: !7250)
!7252 = !DILocation(line: 2022, column: 23, scope: !7250)
!7253 = !DILocation(line: 2022, column: 5, scope: !7245)
!7254 = !DILocalVariable(name: "t", scope: !7255, file: !1, line: 2023, type: !4)
!7255 = distinct !DILexicalBlock(scope: !7250, file: !1, line: 2022, column: 34)
!7256 = !DILocation(line: 2023, column: 12, scope: !7255)
!7257 = !DILocation(line: 2023, column: 23, scope: !7255)
!7258 = !DILocation(line: 2023, column: 25, scope: !7255)
!7259 = !DILocation(line: 2023, column: 29, scope: !7255)
!7260 = !DILocation(line: 2023, column: 16, scope: !7255)
!7261 = !DILocalVariable(name: "invt", scope: !7255, file: !1, line: 2024, type: !4)
!7262 = !DILocation(line: 2024, column: 12, scope: !7255)
!7263 = !DILocation(line: 2024, column: 26, scope: !7255)
!7264 = !DILocation(line: 2024, column: 24, scope: !7255)
!7265 = !DILocalVariable(name: "cs", scope: !7255, file: !1, line: 2025, type: !4)
!7266 = !DILocation(line: 2025, column: 12, scope: !7255)
!7267 = !DILocation(line: 2025, column: 17, scope: !7255)
!7268 = !DILocation(line: 2025, column: 19, scope: !7255)
!7269 = !DILocation(line: 2025, column: 24, scope: !7255)
!7270 = !DILocation(line: 2025, column: 22, scope: !7255)
!7271 = !DILocalVariable(name: "sn", scope: !7255, file: !1, line: 2026, type: !4)
!7272 = !DILocation(line: 2026, column: 12, scope: !7255)
!7273 = !DILocation(line: 2026, column: 17, scope: !7255)
!7274 = !DILocation(line: 2026, column: 21, scope: !7255)
!7275 = !DILocation(line: 2026, column: 19, scope: !7255)
!7276 = !DILocation(line: 2027, column: 13, scope: !7255)
!7277 = !DILocation(line: 2027, column: 6, scope: !7255)
!7278 = !DILocation(line: 2027, column: 8, scope: !7255)
!7279 = !DILocation(line: 2027, column: 11, scope: !7255)
!7280 = !DILocation(line: 2028, column: 10, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7255, file: !1, line: 2028, column: 10)
!7282 = !DILocation(line: 2028, column: 15, scope: !7281)
!7283 = !DILocation(line: 2028, column: 12, scope: !7281)
!7284 = !DILocation(line: 2028, column: 10, scope: !7255)
!7285 = !DILocation(line: 2029, column: 12, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7281, file: !1, line: 2028, column: 18)
!7287 = !DILocation(line: 2029, column: 11, scope: !7286)
!7288 = !DILocation(line: 2029, column: 17, scope: !7286)
!7289 = !DILocation(line: 2029, column: 19, scope: !7286)
!7290 = !DILocation(line: 2029, column: 21, scope: !7286)
!7291 = !DILocation(line: 2029, column: 15, scope: !7286)
!7292 = !DILocation(line: 2029, column: 9, scope: !7286)
!7293 = !DILocation(line: 2030, column: 18, scope: !7286)
!7294 = !DILocation(line: 2030, column: 23, scope: !7286)
!7295 = !DILocation(line: 2030, column: 25, scope: !7286)
!7296 = !DILocation(line: 2030, column: 27, scope: !7286)
!7297 = !DILocation(line: 2030, column: 21, scope: !7286)
!7298 = !DILocation(line: 2030, column: 7, scope: !7286)
!7299 = !DILocation(line: 2030, column: 9, scope: !7286)
!7300 = !DILocation(line: 2030, column: 11, scope: !7286)
!7301 = !DILocation(line: 2030, column: 16, scope: !7286)
!7302 = !DILocation(line: 2031, column: 6, scope: !7286)
!7303 = !DILocation(line: 2033, column: 13, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7255, file: !1, line: 2033, column: 6)
!7305 = !DILocation(line: 2033, column: 11, scope: !7304)
!7306 = !DILocation(line: 2033, column: 18, scope: !7307)
!7307 = distinct !DILexicalBlock(scope: !7304, file: !1, line: 2033, column: 6)
!7308 = !DILocation(line: 2033, column: 22, scope: !7307)
!7309 = !DILocation(line: 2033, column: 20, scope: !7307)
!7310 = !DILocation(line: 2033, column: 6, scope: !7304)
!7311 = !DILocation(line: 2034, column: 11, scope: !7312)
!7312 = distinct !DILexicalBlock(scope: !7307, file: !1, line: 2033, column: 30)
!7313 = !DILocation(line: 2034, column: 16, scope: !7312)
!7314 = !DILocation(line: 2034, column: 18, scope: !7312)
!7315 = !DILocation(line: 2034, column: 21, scope: !7312)
!7316 = !DILocation(line: 2034, column: 14, scope: !7312)
!7317 = !DILocation(line: 2034, column: 26, scope: !7312)
!7318 = !DILocation(line: 2034, column: 31, scope: !7312)
!7319 = !DILocation(line: 2034, column: 33, scope: !7312)
!7320 = !DILocation(line: 2034, column: 36, scope: !7312)
!7321 = !DILocation(line: 2034, column: 38, scope: !7312)
!7322 = !DILocation(line: 2034, column: 29, scope: !7312)
!7323 = !DILocation(line: 2034, column: 24, scope: !7312)
!7324 = !DILocation(line: 2034, column: 9, scope: !7312)
!7325 = !DILocation(line: 2035, column: 22, scope: !7312)
!7326 = !DILocation(line: 2035, column: 21, scope: !7312)
!7327 = !DILocation(line: 2035, column: 27, scope: !7312)
!7328 = !DILocation(line: 2035, column: 29, scope: !7312)
!7329 = !DILocation(line: 2035, column: 32, scope: !7312)
!7330 = !DILocation(line: 2035, column: 25, scope: !7312)
!7331 = !DILocation(line: 2035, column: 37, scope: !7312)
!7332 = !DILocation(line: 2035, column: 42, scope: !7312)
!7333 = !DILocation(line: 2035, column: 44, scope: !7312)
!7334 = !DILocation(line: 2035, column: 47, scope: !7312)
!7335 = !DILocation(line: 2035, column: 49, scope: !7312)
!7336 = !DILocation(line: 2035, column: 40, scope: !7312)
!7337 = !DILocation(line: 2035, column: 35, scope: !7312)
!7338 = !DILocation(line: 2035, column: 7, scope: !7312)
!7339 = !DILocation(line: 2035, column: 9, scope: !7312)
!7340 = !DILocation(line: 2035, column: 12, scope: !7312)
!7341 = !DILocation(line: 2035, column: 14, scope: !7312)
!7342 = !DILocation(line: 2035, column: 19, scope: !7312)
!7343 = !DILocation(line: 2036, column: 17, scope: !7312)
!7344 = !DILocation(line: 2036, column: 7, scope: !7312)
!7345 = !DILocation(line: 2036, column: 9, scope: !7312)
!7346 = !DILocation(line: 2036, column: 12, scope: !7312)
!7347 = !DILocation(line: 2036, column: 15, scope: !7312)
!7348 = !DILocation(line: 2037, column: 6, scope: !7312)
!7349 = !DILocation(line: 2033, column: 26, scope: !7307)
!7350 = !DILocation(line: 2033, column: 6, scope: !7307)
!7351 = distinct !{!7351, !7310, !7352}
!7352 = !DILocation(line: 2037, column: 6, scope: !7304)
!7353 = !DILocation(line: 2038, column: 5, scope: !7255)
!7354 = !DILocation(line: 2022, column: 30, scope: !7250)
!7355 = !DILocation(line: 2022, column: 5, scope: !7250)
!7356 = distinct !{!7356, !7253, !7357}
!7357 = !DILocation(line: 2038, column: 5, scope: !7245)
!7358 = !DILocation(line: 2039, column: 5, scope: !7234)
!7359 = !DILocalVariable(name: "f", scope: !7360, file: !1, line: 2046, type: !4)
!7360 = distinct !DILexicalBlock(scope: !7235, file: !1, line: 2045, column: 4)
!7361 = !DILocation(line: 2046, column: 11, scope: !7360)
!7362 = !DILocation(line: 2046, column: 15, scope: !7360)
!7363 = !DILocation(line: 2046, column: 17, scope: !7360)
!7364 = !DILocation(line: 2046, column: 19, scope: !7360)
!7365 = !DILocation(line: 2047, column: 5, scope: !7360)
!7366 = !DILocation(line: 2047, column: 7, scope: !7360)
!7367 = !DILocation(line: 2047, column: 9, scope: !7360)
!7368 = !DILocation(line: 2047, column: 14, scope: !7360)
!7369 = !DILocation(line: 2048, column: 14, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7360, file: !1, line: 2048, column: 5)
!7371 = !DILocation(line: 2048, column: 12, scope: !7370)
!7372 = !DILocation(line: 2048, column: 10, scope: !7370)
!7373 = !DILocation(line: 2048, column: 17, scope: !7374)
!7374 = distinct !DILexicalBlock(scope: !7370, file: !1, line: 2048, column: 5)
!7375 = !DILocation(line: 2048, column: 21, scope: !7374)
!7376 = !DILocation(line: 2048, column: 19, scope: !7374)
!7377 = !DILocation(line: 2048, column: 5, scope: !7370)
!7378 = !DILocalVariable(name: "t", scope: !7379, file: !1, line: 2049, type: !4)
!7379 = distinct !DILexicalBlock(scope: !7374, file: !1, line: 2048, column: 29)
!7380 = !DILocation(line: 2049, column: 12, scope: !7379)
!7381 = !DILocation(line: 2049, column: 23, scope: !7379)
!7382 = !DILocation(line: 2049, column: 25, scope: !7379)
!7383 = !DILocation(line: 2049, column: 29, scope: !7379)
!7384 = !DILocation(line: 2049, column: 16, scope: !7379)
!7385 = !DILocalVariable(name: "invt", scope: !7379, file: !1, line: 2050, type: !4)
!7386 = !DILocation(line: 2050, column: 12, scope: !7379)
!7387 = !DILocation(line: 2050, column: 26, scope: !7379)
!7388 = !DILocation(line: 2050, column: 24, scope: !7379)
!7389 = !DILocalVariable(name: "cs", scope: !7379, file: !1, line: 2051, type: !4)
!7390 = !DILocation(line: 2051, column: 12, scope: !7379)
!7391 = !DILocation(line: 2051, column: 17, scope: !7379)
!7392 = !DILocation(line: 2051, column: 19, scope: !7379)
!7393 = !DILocation(line: 2051, column: 24, scope: !7379)
!7394 = !DILocation(line: 2051, column: 22, scope: !7379)
!7395 = !DILocalVariable(name: "sn", scope: !7379, file: !1, line: 2052, type: !4)
!7396 = !DILocation(line: 2052, column: 12, scope: !7379)
!7397 = !DILocation(line: 2052, column: 17, scope: !7379)
!7398 = !DILocation(line: 2052, column: 21, scope: !7379)
!7399 = !DILocation(line: 2052, column: 19, scope: !7379)
!7400 = !DILocation(line: 2053, column: 13, scope: !7379)
!7401 = !DILocation(line: 2053, column: 6, scope: !7379)
!7402 = !DILocation(line: 2053, column: 8, scope: !7379)
!7403 = !DILocation(line: 2053, column: 11, scope: !7379)
!7404 = !DILocation(line: 2054, column: 11, scope: !7379)
!7405 = !DILocation(line: 2054, column: 10, scope: !7379)
!7406 = !DILocation(line: 2054, column: 16, scope: !7379)
!7407 = !DILocation(line: 2054, column: 18, scope: !7379)
!7408 = !DILocation(line: 2054, column: 14, scope: !7379)
!7409 = !DILocation(line: 2054, column: 8, scope: !7379)
!7410 = !DILocation(line: 2055, column: 13, scope: !7379)
!7411 = !DILocation(line: 2055, column: 18, scope: !7379)
!7412 = !DILocation(line: 2055, column: 20, scope: !7379)
!7413 = !DILocation(line: 2055, column: 16, scope: !7379)
!7414 = !DILocation(line: 2055, column: 6, scope: !7379)
!7415 = !DILocation(line: 2055, column: 8, scope: !7379)
!7416 = !DILocation(line: 2055, column: 11, scope: !7379)
!7417 = !DILocation(line: 2057, column: 13, scope: !7418)
!7418 = distinct !DILexicalBlock(scope: !7379, file: !1, line: 2057, column: 6)
!7419 = !DILocation(line: 2057, column: 11, scope: !7418)
!7420 = !DILocation(line: 2057, column: 18, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !7418, file: !1, line: 2057, column: 6)
!7422 = !DILocation(line: 2057, column: 22, scope: !7421)
!7423 = !DILocation(line: 2057, column: 20, scope: !7421)
!7424 = !DILocation(line: 2057, column: 6, scope: !7418)
!7425 = !DILocation(line: 2058, column: 11, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7421, file: !1, line: 2057, column: 30)
!7427 = !DILocation(line: 2058, column: 16, scope: !7426)
!7428 = !DILocation(line: 2058, column: 18, scope: !7426)
!7429 = !DILocation(line: 2058, column: 21, scope: !7426)
!7430 = !DILocation(line: 2058, column: 14, scope: !7426)
!7431 = !DILocation(line: 2058, column: 26, scope: !7426)
!7432 = !DILocation(line: 2058, column: 31, scope: !7426)
!7433 = !DILocation(line: 2058, column: 33, scope: !7426)
!7434 = !DILocation(line: 2058, column: 36, scope: !7426)
!7435 = !DILocation(line: 2058, column: 38, scope: !7426)
!7436 = !DILocation(line: 2058, column: 29, scope: !7426)
!7437 = !DILocation(line: 2058, column: 24, scope: !7426)
!7438 = !DILocation(line: 2058, column: 9, scope: !7426)
!7439 = !DILocation(line: 2059, column: 22, scope: !7426)
!7440 = !DILocation(line: 2059, column: 21, scope: !7426)
!7441 = !DILocation(line: 2059, column: 27, scope: !7426)
!7442 = !DILocation(line: 2059, column: 29, scope: !7426)
!7443 = !DILocation(line: 2059, column: 32, scope: !7426)
!7444 = !DILocation(line: 2059, column: 25, scope: !7426)
!7445 = !DILocation(line: 2059, column: 37, scope: !7426)
!7446 = !DILocation(line: 2059, column: 42, scope: !7426)
!7447 = !DILocation(line: 2059, column: 44, scope: !7426)
!7448 = !DILocation(line: 2059, column: 47, scope: !7426)
!7449 = !DILocation(line: 2059, column: 49, scope: !7426)
!7450 = !DILocation(line: 2059, column: 40, scope: !7426)
!7451 = !DILocation(line: 2059, column: 35, scope: !7426)
!7452 = !DILocation(line: 2059, column: 7, scope: !7426)
!7453 = !DILocation(line: 2059, column: 9, scope: !7426)
!7454 = !DILocation(line: 2059, column: 12, scope: !7426)
!7455 = !DILocation(line: 2059, column: 14, scope: !7426)
!7456 = !DILocation(line: 2059, column: 19, scope: !7426)
!7457 = !DILocation(line: 2060, column: 17, scope: !7426)
!7458 = !DILocation(line: 2060, column: 7, scope: !7426)
!7459 = !DILocation(line: 2060, column: 9, scope: !7426)
!7460 = !DILocation(line: 2060, column: 12, scope: !7426)
!7461 = !DILocation(line: 2060, column: 15, scope: !7426)
!7462 = !DILocation(line: 2061, column: 6, scope: !7426)
!7463 = !DILocation(line: 2057, column: 26, scope: !7421)
!7464 = !DILocation(line: 2057, column: 6, scope: !7421)
!7465 = distinct !{!7465, !7424, !7466}
!7466 = !DILocation(line: 2061, column: 6, scope: !7418)
!7467 = !DILocation(line: 2062, column: 5, scope: !7379)
!7468 = !DILocation(line: 2048, column: 25, scope: !7374)
!7469 = !DILocation(line: 2048, column: 5, scope: !7374)
!7470 = distinct !{!7470, !7377, !7471}
!7471 = !DILocation(line: 2062, column: 5, scope: !7370)
!7472 = !DILocation(line: 2063, column: 5, scope: !7360)
!7473 = !DILocalVariable(name: "scale", scope: !7474, file: !1, line: 2073, type: !4)
!7474 = distinct !DILexicalBlock(scope: !7235, file: !1, line: 2069, column: 4)
!7475 = !DILocation(line: 2073, column: 11, scope: !7474)
!7476 = !DILocation(line: 2074, column: 30, scope: !7474)
!7477 = !DILocation(line: 2074, column: 32, scope: !7474)
!7478 = !DILocation(line: 2074, column: 34, scope: !7474)
!7479 = !DILocation(line: 2074, column: 24, scope: !7474)
!7480 = !DILocation(line: 2074, column: 47, scope: !7474)
!7481 = !DILocation(line: 2074, column: 49, scope: !7474)
!7482 = !DILocation(line: 2074, column: 51, scope: !7474)
!7483 = !DILocation(line: 2074, column: 41, scope: !7474)
!7484 = !DILocation(line: 2073, column: 40, scope: !7474)
!7485 = !DILocation(line: 2074, column: 65, scope: !7474)
!7486 = !DILocation(line: 2074, column: 67, scope: !7474)
!7487 = !DILocation(line: 2074, column: 69, scope: !7474)
!7488 = !DILocation(line: 2074, column: 59, scope: !7474)
!7489 = !DILocation(line: 2073, column: 33, scope: !7474)
!7490 = !DILocation(line: 2075, column: 30, scope: !7474)
!7491 = !DILocation(line: 2075, column: 32, scope: !7474)
!7492 = !DILocation(line: 2075, column: 24, scope: !7474)
!7493 = !DILocation(line: 2073, column: 26, scope: !7474)
!7494 = !DILocation(line: 2075, column: 44, scope: !7474)
!7495 = !DILocation(line: 2075, column: 46, scope: !7474)
!7496 = !DILocation(line: 2075, column: 38, scope: !7474)
!7497 = !DILocation(line: 2073, column: 19, scope: !7474)
!7498 = !DILocalVariable(name: "invscale", scope: !7474, file: !1, line: 2076, type: !4)
!7499 = !DILocation(line: 2076, column: 11, scope: !7474)
!7500 = !DILocation(line: 2076, column: 29, scope: !7474)
!7501 = !DILocation(line: 2076, column: 27, scope: !7474)
!7502 = !DILocalVariable(name: "sp", scope: !7474, file: !1, line: 2077, type: !4)
!7503 = !DILocation(line: 2077, column: 11, scope: !7474)
!7504 = !DILocation(line: 2077, column: 16, scope: !7474)
!7505 = !DILocation(line: 2077, column: 18, scope: !7474)
!7506 = !DILocation(line: 2077, column: 20, scope: !7474)
!7507 = !DILocation(line: 2077, column: 27, scope: !7474)
!7508 = !DILocation(line: 2077, column: 25, scope: !7474)
!7509 = !DILocalVariable(name: "spm1", scope: !7474, file: !1, line: 2078, type: !4)
!7510 = !DILocation(line: 2078, column: 11, scope: !7474)
!7511 = !DILocation(line: 2078, column: 18, scope: !7474)
!7512 = !DILocation(line: 2078, column: 20, scope: !7474)
!7513 = !DILocation(line: 2078, column: 22, scope: !7474)
!7514 = !DILocation(line: 2078, column: 29, scope: !7474)
!7515 = !DILocation(line: 2078, column: 27, scope: !7474)
!7516 = !DILocalVariable(name: "epm1", scope: !7474, file: !1, line: 2079, type: !4)
!7517 = !DILocation(line: 2079, column: 11, scope: !7474)
!7518 = !DILocation(line: 2079, column: 18, scope: !7474)
!7519 = !DILocation(line: 2079, column: 20, scope: !7474)
!7520 = !DILocation(line: 2079, column: 22, scope: !7474)
!7521 = !DILocation(line: 2079, column: 29, scope: !7474)
!7522 = !DILocation(line: 2079, column: 27, scope: !7474)
!7523 = !DILocalVariable(name: "sk", scope: !7474, file: !1, line: 2080, type: !4)
!7524 = !DILocation(line: 2080, column: 11, scope: !7474)
!7525 = !DILocation(line: 2080, column: 16, scope: !7474)
!7526 = !DILocation(line: 2080, column: 18, scope: !7474)
!7527 = !DILocation(line: 2080, column: 23, scope: !7474)
!7528 = !DILocation(line: 2080, column: 21, scope: !7474)
!7529 = !DILocalVariable(name: "ek", scope: !7474, file: !1, line: 2081, type: !4)
!7530 = !DILocation(line: 2081, column: 11, scope: !7474)
!7531 = !DILocation(line: 2081, column: 16, scope: !7474)
!7532 = !DILocation(line: 2081, column: 18, scope: !7474)
!7533 = !DILocation(line: 2081, column: 23, scope: !7474)
!7534 = !DILocation(line: 2081, column: 21, scope: !7474)
!7535 = !DILocalVariable(name: "b", scope: !7474, file: !1, line: 2082, type: !4)
!7536 = !DILocation(line: 2082, column: 11, scope: !7474)
!7537 = !DILocation(line: 2082, column: 17, scope: !7474)
!7538 = !DILocation(line: 2082, column: 24, scope: !7474)
!7539 = !DILocation(line: 2082, column: 22, scope: !7474)
!7540 = !DILocation(line: 2082, column: 31, scope: !7474)
!7541 = !DILocation(line: 2082, column: 38, scope: !7474)
!7542 = !DILocation(line: 2082, column: 36, scope: !7474)
!7543 = !DILocation(line: 2082, column: 28, scope: !7474)
!7544 = !DILocation(line: 2082, column: 44, scope: !7474)
!7545 = !DILocation(line: 2082, column: 51, scope: !7474)
!7546 = !DILocation(line: 2082, column: 49, scope: !7474)
!7547 = !DILocation(line: 2082, column: 42, scope: !7474)
!7548 = !DILocation(line: 2082, column: 57, scope: !7474)
!7549 = !DILocalVariable(name: "c", scope: !7474, file: !1, line: 2083, type: !4)
!7550 = !DILocation(line: 2083, column: 11, scope: !7474)
!7551 = !DILocation(line: 2083, column: 16, scope: !7474)
!7552 = !DILocation(line: 2083, column: 21, scope: !7474)
!7553 = !DILocation(line: 2083, column: 19, scope: !7474)
!7554 = !DILocation(line: 2083, column: 30, scope: !7474)
!7555 = !DILocation(line: 2083, column: 35, scope: !7474)
!7556 = !DILocation(line: 2083, column: 33, scope: !7474)
!7557 = !DILocation(line: 2083, column: 27, scope: !7474)
!7558 = !DILocalVariable(name: "shift", scope: !7474, file: !1, line: 2084, type: !4)
!7559 = !DILocation(line: 2084, column: 11, scope: !7474)
!7560 = !DILocalVariable(name: "f", scope: !7474, file: !1, line: 2085, type: !4)
!7561 = !DILocation(line: 2085, column: 11, scope: !7474)
!7562 = !DILocalVariable(name: "g", scope: !7474, file: !1, line: 2085, type: !4)
!7563 = !DILocation(line: 2085, column: 14, scope: !7474)
!7564 = !DILocation(line: 2086, column: 10, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7474, file: !1, line: 2086, column: 9)
!7566 = !DILocation(line: 2086, column: 12, scope: !7565)
!7567 = !DILocation(line: 2086, column: 21, scope: !7565)
!7568 = !DILocation(line: 2086, column: 25, scope: !7565)
!7569 = !DILocation(line: 2086, column: 27, scope: !7565)
!7570 = !DILocation(line: 2086, column: 9, scope: !7474)
!7571 = !DILocation(line: 2087, column: 20, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7565, file: !1, line: 2086, column: 37)
!7573 = !DILocation(line: 2087, column: 24, scope: !7572)
!7574 = !DILocation(line: 2087, column: 22, scope: !7572)
!7575 = !DILocation(line: 2087, column: 28, scope: !7572)
!7576 = !DILocation(line: 2087, column: 26, scope: !7572)
!7577 = !DILocation(line: 2087, column: 14, scope: !7572)
!7578 = !DILocation(line: 2087, column: 12, scope: !7572)
!7579 = !DILocation(line: 2088, column: 10, scope: !7580)
!7580 = distinct !DILexicalBlock(scope: !7572, file: !1, line: 2088, column: 10)
!7581 = !DILocation(line: 2088, column: 12, scope: !7580)
!7582 = !DILocation(line: 2088, column: 10, scope: !7572)
!7583 = !DILocation(line: 2089, column: 16, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7580, file: !1, line: 2088, column: 20)
!7585 = !DILocation(line: 2089, column: 15, scope: !7584)
!7586 = !DILocation(line: 2089, column: 13, scope: !7584)
!7587 = !DILocation(line: 2090, column: 6, scope: !7584)
!7588 = !DILocation(line: 2091, column: 14, scope: !7572)
!7589 = !DILocation(line: 2091, column: 19, scope: !7572)
!7590 = !DILocation(line: 2091, column: 23, scope: !7572)
!7591 = !DILocation(line: 2091, column: 21, scope: !7572)
!7592 = !DILocation(line: 2091, column: 16, scope: !7572)
!7593 = !DILocation(line: 2091, column: 12, scope: !7572)
!7594 = !DILocation(line: 2092, column: 5, scope: !7572)
!7595 = !DILocation(line: 2093, column: 10, scope: !7474)
!7596 = !DILocation(line: 2093, column: 15, scope: !7474)
!7597 = !DILocation(line: 2093, column: 13, scope: !7474)
!7598 = !DILocation(line: 2093, column: 22, scope: !7474)
!7599 = !DILocation(line: 2093, column: 27, scope: !7474)
!7600 = !DILocation(line: 2093, column: 25, scope: !7474)
!7601 = !DILocation(line: 2093, column: 19, scope: !7474)
!7602 = !DILocation(line: 2093, column: 33, scope: !7474)
!7603 = !DILocation(line: 2093, column: 31, scope: !7474)
!7604 = !DILocation(line: 2093, column: 7, scope: !7474)
!7605 = !DILocation(line: 2094, column: 9, scope: !7474)
!7606 = !DILocation(line: 2094, column: 14, scope: !7474)
!7607 = !DILocation(line: 2094, column: 12, scope: !7474)
!7608 = !DILocation(line: 2094, column: 7, scope: !7474)
!7609 = !DILocation(line: 2098, column: 14, scope: !7610)
!7610 = distinct !DILexicalBlock(scope: !7474, file: !1, line: 2098, column: 5)
!7611 = !DILocation(line: 2098, column: 12, scope: !7610)
!7612 = !DILocation(line: 2098, column: 10, scope: !7610)
!7613 = !DILocation(line: 2098, column: 17, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7610, file: !1, line: 2098, column: 5)
!7615 = !DILocation(line: 2098, column: 21, scope: !7614)
!7616 = !DILocation(line: 2098, column: 23, scope: !7614)
!7617 = !DILocation(line: 2098, column: 19, scope: !7614)
!7618 = !DILocation(line: 2098, column: 5, scope: !7610)
!7619 = !DILocalVariable(name: "t", scope: !7620, file: !1, line: 2099, type: !4)
!7620 = distinct !DILexicalBlock(scope: !7614, file: !1, line: 2098, column: 33)
!7621 = !DILocation(line: 2099, column: 12, scope: !7620)
!7622 = !DILocation(line: 2099, column: 23, scope: !7620)
!7623 = !DILocation(line: 2099, column: 26, scope: !7620)
!7624 = !DILocation(line: 2099, column: 16, scope: !7620)
!7625 = !DILocalVariable(name: "cs", scope: !7620, file: !1, line: 2101, type: !4)
!7626 = !DILocation(line: 2101, column: 12, scope: !7620)
!7627 = !DILocation(line: 2101, column: 18, scope: !7620)
!7628 = !DILocation(line: 2101, column: 20, scope: !7620)
!7629 = !DILocation(line: 2101, column: 17, scope: !7620)
!7630 = !DILocation(line: 2101, column: 38, scope: !7620)
!7631 = !DILocation(line: 2101, column: 42, scope: !7620)
!7632 = !DILocation(line: 2101, column: 40, scope: !7620)
!7633 = !DILocalVariable(name: "sn", scope: !7620, file: !1, line: 2102, type: !4)
!7634 = !DILocation(line: 2102, column: 12, scope: !7620)
!7635 = !DILocation(line: 2102, column: 18, scope: !7620)
!7636 = !DILocation(line: 2102, column: 20, scope: !7620)
!7637 = !DILocation(line: 2102, column: 17, scope: !7620)
!7638 = !DILocation(line: 2102, column: 38, scope: !7620)
!7639 = !DILocation(line: 2102, column: 42, scope: !7620)
!7640 = !DILocation(line: 2102, column: 40, scope: !7620)
!7641 = !DILocation(line: 2103, column: 10, scope: !7642)
!7642 = distinct !DILexicalBlock(scope: !7620, file: !1, line: 2103, column: 10)
!7643 = !DILocation(line: 2103, column: 15, scope: !7642)
!7644 = !DILocation(line: 2103, column: 12, scope: !7642)
!7645 = !DILocation(line: 2103, column: 10, scope: !7620)
!7646 = !DILocation(line: 2104, column: 18, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7642, file: !1, line: 2103, column: 18)
!7648 = !DILocation(line: 2104, column: 7, scope: !7647)
!7649 = !DILocation(line: 2104, column: 9, scope: !7647)
!7650 = !DILocation(line: 2104, column: 11, scope: !7647)
!7651 = !DILocation(line: 2104, column: 16, scope: !7647)
!7652 = !DILocation(line: 2105, column: 6, scope: !7647)
!7653 = !DILocation(line: 2106, column: 10, scope: !7620)
!7654 = !DILocation(line: 2106, column: 15, scope: !7620)
!7655 = !DILocation(line: 2106, column: 17, scope: !7620)
!7656 = !DILocation(line: 2106, column: 13, scope: !7620)
!7657 = !DILocation(line: 2106, column: 22, scope: !7620)
!7658 = !DILocation(line: 2106, column: 27, scope: !7620)
!7659 = !DILocation(line: 2106, column: 29, scope: !7620)
!7660 = !DILocation(line: 2106, column: 25, scope: !7620)
!7661 = !DILocation(line: 2106, column: 20, scope: !7620)
!7662 = !DILocation(line: 2106, column: 8, scope: !7620)
!7663 = !DILocation(line: 2107, column: 13, scope: !7620)
!7664 = !DILocation(line: 2107, column: 18, scope: !7620)
!7665 = !DILocation(line: 2107, column: 20, scope: !7620)
!7666 = !DILocation(line: 2107, column: 16, scope: !7620)
!7667 = !DILocation(line: 2107, column: 25, scope: !7620)
!7668 = !DILocation(line: 2107, column: 30, scope: !7620)
!7669 = !DILocation(line: 2107, column: 32, scope: !7620)
!7670 = !DILocation(line: 2107, column: 28, scope: !7620)
!7671 = !DILocation(line: 2107, column: 23, scope: !7620)
!7672 = !DILocation(line: 2107, column: 6, scope: !7620)
!7673 = !DILocation(line: 2107, column: 8, scope: !7620)
!7674 = !DILocation(line: 2107, column: 11, scope: !7620)
!7675 = !DILocation(line: 2108, column: 10, scope: !7620)
!7676 = !DILocation(line: 2108, column: 15, scope: !7620)
!7677 = !DILocation(line: 2108, column: 17, scope: !7620)
!7678 = !DILocation(line: 2108, column: 19, scope: !7620)
!7679 = !DILocation(line: 2108, column: 13, scope: !7620)
!7680 = !DILocation(line: 2108, column: 8, scope: !7620)
!7681 = !DILocation(line: 2109, column: 17, scope: !7620)
!7682 = !DILocation(line: 2109, column: 22, scope: !7620)
!7683 = !DILocation(line: 2109, column: 24, scope: !7620)
!7684 = !DILocation(line: 2109, column: 26, scope: !7620)
!7685 = !DILocation(line: 2109, column: 20, scope: !7620)
!7686 = !DILocation(line: 2109, column: 6, scope: !7620)
!7687 = !DILocation(line: 2109, column: 8, scope: !7620)
!7688 = !DILocation(line: 2109, column: 10, scope: !7620)
!7689 = !DILocation(line: 2109, column: 15, scope: !7620)
!7690 = !DILocation(line: 2111, column: 13, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7620, file: !1, line: 2111, column: 6)
!7692 = !DILocation(line: 2111, column: 11, scope: !7691)
!7693 = !DILocation(line: 2111, column: 18, scope: !7694)
!7694 = distinct !DILexicalBlock(scope: !7691, file: !1, line: 2111, column: 6)
!7695 = !DILocation(line: 2111, column: 22, scope: !7694)
!7696 = !DILocation(line: 2111, column: 20, scope: !7694)
!7697 = !DILocation(line: 2111, column: 6, scope: !7691)
!7698 = !DILocation(line: 2112, column: 11, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !7694, file: !1, line: 2111, column: 30)
!7700 = !DILocation(line: 2112, column: 16, scope: !7699)
!7701 = !DILocation(line: 2112, column: 18, scope: !7699)
!7702 = !DILocation(line: 2112, column: 21, scope: !7699)
!7703 = !DILocation(line: 2112, column: 14, scope: !7699)
!7704 = !DILocation(line: 2112, column: 26, scope: !7699)
!7705 = !DILocation(line: 2112, column: 31, scope: !7699)
!7706 = !DILocation(line: 2112, column: 33, scope: !7699)
!7707 = !DILocation(line: 2112, column: 36, scope: !7699)
!7708 = !DILocation(line: 2112, column: 38, scope: !7699)
!7709 = !DILocation(line: 2112, column: 29, scope: !7699)
!7710 = !DILocation(line: 2112, column: 24, scope: !7699)
!7711 = !DILocation(line: 2112, column: 9, scope: !7699)
!7712 = !DILocation(line: 2113, column: 22, scope: !7699)
!7713 = !DILocation(line: 2113, column: 21, scope: !7699)
!7714 = !DILocation(line: 2113, column: 27, scope: !7699)
!7715 = !DILocation(line: 2113, column: 29, scope: !7699)
!7716 = !DILocation(line: 2113, column: 32, scope: !7699)
!7717 = !DILocation(line: 2113, column: 25, scope: !7699)
!7718 = !DILocation(line: 2113, column: 37, scope: !7699)
!7719 = !DILocation(line: 2113, column: 42, scope: !7699)
!7720 = !DILocation(line: 2113, column: 44, scope: !7699)
!7721 = !DILocation(line: 2113, column: 47, scope: !7699)
!7722 = !DILocation(line: 2113, column: 49, scope: !7699)
!7723 = !DILocation(line: 2113, column: 40, scope: !7699)
!7724 = !DILocation(line: 2113, column: 35, scope: !7699)
!7725 = !DILocation(line: 2113, column: 7, scope: !7699)
!7726 = !DILocation(line: 2113, column: 9, scope: !7699)
!7727 = !DILocation(line: 2113, column: 12, scope: !7699)
!7728 = !DILocation(line: 2113, column: 14, scope: !7699)
!7729 = !DILocation(line: 2113, column: 19, scope: !7699)
!7730 = !DILocation(line: 2114, column: 17, scope: !7699)
!7731 = !DILocation(line: 2114, column: 7, scope: !7699)
!7732 = !DILocation(line: 2114, column: 9, scope: !7699)
!7733 = !DILocation(line: 2114, column: 12, scope: !7699)
!7734 = !DILocation(line: 2114, column: 15, scope: !7699)
!7735 = !DILocation(line: 2115, column: 6, scope: !7699)
!7736 = !DILocation(line: 2111, column: 26, scope: !7694)
!7737 = !DILocation(line: 2111, column: 6, scope: !7694)
!7738 = distinct !{!7738, !7697, !7739}
!7739 = !DILocation(line: 2115, column: 6, scope: !7691)
!7740 = !DILocation(line: 2117, column: 17, scope: !7620)
!7741 = !DILocation(line: 2117, column: 20, scope: !7620)
!7742 = !DILocation(line: 2117, column: 10, scope: !7620)
!7743 = !DILocation(line: 2117, column: 8, scope: !7620)
!7744 = !DILocation(line: 2119, column: 12, scope: !7620)
!7745 = !DILocation(line: 2119, column: 14, scope: !7620)
!7746 = !DILocation(line: 2119, column: 11, scope: !7620)
!7747 = !DILocation(line: 2119, column: 32, scope: !7620)
!7748 = !DILocation(line: 2119, column: 36, scope: !7620)
!7749 = !DILocation(line: 2119, column: 34, scope: !7620)
!7750 = !DILocation(line: 2119, column: 9, scope: !7620)
!7751 = !DILocation(line: 2120, column: 12, scope: !7620)
!7752 = !DILocation(line: 2120, column: 14, scope: !7620)
!7753 = !DILocation(line: 2120, column: 11, scope: !7620)
!7754 = !DILocation(line: 2120, column: 32, scope: !7620)
!7755 = !DILocation(line: 2120, column: 36, scope: !7620)
!7756 = !DILocation(line: 2120, column: 34, scope: !7620)
!7757 = !DILocation(line: 2120, column: 9, scope: !7620)
!7758 = !DILocation(line: 2121, column: 13, scope: !7620)
!7759 = !DILocation(line: 2121, column: 6, scope: !7620)
!7760 = !DILocation(line: 2121, column: 8, scope: !7620)
!7761 = !DILocation(line: 2121, column: 11, scope: !7620)
!7762 = !DILocation(line: 2122, column: 10, scope: !7620)
!7763 = !DILocation(line: 2122, column: 15, scope: !7620)
!7764 = !DILocation(line: 2122, column: 17, scope: !7620)
!7765 = !DILocation(line: 2122, column: 13, scope: !7620)
!7766 = !DILocation(line: 2122, column: 22, scope: !7620)
!7767 = !DILocation(line: 2122, column: 27, scope: !7620)
!7768 = !DILocation(line: 2122, column: 29, scope: !7620)
!7769 = !DILocation(line: 2122, column: 31, scope: !7620)
!7770 = !DILocation(line: 2122, column: 25, scope: !7620)
!7771 = !DILocation(line: 2122, column: 20, scope: !7620)
!7772 = !DILocation(line: 2122, column: 8, scope: !7620)
!7773 = !DILocation(line: 2123, column: 18, scope: !7620)
!7774 = !DILocation(line: 2123, column: 17, scope: !7620)
!7775 = !DILocation(line: 2123, column: 23, scope: !7620)
!7776 = !DILocation(line: 2123, column: 25, scope: !7620)
!7777 = !DILocation(line: 2123, column: 21, scope: !7620)
!7778 = !DILocation(line: 2123, column: 30, scope: !7620)
!7779 = !DILocation(line: 2123, column: 35, scope: !7620)
!7780 = !DILocation(line: 2123, column: 37, scope: !7620)
!7781 = !DILocation(line: 2123, column: 39, scope: !7620)
!7782 = !DILocation(line: 2123, column: 33, scope: !7620)
!7783 = !DILocation(line: 2123, column: 28, scope: !7620)
!7784 = !DILocation(line: 2123, column: 6, scope: !7620)
!7785 = !DILocation(line: 2123, column: 8, scope: !7620)
!7786 = !DILocation(line: 2123, column: 10, scope: !7620)
!7787 = !DILocation(line: 2123, column: 15, scope: !7620)
!7788 = !DILocation(line: 2124, column: 10, scope: !7620)
!7789 = !DILocation(line: 2124, column: 15, scope: !7620)
!7790 = !DILocation(line: 2124, column: 17, scope: !7620)
!7791 = !DILocation(line: 2124, column: 19, scope: !7620)
!7792 = !DILocation(line: 2124, column: 13, scope: !7620)
!7793 = !DILocation(line: 2124, column: 8, scope: !7620)
!7794 = !DILocation(line: 2125, column: 17, scope: !7620)
!7795 = !DILocation(line: 2125, column: 22, scope: !7620)
!7796 = !DILocation(line: 2125, column: 24, scope: !7620)
!7797 = !DILocation(line: 2125, column: 26, scope: !7620)
!7798 = !DILocation(line: 2125, column: 20, scope: !7620)
!7799 = !DILocation(line: 2125, column: 6, scope: !7620)
!7800 = !DILocation(line: 2125, column: 8, scope: !7620)
!7801 = !DILocation(line: 2125, column: 10, scope: !7620)
!7802 = !DILocation(line: 2125, column: 15, scope: !7620)
!7803 = !DILocation(line: 2126, column: 10, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7620, file: !1, line: 2126, column: 10)
!7805 = !DILocation(line: 2126, column: 14, scope: !7804)
!7806 = !DILocation(line: 2126, column: 16, scope: !7804)
!7807 = !DILocation(line: 2126, column: 12, scope: !7804)
!7808 = !DILocation(line: 2126, column: 10, scope: !7620)
!7809 = !DILocation(line: 2127, column: 14, scope: !7810)
!7810 = distinct !DILexicalBlock(scope: !7811, file: !1, line: 2127, column: 7)
!7811 = distinct !DILexicalBlock(scope: !7804, file: !1, line: 2126, column: 21)
!7812 = !DILocation(line: 2127, column: 12, scope: !7810)
!7813 = !DILocation(line: 2127, column: 19, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7810, file: !1, line: 2127, column: 7)
!7815 = !DILocation(line: 2127, column: 23, scope: !7814)
!7816 = !DILocation(line: 2127, column: 21, scope: !7814)
!7817 = !DILocation(line: 2127, column: 7, scope: !7810)
!7818 = !DILocation(line: 2128, column: 12, scope: !7819)
!7819 = distinct !DILexicalBlock(scope: !7814, file: !1, line: 2127, column: 31)
!7820 = !DILocation(line: 2128, column: 17, scope: !7819)
!7821 = !DILocation(line: 2128, column: 19, scope: !7819)
!7822 = !DILocation(line: 2128, column: 22, scope: !7819)
!7823 = !DILocation(line: 2128, column: 15, scope: !7819)
!7824 = !DILocation(line: 2128, column: 27, scope: !7819)
!7825 = !DILocation(line: 2128, column: 32, scope: !7819)
!7826 = !DILocation(line: 2128, column: 34, scope: !7819)
!7827 = !DILocation(line: 2128, column: 37, scope: !7819)
!7828 = !DILocation(line: 2128, column: 39, scope: !7819)
!7829 = !DILocation(line: 2128, column: 30, scope: !7819)
!7830 = !DILocation(line: 2128, column: 25, scope: !7819)
!7831 = !DILocation(line: 2128, column: 10, scope: !7819)
!7832 = !DILocation(line: 2129, column: 23, scope: !7819)
!7833 = !DILocation(line: 2129, column: 22, scope: !7819)
!7834 = !DILocation(line: 2129, column: 28, scope: !7819)
!7835 = !DILocation(line: 2129, column: 30, scope: !7819)
!7836 = !DILocation(line: 2129, column: 33, scope: !7819)
!7837 = !DILocation(line: 2129, column: 26, scope: !7819)
!7838 = !DILocation(line: 2129, column: 38, scope: !7819)
!7839 = !DILocation(line: 2129, column: 43, scope: !7819)
!7840 = !DILocation(line: 2129, column: 45, scope: !7819)
!7841 = !DILocation(line: 2129, column: 48, scope: !7819)
!7842 = !DILocation(line: 2129, column: 50, scope: !7819)
!7843 = !DILocation(line: 2129, column: 41, scope: !7819)
!7844 = !DILocation(line: 2129, column: 36, scope: !7819)
!7845 = !DILocation(line: 2129, column: 8, scope: !7819)
!7846 = !DILocation(line: 2129, column: 10, scope: !7819)
!7847 = !DILocation(line: 2129, column: 13, scope: !7819)
!7848 = !DILocation(line: 2129, column: 15, scope: !7819)
!7849 = !DILocation(line: 2129, column: 20, scope: !7819)
!7850 = !DILocation(line: 2130, column: 18, scope: !7819)
!7851 = !DILocation(line: 2130, column: 8, scope: !7819)
!7852 = !DILocation(line: 2130, column: 10, scope: !7819)
!7853 = !DILocation(line: 2130, column: 13, scope: !7819)
!7854 = !DILocation(line: 2130, column: 16, scope: !7819)
!7855 = !DILocation(line: 2131, column: 7, scope: !7819)
!7856 = !DILocation(line: 2127, column: 27, scope: !7814)
!7857 = !DILocation(line: 2127, column: 7, scope: !7814)
!7858 = distinct !{!7858, !7817, !7859}
!7859 = !DILocation(line: 2131, column: 7, scope: !7810)
!7860 = !DILocation(line: 2132, column: 6, scope: !7811)
!7861 = !DILocation(line: 2133, column: 5, scope: !7620)
!7862 = !DILocation(line: 2098, column: 29, scope: !7614)
!7863 = !DILocation(line: 2098, column: 5, scope: !7614)
!7864 = distinct !{!7864, !7618, !7865}
!7865 = !DILocation(line: 2133, column: 5, scope: !7610)
!7866 = !DILocation(line: 2134, column: 16, scope: !7474)
!7867 = !DILocation(line: 2134, column: 5, scope: !7474)
!7868 = !DILocation(line: 2134, column: 7, scope: !7474)
!7869 = !DILocation(line: 2134, column: 9, scope: !7474)
!7870 = !DILocation(line: 2134, column: 14, scope: !7474)
!7871 = !DILocation(line: 2135, column: 12, scope: !7474)
!7872 = !DILocation(line: 2135, column: 17, scope: !7474)
!7873 = !DILocation(line: 2135, column: 10, scope: !7474)
!7874 = !DILocation(line: 2136, column: 5, scope: !7474)
!7875 = !DILocation(line: 2145, column: 9, scope: !7876)
!7876 = distinct !DILexicalBlock(scope: !7877, file: !1, line: 2145, column: 9)
!7877 = distinct !DILexicalBlock(scope: !7235, file: !1, line: 2141, column: 4)
!7878 = !DILocation(line: 2145, column: 11, scope: !7876)
!7879 = !DILocation(line: 2145, column: 14, scope: !7876)
!7880 = !DILocation(line: 2145, column: 9, scope: !7877)
!7881 = !DILocation(line: 2146, column: 14, scope: !7882)
!7882 = distinct !DILexicalBlock(scope: !7876, file: !1, line: 2145, column: 23)
!7883 = !DILocation(line: 2146, column: 16, scope: !7882)
!7884 = !DILocation(line: 2146, column: 19, scope: !7882)
!7885 = !DILocation(line: 2146, column: 29, scope: !7882)
!7886 = !DILocation(line: 2146, column: 31, scope: !7882)
!7887 = !DILocation(line: 2146, column: 28, scope: !7882)
!7888 = !DILocation(line: 2146, column: 6, scope: !7882)
!7889 = !DILocation(line: 2146, column: 8, scope: !7882)
!7890 = !DILocation(line: 2146, column: 11, scope: !7882)
!7891 = !DILocation(line: 2148, column: 13, scope: !7892)
!7892 = distinct !DILexicalBlock(scope: !7882, file: !1, line: 2148, column: 6)
!7893 = !DILocation(line: 2148, column: 11, scope: !7892)
!7894 = !DILocation(line: 2148, column: 18, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !7892, file: !1, line: 2148, column: 6)
!7896 = !DILocation(line: 2148, column: 23, scope: !7895)
!7897 = !DILocation(line: 2148, column: 20, scope: !7895)
!7898 = !DILocation(line: 2148, column: 6, scope: !7892)
!7899 = !DILocation(line: 2149, column: 18, scope: !7895)
!7900 = !DILocation(line: 2149, column: 20, scope: !7895)
!7901 = !DILocation(line: 2149, column: 23, scope: !7895)
!7902 = !DILocation(line: 2149, column: 17, scope: !7895)
!7903 = !DILocation(line: 2149, column: 7, scope: !7895)
!7904 = !DILocation(line: 2149, column: 9, scope: !7895)
!7905 = !DILocation(line: 2149, column: 12, scope: !7895)
!7906 = !DILocation(line: 2149, column: 15, scope: !7895)
!7907 = !DILocation(line: 2148, column: 28, scope: !7895)
!7908 = !DILocation(line: 2148, column: 6, scope: !7895)
!7909 = distinct !{!7909, !7898, !7910}
!7910 = !DILocation(line: 2149, column: 24, scope: !7892)
!7911 = !DILocation(line: 2150, column: 5, scope: !7882)
!7912 = !DILocation(line: 2154, column: 5, scope: !7877)
!7913 = !DILocation(line: 2154, column: 12, scope: !7877)
!7914 = !DILocation(line: 2154, column: 16, scope: !7877)
!7915 = !DILocation(line: 2154, column: 14, scope: !7877)
!7916 = !DILocalVariable(name: "t", scope: !7917, file: !1, line: 2155, type: !4)
!7917 = distinct !DILexicalBlock(scope: !7877, file: !1, line: 2154, column: 20)
!7918 = !DILocation(line: 2155, column: 12, scope: !7917)
!7919 = !DILocation(line: 2156, column: 10, scope: !7920)
!7920 = distinct !DILexicalBlock(scope: !7917, file: !1, line: 2156, column: 10)
!7921 = !DILocation(line: 2156, column: 12, scope: !7920)
!7922 = !DILocation(line: 2156, column: 18, scope: !7920)
!7923 = !DILocation(line: 2156, column: 20, scope: !7920)
!7924 = !DILocation(line: 2156, column: 22, scope: !7920)
!7925 = !DILocation(line: 2156, column: 15, scope: !7920)
!7926 = !DILocation(line: 2156, column: 10, scope: !7917)
!7927 = !DILocation(line: 2157, column: 7, scope: !7928)
!7928 = distinct !DILexicalBlock(scope: !7920, file: !1, line: 2156, column: 28)
!7929 = !DILocation(line: 2159, column: 10, scope: !7917)
!7930 = !DILocation(line: 2159, column: 12, scope: !7917)
!7931 = !DILocation(line: 2159, column: 8, scope: !7917)
!7932 = !DILocation(line: 2160, column: 13, scope: !7917)
!7933 = !DILocation(line: 2160, column: 15, scope: !7917)
!7934 = !DILocation(line: 2160, column: 17, scope: !7917)
!7935 = !DILocation(line: 2160, column: 6, scope: !7917)
!7936 = !DILocation(line: 2160, column: 8, scope: !7917)
!7937 = !DILocation(line: 2160, column: 11, scope: !7917)
!7938 = !DILocation(line: 2161, column: 17, scope: !7917)
!7939 = !DILocation(line: 2161, column: 6, scope: !7917)
!7940 = !DILocation(line: 2161, column: 8, scope: !7917)
!7941 = !DILocation(line: 2161, column: 10, scope: !7917)
!7942 = !DILocation(line: 2161, column: 15, scope: !7917)
!7943 = !DILocation(line: 2162, column: 10, scope: !7944)
!7944 = distinct !DILexicalBlock(scope: !7917, file: !1, line: 2162, column: 10)
!7945 = !DILocation(line: 2162, column: 14, scope: !7944)
!7946 = !DILocation(line: 2162, column: 16, scope: !7944)
!7947 = !DILocation(line: 2162, column: 12, scope: !7944)
!7948 = !DILocation(line: 2162, column: 10, scope: !7917)
!7949 = !DILocation(line: 2163, column: 14, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7951, file: !1, line: 2163, column: 7)
!7951 = distinct !DILexicalBlock(scope: !7944, file: !1, line: 2162, column: 21)
!7952 = !DILocation(line: 2163, column: 12, scope: !7950)
!7953 = !DILocation(line: 2163, column: 19, scope: !7954)
!7954 = distinct !DILexicalBlock(scope: !7950, file: !1, line: 2163, column: 7)
!7955 = !DILocation(line: 2163, column: 23, scope: !7954)
!7956 = !DILocation(line: 2163, column: 21, scope: !7954)
!7957 = !DILocation(line: 2163, column: 7, scope: !7950)
!7958 = !DILocation(line: 2164, column: 12, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7954, file: !1, line: 2163, column: 31)
!7960 = !DILocation(line: 2164, column: 14, scope: !7959)
!7961 = !DILocation(line: 2164, column: 17, scope: !7959)
!7962 = !DILocation(line: 2164, column: 19, scope: !7959)
!7963 = !DILocation(line: 2164, column: 10, scope: !7959)
!7964 = !DILocation(line: 2165, column: 22, scope: !7959)
!7965 = !DILocation(line: 2165, column: 24, scope: !7959)
!7966 = !DILocation(line: 2165, column: 27, scope: !7959)
!7967 = !DILocation(line: 2165, column: 8, scope: !7959)
!7968 = !DILocation(line: 2165, column: 10, scope: !7959)
!7969 = !DILocation(line: 2165, column: 13, scope: !7959)
!7970 = !DILocation(line: 2165, column: 15, scope: !7959)
!7971 = !DILocation(line: 2165, column: 20, scope: !7959)
!7972 = !DILocation(line: 2166, column: 18, scope: !7959)
!7973 = !DILocation(line: 2166, column: 8, scope: !7959)
!7974 = !DILocation(line: 2166, column: 10, scope: !7959)
!7975 = !DILocation(line: 2166, column: 13, scope: !7959)
!7976 = !DILocation(line: 2166, column: 16, scope: !7959)
!7977 = !DILocation(line: 2167, column: 7, scope: !7959)
!7978 = !DILocation(line: 2163, column: 27, scope: !7954)
!7979 = !DILocation(line: 2163, column: 7, scope: !7954)
!7980 = distinct !{!7980, !7957, !7981}
!7981 = !DILocation(line: 2167, column: 7, scope: !7950)
!7982 = !DILocation(line: 2168, column: 6, scope: !7951)
!7983 = !DILocation(line: 2169, column: 10, scope: !7984)
!7984 = distinct !DILexicalBlock(scope: !7917, file: !1, line: 2169, column: 10)
!7985 = !DILocation(line: 2169, column: 14, scope: !7984)
!7986 = !DILocation(line: 2169, column: 16, scope: !7984)
!7987 = !DILocation(line: 2169, column: 12, scope: !7984)
!7988 = !DILocation(line: 2169, column: 10, scope: !7917)
!7989 = !DILocation(line: 2170, column: 14, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7991, file: !1, line: 2170, column: 7)
!7991 = distinct !DILexicalBlock(scope: !7984, file: !1, line: 2169, column: 21)
!7992 = !DILocation(line: 2170, column: 12, scope: !7990)
!7993 = !DILocation(line: 2170, column: 19, scope: !7994)
!7994 = distinct !DILexicalBlock(scope: !7990, file: !1, line: 2170, column: 7)
!7995 = !DILocation(line: 2170, column: 23, scope: !7994)
!7996 = !DILocation(line: 2170, column: 21, scope: !7994)
!7997 = !DILocation(line: 2170, column: 7, scope: !7990)
!7998 = !DILocation(line: 2171, column: 12, scope: !7999)
!7999 = distinct !DILexicalBlock(scope: !7994, file: !1, line: 2170, column: 31)
!8000 = !DILocation(line: 2171, column: 14, scope: !7999)
!8001 = !DILocation(line: 2171, column: 17, scope: !7999)
!8002 = !DILocation(line: 2171, column: 19, scope: !7999)
!8003 = !DILocation(line: 2171, column: 10, scope: !7999)
!8004 = !DILocation(line: 2172, column: 22, scope: !7999)
!8005 = !DILocation(line: 2172, column: 24, scope: !7999)
!8006 = !DILocation(line: 2172, column: 27, scope: !7999)
!8007 = !DILocation(line: 2172, column: 8, scope: !7999)
!8008 = !DILocation(line: 2172, column: 10, scope: !7999)
!8009 = !DILocation(line: 2172, column: 13, scope: !7999)
!8010 = !DILocation(line: 2172, column: 15, scope: !7999)
!8011 = !DILocation(line: 2172, column: 20, scope: !7999)
!8012 = !DILocation(line: 2173, column: 18, scope: !7999)
!8013 = !DILocation(line: 2173, column: 8, scope: !7999)
!8014 = !DILocation(line: 2173, column: 10, scope: !7999)
!8015 = !DILocation(line: 2173, column: 13, scope: !7999)
!8016 = !DILocation(line: 2173, column: 16, scope: !7999)
!8017 = !DILocation(line: 2174, column: 7, scope: !7999)
!8018 = !DILocation(line: 2170, column: 27, scope: !7994)
!8019 = !DILocation(line: 2170, column: 7, scope: !7994)
!8020 = distinct !{!8020, !7997, !8021}
!8021 = !DILocation(line: 2174, column: 7, scope: !7990)
!8022 = !DILocation(line: 2175, column: 6, scope: !7991)
!8023 = !DILocation(line: 2176, column: 7, scope: !7917)
!8024 = distinct !{!8024, !7912, !8025}
!8025 = !DILocation(line: 2177, column: 5, scope: !7877)
!8026 = !DILocation(line: 2178, column: 10, scope: !7877)
!8027 = !DILocation(line: 2179, column: 6, scope: !7877)
!8028 = !DILocation(line: 2180, column: 5, scope: !7877)
!8029 = distinct !{!8029, !7088, !8030}
!8030 = !DILocation(line: 2183, column: 2, scope: !6179)
!8031 = !DILocation(line: 2184, column: 1, scope: !6179)
!8032 = distinct !DISubprogram(name: "min_ii", scope: !8033, file: !8033, line: 211, type: !8034, scopeLine: 212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8033 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_base_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!8034 = !DISubroutineType(types: !8035)
!8035 = !{!296, !296, !296}
!8036 = !DILocalVariable(name: "a", arg: 1, scope: !8032, file: !8033, line: 211, type: !296)
!8037 = !DILocation(line: 211, column: 24, scope: !8032)
!8038 = !DILocalVariable(name: "b", arg: 2, scope: !8032, file: !8033, line: 211, type: !296)
!8039 = !DILocation(line: 211, column: 31, scope: !8032)
!8040 = !DILocation(line: 213, column: 10, scope: !8032)
!8041 = !DILocation(line: 213, column: 14, scope: !8032)
!8042 = !DILocation(line: 213, column: 12, scope: !8032)
!8043 = !DILocation(line: 213, column: 9, scope: !8032)
!8044 = !DILocation(line: 213, column: 19, scope: !8032)
!8045 = !DILocation(line: 213, column: 23, scope: !8032)
!8046 = !DILocation(line: 213, column: 2, scope: !8032)
!8047 = distinct !DISubprogram(name: "max_ii", scope: !8033, file: !8033, line: 215, type: !8034, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8048 = !DILocalVariable(name: "a", arg: 1, scope: !8047, file: !8033, line: 215, type: !296)
!8049 = !DILocation(line: 215, column: 24, scope: !8047)
!8050 = !DILocalVariable(name: "b", arg: 2, scope: !8047, file: !8033, line: 215, type: !296)
!8051 = !DILocation(line: 215, column: 31, scope: !8047)
!8052 = !DILocation(line: 217, column: 10, scope: !8047)
!8053 = !DILocation(line: 217, column: 14, scope: !8047)
!8054 = !DILocation(line: 217, column: 12, scope: !8047)
!8055 = !DILocation(line: 217, column: 9, scope: !8047)
!8056 = !DILocation(line: 217, column: 19, scope: !8047)
!8057 = !DILocation(line: 217, column: 23, scope: !8047)
!8058 = !DILocation(line: 217, column: 2, scope: !8047)
!8059 = distinct !DISubprogram(name: "zero_v4", scope: !1718, file: !1718, line: 50, type: !5301, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8060 = !DILocalVariable(name: "r", arg: 1, scope: !8059, file: !1718, line: 50, type: !1686)
!8061 = !DILocation(line: 50, column: 28, scope: !8059)
!8062 = !DILocation(line: 52, column: 2, scope: !8059)
!8063 = !DILocation(line: 52, column: 7, scope: !8059)
!8064 = !DILocation(line: 53, column: 2, scope: !8059)
!8065 = !DILocation(line: 53, column: 7, scope: !8059)
!8066 = !DILocation(line: 54, column: 2, scope: !8059)
!8067 = !DILocation(line: 54, column: 7, scope: !8059)
!8068 = !DILocation(line: 55, column: 2, scope: !8059)
!8069 = !DILocation(line: 55, column: 7, scope: !8059)
!8070 = !DILocation(line: 56, column: 1, scope: !8059)
!8071 = distinct !DISubprogram(name: "max_ff", scope: !8033, file: !8033, line: 206, type: !8072, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8072 = !DISubroutineType(types: !8073)
!8073 = !{!4, !4, !4}
!8074 = !DILocalVariable(name: "a", arg: 1, scope: !8071, file: !8033, line: 206, type: !4)
!8075 = !DILocation(line: 206, column: 28, scope: !8071)
!8076 = !DILocalVariable(name: "b", arg: 2, scope: !8071, file: !8033, line: 206, type: !4)
!8077 = !DILocation(line: 206, column: 37, scope: !8071)
!8078 = !DILocation(line: 208, column: 10, scope: !8071)
!8079 = !DILocation(line: 208, column: 14, scope: !8071)
!8080 = !DILocation(line: 208, column: 12, scope: !8071)
!8081 = !DILocation(line: 208, column: 9, scope: !8071)
!8082 = !DILocation(line: 208, column: 19, scope: !8071)
!8083 = !DILocation(line: 208, column: 23, scope: !8071)
!8084 = !DILocation(line: 208, column: 2, scope: !8071)
!8085 = distinct !DISubprogram(name: "pseudoinverse_m4_m4", scope: !1, file: !1, line: 2186, type: !8086, scopeLine: 2187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8086 = !DISubroutineType(types: !8087)
!8087 = !{null, !47, !47, !4}
!8088 = !DILocalVariable(name: "Ainv", arg: 1, scope: !8085, file: !1, line: 2186, type: !47)
!8089 = !DILocation(line: 2186, column: 32, scope: !8085)
!8090 = !DILocalVariable(name: "A", arg: 2, scope: !8085, file: !1, line: 2186, type: !47)
!8091 = !DILocation(line: 2186, column: 50, scope: !8085)
!8092 = !DILocalVariable(name: "epsilon", arg: 3, scope: !8085, file: !1, line: 2186, type: !4)
!8093 = !DILocation(line: 2186, column: 65, scope: !8085)
!8094 = !DILocalVariable(name: "V", scope: !8085, file: !1, line: 2190, type: !12)
!8095 = !DILocation(line: 2190, column: 8, scope: !8085)
!8096 = !DILocalVariable(name: "W", scope: !8085, file: !1, line: 2190, type: !48)
!8097 = !DILocation(line: 2190, column: 17, scope: !8085)
!8098 = !DILocalVariable(name: "Wm", scope: !8085, file: !1, line: 2190, type: !12)
!8099 = !DILocation(line: 2190, column: 23, scope: !8085)
!8100 = !DILocalVariable(name: "U", scope: !8085, file: !1, line: 2190, type: !12)
!8101 = !DILocation(line: 2190, column: 33, scope: !8085)
!8102 = !DILocalVariable(name: "i", scope: !8085, file: !1, line: 2191, type: !296)
!8103 = !DILocation(line: 2191, column: 6, scope: !8085)
!8104 = !DILocation(line: 2193, column: 15, scope: !8085)
!8105 = !DILocation(line: 2193, column: 2, scope: !8085)
!8106 = !DILocation(line: 2194, column: 9, scope: !8085)
!8107 = !DILocation(line: 2194, column: 12, scope: !8085)
!8108 = !DILocation(line: 2194, column: 15, scope: !8085)
!8109 = !DILocation(line: 2194, column: 18, scope: !8085)
!8110 = !DILocation(line: 2194, column: 2, scope: !8085)
!8111 = !DILocation(line: 2195, column: 15, scope: !8085)
!8112 = !DILocation(line: 2195, column: 2, scope: !8085)
!8113 = !DILocation(line: 2196, column: 15, scope: !8085)
!8114 = !DILocation(line: 2196, column: 2, scope: !8085)
!8115 = !DILocation(line: 2198, column: 10, scope: !8085)
!8116 = !DILocation(line: 2198, column: 2, scope: !8085)
!8117 = !DILocation(line: 2199, column: 9, scope: !8118)
!8118 = distinct !DILexicalBlock(scope: !8085, file: !1, line: 2199, column: 2)
!8119 = !DILocation(line: 2199, column: 7, scope: !8118)
!8120 = !DILocation(line: 2199, column: 14, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8118, file: !1, line: 2199, column: 2)
!8122 = !DILocation(line: 2199, column: 16, scope: !8121)
!8123 = !DILocation(line: 2199, column: 2, scope: !8118)
!8124 = !DILocation(line: 2200, column: 17, scope: !8121)
!8125 = !DILocation(line: 2200, column: 15, scope: !8121)
!8126 = !DILocation(line: 2200, column: 22, scope: !8121)
!8127 = !DILocation(line: 2200, column: 20, scope: !8121)
!8128 = !DILocation(line: 2200, column: 14, scope: !8121)
!8129 = !DILocation(line: 2200, column: 49, scope: !8121)
!8130 = !DILocation(line: 2200, column: 47, scope: !8121)
!8131 = !DILocation(line: 2200, column: 45, scope: !8121)
!8132 = !DILocation(line: 2200, column: 6, scope: !8121)
!8133 = !DILocation(line: 2200, column: 3, scope: !8121)
!8134 = !DILocation(line: 2200, column: 9, scope: !8121)
!8135 = !DILocation(line: 2200, column: 12, scope: !8121)
!8136 = !DILocation(line: 2199, column: 22, scope: !8121)
!8137 = !DILocation(line: 2199, column: 2, scope: !8121)
!8138 = distinct !{!8138, !8123, !8139}
!8139 = !DILocation(line: 2200, column: 50, scope: !8118)
!8140 = !DILocation(line: 2202, column: 15, scope: !8085)
!8141 = !DILocation(line: 2202, column: 2, scope: !8085)
!8142 = !DILocation(line: 2204, column: 2, scope: !8085)
!8143 = !DILocation(line: 2205, column: 1, scope: !8085)
!8144 = distinct !DISubprogram(name: "pseudoinverse_m3_m3", scope: !1, file: !1, line: 2207, type: !8145, scopeLine: 2208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8145 = !DISubroutineType(types: !8146)
!8146 = !{null, !35, !35, !4}
!8147 = !DILocalVariable(name: "Ainv", arg: 1, scope: !8144, file: !1, line: 2207, type: !35)
!8148 = !DILocation(line: 2207, column: 32, scope: !8144)
!8149 = !DILocalVariable(name: "A", arg: 2, scope: !8144, file: !1, line: 2207, type: !35)
!8150 = !DILocation(line: 2207, column: 50, scope: !8144)
!8151 = !DILocalVariable(name: "epsilon", arg: 3, scope: !8144, file: !1, line: 2207, type: !4)
!8152 = !DILocation(line: 2207, column: 65, scope: !8144)
!8153 = !DILocation(line: 2210, column: 20, scope: !8154)
!8154 = distinct !DILexicalBlock(scope: !8144, file: !1, line: 2210, column: 6)
!8155 = !DILocation(line: 2210, column: 26, scope: !8154)
!8156 = !DILocation(line: 2210, column: 7, scope: !8154)
!8157 = !DILocation(line: 2210, column: 6, scope: !8144)
!8158 = !DILocalVariable(name: "tmp", scope: !8159, file: !1, line: 2211, type: !12)
!8159 = distinct !DILexicalBlock(scope: !8154, file: !1, line: 2210, column: 30)
!8160 = !DILocation(line: 2211, column: 9, scope: !8159)
!8161 = !DILocalVariable(name: "tmpinv", scope: !8159, file: !1, line: 2211, type: !12)
!8162 = !DILocation(line: 2211, column: 20, scope: !8159)
!8163 = !DILocation(line: 2213, column: 14, scope: !8159)
!8164 = !DILocation(line: 2213, column: 19, scope: !8159)
!8165 = !DILocation(line: 2213, column: 3, scope: !8159)
!8166 = !DILocation(line: 2214, column: 23, scope: !8159)
!8167 = !DILocation(line: 2214, column: 31, scope: !8159)
!8168 = !DILocation(line: 2214, column: 36, scope: !8159)
!8169 = !DILocation(line: 2214, column: 3, scope: !8159)
!8170 = !DILocation(line: 2215, column: 14, scope: !8159)
!8171 = !DILocation(line: 2215, column: 20, scope: !8159)
!8172 = !DILocation(line: 2215, column: 3, scope: !8159)
!8173 = !DILocation(line: 2216, column: 2, scope: !8159)
!8174 = !DILocation(line: 2217, column: 1, scope: !8144)
!8175 = distinct !DISubprogram(name: "has_zero_axis_m4", scope: !1, file: !1, line: 2219, type: !3248, scopeLine: 2220, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8176 = !DILocalVariable(name: "matrix", arg: 1, scope: !8175, file: !1, line: 2219, type: !47)
!8177 = !DILocation(line: 2219, column: 29, scope: !8175)
!8178 = !DILocation(line: 2221, column: 24, scope: !8175)
!8179 = !DILocation(line: 2221, column: 9, scope: !8175)
!8180 = !DILocation(line: 2221, column: 35, scope: !8175)
!8181 = !DILocation(line: 2221, column: 49, scope: !8175)
!8182 = !DILocation(line: 2222, column: 24, scope: !8175)
!8183 = !DILocation(line: 2222, column: 9, scope: !8175)
!8184 = !DILocation(line: 2222, column: 35, scope: !8175)
!8185 = !DILocation(line: 2222, column: 49, scope: !8175)
!8186 = !DILocation(line: 2223, column: 24, scope: !8175)
!8187 = !DILocation(line: 2223, column: 9, scope: !8175)
!8188 = !DILocation(line: 2223, column: 35, scope: !8175)
!8189 = !DILocation(line: 2221, column: 2, scope: !8175)
!8190 = distinct !DISubprogram(name: "invert_m4_m4_safe", scope: !1, file: !1, line: 2226, type: !148, scopeLine: 2227, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8191 = !DILocalVariable(name: "Ainv", arg: 1, scope: !8190, file: !1, line: 2226, type: !47)
!8192 = !DILocation(line: 2226, column: 30, scope: !8190)
!8193 = !DILocalVariable(name: "A", arg: 2, scope: !8190, file: !1, line: 2226, type: !47)
!8194 = !DILocation(line: 2226, column: 48, scope: !8190)
!8195 = !DILocation(line: 2228, column: 20, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8190, file: !1, line: 2228, column: 6)
!8197 = !DILocation(line: 2228, column: 26, scope: !8196)
!8198 = !DILocation(line: 2228, column: 7, scope: !8196)
!8199 = !DILocation(line: 2228, column: 6, scope: !8190)
!8200 = !DILocalVariable(name: "Atemp", scope: !8201, file: !1, line: 2229, type: !12)
!8201 = distinct !DILexicalBlock(scope: !8196, file: !1, line: 2228, column: 30)
!8202 = !DILocation(line: 2229, column: 9, scope: !8201)
!8203 = !DILocation(line: 2231, column: 14, scope: !8201)
!8204 = !DILocation(line: 2231, column: 21, scope: !8201)
!8205 = !DILocation(line: 2231, column: 3, scope: !8201)
!8206 = !DILocation(line: 2236, column: 3, scope: !8201)
!8207 = !DILocation(line: 2236, column: 15, scope: !8201)
!8208 = !DILocation(line: 2237, column: 3, scope: !8201)
!8209 = !DILocation(line: 2237, column: 15, scope: !8201)
!8210 = !DILocation(line: 2238, column: 3, scope: !8201)
!8211 = !DILocation(line: 2238, column: 15, scope: !8201)
!8212 = !DILocation(line: 2240, column: 21, scope: !8213)
!8213 = distinct !DILexicalBlock(scope: !8201, file: !1, line: 2240, column: 7)
!8214 = !DILocation(line: 2240, column: 27, scope: !8213)
!8215 = !DILocation(line: 2240, column: 8, scope: !8213)
!8216 = !DILocation(line: 2240, column: 7, scope: !8201)
!8217 = !DILocation(line: 2241, column: 12, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8213, file: !1, line: 2240, column: 35)
!8219 = !DILocation(line: 2241, column: 4, scope: !8218)
!8220 = !DILocation(line: 2242, column: 3, scope: !8218)
!8221 = !DILocation(line: 2243, column: 2, scope: !8201)
!8222 = !DILocation(line: 2244, column: 1, scope: !8190)
!8223 = distinct !DISubprogram(name: "BLI_space_transform_from_matrices", scope: !1, file: !1, line: 2264, type: !8224, scopeLine: 2265, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8224 = !DISubroutineType(types: !8225)
!8225 = !{null, !6, !47, !47}
!8226 = !DILocalVariable(name: "data", arg: 1, scope: !8223, file: !1, line: 2264, type: !6)
!8227 = !DILocation(line: 2264, column: 56, scope: !8223)
!8228 = !DILocalVariable(name: "local", arg: 2, scope: !8223, file: !1, line: 2264, type: !47)
!8229 = !DILocation(line: 2264, column: 68, scope: !8223)
!8230 = !DILocalVariable(name: "target", arg: 3, scope: !8223, file: !1, line: 2264, type: !47)
!8231 = !DILocation(line: 2264, column: 87, scope: !8223)
!8232 = !DILocalVariable(name: "itarget", scope: !8223, file: !1, line: 2266, type: !12)
!8233 = !DILocation(line: 2266, column: 8, scope: !8223)
!8234 = !DILocation(line: 2267, column: 15, scope: !8223)
!8235 = !DILocation(line: 2267, column: 24, scope: !8223)
!8236 = !DILocation(line: 2267, column: 2, scope: !8223)
!8237 = !DILocation(line: 2268, column: 14, scope: !8223)
!8238 = !DILocation(line: 2268, column: 20, scope: !8223)
!8239 = !DILocation(line: 2268, column: 34, scope: !8223)
!8240 = !DILocation(line: 2268, column: 43, scope: !8223)
!8241 = !DILocation(line: 2268, column: 2, scope: !8223)
!8242 = !DILocation(line: 2269, column: 15, scope: !8223)
!8243 = !DILocation(line: 2269, column: 21, scope: !8223)
!8244 = !DILocation(line: 2269, column: 35, scope: !8223)
!8245 = !DILocation(line: 2269, column: 41, scope: !8223)
!8246 = !DILocation(line: 2269, column: 2, scope: !8223)
!8247 = !DILocation(line: 2270, column: 1, scope: !8223)
!8248 = distinct !DISubprogram(name: "BLI_space_transform_apply", scope: !1, file: !1, line: 2272, type: !8249, scopeLine: 2273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8249 = !DISubroutineType(types: !8250)
!8250 = !{null, !8251, !1686}
!8251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8252, size: 64)
!8252 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!8253 = !DILocalVariable(name: "data", arg: 1, scope: !8248, file: !1, line: 2272, type: !8251)
!8254 = !DILocation(line: 2272, column: 54, scope: !8248)
!8255 = !DILocalVariable(name: "co", arg: 2, scope: !8248, file: !1, line: 2272, type: !1686)
!8256 = !DILocation(line: 2272, column: 66, scope: !8248)
!8257 = !DILocation(line: 2274, column: 14, scope: !8248)
!8258 = !DILocation(line: 2274, column: 37, scope: !8248)
!8259 = !DILocation(line: 2274, column: 44, scope: !8248)
!8260 = !DILocation(line: 2274, column: 18, scope: !8248)
!8261 = !DILocation(line: 2274, column: 58, scope: !8248)
!8262 = !DILocation(line: 2274, column: 2, scope: !8248)
!8263 = !DILocation(line: 2275, column: 1, scope: !8248)
!8264 = distinct !DISubprogram(name: "BLI_space_transform_invert", scope: !1, file: !1, line: 2277, type: !8249, scopeLine: 2278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8265 = !DILocalVariable(name: "data", arg: 1, scope: !8264, file: !1, line: 2277, type: !8251)
!8266 = !DILocation(line: 2277, column: 55, scope: !8264)
!8267 = !DILocalVariable(name: "co", arg: 2, scope: !8264, file: !1, line: 2277, type: !1686)
!8268 = !DILocation(line: 2277, column: 67, scope: !8264)
!8269 = !DILocation(line: 2279, column: 14, scope: !8264)
!8270 = !DILocation(line: 2279, column: 37, scope: !8264)
!8271 = !DILocation(line: 2279, column: 44, scope: !8264)
!8272 = !DILocation(line: 2279, column: 18, scope: !8264)
!8273 = !DILocation(line: 2279, column: 58, scope: !8264)
!8274 = !DILocation(line: 2279, column: 2, scope: !8264)
!8275 = !DILocation(line: 2280, column: 1, scope: !8264)
!8276 = distinct !DISubprogram(name: "BLI_space_transform_apply_normal", scope: !1, file: !1, line: 2282, type: !8249, scopeLine: 2283, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8277 = !DILocalVariable(name: "data", arg: 1, scope: !8276, file: !1, line: 2282, type: !8251)
!8278 = !DILocation(line: 2282, column: 61, scope: !8276)
!8279 = !DILocalVariable(name: "no", arg: 2, scope: !8276, file: !1, line: 2282, type: !1686)
!8280 = !DILocation(line: 2282, column: 73, scope: !8276)
!8281 = !DILocation(line: 2284, column: 36, scope: !8276)
!8282 = !DILocation(line: 2284, column: 43, scope: !8276)
!8283 = !DILocation(line: 2284, column: 17, scope: !8276)
!8284 = !DILocation(line: 2284, column: 57, scope: !8276)
!8285 = !DILocation(line: 2284, column: 2, scope: !8276)
!8286 = !DILocation(line: 2285, column: 15, scope: !8276)
!8287 = !DILocation(line: 2285, column: 2, scope: !8276)
!8288 = !DILocation(line: 2286, column: 1, scope: !8276)
!8289 = distinct !DISubprogram(name: "BLI_space_transform_invert_normal", scope: !1, file: !1, line: 2288, type: !8249, scopeLine: 2289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8290 = !DILocalVariable(name: "data", arg: 1, scope: !8289, file: !1, line: 2288, type: !8251)
!8291 = !DILocation(line: 2288, column: 62, scope: !8289)
!8292 = !DILocalVariable(name: "no", arg: 2, scope: !8289, file: !1, line: 2288, type: !1686)
!8293 = !DILocation(line: 2288, column: 74, scope: !8289)
!8294 = !DILocation(line: 2290, column: 36, scope: !8289)
!8295 = !DILocation(line: 2290, column: 43, scope: !8289)
!8296 = !DILocation(line: 2290, column: 17, scope: !8289)
!8297 = !DILocation(line: 2290, column: 57, scope: !8289)
!8298 = !DILocation(line: 2290, column: 2, scope: !8289)
!8299 = !DILocation(line: 2291, column: 15, scope: !8289)
!8300 = !DILocation(line: 2291, column: 2, scope: !8289)
!8301 = !DILocation(line: 2292, column: 1, scope: !8289)
!8302 = distinct !DISubprogram(name: "mul_v3_v3fl", scope: !1718, file: !1718, line: 399, type: !8303, scopeLine: 400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8303 = !DISubroutineType(types: !8304)
!8304 = !{null, !1686, !1721, !4}
!8305 = !DILocalVariable(name: "r", arg: 1, scope: !8302, file: !1718, line: 399, type: !1686)
!8306 = !DILocation(line: 399, column: 32, scope: !8302)
!8307 = !DILocalVariable(name: "a", arg: 2, scope: !8302, file: !1718, line: 399, type: !1721)
!8308 = !DILocation(line: 399, column: 50, scope: !8302)
!8309 = !DILocalVariable(name: "f", arg: 3, scope: !8302, file: !1718, line: 399, type: !4)
!8310 = !DILocation(line: 399, column: 62, scope: !8302)
!8311 = !DILocation(line: 401, column: 9, scope: !8302)
!8312 = !DILocation(line: 401, column: 16, scope: !8302)
!8313 = !DILocation(line: 401, column: 14, scope: !8302)
!8314 = !DILocation(line: 401, column: 2, scope: !8302)
!8315 = !DILocation(line: 401, column: 7, scope: !8302)
!8316 = !DILocation(line: 402, column: 9, scope: !8302)
!8317 = !DILocation(line: 402, column: 16, scope: !8302)
!8318 = !DILocation(line: 402, column: 14, scope: !8302)
!8319 = !DILocation(line: 402, column: 2, scope: !8302)
!8320 = !DILocation(line: 402, column: 7, scope: !8302)
!8321 = !DILocation(line: 403, column: 9, scope: !8302)
!8322 = !DILocation(line: 403, column: 16, scope: !8302)
!8323 = !DILocation(line: 403, column: 14, scope: !8302)
!8324 = !DILocation(line: 403, column: 2, scope: !8302)
!8325 = !DILocation(line: 403, column: 7, scope: !8302)
!8326 = !DILocation(line: 404, column: 1, scope: !8302)
!8327 = distinct !DISubprogram(name: "zero_v3", scope: !1718, file: !1718, line: 43, type: !5301, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8328 = !DILocalVariable(name: "r", arg: 1, scope: !8327, file: !1718, line: 43, type: !1686)
!8329 = !DILocation(line: 43, column: 28, scope: !8327)
!8330 = !DILocation(line: 45, column: 2, scope: !8327)
!8331 = !DILocation(line: 45, column: 7, scope: !8327)
!8332 = !DILocation(line: 46, column: 2, scope: !8327)
!8333 = !DILocation(line: 46, column: 7, scope: !8327)
!8334 = !DILocation(line: 47, column: 2, scope: !8327)
!8335 = !DILocation(line: 47, column: 7, scope: !8327)
!8336 = !DILocation(line: 48, column: 1, scope: !8327)
