; ModuleID = 'loop-unroll.c'
source_filename = "loop-unroll.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.niter_desc = type { %struct.edge_def*, %struct.edge_def*, i8, i8, i64, i64, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8, i32, %struct.rtx_def* }
%struct.opt_info = type { %struct.htab*, %struct.iv_to_split*, %struct.iv_to_split**, %struct.htab*, %struct.var_to_expand*, %struct.var_to_expand**, i32, %struct.basic_block_def*, %struct.basic_block_def* }
%struct.iv_to_split = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.iv_to_split*, i32, [3 x i32] }
%struct.var_to_expand = type { %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_rtx_heap*, %struct.var_to_expand*, i32, i32, i32, i32 }
%struct.VEC_rtx_heap = type { %struct.VEC_rtx_base }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.rtx_iv = type { %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }

@.str = private unnamed_addr constant [14 x i8] c"loop-unroll.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [54 x i8] c"\0A;; *** Considering loop %d for complete peeling ***\0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"\0A;; Considering peeling once rolling loop\0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.4 = private unnamed_addr constant [37 x i8] c";; Not considering loop, is too big\0A\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c";; Unable to prove that the loop rolls exactly once\0A\00", align 1
@.str.6 = private unnamed_addr constant [46 x i8] c";; Decided to peel exactly once rolling loop\0A\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"\0A;; Considering peeling completely\0A\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c";; Not considering loop, is not innermost\0A\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c";; Not considering loop, cold area\0A\00", align 1
@.str.10 = private unnamed_addr constant [43 x i8] c";; Not considering loop, cannot duplicate\0A\00", align 1
@.str.11 = private unnamed_addr constant [58 x i8] c";; Unable to prove that the loop iterates constant times\0A\00", align 1
@.str.12 = private unnamed_addr constant [49 x i8] c";; Not peeling loop completely, rolls too much (\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.14 = private unnamed_addr constant [38 x i8] c" iterations > %d [maximum peelings])\0A\00", align 1
@.str.15 = private unnamed_addr constant [36 x i8] c";; Decided to peel loop completely\0A\00", align 1
@flag_split_ivs_in_unroller = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [37 x i8] c";; Peeled loop completely, %d times\0A\00", align 1
@flag_variable_expansion_in_unroller = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@mode_class = external dso_local constant [87 x i8], align 16
@flag_associative_math = external dso_local global i32, align 4
@.str.17 = private unnamed_addr constant [27 x i8] c"\0A;; Expanding Accumulator \00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_signed_zeros = external dso_local global i32, align 4
@const_tiny_rtx = external dso_local global [3 x [87 x %struct.rtx_def*]], align 16
@.str.19 = private unnamed_addr constant [33 x i8] c"\0A;; *** Considering loop %d ***\0A\00", align 1
@.str.20 = private unnamed_addr constant [67 x i8] c"\0A;; Considering unrolling loop with constant number of iterations\0A\00", align 1
@.str.21 = private unnamed_addr constant [37 x i8] c";; Not unrolling loop, doesn't roll\0A\00", align 1
@.str.22 = private unnamed_addr constant [43 x i8] c";; max_unroll %d (%d copies, initial %d).\0A\00", align 1
@.str.23 = private unnamed_addr constant [65 x i8] c";; Decided to unroll the constant times rolling loop, %d times.\0A\00", align 1
@.str.24 = private unnamed_addr constant [77 x i8] c"\0A;; Considering unrolling loop with runtime computable number of iterations\0A\00", align 1
@.str.25 = private unnamed_addr constant [76 x i8] c";; Unable to prove that the number of iterations can be counted in runtime\0A\00", align 1
@.str.26 = private unnamed_addr constant [33 x i8] c";; Loop iterates constant times\0A\00", align 1
@.str.27 = private unnamed_addr constant [75 x i8] c";; Decided to unroll the runtime computable times rolling loop, %d times.\0A\00", align 1
@.str.28 = private unnamed_addr constant [41 x i8] c"\0A;; Considering unrolling loop stupidly\0A\00", align 1
@.str.29 = private unnamed_addr constant [23 x i8] c";; The loop is simple\0A\00", align 1
@.str.30 = private unnamed_addr constant [37 x i8] c";; Not unrolling, contains branches\0A\00", align 1
@.str.31 = private unnamed_addr constant [51 x i8] c";; Decided to unroll the loop stupidly, %d times.\0A\00", align 1
@.str.32 = private unnamed_addr constant [37 x i8] c"\0A;; Considering simply peeling loop\0A\00", align 1
@.str.33 = private unnamed_addr constant [35 x i8] c";; Not peeling, contains branches\0A\00", align 1
@.str.34 = private unnamed_addr constant [38 x i8] c";; Not peeling loop, rolls too much (\00", align 1
@.str.35 = private unnamed_addr constant [56 x i8] c";; Not peeling loop, no evidence it will be profitable\0A\00", align 1
@.str.36 = private unnamed_addr constant [47 x i8] c";; Decided to simply peel the loop, %d times.\0A\00", align 1
@.str.37 = private unnamed_addr constant [36 x i8] c";; Condition on beginning of loop.\0A\00", align 1
@.str.38 = private unnamed_addr constant [30 x i8] c";; Condition on end of loop.\0A\00", align 1
@.str.39 = private unnamed_addr constant [62 x i8] c";; Unrolled loop %d times, constant # of iterations %i insns\0A\00", align 1
@.str.40 = private unnamed_addr constant [74 x i8] c";; Unrolled loop %d times, counting # of iterations in runtime, %i insns\0A\00", align 1
@.str.41 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.42 = private unnamed_addr constant [26 x i8] c";; Peeling loop %d times\0A\00", align 1
@.str.43 = private unnamed_addr constant [37 x i8] c";; Unrolled loop %d times, %i insns\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @unroll_and_peel_loops(i32 %flags) #0 !dbg !1920 {
entry:
  %flags.addr = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %check = alloca i8, align 1
  %li = alloca %struct.loop_iterator, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1924, metadata !DIExpression()), !dbg !1925
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !1926, metadata !DIExpression()), !dbg !1927
  call void @llvm.dbg.declare(metadata i8* %check, metadata !1928, metadata !DIExpression()), !dbg !1929
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !1930, metadata !DIExpression()), !dbg !1936
  %0 = load i32, i32* %flags.addr, align 4, !dbg !1937
  call void @peel_loops_completely(i32 %0), !dbg !1938
  %1 = load i32, i32* %flags.addr, align 4, !dbg !1939
  call void @decide_unrolling_and_peeling(i32 %1), !dbg !1940
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !1941
  br label %for.cond, !dbg !1941

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1943
  %tobool = icmp ne %struct.loop* %2, null, !dbg !1941
  br i1 %tobool, label %for.body, label %for.end, !dbg !1941

for.body:                                         ; preds = %for.cond
  store i8 1, i8* %check, align 1, !dbg !1945
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1947
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 4, !dbg !1948
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !1949
  %4 = load i32, i32* %decision, align 8, !dbg !1949
  switch i32 %4, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb2
    i32 4, label %sw.bb3
    i32 5, label %sw.bb4
    i32 0, label %sw.bb5
  ], !dbg !1950

sw.bb:                                            ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1951
  br label %sw.bb1, !dbg !1951

sw.bb1:                                           ; preds = %for.body, %sw.bb
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1953
  call void @peel_loop_simple(%struct.loop* %5), !dbg !1954
  br label %sw.epilog, !dbg !1955

sw.bb2:                                           ; preds = %for.body
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1956
  call void @unroll_loop_constant_iterations(%struct.loop* %6), !dbg !1957
  br label %sw.epilog, !dbg !1958

sw.bb3:                                           ; preds = %for.body
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1959
  call void @unroll_loop_runtime_iterations(%struct.loop* %7), !dbg !1960
  br label %sw.epilog, !dbg !1961

sw.bb4:                                           ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1962
  call void @unroll_loop_stupid(%struct.loop* %8), !dbg !1963
  br label %sw.epilog, !dbg !1964

sw.bb5:                                           ; preds = %for.body
  store i8 0, i8* %check, align 1, !dbg !1965
  br label %sw.epilog, !dbg !1966

sw.default:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 195, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !1967
  br label %sw.epilog, !dbg !1968

sw.epilog:                                        ; preds = %sw.default, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1
  %9 = load i8, i8* %check, align 1, !dbg !1969
  %tobool6 = icmp ne i8 %9, 0, !dbg !1969
  br i1 %tobool6, label %if.then, label %if.end, !dbg !1971

if.then:                                          ; preds = %sw.epilog
  br label %if.end, !dbg !1972

if.end:                                           ; preds = %if.then, %sw.epilog
  br label %for.inc, !dbg !1974

for.inc:                                          ; preds = %if.end
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !1943
  br label %for.cond, !dbg !1943, !llvm.loop !1975

for.end:                                          ; preds = %for.cond
  call void @iv_analysis_done(), !dbg !1977
  ret void, !dbg !1978
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @peel_loops_completely(i32 %flags) #0 !dbg !1979 {
entry:
  %flags.addr = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1980, metadata !DIExpression()), !dbg !1981
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !1982, metadata !DIExpression()), !dbg !1983
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !1984, metadata !DIExpression()), !dbg !1985
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !1986
  br label %for.cond, !dbg !1986

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1988
  %tobool = icmp ne %struct.loop* %0, null, !dbg !1986
  br i1 %tobool, label %for.body, label %for.end, !dbg !1986

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1990
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 4, !dbg !1992
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !1993
  store i32 0, i32* %decision, align 8, !dbg !1994
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !1995
  %tobool1 = icmp ne %struct._IO_FILE* %2, null, !dbg !1995
  br i1 %tobool1, label %if.then, label %if.end, !dbg !1997

if.then:                                          ; preds = %for.body
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !1998
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !1999
  %num = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 0, !dbg !2000
  %5 = load i32, i32* %num, align 8, !dbg !2000
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 %5), !dbg !2001
  br label %if.end, !dbg !2001

if.end:                                           ; preds = %if.then, %for.body
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2002
  %call2 = call i32 @num_loop_insns(%struct.loop* %6), !dbg !2003
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2004
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 1, !dbg !2005
  store i32 %call2, i32* %ninsns, align 4, !dbg !2006
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2007
  %9 = load i32, i32* %flags.addr, align 4, !dbg !2008
  call void @decide_peel_once_rolling(%struct.loop* %8, i32 %9), !dbg !2009
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2010
  %lpt_decision3 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 4, !dbg !2012
  %decision4 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision3, i32 0, i32 0, !dbg !2013
  %11 = load i32, i32* %decision4, align 8, !dbg !2013
  %cmp = icmp eq i32 %11, 0, !dbg !2014
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !2015

if.then5:                                         ; preds = %if.end
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2016
  %13 = load i32, i32* %flags.addr, align 4, !dbg !2017
  call void @decide_peel_completely(%struct.loop* %12, i32 %13), !dbg !2018
  br label %if.end6, !dbg !2018

if.end6:                                          ; preds = %if.then5, %if.end
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2019
  %lpt_decision7 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 4, !dbg !2021
  %decision8 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision7, i32 0, i32 0, !dbg !2022
  %15 = load i32, i32* %decision8, align 8, !dbg !2022
  %cmp9 = icmp eq i32 %15, 1, !dbg !2023
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !2024

if.then10:                                        ; preds = %if.end6
  %16 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2025
  call void @peel_loop_completely(%struct.loop* %16), !dbg !2027
  br label %if.end11, !dbg !2028

if.end11:                                         ; preds = %if.then10, %if.end6
  br label %for.inc, !dbg !2029

for.inc:                                          ; preds = %if.end11
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !1988
  br label %for.cond, !dbg !1988, !llvm.loop !2030

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2032
}

; Function Attrs: noinline nounwind uwtable
define internal void @decide_unrolling_and_peeling(i32 %flags) #0 !dbg !2033 {
entry:
  %flags.addr = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2034, metadata !DIExpression()), !dbg !2035
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2036, metadata !DIExpression()), !dbg !2037
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2038, metadata !DIExpression()), !dbg !2039
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !2040
  br label %for.cond, !dbg !2040

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2042
  %tobool = icmp ne %struct.loop* %0, null, !dbg !2040
  br i1 %tobool, label %for.body, label %for.end, !dbg !2040

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2044
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 4, !dbg !2046
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !2047
  store i32 0, i32* %decision, align 8, !dbg !2048
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2049
  %tobool1 = icmp ne %struct._IO_FILE* %2, null, !dbg !2049
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2051

if.then:                                          ; preds = %for.body
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2052
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2053
  %num = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 0, !dbg !2054
  %5 = load i32, i32* %num, align 8, !dbg !2054
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.19, i64 0, i64 0), i32 %5), !dbg !2055
  br label %if.end, !dbg !2055

if.end:                                           ; preds = %if.then, %for.body
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2056
  %call2 = call zeroext i8 @optimize_loop_for_size_p(%struct.loop* %6), !dbg !2058
  %tobool3 = icmp ne i8 %call2, 0, !dbg !2058
  br i1 %tobool3, label %if.then4, label %if.end9, !dbg !2059

if.then4:                                         ; preds = %if.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2060
  %tobool5 = icmp ne %struct._IO_FILE* %7, null, !dbg !2060
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !2063

if.then6:                                         ; preds = %if.then4
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2064
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0)), !dbg !2065
  br label %if.end8, !dbg !2065

if.end8:                                          ; preds = %if.then6, %if.then4
  br label %for.inc, !dbg !2066

if.end9:                                          ; preds = %if.end
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2067
  %call10 = call zeroext i8 @can_duplicate_loop_p(%struct.loop* %9), !dbg !2069
  %tobool11 = icmp ne i8 %call10, 0, !dbg !2069
  br i1 %tobool11, label %if.end17, label %if.then12, !dbg !2070

if.then12:                                        ; preds = %if.end9
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2071
  %tobool13 = icmp ne %struct._IO_FILE* %10, null, !dbg !2071
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !2074

if.then14:                                        ; preds = %if.then12
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2075
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0)), !dbg !2076
  br label %if.end16, !dbg !2076

if.end16:                                         ; preds = %if.then14, %if.then12
  br label %for.inc, !dbg !2077

if.end17:                                         ; preds = %if.end9
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2078
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 8, !dbg !2080
  %13 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2080
  %tobool18 = icmp ne %struct.loop* %13, null, !dbg !2078
  br i1 %tobool18, label %if.then19, label %if.end24, !dbg !2081

if.then19:                                        ; preds = %if.end17
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2082
  %tobool20 = icmp ne %struct._IO_FILE* %14, null, !dbg !2082
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !2085

if.then21:                                        ; preds = %if.then19
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2086
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0)), !dbg !2087
  br label %if.end23, !dbg !2087

if.end23:                                         ; preds = %if.then21, %if.then19
  br label %for.inc, !dbg !2088

if.end24:                                         ; preds = %if.end17
  %16 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2089
  %call25 = call i32 @num_loop_insns(%struct.loop* %16), !dbg !2090
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2091
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 1, !dbg !2092
  store i32 %call25, i32* %ninsns, align 4, !dbg !2093
  %18 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2094
  %call26 = call i32 @average_num_loop_insns(%struct.loop* %18), !dbg !2095
  %19 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2096
  %av_ninsns = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 5, !dbg !2097
  store i32 %call26, i32* %av_ninsns, align 8, !dbg !2098
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2099
  %21 = load i32, i32* %flags.addr, align 4, !dbg !2100
  call void @decide_unroll_constant_iterations(%struct.loop* %20, i32 %21), !dbg !2101
  %22 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2102
  %lpt_decision27 = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 4, !dbg !2104
  %decision28 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision27, i32 0, i32 0, !dbg !2105
  %23 = load i32, i32* %decision28, align 8, !dbg !2105
  %cmp = icmp eq i32 %23, 0, !dbg !2106
  br i1 %cmp, label %if.then29, label %if.end30, !dbg !2107

if.then29:                                        ; preds = %if.end24
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2108
  %25 = load i32, i32* %flags.addr, align 4, !dbg !2109
  call void @decide_unroll_runtime_iterations(%struct.loop* %24, i32 %25), !dbg !2110
  br label %if.end30, !dbg !2110

if.end30:                                         ; preds = %if.then29, %if.end24
  %26 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2111
  %lpt_decision31 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 4, !dbg !2113
  %decision32 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision31, i32 0, i32 0, !dbg !2114
  %27 = load i32, i32* %decision32, align 8, !dbg !2114
  %cmp33 = icmp eq i32 %27, 0, !dbg !2115
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !2116

if.then34:                                        ; preds = %if.end30
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2117
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2118
  call void @decide_unroll_stupid(%struct.loop* %28, i32 %29), !dbg !2119
  br label %if.end35, !dbg !2119

if.end35:                                         ; preds = %if.then34, %if.end30
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2120
  %lpt_decision36 = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 4, !dbg !2122
  %decision37 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision36, i32 0, i32 0, !dbg !2123
  %31 = load i32, i32* %decision37, align 8, !dbg !2123
  %cmp38 = icmp eq i32 %31, 0, !dbg !2124
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !2125

if.then39:                                        ; preds = %if.end35
  %32 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2126
  %33 = load i32, i32* %flags.addr, align 4, !dbg !2127
  call void @decide_peel_simple(%struct.loop* %32, i32 %33), !dbg !2128
  br label %if.end40, !dbg !2128

if.end40:                                         ; preds = %if.then39, %if.end35
  br label %for.inc, !dbg !2129

for.inc:                                          ; preds = %if.end40, %if.end23, %if.end16, %if.end8
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2042
  br label %for.cond, !dbg !2042, !llvm.loop !2130

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2132
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !2133 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2138, metadata !DIExpression()), !dbg !2139
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2140, metadata !DIExpression()), !dbg !2141
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2142, metadata !DIExpression()), !dbg !2143
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !2144, metadata !DIExpression()), !dbg !2145
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2146, metadata !DIExpression()), !dbg !2147
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !2148, metadata !DIExpression()), !dbg !2149
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2150
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !2151
  store i32 0, i32* %idx, align 8, !dbg !2152
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2153
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2153
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2153
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2153
  %tobool = icmp ne %struct.loops* %2, null, !dbg !2153
  br i1 %tobool, label %if.end, label %if.then, !dbg !2155

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2156
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !2158
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2159
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2160
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !2161
  br label %return, !dbg !2162

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !2163
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !2163
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2164
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !2165
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !2166
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2167
  %and = and i32 %6, 1, !dbg !2168
  %tobool3 = icmp ne i32 %and, 0, !dbg !2169
  %7 = zext i1 %tobool3 to i64, !dbg !2169
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !2169
  store i32 %cond, i32* %mn, align 4, !dbg !2170
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2171
  %and4 = and i32 %8, 4, !dbg !2173
  %tobool5 = icmp ne i32 %and4, 0, !dbg !2173
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2174

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !2175
  br label %for.cond, !dbg !2178

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2179
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2179
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !2179
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !2179
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2179
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2179
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !2179
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2179

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2179
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2179
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !2179
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !2179
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !2179
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !2179
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !2179
  br label %cond.end, !dbg !2179

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2179

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2179
  %15 = load i32, i32* %i, align 4, !dbg !2179
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !2179
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2181
  br i1 %tobool15, label %for.body, label %for.end, !dbg !2181

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2182
  %cmp = icmp ne %struct.loop* %16, null, !dbg !2184
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !2185

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2186
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !2187
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2187
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !2188
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !2189

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2190
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2191
  %20 = load i32, i32* %num, align 8, !dbg !2191
  %21 = load i32, i32* %mn, align 4, !dbg !2192
  %cmp18 = icmp sge i32 %20, %21, !dbg !2193
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !2194

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2195
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !2195
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !2195
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !2195
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !2195

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2195
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !2195
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !2195
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !2195
  br label %cond.end26, !dbg !2195

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !2195

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !2195
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2195
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !2195
  %27 = load i32, i32* %num28, align 8, !dbg !2195
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !2195
  br label %if.end30, !dbg !2195

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2192

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !2196
  %inc = add i32 %28, 1, !dbg !2196
  store i32 %inc, i32* %i, align 4, !dbg !2196
  br label %for.cond, !dbg !2197, !llvm.loop !2198

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !2200

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2201
  %and31 = and i32 %29, 2, !dbg !2203
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2203
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !2204

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2205
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !2205
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !2205
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !2205
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !2208
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2208
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !2209
  br label %for.cond36, !dbg !2210

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2211
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !2213
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !2213
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !2214
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !2215

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !2216

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2217
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !2218
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !2218
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !2219
  br label %for.cond36, !dbg !2220, !llvm.loop !2221

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !2223

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2224
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2227
  %38 = load i32, i32* %num43, align 8, !dbg !2227
  %39 = load i32, i32* %mn, align 4, !dbg !2228
  %cmp44 = icmp sge i32 %38, %39, !dbg !2229
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !2230

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2231
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !2231
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !2231
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !2231
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !2231

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2231
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !2231
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !2231
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !2231
  br label %cond.end52, !dbg !2231

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !2231

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !2231
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2231
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !2231
  %45 = load i32, i32* %num54, align 8, !dbg !2231
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !2231
  br label %if.end56, !dbg !2231

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2232
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !2234
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2234
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !2232
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !2235

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2236
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !2239
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !2239
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !2240
  br label %for.cond60, !dbg !2241

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2242
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !2244
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !2244
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !2245
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !2246

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !2247

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2248
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !2249
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !2249
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !2250
  br label %for.cond60, !dbg !2251, !llvm.loop !2252

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !2254

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2255
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !2257
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !2257
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !2258

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !2259

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2260
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !2261
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !2262
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !2223, !llvm.loop !2263

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !2265

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2266
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !2266
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !2266
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !2266
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !2268
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !2268
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !2269
  br label %while.body79, !dbg !2270

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2271
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !2274
  %60 = load i32, i32* %num80, align 8, !dbg !2274
  %61 = load i32, i32* %mn, align 4, !dbg !2275
  %cmp81 = icmp sge i32 %60, %61, !dbg !2276
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !2277

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2278
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !2278
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !2278
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !2278
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !2278

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2278
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !2278
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !2278
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !2278
  br label %cond.end89, !dbg !2278

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !2278

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !2278
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2278
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !2278
  %67 = load i32, i32* %num91, align 8, !dbg !2278
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !2278
  br label %if.end93, !dbg !2278

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2279
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !2281
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !2281
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !2282
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !2283

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2284
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !2285
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !2285
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !2286
  br label %if.end110, !dbg !2287

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !2288

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2290
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !2291
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !2292

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2293
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !2294
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !2294
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !2295
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !2296
  br i1 %75, label %while.body103, label %while.end105, !dbg !2288

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2297
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !2298
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !2299
  br label %while.cond99, !dbg !2288, !llvm.loop !2300

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2302
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !2304
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !2305

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !2306

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2307
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !2308
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !2308
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !2309
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !2270, !llvm.loop !2310

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2312
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2313
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !2314
  br label %return, !dbg !2315

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !2315
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @peel_loop_simple(%struct.loop* %loop) #0 !dbg !2316 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %wont_exit = alloca %struct.simple_bitmap_def*, align 8
  %npeel = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  %opt_info = alloca %struct.opt_info*, align 8
  %ok = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2319, metadata !DIExpression()), !dbg !2320
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %wont_exit, metadata !2321, metadata !DIExpression()), !dbg !2333
  call void @llvm.dbg.declare(metadata i32* %npeel, metadata !2334, metadata !DIExpression()), !dbg !2335
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2336
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 4, !dbg !2337
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 1, !dbg !2338
  %1 = load i32, i32* %times, align 4, !dbg !2338
  store i32 %1, i32* %npeel, align 4, !dbg !2335
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !2339, metadata !DIExpression()), !dbg !2355
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2356
  %call = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %2), !dbg !2357
  store %struct.niter_desc* %call, %struct.niter_desc** %desc, align 8, !dbg !2355
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info, metadata !2358, metadata !DIExpression()), !dbg !2359
  store %struct.opt_info* null, %struct.opt_info** %opt_info, align 8, !dbg !2359
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !2360, metadata !DIExpression()), !dbg !2361
  %3 = load i32, i32* @flag_split_ivs_in_unroller, align 4, !dbg !2362
  %tobool = icmp ne i32 %3, 0, !dbg !2362
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2364

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %npeel, align 4, !dbg !2365
  %cmp = icmp ugt i32 %4, 1, !dbg !2366
  br i1 %cmp, label %if.then, label %if.end, !dbg !2367

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2368
  %call1 = call %struct.opt_info* @analyze_insns_in_loop(%struct.loop* %5), !dbg !2369
  store %struct.opt_info* %call1, %struct.opt_info** %opt_info, align 8, !dbg !2370
  br label %if.end, !dbg !2371

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i32, i32* %npeel, align 4, !dbg !2372
  %add = add i32 %6, 1, !dbg !2373
  %call2 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add), !dbg !2374
  store %struct.simple_bitmap_def* %call2, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2375
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2376
  call void @sbitmap_zero(%struct.simple_bitmap_def* %7), !dbg !2377
  %8 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2378
  call void @opt_info_start_duplication(%struct.opt_info* %8), !dbg !2379
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2380
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2381
  %call3 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %10), !dbg !2382
  %11 = load i32, i32* %npeel, align 4, !dbg !2383
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2384
  %13 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2385
  %tobool4 = icmp ne %struct.opt_info* %13, null, !dbg !2385
  %14 = zext i1 %tobool4 to i64, !dbg !2385
  %cond = select i1 %tobool4, i32 2, i32 0, !dbg !2385
  %or = or i32 1, %cond, !dbg !2386
  %call5 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %9, %struct.edge_def* %call3, i32 %11, %struct.simple_bitmap_def* %12, %struct.edge_def* null, %struct.VEC_edge_heap** null, i32 %or), !dbg !2387
  store i8 %call5, i8* %ok, align 1, !dbg !2388
  %15 = load i8, i8* %ok, align 1, !dbg !2389
  %tobool6 = icmp ne i8 %15, 0, !dbg !2389
  br i1 %tobool6, label %cond.false, label %cond.true, !dbg !2389

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1312, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2389
  br label %cond.end, !dbg !2389

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2389

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond7 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2389
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2390
  %17 = bitcast %struct.simple_bitmap_def* %16 to i8*, !dbg !2390
  call void @free(i8* %17), !dbg !2391
  %18 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2392
  %tobool8 = icmp ne %struct.opt_info* %18, null, !dbg !2392
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !2394

if.then9:                                         ; preds = %cond.end
  %19 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2395
  %20 = load i32, i32* %npeel, align 4, !dbg !2397
  call void @apply_opt_in_copies(%struct.opt_info* %19, i32 %20, i8 zeroext 0, i8 zeroext 0), !dbg !2398
  %21 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2399
  call void @free_opt_info(%struct.opt_info* %21), !dbg !2400
  br label %if.end10, !dbg !2401

if.end10:                                         ; preds = %if.then9, %cond.end
  %22 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2402
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %22, i32 0, i32 2, !dbg !2404
  %23 = load i8, i8* %simple_p, align 8, !dbg !2404
  %tobool11 = icmp ne i8 %23, 0, !dbg !2402
  br i1 %tobool11, label %if.then12, label %if.end18, !dbg !2405

if.then12:                                        ; preds = %if.end10
  %24 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2406
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %24, i32 0, i32 3, !dbg !2409
  %25 = load i8, i8* %const_iter, align 1, !dbg !2409
  %tobool13 = icmp ne i8 %25, 0, !dbg !2406
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !2410

if.then14:                                        ; preds = %if.then12
  %26 = load i32, i32* %npeel, align 4, !dbg !2411
  %conv = zext i32 %26 to i64, !dbg !2411
  %27 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2413
  %niter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %27, i32 0, i32 4, !dbg !2414
  %28 = load i64, i64* %niter, align 8, !dbg !2415
  %sub = sub i64 %28, %conv, !dbg !2415
  store i64 %sub, i64* %niter, align 8, !dbg !2415
  %29 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2416
  %niter15 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %29, i32 0, i32 4, !dbg !2416
  %30 = load i64, i64* %niter15, align 8, !dbg !2416
  %call16 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %30), !dbg !2416
  %31 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2417
  %niter_expr = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %31, i32 0, i32 11, !dbg !2418
  store %struct.rtx_def* %call16, %struct.rtx_def** %niter_expr, align 8, !dbg !2419
  %32 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2420
  %noloop_assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %32, i32 0, i32 7, !dbg !2421
  store %struct.rtx_def* null, %struct.rtx_def** %noloop_assumptions, align 8, !dbg !2422
  br label %if.end17, !dbg !2423

if.else:                                          ; preds = %if.then12
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2424
  call void @free_simple_loop_desc(%struct.loop* %33), !dbg !2426
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then14
  br label %if.end18, !dbg !2427

if.end18:                                         ; preds = %if.end17, %if.end10
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2428
  %tobool19 = icmp ne %struct._IO_FILE* %34, null, !dbg !2428
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !2430

if.then20:                                        ; preds = %if.end18
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2431
  %36 = load i32, i32* %npeel, align 4, !dbg !2432
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.42, i64 0, i64 0), i32 %36), !dbg !2433
  br label %if.end22, !dbg !2433

if.end22:                                         ; preds = %if.then20, %if.end18
  ret void, !dbg !2434
}

; Function Attrs: noinline nounwind uwtable
define internal void @unroll_loop_constant_iterations(%struct.loop* %loop) #0 !dbg !2435 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %niter = alloca i64, align 8
  %exit_mod = alloca i32, align 4
  %wont_exit = alloca %struct.simple_bitmap_def*, align 8
  %i = alloca i32, align 4
  %remove_edges = alloca %struct.VEC_edge_heap*, align 8
  %e = alloca %struct.edge_def*, align 8
  %max_unroll = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  %exit_at_end = alloca i8, align 1
  %opt_info = alloca %struct.opt_info*, align 8
  %ok = alloca i8, align 1
  %exit_block = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2436, metadata !DIExpression()), !dbg !2437
  call void @llvm.dbg.declare(metadata i64* %niter, metadata !2438, metadata !DIExpression()), !dbg !2439
  call void @llvm.dbg.declare(metadata i32* %exit_mod, metadata !2440, metadata !DIExpression()), !dbg !2441
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %wont_exit, metadata !2442, metadata !DIExpression()), !dbg !2443
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2444, metadata !DIExpression()), !dbg !2445
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %remove_edges, metadata !2446, metadata !DIExpression()), !dbg !2452
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2453, metadata !DIExpression()), !dbg !2454
  call void @llvm.dbg.declare(metadata i32* %max_unroll, metadata !2455, metadata !DIExpression()), !dbg !2456
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2457
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 4, !dbg !2458
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 1, !dbg !2459
  %1 = load i32, i32* %times, align 4, !dbg !2459
  store i32 %1, i32* %max_unroll, align 4, !dbg !2456
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !2460, metadata !DIExpression()), !dbg !2461
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2462
  %call = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %2), !dbg !2463
  store %struct.niter_desc* %call, %struct.niter_desc** %desc, align 8, !dbg !2461
  call void @llvm.dbg.declare(metadata i8* %exit_at_end, metadata !2464, metadata !DIExpression()), !dbg !2465
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2466
  %call1 = call zeroext i8 @loop_exit_at_end_p(%struct.loop* %3), !dbg !2467
  store i8 %call1, i8* %exit_at_end, align 1, !dbg !2465
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info, metadata !2468, metadata !DIExpression()), !dbg !2469
  store %struct.opt_info* null, %struct.opt_info** %opt_info, align 8, !dbg !2469
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !2470, metadata !DIExpression()), !dbg !2471
  %4 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2472
  %niter2 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %4, i32 0, i32 4, !dbg !2473
  %5 = load i64, i64* %niter2, align 8, !dbg !2473
  store i64 %5, i64* %niter, align 8, !dbg !2474
  %6 = load i64, i64* %niter, align 8, !dbg !2475
  %7 = load i32, i32* %max_unroll, align 4, !dbg !2475
  %add = add i32 %7, 1, !dbg !2475
  %conv = zext i32 %add to i64, !dbg !2475
  %cmp = icmp ugt i64 %6, %conv, !dbg !2475
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2475

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 656, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2475
  br label %cond.end, !dbg !2475

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2475

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2475
  %8 = load i64, i64* %niter, align 8, !dbg !2476
  %9 = load i32, i32* %max_unroll, align 4, !dbg !2477
  %add4 = add i32 %9, 1, !dbg !2478
  %conv5 = zext i32 %add4 to i64, !dbg !2479
  %rem = urem i64 %8, %conv5, !dbg !2480
  %conv6 = trunc i64 %rem to i32, !dbg !2476
  store i32 %conv6, i32* %exit_mod, align 4, !dbg !2481
  %10 = load i32, i32* %max_unroll, align 4, !dbg !2482
  %add7 = add i32 %10, 1, !dbg !2483
  %call8 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add7), !dbg !2484
  store %struct.simple_bitmap_def* %call8, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2485
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2486
  call void @sbitmap_ones(%struct.simple_bitmap_def* %11), !dbg !2487
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !2488
  %12 = load i32, i32* @flag_split_ivs_in_unroller, align 4, !dbg !2489
  %tobool = icmp ne i32 %12, 0, !dbg !2489
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !2491

lor.lhs.false:                                    ; preds = %cond.end
  %13 = load i32, i32* @flag_variable_expansion_in_unroller, align 4, !dbg !2492
  %tobool9 = icmp ne i32 %13, 0, !dbg !2492
  br i1 %tobool9, label %if.then, label %if.end, !dbg !2493

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2494
  %call10 = call %struct.opt_info* @analyze_insns_in_loop(%struct.loop* %14), !dbg !2495
  store %struct.opt_info* %call10, %struct.opt_info** %opt_info, align 8, !dbg !2496
  br label %if.end, !dbg !2497

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %15 = load i8, i8* %exit_at_end, align 1, !dbg !2498
  %tobool11 = icmp ne i8 %15, 0, !dbg !2498
  br i1 %tobool11, label %if.else, label %if.then12, !dbg !2500

if.then12:                                        ; preds = %if.end
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2501
  %tobool13 = icmp ne %struct._IO_FILE* %16, null, !dbg !2501
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !2504

if.then14:                                        ; preds = %if.then12
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2505
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.37, i64 0, i64 0)), !dbg !2506
  br label %if.end16, !dbg !2506

if.end16:                                         ; preds = %if.then14, %if.then12
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2507
  call void @RESET_BIT(%struct.simple_bitmap_def* %18, i32 0), !dbg !2508
  %19 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2509
  %noloop_assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %19, i32 0, i32 7, !dbg !2511
  %20 = load %struct.rtx_def*, %struct.rtx_def** %noloop_assumptions, align 8, !dbg !2511
  %tobool17 = icmp ne %struct.rtx_def* %20, null, !dbg !2509
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !2512

if.then18:                                        ; preds = %if.end16
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2513
  call void @RESET_BIT(%struct.simple_bitmap_def* %21, i32 1), !dbg !2514
  br label %if.end19, !dbg !2514

if.end19:                                         ; preds = %if.then18, %if.end16
  %22 = load i32, i32* %exit_mod, align 4, !dbg !2515
  %tobool20 = icmp ne i32 %22, 0, !dbg !2515
  br i1 %tobool20, label %if.then21, label %if.end43, !dbg !2517

if.then21:                                        ; preds = %if.end19
  %23 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2518
  call void @opt_info_start_duplication(%struct.opt_info* %23), !dbg !2520
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2521
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2522
  %call22 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %25), !dbg !2523
  %26 = load i32, i32* %exit_mod, align 4, !dbg !2524
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2525
  %28 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2526
  %out_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %28, i32 0, i32 0, !dbg !2527
  %29 = load %struct.edge_def*, %struct.edge_def** %out_edge, align 8, !dbg !2527
  %30 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2528
  %tobool23 = icmp ne %struct.opt_info* %30, null, !dbg !2528
  br i1 %tobool23, label %land.rhs, label %land.end, !dbg !2529

land.rhs:                                         ; preds = %if.then21
  %31 = load i32, i32* %exit_mod, align 4, !dbg !2530
  %cmp24 = icmp ugt i32 %31, 1, !dbg !2531
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then21
  %32 = phi i1 [ false, %if.then21 ], [ %cmp24, %land.rhs ], !dbg !2532
  %33 = zext i1 %32 to i64, !dbg !2528
  %cond26 = select i1 %32, i32 2, i32 0, !dbg !2528
  %or = or i32 1, %cond26, !dbg !2533
  %call27 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %24, %struct.edge_def* %call22, i32 %26, %struct.simple_bitmap_def* %27, %struct.edge_def* %29, %struct.VEC_edge_heap** %remove_edges, i32 %or), !dbg !2534
  store i8 %call27, i8* %ok, align 1, !dbg !2535
  %34 = load i8, i8* %ok, align 1, !dbg !2536
  %tobool28 = icmp ne i8 %34, 0, !dbg !2536
  br i1 %tobool28, label %cond.false30, label %cond.true29, !dbg !2536

cond.true29:                                      ; preds = %land.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 693, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2536
  br label %cond.end31, !dbg !2536

cond.false30:                                     ; preds = %land.end
  br label %cond.end31, !dbg !2536

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !2536
  %35 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2537
  %tobool33 = icmp ne %struct.opt_info* %35, null, !dbg !2537
  br i1 %tobool33, label %land.lhs.true, label %if.end37, !dbg !2539

land.lhs.true:                                    ; preds = %cond.end31
  %36 = load i32, i32* %exit_mod, align 4, !dbg !2540
  %cmp34 = icmp ugt i32 %36, 1, !dbg !2541
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !2542

if.then36:                                        ; preds = %land.lhs.true
  %37 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2543
  %38 = load i32, i32* %exit_mod, align 4, !dbg !2544
  call void @apply_opt_in_copies(%struct.opt_info* %37, i32 %38, i8 zeroext 0, i8 zeroext 0), !dbg !2545
  br label %if.end37, !dbg !2545

if.end37:                                         ; preds = %if.then36, %land.lhs.true, %cond.end31
  %39 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2546
  %noloop_assumptions38 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %39, i32 0, i32 7, !dbg !2547
  store %struct.rtx_def* null, %struct.rtx_def** %noloop_assumptions38, align 8, !dbg !2548
  %40 = load i32, i32* %exit_mod, align 4, !dbg !2549
  %conv39 = zext i32 %40 to i64, !dbg !2549
  %41 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2550
  %niter40 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %41, i32 0, i32 4, !dbg !2551
  %42 = load i64, i64* %niter40, align 8, !dbg !2552
  %sub = sub i64 %42, %conv39, !dbg !2552
  store i64 %sub, i64* %niter40, align 8, !dbg !2552
  %43 = load i32, i32* %exit_mod, align 4, !dbg !2553
  %conv41 = zext i32 %43 to i64, !dbg !2553
  %44 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2554
  %niter_max = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %44, i32 0, i32 5, !dbg !2555
  %45 = load i64, i64* %niter_max, align 8, !dbg !2556
  %sub42 = sub i64 %45, %conv41, !dbg !2556
  store i64 %sub42, i64* %niter_max, align 8, !dbg !2556
  br label %if.end43, !dbg !2557

if.end43:                                         ; preds = %if.end37, %if.end19
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2558
  call void @SET_BIT(%struct.simple_bitmap_def* %46, i32 1), !dbg !2559
  br label %if.end91, !dbg !2560

if.else:                                          ; preds = %if.end
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2561
  %tobool44 = icmp ne %struct._IO_FILE* %47, null, !dbg !2561
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !2564

if.then45:                                        ; preds = %if.else
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2565
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.38, i64 0, i64 0)), !dbg !2566
  br label %if.end47, !dbg !2566

if.end47:                                         ; preds = %if.then45, %if.else
  %49 = load i32, i32* %exit_mod, align 4, !dbg !2567
  %50 = load i32, i32* %max_unroll, align 4, !dbg !2569
  %cmp48 = icmp ne i32 %49, %50, !dbg !2570
  br i1 %cmp48, label %if.then53, label %lor.lhs.false50, !dbg !2571

lor.lhs.false50:                                  ; preds = %if.end47
  %51 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2572
  %noloop_assumptions51 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %51, i32 0, i32 7, !dbg !2573
  %52 = load %struct.rtx_def*, %struct.rtx_def** %noloop_assumptions51, align 8, !dbg !2573
  %tobool52 = icmp ne %struct.rtx_def* %52, null, !dbg !2572
  br i1 %tobool52, label %if.then53, label %if.end90, !dbg !2574

if.then53:                                        ; preds = %lor.lhs.false50, %if.end47
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2575
  call void @RESET_BIT(%struct.simple_bitmap_def* %53, i32 0), !dbg !2577
  %54 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2578
  %noloop_assumptions54 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %54, i32 0, i32 7, !dbg !2580
  %55 = load %struct.rtx_def*, %struct.rtx_def** %noloop_assumptions54, align 8, !dbg !2580
  %tobool55 = icmp ne %struct.rtx_def* %55, null, !dbg !2578
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !2581

if.then56:                                        ; preds = %if.then53
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2582
  call void @RESET_BIT(%struct.simple_bitmap_def* %56, i32 1), !dbg !2583
  br label %if.end57, !dbg !2583

if.end57:                                         ; preds = %if.then56, %if.then53
  %57 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2584
  call void @opt_info_start_duplication(%struct.opt_info* %57), !dbg !2585
  %58 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2586
  %59 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2587
  %call58 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %59), !dbg !2588
  %60 = load i32, i32* %exit_mod, align 4, !dbg !2589
  %add59 = add i32 %60, 1, !dbg !2590
  %61 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2591
  %62 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2592
  %out_edge60 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %62, i32 0, i32 0, !dbg !2593
  %63 = load %struct.edge_def*, %struct.edge_def** %out_edge60, align 8, !dbg !2593
  %64 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2594
  %tobool61 = icmp ne %struct.opt_info* %64, null, !dbg !2594
  br i1 %tobool61, label %land.rhs62, label %land.end65, !dbg !2595

land.rhs62:                                       ; preds = %if.end57
  %65 = load i32, i32* %exit_mod, align 4, !dbg !2596
  %cmp63 = icmp ugt i32 %65, 0, !dbg !2597
  br label %land.end65

land.end65:                                       ; preds = %land.rhs62, %if.end57
  %66 = phi i1 [ false, %if.end57 ], [ %cmp63, %land.rhs62 ], !dbg !2598
  %67 = zext i1 %66 to i64, !dbg !2594
  %cond66 = select i1 %66, i32 2, i32 0, !dbg !2594
  %or67 = or i32 1, %cond66, !dbg !2599
  %call68 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %58, %struct.edge_def* %call58, i32 %add59, %struct.simple_bitmap_def* %61, %struct.edge_def* %63, %struct.VEC_edge_heap** %remove_edges, i32 %or67), !dbg !2600
  store i8 %call68, i8* %ok, align 1, !dbg !2601
  %68 = load i8, i8* %ok, align 1, !dbg !2602
  %tobool69 = icmp ne i8 %68, 0, !dbg !2602
  br i1 %tobool69, label %cond.false71, label %cond.true70, !dbg !2602

cond.true70:                                      ; preds = %land.end65
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 732, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2602
  br label %cond.end72, !dbg !2602

cond.false71:                                     ; preds = %land.end65
  br label %cond.end72, !dbg !2602

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond73 = phi i32 [ 0, %cond.true70 ], [ 0, %cond.false71 ], !dbg !2602
  %69 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2603
  %tobool74 = icmp ne %struct.opt_info* %69, null, !dbg !2603
  br i1 %tobool74, label %land.lhs.true75, label %if.end80, !dbg !2605

land.lhs.true75:                                  ; preds = %cond.end72
  %70 = load i32, i32* %exit_mod, align 4, !dbg !2606
  %cmp76 = icmp ugt i32 %70, 0, !dbg !2607
  br i1 %cmp76, label %if.then78, label %if.end80, !dbg !2608

if.then78:                                        ; preds = %land.lhs.true75
  %71 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2609
  %72 = load i32, i32* %exit_mod, align 4, !dbg !2610
  %add79 = add i32 %72, 1, !dbg !2611
  call void @apply_opt_in_copies(%struct.opt_info* %71, i32 %add79, i8 zeroext 0, i8 zeroext 0), !dbg !2612
  br label %if.end80, !dbg !2612

if.end80:                                         ; preds = %if.then78, %land.lhs.true75, %cond.end72
  %73 = load i32, i32* %exit_mod, align 4, !dbg !2613
  %add81 = add i32 %73, 1, !dbg !2614
  %conv82 = zext i32 %add81 to i64, !dbg !2613
  %74 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2615
  %niter83 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %74, i32 0, i32 4, !dbg !2616
  %75 = load i64, i64* %niter83, align 8, !dbg !2617
  %sub84 = sub i64 %75, %conv82, !dbg !2617
  store i64 %sub84, i64* %niter83, align 8, !dbg !2617
  %76 = load i32, i32* %exit_mod, align 4, !dbg !2618
  %add85 = add i32 %76, 1, !dbg !2619
  %conv86 = zext i32 %add85 to i64, !dbg !2618
  %77 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2620
  %niter_max87 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %77, i32 0, i32 5, !dbg !2621
  %78 = load i64, i64* %niter_max87, align 8, !dbg !2622
  %sub88 = sub i64 %78, %conv86, !dbg !2622
  store i64 %sub88, i64* %niter_max87, align 8, !dbg !2622
  %79 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2623
  %noloop_assumptions89 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %79, i32 0, i32 7, !dbg !2624
  store %struct.rtx_def* null, %struct.rtx_def** %noloop_assumptions89, align 8, !dbg !2625
  %80 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2626
  call void @SET_BIT(%struct.simple_bitmap_def* %80, i32 0), !dbg !2627
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2628
  call void @SET_BIT(%struct.simple_bitmap_def* %81, i32 1), !dbg !2629
  br label %if.end90, !dbg !2630

if.end90:                                         ; preds = %if.end80, %lor.lhs.false50
  %82 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2631
  %83 = load i32, i32* %max_unroll, align 4, !dbg !2632
  call void @RESET_BIT(%struct.simple_bitmap_def* %82, i32 %83), !dbg !2633
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end43
  %84 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2634
  call void @opt_info_start_duplication(%struct.opt_info* %84), !dbg !2635
  %85 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2636
  %86 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2637
  %call92 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %86), !dbg !2638
  %87 = load i32, i32* %max_unroll, align 4, !dbg !2639
  %88 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2640
  %89 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2641
  %out_edge93 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %89, i32 0, i32 0, !dbg !2642
  %90 = load %struct.edge_def*, %struct.edge_def** %out_edge93, align 8, !dbg !2642
  %91 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2643
  %tobool94 = icmp ne %struct.opt_info* %91, null, !dbg !2643
  %92 = zext i1 %tobool94 to i64, !dbg !2643
  %cond95 = select i1 %tobool94, i32 2, i32 0, !dbg !2643
  %or96 = or i32 1, %cond95, !dbg !2644
  %call97 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %85, %struct.edge_def* %call92, i32 %87, %struct.simple_bitmap_def* %88, %struct.edge_def* %90, %struct.VEC_edge_heap** %remove_edges, i32 %or96), !dbg !2645
  store i8 %call97, i8* %ok, align 1, !dbg !2646
  %93 = load i8, i8* %ok, align 1, !dbg !2647
  %tobool98 = icmp ne i8 %93, 0, !dbg !2647
  br i1 %tobool98, label %cond.false100, label %cond.true99, !dbg !2647

cond.true99:                                      ; preds = %if.end91
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 759, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2647
  br label %cond.end101, !dbg !2647

cond.false100:                                    ; preds = %if.end91
  br label %cond.end101, !dbg !2647

cond.end101:                                      ; preds = %cond.false100, %cond.true99
  %cond102 = phi i32 [ 0, %cond.true99 ], [ 0, %cond.false100 ], !dbg !2647
  %94 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2648
  %tobool103 = icmp ne %struct.opt_info* %94, null, !dbg !2648
  br i1 %tobool103, label %if.then104, label %if.end105, !dbg !2650

if.then104:                                       ; preds = %cond.end101
  %95 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2651
  %96 = load i32, i32* %max_unroll, align 4, !dbg !2653
  call void @apply_opt_in_copies(%struct.opt_info* %95, i32 %96, i8 zeroext 1, i8 zeroext 1), !dbg !2654
  %97 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !2655
  call void @free_opt_info(%struct.opt_info* %97), !dbg !2656
  br label %if.end105, !dbg !2657

if.end105:                                        ; preds = %if.then104, %cond.end101
  %98 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2658
  %99 = bitcast %struct.simple_bitmap_def* %98 to i8*, !dbg !2658
  call void @free(i8* %99), !dbg !2659
  %100 = load i8, i8* %exit_at_end, align 1, !dbg !2660
  %tobool106 = icmp ne i8 %100, 0, !dbg !2660
  br i1 %tobool106, label %if.then107, label %if.end163, !dbg !2662

if.then107:                                       ; preds = %if.end105
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_block, metadata !2663, metadata !DIExpression()), !dbg !2665
  %101 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2666
  %in_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %101, i32 0, i32 1, !dbg !2667
  %102 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !2667
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 0, !dbg !2668
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2668
  %call108 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %103), !dbg !2669
  store %struct.basic_block_def* %call108, %struct.basic_block_def** %exit_block, align 8, !dbg !2665
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2670
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 1, !dbg !2670
  %105 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !2670
  %tobool109 = icmp ne %struct.VEC_edge_gc* %105, null, !dbg !2670
  br i1 %tobool109, label %cond.true110, label %cond.false112, !dbg !2670

cond.true110:                                     ; preds = %if.then107
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2670
  %succs111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 1, !dbg !2670
  %107 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs111, align 8, !dbg !2670
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %107, i32 0, i32 0, !dbg !2670
  br label %cond.end113, !dbg !2670

cond.false112:                                    ; preds = %if.then107
  br label %cond.end113, !dbg !2670

cond.end113:                                      ; preds = %cond.false112, %cond.true110
  %cond114 = phi %struct.VEC_edge_base* [ %base, %cond.true110 ], [ null, %cond.false112 ], !dbg !2670
  %call115 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond114, i32 0), !dbg !2670
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call115, i32 0, i32 1, !dbg !2672
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2672
  %109 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2673
  %out_edge116 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %109, i32 0, i32 0, !dbg !2674
  %110 = load %struct.edge_def*, %struct.edge_def** %out_edge116, align 8, !dbg !2674
  %dest117 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %110, i32 0, i32 1, !dbg !2675
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %dest117, align 8, !dbg !2675
  %cmp118 = icmp eq %struct.basic_block_def* %108, %111, !dbg !2676
  br i1 %cmp118, label %if.then120, label %if.else141, !dbg !2677

if.then120:                                       ; preds = %cond.end113
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2678
  %succs121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 1, !dbg !2678
  %113 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs121, align 8, !dbg !2678
  %tobool122 = icmp ne %struct.VEC_edge_gc* %113, null, !dbg !2678
  br i1 %tobool122, label %cond.true123, label %cond.false126, !dbg !2678

cond.true123:                                     ; preds = %if.then120
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2678
  %succs124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 1, !dbg !2678
  %115 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs124, align 8, !dbg !2678
  %base125 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %115, i32 0, i32 0, !dbg !2678
  br label %cond.end127, !dbg !2678

cond.false126:                                    ; preds = %if.then120
  br label %cond.end127, !dbg !2678

cond.end127:                                      ; preds = %cond.false126, %cond.true123
  %cond128 = phi %struct.VEC_edge_base* [ %base125, %cond.true123 ], [ null, %cond.false126 ], !dbg !2678
  %call129 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond128, i32 0), !dbg !2678
  %116 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2680
  %out_edge130 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %116, i32 0, i32 0, !dbg !2681
  store %struct.edge_def* %call129, %struct.edge_def** %out_edge130, align 8, !dbg !2682
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2683
  %succs131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %117, i32 0, i32 1, !dbg !2683
  %118 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs131, align 8, !dbg !2683
  %tobool132 = icmp ne %struct.VEC_edge_gc* %118, null, !dbg !2683
  br i1 %tobool132, label %cond.true133, label %cond.false136, !dbg !2683

cond.true133:                                     ; preds = %cond.end127
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2683
  %succs134 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 1, !dbg !2683
  %120 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs134, align 8, !dbg !2683
  %base135 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %120, i32 0, i32 0, !dbg !2683
  br label %cond.end137, !dbg !2683

cond.false136:                                    ; preds = %cond.end127
  br label %cond.end137, !dbg !2683

cond.end137:                                      ; preds = %cond.false136, %cond.true133
  %cond138 = phi %struct.VEC_edge_base* [ %base135, %cond.true133 ], [ null, %cond.false136 ], !dbg !2683
  %call139 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond138, i32 1), !dbg !2683
  %121 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2684
  %in_edge140 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %121, i32 0, i32 1, !dbg !2685
  store %struct.edge_def* %call139, %struct.edge_def** %in_edge140, align 8, !dbg !2686
  br label %if.end162, !dbg !2687

if.else141:                                       ; preds = %cond.end113
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2688
  %succs142 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 1, !dbg !2688
  %123 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs142, align 8, !dbg !2688
  %tobool143 = icmp ne %struct.VEC_edge_gc* %123, null, !dbg !2688
  br i1 %tobool143, label %cond.true144, label %cond.false147, !dbg !2688

cond.true144:                                     ; preds = %if.else141
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2688
  %succs145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 1, !dbg !2688
  %125 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs145, align 8, !dbg !2688
  %base146 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %125, i32 0, i32 0, !dbg !2688
  br label %cond.end148, !dbg !2688

cond.false147:                                    ; preds = %if.else141
  br label %cond.end148, !dbg !2688

cond.end148:                                      ; preds = %cond.false147, %cond.true144
  %cond149 = phi %struct.VEC_edge_base* [ %base146, %cond.true144 ], [ null, %cond.false147 ], !dbg !2688
  %call150 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond149, i32 1), !dbg !2688
  %126 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2690
  %out_edge151 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %126, i32 0, i32 0, !dbg !2691
  store %struct.edge_def* %call150, %struct.edge_def** %out_edge151, align 8, !dbg !2692
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2693
  %succs152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 1, !dbg !2693
  %128 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs152, align 8, !dbg !2693
  %tobool153 = icmp ne %struct.VEC_edge_gc* %128, null, !dbg !2693
  br i1 %tobool153, label %cond.true154, label %cond.false157, !dbg !2693

cond.true154:                                     ; preds = %cond.end148
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !2693
  %succs155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %129, i32 0, i32 1, !dbg !2693
  %130 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs155, align 8, !dbg !2693
  %base156 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %130, i32 0, i32 0, !dbg !2693
  br label %cond.end158, !dbg !2693

cond.false157:                                    ; preds = %cond.end148
  br label %cond.end158, !dbg !2693

cond.end158:                                      ; preds = %cond.false157, %cond.true154
  %cond159 = phi %struct.VEC_edge_base* [ %base156, %cond.true154 ], [ null, %cond.false157 ], !dbg !2693
  %call160 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond159, i32 0), !dbg !2693
  %131 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2694
  %in_edge161 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %131, i32 0, i32 1, !dbg !2695
  store %struct.edge_def* %call160, %struct.edge_def** %in_edge161, align 8, !dbg !2696
  br label %if.end162

if.end162:                                        ; preds = %cond.end158, %cond.end137
  br label %if.end163, !dbg !2697

if.end163:                                        ; preds = %if.end162, %if.end105
  %132 = load i32, i32* %max_unroll, align 4, !dbg !2698
  %add164 = add i32 %132, 1, !dbg !2699
  %conv165 = zext i32 %add164 to i64, !dbg !2698
  %133 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2700
  %niter166 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %133, i32 0, i32 4, !dbg !2701
  %134 = load i64, i64* %niter166, align 8, !dbg !2702
  %div = udiv i64 %134, %conv165, !dbg !2702
  store i64 %div, i64* %niter166, align 8, !dbg !2702
  %135 = load i32, i32* %max_unroll, align 4, !dbg !2703
  %add167 = add i32 %135, 1, !dbg !2704
  %conv168 = zext i32 %add167 to i64, !dbg !2703
  %136 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2705
  %niter_max169 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %136, i32 0, i32 5, !dbg !2706
  %137 = load i64, i64* %niter_max169, align 8, !dbg !2707
  %div170 = udiv i64 %137, %conv168, !dbg !2707
  store i64 %div170, i64* %niter_max169, align 8, !dbg !2707
  %138 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2708
  %niter171 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %138, i32 0, i32 4, !dbg !2708
  %139 = load i64, i64* %niter171, align 8, !dbg !2708
  %call172 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %139), !dbg !2708
  %140 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2709
  %niter_expr = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %140, i32 0, i32 11, !dbg !2710
  store %struct.rtx_def* %call172, %struct.rtx_def** %niter_expr, align 8, !dbg !2711
  store i32 0, i32* %i, align 4, !dbg !2712
  br label %for.cond, !dbg !2714

for.cond:                                         ; preds = %for.inc, %if.end163
  %141 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !2715
  %tobool173 = icmp ne %struct.VEC_edge_heap* %141, null, !dbg !2715
  br i1 %tobool173, label %cond.true174, label %cond.false176, !dbg !2715

cond.true174:                                     ; preds = %for.cond
  %142 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !2715
  %base175 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %142, i32 0, i32 0, !dbg !2715
  br label %cond.end177, !dbg !2715

cond.false176:                                    ; preds = %for.cond
  br label %cond.end177, !dbg !2715

cond.end177:                                      ; preds = %cond.false176, %cond.true174
  %cond178 = phi %struct.VEC_edge_base* [ %base175, %cond.true174 ], [ null, %cond.false176 ], !dbg !2715
  %143 = load i32, i32* %i, align 4, !dbg !2715
  %call179 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond178, i32 %143, %struct.edge_def** %e), !dbg !2715
  %tobool180 = icmp ne i32 %call179, 0, !dbg !2717
  br i1 %tobool180, label %for.body, label %for.end, !dbg !2717

for.body:                                         ; preds = %cond.end177
  %144 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2718
  %call181 = call zeroext i8 @remove_path(%struct.edge_def* %144), !dbg !2719
  br label %for.inc, !dbg !2719

for.inc:                                          ; preds = %for.body
  %145 = load i32, i32* %i, align 4, !dbg !2720
  %inc = add i32 %145, 1, !dbg !2720
  store i32 %inc, i32* %i, align 4, !dbg !2720
  br label %for.cond, !dbg !2721, !llvm.loop !2722

for.end:                                          ; preds = %cond.end177
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %remove_edges), !dbg !2724
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2725
  %tobool182 = icmp ne %struct._IO_FILE* %146, null, !dbg !2725
  br i1 %tobool182, label %if.then183, label %if.end186, !dbg !2727

if.then183:                                       ; preds = %for.end
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2728
  %148 = load i32, i32* %max_unroll, align 4, !dbg !2729
  %149 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2730
  %call184 = call i32 @num_loop_insns(%struct.loop* %149), !dbg !2731
  %call185 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %147, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.39, i64 0, i64 0), i32 %148, i32 %call184), !dbg !2732
  br label %if.end186, !dbg !2732

if.end186:                                        ; preds = %if.then183, %for.end
  ret void, !dbg !2733
}

; Function Attrs: noinline nounwind uwtable
define internal void @unroll_loop_runtime_iterations(%struct.loop* %loop) #0 !dbg !2734 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %old_niter = alloca %struct.rtx_def*, align 8
  %niter = alloca %struct.rtx_def*, align 8
  %init_code = alloca %struct.rtx_def*, align 8
  %branch_code = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %p = alloca i32, align 4
  %preheader = alloca %struct.basic_block_def*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %swtch = alloca %struct.basic_block_def*, align 8
  %ezc_swtch = alloca %struct.basic_block_def*, align 8
  %dom_bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %wont_exit = alloca %struct.simple_bitmap_def*, align 8
  %may_exit_copy = alloca i32, align 4
  %n_peel = alloca i32, align 4
  %remove_edges = alloca %struct.VEC_edge_heap*, align 8
  %e = alloca %struct.edge_def*, align 8
  %extra_zero_check = alloca i8, align 1
  %last_may_exit = alloca i8, align 1
  %max_unroll = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  %exit_at_end = alloca i8, align 1
  %opt_info = alloca %struct.opt_info*, align 8
  %ok = alloca i8, align 1
  %ldom = alloca %struct.VEC_basic_block_heap*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %exit_block = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2735, metadata !DIExpression()), !dbg !2736
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_niter, metadata !2737, metadata !DIExpression()), !dbg !2738
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %niter, metadata !2739, metadata !DIExpression()), !dbg !2740
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %init_code, metadata !2741, metadata !DIExpression()), !dbg !2742
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %branch_code, metadata !2743, metadata !DIExpression()), !dbg !2744
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !2745, metadata !DIExpression()), !dbg !2746
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2747, metadata !DIExpression()), !dbg !2748
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2749, metadata !DIExpression()), !dbg !2750
  call void @llvm.dbg.declare(metadata i32* %p, metadata !2751, metadata !DIExpression()), !dbg !2752
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %preheader, metadata !2753, metadata !DIExpression()), !dbg !2754
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !2755, metadata !DIExpression()), !dbg !2757
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %swtch, metadata !2758, metadata !DIExpression()), !dbg !2759
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ezc_swtch, metadata !2760, metadata !DIExpression()), !dbg !2761
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %dom_bbs, metadata !2762, metadata !DIExpression()), !dbg !2763
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %wont_exit, metadata !2764, metadata !DIExpression()), !dbg !2765
  call void @llvm.dbg.declare(metadata i32* %may_exit_copy, metadata !2766, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.declare(metadata i32* %n_peel, metadata !2768, metadata !DIExpression()), !dbg !2769
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %remove_edges, metadata !2770, metadata !DIExpression()), !dbg !2771
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2772, metadata !DIExpression()), !dbg !2773
  call void @llvm.dbg.declare(metadata i8* %extra_zero_check, metadata !2774, metadata !DIExpression()), !dbg !2775
  call void @llvm.dbg.declare(metadata i8* %last_may_exit, metadata !2776, metadata !DIExpression()), !dbg !2777
  call void @llvm.dbg.declare(metadata i32* %max_unroll, metadata !2778, metadata !DIExpression()), !dbg !2779
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2780
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 4, !dbg !2781
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 1, !dbg !2782
  %1 = load i32, i32* %times, align 4, !dbg !2782
  store i32 %1, i32* %max_unroll, align 4, !dbg !2779
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !2783, metadata !DIExpression()), !dbg !2784
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2785
  %call = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %2), !dbg !2786
  store %struct.niter_desc* %call, %struct.niter_desc** %desc, align 8, !dbg !2784
  call void @llvm.dbg.declare(metadata i8* %exit_at_end, metadata !2787, metadata !DIExpression()), !dbg !2788
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2789
  %call1 = call zeroext i8 @loop_exit_at_end_p(%struct.loop* %3), !dbg !2790
  store i8 %call1, i8* %exit_at_end, align 1, !dbg !2788
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info, metadata !2791, metadata !DIExpression()), !dbg !2792
  store %struct.opt_info* null, %struct.opt_info** %opt_info, align 8, !dbg !2792
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !2793, metadata !DIExpression()), !dbg !2794
  %4 = load i32, i32* @flag_split_ivs_in_unroller, align 4, !dbg !2795
  %tobool = icmp ne i32 %4, 0, !dbg !2795
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !2797

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* @flag_variable_expansion_in_unroller, align 4, !dbg !2798
  %tobool2 = icmp ne i32 %5, 0, !dbg !2798
  br i1 %tobool2, label %if.then, label %if.end, !dbg !2799

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2800
  %call3 = call %struct.opt_info* @analyze_insns_in_loop(%struct.loop* %6), !dbg !2801
  store %struct.opt_info* %call3, %struct.opt_info** %opt_info, align 8, !dbg !2802
  br label %if.end, !dbg !2803

if.end:                                           ; preds = %if.then, %lor.lhs.false
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !2804
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2805
  %call4 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %7), !dbg !2806
  store %struct.basic_block_def** %call4, %struct.basic_block_def*** %body, align 8, !dbg !2807
  store i32 0, i32* %i, align 4, !dbg !2808
  br label %for.cond, !dbg !2810

for.cond:                                         ; preds = %for.inc16, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !2811
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2813
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 6, !dbg !2814
  %10 = load i32, i32* %num_nodes, align 4, !dbg !2814
  %cmp = icmp ult i32 %8, %10, !dbg !2815
  br i1 %cmp, label %for.body, label %for.end18, !dbg !2816

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %ldom, metadata !2817, metadata !DIExpression()), !dbg !2819
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2820, metadata !DIExpression()), !dbg !2821
  %11 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2822
  %12 = load i32, i32* %i, align 4, !dbg !2823
  %idxprom = zext i32 %12 to i64, !dbg !2822
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %11, i64 %idxprom, !dbg !2822
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2822
  %call5 = call %struct.VEC_basic_block_heap* @get_dominated_by(i32 1, %struct.basic_block_def* %13), !dbg !2824
  store %struct.VEC_basic_block_heap* %call5, %struct.VEC_basic_block_heap** %ldom, align 8, !dbg !2825
  store i32 0, i32* %j, align 4, !dbg !2826
  br label %for.cond6, !dbg !2828

for.cond6:                                        ; preds = %for.inc, %for.body
  %14 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %ldom, align 8, !dbg !2829
  %tobool7 = icmp ne %struct.VEC_basic_block_heap* %14, null, !dbg !2829
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !2829

cond.true:                                        ; preds = %for.cond6
  %15 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %ldom, align 8, !dbg !2829
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %15, i32 0, i32 0, !dbg !2829
  br label %cond.end, !dbg !2829

cond.false:                                       ; preds = %for.cond6
  br label %cond.end, !dbg !2829

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2829
  %16 = load i32, i32* %j, align 4, !dbg !2829
  %call8 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %16, %struct.basic_block_def** %bb), !dbg !2829
  %tobool9 = icmp ne i32 %call8, 0, !dbg !2831
  br i1 %tobool9, label %for.body10, label %for.end, !dbg !2831

for.body10:                                       ; preds = %cond.end
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2832
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2834
  %call11 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %17, %struct.basic_block_def* %18), !dbg !2835
  %tobool12 = icmp ne i8 %call11, 0, !dbg !2835
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !2836

if.then13:                                        ; preds = %for.body10
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2837
  %call14 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %dom_bbs, %struct.basic_block_def* %19), !dbg !2837
  br label %if.end15, !dbg !2837

if.end15:                                         ; preds = %if.then13, %for.body10
  br label %for.inc, !dbg !2838

for.inc:                                          ; preds = %if.end15
  %20 = load i32, i32* %j, align 4, !dbg !2839
  %inc = add i32 %20, 1, !dbg !2839
  store i32 %inc, i32* %j, align 4, !dbg !2839
  br label %for.cond6, !dbg !2840, !llvm.loop !2841

for.end:                                          ; preds = %cond.end
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %ldom), !dbg !2843
  br label %for.inc16, !dbg !2844

for.inc16:                                        ; preds = %for.end
  %21 = load i32, i32* %i, align 4, !dbg !2845
  %inc17 = add i32 %21, 1, !dbg !2845
  store i32 %inc17, i32* %i, align 4, !dbg !2845
  br label %for.cond, !dbg !2846, !llvm.loop !2847

for.end18:                                        ; preds = %for.cond
  %22 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2849
  %23 = bitcast %struct.basic_block_def** %22 to i8*, !dbg !2849
  call void @free(i8* %23), !dbg !2850
  %24 = load i8, i8* %exit_at_end, align 1, !dbg !2851
  %tobool19 = icmp ne i8 %24, 0, !dbg !2851
  br i1 %tobool19, label %if.else, label %if.then20, !dbg !2853

if.then20:                                        ; preds = %for.end18
  store i32 0, i32* %may_exit_copy, align 4, !dbg !2854
  %25 = load i32, i32* %max_unroll, align 4, !dbg !2856
  %sub = sub i32 %25, 1, !dbg !2857
  store i32 %sub, i32* %n_peel, align 4, !dbg !2858
  store i8 1, i8* %extra_zero_check, align 1, !dbg !2859
  store i8 0, i8* %last_may_exit, align 1, !dbg !2860
  br label %if.end21, !dbg !2861

if.else:                                          ; preds = %for.end18
  %26 = load i32, i32* %max_unroll, align 4, !dbg !2862
  store i32 %26, i32* %may_exit_copy, align 4, !dbg !2864
  %27 = load i32, i32* %max_unroll, align 4, !dbg !2865
  store i32 %27, i32* %n_peel, align 4, !dbg !2866
  store i8 0, i8* %extra_zero_check, align 1, !dbg !2867
  store i8 1, i8* %last_may_exit, align 1, !dbg !2868
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then20
  call void @start_sequence(), !dbg !2869
  %28 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2870
  %mode = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %28, i32 0, i32 10, !dbg !2871
  %29 = load i32, i32* %mode, align 4, !dbg !2871
  %call22 = call %struct.rtx_def* @gen_reg_rtx(i32 %29), !dbg !2872
  store %struct.rtx_def* %call22, %struct.rtx_def** %niter, align 8, !dbg !2873
  store %struct.rtx_def* %call22, %struct.rtx_def** %old_niter, align 8, !dbg !2874
  %30 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2875
  %niter_expr = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %30, i32 0, i32 11, !dbg !2876
  %31 = load %struct.rtx_def*, %struct.rtx_def** %niter_expr, align 8, !dbg !2876
  %call23 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %31), !dbg !2877
  %32 = load %struct.rtx_def*, %struct.rtx_def** %niter, align 8, !dbg !2878
  %call24 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call23, %struct.rtx_def* %32), !dbg !2879
  store %struct.rtx_def* %call24, %struct.rtx_def** %tmp, align 8, !dbg !2880
  %33 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !2881
  %34 = load %struct.rtx_def*, %struct.rtx_def** %niter, align 8, !dbg !2883
  %cmp25 = icmp ne %struct.rtx_def* %33, %34, !dbg !2884
  br i1 %cmp25, label %if.then26, label %if.end28, !dbg !2885

if.then26:                                        ; preds = %if.end21
  %35 = load %struct.rtx_def*, %struct.rtx_def** %niter, align 8, !dbg !2886
  %36 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !2887
  %call27 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %35, %struct.rtx_def* %36), !dbg !2888
  br label %if.end28, !dbg !2888

if.end28:                                         ; preds = %if.then26, %if.end21
  %37 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2889
  %mode29 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %37, i32 0, i32 10, !dbg !2890
  %38 = load i32, i32* %mode29, align 4, !dbg !2890
  %39 = load %struct.rtx_def*, %struct.rtx_def** %niter, align 8, !dbg !2891
  %40 = load i32, i32* %max_unroll, align 4, !dbg !2892
  %conv = zext i32 %40 to i64, !dbg !2892
  %call30 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !2892
  %call31 = call %struct.rtx_def* @expand_simple_binop(i32 %38, i32 61, %struct.rtx_def* %39, %struct.rtx_def* %call30, %struct.rtx_def* null, i32 0, i32 3), !dbg !2893
  store %struct.rtx_def* %call31, %struct.rtx_def** %niter, align 8, !dbg !2894
  %call32 = call %struct.rtx_def* @get_insns(), !dbg !2895
  store %struct.rtx_def* %call32, %struct.rtx_def** %init_code, align 8, !dbg !2896
  call void @end_sequence(), !dbg !2897
  %41 = load %struct.rtx_def*, %struct.rtx_def** %init_code, align 8, !dbg !2898
  call void @unshare_all_rtl_in_chain(%struct.rtx_def* %41), !dbg !2899
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2900
  %call33 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %42), !dbg !2901
  %43 = load %struct.rtx_def*, %struct.rtx_def** %init_code, align 8, !dbg !2902
  %call34 = call %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def* %call33, %struct.rtx_def* %43), !dbg !2903
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !2904
  %44 = load i32, i32* %max_unroll, align 4, !dbg !2905
  %add = add i32 %44, 2, !dbg !2906
  %call35 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add), !dbg !2907
  store %struct.simple_bitmap_def* %call35, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2908
  %45 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2909
  call void @sbitmap_zero(%struct.simple_bitmap_def* %45), !dbg !2910
  %46 = load i8, i8* %extra_zero_check, align 1, !dbg !2911
  %conv36 = zext i8 %46 to i32, !dbg !2911
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !2911
  br i1 %tobool37, label %land.lhs.true, label %if.end40, !dbg !2913

land.lhs.true:                                    ; preds = %if.end28
  %47 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2914
  %noloop_assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %47, i32 0, i32 7, !dbg !2915
  %48 = load %struct.rtx_def*, %struct.rtx_def** %noloop_assumptions, align 8, !dbg !2915
  %tobool38 = icmp ne %struct.rtx_def* %48, null, !dbg !2914
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !2916

if.then39:                                        ; preds = %land.lhs.true
  %49 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2917
  call void @SET_BIT(%struct.simple_bitmap_def* %49, i32 1), !dbg !2918
  br label %if.end40, !dbg !2918

if.end40:                                         ; preds = %if.then39, %land.lhs.true, %if.end28
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2919
  %call41 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %50), !dbg !2920
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call41, i32 0, i32 0, !dbg !2921
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2921
  store %struct.basic_block_def* %51, %struct.basic_block_def** %ezc_swtch, align 8, !dbg !2922
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2923
  %53 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2924
  %call42 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %53), !dbg !2925
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2926
  %55 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2927
  %out_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %55, i32 0, i32 0, !dbg !2928
  %56 = load %struct.edge_def*, %struct.edge_def** %out_edge, align 8, !dbg !2928
  %call43 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %52, %struct.edge_def* %call42, i32 1, %struct.simple_bitmap_def* %54, %struct.edge_def* %56, %struct.VEC_edge_heap** %remove_edges, i32 1), !dbg !2929
  store i8 %call43, i8* %ok, align 1, !dbg !2930
  %57 = load i8, i8* %ok, align 1, !dbg !2931
  %tobool44 = icmp ne i8 %57, 0, !dbg !2931
  br i1 %tobool44, label %cond.false46, label %cond.true45, !dbg !2931

cond.true45:                                      ; preds = %if.end40
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1057, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2931
  br label %cond.end47, !dbg !2931

cond.false46:                                     ; preds = %if.end40
  br label %cond.end47, !dbg !2931

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !2931
  %58 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2932
  %call49 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %58), !dbg !2933
  %call50 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call49), !dbg !2934
  store %struct.basic_block_def* %call50, %struct.basic_block_def** %swtch, align 8, !dbg !2935
  store i32 0, i32* %i, align 4, !dbg !2936
  br label %for.cond51, !dbg !2938

for.cond51:                                       ; preds = %for.inc96, %cond.end47
  %59 = load i32, i32* %i, align 4, !dbg !2939
  %60 = load i32, i32* %n_peel, align 4, !dbg !2941
  %cmp52 = icmp ult i32 %59, %60, !dbg !2942
  br i1 %cmp52, label %for.body54, label %for.end98, !dbg !2943

for.body54:                                       ; preds = %for.cond51
  %61 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2944
  call void @sbitmap_zero(%struct.simple_bitmap_def* %61), !dbg !2946
  %62 = load i32, i32* %i, align 4, !dbg !2947
  %63 = load i32, i32* %n_peel, align 4, !dbg !2949
  %sub55 = sub i32 %63, 1, !dbg !2950
  %cmp56 = icmp ne i32 %62, %sub55, !dbg !2951
  br i1 %cmp56, label %if.then60, label %lor.lhs.false58, !dbg !2952

lor.lhs.false58:                                  ; preds = %for.body54
  %64 = load i8, i8* %last_may_exit, align 1, !dbg !2953
  %tobool59 = icmp ne i8 %64, 0, !dbg !2953
  br i1 %tobool59, label %if.end61, label %if.then60, !dbg !2954

if.then60:                                        ; preds = %lor.lhs.false58, %for.body54
  %65 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2955
  call void @SET_BIT(%struct.simple_bitmap_def* %65, i32 1), !dbg !2956
  br label %if.end61, !dbg !2956

if.end61:                                         ; preds = %if.then60, %lor.lhs.false58
  %66 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2957
  %67 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2958
  %call62 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %67), !dbg !2959
  %68 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !2960
  %69 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !2961
  %out_edge63 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %69, i32 0, i32 0, !dbg !2962
  %70 = load %struct.edge_def*, %struct.edge_def** %out_edge63, align 8, !dbg !2962
  %call64 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %66, %struct.edge_def* %call62, i32 1, %struct.simple_bitmap_def* %68, %struct.edge_def* %70, %struct.VEC_edge_heap** %remove_edges, i32 1), !dbg !2963
  store i8 %call64, i8* %ok, align 1, !dbg !2964
  %71 = load i8, i8* %ok, align 1, !dbg !2965
  %tobool65 = icmp ne i8 %71, 0, !dbg !2965
  br i1 %tobool65, label %cond.false67, label %cond.true66, !dbg !2965

cond.true66:                                      ; preds = %if.end61
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1072, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2965
  br label %cond.end68, !dbg !2965

cond.false67:                                     ; preds = %if.end61
  br label %cond.end68, !dbg !2965

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !2965
  %72 = load i32, i32* %n_peel, align 4, !dbg !2966
  %73 = load i32, i32* %i, align 4, !dbg !2967
  %sub70 = sub i32 %72, %73, !dbg !2968
  %74 = load i8, i8* %extra_zero_check, align 1, !dbg !2969
  %conv71 = zext i8 %74 to i32, !dbg !2969
  %tobool72 = icmp ne i32 %conv71, 0, !dbg !2969
  %75 = zext i1 %tobool72 to i64, !dbg !2969
  %cond73 = select i1 %tobool72, i32 0, i32 1, !dbg !2969
  %sub74 = sub i32 %sub70, %cond73, !dbg !2970
  store i32 %sub74, i32* %j, align 4, !dbg !2971
  %76 = load i32, i32* %i, align 4, !dbg !2972
  %add75 = add i32 %76, 2, !dbg !2973
  %div = udiv i32 10000, %add75, !dbg !2974
  store i32 %div, i32* %p, align 4, !dbg !2975
  %77 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2976
  %call76 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %77), !dbg !2977
  %call77 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call76), !dbg !2978
  store %struct.basic_block_def* %call77, %struct.basic_block_def** %preheader, align 8, !dbg !2979
  %78 = load %struct.rtx_def*, %struct.rtx_def** %niter, align 8, !dbg !2980
  %call78 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %78), !dbg !2981
  %79 = load i32, i32* %j, align 4, !dbg !2982
  %conv79 = zext i32 %79 to i64, !dbg !2982
  %call80 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv79), !dbg !2982
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !2983
  %call81 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %80), !dbg !2984
  %81 = load i32, i32* %p, align 4, !dbg !2985
  %call82 = call %struct.rtx_def* @compare_and_jump_seq(%struct.rtx_def* %call78, %struct.rtx_def* %call80, i32 81, %struct.rtx_def* %call81, i32 %81, %struct.rtx_def* null), !dbg !2986
  store %struct.rtx_def* %call82, %struct.rtx_def** %branch_code, align 8, !dbg !2987
  %82 = load %struct.rtx_def*, %struct.rtx_def** %branch_code, align 8, !dbg !2988
  %cmp83 = icmp ne %struct.rtx_def* %82, null, !dbg !2988
  br i1 %cmp83, label %cond.false86, label %cond.true85, !dbg !2988

cond.true85:                                      ; preds = %cond.end68
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1085, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2988
  br label %cond.end87, !dbg !2988

cond.false86:                                     ; preds = %cond.end68
  br label %cond.end87, !dbg !2988

cond.end87:                                       ; preds = %cond.false86, %cond.true85
  %cond88 = phi i32 [ 0, %cond.true85 ], [ 0, %cond.false86 ], !dbg !2988
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !2989
  %call89 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %83), !dbg !2990
  %84 = load %struct.rtx_def*, %struct.rtx_def** %branch_code, align 8, !dbg !2991
  %call90 = call %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def* %call89, %struct.rtx_def* %84), !dbg !2992
  store %struct.basic_block_def* %call90, %struct.basic_block_def** %swtch, align 8, !dbg !2993
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !2994
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !2995
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %85, %struct.basic_block_def* %86), !dbg !2996
  %87 = load i32, i32* %p, align 4, !dbg !2997
  %sub91 = sub i32 10000, %87, !dbg !2998
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !2999
  %call92 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %88), !dbg !3000
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call92, i32 0, i32 8, !dbg !3001
  store i32 %sub91, i32* %probability, align 4, !dbg !3002
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3003
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3004
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3005
  %call93 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %91), !dbg !3006
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call93, i32 0, i32 7, !dbg !3007
  %92 = load i32, i32* %flags, align 8, !dbg !3007
  %and = and i32 %92, 128, !dbg !3008
  %call94 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %89, %struct.basic_block_def* %90, i32 %and), !dbg !3009
  store %struct.edge_def* %call94, %struct.edge_def** %e, align 8, !dbg !3010
  %93 = load i32, i32* %p, align 4, !dbg !3011
  %94 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3012
  %probability95 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %94, i32 0, i32 8, !dbg !3013
  store i32 %93, i32* %probability95, align 4, !dbg !3014
  br label %for.inc96, !dbg !3015

for.inc96:                                        ; preds = %cond.end87
  %95 = load i32, i32* %i, align 4, !dbg !3016
  %inc97 = add i32 %95, 1, !dbg !3016
  store i32 %inc97, i32* %i, align 4, !dbg !3016
  br label %for.cond51, !dbg !3017, !llvm.loop !3018

for.end98:                                        ; preds = %for.cond51
  %96 = load i8, i8* %extra_zero_check, align 1, !dbg !3020
  %tobool99 = icmp ne i8 %96, 0, !dbg !3020
  br i1 %tobool99, label %if.then100, label %if.end124, !dbg !3022

if.then100:                                       ; preds = %for.end98
  %97 = load i32, i32* %max_unroll, align 4, !dbg !3023
  %add101 = add i32 %97, 1, !dbg !3025
  %div102 = udiv i32 10000, %add101, !dbg !3026
  store i32 %div102, i32* %p, align 4, !dbg !3027
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %ezc_swtch, align 8, !dbg !3028
  store %struct.basic_block_def* %98, %struct.basic_block_def** %swtch, align 8, !dbg !3029
  %99 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3030
  %call103 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %99), !dbg !3031
  %call104 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call103), !dbg !3032
  store %struct.basic_block_def* %call104, %struct.basic_block_def** %preheader, align 8, !dbg !3033
  %100 = load %struct.rtx_def*, %struct.rtx_def** %niter, align 8, !dbg !3034
  %call105 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %100), !dbg !3035
  %101 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !3036
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3037
  %call106 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %102), !dbg !3038
  %103 = load i32, i32* %p, align 4, !dbg !3039
  %call107 = call %struct.rtx_def* @compare_and_jump_seq(%struct.rtx_def* %call105, %struct.rtx_def* %101, i32 81, %struct.rtx_def* %call106, i32 %103, %struct.rtx_def* null), !dbg !3040
  store %struct.rtx_def* %call107, %struct.rtx_def** %branch_code, align 8, !dbg !3041
  %104 = load %struct.rtx_def*, %struct.rtx_def** %branch_code, align 8, !dbg !3042
  %cmp108 = icmp ne %struct.rtx_def* %104, null, !dbg !3042
  br i1 %cmp108, label %cond.false111, label %cond.true110, !dbg !3042

cond.true110:                                     ; preds = %if.then100
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3042
  br label %cond.end112, !dbg !3042

cond.false111:                                    ; preds = %if.then100
  br label %cond.end112, !dbg !3042

cond.end112:                                      ; preds = %cond.false111, %cond.true110
  %cond113 = phi i32 [ 0, %cond.true110 ], [ 0, %cond.false111 ], !dbg !3042
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3043
  %call114 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %105), !dbg !3044
  %106 = load %struct.rtx_def*, %struct.rtx_def** %branch_code, align 8, !dbg !3045
  %call115 = call %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def* %call114, %struct.rtx_def* %106), !dbg !3046
  store %struct.basic_block_def* %call115, %struct.basic_block_def** %swtch, align 8, !dbg !3047
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3048
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3049
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %107, %struct.basic_block_def* %108), !dbg !3050
  %109 = load i32, i32* %p, align 4, !dbg !3051
  %sub116 = sub i32 10000, %109, !dbg !3052
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3053
  %call117 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %110), !dbg !3054
  %probability118 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call117, i32 0, i32 8, !dbg !3055
  store i32 %sub116, i32* %probability118, align 4, !dbg !3056
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3057
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3058
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %swtch, align 8, !dbg !3059
  %call119 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %113), !dbg !3060
  %flags120 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call119, i32 0, i32 7, !dbg !3061
  %114 = load i32, i32* %flags120, align 8, !dbg !3061
  %and121 = and i32 %114, 128, !dbg !3062
  %call122 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %111, %struct.basic_block_def* %112, i32 %and121), !dbg !3063
  store %struct.edge_def* %call122, %struct.edge_def** %e, align 8, !dbg !3064
  %115 = load i32, i32* %p, align 4, !dbg !3065
  %116 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3066
  %probability123 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %116, i32 0, i32 8, !dbg !3067
  store i32 %115, i32* %probability123, align 4, !dbg !3068
  br label %if.end124, !dbg !3069

if.end124:                                        ; preds = %cond.end112, %for.end98
  %117 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !3070
  call void @iterate_fix_dominators(i32 1, %struct.VEC_basic_block_heap* %117, i8 zeroext 0), !dbg !3071
  %118 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3072
  call void @sbitmap_ones(%struct.simple_bitmap_def* %118), !dbg !3073
  %119 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3074
  %120 = load i32, i32* %may_exit_copy, align 4, !dbg !3075
  call void @RESET_BIT(%struct.simple_bitmap_def* %119, i32 %120), !dbg !3076
  %121 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3077
  call void @opt_info_start_duplication(%struct.opt_info* %121), !dbg !3078
  %122 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3079
  %123 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3080
  %call125 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %123), !dbg !3081
  %124 = load i32, i32* %max_unroll, align 4, !dbg !3082
  %125 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3083
  %126 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3084
  %out_edge126 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %126, i32 0, i32 0, !dbg !3085
  %127 = load %struct.edge_def*, %struct.edge_def** %out_edge126, align 8, !dbg !3085
  %128 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3086
  %tobool127 = icmp ne %struct.opt_info* %128, null, !dbg !3086
  %129 = zext i1 %tobool127 to i64, !dbg !3086
  %cond128 = select i1 %tobool127, i32 2, i32 0, !dbg !3086
  %or = or i32 1, %cond128, !dbg !3087
  %call129 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %122, %struct.edge_def* %call125, i32 %124, %struct.simple_bitmap_def* %125, %struct.edge_def* %127, %struct.VEC_edge_heap** %remove_edges, i32 %or), !dbg !3088
  store i8 %call129, i8* %ok, align 1, !dbg !3089
  %130 = load i8, i8* %ok, align 1, !dbg !3090
  %tobool130 = icmp ne i8 %130, 0, !dbg !3090
  br i1 %tobool130, label %cond.false132, label %cond.true131, !dbg !3090

cond.true131:                                     ; preds = %if.end124
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3090
  br label %cond.end133, !dbg !3090

cond.false132:                                    ; preds = %if.end124
  br label %cond.end133, !dbg !3090

cond.end133:                                      ; preds = %cond.false132, %cond.true131
  %cond134 = phi i32 [ 0, %cond.true131 ], [ 0, %cond.false132 ], !dbg !3090
  %131 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3091
  %tobool135 = icmp ne %struct.opt_info* %131, null, !dbg !3091
  br i1 %tobool135, label %if.then136, label %if.end137, !dbg !3093

if.then136:                                       ; preds = %cond.end133
  %132 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3094
  %133 = load i32, i32* %max_unroll, align 4, !dbg !3096
  call void @apply_opt_in_copies(%struct.opt_info* %132, i32 %133, i8 zeroext 1, i8 zeroext 1), !dbg !3097
  %134 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3098
  call void @free_opt_info(%struct.opt_info* %134), !dbg !3099
  br label %if.end137, !dbg !3100

if.end137:                                        ; preds = %if.then136, %cond.end133
  %135 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3101
  %136 = bitcast %struct.simple_bitmap_def* %135 to i8*, !dbg !3101
  call void @free(i8* %136), !dbg !3102
  %137 = load i8, i8* %exit_at_end, align 1, !dbg !3103
  %tobool138 = icmp ne i8 %137, 0, !dbg !3103
  br i1 %tobool138, label %if.then139, label %if.end197, !dbg !3105

if.then139:                                       ; preds = %if.end137
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_block, metadata !3106, metadata !DIExpression()), !dbg !3108
  %138 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3109
  %in_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %138, i32 0, i32 1, !dbg !3110
  %139 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !3110
  %src140 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %139, i32 0, i32 0, !dbg !3111
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %src140, align 8, !dbg !3111
  %call141 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %140), !dbg !3112
  store %struct.basic_block_def* %call141, %struct.basic_block_def** %exit_block, align 8, !dbg !3108
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3113
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %141, i32 0, i32 1, !dbg !3113
  %142 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3113
  %tobool142 = icmp ne %struct.VEC_edge_gc* %142, null, !dbg !3113
  br i1 %tobool142, label %cond.true143, label %cond.false146, !dbg !3113

cond.true143:                                     ; preds = %if.then139
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3113
  %succs144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %143, i32 0, i32 1, !dbg !3113
  %144 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs144, align 8, !dbg !3113
  %base145 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %144, i32 0, i32 0, !dbg !3113
  br label %cond.end147, !dbg !3113

cond.false146:                                    ; preds = %if.then139
  br label %cond.end147, !dbg !3113

cond.end147:                                      ; preds = %cond.false146, %cond.true143
  %cond148 = phi %struct.VEC_edge_base* [ %base145, %cond.true143 ], [ null, %cond.false146 ], !dbg !3113
  %call149 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond148, i32 0), !dbg !3113
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call149, i32 0, i32 1, !dbg !3115
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3115
  %146 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3116
  %out_edge150 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %146, i32 0, i32 0, !dbg !3117
  %147 = load %struct.edge_def*, %struct.edge_def** %out_edge150, align 8, !dbg !3117
  %dest151 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %147, i32 0, i32 1, !dbg !3118
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %dest151, align 8, !dbg !3118
  %cmp152 = icmp eq %struct.basic_block_def* %145, %148, !dbg !3119
  br i1 %cmp152, label %if.then154, label %if.else175, !dbg !3120

if.then154:                                       ; preds = %cond.end147
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3121
  %succs155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %149, i32 0, i32 1, !dbg !3121
  %150 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs155, align 8, !dbg !3121
  %tobool156 = icmp ne %struct.VEC_edge_gc* %150, null, !dbg !3121
  br i1 %tobool156, label %cond.true157, label %cond.false160, !dbg !3121

cond.true157:                                     ; preds = %if.then154
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3121
  %succs158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %151, i32 0, i32 1, !dbg !3121
  %152 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs158, align 8, !dbg !3121
  %base159 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %152, i32 0, i32 0, !dbg !3121
  br label %cond.end161, !dbg !3121

cond.false160:                                    ; preds = %if.then154
  br label %cond.end161, !dbg !3121

cond.end161:                                      ; preds = %cond.false160, %cond.true157
  %cond162 = phi %struct.VEC_edge_base* [ %base159, %cond.true157 ], [ null, %cond.false160 ], !dbg !3121
  %call163 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond162, i32 0), !dbg !3121
  %153 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3123
  %out_edge164 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %153, i32 0, i32 0, !dbg !3124
  store %struct.edge_def* %call163, %struct.edge_def** %out_edge164, align 8, !dbg !3125
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3126
  %succs165 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 1, !dbg !3126
  %155 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs165, align 8, !dbg !3126
  %tobool166 = icmp ne %struct.VEC_edge_gc* %155, null, !dbg !3126
  br i1 %tobool166, label %cond.true167, label %cond.false170, !dbg !3126

cond.true167:                                     ; preds = %cond.end161
  %156 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3126
  %succs168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %156, i32 0, i32 1, !dbg !3126
  %157 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs168, align 8, !dbg !3126
  %base169 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %157, i32 0, i32 0, !dbg !3126
  br label %cond.end171, !dbg !3126

cond.false170:                                    ; preds = %cond.end161
  br label %cond.end171, !dbg !3126

cond.end171:                                      ; preds = %cond.false170, %cond.true167
  %cond172 = phi %struct.VEC_edge_base* [ %base169, %cond.true167 ], [ null, %cond.false170 ], !dbg !3126
  %call173 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond172, i32 1), !dbg !3126
  %158 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3127
  %in_edge174 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %158, i32 0, i32 1, !dbg !3128
  store %struct.edge_def* %call173, %struct.edge_def** %in_edge174, align 8, !dbg !3129
  br label %if.end196, !dbg !3130

if.else175:                                       ; preds = %cond.end147
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3131
  %succs176 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %159, i32 0, i32 1, !dbg !3131
  %160 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs176, align 8, !dbg !3131
  %tobool177 = icmp ne %struct.VEC_edge_gc* %160, null, !dbg !3131
  br i1 %tobool177, label %cond.true178, label %cond.false181, !dbg !3131

cond.true178:                                     ; preds = %if.else175
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3131
  %succs179 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %161, i32 0, i32 1, !dbg !3131
  %162 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs179, align 8, !dbg !3131
  %base180 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %162, i32 0, i32 0, !dbg !3131
  br label %cond.end182, !dbg !3131

cond.false181:                                    ; preds = %if.else175
  br label %cond.end182, !dbg !3131

cond.end182:                                      ; preds = %cond.false181, %cond.true178
  %cond183 = phi %struct.VEC_edge_base* [ %base180, %cond.true178 ], [ null, %cond.false181 ], !dbg !3131
  %call184 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond183, i32 1), !dbg !3131
  %163 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3133
  %out_edge185 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %163, i32 0, i32 0, !dbg !3134
  store %struct.edge_def* %call184, %struct.edge_def** %out_edge185, align 8, !dbg !3135
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3136
  %succs186 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %164, i32 0, i32 1, !dbg !3136
  %165 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs186, align 8, !dbg !3136
  %tobool187 = icmp ne %struct.VEC_edge_gc* %165, null, !dbg !3136
  br i1 %tobool187, label %cond.true188, label %cond.false191, !dbg !3136

cond.true188:                                     ; preds = %cond.end182
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !3136
  %succs189 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %166, i32 0, i32 1, !dbg !3136
  %167 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs189, align 8, !dbg !3136
  %base190 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %167, i32 0, i32 0, !dbg !3136
  br label %cond.end192, !dbg !3136

cond.false191:                                    ; preds = %cond.end182
  br label %cond.end192, !dbg !3136

cond.end192:                                      ; preds = %cond.false191, %cond.true188
  %cond193 = phi %struct.VEC_edge_base* [ %base190, %cond.true188 ], [ null, %cond.false191 ], !dbg !3136
  %call194 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond193, i32 0), !dbg !3136
  %168 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3137
  %in_edge195 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %168, i32 0, i32 1, !dbg !3138
  store %struct.edge_def* %call194, %struct.edge_def** %in_edge195, align 8, !dbg !3139
  br label %if.end196

if.end196:                                        ; preds = %cond.end192, %cond.end171
  br label %if.end197, !dbg !3140

if.end197:                                        ; preds = %if.end196, %if.end137
  store i32 0, i32* %i, align 4, !dbg !3141
  br label %for.cond198, !dbg !3143

for.cond198:                                      ; preds = %for.inc209, %if.end197
  %169 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !3144
  %tobool199 = icmp ne %struct.VEC_edge_heap* %169, null, !dbg !3144
  br i1 %tobool199, label %cond.true200, label %cond.false202, !dbg !3144

cond.true200:                                     ; preds = %for.cond198
  %170 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !3144
  %base201 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %170, i32 0, i32 0, !dbg !3144
  br label %cond.end203, !dbg !3144

cond.false202:                                    ; preds = %for.cond198
  br label %cond.end203, !dbg !3144

cond.end203:                                      ; preds = %cond.false202, %cond.true200
  %cond204 = phi %struct.VEC_edge_base* [ %base201, %cond.true200 ], [ null, %cond.false202 ], !dbg !3144
  %171 = load i32, i32* %i, align 4, !dbg !3144
  %call205 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond204, i32 %171, %struct.edge_def** %e), !dbg !3144
  %tobool206 = icmp ne i32 %call205, 0, !dbg !3146
  br i1 %tobool206, label %for.body207, label %for.end211, !dbg !3146

for.body207:                                      ; preds = %cond.end203
  %172 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3147
  %call208 = call zeroext i8 @remove_path(%struct.edge_def* %172), !dbg !3148
  br label %for.inc209, !dbg !3148

for.inc209:                                       ; preds = %for.body207
  %173 = load i32, i32* %i, align 4, !dbg !3149
  %inc210 = add i32 %173, 1, !dbg !3149
  store i32 %inc210, i32* %i, align 4, !dbg !3149
  br label %for.cond198, !dbg !3150, !llvm.loop !3151

for.end211:                                       ; preds = %cond.end203
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %remove_edges), !dbg !3153
  %174 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3154
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %174, i32 0, i32 3, !dbg !3154
  %175 = load i8, i8* %const_iter, align 1, !dbg !3154
  %tobool212 = icmp ne i8 %175, 0, !dbg !3154
  br i1 %tobool212, label %cond.true213, label %cond.false214, !dbg !3154

cond.true213:                                     ; preds = %for.end211
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1168, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3154
  br label %cond.end215, !dbg !3154

cond.false214:                                    ; preds = %for.end211
  br label %cond.end215, !dbg !3154

cond.end215:                                      ; preds = %cond.false214, %cond.true213
  %cond216 = phi i32 [ 0, %cond.true213 ], [ 0, %cond.false214 ], !dbg !3154
  %176 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3155
  %mode217 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %176, i32 0, i32 10, !dbg !3156
  %177 = load i32, i32* %mode217, align 4, !dbg !3156
  %178 = load %struct.rtx_def*, %struct.rtx_def** %old_niter, align 8, !dbg !3157
  %179 = load i32, i32* %max_unroll, align 4, !dbg !3158
  %add218 = add i32 %179, 1, !dbg !3158
  %conv219 = zext i32 %add218 to i64, !dbg !3158
  %call220 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv219), !dbg !3158
  %call221 = call %struct.rtx_def* @simplify_gen_binary(i32 59, i32 %177, %struct.rtx_def* %178, %struct.rtx_def* %call220), !dbg !3159
  %180 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3160
  %niter_expr222 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %180, i32 0, i32 11, !dbg !3161
  store %struct.rtx_def* %call221, %struct.rtx_def** %niter_expr222, align 8, !dbg !3162
  %181 = load i32, i32* %max_unroll, align 4, !dbg !3163
  %add223 = add i32 %181, 1, !dbg !3164
  %conv224 = zext i32 %add223 to i64, !dbg !3163
  %182 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3165
  %niter_max = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %182, i32 0, i32 5, !dbg !3166
  %183 = load i64, i64* %niter_max, align 8, !dbg !3167
  %div225 = udiv i64 %183, %conv224, !dbg !3167
  store i64 %div225, i64* %niter_max, align 8, !dbg !3167
  %184 = load i8, i8* %exit_at_end, align 1, !dbg !3168
  %tobool226 = icmp ne i8 %184, 0, !dbg !3168
  br i1 %tobool226, label %if.then227, label %if.end234, !dbg !3170

if.then227:                                       ; preds = %cond.end215
  %185 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3171
  %mode228 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %185, i32 0, i32 10, !dbg !3173
  %186 = load i32, i32* %mode228, align 4, !dbg !3173
  %187 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3174
  %niter_expr229 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %187, i32 0, i32 11, !dbg !3175
  %188 = load %struct.rtx_def*, %struct.rtx_def** %niter_expr229, align 8, !dbg !3175
  %189 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !3176
  %call230 = call %struct.rtx_def* @simplify_gen_binary(i32 50, i32 %186, %struct.rtx_def* %188, %struct.rtx_def* %189), !dbg !3177
  %190 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3178
  %niter_expr231 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %190, i32 0, i32 11, !dbg !3179
  store %struct.rtx_def* %call230, %struct.rtx_def** %niter_expr231, align 8, !dbg !3180
  %191 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3181
  %noloop_assumptions232 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %191, i32 0, i32 7, !dbg !3182
  store %struct.rtx_def* null, %struct.rtx_def** %noloop_assumptions232, align 8, !dbg !3183
  %192 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3184
  %niter_max233 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %192, i32 0, i32 5, !dbg !3185
  %193 = load i64, i64* %niter_max233, align 8, !dbg !3186
  %dec = add i64 %193, -1, !dbg !3186
  store i64 %dec, i64* %niter_max233, align 8, !dbg !3186
  br label %if.end234, !dbg !3187

if.end234:                                        ; preds = %if.then227, %cond.end215
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3188
  %tobool235 = icmp ne %struct._IO_FILE* %194, null, !dbg !3188
  br i1 %tobool235, label %if.then236, label %if.end239, !dbg !3190

if.then236:                                       ; preds = %if.end234
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3191
  %196 = load i32, i32* %max_unroll, align 4, !dbg !3192
  %197 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3193
  %call237 = call i32 @num_loop_insns(%struct.loop* %197), !dbg !3194
  %call238 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %195, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.40, i64 0, i64 0), i32 %196, i32 %call237), !dbg !3195
  br label %if.end239, !dbg !3195

if.end239:                                        ; preds = %if.then236, %if.end234
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %dom_bbs), !dbg !3196
  ret void, !dbg !3197
}

; Function Attrs: noinline nounwind uwtable
define internal void @unroll_loop_stupid(%struct.loop* %loop) #0 !dbg !3198 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %wont_exit = alloca %struct.simple_bitmap_def*, align 8
  %nunroll = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  %opt_info = alloca %struct.opt_info*, align 8
  %ok = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3199, metadata !DIExpression()), !dbg !3200
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %wont_exit, metadata !3201, metadata !DIExpression()), !dbg !3202
  call void @llvm.dbg.declare(metadata i32* %nunroll, metadata !3203, metadata !DIExpression()), !dbg !3204
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3205
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 4, !dbg !3206
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 1, !dbg !3207
  %1 = load i32, i32* %times, align 4, !dbg !3207
  store i32 %1, i32* %nunroll, align 4, !dbg !3204
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !3208, metadata !DIExpression()), !dbg !3209
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3210
  %call = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %2), !dbg !3211
  store %struct.niter_desc* %call, %struct.niter_desc** %desc, align 8, !dbg !3209
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info, metadata !3212, metadata !DIExpression()), !dbg !3213
  store %struct.opt_info* null, %struct.opt_info** %opt_info, align 8, !dbg !3213
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !3214, metadata !DIExpression()), !dbg !3215
  %3 = load i32, i32* @flag_split_ivs_in_unroller, align 4, !dbg !3216
  %tobool = icmp ne i32 %3, 0, !dbg !3216
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3218

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* @flag_variable_expansion_in_unroller, align 4, !dbg !3219
  %tobool1 = icmp ne i32 %4, 0, !dbg !3219
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3220

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3221
  %call2 = call %struct.opt_info* @analyze_insns_in_loop(%struct.loop* %5), !dbg !3222
  store %struct.opt_info* %call2, %struct.opt_info** %opt_info, align 8, !dbg !3223
  br label %if.end, !dbg !3224

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %6 = load i32, i32* %nunroll, align 4, !dbg !3225
  %add = add i32 %6, 1, !dbg !3226
  %call3 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add), !dbg !3227
  store %struct.simple_bitmap_def* %call3, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3228
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3229
  call void @sbitmap_zero(%struct.simple_bitmap_def* %7), !dbg !3230
  %8 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3231
  call void @opt_info_start_duplication(%struct.opt_info* %8), !dbg !3232
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3233
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3234
  %call4 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %10), !dbg !3235
  %11 = load i32, i32* %nunroll, align 4, !dbg !3236
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3237
  %13 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3238
  %tobool5 = icmp ne %struct.opt_info* %13, null, !dbg !3238
  %14 = zext i1 %tobool5 to i64, !dbg !3238
  %cond = select i1 %tobool5, i32 2, i32 0, !dbg !3238
  %or = or i32 1, %cond, !dbg !3239
  %call6 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %9, %struct.edge_def* %call4, i32 %11, %struct.simple_bitmap_def* %12, %struct.edge_def* null, %struct.VEC_edge_heap** null, i32 %or), !dbg !3240
  store i8 %call6, i8* %ok, align 1, !dbg !3241
  %15 = load i8, i8* %ok, align 1, !dbg !3242
  %tobool7 = icmp ne i8 %15, 0, !dbg !3242
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !3242

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3242
  br label %cond.end, !dbg !3242

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3242
  %16 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3243
  %tobool9 = icmp ne %struct.opt_info* %16, null, !dbg !3243
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !3245

if.then10:                                        ; preds = %cond.end
  %17 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3246
  %18 = load i32, i32* %nunroll, align 4, !dbg !3248
  call void @apply_opt_in_copies(%struct.opt_info* %17, i32 %18, i8 zeroext 1, i8 zeroext 1), !dbg !3249
  %19 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3250
  call void @free_opt_info(%struct.opt_info* %19), !dbg !3251
  br label %if.end11, !dbg !3252

if.end11:                                         ; preds = %if.then10, %cond.end
  %20 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3253
  %21 = bitcast %struct.simple_bitmap_def* %20 to i8*, !dbg !3253
  call void @free(i8* %21), !dbg !3254
  %22 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3255
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %22, i32 0, i32 2, !dbg !3257
  %23 = load i8, i8* %simple_p, align 8, !dbg !3257
  %tobool12 = icmp ne i8 %23, 0, !dbg !3255
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !3258

if.then13:                                        ; preds = %if.end11
  %24 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3259
  %simple_p14 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %24, i32 0, i32 2, !dbg !3261
  store i8 0, i8* %simple_p14, align 8, !dbg !3262
  br label %if.end15, !dbg !3263

if.end15:                                         ; preds = %if.then13, %if.end11
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3264
  %tobool16 = icmp ne %struct._IO_FILE* %25, null, !dbg !3264
  br i1 %tobool16, label %if.then17, label %if.end20, !dbg !3266

if.then17:                                        ; preds = %if.end15
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3267
  %27 = load i32, i32* %nunroll, align 4, !dbg !3268
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3269
  %call18 = call i32 @num_loop_insns(%struct.loop* %28), !dbg !3270
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.43, i64 0, i64 0), i32 %27, i32 %call18), !dbg !3271
  br label %if.end20, !dbg !3271

if.end20:                                         ; preds = %if.then17, %if.end15
  ret void, !dbg !3272
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3273 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3276, metadata !DIExpression()), !dbg !3277
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3278, metadata !DIExpression()), !dbg !3279
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3280, metadata !DIExpression()), !dbg !3281
  br label %while.cond, !dbg !3282

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3283
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3283
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3283
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3283
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3283

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3283
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3283
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3283
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3283
  br label %cond.end, !dbg !3283

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3283

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3283
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3283
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3283
  %5 = load i32, i32* %idx, align 8, !dbg !3283
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3283
  %tobool2 = icmp ne i32 %call, 0, !dbg !3282
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3282

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3284
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3286
  %7 = load i32, i32* %idx3, align 8, !dbg !3287
  %inc = add i32 %7, 1, !dbg !3287
  store i32 %inc, i32* %idx3, align 8, !dbg !3287
  %8 = load i32, i32* %anum, align 4, !dbg !3288
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3289
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3290
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3291
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3292
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3294
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3294
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3295

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3296

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3282, !llvm.loop !3297

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3299
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3299
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3299
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3300
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3301
  br label %return, !dbg !3302

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3302
}

declare dso_local void @iv_analysis_done() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @split_edge_and_insert(%struct.edge_def* %e, %struct.rtx_def* %insns) #0 !dbg !3303 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %insns.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3306, metadata !DIExpression()), !dbg !3307
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns.addr, metadata !3308, metadata !DIExpression()), !dbg !3309
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3310, metadata !DIExpression()), !dbg !3311
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !3312
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !3312
  br i1 %tobool, label %if.end, label %if.then, !dbg !3314

if.then:                                          ; preds = %entry
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !3315
  br label %return, !dbg !3315

if.end:                                           ; preds = %entry
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3316
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %1), !dbg !3317
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !3318
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !3319
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3320
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !3320
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3320
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3320
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !3320
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3320
  %call1 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %2, %struct.rtx_def* %5), !dbg !3321
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3322
  store %struct.basic_block_def* %6, %struct.basic_block_def** %retval, align 8, !dbg !3323
  br label %return, !dbg !3323

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !3324
  ret %struct.basic_block_def* %7, !dbg !3324
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !3325 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3328, metadata !DIExpression()), !dbg !3329
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3329
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !3329
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !3329
  ret %struct.VEC_int_heap* %1, !dbg !3329
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !3330 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3333
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3333
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3333
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3333
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3333
  br i1 %tobool, label %if.end, label %if.then, !dbg !3335

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3336
  br label %return, !dbg !3336

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3337
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3337
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3337
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3337
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3337
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3337
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !3337
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3337

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3337
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3337
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3337
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3337
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !3337
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !3337
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !3337
  br label %cond.end, !dbg !3337

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3337

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3337
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3337
  store i32 %call, i32* %retval, align 4, !dbg !3338
  br label %return, !dbg !3338

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3339
  ret i32 %8, !dbg !3339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !3340 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3345, metadata !DIExpression()), !dbg !3346
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3347, metadata !DIExpression()), !dbg !3346
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !3348, metadata !DIExpression()), !dbg !3346
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3349
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3349
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3349

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3349
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3349
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3349
  %3 = load i32, i32* %num, align 8, !dbg !3349
  %cmp = icmp ult i32 %1, %3, !dbg !3349
  br i1 %cmp, label %if.then, label %if.else, !dbg !3346

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3351
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3351
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3351
  %idxprom = zext i32 %5 to i64, !dbg !3351
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3351
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3351
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3351
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !3351
  store i32 1, i32* %retval, align 4, !dbg !3351
  br label %return, !dbg !3351

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3353
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !3353
  store i32 0, i32* %retval, align 4, !dbg !3353
  br label %return, !dbg !3353

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3346
  ret i32 %9, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !3355 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3360, metadata !DIExpression()), !dbg !3361
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3362, metadata !DIExpression()), !dbg !3361
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !3363, metadata !DIExpression()), !dbg !3361
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3361
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !3361
  %1 = load i32, i32* %num, align 4, !dbg !3361
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3361
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !3361
  %3 = load i32, i32* %alloc, align 4, !dbg !3361
  %cmp = icmp ult i32 %1, %3, !dbg !3361
  %conv = zext i1 %cmp to i32, !dbg !3361
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3361
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3361
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3361
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !3361
  %6 = load i32, i32* %num1, align 4, !dbg !3361
  %inc = add i32 %6, 1, !dbg !3361
  store i32 %inc, i32* %num1, align 4, !dbg !3361
  %idxprom = zext i32 %6 to i64, !dbg !3361
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3361
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !3361
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !3361
  %8 = load i32*, i32** %slot_, align 8, !dbg !3361
  store i32 %7, i32* %8, align 4, !dbg !3361
  %9 = load i32*, i32** %slot_, align 8, !dbg !3361
  ret i32* %9, !dbg !3361
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !3364 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3369, metadata !DIExpression()), !dbg !3370
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3371, metadata !DIExpression()), !dbg !3372
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3373
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3373
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3373
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3373
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3373

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3373
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3373
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3373
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3373
  br label %cond.end, !dbg !3373

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3373

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3373
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3373
  store i32 %call, i32* %n, align 4, !dbg !3372
  %4 = load i32, i32* %n, align 4, !dbg !3374
  %cmp = icmp eq i32 %4, 0, !dbg !3376
  br i1 %cmp, label %if.then, label %if.end, !dbg !3377

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3378
  br label %return, !dbg !3378

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3379
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !3379
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !3379
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !3379
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !3379

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3379
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !3379
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !3379
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !3379
  br label %cond.end8, !dbg !3379

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3379

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !3379
  %9 = load i32, i32* %n, align 4, !dbg !3379
  %sub = sub i32 %9, 1, !dbg !3379
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !3379
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !3380
  br label %return, !dbg !3380

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3381
  ret %struct.loop* %10, !dbg !3381
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3382 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3385, metadata !DIExpression()), !dbg !3386
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3386
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3386
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3386

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3386
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3386
  %2 = load i32, i32* %num, align 8, !dbg !3386
  br label %cond.end, !dbg !3386

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3386
  ret i32 %cond, !dbg !3386
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !3387 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3390, metadata !DIExpression()), !dbg !3391
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3392, metadata !DIExpression()), !dbg !3391
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3391
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3391
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3391

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3391
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3391
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3391
  %3 = load i32, i32* %num, align 8, !dbg !3391
  %cmp = icmp ult i32 %1, %3, !dbg !3391
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3393
  %land.ext = zext i1 %4 to i32, !dbg !3391
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3391
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !3391
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3391
  %idxprom = zext i32 %6 to i64, !dbg !3391
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3391
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3391
  ret %struct.loop* %7, !dbg !3391
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !3394 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3399, metadata !DIExpression()), !dbg !3400
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3401, metadata !DIExpression()), !dbg !3400
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !3402, metadata !DIExpression()), !dbg !3400
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3403
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !3403
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3403

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3403
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3403
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !3403
  %3 = load i32, i32* %num, align 4, !dbg !3403
  %cmp = icmp ult i32 %1, %3, !dbg !3403
  br i1 %cmp, label %if.then, label %if.else, !dbg !3400

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3405
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3405
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3405
  %idxprom = zext i32 %5 to i64, !dbg !3405
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3405
  %6 = load i32, i32* %arrayidx, align 4, !dbg !3405
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !3405
  store i32 %6, i32* %7, align 4, !dbg !3405
  store i32 1, i32* %retval, align 4, !dbg !3405
  br label %return, !dbg !3405

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !3407
  store i32 0, i32* %8, align 4, !dbg !3407
  store i32 0, i32* %retval, align 4, !dbg !3407
  br label %return, !dbg !3407

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3400
  ret i32 %9, !dbg !3400
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !3409 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !3412, metadata !DIExpression()), !dbg !3413
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3414
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3414
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3414
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3414
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !3414
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3414
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !3414
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3414

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3414
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3414
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3414
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3414
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !3414
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !3414
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !3414
  br label %cond.end, !dbg !3414

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3414

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3414
  %6 = load i32, i32* %num.addr, align 4, !dbg !3414
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !3414
  ret %struct.loop* %call, !dbg !3415
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !3416 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !3420, metadata !DIExpression()), !dbg !3421
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3422
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !3422
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3422
  br i1 %tobool, label %if.then, label %if.end, !dbg !3421

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3422
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !3422
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !3422
  call void @free(i8* %4), !dbg !3422
  br label %if.end, !dbg !3422

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !3421
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !3421
  ret void, !dbg !3421
}

declare dso_local void @free(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i32 @num_loop_insns(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @decide_peel_once_rolling(%struct.loop* %loop, i32 %flags) #0 !dbg !3424 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3427, metadata !DIExpression()), !dbg !3428
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3429, metadata !DIExpression()), !dbg !3430
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !3431, metadata !DIExpression()), !dbg !3432
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3433
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3433
  br i1 %tobool, label %if.then, label %if.end, !dbg !3435

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3436
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0)), !dbg !3437
  br label %if.end, !dbg !3437

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3438
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 33, !dbg !3438
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3438
  %3 = load i32, i32* %value, align 8, !dbg !3438
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3440
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 1, !dbg !3441
  %5 = load i32, i32* %ninsns, align 4, !dbg !3441
  %cmp = icmp ult i32 %3, %5, !dbg !3442
  br i1 %cmp, label %if.then1, label %if.end6, !dbg !3443

if.then1:                                         ; preds = %if.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3444
  %tobool2 = icmp ne %struct._IO_FILE* %6, null, !dbg !3444
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !3447

if.then3:                                         ; preds = %if.then1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3448
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)), !dbg !3449
  br label %if.end5, !dbg !3449

if.end5:                                          ; preds = %if.then3, %if.then1
  br label %return, !dbg !3450

if.end6:                                          ; preds = %if.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3451
  %call7 = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %8), !dbg !3452
  store %struct.niter_desc* %call7, %struct.niter_desc** %desc, align 8, !dbg !3453
  %9 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3454
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %9, i32 0, i32 2, !dbg !3456
  %10 = load i8, i8* %simple_p, align 8, !dbg !3456
  %tobool8 = icmp ne i8 %10, 0, !dbg !3454
  br i1 %tobool8, label %lor.lhs.false, label %if.then16, !dbg !3457

lor.lhs.false:                                    ; preds = %if.end6
  %11 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3458
  %assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %11, i32 0, i32 6, !dbg !3459
  %12 = load %struct.rtx_def*, %struct.rtx_def** %assumptions, align 8, !dbg !3459
  %tobool9 = icmp ne %struct.rtx_def* %12, null, !dbg !3458
  br i1 %tobool9, label %if.then16, label %lor.lhs.false10, !dbg !3460

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %13 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3461
  %infinite = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %13, i32 0, i32 8, !dbg !3462
  %14 = load %struct.rtx_def*, %struct.rtx_def** %infinite, align 8, !dbg !3462
  %tobool11 = icmp ne %struct.rtx_def* %14, null, !dbg !3461
  br i1 %tobool11, label %if.then16, label %lor.lhs.false12, !dbg !3463

lor.lhs.false12:                                  ; preds = %lor.lhs.false10
  %15 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3464
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %15, i32 0, i32 3, !dbg !3465
  %16 = load i8, i8* %const_iter, align 1, !dbg !3465
  %tobool13 = icmp ne i8 %16, 0, !dbg !3464
  br i1 %tobool13, label %lor.lhs.false14, label %if.then16, !dbg !3466

lor.lhs.false14:                                  ; preds = %lor.lhs.false12
  %17 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3467
  %niter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %17, i32 0, i32 4, !dbg !3468
  %18 = load i64, i64* %niter, align 8, !dbg !3468
  %cmp15 = icmp ne i64 %18, 0, !dbg !3469
  br i1 %cmp15, label %if.then16, label %if.end21, !dbg !3470

if.then16:                                        ; preds = %lor.lhs.false14, %lor.lhs.false12, %lor.lhs.false10, %lor.lhs.false, %if.end6
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3471
  %tobool17 = icmp ne %struct._IO_FILE* %19, null, !dbg !3471
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !3474

if.then18:                                        ; preds = %if.then16
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3475
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0)), !dbg !3476
  br label %if.end20, !dbg !3476

if.end20:                                         ; preds = %if.then18, %if.then16
  br label %return, !dbg !3477

if.end21:                                         ; preds = %lor.lhs.false14
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3478
  %tobool22 = icmp ne %struct._IO_FILE* %21, null, !dbg !3478
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !3480

if.then23:                                        ; preds = %if.end21
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3481
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0)), !dbg !3482
  br label %if.end25, !dbg !3482

if.end25:                                         ; preds = %if.then23, %if.end21
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3483
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 4, !dbg !3484
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !3485
  store i32 1, i32* %decision, align 8, !dbg !3486
  br label %return, !dbg !3487

return:                                           ; preds = %if.end25, %if.end20, %if.end5
  ret void, !dbg !3487
}

; Function Attrs: noinline nounwind uwtable
define internal void @decide_peel_completely(%struct.loop* %loop, i32 %flags) #0 !dbg !3488 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %npeel = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3489, metadata !DIExpression()), !dbg !3490
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3491, metadata !DIExpression()), !dbg !3492
  call void @llvm.dbg.declare(metadata i32* %npeel, metadata !3493, metadata !DIExpression()), !dbg !3494
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !3495, metadata !DIExpression()), !dbg !3496
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3497
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3497
  br i1 %tobool, label %if.then, label %if.end, !dbg !3499

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3500
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i64 0, i64 0)), !dbg !3501
  br label %if.end, !dbg !3501

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3502
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !3504
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3504
  %tobool1 = icmp ne %struct.loop* %3, null, !dbg !3502
  br i1 %tobool1, label %if.then2, label %if.end7, !dbg !3505

if.then2:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3506
  %tobool3 = icmp ne %struct._IO_FILE* %4, null, !dbg !3506
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !3509

if.then4:                                         ; preds = %if.then2
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3510
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0)), !dbg !3511
  br label %if.end6, !dbg !3511

if.end6:                                          ; preds = %if.then4, %if.then2
  br label %return, !dbg !3512

if.end7:                                          ; preds = %if.end
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3513
  %call8 = call zeroext i8 @optimize_loop_for_size_p(%struct.loop* %6), !dbg !3515
  %tobool9 = icmp ne i8 %call8, 0, !dbg !3515
  br i1 %tobool9, label %if.then10, label %if.end15, !dbg !3516

if.then10:                                        ; preds = %if.end7
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3517
  %tobool11 = icmp ne %struct._IO_FILE* %7, null, !dbg !3517
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !3520

if.then12:                                        ; preds = %if.then10
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3521
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0)), !dbg !3522
  br label %if.end14, !dbg !3522

if.end14:                                         ; preds = %if.then12, %if.then10
  br label %return, !dbg !3523

if.end15:                                         ; preds = %if.end7
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3524
  %call16 = call zeroext i8 @can_duplicate_loop_p(%struct.loop* %9), !dbg !3526
  %tobool17 = icmp ne i8 %call16, 0, !dbg !3526
  br i1 %tobool17, label %if.end23, label %if.then18, !dbg !3527

if.then18:                                        ; preds = %if.end15
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3528
  %tobool19 = icmp ne %struct._IO_FILE* %10, null, !dbg !3528
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !3531

if.then20:                                        ; preds = %if.then18
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3532
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.10, i64 0, i64 0)), !dbg !3533
  br label %if.end22, !dbg !3533

if.end22:                                         ; preds = %if.then20, %if.then18
  br label %return, !dbg !3534

if.end23:                                         ; preds = %if.end15
  %12 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3535
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %12, i64 31, !dbg !3535
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3535
  %13 = load i32, i32* %value, align 8, !dbg !3535
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3536
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 1, !dbg !3537
  %15 = load i32, i32* %ninsns, align 4, !dbg !3537
  %div = udiv i32 %13, %15, !dbg !3538
  store i32 %div, i32* %npeel, align 4, !dbg !3539
  %16 = load i32, i32* %npeel, align 4, !dbg !3540
  %17 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3542
  %arrayidx24 = getelementptr inbounds %struct.param_info, %struct.param_info* %17, i64 32, !dbg !3542
  %value25 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx24, i32 0, i32 1, !dbg !3542
  %18 = load i32, i32* %value25, align 8, !dbg !3542
  %cmp = icmp ugt i32 %16, %18, !dbg !3543
  br i1 %cmp, label %if.then26, label %if.end29, !dbg !3544

if.then26:                                        ; preds = %if.end23
  %19 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3545
  %arrayidx27 = getelementptr inbounds %struct.param_info, %struct.param_info* %19, i64 32, !dbg !3545
  %value28 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx27, i32 0, i32 1, !dbg !3545
  %20 = load i32, i32* %value28, align 8, !dbg !3545
  store i32 %20, i32* %npeel, align 4, !dbg !3546
  br label %if.end29, !dbg !3547

if.end29:                                         ; preds = %if.then26, %if.end23
  %21 = load i32, i32* %npeel, align 4, !dbg !3548
  %tobool30 = icmp ne i32 %21, 0, !dbg !3548
  br i1 %tobool30, label %if.end36, label %if.then31, !dbg !3550

if.then31:                                        ; preds = %if.end29
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3551
  %tobool32 = icmp ne %struct._IO_FILE* %22, null, !dbg !3551
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !3554

if.then33:                                        ; preds = %if.then31
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3555
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)), !dbg !3556
  br label %if.end35, !dbg !3556

if.end35:                                         ; preds = %if.then33, %if.then31
  br label %return, !dbg !3557

if.end36:                                         ; preds = %if.end29
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3558
  %call37 = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %24), !dbg !3559
  store %struct.niter_desc* %call37, %struct.niter_desc** %desc, align 8, !dbg !3560
  %25 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3561
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %25, i32 0, i32 2, !dbg !3563
  %26 = load i8, i8* %simple_p, align 8, !dbg !3563
  %tobool38 = icmp ne i8 %26, 0, !dbg !3561
  br i1 %tobool38, label %lor.lhs.false, label %if.then44, !dbg !3564

lor.lhs.false:                                    ; preds = %if.end36
  %27 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3565
  %assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %27, i32 0, i32 6, !dbg !3566
  %28 = load %struct.rtx_def*, %struct.rtx_def** %assumptions, align 8, !dbg !3566
  %tobool39 = icmp ne %struct.rtx_def* %28, null, !dbg !3565
  br i1 %tobool39, label %if.then44, label %lor.lhs.false40, !dbg !3567

lor.lhs.false40:                                  ; preds = %lor.lhs.false
  %29 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3568
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %29, i32 0, i32 3, !dbg !3569
  %30 = load i8, i8* %const_iter, align 1, !dbg !3569
  %tobool41 = icmp ne i8 %30, 0, !dbg !3568
  br i1 %tobool41, label %lor.lhs.false42, label %if.then44, !dbg !3570

lor.lhs.false42:                                  ; preds = %lor.lhs.false40
  %31 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3571
  %infinite = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %31, i32 0, i32 8, !dbg !3572
  %32 = load %struct.rtx_def*, %struct.rtx_def** %infinite, align 8, !dbg !3572
  %tobool43 = icmp ne %struct.rtx_def* %32, null, !dbg !3571
  br i1 %tobool43, label %if.then44, label %if.end49, !dbg !3573

if.then44:                                        ; preds = %lor.lhs.false42, %lor.lhs.false40, %lor.lhs.false, %if.end36
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3574
  %tobool45 = icmp ne %struct._IO_FILE* %33, null, !dbg !3574
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !3577

if.then46:                                        ; preds = %if.then44
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3578
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.11, i64 0, i64 0)), !dbg !3579
  br label %if.end48, !dbg !3579

if.end48:                                         ; preds = %if.then46, %if.then44
  br label %return, !dbg !3580

if.end49:                                         ; preds = %lor.lhs.false42
  %35 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3581
  %niter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %35, i32 0, i32 4, !dbg !3583
  %36 = load i64, i64* %niter, align 8, !dbg !3583
  %37 = load i32, i32* %npeel, align 4, !dbg !3584
  %sub = sub i32 %37, 1, !dbg !3585
  %conv = zext i32 %sub to i64, !dbg !3584
  %cmp50 = icmp ugt i64 %36, %conv, !dbg !3586
  br i1 %cmp50, label %if.then52, label %if.end60, !dbg !3587

if.then52:                                        ; preds = %if.end49
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3588
  %tobool53 = icmp ne %struct._IO_FILE* %38, null, !dbg !3588
  br i1 %tobool53, label %if.then54, label %if.end59, !dbg !3591

if.then54:                                        ; preds = %if.then52
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3592
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.12, i64 0, i64 0)), !dbg !3594
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3595
  %41 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3596
  %niter56 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %41, i32 0, i32 4, !dbg !3597
  %42 = load i64, i64* %niter56, align 8, !dbg !3597
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %42), !dbg !3598
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3599
  %44 = load i32, i32* %npeel, align 4, !dbg !3600
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.14, i64 0, i64 0), i32 %44), !dbg !3601
  br label %if.end59, !dbg !3602

if.end59:                                         ; preds = %if.then54, %if.then52
  br label %return, !dbg !3603

if.end60:                                         ; preds = %if.end49
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3604
  %tobool61 = icmp ne %struct._IO_FILE* %45, null, !dbg !3604
  br i1 %tobool61, label %if.then62, label %if.end64, !dbg !3606

if.then62:                                        ; preds = %if.end60
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3607
  %call63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0)), !dbg !3608
  br label %if.end64, !dbg !3608

if.end64:                                         ; preds = %if.then62, %if.end60
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3609
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 4, !dbg !3610
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !3611
  store i32 1, i32* %decision, align 8, !dbg !3612
  br label %return, !dbg !3613

return:                                           ; preds = %if.end64, %if.end59, %if.end48, %if.end35, %if.end22, %if.end14, %if.end6
  ret void, !dbg !3613
}

; Function Attrs: noinline nounwind uwtable
define internal void @peel_loop_completely(%struct.loop* %loop) #0 !dbg !3614 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %wont_exit = alloca %struct.simple_bitmap_def*, align 8
  %npeel = alloca i64, align 8
  %i = alloca i32, align 4
  %remove_edges = alloca %struct.VEC_edge_heap*, align 8
  %ein = alloca %struct.edge_def*, align 8
  %desc = alloca %struct.niter_desc*, align 8
  %opt_info = alloca %struct.opt_info*, align 8
  %ok = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3615, metadata !DIExpression()), !dbg !3616
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %wont_exit, metadata !3617, metadata !DIExpression()), !dbg !3618
  call void @llvm.dbg.declare(metadata i64* %npeel, metadata !3619, metadata !DIExpression()), !dbg !3620
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3621, metadata !DIExpression()), !dbg !3622
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %remove_edges, metadata !3623, metadata !DIExpression()), !dbg !3624
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ein, metadata !3625, metadata !DIExpression()), !dbg !3626
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !3627, metadata !DIExpression()), !dbg !3628
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3629
  %call = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %0), !dbg !3630
  store %struct.niter_desc* %call, %struct.niter_desc** %desc, align 8, !dbg !3628
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info, metadata !3631, metadata !DIExpression()), !dbg !3632
  store %struct.opt_info* null, %struct.opt_info** %opt_info, align 8, !dbg !3632
  %1 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3633
  %niter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %1, i32 0, i32 4, !dbg !3634
  %2 = load i64, i64* %niter, align 8, !dbg !3634
  store i64 %2, i64* %npeel, align 8, !dbg !3635
  %3 = load i64, i64* %npeel, align 8, !dbg !3636
  %tobool = icmp ne i64 %3, 0, !dbg !3636
  br i1 %tobool, label %if.then, label %if.end26, !dbg !3638

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !3639, metadata !DIExpression()), !dbg !3641
  %4 = load i64, i64* %npeel, align 8, !dbg !3642
  %add = add i64 %4, 1, !dbg !3643
  %conv = trunc i64 %add to i32, !dbg !3642
  %call1 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %conv), !dbg !3644
  store %struct.simple_bitmap_def* %call1, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3645
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3646
  call void @sbitmap_ones(%struct.simple_bitmap_def* %5), !dbg !3647
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3648
  call void @RESET_BIT(%struct.simple_bitmap_def* %6, i32 0), !dbg !3649
  %7 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3650
  %noloop_assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %7, i32 0, i32 7, !dbg !3652
  %8 = load %struct.rtx_def*, %struct.rtx_def** %noloop_assumptions, align 8, !dbg !3652
  %tobool2 = icmp ne %struct.rtx_def* %8, null, !dbg !3650
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !3653

if.then3:                                         ; preds = %if.then
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3654
  call void @RESET_BIT(%struct.simple_bitmap_def* %9, i32 1), !dbg !3655
  br label %if.end, !dbg !3655

if.end:                                           ; preds = %if.then3, %if.then
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !3656
  %10 = load i32, i32* @flag_split_ivs_in_unroller, align 4, !dbg !3657
  %tobool4 = icmp ne i32 %10, 0, !dbg !3657
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !3659

if.then5:                                         ; preds = %if.end
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3660
  %call6 = call %struct.opt_info* @analyze_insns_in_loop(%struct.loop* %11), !dbg !3661
  store %struct.opt_info* %call6, %struct.opt_info** %opt_info, align 8, !dbg !3662
  br label %if.end7, !dbg !3663

if.end7:                                          ; preds = %if.then5, %if.end
  %12 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3664
  call void @opt_info_start_duplication(%struct.opt_info* %12), !dbg !3665
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3666
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3667
  %call8 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %14), !dbg !3668
  %15 = load i64, i64* %npeel, align 8, !dbg !3669
  %conv9 = trunc i64 %15 to i32, !dbg !3669
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3670
  %17 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3671
  %out_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %17, i32 0, i32 0, !dbg !3672
  %18 = load %struct.edge_def*, %struct.edge_def** %out_edge, align 8, !dbg !3672
  %19 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3673
  %tobool10 = icmp ne %struct.opt_info* %19, null, !dbg !3673
  %20 = zext i1 %tobool10 to i64, !dbg !3673
  %cond = select i1 %tobool10, i32 2, i32 0, !dbg !3673
  %or = or i32 5, %cond, !dbg !3674
  %call11 = call zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %13, %struct.edge_def* %call8, i32 %conv9, %struct.simple_bitmap_def* %16, %struct.edge_def* %18, %struct.VEC_edge_heap** %remove_edges, i32 %or), !dbg !3675
  store i8 %call11, i8* %ok, align 1, !dbg !3676
  %21 = load i8, i8* %ok, align 1, !dbg !3677
  %tobool12 = icmp ne i8 %21, 0, !dbg !3677
  br i1 %tobool12, label %cond.false, label %cond.true, !dbg !3677

cond.true:                                        ; preds = %if.end7
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 492, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3677
  br label %cond.end, !dbg !3677

cond.false:                                       ; preds = %if.end7
  br label %cond.end, !dbg !3677

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3677
  %22 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit, align 8, !dbg !3678
  %23 = bitcast %struct.simple_bitmap_def* %22 to i8*, !dbg !3678
  call void @free(i8* %23), !dbg !3679
  %24 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3680
  %tobool14 = icmp ne %struct.opt_info* %24, null, !dbg !3680
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !3682

if.then15:                                        ; preds = %cond.end
  %25 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3683
  %26 = load i64, i64* %npeel, align 8, !dbg !3685
  %conv16 = trunc i64 %26 to i32, !dbg !3685
  call void @apply_opt_in_copies(%struct.opt_info* %25, i32 %conv16, i8 zeroext 0, i8 zeroext 1), !dbg !3686
  %27 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3687
  call void @free_opt_info(%struct.opt_info* %27), !dbg !3688
  br label %if.end17, !dbg !3689

if.end17:                                         ; preds = %if.then15, %cond.end
  store i32 0, i32* %i, align 4, !dbg !3690
  br label %for.cond, !dbg !3692

for.cond:                                         ; preds = %for.inc, %if.end17
  %28 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !3693
  %tobool18 = icmp ne %struct.VEC_edge_heap* %28, null, !dbg !3693
  br i1 %tobool18, label %cond.true19, label %cond.false20, !dbg !3693

cond.true19:                                      ; preds = %for.cond
  %29 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %remove_edges, align 8, !dbg !3693
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %29, i32 0, i32 0, !dbg !3693
  br label %cond.end21, !dbg !3693

cond.false20:                                     ; preds = %for.cond
  br label %cond.end21, !dbg !3693

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi %struct.VEC_edge_base* [ %base, %cond.true19 ], [ null, %cond.false20 ], !dbg !3693
  %30 = load i32, i32* %i, align 4, !dbg !3693
  %call23 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond22, i32 %30, %struct.edge_def** %ein), !dbg !3693
  %tobool24 = icmp ne i32 %call23, 0, !dbg !3695
  br i1 %tobool24, label %for.body, label %for.end, !dbg !3695

for.body:                                         ; preds = %cond.end21
  %31 = load %struct.edge_def*, %struct.edge_def** %ein, align 8, !dbg !3696
  %call25 = call zeroext i8 @remove_path(%struct.edge_def* %31), !dbg !3697
  br label %for.inc, !dbg !3697

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %i, align 4, !dbg !3698
  %inc = add i32 %32, 1, !dbg !3698
  store i32 %inc, i32* %i, align 4, !dbg !3698
  br label %for.cond, !dbg !3699, !llvm.loop !3700

for.end:                                          ; preds = %cond.end21
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %remove_edges), !dbg !3702
  br label %if.end26, !dbg !3703

if.end26:                                         ; preds = %for.end, %entry
  %33 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !3704
  %in_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %33, i32 0, i32 1, !dbg !3705
  %34 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !3705
  store %struct.edge_def* %34, %struct.edge_def** %ein, align 8, !dbg !3706
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3707
  call void @free_simple_loop_desc(%struct.loop* %35), !dbg !3708
  %36 = load %struct.edge_def*, %struct.edge_def** %ein, align 8, !dbg !3709
  %call27 = call zeroext i8 @remove_path(%struct.edge_def* %36), !dbg !3710
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3711
  %tobool28 = icmp ne %struct._IO_FILE* %37, null, !dbg !3711
  br i1 %tobool28, label %if.then29, label %if.end32, !dbg !3713

if.then29:                                        ; preds = %if.end26
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3714
  %39 = load i64, i64* %npeel, align 8, !dbg !3715
  %conv30 = trunc i64 %39 to i32, !dbg !3716
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.16, i64 0, i64 0), i32 %conv30), !dbg !3717
  br label %if.end32, !dbg !3717

if.end32:                                         ; preds = %if.then29, %if.end26
  ret void, !dbg !3718
}

declare dso_local %struct.niter_desc* @get_simple_loop_desc(%struct.loop*) #2

declare dso_local zeroext i8 @optimize_loop_for_size_p(%struct.loop*) #2

declare dso_local zeroext i8 @can_duplicate_loop_p(%struct.loop*) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !3719 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !3724, metadata !DIExpression()), !dbg !3725
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3726
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3728
  %1 = load i8*, i8** %popcount, align 8, !dbg !3728
  %tobool = icmp ne i8* %1, null, !dbg !3726
  br i1 %tobool, label %if.then, label %if.end7, !dbg !3729

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !3730, metadata !DIExpression()), !dbg !3732
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3733
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !3733
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !3733
  %div = udiv i32 %3, 64, !dbg !3733
  %idxprom = zext i32 %div to i64, !dbg !3733
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3733
  %4 = load i64, i64* %arrayidx, align 8, !dbg !3733
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !3733
  %rem = urem i32 %5, 64, !dbg !3733
  %sh_prom = zext i32 %rem to i64, !dbg !3733
  %shr = lshr i64 %4, %sh_prom, !dbg !3733
  %and = and i64 %shr, 1, !dbg !3733
  %conv = trunc i64 %and to i8, !dbg !3733
  store i8 %conv, i8* %oldbit, align 1, !dbg !3734
  %6 = load i8, i8* %oldbit, align 1, !dbg !3735
  %tobool1 = icmp ne i8 %6, 0, !dbg !3735
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !3737

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3738
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !3739
  %8 = load i8*, i8** %popcount3, align 8, !dbg !3739
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !3740
  %div4 = udiv i32 %9, 64, !dbg !3741
  %idxprom5 = zext i32 %div4 to i64, !dbg !3738
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3738
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !3742
  %dec = add i8 %10, -1, !dbg !3742
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !3742
  br label %if.end, !dbg !3738

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !3743

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !3744
  %rem8 = urem i32 %11, 64, !dbg !3745
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !3746
  %shl = shl i64 1, %sh_prom9, !dbg !3746
  %neg = xor i64 %shl, -1, !dbg !3747
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3748
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !3749
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !3750
  %div11 = udiv i32 %13, 64, !dbg !3751
  %idxprom12 = zext i32 %div11 to i64, !dbg !3748
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !3748
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !3752
  %and14 = and i64 %14, %neg, !dbg !3752
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !3752
  ret void, !dbg !3753
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.opt_info* @analyze_insns_in_loop(%struct.loop* %loop) #0 !dbg !3754 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %opt_info = alloca %struct.opt_info*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %ivts = alloca %struct.iv_to_split*, align 8
  %ves = alloca %struct.var_to_expand*, align 8
  %slot1 = alloca i8**, align 8
  %slot2 = alloca i8**, align 8
  %edges = alloca %struct.VEC_edge_heap*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %can_apply = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3757, metadata !DIExpression()), !dbg !3758
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !3759, metadata !DIExpression()), !dbg !3760
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3761, metadata !DIExpression()), !dbg !3762
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3763, metadata !DIExpression()), !dbg !3764
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info, metadata !3765, metadata !DIExpression()), !dbg !3766
  %call = call i8* @xcalloc(i64 1, i64 72), !dbg !3767
  %0 = bitcast i8* %call to %struct.opt_info*, !dbg !3767
  store %struct.opt_info* %0, %struct.opt_info** %opt_info, align 8, !dbg !3766
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3768, metadata !DIExpression()), !dbg !3769
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts, metadata !3770, metadata !DIExpression()), !dbg !3771
  store %struct.iv_to_split* null, %struct.iv_to_split** %ivts, align 8, !dbg !3771
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ves, metadata !3772, metadata !DIExpression()), !dbg !3773
  store %struct.var_to_expand* null, %struct.var_to_expand** %ves, align 8, !dbg !3773
  call void @llvm.dbg.declare(metadata i8*** %slot1, metadata !3774, metadata !DIExpression()), !dbg !3775
  call void @llvm.dbg.declare(metadata i8*** %slot2, metadata !3776, metadata !DIExpression()), !dbg !3777
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %edges, metadata !3778, metadata !DIExpression()), !dbg !3779
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3780
  %call1 = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %1), !dbg !3781
  store %struct.VEC_edge_heap* %call1, %struct.VEC_edge_heap** %edges, align 8, !dbg !3779
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !3782, metadata !DIExpression()), !dbg !3783
  call void @llvm.dbg.declare(metadata i8* %can_apply, metadata !3784, metadata !DIExpression()), !dbg !3785
  store i8 0, i8* %can_apply, align 1, !dbg !3785
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3786
  call void @iv_analysis_loop_init(%struct.loop* %2), !dbg !3787
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3788
  %call2 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %3), !dbg !3789
  store %struct.basic_block_def** %call2, %struct.basic_block_def*** %body, align 8, !dbg !3790
  %4 = load i32, i32* @flag_split_ivs_in_unroller, align 4, !dbg !3791
  %tobool = icmp ne i32 %4, 0, !dbg !3791
  br i1 %tobool, label %if.then, label %if.end, !dbg !3793

if.then:                                          ; preds = %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3794
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 6, !dbg !3796
  %6 = load i32, i32* %num_nodes, align 4, !dbg !3796
  %mul = mul i32 5, %6, !dbg !3797
  %conv = zext i32 %mul to i64, !dbg !3798
  %call3 = call %struct.htab* @htab_create(i64 %conv, i32 (i8*)* @si_info_hash, i32 (i8*, i8*)* @si_info_eq, void (i8*)* @free), !dbg !3799
  %7 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3800
  %insns_to_split = getelementptr inbounds %struct.opt_info, %struct.opt_info* %7, i32 0, i32 0, !dbg !3801
  store %struct.htab* %call3, %struct.htab** %insns_to_split, align 8, !dbg !3802
  %8 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3803
  %iv_to_split_head = getelementptr inbounds %struct.opt_info, %struct.opt_info* %8, i32 0, i32 1, !dbg !3804
  store %struct.iv_to_split* null, %struct.iv_to_split** %iv_to_split_head, align 8, !dbg !3805
  %9 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3806
  %iv_to_split_head4 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %9, i32 0, i32 1, !dbg !3807
  %10 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3808
  %iv_to_split_tail = getelementptr inbounds %struct.opt_info, %struct.opt_info* %10, i32 0, i32 2, !dbg !3809
  store %struct.iv_to_split** %iv_to_split_head4, %struct.iv_to_split*** %iv_to_split_tail, align 8, !dbg !3810
  br label %if.end, !dbg !3811

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3812
  %call5 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %11), !dbg !3813
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call5, i32 0, i32 0, !dbg !3814
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3814
  %13 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3815
  %loop_preheader = getelementptr inbounds %struct.opt_info, %struct.opt_info* %13, i32 0, i32 8, !dbg !3816
  store %struct.basic_block_def* %12, %struct.basic_block_def** %loop_preheader, align 8, !dbg !3817
  %14 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !3818
  %tobool6 = icmp ne %struct.VEC_edge_heap* %14, null, !dbg !3818
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !3818

cond.true:                                        ; preds = %if.end
  %15 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !3818
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %15, i32 0, i32 0, !dbg !3818
  br label %cond.end, !dbg !3818

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3818

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3818
  %call7 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3818
  %cmp = icmp eq i32 %call7, 1, !dbg !3820
  br i1 %cmp, label %if.then9, label %if.end21, !dbg !3821

if.then9:                                         ; preds = %cond.end
  %16 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !3822
  %tobool10 = icmp ne %struct.VEC_edge_heap* %16, null, !dbg !3822
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !3822

cond.true11:                                      ; preds = %if.then9
  %17 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !3822
  %base12 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %17, i32 0, i32 0, !dbg !3822
  br label %cond.end14, !dbg !3822

cond.false13:                                     ; preds = %if.then9
  br label %cond.end14, !dbg !3822

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_edge_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !3822
  %call16 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond15, i32 0), !dbg !3822
  store %struct.edge_def* %call16, %struct.edge_def** %exit, align 8, !dbg !3824
  %18 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3825
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !3827
  %19 = load i32, i32* %flags, align 8, !dbg !3827
  %and = and i32 %19, 14, !dbg !3828
  %tobool17 = icmp ne i32 %and, 0, !dbg !3828
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !3829

if.then18:                                        ; preds = %cond.end14
  %20 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3830
  %call19 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %20), !dbg !3832
  %21 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3833
  %loop_exit = getelementptr inbounds %struct.opt_info, %struct.opt_info* %21, i32 0, i32 7, !dbg !3834
  store %struct.basic_block_def* %call19, %struct.basic_block_def** %loop_exit, align 8, !dbg !3835
  store i8 1, i8* %can_apply, align 1, !dbg !3836
  br label %if.end20, !dbg !3837

if.end20:                                         ; preds = %if.then18, %cond.end14
  br label %if.end21, !dbg !3838

if.end21:                                         ; preds = %if.end20, %cond.end
  %22 = load i32, i32* @flag_variable_expansion_in_unroller, align 4, !dbg !3839
  %tobool22 = icmp ne i32 %22, 0, !dbg !3839
  br i1 %tobool22, label %land.lhs.true, label %if.end31, !dbg !3841

land.lhs.true:                                    ; preds = %if.end21
  %23 = load i8, i8* %can_apply, align 1, !dbg !3842
  %conv23 = zext i8 %23 to i32, !dbg !3842
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !3842
  br i1 %tobool24, label %if.then25, label %if.end31, !dbg !3843

if.then25:                                        ; preds = %land.lhs.true
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3844
  %num_nodes26 = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 6, !dbg !3846
  %25 = load i32, i32* %num_nodes26, align 4, !dbg !3846
  %mul27 = mul i32 5, %25, !dbg !3847
  %conv28 = zext i32 %mul27 to i64, !dbg !3848
  %call29 = call %struct.htab* @htab_create(i64 %conv28, i32 (i8*)* @ve_info_hash, i32 (i8*, i8*)* @ve_info_eq, void (i8*)* @free), !dbg !3849
  %26 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3850
  %insns_with_var_to_expand = getelementptr inbounds %struct.opt_info, %struct.opt_info* %26, i32 0, i32 3, !dbg !3851
  store %struct.htab* %call29, %struct.htab** %insns_with_var_to_expand, align 8, !dbg !3852
  %27 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3853
  %var_to_expand_head = getelementptr inbounds %struct.opt_info, %struct.opt_info* %27, i32 0, i32 4, !dbg !3854
  store %struct.var_to_expand* null, %struct.var_to_expand** %var_to_expand_head, align 8, !dbg !3855
  %28 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3856
  %var_to_expand_head30 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %28, i32 0, i32 4, !dbg !3857
  %29 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3858
  %var_to_expand_tail = getelementptr inbounds %struct.opt_info, %struct.opt_info* %29, i32 0, i32 5, !dbg !3859
  store %struct.var_to_expand** %var_to_expand_head30, %struct.var_to_expand*** %var_to_expand_tail, align 8, !dbg !3860
  br label %if.end31, !dbg !3861

if.end31:                                         ; preds = %if.then25, %land.lhs.true, %if.end21
  store i32 0, i32* %i, align 4, !dbg !3862
  br label %for.cond, !dbg !3864

for.cond:                                         ; preds = %for.inc106, %if.end31
  %30 = load i32, i32* %i, align 4, !dbg !3865
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3867
  %num_nodes32 = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 6, !dbg !3868
  %32 = load i32, i32* %num_nodes32, align 4, !dbg !3868
  %cmp33 = icmp ult i32 %30, %32, !dbg !3869
  br i1 %cmp33, label %for.body, label %for.end107, !dbg !3870

for.body:                                         ; preds = %for.cond
  %33 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3871
  %34 = load i32, i32* %i, align 4, !dbg !3873
  %idxprom = zext i32 %34 to i64, !dbg !3871
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %33, i64 %idxprom, !dbg !3871
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3871
  store %struct.basic_block_def* %35, %struct.basic_block_def** %bb, align 8, !dbg !3874
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3875
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 3, !dbg !3877
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3877
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3878
  %call35 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %37, %struct.basic_block_def* %38), !dbg !3879
  %tobool36 = icmp ne i8 %call35, 0, !dbg !3879
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !3880

if.then37:                                        ; preds = %for.body
  br label %for.inc106, !dbg !3881

if.end38:                                         ; preds = %for.body
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3882
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 7, !dbg !3882
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3882
  %40 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3882
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %40, i32 0, i32 0, !dbg !3882
  %41 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3882
  store %struct.rtx_def* %41, %struct.rtx_def** %insn, align 8, !dbg !3882
  br label %for.cond39, !dbg !3882

for.cond39:                                       ; preds = %for.inc, %if.end38
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3884
  %tobool40 = icmp ne %struct.rtx_def* %42, null, !dbg !3884
  br i1 %tobool40, label %land.rhs, label %land.end, !dbg !3884

land.rhs:                                         ; preds = %for.cond39
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3884
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3884
  %il41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 7, !dbg !3884
  %rtl42 = bitcast %union.basic_block_il_dependent* %il41 to %struct.rtl_bb_info**, !dbg !3884
  %45 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl42, align 8, !dbg !3884
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %45, i32 0, i32 1, !dbg !3884
  %46 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3884
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !3884
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3884
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3884
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !3884
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3884
  %cmp44 = icmp ne %struct.rtx_def* %43, %47, !dbg !3884
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond39
  %48 = phi i1 [ false, %for.cond39 ], [ %cmp44, %land.rhs ], !dbg !3886
  br i1 %48, label %for.body46, label %for.end, !dbg !3882

for.body46:                                       ; preds = %land.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3887
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !3887
  %bf.load = load i32, i32* %50, align 8, !dbg !3887
  %bf.clear = and i32 %bf.load, 65535, !dbg !3887
  %cmp47 = icmp eq i32 %bf.clear, 8, !dbg !3887
  br i1 %cmp47, label %if.end64, label %lor.lhs.false, !dbg !3887

lor.lhs.false:                                    ; preds = %for.body46
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3887
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !3887
  %bf.load49 = load i32, i32* %52, align 8, !dbg !3887
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !3887
  %cmp51 = icmp eq i32 %bf.clear50, 7, !dbg !3887
  br i1 %cmp51, label %if.end64, label %lor.lhs.false53, !dbg !3887

lor.lhs.false53:                                  ; preds = %lor.lhs.false
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3887
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !3887
  %bf.load54 = load i32, i32* %54, align 8, !dbg !3887
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !3887
  %cmp56 = icmp eq i32 %bf.clear55, 9, !dbg !3887
  br i1 %cmp56, label %if.end64, label %lor.lhs.false58, !dbg !3887

lor.lhs.false58:                                  ; preds = %lor.lhs.false53
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3887
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !3887
  %bf.load59 = load i32, i32* %56, align 8, !dbg !3887
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !3887
  %cmp61 = icmp eq i32 %bf.clear60, 10, !dbg !3887
  br i1 %cmp61, label %if.end64, label %if.then63, !dbg !3890

if.then63:                                        ; preds = %lor.lhs.false58
  br label %for.inc, !dbg !3891

if.end64:                                         ; preds = %lor.lhs.false58, %lor.lhs.false53, %lor.lhs.false, %for.body46
  %57 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3892
  %insns_to_split65 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %57, i32 0, i32 0, !dbg !3894
  %58 = load %struct.htab*, %struct.htab** %insns_to_split65, align 8, !dbg !3894
  %tobool66 = icmp ne %struct.htab* %58, null, !dbg !3892
  br i1 %tobool66, label %if.then67, label %if.end69, !dbg !3895

if.then67:                                        ; preds = %if.end64
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3896
  %call68 = call %struct.iv_to_split* @analyze_iv_to_split_insn(%struct.rtx_def* %59), !dbg !3897
  store %struct.iv_to_split* %call68, %struct.iv_to_split** %ivts, align 8, !dbg !3898
  br label %if.end69, !dbg !3899

if.end69:                                         ; preds = %if.then67, %if.end64
  %60 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !3900
  %tobool70 = icmp ne %struct.iv_to_split* %60, null, !dbg !3900
  br i1 %tobool70, label %if.then71, label %if.end82, !dbg !3902

if.then71:                                        ; preds = %if.end69
  %61 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3903
  %insns_to_split72 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %61, i32 0, i32 0, !dbg !3905
  %62 = load %struct.htab*, %struct.htab** %insns_to_split72, align 8, !dbg !3905
  %63 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !3906
  %64 = bitcast %struct.iv_to_split* %63 to i8*, !dbg !3906
  %call73 = call i8** @htab_find_slot(%struct.htab* %62, i8* %64, i32 1), !dbg !3907
  store i8** %call73, i8*** %slot1, align 8, !dbg !3908
  %65 = load i8**, i8*** %slot1, align 8, !dbg !3909
  %66 = load i8*, i8** %65, align 8, !dbg !3909
  %cmp74 = icmp eq i8* %66, null, !dbg !3909
  br i1 %cmp74, label %cond.false77, label %cond.true76, !dbg !3909

cond.true76:                                      ; preds = %if.then71
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1859, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3909
  br label %cond.end78, !dbg !3909

cond.false77:                                     ; preds = %if.then71
  br label %cond.end78, !dbg !3909

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond79 = phi i32 [ 0, %cond.true76 ], [ 0, %cond.false77 ], !dbg !3909
  %67 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !3910
  %68 = bitcast %struct.iv_to_split* %67 to i8*, !dbg !3910
  %69 = load i8**, i8*** %slot1, align 8, !dbg !3911
  store i8* %68, i8** %69, align 8, !dbg !3912
  %70 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !3913
  %71 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3914
  %iv_to_split_tail80 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %71, i32 0, i32 2, !dbg !3915
  %72 = load %struct.iv_to_split**, %struct.iv_to_split*** %iv_to_split_tail80, align 8, !dbg !3915
  store %struct.iv_to_split* %70, %struct.iv_to_split** %72, align 8, !dbg !3916
  %73 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !3917
  %next = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %73, i32 0, i32 3, !dbg !3918
  %74 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3919
  %iv_to_split_tail81 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %74, i32 0, i32 2, !dbg !3920
  store %struct.iv_to_split** %next, %struct.iv_to_split*** %iv_to_split_tail81, align 8, !dbg !3921
  br label %for.inc, !dbg !3922

if.end82:                                         ; preds = %if.end69
  %75 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3923
  %insns_with_var_to_expand83 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %75, i32 0, i32 3, !dbg !3925
  %76 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand83, align 8, !dbg !3925
  %tobool84 = icmp ne %struct.htab* %76, null, !dbg !3923
  br i1 %tobool84, label %if.then85, label %if.end87, !dbg !3926

if.then85:                                        ; preds = %if.end82
  %77 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3927
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3928
  %call86 = call %struct.var_to_expand* @analyze_insn_to_expand_var(%struct.loop* %77, %struct.rtx_def* %78), !dbg !3929
  store %struct.var_to_expand* %call86, %struct.var_to_expand** %ves, align 8, !dbg !3930
  br label %if.end87, !dbg !3931

if.end87:                                         ; preds = %if.then85, %if.end82
  %79 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !3932
  %tobool88 = icmp ne %struct.var_to_expand* %79, null, !dbg !3932
  br i1 %tobool88, label %if.then89, label %if.end101, !dbg !3934

if.then89:                                        ; preds = %if.end87
  %80 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3935
  %insns_with_var_to_expand90 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %80, i32 0, i32 3, !dbg !3937
  %81 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand90, align 8, !dbg !3937
  %82 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !3938
  %83 = bitcast %struct.var_to_expand* %82 to i8*, !dbg !3938
  %call91 = call i8** @htab_find_slot(%struct.htab* %81, i8* %83, i32 1), !dbg !3939
  store i8** %call91, i8*** %slot2, align 8, !dbg !3940
  %84 = load i8**, i8*** %slot2, align 8, !dbg !3941
  %85 = load i8*, i8** %84, align 8, !dbg !3941
  %cmp92 = icmp eq i8* %85, null, !dbg !3941
  br i1 %cmp92, label %cond.false95, label %cond.true94, !dbg !3941

cond.true94:                                      ; preds = %if.then89
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1872, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3941
  br label %cond.end96, !dbg !3941

cond.false95:                                     ; preds = %if.then89
  br label %cond.end96, !dbg !3941

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond97 = phi i32 [ 0, %cond.true94 ], [ 0, %cond.false95 ], !dbg !3941
  %86 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !3942
  %87 = bitcast %struct.var_to_expand* %86 to i8*, !dbg !3942
  %88 = load i8**, i8*** %slot2, align 8, !dbg !3943
  store i8* %87, i8** %88, align 8, !dbg !3944
  %89 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !3945
  %90 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3946
  %var_to_expand_tail98 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %90, i32 0, i32 5, !dbg !3947
  %91 = load %struct.var_to_expand**, %struct.var_to_expand*** %var_to_expand_tail98, align 8, !dbg !3947
  store %struct.var_to_expand* %89, %struct.var_to_expand** %91, align 8, !dbg !3948
  %92 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !3949
  %next99 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %92, i32 0, i32 3, !dbg !3950
  %93 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3951
  %var_to_expand_tail100 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %93, i32 0, i32 5, !dbg !3952
  store %struct.var_to_expand** %next99, %struct.var_to_expand*** %var_to_expand_tail100, align 8, !dbg !3953
  br label %if.end101, !dbg !3954

if.end101:                                        ; preds = %cond.end96, %if.end87
  br label %for.inc, !dbg !3955

for.inc:                                          ; preds = %if.end101, %cond.end78, %if.then63
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3884
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3884
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !3884
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 2, !dbg !3884
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !3884
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !3884
  store %struct.rtx_def* %95, %struct.rtx_def** %insn, align 8, !dbg !3884
  br label %for.cond39, !dbg !3884, !llvm.loop !3956

for.end:                                          ; preds = %land.end
  br label %for.inc106, !dbg !3958

for.inc106:                                       ; preds = %for.end, %if.then37
  %96 = load i32, i32* %i, align 4, !dbg !3959
  %inc = add i32 %96, 1, !dbg !3959
  store i32 %inc, i32* %i, align 4, !dbg !3959
  br label %for.cond, !dbg !3960, !llvm.loop !3961

for.end107:                                       ; preds = %for.cond
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %edges), !dbg !3963
  %97 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3964
  %98 = bitcast %struct.basic_block_def** %97 to i8*, !dbg !3964
  call void @free(i8* %98), !dbg !3965
  %99 = load %struct.opt_info*, %struct.opt_info** %opt_info, align 8, !dbg !3966
  ret %struct.opt_info* %99, !dbg !3967
}

; Function Attrs: noinline nounwind uwtable
define internal void @opt_info_start_duplication(%struct.opt_info* %opt_info) #0 !dbg !3968 {
entry:
  %opt_info.addr = alloca %struct.opt_info*, align 8
  store %struct.opt_info* %opt_info, %struct.opt_info** %opt_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info.addr, metadata !3971, metadata !DIExpression()), !dbg !3972
  %0 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !3973
  %tobool = icmp ne %struct.opt_info* %0, null, !dbg !3973
  br i1 %tobool, label %if.then, label %if.end, !dbg !3975

if.then:                                          ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3976
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3976
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3976
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3976
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !3976
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !3976
  %4 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !3977
  %first_new_block = getelementptr inbounds %struct.opt_info, %struct.opt_info* %4, i32 0, i32 6, !dbg !3978
  store i32 %3, i32* %first_new_block, align 8, !dbg !3979
  br label %if.end, !dbg !3977

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3980
}

declare dso_local zeroext i8 @duplicate_loop_to_header_edge(%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @apply_opt_in_copies(%struct.opt_info* %opt_info, i32 %n_copies, i8 zeroext %unrolling, i8 zeroext %rewrite_original_loop) #0 !dbg !3981 {
entry:
  %opt_info.addr = alloca %struct.opt_info*, align 8
  %n_copies.addr = alloca i32, align 4
  %unrolling.addr = alloca i8, align 1
  %rewrite_original_loop.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %delta = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %orig_bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %orig_insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %ivts_templ = alloca %struct.iv_to_split, align 8
  %ivts = alloca %struct.iv_to_split*, align 8
  %ve_templ = alloca %struct.var_to_expand, align 8
  %ves = alloca %struct.var_to_expand*, align 8
  store %struct.opt_info* %opt_info, %struct.opt_info** %opt_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info.addr, metadata !3984, metadata !DIExpression()), !dbg !3985
  store i32 %n_copies, i32* %n_copies.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_copies.addr, metadata !3986, metadata !DIExpression()), !dbg !3987
  store i8 %unrolling, i8* %unrolling.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unrolling.addr, metadata !3988, metadata !DIExpression()), !dbg !3989
  store i8 %rewrite_original_loop, i8* %rewrite_original_loop.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %rewrite_original_loop.addr, metadata !3990, metadata !DIExpression()), !dbg !3991
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3992, metadata !DIExpression()), !dbg !3993
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !3994, metadata !DIExpression()), !dbg !3995
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3996, metadata !DIExpression()), !dbg !3997
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %orig_bb, metadata !3998, metadata !DIExpression()), !dbg !3999
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4000, metadata !DIExpression()), !dbg !4001
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_insn, metadata !4002, metadata !DIExpression()), !dbg !4003
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !4004, metadata !DIExpression()), !dbg !4005
  call void @llvm.dbg.declare(metadata %struct.iv_to_split* %ivts_templ, metadata !4006, metadata !DIExpression()), !dbg !4007
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata %struct.var_to_expand* %ve_templ, metadata !4010, metadata !DIExpression()), !dbg !4011
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ves, metadata !4012, metadata !DIExpression()), !dbg !4013
  %0 = load i8, i8* %unrolling.addr, align 1, !dbg !4014
  %tobool = icmp ne i8 %0, 0, !dbg !4014
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !4014

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* %rewrite_original_loop.addr, align 1, !dbg !4014
  %conv = zext i8 %1 to i32, !dbg !4014
  %tobool1 = icmp ne i32 %conv, 0, !dbg !4014
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !4014

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2209, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4014
  br label %cond.end, !dbg !4014

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !4014

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4014
  %2 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4015
  %insns_to_split = getelementptr inbounds %struct.opt_info, %struct.opt_info* %2, i32 0, i32 0, !dbg !4017
  %3 = load %struct.htab*, %struct.htab** %insns_to_split, align 8, !dbg !4017
  %tobool2 = icmp ne %struct.htab* %3, null, !dbg !4015
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4018

if.then:                                          ; preds = %cond.end
  %4 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4019
  %iv_to_split_head = getelementptr inbounds %struct.opt_info, %struct.opt_info* %4, i32 0, i32 1, !dbg !4021
  %5 = load %struct.iv_to_split*, %struct.iv_to_split** %iv_to_split_head, align 8, !dbg !4021
  store %struct.iv_to_split* %5, %struct.iv_to_split** %ivts, align 8, !dbg !4022
  br label %for.cond, !dbg !4023

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4024
  %tobool3 = icmp ne %struct.iv_to_split* %6, null, !dbg !4026
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4026

for.body:                                         ; preds = %for.cond
  %7 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4027
  call void @allocate_basic_variable(%struct.iv_to_split* %7), !dbg !4028
  br label %for.inc, !dbg !4028

for.inc:                                          ; preds = %for.body
  %8 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4029
  %next4 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %8, i32 0, i32 3, !dbg !4030
  %9 = load %struct.iv_to_split*, %struct.iv_to_split** %next4, align 8, !dbg !4030
  store %struct.iv_to_split* %9, %struct.iv_to_split** %ivts, align 8, !dbg !4031
  br label %for.cond, !dbg !4032, !llvm.loop !4033

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !4034

if.end:                                           ; preds = %for.end, %cond.end
  %10 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4035
  %first_new_block = getelementptr inbounds %struct.opt_info, %struct.opt_info* %10, i32 0, i32 6, !dbg !4037
  %11 = load i32, i32* %first_new_block, align 8, !dbg !4037
  store i32 %11, i32* %i, align 4, !dbg !4038
  br label %for.cond5, !dbg !4039

for.cond5:                                        ; preds = %for.inc142, %if.end
  %12 = load i32, i32* %i, align 4, !dbg !4040
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4042
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4042
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4042
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4042
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 5, !dbg !4042
  %15 = load i32, i32* %x_last_basic_block, align 8, !dbg !4042
  %cmp = icmp ult i32 %12, %15, !dbg !4043
  br i1 %cmp, label %for.body7, label %for.end143, !dbg !4044

for.body7:                                        ; preds = %for.cond5
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4045
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4045
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !4045
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !4045
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 2, !dbg !4045
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4045
  %tobool10 = icmp ne %struct.VEC_basic_block_gc* %18, null, !dbg !4045
  br i1 %tobool10, label %cond.true11, label %cond.false15, !dbg !4045

cond.true11:                                      ; preds = %for.body7
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4045
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !4045
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !4045
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !4045
  %x_basic_block_info14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 2, !dbg !4045
  %21 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info14, align 8, !dbg !4045
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %21, i32 0, i32 0, !dbg !4045
  br label %cond.end16, !dbg !4045

cond.false15:                                     ; preds = %for.body7
  br label %cond.end16, !dbg !4045

cond.end16:                                       ; preds = %cond.false15, %cond.true11
  %cond17 = phi %struct.VEC_basic_block_base* [ %base, %cond.true11 ], [ null, %cond.false15 ], !dbg !4045
  %22 = load i32, i32* %i, align 4, !dbg !4045
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond17, i32 %22), !dbg !4045
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !4047
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4048
  %call18 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %23), !dbg !4049
  store %struct.basic_block_def* %call18, %struct.basic_block_def** %orig_bb, align 8, !dbg !4050
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4051
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 2, !dbg !4052
  %25 = load i8*, i8** %aux, align 8, !dbg !4052
  %26 = ptrtoint i8* %25 to i64, !dbg !4053
  %conv19 = trunc i64 %26 to i32, !dbg !4053
  %27 = load i32, i32* %n_copies.addr, align 4, !dbg !4054
  %28 = load i8, i8* %unrolling.addr, align 1, !dbg !4055
  %call20 = call i32 @determine_split_iv_delta(i32 %conv19, i32 %27, i8 zeroext %28), !dbg !4056
  store i32 %call20, i32* %delta, align 4, !dbg !4057
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4058
  %aux21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 2, !dbg !4059
  store i8* null, i8** %aux21, align 8, !dbg !4060
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %orig_bb, align 8, !dbg !4061
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 7, !dbg !4061
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4061
  %31 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4061
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %31, i32 0, i32 0, !dbg !4061
  %32 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4061
  store %struct.rtx_def* %32, %struct.rtx_def** %orig_insn, align 8, !dbg !4062
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4063
  %il22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !4063
  %rtl23 = bitcast %union.basic_block_il_dependent* %il22 to %struct.rtl_bb_info**, !dbg !4063
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl23, align 8, !dbg !4063
  %head_24 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 0, !dbg !4063
  %35 = load %struct.rtx_def*, %struct.rtx_def** %head_24, align 8, !dbg !4063
  store %struct.rtx_def* %35, %struct.rtx_def** %insn, align 8, !dbg !4065
  br label %for.cond25, !dbg !4066

for.cond25:                                       ; preds = %for.inc140, %cond.end16
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4067
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4069
  %il26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 7, !dbg !4069
  %rtl27 = bitcast %union.basic_block_il_dependent* %il26 to %struct.rtl_bb_info**, !dbg !4069
  %38 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl27, align 8, !dbg !4069
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %38, i32 0, i32 1, !dbg !4069
  %39 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4069
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4069
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4069
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4069
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4069
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4069
  %cmp28 = icmp ne %struct.rtx_def* %36, %40, !dbg !4070
  br i1 %cmp28, label %for.body30, label %for.end141, !dbg !4071

for.body30:                                       ; preds = %for.cond25
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4072
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !4072
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4072
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 2, !dbg !4072
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4072
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4072
  store %struct.rtx_def* %42, %struct.rtx_def** %next, align 8, !dbg !4074
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4075
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !4075
  %bf.load = load i32, i32* %44, align 8, !dbg !4075
  %bf.clear = and i32 %bf.load, 65535, !dbg !4075
  %cmp35 = icmp eq i32 %bf.clear, 8, !dbg !4075
  br i1 %cmp35, label %if.end53, label %lor.lhs.false37, !dbg !4075

lor.lhs.false37:                                  ; preds = %for.body30
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4075
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !4075
  %bf.load38 = load i32, i32* %46, align 8, !dbg !4075
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !4075
  %cmp40 = icmp eq i32 %bf.clear39, 7, !dbg !4075
  br i1 %cmp40, label %if.end53, label %lor.lhs.false42, !dbg !4075

lor.lhs.false42:                                  ; preds = %lor.lhs.false37
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4075
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !4075
  %bf.load43 = load i32, i32* %48, align 8, !dbg !4075
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !4075
  %cmp45 = icmp eq i32 %bf.clear44, 9, !dbg !4075
  br i1 %cmp45, label %if.end53, label %lor.lhs.false47, !dbg !4075

lor.lhs.false47:                                  ; preds = %lor.lhs.false42
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4075
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !4075
  %bf.load48 = load i32, i32* %50, align 8, !dbg !4075
  %bf.clear49 = and i32 %bf.load48, 65535, !dbg !4075
  %cmp50 = icmp eq i32 %bf.clear49, 10, !dbg !4075
  br i1 %cmp50, label %if.end53, label %if.then52, !dbg !4077

if.then52:                                        ; preds = %lor.lhs.false47
  br label %for.inc140, !dbg !4078

if.end53:                                         ; preds = %lor.lhs.false47, %lor.lhs.false42, %lor.lhs.false37, %for.body30
  br label %while.cond, !dbg !4079

while.cond:                                       ; preds = %while.body, %if.end53
  %51 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4080
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !4080
  %bf.load54 = load i32, i32* %52, align 8, !dbg !4080
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !4080
  %cmp56 = icmp eq i32 %bf.clear55, 8, !dbg !4080
  br i1 %cmp56, label %lor.end, label %lor.lhs.false58, !dbg !4080

lor.lhs.false58:                                  ; preds = %while.cond
  %53 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4080
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !4080
  %bf.load59 = load i32, i32* %54, align 8, !dbg !4080
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !4080
  %cmp61 = icmp eq i32 %bf.clear60, 7, !dbg !4080
  br i1 %cmp61, label %lor.end, label %lor.lhs.false63, !dbg !4080

lor.lhs.false63:                                  ; preds = %lor.lhs.false58
  %55 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4080
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !4080
  %bf.load64 = load i32, i32* %56, align 8, !dbg !4080
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !4080
  %cmp66 = icmp eq i32 %bf.clear65, 9, !dbg !4080
  br i1 %cmp66, label %lor.end, label %lor.rhs, !dbg !4080

lor.rhs:                                          ; preds = %lor.lhs.false63
  %57 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4080
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !4080
  %bf.load68 = load i32, i32* %58, align 8, !dbg !4080
  %bf.clear69 = and i32 %bf.load68, 65535, !dbg !4080
  %cmp70 = icmp eq i32 %bf.clear69, 10, !dbg !4080
  br label %lor.end, !dbg !4080

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false63, %lor.lhs.false58, %while.cond
  %59 = phi i1 [ true, %lor.lhs.false63 ], [ true, %lor.lhs.false58 ], [ true, %while.cond ], [ %cmp70, %lor.rhs ]
  %lnot = xor i1 %59, true, !dbg !4081
  br i1 %lnot, label %while.body, label %while.end, !dbg !4079

while.body:                                       ; preds = %lor.end
  %60 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4082
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !4082
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !4082
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 2, !dbg !4082
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !4082
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !4082
  store %struct.rtx_def* %61, %struct.rtx_def** %orig_insn, align 8, !dbg !4083
  br label %while.cond, !dbg !4079, !llvm.loop !4084

while.end:                                        ; preds = %lor.end
  %62 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4085
  %insn76 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %ivts_templ, i32 0, i32 0, !dbg !4086
  store %struct.rtx_def* %62, %struct.rtx_def** %insn76, align 8, !dbg !4087
  %63 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4088
  %insn77 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %ve_templ, i32 0, i32 0, !dbg !4089
  store %struct.rtx_def* %63, %struct.rtx_def** %insn77, align 8, !dbg !4090
  %64 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4091
  %insns_to_split78 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %64, i32 0, i32 0, !dbg !4093
  %65 = load %struct.htab*, %struct.htab** %insns_to_split78, align 8, !dbg !4093
  %tobool79 = icmp ne %struct.htab* %65, null, !dbg !4091
  br i1 %tobool79, label %if.then80, label %if.end107, !dbg !4094

if.then80:                                        ; preds = %while.end
  %66 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4095
  %insns_to_split81 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %66, i32 0, i32 0, !dbg !4097
  %67 = load %struct.htab*, %struct.htab** %insns_to_split81, align 8, !dbg !4097
  %68 = bitcast %struct.iv_to_split* %ivts_templ to i8*, !dbg !4098
  %call82 = call i8* @htab_find(%struct.htab* %67, i8* %68), !dbg !4099
  %69 = bitcast i8* %call82 to %struct.iv_to_split*, !dbg !4100
  store %struct.iv_to_split* %69, %struct.iv_to_split** %ivts, align 8, !dbg !4101
  %70 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4102
  %tobool83 = icmp ne %struct.iv_to_split* %70, null, !dbg !4102
  br i1 %tobool83, label %if.then84, label %if.end106, !dbg !4104

if.then84:                                        ; preds = %if.then80
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4105
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !4105
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !4105
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 5, !dbg !4105
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !4105
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !4105
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !4105
  %bf.load89 = load i32, i32* %73, align 8, !dbg !4105
  %bf.clear90 = and i32 %bf.load89, 65535, !dbg !4105
  %74 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4105
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !4105
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !4105
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 5, !dbg !4105
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !4105
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !4105
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !4105
  %bf.load95 = load i32, i32* %76, align 8, !dbg !4105
  %bf.clear96 = and i32 %bf.load95, 65535, !dbg !4105
  %cmp97 = icmp eq i32 %bf.clear90, %bf.clear96, !dbg !4105
  br i1 %cmp97, label %cond.false100, label %cond.true99, !dbg !4105

cond.true99:                                      ; preds = %if.then84
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4105
  br label %cond.end101, !dbg !4105

cond.false100:                                    ; preds = %if.then84
  br label %cond.end101, !dbg !4105

cond.end101:                                      ; preds = %cond.false100, %cond.true99
  %cond102 = phi i32 [ 0, %cond.true99 ], [ 0, %cond.false100 ], !dbg !4105
  %77 = load i32, i32* %delta, align 4, !dbg !4107
  %tobool103 = icmp ne i32 %77, 0, !dbg !4107
  br i1 %tobool103, label %if.end105, label %if.then104, !dbg !4109

if.then104:                                       ; preds = %cond.end101
  %78 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4110
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4111
  call void @insert_base_initialization(%struct.iv_to_split* %78, %struct.rtx_def* %79), !dbg !4112
  br label %if.end105, !dbg !4112

if.end105:                                        ; preds = %if.then104, %cond.end101
  %80 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4113
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4114
  %82 = load i32, i32* %delta, align 4, !dbg !4115
  call void @split_iv(%struct.iv_to_split* %80, %struct.rtx_def* %81, i32 %82), !dbg !4116
  br label %if.end106, !dbg !4117

if.end106:                                        ; preds = %if.end105, %if.then80
  br label %if.end107, !dbg !4118

if.end107:                                        ; preds = %if.end106, %while.end
  %83 = load i8, i8* %unrolling.addr, align 1, !dbg !4119
  %conv108 = zext i8 %83 to i32, !dbg !4119
  %tobool109 = icmp ne i32 %conv108, 0, !dbg !4119
  br i1 %tobool109, label %land.lhs.true, label %if.end135, !dbg !4121

land.lhs.true:                                    ; preds = %if.end107
  %84 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4122
  %insns_with_var_to_expand = getelementptr inbounds %struct.opt_info, %struct.opt_info* %84, i32 0, i32 3, !dbg !4123
  %85 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand, align 8, !dbg !4123
  %tobool110 = icmp ne %struct.htab* %85, null, !dbg !4122
  br i1 %tobool110, label %if.then111, label %if.end135, !dbg !4124

if.then111:                                       ; preds = %land.lhs.true
  %86 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4125
  %insns_with_var_to_expand112 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %86, i32 0, i32 3, !dbg !4127
  %87 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand112, align 8, !dbg !4127
  %88 = bitcast %struct.var_to_expand* %ve_templ to i8*, !dbg !4128
  %call113 = call i8* @htab_find(%struct.htab* %87, i8* %88), !dbg !4129
  %89 = bitcast i8* %call113 to %struct.var_to_expand*, !dbg !4130
  store %struct.var_to_expand* %89, %struct.var_to_expand** %ves, align 8, !dbg !4131
  %90 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4132
  %tobool114 = icmp ne %struct.var_to_expand* %90, null, !dbg !4132
  br i1 %tobool114, label %if.then115, label %if.end134, !dbg !4134

if.then115:                                       ; preds = %if.then111
  %91 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4135
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !4135
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !4135
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 5, !dbg !4135
  %rt_rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**, !dbg !4135
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx119, align 8, !dbg !4135
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !4135
  %bf.load120 = load i32, i32* %93, align 8, !dbg !4135
  %bf.clear121 = and i32 %bf.load120, 65535, !dbg !4135
  %94 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4135
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !4135
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !4135
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 5, !dbg !4135
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !4135
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !4135
  %96 = bitcast %struct.rtx_def* %95 to i32*, !dbg !4135
  %bf.load126 = load i32, i32* %96, align 8, !dbg !4135
  %bf.clear127 = and i32 %bf.load126, 65535, !dbg !4135
  %cmp128 = icmp eq i32 %bf.clear121, %bf.clear127, !dbg !4135
  br i1 %cmp128, label %cond.false131, label %cond.true130, !dbg !4135

cond.true130:                                     ; preds = %if.then115
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2263, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4135
  br label %cond.end132, !dbg !4135

cond.false131:                                    ; preds = %if.then115
  br label %cond.end132, !dbg !4135

cond.end132:                                      ; preds = %cond.false131, %cond.true130
  %cond133 = phi i32 [ 0, %cond.true130 ], [ 0, %cond.false131 ], !dbg !4135
  %97 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4137
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4138
  call void @expand_var_during_unrolling(%struct.var_to_expand* %97, %struct.rtx_def* %98), !dbg !4139
  br label %if.end134, !dbg !4140

if.end134:                                        ; preds = %cond.end132, %if.then111
  br label %if.end135, !dbg !4141

if.end135:                                        ; preds = %if.end134, %land.lhs.true, %if.end107
  %99 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4142
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !4142
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !4142
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 2, !dbg !4142
  %rt_rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**, !dbg !4142
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx139, align 8, !dbg !4142
  store %struct.rtx_def* %100, %struct.rtx_def** %orig_insn, align 8, !dbg !4143
  br label %for.inc140, !dbg !4144

for.inc140:                                       ; preds = %if.end135, %if.then52
  %101 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4145
  store %struct.rtx_def* %101, %struct.rtx_def** %insn, align 8, !dbg !4146
  br label %for.cond25, !dbg !4147, !llvm.loop !4148

for.end141:                                       ; preds = %for.cond25
  br label %for.inc142, !dbg !4150

for.inc142:                                       ; preds = %for.end141
  %102 = load i32, i32* %i, align 4, !dbg !4151
  %inc = add i32 %102, 1, !dbg !4151
  store i32 %inc, i32* %i, align 4, !dbg !4151
  br label %for.cond5, !dbg !4152, !llvm.loop !4153

for.end143:                                       ; preds = %for.cond5
  %103 = load i8, i8* %rewrite_original_loop.addr, align 1, !dbg !4155
  %tobool144 = icmp ne i8 %103, 0, !dbg !4155
  br i1 %tobool144, label %if.end146, label %if.then145, !dbg !4157

if.then145:                                       ; preds = %for.end143
  br label %for.end248, !dbg !4158

if.end146:                                        ; preds = %for.end143
  %104 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4159
  %insns_with_var_to_expand147 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %104, i32 0, i32 3, !dbg !4161
  %105 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand147, align 8, !dbg !4161
  %tobool148 = icmp ne %struct.htab* %105, null, !dbg !4159
  br i1 %tobool148, label %if.then149, label %if.end163, !dbg !4162

if.then149:                                       ; preds = %if.end146
  %106 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4163
  %var_to_expand_head = getelementptr inbounds %struct.opt_info, %struct.opt_info* %106, i32 0, i32 4, !dbg !4166
  %107 = load %struct.var_to_expand*, %struct.var_to_expand** %var_to_expand_head, align 8, !dbg !4166
  store %struct.var_to_expand* %107, %struct.var_to_expand** %ves, align 8, !dbg !4167
  br label %for.cond150, !dbg !4168

for.cond150:                                      ; preds = %for.inc153, %if.then149
  %108 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4169
  %tobool151 = icmp ne %struct.var_to_expand* %108, null, !dbg !4171
  br i1 %tobool151, label %for.body152, label %for.end155, !dbg !4171

for.body152:                                      ; preds = %for.cond150
  %109 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4172
  %110 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4173
  %loop_preheader = getelementptr inbounds %struct.opt_info, %struct.opt_info* %110, i32 0, i32 8, !dbg !4174
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_preheader, align 8, !dbg !4174
  call void @insert_var_expansion_initialization(%struct.var_to_expand* %109, %struct.basic_block_def* %111), !dbg !4175
  br label %for.inc153, !dbg !4175

for.inc153:                                       ; preds = %for.body152
  %112 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4176
  %next154 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %112, i32 0, i32 3, !dbg !4177
  %113 = load %struct.var_to_expand*, %struct.var_to_expand** %next154, align 8, !dbg !4177
  store %struct.var_to_expand* %113, %struct.var_to_expand** %ves, align 8, !dbg !4178
  br label %for.cond150, !dbg !4179, !llvm.loop !4180

for.end155:                                       ; preds = %for.cond150
  %114 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4182
  %var_to_expand_head156 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %114, i32 0, i32 4, !dbg !4184
  %115 = load %struct.var_to_expand*, %struct.var_to_expand** %var_to_expand_head156, align 8, !dbg !4184
  store %struct.var_to_expand* %115, %struct.var_to_expand** %ves, align 8, !dbg !4185
  br label %for.cond157, !dbg !4186

for.cond157:                                      ; preds = %for.inc160, %for.end155
  %116 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4187
  %tobool158 = icmp ne %struct.var_to_expand* %116, null, !dbg !4189
  br i1 %tobool158, label %for.body159, label %for.end162, !dbg !4189

for.body159:                                      ; preds = %for.cond157
  %117 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4190
  %118 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4191
  %loop_exit = getelementptr inbounds %struct.opt_info, %struct.opt_info* %118, i32 0, i32 7, !dbg !4192
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_exit, align 8, !dbg !4192
  call void @combine_var_copies_in_loop_exit(%struct.var_to_expand* %117, %struct.basic_block_def* %119), !dbg !4193
  br label %for.inc160, !dbg !4193

for.inc160:                                       ; preds = %for.body159
  %120 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4194
  %next161 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %120, i32 0, i32 3, !dbg !4195
  %121 = load %struct.var_to_expand*, %struct.var_to_expand** %next161, align 8, !dbg !4195
  store %struct.var_to_expand* %121, %struct.var_to_expand** %ves, align 8, !dbg !4196
  br label %for.cond157, !dbg !4197, !llvm.loop !4198

for.end162:                                       ; preds = %for.cond157
  br label %if.end163, !dbg !4200

if.end163:                                        ; preds = %for.end162, %if.end146
  %122 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4201
  %first_new_block164 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %122, i32 0, i32 6, !dbg !4203
  %123 = load i32, i32* %first_new_block164, align 8, !dbg !4203
  store i32 %123, i32* %i, align 4, !dbg !4204
  br label %for.cond165, !dbg !4205

for.cond165:                                      ; preds = %for.inc246, %if.end163
  %124 = load i32, i32* %i, align 4, !dbg !4206
  %125 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4208
  %add.ptr166 = getelementptr inbounds %struct.function, %struct.function* %125, i64 0, !dbg !4208
  %cfg167 = getelementptr inbounds %struct.function, %struct.function* %add.ptr166, i32 0, i32 1, !dbg !4208
  %126 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg167, align 8, !dbg !4208
  %x_last_basic_block168 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %126, i32 0, i32 5, !dbg !4208
  %127 = load i32, i32* %x_last_basic_block168, align 8, !dbg !4208
  %cmp169 = icmp ult i32 %124, %127, !dbg !4209
  br i1 %cmp169, label %for.body171, label %for.end248, !dbg !4210

for.body171:                                      ; preds = %for.cond165
  %128 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4211
  %add.ptr172 = getelementptr inbounds %struct.function, %struct.function* %128, i64 0, !dbg !4211
  %cfg173 = getelementptr inbounds %struct.function, %struct.function* %add.ptr172, i32 0, i32 1, !dbg !4211
  %129 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg173, align 8, !dbg !4211
  %x_basic_block_info174 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %129, i32 0, i32 2, !dbg !4211
  %130 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info174, align 8, !dbg !4211
  %tobool175 = icmp ne %struct.VEC_basic_block_gc* %130, null, !dbg !4211
  br i1 %tobool175, label %cond.true176, label %cond.false181, !dbg !4211

cond.true176:                                     ; preds = %for.body171
  %131 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4211
  %add.ptr177 = getelementptr inbounds %struct.function, %struct.function* %131, i64 0, !dbg !4211
  %cfg178 = getelementptr inbounds %struct.function, %struct.function* %add.ptr177, i32 0, i32 1, !dbg !4211
  %132 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg178, align 8, !dbg !4211
  %x_basic_block_info179 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %132, i32 0, i32 2, !dbg !4211
  %133 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info179, align 8, !dbg !4211
  %base180 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %133, i32 0, i32 0, !dbg !4211
  br label %cond.end182, !dbg !4211

cond.false181:                                    ; preds = %for.body171
  br label %cond.end182, !dbg !4211

cond.end182:                                      ; preds = %cond.false181, %cond.true176
  %cond183 = phi %struct.VEC_basic_block_base* [ %base180, %cond.true176 ], [ null, %cond.false181 ], !dbg !4211
  %134 = load i32, i32* %i, align 4, !dbg !4211
  %call184 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond183, i32 %134), !dbg !4211
  store %struct.basic_block_def* %call184, %struct.basic_block_def** %bb, align 8, !dbg !4213
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4214
  %call185 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %135), !dbg !4215
  store %struct.basic_block_def* %call185, %struct.basic_block_def** %orig_bb, align 8, !dbg !4216
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %orig_bb, align 8, !dbg !4217
  %call186 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %136), !dbg !4219
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4220
  %cmp187 = icmp ne %struct.basic_block_def* %call186, %137, !dbg !4221
  br i1 %cmp187, label %if.then189, label %if.end190, !dbg !4222

if.then189:                                       ; preds = %cond.end182
  br label %for.inc246, !dbg !4223

if.end190:                                        ; preds = %cond.end182
  %138 = load i32, i32* %n_copies.addr, align 4, !dbg !4224
  %139 = load i8, i8* %unrolling.addr, align 1, !dbg !4225
  %call191 = call i32 @determine_split_iv_delta(i32 0, i32 %138, i8 zeroext %139), !dbg !4226
  store i32 %call191, i32* %delta, align 4, !dbg !4227
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %orig_bb, align 8, !dbg !4228
  %il192 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 7, !dbg !4228
  %rtl193 = bitcast %union.basic_block_il_dependent* %il192 to %struct.rtl_bb_info**, !dbg !4228
  %141 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl193, align 8, !dbg !4228
  %head_194 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %141, i32 0, i32 0, !dbg !4228
  %142 = load %struct.rtx_def*, %struct.rtx_def** %head_194, align 8, !dbg !4228
  store %struct.rtx_def* %142, %struct.rtx_def** %orig_insn, align 8, !dbg !4230
  br label %for.cond195, !dbg !4231

for.cond195:                                      ; preds = %for.inc244, %if.end190
  %143 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4232
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4234
  %il196 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 7, !dbg !4234
  %rtl197 = bitcast %union.basic_block_il_dependent* %il196 to %struct.rtl_bb_info**, !dbg !4234
  %145 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl197, align 8, !dbg !4234
  %end_198 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %145, i32 0, i32 1, !dbg !4234
  %146 = load %struct.rtx_def*, %struct.rtx_def** %end_198, align 8, !dbg !4234
  %u199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1, !dbg !4234
  %fld200 = bitcast %union.u* %u199 to [1 x %union.rtunion_def]*, !dbg !4234
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i64 0, i64 2, !dbg !4234
  %rt_rtx202 = bitcast %union.rtunion_def* %arrayidx201 to %struct.rtx_def**, !dbg !4234
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx202, align 8, !dbg !4234
  %cmp203 = icmp ne %struct.rtx_def* %143, %147, !dbg !4235
  br i1 %cmp203, label %for.body205, label %for.end245, !dbg !4236

for.body205:                                      ; preds = %for.cond195
  %148 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4237
  %u206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !4237
  %fld207 = bitcast %union.u* %u206 to [1 x %union.rtunion_def]*, !dbg !4237
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i64 0, i64 2, !dbg !4237
  %rt_rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**, !dbg !4237
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx209, align 8, !dbg !4237
  store %struct.rtx_def* %149, %struct.rtx_def** %next, align 8, !dbg !4239
  %150 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4240
  %151 = bitcast %struct.rtx_def* %150 to i32*, !dbg !4240
  %bf.load210 = load i32, i32* %151, align 8, !dbg !4240
  %bf.clear211 = and i32 %bf.load210, 65535, !dbg !4240
  %cmp212 = icmp eq i32 %bf.clear211, 8, !dbg !4240
  br i1 %cmp212, label %if.end230, label %lor.lhs.false214, !dbg !4240

lor.lhs.false214:                                 ; preds = %for.body205
  %152 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4240
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !4240
  %bf.load215 = load i32, i32* %153, align 8, !dbg !4240
  %bf.clear216 = and i32 %bf.load215, 65535, !dbg !4240
  %cmp217 = icmp eq i32 %bf.clear216, 7, !dbg !4240
  br i1 %cmp217, label %if.end230, label %lor.lhs.false219, !dbg !4240

lor.lhs.false219:                                 ; preds = %lor.lhs.false214
  %154 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4240
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !4240
  %bf.load220 = load i32, i32* %155, align 8, !dbg !4240
  %bf.clear221 = and i32 %bf.load220, 65535, !dbg !4240
  %cmp222 = icmp eq i32 %bf.clear221, 9, !dbg !4240
  br i1 %cmp222, label %if.end230, label %lor.lhs.false224, !dbg !4240

lor.lhs.false224:                                 ; preds = %lor.lhs.false219
  %156 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4240
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !4240
  %bf.load225 = load i32, i32* %157, align 8, !dbg !4240
  %bf.clear226 = and i32 %bf.load225, 65535, !dbg !4240
  %cmp227 = icmp eq i32 %bf.clear226, 10, !dbg !4240
  br i1 %cmp227, label %if.end230, label %if.then229, !dbg !4242

if.then229:                                       ; preds = %lor.lhs.false224
  br label %for.inc244, !dbg !4243

if.end230:                                        ; preds = %lor.lhs.false224, %lor.lhs.false219, %lor.lhs.false214, %for.body205
  %158 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4244
  %insn231 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %ivts_templ, i32 0, i32 0, !dbg !4245
  store %struct.rtx_def* %158, %struct.rtx_def** %insn231, align 8, !dbg !4246
  %159 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4247
  %insns_to_split232 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %159, i32 0, i32 0, !dbg !4249
  %160 = load %struct.htab*, %struct.htab** %insns_to_split232, align 8, !dbg !4249
  %tobool233 = icmp ne %struct.htab* %160, null, !dbg !4247
  br i1 %tobool233, label %if.then234, label %if.end243, !dbg !4250

if.then234:                                       ; preds = %if.end230
  %161 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4251
  %insns_to_split235 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %161, i32 0, i32 0, !dbg !4253
  %162 = load %struct.htab*, %struct.htab** %insns_to_split235, align 8, !dbg !4253
  %163 = bitcast %struct.iv_to_split* %ivts_templ to i8*, !dbg !4254
  %call236 = call i8* @htab_find(%struct.htab* %162, i8* %163), !dbg !4255
  %164 = bitcast i8* %call236 to %struct.iv_to_split*, !dbg !4256
  store %struct.iv_to_split* %164, %struct.iv_to_split** %ivts, align 8, !dbg !4257
  %165 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4258
  %tobool237 = icmp ne %struct.iv_to_split* %165, null, !dbg !4258
  br i1 %tobool237, label %if.then238, label %if.end242, !dbg !4260

if.then238:                                       ; preds = %if.then234
  %166 = load i32, i32* %delta, align 4, !dbg !4261
  %tobool239 = icmp ne i32 %166, 0, !dbg !4261
  br i1 %tobool239, label %if.end241, label %if.then240, !dbg !4264

if.then240:                                       ; preds = %if.then238
  %167 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4265
  %168 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4266
  call void @insert_base_initialization(%struct.iv_to_split* %167, %struct.rtx_def* %168), !dbg !4267
  br label %if.end241, !dbg !4267

if.end241:                                        ; preds = %if.then240, %if.then238
  %169 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4268
  %170 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn, align 8, !dbg !4269
  %171 = load i32, i32* %delta, align 4, !dbg !4270
  call void @split_iv(%struct.iv_to_split* %169, %struct.rtx_def* %170, i32 %171), !dbg !4271
  br label %for.inc244, !dbg !4272

if.end242:                                        ; preds = %if.then234
  br label %if.end243, !dbg !4273

if.end243:                                        ; preds = %if.end242, %if.end230
  br label %for.inc244, !dbg !4274

for.inc244:                                       ; preds = %if.end243, %if.end241, %if.then229
  %172 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4275
  store %struct.rtx_def* %172, %struct.rtx_def** %orig_insn, align 8, !dbg !4276
  br label %for.cond195, !dbg !4277, !llvm.loop !4278

for.end245:                                       ; preds = %for.cond195
  br label %for.inc246, !dbg !4280

for.inc246:                                       ; preds = %for.end245, %if.then189
  %173 = load i32, i32* %i, align 4, !dbg !4281
  %inc247 = add i32 %173, 1, !dbg !4281
  store i32 %inc247, i32* %i, align 4, !dbg !4281
  br label %for.cond165, !dbg !4282, !llvm.loop !4283

for.end248:                                       ; preds = %if.then145, %for.cond165
  ret void, !dbg !4285
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_opt_info(%struct.opt_info* %opt_info) #0 !dbg !4286 {
entry:
  %opt_info.addr = alloca %struct.opt_info*, align 8
  %ves = alloca %struct.var_to_expand*, align 8
  store %struct.opt_info* %opt_info, %struct.opt_info** %opt_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.opt_info** %opt_info.addr, metadata !4287, metadata !DIExpression()), !dbg !4288
  %0 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4289
  %insns_to_split = getelementptr inbounds %struct.opt_info, %struct.opt_info* %0, i32 0, i32 0, !dbg !4291
  %1 = load %struct.htab*, %struct.htab** %insns_to_split, align 8, !dbg !4291
  %tobool = icmp ne %struct.htab* %1, null, !dbg !4289
  br i1 %tobool, label %if.then, label %if.end, !dbg !4292

if.then:                                          ; preds = %entry
  %2 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4293
  %insns_to_split1 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %2, i32 0, i32 0, !dbg !4294
  %3 = load %struct.htab*, %struct.htab** %insns_to_split1, align 8, !dbg !4294
  call void @htab_delete(%struct.htab* %3), !dbg !4295
  br label %if.end, !dbg !4295

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4296
  %insns_with_var_to_expand = getelementptr inbounds %struct.opt_info, %struct.opt_info* %4, i32 0, i32 3, !dbg !4298
  %5 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand, align 8, !dbg !4298
  %tobool2 = icmp ne %struct.htab* %5, null, !dbg !4296
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !4299

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ves, metadata !4300, metadata !DIExpression()), !dbg !4302
  %6 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4303
  %var_to_expand_head = getelementptr inbounds %struct.opt_info, %struct.opt_info* %6, i32 0, i32 4, !dbg !4305
  %7 = load %struct.var_to_expand*, %struct.var_to_expand** %var_to_expand_head, align 8, !dbg !4305
  store %struct.var_to_expand* %7, %struct.var_to_expand** %ves, align 8, !dbg !4306
  br label %for.cond, !dbg !4307

for.cond:                                         ; preds = %for.inc, %if.then3
  %8 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4308
  %tobool4 = icmp ne %struct.var_to_expand* %8, null, !dbg !4310
  br i1 %tobool4, label %for.body, label %for.end, !dbg !4310

for.body:                                         ; preds = %for.cond
  %9 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4311
  %var_expansions = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %9, i32 0, i32 2, !dbg !4311
  call void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %var_expansions), !dbg !4311
  br label %for.inc, !dbg !4311

for.inc:                                          ; preds = %for.body
  %10 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4312
  %next = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %10, i32 0, i32 3, !dbg !4313
  %11 = load %struct.var_to_expand*, %struct.var_to_expand** %next, align 8, !dbg !4313
  store %struct.var_to_expand* %11, %struct.var_to_expand** %ves, align 8, !dbg !4314
  br label %for.cond, !dbg !4315, !llvm.loop !4316

for.end:                                          ; preds = %for.cond
  %12 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4318
  %insns_with_var_to_expand5 = getelementptr inbounds %struct.opt_info, %struct.opt_info* %12, i32 0, i32 3, !dbg !4319
  %13 = load %struct.htab*, %struct.htab** %insns_with_var_to_expand5, align 8, !dbg !4319
  call void @htab_delete(%struct.htab* %13), !dbg !4320
  br label %if.end6, !dbg !4321

if.end6:                                          ; preds = %for.end, %if.end
  %14 = load %struct.opt_info*, %struct.opt_info** %opt_info.addr, align 8, !dbg !4322
  %15 = bitcast %struct.opt_info* %14 to i8*, !dbg !4322
  call void @free(i8* %15), !dbg !4323
  ret void, !dbg !4324
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !4325 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4331, metadata !DIExpression()), !dbg !4332
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4333, metadata !DIExpression()), !dbg !4332
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !4334, metadata !DIExpression()), !dbg !4332
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4335
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4335
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4335

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4335
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4335
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4335
  %3 = load i32, i32* %num, align 8, !dbg !4335
  %cmp = icmp ult i32 %1, %3, !dbg !4335
  br i1 %cmp, label %if.then, label %if.else, !dbg !4332

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4337
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !4337
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4337
  %idxprom = zext i32 %5 to i64, !dbg !4337
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4337
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4337
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !4337
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !4337
  store i32 1, i32* %retval, align 4, !dbg !4337
  br label %return, !dbg !4337

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !4339
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !4339
  store i32 0, i32* %retval, align 4, !dbg !4339
  br label %return, !dbg !4339

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4332
  ret i32 %9, !dbg !4332
}

declare dso_local zeroext i8 @remove_path(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !4341 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !4345, metadata !DIExpression()), !dbg !4346
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4347
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !4347
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !4347
  br i1 %tobool, label %if.then, label %if.end, !dbg !4346

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4347
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !4347
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !4347
  call void @free(i8* %4), !dbg !4347
  br label %if.end, !dbg !4347

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4346
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !4346
  ret void, !dbg !4346
}

declare dso_local void @free_simple_loop_desc(%struct.loop*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

declare dso_local void @iv_analysis_loop_init(%struct.loop*) #2

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @si_info_hash(i8* %ivts) #0 !dbg !4349 {
entry:
  %ivts.addr = alloca i8*, align 8
  store i8* %ivts, i8** %ivts.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ivts.addr, metadata !4350, metadata !DIExpression()), !dbg !4351
  %0 = load i8*, i8** %ivts.addr, align 8, !dbg !4352
  %1 = bitcast i8* %0 to %struct.iv_to_split*, !dbg !4352
  %insn = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %1, i32 0, i32 0, !dbg !4352
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4352
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4352
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4352
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4352
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4352
  %3 = load i32, i32* %rt_int, align 8, !dbg !4352
  ret i32 %3, !dbg !4353
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @si_info_eq(i8* %ivts1, i8* %ivts2) #0 !dbg !4354 {
entry:
  %ivts1.addr = alloca i8*, align 8
  %ivts2.addr = alloca i8*, align 8
  %i1 = alloca %struct.iv_to_split*, align 8
  %i2 = alloca %struct.iv_to_split*, align 8
  store i8* %ivts1, i8** %ivts1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ivts1.addr, metadata !4355, metadata !DIExpression()), !dbg !4356
  store i8* %ivts2, i8** %ivts2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ivts2.addr, metadata !4357, metadata !DIExpression()), !dbg !4358
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %i1, metadata !4359, metadata !DIExpression()), !dbg !4361
  %0 = load i8*, i8** %ivts1.addr, align 8, !dbg !4362
  %1 = bitcast i8* %0 to %struct.iv_to_split*, !dbg !4363
  store %struct.iv_to_split* %1, %struct.iv_to_split** %i1, align 8, !dbg !4361
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %i2, metadata !4364, metadata !DIExpression()), !dbg !4365
  %2 = load i8*, i8** %ivts2.addr, align 8, !dbg !4366
  %3 = bitcast i8* %2 to %struct.iv_to_split*, !dbg !4367
  store %struct.iv_to_split* %3, %struct.iv_to_split** %i2, align 8, !dbg !4365
  %4 = load %struct.iv_to_split*, %struct.iv_to_split** %i1, align 8, !dbg !4368
  %insn = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %4, i32 0, i32 0, !dbg !4369
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4369
  %6 = load %struct.iv_to_split*, %struct.iv_to_split** %i2, align 8, !dbg !4370
  %insn1 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %6, i32 0, i32 0, !dbg !4371
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !4371
  %cmp = icmp eq %struct.rtx_def* %5, %7, !dbg !4372
  %conv = zext i1 %cmp to i32, !dbg !4372
  ret i32 %conv, !dbg !4373
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4374 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4377, metadata !DIExpression()), !dbg !4378
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4378
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4378
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4378

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4378
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4378
  %2 = load i32, i32* %num, align 8, !dbg !4378
  br label %cond.end, !dbg !4378

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4378

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4378
  ret i32 %cond, !dbg !4378
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4379 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4382, metadata !DIExpression()), !dbg !4383
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4384, metadata !DIExpression()), !dbg !4383
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4383
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4383
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4383

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4383
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4383
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4383
  %3 = load i32, i32* %num, align 8, !dbg !4383
  %cmp = icmp ult i32 %1, %3, !dbg !4383
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4385
  %land.ext = zext i1 %4 to i32, !dbg !4383
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4383
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4383
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4383
  %idxprom = zext i32 %6 to i64, !dbg !4383
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4383
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4383
  ret %struct.edge_def* %7, !dbg !4383
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ve_info_hash(i8* %ves) #0 !dbg !4386 {
entry:
  %ves.addr = alloca i8*, align 8
  store i8* %ves, i8** %ves.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ves.addr, metadata !4387, metadata !DIExpression()), !dbg !4388
  %0 = load i8*, i8** %ves.addr, align 8, !dbg !4389
  %1 = bitcast i8* %0 to %struct.var_to_expand*, !dbg !4389
  %insn = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %1, i32 0, i32 0, !dbg !4389
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4389
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4389
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4389
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4389
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4389
  %3 = load i32, i32* %rt_int, align 8, !dbg !4389
  ret i32 %3, !dbg !4390
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ve_info_eq(i8* %ivts1, i8* %ivts2) #0 !dbg !4391 {
entry:
  %ivts1.addr = alloca i8*, align 8
  %ivts2.addr = alloca i8*, align 8
  %i1 = alloca %struct.var_to_expand*, align 8
  %i2 = alloca %struct.var_to_expand*, align 8
  store i8* %ivts1, i8** %ivts1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ivts1.addr, metadata !4392, metadata !DIExpression()), !dbg !4393
  store i8* %ivts2, i8** %ivts2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ivts2.addr, metadata !4394, metadata !DIExpression()), !dbg !4395
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %i1, metadata !4396, metadata !DIExpression()), !dbg !4398
  %0 = load i8*, i8** %ivts1.addr, align 8, !dbg !4399
  %1 = bitcast i8* %0 to %struct.var_to_expand*, !dbg !4400
  store %struct.var_to_expand* %1, %struct.var_to_expand** %i1, align 8, !dbg !4398
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %i2, metadata !4401, metadata !DIExpression()), !dbg !4402
  %2 = load i8*, i8** %ivts2.addr, align 8, !dbg !4403
  %3 = bitcast i8* %2 to %struct.var_to_expand*, !dbg !4404
  store %struct.var_to_expand* %3, %struct.var_to_expand** %i2, align 8, !dbg !4402
  %4 = load %struct.var_to_expand*, %struct.var_to_expand** %i1, align 8, !dbg !4405
  %insn = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %4, i32 0, i32 0, !dbg !4406
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4406
  %6 = load %struct.var_to_expand*, %struct.var_to_expand** %i2, align 8, !dbg !4407
  %insn1 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %6, i32 0, i32 0, !dbg !4408
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !4408
  %cmp = icmp eq %struct.rtx_def* %5, %7, !dbg !4409
  %conv = zext i1 %cmp to i32, !dbg !4409
  ret i32 %conv, !dbg !4410
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_to_split* @analyze_iv_to_split_insn(%struct.rtx_def* %insn) #0 !dbg !4411 {
entry:
  %retval = alloca %struct.iv_to_split*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %iv = alloca %struct.rtx_iv, align 8
  %ivts = alloca %struct.iv_to_split*, align 8
  %ok = alloca i8, align 1
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4414, metadata !DIExpression()), !dbg !4415
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4416, metadata !DIExpression()), !dbg !4417
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4418, metadata !DIExpression()), !dbg !4419
  call void @llvm.dbg.declare(metadata %struct.rtx_iv* %iv, metadata !4420, metadata !DIExpression()), !dbg !4431
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts, metadata !4432, metadata !DIExpression()), !dbg !4433
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !4434, metadata !DIExpression()), !dbg !4435
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4436
  %bf.load = load i32, i32* %1, align 8, !dbg !4436
  %bf.clear = and i32 %bf.load, 65535, !dbg !4436
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4436
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4436

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4436
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4436
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4436
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4436
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4436

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4436
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4436
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4436
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4436
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4436

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4436
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4436
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4436
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4436
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !4436

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4436
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4436
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4436
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4436
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4436
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4436
  %bf.load12 = load i32, i32* %10, align 8, !dbg !4436
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4436
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4436
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4436

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4436
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4436
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4436
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4436
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4436
  br label %cond.end, !dbg !4436

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4436
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4436
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4436
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4436
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4436
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4436
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !4436
  br label %cond.end, !dbg !4436

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !4436
  br label %cond.end25, !dbg !4436

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !4436

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !4436
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !4437
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4438
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !4438
  br i1 %tobool, label %if.end, label %if.then, !dbg !4440

if.then:                                          ; preds = %cond.end25
  store %struct.iv_to_split* null, %struct.iv_to_split** %retval, align 8, !dbg !4441
  br label %return, !dbg !4441

if.end:                                           ; preds = %cond.end25
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4442
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4442
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4442
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4442
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4442
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4442
  store %struct.rtx_def* %18, %struct.rtx_def** %dest, align 8, !dbg !4443
  %19 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4444
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4444
  %bf.load31 = load i32, i32* %20, align 8, !dbg !4444
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !4444
  %cmp33 = icmp eq i32 %bf.clear32, 37, !dbg !4444
  br i1 %cmp33, label %if.end35, label %if.then34, !dbg !4446

if.then34:                                        ; preds = %if.end
  store %struct.iv_to_split* null, %struct.iv_to_split** %retval, align 8, !dbg !4447
  br label %return, !dbg !4447

if.end35:                                         ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4448
  %22 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4450
  %call36 = call zeroext i8 @biv_p(%struct.rtx_def* %21, %struct.rtx_def* %22), !dbg !4451
  %tobool37 = icmp ne i8 %call36, 0, !dbg !4451
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !4452

if.then38:                                        ; preds = %if.end35
  store %struct.iv_to_split* null, %struct.iv_to_split** %retval, align 8, !dbg !4453
  br label %return, !dbg !4453

if.end39:                                         ; preds = %if.end35
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4454
  %24 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4455
  %call40 = call zeroext i8 @iv_analyze_result(%struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_iv* %iv), !dbg !4456
  store i8 %call40, i8* %ok, align 1, !dbg !4457
  %25 = load i8, i8* %ok, align 1, !dbg !4458
  %tobool41 = icmp ne i8 %25, 0, !dbg !4458
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !4460

if.then42:                                        ; preds = %if.end39
  store %struct.iv_to_split* null, %struct.iv_to_split** %retval, align 8, !dbg !4461
  br label %return, !dbg !4461

if.end43:                                         ; preds = %if.end39
  %step = getelementptr inbounds %struct.rtx_iv, %struct.rtx_iv* %iv, i32 0, i32 1, !dbg !4462
  %26 = load %struct.rtx_def*, %struct.rtx_def** %step, align 8, !dbg !4462
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4464
  %cmp44 = icmp eq %struct.rtx_def* %26, %27, !dbg !4465
  br i1 %cmp44, label %if.then47, label %lor.lhs.false45, !dbg !4466

lor.lhs.false45:                                  ; preds = %if.end43
  %mode = getelementptr inbounds %struct.rtx_iv, %struct.rtx_iv* %iv, i32 0, i32 6, !dbg !4467
  %28 = load i32, i32* %mode, align 4, !dbg !4467
  %extend_mode = getelementptr inbounds %struct.rtx_iv, %struct.rtx_iv* %iv, i32 0, i32 5, !dbg !4468
  %29 = load i32, i32* %extend_mode, align 8, !dbg !4468
  %cmp46 = icmp ne i32 %28, %29, !dbg !4469
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !4470

if.then47:                                        ; preds = %lor.lhs.false45, %if.end43
  store %struct.iv_to_split* null, %struct.iv_to_split** %retval, align 8, !dbg !4471
  br label %return, !dbg !4471

if.end48:                                         ; preds = %lor.lhs.false45
  %call49 = call i8* @xmalloc(i64 48), !dbg !4472
  %30 = bitcast i8* %call49 to %struct.iv_to_split*, !dbg !4472
  store %struct.iv_to_split* %30, %struct.iv_to_split** %ivts, align 8, !dbg !4473
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4474
  %32 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4475
  %insn50 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %32, i32 0, i32 0, !dbg !4476
  store %struct.rtx_def* %31, %struct.rtx_def** %insn50, align 8, !dbg !4477
  %33 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4478
  %base_var = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %33, i32 0, i32 1, !dbg !4479
  store %struct.rtx_def* null, %struct.rtx_def** %base_var, align 8, !dbg !4480
  %step51 = getelementptr inbounds %struct.rtx_iv, %struct.rtx_iv* %iv, i32 0, i32 1, !dbg !4481
  %34 = load %struct.rtx_def*, %struct.rtx_def** %step51, align 8, !dbg !4481
  %35 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4482
  %step52 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %35, i32 0, i32 2, !dbg !4483
  store %struct.rtx_def* %34, %struct.rtx_def** %step52, align 8, !dbg !4484
  %36 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4485
  %next = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %36, i32 0, i32 3, !dbg !4486
  store %struct.iv_to_split* null, %struct.iv_to_split** %next, align 8, !dbg !4487
  %37 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4488
  %n_loc = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %37, i32 0, i32 4, !dbg !4489
  store i32 1, i32* %n_loc, align 8, !dbg !4490
  %38 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4491
  %loc = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %38, i32 0, i32 5, !dbg !4492
  %arrayidx53 = getelementptr inbounds [3 x i32], [3 x i32]* %loc, i64 0, i64 0, !dbg !4491
  store i32 1, i32* %arrayidx53, align 4, !dbg !4493
  %39 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts, align 8, !dbg !4494
  store %struct.iv_to_split* %39, %struct.iv_to_split** %retval, align 8, !dbg !4495
  br label %return, !dbg !4495

return:                                           ; preds = %if.end48, %if.then47, %if.then42, %if.then38, %if.then34, %if.then
  %40 = load %struct.iv_to_split*, %struct.iv_to_split** %retval, align 8, !dbg !4496
  ret %struct.iv_to_split* %40, !dbg !4496
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_to_expand* @analyze_insn_to_expand_var(%struct.loop* %loop, %struct.rtx_def* %insn) #0 !dbg !4497 {
entry:
  %retval = alloca %struct.var_to_expand*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %something = alloca %struct.rtx_def*, align 8
  %ves = alloca %struct.var_to_expand*, align 8
  %mode1 = alloca i32, align 4
  %mode2 = alloca i32, align 4
  %accum_pos = alloca i32, align 4
  %debug_uses = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4500, metadata !DIExpression()), !dbg !4501
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4502, metadata !DIExpression()), !dbg !4503
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4504, metadata !DIExpression()), !dbg !4505
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4506, metadata !DIExpression()), !dbg !4507
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !4508, metadata !DIExpression()), !dbg !4509
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !4510, metadata !DIExpression()), !dbg !4511
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op2, metadata !4512, metadata !DIExpression()), !dbg !4513
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %something, metadata !4514, metadata !DIExpression()), !dbg !4515
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ves, metadata !4516, metadata !DIExpression()), !dbg !4517
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !4518, metadata !DIExpression()), !dbg !4519
  call void @llvm.dbg.declare(metadata i32* %mode2, metadata !4520, metadata !DIExpression()), !dbg !4521
  call void @llvm.dbg.declare(metadata i32* %accum_pos, metadata !4522, metadata !DIExpression()), !dbg !4523
  call void @llvm.dbg.declare(metadata i32* %debug_uses, metadata !4524, metadata !DIExpression()), !dbg !4525
  store i32 0, i32* %debug_uses, align 4, !dbg !4525
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4526
  %bf.load = load i32, i32* %1, align 8, !dbg !4526
  %bf.clear = and i32 %bf.load, 65535, !dbg !4526
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4526
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4526

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4526
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4526
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4526
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4526
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4526

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4526
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4526
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4526
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4526
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4526

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4526
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4526
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4526
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4526
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !4526

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4526
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4526
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4526
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4526
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4526
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4526
  %bf.load12 = load i32, i32* %10, align 8, !dbg !4526
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4526
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4526
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4526

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4526
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4526
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4526
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4526
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4526
  br label %cond.end, !dbg !4526

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4526
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4526
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4526
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4526
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4526
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4526
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !4526
  br label %cond.end, !dbg !4526

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !4526
  br label %cond.end25, !dbg !4526

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !4526

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !4526
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !4527
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4528
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !4528
  br i1 %tobool, label %if.end, label %if.then, !dbg !4530

if.then:                                          ; preds = %cond.end25
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4531
  br label %return, !dbg !4531

if.end:                                           ; preds = %cond.end25
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4532
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4532
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4532
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4532
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4532
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4532
  store %struct.rtx_def* %18, %struct.rtx_def** %dest, align 8, !dbg !4533
  %19 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4534
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4534
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4534
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !4534
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4534
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4534
  store %struct.rtx_def* %20, %struct.rtx_def** %src, align 8, !dbg !4535
  %21 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4536
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !4536
  %bf.load35 = load i32, i32* %22, align 8, !dbg !4536
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !4536
  %cmp37 = icmp ne i32 %bf.clear36, 49, !dbg !4538
  br i1 %cmp37, label %land.lhs.true, label %if.end46, !dbg !4539

land.lhs.true:                                    ; preds = %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4540
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4540
  %bf.load38 = load i32, i32* %24, align 8, !dbg !4540
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !4540
  %cmp40 = icmp ne i32 %bf.clear39, 50, !dbg !4541
  br i1 %cmp40, label %land.lhs.true41, label %if.end46, !dbg !4542

land.lhs.true41:                                  ; preds = %land.lhs.true
  %25 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4543
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4543
  %bf.load42 = load i32, i32* %26, align 8, !dbg !4543
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !4543
  %cmp44 = icmp ne i32 %bf.clear43, 52, !dbg !4544
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !4545

if.then45:                                        ; preds = %land.lhs.true41
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4546
  br label %return, !dbg !4546

if.end46:                                         ; preds = %land.lhs.true41, %land.lhs.true, %if.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4547
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !4547
  %bf.load47 = load i32, i32* %28, align 8, !dbg !4547
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !4547
  %29 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4549
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !4549
  %bf.load49 = load i32, i32* %30, align 8, !dbg !4549
  %bf.lshr = lshr i32 %bf.load49, 16, !dbg !4549
  %bf.clear50 = and i32 %bf.lshr, 255, !dbg !4549
  %call51 = call i32 @have_insn_for(i32 %bf.clear48, i32 %bf.clear50), !dbg !4550
  %tobool52 = icmp ne i32 %call51, 0, !dbg !4550
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !4551

if.then53:                                        ; preds = %if.end46
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4552
  br label %return, !dbg !4552

if.end54:                                         ; preds = %if.end46
  %31 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4553
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !4553
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !4553
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !4553
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !4553
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !4553
  store %struct.rtx_def* %32, %struct.rtx_def** %op1, align 8, !dbg !4554
  %33 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4555
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4555
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !4555
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !4555
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !4555
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !4555
  store %struct.rtx_def* %34, %struct.rtx_def** %op2, align 8, !dbg !4556
  %35 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4557
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4557
  %bf.load63 = load i32, i32* %36, align 8, !dbg !4557
  %bf.clear64 = and i32 %bf.load63, 65535, !dbg !4557
  %cmp65 = icmp eq i32 %bf.clear64, 37, !dbg !4557
  br i1 %cmp65, label %if.end79, label %land.lhs.true66, !dbg !4559

land.lhs.true66:                                  ; preds = %if.end54
  %37 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4560
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !4560
  %bf.load67 = load i32, i32* %38, align 8, !dbg !4560
  %bf.clear68 = and i32 %bf.load67, 65535, !dbg !4560
  %cmp69 = icmp eq i32 %bf.clear68, 39, !dbg !4561
  br i1 %cmp69, label %land.lhs.true70, label %if.then78, !dbg !4562

land.lhs.true70:                                  ; preds = %land.lhs.true66
  %39 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4563
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4563
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !4563
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !4563
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !4563
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !4563
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !4563
  %bf.load75 = load i32, i32* %41, align 8, !dbg !4563
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !4563
  %cmp77 = icmp eq i32 %bf.clear76, 37, !dbg !4563
  br i1 %cmp77, label %if.end79, label %if.then78, !dbg !4564

if.then78:                                        ; preds = %land.lhs.true70, %land.lhs.true66
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4565
  br label %return, !dbg !4565

if.end79:                                         ; preds = %land.lhs.true70, %if.end54
  %42 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4566
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !4568
  %call80 = call i32 @rtx_equal_p(%struct.rtx_def* %42, %struct.rtx_def* %43), !dbg !4569
  %tobool81 = icmp ne i32 %call80, 0, !dbg !4569
  br i1 %tobool81, label %if.then82, label %if.else, !dbg !4570

if.then82:                                        ; preds = %if.end79
  store i32 0, i32* %accum_pos, align 4, !dbg !4571
  br label %if.end88, !dbg !4572

if.else:                                          ; preds = %if.end79
  %44 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4573
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8, !dbg !4575
  %call83 = call i32 @rtx_equal_p(%struct.rtx_def* %44, %struct.rtx_def* %45), !dbg !4576
  %tobool84 = icmp ne i32 %call83, 0, !dbg !4576
  br i1 %tobool84, label %if.then85, label %if.else86, !dbg !4577

if.then85:                                        ; preds = %if.else
  store i32 1, i32* %accum_pos, align 4, !dbg !4578
  br label %if.end87, !dbg !4579

if.else86:                                        ; preds = %if.else
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4580
  br label %return, !dbg !4580

if.end87:                                         ; preds = %if.then85
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.then82
  %46 = load i32, i32* %accum_pos, align 4, !dbg !4581
  %cmp89 = icmp eq i32 %46, 1, !dbg !4583
  br i1 %cmp89, label %land.lhs.true90, label %if.end95, !dbg !4584

land.lhs.true90:                                  ; preds = %if.end88
  %47 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4585
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !4585
  %bf.load91 = load i32, i32* %48, align 8, !dbg !4585
  %bf.clear92 = and i32 %bf.load91, 65535, !dbg !4585
  %cmp93 = icmp eq i32 %bf.clear92, 50, !dbg !4586
  br i1 %cmp93, label %if.then94, label %if.end95, !dbg !4587

if.then94:                                        ; preds = %land.lhs.true90
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4588
  br label %return, !dbg !4588

if.end95:                                         ; preds = %land.lhs.true90, %if.end88
  %49 = load i32, i32* %accum_pos, align 4, !dbg !4589
  %cmp96 = icmp eq i32 %49, 0, !dbg !4590
  br i1 %cmp96, label %cond.true97, label %cond.false98, !dbg !4591

cond.true97:                                      ; preds = %if.end95
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8, !dbg !4592
  br label %cond.end99, !dbg !4591

cond.false98:                                     ; preds = %if.end95
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !4593
  br label %cond.end99, !dbg !4591

cond.end99:                                       ; preds = %cond.false98, %cond.true97
  %cond100 = phi %struct.rtx_def* [ %50, %cond.true97 ], [ %51, %cond.false98 ], !dbg !4591
  store %struct.rtx_def* %cond100, %struct.rtx_def** %something, align 8, !dbg !4594
  %52 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4595
  %53 = load %struct.rtx_def*, %struct.rtx_def** %something, align 8, !dbg !4597
  %call101 = call i32 @rtx_referenced_p(%struct.rtx_def* %52, %struct.rtx_def* %53), !dbg !4598
  %tobool102 = icmp ne i32 %call101, 0, !dbg !4598
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !4599

if.then103:                                       ; preds = %cond.end99
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4600
  br label %return, !dbg !4600

if.end104:                                        ; preds = %cond.end99
  %54 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4601
  %55 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4603
  %call105 = call zeroext i8 @referenced_in_one_insn_in_loop_p(%struct.loop* %54, %struct.rtx_def* %55, i32* %debug_uses), !dbg !4604
  %tobool106 = icmp ne i8 %call105, 0, !dbg !4604
  br i1 %tobool106, label %if.end108, label %if.then107, !dbg !4605

if.then107:                                       ; preds = %if.end104
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4606
  br label %return, !dbg !4606

if.end108:                                        ; preds = %if.end104
  %56 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4607
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !4607
  %bf.load109 = load i32, i32* %57, align 8, !dbg !4607
  %bf.lshr110 = lshr i32 %bf.load109, 16, !dbg !4607
  %bf.clear111 = and i32 %bf.lshr110, 255, !dbg !4607
  store i32 %bf.clear111, i32* %mode1, align 4, !dbg !4608
  %58 = load %struct.rtx_def*, %struct.rtx_def** %something, align 8, !dbg !4609
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4609
  %bf.load112 = load i32, i32* %59, align 8, !dbg !4609
  %bf.lshr113 = lshr i32 %bf.load112, 16, !dbg !4609
  %bf.clear114 = and i32 %bf.lshr113, 255, !dbg !4609
  store i32 %bf.clear114, i32* %mode2, align 4, !dbg !4610
  %60 = load i32, i32* %mode1, align 4, !dbg !4611
  %idxprom = zext i32 %60 to i64, !dbg !4611
  %arrayidx115 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4611
  %61 = load i8, i8* %arrayidx115, align 1, !dbg !4611
  %conv = zext i8 %61 to i32, !dbg !4611
  %cmp116 = icmp eq i32 %conv, 8, !dbg !4611
  br i1 %cmp116, label %land.lhs.true160, label %lor.lhs.false118, !dbg !4611

lor.lhs.false118:                                 ; preds = %if.end108
  %62 = load i32, i32* %mode1, align 4, !dbg !4611
  %idxprom119 = zext i32 %62 to i64, !dbg !4611
  %arrayidx120 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom119, !dbg !4611
  %63 = load i8, i8* %arrayidx120, align 1, !dbg !4611
  %conv121 = zext i8 %63 to i32, !dbg !4611
  %cmp122 = icmp eq i32 %conv121, 9, !dbg !4611
  br i1 %cmp122, label %land.lhs.true160, label %lor.lhs.false124, !dbg !4611

lor.lhs.false124:                                 ; preds = %lor.lhs.false118
  %64 = load i32, i32* %mode1, align 4, !dbg !4611
  %idxprom125 = zext i32 %64 to i64, !dbg !4611
  %arrayidx126 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom125, !dbg !4611
  %65 = load i8, i8* %arrayidx126, align 1, !dbg !4611
  %conv127 = zext i8 %65 to i32, !dbg !4611
  %cmp128 = icmp eq i32 %conv127, 11, !dbg !4611
  br i1 %cmp128, label %land.lhs.true160, label %lor.lhs.false130, !dbg !4611

lor.lhs.false130:                                 ; preds = %lor.lhs.false124
  %66 = load i32, i32* %mode1, align 4, !dbg !4611
  %idxprom131 = zext i32 %66 to i64, !dbg !4611
  %arrayidx132 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom131, !dbg !4611
  %67 = load i8, i8* %arrayidx132, align 1, !dbg !4611
  %conv133 = zext i8 %67 to i32, !dbg !4611
  %cmp134 = icmp eq i32 %conv133, 17, !dbg !4611
  br i1 %cmp134, label %land.lhs.true160, label %lor.lhs.false136, !dbg !4613

lor.lhs.false136:                                 ; preds = %lor.lhs.false130
  %68 = load i32, i32* %mode2, align 4, !dbg !4614
  %idxprom137 = zext i32 %68 to i64, !dbg !4614
  %arrayidx138 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom137, !dbg !4614
  %69 = load i8, i8* %arrayidx138, align 1, !dbg !4614
  %conv139 = zext i8 %69 to i32, !dbg !4614
  %cmp140 = icmp eq i32 %conv139, 8, !dbg !4614
  br i1 %cmp140, label %land.lhs.true160, label %lor.lhs.false142, !dbg !4614

lor.lhs.false142:                                 ; preds = %lor.lhs.false136
  %70 = load i32, i32* %mode2, align 4, !dbg !4614
  %idxprom143 = zext i32 %70 to i64, !dbg !4614
  %arrayidx144 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom143, !dbg !4614
  %71 = load i8, i8* %arrayidx144, align 1, !dbg !4614
  %conv145 = zext i8 %71 to i32, !dbg !4614
  %cmp146 = icmp eq i32 %conv145, 9, !dbg !4614
  br i1 %cmp146, label %land.lhs.true160, label %lor.lhs.false148, !dbg !4614

lor.lhs.false148:                                 ; preds = %lor.lhs.false142
  %72 = load i32, i32* %mode2, align 4, !dbg !4614
  %idxprom149 = zext i32 %72 to i64, !dbg !4614
  %arrayidx150 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom149, !dbg !4614
  %73 = load i8, i8* %arrayidx150, align 1, !dbg !4614
  %conv151 = zext i8 %73 to i32, !dbg !4614
  %cmp152 = icmp eq i32 %conv151, 11, !dbg !4614
  br i1 %cmp152, label %land.lhs.true160, label %lor.lhs.false154, !dbg !4614

lor.lhs.false154:                                 ; preds = %lor.lhs.false148
  %74 = load i32, i32* %mode2, align 4, !dbg !4614
  %idxprom155 = zext i32 %74 to i64, !dbg !4614
  %arrayidx156 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom155, !dbg !4614
  %75 = load i8, i8* %arrayidx156, align 1, !dbg !4614
  %conv157 = zext i8 %75 to i32, !dbg !4614
  %cmp158 = icmp eq i32 %conv157, 17, !dbg !4614
  br i1 %cmp158, label %land.lhs.true160, label %if.end163, !dbg !4615

land.lhs.true160:                                 ; preds = %lor.lhs.false154, %lor.lhs.false148, %lor.lhs.false142, %lor.lhs.false136, %lor.lhs.false130, %lor.lhs.false124, %lor.lhs.false118, %if.end108
  %76 = load i32, i32* @flag_associative_math, align 4, !dbg !4616
  %tobool161 = icmp ne i32 %76, 0, !dbg !4616
  br i1 %tobool161, label %if.end163, label %if.then162, !dbg !4617

if.then162:                                       ; preds = %land.lhs.true160
  store %struct.var_to_expand* null, %struct.var_to_expand** %retval, align 8, !dbg !4618
  br label %return, !dbg !4618

if.end163:                                        ; preds = %land.lhs.true160, %lor.lhs.false154
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4619
  %tobool164 = icmp ne %struct._IO_FILE* %77, null, !dbg !4619
  br i1 %tobool164, label %if.then165, label %if.end168, !dbg !4621

if.then165:                                       ; preds = %if.end163
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4622
  %call166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.17, i64 0, i64 0)), !dbg !4624
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4625
  %80 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4626
  call void @print_rtl(%struct._IO_FILE* %79, %struct.rtx_def* %80), !dbg !4627
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4628
  %call167 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i64 0, i64 0)), !dbg !4629
  br label %if.end168, !dbg !4630

if.end168:                                        ; preds = %if.then165, %if.end163
  %82 = load i32, i32* %debug_uses, align 4, !dbg !4631
  %tobool169 = icmp ne i32 %82, 0, !dbg !4631
  br i1 %tobool169, label %if.then170, label %if.end171, !dbg !4633

if.then170:                                       ; preds = %if.end168
  %83 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4634
  %84 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4635
  %85 = load i32, i32* %debug_uses, align 4, !dbg !4636
  call void @reset_debug_uses_in_loop(%struct.loop* %83, %struct.rtx_def* %84, i32 %85), !dbg !4637
  br label %if.end171, !dbg !4637

if.end171:                                        ; preds = %if.then170, %if.end168
  %call172 = call i8* @xmalloc(i64 48), !dbg !4638
  %86 = bitcast i8* %call172 to %struct.var_to_expand*, !dbg !4638
  store %struct.var_to_expand* %86, %struct.var_to_expand** %ves, align 8, !dbg !4639
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4640
  %88 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4641
  %insn173 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %88, i32 0, i32 0, !dbg !4642
  store %struct.rtx_def* %87, %struct.rtx_def** %insn173, align 8, !dbg !4643
  %89 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4644
  %call174 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %89), !dbg !4645
  %90 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4646
  %reg = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %90, i32 0, i32 1, !dbg !4647
  store %struct.rtx_def* %call174, %struct.rtx_def** %reg, align 8, !dbg !4648
  %call175 = call %struct.VEC_rtx_heap* @VEC_rtx_heap_alloc(i32 1), !dbg !4649
  %91 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4650
  %var_expansions = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %91, i32 0, i32 2, !dbg !4651
  store %struct.VEC_rtx_heap* %call175, %struct.VEC_rtx_heap** %var_expansions, align 8, !dbg !4652
  %92 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4653
  %next = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %92, i32 0, i32 3, !dbg !4654
  store %struct.var_to_expand* null, %struct.var_to_expand** %next, align 8, !dbg !4655
  %93 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !4656
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !4656
  %bf.load176 = load i32, i32* %94, align 8, !dbg !4656
  %bf.clear177 = and i32 %bf.load176, 65535, !dbg !4656
  %95 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4657
  %op = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %95, i32 0, i32 4, !dbg !4658
  store i32 %bf.clear177, i32* %op, align 8, !dbg !4659
  %96 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4660
  %expansion_count = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %96, i32 0, i32 5, !dbg !4661
  store i32 0, i32* %expansion_count, align 4, !dbg !4662
  %97 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4663
  %reuse_expansion = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %97, i32 0, i32 6, !dbg !4664
  store i32 0, i32* %reuse_expansion, align 8, !dbg !4665
  %98 = load i32, i32* %accum_pos, align 4, !dbg !4666
  %99 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4667
  %accum_pos178 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %99, i32 0, i32 7, !dbg !4668
  store i32 %98, i32* %accum_pos178, align 4, !dbg !4669
  %100 = load %struct.var_to_expand*, %struct.var_to_expand** %ves, align 8, !dbg !4670
  store %struct.var_to_expand* %100, %struct.var_to_expand** %retval, align 8, !dbg !4671
  br label %return, !dbg !4671

return:                                           ; preds = %if.end171, %if.then162, %if.then107, %if.then103, %if.then94, %if.else86, %if.then78, %if.then53, %if.then45, %if.then
  %101 = load %struct.var_to_expand*, %struct.var_to_expand** %retval, align 8, !dbg !4672
  ret %struct.var_to_expand* %101, !dbg !4672
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @biv_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @iv_analyze_result(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_iv*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i32 @have_insn_for(i32, i32) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @rtx_referenced_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @referenced_in_one_insn_in_loop_p(%struct.loop* %loop, %struct.rtx_def* %reg, i32* %debug_uses) #0 !dbg !4673 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %debug_uses.addr = alloca i32*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %count_ref = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4676, metadata !DIExpression()), !dbg !4677
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !4678, metadata !DIExpression()), !dbg !4679
  store i32* %debug_uses, i32** %debug_uses.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %debug_uses.addr, metadata !4680, metadata !DIExpression()), !dbg !4681
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !4682, metadata !DIExpression()), !dbg !4683
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4684, metadata !DIExpression()), !dbg !4685
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4686, metadata !DIExpression()), !dbg !4687
  call void @llvm.dbg.declare(metadata i32* %count_ref, metadata !4688, metadata !DIExpression()), !dbg !4689
  store i32 0, i32* %count_ref, align 4, !dbg !4689
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4690, metadata !DIExpression()), !dbg !4691
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4692
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !4693
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %body, align 8, !dbg !4694
  store i32 0, i32* %i, align 4, !dbg !4695
  br label %for.cond, !dbg !4697

for.cond:                                         ; preds = %for.inc21, %entry
  %1 = load i32, i32* %i, align 4, !dbg !4698
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4700
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !4701
  %3 = load i32, i32* %num_nodes, align 4, !dbg !4701
  %cmp = icmp ult i32 %1, %3, !dbg !4702
  br i1 %cmp, label %for.body, label %for.end23, !dbg !4703

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4704
  %5 = load i32, i32* %i, align 4, !dbg !4706
  %idxprom = zext i32 %5 to i64, !dbg !4704
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !4704
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4704
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !4707
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4708
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !4708
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4708
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4708
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 0, !dbg !4708
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4708
  store %struct.rtx_def* %9, %struct.rtx_def** %insn, align 8, !dbg !4708
  br label %for.cond1, !dbg !4708

for.cond1:                                        ; preds = %for.inc, %for.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4710
  %tobool = icmp ne %struct.rtx_def* %10, null, !dbg !4710
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4710

land.rhs:                                         ; preds = %for.cond1
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4710
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4710
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !4710
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !4710
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !4710
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 1, !dbg !4710
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4710
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4710
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4710
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4710
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !4710
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4710
  %cmp5 = icmp ne %struct.rtx_def* %11, %15, !dbg !4710
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond1
  %16 = phi i1 [ false, %for.cond1 ], [ %cmp5, %land.rhs ], !dbg !4712
  br i1 %16, label %for.body6, label %for.end, !dbg !4708

for.body6:                                        ; preds = %land.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !4713
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4715
  %call7 = call i32 @rtx_referenced_p(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !4716
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4716
  br i1 %tobool8, label %if.else, label %if.then, !dbg !4717

if.then:                                          ; preds = %for.body6
  br label %for.inc, !dbg !4718

if.else:                                          ; preds = %for.body6
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4719
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4719
  %bf.load = load i32, i32* %20, align 8, !dbg !4719
  %bf.clear = and i32 %bf.load, 65535, !dbg !4719
  %cmp9 = icmp eq i32 %bf.clear, 7, !dbg !4719
  br i1 %cmp9, label %if.then10, label %if.else11, !dbg !4721

if.then10:                                        ; preds = %if.else
  %21 = load i32*, i32** %debug_uses.addr, align 8, !dbg !4722
  %22 = load i32, i32* %21, align 4, !dbg !4723
  %inc = add nsw i32 %22, 1, !dbg !4723
  store i32 %inc, i32* %21, align 4, !dbg !4723
  br label %if.end15, !dbg !4723

if.else11:                                        ; preds = %if.else
  %23 = load i32, i32* %count_ref, align 4, !dbg !4724
  %inc12 = add nsw i32 %23, 1, !dbg !4724
  store i32 %inc12, i32* %count_ref, align 4, !dbg !4724
  %cmp13 = icmp sgt i32 %inc12, 1, !dbg !4726
  br i1 %cmp13, label %if.then14, label %if.end, !dbg !4727

if.then14:                                        ; preds = %if.else11
  br label %for.end, !dbg !4728

if.end:                                           ; preds = %if.else11
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then10
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  br label %for.inc, !dbg !4729

for.inc:                                          ; preds = %if.end16, %if.then
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4710
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4710
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !4710
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 2, !dbg !4710
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !4710
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !4710
  store %struct.rtx_def* %25, %struct.rtx_def** %insn, align 8, !dbg !4710
  br label %for.cond1, !dbg !4710, !llvm.loop !4730

for.end:                                          ; preds = %if.then14, %land.end
  br label %for.inc21, !dbg !4732

for.inc21:                                        ; preds = %for.end
  %26 = load i32, i32* %i, align 4, !dbg !4733
  %inc22 = add i32 %26, 1, !dbg !4733
  store i32 %inc22, i32* %i, align 4, !dbg !4733
  br label %for.cond, !dbg !4734, !llvm.loop !4735

for.end23:                                        ; preds = %for.cond
  %27 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4737
  %28 = bitcast %struct.basic_block_def** %27 to i8*, !dbg !4737
  call void @free(i8* %28), !dbg !4738
  %29 = load i32, i32* %count_ref, align 4, !dbg !4739
  %cmp24 = icmp eq i32 %29, 1, !dbg !4740
  %conv = zext i1 %cmp24 to i32, !dbg !4740
  %conv25 = trunc i32 %conv to i8, !dbg !4741
  ret i8 %conv25, !dbg !4742
}

declare dso_local void @print_rtl(%struct._IO_FILE*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @reset_debug_uses_in_loop(%struct.loop* %loop, %struct.rtx_def* %reg, i32 %debug_uses) #0 !dbg !4743 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %debug_uses.addr = alloca i32, align 4
  %body = alloca %struct.basic_block_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4746, metadata !DIExpression()), !dbg !4747
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !4748, metadata !DIExpression()), !dbg !4749
  store i32 %debug_uses, i32* %debug_uses.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %debug_uses.addr, metadata !4750, metadata !DIExpression()), !dbg !4751
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !4752, metadata !DIExpression()), !dbg !4753
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4754, metadata !DIExpression()), !dbg !4755
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4756, metadata !DIExpression()), !dbg !4757
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4758, metadata !DIExpression()), !dbg !4759
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4760
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !4761
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %body, align 8, !dbg !4762
  store i32 0, i32* %i, align 4, !dbg !4763
  br label %for.cond, !dbg !4765

for.cond:                                         ; preds = %for.inc30, %entry
  %1 = load i32, i32* %debug_uses.addr, align 4, !dbg !4766
  %tobool = icmp ne i32 %1, 0, !dbg !4766
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4768

land.rhs:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !4769
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4770
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 6, !dbg !4771
  %4 = load i32, i32* %num_nodes, align 4, !dbg !4771
  %cmp = icmp ult i32 %2, %4, !dbg !4772
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !4773
  br i1 %5, label %for.body, label %for.end31, !dbg !4774

for.body:                                         ; preds = %land.end
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4775
  %7 = load i32, i32* %i, align 4, !dbg !4777
  %idxprom = zext i32 %7 to i64, !dbg !4775
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %6, i64 %idxprom, !dbg !4775
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4775
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !4778
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4779
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !4779
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4779
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4779
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 0, !dbg !4779
  %11 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4779
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !4779
  br label %for.cond1, !dbg !4779

for.cond1:                                        ; preds = %for.inc, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4781
  %tobool2 = icmp ne %struct.rtx_def* %12, null, !dbg !4781
  br i1 %tobool2, label %land.rhs3, label %land.end8, !dbg !4781

land.rhs3:                                        ; preds = %for.cond1
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4781
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4781
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !4781
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !4781
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !4781
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 1, !dbg !4781
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4781
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4781
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4781
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4781
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !4781
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4781
  %cmp7 = icmp ne %struct.rtx_def* %13, %17, !dbg !4781
  br label %land.end8

land.end8:                                        ; preds = %land.rhs3, %for.cond1
  %18 = phi i1 [ false, %for.cond1 ], [ %cmp7, %land.rhs3 ], !dbg !4783
  br i1 %18, label %for.body9, label %for.end, !dbg !4779

for.body9:                                        ; preds = %land.end8
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4784
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4784
  %bf.load = load i32, i32* %20, align 8, !dbg !4784
  %bf.clear = and i32 %bf.load, 65535, !dbg !4784
  %cmp10 = icmp eq i32 %bf.clear, 7, !dbg !4784
  br i1 %cmp10, label %lor.lhs.false, label %if.then, !dbg !4786

lor.lhs.false:                                    ; preds = %for.body9
  %21 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !4787
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4788
  %call11 = call i32 @rtx_referenced_p(%struct.rtx_def* %21, %struct.rtx_def* %22), !dbg !4789
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4789
  br i1 %tobool12, label %if.else, label %if.then, !dbg !4790

if.then:                                          ; preds = %lor.lhs.false, %for.body9
  br label %for.inc, !dbg !4791

if.else:                                          ; preds = %lor.lhs.false
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4792
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4794
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4794
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !4794
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 5, !dbg !4794
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !4794
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !4794
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4794
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !4794
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !4794
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !4794
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4795
  %call21 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %26), !dbg !4795
  %call22 = call zeroext i8 @validate_change(%struct.rtx_def* %23, %struct.rtx_def** %rt_rtx20, %struct.rtx_def* %call21, i8 zeroext 0), !dbg !4796
  %27 = load i32, i32* %debug_uses.addr, align 4, !dbg !4797
  %dec = add nsw i32 %27, -1, !dbg !4797
  store i32 %dec, i32* %debug_uses.addr, align 4, !dbg !4797
  %tobool23 = icmp ne i32 %dec, 0, !dbg !4797
  br i1 %tobool23, label %if.end, label %if.then24, !dbg !4799

if.then24:                                        ; preds = %if.else
  br label %for.end, !dbg !4800

if.end:                                           ; preds = %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end
  br label %for.inc, !dbg !4801

for.inc:                                          ; preds = %if.end25, %if.then
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4781
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4781
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !4781
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 2, !dbg !4781
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !4781
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !4781
  store %struct.rtx_def* %29, %struct.rtx_def** %insn, align 8, !dbg !4781
  br label %for.cond1, !dbg !4781, !llvm.loop !4802

for.end:                                          ; preds = %if.then24, %land.end8
  br label %for.inc30, !dbg !4804

for.inc30:                                        ; preds = %for.end
  %30 = load i32, i32* %i, align 4, !dbg !4805
  %inc = add i32 %30, 1, !dbg !4805
  store i32 %inc, i32* %i, align 4, !dbg !4805
  br label %for.cond, !dbg !4806, !llvm.loop !4807

for.end31:                                        ; preds = %land.end
  %31 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4809
  %32 = bitcast %struct.basic_block_def** %31 to i8*, !dbg !4809
  call void @free(i8* %32), !dbg !4810
  ret void, !dbg !4811
}

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_rtx_heap* @VEC_rtx_heap_alloc(i32 %alloc_) #0 !dbg !4812 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4815, metadata !DIExpression()), !dbg !4816
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4816
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4816
  %1 = bitcast i8* %call to %struct.VEC_rtx_heap*, !dbg !4816
  ret %struct.VEC_rtx_heap* %1, !dbg !4816
}

declare dso_local zeroext i8 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @allocate_basic_variable(%struct.iv_to_split* %ivts) #0 !dbg !4817 {
entry:
  %ivts.addr = alloca %struct.iv_to_split*, align 8
  %expr = alloca %struct.rtx_def*, align 8
  store %struct.iv_to_split* %ivts, %struct.iv_to_split** %ivts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts.addr, metadata !4820, metadata !DIExpression()), !dbg !4821
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr, metadata !4822, metadata !DIExpression()), !dbg !4823
  %0 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %0, i32 0, i32 0, !dbg !4824
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4824
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4824
  %bf.load = load i32, i32* %2, align 8, !dbg !4824
  %bf.clear = and i32 %bf.load, 65535, !dbg !4824
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4824
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4824

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn1 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %3, i32 0, i32 0, !dbg !4824
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !4824
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4824
  %bf.load2 = load i32, i32* %5, align 8, !dbg !4824
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !4824
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !4824
  br i1 %cmp4, label %cond.true, label %lor.lhs.false5, !dbg !4824

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %6 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn6 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %6, i32 0, i32 0, !dbg !4824
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn6, align 8, !dbg !4824
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4824
  %bf.load7 = load i32, i32* %8, align 8, !dbg !4824
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !4824
  %cmp9 = icmp eq i32 %bf.clear8, 9, !dbg !4824
  br i1 %cmp9, label %cond.true, label %lor.lhs.false10, !dbg !4824

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %9 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn11 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %9, i32 0, i32 0, !dbg !4824
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn11, align 8, !dbg !4824
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4824
  %bf.load12 = load i32, i32* %11, align 8, !dbg !4824
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4824
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !4824
  br i1 %cmp14, label %cond.true, label %cond.false31, !dbg !4824

cond.true:                                        ; preds = %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  %12 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn15 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %12, i32 0, i32 0, !dbg !4824
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn15, align 8, !dbg !4824
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4824
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4824
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4824
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4824
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4824
  %bf.load16 = load i32, i32* %15, align 8, !dbg !4824
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !4824
  %cmp18 = icmp eq i32 %bf.clear17, 23, !dbg !4824
  br i1 %cmp18, label %cond.true19, label %cond.false, !dbg !4824

cond.true19:                                      ; preds = %cond.true
  %16 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn20 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %16, i32 0, i32 0, !dbg !4824
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn20, align 8, !dbg !4824
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4824
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 5, !dbg !4824
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !4824
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !4824
  br label %cond.end, !dbg !4824

cond.false:                                       ; preds = %cond.true
  %19 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn25 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %19, i32 0, i32 0, !dbg !4824
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn25, align 8, !dbg !4824
  %21 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4824
  %insn26 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %21, i32 0, i32 0, !dbg !4824
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn26, align 8, !dbg !4824
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4824
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 5, !dbg !4824
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4824
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4824
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %20, %struct.rtx_def* %23), !dbg !4824
  br label %cond.end, !dbg !4824

cond.end:                                         ; preds = %cond.false, %cond.true19
  %cond = phi %struct.rtx_def* [ %18, %cond.true19 ], [ %call, %cond.false ], !dbg !4824
  br label %cond.end32, !dbg !4824

cond.false31:                                     ; preds = %lor.lhs.false10
  br label %cond.end32, !dbg !4824

cond.end32:                                       ; preds = %cond.false31, %cond.end
  %cond33 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false31 ], !dbg !4824
  %24 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4825
  %call34 = call %struct.rtx_def** @get_ivts_expr(%struct.rtx_def* %cond33, %struct.iv_to_split* %24), !dbg !4826
  %25 = load %struct.rtx_def*, %struct.rtx_def** %call34, align 8, !dbg !4827
  store %struct.rtx_def* %25, %struct.rtx_def** %expr, align 8, !dbg !4823
  %26 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4828
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !4828
  %bf.load35 = load i32, i32* %27, align 8, !dbg !4828
  %bf.lshr = lshr i32 %bf.load35, 16, !dbg !4828
  %bf.clear36 = and i32 %bf.lshr, 255, !dbg !4828
  %call37 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear36), !dbg !4829
  %28 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4830
  %base_var = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %28, i32 0, i32 1, !dbg !4831
  store %struct.rtx_def* %call37, %struct.rtx_def** %base_var, align 8, !dbg !4832
  ret void, !dbg !4833
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !4834 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4839, metadata !DIExpression()), !dbg !4840
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4841, metadata !DIExpression()), !dbg !4840
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4840
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4840
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4840

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4840
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4840
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !4840
  %3 = load i32, i32* %num, align 8, !dbg !4840
  %cmp = icmp ult i32 %1, %3, !dbg !4840
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4842
  %land.ext = zext i1 %4 to i32, !dbg !4840
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4840
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !4840
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4840
  %idxprom = zext i32 %6 to i64, !dbg !4840
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4840
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4840
  ret %struct.basic_block_def* %7, !dbg !4840
}

declare dso_local %struct.basic_block_def* @get_bb_original(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @determine_split_iv_delta(i32 %n_copy, i32 %n_copies, i8 zeroext %unrolling) #0 !dbg !4843 {
entry:
  %retval = alloca i32, align 4
  %n_copy.addr = alloca i32, align 4
  %n_copies.addr = alloca i32, align 4
  %unrolling.addr = alloca i8, align 1
  store i32 %n_copy, i32* %n_copy.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_copy.addr, metadata !4846, metadata !DIExpression()), !dbg !4847
  store i32 %n_copies, i32* %n_copies.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_copies.addr, metadata !4848, metadata !DIExpression()), !dbg !4849
  store i8 %unrolling, i8* %unrolling.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unrolling.addr, metadata !4850, metadata !DIExpression()), !dbg !4851
  %0 = load i8, i8* %unrolling.addr, align 1, !dbg !4852
  %tobool = icmp ne i8 %0, 0, !dbg !4852
  br i1 %tobool, label %if.then, label %if.else, !dbg !4854

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %n_copy.addr, align 4, !dbg !4855
  store i32 %1, i32* %retval, align 4, !dbg !4857
  br label %return, !dbg !4857

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %n_copy.addr, align 4, !dbg !4858
  %tobool1 = icmp ne i32 %2, 0, !dbg !4858
  br i1 %tobool1, label %if.then2, label %if.else3, !dbg !4861

if.then2:                                         ; preds = %if.else
  %3 = load i32, i32* %n_copy.addr, align 4, !dbg !4862
  %sub = sub i32 %3, 1, !dbg !4863
  store i32 %sub, i32* %retval, align 4, !dbg !4864
  br label %return, !dbg !4864

if.else3:                                         ; preds = %if.else
  %4 = load i32, i32* %n_copies.addr, align 4, !dbg !4865
  store i32 %4, i32* %retval, align 4, !dbg !4866
  br label %return, !dbg !4866

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !4867
  ret i32 %5, !dbg !4867
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_base_initialization(%struct.iv_to_split* %ivts, %struct.rtx_def* %insn) #0 !dbg !4868 {
entry:
  %ivts.addr = alloca %struct.iv_to_split*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %expr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.iv_to_split* %ivts, %struct.iv_to_split** %ivts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts.addr, metadata !4871, metadata !DIExpression()), !dbg !4872
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4873, metadata !DIExpression()), !dbg !4874
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr, metadata !4875, metadata !DIExpression()), !dbg !4876
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4877
  %bf.load = load i32, i32* %1, align 8, !dbg !4877
  %bf.clear = and i32 %bf.load, 65535, !dbg !4877
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4877
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4877

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4877
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4877
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4877
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4877
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4877

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4877
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4877
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4877
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4877
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4877

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4877
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4877
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4877
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4877
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !4877

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4877
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4877
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4877
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4877
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4877
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4877
  %bf.load12 = load i32, i32* %10, align 8, !dbg !4877
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4877
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4877
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4877

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4877
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4877
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4877
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4877
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4877
  br label %cond.end, !dbg !4877

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4877
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4877
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4877
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4877
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4877
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4877
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !4877
  br label %cond.end, !dbg !4877

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !4877
  br label %cond.end25, !dbg !4877

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !4877

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !4877
  %16 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4878
  %call27 = call %struct.rtx_def** @get_ivts_expr(%struct.rtx_def* %cond26, %struct.iv_to_split* %16), !dbg !4879
  %17 = load %struct.rtx_def*, %struct.rtx_def** %call27, align 8, !dbg !4880
  %call28 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %17), !dbg !4881
  store %struct.rtx_def* %call28, %struct.rtx_def** %expr, align 8, !dbg !4876
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !4882, metadata !DIExpression()), !dbg !4883
  call void @start_sequence(), !dbg !4884
  %18 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4885
  %19 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4886
  %base_var = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %19, i32 0, i32 1, !dbg !4887
  %20 = load %struct.rtx_def*, %struct.rtx_def** %base_var, align 8, !dbg !4887
  %call29 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %18, %struct.rtx_def* %20), !dbg !4888
  store %struct.rtx_def* %call29, %struct.rtx_def** %expr, align 8, !dbg !4889
  %21 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4890
  %22 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4892
  %base_var30 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %22, i32 0, i32 1, !dbg !4893
  %23 = load %struct.rtx_def*, %struct.rtx_def** %base_var30, align 8, !dbg !4893
  %cmp31 = icmp ne %struct.rtx_def* %21, %23, !dbg !4894
  br i1 %cmp31, label %if.then, label %if.end, !dbg !4895

if.then:                                          ; preds = %cond.end25
  %24 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4896
  %base_var32 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %24, i32 0, i32 1, !dbg !4897
  %25 = load %struct.rtx_def*, %struct.rtx_def** %base_var32, align 8, !dbg !4897
  %26 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4898
  %call33 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %25, %struct.rtx_def* %26), !dbg !4899
  br label %if.end, !dbg !4899

if.end:                                           ; preds = %if.then, %cond.end25
  %call34 = call %struct.rtx_def* @get_insns(), !dbg !4900
  store %struct.rtx_def* %call34, %struct.rtx_def** %seq, align 8, !dbg !4901
  call void @end_sequence(), !dbg !4902
  %27 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4903
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4904
  %call35 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %27, %struct.rtx_def* %28), !dbg !4905
  ret void, !dbg !4906
}

; Function Attrs: noinline nounwind uwtable
define internal void @split_iv(%struct.iv_to_split* %ivts, %struct.rtx_def* %insn, i32 %delta) #0 !dbg !4907 {
entry:
  %ivts.addr = alloca %struct.iv_to_split*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %delta.addr = alloca i32, align 4
  %expr = alloca %struct.rtx_def*, align 8
  %loc = alloca %struct.rtx_def**, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %incr = alloca %struct.rtx_def*, align 8
  %var = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  store %struct.iv_to_split* %ivts, %struct.iv_to_split** %ivts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts.addr, metadata !4910, metadata !DIExpression()), !dbg !4911
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4912, metadata !DIExpression()), !dbg !4913
  store i32 %delta, i32* %delta.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %delta.addr, metadata !4914, metadata !DIExpression()), !dbg !4915
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr, metadata !4916, metadata !DIExpression()), !dbg !4917
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %loc, metadata !4918, metadata !DIExpression()), !dbg !4920
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !4921, metadata !DIExpression()), !dbg !4922
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %incr, metadata !4923, metadata !DIExpression()), !dbg !4924
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %var, metadata !4925, metadata !DIExpression()), !dbg !4926
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4927, metadata !DIExpression()), !dbg !4928
  %0 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4929
  %base_var = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %0, i32 0, i32 1, !dbg !4929
  %1 = load %struct.rtx_def*, %struct.rtx_def** %base_var, align 8, !dbg !4929
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4929
  %bf.load = load i32, i32* %2, align 8, !dbg !4929
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4929
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4929
  store i32 %bf.clear, i32* %mode, align 4, !dbg !4928
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !4930, metadata !DIExpression()), !dbg !4931
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4932, metadata !DIExpression()), !dbg !4933
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4934, metadata !DIExpression()), !dbg !4935
  %3 = load i32, i32* %delta.addr, align 4, !dbg !4936
  %tobool = icmp ne i32 %3, 0, !dbg !4936
  br i1 %tobool, label %if.else, label %if.then, !dbg !4938

if.then:                                          ; preds = %entry
  %4 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4939
  %base_var1 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %4, i32 0, i32 1, !dbg !4940
  %5 = load %struct.rtx_def*, %struct.rtx_def** %base_var1, align 8, !dbg !4940
  store %struct.rtx_def* %5, %struct.rtx_def** %expr, align 8, !dbg !4941
  br label %if.end, !dbg !4942

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %mode, align 4, !dbg !4943
  %7 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4945
  %step = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %7, i32 0, i32 2, !dbg !4946
  %8 = load %struct.rtx_def*, %struct.rtx_def** %step, align 8, !dbg !4946
  %9 = load i32, i32* %delta.addr, align 4, !dbg !4947
  %conv = zext i32 %9 to i64, !dbg !4947
  %10 = load i32, i32* %mode, align 4, !dbg !4948
  %call = call %struct.rtx_def* @gen_int_mode(i64 %conv, i32 %10), !dbg !4949
  %call2 = call %struct.rtx_def* @simplify_gen_binary(i32 52, i32 %6, %struct.rtx_def* %8, %struct.rtx_def* %call), !dbg !4950
  store %struct.rtx_def* %call2, %struct.rtx_def** %incr, align 8, !dbg !4951
  %11 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4952
  %base_var3 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %11, i32 0, i32 1, !dbg !4952
  %12 = load %struct.rtx_def*, %struct.rtx_def** %base_var3, align 8, !dbg !4952
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4952
  %bf.load4 = load i32, i32* %13, align 8, !dbg !4952
  %bf.lshr5 = lshr i32 %bf.load4, 16, !dbg !4952
  %bf.clear6 = and i32 %bf.lshr5, 255, !dbg !4952
  %14 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4953
  %base_var7 = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %14, i32 0, i32 1, !dbg !4954
  %15 = load %struct.rtx_def*, %struct.rtx_def** %base_var7, align 8, !dbg !4954
  %16 = load %struct.rtx_def*, %struct.rtx_def** %incr, align 8, !dbg !4955
  %call8 = call %struct.rtx_def* @simplify_gen_binary(i32 49, i32 %bf.clear6, %struct.rtx_def* %15, %struct.rtx_def* %16), !dbg !4956
  store %struct.rtx_def* %call8, %struct.rtx_def** %expr, align 8, !dbg !4957
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !4958
  %bf.load9 = load i32, i32* %18, align 8, !dbg !4958
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4958
  %cmp = icmp eq i32 %bf.clear10, 8, !dbg !4958
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4958

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4958
  %bf.load12 = load i32, i32* %20, align 8, !dbg !4958
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4958
  %cmp14 = icmp eq i32 %bf.clear13, 7, !dbg !4958
  br i1 %cmp14, label %cond.true, label %lor.lhs.false16, !dbg !4958

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !4958
  %bf.load17 = load i32, i32* %22, align 8, !dbg !4958
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !4958
  %cmp19 = icmp eq i32 %bf.clear18, 9, !dbg !4958
  br i1 %cmp19, label %cond.true, label %lor.lhs.false21, !dbg !4958

lor.lhs.false21:                                  ; preds = %lor.lhs.false16
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4958
  %bf.load22 = load i32, i32* %24, align 8, !dbg !4958
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !4958
  %cmp24 = icmp eq i32 %bf.clear23, 10, !dbg !4958
  br i1 %cmp24, label %cond.true, label %cond.false40, !dbg !4958

cond.true:                                        ; preds = %lor.lhs.false21, %lor.lhs.false16, %lor.lhs.false, %if.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4958
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4958
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4958
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4958
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4958
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !4958
  %bf.load26 = load i32, i32* %27, align 8, !dbg !4958
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !4958
  %cmp28 = icmp eq i32 %bf.clear27, 23, !dbg !4958
  br i1 %cmp28, label %cond.true30, label %cond.false, !dbg !4958

cond.true30:                                      ; preds = %cond.true
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4958
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4958
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 5, !dbg !4958
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4958
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4958
  br label %cond.end, !dbg !4958

cond.false:                                       ; preds = %cond.true
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4958
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !4958
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !4958
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 5, !dbg !4958
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !4958
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !4958
  %call39 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %30, %struct.rtx_def* %32), !dbg !4958
  br label %cond.end, !dbg !4958

cond.end:                                         ; preds = %cond.false, %cond.true30
  %cond = phi %struct.rtx_def* [ %29, %cond.true30 ], [ %call39, %cond.false ], !dbg !4958
  br label %cond.end41, !dbg !4958

cond.false40:                                     ; preds = %lor.lhs.false21
  br label %cond.end41, !dbg !4958

cond.end41:                                       ; preds = %cond.false40, %cond.end
  %cond42 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false40 ], !dbg !4958
  %33 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !4959
  %call43 = call %struct.rtx_def** @get_ivts_expr(%struct.rtx_def* %cond42, %struct.iv_to_split* %33), !dbg !4960
  store %struct.rtx_def** %call43, %struct.rtx_def*** %loc, align 8, !dbg !4961
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4962
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8, !dbg !4964
  %36 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4965
  %call44 = call zeroext i8 @validate_change(%struct.rtx_def* %34, %struct.rtx_def** %35, %struct.rtx_def* %36, i8 zeroext 0), !dbg !4966
  %tobool45 = icmp ne i8 %call44, 0, !dbg !4966
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !4967

if.then46:                                        ; preds = %cond.end41
  br label %return, !dbg !4968

if.end47:                                         ; preds = %cond.end41
  call void @start_sequence(), !dbg !4969
  %37 = load i32, i32* %mode, align 4, !dbg !4970
  %call48 = call %struct.rtx_def* @gen_reg_rtx(i32 %37), !dbg !4971
  store %struct.rtx_def* %call48, %struct.rtx_def** %var, align 8, !dbg !4972
  %38 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4973
  %39 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !4974
  %call49 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %38, %struct.rtx_def* %39), !dbg !4975
  store %struct.rtx_def* %call49, %struct.rtx_def** %expr, align 8, !dbg !4976
  %40 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4977
  %41 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !4979
  %cmp50 = icmp ne %struct.rtx_def* %40, %41, !dbg !4980
  br i1 %cmp50, label %if.then52, label %if.end54, !dbg !4981

if.then52:                                        ; preds = %if.end47
  %42 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !4982
  %43 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4983
  %call53 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %42, %struct.rtx_def* %43), !dbg !4984
  br label %if.end54, !dbg !4984

if.end54:                                         ; preds = %if.then52, %if.end47
  %call55 = call %struct.rtx_def* @get_insns(), !dbg !4985
  store %struct.rtx_def* %call55, %struct.rtx_def** %seq, align 8, !dbg !4986
  call void @end_sequence(), !dbg !4987
  %44 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4988
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4989
  %call56 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %44, %struct.rtx_def* %45), !dbg !4990
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4991
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8, !dbg !4993
  %48 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !4994
  %call57 = call zeroext i8 @validate_change(%struct.rtx_def* %46, %struct.rtx_def** %47, %struct.rtx_def* %48, i8 zeroext 0), !dbg !4995
  %tobool58 = icmp ne i8 %call57, 0, !dbg !4995
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !4996

if.then59:                                        ; preds = %if.end54
  br label %return, !dbg !4997

if.end60:                                         ; preds = %if.end54
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !4998
  %bf.load61 = load i32, i32* %50, align 8, !dbg !4998
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !4998
  %cmp63 = icmp eq i32 %bf.clear62, 8, !dbg !4998
  br i1 %cmp63, label %cond.true80, label %lor.lhs.false65, !dbg !4998

lor.lhs.false65:                                  ; preds = %if.end60
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !4998
  %bf.load66 = load i32, i32* %52, align 8, !dbg !4998
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !4998
  %cmp68 = icmp eq i32 %bf.clear67, 7, !dbg !4998
  br i1 %cmp68, label %cond.true80, label %lor.lhs.false70, !dbg !4998

lor.lhs.false70:                                  ; preds = %lor.lhs.false65
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !4998
  %bf.load71 = load i32, i32* %54, align 8, !dbg !4998
  %bf.clear72 = and i32 %bf.load71, 65535, !dbg !4998
  %cmp73 = icmp eq i32 %bf.clear72, 9, !dbg !4998
  br i1 %cmp73, label %cond.true80, label %lor.lhs.false75, !dbg !4998

lor.lhs.false75:                                  ; preds = %lor.lhs.false70
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !4998
  %bf.load76 = load i32, i32* %56, align 8, !dbg !4998
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !4998
  %cmp78 = icmp eq i32 %bf.clear77, 10, !dbg !4998
  br i1 %cmp78, label %cond.true80, label %cond.false102, !dbg !4998

cond.true80:                                      ; preds = %lor.lhs.false75, %lor.lhs.false70, %lor.lhs.false65, %if.end60
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !4998
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !4998
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 5, !dbg !4998
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !4998
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !4998
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4998
  %bf.load85 = load i32, i32* %59, align 8, !dbg !4998
  %bf.clear86 = and i32 %bf.load85, 65535, !dbg !4998
  %cmp87 = icmp eq i32 %bf.clear86, 23, !dbg !4998
  br i1 %cmp87, label %cond.true89, label %cond.false94, !dbg !4998

cond.true89:                                      ; preds = %cond.true80
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !4998
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !4998
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 5, !dbg !4998
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !4998
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx93, align 8, !dbg !4998
  br label %cond.end100, !dbg !4998

cond.false94:                                     ; preds = %cond.true80
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4998
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !4998
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !4998
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 5, !dbg !4998
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !4998
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !4998
  %call99 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %62, %struct.rtx_def* %64), !dbg !4998
  br label %cond.end100, !dbg !4998

cond.end100:                                      ; preds = %cond.false94, %cond.true89
  %cond101 = phi %struct.rtx_def* [ %61, %cond.true89 ], [ %call99, %cond.false94 ], !dbg !4998
  br label %cond.end103, !dbg !4998

cond.false102:                                    ; preds = %lor.lhs.false75
  br label %cond.end103, !dbg !4998

cond.end103:                                      ; preds = %cond.false102, %cond.end100
  %cond104 = phi %struct.rtx_def* [ %cond101, %cond.end100 ], [ null, %cond.false102 ], !dbg !4998
  store %struct.rtx_def* %cond104, %struct.rtx_def** %set, align 8, !dbg !4999
  %65 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5000
  %tobool105 = icmp ne %struct.rtx_def* %65, null, !dbg !5000
  br i1 %tobool105, label %cond.false107, label %cond.true106, !dbg !5000

cond.true106:                                     ; preds = %cond.end103
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2008, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5000
  br label %cond.end108, !dbg !5000

cond.false107:                                    ; preds = %cond.end103
  br label %cond.end108, !dbg !5000

cond.end108:                                      ; preds = %cond.false107, %cond.true106
  %cond109 = phi i32 [ 0, %cond.true106 ], [ 0, %cond.false107 ], !dbg !5000
  call void @start_sequence(), !dbg !5001
  %66 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !5002
  %67 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8, !dbg !5003
  store %struct.rtx_def* %66, %struct.rtx_def** %67, align 8, !dbg !5004
  %68 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5005
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5005
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !5005
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 1, !dbg !5005
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !5005
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !5005
  %call114 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %69), !dbg !5006
  store %struct.rtx_def* %call114, %struct.rtx_def** %src, align 8, !dbg !5007
  %70 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5008
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !5008
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !5008
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 0, !dbg !5008
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !5008
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !5008
  %call119 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %71), !dbg !5009
  store %struct.rtx_def* %call119, %struct.rtx_def** %dest, align 8, !dbg !5010
  %72 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5011
  %73 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5012
  %call120 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %72, %struct.rtx_def* %73), !dbg !5013
  store %struct.rtx_def* %call120, %struct.rtx_def** %src, align 8, !dbg !5014
  %74 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5015
  %75 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5017
  %cmp121 = icmp ne %struct.rtx_def* %74, %75, !dbg !5018
  br i1 %cmp121, label %if.then123, label %if.end125, !dbg !5019

if.then123:                                       ; preds = %cond.end108
  %76 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !5020
  %77 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !5021
  %call124 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %76, %struct.rtx_def* %77), !dbg !5022
  br label %if.end125, !dbg !5022

if.end125:                                        ; preds = %if.then123, %cond.end108
  %call126 = call %struct.rtx_def* @get_insns(), !dbg !5023
  store %struct.rtx_def* %call126, %struct.rtx_def** %seq, align 8, !dbg !5024
  call void @end_sequence(), !dbg !5025
  %78 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5026
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5027
  %call127 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %78, %struct.rtx_def* %79), !dbg !5028
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5029
  %call128 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %80), !dbg !5030
  br label %return, !dbg !5031

return:                                           ; preds = %if.end125, %if.then59, %if.then46
  ret void, !dbg !5031
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_var_during_unrolling(%struct.var_to_expand* %ve, %struct.rtx_def* %insn) #0 !dbg !5032 {
entry:
  %ve.addr = alloca %struct.var_to_expand*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %new_reg = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %really_new_expansion = alloca i8, align 1
  store %struct.var_to_expand* %ve, %struct.var_to_expand** %ve.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ve.addr, metadata !5035, metadata !DIExpression()), !dbg !5036
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5037, metadata !DIExpression()), !dbg !5038
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_reg, metadata !5039, metadata !DIExpression()), !dbg !5040
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5041, metadata !DIExpression()), !dbg !5042
  call void @llvm.dbg.declare(metadata i8* %really_new_expansion, metadata !5043, metadata !DIExpression()), !dbg !5044
  store i8 0, i8* %really_new_expansion, align 1, !dbg !5044
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5045
  %bf.load = load i32, i32* %1, align 8, !dbg !5045
  %bf.clear = and i32 %bf.load, 65535, !dbg !5045
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5045
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !5045

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5045
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5045
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5045
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !5045
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !5045

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5045
  %bf.load5 = load i32, i32* %5, align 8, !dbg !5045
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5045
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !5045
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !5045

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5045
  %bf.load9 = load i32, i32* %7, align 8, !dbg !5045
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5045
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !5045
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !5045

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5045
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5045
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5045
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5045
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5045
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5045
  %bf.load12 = load i32, i32* %10, align 8, !dbg !5045
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !5045
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !5045
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !5045

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5045
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5045
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !5045
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !5045
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !5045
  br label %cond.end, !dbg !5045

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5045
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5045
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !5045
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !5045
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !5045
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !5045
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !5045
  br label %cond.end, !dbg !5045

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !5045
  br label %cond.end25, !dbg !5045

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !5045

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !5045
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !5046
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5047
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !5047
  br i1 %tobool, label %cond.false28, label %cond.true27, !dbg !5047

cond.true27:                                      ; preds = %cond.end25
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2056, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5047
  br label %cond.end29, !dbg !5047

cond.false28:                                     ; preds = %cond.end25
  br label %cond.end29, !dbg !5047

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !5047
  %17 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5048
  %arrayidx31 = getelementptr inbounds %struct.param_info, %struct.param_info* %17, i64 10, !dbg !5048
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx31, i32 0, i32 1, !dbg !5048
  %18 = load i32, i32* %value, align 8, !dbg !5048
  %19 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5050
  %expansion_count = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %19, i32 0, i32 5, !dbg !5051
  %20 = load i32, i32* %expansion_count, align 4, !dbg !5051
  %cmp32 = icmp sgt i32 %18, %20, !dbg !5052
  br i1 %cmp32, label %if.then, label %if.else, !dbg !5053

if.then:                                          ; preds = %cond.end29
  store i8 1, i8* %really_new_expansion, align 1, !dbg !5054
  %21 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5056
  %reg = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %21, i32 0, i32 1, !dbg !5056
  %22 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5056
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5056
  %bf.load33 = load i32, i32* %23, align 8, !dbg !5056
  %bf.lshr = lshr i32 %bf.load33, 16, !dbg !5056
  %bf.clear34 = and i32 %bf.lshr, 255, !dbg !5056
  %call35 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear34), !dbg !5057
  store %struct.rtx_def* %call35, %struct.rtx_def** %new_reg, align 8, !dbg !5058
  br label %if.end, !dbg !5059

if.else:                                          ; preds = %cond.end29
  %24 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5060
  %call36 = call %struct.rtx_def* @get_expansion(%struct.var_to_expand* %24), !dbg !5061
  store %struct.rtx_def* %call36, %struct.rtx_def** %new_reg, align 8, !dbg !5062
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5063
  %26 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5064
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5064
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5064
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 0, !dbg !5064
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !5064
  %27 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !5065
  %call41 = call zeroext i8 @validate_change(%struct.rtx_def* %25, %struct.rtx_def** %rt_rtx40, %struct.rtx_def* %27, i8 zeroext 1), !dbg !5066
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5067
  %29 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5068
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !5068
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !5068
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 1, !dbg !5068
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !5068
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !5068
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !5068
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !5068
  %31 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5068
  %accum_pos = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %31, i32 0, i32 7, !dbg !5068
  %32 = load i32, i32* %accum_pos, align 4, !dbg !5068
  %idxprom = zext i32 %32 to i64, !dbg !5068
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 %idxprom, !dbg !5068
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !5068
  %33 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !5069
  %call50 = call zeroext i8 @validate_change(%struct.rtx_def* %28, %struct.rtx_def** %rt_rtx49, %struct.rtx_def* %33, i8 zeroext 1), !dbg !5070
  %call51 = call i32 @apply_change_group(), !dbg !5071
  %tobool52 = icmp ne i32 %call51, 0, !dbg !5071
  br i1 %tobool52, label %if.then53, label %if.end59, !dbg !5073

if.then53:                                        ; preds = %if.end
  %34 = load i8, i8* %really_new_expansion, align 1, !dbg !5074
  %tobool54 = icmp ne i8 %34, 0, !dbg !5074
  br i1 %tobool54, label %if.then55, label %if.end58, !dbg !5076

if.then55:                                        ; preds = %if.then53
  %35 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5077
  %var_expansions = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %35, i32 0, i32 2, !dbg !5077
  %36 = load %struct.rtx_def*, %struct.rtx_def** %new_reg, align 8, !dbg !5077
  %call56 = call %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %var_expansions, %struct.rtx_def* %36), !dbg !5077
  %37 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5079
  %expansion_count57 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %37, i32 0, i32 5, !dbg !5080
  %38 = load i32, i32* %expansion_count57, align 4, !dbg !5081
  %inc = add nsw i32 %38, 1, !dbg !5081
  store i32 %inc, i32* %expansion_count57, align 4, !dbg !5081
  br label %if.end58, !dbg !5082

if.end58:                                         ; preds = %if.then55, %if.then53
  br label %if.end59, !dbg !5074

if.end59:                                         ; preds = %if.end58, %if.end
  ret void, !dbg !5083
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_var_expansion_initialization(%struct.var_to_expand* %ve, %struct.basic_block_def* %place) #0 !dbg !5084 {
entry:
  %ve.addr = alloca %struct.var_to_expand*, align 8
  %place.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %var = alloca %struct.rtx_def*, align 8
  %zero_init = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %mode = alloca i32, align 4
  %honor_signed_zero_p = alloca i8, align 1
  store %struct.var_to_expand* %ve, %struct.var_to_expand** %ve.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ve.addr, metadata !5087, metadata !DIExpression()), !dbg !5088
  store %struct.basic_block_def* %place, %struct.basic_block_def** %place.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %place.addr, metadata !5089, metadata !DIExpression()), !dbg !5090
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !5091, metadata !DIExpression()), !dbg !5092
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %var, metadata !5093, metadata !DIExpression()), !dbg !5094
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %zero_init, metadata !5095, metadata !DIExpression()), !dbg !5096
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5097, metadata !DIExpression()), !dbg !5098
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5099, metadata !DIExpression()), !dbg !5100
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5101, metadata !DIExpression()), !dbg !5102
  %0 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5103
  %reg = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %0, i32 0, i32 1, !dbg !5103
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5103
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5103
  %bf.load = load i32, i32* %2, align 8, !dbg !5103
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5103
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5103
  store i32 %bf.clear, i32* %mode, align 4, !dbg !5102
  call void @llvm.dbg.declare(metadata i8* %honor_signed_zero_p, metadata !5104, metadata !DIExpression()), !dbg !5105
  %3 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom = zext i32 %3 to i64, !dbg !5106
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5106
  %4 = load i8, i8* %arrayidx, align 1, !dbg !5106
  %conv = zext i8 %4 to i32, !dbg !5106
  %cmp = icmp eq i32 %conv, 8, !dbg !5106
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5106

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom2 = zext i32 %5 to i64, !dbg !5106
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !5106
  %6 = load i8, i8* %arrayidx3, align 1, !dbg !5106
  %conv4 = zext i8 %6 to i32, !dbg !5106
  %cmp5 = icmp eq i32 %conv4, 9, !dbg !5106
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false7, !dbg !5106

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %7 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom8 = zext i32 %7 to i64, !dbg !5106
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !5106
  %8 = load i8, i8* %arrayidx9, align 1, !dbg !5106
  %conv10 = zext i8 %8 to i32, !dbg !5106
  %cmp11 = icmp eq i32 %conv10, 11, !dbg !5106
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false13, !dbg !5106

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %9 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom14 = zext i32 %9 to i64, !dbg !5106
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !5106
  %10 = load i8, i8* %arrayidx15, align 1, !dbg !5106
  %conv16 = zext i8 %10 to i32, !dbg !5106
  %cmp17 = icmp eq i32 %conv16, 17, !dbg !5106
  br i1 %cmp17, label %land.lhs.true, label %land.end, !dbg !5106

land.lhs.true:                                    ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %11 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom19 = zext i32 %11 to i64, !dbg !5106
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !5106
  %12 = load i8, i8* %arrayidx20, align 1, !dbg !5106
  %conv21 = zext i8 %12 to i32, !dbg !5106
  %cmp22 = icmp eq i32 %conv21, 8, !dbg !5106
  br i1 %cmp22, label %cond.true, label %lor.lhs.false24, !dbg !5106

lor.lhs.false24:                                  ; preds = %land.lhs.true
  %13 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom25 = zext i32 %13 to i64, !dbg !5106
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !5106
  %14 = load i8, i8* %arrayidx26, align 1, !dbg !5106
  %conv27 = zext i8 %14 to i32, !dbg !5106
  %cmp28 = icmp eq i32 %conv27, 9, !dbg !5106
  br i1 %cmp28, label %cond.true, label %cond.false, !dbg !5106

cond.true:                                        ; preds = %lor.lhs.false24, %land.lhs.true
  %15 = load i32, i32* %mode, align 4, !dbg !5106
  br label %cond.end, !dbg !5106

cond.false:                                       ; preds = %lor.lhs.false24
  %16 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom30 = zext i32 %16 to i64, !dbg !5106
  %arrayidx31 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom30, !dbg !5106
  %17 = load i8, i8* %arrayidx31, align 1, !dbg !5106
  %conv32 = zext i8 %17 to i32, !dbg !5106
  br label %cond.end, !dbg !5106

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %15, %cond.true ], [ %conv32, %cond.false ], !dbg !5106
  %idxprom33 = zext i32 %cond to i64, !dbg !5106
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !5106
  %18 = load i8, i8* %arrayidx34, align 1, !dbg !5106
  %conv35 = zext i8 %18 to i32, !dbg !5106
  %cmp36 = icmp eq i32 %conv35, 9, !dbg !5106
  br i1 %cmp36, label %cond.true38, label %cond.false57, !dbg !5106

cond.true38:                                      ; preds = %cond.end
  %19 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom39 = zext i32 %19 to i64, !dbg !5106
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !5106
  %20 = load i8, i8* %arrayidx40, align 1, !dbg !5106
  %conv41 = zext i8 %20 to i32, !dbg !5106
  %cmp42 = icmp eq i32 %conv41, 8, !dbg !5106
  br i1 %cmp42, label %cond.true50, label %lor.lhs.false44, !dbg !5106

lor.lhs.false44:                                  ; preds = %cond.true38
  %21 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom45 = zext i32 %21 to i64, !dbg !5106
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !5106
  %22 = load i8, i8* %arrayidx46, align 1, !dbg !5106
  %conv47 = zext i8 %22 to i32, !dbg !5106
  %cmp48 = icmp eq i32 %conv47, 9, !dbg !5106
  br i1 %cmp48, label %cond.true50, label %cond.false51, !dbg !5106

cond.true50:                                      ; preds = %lor.lhs.false44, %cond.true38
  %23 = load i32, i32* %mode, align 4, !dbg !5106
  br label %cond.end55, !dbg !5106

cond.false51:                                     ; preds = %lor.lhs.false44
  %24 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom52 = zext i32 %24 to i64, !dbg !5106
  %arrayidx53 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom52, !dbg !5106
  %25 = load i8, i8* %arrayidx53, align 1, !dbg !5106
  %conv54 = zext i8 %25 to i32, !dbg !5106
  br label %cond.end55, !dbg !5106

cond.end55:                                       ; preds = %cond.false51, %cond.true50
  %cond56 = phi i32 [ %23, %cond.true50 ], [ %conv54, %cond.false51 ], !dbg !5106
  %sub = sub i32 %cond56, 42, !dbg !5106
  %add = add i32 %sub, 4, !dbg !5106
  br label %cond.end77, !dbg !5106

cond.false57:                                     ; preds = %cond.end
  %26 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom58 = zext i32 %26 to i64, !dbg !5106
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom58, !dbg !5106
  %27 = load i8, i8* %arrayidx59, align 1, !dbg !5106
  %conv60 = zext i8 %27 to i32, !dbg !5106
  %cmp61 = icmp eq i32 %conv60, 8, !dbg !5106
  br i1 %cmp61, label %cond.true69, label %lor.lhs.false63, !dbg !5106

lor.lhs.false63:                                  ; preds = %cond.false57
  %28 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom64 = zext i32 %28 to i64, !dbg !5106
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom64, !dbg !5106
  %29 = load i8, i8* %arrayidx65, align 1, !dbg !5106
  %conv66 = zext i8 %29 to i32, !dbg !5106
  %cmp67 = icmp eq i32 %conv66, 9, !dbg !5106
  br i1 %cmp67, label %cond.true69, label %cond.false70, !dbg !5106

cond.true69:                                      ; preds = %lor.lhs.false63, %cond.false57
  %30 = load i32, i32* %mode, align 4, !dbg !5106
  br label %cond.end74, !dbg !5106

cond.false70:                                     ; preds = %lor.lhs.false63
  %31 = load i32, i32* %mode, align 4, !dbg !5106
  %idxprom71 = zext i32 %31 to i64, !dbg !5106
  %arrayidx72 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom71, !dbg !5106
  %32 = load i8, i8* %arrayidx72, align 1, !dbg !5106
  %conv73 = zext i8 %32 to i32, !dbg !5106
  br label %cond.end74, !dbg !5106

cond.end74:                                       ; preds = %cond.false70, %cond.true69
  %cond75 = phi i32 [ %30, %cond.true69 ], [ %conv73, %cond.false70 ], !dbg !5106
  %sub76 = sub i32 %cond75, 38, !dbg !5106
  br label %cond.end77, !dbg !5106

cond.end77:                                       ; preds = %cond.end74, %cond.end55
  %cond78 = phi i32 [ %add, %cond.end55 ], [ %sub76, %cond.end74 ], !dbg !5106
  %idxprom79 = zext i32 %cond78 to i64, !dbg !5106
  %arrayidx80 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom79, !dbg !5106
  %33 = load %struct.real_format*, %struct.real_format** %arrayidx80, align 8, !dbg !5106
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %33, i32 0, i32 14, !dbg !5106
  %34 = load i8, i8* %has_signed_zero, align 1, !dbg !5106
  %conv81 = zext i8 %34 to i32, !dbg !5106
  %tobool = icmp ne i32 %conv81, 0, !dbg !5106
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5106

land.rhs:                                         ; preds = %cond.end77
  %35 = load i32, i32* @flag_signed_zeros, align 4, !dbg !5106
  %tobool82 = icmp ne i32 %35, 0, !dbg !5106
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end77, %lor.lhs.false13
  %36 = phi i1 [ false, %cond.end77 ], [ false, %lor.lhs.false13 ], [ %tobool82, %land.rhs ], !dbg !5107
  %land.ext = zext i1 %36 to i32, !dbg !5106
  %conv83 = trunc i32 %land.ext to i8, !dbg !5106
  store i8 %conv83, i8* %honor_signed_zero_p, align 1, !dbg !5105
  %37 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5108
  %var_expansions = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %37, i32 0, i32 2, !dbg !5108
  %38 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions, align 8, !dbg !5108
  %tobool84 = icmp ne %struct.VEC_rtx_heap* %38, null, !dbg !5108
  br i1 %tobool84, label %cond.true85, label %cond.false87, !dbg !5108

cond.true85:                                      ; preds = %land.end
  %39 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5108
  %var_expansions86 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %39, i32 0, i32 2, !dbg !5108
  %40 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions86, align 8, !dbg !5108
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %40, i32 0, i32 0, !dbg !5108
  br label %cond.end88, !dbg !5108

cond.false87:                                     ; preds = %land.end
  br label %cond.end88, !dbg !5108

cond.end88:                                       ; preds = %cond.false87, %cond.true85
  %cond89 = phi %struct.VEC_rtx_base* [ %base, %cond.true85 ], [ null, %cond.false87 ], !dbg !5108
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond89), !dbg !5108
  %cmp90 = icmp eq i32 %call, 0, !dbg !5110
  br i1 %cmp90, label %if.then, label %if.end, !dbg !5111

if.then:                                          ; preds = %cond.end88
  br label %return, !dbg !5112

if.end:                                           ; preds = %cond.end88
  call void @start_sequence(), !dbg !5113
  %41 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5114
  %op = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %41, i32 0, i32 4, !dbg !5116
  %42 = load i32, i32* %op, align 8, !dbg !5116
  %cmp92 = icmp eq i32 %42, 49, !dbg !5117
  br i1 %cmp92, label %if.then98, label %lor.lhs.false94, !dbg !5118

lor.lhs.false94:                                  ; preds = %if.end
  %43 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5119
  %op95 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %43, i32 0, i32 4, !dbg !5120
  %44 = load i32, i32* %op95, align 8, !dbg !5120
  %cmp96 = icmp eq i32 %44, 50, !dbg !5121
  br i1 %cmp96, label %if.then98, label %if.else118, !dbg !5122

if.then98:                                        ; preds = %lor.lhs.false94, %if.end
  store i32 0, i32* %i, align 4, !dbg !5123
  br label %for.cond, !dbg !5125

for.cond:                                         ; preds = %for.inc, %if.then98
  %45 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5126
  %var_expansions99 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %45, i32 0, i32 2, !dbg !5126
  %46 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions99, align 8, !dbg !5126
  %tobool100 = icmp ne %struct.VEC_rtx_heap* %46, null, !dbg !5126
  br i1 %tobool100, label %cond.true101, label %cond.false104, !dbg !5126

cond.true101:                                     ; preds = %for.cond
  %47 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5126
  %var_expansions102 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %47, i32 0, i32 2, !dbg !5126
  %48 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions102, align 8, !dbg !5126
  %base103 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %48, i32 0, i32 0, !dbg !5126
  br label %cond.end105, !dbg !5126

cond.false104:                                    ; preds = %for.cond
  br label %cond.end105, !dbg !5126

cond.end105:                                      ; preds = %cond.false104, %cond.true101
  %cond106 = phi %struct.VEC_rtx_base* [ %base103, %cond.true101 ], [ null, %cond.false104 ], !dbg !5126
  %49 = load i32, i32* %i, align 4, !dbg !5126
  %call107 = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond106, i32 %49, %struct.rtx_def** %var), !dbg !5126
  %tobool108 = icmp ne i32 %call107, 0, !dbg !5128
  br i1 %tobool108, label %for.body, label %for.end, !dbg !5128

for.body:                                         ; preds = %cond.end105
  %50 = load i8, i8* %honor_signed_zero_p, align 1, !dbg !5129
  %tobool109 = icmp ne i8 %50, 0, !dbg !5129
  br i1 %tobool109, label %if.then110, label %if.else, !dbg !5132

if.then110:                                       ; preds = %for.body
  %51 = load i32, i32* %mode, align 4, !dbg !5133
  %52 = load i32, i32* %mode, align 4, !dbg !5134
  %idxprom111 = sext i32 %52 to i64, !dbg !5134
  %arrayidx112 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom111, !dbg !5134
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx112, align 8, !dbg !5134
  %54 = load i32, i32* %mode, align 4, !dbg !5135
  %call113 = call %struct.rtx_def* @simplify_gen_unary(i32 51, i32 %51, %struct.rtx_def* %53, i32 %54), !dbg !5136
  store %struct.rtx_def* %call113, %struct.rtx_def** %zero_init, align 8, !dbg !5137
  br label %if.end116, !dbg !5138

if.else:                                          ; preds = %for.body
  %55 = load i32, i32* %mode, align 4, !dbg !5139
  %idxprom114 = sext i32 %55 to i64, !dbg !5139
  %arrayidx115 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom114, !dbg !5139
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx115, align 8, !dbg !5139
  store %struct.rtx_def* %56, %struct.rtx_def** %zero_init, align 8, !dbg !5140
  br label %if.end116

if.end116:                                        ; preds = %if.else, %if.then110
  %57 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !5141
  %58 = load %struct.rtx_def*, %struct.rtx_def** %zero_init, align 8, !dbg !5142
  %call117 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %57, %struct.rtx_def* %58), !dbg !5143
  br label %for.inc, !dbg !5144

for.inc:                                          ; preds = %if.end116
  %59 = load i32, i32* %i, align 4, !dbg !5145
  %inc = add i32 %59, 1, !dbg !5145
  store i32 %inc, i32* %i, align 4, !dbg !5145
  br label %for.cond, !dbg !5146, !llvm.loop !5147

for.end:                                          ; preds = %cond.end105
  br label %if.end145, !dbg !5148

if.else118:                                       ; preds = %lor.lhs.false94
  %60 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5149
  %op119 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %60, i32 0, i32 4, !dbg !5151
  %61 = load i32, i32* %op119, align 8, !dbg !5151
  %cmp120 = icmp eq i32 %61, 52, !dbg !5152
  br i1 %cmp120, label %if.then122, label %if.end144, !dbg !5153

if.then122:                                       ; preds = %if.else118
  store i32 0, i32* %i, align 4, !dbg !5154
  br label %for.cond123, !dbg !5156

for.cond123:                                      ; preds = %for.inc141, %if.then122
  %62 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5157
  %var_expansions124 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %62, i32 0, i32 2, !dbg !5157
  %63 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions124, align 8, !dbg !5157
  %tobool125 = icmp ne %struct.VEC_rtx_heap* %63, null, !dbg !5157
  br i1 %tobool125, label %cond.true126, label %cond.false129, !dbg !5157

cond.true126:                                     ; preds = %for.cond123
  %64 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5157
  %var_expansions127 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %64, i32 0, i32 2, !dbg !5157
  %65 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions127, align 8, !dbg !5157
  %base128 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %65, i32 0, i32 0, !dbg !5157
  br label %cond.end130, !dbg !5157

cond.false129:                                    ; preds = %for.cond123
  br label %cond.end130, !dbg !5157

cond.end130:                                      ; preds = %cond.false129, %cond.true126
  %cond131 = phi %struct.VEC_rtx_base* [ %base128, %cond.true126 ], [ null, %cond.false129 ], !dbg !5157
  %66 = load i32, i32* %i, align 4, !dbg !5157
  %call132 = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond131, i32 %66, %struct.rtx_def** %var), !dbg !5157
  %tobool133 = icmp ne i32 %call132, 0, !dbg !5159
  br i1 %tobool133, label %for.body134, label %for.end143, !dbg !5159

for.body134:                                      ; preds = %cond.end130
  %67 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !5160
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !5160
  %bf.load135 = load i32, i32* %68, align 8, !dbg !5160
  %bf.lshr136 = lshr i32 %bf.load135, 16, !dbg !5160
  %bf.clear137 = and i32 %bf.lshr136, 255, !dbg !5160
  %idxprom138 = sext i32 %bf.clear137 to i64, !dbg !5160
  %arrayidx139 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1), i64 0, i64 %idxprom138, !dbg !5160
  %69 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx139, align 8, !dbg !5160
  store %struct.rtx_def* %69, %struct.rtx_def** %zero_init, align 8, !dbg !5162
  %70 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !5163
  %71 = load %struct.rtx_def*, %struct.rtx_def** %zero_init, align 8, !dbg !5164
  %call140 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %70, %struct.rtx_def* %71), !dbg !5165
  br label %for.inc141, !dbg !5166

for.inc141:                                       ; preds = %for.body134
  %72 = load i32, i32* %i, align 4, !dbg !5167
  %inc142 = add i32 %72, 1, !dbg !5167
  store i32 %inc142, i32* %i, align 4, !dbg !5167
  br label %for.cond123, !dbg !5168, !llvm.loop !5169

for.end143:                                       ; preds = %cond.end130
  br label %if.end144, !dbg !5170

if.end144:                                        ; preds = %for.end143, %if.else118
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %for.end
  %call146 = call %struct.rtx_def* @get_insns(), !dbg !5171
  store %struct.rtx_def* %call146, %struct.rtx_def** %seq, align 8, !dbg !5172
  call void @end_sequence(), !dbg !5173
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %place.addr, align 8, !dbg !5174
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 7, !dbg !5174
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5174
  %74 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5174
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %74, i32 0, i32 0, !dbg !5174
  %75 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5174
  store %struct.rtx_def* %75, %struct.rtx_def** %insn, align 8, !dbg !5175
  br label %while.cond, !dbg !5176

while.cond:                                       ; preds = %while.body, %if.end145
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5177
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !5177
  %bf.load147 = load i32, i32* %77, align 8, !dbg !5177
  %bf.clear148 = and i32 %bf.load147, 65535, !dbg !5177
  %cmp149 = icmp eq i32 %bf.clear148, 13, !dbg !5177
  br i1 %cmp149, label %land.rhs151, label %land.end155, !dbg !5177

land.rhs151:                                      ; preds = %while.cond
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5177
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !5177
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5177
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5177
  %rt_int = bitcast %union.rtunion_def* %arrayidx152 to i32*, !dbg !5177
  %79 = load i32, i32* %rt_int, align 8, !dbg !5177
  %cmp153 = icmp eq i32 %79, 10, !dbg !5177
  br label %land.end155

land.end155:                                      ; preds = %land.rhs151, %while.cond
  %80 = phi i1 [ false, %while.cond ], [ %cmp153, %land.rhs151 ], !dbg !5107
  %lnot = xor i1 %80, true, !dbg !5178
  br i1 %lnot, label %while.body, label %while.end, !dbg !5176

while.body:                                       ; preds = %land.end155
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5179
  %u157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !5179
  %fld158 = bitcast %union.u* %u157 to [1 x %union.rtunion_def]*, !dbg !5179
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i64 0, i64 2, !dbg !5179
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx159 to %struct.rtx_def**, !dbg !5179
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5179
  store %struct.rtx_def* %82, %struct.rtx_def** %insn, align 8, !dbg !5180
  br label %while.cond, !dbg !5176, !llvm.loop !5181

while.end:                                        ; preds = %land.end155
  %83 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5182
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5183
  %call160 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %83, %struct.rtx_def* %84), !dbg !5184
  br label %return, !dbg !5185

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5185
}

; Function Attrs: noinline nounwind uwtable
define internal void @combine_var_copies_in_loop_exit(%struct.var_to_expand* %ve, %struct.basic_block_def* %place) #0 !dbg !5186 {
entry:
  %ve.addr = alloca %struct.var_to_expand*, align 8
  %place.addr = alloca %struct.basic_block_def*, align 8
  %sum = alloca %struct.rtx_def*, align 8
  %expr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %var = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.var_to_expand* %ve, %struct.var_to_expand** %ve.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ve.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  store %struct.basic_block_def* %place, %struct.basic_block_def** %place.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %place.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sum, metadata !5191, metadata !DIExpression()), !dbg !5192
  %0 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5193
  %reg = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %0, i32 0, i32 1, !dbg !5194
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5194
  store %struct.rtx_def* %1, %struct.rtx_def** %sum, align 8, !dbg !5192
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr, metadata !5195, metadata !DIExpression()), !dbg !5196
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !5197, metadata !DIExpression()), !dbg !5198
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %var, metadata !5199, metadata !DIExpression()), !dbg !5200
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5201, metadata !DIExpression()), !dbg !5202
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5203, metadata !DIExpression()), !dbg !5204
  %2 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5205
  %var_expansions = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %2, i32 0, i32 2, !dbg !5205
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions, align 8, !dbg !5205
  %tobool = icmp ne %struct.VEC_rtx_heap* %3, null, !dbg !5205
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5205

cond.true:                                        ; preds = %entry
  %4 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5205
  %var_expansions1 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %4, i32 0, i32 2, !dbg !5205
  %5 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions1, align 8, !dbg !5205
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %5, i32 0, i32 0, !dbg !5205
  br label %cond.end, !dbg !5205

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5205

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5205
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !5205
  %cmp = icmp eq i32 %call, 0, !dbg !5207
  br i1 %cmp, label %if.then, label %if.end, !dbg !5208

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !5209

if.end:                                           ; preds = %cond.end
  call void @start_sequence(), !dbg !5210
  %6 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5211
  %op = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %6, i32 0, i32 4, !dbg !5213
  %7 = load i32, i32* %op, align 8, !dbg !5213
  %cmp2 = icmp eq i32 %7, 49, !dbg !5214
  br i1 %cmp2, label %if.then5, label %lor.lhs.false, !dbg !5215

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5216
  %op3 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %8, i32 0, i32 4, !dbg !5217
  %9 = load i32, i32* %op3, align 8, !dbg !5217
  %cmp4 = icmp eq i32 %9, 50, !dbg !5218
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !5219

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %i, align 4, !dbg !5220
  br label %for.cond, !dbg !5222

for.cond:                                         ; preds = %for.inc, %if.then5
  %10 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5223
  %var_expansions6 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %10, i32 0, i32 2, !dbg !5223
  %11 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions6, align 8, !dbg !5223
  %tobool7 = icmp ne %struct.VEC_rtx_heap* %11, null, !dbg !5223
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !5223

cond.true8:                                       ; preds = %for.cond
  %12 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5223
  %var_expansions9 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %12, i32 0, i32 2, !dbg !5223
  %13 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions9, align 8, !dbg !5223
  %base10 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %13, i32 0, i32 0, !dbg !5223
  br label %cond.end12, !dbg !5223

cond.false11:                                     ; preds = %for.cond
  br label %cond.end12, !dbg !5223

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_rtx_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !5223
  %14 = load i32, i32* %i, align 4, !dbg !5223
  %call14 = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond13, i32 %14, %struct.rtx_def** %var), !dbg !5223
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5225
  br i1 %tobool15, label %for.body, label %for.end, !dbg !5225

for.body:                                         ; preds = %cond.end12
  %15 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5226
  %reg16 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %15, i32 0, i32 1, !dbg !5226
  %16 = load %struct.rtx_def*, %struct.rtx_def** %reg16, align 8, !dbg !5226
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5226
  %bf.load = load i32, i32* %17, align 8, !dbg !5226
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5226
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5226
  %18 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !5228
  %19 = load %struct.rtx_def*, %struct.rtx_def** %sum, align 8, !dbg !5229
  %call17 = call %struct.rtx_def* @simplify_gen_binary(i32 49, i32 %bf.clear, %struct.rtx_def* %18, %struct.rtx_def* %19), !dbg !5230
  store %struct.rtx_def* %call17, %struct.rtx_def** %sum, align 8, !dbg !5231
  br label %for.inc, !dbg !5232

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !dbg !5233
  %inc = add i32 %20, 1, !dbg !5233
  store i32 %inc, i32* %i, align 4, !dbg !5233
  br label %for.cond, !dbg !5234, !llvm.loop !5235

for.end:                                          ; preds = %cond.end12
  br label %if.end42, !dbg !5236

if.else:                                          ; preds = %lor.lhs.false
  %21 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5237
  %op18 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %21, i32 0, i32 4, !dbg !5239
  %22 = load i32, i32* %op18, align 8, !dbg !5239
  %cmp19 = icmp eq i32 %22, 52, !dbg !5240
  br i1 %cmp19, label %if.then20, label %if.end41, !dbg !5241

if.then20:                                        ; preds = %if.else
  store i32 0, i32* %i, align 4, !dbg !5242
  br label %for.cond21, !dbg !5244

for.cond21:                                       ; preds = %for.inc38, %if.then20
  %23 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5245
  %var_expansions22 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %23, i32 0, i32 2, !dbg !5245
  %24 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions22, align 8, !dbg !5245
  %tobool23 = icmp ne %struct.VEC_rtx_heap* %24, null, !dbg !5245
  br i1 %tobool23, label %cond.true24, label %cond.false27, !dbg !5245

cond.true24:                                      ; preds = %for.cond21
  %25 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5245
  %var_expansions25 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %25, i32 0, i32 2, !dbg !5245
  %26 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions25, align 8, !dbg !5245
  %base26 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %26, i32 0, i32 0, !dbg !5245
  br label %cond.end28, !dbg !5245

cond.false27:                                     ; preds = %for.cond21
  br label %cond.end28, !dbg !5245

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi %struct.VEC_rtx_base* [ %base26, %cond.true24 ], [ null, %cond.false27 ], !dbg !5245
  %27 = load i32, i32* %i, align 4, !dbg !5245
  %call30 = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond29, i32 %27, %struct.rtx_def** %var), !dbg !5245
  %tobool31 = icmp ne i32 %call30, 0, !dbg !5247
  br i1 %tobool31, label %for.body32, label %for.end40, !dbg !5247

for.body32:                                       ; preds = %cond.end28
  %28 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5248
  %reg33 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %28, i32 0, i32 1, !dbg !5248
  %29 = load %struct.rtx_def*, %struct.rtx_def** %reg33, align 8, !dbg !5248
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !5248
  %bf.load34 = load i32, i32* %30, align 8, !dbg !5248
  %bf.lshr35 = lshr i32 %bf.load34, 16, !dbg !5248
  %bf.clear36 = and i32 %bf.lshr35, 255, !dbg !5248
  %31 = load %struct.rtx_def*, %struct.rtx_def** %var, align 8, !dbg !5250
  %32 = load %struct.rtx_def*, %struct.rtx_def** %sum, align 8, !dbg !5251
  %call37 = call %struct.rtx_def* @simplify_gen_binary(i32 52, i32 %bf.clear36, %struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !5252
  store %struct.rtx_def* %call37, %struct.rtx_def** %sum, align 8, !dbg !5253
  br label %for.inc38, !dbg !5254

for.inc38:                                        ; preds = %for.body32
  %33 = load i32, i32* %i, align 4, !dbg !5255
  %inc39 = add i32 %33, 1, !dbg !5255
  store i32 %inc39, i32* %i, align 4, !dbg !5255
  br label %for.cond21, !dbg !5256, !llvm.loop !5257

for.end40:                                        ; preds = %cond.end28
  br label %if.end41, !dbg !5258

if.end41:                                         ; preds = %for.end40, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %for.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %sum, align 8, !dbg !5259
  %35 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5260
  %reg43 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %35, i32 0, i32 1, !dbg !5261
  %36 = load %struct.rtx_def*, %struct.rtx_def** %reg43, align 8, !dbg !5261
  %call44 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %34, %struct.rtx_def* %36), !dbg !5262
  store %struct.rtx_def* %call44, %struct.rtx_def** %expr, align 8, !dbg !5263
  %37 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !5264
  %38 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5266
  %reg45 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %38, i32 0, i32 1, !dbg !5267
  %39 = load %struct.rtx_def*, %struct.rtx_def** %reg45, align 8, !dbg !5267
  %cmp46 = icmp ne %struct.rtx_def* %37, %39, !dbg !5268
  br i1 %cmp46, label %if.then47, label %if.end50, !dbg !5269

if.then47:                                        ; preds = %if.end42
  %40 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5270
  %reg48 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %40, i32 0, i32 1, !dbg !5271
  %41 = load %struct.rtx_def*, %struct.rtx_def** %reg48, align 8, !dbg !5271
  %42 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !5272
  %call49 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %41, %struct.rtx_def* %42), !dbg !5273
  br label %if.end50, !dbg !5273

if.end50:                                         ; preds = %if.then47, %if.end42
  %call51 = call %struct.rtx_def* @get_insns(), !dbg !5274
  store %struct.rtx_def* %call51, %struct.rtx_def** %seq, align 8, !dbg !5275
  call void @end_sequence(), !dbg !5276
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %place.addr, align 8, !dbg !5277
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !5277
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5277
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5277
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 0, !dbg !5277
  %45 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5277
  store %struct.rtx_def* %45, %struct.rtx_def** %insn, align 8, !dbg !5278
  br label %while.cond, !dbg !5279

while.cond:                                       ; preds = %while.body, %if.end50
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5280
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !5280
  %bf.load52 = load i32, i32* %47, align 8, !dbg !5280
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !5280
  %cmp54 = icmp eq i32 %bf.clear53, 13, !dbg !5280
  br i1 %cmp54, label %land.rhs, label %land.end, !dbg !5280

land.rhs:                                         ; preds = %while.cond
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5280
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !5280
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5280
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5280
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5280
  %49 = load i32, i32* %rt_int, align 8, !dbg !5280
  %cmp55 = icmp eq i32 %49, 10, !dbg !5280
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %50 = phi i1 [ false, %while.cond ], [ %cmp55, %land.rhs ], !dbg !5281
  %lnot = xor i1 %50, true, !dbg !5282
  br i1 %lnot, label %while.body, label %while.end, !dbg !5279

while.body:                                       ; preds = %land.end
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5283
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !5283
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !5283
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 2, !dbg !5283
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**, !dbg !5283
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5283
  store %struct.rtx_def* %52, %struct.rtx_def** %insn, align 8, !dbg !5284
  br label %while.cond, !dbg !5279, !llvm.loop !5285

while.end:                                        ; preds = %land.end
  %53 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5286
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5287
  %call59 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %53, %struct.rtx_def* %54), !dbg !5288
  br label %return, !dbg !5289

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5289
}

declare dso_local %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @get_ivts_expr(%struct.rtx_def* %expr, %struct.iv_to_split* %ivts) #0 !dbg !5290 {
entry:
  %expr.addr = alloca %struct.rtx_def*, align 8
  %ivts.addr = alloca %struct.iv_to_split*, align 8
  %i = alloca i32, align 4
  %ret = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def* %expr, %struct.rtx_def** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr.addr, metadata !5293, metadata !DIExpression()), !dbg !5294
  store %struct.iv_to_split* %ivts, %struct.iv_to_split** %ivts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_to_split** %ivts.addr, metadata !5295, metadata !DIExpression()), !dbg !5296
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5297, metadata !DIExpression()), !dbg !5298
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ret, metadata !5299, metadata !DIExpression()), !dbg !5300
  store %struct.rtx_def** %expr.addr, %struct.rtx_def*** %ret, align 8, !dbg !5300
  store i32 0, i32* %i, align 4, !dbg !5301
  br label %for.cond, !dbg !5303

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5304
  %1 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !5306
  %n_loc = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %1, i32 0, i32 4, !dbg !5307
  %2 = load i32, i32* %n_loc, align 8, !dbg !5307
  %cmp = icmp ult i32 %0, %2, !dbg !5308
  br i1 %cmp, label %for.body, label %for.end, !dbg !5309

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %ret, align 8, !dbg !5310
  %4 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8, !dbg !5310
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !5310
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5310
  %5 = load %struct.iv_to_split*, %struct.iv_to_split** %ivts.addr, align 8, !dbg !5310
  %loc = getelementptr inbounds %struct.iv_to_split, %struct.iv_to_split* %5, i32 0, i32 5, !dbg !5310
  %6 = load i32, i32* %i, align 4, !dbg !5310
  %idxprom = zext i32 %6 to i64, !dbg !5310
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* %loc, i64 0, i64 %idxprom, !dbg !5310
  %7 = load i32, i32* %arrayidx, align 4, !dbg !5310
  %idxprom1 = zext i32 %7 to i64, !dbg !5310
  %arrayidx2 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom1, !dbg !5310
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**, !dbg !5310
  store %struct.rtx_def** %rt_rtx, %struct.rtx_def*** %ret, align 8, !dbg !5311
  br label %for.inc, !dbg !5312

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !5313
  %inc = add i32 %8, 1, !dbg !5313
  store i32 %inc, i32* %i, align 4, !dbg !5313
  br label %for.cond, !dbg !5314, !llvm.loop !5315

for.end:                                          ; preds = %for.cond
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %ret, align 8, !dbg !5317
  ret %struct.rtx_def** %9, !dbg !5318
}

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @get_expansion(%struct.var_to_expand* %ve) #0 !dbg !5319 {
entry:
  %ve.addr = alloca %struct.var_to_expand*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  store %struct.var_to_expand* %ve, %struct.var_to_expand** %ve.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.var_to_expand** %ve.addr, metadata !5322, metadata !DIExpression()), !dbg !5323
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !5324, metadata !DIExpression()), !dbg !5325
  %0 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5326
  %reuse_expansion = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %0, i32 0, i32 6, !dbg !5328
  %1 = load i32, i32* %reuse_expansion, align 8, !dbg !5328
  %cmp = icmp eq i32 %1, 0, !dbg !5329
  br i1 %cmp, label %if.then, label %if.else, !dbg !5330

if.then:                                          ; preds = %entry
  %2 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5331
  %reg1 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %2, i32 0, i32 1, !dbg !5332
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg1, align 8, !dbg !5332
  store %struct.rtx_def* %3, %struct.rtx_def** %reg, align 8, !dbg !5333
  br label %if.end, !dbg !5334

if.else:                                          ; preds = %entry
  %4 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5335
  %var_expansions = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %4, i32 0, i32 2, !dbg !5335
  %5 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions, align 8, !dbg !5335
  %tobool = icmp ne %struct.VEC_rtx_heap* %5, null, !dbg !5335
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5335

cond.true:                                        ; preds = %if.else
  %6 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5335
  %var_expansions2 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %6, i32 0, i32 2, !dbg !5335
  %7 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions2, align 8, !dbg !5335
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %7, i32 0, i32 0, !dbg !5335
  br label %cond.end, !dbg !5335

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !5335

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5335
  %8 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5335
  %reuse_expansion3 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %8, i32 0, i32 6, !dbg !5335
  %9 = load i32, i32* %reuse_expansion3, align 8, !dbg !5335
  %sub = sub nsw i32 %9, 1, !dbg !5335
  %call = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond, i32 %sub), !dbg !5335
  store %struct.rtx_def* %call, %struct.rtx_def** %reg, align 8, !dbg !5336
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %10 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5337
  %var_expansions4 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %10, i32 0, i32 2, !dbg !5337
  %11 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions4, align 8, !dbg !5337
  %tobool5 = icmp ne %struct.VEC_rtx_heap* %11, null, !dbg !5337
  br i1 %tobool5, label %cond.true6, label %cond.false9, !dbg !5337

cond.true6:                                       ; preds = %if.end
  %12 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5337
  %var_expansions7 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %12, i32 0, i32 2, !dbg !5337
  %13 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %var_expansions7, align 8, !dbg !5337
  %base8 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %13, i32 0, i32 0, !dbg !5337
  br label %cond.end10, !dbg !5337

cond.false9:                                      ; preds = %if.end
  br label %cond.end10, !dbg !5337

cond.end10:                                       ; preds = %cond.false9, %cond.true6
  %cond11 = phi %struct.VEC_rtx_base* [ %base8, %cond.true6 ], [ null, %cond.false9 ], !dbg !5337
  %call12 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond11), !dbg !5337
  %14 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5339
  %reuse_expansion13 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %14, i32 0, i32 6, !dbg !5340
  %15 = load i32, i32* %reuse_expansion13, align 8, !dbg !5340
  %cmp14 = icmp eq i32 %call12, %15, !dbg !5341
  br i1 %cmp14, label %if.then15, label %if.else17, !dbg !5342

if.then15:                                        ; preds = %cond.end10
  %16 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5343
  %reuse_expansion16 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %16, i32 0, i32 6, !dbg !5344
  store i32 0, i32* %reuse_expansion16, align 8, !dbg !5345
  br label %if.end19, !dbg !5343

if.else17:                                        ; preds = %cond.end10
  %17 = load %struct.var_to_expand*, %struct.var_to_expand** %ve.addr, align 8, !dbg !5346
  %reuse_expansion18 = getelementptr inbounds %struct.var_to_expand, %struct.var_to_expand* %17, i32 0, i32 6, !dbg !5347
  %18 = load i32, i32* %reuse_expansion18, align 8, !dbg !5348
  %inc = add nsw i32 %18, 1, !dbg !5348
  store i32 %inc, i32* %reuse_expansion18, align 8, !dbg !5348
  br label %if.end19

if.end19:                                         ; preds = %if.else17, %if.then15
  %19 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5349
  ret %struct.rtx_def* %19, !dbg !5350
}

declare dso_local i32 @apply_change_group() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %vec_, %struct.rtx_def* %obj_) #0 !dbg !5351 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !5355, metadata !DIExpression()), !dbg !5356
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !5357, metadata !DIExpression()), !dbg !5356
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5356
  %call = call i32 @VEC_rtx_heap_reserve(%struct.VEC_rtx_heap** %0, i32 1), !dbg !5356
  %1 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5356
  %2 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %1, align 8, !dbg !5356
  %tobool = icmp ne %struct.VEC_rtx_heap* %2, null, !dbg !5356
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5356

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5356
  %4 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %3, align 8, !dbg !5356
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %4, i32 0, i32 0, !dbg !5356
  br label %cond.end, !dbg !5356

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5356

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5356
  %5 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !5356
  %call1 = call %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %cond, %struct.rtx_def* %5), !dbg !5356
  ret %struct.rtx_def** %call1, !dbg !5356
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %vec_, i32 %ix_) #0 !dbg !5358 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !5363, metadata !DIExpression()), !dbg !5364
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5365, metadata !DIExpression()), !dbg !5364
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5364
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !5364
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5364

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5364
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5364
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !5364
  %3 = load i32, i32* %num, align 8, !dbg !5364
  %cmp = icmp ult i32 %1, %3, !dbg !5364
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5366
  %land.ext = zext i1 %4 to i32, !dbg !5364
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5364
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 2, !dbg !5364
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5364
  %idxprom = zext i32 %6 to i64, !dbg !5364
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !5364
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5364
  ret %struct.rtx_def* %7, !dbg !5364
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %vec_) #0 !dbg !5367 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !5370, metadata !DIExpression()), !dbg !5371
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5371
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !5371
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5371

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5371
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !5371
  %2 = load i32, i32* %num, align 8, !dbg !5371
  br label %cond.end, !dbg !5371

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5371

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5371
  ret i32 %cond, !dbg !5371
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_heap_reserve(%struct.VEC_rtx_heap** %vec_, i32 %alloc_) #0 !dbg !5372 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !5375, metadata !DIExpression()), !dbg !5376
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5377, metadata !DIExpression()), !dbg !5376
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5378, metadata !DIExpression()), !dbg !5376
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5376
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %0, align 8, !dbg !5376
  %tobool = icmp ne %struct.VEC_rtx_heap* %1, null, !dbg !5376
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5376

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5376
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %2, align 8, !dbg !5376
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %3, i32 0, i32 0, !dbg !5376
  br label %cond.end, !dbg !5376

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5376

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5376
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5376
  %call = call i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %cond, i32 %4), !dbg !5376
  %tobool1 = icmp ne i32 %call, 0, !dbg !5376
  %lnot = xor i1 %tobool1, true, !dbg !5376
  %lnot.ext = zext i1 %lnot to i32, !dbg !5376
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5376
  %5 = load i32, i32* %extend, align 4, !dbg !5379
  %tobool2 = icmp ne i32 %5, 0, !dbg !5379
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5376

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5379
  %7 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %6, align 8, !dbg !5379
  %8 = bitcast %struct.VEC_rtx_heap* %7 to i8*, !dbg !5379
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5379
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5379
  %10 = bitcast i8* %call3 to %struct.VEC_rtx_heap*, !dbg !5379
  %11 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5379
  store %struct.VEC_rtx_heap* %10, %struct.VEC_rtx_heap** %11, align 8, !dbg !5379
  br label %if.end, !dbg !5379

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5376
  ret i32 %12, !dbg !5376
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %vec_, %struct.rtx_def* %obj_) #0 !dbg !5381 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  %slot_ = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !5385, metadata !DIExpression()), !dbg !5386
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !5387, metadata !DIExpression()), !dbg !5386
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %slot_, metadata !5388, metadata !DIExpression()), !dbg !5386
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5386
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %0, i32 0, i32 0, !dbg !5386
  %1 = load i32, i32* %num, align 8, !dbg !5386
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5386
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !5386
  %3 = load i32, i32* %alloc, align 4, !dbg !5386
  %cmp = icmp ult i32 %1, %3, !dbg !5386
  %conv = zext i1 %cmp to i32, !dbg !5386
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5386
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !5386
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5386
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 0, !dbg !5386
  %6 = load i32, i32* %num1, align 8, !dbg !5386
  %inc = add i32 %6, 1, !dbg !5386
  store i32 %inc, i32* %num1, align 8, !dbg !5386
  %idxprom = zext i32 %6 to i64, !dbg !5386
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !5386
  store %struct.rtx_def** %arrayidx, %struct.rtx_def*** %slot_, align 8, !dbg !5386
  %7 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !5386
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !5386
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !5386
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !5386
  ret %struct.rtx_def** %9, !dbg !5386
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %vec_, i32 %alloc_) #0 !dbg !5389 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !5392, metadata !DIExpression()), !dbg !5393
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5394, metadata !DIExpression()), !dbg !5393
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5393
  %cmp = icmp sge i32 %0, 0, !dbg !5393
  %conv = zext i1 %cmp to i32, !dbg !5393
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5393
  %tobool = icmp ne %struct.VEC_rtx_base* %1, null, !dbg !5393
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5393

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5393
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !5393
  %3 = load i32, i32* %alloc, align 4, !dbg !5393
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5393
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 0, !dbg !5393
  %5 = load i32, i32* %num, align 8, !dbg !5393
  %sub = sub i32 %3, %5, !dbg !5393
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5393
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5393
  %conv2 = zext i1 %cmp1 to i32, !dbg !5393
  br label %cond.end, !dbg !5393

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5393
  %tobool3 = icmp ne i32 %7, 0, !dbg !5393
  %lnot = xor i1 %tobool3, true, !dbg !5393
  %lnot.ext = zext i1 %lnot to i32, !dbg !5393
  br label %cond.end, !dbg !5393

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5393
  ret i32 %cond, !dbg !5393
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %vec_, i32 %ix_, %struct.rtx_def** %ptr) #0 !dbg !5395 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !5398, metadata !DIExpression()), !dbg !5399
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5400, metadata !DIExpression()), !dbg !5399
  store %struct.rtx_def** %ptr, %struct.rtx_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ptr.addr, metadata !5401, metadata !DIExpression()), !dbg !5399
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5402
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !5402
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5402

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5402
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5402
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !5402
  %3 = load i32, i32* %num, align 8, !dbg !5402
  %cmp = icmp ult i32 %1, %3, !dbg !5402
  br i1 %cmp, label %if.then, label %if.else, !dbg !5399

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !5404
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !5404
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5404
  %idxprom = zext i32 %5 to i64, !dbg !5404
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !5404
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5404
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %ptr.addr, align 8, !dbg !5404
  store %struct.rtx_def* %6, %struct.rtx_def** %7, align 8, !dbg !5404
  store i32 1, i32* %retval, align 4, !dbg !5404
  br label %return, !dbg !5404

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %ptr.addr, align 8, !dbg !5406
  store %struct.rtx_def* null, %struct.rtx_def** %8, align 8, !dbg !5406
  store i32 0, i32* %retval, align 4, !dbg !5406
  br label %return, !dbg !5406

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5399
  ret i32 %9, !dbg !5399
}

declare dso_local %struct.rtx_def* @simplify_gen_unary(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %vec_) #0 !dbg !5408 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !5411, metadata !DIExpression()), !dbg !5412
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5413
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %0, align 8, !dbg !5413
  %tobool = icmp ne %struct.VEC_rtx_heap* %1, null, !dbg !5413
  br i1 %tobool, label %if.then, label %if.end, !dbg !5412

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5413
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %2, align 8, !dbg !5413
  %4 = bitcast %struct.VEC_rtx_heap* %3 to i8*, !dbg !5413
  call void @free(i8* %4), !dbg !5413
  br label %if.end, !dbg !5413

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !5412
  store %struct.VEC_rtx_heap* null, %struct.VEC_rtx_heap** %5, align 8, !dbg !5412
  ret void, !dbg !5412
}

declare dso_local i32 @average_num_loop_insns(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @decide_unroll_constant_iterations(%struct.loop* %loop, i32 %flags) #0 !dbg !5415 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %nunroll = alloca i32, align 4
  %nunroll_by_av = alloca i32, align 4
  %best_copies = alloca i32, align 4
  %best_unroll = alloca i32, align 4
  %n_copies = alloca i32, align 4
  %i = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  %exit_mod = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5416, metadata !DIExpression()), !dbg !5417
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5418, metadata !DIExpression()), !dbg !5419
  call void @llvm.dbg.declare(metadata i32* %nunroll, metadata !5420, metadata !DIExpression()), !dbg !5421
  call void @llvm.dbg.declare(metadata i32* %nunroll_by_av, metadata !5422, metadata !DIExpression()), !dbg !5423
  call void @llvm.dbg.declare(metadata i32* %best_copies, metadata !5424, metadata !DIExpression()), !dbg !5425
  call void @llvm.dbg.declare(metadata i32* %best_unroll, metadata !5426, metadata !DIExpression()), !dbg !5427
  store i32 0, i32* %best_unroll, align 4, !dbg !5427
  call void @llvm.dbg.declare(metadata i32* %n_copies, metadata !5428, metadata !DIExpression()), !dbg !5429
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5430, metadata !DIExpression()), !dbg !5431
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !5432, metadata !DIExpression()), !dbg !5433
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5434
  %and = and i32 %0, 2, !dbg !5436
  %tobool = icmp ne i32 %and, 0, !dbg !5436
  br i1 %tobool, label %if.end, label %if.then, !dbg !5437

if.then:                                          ; preds = %entry
  br label %if.end93, !dbg !5438

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5440
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !5440
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5442

if.then2:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5443
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.20, i64 0, i64 0)), !dbg !5444
  br label %if.end3, !dbg !5444

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5445
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %3, i64 26, !dbg !5445
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5445
  %4 = load i32, i32* %value, align 8, !dbg !5445
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5446
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 1, !dbg !5447
  %6 = load i32, i32* %ninsns, align 4, !dbg !5447
  %div = udiv i32 %4, %6, !dbg !5448
  store i32 %div, i32* %nunroll, align 4, !dbg !5449
  %7 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5450
  %arrayidx4 = getelementptr inbounds %struct.param_info, %struct.param_info* %7, i64 27, !dbg !5450
  %value5 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx4, i32 0, i32 1, !dbg !5450
  %8 = load i32, i32* %value5, align 8, !dbg !5450
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5451
  %av_ninsns = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 5, !dbg !5452
  %10 = load i32, i32* %av_ninsns, align 8, !dbg !5452
  %div6 = udiv i32 %8, %10, !dbg !5453
  store i32 %div6, i32* %nunroll_by_av, align 4, !dbg !5454
  %11 = load i32, i32* %nunroll, align 4, !dbg !5455
  %12 = load i32, i32* %nunroll_by_av, align 4, !dbg !5457
  %cmp = icmp ugt i32 %11, %12, !dbg !5458
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !5459

if.then7:                                         ; preds = %if.end3
  %13 = load i32, i32* %nunroll_by_av, align 4, !dbg !5460
  store i32 %13, i32* %nunroll, align 4, !dbg !5461
  br label %if.end8, !dbg !5462

if.end8:                                          ; preds = %if.then7, %if.end3
  %14 = load i32, i32* %nunroll, align 4, !dbg !5463
  %15 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5465
  %arrayidx9 = getelementptr inbounds %struct.param_info, %struct.param_info* %15, i64 28, !dbg !5465
  %value10 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx9, i32 0, i32 1, !dbg !5465
  %16 = load i32, i32* %value10, align 8, !dbg !5465
  %cmp11 = icmp ugt i32 %14, %16, !dbg !5466
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5467

if.then12:                                        ; preds = %if.end8
  %17 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5468
  %arrayidx13 = getelementptr inbounds %struct.param_info, %struct.param_info* %17, i64 28, !dbg !5468
  %value14 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx13, i32 0, i32 1, !dbg !5468
  %18 = load i32, i32* %value14, align 8, !dbg !5468
  store i32 %18, i32* %nunroll, align 4, !dbg !5469
  br label %if.end15, !dbg !5470

if.end15:                                         ; preds = %if.then12, %if.end8
  %19 = load i32, i32* %nunroll, align 4, !dbg !5471
  %cmp16 = icmp ule i32 %19, 1, !dbg !5473
  br i1 %cmp16, label %if.then17, label %if.end22, !dbg !5474

if.then17:                                        ; preds = %if.end15
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5475
  %tobool18 = icmp ne %struct._IO_FILE* %20, null, !dbg !5475
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !5478

if.then19:                                        ; preds = %if.then17
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5479
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)), !dbg !5480
  br label %if.end21, !dbg !5480

if.end21:                                         ; preds = %if.then19, %if.then17
  br label %if.end93, !dbg !5481

if.end22:                                         ; preds = %if.end15
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5482
  %call23 = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %22), !dbg !5483
  store %struct.niter_desc* %call23, %struct.niter_desc** %desc, align 8, !dbg !5484
  %23 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5485
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %23, i32 0, i32 2, !dbg !5487
  %24 = load i8, i8* %simple_p, align 8, !dbg !5487
  %tobool24 = icmp ne i8 %24, 0, !dbg !5485
  br i1 %tobool24, label %lor.lhs.false, label %if.then28, !dbg !5488

lor.lhs.false:                                    ; preds = %if.end22
  %25 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5489
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %25, i32 0, i32 3, !dbg !5490
  %26 = load i8, i8* %const_iter, align 1, !dbg !5490
  %tobool25 = icmp ne i8 %26, 0, !dbg !5489
  br i1 %tobool25, label %lor.lhs.false26, label %if.then28, !dbg !5491

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %27 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5492
  %assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %27, i32 0, i32 6, !dbg !5493
  %28 = load %struct.rtx_def*, %struct.rtx_def** %assumptions, align 8, !dbg !5493
  %tobool27 = icmp ne %struct.rtx_def* %28, null, !dbg !5492
  br i1 %tobool27, label %if.then28, label %if.end33, !dbg !5494

if.then28:                                        ; preds = %lor.lhs.false26, %lor.lhs.false, %if.end22
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5495
  %tobool29 = icmp ne %struct._IO_FILE* %29, null, !dbg !5495
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !5498

if.then30:                                        ; preds = %if.then28
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5499
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.11, i64 0, i64 0)), !dbg !5500
  br label %if.end32, !dbg !5500

if.end32:                                         ; preds = %if.then30, %if.then28
  br label %if.end93, !dbg !5501

if.end33:                                         ; preds = %lor.lhs.false26
  %31 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5502
  %niter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %31, i32 0, i32 4, !dbg !5504
  %32 = load i64, i64* %niter, align 8, !dbg !5504
  %33 = load i32, i32* %nunroll, align 4, !dbg !5505
  %mul = mul i32 2, %33, !dbg !5506
  %conv = zext i32 %mul to i64, !dbg !5507
  %cmp34 = icmp ult i64 %32, %conv, !dbg !5508
  br i1 %cmp34, label %if.then36, label %if.end41, !dbg !5509

if.then36:                                        ; preds = %if.end33
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5510
  %tobool37 = icmp ne %struct._IO_FILE* %34, null, !dbg !5510
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !5513

if.then38:                                        ; preds = %if.then36
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5514
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.21, i64 0, i64 0)), !dbg !5515
  br label %if.end40, !dbg !5515

if.end40:                                         ; preds = %if.then38, %if.then36
  br label %if.end93, !dbg !5516

if.end41:                                         ; preds = %if.end33
  %36 = load i32, i32* %nunroll, align 4, !dbg !5517
  %mul42 = mul i32 2, %36, !dbg !5518
  %add = add i32 %mul42, 10, !dbg !5519
  store i32 %add, i32* %best_copies, align 4, !dbg !5520
  %37 = load i32, i32* %nunroll, align 4, !dbg !5521
  %mul43 = mul i32 2, %37, !dbg !5522
  %add44 = add i32 %mul43, 2, !dbg !5523
  store i32 %add44, i32* %i, align 4, !dbg !5524
  %38 = load i32, i32* %i, align 4, !dbg !5525
  %sub = sub i32 %38, 1, !dbg !5527
  %conv45 = zext i32 %sub to i64, !dbg !5525
  %39 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5528
  %niter46 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %39, i32 0, i32 4, !dbg !5529
  %40 = load i64, i64* %niter46, align 8, !dbg !5529
  %cmp47 = icmp uge i64 %conv45, %40, !dbg !5530
  br i1 %cmp47, label %if.then49, label %if.end53, !dbg !5531

if.then49:                                        ; preds = %if.end41
  %41 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5532
  %niter50 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %41, i32 0, i32 4, !dbg !5533
  %42 = load i64, i64* %niter50, align 8, !dbg !5533
  %sub51 = sub i64 %42, 2, !dbg !5534
  %conv52 = trunc i64 %sub51 to i32, !dbg !5532
  store i32 %conv52, i32* %i, align 4, !dbg !5535
  br label %if.end53, !dbg !5536

if.end53:                                         ; preds = %if.then49, %if.end41
  br label %for.cond, !dbg !5537

for.cond:                                         ; preds = %for.inc, %if.end53
  %43 = load i32, i32* %i, align 4, !dbg !5538
  %44 = load i32, i32* %nunroll, align 4, !dbg !5541
  %sub54 = sub i32 %44, 1, !dbg !5542
  %cmp55 = icmp uge i32 %43, %sub54, !dbg !5543
  br i1 %cmp55, label %for.body, label %for.end, !dbg !5544

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %exit_mod, metadata !5545, metadata !DIExpression()), !dbg !5547
  %45 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5548
  %niter57 = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %45, i32 0, i32 4, !dbg !5549
  %46 = load i64, i64* %niter57, align 8, !dbg !5549
  %47 = load i32, i32* %i, align 4, !dbg !5550
  %add58 = add i32 %47, 1, !dbg !5551
  %conv59 = zext i32 %add58 to i64, !dbg !5552
  %rem = urem i64 %46, %conv59, !dbg !5553
  %conv60 = trunc i64 %rem to i32, !dbg !5548
  store i32 %conv60, i32* %exit_mod, align 4, !dbg !5547
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5554
  %call61 = call zeroext i8 @loop_exit_at_end_p(%struct.loop* %48), !dbg !5556
  %tobool62 = icmp ne i8 %call61, 0, !dbg !5556
  br i1 %tobool62, label %if.else, label %if.then63, !dbg !5557

if.then63:                                        ; preds = %for.body
  %49 = load i32, i32* %exit_mod, align 4, !dbg !5558
  %50 = load i32, i32* %i, align 4, !dbg !5559
  %add64 = add i32 %49, %50, !dbg !5560
  %add65 = add i32 %add64, 1, !dbg !5561
  store i32 %add65, i32* %n_copies, align 4, !dbg !5562
  br label %if.end77, !dbg !5563

if.else:                                          ; preds = %for.body
  %51 = load i32, i32* %exit_mod, align 4, !dbg !5564
  %52 = load i32, i32* %i, align 4, !dbg !5566
  %cmp66 = icmp ne i32 %51, %52, !dbg !5567
  br i1 %cmp66, label %if.then71, label %lor.lhs.false68, !dbg !5568

lor.lhs.false68:                                  ; preds = %if.else
  %53 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5569
  %noloop_assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %53, i32 0, i32 7, !dbg !5570
  %54 = load %struct.rtx_def*, %struct.rtx_def** %noloop_assumptions, align 8, !dbg !5570
  %cmp69 = icmp ne %struct.rtx_def* %54, null, !dbg !5571
  br i1 %cmp69, label %if.then71, label %if.else74, !dbg !5572

if.then71:                                        ; preds = %lor.lhs.false68, %if.else
  %55 = load i32, i32* %exit_mod, align 4, !dbg !5573
  %56 = load i32, i32* %i, align 4, !dbg !5574
  %add72 = add i32 %55, %56, !dbg !5575
  %add73 = add i32 %add72, 2, !dbg !5576
  store i32 %add73, i32* %n_copies, align 4, !dbg !5577
  br label %if.end76, !dbg !5578

if.else74:                                        ; preds = %lor.lhs.false68
  %57 = load i32, i32* %i, align 4, !dbg !5579
  %add75 = add i32 %57, 1, !dbg !5580
  store i32 %add75, i32* %n_copies, align 4, !dbg !5581
  br label %if.end76

if.end76:                                         ; preds = %if.else74, %if.then71
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then63
  %58 = load i32, i32* %n_copies, align 4, !dbg !5582
  %59 = load i32, i32* %best_copies, align 4, !dbg !5584
  %cmp78 = icmp ult i32 %58, %59, !dbg !5585
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !5586

if.then80:                                        ; preds = %if.end77
  %60 = load i32, i32* %n_copies, align 4, !dbg !5587
  store i32 %60, i32* %best_copies, align 4, !dbg !5589
  %61 = load i32, i32* %i, align 4, !dbg !5590
  store i32 %61, i32* %best_unroll, align 4, !dbg !5591
  br label %if.end81, !dbg !5592

if.end81:                                         ; preds = %if.then80, %if.end77
  br label %for.inc, !dbg !5593

for.inc:                                          ; preds = %if.end81
  %62 = load i32, i32* %i, align 4, !dbg !5594
  %dec = add i32 %62, -1, !dbg !5594
  store i32 %dec, i32* %i, align 4, !dbg !5594
  br label %for.cond, !dbg !5595, !llvm.loop !5596

for.end:                                          ; preds = %for.cond
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5598
  %tobool82 = icmp ne %struct._IO_FILE* %63, null, !dbg !5598
  br i1 %tobool82, label %if.then83, label %if.end86, !dbg !5600

if.then83:                                        ; preds = %for.end
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5601
  %65 = load i32, i32* %best_unroll, align 4, !dbg !5602
  %add84 = add i32 %65, 1, !dbg !5603
  %66 = load i32, i32* %best_copies, align 4, !dbg !5604
  %67 = load i32, i32* %nunroll, align 4, !dbg !5605
  %call85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.22, i64 0, i64 0), i32 %add84, i32 %66, i32 %67), !dbg !5606
  br label %if.end86, !dbg !5606

if.end86:                                         ; preds = %if.then83, %for.end
  %68 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5607
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 4, !dbg !5608
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !5609
  store i32 3, i32* %decision, align 8, !dbg !5610
  %69 = load i32, i32* %best_unroll, align 4, !dbg !5611
  %70 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5612
  %lpt_decision87 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 4, !dbg !5613
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision87, i32 0, i32 1, !dbg !5614
  store i32 %69, i32* %times, align 4, !dbg !5615
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5616
  %tobool88 = icmp ne %struct._IO_FILE* %71, null, !dbg !5616
  br i1 %tobool88, label %if.then89, label %if.end93, !dbg !5618

if.then89:                                        ; preds = %if.end86
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5619
  %73 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5620
  %lpt_decision90 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 4, !dbg !5621
  %times91 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision90, i32 0, i32 1, !dbg !5622
  %74 = load i32, i32* %times91, align 4, !dbg !5622
  %call92 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.23, i64 0, i64 0), i32 %74), !dbg !5623
  br label %if.end93, !dbg !5623

if.end93:                                         ; preds = %if.then, %if.end21, %if.end32, %if.end40, %if.then89, %if.end86
  ret void, !dbg !5624
}

; Function Attrs: noinline nounwind uwtable
define internal void @decide_unroll_runtime_iterations(%struct.loop* %loop, i32 %flags) #0 !dbg !5625 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %nunroll = alloca i32, align 4
  %nunroll_by_av = alloca i32, align 4
  %i = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5626, metadata !DIExpression()), !dbg !5627
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5628, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.declare(metadata i32* %nunroll, metadata !5630, metadata !DIExpression()), !dbg !5631
  call void @llvm.dbg.declare(metadata i32* %nunroll_by_av, metadata !5632, metadata !DIExpression()), !dbg !5633
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5634, metadata !DIExpression()), !dbg !5635
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !5636, metadata !DIExpression()), !dbg !5637
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5638
  %and = and i32 %0, 2, !dbg !5640
  %tobool = icmp ne i32 %and, 0, !dbg !5640
  br i1 %tobool, label %if.end, label %if.then, !dbg !5641

if.then:                                          ; preds = %entry
  br label %if.end57, !dbg !5642

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5644
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !5644
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5646

if.then2:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5647
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.24, i64 0, i64 0)), !dbg !5648
  br label %if.end3, !dbg !5648

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5649
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %3, i64 26, !dbg !5649
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5649
  %4 = load i32, i32* %value, align 8, !dbg !5649
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5650
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 1, !dbg !5651
  %6 = load i32, i32* %ninsns, align 4, !dbg !5651
  %div = udiv i32 %4, %6, !dbg !5652
  store i32 %div, i32* %nunroll, align 4, !dbg !5653
  %7 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5654
  %arrayidx4 = getelementptr inbounds %struct.param_info, %struct.param_info* %7, i64 27, !dbg !5654
  %value5 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx4, i32 0, i32 1, !dbg !5654
  %8 = load i32, i32* %value5, align 8, !dbg !5654
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5655
  %av_ninsns = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 5, !dbg !5656
  %10 = load i32, i32* %av_ninsns, align 8, !dbg !5656
  %div6 = udiv i32 %8, %10, !dbg !5657
  store i32 %div6, i32* %nunroll_by_av, align 4, !dbg !5658
  %11 = load i32, i32* %nunroll, align 4, !dbg !5659
  %12 = load i32, i32* %nunroll_by_av, align 4, !dbg !5661
  %cmp = icmp ugt i32 %11, %12, !dbg !5662
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !5663

if.then7:                                         ; preds = %if.end3
  %13 = load i32, i32* %nunroll_by_av, align 4, !dbg !5664
  store i32 %13, i32* %nunroll, align 4, !dbg !5665
  br label %if.end8, !dbg !5666

if.end8:                                          ; preds = %if.then7, %if.end3
  %14 = load i32, i32* %nunroll, align 4, !dbg !5667
  %15 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5669
  %arrayidx9 = getelementptr inbounds %struct.param_info, %struct.param_info* %15, i64 28, !dbg !5669
  %value10 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx9, i32 0, i32 1, !dbg !5669
  %16 = load i32, i32* %value10, align 8, !dbg !5669
  %cmp11 = icmp ugt i32 %14, %16, !dbg !5670
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5671

if.then12:                                        ; preds = %if.end8
  %17 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5672
  %arrayidx13 = getelementptr inbounds %struct.param_info, %struct.param_info* %17, i64 28, !dbg !5672
  %value14 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx13, i32 0, i32 1, !dbg !5672
  %18 = load i32, i32* %value14, align 8, !dbg !5672
  store i32 %18, i32* %nunroll, align 4, !dbg !5673
  br label %if.end15, !dbg !5674

if.end15:                                         ; preds = %if.then12, %if.end8
  %19 = load i32, i32* %nunroll, align 4, !dbg !5675
  %cmp16 = icmp ule i32 %19, 1, !dbg !5677
  br i1 %cmp16, label %if.then17, label %if.end22, !dbg !5678

if.then17:                                        ; preds = %if.end15
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5679
  %tobool18 = icmp ne %struct._IO_FILE* %20, null, !dbg !5679
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !5682

if.then19:                                        ; preds = %if.then17
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5683
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)), !dbg !5684
  br label %if.end21, !dbg !5684

if.end21:                                         ; preds = %if.then19, %if.then17
  br label %if.end57, !dbg !5685

if.end22:                                         ; preds = %if.end15
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5686
  %call23 = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %22), !dbg !5687
  store %struct.niter_desc* %call23, %struct.niter_desc** %desc, align 8, !dbg !5688
  %23 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5689
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %23, i32 0, i32 2, !dbg !5691
  %24 = load i8, i8* %simple_p, align 8, !dbg !5691
  %tobool24 = icmp ne i8 %24, 0, !dbg !5689
  br i1 %tobool24, label %lor.lhs.false, label %if.then26, !dbg !5692

lor.lhs.false:                                    ; preds = %if.end22
  %25 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5693
  %assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %25, i32 0, i32 6, !dbg !5694
  %26 = load %struct.rtx_def*, %struct.rtx_def** %assumptions, align 8, !dbg !5694
  %tobool25 = icmp ne %struct.rtx_def* %26, null, !dbg !5693
  br i1 %tobool25, label %if.then26, label %if.end31, !dbg !5695

if.then26:                                        ; preds = %lor.lhs.false, %if.end22
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5696
  %tobool27 = icmp ne %struct._IO_FILE* %27, null, !dbg !5696
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !5699

if.then28:                                        ; preds = %if.then26
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5700
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.25, i64 0, i64 0)), !dbg !5701
  br label %if.end30, !dbg !5701

if.end30:                                         ; preds = %if.then28, %if.then26
  br label %if.end57, !dbg !5702

if.end31:                                         ; preds = %lor.lhs.false
  %29 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5703
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %29, i32 0, i32 3, !dbg !5705
  %30 = load i8, i8* %const_iter, align 1, !dbg !5705
  %tobool32 = icmp ne i8 %30, 0, !dbg !5703
  br i1 %tobool32, label %if.then33, label %if.end38, !dbg !5706

if.then33:                                        ; preds = %if.end31
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5707
  %tobool34 = icmp ne %struct._IO_FILE* %31, null, !dbg !5707
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !5710

if.then35:                                        ; preds = %if.then33
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5711
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.26, i64 0, i64 0)), !dbg !5712
  br label %if.end37, !dbg !5712

if.end37:                                         ; preds = %if.then35, %if.then33
  br label %if.end57, !dbg !5713

if.end38:                                         ; preds = %if.end31
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5714
  %header = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 2, !dbg !5716
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5716
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 8, !dbg !5717
  %35 = load i64, i64* %count, align 8, !dbg !5717
  %tobool39 = icmp ne i64 %35, 0, !dbg !5714
  br i1 %tobool39, label %land.lhs.true, label %if.end47, !dbg !5718

land.lhs.true:                                    ; preds = %if.end38
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5719
  %call40 = call i32 @expected_loop_iterations(%struct.loop* %36), !dbg !5720
  %37 = load i32, i32* %nunroll, align 4, !dbg !5721
  %mul = mul i32 2, %37, !dbg !5722
  %cmp41 = icmp ult i32 %call40, %mul, !dbg !5723
  br i1 %cmp41, label %if.then42, label %if.end47, !dbg !5724

if.then42:                                        ; preds = %land.lhs.true
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5725
  %tobool43 = icmp ne %struct._IO_FILE* %38, null, !dbg !5725
  br i1 %tobool43, label %if.then44, label %if.end46, !dbg !5728

if.then44:                                        ; preds = %if.then42
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5729
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.21, i64 0, i64 0)), !dbg !5730
  br label %if.end46, !dbg !5730

if.end46:                                         ; preds = %if.then44, %if.then42
  br label %if.end57, !dbg !5731

if.end47:                                         ; preds = %land.lhs.true, %if.end38
  store i32 1, i32* %i, align 4, !dbg !5732
  br label %for.cond, !dbg !5734

for.cond:                                         ; preds = %for.inc, %if.end47
  %40 = load i32, i32* %i, align 4, !dbg !5735
  %mul48 = mul i32 2, %40, !dbg !5737
  %41 = load i32, i32* %nunroll, align 4, !dbg !5738
  %cmp49 = icmp ule i32 %mul48, %41, !dbg !5739
  br i1 %cmp49, label %for.body, label %for.end, !dbg !5740

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5741

for.inc:                                          ; preds = %for.body
  %42 = load i32, i32* %i, align 4, !dbg !5742
  %mul50 = mul i32 %42, 2, !dbg !5742
  store i32 %mul50, i32* %i, align 4, !dbg !5742
  br label %for.cond, !dbg !5743, !llvm.loop !5744

for.end:                                          ; preds = %for.cond
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5746
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 4, !dbg !5747
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !5748
  store i32 4, i32* %decision, align 8, !dbg !5749
  %44 = load i32, i32* %i, align 4, !dbg !5750
  %sub = sub i32 %44, 1, !dbg !5751
  %45 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5752
  %lpt_decision51 = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 4, !dbg !5753
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision51, i32 0, i32 1, !dbg !5754
  store i32 %sub, i32* %times, align 4, !dbg !5755
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5756
  %tobool52 = icmp ne %struct._IO_FILE* %46, null, !dbg !5756
  br i1 %tobool52, label %if.then53, label %if.end57, !dbg !5758

if.then53:                                        ; preds = %for.end
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5759
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5760
  %lpt_decision54 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 4, !dbg !5761
  %times55 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision54, i32 0, i32 1, !dbg !5762
  %49 = load i32, i32* %times55, align 4, !dbg !5762
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.27, i64 0, i64 0), i32 %49), !dbg !5763
  br label %if.end57, !dbg !5763

if.end57:                                         ; preds = %if.then, %if.end21, %if.end30, %if.end37, %if.end46, %if.then53, %for.end
  ret void, !dbg !5764
}

; Function Attrs: noinline nounwind uwtable
define internal void @decide_unroll_stupid(%struct.loop* %loop, i32 %flags) #0 !dbg !5765 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %nunroll = alloca i32, align 4
  %nunroll_by_av = alloca i32, align 4
  %i = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5766, metadata !DIExpression()), !dbg !5767
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5768, metadata !DIExpression()), !dbg !5769
  call void @llvm.dbg.declare(metadata i32* %nunroll, metadata !5770, metadata !DIExpression()), !dbg !5771
  call void @llvm.dbg.declare(metadata i32* %nunroll_by_av, metadata !5772, metadata !DIExpression()), !dbg !5773
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5774, metadata !DIExpression()), !dbg !5775
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !5776, metadata !DIExpression()), !dbg !5777
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5778
  %and = and i32 %0, 4, !dbg !5780
  %tobool = icmp ne i32 %and, 0, !dbg !5780
  br i1 %tobool, label %if.end, label %if.then, !dbg !5781

if.then:                                          ; preds = %entry
  br label %if.end62, !dbg !5782

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5784
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !5784
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5786

if.then2:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5787
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.28, i64 0, i64 0)), !dbg !5788
  br label %if.end3, !dbg !5788

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5789
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %3, i64 26, !dbg !5789
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5789
  %4 = load i32, i32* %value, align 8, !dbg !5789
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5790
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 1, !dbg !5791
  %6 = load i32, i32* %ninsns, align 4, !dbg !5791
  %div = udiv i32 %4, %6, !dbg !5792
  store i32 %div, i32* %nunroll, align 4, !dbg !5793
  %7 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5794
  %arrayidx4 = getelementptr inbounds %struct.param_info, %struct.param_info* %7, i64 27, !dbg !5794
  %value5 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx4, i32 0, i32 1, !dbg !5794
  %8 = load i32, i32* %value5, align 8, !dbg !5794
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5795
  %av_ninsns = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 5, !dbg !5796
  %10 = load i32, i32* %av_ninsns, align 8, !dbg !5796
  %div6 = udiv i32 %8, %10, !dbg !5797
  store i32 %div6, i32* %nunroll_by_av, align 4, !dbg !5798
  %11 = load i32, i32* %nunroll, align 4, !dbg !5799
  %12 = load i32, i32* %nunroll_by_av, align 4, !dbg !5801
  %cmp = icmp ugt i32 %11, %12, !dbg !5802
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !5803

if.then7:                                         ; preds = %if.end3
  %13 = load i32, i32* %nunroll_by_av, align 4, !dbg !5804
  store i32 %13, i32* %nunroll, align 4, !dbg !5805
  br label %if.end8, !dbg !5806

if.end8:                                          ; preds = %if.then7, %if.end3
  %14 = load i32, i32* %nunroll, align 4, !dbg !5807
  %15 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5809
  %arrayidx9 = getelementptr inbounds %struct.param_info, %struct.param_info* %15, i64 28, !dbg !5809
  %value10 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx9, i32 0, i32 1, !dbg !5809
  %16 = load i32, i32* %value10, align 8, !dbg !5809
  %cmp11 = icmp ugt i32 %14, %16, !dbg !5810
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5811

if.then12:                                        ; preds = %if.end8
  %17 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5812
  %arrayidx13 = getelementptr inbounds %struct.param_info, %struct.param_info* %17, i64 28, !dbg !5812
  %value14 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx13, i32 0, i32 1, !dbg !5812
  %18 = load i32, i32* %value14, align 8, !dbg !5812
  store i32 %18, i32* %nunroll, align 4, !dbg !5813
  br label %if.end15, !dbg !5814

if.end15:                                         ; preds = %if.then12, %if.end8
  %19 = load i32, i32* %nunroll, align 4, !dbg !5815
  %cmp16 = icmp ule i32 %19, 1, !dbg !5817
  br i1 %cmp16, label %if.then17, label %if.end22, !dbg !5818

if.then17:                                        ; preds = %if.end15
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5819
  %tobool18 = icmp ne %struct._IO_FILE* %20, null, !dbg !5819
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !5822

if.then19:                                        ; preds = %if.then17
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5823
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)), !dbg !5824
  br label %if.end21, !dbg !5824

if.end21:                                         ; preds = %if.then19, %if.then17
  br label %if.end62, !dbg !5825

if.end22:                                         ; preds = %if.end15
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5826
  %call23 = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %22), !dbg !5827
  store %struct.niter_desc* %call23, %struct.niter_desc** %desc, align 8, !dbg !5828
  %23 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5829
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %23, i32 0, i32 2, !dbg !5831
  %24 = load i8, i8* %simple_p, align 8, !dbg !5831
  %conv = zext i8 %24 to i32, !dbg !5829
  %tobool24 = icmp ne i32 %conv, 0, !dbg !5829
  br i1 %tobool24, label %land.lhs.true, label %if.end31, !dbg !5832

land.lhs.true:                                    ; preds = %if.end22
  %25 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5833
  %assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %25, i32 0, i32 6, !dbg !5834
  %26 = load %struct.rtx_def*, %struct.rtx_def** %assumptions, align 8, !dbg !5834
  %tobool25 = icmp ne %struct.rtx_def* %26, null, !dbg !5833
  br i1 %tobool25, label %if.end31, label %if.then26, !dbg !5835

if.then26:                                        ; preds = %land.lhs.true
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5836
  %tobool27 = icmp ne %struct._IO_FILE* %27, null, !dbg !5836
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !5839

if.then28:                                        ; preds = %if.then26
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5840
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)), !dbg !5841
  br label %if.end30, !dbg !5841

if.end30:                                         ; preds = %if.then28, %if.then26
  br label %if.end62, !dbg !5842

if.end31:                                         ; preds = %land.lhs.true, %if.end22
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5843
  %call32 = call i32 @num_loop_branches(%struct.loop* %29), !dbg !5845
  %cmp33 = icmp ugt i32 %call32, 1, !dbg !5846
  br i1 %cmp33, label %if.then35, label %if.end40, !dbg !5847

if.then35:                                        ; preds = %if.end31
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5848
  %tobool36 = icmp ne %struct._IO_FILE* %30, null, !dbg !5848
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !5851

if.then37:                                        ; preds = %if.then35
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5852
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.30, i64 0, i64 0)), !dbg !5853
  br label %if.end39, !dbg !5853

if.end39:                                         ; preds = %if.then37, %if.then35
  br label %if.end62, !dbg !5854

if.end40:                                         ; preds = %if.end31
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5855
  %header = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 2, !dbg !5857
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5857
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 8, !dbg !5858
  %34 = load i64, i64* %count, align 8, !dbg !5858
  %tobool41 = icmp ne i64 %34, 0, !dbg !5855
  br i1 %tobool41, label %land.lhs.true42, label %if.end51, !dbg !5859

land.lhs.true42:                                  ; preds = %if.end40
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5860
  %call43 = call i32 @expected_loop_iterations(%struct.loop* %35), !dbg !5861
  %36 = load i32, i32* %nunroll, align 4, !dbg !5862
  %mul = mul i32 2, %36, !dbg !5863
  %cmp44 = icmp ult i32 %call43, %mul, !dbg !5864
  br i1 %cmp44, label %if.then46, label %if.end51, !dbg !5865

if.then46:                                        ; preds = %land.lhs.true42
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5866
  %tobool47 = icmp ne %struct._IO_FILE* %37, null, !dbg !5866
  br i1 %tobool47, label %if.then48, label %if.end50, !dbg !5869

if.then48:                                        ; preds = %if.then46
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5870
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.21, i64 0, i64 0)), !dbg !5871
  br label %if.end50, !dbg !5871

if.end50:                                         ; preds = %if.then48, %if.then46
  br label %if.end62, !dbg !5872

if.end51:                                         ; preds = %land.lhs.true42, %if.end40
  store i32 1, i32* %i, align 4, !dbg !5873
  br label %for.cond, !dbg !5875

for.cond:                                         ; preds = %for.inc, %if.end51
  %39 = load i32, i32* %i, align 4, !dbg !5876
  %mul52 = mul i32 2, %39, !dbg !5878
  %40 = load i32, i32* %nunroll, align 4, !dbg !5879
  %cmp53 = icmp ule i32 %mul52, %40, !dbg !5880
  br i1 %cmp53, label %for.body, label %for.end, !dbg !5881

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5882

for.inc:                                          ; preds = %for.body
  %41 = load i32, i32* %i, align 4, !dbg !5883
  %mul55 = mul i32 %41, 2, !dbg !5883
  store i32 %mul55, i32* %i, align 4, !dbg !5883
  br label %for.cond, !dbg !5884, !llvm.loop !5885

for.end:                                          ; preds = %for.cond
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5887
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 4, !dbg !5888
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !5889
  store i32 5, i32* %decision, align 8, !dbg !5890
  %43 = load i32, i32* %i, align 4, !dbg !5891
  %sub = sub i32 %43, 1, !dbg !5892
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5893
  %lpt_decision56 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 4, !dbg !5894
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision56, i32 0, i32 1, !dbg !5895
  store i32 %sub, i32* %times, align 4, !dbg !5896
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5897
  %tobool57 = icmp ne %struct._IO_FILE* %45, null, !dbg !5897
  br i1 %tobool57, label %if.then58, label %if.end62, !dbg !5899

if.then58:                                        ; preds = %for.end
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5900
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5901
  %lpt_decision59 = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 4, !dbg !5902
  %times60 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision59, i32 0, i32 1, !dbg !5903
  %48 = load i32, i32* %times60, align 4, !dbg !5903
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.31, i64 0, i64 0), i32 %48), !dbg !5904
  br label %if.end62, !dbg !5904

if.end62:                                         ; preds = %if.then, %if.end21, %if.end30, %if.end39, %if.end50, %if.then58, %for.end
  ret void, !dbg !5905
}

; Function Attrs: noinline nounwind uwtable
define internal void @decide_peel_simple(%struct.loop* %loop, i32 %flags) #0 !dbg !5906 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %npeel = alloca i32, align 4
  %desc = alloca %struct.niter_desc*, align 8
  %niter = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5907, metadata !DIExpression()), !dbg !5908
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5909, metadata !DIExpression()), !dbg !5910
  call void @llvm.dbg.declare(metadata i32* %npeel, metadata !5911, metadata !DIExpression()), !dbg !5912
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !5913, metadata !DIExpression()), !dbg !5914
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5915
  %and = and i32 %0, 1, !dbg !5917
  %tobool = icmp ne i32 %and, 0, !dbg !5917
  br i1 %tobool, label %if.end, label %if.then, !dbg !5918

if.then:                                          ; preds = %entry
  br label %if.end65, !dbg !5919

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5921
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !5921
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5923

if.then2:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5924
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i64 0, i64 0)), !dbg !5925
  br label %if.end3, !dbg !5925

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5926
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %3, i64 29, !dbg !5926
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5926
  %4 = load i32, i32* %value, align 8, !dbg !5926
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5927
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 1, !dbg !5928
  %6 = load i32, i32* %ninsns, align 4, !dbg !5928
  %div = udiv i32 %4, %6, !dbg !5929
  store i32 %div, i32* %npeel, align 4, !dbg !5930
  %7 = load i32, i32* %npeel, align 4, !dbg !5931
  %8 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5933
  %arrayidx4 = getelementptr inbounds %struct.param_info, %struct.param_info* %8, i64 30, !dbg !5933
  %value5 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx4, i32 0, i32 1, !dbg !5933
  %9 = load i32, i32* %value5, align 8, !dbg !5933
  %cmp = icmp ugt i32 %7, %9, !dbg !5934
  br i1 %cmp, label %if.then6, label %if.end9, !dbg !5935

if.then6:                                         ; preds = %if.end3
  %10 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5936
  %arrayidx7 = getelementptr inbounds %struct.param_info, %struct.param_info* %10, i64 30, !dbg !5936
  %value8 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx7, i32 0, i32 1, !dbg !5936
  %11 = load i32, i32* %value8, align 8, !dbg !5936
  store i32 %11, i32* %npeel, align 4, !dbg !5937
  br label %if.end9, !dbg !5938

if.end9:                                          ; preds = %if.then6, %if.end3
  %12 = load i32, i32* %npeel, align 4, !dbg !5939
  %tobool10 = icmp ne i32 %12, 0, !dbg !5939
  br i1 %tobool10, label %if.end16, label %if.then11, !dbg !5941

if.then11:                                        ; preds = %if.end9
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5942
  %tobool12 = icmp ne %struct._IO_FILE* %13, null, !dbg !5942
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !5945

if.then13:                                        ; preds = %if.then11
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5946
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)), !dbg !5947
  br label %if.end15, !dbg !5947

if.end15:                                         ; preds = %if.then13, %if.then11
  br label %if.end65, !dbg !5948

if.end16:                                         ; preds = %if.end9
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5949
  %call17 = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %15), !dbg !5950
  store %struct.niter_desc* %call17, %struct.niter_desc** %desc, align 8, !dbg !5951
  %16 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5952
  %simple_p = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %16, i32 0, i32 2, !dbg !5954
  %17 = load i8, i8* %simple_p, align 8, !dbg !5954
  %conv = zext i8 %17 to i32, !dbg !5952
  %tobool18 = icmp ne i32 %conv, 0, !dbg !5952
  br i1 %tobool18, label %land.lhs.true, label %if.end28, !dbg !5955

land.lhs.true:                                    ; preds = %if.end16
  %18 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5956
  %assumptions = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %18, i32 0, i32 6, !dbg !5957
  %19 = load %struct.rtx_def*, %struct.rtx_def** %assumptions, align 8, !dbg !5957
  %tobool19 = icmp ne %struct.rtx_def* %19, null, !dbg !5956
  br i1 %tobool19, label %if.end28, label %land.lhs.true20, !dbg !5958

land.lhs.true20:                                  ; preds = %land.lhs.true
  %20 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !5959
  %const_iter = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %20, i32 0, i32 3, !dbg !5960
  %21 = load i8, i8* %const_iter, align 1, !dbg !5960
  %conv21 = zext i8 %21 to i32, !dbg !5959
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !5959
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !5961

if.then23:                                        ; preds = %land.lhs.true20
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5962
  %tobool24 = icmp ne %struct._IO_FILE* %22, null, !dbg !5962
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !5965

if.then25:                                        ; preds = %if.then23
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5966
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.26, i64 0, i64 0)), !dbg !5967
  br label %if.end27, !dbg !5967

if.end27:                                         ; preds = %if.then25, %if.then23
  br label %if.end65, !dbg !5968

if.end28:                                         ; preds = %land.lhs.true20, %land.lhs.true, %if.end16
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5969
  %call29 = call i32 @num_loop_branches(%struct.loop* %24), !dbg !5971
  %cmp30 = icmp ugt i32 %call29, 1, !dbg !5972
  br i1 %cmp30, label %if.then32, label %if.end37, !dbg !5973

if.then32:                                        ; preds = %if.end28
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5974
  %tobool33 = icmp ne %struct._IO_FILE* %25, null, !dbg !5974
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !5977

if.then34:                                        ; preds = %if.then32
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5978
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.33, i64 0, i64 0)), !dbg !5979
  br label %if.end36, !dbg !5979

if.end36:                                         ; preds = %if.then34, %if.then32
  br label %if.end65, !dbg !5980

if.end37:                                         ; preds = %if.end28
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5981
  %header = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 2, !dbg !5983
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5983
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 8, !dbg !5984
  %29 = load i64, i64* %count, align 8, !dbg !5984
  %tobool38 = icmp ne i64 %29, 0, !dbg !5981
  br i1 %tobool38, label %if.then39, label %if.else, !dbg !5985

if.then39:                                        ; preds = %if.end37
  call void @llvm.dbg.declare(metadata i32* %niter, metadata !5986, metadata !DIExpression()), !dbg !5988
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5989
  %call40 = call i32 @expected_loop_iterations(%struct.loop* %30), !dbg !5990
  store i32 %call40, i32* %niter, align 4, !dbg !5988
  %31 = load i32, i32* %niter, align 4, !dbg !5991
  %add = add i32 %31, 1, !dbg !5993
  %32 = load i32, i32* %npeel, align 4, !dbg !5994
  %cmp41 = icmp ugt i32 %add, %32, !dbg !5995
  br i1 %cmp41, label %if.then43, label %if.end52, !dbg !5996

if.then43:                                        ; preds = %if.then39
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5997
  %tobool44 = icmp ne %struct._IO_FILE* %33, null, !dbg !5997
  br i1 %tobool44, label %if.then45, label %if.end51, !dbg !6000

if.then45:                                        ; preds = %if.then43
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6001
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.34, i64 0, i64 0)), !dbg !6003
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6004
  %36 = load i32, i32* %niter, align 4, !dbg !6005
  %add47 = add i32 %36, 1, !dbg !6006
  %conv48 = zext i32 %add47 to i64, !dbg !6007
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %conv48), !dbg !6008
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6009
  %38 = load i32, i32* %npeel, align 4, !dbg !6010
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.14, i64 0, i64 0), i32 %38), !dbg !6011
  br label %if.end51, !dbg !6012

if.end51:                                         ; preds = %if.then45, %if.then43
  br label %if.end65, !dbg !6013

if.end52:                                         ; preds = %if.then39
  %39 = load i32, i32* %niter, align 4, !dbg !6014
  %add53 = add i32 %39, 1, !dbg !6015
  store i32 %add53, i32* %npeel, align 4, !dbg !6016
  br label %if.end58, !dbg !6017

if.else:                                          ; preds = %if.end37
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6018
  %tobool54 = icmp ne %struct._IO_FILE* %40, null, !dbg !6018
  br i1 %tobool54, label %if.then55, label %if.end57, !dbg !6021

if.then55:                                        ; preds = %if.else
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6022
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.35, i64 0, i64 0)), !dbg !6023
  br label %if.end57, !dbg !6023

if.end57:                                         ; preds = %if.then55, %if.else
  br label %if.end65, !dbg !6024

if.end58:                                         ; preds = %if.end52
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6025
  %lpt_decision = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 4, !dbg !6026
  %decision = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision, i32 0, i32 0, !dbg !6027
  store i32 2, i32* %decision, align 8, !dbg !6028
  %43 = load i32, i32* %npeel, align 4, !dbg !6029
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6030
  %lpt_decision59 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 4, !dbg !6031
  %times = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision59, i32 0, i32 1, !dbg !6032
  store i32 %43, i32* %times, align 4, !dbg !6033
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6034
  %tobool60 = icmp ne %struct._IO_FILE* %45, null, !dbg !6034
  br i1 %tobool60, label %if.then61, label %if.end65, !dbg !6036

if.then61:                                        ; preds = %if.end58
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6037
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6038
  %lpt_decision62 = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 4, !dbg !6039
  %times63 = getelementptr inbounds %struct.lpt_decision, %struct.lpt_decision* %lpt_decision62, i32 0, i32 1, !dbg !6040
  %48 = load i32, i32* %times63, align 4, !dbg !6040
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.36, i64 0, i64 0), i32 %48), !dbg !6041
  br label %if.end65, !dbg !6041

if.end65:                                         ; preds = %if.then, %if.end15, %if.end27, %if.end36, %if.end51, %if.end57, %if.then61, %if.end58
  ret void, !dbg !6042
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_exit_at_end_p(%struct.loop* %loop) #0 !dbg !6043 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %desc = alloca %struct.niter_desc*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6046, metadata !DIExpression()), !dbg !6047
  call void @llvm.dbg.declare(metadata %struct.niter_desc** %desc, metadata !6048, metadata !DIExpression()), !dbg !6049
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6050
  %call = call %struct.niter_desc* @get_simple_loop_desc(%struct.loop* %0), !dbg !6051
  store %struct.niter_desc* %call, %struct.niter_desc** %desc, align 8, !dbg !6049
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6052, metadata !DIExpression()), !dbg !6053
  %1 = load %struct.niter_desc*, %struct.niter_desc** %desc, align 8, !dbg !6054
  %in_edge = getelementptr inbounds %struct.niter_desc, %struct.niter_desc* %1, i32 0, i32 1, !dbg !6056
  %2 = load %struct.edge_def*, %struct.edge_def** %in_edge, align 8, !dbg !6056
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !6057
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6057
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6058
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 3, !dbg !6059
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !6059
  %cmp = icmp ne %struct.basic_block_def* %3, %5, !dbg !6060
  br i1 %cmp, label %if.then, label %if.end, !dbg !6061

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6062
  br label %return, !dbg !6062

if.end:                                           ; preds = %entry
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6063
  %latch1 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 3, !dbg !6063
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %latch1, align 8, !dbg !6063
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !6063
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6063
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6063
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 0, !dbg !6063
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6063
  store %struct.rtx_def* %9, %struct.rtx_def** %insn, align 8, !dbg !6063
  br label %for.cond, !dbg !6063

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6065
  %tobool = icmp ne %struct.rtx_def* %10, null, !dbg !6065
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6065

land.rhs:                                         ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6065
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6065
  %latch2 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 3, !dbg !6065
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %latch2, align 8, !dbg !6065
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !6065
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !6065
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !6065
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !6065
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6065
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6065
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6065
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6065
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6065
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6065
  %cmp5 = icmp ne %struct.rtx_def* %11, %16, !dbg !6065
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %17 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ], !dbg !6067
  br i1 %17, label %for.body, label %for.end, !dbg !6063

for.body:                                         ; preds = %land.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6068
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !6068
  %bf.load = load i32, i32* %19, align 8, !dbg !6068
  %bf.clear = and i32 %bf.load, 65535, !dbg !6068
  %cmp6 = icmp eq i32 %bf.clear, 8, !dbg !6068
  br i1 %cmp6, label %if.then18, label %lor.lhs.false, !dbg !6068

lor.lhs.false:                                    ; preds = %for.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6068
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !6068
  %bf.load7 = load i32, i32* %21, align 8, !dbg !6068
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6068
  %cmp9 = icmp eq i32 %bf.clear8, 7, !dbg !6068
  br i1 %cmp9, label %if.then18, label %lor.lhs.false10, !dbg !6068

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6068
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6068
  %bf.load11 = load i32, i32* %23, align 8, !dbg !6068
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !6068
  %cmp13 = icmp eq i32 %bf.clear12, 9, !dbg !6068
  br i1 %cmp13, label %if.then18, label %lor.lhs.false14, !dbg !6068

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6068
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !6068
  %bf.load15 = load i32, i32* %25, align 8, !dbg !6068
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !6068
  %cmp17 = icmp eq i32 %bf.clear16, 10, !dbg !6068
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !6071

if.then18:                                        ; preds = %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false, %for.body
  store i8 0, i8* %retval, align 1, !dbg !6072
  br label %return, !dbg !6072

if.end19:                                         ; preds = %lor.lhs.false14
  br label %for.inc, !dbg !6073

for.inc:                                          ; preds = %if.end19
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6065
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !6065
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !6065
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 2, !dbg !6065
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !6065
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !6065
  store %struct.rtx_def* %27, %struct.rtx_def** %insn, align 8, !dbg !6065
  br label %for.cond, !dbg !6065, !llvm.loop !6074

for.end:                                          ; preds = %land.end
  store i8 1, i8* %retval, align 1, !dbg !6076
  br label %return, !dbg !6076

return:                                           ; preds = %for.end, %if.then18, %if.then
  %28 = load i8, i8* %retval, align 1, !dbg !6077
  ret i8 %28, !dbg !6077
}

declare dso_local i32 @expected_loop_iterations(%struct.loop*) #2

declare dso_local i32 @num_loop_branches(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6078 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6079, metadata !DIExpression()), !dbg !6080
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6083
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6085
  %1 = load i8*, i8** %popcount, align 8, !dbg !6085
  %tobool = icmp ne i8* %1, null, !dbg !6083
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6086

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6087, metadata !DIExpression()), !dbg !6089
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6090
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6090
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6090
  %div = udiv i32 %3, 64, !dbg !6090
  %idxprom = zext i32 %div to i64, !dbg !6090
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6090
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6090
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6090
  %rem = urem i32 %5, 64, !dbg !6090
  %sh_prom = zext i32 %rem to i64, !dbg !6090
  %shr = lshr i64 %4, %sh_prom, !dbg !6090
  %and = and i64 %shr, 1, !dbg !6090
  %conv = trunc i64 %and to i8, !dbg !6090
  store i8 %conv, i8* %oldbit, align 1, !dbg !6091
  %6 = load i8, i8* %oldbit, align 1, !dbg !6092
  %tobool1 = icmp ne i8 %6, 0, !dbg !6092
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !6094

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6095
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6096
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6096
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6097
  %div4 = udiv i32 %9, 64, !dbg !6098
  %idxprom5 = zext i32 %div4 to i64, !dbg !6095
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6095
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6099
  %inc = add i8 %10, 1, !dbg !6099
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !6099
  br label %if.end, !dbg !6095

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6100

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6101
  %rem8 = urem i32 %11, 64, !dbg !6102
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6103
  %shl = shl i64 1, %sh_prom9, !dbg !6103
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6104
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6105
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6106
  %div11 = udiv i32 %13, 64, !dbg !6107
  %idxprom12 = zext i32 %div11 to i64, !dbg !6104
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6104
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6108
  %or = or i64 %14, %shl, !dbg !6108
  store i64 %or, i64* %arrayidx13, align 8, !dbg !6108
  ret void, !dbg !6109
}

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local %struct.VEC_basic_block_heap* @get_dominated_by(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !6110 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6113, metadata !DIExpression()), !dbg !6114
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6115, metadata !DIExpression()), !dbg !6114
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !6116, metadata !DIExpression()), !dbg !6114
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6117
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !6117
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6117

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6117
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6117
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !6117
  %3 = load i32, i32* %num, align 8, !dbg !6117
  %cmp = icmp ult i32 %1, %3, !dbg !6117
  br i1 %cmp, label %if.then, label %if.else, !dbg !6114

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6119
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !6119
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6119
  %idxprom = zext i32 %5 to i64, !dbg !6119
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !6119
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6119
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !6119
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !6119
  store i32 1, i32* %retval, align 4, !dbg !6119
  br label %return, !dbg !6119

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !6121
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !6121
  store i32 0, i32* %retval, align 4, !dbg !6121
  br label %return, !dbg !6121

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6114
  ret i32 %9, !dbg !6114
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %vec_, %struct.basic_block_def* %obj_) #0 !dbg !6123 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !6129, metadata !DIExpression()), !dbg !6128
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6128
  %call = call i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %0, i32 1), !dbg !6128
  %1 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6128
  %2 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %1, align 8, !dbg !6128
  %tobool = icmp ne %struct.VEC_basic_block_heap* %2, null, !dbg !6128
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6128

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6128
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %3, align 8, !dbg !6128
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !6128
  br label %cond.end, !dbg !6128

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6128

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6128
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !6128
  %call1 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %5), !dbg !6128
  ret %struct.basic_block_def** %call1, !dbg !6128
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !6130 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !6133, metadata !DIExpression()), !dbg !6134
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6135
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !6135
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !6135
  br i1 %tobool, label %if.then, label %if.end, !dbg !6134

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6135
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !6135
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !6135
  call void @free(i8* %4), !dbg !6135
  br label %if.end, !dbg !6135

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6134
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !6134
  ret void, !dbg !6134
}

declare dso_local %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local void @unshare_all_rtl_in_chain(%struct.rtx_def*) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local %struct.rtx_def* @compare_and_jump_seq(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @block_label(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !6137 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6143, metadata !DIExpression()), !dbg !6144
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6145
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !6145
  %tobool = icmp ne i8 %call, 0, !dbg !6145
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6145

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.41, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6145
  br label %cond.end, !dbg !6145

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6145
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6146
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !6146
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6146
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6146
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6146

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6146
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !6146
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !6146
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6146
  br label %cond.end5, !dbg !6146

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6146

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6146
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6146
  ret %struct.edge_def* %call7, !dbg !6147
}

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !6148 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6149, metadata !DIExpression()), !dbg !6150
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6151
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !6151
  %tobool = icmp ne i8 %call, 0, !dbg !6151
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6151

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.41, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6151
  br label %cond.end, !dbg !6151

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6151
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6152
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6152
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6152
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6152
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6152

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6152
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6152
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6152
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6152
  br label %cond.end5, !dbg !6152

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6152

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6152
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6152
  ret %struct.edge_def* %call7, !dbg !6153
}

declare dso_local void @iterate_fix_dominators(i32, %struct.VEC_basic_block_heap*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %vec_, i32 %alloc_) #0 !dbg !6154 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !6157, metadata !DIExpression()), !dbg !6158
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6159, metadata !DIExpression()), !dbg !6158
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6160, metadata !DIExpression()), !dbg !6158
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6158
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !6158
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !6158
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6158

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6158
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !6158
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %3, i32 0, i32 0, !dbg !6158
  br label %cond.end, !dbg !6158

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6158

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6158
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6158
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !6158
  %tobool1 = icmp ne i32 %call, 0, !dbg !6158
  %lnot = xor i1 %tobool1, true, !dbg !6158
  %lnot.ext = zext i1 %lnot to i32, !dbg !6158
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6158
  %5 = load i32, i32* %extend, align 4, !dbg !6161
  %tobool2 = icmp ne i32 %5, 0, !dbg !6161
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6158

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6161
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %6, align 8, !dbg !6161
  %8 = bitcast %struct.VEC_basic_block_heap* %7 to i8*, !dbg !6161
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6161
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6161
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_heap*, !dbg !6161
  %11 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6161
  store %struct.VEC_basic_block_heap* %10, %struct.VEC_basic_block_heap** %11, align 8, !dbg !6161
  br label %if.end, !dbg !6161

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6158
  ret i32 %12, !dbg !6158
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !6163 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !6169, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !6170, metadata !DIExpression()), !dbg !6168
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6168
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !6168
  %1 = load i32, i32* %num, align 8, !dbg !6168
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6168
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !6168
  %3 = load i32, i32* %alloc, align 4, !dbg !6168
  %cmp = icmp ult i32 %1, %3, !dbg !6168
  %conv = zext i1 %cmp to i32, !dbg !6168
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6168
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !6168
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6168
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !6168
  %6 = load i32, i32* %num1, align 8, !dbg !6168
  %inc = add i32 %6, 1, !dbg !6168
  store i32 %inc, i32* %num1, align 8, !dbg !6168
  %idxprom = zext i32 %6 to i64, !dbg !6168
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !6168
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !6168
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !6168
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !6168
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !6168
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !6168
  ret %struct.basic_block_def** %9, !dbg !6168
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !6171 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6174, metadata !DIExpression()), !dbg !6175
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6176, metadata !DIExpression()), !dbg !6175
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6175
  %cmp = icmp sge i32 %0, 0, !dbg !6175
  %conv = zext i1 %cmp to i32, !dbg !6175
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6175
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !6175
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6175

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6175
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !6175
  %3 = load i32, i32* %alloc, align 4, !dbg !6175
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6175
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !6175
  %5 = load i32, i32* %num, align 8, !dbg !6175
  %sub = sub i32 %3, %5, !dbg !6175
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6175
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6175
  %conv2 = zext i1 %cmp1 to i32, !dbg !6175
  br label %cond.end, !dbg !6175

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6175
  %tobool3 = icmp ne i32 %7, 0, !dbg !6175
  %lnot = xor i1 %tobool3, true, !dbg !6175
  %lnot.ext = zext i1 %lnot to i32, !dbg !6175
  br label %cond.end, !dbg !6175

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6175
  ret i32 %cond, !dbg !6175
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !6177 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6180, metadata !DIExpression()), !dbg !6181
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6182
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !6182
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6182
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6182
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6182

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6182
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6182
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !6182
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6182
  br label %cond.end, !dbg !6182

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6182
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6182
  %cmp = icmp eq i32 %call, 1, !dbg !6183
  %conv = zext i1 %cmp to i32, !dbg !6183
  %conv2 = trunc i32 %conv to i8, !dbg !6182
  ret i8 %conv2, !dbg !6184
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !6185 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6186, metadata !DIExpression()), !dbg !6187
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6188
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6188
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6188
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6188
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6188

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6188
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6188
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6188
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6188
  br label %cond.end, !dbg !6188

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6188

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6188
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6188
  %cmp = icmp eq i32 %call, 1, !dbg !6189
  %conv = zext i1 %cmp to i32, !dbg !6189
  %conv2 = trunc i32 %conv to i8, !dbg !6188
  ret i8 %conv2, !dbg !6190
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!1916, !1917, !1918}
!llvm.ident = !{!1919}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !719, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "loop-unroll.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{!3, !132, !138, !143, !148, !167, !174, !181, !375, !384, !388, !393, !516, !659, !663, !668, !690, !706, !711}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !4, line: 7, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!7 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!8 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!9 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!10 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!11 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!12 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!13 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!14 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!15 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!16 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!17 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!18 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!19 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!20 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!21 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!22 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!23 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!24 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!25 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!26 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!27 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!28 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!29 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!30 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!31 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!32 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!33 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!34 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!35 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!36 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!37 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!38 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!39 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!40 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!41 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!42 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!43 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!44 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!45 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!46 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!47 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!48 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!49 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!50 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!51 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!52 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!53 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!54 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!55 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!56 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!57 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!58 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!59 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!60 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!61 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!62 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!63 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!64 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!65 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!66 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!67 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!68 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!69 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!70 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!71 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!72 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!73 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!74 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!75 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!76 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!77 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!78 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!79 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!80 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!81 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!82 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!83 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!84 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!85 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!86 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!87 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!88 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!89 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!90 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!94 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!95 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!131 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!132 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !133, line: 363, baseType: !5, size: 32, elements: !134)
!133 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!134 = !{!135, !136, !137}
!135 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!138 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !133, line: 355, baseType: !5, size: 32, elements: !139)
!139 = !{!140, !141, !142}
!140 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!141 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!142 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!143 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !144, line: 474, baseType: !5, size: 32, elements: !145)
!144 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!145 = !{!146, !147}
!146 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!147 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!148 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !149, line: 280, baseType: !5, size: 32, elements: !150)
!149 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!150 = !{!151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166}
!151 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!152 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!153 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!167 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !149, line: 1817, baseType: !5, size: 32, elements: !168)
!168 = !{!169, !170, !171, !172, !173}
!169 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!174 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !149, line: 1805, baseType: !5, size: 32, elements: !175)
!175 = !{!176, !177, !178, !179, !180}
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!181 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !149, line: 39, baseType: !5, size: 32, elements: !182)
!182 = !{!183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374}
!183 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!184 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!185 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!186 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!187 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!188 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!189 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!190 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!191 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!192 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!193 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!194 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!195 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!196 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!197 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!198 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!199 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!200 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!201 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!202 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!203 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!204 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!205 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!208 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!209 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!210 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!211 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!212 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!213 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!214 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!215 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!216 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!217 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!218 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!219 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!220 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!221 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!222 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!223 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!226 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!227 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!228 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!229 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!230 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!231 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!232 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!233 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!234 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!235 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!236 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!237 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!238 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!239 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!240 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!241 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!242 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!243 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!244 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!245 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!246 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!247 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!248 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!249 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!250 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!251 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!252 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!253 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!254 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!255 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!256 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!257 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!258 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!259 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!260 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!261 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!262 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!263 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!264 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!265 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!266 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!267 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!268 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!269 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!270 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!271 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!274 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!275 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!280 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!281 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!282 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!283 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!284 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!285 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!286 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!287 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!288 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!289 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!290 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!291 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!292 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!293 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!294 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!295 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!296 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!297 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!298 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!299 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!300 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!301 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!302 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!303 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!304 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!305 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!306 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!307 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!308 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!309 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!310 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!311 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!312 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!313 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!314 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!315 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!316 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!317 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!318 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!319 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!320 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!321 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!322 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!323 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!324 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!325 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!326 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!327 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!328 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!329 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!330 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!331 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!332 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!333 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!334 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!335 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!336 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!337 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!347 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!348 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!350 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!351 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!352 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!353 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!354 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!368 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!369 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!370 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!371 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!372 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!373 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!374 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!375 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !376, line: 31, baseType: !5, size: 32, elements: !377)
!376 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!377 = !{!378, !379, !380, !381, !382, !383}
!378 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!383 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !376, line: 91, baseType: !5, size: 32, elements: !385)
!385 = !{!386, !387}
!386 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!387 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !376, line: 498, baseType: !5, size: 32, elements: !389)
!389 = !{!390, !391, !392}
!390 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!391 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!392 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!393 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !394, line: 82, baseType: !5, size: 32, elements: !395)
!394 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!395 = !{!396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515}
!396 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!397 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!398 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!399 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!400 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!401 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!402 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!403 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!404 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!405 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!406 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!407 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!408 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!409 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!410 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!411 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!412 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!413 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!414 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!415 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!416 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!417 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!418 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!419 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!420 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!421 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!422 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!423 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!424 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!425 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!426 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!427 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!428 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!429 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!430 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!431 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!432 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!433 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!434 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!435 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!436 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!437 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!438 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!439 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!440 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!441 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!442 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!443 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!444 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!445 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!446 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!447 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!448 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!449 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!450 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!451 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!452 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!453 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!454 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!455 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!456 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!457 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!458 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!459 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!460 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!461 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!462 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!463 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!464 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!465 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!466 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!467 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!468 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!469 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!470 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!471 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!472 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!473 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!474 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!475 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!476 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!477 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!478 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!479 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!480 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!481 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!482 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!483 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!484 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!485 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!486 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!487 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!488 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!489 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!490 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!491 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!492 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!493 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!494 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!495 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!496 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!497 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!498 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!499 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!500 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!501 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!502 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!503 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!504 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!505 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!506 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!507 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!508 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!509 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!510 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!511 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!512 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!513 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!514 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!515 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!516 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !517, line: 45, baseType: !5, size: 32, elements: !518)
!517 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!518 = !{!519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658}
!519 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!520 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!521 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!522 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!523 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!524 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!525 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!526 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!527 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!528 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!529 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!530 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!531 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!532 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!533 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!534 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!535 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!536 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!537 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!538 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!539 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!540 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!541 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!542 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!543 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!544 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!545 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!546 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!547 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!548 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!549 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!550 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!551 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!552 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!553 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!554 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!555 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!556 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!557 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!558 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!559 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!560 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!561 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!562 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!563 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!564 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!565 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!566 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!567 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!568 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!569 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!570 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!571 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!572 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!573 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!574 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!575 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!576 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!577 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!578 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!579 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!580 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!581 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!582 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!583 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!584 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!585 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!586 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!587 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!588 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!589 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!590 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!591 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!592 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!593 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!594 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!595 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!596 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!597 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!598 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!599 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!600 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!601 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!602 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!603 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!604 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!605 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!606 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!607 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!608 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!609 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!610 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!611 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!612 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!613 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!614 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!615 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!616 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!617 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!618 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!619 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!620 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!621 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!622 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!623 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!624 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!625 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!626 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!627 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!628 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!629 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!630 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!631 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!632 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!633 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!634 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!635 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!636 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!637 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!638 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!639 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!640 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!641 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!642 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!643 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!644 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!645 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!646 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!647 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!648 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!649 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!650 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!651 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!652 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!653 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!654 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!655 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!656 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!657 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!658 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!659 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !133, line: 912, baseType: !5, size: 32, elements: !660)
!660 = !{!661, !662}
!661 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!662 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!663 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !664, line: 147, baseType: !5, size: 32, elements: !665)
!664 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!665 = !{!666, !667}
!666 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!667 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!668 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !669, line: 36, baseType: !5, size: 32, elements: !670)
!669 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!670 = !{!671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689}
!671 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!672 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!673 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!674 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!675 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!676 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!677 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!678 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!679 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!680 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!681 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!682 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!683 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!684 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!685 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!686 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!687 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!688 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!689 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!690 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !517, line: 956, baseType: !5, size: 32, elements: !691)
!691 = !{!692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705}
!692 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!693 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!694 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!695 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!696 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!697 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!698 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!699 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!700 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!701 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!702 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!703 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!704 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!705 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!706 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !376, line: 641, baseType: !5, size: 32, elements: !707)
!707 = !{!708, !709, !710}
!708 = !DIEnumerator(name: "UAP_PEEL", value: 1, isUnsigned: true)
!709 = !DIEnumerator(name: "UAP_UNROLL", value: 2, isUnsigned: true)
!710 = !DIEnumerator(name: "UAP_UNROLL_ALL", value: 4, isUnsigned: true)
!711 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !712, line: 291, baseType: !5, size: 32, elements: !713)
!712 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!713 = !{!714, !715, !716, !717, !718}
!714 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!715 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!716 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!717 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!718 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!719 = !{!720, !721, !737, !734, !5, !845, !1867, !516, !1208, !1907, !1909, !775, !1872, !3, !668, !1886, !1892, !1224, !760, !862, !1150, !1911}
!720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !722, size: 64)
!722 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !723, line: 32, baseType: !724)
!723 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!724 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !723, line: 32, size: 96, elements: !725)
!725 = !{!726}
!726 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !724, file: !723, line: 32, baseType: !727, size: 96)
!727 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !723, line: 31, baseType: !728)
!728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !723, line: 31, size: 96, elements: !729)
!729 = !{!730, !731, !732}
!730 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !728, file: !723, line: 31, baseType: !5, size: 32)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !728, file: !723, line: 31, baseType: !5, size: 32, offset: 32)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !728, file: !723, line: 31, baseType: !733, size: 32, offset: 64)
!733 = !DICompositeType(tag: DW_TAG_array_type, baseType: !734, size: 32, elements: !735)
!734 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!735 = !{!736}
!736 = !DISubrange(count: 1)
!737 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !376, line: 84, baseType: !738)
!738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !739, size: 64)
!739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !376, line: 100, size: 1216, elements: !740)
!740 = !{!741, !742, !743, !1831, !1832, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1857, !1865, !1866}
!741 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !739, file: !376, line: 102, baseType: !734, size: 32)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !739, file: !376, line: 105, baseType: !5, size: 32, offset: 32)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !739, file: !376, line: 108, baseType: !744, size: 64, offset: 64)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !133, line: 217, size: 832, elements: !746)
!746 = !{!747, !1798, !1799, !1800, !1801, !1805, !1806, !1807, !1825, !1826, !1827, !1828, !1829, !1830}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !745, file: !133, line: 219, baseType: !748, size: 64)
!748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !749, size: 64)
!749 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !133, line: 151, baseType: !750)
!750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !133, line: 151, size: 128, elements: !751)
!751 = !{!752}
!752 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !750, file: !133, line: 151, baseType: !753, size: 128)
!753 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !133, line: 150, baseType: !754)
!754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !133, line: 150, size: 128, elements: !755)
!755 = !{!756, !757, !758}
!756 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !754, file: !133, line: 150, baseType: !5, size: 32)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !754, file: !133, line: 150, baseType: !5, size: 32, offset: 32)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !754, file: !133, line: 150, baseType: !759, size: 64, offset: 64)
!759 = !DICompositeType(tag: DW_TAG_array_type, baseType: !760, size: 64, elements: !735)
!760 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !761, line: 108, baseType: !762)
!761 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !763, size: 64)
!763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !133, line: 122, size: 512, elements: !764)
!764 = !{!765, !766, !767, !1790, !1791, !1792, !1793, !1794, !1795, !1796}
!765 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !763, file: !133, line: 124, baseType: !744, size: 64)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !763, file: !133, line: 125, baseType: !744, size: 64, offset: 64)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !763, file: !133, line: 131, baseType: !768, size: 64, offset: 128)
!768 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !133, line: 128, size: 64, elements: !769)
!769 = !{!770, !774}
!770 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !768, file: !133, line: 129, baseType: !771, size: 64)
!771 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !761, line: 66, baseType: !772)
!772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !773, size: 64)
!773 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !761, line: 65, flags: DIFlagFwdDecl)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !768, file: !133, line: 130, baseType: !775, size: 64)
!775 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !761, line: 50, baseType: !776)
!776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !777, size: 64)
!777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !517, line: 240, size: 384, elements: !778)
!778 = !{!779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789}
!779 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !777, file: !517, line: 242, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !777, file: !517, line: 245, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !777, file: !517, line: 252, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!782 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !777, file: !517, line: 257, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !777, file: !517, line: 265, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !777, file: !517, line: 277, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !777, file: !517, line: 291, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !777, file: !517, line: 298, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !777, file: !517, line: 305, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !777, file: !517, line: 310, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !777, file: !517, line: 321, baseType: !790, size: 320, offset: 64)
!790 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !517, line: 315, size: 320, elements: !791)
!791 = !{!792, !1725, !1727, !1788, !1789}
!792 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !790, file: !517, line: 316, baseType: !793, size: 64)
!793 = !DICompositeType(tag: DW_TAG_array_type, baseType: !794, size: 64, elements: !735)
!794 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !517, line: 183, baseType: !795)
!795 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !517, line: 166, size: 64, elements: !796)
!796 = !{!797, !798, !799, !803, !804, !812, !813, !825, !828, !891, !1703, !1704, !1715, !1722}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !795, file: !517, line: 168, baseType: !734, size: 32)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !795, file: !517, line: 169, baseType: !5, size: 32)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !795, file: !517, line: 170, baseType: !800, size: 64)
!800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !801, size: 64)
!801 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !802)
!802 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !795, file: !517, line: 171, baseType: !775, size: 64)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !795, file: !517, line: 172, baseType: !805, size: 64)
!805 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !761, line: 53, baseType: !806)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !807, size: 64)
!807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !517, line: 359, size: 128, elements: !808)
!808 = !{!809, !810}
!809 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !807, file: !517, line: 360, baseType: !734, size: 32)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !807, file: !517, line: 361, baseType: !811, size: 64, offset: 64)
!811 = !DICompositeType(tag: DW_TAG_array_type, baseType: !775, size: 64, elements: !735)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !795, file: !517, line: 173, baseType: !3, size: 32)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !795, file: !517, line: 174, baseType: !814, size: 32)
!814 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !517, line: 133, baseType: !815)
!815 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !517, line: 115, size: 32, elements: !816)
!816 = !{!817, !818, !819, !820, !821, !822, !823, !824}
!817 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !815, file: !517, line: 118, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !815, file: !517, line: 120, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !815, file: !517, line: 121, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !815, file: !517, line: 123, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !815, file: !517, line: 125, baseType: !5, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !815, file: !517, line: 127, baseType: !5, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !815, file: !517, line: 130, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !815, file: !517, line: 132, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !795, file: !517, line: 175, baseType: !826, size: 64)
!826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !827, size: 64)
!827 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !517, line: 175, flags: DIFlagFwdDecl)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !795, file: !517, line: 176, baseType: !829, size: 64)
!829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !830, size: 64)
!830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !831, line: 75, size: 256, elements: !832)
!831 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!832 = !{!833, !848, !849, !850}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !830, file: !831, line: 76, baseType: !834, size: 64)
!834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !835, size: 64)
!835 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !831, line: 68, baseType: !836)
!836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !831, line: 63, size: 320, elements: !837)
!837 = !{!838, !840, !841, !842}
!838 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !836, file: !831, line: 64, baseType: !839, size: 64)
!839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !836, size: 64)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !836, file: !831, line: 65, baseType: !839, size: 64, offset: 64)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !836, file: !831, line: 66, baseType: !5, size: 32, offset: 128)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !836, file: !831, line: 67, baseType: !843, size: 128, offset: 192)
!843 = !DICompositeType(tag: DW_TAG_array_type, baseType: !844, size: 128, elements: !846)
!844 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !831, line: 29, baseType: !845)
!845 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!846 = !{!847}
!847 = !DISubrange(count: 2)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !830, file: !831, line: 77, baseType: !834, size: 64, offset: 64)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !830, file: !831, line: 78, baseType: !5, size: 32, offset: 128)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !830, file: !831, line: 79, baseType: !851, size: 64, offset: 192)
!851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !852, size: 64)
!852 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !831, line: 49, baseType: !853)
!853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !831, line: 45, size: 832, elements: !854)
!854 = !{!855, !856, !857}
!855 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !853, file: !831, line: 46, baseType: !839, size: 64)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !853, file: !831, line: 47, baseType: !829, size: 64, offset: 64)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !853, file: !831, line: 48, baseType: !858, size: 704, offset: 128)
!858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !859, line: 164, size: 704, elements: !860)
!859 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!860 = !{!861, !863, !874, !875, !876, !877, !878, !879, !883, !887, !888, !889, !890}
!861 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !858, file: !859, line: 166, baseType: !862, size: 64)
!862 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !858, file: !859, line: 167, baseType: !864, size: 64, offset: 64)
!864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !865, size: 64)
!865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !859, line: 157, size: 192, elements: !866)
!866 = !{!867, !869, !870}
!867 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !865, file: !859, line: 159, baseType: !868, size: 64)
!868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !802, size: 64)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !865, file: !859, line: 160, baseType: !864, size: 64, offset: 64)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !865, file: !859, line: 161, baseType: !871, size: 32, offset: 128)
!871 = !DICompositeType(tag: DW_TAG_array_type, baseType: !802, size: 32, elements: !872)
!872 = !{!873}
!873 = !DISubrange(count: 4)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !858, file: !859, line: 168, baseType: !868, size: 64, offset: 128)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !858, file: !859, line: 169, baseType: !868, size: 64, offset: 192)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !858, file: !859, line: 170, baseType: !868, size: 64, offset: 256)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !858, file: !859, line: 171, baseType: !862, size: 64, offset: 320)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !858, file: !859, line: 172, baseType: !734, size: 32, offset: 384)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !858, file: !859, line: 176, baseType: !880, size: 64, offset: 448)
!880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !881, size: 64)
!881 = !DISubroutineType(types: !882)
!882 = !{!864, !720, !862}
!883 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !858, file: !859, line: 177, baseType: !884, size: 64, offset: 512)
!884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !885, size: 64)
!885 = !DISubroutineType(types: !886)
!886 = !{null, !720, !864}
!887 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !858, file: !859, line: 178, baseType: !720, size: 64, offset: 576)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !858, file: !859, line: 179, baseType: !5, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !858, file: !859, line: 180, baseType: !5, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !858, file: !859, line: 184, baseType: !5, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !795, file: !517, line: 177, baseType: !892, size: 64)
!892 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !761, line: 56, baseType: !893)
!893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !894, size: 64)
!894 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !149, line: 3371, size: 1792, elements: !895)
!895 = !{!896, !929, !935, !946, !965, !976, !981, !988, !994, !1008, !1020, !1058, !1063, !1091, !1099, !1100, !1105, !1114, !1120, !1125, !1129, !1133, !1327, !1376, !1382, !1389, !1396, !1422, !1447, !1464, !1476, !1498, !1513, !1685}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !894, file: !149, line: 3372, baseType: !897, size: 64)
!897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !149, line: 360, size: 64, elements: !898)
!898 = !{!899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928}
!899 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !897, file: !149, line: 361, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !897, file: !149, line: 363, baseType: !5, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !897, file: !149, line: 364, baseType: !5, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !897, file: !149, line: 365, baseType: !5, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !897, file: !149, line: 366, baseType: !5, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !897, file: !149, line: 367, baseType: !5, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !897, file: !149, line: 368, baseType: !5, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !897, file: !149, line: 369, baseType: !5, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !897, file: !149, line: 370, baseType: !5, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !897, file: !149, line: 372, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !897, file: !149, line: 373, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !897, file: !149, line: 374, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !897, file: !149, line: 375, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !897, file: !149, line: 376, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !897, file: !149, line: 377, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !897, file: !149, line: 378, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !897, file: !149, line: 379, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !897, file: !149, line: 381, baseType: !5, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !897, file: !149, line: 382, baseType: !5, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !897, file: !149, line: 383, baseType: !5, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !897, file: !149, line: 384, baseType: !5, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !897, file: !149, line: 385, baseType: !5, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !897, file: !149, line: 386, baseType: !5, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !897, file: !149, line: 387, baseType: !5, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !897, file: !149, line: 388, baseType: !5, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !897, file: !149, line: 390, baseType: !5, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !897, file: !149, line: 391, baseType: !5, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !897, file: !149, line: 392, baseType: !5, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !897, file: !149, line: 394, baseType: !5, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !897, file: !149, line: 399, baseType: !5, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !894, file: !149, line: 3373, baseType: !930, size: 192)
!930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !149, line: 402, size: 192, elements: !931)
!931 = !{!932, !933, !934}
!932 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !930, file: !149, line: 403, baseType: !897, size: 64)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !930, file: !149, line: 404, baseType: !892, size: 64, offset: 64)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !930, file: !149, line: 405, baseType: !892, size: 64, offset: 128)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !894, file: !149, line: 3374, baseType: !936, size: 320)
!936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !149, line: 1384, size: 320, elements: !937)
!937 = !{!938, !939}
!938 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !936, file: !149, line: 1385, baseType: !930, size: 192)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !936, file: !149, line: 1386, baseType: !940, size: 128, offset: 192)
!940 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !941, line: 58, baseType: !942)
!941 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!942 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !941, line: 54, size: 128, elements: !943)
!943 = !{!944, !945}
!944 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !942, file: !941, line: 56, baseType: !845, size: 64)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !942, file: !941, line: 57, baseType: !862, size: 64, offset: 64)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !894, file: !149, line: 3375, baseType: !947, size: 256)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !149, line: 1397, size: 256, elements: !948)
!948 = !{!949, !950}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !947, file: !149, line: 1398, baseType: !930, size: 192)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !947, file: !149, line: 1399, baseType: !951, size: 64, offset: 192)
!951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !952, size: 64)
!952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !953, line: 52, size: 256, elements: !954)
!953 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!954 = !{!955, !956, !957, !958, !959, !960, !961}
!955 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !952, file: !953, line: 56, baseType: !5, size: 2, flags: DIFlagBitField, extraData: i64 0)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !952, file: !953, line: 57, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !952, file: !953, line: 58, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !952, file: !953, line: 59, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !952, file: !953, line: 60, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !952, file: !953, line: 61, baseType: !5, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !952, file: !953, line: 62, baseType: !962, size: 192, offset: 64)
!962 = !DICompositeType(tag: DW_TAG_array_type, baseType: !845, size: 192, elements: !963)
!963 = !{!964}
!964 = !DISubrange(count: 3)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !894, file: !149, line: 3376, baseType: !966, size: 256)
!966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !149, line: 1408, size: 256, elements: !967)
!967 = !{!968, !969}
!968 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !966, file: !149, line: 1409, baseType: !930, size: 192)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !966, file: !149, line: 1410, baseType: !970, size: 64, offset: 192)
!970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !971, size: 64)
!971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !972, line: 27, size: 192, elements: !973)
!972 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!973 = !{!974, !975}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !971, file: !972, line: 29, baseType: !940, size: 128)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !971, file: !972, line: 30, baseType: !3, size: 32, offset: 128)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !894, file: !149, line: 3377, baseType: !977, size: 256)
!977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !149, line: 1437, size: 256, elements: !978)
!978 = !{!979, !980}
!979 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !977, file: !149, line: 1438, baseType: !930, size: 192)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !977, file: !149, line: 1439, baseType: !892, size: 64, offset: 192)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !894, file: !149, line: 3378, baseType: !982, size: 256)
!982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !149, line: 1418, size: 256, elements: !983)
!983 = !{!984, !985, !986}
!984 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !982, file: !149, line: 1419, baseType: !930, size: 192)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !982, file: !149, line: 1420, baseType: !734, size: 32, offset: 192)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !982, file: !149, line: 1421, baseType: !987, size: 8, offset: 224)
!987 = !DICompositeType(tag: DW_TAG_array_type, baseType: !802, size: 8, elements: !735)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !894, file: !149, line: 3379, baseType: !989, size: 320)
!989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !149, line: 1428, size: 320, elements: !990)
!990 = !{!991, !992, !993}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !989, file: !149, line: 1429, baseType: !930, size: 192)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !989, file: !149, line: 1430, baseType: !892, size: 64, offset: 192)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !989, file: !149, line: 1431, baseType: !892, size: 64, offset: 256)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !894, file: !149, line: 3380, baseType: !995, size: 320)
!995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !149, line: 1460, size: 320, elements: !996)
!996 = !{!997, !998}
!997 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !995, file: !149, line: 1461, baseType: !930, size: 192)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !995, file: !149, line: 1462, baseType: !999, size: 128, offset: 192)
!999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1000, line: 31, size: 128, elements: !1001)
!1000 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1001 = !{!1002, !1006, !1007}
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !999, file: !1000, line: 32, baseType: !1003, size: 64)
!1003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1004, size: 64)
!1004 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1005)
!1005 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !999, file: !1000, line: 33, baseType: !5, size: 32, offset: 64)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !999, file: !1000, line: 34, baseType: !5, size: 32, offset: 96)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !894, file: !149, line: 3381, baseType: !1009, size: 384)
!1009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !149, line: 2507, size: 384, elements: !1010)
!1010 = !{!1011, !1012, !1017, !1018, !1019}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1009, file: !149, line: 2508, baseType: !930, size: 192)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1009, file: !149, line: 2509, baseType: !1013, size: 32, offset: 192)
!1013 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1014, line: 58, baseType: !1015)
!1014 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1015 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1016, line: 44, baseType: !5)
!1016 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1009, file: !149, line: 2510, baseType: !5, size: 32, offset: 224)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1009, file: !149, line: 2511, baseType: !892, size: 64, offset: 256)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1009, file: !149, line: 2512, baseType: !892, size: 64, offset: 320)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !894, file: !149, line: 3382, baseType: !1021, size: 896)
!1021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !149, line: 2652, size: 896, elements: !1022)
!1022 = !{!1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1021, file: !149, line: 2653, baseType: !1009, size: 384)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1021, file: !149, line: 2654, baseType: !892, size: 64, offset: 384)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1021, file: !149, line: 2656, baseType: !5, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1021, file: !149, line: 2658, baseType: !5, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1021, file: !149, line: 2659, baseType: !5, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1021, file: !149, line: 2660, baseType: !5, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1021, file: !149, line: 2661, baseType: !5, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1021, file: !149, line: 2662, baseType: !5, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1021, file: !149, line: 2663, baseType: !5, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1021, file: !149, line: 2664, baseType: !5, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1021, file: !149, line: 2666, baseType: !5, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1021, file: !149, line: 2667, baseType: !5, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1021, file: !149, line: 2668, baseType: !5, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1021, file: !149, line: 2669, baseType: !5, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1021, file: !149, line: 2670, baseType: !5, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1021, file: !149, line: 2671, baseType: !5, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1021, file: !149, line: 2672, baseType: !5, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1021, file: !149, line: 2673, baseType: !5, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1021, file: !149, line: 2674, baseType: !5, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1021, file: !149, line: 2678, baseType: !5, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1021, file: !149, line: 2682, baseType: !5, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1021, file: !149, line: 2685, baseType: !5, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1021, file: !149, line: 2688, baseType: !5, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1021, file: !149, line: 2690, baseType: !5, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1021, file: !149, line: 2692, baseType: !5, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1021, file: !149, line: 2695, baseType: !5, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1021, file: !149, line: 2698, baseType: !5, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1021, file: !149, line: 2703, baseType: !5, size: 32, offset: 512)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1021, file: !149, line: 2705, baseType: !892, size: 64, offset: 576)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1021, file: !149, line: 2706, baseType: !892, size: 64, offset: 640)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1021, file: !149, line: 2707, baseType: !892, size: 64, offset: 704)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1021, file: !149, line: 2708, baseType: !892, size: 64, offset: 768)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1021, file: !149, line: 2711, baseType: !1056, size: 64, offset: 832)
!1056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1057, size: 64)
!1057 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !149, line: 2711, flags: DIFlagFwdDecl)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !894, file: !149, line: 3383, baseType: !1059, size: 960)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !149, line: 2756, size: 960, elements: !1060)
!1060 = !{!1061, !1062}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1059, file: !149, line: 2757, baseType: !1021, size: 896)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1059, file: !149, line: 2758, baseType: !775, size: 64, offset: 896)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !894, file: !149, line: 3384, baseType: !1064, size: 1472)
!1064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !149, line: 3114, size: 1472, elements: !1065)
!1065 = !{!1066, !1087, !1088, !1089, !1090}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1064, file: !149, line: 3115, baseType: !1067, size: 1216)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !149, line: 2984, size: 1216, elements: !1068)
!1068 = !{!1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1067, file: !149, line: 2985, baseType: !1059, size: 960)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1067, file: !149, line: 2986, baseType: !892, size: 64, offset: 960)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1067, file: !149, line: 2987, baseType: !892, size: 64, offset: 1024)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1067, file: !149, line: 2988, baseType: !892, size: 64, offset: 1088)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1067, file: !149, line: 2991, baseType: !5, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1067, file: !149, line: 2992, baseType: !5, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1067, file: !149, line: 2993, baseType: !5, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1067, file: !149, line: 2994, baseType: !5, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1067, file: !149, line: 2995, baseType: !5, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1067, file: !149, line: 2996, baseType: !5, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1067, file: !149, line: 2998, baseType: !5, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1067, file: !149, line: 3000, baseType: !5, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1067, file: !149, line: 3002, baseType: !5, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1067, file: !149, line: 3003, baseType: !5, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1067, file: !149, line: 3004, baseType: !5, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1067, file: !149, line: 3005, baseType: !5, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1067, file: !149, line: 3007, baseType: !5, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1067, file: !149, line: 3010, baseType: !5, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1064, file: !149, line: 3117, baseType: !892, size: 64, offset: 1216)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1064, file: !149, line: 3119, baseType: !892, size: 64, offset: 1280)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1064, file: !149, line: 3121, baseType: !892, size: 64, offset: 1344)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1064, file: !149, line: 3123, baseType: !892, size: 64, offset: 1408)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !894, file: !149, line: 3385, baseType: !1092, size: 1088)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !149, line: 2874, size: 1088, elements: !1093)
!1093 = !{!1094, !1095, !1096}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1092, file: !149, line: 2875, baseType: !1059, size: 960)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1092, file: !149, line: 2876, baseType: !775, size: 64, offset: 960)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1092, file: !149, line: 2877, baseType: !1097, size: 64, offset: 1024)
!1097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64)
!1098 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !149, line: 2856, flags: DIFlagFwdDecl)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !894, file: !149, line: 3386, baseType: !1067, size: 1216)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !894, file: !149, line: 3387, baseType: !1101, size: 1280)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !149, line: 3093, size: 1280, elements: !1102)
!1102 = !{!1103, !1104}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1101, file: !149, line: 3094, baseType: !1067, size: 1216)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1101, file: !149, line: 3095, baseType: !1097, size: 64, offset: 1216)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !894, file: !149, line: 3388, baseType: !1106, size: 1216)
!1106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !149, line: 2824, size: 1216, elements: !1107)
!1107 = !{!1108, !1109, !1110, !1111, !1112, !1113}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1106, file: !149, line: 2825, baseType: !1021, size: 896)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1106, file: !149, line: 2827, baseType: !892, size: 64, offset: 896)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1106, file: !149, line: 2828, baseType: !892, size: 64, offset: 960)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1106, file: !149, line: 2829, baseType: !892, size: 64, offset: 1024)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1106, file: !149, line: 2830, baseType: !892, size: 64, offset: 1088)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1106, file: !149, line: 2831, baseType: !892, size: 64, offset: 1152)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !894, file: !149, line: 3389, baseType: !1115, size: 1024)
!1115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !149, line: 2850, size: 1024, elements: !1116)
!1116 = !{!1117, !1118, !1119}
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1115, file: !149, line: 2851, baseType: !1059, size: 960)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1115, file: !149, line: 2852, baseType: !734, size: 32, offset: 960)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1115, file: !149, line: 2853, baseType: !734, size: 32, offset: 992)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !894, file: !149, line: 3390, baseType: !1121, size: 1024)
!1121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !149, line: 2857, size: 1024, elements: !1122)
!1122 = !{!1123, !1124}
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1121, file: !149, line: 2858, baseType: !1059, size: 960)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1121, file: !149, line: 2859, baseType: !1097, size: 64, offset: 960)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !894, file: !149, line: 3391, baseType: !1126, size: 960)
!1126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !149, line: 2862, size: 960, elements: !1127)
!1127 = !{!1128}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1126, file: !149, line: 2863, baseType: !1059, size: 960)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !894, file: !149, line: 3392, baseType: !1130, size: 1472)
!1130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !149, line: 3304, size: 1472, elements: !1131)
!1131 = !{!1132}
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1130, file: !149, line: 3305, baseType: !1064, size: 1472)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !894, file: !149, line: 3393, baseType: !1134, size: 1792)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !149, line: 3248, size: 1792, elements: !1135)
!1135 = !{!1136, !1137, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1134, file: !149, line: 3249, baseType: !1064, size: 1472)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1134, file: !149, line: 3251, baseType: !1138, size: 64, offset: 1472)
!1138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1139, size: 64)
!1139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1140, line: 463, size: 1152, elements: !1141)
!1140 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1141 = !{!1142, !1145, !1176, !1177, !1180, !1250, !1251, !1252, !1253, !1254, !1255, !1279, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305}
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1139, file: !1140, line: 464, baseType: !1143, size: 64)
!1143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1144, size: 64)
!1144 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1140, line: 464, flags: DIFlagFwdDecl)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1139, file: !1140, line: 467, baseType: !1146, size: 64, offset: 64)
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !133, line: 374, size: 640, elements: !1148)
!1148 = !{!1149, !1151, !1152, !1165, !1166, !1167, !1168, !1169, !1170, !1172, !1174, !1175}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1147, file: !133, line: 377, baseType: !1150, size: 64)
!1150 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !761, line: 111, baseType: !744)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1147, file: !133, line: 378, baseType: !1150, size: 64, offset: 64)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1147, file: !133, line: 381, baseType: !1153, size: 64, offset: 128)
!1153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1154, size: 64)
!1154 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !133, line: 282, baseType: !1155)
!1155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !133, line: 282, size: 128, elements: !1156)
!1156 = !{!1157}
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1155, file: !133, line: 282, baseType: !1158, size: 128)
!1158 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !133, line: 281, baseType: !1159)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !133, line: 281, size: 128, elements: !1160)
!1160 = !{!1161, !1162, !1163}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1159, file: !133, line: 281, baseType: !5, size: 32)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1159, file: !133, line: 281, baseType: !5, size: 32, offset: 32)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1159, file: !133, line: 281, baseType: !1164, size: 64, offset: 64)
!1164 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1150, size: 64, elements: !735)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1147, file: !133, line: 384, baseType: !734, size: 32, offset: 192)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1147, file: !133, line: 387, baseType: !734, size: 32, offset: 224)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1147, file: !133, line: 390, baseType: !734, size: 32, offset: 256)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1147, file: !133, line: 394, baseType: !1153, size: 64, offset: 320)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1147, file: !133, line: 396, baseType: !132, size: 32, offset: 384)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1147, file: !133, line: 399, baseType: !1171, size: 64, offset: 416)
!1171 = !DICompositeType(tag: DW_TAG_array_type, baseType: !138, size: 64, elements: !846)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1147, file: !133, line: 402, baseType: !1173, size: 64, offset: 480)
!1173 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, elements: !846)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1147, file: !133, line: 406, baseType: !734, size: 32, offset: 544)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1147, file: !133, line: 409, baseType: !734, size: 32, offset: 576)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1139, file: !1140, line: 470, baseType: !772, size: 64, offset: 128)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1139, file: !1140, line: 473, baseType: !1178, size: 64, offset: 192)
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1179, size: 64)
!1179 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1140, line: 166, flags: DIFlagFwdDecl)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1139, file: !1140, line: 476, baseType: !1181, size: 64, offset: 256)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !376, line: 187, size: 256, elements: !1183)
!1183 = !{!1184, !1185, !1198, !1249}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1182, file: !376, line: 189, baseType: !734, size: 32)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1182, file: !376, line: 192, baseType: !1186, size: 64, offset: 64)
!1186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1187, size: 64)
!1187 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !376, line: 87, baseType: !1188)
!1188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !376, line: 87, size: 128, elements: !1189)
!1189 = !{!1190}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1188, file: !376, line: 87, baseType: !1191, size: 128)
!1191 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !376, line: 85, baseType: !1192)
!1192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !376, line: 85, size: 128, elements: !1193)
!1193 = !{!1194, !1195, !1196}
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1192, file: !376, line: 85, baseType: !5, size: 32)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1192, file: !376, line: 85, baseType: !5, size: 32, offset: 32)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1192, file: !376, line: 85, baseType: !1197, size: 64, offset: 64)
!1197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !737, size: 64, elements: !735)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1182, file: !376, line: 197, baseType: !1199, size: 64, offset: 128)
!1199 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !664, line: 144, baseType: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1201, size: 64)
!1201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !664, line: 100, size: 896, elements: !1202)
!1202 = !{!1203, !1211, !1216, !1221, !1223, !1226, !1227, !1228, !1229, !1230, !1235, !1237, !1238, !1243, !1248}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1201, file: !664, line: 102, baseType: !1204, size: 64)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !664, line: 52, baseType: !1205)
!1205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1206, size: 64)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!1208, !1209}
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !664, line: 47, baseType: !5)
!1209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1210, size: 64)
!1210 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1201, file: !664, line: 105, baseType: !1212, size: 64, offset: 64)
!1212 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !664, line: 59, baseType: !1213)
!1213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1214, size: 64)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!734, !1209, !1209}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1201, file: !664, line: 108, baseType: !1217, size: 64, offset: 128)
!1217 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !664, line: 63, baseType: !1218)
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = !DISubroutineType(types: !1220)
!1220 = !{null, !720}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1201, file: !664, line: 111, baseType: !1222, size: 64, offset: 192)
!1222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !720, size: 64)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1201, file: !664, line: 114, baseType: !1224, size: 64, offset: 256)
!1224 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1225, line: 46, baseType: !845)
!1225 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1201, file: !664, line: 117, baseType: !1224, size: 64, offset: 320)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1201, file: !664, line: 120, baseType: !1224, size: 64, offset: 384)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1201, file: !664, line: 124, baseType: !5, size: 32, offset: 448)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1201, file: !664, line: 128, baseType: !5, size: 32, offset: 480)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1201, file: !664, line: 131, baseType: !1231, size: 64, offset: 512)
!1231 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !664, line: 75, baseType: !1232)
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!720, !1224, !1224}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1201, file: !664, line: 132, baseType: !1236, size: 64, offset: 576)
!1236 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !664, line: 78, baseType: !1218)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1201, file: !664, line: 135, baseType: !720, size: 64, offset: 640)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1201, file: !664, line: 136, baseType: !1239, size: 64, offset: 704)
!1239 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !664, line: 82, baseType: !1240)
!1240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1241, size: 64)
!1241 = !DISubroutineType(types: !1242)
!1242 = !{!720, !720, !1224, !1224}
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1201, file: !664, line: 137, baseType: !1244, size: 64, offset: 768)
!1244 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !664, line: 83, baseType: !1245)
!1245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1246, size: 64)
!1246 = !DISubroutineType(types: !1247)
!1247 = !{null, !720, !720}
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1201, file: !664, line: 141, baseType: !5, size: 32, offset: 832)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1182, file: !376, line: 200, baseType: !738, size: 64, offset: 192)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1139, file: !1140, line: 479, baseType: !1199, size: 64, offset: 320)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1139, file: !1140, line: 484, baseType: !892, size: 64, offset: 384)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1139, file: !1140, line: 488, baseType: !892, size: 64, offset: 448)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1139, file: !1140, line: 493, baseType: !892, size: 64, offset: 512)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1139, file: !1140, line: 496, baseType: !892, size: 64, offset: 576)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1139, file: !1140, line: 501, baseType: !1256, size: 64, offset: 640)
!1256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1257, size: 64)
!1257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !144, line: 2355, size: 576, elements: !1258)
!1258 = !{!1259, !1262, !1263, !1264, !1265, !1267, !1268, !1273, !1274, !1275, !1276, !1277, !1278}
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1257, file: !144, line: 2356, baseType: !1260, size: 64)
!1260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1261, size: 64)
!1261 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !144, line: 2356, flags: DIFlagFwdDecl)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1257, file: !144, line: 2357, baseType: !800, size: 64, offset: 64)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1257, file: !144, line: 2358, baseType: !734, size: 32, offset: 128)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1257, file: !144, line: 2359, baseType: !734, size: 32, offset: 160)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1257, file: !144, line: 2360, baseType: !1266, size: 128, offset: 192)
!1266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !734, size: 128, elements: !872)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1257, file: !144, line: 2364, baseType: !734, size: 32, offset: 320)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1257, file: !144, line: 2367, baseType: !1269, size: 128, offset: 384)
!1269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !144, line: 2349, size: 128, elements: !1270)
!1270 = !{!1271, !1272}
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1269, file: !144, line: 2351, baseType: !775, size: 64)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1269, file: !144, line: 2352, baseType: !862, size: 64, offset: 64)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1257, file: !144, line: 2371, baseType: !143, size: 32, offset: 512)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1257, file: !144, line: 2374, baseType: !5, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1257, file: !144, line: 2377, baseType: !5, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1257, file: !144, line: 2381, baseType: !5, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1257, file: !144, line: 2392, baseType: !5, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1257, file: !144, line: 2396, baseType: !5, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1139, file: !1140, line: 504, baseType: !1280, size: 64, offset: 704)
!1280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1281, size: 64)
!1281 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1140, line: 504, flags: DIFlagFwdDecl)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1139, file: !1140, line: 507, baseType: !1199, size: 64, offset: 768)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1139, file: !1140, line: 510, baseType: !734, size: 32, offset: 832)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1139, file: !1140, line: 513, baseType: !734, size: 32, offset: 864)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1139, file: !1140, line: 516, baseType: !1013, size: 32, offset: 896)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1139, file: !1140, line: 519, baseType: !1013, size: 32, offset: 928)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1139, file: !1140, line: 522, baseType: !5, size: 32, offset: 960)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1139, file: !1140, line: 523, baseType: !5, size: 32, offset: 992)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1139, file: !1140, line: 528, baseType: !800, size: 64, offset: 1024)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1139, file: !1140, line: 535, baseType: !5, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1139, file: !1140, line: 539, baseType: !5, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1139, file: !1140, line: 543, baseType: !5, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1139, file: !1140, line: 546, baseType: !5, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1139, file: !1140, line: 550, baseType: !5, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1139, file: !1140, line: 554, baseType: !5, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1139, file: !1140, line: 559, baseType: !5, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1139, file: !1140, line: 562, baseType: !5, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1139, file: !1140, line: 571, baseType: !5, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1139, file: !1140, line: 573, baseType: !5, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1139, file: !1140, line: 574, baseType: !5, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1139, file: !1140, line: 581, baseType: !5, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1139, file: !1140, line: 585, baseType: !5, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1139, file: !1140, line: 588, baseType: !5, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1139, file: !1140, line: 592, baseType: !5, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1139, file: !1140, line: 598, baseType: !5, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1134, file: !149, line: 3254, baseType: !892, size: 64, offset: 1536)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1134, file: !149, line: 3257, baseType: !892, size: 64, offset: 1600)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1134, file: !149, line: 3258, baseType: !892, size: 64, offset: 1664)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1134, file: !149, line: 3264, baseType: !5, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1134, file: !149, line: 3265, baseType: !5, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1134, file: !149, line: 3267, baseType: !5, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1134, file: !149, line: 3268, baseType: !5, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1134, file: !149, line: 3269, baseType: !5, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1134, file: !149, line: 3271, baseType: !5, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1134, file: !149, line: 3272, baseType: !5, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1134, file: !149, line: 3273, baseType: !5, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1134, file: !149, line: 3274, baseType: !5, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1134, file: !149, line: 3275, baseType: !5, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1134, file: !149, line: 3276, baseType: !5, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1134, file: !149, line: 3277, baseType: !5, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1134, file: !149, line: 3279, baseType: !5, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1134, file: !149, line: 3280, baseType: !5, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1134, file: !149, line: 3281, baseType: !5, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1134, file: !149, line: 3282, baseType: !5, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1134, file: !149, line: 3283, baseType: !5, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1134, file: !149, line: 3284, baseType: !5, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !894, file: !149, line: 3394, baseType: !1328, size: 1344)
!1328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !149, line: 2279, size: 1344, elements: !1329)
!1329 = !{!1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1355, !1356, !1357, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1328, file: !149, line: 2280, baseType: !930, size: 192)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1328, file: !149, line: 2281, baseType: !892, size: 64, offset: 192)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1328, file: !149, line: 2282, baseType: !892, size: 64, offset: 256)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1328, file: !149, line: 2283, baseType: !892, size: 64, offset: 320)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1328, file: !149, line: 2284, baseType: !892, size: 64, offset: 384)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1328, file: !149, line: 2285, baseType: !5, size: 32, offset: 448)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1328, file: !149, line: 2287, baseType: !5, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1328, file: !149, line: 2288, baseType: !5, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1328, file: !149, line: 2289, baseType: !5, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1328, file: !149, line: 2290, baseType: !5, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1328, file: !149, line: 2291, baseType: !5, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1328, file: !149, line: 2292, baseType: !5, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1328, file: !149, line: 2294, baseType: !5, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1328, file: !149, line: 2296, baseType: !5, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1328, file: !149, line: 2297, baseType: !5, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1328, file: !149, line: 2298, baseType: !5, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1328, file: !149, line: 2299, baseType: !5, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1328, file: !149, line: 2300, baseType: !5, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1328, file: !149, line: 2301, baseType: !5, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1328, file: !149, line: 2302, baseType: !5, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1328, file: !149, line: 2303, baseType: !5, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1328, file: !149, line: 2305, baseType: !5, size: 32, offset: 512)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1328, file: !149, line: 2306, baseType: !1353, size: 32, offset: 544)
!1353 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1354, line: 31, baseType: !734)
!1354 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1328, file: !149, line: 2307, baseType: !892, size: 64, offset: 576)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1328, file: !149, line: 2308, baseType: !892, size: 64, offset: 640)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1328, file: !149, line: 2314, baseType: !1358, size: 64, offset: 704)
!1358 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !149, line: 2309, size: 64, elements: !1359)
!1359 = !{!1360, !1361, !1362}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1358, file: !149, line: 2310, baseType: !734, size: 32)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1358, file: !149, line: 2311, baseType: !800, size: 64)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1358, file: !149, line: 2312, baseType: !1363, size: 64)
!1363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1364, size: 64)
!1364 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !149, line: 2277, flags: DIFlagFwdDecl)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1328, file: !149, line: 2315, baseType: !892, size: 64, offset: 768)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1328, file: !149, line: 2316, baseType: !892, size: 64, offset: 832)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1328, file: !149, line: 2317, baseType: !892, size: 64, offset: 896)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1328, file: !149, line: 2318, baseType: !892, size: 64, offset: 960)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1328, file: !149, line: 2319, baseType: !892, size: 64, offset: 1024)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1328, file: !149, line: 2320, baseType: !892, size: 64, offset: 1088)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1328, file: !149, line: 2321, baseType: !892, size: 64, offset: 1152)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1328, file: !149, line: 2322, baseType: !892, size: 64, offset: 1216)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1328, file: !149, line: 2324, baseType: !1374, size: 64, offset: 1280)
!1374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1375, size: 64)
!1375 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !149, line: 2324, flags: DIFlagFwdDecl)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !894, file: !149, line: 3395, baseType: !1377, size: 320)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !149, line: 1469, size: 320, elements: !1378)
!1378 = !{!1379, !1380, !1381}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1377, file: !149, line: 1470, baseType: !930, size: 192)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1377, file: !149, line: 1471, baseType: !892, size: 64, offset: 192)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1377, file: !149, line: 1472, baseType: !892, size: 64, offset: 256)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !894, file: !149, line: 3396, baseType: !1383, size: 320)
!1383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !149, line: 1482, size: 320, elements: !1384)
!1384 = !{!1385, !1386, !1387}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1383, file: !149, line: 1483, baseType: !930, size: 192)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1383, file: !149, line: 1484, baseType: !734, size: 32, offset: 192)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1383, file: !149, line: 1485, baseType: !1388, size: 64, offset: 256)
!1388 = !DICompositeType(tag: DW_TAG_array_type, baseType: !892, size: 64, elements: !735)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !894, file: !149, line: 3397, baseType: !1390, size: 384)
!1390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !149, line: 1829, size: 384, elements: !1391)
!1391 = !{!1392, !1393, !1394, !1395}
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1390, file: !149, line: 1830, baseType: !930, size: 192)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1390, file: !149, line: 1831, baseType: !1013, size: 32, offset: 192)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1390, file: !149, line: 1832, baseType: !892, size: 64, offset: 256)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1390, file: !149, line: 1835, baseType: !1388, size: 64, offset: 320)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !894, file: !149, line: 3398, baseType: !1397, size: 704)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !149, line: 1898, size: 704, elements: !1398)
!1398 = !{!1399, !1400, !1401, !1405, !1406, !1409}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1397, file: !149, line: 1899, baseType: !930, size: 192)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1397, file: !149, line: 1902, baseType: !892, size: 64, offset: 192)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1397, file: !149, line: 1905, baseType: !1402, size: 64, offset: 256)
!1402 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !761, line: 58, baseType: !1403)
!1403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1404, size: 64)
!1404 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !761, line: 57, flags: DIFlagFwdDecl)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1397, file: !149, line: 1908, baseType: !5, size: 32, offset: 320)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1397, file: !149, line: 1911, baseType: !1407, size: 64, offset: 384)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !149, line: 1876, flags: DIFlagFwdDecl)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1397, file: !149, line: 1914, baseType: !1410, size: 256, offset: 448)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !149, line: 1883, size: 256, elements: !1411)
!1411 = !{!1412, !1414, !1415, !1420}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1410, file: !149, line: 1884, baseType: !1413, size: 64)
!1413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1410, size: 64)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1410, file: !149, line: 1885, baseType: !1413, size: 64, offset: 64)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1410, file: !149, line: 1891, baseType: !1416, size: 64, offset: 128)
!1416 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1410, file: !149, line: 1891, size: 64, elements: !1417)
!1417 = !{!1418, !1419}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1416, file: !149, line: 1891, baseType: !1402, size: 64)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1416, file: !149, line: 1891, baseType: !892, size: 64)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1410, file: !149, line: 1892, baseType: !1421, size: 64, offset: 192)
!1421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !892, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !894, file: !149, line: 3399, baseType: !1423, size: 704)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !149, line: 2008, size: 704, elements: !1424)
!1424 = !{!1425, !1426, !1427, !1428, !1429, !1430, !1442, !1443, !1444, !1445, !1446}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1423, file: !149, line: 2009, baseType: !930, size: 192)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1423, file: !149, line: 2011, baseType: !5, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1423, file: !149, line: 2012, baseType: !5, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1423, file: !149, line: 2014, baseType: !1013, size: 32, offset: 224)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1423, file: !149, line: 2016, baseType: !892, size: 64, offset: 256)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1423, file: !149, line: 2017, baseType: !1431, size: 64, offset: 320)
!1431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1432, size: 64)
!1432 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !149, line: 183, baseType: !1433)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !149, line: 183, size: 128, elements: !1434)
!1434 = !{!1435}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1433, file: !149, line: 183, baseType: !1436, size: 128)
!1436 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !149, line: 182, baseType: !1437)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !149, line: 182, size: 128, elements: !1438)
!1438 = !{!1439, !1440, !1441}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1437, file: !149, line: 182, baseType: !5, size: 32)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1437, file: !149, line: 182, baseType: !5, size: 32, offset: 32)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1437, file: !149, line: 182, baseType: !1388, size: 64, offset: 64)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1423, file: !149, line: 2019, baseType: !892, size: 64, offset: 384)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1423, file: !149, line: 2020, baseType: !892, size: 64, offset: 448)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1423, file: !149, line: 2021, baseType: !892, size: 64, offset: 512)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1423, file: !149, line: 2022, baseType: !892, size: 64, offset: 576)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1423, file: !149, line: 2023, baseType: !892, size: 64, offset: 640)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !894, file: !149, line: 3400, baseType: !1448, size: 832)
!1448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !149, line: 2430, size: 832, elements: !1449)
!1449 = !{!1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459}
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1448, file: !149, line: 2431, baseType: !930, size: 192)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1448, file: !149, line: 2433, baseType: !892, size: 64, offset: 192)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1448, file: !149, line: 2434, baseType: !892, size: 64, offset: 256)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1448, file: !149, line: 2435, baseType: !892, size: 64, offset: 320)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1448, file: !149, line: 2436, baseType: !892, size: 64, offset: 384)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1448, file: !149, line: 2437, baseType: !1431, size: 64, offset: 448)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1448, file: !149, line: 2438, baseType: !892, size: 64, offset: 512)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1448, file: !149, line: 2440, baseType: !892, size: 64, offset: 576)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1448, file: !149, line: 2441, baseType: !892, size: 64, offset: 640)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1448, file: !149, line: 2443, baseType: !1460, size: 128, offset: 704)
!1460 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !149, line: 182, baseType: !1461)
!1461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !149, line: 182, size: 128, elements: !1462)
!1462 = !{!1463}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1461, file: !149, line: 182, baseType: !1436, size: 128)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !894, file: !149, line: 3401, baseType: !1465, size: 320)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !149, line: 3327, size: 320, elements: !1466)
!1466 = !{!1467, !1468, !1475}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1465, file: !149, line: 3329, baseType: !930, size: 192)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1465, file: !149, line: 3330, baseType: !1469, size: 64, offset: 192)
!1469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1470, size: 64)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !149, line: 3320, size: 192, elements: !1471)
!1471 = !{!1472, !1473, !1474}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1470, file: !149, line: 3322, baseType: !1469, size: 64)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1470, file: !149, line: 3323, baseType: !1469, size: 64, offset: 64)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1470, file: !149, line: 3324, baseType: !892, size: 64, offset: 128)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1465, file: !149, line: 3331, baseType: !1469, size: 64, offset: 256)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !894, file: !149, line: 3402, baseType: !1477, size: 256)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !149, line: 1540, size: 256, elements: !1478)
!1478 = !{!1479, !1480}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1477, file: !149, line: 1541, baseType: !930, size: 192)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1477, file: !149, line: 1542, baseType: !1481, size: 64, offset: 192)
!1481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1482, size: 64)
!1482 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !149, line: 1538, baseType: !1483)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !149, line: 1538, size: 192, elements: !1484)
!1484 = !{!1485}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1483, file: !149, line: 1538, baseType: !1486, size: 192)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !149, line: 1537, baseType: !1487)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !149, line: 1537, size: 192, elements: !1488)
!1488 = !{!1489, !1490, !1491}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1487, file: !149, line: 1537, baseType: !5, size: 32)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1487, file: !149, line: 1537, baseType: !5, size: 32, offset: 32)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1487, file: !149, line: 1537, baseType: !1492, size: 128, offset: 64)
!1492 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1493, size: 128, elements: !735)
!1493 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !149, line: 1535, baseType: !1494)
!1494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !149, line: 1532, size: 128, elements: !1495)
!1495 = !{!1496, !1497}
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1494, file: !149, line: 1533, baseType: !892, size: 64)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1494, file: !149, line: 1534, baseType: !892, size: 64, offset: 64)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !894, file: !149, line: 3403, baseType: !1499, size: 512)
!1499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !149, line: 1938, size: 512, elements: !1500)
!1500 = !{!1501, !1502, !1503, !1504, !1510, !1511, !1512}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1499, file: !149, line: 1939, baseType: !930, size: 192)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1499, file: !149, line: 1940, baseType: !1013, size: 32, offset: 192)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1499, file: !149, line: 1941, baseType: !148, size: 32, offset: 224)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1499, file: !149, line: 1946, baseType: !1505, size: 32, offset: 256)
!1505 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !149, line: 1942, size: 32, elements: !1506)
!1506 = !{!1507, !1508, !1509}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1505, file: !149, line: 1943, baseType: !167, size: 32)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1505, file: !149, line: 1944, baseType: !174, size: 32)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1505, file: !149, line: 1945, baseType: !181, size: 32)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1499, file: !149, line: 1950, baseType: !771, size: 64, offset: 320)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1499, file: !149, line: 1951, baseType: !771, size: 64, offset: 384)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1499, file: !149, line: 1953, baseType: !1388, size: 64, offset: 448)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !894, file: !149, line: 3404, baseType: !1514, size: 1664)
!1514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !149, line: 3337, size: 1664, elements: !1515)
!1515 = !{!1516, !1517}
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1514, file: !149, line: 3338, baseType: !930, size: 192)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1514, file: !149, line: 3341, baseType: !1518, size: 1472, offset: 192)
!1518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1519, line: 410, size: 1472, elements: !1520)
!1519 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1520 = !{!1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684}
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1518, file: !1519, line: 412, baseType: !734, size: 32)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1518, file: !1519, line: 413, baseType: !734, size: 32, offset: 32)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1518, file: !1519, line: 414, baseType: !734, size: 32, offset: 64)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1518, file: !1519, line: 415, baseType: !734, size: 32, offset: 96)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1518, file: !1519, line: 416, baseType: !734, size: 32, offset: 128)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1518, file: !1519, line: 417, baseType: !734, size: 32, offset: 160)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1518, file: !1519, line: 418, baseType: !1005, size: 8, offset: 192)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1518, file: !1519, line: 419, baseType: !1005, size: 8, offset: 200)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1518, file: !1519, line: 420, baseType: !1530, size: 8, offset: 208)
!1530 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1518, file: !1519, line: 421, baseType: !1530, size: 8, offset: 216)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1518, file: !1519, line: 422, baseType: !1530, size: 8, offset: 224)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1518, file: !1519, line: 423, baseType: !1530, size: 8, offset: 232)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1518, file: !1519, line: 424, baseType: !1530, size: 8, offset: 240)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1518, file: !1519, line: 425, baseType: !1530, size: 8, offset: 248)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1518, file: !1519, line: 426, baseType: !1530, size: 8, offset: 256)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1518, file: !1519, line: 427, baseType: !1530, size: 8, offset: 264)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1518, file: !1519, line: 428, baseType: !1530, size: 8, offset: 272)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1518, file: !1519, line: 429, baseType: !1530, size: 8, offset: 280)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1518, file: !1519, line: 430, baseType: !1530, size: 8, offset: 288)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1518, file: !1519, line: 431, baseType: !1530, size: 8, offset: 296)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1518, file: !1519, line: 432, baseType: !1530, size: 8, offset: 304)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1518, file: !1519, line: 433, baseType: !1530, size: 8, offset: 312)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1518, file: !1519, line: 434, baseType: !1530, size: 8, offset: 320)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1518, file: !1519, line: 435, baseType: !1530, size: 8, offset: 328)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1518, file: !1519, line: 436, baseType: !1530, size: 8, offset: 336)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1518, file: !1519, line: 437, baseType: !1530, size: 8, offset: 344)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1518, file: !1519, line: 438, baseType: !1530, size: 8, offset: 352)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1518, file: !1519, line: 439, baseType: !1530, size: 8, offset: 360)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1518, file: !1519, line: 440, baseType: !1530, size: 8, offset: 368)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1518, file: !1519, line: 441, baseType: !1530, size: 8, offset: 376)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1518, file: !1519, line: 442, baseType: !1530, size: 8, offset: 384)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1518, file: !1519, line: 443, baseType: !1530, size: 8, offset: 392)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1518, file: !1519, line: 444, baseType: !1530, size: 8, offset: 400)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1518, file: !1519, line: 445, baseType: !1530, size: 8, offset: 408)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1518, file: !1519, line: 446, baseType: !1530, size: 8, offset: 416)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1518, file: !1519, line: 447, baseType: !1530, size: 8, offset: 424)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1518, file: !1519, line: 448, baseType: !1530, size: 8, offset: 432)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1518, file: !1519, line: 449, baseType: !1530, size: 8, offset: 440)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1518, file: !1519, line: 450, baseType: !1530, size: 8, offset: 448)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1518, file: !1519, line: 451, baseType: !1530, size: 8, offset: 456)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1518, file: !1519, line: 452, baseType: !1530, size: 8, offset: 464)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1518, file: !1519, line: 453, baseType: !1530, size: 8, offset: 472)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1518, file: !1519, line: 454, baseType: !1530, size: 8, offset: 480)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1518, file: !1519, line: 455, baseType: !1530, size: 8, offset: 488)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1518, file: !1519, line: 456, baseType: !1530, size: 8, offset: 496)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1518, file: !1519, line: 457, baseType: !1530, size: 8, offset: 504)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1518, file: !1519, line: 458, baseType: !1530, size: 8, offset: 512)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1518, file: !1519, line: 459, baseType: !1530, size: 8, offset: 520)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1518, file: !1519, line: 460, baseType: !1530, size: 8, offset: 528)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1518, file: !1519, line: 461, baseType: !1530, size: 8, offset: 536)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1518, file: !1519, line: 462, baseType: !1530, size: 8, offset: 544)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1518, file: !1519, line: 463, baseType: !1530, size: 8, offset: 552)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1518, file: !1519, line: 464, baseType: !1530, size: 8, offset: 560)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1518, file: !1519, line: 465, baseType: !1530, size: 8, offset: 568)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1518, file: !1519, line: 466, baseType: !1530, size: 8, offset: 576)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1518, file: !1519, line: 467, baseType: !1530, size: 8, offset: 584)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1518, file: !1519, line: 468, baseType: !1530, size: 8, offset: 592)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1518, file: !1519, line: 469, baseType: !1530, size: 8, offset: 600)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1518, file: !1519, line: 470, baseType: !1530, size: 8, offset: 608)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1518, file: !1519, line: 471, baseType: !1530, size: 8, offset: 616)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1518, file: !1519, line: 472, baseType: !1530, size: 8, offset: 624)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1518, file: !1519, line: 473, baseType: !1530, size: 8, offset: 632)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1518, file: !1519, line: 474, baseType: !1530, size: 8, offset: 640)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1518, file: !1519, line: 475, baseType: !1530, size: 8, offset: 648)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1518, file: !1519, line: 476, baseType: !1530, size: 8, offset: 656)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1518, file: !1519, line: 477, baseType: !1530, size: 8, offset: 664)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1518, file: !1519, line: 478, baseType: !1530, size: 8, offset: 672)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1518, file: !1519, line: 479, baseType: !1530, size: 8, offset: 680)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1518, file: !1519, line: 480, baseType: !1530, size: 8, offset: 688)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1518, file: !1519, line: 481, baseType: !1530, size: 8, offset: 696)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1518, file: !1519, line: 482, baseType: !1530, size: 8, offset: 704)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1518, file: !1519, line: 483, baseType: !1530, size: 8, offset: 712)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1518, file: !1519, line: 484, baseType: !1530, size: 8, offset: 720)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1518, file: !1519, line: 485, baseType: !1530, size: 8, offset: 728)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1518, file: !1519, line: 486, baseType: !1530, size: 8, offset: 736)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1518, file: !1519, line: 487, baseType: !1530, size: 8, offset: 744)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1518, file: !1519, line: 488, baseType: !1530, size: 8, offset: 752)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1518, file: !1519, line: 489, baseType: !1530, size: 8, offset: 760)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1518, file: !1519, line: 490, baseType: !1530, size: 8, offset: 768)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1518, file: !1519, line: 491, baseType: !1530, size: 8, offset: 776)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1518, file: !1519, line: 492, baseType: !1530, size: 8, offset: 784)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1518, file: !1519, line: 493, baseType: !1530, size: 8, offset: 792)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1518, file: !1519, line: 494, baseType: !1530, size: 8, offset: 800)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1518, file: !1519, line: 495, baseType: !1530, size: 8, offset: 808)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1518, file: !1519, line: 496, baseType: !1530, size: 8, offset: 816)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1518, file: !1519, line: 497, baseType: !1530, size: 8, offset: 824)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1518, file: !1519, line: 498, baseType: !1530, size: 8, offset: 832)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1518, file: !1519, line: 499, baseType: !1530, size: 8, offset: 840)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1518, file: !1519, line: 500, baseType: !1530, size: 8, offset: 848)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1518, file: !1519, line: 501, baseType: !1530, size: 8, offset: 856)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1518, file: !1519, line: 502, baseType: !1530, size: 8, offset: 864)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1518, file: !1519, line: 503, baseType: !1530, size: 8, offset: 872)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1518, file: !1519, line: 504, baseType: !1530, size: 8, offset: 880)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1518, file: !1519, line: 505, baseType: !1530, size: 8, offset: 888)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1518, file: !1519, line: 506, baseType: !1530, size: 8, offset: 896)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1518, file: !1519, line: 507, baseType: !1530, size: 8, offset: 904)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1518, file: !1519, line: 508, baseType: !1530, size: 8, offset: 912)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1518, file: !1519, line: 509, baseType: !1530, size: 8, offset: 920)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1518, file: !1519, line: 510, baseType: !1530, size: 8, offset: 928)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1518, file: !1519, line: 511, baseType: !1530, size: 8, offset: 936)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1518, file: !1519, line: 512, baseType: !1530, size: 8, offset: 944)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1518, file: !1519, line: 513, baseType: !1530, size: 8, offset: 952)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1518, file: !1519, line: 514, baseType: !1530, size: 8, offset: 960)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1518, file: !1519, line: 515, baseType: !1530, size: 8, offset: 968)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1518, file: !1519, line: 516, baseType: !1530, size: 8, offset: 976)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1518, file: !1519, line: 517, baseType: !1530, size: 8, offset: 984)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1518, file: !1519, line: 518, baseType: !1530, size: 8, offset: 992)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1518, file: !1519, line: 519, baseType: !1530, size: 8, offset: 1000)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1518, file: !1519, line: 520, baseType: !1530, size: 8, offset: 1008)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1518, file: !1519, line: 521, baseType: !1530, size: 8, offset: 1016)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1518, file: !1519, line: 522, baseType: !1530, size: 8, offset: 1024)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1518, file: !1519, line: 523, baseType: !1530, size: 8, offset: 1032)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1518, file: !1519, line: 524, baseType: !1530, size: 8, offset: 1040)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1518, file: !1519, line: 525, baseType: !1530, size: 8, offset: 1048)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1518, file: !1519, line: 526, baseType: !1530, size: 8, offset: 1056)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1518, file: !1519, line: 527, baseType: !1530, size: 8, offset: 1064)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1518, file: !1519, line: 528, baseType: !1530, size: 8, offset: 1072)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1518, file: !1519, line: 529, baseType: !1530, size: 8, offset: 1080)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1518, file: !1519, line: 530, baseType: !1530, size: 8, offset: 1088)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1518, file: !1519, line: 531, baseType: !1530, size: 8, offset: 1096)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1518, file: !1519, line: 532, baseType: !1530, size: 8, offset: 1104)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1518, file: !1519, line: 533, baseType: !1530, size: 8, offset: 1112)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1518, file: !1519, line: 534, baseType: !1530, size: 8, offset: 1120)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1518, file: !1519, line: 535, baseType: !1530, size: 8, offset: 1128)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1518, file: !1519, line: 536, baseType: !1530, size: 8, offset: 1136)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1518, file: !1519, line: 537, baseType: !1530, size: 8, offset: 1144)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1518, file: !1519, line: 538, baseType: !1530, size: 8, offset: 1152)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1518, file: !1519, line: 539, baseType: !1530, size: 8, offset: 1160)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1518, file: !1519, line: 540, baseType: !1530, size: 8, offset: 1168)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1518, file: !1519, line: 541, baseType: !1530, size: 8, offset: 1176)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1518, file: !1519, line: 542, baseType: !1530, size: 8, offset: 1184)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1518, file: !1519, line: 543, baseType: !1530, size: 8, offset: 1192)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1518, file: !1519, line: 544, baseType: !1530, size: 8, offset: 1200)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1518, file: !1519, line: 545, baseType: !1530, size: 8, offset: 1208)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1518, file: !1519, line: 546, baseType: !1530, size: 8, offset: 1216)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1518, file: !1519, line: 547, baseType: !1530, size: 8, offset: 1224)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1518, file: !1519, line: 548, baseType: !1530, size: 8, offset: 1232)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1518, file: !1519, line: 549, baseType: !1530, size: 8, offset: 1240)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1518, file: !1519, line: 550, baseType: !1530, size: 8, offset: 1248)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1518, file: !1519, line: 551, baseType: !1530, size: 8, offset: 1256)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1518, file: !1519, line: 552, baseType: !1530, size: 8, offset: 1264)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1518, file: !1519, line: 553, baseType: !1530, size: 8, offset: 1272)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1518, file: !1519, line: 554, baseType: !1530, size: 8, offset: 1280)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1518, file: !1519, line: 555, baseType: !1530, size: 8, offset: 1288)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1518, file: !1519, line: 556, baseType: !1530, size: 8, offset: 1296)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1518, file: !1519, line: 557, baseType: !1530, size: 8, offset: 1304)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1518, file: !1519, line: 558, baseType: !1530, size: 8, offset: 1312)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1518, file: !1519, line: 559, baseType: !1530, size: 8, offset: 1320)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1518, file: !1519, line: 560, baseType: !1530, size: 8, offset: 1328)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1518, file: !1519, line: 561, baseType: !1530, size: 8, offset: 1336)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1518, file: !1519, line: 562, baseType: !1530, size: 8, offset: 1344)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1518, file: !1519, line: 563, baseType: !1530, size: 8, offset: 1352)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1518, file: !1519, line: 564, baseType: !1530, size: 8, offset: 1360)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1518, file: !1519, line: 565, baseType: !1530, size: 8, offset: 1368)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1518, file: !1519, line: 566, baseType: !1530, size: 8, offset: 1376)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1518, file: !1519, line: 567, baseType: !1530, size: 8, offset: 1384)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1518, file: !1519, line: 568, baseType: !1530, size: 8, offset: 1392)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1518, file: !1519, line: 569, baseType: !1530, size: 8, offset: 1400)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1518, file: !1519, line: 570, baseType: !1530, size: 8, offset: 1408)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1518, file: !1519, line: 571, baseType: !1530, size: 8, offset: 1416)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1518, file: !1519, line: 572, baseType: !1530, size: 8, offset: 1424)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1518, file: !1519, line: 573, baseType: !1530, size: 8, offset: 1432)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1518, file: !1519, line: 574, baseType: !1530, size: 8, offset: 1440)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !894, file: !149, line: 3405, baseType: !1686, size: 384)
!1686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !149, line: 3352, size: 384, elements: !1687)
!1687 = !{!1688, !1689}
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1686, file: !149, line: 3353, baseType: !930, size: 192)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1686, file: !149, line: 3356, baseType: !1690, size: 192, offset: 192)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1519, line: 578, size: 192, elements: !1691)
!1691 = !{!1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1690, file: !1519, line: 580, baseType: !734, size: 32)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1690, file: !1519, line: 581, baseType: !734, size: 32, offset: 32)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1690, file: !1519, line: 582, baseType: !734, size: 32, offset: 64)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1690, file: !1519, line: 583, baseType: !734, size: 32, offset: 96)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1690, file: !1519, line: 584, baseType: !1005, size: 8, offset: 128)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1690, file: !1519, line: 585, baseType: !1005, size: 8, offset: 136)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1690, file: !1519, line: 586, baseType: !1005, size: 8, offset: 144)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1690, file: !1519, line: 587, baseType: !1005, size: 8, offset: 152)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1690, file: !1519, line: 588, baseType: !1005, size: 8, offset: 160)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1690, file: !1519, line: 589, baseType: !1005, size: 8, offset: 168)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1690, file: !1519, line: 590, baseType: !1005, size: 8, offset: 176)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !795, file: !517, line: 178, baseType: !744, size: 64)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !795, file: !517, line: 179, baseType: !1705, size: 64)
!1705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1706, size: 64)
!1706 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !517, line: 150, baseType: !1707)
!1707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !517, line: 142, size: 320, elements: !1708)
!1708 = !{!1709, !1710, !1711, !1712, !1713, !1714}
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1707, file: !517, line: 144, baseType: !892, size: 64)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1707, file: !517, line: 145, baseType: !775, size: 64, offset: 64)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1707, file: !517, line: 146, baseType: !775, size: 64, offset: 128)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1707, file: !517, line: 147, baseType: !1353, size: 32, offset: 192)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1707, file: !517, line: 148, baseType: !5, size: 32, offset: 224)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1707, file: !517, line: 149, baseType: !1005, size: 8, offset: 256)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !795, file: !517, line: 180, baseType: !1716, size: 64)
!1716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1717, size: 64)
!1717 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !517, line: 162, baseType: !1718)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !517, line: 159, size: 128, elements: !1719)
!1719 = !{!1720, !1721}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1718, file: !517, line: 160, baseType: !892, size: 64)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1718, file: !517, line: 161, baseType: !862, size: 64, offset: 64)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !795, file: !517, line: 181, baseType: !1723, size: 64)
!1723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1724, size: 64)
!1724 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !517, line: 181, flags: DIFlagFwdDecl)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !790, file: !517, line: 317, baseType: !1726, size: 64)
!1726 = !DICompositeType(tag: DW_TAG_array_type, baseType: !862, size: 64, elements: !735)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !790, file: !517, line: 318, baseType: !1728, size: 320)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !517, line: 188, size: 320, elements: !1729)
!1729 = !{!1730, !1732, !1787}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1728, file: !517, line: 190, baseType: !1731, size: 192)
!1731 = !DICompositeType(tag: DW_TAG_array_type, baseType: !794, size: 192, elements: !963)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1728, file: !517, line: 193, baseType: !1733, size: 64, offset: 192)
!1733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1734, size: 64)
!1734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !517, line: 206, size: 320, elements: !1735)
!1735 = !{!1736, !1772, !1773, !1774, !1786}
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1734, file: !517, line: 208, baseType: !1737, size: 64)
!1737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1738, size: 64)
!1738 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !761, line: 62, baseType: !1739)
!1739 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1740, line: 538, size: 256, elements: !1741)
!1740 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1741 = !{!1742, !1746, !1752, !1763}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1739, file: !1740, line: 539, baseType: !1743, size: 32)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1740, line: 482, size: 32, elements: !1744)
!1744 = !{!1745}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1743, file: !1740, line: 484, baseType: !5, size: 32)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1739, file: !1740, line: 540, baseType: !1747, size: 192)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1740, line: 488, size: 192, elements: !1748)
!1748 = !{!1749, !1750, !1751}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1747, file: !1740, line: 489, baseType: !1743, size: 32)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1747, file: !1740, line: 492, baseType: !800, size: 64, offset: 64)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1747, file: !1740, line: 496, baseType: !892, size: 64, offset: 128)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1739, file: !1740, line: 541, baseType: !1753, size: 256)
!1753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1740, line: 504, size: 256, elements: !1754)
!1754 = !{!1755, !1756, !1761, !1762}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1753, file: !1740, line: 505, baseType: !1743, size: 32)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1753, file: !1740, line: 509, baseType: !1757, size: 64, offset: 64)
!1757 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1740, line: 501, baseType: !1758)
!1758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1759, size: 64)
!1759 = !DISubroutineType(types: !1760)
!1760 = !{null, !1209}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1753, file: !1740, line: 510, baseType: !1209, size: 64, offset: 128)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1753, file: !1740, line: 513, baseType: !1737, size: 64, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1739, file: !1740, line: 542, baseType: !1764, size: 128)
!1764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1740, line: 530, size: 128, elements: !1765)
!1765 = !{!1766, !1767}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1764, file: !1740, line: 531, baseType: !1743, size: 32)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1764, file: !1740, line: 534, baseType: !1768, size: 64, offset: 64)
!1768 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1740, line: 525, baseType: !1769)
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1770, size: 64)
!1770 = !DISubroutineType(types: !1771)
!1771 = !{!1005, !892, !800, !845, !845}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1734, file: !517, line: 211, baseType: !5, size: 32, offset: 64)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1734, file: !517, line: 214, baseType: !862, size: 64, offset: 128)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1734, file: !517, line: 224, baseType: !1775, size: 64, offset: 192)
!1775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1776, size: 64)
!1776 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !517, line: 202, baseType: !1777)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !517, line: 202, size: 128, elements: !1778)
!1778 = !{!1779}
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1777, file: !517, line: 202, baseType: !1780, size: 128)
!1780 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !517, line: 200, baseType: !1781)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !517, line: 200, size: 128, elements: !1782)
!1782 = !{!1783, !1784, !1785}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1781, file: !517, line: 200, baseType: !5, size: 32)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1781, file: !517, line: 200, baseType: !5, size: 32, offset: 32)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1781, file: !517, line: 200, baseType: !811, size: 64, offset: 64)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1734, file: !517, line: 234, baseType: !1775, size: 64, offset: 256)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1728, file: !517, line: 197, baseType: !862, size: 64, offset: 256)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !790, file: !517, line: 319, baseType: !952, size: 256)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !790, file: !517, line: 320, baseType: !971, size: 192)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !763, file: !133, line: 134, baseType: !720, size: 64, offset: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !763, file: !133, line: 137, baseType: !892, size: 64, offset: 256)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !763, file: !133, line: 138, baseType: !1013, size: 32, offset: 320)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !763, file: !133, line: 142, baseType: !5, size: 32, offset: 352)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !763, file: !133, line: 144, baseType: !734, size: 32, offset: 384)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !763, file: !133, line: 145, baseType: !734, size: 32, offset: 416)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !763, file: !133, line: 146, baseType: !1797, size: 64, offset: 448)
!1797 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !133, line: 119, baseType: !862)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !745, file: !133, line: 220, baseType: !748, size: 64, offset: 64)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !745, file: !133, line: 223, baseType: !720, size: 64, offset: 128)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !745, file: !133, line: 226, baseType: !738, size: 64, offset: 192)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !745, file: !133, line: 229, baseType: !1802, size: 128, offset: 256)
!1802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1803, size: 128, elements: !846)
!1803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1804, size: 64)
!1804 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !133, line: 229, flags: DIFlagFwdDecl)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !745, file: !133, line: 232, baseType: !744, size: 64, offset: 384)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !745, file: !133, line: 233, baseType: !744, size: 64, offset: 448)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !745, file: !133, line: 238, baseType: !1808, size: 64, offset: 512)
!1808 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !133, line: 235, size: 64, elements: !1809)
!1809 = !{!1810, !1816}
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1808, file: !133, line: 236, baseType: !1811, size: 64)
!1811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1812, size: 64)
!1812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !133, line: 273, size: 128, elements: !1813)
!1813 = !{!1814, !1815}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1812, file: !133, line: 275, baseType: !771, size: 64)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1812, file: !133, line: 278, baseType: !771, size: 64, offset: 64)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1808, file: !133, line: 237, baseType: !1817, size: 64)
!1817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1818, size: 64)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !133, line: 259, size: 320, elements: !1819)
!1819 = !{!1820, !1821, !1822, !1823, !1824}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1818, file: !133, line: 261, baseType: !775, size: 64)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1818, file: !133, line: 262, baseType: !775, size: 64, offset: 64)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1818, file: !133, line: 266, baseType: !775, size: 64, offset: 128)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1818, file: !133, line: 267, baseType: !775, size: 64, offset: 192)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1818, file: !133, line: 270, baseType: !734, size: 32, offset: 256)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !745, file: !133, line: 241, baseType: !1797, size: 64, offset: 576)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !745, file: !133, line: 244, baseType: !734, size: 32, offset: 640)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !745, file: !133, line: 247, baseType: !734, size: 32, offset: 672)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !745, file: !133, line: 250, baseType: !734, size: 32, offset: 704)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !745, file: !133, line: 253, baseType: !734, size: 32, offset: 736)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !745, file: !133, line: 256, baseType: !734, size: 32, offset: 768)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !739, file: !376, line: 111, baseType: !744, size: 64, offset: 128)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !739, file: !376, line: 114, baseType: !1833, size: 64, offset: 192)
!1833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !376, line: 41, size: 64, elements: !1834)
!1834 = !{!1835, !1836}
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1833, file: !376, line: 42, baseType: !375, size: 32)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1833, file: !376, line: 43, baseType: !5, size: 32, offset: 32)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !739, file: !376, line: 117, baseType: !5, size: 32, offset: 256)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !739, file: !376, line: 120, baseType: !5, size: 32, offset: 288)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !739, file: !376, line: 123, baseType: !1186, size: 64, offset: 320)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !739, file: !376, line: 126, baseType: !738, size: 64, offset: 384)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !739, file: !376, line: 129, baseType: !738, size: 64, offset: 448)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !739, file: !376, line: 132, baseType: !720, size: 64, offset: 512)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !739, file: !376, line: 139, baseType: !892, size: 64, offset: 576)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !739, file: !376, line: 143, baseType: !940, size: 128, offset: 640)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !739, file: !376, line: 146, baseType: !940, size: 128, offset: 768)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !739, file: !376, line: 148, baseType: !1005, size: 8, offset: 896)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !739, file: !376, line: 149, baseType: !1005, size: 8, offset: 904)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !739, file: !376, line: 153, baseType: !384, size: 32, offset: 928)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !739, file: !376, line: 156, baseType: !1850, size: 64, offset: 960)
!1850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1851, size: 64)
!1851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !376, line: 48, size: 320, elements: !1852)
!1852 = !{!1853, !1854, !1855, !1856}
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1851, file: !376, line: 50, baseType: !1402, size: 64)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1851, file: !376, line: 59, baseType: !940, size: 128, offset: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1851, file: !376, line: 64, baseType: !1005, size: 8, offset: 192)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1851, file: !376, line: 67, baseType: !1850, size: 64, offset: 256)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !739, file: !376, line: 159, baseType: !1858, size: 64, offset: 1024)
!1858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1859, size: 64)
!1859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !376, line: 72, size: 256, elements: !1860)
!1860 = !{!1861, !1862, !1863, !1864}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1859, file: !376, line: 74, baseType: !762, size: 64)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1859, file: !376, line: 77, baseType: !1858, size: 64, offset: 64)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1859, file: !376, line: 78, baseType: !1858, size: 64, offset: 128)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1859, file: !376, line: 81, baseType: !1858, size: 64, offset: 192)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !739, file: !376, line: 162, baseType: !1005, size: 8, offset: 1088)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !739, file: !376, line: 166, baseType: !892, size: 64, offset: 1152)
!1867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1868, size: 64)
!1868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_info", file: !1, line: 112, size: 576, elements: !1869)
!1869 = !{!1870, !1871, !1882, !1884, !1885, !1902, !1904, !1905, !1906}
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "insns_to_split", scope: !1868, file: !1, line: 114, baseType: !1199, size: 64)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "iv_to_split_head", scope: !1868, file: !1, line: 115, baseType: !1872, size: 64, offset: 64)
!1872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1873, size: 64)
!1873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iv_to_split", file: !1, line: 74, size: 384, elements: !1874)
!1874 = !{!1875, !1876, !1877, !1878, !1879, !1880}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !1873, file: !1, line: 76, baseType: !775, size: 64)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "base_var", scope: !1873, file: !1, line: 77, baseType: !775, size: 64, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !1873, file: !1, line: 79, baseType: !775, size: 64, offset: 128)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1873, file: !1, line: 80, baseType: !1872, size: 64, offset: 192)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "n_loc", scope: !1873, file: !1, line: 81, baseType: !5, size: 32, offset: 256)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1873, file: !1, line: 82, baseType: !1881, size: 96, offset: 288)
!1881 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 96, elements: !963)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "iv_to_split_tail", scope: !1868, file: !1, line: 116, baseType: !1883, size: 64, offset: 128)
!1883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1872, size: 64)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "insns_with_var_to_expand", scope: !1868, file: !1, line: 117, baseType: !1199, size: 64, offset: 192)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "var_to_expand_head", scope: !1868, file: !1, line: 119, baseType: !1886, size: 64, offset: 256)
!1886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1887, size: 64)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_to_expand", file: !1, line: 90, size: 384, elements: !1888)
!1888 = !{!1889, !1890, !1891, !1897, !1898, !1899, !1900, !1901}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !1887, file: !1, line: 92, baseType: !775, size: 64)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1887, file: !1, line: 93, baseType: !775, size: 64, offset: 64)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "var_expansions", scope: !1887, file: !1, line: 94, baseType: !1892, size: 64, offset: 128)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_heap", file: !517, line: 201, baseType: !1894)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_heap", file: !517, line: 201, size: 128, elements: !1895)
!1895 = !{!1896}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1894, file: !517, line: 201, baseType: !1780, size: 128)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1887, file: !1, line: 95, baseType: !1886, size: 64, offset: 192)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1887, file: !1, line: 96, baseType: !516, size: 32, offset: 256)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "expansion_count", scope: !1887, file: !1, line: 98, baseType: !734, size: 32, offset: 288)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "reuse_expansion", scope: !1887, file: !1, line: 99, baseType: !734, size: 32, offset: 320)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "accum_pos", scope: !1887, file: !1, line: 103, baseType: !5, size: 32, offset: 352)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "var_to_expand_tail", scope: !1868, file: !1, line: 120, baseType: !1903, size: 64, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1886, size: 64)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "first_new_block", scope: !1868, file: !1, line: 121, baseType: !5, size: 32, offset: 384)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "loop_exit", scope: !1868, file: !1, line: 123, baseType: !1150, size: 64, offset: 448)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "loop_preheader", scope: !1868, file: !1, line: 124, baseType: !1150, size: 64, offset: 512)
!1907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1908, size: 64)
!1908 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1873)
!1909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1910, size: 64)
!1910 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1887)
!1911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1912, size: 64)
!1912 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !133, line: 283, baseType: !1913)
!1913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !133, line: 283, size: 128, elements: !1914)
!1914 = !{!1915}
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1913, file: !133, line: 283, baseType: !1158, size: 128)
!1916 = !{i32 7, !"Dwarf Version", i32 4}
!1917 = !{i32 2, !"Debug Info Version", i32 3}
!1918 = !{i32 1, !"wchar_size", i32 4}
!1919 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!1920 = distinct !DISubprogram(name: "unroll_and_peel_loops", scope: !1, file: !1, line: 156, type: !1921, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!1921 = !DISubroutineType(types: !1922)
!1922 = !{null, !734}
!1923 = !{}
!1924 = !DILocalVariable(name: "flags", arg: 1, scope: !1920, file: !1, line: 156, type: !734)
!1925 = !DILocation(line: 156, column: 28, scope: !1920)
!1926 = !DILocalVariable(name: "loop", scope: !1920, file: !1, line: 158, type: !738)
!1927 = !DILocation(line: 158, column: 16, scope: !1920)
!1928 = !DILocalVariable(name: "check", scope: !1920, file: !1, line: 159, type: !1005)
!1929 = !DILocation(line: 159, column: 8, scope: !1920)
!1930 = !DILocalVariable(name: "li", scope: !1920, file: !1, line: 160, type: !1931)
!1931 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !376, line: 515, baseType: !1932)
!1932 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !376, line: 508, size: 128, elements: !1933)
!1933 = !{!1934, !1935}
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !1932, file: !376, line: 511, baseType: !721, size: 64)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !1932, file: !376, line: 514, baseType: !5, size: 32, offset: 64)
!1936 = !DILocation(line: 160, column: 17, scope: !1920)
!1937 = !DILocation(line: 164, column: 26, scope: !1920)
!1938 = !DILocation(line: 164, column: 3, scope: !1920)
!1939 = !DILocation(line: 167, column: 33, scope: !1920)
!1940 = !DILocation(line: 167, column: 3, scope: !1920)
!1941 = !DILocation(line: 170, column: 3, scope: !1942)
!1942 = distinct !DILexicalBlock(scope: !1920, file: !1, line: 170, column: 3)
!1943 = !DILocation(line: 170, column: 3, scope: !1944)
!1944 = distinct !DILexicalBlock(scope: !1942, file: !1, line: 170, column: 3)
!1945 = !DILocation(line: 172, column: 13, scope: !1946)
!1946 = distinct !DILexicalBlock(scope: !1944, file: !1, line: 171, column: 5)
!1947 = !DILocation(line: 174, column: 15, scope: !1946)
!1948 = !DILocation(line: 174, column: 21, scope: !1946)
!1949 = !DILocation(line: 174, column: 34, scope: !1946)
!1950 = !DILocation(line: 174, column: 7, scope: !1946)
!1951 = !DILocation(line: 178, column: 4, scope: !1952)
!1952 = distinct !DILexicalBlock(scope: !1946, file: !1, line: 175, column: 2)
!1953 = !DILocation(line: 180, column: 22, scope: !1952)
!1954 = !DILocation(line: 180, column: 4, scope: !1952)
!1955 = !DILocation(line: 181, column: 4, scope: !1952)
!1956 = !DILocation(line: 183, column: 37, scope: !1952)
!1957 = !DILocation(line: 183, column: 4, scope: !1952)
!1958 = !DILocation(line: 184, column: 4, scope: !1952)
!1959 = !DILocation(line: 186, column: 36, scope: !1952)
!1960 = !DILocation(line: 186, column: 4, scope: !1952)
!1961 = !DILocation(line: 187, column: 4, scope: !1952)
!1962 = !DILocation(line: 189, column: 24, scope: !1952)
!1963 = !DILocation(line: 189, column: 4, scope: !1952)
!1964 = !DILocation(line: 190, column: 4, scope: !1952)
!1965 = !DILocation(line: 192, column: 10, scope: !1952)
!1966 = !DILocation(line: 193, column: 4, scope: !1952)
!1967 = !DILocation(line: 195, column: 4, scope: !1952)
!1968 = !DILocation(line: 196, column: 2, scope: !1952)
!1969 = !DILocation(line: 197, column: 11, scope: !1970)
!1970 = distinct !DILexicalBlock(scope: !1946, file: !1, line: 197, column: 11)
!1971 = !DILocation(line: 197, column: 11, scope: !1946)
!1972 = !DILocation(line: 203, column: 2, scope: !1973)
!1973 = distinct !DILexicalBlock(scope: !1970, file: !1, line: 198, column: 2)
!1974 = !DILocation(line: 204, column: 5, scope: !1946)
!1975 = distinct !{!1975, !1941, !1976}
!1976 = !DILocation(line: 204, column: 5, scope: !1942)
!1977 = !DILocation(line: 206, column: 3, scope: !1920)
!1978 = !DILocation(line: 207, column: 1, scope: !1920)
!1979 = distinct !DISubprogram(name: "peel_loops_completely", scope: !1, file: !1, line: 232, type: !1921, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!1980 = !DILocalVariable(name: "flags", arg: 1, scope: !1979, file: !1, line: 232, type: !734)
!1981 = !DILocation(line: 232, column: 28, scope: !1979)
!1982 = !DILocalVariable(name: "loop", scope: !1979, file: !1, line: 234, type: !738)
!1983 = !DILocation(line: 234, column: 16, scope: !1979)
!1984 = !DILocalVariable(name: "li", scope: !1979, file: !1, line: 235, type: !1931)
!1985 = !DILocation(line: 235, column: 17, scope: !1979)
!1986 = !DILocation(line: 238, column: 3, scope: !1987)
!1987 = distinct !DILexicalBlock(scope: !1979, file: !1, line: 238, column: 3)
!1988 = !DILocation(line: 238, column: 3, scope: !1989)
!1989 = distinct !DILexicalBlock(scope: !1987, file: !1, line: 238, column: 3)
!1990 = !DILocation(line: 240, column: 7, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1989, file: !1, line: 239, column: 5)
!1992 = !DILocation(line: 240, column: 13, scope: !1991)
!1993 = !DILocation(line: 240, column: 26, scope: !1991)
!1994 = !DILocation(line: 240, column: 35, scope: !1991)
!1995 = !DILocation(line: 242, column: 11, scope: !1996)
!1996 = distinct !DILexicalBlock(scope: !1991, file: !1, line: 242, column: 11)
!1997 = !DILocation(line: 242, column: 11, scope: !1991)
!1998 = !DILocation(line: 243, column: 11, scope: !1996)
!1999 = !DILocation(line: 245, column: 4, scope: !1996)
!2000 = !DILocation(line: 245, column: 10, scope: !1996)
!2001 = !DILocation(line: 243, column: 2, scope: !1996)
!2002 = !DILocation(line: 247, column: 38, scope: !1991)
!2003 = !DILocation(line: 247, column: 22, scope: !1991)
!2004 = !DILocation(line: 247, column: 7, scope: !1991)
!2005 = !DILocation(line: 247, column: 13, scope: !1991)
!2006 = !DILocation(line: 247, column: 20, scope: !1991)
!2007 = !DILocation(line: 249, column: 33, scope: !1991)
!2008 = !DILocation(line: 249, column: 39, scope: !1991)
!2009 = !DILocation(line: 249, column: 7, scope: !1991)
!2010 = !DILocation(line: 250, column: 11, scope: !2011)
!2011 = distinct !DILexicalBlock(scope: !1991, file: !1, line: 250, column: 11)
!2012 = !DILocation(line: 250, column: 17, scope: !2011)
!2013 = !DILocation(line: 250, column: 30, scope: !2011)
!2014 = !DILocation(line: 250, column: 39, scope: !2011)
!2015 = !DILocation(line: 250, column: 11, scope: !1991)
!2016 = !DILocation(line: 251, column: 26, scope: !2011)
!2017 = !DILocation(line: 251, column: 32, scope: !2011)
!2018 = !DILocation(line: 251, column: 2, scope: !2011)
!2019 = !DILocation(line: 253, column: 11, scope: !2020)
!2020 = distinct !DILexicalBlock(scope: !1991, file: !1, line: 253, column: 11)
!2021 = !DILocation(line: 253, column: 17, scope: !2020)
!2022 = !DILocation(line: 253, column: 30, scope: !2020)
!2023 = !DILocation(line: 253, column: 39, scope: !2020)
!2024 = !DILocation(line: 253, column: 11, scope: !1991)
!2025 = !DILocation(line: 255, column: 26, scope: !2026)
!2026 = distinct !DILexicalBlock(scope: !2020, file: !1, line: 254, column: 2)
!2027 = !DILocation(line: 255, column: 4, scope: !2026)
!2028 = !DILocation(line: 260, column: 2, scope: !2026)
!2029 = !DILocation(line: 261, column: 5, scope: !1991)
!2030 = distinct !{!2030, !1986, !2031}
!2031 = !DILocation(line: 261, column: 5, scope: !1987)
!2032 = !DILocation(line: 262, column: 1, scope: !1979)
!2033 = distinct !DISubprogram(name: "decide_unrolling_and_peeling", scope: !1, file: !1, line: 266, type: !1921, scopeLine: 267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!2034 = !DILocalVariable(name: "flags", arg: 1, scope: !2033, file: !1, line: 266, type: !734)
!2035 = !DILocation(line: 266, column: 35, scope: !2033)
!2036 = !DILocalVariable(name: "loop", scope: !2033, file: !1, line: 268, type: !738)
!2037 = !DILocation(line: 268, column: 16, scope: !2033)
!2038 = !DILocalVariable(name: "li", scope: !2033, file: !1, line: 269, type: !1931)
!2039 = !DILocation(line: 269, column: 17, scope: !2033)
!2040 = !DILocation(line: 272, column: 3, scope: !2041)
!2041 = distinct !DILexicalBlock(scope: !2033, file: !1, line: 272, column: 3)
!2042 = !DILocation(line: 272, column: 3, scope: !2043)
!2043 = distinct !DILexicalBlock(scope: !2041, file: !1, line: 272, column: 3)
!2044 = !DILocation(line: 274, column: 7, scope: !2045)
!2045 = distinct !DILexicalBlock(scope: !2043, file: !1, line: 273, column: 5)
!2046 = !DILocation(line: 274, column: 13, scope: !2045)
!2047 = !DILocation(line: 274, column: 26, scope: !2045)
!2048 = !DILocation(line: 274, column: 35, scope: !2045)
!2049 = !DILocation(line: 276, column: 11, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 276, column: 11)
!2051 = !DILocation(line: 276, column: 11, scope: !2045)
!2052 = !DILocation(line: 277, column: 11, scope: !2050)
!2053 = !DILocation(line: 277, column: 60, scope: !2050)
!2054 = !DILocation(line: 277, column: 66, scope: !2050)
!2055 = !DILocation(line: 277, column: 2, scope: !2050)
!2056 = !DILocation(line: 280, column: 37, scope: !2057)
!2057 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 280, column: 11)
!2058 = !DILocation(line: 280, column: 11, scope: !2057)
!2059 = !DILocation(line: 280, column: 11, scope: !2045)
!2060 = !DILocation(line: 282, column: 8, scope: !2061)
!2061 = distinct !DILexicalBlock(scope: !2062, file: !1, line: 282, column: 8)
!2062 = distinct !DILexicalBlock(scope: !2057, file: !1, line: 281, column: 2)
!2063 = !DILocation(line: 282, column: 8, scope: !2062)
!2064 = !DILocation(line: 283, column: 15, scope: !2061)
!2065 = !DILocation(line: 283, column: 6, scope: !2061)
!2066 = !DILocation(line: 284, column: 4, scope: !2062)
!2067 = !DILocation(line: 288, column: 34, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 288, column: 11)
!2069 = !DILocation(line: 288, column: 12, scope: !2068)
!2070 = !DILocation(line: 288, column: 11, scope: !2045)
!2071 = !DILocation(line: 290, column: 8, scope: !2072)
!2072 = distinct !DILexicalBlock(scope: !2073, file: !1, line: 290, column: 8)
!2073 = distinct !DILexicalBlock(scope: !2068, file: !1, line: 289, column: 2)
!2074 = !DILocation(line: 290, column: 8, scope: !2073)
!2075 = !DILocation(line: 291, column: 15, scope: !2072)
!2076 = !DILocation(line: 291, column: 6, scope: !2072)
!2077 = !DILocation(line: 293, column: 4, scope: !2073)
!2078 = !DILocation(line: 297, column: 11, scope: !2079)
!2079 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 297, column: 11)
!2080 = !DILocation(line: 297, column: 17, scope: !2079)
!2081 = !DILocation(line: 297, column: 11, scope: !2045)
!2082 = !DILocation(line: 299, column: 8, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2084, file: !1, line: 299, column: 8)
!2084 = distinct !DILexicalBlock(scope: !2079, file: !1, line: 298, column: 2)
!2085 = !DILocation(line: 299, column: 8, scope: !2084)
!2086 = !DILocation(line: 300, column: 15, scope: !2083)
!2087 = !DILocation(line: 300, column: 6, scope: !2083)
!2088 = !DILocation(line: 301, column: 4, scope: !2084)
!2089 = !DILocation(line: 304, column: 38, scope: !2045)
!2090 = !DILocation(line: 304, column: 22, scope: !2045)
!2091 = !DILocation(line: 304, column: 7, scope: !2045)
!2092 = !DILocation(line: 304, column: 13, scope: !2045)
!2093 = !DILocation(line: 304, column: 20, scope: !2045)
!2094 = !DILocation(line: 305, column: 49, scope: !2045)
!2095 = !DILocation(line: 305, column: 25, scope: !2045)
!2096 = !DILocation(line: 305, column: 7, scope: !2045)
!2097 = !DILocation(line: 305, column: 13, scope: !2045)
!2098 = !DILocation(line: 305, column: 23, scope: !2045)
!2099 = !DILocation(line: 310, column: 42, scope: !2045)
!2100 = !DILocation(line: 310, column: 48, scope: !2045)
!2101 = !DILocation(line: 310, column: 7, scope: !2045)
!2102 = !DILocation(line: 311, column: 11, scope: !2103)
!2103 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 311, column: 11)
!2104 = !DILocation(line: 311, column: 17, scope: !2103)
!2105 = !DILocation(line: 311, column: 30, scope: !2103)
!2106 = !DILocation(line: 311, column: 39, scope: !2103)
!2107 = !DILocation(line: 311, column: 11, scope: !2045)
!2108 = !DILocation(line: 312, column: 36, scope: !2103)
!2109 = !DILocation(line: 312, column: 42, scope: !2103)
!2110 = !DILocation(line: 312, column: 2, scope: !2103)
!2111 = !DILocation(line: 313, column: 11, scope: !2112)
!2112 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 313, column: 11)
!2113 = !DILocation(line: 313, column: 17, scope: !2112)
!2114 = !DILocation(line: 313, column: 30, scope: !2112)
!2115 = !DILocation(line: 313, column: 39, scope: !2112)
!2116 = !DILocation(line: 313, column: 11, scope: !2045)
!2117 = !DILocation(line: 314, column: 24, scope: !2112)
!2118 = !DILocation(line: 314, column: 30, scope: !2112)
!2119 = !DILocation(line: 314, column: 2, scope: !2112)
!2120 = !DILocation(line: 315, column: 11, scope: !2121)
!2121 = distinct !DILexicalBlock(scope: !2045, file: !1, line: 315, column: 11)
!2122 = !DILocation(line: 315, column: 17, scope: !2121)
!2123 = !DILocation(line: 315, column: 30, scope: !2121)
!2124 = !DILocation(line: 315, column: 39, scope: !2121)
!2125 = !DILocation(line: 315, column: 11, scope: !2045)
!2126 = !DILocation(line: 316, column: 22, scope: !2121)
!2127 = !DILocation(line: 316, column: 28, scope: !2121)
!2128 = !DILocation(line: 316, column: 2, scope: !2121)
!2129 = !DILocation(line: 317, column: 5, scope: !2045)
!2130 = distinct !{!2130, !2040, !2131}
!2131 = !DILocation(line: 317, column: 5, scope: !2041)
!2132 = !DILocation(line: 318, column: 1, scope: !2033)
!2133 = distinct !DISubprogram(name: "fel_init", scope: !376, file: !376, line: 535, type: !2134, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!2134 = !DISubroutineType(types: !2135)
!2135 = !{null, !2136, !2137, !5}
!2136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1931, size: 64)
!2137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !737, size: 64)
!2138 = !DILocalVariable(name: "li", arg: 1, scope: !2133, file: !376, line: 535, type: !2136)
!2139 = !DILocation(line: 535, column: 26, scope: !2133)
!2140 = !DILocalVariable(name: "loop", arg: 2, scope: !2133, file: !376, line: 535, type: !2137)
!2141 = !DILocation(line: 535, column: 38, scope: !2133)
!2142 = !DILocalVariable(name: "flags", arg: 3, scope: !2133, file: !376, line: 535, type: !5)
!2143 = !DILocation(line: 535, column: 53, scope: !2133)
!2144 = !DILocalVariable(name: "aloop", scope: !2133, file: !376, line: 537, type: !738)
!2145 = !DILocation(line: 537, column: 16, scope: !2133)
!2146 = !DILocalVariable(name: "i", scope: !2133, file: !376, line: 538, type: !5)
!2147 = !DILocation(line: 538, column: 12, scope: !2133)
!2148 = !DILocalVariable(name: "mn", scope: !2133, file: !376, line: 539, type: !734)
!2149 = !DILocation(line: 539, column: 7, scope: !2133)
!2150 = !DILocation(line: 541, column: 3, scope: !2133)
!2151 = !DILocation(line: 541, column: 7, scope: !2133)
!2152 = !DILocation(line: 541, column: 11, scope: !2133)
!2153 = !DILocation(line: 542, column: 8, scope: !2154)
!2154 = distinct !DILexicalBlock(scope: !2133, file: !376, line: 542, column: 7)
!2155 = !DILocation(line: 542, column: 7, scope: !2133)
!2156 = !DILocation(line: 544, column: 7, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2154, file: !376, line: 543, column: 5)
!2158 = !DILocation(line: 544, column: 11, scope: !2157)
!2159 = !DILocation(line: 544, column: 20, scope: !2157)
!2160 = !DILocation(line: 545, column: 8, scope: !2157)
!2161 = !DILocation(line: 545, column: 13, scope: !2157)
!2162 = !DILocation(line: 546, column: 7, scope: !2157)
!2163 = !DILocation(line: 549, column: 18, scope: !2133)
!2164 = !DILocation(line: 549, column: 3, scope: !2133)
!2165 = !DILocation(line: 549, column: 7, scope: !2133)
!2166 = !DILocation(line: 549, column: 16, scope: !2133)
!2167 = !DILocation(line: 550, column: 9, scope: !2133)
!2168 = !DILocation(line: 550, column: 15, scope: !2133)
!2169 = !DILocation(line: 550, column: 8, scope: !2133)
!2170 = !DILocation(line: 550, column: 6, scope: !2133)
!2171 = !DILocation(line: 552, column: 7, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2133, file: !376, line: 552, column: 7)
!2173 = !DILocation(line: 552, column: 13, scope: !2172)
!2174 = !DILocation(line: 552, column: 7, scope: !2133)
!2175 = !DILocation(line: 554, column: 14, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2177, file: !376, line: 554, column: 7)
!2177 = distinct !DILexicalBlock(scope: !2172, file: !376, line: 553, column: 5)
!2178 = !DILocation(line: 554, column: 12, scope: !2176)
!2179 = !DILocation(line: 554, column: 19, scope: !2180)
!2180 = distinct !DILexicalBlock(scope: !2176, file: !376, line: 554, column: 7)
!2181 = !DILocation(line: 554, column: 7, scope: !2176)
!2182 = !DILocation(line: 555, column: 6, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2180, file: !376, line: 555, column: 6)
!2184 = !DILocation(line: 555, column: 12, scope: !2183)
!2185 = !DILocation(line: 556, column: 6, scope: !2183)
!2186 = !DILocation(line: 556, column: 9, scope: !2183)
!2187 = !DILocation(line: 556, column: 16, scope: !2183)
!2188 = !DILocation(line: 556, column: 22, scope: !2183)
!2189 = !DILocation(line: 557, column: 6, scope: !2183)
!2190 = !DILocation(line: 557, column: 9, scope: !2183)
!2191 = !DILocation(line: 557, column: 16, scope: !2183)
!2192 = !DILocation(line: 557, column: 23, scope: !2183)
!2193 = !DILocation(line: 557, column: 20, scope: !2183)
!2194 = !DILocation(line: 555, column: 6, scope: !2180)
!2195 = !DILocation(line: 558, column: 4, scope: !2183)
!2196 = !DILocation(line: 554, column: 75, scope: !2180)
!2197 = !DILocation(line: 554, column: 7, scope: !2180)
!2198 = distinct !{!2198, !2181, !2199}
!2199 = !DILocation(line: 558, column: 4, scope: !2176)
!2200 = !DILocation(line: 559, column: 5, scope: !2177)
!2201 = !DILocation(line: 560, column: 12, scope: !2202)
!2202 = distinct !DILexicalBlock(scope: !2172, file: !376, line: 560, column: 12)
!2203 = !DILocation(line: 560, column: 18, scope: !2202)
!2204 = !DILocation(line: 560, column: 12, scope: !2172)
!2205 = !DILocation(line: 563, column: 20, scope: !2206)
!2206 = distinct !DILexicalBlock(scope: !2207, file: !376, line: 563, column: 7)
!2207 = distinct !DILexicalBlock(scope: !2202, file: !376, line: 561, column: 5)
!2208 = !DILocation(line: 563, column: 35, scope: !2206)
!2209 = !DILocation(line: 563, column: 18, scope: !2206)
!2210 = !DILocation(line: 563, column: 12, scope: !2206)
!2211 = !DILocation(line: 564, column: 5, scope: !2212)
!2212 = distinct !DILexicalBlock(scope: !2206, file: !376, line: 563, column: 7)
!2213 = !DILocation(line: 564, column: 12, scope: !2212)
!2214 = !DILocation(line: 564, column: 18, scope: !2212)
!2215 = !DILocation(line: 563, column: 7, scope: !2206)
!2216 = !DILocation(line: 566, column: 2, scope: !2212)
!2217 = !DILocation(line: 565, column: 13, scope: !2212)
!2218 = !DILocation(line: 565, column: 20, scope: !2212)
!2219 = !DILocation(line: 565, column: 11, scope: !2212)
!2220 = !DILocation(line: 563, column: 7, scope: !2212)
!2221 = distinct !{!2221, !2215, !2222}
!2222 = !DILocation(line: 566, column: 2, scope: !2206)
!2223 = !DILocation(line: 568, column: 7, scope: !2207)
!2224 = !DILocation(line: 570, column: 8, scope: !2225)
!2225 = distinct !DILexicalBlock(scope: !2226, file: !376, line: 570, column: 8)
!2226 = distinct !DILexicalBlock(scope: !2207, file: !376, line: 569, column: 2)
!2227 = !DILocation(line: 570, column: 15, scope: !2225)
!2228 = !DILocation(line: 570, column: 22, scope: !2225)
!2229 = !DILocation(line: 570, column: 19, scope: !2225)
!2230 = !DILocation(line: 570, column: 8, scope: !2226)
!2231 = !DILocation(line: 571, column: 6, scope: !2225)
!2232 = !DILocation(line: 573, column: 8, scope: !2233)
!2233 = distinct !DILexicalBlock(scope: !2226, file: !376, line: 573, column: 8)
!2234 = !DILocation(line: 573, column: 15, scope: !2233)
!2235 = !DILocation(line: 573, column: 8, scope: !2226)
!2236 = !DILocation(line: 575, column: 21, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2238, file: !376, line: 575, column: 8)
!2238 = distinct !DILexicalBlock(scope: !2233, file: !376, line: 574, column: 6)
!2239 = !DILocation(line: 575, column: 28, scope: !2237)
!2240 = !DILocation(line: 575, column: 19, scope: !2237)
!2241 = !DILocation(line: 575, column: 13, scope: !2237)
!2242 = !DILocation(line: 576, column: 6, scope: !2243)
!2243 = distinct !DILexicalBlock(scope: !2237, file: !376, line: 575, column: 8)
!2244 = !DILocation(line: 576, column: 13, scope: !2243)
!2245 = !DILocation(line: 576, column: 19, scope: !2243)
!2246 = !DILocation(line: 575, column: 8, scope: !2237)
!2247 = !DILocation(line: 578, column: 3, scope: !2243)
!2248 = !DILocation(line: 577, column: 14, scope: !2243)
!2249 = !DILocation(line: 577, column: 21, scope: !2243)
!2250 = !DILocation(line: 577, column: 12, scope: !2243)
!2251 = !DILocation(line: 575, column: 8, scope: !2243)
!2252 = distinct !{!2252, !2246, !2253}
!2253 = !DILocation(line: 578, column: 3, scope: !2237)
!2254 = !DILocation(line: 579, column: 6, scope: !2238)
!2255 = !DILocation(line: 580, column: 26, scope: !2256)
!2256 = distinct !DILexicalBlock(scope: !2233, file: !376, line: 580, column: 13)
!2257 = !DILocation(line: 580, column: 14, scope: !2256)
!2258 = !DILocation(line: 580, column: 13, scope: !2233)
!2259 = !DILocation(line: 581, column: 6, scope: !2256)
!2260 = !DILocation(line: 583, column: 26, scope: !2256)
!2261 = !DILocation(line: 583, column: 14, scope: !2256)
!2262 = !DILocation(line: 583, column: 12, scope: !2256)
!2263 = distinct !{!2263, !2223, !2264}
!2264 = !DILocation(line: 584, column: 2, scope: !2207)
!2265 = !DILocation(line: 585, column: 5, scope: !2207)
!2266 = !DILocation(line: 589, column: 15, scope: !2267)
!2267 = distinct !DILexicalBlock(scope: !2202, file: !376, line: 587, column: 5)
!2268 = !DILocation(line: 589, column: 30, scope: !2267)
!2269 = !DILocation(line: 589, column: 13, scope: !2267)
!2270 = !DILocation(line: 590, column: 7, scope: !2267)
!2271 = !DILocation(line: 592, column: 8, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2273, file: !376, line: 592, column: 8)
!2273 = distinct !DILexicalBlock(scope: !2267, file: !376, line: 591, column: 2)
!2274 = !DILocation(line: 592, column: 15, scope: !2272)
!2275 = !DILocation(line: 592, column: 22, scope: !2272)
!2276 = !DILocation(line: 592, column: 19, scope: !2272)
!2277 = !DILocation(line: 592, column: 8, scope: !2273)
!2278 = !DILocation(line: 593, column: 6, scope: !2272)
!2279 = !DILocation(line: 595, column: 8, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2273, file: !376, line: 595, column: 8)
!2281 = !DILocation(line: 595, column: 15, scope: !2280)
!2282 = !DILocation(line: 595, column: 21, scope: !2280)
!2283 = !DILocation(line: 595, column: 8, scope: !2273)
!2284 = !DILocation(line: 596, column: 14, scope: !2280)
!2285 = !DILocation(line: 596, column: 21, scope: !2280)
!2286 = !DILocation(line: 596, column: 12, scope: !2280)
!2287 = !DILocation(line: 596, column: 6, scope: !2280)
!2288 = !DILocation(line: 599, column: 8, scope: !2289)
!2289 = distinct !DILexicalBlock(scope: !2280, file: !376, line: 598, column: 6)
!2290 = !DILocation(line: 599, column: 15, scope: !2289)
!2291 = !DILocation(line: 599, column: 21, scope: !2289)
!2292 = !DILocation(line: 599, column: 29, scope: !2289)
!2293 = !DILocation(line: 599, column: 32, scope: !2289)
!2294 = !DILocation(line: 599, column: 39, scope: !2289)
!2295 = !DILocation(line: 599, column: 44, scope: !2289)
!2296 = !DILocation(line: 0, scope: !2289)
!2297 = !DILocation(line: 600, column: 23, scope: !2289)
!2298 = !DILocation(line: 600, column: 11, scope: !2289)
!2299 = !DILocation(line: 600, column: 9, scope: !2289)
!2300 = distinct !{!2300, !2288, !2301}
!2301 = !DILocation(line: 600, column: 28, scope: !2289)
!2302 = !DILocation(line: 601, column: 12, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2289, file: !376, line: 601, column: 12)
!2304 = !DILocation(line: 601, column: 18, scope: !2303)
!2305 = !DILocation(line: 601, column: 12, scope: !2289)
!2306 = !DILocation(line: 602, column: 3, scope: !2303)
!2307 = !DILocation(line: 603, column: 16, scope: !2289)
!2308 = !DILocation(line: 603, column: 23, scope: !2289)
!2309 = !DILocation(line: 603, column: 14, scope: !2289)
!2310 = distinct !{!2310, !2270, !2311}
!2311 = !DILocation(line: 605, column: 2, scope: !2267)
!2312 = !DILocation(line: 608, column: 13, scope: !2133)
!2313 = !DILocation(line: 608, column: 17, scope: !2133)
!2314 = !DILocation(line: 608, column: 3, scope: !2133)
!2315 = !DILocation(line: 609, column: 1, scope: !2133)
!2316 = distinct !DISubprogram(name: "peel_loop_simple", scope: !1, file: !1, line: 1290, type: !2317, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!2317 = !DISubroutineType(types: !2318)
!2318 = !{null, !738}
!2319 = !DILocalVariable(name: "loop", arg: 1, scope: !2316, file: !1, line: 1290, type: !738)
!2320 = !DILocation(line: 1290, column: 32, scope: !2316)
!2321 = !DILocalVariable(name: "wont_exit", scope: !2316, file: !1, line: 1292, type: !2322)
!2322 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2323, line: 45, baseType: !2324)
!2323 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!2325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2323, line: 39, size: 192, elements: !2326)
!2326 = !{!2327, !2329, !2330, !2331}
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2325, file: !2323, line: 41, baseType: !2328, size: 64)
!2328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2325, file: !2323, line: 42, baseType: !5, size: 32, offset: 64)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2325, file: !2323, line: 43, baseType: !5, size: 32, offset: 96)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2325, file: !2323, line: 44, baseType: !2332, size: 64, offset: 128)
!2332 = !DICompositeType(tag: DW_TAG_array_type, baseType: !845, size: 64, elements: !735)
!2333 = !DILocation(line: 1292, column: 11, scope: !2316)
!2334 = !DILocalVariable(name: "npeel", scope: !2316, file: !1, line: 1293, type: !5)
!2335 = !DILocation(line: 1293, column: 12, scope: !2316)
!2336 = !DILocation(line: 1293, column: 20, scope: !2316)
!2337 = !DILocation(line: 1293, column: 26, scope: !2316)
!2338 = !DILocation(line: 1293, column: 39, scope: !2316)
!2339 = !DILocalVariable(name: "desc", scope: !2316, file: !1, line: 1294, type: !2340)
!2340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2341, size: 64)
!2341 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "niter_desc", file: !376, line: 353, size: 640, elements: !2342)
!2342 = !{!2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354}
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "out_edge", scope: !2341, file: !376, line: 356, baseType: !760, size: 64)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "in_edge", scope: !2341, file: !376, line: 359, baseType: !760, size: 64, offset: 64)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "simple_p", scope: !2341, file: !376, line: 363, baseType: !1005, size: 8, offset: 128)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "const_iter", scope: !2341, file: !376, line: 366, baseType: !1005, size: 8, offset: 136)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !2341, file: !376, line: 369, baseType: !845, size: 64, offset: 192)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "niter_max", scope: !2341, file: !376, line: 372, baseType: !845, size: 64, offset: 256)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !2341, file: !376, line: 375, baseType: !775, size: 64, offset: 320)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "noloop_assumptions", scope: !2341, file: !376, line: 379, baseType: !775, size: 64, offset: 384)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "infinite", scope: !2341, file: !376, line: 382, baseType: !775, size: 64, offset: 448)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "signed_p", scope: !2341, file: !376, line: 385, baseType: !1005, size: 8, offset: 512)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2341, file: !376, line: 388, baseType: !3, size: 32, offset: 544)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "niter_expr", scope: !2341, file: !376, line: 391, baseType: !775, size: 64, offset: 576)
!2355 = !DILocation(line: 1294, column: 22, scope: !2316)
!2356 = !DILocation(line: 1294, column: 51, scope: !2316)
!2357 = !DILocation(line: 1294, column: 29, scope: !2316)
!2358 = !DILocalVariable(name: "opt_info", scope: !2316, file: !1, line: 1295, type: !1867)
!2359 = !DILocation(line: 1295, column: 20, scope: !2316)
!2360 = !DILocalVariable(name: "ok", scope: !2316, file: !1, line: 1296, type: !1005)
!2361 = !DILocation(line: 1296, column: 8, scope: !2316)
!2362 = !DILocation(line: 1298, column: 7, scope: !2363)
!2363 = distinct !DILexicalBlock(scope: !2316, file: !1, line: 1298, column: 7)
!2364 = !DILocation(line: 1298, column: 34, scope: !2363)
!2365 = !DILocation(line: 1298, column: 37, scope: !2363)
!2366 = !DILocation(line: 1298, column: 43, scope: !2363)
!2367 = !DILocation(line: 1298, column: 7, scope: !2316)
!2368 = !DILocation(line: 1299, column: 39, scope: !2363)
!2369 = !DILocation(line: 1299, column: 16, scope: !2363)
!2370 = !DILocation(line: 1299, column: 14, scope: !2363)
!2371 = !DILocation(line: 1299, column: 5, scope: !2363)
!2372 = !DILocation(line: 1301, column: 30, scope: !2316)
!2373 = !DILocation(line: 1301, column: 36, scope: !2316)
!2374 = !DILocation(line: 1301, column: 15, scope: !2316)
!2375 = !DILocation(line: 1301, column: 13, scope: !2316)
!2376 = !DILocation(line: 1302, column: 17, scope: !2316)
!2377 = !DILocation(line: 1302, column: 3, scope: !2316)
!2378 = !DILocation(line: 1304, column: 31, scope: !2316)
!2379 = !DILocation(line: 1304, column: 3, scope: !2316)
!2380 = !DILocation(line: 1306, column: 39, scope: !2316)
!2381 = !DILocation(line: 1306, column: 66, scope: !2316)
!2382 = !DILocation(line: 1306, column: 45, scope: !2316)
!2383 = !DILocation(line: 1307, column: 11, scope: !2316)
!2384 = !DILocation(line: 1307, column: 18, scope: !2316)
!2385 = !DILocation(line: 1309, column: 14, scope: !2316)
!2386 = !DILocation(line: 1309, column: 11, scope: !2316)
!2387 = !DILocation(line: 1306, column: 8, scope: !2316)
!2388 = !DILocation(line: 1306, column: 6, scope: !2316)
!2389 = !DILocation(line: 1312, column: 3, scope: !2316)
!2390 = !DILocation(line: 1314, column: 9, scope: !2316)
!2391 = !DILocation(line: 1314, column: 3, scope: !2316)
!2392 = !DILocation(line: 1316, column: 7, scope: !2393)
!2393 = distinct !DILexicalBlock(scope: !2316, file: !1, line: 1316, column: 7)
!2394 = !DILocation(line: 1316, column: 7, scope: !2316)
!2395 = !DILocation(line: 1318, column: 28, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !2393, file: !1, line: 1317, column: 5)
!2397 = !DILocation(line: 1318, column: 38, scope: !2396)
!2398 = !DILocation(line: 1318, column: 7, scope: !2396)
!2399 = !DILocation(line: 1319, column: 22, scope: !2396)
!2400 = !DILocation(line: 1319, column: 7, scope: !2396)
!2401 = !DILocation(line: 1320, column: 5, scope: !2396)
!2402 = !DILocation(line: 1322, column: 7, scope: !2403)
!2403 = distinct !DILexicalBlock(scope: !2316, file: !1, line: 1322, column: 7)
!2404 = !DILocation(line: 1322, column: 13, scope: !2403)
!2405 = !DILocation(line: 1322, column: 7, scope: !2316)
!2406 = !DILocation(line: 1324, column: 11, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2408, file: !1, line: 1324, column: 11)
!2408 = distinct !DILexicalBlock(scope: !2403, file: !1, line: 1323, column: 5)
!2409 = !DILocation(line: 1324, column: 17, scope: !2407)
!2410 = !DILocation(line: 1324, column: 11, scope: !2408)
!2411 = !DILocation(line: 1326, column: 19, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2407, file: !1, line: 1325, column: 2)
!2413 = !DILocation(line: 1326, column: 4, scope: !2412)
!2414 = !DILocation(line: 1326, column: 10, scope: !2412)
!2415 = !DILocation(line: 1326, column: 16, scope: !2412)
!2416 = !DILocation(line: 1327, column: 23, scope: !2412)
!2417 = !DILocation(line: 1327, column: 4, scope: !2412)
!2418 = !DILocation(line: 1327, column: 10, scope: !2412)
!2419 = !DILocation(line: 1327, column: 21, scope: !2412)
!2420 = !DILocation(line: 1328, column: 4, scope: !2412)
!2421 = !DILocation(line: 1328, column: 10, scope: !2412)
!2422 = !DILocation(line: 1328, column: 29, scope: !2412)
!2423 = !DILocation(line: 1329, column: 2, scope: !2412)
!2424 = !DILocation(line: 1336, column: 27, scope: !2425)
!2425 = distinct !DILexicalBlock(scope: !2407, file: !1, line: 1331, column: 2)
!2426 = !DILocation(line: 1336, column: 4, scope: !2425)
!2427 = !DILocation(line: 1338, column: 5, scope: !2408)
!2428 = !DILocation(line: 1339, column: 7, scope: !2429)
!2429 = distinct !DILexicalBlock(scope: !2316, file: !1, line: 1339, column: 7)
!2430 = !DILocation(line: 1339, column: 7, scope: !2316)
!2431 = !DILocation(line: 1340, column: 14, scope: !2429)
!2432 = !DILocation(line: 1340, column: 55, scope: !2429)
!2433 = !DILocation(line: 1340, column: 5, scope: !2429)
!2434 = !DILocation(line: 1341, column: 1, scope: !2316)
!2435 = distinct !DISubprogram(name: "unroll_loop_constant_iterations", scope: !1, file: !1, line: 639, type: !2317, scopeLine: 640, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!2436 = !DILocalVariable(name: "loop", arg: 1, scope: !2435, file: !1, line: 639, type: !738)
!2437 = !DILocation(line: 639, column: 47, scope: !2435)
!2438 = !DILocalVariable(name: "niter", scope: !2435, file: !1, line: 641, type: !845)
!2439 = !DILocation(line: 641, column: 26, scope: !2435)
!2440 = !DILocalVariable(name: "exit_mod", scope: !2435, file: !1, line: 642, type: !5)
!2441 = !DILocation(line: 642, column: 12, scope: !2435)
!2442 = !DILocalVariable(name: "wont_exit", scope: !2435, file: !1, line: 643, type: !2322)
!2443 = !DILocation(line: 643, column: 11, scope: !2435)
!2444 = !DILocalVariable(name: "i", scope: !2435, file: !1, line: 644, type: !5)
!2445 = !DILocation(line: 644, column: 12, scope: !2435)
!2446 = !DILocalVariable(name: "remove_edges", scope: !2435, file: !1, line: 645, type: !2447)
!2447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2448, size: 64)
!2448 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !133, line: 152, baseType: !2449)
!2449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !133, line: 152, size: 128, elements: !2450)
!2450 = !{!2451}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2449, file: !133, line: 152, baseType: !753, size: 128)
!2452 = !DILocation(line: 645, column: 21, scope: !2435)
!2453 = !DILocalVariable(name: "e", scope: !2435, file: !1, line: 646, type: !760)
!2454 = !DILocation(line: 646, column: 8, scope: !2435)
!2455 = !DILocalVariable(name: "max_unroll", scope: !2435, file: !1, line: 647, type: !5)
!2456 = !DILocation(line: 647, column: 12, scope: !2435)
!2457 = !DILocation(line: 647, column: 25, scope: !2435)
!2458 = !DILocation(line: 647, column: 31, scope: !2435)
!2459 = !DILocation(line: 647, column: 44, scope: !2435)
!2460 = !DILocalVariable(name: "desc", scope: !2435, file: !1, line: 648, type: !2340)
!2461 = !DILocation(line: 648, column: 22, scope: !2435)
!2462 = !DILocation(line: 648, column: 51, scope: !2435)
!2463 = !DILocation(line: 648, column: 29, scope: !2435)
!2464 = !DILocalVariable(name: "exit_at_end", scope: !2435, file: !1, line: 649, type: !1005)
!2465 = !DILocation(line: 649, column: 8, scope: !2435)
!2466 = !DILocation(line: 649, column: 42, scope: !2435)
!2467 = !DILocation(line: 649, column: 22, scope: !2435)
!2468 = !DILocalVariable(name: "opt_info", scope: !2435, file: !1, line: 650, type: !1867)
!2469 = !DILocation(line: 650, column: 20, scope: !2435)
!2470 = !DILocalVariable(name: "ok", scope: !2435, file: !1, line: 651, type: !1005)
!2471 = !DILocation(line: 651, column: 8, scope: !2435)
!2472 = !DILocation(line: 653, column: 11, scope: !2435)
!2473 = !DILocation(line: 653, column: 17, scope: !2435)
!2474 = !DILocation(line: 653, column: 9, scope: !2435)
!2475 = !DILocation(line: 656, column: 3, scope: !2435)
!2476 = !DILocation(line: 658, column: 14, scope: !2435)
!2477 = !DILocation(line: 658, column: 23, scope: !2435)
!2478 = !DILocation(line: 658, column: 34, scope: !2435)
!2479 = !DILocation(line: 658, column: 22, scope: !2435)
!2480 = !DILocation(line: 658, column: 20, scope: !2435)
!2481 = !DILocation(line: 658, column: 12, scope: !2435)
!2482 = !DILocation(line: 660, column: 30, scope: !2435)
!2483 = !DILocation(line: 660, column: 41, scope: !2435)
!2484 = !DILocation(line: 660, column: 15, scope: !2435)
!2485 = !DILocation(line: 660, column: 13, scope: !2435)
!2486 = !DILocation(line: 661, column: 17, scope: !2435)
!2487 = !DILocation(line: 661, column: 3, scope: !2435)
!2488 = !DILocation(line: 663, column: 16, scope: !2435)
!2489 = !DILocation(line: 664, column: 7, scope: !2490)
!2490 = distinct !DILexicalBlock(scope: !2435, file: !1, line: 664, column: 7)
!2491 = !DILocation(line: 665, column: 7, scope: !2490)
!2492 = !DILocation(line: 665, column: 10, scope: !2490)
!2493 = !DILocation(line: 664, column: 7, scope: !2435)
!2494 = !DILocation(line: 666, column: 39, scope: !2490)
!2495 = !DILocation(line: 666, column: 16, scope: !2490)
!2496 = !DILocation(line: 666, column: 14, scope: !2490)
!2497 = !DILocation(line: 666, column: 5, scope: !2490)
!2498 = !DILocation(line: 668, column: 8, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2435, file: !1, line: 668, column: 7)
!2500 = !DILocation(line: 668, column: 7, scope: !2435)
!2501 = !DILocation(line: 674, column: 11, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2503, file: !1, line: 674, column: 11)
!2503 = distinct !DILexicalBlock(scope: !2499, file: !1, line: 669, column: 5)
!2504 = !DILocation(line: 674, column: 11, scope: !2503)
!2505 = !DILocation(line: 675, column: 11, scope: !2502)
!2506 = !DILocation(line: 675, column: 2, scope: !2502)
!2507 = !DILocation(line: 678, column: 18, scope: !2503)
!2508 = !DILocation(line: 678, column: 7, scope: !2503)
!2509 = !DILocation(line: 679, column: 11, scope: !2510)
!2510 = distinct !DILexicalBlock(scope: !2503, file: !1, line: 679, column: 11)
!2511 = !DILocation(line: 679, column: 17, scope: !2510)
!2512 = !DILocation(line: 679, column: 11, scope: !2503)
!2513 = !DILocation(line: 680, column: 13, scope: !2510)
!2514 = !DILocation(line: 680, column: 2, scope: !2510)
!2515 = !DILocation(line: 682, column: 11, scope: !2516)
!2516 = distinct !DILexicalBlock(scope: !2503, file: !1, line: 682, column: 11)
!2517 = !DILocation(line: 682, column: 11, scope: !2503)
!2518 = !DILocation(line: 684, column: 32, scope: !2519)
!2519 = distinct !DILexicalBlock(scope: !2516, file: !1, line: 683, column: 2)
!2520 = !DILocation(line: 684, column: 4, scope: !2519)
!2521 = !DILocation(line: 685, column: 47, scope: !2519)
!2522 = !DILocation(line: 685, column: 74, scope: !2519)
!2523 = !DILocation(line: 685, column: 53, scope: !2519)
!2524 = !DILocation(line: 686, column: 12, scope: !2519)
!2525 = !DILocation(line: 687, column: 12, scope: !2519)
!2526 = !DILocation(line: 687, column: 23, scope: !2519)
!2527 = !DILocation(line: 687, column: 29, scope: !2519)
!2528 = !DILocation(line: 690, column: 15, scope: !2519)
!2529 = !DILocation(line: 690, column: 24, scope: !2519)
!2530 = !DILocation(line: 690, column: 27, scope: !2519)
!2531 = !DILocation(line: 690, column: 36, scope: !2519)
!2532 = !DILocation(line: 0, scope: !2519)
!2533 = !DILocation(line: 690, column: 12, scope: !2519)
!2534 = !DILocation(line: 685, column: 16, scope: !2519)
!2535 = !DILocation(line: 685, column: 14, scope: !2519)
!2536 = !DILocation(line: 693, column: 4, scope: !2519)
!2537 = !DILocation(line: 695, column: 15, scope: !2538)
!2538 = distinct !DILexicalBlock(scope: !2519, file: !1, line: 695, column: 15)
!2539 = !DILocation(line: 695, column: 24, scope: !2538)
!2540 = !DILocation(line: 695, column: 27, scope: !2538)
!2541 = !DILocation(line: 695, column: 36, scope: !2538)
!2542 = !DILocation(line: 695, column: 15, scope: !2519)
!2543 = !DILocation(line: 696, column: 28, scope: !2538)
!2544 = !DILocation(line: 696, column: 38, scope: !2538)
!2545 = !DILocation(line: 696, column: 7, scope: !2538)
!2546 = !DILocation(line: 698, column: 4, scope: !2519)
!2547 = !DILocation(line: 698, column: 10, scope: !2519)
!2548 = !DILocation(line: 698, column: 29, scope: !2519)
!2549 = !DILocation(line: 699, column: 19, scope: !2519)
!2550 = !DILocation(line: 699, column: 4, scope: !2519)
!2551 = !DILocation(line: 699, column: 10, scope: !2519)
!2552 = !DILocation(line: 699, column: 16, scope: !2519)
!2553 = !DILocation(line: 700, column: 23, scope: !2519)
!2554 = !DILocation(line: 700, column: 4, scope: !2519)
!2555 = !DILocation(line: 700, column: 10, scope: !2519)
!2556 = !DILocation(line: 700, column: 20, scope: !2519)
!2557 = !DILocation(line: 701, column: 2, scope: !2519)
!2558 = !DILocation(line: 703, column: 16, scope: !2503)
!2559 = !DILocation(line: 703, column: 7, scope: !2503)
!2560 = !DILocation(line: 704, column: 5, scope: !2503)
!2561 = !DILocation(line: 710, column: 11, scope: !2562)
!2562 = distinct !DILexicalBlock(scope: !2563, file: !1, line: 710, column: 11)
!2563 = distinct !DILexicalBlock(scope: !2499, file: !1, line: 706, column: 5)
!2564 = !DILocation(line: 710, column: 11, scope: !2563)
!2565 = !DILocation(line: 711, column: 11, scope: !2562)
!2566 = !DILocation(line: 711, column: 2, scope: !2562)
!2567 = !DILocation(line: 716, column: 11, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2563, file: !1, line: 716, column: 11)
!2569 = !DILocation(line: 716, column: 23, scope: !2568)
!2570 = !DILocation(line: 716, column: 20, scope: !2568)
!2571 = !DILocation(line: 717, column: 4, scope: !2568)
!2572 = !DILocation(line: 717, column: 7, scope: !2568)
!2573 = !DILocation(line: 717, column: 13, scope: !2568)
!2574 = !DILocation(line: 716, column: 11, scope: !2563)
!2575 = !DILocation(line: 719, column: 15, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2568, file: !1, line: 718, column: 2)
!2577 = !DILocation(line: 719, column: 4, scope: !2576)
!2578 = !DILocation(line: 720, column: 8, scope: !2579)
!2579 = distinct !DILexicalBlock(scope: !2576, file: !1, line: 720, column: 8)
!2580 = !DILocation(line: 720, column: 14, scope: !2579)
!2581 = !DILocation(line: 720, column: 8, scope: !2576)
!2582 = !DILocation(line: 721, column: 17, scope: !2579)
!2583 = !DILocation(line: 721, column: 6, scope: !2579)
!2584 = !DILocation(line: 723, column: 39, scope: !2576)
!2585 = !DILocation(line: 723, column: 11, scope: !2576)
!2586 = !DILocation(line: 724, column: 40, scope: !2576)
!2587 = !DILocation(line: 724, column: 67, scope: !2576)
!2588 = !DILocation(line: 724, column: 46, scope: !2576)
!2589 = !DILocation(line: 725, column: 12, scope: !2576)
!2590 = !DILocation(line: 725, column: 21, scope: !2576)
!2591 = !DILocation(line: 726, column: 12, scope: !2576)
!2592 = !DILocation(line: 726, column: 23, scope: !2576)
!2593 = !DILocation(line: 726, column: 29, scope: !2576)
!2594 = !DILocation(line: 729, column: 15, scope: !2576)
!2595 = !DILocation(line: 729, column: 24, scope: !2576)
!2596 = !DILocation(line: 729, column: 27, scope: !2576)
!2597 = !DILocation(line: 729, column: 36, scope: !2576)
!2598 = !DILocation(line: 0, scope: !2576)
!2599 = !DILocation(line: 729, column: 12, scope: !2576)
!2600 = !DILocation(line: 724, column: 9, scope: !2576)
!2601 = !DILocation(line: 724, column: 7, scope: !2576)
!2602 = !DILocation(line: 732, column: 4, scope: !2576)
!2603 = !DILocation(line: 734, column: 15, scope: !2604)
!2604 = distinct !DILexicalBlock(scope: !2576, file: !1, line: 734, column: 15)
!2605 = !DILocation(line: 734, column: 24, scope: !2604)
!2606 = !DILocation(line: 734, column: 27, scope: !2604)
!2607 = !DILocation(line: 734, column: 36, scope: !2604)
!2608 = !DILocation(line: 734, column: 15, scope: !2576)
!2609 = !DILocation(line: 735, column: 29, scope: !2604)
!2610 = !DILocation(line: 735, column: 39, scope: !2604)
!2611 = !DILocation(line: 735, column: 48, scope: !2604)
!2612 = !DILocation(line: 735, column: 8, scope: !2604)
!2613 = !DILocation(line: 737, column: 19, scope: !2576)
!2614 = !DILocation(line: 737, column: 28, scope: !2576)
!2615 = !DILocation(line: 737, column: 4, scope: !2576)
!2616 = !DILocation(line: 737, column: 10, scope: !2576)
!2617 = !DILocation(line: 737, column: 16, scope: !2576)
!2618 = !DILocation(line: 738, column: 23, scope: !2576)
!2619 = !DILocation(line: 738, column: 32, scope: !2576)
!2620 = !DILocation(line: 738, column: 4, scope: !2576)
!2621 = !DILocation(line: 738, column: 10, scope: !2576)
!2622 = !DILocation(line: 738, column: 20, scope: !2576)
!2623 = !DILocation(line: 739, column: 4, scope: !2576)
!2624 = !DILocation(line: 739, column: 10, scope: !2576)
!2625 = !DILocation(line: 739, column: 29, scope: !2576)
!2626 = !DILocation(line: 741, column: 13, scope: !2576)
!2627 = !DILocation(line: 741, column: 4, scope: !2576)
!2628 = !DILocation(line: 742, column: 13, scope: !2576)
!2629 = !DILocation(line: 742, column: 4, scope: !2576)
!2630 = !DILocation(line: 743, column: 2, scope: !2576)
!2631 = !DILocation(line: 745, column: 18, scope: !2563)
!2632 = !DILocation(line: 745, column: 29, scope: !2563)
!2633 = !DILocation(line: 745, column: 7, scope: !2563)
!2634 = !DILocation(line: 750, column: 31, scope: !2435)
!2635 = !DILocation(line: 750, column: 3, scope: !2435)
!2636 = !DILocation(line: 751, column: 39, scope: !2435)
!2637 = !DILocation(line: 751, column: 62, scope: !2435)
!2638 = !DILocation(line: 751, column: 45, scope: !2435)
!2639 = !DILocation(line: 752, column: 11, scope: !2435)
!2640 = !DILocation(line: 753, column: 11, scope: !2435)
!2641 = !DILocation(line: 753, column: 22, scope: !2435)
!2642 = !DILocation(line: 753, column: 28, scope: !2435)
!2643 = !DILocation(line: 756, column: 14, scope: !2435)
!2644 = !DILocation(line: 756, column: 11, scope: !2435)
!2645 = !DILocation(line: 751, column: 8, scope: !2435)
!2646 = !DILocation(line: 751, column: 6, scope: !2435)
!2647 = !DILocation(line: 759, column: 3, scope: !2435)
!2648 = !DILocation(line: 761, column: 7, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2435, file: !1, line: 761, column: 7)
!2650 = !DILocation(line: 761, column: 7, scope: !2435)
!2651 = !DILocation(line: 763, column: 28, scope: !2652)
!2652 = distinct !DILexicalBlock(scope: !2649, file: !1, line: 762, column: 5)
!2653 = !DILocation(line: 763, column: 38, scope: !2652)
!2654 = !DILocation(line: 763, column: 7, scope: !2652)
!2655 = !DILocation(line: 764, column: 22, scope: !2652)
!2656 = !DILocation(line: 764, column: 7, scope: !2652)
!2657 = !DILocation(line: 765, column: 5, scope: !2652)
!2658 = !DILocation(line: 767, column: 9, scope: !2435)
!2659 = !DILocation(line: 767, column: 3, scope: !2435)
!2660 = !DILocation(line: 769, column: 7, scope: !2661)
!2661 = distinct !DILexicalBlock(scope: !2435, file: !1, line: 769, column: 7)
!2662 = !DILocation(line: 769, column: 7, scope: !2435)
!2663 = !DILocalVariable(name: "exit_block", scope: !2664, file: !1, line: 771, type: !1150)
!2664 = distinct !DILexicalBlock(scope: !2661, file: !1, line: 770, column: 5)
!2665 = !DILocation(line: 771, column: 19, scope: !2664)
!2666 = !DILocation(line: 771, column: 45, scope: !2664)
!2667 = !DILocation(line: 771, column: 51, scope: !2664)
!2668 = !DILocation(line: 771, column: 60, scope: !2664)
!2669 = !DILocation(line: 771, column: 32, scope: !2664)
!2670 = !DILocation(line: 774, column: 11, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2664, file: !1, line: 774, column: 11)
!2672 = !DILocation(line: 774, column: 38, scope: !2671)
!2673 = !DILocation(line: 774, column: 46, scope: !2671)
!2674 = !DILocation(line: 774, column: 52, scope: !2671)
!2675 = !DILocation(line: 774, column: 62, scope: !2671)
!2676 = !DILocation(line: 774, column: 43, scope: !2671)
!2677 = !DILocation(line: 774, column: 11, scope: !2664)
!2678 = !DILocation(line: 776, column: 21, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2671, file: !1, line: 775, column: 2)
!2680 = !DILocation(line: 776, column: 4, scope: !2679)
!2681 = !DILocation(line: 776, column: 10, scope: !2679)
!2682 = !DILocation(line: 776, column: 19, scope: !2679)
!2683 = !DILocation(line: 777, column: 20, scope: !2679)
!2684 = !DILocation(line: 777, column: 4, scope: !2679)
!2685 = !DILocation(line: 777, column: 10, scope: !2679)
!2686 = !DILocation(line: 777, column: 18, scope: !2679)
!2687 = !DILocation(line: 778, column: 2, scope: !2679)
!2688 = !DILocation(line: 781, column: 21, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2671, file: !1, line: 780, column: 2)
!2690 = !DILocation(line: 781, column: 4, scope: !2689)
!2691 = !DILocation(line: 781, column: 10, scope: !2689)
!2692 = !DILocation(line: 781, column: 19, scope: !2689)
!2693 = !DILocation(line: 782, column: 20, scope: !2689)
!2694 = !DILocation(line: 782, column: 4, scope: !2689)
!2695 = !DILocation(line: 782, column: 10, scope: !2689)
!2696 = !DILocation(line: 782, column: 18, scope: !2689)
!2697 = !DILocation(line: 784, column: 5, scope: !2664)
!2698 = !DILocation(line: 786, column: 18, scope: !2435)
!2699 = !DILocation(line: 786, column: 29, scope: !2435)
!2700 = !DILocation(line: 786, column: 3, scope: !2435)
!2701 = !DILocation(line: 786, column: 9, scope: !2435)
!2702 = !DILocation(line: 786, column: 15, scope: !2435)
!2703 = !DILocation(line: 787, column: 22, scope: !2435)
!2704 = !DILocation(line: 787, column: 33, scope: !2435)
!2705 = !DILocation(line: 787, column: 3, scope: !2435)
!2706 = !DILocation(line: 787, column: 9, scope: !2435)
!2707 = !DILocation(line: 787, column: 19, scope: !2435)
!2708 = !DILocation(line: 788, column: 22, scope: !2435)
!2709 = !DILocation(line: 788, column: 3, scope: !2435)
!2710 = !DILocation(line: 788, column: 9, scope: !2435)
!2711 = !DILocation(line: 788, column: 20, scope: !2435)
!2712 = !DILocation(line: 791, column: 10, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2435, file: !1, line: 791, column: 3)
!2714 = !DILocation(line: 791, column: 8, scope: !2713)
!2715 = !DILocation(line: 791, column: 15, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2713, file: !1, line: 791, column: 3)
!2717 = !DILocation(line: 791, column: 3, scope: !2713)
!2718 = !DILocation(line: 792, column: 18, scope: !2716)
!2719 = !DILocation(line: 792, column: 5, scope: !2716)
!2720 = !DILocation(line: 791, column: 56, scope: !2716)
!2721 = !DILocation(line: 791, column: 3, scope: !2716)
!2722 = distinct !{!2722, !2717, !2723}
!2723 = !DILocation(line: 792, column: 19, scope: !2713)
!2724 = !DILocation(line: 793, column: 3, scope: !2435)
!2725 = !DILocation(line: 795, column: 7, scope: !2726)
!2726 = distinct !DILexicalBlock(scope: !2435, file: !1, line: 795, column: 7)
!2727 = !DILocation(line: 795, column: 7, scope: !2435)
!2728 = !DILocation(line: 796, column: 14, scope: !2726)
!2729 = !DILocation(line: 798, column: 7, scope: !2726)
!2730 = !DILocation(line: 798, column: 35, scope: !2726)
!2731 = !DILocation(line: 798, column: 19, scope: !2726)
!2732 = !DILocation(line: 796, column: 5, scope: !2726)
!2733 = !DILocation(line: 799, column: 1, scope: !2435)
!2734 = distinct !DISubprogram(name: "unroll_loop_runtime_iterations", scope: !1, file: !1, line: 959, type: !2317, scopeLine: 960, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!2735 = !DILocalVariable(name: "loop", arg: 1, scope: !2734, file: !1, line: 959, type: !738)
!2736 = !DILocation(line: 959, column: 46, scope: !2734)
!2737 = !DILocalVariable(name: "old_niter", scope: !2734, file: !1, line: 961, type: !775)
!2738 = !DILocation(line: 961, column: 7, scope: !2734)
!2739 = !DILocalVariable(name: "niter", scope: !2734, file: !1, line: 961, type: !775)
!2740 = !DILocation(line: 961, column: 18, scope: !2734)
!2741 = !DILocalVariable(name: "init_code", scope: !2734, file: !1, line: 961, type: !775)
!2742 = !DILocation(line: 961, column: 25, scope: !2734)
!2743 = !DILocalVariable(name: "branch_code", scope: !2734, file: !1, line: 961, type: !775)
!2744 = !DILocation(line: 961, column: 36, scope: !2734)
!2745 = !DILocalVariable(name: "tmp", scope: !2734, file: !1, line: 961, type: !775)
!2746 = !DILocation(line: 961, column: 49, scope: !2734)
!2747 = !DILocalVariable(name: "i", scope: !2734, file: !1, line: 962, type: !5)
!2748 = !DILocation(line: 962, column: 12, scope: !2734)
!2749 = !DILocalVariable(name: "j", scope: !2734, file: !1, line: 962, type: !5)
!2750 = !DILocation(line: 962, column: 15, scope: !2734)
!2751 = !DILocalVariable(name: "p", scope: !2734, file: !1, line: 962, type: !5)
!2752 = !DILocation(line: 962, column: 18, scope: !2734)
!2753 = !DILocalVariable(name: "preheader", scope: !2734, file: !1, line: 963, type: !1150)
!2754 = !DILocation(line: 963, column: 15, scope: !2734)
!2755 = !DILocalVariable(name: "body", scope: !2734, file: !1, line: 963, type: !2756)
!2756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1150, size: 64)
!2757 = !DILocation(line: 963, column: 27, scope: !2734)
!2758 = !DILocalVariable(name: "swtch", scope: !2734, file: !1, line: 963, type: !1150)
!2759 = !DILocation(line: 963, column: 33, scope: !2734)
!2760 = !DILocalVariable(name: "ezc_swtch", scope: !2734, file: !1, line: 963, type: !1150)
!2761 = !DILocation(line: 963, column: 40, scope: !2734)
!2762 = !DILocalVariable(name: "dom_bbs", scope: !2734, file: !1, line: 964, type: !1911)
!2763 = !DILocation(line: 964, column: 28, scope: !2734)
!2764 = !DILocalVariable(name: "wont_exit", scope: !2734, file: !1, line: 965, type: !2322)
!2765 = !DILocation(line: 965, column: 11, scope: !2734)
!2766 = !DILocalVariable(name: "may_exit_copy", scope: !2734, file: !1, line: 966, type: !734)
!2767 = !DILocation(line: 966, column: 7, scope: !2734)
!2768 = !DILocalVariable(name: "n_peel", scope: !2734, file: !1, line: 967, type: !5)
!2769 = !DILocation(line: 967, column: 12, scope: !2734)
!2770 = !DILocalVariable(name: "remove_edges", scope: !2734, file: !1, line: 968, type: !2447)
!2771 = !DILocation(line: 968, column: 21, scope: !2734)
!2772 = !DILocalVariable(name: "e", scope: !2734, file: !1, line: 969, type: !760)
!2773 = !DILocation(line: 969, column: 8, scope: !2734)
!2774 = !DILocalVariable(name: "extra_zero_check", scope: !2734, file: !1, line: 970, type: !1005)
!2775 = !DILocation(line: 970, column: 8, scope: !2734)
!2776 = !DILocalVariable(name: "last_may_exit", scope: !2734, file: !1, line: 970, type: !1005)
!2777 = !DILocation(line: 970, column: 26, scope: !2734)
!2778 = !DILocalVariable(name: "max_unroll", scope: !2734, file: !1, line: 971, type: !5)
!2779 = !DILocation(line: 971, column: 12, scope: !2734)
!2780 = !DILocation(line: 971, column: 25, scope: !2734)
!2781 = !DILocation(line: 971, column: 31, scope: !2734)
!2782 = !DILocation(line: 971, column: 44, scope: !2734)
!2783 = !DILocalVariable(name: "desc", scope: !2734, file: !1, line: 972, type: !2340)
!2784 = !DILocation(line: 972, column: 22, scope: !2734)
!2785 = !DILocation(line: 972, column: 51, scope: !2734)
!2786 = !DILocation(line: 972, column: 29, scope: !2734)
!2787 = !DILocalVariable(name: "exit_at_end", scope: !2734, file: !1, line: 973, type: !1005)
!2788 = !DILocation(line: 973, column: 8, scope: !2734)
!2789 = !DILocation(line: 973, column: 42, scope: !2734)
!2790 = !DILocation(line: 973, column: 22, scope: !2734)
!2791 = !DILocalVariable(name: "opt_info", scope: !2734, file: !1, line: 974, type: !1867)
!2792 = !DILocation(line: 974, column: 20, scope: !2734)
!2793 = !DILocalVariable(name: "ok", scope: !2734, file: !1, line: 975, type: !1005)
!2794 = !DILocation(line: 975, column: 8, scope: !2734)
!2795 = !DILocation(line: 977, column: 7, scope: !2796)
!2796 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 977, column: 7)
!2797 = !DILocation(line: 978, column: 7, scope: !2796)
!2798 = !DILocation(line: 978, column: 10, scope: !2796)
!2799 = !DILocation(line: 977, column: 7, scope: !2734)
!2800 = !DILocation(line: 979, column: 39, scope: !2796)
!2801 = !DILocation(line: 979, column: 16, scope: !2796)
!2802 = !DILocation(line: 979, column: 14, scope: !2796)
!2803 = !DILocation(line: 979, column: 5, scope: !2796)
!2804 = !DILocation(line: 982, column: 11, scope: !2734)
!2805 = !DILocation(line: 984, column: 25, scope: !2734)
!2806 = !DILocation(line: 984, column: 10, scope: !2734)
!2807 = !DILocation(line: 984, column: 8, scope: !2734)
!2808 = !DILocation(line: 985, column: 10, scope: !2809)
!2809 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 985, column: 3)
!2810 = !DILocation(line: 985, column: 8, scope: !2809)
!2811 = !DILocation(line: 985, column: 15, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !2809, file: !1, line: 985, column: 3)
!2813 = !DILocation(line: 985, column: 19, scope: !2812)
!2814 = !DILocation(line: 985, column: 25, scope: !2812)
!2815 = !DILocation(line: 985, column: 17, scope: !2812)
!2816 = !DILocation(line: 985, column: 3, scope: !2809)
!2817 = !DILocalVariable(name: "ldom", scope: !2818, file: !1, line: 987, type: !1911)
!2818 = distinct !DILexicalBlock(scope: !2812, file: !1, line: 986, column: 5)
!2819 = !DILocation(line: 987, column: 32, scope: !2818)
!2820 = !DILocalVariable(name: "bb", scope: !2818, file: !1, line: 988, type: !1150)
!2821 = !DILocation(line: 988, column: 19, scope: !2818)
!2822 = !DILocation(line: 990, column: 48, scope: !2818)
!2823 = !DILocation(line: 990, column: 53, scope: !2818)
!2824 = !DILocation(line: 990, column: 14, scope: !2818)
!2825 = !DILocation(line: 990, column: 12, scope: !2818)
!2826 = !DILocation(line: 991, column: 14, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !2818, file: !1, line: 991, column: 7)
!2828 = !DILocation(line: 991, column: 12, scope: !2827)
!2829 = !DILocation(line: 991, column: 19, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2827, file: !1, line: 991, column: 7)
!2831 = !DILocation(line: 991, column: 7, scope: !2827)
!2832 = !DILocation(line: 992, column: 30, scope: !2833)
!2833 = distinct !DILexicalBlock(scope: !2830, file: !1, line: 992, column: 6)
!2834 = !DILocation(line: 992, column: 36, scope: !2833)
!2835 = !DILocation(line: 992, column: 7, scope: !2833)
!2836 = !DILocation(line: 992, column: 6, scope: !2830)
!2837 = !DILocation(line: 993, column: 4, scope: !2833)
!2838 = !DILocation(line: 992, column: 38, scope: !2833)
!2839 = !DILocation(line: 991, column: 60, scope: !2830)
!2840 = !DILocation(line: 991, column: 7, scope: !2830)
!2841 = distinct !{!2841, !2831, !2842}
!2842 = !DILocation(line: 993, column: 4, scope: !2827)
!2843 = !DILocation(line: 995, column: 7, scope: !2818)
!2844 = !DILocation(line: 996, column: 5, scope: !2818)
!2845 = !DILocation(line: 985, column: 37, scope: !2812)
!2846 = !DILocation(line: 985, column: 3, scope: !2812)
!2847 = distinct !{!2847, !2816, !2848}
!2848 = !DILocation(line: 996, column: 5, scope: !2809)
!2849 = !DILocation(line: 997, column: 9, scope: !2734)
!2850 = !DILocation(line: 997, column: 3, scope: !2734)
!2851 = !DILocation(line: 999, column: 8, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 999, column: 7)
!2853 = !DILocation(line: 999, column: 7, scope: !2734)
!2854 = !DILocation(line: 1003, column: 21, scope: !2855)
!2855 = distinct !DILexicalBlock(scope: !2852, file: !1, line: 1000, column: 5)
!2856 = !DILocation(line: 1004, column: 16, scope: !2855)
!2857 = !DILocation(line: 1004, column: 27, scope: !2855)
!2858 = !DILocation(line: 1004, column: 14, scope: !2855)
!2859 = !DILocation(line: 1005, column: 24, scope: !2855)
!2860 = !DILocation(line: 1006, column: 21, scope: !2855)
!2861 = !DILocation(line: 1007, column: 5, scope: !2855)
!2862 = !DILocation(line: 1012, column: 23, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2852, file: !1, line: 1009, column: 5)
!2864 = !DILocation(line: 1012, column: 21, scope: !2863)
!2865 = !DILocation(line: 1013, column: 16, scope: !2863)
!2866 = !DILocation(line: 1013, column: 14, scope: !2863)
!2867 = !DILocation(line: 1014, column: 24, scope: !2863)
!2868 = !DILocation(line: 1015, column: 21, scope: !2863)
!2869 = !DILocation(line: 1019, column: 3, scope: !2734)
!2870 = !DILocation(line: 1020, column: 36, scope: !2734)
!2871 = !DILocation(line: 1020, column: 42, scope: !2734)
!2872 = !DILocation(line: 1020, column: 23, scope: !2734)
!2873 = !DILocation(line: 1020, column: 21, scope: !2734)
!2874 = !DILocation(line: 1020, column: 13, scope: !2734)
!2875 = !DILocation(line: 1021, column: 34, scope: !2734)
!2876 = !DILocation(line: 1021, column: 40, scope: !2734)
!2877 = !DILocation(line: 1021, column: 24, scope: !2734)
!2878 = !DILocation(line: 1021, column: 53, scope: !2734)
!2879 = !DILocation(line: 1021, column: 9, scope: !2734)
!2880 = !DILocation(line: 1021, column: 7, scope: !2734)
!2881 = !DILocation(line: 1022, column: 7, scope: !2882)
!2882 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1022, column: 7)
!2883 = !DILocation(line: 1022, column: 14, scope: !2882)
!2884 = !DILocation(line: 1022, column: 11, scope: !2882)
!2885 = !DILocation(line: 1022, column: 7, scope: !2734)
!2886 = !DILocation(line: 1023, column: 21, scope: !2882)
!2887 = !DILocation(line: 1023, column: 28, scope: !2882)
!2888 = !DILocation(line: 1023, column: 5, scope: !2882)
!2889 = !DILocation(line: 1028, column: 32, scope: !2734)
!2890 = !DILocation(line: 1028, column: 38, scope: !2734)
!2891 = !DILocation(line: 1029, column: 11, scope: !2734)
!2892 = !DILocation(line: 1030, column: 11, scope: !2734)
!2893 = !DILocation(line: 1028, column: 11, scope: !2734)
!2894 = !DILocation(line: 1028, column: 9, scope: !2734)
!2895 = !DILocation(line: 1033, column: 15, scope: !2734)
!2896 = !DILocation(line: 1033, column: 13, scope: !2734)
!2897 = !DILocation(line: 1034, column: 3, scope: !2734)
!2898 = !DILocation(line: 1035, column: 29, scope: !2734)
!2899 = !DILocation(line: 1035, column: 3, scope: !2734)
!2900 = !DILocation(line: 1038, column: 47, scope: !2734)
!2901 = !DILocation(line: 1038, column: 26, scope: !2734)
!2902 = !DILocation(line: 1038, column: 54, scope: !2734)
!2903 = !DILocation(line: 1038, column: 3, scope: !2734)
!2904 = !DILocation(line: 1040, column: 16, scope: !2734)
!2905 = !DILocation(line: 1042, column: 30, scope: !2734)
!2906 = !DILocation(line: 1042, column: 41, scope: !2734)
!2907 = !DILocation(line: 1042, column: 15, scope: !2734)
!2908 = !DILocation(line: 1042, column: 13, scope: !2734)
!2909 = !DILocation(line: 1048, column: 17, scope: !2734)
!2910 = !DILocation(line: 1048, column: 3, scope: !2734)
!2911 = !DILocation(line: 1049, column: 7, scope: !2912)
!2912 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1049, column: 7)
!2913 = !DILocation(line: 1050, column: 7, scope: !2912)
!2914 = !DILocation(line: 1050, column: 11, scope: !2912)
!2915 = !DILocation(line: 1050, column: 17, scope: !2912)
!2916 = !DILocation(line: 1049, column: 7, scope: !2734)
!2917 = !DILocation(line: 1051, column: 14, scope: !2912)
!2918 = !DILocation(line: 1051, column: 5, scope: !2912)
!2919 = !DILocation(line: 1052, column: 36, scope: !2734)
!2920 = !DILocation(line: 1052, column: 15, scope: !2734)
!2921 = !DILocation(line: 1052, column: 43, scope: !2734)
!2922 = !DILocation(line: 1052, column: 13, scope: !2734)
!2923 = !DILocation(line: 1053, column: 39, scope: !2734)
!2924 = !DILocation(line: 1053, column: 66, scope: !2734)
!2925 = !DILocation(line: 1053, column: 45, scope: !2734)
!2926 = !DILocation(line: 1054, column: 14, scope: !2734)
!2927 = !DILocation(line: 1054, column: 25, scope: !2734)
!2928 = !DILocation(line: 1054, column: 31, scope: !2734)
!2929 = !DILocation(line: 1053, column: 8, scope: !2734)
!2930 = !DILocation(line: 1053, column: 6, scope: !2734)
!2931 = !DILocation(line: 1057, column: 3, scope: !2734)
!2932 = !DILocation(line: 1060, column: 44, scope: !2734)
!2933 = !DILocation(line: 1060, column: 23, scope: !2734)
!2934 = !DILocation(line: 1060, column: 11, scope: !2734)
!2935 = !DILocation(line: 1060, column: 9, scope: !2734)
!2936 = !DILocation(line: 1062, column: 10, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1062, column: 3)
!2938 = !DILocation(line: 1062, column: 8, scope: !2937)
!2939 = !DILocation(line: 1062, column: 15, scope: !2940)
!2940 = distinct !DILexicalBlock(scope: !2937, file: !1, line: 1062, column: 3)
!2941 = !DILocation(line: 1062, column: 19, scope: !2940)
!2942 = !DILocation(line: 1062, column: 17, scope: !2940)
!2943 = !DILocation(line: 1062, column: 3, scope: !2937)
!2944 = !DILocation(line: 1065, column: 21, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2940, file: !1, line: 1063, column: 5)
!2946 = !DILocation(line: 1065, column: 7, scope: !2945)
!2947 = !DILocation(line: 1066, column: 11, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2945, file: !1, line: 1066, column: 11)
!2949 = !DILocation(line: 1066, column: 16, scope: !2948)
!2950 = !DILocation(line: 1066, column: 23, scope: !2948)
!2951 = !DILocation(line: 1066, column: 13, scope: !2948)
!2952 = !DILocation(line: 1066, column: 27, scope: !2948)
!2953 = !DILocation(line: 1066, column: 31, scope: !2948)
!2954 = !DILocation(line: 1066, column: 11, scope: !2945)
!2955 = !DILocation(line: 1067, column: 11, scope: !2948)
!2956 = !DILocation(line: 1067, column: 2, scope: !2948)
!2957 = !DILocation(line: 1068, column: 43, scope: !2945)
!2958 = !DILocation(line: 1068, column: 70, scope: !2945)
!2959 = !DILocation(line: 1068, column: 49, scope: !2945)
!2960 = !DILocation(line: 1069, column: 11, scope: !2945)
!2961 = !DILocation(line: 1069, column: 22, scope: !2945)
!2962 = !DILocation(line: 1069, column: 28, scope: !2945)
!2963 = !DILocation(line: 1068, column: 12, scope: !2945)
!2964 = !DILocation(line: 1068, column: 10, scope: !2945)
!2965 = !DILocation(line: 1072, column: 7, scope: !2945)
!2966 = !DILocation(line: 1075, column: 11, scope: !2945)
!2967 = !DILocation(line: 1075, column: 20, scope: !2945)
!2968 = !DILocation(line: 1075, column: 18, scope: !2945)
!2969 = !DILocation(line: 1075, column: 25, scope: !2945)
!2970 = !DILocation(line: 1075, column: 22, scope: !2945)
!2971 = !DILocation(line: 1075, column: 9, scope: !2945)
!2972 = !DILocation(line: 1076, column: 31, scope: !2945)
!2973 = !DILocation(line: 1076, column: 33, scope: !2945)
!2974 = !DILocation(line: 1076, column: 28, scope: !2945)
!2975 = !DILocation(line: 1076, column: 9, scope: !2945)
!2976 = !DILocation(line: 1078, column: 52, scope: !2945)
!2977 = !DILocation(line: 1078, column: 31, scope: !2945)
!2978 = !DILocation(line: 1078, column: 19, scope: !2945)
!2979 = !DILocation(line: 1078, column: 17, scope: !2945)
!2980 = !DILocation(line: 1079, column: 53, scope: !2945)
!2981 = !DILocation(line: 1079, column: 43, scope: !2945)
!2982 = !DILocation(line: 1079, column: 61, scope: !2945)
!2983 = !DILocation(line: 1080, column: 21, scope: !2945)
!2984 = !DILocation(line: 1080, column: 8, scope: !2945)
!2985 = !DILocation(line: 1080, column: 33, scope: !2945)
!2986 = !DILocation(line: 1079, column: 21, scope: !2945)
!2987 = !DILocation(line: 1079, column: 19, scope: !2945)
!2988 = !DILocation(line: 1085, column: 7, scope: !2945)
!2989 = !DILocation(line: 1087, column: 56, scope: !2945)
!2990 = !DILocation(line: 1087, column: 38, scope: !2945)
!2991 = !DILocation(line: 1087, column: 64, scope: !2945)
!2992 = !DILocation(line: 1087, column: 15, scope: !2945)
!2993 = !DILocation(line: 1087, column: 13, scope: !2945)
!2994 = !DILocation(line: 1088, column: 48, scope: !2945)
!2995 = !DILocation(line: 1088, column: 59, scope: !2945)
!2996 = !DILocation(line: 1088, column: 7, scope: !2945)
!2997 = !DILocation(line: 1089, column: 66, scope: !2945)
!2998 = !DILocation(line: 1089, column: 64, scope: !2945)
!2999 = !DILocation(line: 1089, column: 25, scope: !2945)
!3000 = !DILocation(line: 1089, column: 7, scope: !2945)
!3001 = !DILocation(line: 1089, column: 33, scope: !2945)
!3002 = !DILocation(line: 1089, column: 45, scope: !2945)
!3003 = !DILocation(line: 1090, column: 22, scope: !2945)
!3004 = !DILocation(line: 1090, column: 29, scope: !2945)
!3005 = !DILocation(line: 1091, column: 26, scope: !2945)
!3006 = !DILocation(line: 1091, column: 8, scope: !2945)
!3007 = !DILocation(line: 1091, column: 34, scope: !2945)
!3008 = !DILocation(line: 1091, column: 40, scope: !2945)
!3009 = !DILocation(line: 1090, column: 11, scope: !2945)
!3010 = !DILocation(line: 1090, column: 9, scope: !2945)
!3011 = !DILocation(line: 1092, column: 24, scope: !2945)
!3012 = !DILocation(line: 1092, column: 7, scope: !2945)
!3013 = !DILocation(line: 1092, column: 10, scope: !2945)
!3014 = !DILocation(line: 1092, column: 22, scope: !2945)
!3015 = !DILocation(line: 1093, column: 5, scope: !2945)
!3016 = !DILocation(line: 1062, column: 28, scope: !2940)
!3017 = !DILocation(line: 1062, column: 3, scope: !2940)
!3018 = distinct !{!3018, !2943, !3019}
!3019 = !DILocation(line: 1093, column: 5, scope: !2937)
!3020 = !DILocation(line: 1095, column: 7, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1095, column: 7)
!3022 = !DILocation(line: 1095, column: 7, scope: !2734)
!3023 = !DILocation(line: 1098, column: 31, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !3021, file: !1, line: 1096, column: 5)
!3025 = !DILocation(line: 1098, column: 42, scope: !3024)
!3026 = !DILocation(line: 1098, column: 28, scope: !3024)
!3027 = !DILocation(line: 1098, column: 9, scope: !3024)
!3028 = !DILocation(line: 1099, column: 15, scope: !3024)
!3029 = !DILocation(line: 1099, column: 13, scope: !3024)
!3030 = !DILocation(line: 1100, column: 52, scope: !3024)
!3031 = !DILocation(line: 1100, column: 31, scope: !3024)
!3032 = !DILocation(line: 1100, column: 19, scope: !3024)
!3033 = !DILocation(line: 1100, column: 17, scope: !3024)
!3034 = !DILocation(line: 1101, column: 53, scope: !3024)
!3035 = !DILocation(line: 1101, column: 43, scope: !3024)
!3036 = !DILocation(line: 1101, column: 61, scope: !3024)
!3037 = !DILocation(line: 1102, column: 21, scope: !3024)
!3038 = !DILocation(line: 1102, column: 8, scope: !3024)
!3039 = !DILocation(line: 1102, column: 33, scope: !3024)
!3040 = !DILocation(line: 1101, column: 21, scope: !3024)
!3041 = !DILocation(line: 1101, column: 19, scope: !3024)
!3042 = !DILocation(line: 1104, column: 7, scope: !3024)
!3043 = !DILocation(line: 1106, column: 56, scope: !3024)
!3044 = !DILocation(line: 1106, column: 38, scope: !3024)
!3045 = !DILocation(line: 1106, column: 64, scope: !3024)
!3046 = !DILocation(line: 1106, column: 15, scope: !3024)
!3047 = !DILocation(line: 1106, column: 13, scope: !3024)
!3048 = !DILocation(line: 1107, column: 48, scope: !3024)
!3049 = !DILocation(line: 1107, column: 59, scope: !3024)
!3050 = !DILocation(line: 1107, column: 7, scope: !3024)
!3051 = !DILocation(line: 1108, column: 66, scope: !3024)
!3052 = !DILocation(line: 1108, column: 64, scope: !3024)
!3053 = !DILocation(line: 1108, column: 25, scope: !3024)
!3054 = !DILocation(line: 1108, column: 7, scope: !3024)
!3055 = !DILocation(line: 1108, column: 33, scope: !3024)
!3056 = !DILocation(line: 1108, column: 45, scope: !3024)
!3057 = !DILocation(line: 1109, column: 22, scope: !3024)
!3058 = !DILocation(line: 1109, column: 29, scope: !3024)
!3059 = !DILocation(line: 1110, column: 26, scope: !3024)
!3060 = !DILocation(line: 1110, column: 8, scope: !3024)
!3061 = !DILocation(line: 1110, column: 34, scope: !3024)
!3062 = !DILocation(line: 1110, column: 40, scope: !3024)
!3063 = !DILocation(line: 1109, column: 11, scope: !3024)
!3064 = !DILocation(line: 1109, column: 9, scope: !3024)
!3065 = !DILocation(line: 1111, column: 24, scope: !3024)
!3066 = !DILocation(line: 1111, column: 7, scope: !3024)
!3067 = !DILocation(line: 1111, column: 10, scope: !3024)
!3068 = !DILocation(line: 1111, column: 22, scope: !3024)
!3069 = !DILocation(line: 1112, column: 5, scope: !3024)
!3070 = !DILocation(line: 1115, column: 43, scope: !2734)
!3071 = !DILocation(line: 1115, column: 3, scope: !2734)
!3072 = !DILocation(line: 1119, column: 17, scope: !2734)
!3073 = !DILocation(line: 1119, column: 3, scope: !2734)
!3074 = !DILocation(line: 1120, column: 14, scope: !2734)
!3075 = !DILocation(line: 1120, column: 25, scope: !2734)
!3076 = !DILocation(line: 1120, column: 3, scope: !2734)
!3077 = !DILocation(line: 1121, column: 31, scope: !2734)
!3078 = !DILocation(line: 1121, column: 3, scope: !2734)
!3079 = !DILocation(line: 1123, column: 39, scope: !2734)
!3080 = !DILocation(line: 1123, column: 62, scope: !2734)
!3081 = !DILocation(line: 1123, column: 45, scope: !2734)
!3082 = !DILocation(line: 1124, column: 11, scope: !2734)
!3083 = !DILocation(line: 1125, column: 11, scope: !2734)
!3084 = !DILocation(line: 1125, column: 22, scope: !2734)
!3085 = !DILocation(line: 1125, column: 28, scope: !2734)
!3086 = !DILocation(line: 1128, column: 14, scope: !2734)
!3087 = !DILocation(line: 1128, column: 11, scope: !2734)
!3088 = !DILocation(line: 1123, column: 8, scope: !2734)
!3089 = !DILocation(line: 1123, column: 6, scope: !2734)
!3090 = !DILocation(line: 1131, column: 3, scope: !2734)
!3091 = !DILocation(line: 1133, column: 7, scope: !3092)
!3092 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1133, column: 7)
!3093 = !DILocation(line: 1133, column: 7, scope: !2734)
!3094 = !DILocation(line: 1135, column: 28, scope: !3095)
!3095 = distinct !DILexicalBlock(scope: !3092, file: !1, line: 1134, column: 5)
!3096 = !DILocation(line: 1135, column: 38, scope: !3095)
!3097 = !DILocation(line: 1135, column: 7, scope: !3095)
!3098 = !DILocation(line: 1136, column: 22, scope: !3095)
!3099 = !DILocation(line: 1136, column: 7, scope: !3095)
!3100 = !DILocation(line: 1137, column: 5, scope: !3095)
!3101 = !DILocation(line: 1139, column: 9, scope: !2734)
!3102 = !DILocation(line: 1139, column: 3, scope: !2734)
!3103 = !DILocation(line: 1141, column: 7, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1141, column: 7)
!3105 = !DILocation(line: 1141, column: 7, scope: !2734)
!3106 = !DILocalVariable(name: "exit_block", scope: !3107, file: !1, line: 1143, type: !1150)
!3107 = distinct !DILexicalBlock(scope: !3104, file: !1, line: 1142, column: 5)
!3108 = !DILocation(line: 1143, column: 19, scope: !3107)
!3109 = !DILocation(line: 1143, column: 45, scope: !3107)
!3110 = !DILocation(line: 1143, column: 51, scope: !3107)
!3111 = !DILocation(line: 1143, column: 60, scope: !3107)
!3112 = !DILocation(line: 1143, column: 32, scope: !3107)
!3113 = !DILocation(line: 1147, column: 11, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3107, file: !1, line: 1147, column: 11)
!3115 = !DILocation(line: 1147, column: 38, scope: !3114)
!3116 = !DILocation(line: 1147, column: 46, scope: !3114)
!3117 = !DILocation(line: 1147, column: 52, scope: !3114)
!3118 = !DILocation(line: 1147, column: 62, scope: !3114)
!3119 = !DILocation(line: 1147, column: 43, scope: !3114)
!3120 = !DILocation(line: 1147, column: 11, scope: !3107)
!3121 = !DILocation(line: 1149, column: 21, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !3114, file: !1, line: 1148, column: 2)
!3123 = !DILocation(line: 1149, column: 4, scope: !3122)
!3124 = !DILocation(line: 1149, column: 10, scope: !3122)
!3125 = !DILocation(line: 1149, column: 19, scope: !3122)
!3126 = !DILocation(line: 1150, column: 20, scope: !3122)
!3127 = !DILocation(line: 1150, column: 4, scope: !3122)
!3128 = !DILocation(line: 1150, column: 10, scope: !3122)
!3129 = !DILocation(line: 1150, column: 18, scope: !3122)
!3130 = !DILocation(line: 1151, column: 2, scope: !3122)
!3131 = !DILocation(line: 1154, column: 21, scope: !3132)
!3132 = distinct !DILexicalBlock(scope: !3114, file: !1, line: 1153, column: 2)
!3133 = !DILocation(line: 1154, column: 4, scope: !3132)
!3134 = !DILocation(line: 1154, column: 10, scope: !3132)
!3135 = !DILocation(line: 1154, column: 19, scope: !3132)
!3136 = !DILocation(line: 1155, column: 20, scope: !3132)
!3137 = !DILocation(line: 1155, column: 4, scope: !3132)
!3138 = !DILocation(line: 1155, column: 10, scope: !3132)
!3139 = !DILocation(line: 1155, column: 18, scope: !3132)
!3140 = !DILocation(line: 1157, column: 5, scope: !3107)
!3141 = !DILocation(line: 1160, column: 10, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1160, column: 3)
!3143 = !DILocation(line: 1160, column: 8, scope: !3142)
!3144 = !DILocation(line: 1160, column: 15, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3142, file: !1, line: 1160, column: 3)
!3146 = !DILocation(line: 1160, column: 3, scope: !3142)
!3147 = !DILocation(line: 1161, column: 18, scope: !3145)
!3148 = !DILocation(line: 1161, column: 5, scope: !3145)
!3149 = !DILocation(line: 1160, column: 56, scope: !3145)
!3150 = !DILocation(line: 1160, column: 3, scope: !3145)
!3151 = distinct !{!3151, !3146, !3152}
!3152 = !DILocation(line: 1161, column: 19, scope: !3142)
!3153 = !DILocation(line: 1162, column: 3, scope: !2734)
!3154 = !DILocation(line: 1168, column: 3, scope: !2734)
!3155 = !DILocation(line: 1170, column: 32, scope: !2734)
!3156 = !DILocation(line: 1170, column: 38, scope: !2734)
!3157 = !DILocation(line: 1170, column: 44, scope: !2734)
!3158 = !DILocation(line: 1171, column: 5, scope: !2734)
!3159 = !DILocation(line: 1170, column: 5, scope: !2734)
!3160 = !DILocation(line: 1169, column: 3, scope: !2734)
!3161 = !DILocation(line: 1169, column: 9, scope: !2734)
!3162 = !DILocation(line: 1169, column: 20, scope: !2734)
!3163 = !DILocation(line: 1172, column: 22, scope: !2734)
!3164 = !DILocation(line: 1172, column: 33, scope: !2734)
!3165 = !DILocation(line: 1172, column: 3, scope: !2734)
!3166 = !DILocation(line: 1172, column: 9, scope: !2734)
!3167 = !DILocation(line: 1172, column: 19, scope: !2734)
!3168 = !DILocation(line: 1173, column: 7, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1173, column: 7)
!3170 = !DILocation(line: 1173, column: 7, scope: !2734)
!3171 = !DILocation(line: 1176, column: 30, scope: !3172)
!3172 = distinct !DILexicalBlock(scope: !3169, file: !1, line: 1174, column: 5)
!3173 = !DILocation(line: 1176, column: 36, scope: !3172)
!3174 = !DILocation(line: 1176, column: 42, scope: !3172)
!3175 = !DILocation(line: 1176, column: 48, scope: !3172)
!3176 = !DILocation(line: 1176, column: 60, scope: !3172)
!3177 = !DILocation(line: 1176, column: 2, scope: !3172)
!3178 = !DILocation(line: 1175, column: 7, scope: !3172)
!3179 = !DILocation(line: 1175, column: 13, scope: !3172)
!3180 = !DILocation(line: 1175, column: 24, scope: !3172)
!3181 = !DILocation(line: 1177, column: 7, scope: !3172)
!3182 = !DILocation(line: 1177, column: 13, scope: !3172)
!3183 = !DILocation(line: 1177, column: 32, scope: !3172)
!3184 = !DILocation(line: 1178, column: 7, scope: !3172)
!3185 = !DILocation(line: 1178, column: 13, scope: !3172)
!3186 = !DILocation(line: 1178, column: 22, scope: !3172)
!3187 = !DILocation(line: 1179, column: 5, scope: !3172)
!3188 = !DILocation(line: 1181, column: 7, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !2734, file: !1, line: 1181, column: 7)
!3190 = !DILocation(line: 1181, column: 7, scope: !2734)
!3191 = !DILocation(line: 1182, column: 14, scope: !3189)
!3192 = !DILocation(line: 1185, column: 7, scope: !3189)
!3193 = !DILocation(line: 1185, column: 35, scope: !3189)
!3194 = !DILocation(line: 1185, column: 19, scope: !3189)
!3195 = !DILocation(line: 1182, column: 5, scope: !3189)
!3196 = !DILocation(line: 1187, column: 3, scope: !2734)
!3197 = !DILocation(line: 1188, column: 1, scope: !2734)
!3198 = distinct !DISubprogram(name: "unroll_loop_stupid", scope: !1, file: !1, line: 1439, type: !2317, scopeLine: 1440, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3199 = !DILocalVariable(name: "loop", arg: 1, scope: !3198, file: !1, line: 1439, type: !738)
!3200 = !DILocation(line: 1439, column: 34, scope: !3198)
!3201 = !DILocalVariable(name: "wont_exit", scope: !3198, file: !1, line: 1441, type: !2322)
!3202 = !DILocation(line: 1441, column: 11, scope: !3198)
!3203 = !DILocalVariable(name: "nunroll", scope: !3198, file: !1, line: 1442, type: !5)
!3204 = !DILocation(line: 1442, column: 12, scope: !3198)
!3205 = !DILocation(line: 1442, column: 22, scope: !3198)
!3206 = !DILocation(line: 1442, column: 28, scope: !3198)
!3207 = !DILocation(line: 1442, column: 41, scope: !3198)
!3208 = !DILocalVariable(name: "desc", scope: !3198, file: !1, line: 1443, type: !2340)
!3209 = !DILocation(line: 1443, column: 22, scope: !3198)
!3210 = !DILocation(line: 1443, column: 51, scope: !3198)
!3211 = !DILocation(line: 1443, column: 29, scope: !3198)
!3212 = !DILocalVariable(name: "opt_info", scope: !3198, file: !1, line: 1444, type: !1867)
!3213 = !DILocation(line: 1444, column: 20, scope: !3198)
!3214 = !DILocalVariable(name: "ok", scope: !3198, file: !1, line: 1445, type: !1005)
!3215 = !DILocation(line: 1445, column: 8, scope: !3198)
!3216 = !DILocation(line: 1447, column: 7, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3198, file: !1, line: 1447, column: 7)
!3218 = !DILocation(line: 1448, column: 7, scope: !3217)
!3219 = !DILocation(line: 1448, column: 10, scope: !3217)
!3220 = !DILocation(line: 1447, column: 7, scope: !3198)
!3221 = !DILocation(line: 1449, column: 39, scope: !3217)
!3222 = !DILocation(line: 1449, column: 16, scope: !3217)
!3223 = !DILocation(line: 1449, column: 14, scope: !3217)
!3224 = !DILocation(line: 1449, column: 5, scope: !3217)
!3225 = !DILocation(line: 1452, column: 30, scope: !3198)
!3226 = !DILocation(line: 1452, column: 38, scope: !3198)
!3227 = !DILocation(line: 1452, column: 15, scope: !3198)
!3228 = !DILocation(line: 1452, column: 13, scope: !3198)
!3229 = !DILocation(line: 1453, column: 17, scope: !3198)
!3230 = !DILocation(line: 1453, column: 3, scope: !3198)
!3231 = !DILocation(line: 1454, column: 31, scope: !3198)
!3232 = !DILocation(line: 1454, column: 3, scope: !3198)
!3233 = !DILocation(line: 1456, column: 39, scope: !3198)
!3234 = !DILocation(line: 1456, column: 62, scope: !3198)
!3235 = !DILocation(line: 1456, column: 45, scope: !3198)
!3236 = !DILocation(line: 1457, column: 11, scope: !3198)
!3237 = !DILocation(line: 1457, column: 20, scope: !3198)
!3238 = !DILocation(line: 1460, column: 14, scope: !3198)
!3239 = !DILocation(line: 1460, column: 11, scope: !3198)
!3240 = !DILocation(line: 1456, column: 8, scope: !3198)
!3241 = !DILocation(line: 1456, column: 6, scope: !3198)
!3242 = !DILocation(line: 1463, column: 3, scope: !3198)
!3243 = !DILocation(line: 1465, column: 7, scope: !3244)
!3244 = distinct !DILexicalBlock(scope: !3198, file: !1, line: 1465, column: 7)
!3245 = !DILocation(line: 1465, column: 7, scope: !3198)
!3246 = !DILocation(line: 1467, column: 28, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3244, file: !1, line: 1466, column: 5)
!3248 = !DILocation(line: 1467, column: 38, scope: !3247)
!3249 = !DILocation(line: 1467, column: 7, scope: !3247)
!3250 = !DILocation(line: 1468, column: 22, scope: !3247)
!3251 = !DILocation(line: 1468, column: 7, scope: !3247)
!3252 = !DILocation(line: 1469, column: 5, scope: !3247)
!3253 = !DILocation(line: 1471, column: 9, scope: !3198)
!3254 = !DILocation(line: 1471, column: 3, scope: !3198)
!3255 = !DILocation(line: 1473, column: 7, scope: !3256)
!3256 = distinct !DILexicalBlock(scope: !3198, file: !1, line: 1473, column: 7)
!3257 = !DILocation(line: 1473, column: 13, scope: !3256)
!3258 = !DILocation(line: 1473, column: 7, scope: !3198)
!3259 = !DILocation(line: 1481, column: 7, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3256, file: !1, line: 1474, column: 5)
!3261 = !DILocation(line: 1481, column: 13, scope: !3260)
!3262 = !DILocation(line: 1481, column: 22, scope: !3260)
!3263 = !DILocation(line: 1482, column: 5, scope: !3260)
!3264 = !DILocation(line: 1484, column: 7, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3198, file: !1, line: 1484, column: 7)
!3266 = !DILocation(line: 1484, column: 7, scope: !3198)
!3267 = !DILocation(line: 1485, column: 14, scope: !3265)
!3268 = !DILocation(line: 1486, column: 7, scope: !3265)
!3269 = !DILocation(line: 1486, column: 32, scope: !3265)
!3270 = !DILocation(line: 1486, column: 16, scope: !3265)
!3271 = !DILocation(line: 1485, column: 5, scope: !3265)
!3272 = !DILocation(line: 1487, column: 1, scope: !3198)
!3273 = distinct !DISubprogram(name: "fel_next", scope: !376, file: !376, line: 518, type: !3274, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3274 = !DISubroutineType(types: !3275)
!3275 = !{null, !2136, !2137}
!3276 = !DILocalVariable(name: "li", arg: 1, scope: !3273, file: !376, line: 518, type: !2136)
!3277 = !DILocation(line: 518, column: 26, scope: !3273)
!3278 = !DILocalVariable(name: "loop", arg: 2, scope: !3273, file: !376, line: 518, type: !2137)
!3279 = !DILocation(line: 518, column: 38, scope: !3273)
!3280 = !DILocalVariable(name: "anum", scope: !3273, file: !376, line: 520, type: !734)
!3281 = !DILocation(line: 520, column: 7, scope: !3273)
!3282 = !DILocation(line: 522, column: 3, scope: !3273)
!3283 = !DILocation(line: 522, column: 10, scope: !3273)
!3284 = !DILocation(line: 524, column: 7, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3273, file: !376, line: 523, column: 5)
!3286 = !DILocation(line: 524, column: 11, scope: !3285)
!3287 = !DILocation(line: 524, column: 14, scope: !3285)
!3288 = !DILocation(line: 525, column: 25, scope: !3285)
!3289 = !DILocation(line: 525, column: 15, scope: !3285)
!3290 = !DILocation(line: 525, column: 8, scope: !3285)
!3291 = !DILocation(line: 525, column: 13, scope: !3285)
!3292 = !DILocation(line: 526, column: 12, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !3285, file: !376, line: 526, column: 11)
!3294 = !DILocation(line: 526, column: 11, scope: !3293)
!3295 = !DILocation(line: 526, column: 11, scope: !3285)
!3296 = !DILocation(line: 527, column: 2, scope: !3293)
!3297 = distinct !{!3297, !3282, !3298}
!3298 = !DILocation(line: 528, column: 5, scope: !3273)
!3299 = !DILocation(line: 530, column: 3, scope: !3273)
!3300 = !DILocation(line: 531, column: 4, scope: !3273)
!3301 = !DILocation(line: 531, column: 9, scope: !3273)
!3302 = !DILocation(line: 532, column: 1, scope: !3273)
!3303 = distinct !DISubprogram(name: "split_edge_and_insert", scope: !1, file: !1, line: 885, type: !3304, scopeLine: 886, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3304 = !DISubroutineType(types: !3305)
!3305 = !{!1150, !760, !775}
!3306 = !DILocalVariable(name: "e", arg: 1, scope: !3303, file: !1, line: 885, type: !760)
!3307 = !DILocation(line: 885, column: 29, scope: !3303)
!3308 = !DILocalVariable(name: "insns", arg: 2, scope: !3303, file: !1, line: 885, type: !775)
!3309 = !DILocation(line: 885, column: 36, scope: !3303)
!3310 = !DILocalVariable(name: "bb", scope: !3303, file: !1, line: 887, type: !1150)
!3311 = !DILocation(line: 887, column: 15, scope: !3303)
!3312 = !DILocation(line: 889, column: 8, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3303, file: !1, line: 889, column: 7)
!3314 = !DILocation(line: 889, column: 7, scope: !3303)
!3315 = !DILocation(line: 890, column: 5, scope: !3313)
!3316 = !DILocation(line: 891, column: 20, scope: !3303)
!3317 = !DILocation(line: 891, column: 8, scope: !3303)
!3318 = !DILocation(line: 891, column: 6, scope: !3303)
!3319 = !DILocation(line: 892, column: 20, scope: !3303)
!3320 = !DILocation(line: 892, column: 27, scope: !3303)
!3321 = !DILocation(line: 892, column: 3, scope: !3303)
!3322 = !DILocation(line: 924, column: 10, scope: !3303)
!3323 = !DILocation(line: 924, column: 3, scope: !3303)
!3324 = !DILocation(line: 925, column: 1, scope: !3303)
!3325 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !723, file: !723, line: 32, type: !3326, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3326 = !DISubroutineType(types: !3327)
!3327 = !{!721, !734}
!3328 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3325, file: !723, line: 32, type: !734)
!3329 = !DILocation(line: 32, column: 1, scope: !3325)
!3330 = distinct !DISubprogram(name: "number_of_loops", scope: !376, file: !376, line: 459, type: !3331, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3331 = !DISubroutineType(types: !3332)
!3332 = !{!5}
!3333 = !DILocation(line: 461, column: 8, scope: !3334)
!3334 = distinct !DILexicalBlock(scope: !3330, file: !376, line: 461, column: 7)
!3335 = !DILocation(line: 461, column: 7, scope: !3330)
!3336 = !DILocation(line: 462, column: 5, scope: !3334)
!3337 = !DILocation(line: 464, column: 10, scope: !3330)
!3338 = !DILocation(line: 464, column: 3, scope: !3330)
!3339 = !DILocation(line: 465, column: 1, scope: !3330)
!3340 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !376, file: !376, line: 85, type: !3341, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3341 = !DISubroutineType(types: !3342)
!3342 = !{!734, !3343, !5, !2137}
!3343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3344, size: 64)
!3344 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1191)
!3345 = !DILocalVariable(name: "vec_", arg: 1, scope: !3340, file: !376, line: 85, type: !3343)
!3346 = !DILocation(line: 85, column: 1, scope: !3340)
!3347 = !DILocalVariable(name: "ix_", arg: 2, scope: !3340, file: !376, line: 85, type: !5)
!3348 = !DILocalVariable(name: "ptr", arg: 3, scope: !3340, file: !376, line: 85, type: !2137)
!3349 = !DILocation(line: 85, column: 1, scope: !3350)
!3350 = distinct !DILexicalBlock(scope: !3340, file: !376, line: 85, column: 1)
!3351 = !DILocation(line: 85, column: 1, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3350, file: !376, line: 85, column: 1)
!3353 = !DILocation(line: 85, column: 1, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3350, file: !376, line: 85, column: 1)
!3355 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !723, file: !723, line: 31, type: !3356, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3356 = !DISubroutineType(types: !3357)
!3357 = !{!3358, !3359, !734}
!3358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !734, size: 64)
!3359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !727, size: 64)
!3360 = !DILocalVariable(name: "vec_", arg: 1, scope: !3355, file: !723, line: 31, type: !3359)
!3361 = !DILocation(line: 31, column: 1, scope: !3355)
!3362 = !DILocalVariable(name: "obj_", arg: 2, scope: !3355, file: !723, line: 31, type: !734)
!3363 = !DILocalVariable(name: "slot_", scope: !3355, file: !723, line: 31, type: !3358)
!3364 = distinct !DISubprogram(name: "loop_outer", scope: !376, file: !376, line: 434, type: !3365, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3365 = !DISubroutineType(types: !3366)
!3366 = !{!738, !3367}
!3367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3368, size: 64)
!3368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !739)
!3369 = !DILocalVariable(name: "loop", arg: 1, scope: !3364, file: !376, line: 434, type: !3367)
!3370 = !DILocation(line: 434, column: 32, scope: !3364)
!3371 = !DILocalVariable(name: "n", scope: !3364, file: !376, line: 436, type: !5)
!3372 = !DILocation(line: 436, column: 12, scope: !3364)
!3373 = !DILocation(line: 436, column: 16, scope: !3364)
!3374 = !DILocation(line: 438, column: 7, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3364, file: !376, line: 438, column: 7)
!3376 = !DILocation(line: 438, column: 9, scope: !3375)
!3377 = !DILocation(line: 438, column: 7, scope: !3364)
!3378 = !DILocation(line: 439, column: 5, scope: !3375)
!3379 = !DILocation(line: 441, column: 10, scope: !3364)
!3380 = !DILocation(line: 441, column: 3, scope: !3364)
!3381 = !DILocation(line: 442, column: 1, scope: !3364)
!3382 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !376, file: !376, line: 85, type: !3383, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{!5, !3343}
!3385 = !DILocalVariable(name: "vec_", arg: 1, scope: !3382, file: !376, line: 85, type: !3343)
!3386 = !DILocation(line: 85, column: 1, scope: !3382)
!3387 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !376, file: !376, line: 85, type: !3388, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3388 = !DISubroutineType(types: !3389)
!3389 = !{!737, !3343, !5}
!3390 = !DILocalVariable(name: "vec_", arg: 1, scope: !3387, file: !376, line: 85, type: !3343)
!3391 = !DILocation(line: 85, column: 1, scope: !3387)
!3392 = !DILocalVariable(name: "ix_", arg: 2, scope: !3387, file: !376, line: 85, type: !5)
!3393 = !DILocation(line: 0, scope: !3387)
!3394 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !723, file: !723, line: 31, type: !3395, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3395 = !DISubroutineType(types: !3396)
!3396 = !{!734, !3397, !5, !3358}
!3397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3398, size: 64)
!3398 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !727)
!3399 = !DILocalVariable(name: "vec_", arg: 1, scope: !3394, file: !723, line: 31, type: !3397)
!3400 = !DILocation(line: 31, column: 1, scope: !3394)
!3401 = !DILocalVariable(name: "ix_", arg: 2, scope: !3394, file: !723, line: 31, type: !5)
!3402 = !DILocalVariable(name: "ptr", arg: 3, scope: !3394, file: !723, line: 31, type: !3358)
!3403 = !DILocation(line: 31, column: 1, scope: !3404)
!3404 = distinct !DILexicalBlock(scope: !3394, file: !723, line: 31, column: 1)
!3405 = !DILocation(line: 31, column: 1, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3404, file: !723, line: 31, column: 1)
!3407 = !DILocation(line: 31, column: 1, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3404, file: !723, line: 31, column: 1)
!3409 = distinct !DISubprogram(name: "get_loop", scope: !376, file: !376, line: 417, type: !3410, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3410 = !DISubroutineType(types: !3411)
!3411 = !{!738, !5}
!3412 = !DILocalVariable(name: "num", arg: 1, scope: !3409, file: !376, line: 417, type: !5)
!3413 = !DILocation(line: 417, column: 20, scope: !3409)
!3414 = !DILocation(line: 419, column: 10, scope: !3409)
!3415 = !DILocation(line: 419, column: 3, scope: !3409)
!3416 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !723, file: !723, line: 32, type: !3417, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3417 = !DISubroutineType(types: !3418)
!3418 = !{null, !3419}
!3419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !721, size: 64)
!3420 = !DILocalVariable(name: "vec_", arg: 1, scope: !3416, file: !723, line: 32, type: !3419)
!3421 = !DILocation(line: 32, column: 1, scope: !3416)
!3422 = !DILocation(line: 32, column: 1, scope: !3423)
!3423 = distinct !DILexicalBlock(scope: !3416, file: !723, line: 32, column: 1)
!3424 = distinct !DISubprogram(name: "decide_peel_once_rolling", scope: !1, file: !1, line: 323, type: !3425, scopeLine: 324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3425 = !DISubroutineType(types: !3426)
!3426 = !{null, !738, !734}
!3427 = !DILocalVariable(name: "loop", arg: 1, scope: !3424, file: !1, line: 323, type: !738)
!3428 = !DILocation(line: 323, column: 40, scope: !3424)
!3429 = !DILocalVariable(name: "flags", arg: 2, scope: !3424, file: !1, line: 323, type: !734)
!3430 = !DILocation(line: 323, column: 50, scope: !3424)
!3431 = !DILocalVariable(name: "desc", scope: !3424, file: !1, line: 325, type: !2340)
!3432 = !DILocation(line: 325, column: 22, scope: !3424)
!3433 = !DILocation(line: 327, column: 7, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3424, file: !1, line: 327, column: 7)
!3435 = !DILocation(line: 327, column: 7, scope: !3424)
!3436 = !DILocation(line: 328, column: 14, scope: !3434)
!3437 = !DILocation(line: 328, column: 5, scope: !3434)
!3438 = !DILocation(line: 331, column: 18, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3424, file: !1, line: 331, column: 7)
!3440 = !DILocation(line: 331, column: 62, scope: !3439)
!3441 = !DILocation(line: 331, column: 68, scope: !3439)
!3442 = !DILocation(line: 331, column: 60, scope: !3439)
!3443 = !DILocation(line: 331, column: 7, scope: !3424)
!3444 = !DILocation(line: 333, column: 11, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3446, file: !1, line: 333, column: 11)
!3446 = distinct !DILexicalBlock(scope: !3439, file: !1, line: 332, column: 5)
!3447 = !DILocation(line: 333, column: 11, scope: !3446)
!3448 = !DILocation(line: 334, column: 11, scope: !3445)
!3449 = !DILocation(line: 334, column: 2, scope: !3445)
!3450 = !DILocation(line: 335, column: 7, scope: !3446)
!3451 = !DILocation(line: 339, column: 32, scope: !3424)
!3452 = !DILocation(line: 339, column: 10, scope: !3424)
!3453 = !DILocation(line: 339, column: 8, scope: !3424)
!3454 = !DILocation(line: 342, column: 8, scope: !3455)
!3455 = distinct !DILexicalBlock(scope: !3424, file: !1, line: 342, column: 7)
!3456 = !DILocation(line: 342, column: 14, scope: !3455)
!3457 = !DILocation(line: 343, column: 7, scope: !3455)
!3458 = !DILocation(line: 343, column: 10, scope: !3455)
!3459 = !DILocation(line: 343, column: 16, scope: !3455)
!3460 = !DILocation(line: 344, column: 7, scope: !3455)
!3461 = !DILocation(line: 344, column: 10, scope: !3455)
!3462 = !DILocation(line: 344, column: 16, scope: !3455)
!3463 = !DILocation(line: 345, column: 7, scope: !3455)
!3464 = !DILocation(line: 345, column: 11, scope: !3455)
!3465 = !DILocation(line: 345, column: 17, scope: !3455)
!3466 = !DILocation(line: 346, column: 7, scope: !3455)
!3467 = !DILocation(line: 346, column: 10, scope: !3455)
!3468 = !DILocation(line: 346, column: 16, scope: !3455)
!3469 = !DILocation(line: 346, column: 22, scope: !3455)
!3470 = !DILocation(line: 342, column: 7, scope: !3424)
!3471 = !DILocation(line: 348, column: 11, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3473, file: !1, line: 348, column: 11)
!3473 = distinct !DILexicalBlock(scope: !3455, file: !1, line: 347, column: 5)
!3474 = !DILocation(line: 348, column: 11, scope: !3473)
!3475 = !DILocation(line: 349, column: 11, scope: !3472)
!3476 = !DILocation(line: 349, column: 2, scope: !3472)
!3477 = !DILocation(line: 351, column: 7, scope: !3473)
!3478 = !DILocation(line: 355, column: 7, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3424, file: !1, line: 355, column: 7)
!3480 = !DILocation(line: 355, column: 7, scope: !3424)
!3481 = !DILocation(line: 356, column: 14, scope: !3479)
!3482 = !DILocation(line: 356, column: 5, scope: !3479)
!3483 = !DILocation(line: 357, column: 3, scope: !3424)
!3484 = !DILocation(line: 357, column: 9, scope: !3424)
!3485 = !DILocation(line: 357, column: 22, scope: !3424)
!3486 = !DILocation(line: 357, column: 31, scope: !3424)
!3487 = !DILocation(line: 358, column: 1, scope: !3424)
!3488 = distinct !DISubprogram(name: "decide_peel_completely", scope: !1, file: !1, line: 362, type: !3425, scopeLine: 363, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3489 = !DILocalVariable(name: "loop", arg: 1, scope: !3488, file: !1, line: 362, type: !738)
!3490 = !DILocation(line: 362, column: 38, scope: !3488)
!3491 = !DILocalVariable(name: "flags", arg: 2, scope: !3488, file: !1, line: 362, type: !734)
!3492 = !DILocation(line: 362, column: 48, scope: !3488)
!3493 = !DILocalVariable(name: "npeel", scope: !3488, file: !1, line: 364, type: !5)
!3494 = !DILocation(line: 364, column: 12, scope: !3488)
!3495 = !DILocalVariable(name: "desc", scope: !3488, file: !1, line: 365, type: !2340)
!3496 = !DILocation(line: 365, column: 22, scope: !3488)
!3497 = !DILocation(line: 367, column: 7, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 367, column: 7)
!3499 = !DILocation(line: 367, column: 7, scope: !3488)
!3500 = !DILocation(line: 368, column: 14, scope: !3498)
!3501 = !DILocation(line: 368, column: 5, scope: !3498)
!3502 = !DILocation(line: 371, column: 7, scope: !3503)
!3503 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 371, column: 7)
!3504 = !DILocation(line: 371, column: 13, scope: !3503)
!3505 = !DILocation(line: 371, column: 7, scope: !3488)
!3506 = !DILocation(line: 373, column: 11, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3508, file: !1, line: 373, column: 11)
!3508 = distinct !DILexicalBlock(scope: !3503, file: !1, line: 372, column: 5)
!3509 = !DILocation(line: 373, column: 11, scope: !3508)
!3510 = !DILocation(line: 374, column: 11, scope: !3507)
!3511 = !DILocation(line: 374, column: 2, scope: !3507)
!3512 = !DILocation(line: 375, column: 7, scope: !3508)
!3513 = !DILocation(line: 379, column: 33, scope: !3514)
!3514 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 379, column: 7)
!3515 = !DILocation(line: 379, column: 7, scope: !3514)
!3516 = !DILocation(line: 379, column: 7, scope: !3488)
!3517 = !DILocation(line: 381, column: 11, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3519, file: !1, line: 381, column: 11)
!3519 = distinct !DILexicalBlock(scope: !3514, file: !1, line: 380, column: 5)
!3520 = !DILocation(line: 381, column: 11, scope: !3519)
!3521 = !DILocation(line: 382, column: 11, scope: !3518)
!3522 = !DILocation(line: 382, column: 2, scope: !3518)
!3523 = !DILocation(line: 383, column: 7, scope: !3519)
!3524 = !DILocation(line: 387, column: 30, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 387, column: 7)
!3526 = !DILocation(line: 387, column: 8, scope: !3525)
!3527 = !DILocation(line: 387, column: 7, scope: !3488)
!3528 = !DILocation(line: 389, column: 11, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !3530, file: !1, line: 389, column: 11)
!3530 = distinct !DILexicalBlock(scope: !3525, file: !1, line: 388, column: 5)
!3531 = !DILocation(line: 389, column: 11, scope: !3530)
!3532 = !DILocation(line: 390, column: 11, scope: !3529)
!3533 = !DILocation(line: 390, column: 2, scope: !3529)
!3534 = !DILocation(line: 392, column: 7, scope: !3530)
!3535 = !DILocation(line: 396, column: 11, scope: !3488)
!3536 = !DILocation(line: 396, column: 61, scope: !3488)
!3537 = !DILocation(line: 396, column: 67, scope: !3488)
!3538 = !DILocation(line: 396, column: 59, scope: !3488)
!3539 = !DILocation(line: 396, column: 9, scope: !3488)
!3540 = !DILocation(line: 397, column: 7, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 397, column: 7)
!3542 = !DILocation(line: 397, column: 26, scope: !3541)
!3543 = !DILocation(line: 397, column: 13, scope: !3541)
!3544 = !DILocation(line: 397, column: 7, scope: !3488)
!3545 = !DILocation(line: 398, column: 13, scope: !3541)
!3546 = !DILocation(line: 398, column: 11, scope: !3541)
!3547 = !DILocation(line: 398, column: 5, scope: !3541)
!3548 = !DILocation(line: 401, column: 8, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 401, column: 7)
!3550 = !DILocation(line: 401, column: 7, scope: !3488)
!3551 = !DILocation(line: 403, column: 11, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3553, file: !1, line: 403, column: 11)
!3553 = distinct !DILexicalBlock(scope: !3549, file: !1, line: 402, column: 5)
!3554 = !DILocation(line: 403, column: 11, scope: !3553)
!3555 = !DILocation(line: 404, column: 11, scope: !3552)
!3556 = !DILocation(line: 404, column: 2, scope: !3552)
!3557 = !DILocation(line: 405, column: 7, scope: !3553)
!3558 = !DILocation(line: 409, column: 32, scope: !3488)
!3559 = !DILocation(line: 409, column: 10, scope: !3488)
!3560 = !DILocation(line: 409, column: 8, scope: !3488)
!3561 = !DILocation(line: 412, column: 8, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 412, column: 7)
!3563 = !DILocation(line: 412, column: 14, scope: !3562)
!3564 = !DILocation(line: 413, column: 7, scope: !3562)
!3565 = !DILocation(line: 413, column: 10, scope: !3562)
!3566 = !DILocation(line: 413, column: 16, scope: !3562)
!3567 = !DILocation(line: 414, column: 7, scope: !3562)
!3568 = !DILocation(line: 414, column: 11, scope: !3562)
!3569 = !DILocation(line: 414, column: 17, scope: !3562)
!3570 = !DILocation(line: 415, column: 7, scope: !3562)
!3571 = !DILocation(line: 415, column: 10, scope: !3562)
!3572 = !DILocation(line: 415, column: 16, scope: !3562)
!3573 = !DILocation(line: 412, column: 7, scope: !3488)
!3574 = !DILocation(line: 417, column: 11, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3576, file: !1, line: 417, column: 11)
!3576 = distinct !DILexicalBlock(scope: !3562, file: !1, line: 416, column: 5)
!3577 = !DILocation(line: 417, column: 11, scope: !3576)
!3578 = !DILocation(line: 418, column: 11, scope: !3575)
!3579 = !DILocation(line: 418, column: 2, scope: !3575)
!3580 = !DILocation(line: 420, column: 7, scope: !3576)
!3581 = !DILocation(line: 423, column: 7, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 423, column: 7)
!3583 = !DILocation(line: 423, column: 13, scope: !3582)
!3584 = !DILocation(line: 423, column: 21, scope: !3582)
!3585 = !DILocation(line: 423, column: 27, scope: !3582)
!3586 = !DILocation(line: 423, column: 19, scope: !3582)
!3587 = !DILocation(line: 423, column: 7, scope: !3488)
!3588 = !DILocation(line: 425, column: 11, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3590, file: !1, line: 425, column: 11)
!3590 = distinct !DILexicalBlock(scope: !3582, file: !1, line: 424, column: 5)
!3591 = !DILocation(line: 425, column: 11, scope: !3590)
!3592 = !DILocation(line: 427, column: 13, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !3589, file: !1, line: 426, column: 2)
!3594 = !DILocation(line: 427, column: 4, scope: !3593)
!3595 = !DILocation(line: 429, column: 13, scope: !3593)
!3596 = !DILocation(line: 429, column: 51, scope: !3593)
!3597 = !DILocation(line: 429, column: 57, scope: !3593)
!3598 = !DILocation(line: 429, column: 4, scope: !3593)
!3599 = !DILocation(line: 430, column: 13, scope: !3593)
!3600 = !DILocation(line: 430, column: 66, scope: !3593)
!3601 = !DILocation(line: 430, column: 4, scope: !3593)
!3602 = !DILocation(line: 431, column: 2, scope: !3593)
!3603 = !DILocation(line: 432, column: 7, scope: !3590)
!3604 = !DILocation(line: 436, column: 7, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3488, file: !1, line: 436, column: 7)
!3606 = !DILocation(line: 436, column: 7, scope: !3488)
!3607 = !DILocation(line: 437, column: 14, scope: !3605)
!3608 = !DILocation(line: 437, column: 5, scope: !3605)
!3609 = !DILocation(line: 438, column: 3, scope: !3488)
!3610 = !DILocation(line: 438, column: 9, scope: !3488)
!3611 = !DILocation(line: 438, column: 22, scope: !3488)
!3612 = !DILocation(line: 438, column: 31, scope: !3488)
!3613 = !DILocation(line: 439, column: 1, scope: !3488)
!3614 = distinct !DISubprogram(name: "peel_loop_completely", scope: !1, file: !1, line: 456, type: !2317, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3615 = !DILocalVariable(name: "loop", arg: 1, scope: !3614, file: !1, line: 456, type: !738)
!3616 = !DILocation(line: 456, column: 36, scope: !3614)
!3617 = !DILocalVariable(name: "wont_exit", scope: !3614, file: !1, line: 458, type: !2322)
!3618 = !DILocation(line: 458, column: 11, scope: !3614)
!3619 = !DILocalVariable(name: "npeel", scope: !3614, file: !1, line: 459, type: !845)
!3620 = !DILocation(line: 459, column: 26, scope: !3614)
!3621 = !DILocalVariable(name: "i", scope: !3614, file: !1, line: 460, type: !5)
!3622 = !DILocation(line: 460, column: 12, scope: !3614)
!3623 = !DILocalVariable(name: "remove_edges", scope: !3614, file: !1, line: 461, type: !2447)
!3624 = !DILocation(line: 461, column: 21, scope: !3614)
!3625 = !DILocalVariable(name: "ein", scope: !3614, file: !1, line: 462, type: !760)
!3626 = !DILocation(line: 462, column: 8, scope: !3614)
!3627 = !DILocalVariable(name: "desc", scope: !3614, file: !1, line: 463, type: !2340)
!3628 = !DILocation(line: 463, column: 22, scope: !3614)
!3629 = !DILocation(line: 463, column: 51, scope: !3614)
!3630 = !DILocation(line: 463, column: 29, scope: !3614)
!3631 = !DILocalVariable(name: "opt_info", scope: !3614, file: !1, line: 464, type: !1867)
!3632 = !DILocation(line: 464, column: 20, scope: !3614)
!3633 = !DILocation(line: 466, column: 11, scope: !3614)
!3634 = !DILocation(line: 466, column: 17, scope: !3614)
!3635 = !DILocation(line: 466, column: 9, scope: !3614)
!3636 = !DILocation(line: 468, column: 7, scope: !3637)
!3637 = distinct !DILexicalBlock(scope: !3614, file: !1, line: 468, column: 7)
!3638 = !DILocation(line: 468, column: 7, scope: !3614)
!3639 = !DILocalVariable(name: "ok", scope: !3640, file: !1, line: 470, type: !1005)
!3640 = distinct !DILexicalBlock(scope: !3637, file: !1, line: 469, column: 5)
!3641 = !DILocation(line: 470, column: 12, scope: !3640)
!3642 = !DILocation(line: 472, column: 34, scope: !3640)
!3643 = !DILocation(line: 472, column: 40, scope: !3640)
!3644 = !DILocation(line: 472, column: 19, scope: !3640)
!3645 = !DILocation(line: 472, column: 17, scope: !3640)
!3646 = !DILocation(line: 473, column: 21, scope: !3640)
!3647 = !DILocation(line: 473, column: 7, scope: !3640)
!3648 = !DILocation(line: 474, column: 18, scope: !3640)
!3649 = !DILocation(line: 474, column: 7, scope: !3640)
!3650 = !DILocation(line: 475, column: 11, scope: !3651)
!3651 = distinct !DILexicalBlock(scope: !3640, file: !1, line: 475, column: 11)
!3652 = !DILocation(line: 475, column: 17, scope: !3651)
!3653 = !DILocation(line: 475, column: 11, scope: !3640)
!3654 = !DILocation(line: 476, column: 13, scope: !3651)
!3655 = !DILocation(line: 476, column: 2, scope: !3651)
!3656 = !DILocation(line: 478, column: 20, scope: !3640)
!3657 = !DILocation(line: 480, column: 11, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3640, file: !1, line: 480, column: 11)
!3659 = !DILocation(line: 480, column: 11, scope: !3640)
!3660 = !DILocation(line: 481, column: 43, scope: !3658)
!3661 = !DILocation(line: 481, column: 20, scope: !3658)
!3662 = !DILocation(line: 481, column: 18, scope: !3658)
!3663 = !DILocation(line: 481, column: 9, scope: !3658)
!3664 = !DILocation(line: 483, column: 35, scope: !3640)
!3665 = !DILocation(line: 483, column: 7, scope: !3640)
!3666 = !DILocation(line: 484, column: 43, scope: !3640)
!3667 = !DILocation(line: 484, column: 70, scope: !3640)
!3668 = !DILocation(line: 484, column: 49, scope: !3640)
!3669 = !DILocation(line: 485, column: 8, scope: !3640)
!3670 = !DILocation(line: 486, column: 8, scope: !3640)
!3671 = !DILocation(line: 486, column: 19, scope: !3640)
!3672 = !DILocation(line: 486, column: 25, scope: !3640)
!3673 = !DILocation(line: 490, column: 11, scope: !3640)
!3674 = !DILocation(line: 490, column: 8, scope: !3640)
!3675 = !DILocation(line: 484, column: 12, scope: !3640)
!3676 = !DILocation(line: 484, column: 10, scope: !3640)
!3677 = !DILocation(line: 492, column: 7, scope: !3640)
!3678 = !DILocation(line: 494, column: 13, scope: !3640)
!3679 = !DILocation(line: 494, column: 7, scope: !3640)
!3680 = !DILocation(line: 496, column: 11, scope: !3681)
!3681 = distinct !DILexicalBlock(scope: !3640, file: !1, line: 496, column: 11)
!3682 = !DILocation(line: 496, column: 11, scope: !3640)
!3683 = !DILocation(line: 498, column: 26, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3681, file: !1, line: 497, column: 3)
!3685 = !DILocation(line: 498, column: 36, scope: !3684)
!3686 = !DILocation(line: 498, column: 5, scope: !3684)
!3687 = !DILocation(line: 499, column: 20, scope: !3684)
!3688 = !DILocation(line: 499, column: 5, scope: !3684)
!3689 = !DILocation(line: 500, column: 3, scope: !3684)
!3690 = !DILocation(line: 503, column: 14, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3640, file: !1, line: 503, column: 7)
!3692 = !DILocation(line: 503, column: 12, scope: !3691)
!3693 = !DILocation(line: 503, column: 19, scope: !3694)
!3694 = distinct !DILexicalBlock(scope: !3691, file: !1, line: 503, column: 7)
!3695 = !DILocation(line: 503, column: 7, scope: !3691)
!3696 = !DILocation(line: 504, column: 15, scope: !3694)
!3697 = !DILocation(line: 504, column: 2, scope: !3694)
!3698 = !DILocation(line: 503, column: 62, scope: !3694)
!3699 = !DILocation(line: 503, column: 7, scope: !3694)
!3700 = distinct !{!3700, !3695, !3701}
!3701 = !DILocation(line: 504, column: 18, scope: !3691)
!3702 = !DILocation(line: 505, column: 7, scope: !3640)
!3703 = !DILocation(line: 506, column: 5, scope: !3640)
!3704 = !DILocation(line: 508, column: 9, scope: !3614)
!3705 = !DILocation(line: 508, column: 15, scope: !3614)
!3706 = !DILocation(line: 508, column: 7, scope: !3614)
!3707 = !DILocation(line: 509, column: 26, scope: !3614)
!3708 = !DILocation(line: 509, column: 3, scope: !3614)
!3709 = !DILocation(line: 513, column: 16, scope: !3614)
!3710 = !DILocation(line: 513, column: 3, scope: !3614)
!3711 = !DILocation(line: 515, column: 7, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3614, file: !1, line: 515, column: 7)
!3713 = !DILocation(line: 515, column: 7, scope: !3614)
!3714 = !DILocation(line: 516, column: 14, scope: !3712)
!3715 = !DILocation(line: 516, column: 72, scope: !3712)
!3716 = !DILocation(line: 516, column: 66, scope: !3712)
!3717 = !DILocation(line: 516, column: 5, scope: !3712)
!3718 = !DILocation(line: 517, column: 1, scope: !3614)
!3719 = distinct !DISubprogram(name: "RESET_BIT", scope: !2323, file: !2323, line: 82, type: !3720, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3720 = !DISubroutineType(types: !3721)
!3721 = !{null, !2322, !5}
!3722 = !DILocalVariable(name: "map", arg: 1, scope: !3719, file: !2323, line: 82, type: !2322)
!3723 = !DILocation(line: 82, column: 20, scope: !3719)
!3724 = !DILocalVariable(name: "bitno", arg: 2, scope: !3719, file: !2323, line: 82, type: !5)
!3725 = !DILocation(line: 82, column: 39, scope: !3719)
!3726 = !DILocation(line: 84, column: 7, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3719, file: !2323, line: 84, column: 7)
!3728 = !DILocation(line: 84, column: 12, scope: !3727)
!3729 = !DILocation(line: 84, column: 7, scope: !3719)
!3730 = !DILocalVariable(name: "oldbit", scope: !3731, file: !2323, line: 86, type: !1005)
!3731 = distinct !DILexicalBlock(scope: !3727, file: !2323, line: 85, column: 5)
!3732 = !DILocation(line: 86, column: 12, scope: !3731)
!3733 = !DILocation(line: 87, column: 16, scope: !3731)
!3734 = !DILocation(line: 87, column: 14, scope: !3731)
!3735 = !DILocation(line: 88, column: 11, scope: !3736)
!3736 = distinct !DILexicalBlock(scope: !3731, file: !2323, line: 88, column: 11)
!3737 = !DILocation(line: 88, column: 11, scope: !3731)
!3738 = !DILocation(line: 89, column: 2, scope: !3736)
!3739 = !DILocation(line: 89, column: 7, scope: !3736)
!3740 = !DILocation(line: 89, column: 16, scope: !3736)
!3741 = !DILocation(line: 89, column: 22, scope: !3736)
!3742 = !DILocation(line: 89, column: 41, scope: !3736)
!3743 = !DILocation(line: 90, column: 5, scope: !3731)
!3744 = !DILocation(line: 92, column: 35, scope: !3719)
!3745 = !DILocation(line: 92, column: 42, scope: !3719)
!3746 = !DILocation(line: 92, column: 31, scope: !3719)
!3747 = !DILocation(line: 92, column: 8, scope: !3719)
!3748 = !DILocation(line: 91, column: 3, scope: !3719)
!3749 = !DILocation(line: 91, column: 8, scope: !3719)
!3750 = !DILocation(line: 91, column: 13, scope: !3719)
!3751 = !DILocation(line: 91, column: 19, scope: !3719)
!3752 = !DILocation(line: 92, column: 5, scope: !3719)
!3753 = !DILocation(line: 93, column: 1, scope: !3719)
!3754 = distinct !DISubprogram(name: "analyze_insns_in_loop", scope: !1, file: !1, line: 1793, type: !3755, scopeLine: 1794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3755 = !DISubroutineType(types: !3756)
!3756 = !{!1867, !738}
!3757 = !DILocalVariable(name: "loop", arg: 1, scope: !3754, file: !1, line: 1793, type: !738)
!3758 = !DILocation(line: 1793, column: 37, scope: !3754)
!3759 = !DILocalVariable(name: "body", scope: !3754, file: !1, line: 1795, type: !2756)
!3760 = !DILocation(line: 1795, column: 16, scope: !3754)
!3761 = !DILocalVariable(name: "bb", scope: !3754, file: !1, line: 1795, type: !1150)
!3762 = !DILocation(line: 1795, column: 22, scope: !3754)
!3763 = !DILocalVariable(name: "i", scope: !3754, file: !1, line: 1796, type: !5)
!3764 = !DILocation(line: 1796, column: 12, scope: !3754)
!3765 = !DILocalVariable(name: "opt_info", scope: !3754, file: !1, line: 1797, type: !1867)
!3766 = !DILocation(line: 1797, column: 20, scope: !3754)
!3767 = !DILocation(line: 1797, column: 31, scope: !3754)
!3768 = !DILocalVariable(name: "insn", scope: !3754, file: !1, line: 1798, type: !775)
!3769 = !DILocation(line: 1798, column: 7, scope: !3754)
!3770 = !DILocalVariable(name: "ivts", scope: !3754, file: !1, line: 1799, type: !1872)
!3771 = !DILocation(line: 1799, column: 23, scope: !3754)
!3772 = !DILocalVariable(name: "ves", scope: !3754, file: !1, line: 1800, type: !1886)
!3773 = !DILocation(line: 1800, column: 25, scope: !3754)
!3774 = !DILocalVariable(name: "slot1", scope: !3754, file: !1, line: 1801, type: !1222)
!3775 = !DILocation(line: 1801, column: 8, scope: !3754)
!3776 = !DILocalVariable(name: "slot2", scope: !3754, file: !1, line: 1802, type: !1222)
!3777 = !DILocation(line: 1802, column: 8, scope: !3754)
!3778 = !DILocalVariable(name: "edges", scope: !3754, file: !1, line: 1803, type: !2447)
!3779 = !DILocation(line: 1803, column: 21, scope: !3754)
!3780 = !DILocation(line: 1803, column: 50, scope: !3754)
!3781 = !DILocation(line: 1803, column: 29, scope: !3754)
!3782 = !DILocalVariable(name: "exit", scope: !3754, file: !1, line: 1804, type: !760)
!3783 = !DILocation(line: 1804, column: 8, scope: !3754)
!3784 = !DILocalVariable(name: "can_apply", scope: !3754, file: !1, line: 1805, type: !1005)
!3785 = !DILocation(line: 1805, column: 8, scope: !3754)
!3786 = !DILocation(line: 1807, column: 26, scope: !3754)
!3787 = !DILocation(line: 1807, column: 3, scope: !3754)
!3788 = !DILocation(line: 1809, column: 25, scope: !3754)
!3789 = !DILocation(line: 1809, column: 10, scope: !3754)
!3790 = !DILocation(line: 1809, column: 8, scope: !3754)
!3791 = !DILocation(line: 1811, column: 7, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3754, file: !1, line: 1811, column: 7)
!3793 = !DILocation(line: 1811, column: 7, scope: !3754)
!3794 = !DILocation(line: 1813, column: 51, scope: !3795)
!3795 = distinct !DILexicalBlock(scope: !3792, file: !1, line: 1812, column: 5)
!3796 = !DILocation(line: 1813, column: 57, scope: !3795)
!3797 = !DILocation(line: 1813, column: 49, scope: !3795)
!3798 = !DILocation(line: 1813, column: 47, scope: !3795)
!3799 = !DILocation(line: 1813, column: 34, scope: !3795)
!3800 = !DILocation(line: 1813, column: 7, scope: !3795)
!3801 = !DILocation(line: 1813, column: 17, scope: !3795)
!3802 = !DILocation(line: 1813, column: 32, scope: !3795)
!3803 = !DILocation(line: 1815, column: 7, scope: !3795)
!3804 = !DILocation(line: 1815, column: 17, scope: !3795)
!3805 = !DILocation(line: 1815, column: 34, scope: !3795)
!3806 = !DILocation(line: 1816, column: 37, scope: !3795)
!3807 = !DILocation(line: 1816, column: 47, scope: !3795)
!3808 = !DILocation(line: 1816, column: 7, scope: !3795)
!3809 = !DILocation(line: 1816, column: 17, scope: !3795)
!3810 = !DILocation(line: 1816, column: 34, scope: !3795)
!3811 = !DILocation(line: 1817, column: 5, scope: !3795)
!3812 = !DILocation(line: 1820, column: 51, scope: !3754)
!3813 = !DILocation(line: 1820, column: 30, scope: !3754)
!3814 = !DILocation(line: 1820, column: 58, scope: !3754)
!3815 = !DILocation(line: 1820, column: 3, scope: !3754)
!3816 = !DILocation(line: 1820, column: 13, scope: !3754)
!3817 = !DILocation(line: 1820, column: 28, scope: !3754)
!3818 = !DILocation(line: 1822, column: 7, scope: !3819)
!3819 = distinct !DILexicalBlock(scope: !3754, file: !1, line: 1822, column: 7)
!3820 = !DILocation(line: 1822, column: 32, scope: !3819)
!3821 = !DILocation(line: 1822, column: 7, scope: !3754)
!3822 = !DILocation(line: 1824, column: 14, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3819, file: !1, line: 1823, column: 5)
!3824 = !DILocation(line: 1824, column: 12, scope: !3823)
!3825 = !DILocation(line: 1825, column: 13, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3823, file: !1, line: 1825, column: 11)
!3827 = !DILocation(line: 1825, column: 19, scope: !3826)
!3828 = !DILocation(line: 1825, column: 25, scope: !3826)
!3829 = !DILocation(line: 1825, column: 11, scope: !3823)
!3830 = !DILocation(line: 1827, column: 38, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3826, file: !1, line: 1826, column: 2)
!3832 = !DILocation(line: 1827, column: 26, scope: !3831)
!3833 = !DILocation(line: 1827, column: 4, scope: !3831)
!3834 = !DILocation(line: 1827, column: 14, scope: !3831)
!3835 = !DILocation(line: 1827, column: 24, scope: !3831)
!3836 = !DILocation(line: 1828, column: 14, scope: !3831)
!3837 = !DILocation(line: 1829, column: 2, scope: !3831)
!3838 = !DILocation(line: 1830, column: 5, scope: !3823)
!3839 = !DILocation(line: 1832, column: 7, scope: !3840)
!3840 = distinct !DILexicalBlock(scope: !3754, file: !1, line: 1832, column: 7)
!3841 = !DILocation(line: 1833, column: 7, scope: !3840)
!3842 = !DILocation(line: 1833, column: 10, scope: !3840)
!3843 = !DILocation(line: 1832, column: 7, scope: !3754)
!3844 = !DILocation(line: 1835, column: 61, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3840, file: !1, line: 1834, column: 5)
!3846 = !DILocation(line: 1835, column: 67, scope: !3845)
!3847 = !DILocation(line: 1835, column: 59, scope: !3845)
!3848 = !DILocation(line: 1835, column: 57, scope: !3845)
!3849 = !DILocation(line: 1835, column: 44, scope: !3845)
!3850 = !DILocation(line: 1835, column: 7, scope: !3845)
!3851 = !DILocation(line: 1835, column: 17, scope: !3845)
!3852 = !DILocation(line: 1835, column: 42, scope: !3845)
!3853 = !DILocation(line: 1838, column: 7, scope: !3845)
!3854 = !DILocation(line: 1838, column: 17, scope: !3845)
!3855 = !DILocation(line: 1838, column: 36, scope: !3845)
!3856 = !DILocation(line: 1839, column: 39, scope: !3845)
!3857 = !DILocation(line: 1839, column: 49, scope: !3845)
!3858 = !DILocation(line: 1839, column: 7, scope: !3845)
!3859 = !DILocation(line: 1839, column: 17, scope: !3845)
!3860 = !DILocation(line: 1839, column: 36, scope: !3845)
!3861 = !DILocation(line: 1840, column: 5, scope: !3845)
!3862 = !DILocation(line: 1842, column: 10, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3754, file: !1, line: 1842, column: 3)
!3864 = !DILocation(line: 1842, column: 8, scope: !3863)
!3865 = !DILocation(line: 1842, column: 15, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3863, file: !1, line: 1842, column: 3)
!3867 = !DILocation(line: 1842, column: 19, scope: !3866)
!3868 = !DILocation(line: 1842, column: 25, scope: !3866)
!3869 = !DILocation(line: 1842, column: 17, scope: !3866)
!3870 = !DILocation(line: 1842, column: 3, scope: !3863)
!3871 = !DILocation(line: 1844, column: 12, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3866, file: !1, line: 1843, column: 5)
!3873 = !DILocation(line: 1844, column: 17, scope: !3872)
!3874 = !DILocation(line: 1844, column: 10, scope: !3872)
!3875 = !DILocation(line: 1845, column: 44, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3872, file: !1, line: 1845, column: 11)
!3877 = !DILocation(line: 1845, column: 50, scope: !3876)
!3878 = !DILocation(line: 1845, column: 57, scope: !3876)
!3879 = !DILocation(line: 1845, column: 12, scope: !3876)
!3880 = !DILocation(line: 1845, column: 11, scope: !3872)
!3881 = !DILocation(line: 1846, column: 2, scope: !3876)
!3882 = !DILocation(line: 1848, column: 7, scope: !3883)
!3883 = distinct !DILexicalBlock(scope: !3872, file: !1, line: 1848, column: 7)
!3884 = !DILocation(line: 1848, column: 7, scope: !3885)
!3885 = distinct !DILexicalBlock(scope: !3883, file: !1, line: 1848, column: 7)
!3886 = !DILocation(line: 0, scope: !3885)
!3887 = !DILocation(line: 1850, column: 14, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3889, file: !1, line: 1850, column: 13)
!3889 = distinct !DILexicalBlock(scope: !3885, file: !1, line: 1849, column: 7)
!3890 = !DILocation(line: 1850, column: 13, scope: !3889)
!3891 = !DILocation(line: 1851, column: 11, scope: !3888)
!3892 = !DILocation(line: 1853, column: 13, scope: !3893)
!3893 = distinct !DILexicalBlock(scope: !3889, file: !1, line: 1853, column: 13)
!3894 = !DILocation(line: 1853, column: 23, scope: !3893)
!3895 = !DILocation(line: 1853, column: 13, scope: !3889)
!3896 = !DILocation(line: 1854, column: 44, scope: !3893)
!3897 = !DILocation(line: 1854, column: 18, scope: !3893)
!3898 = !DILocation(line: 1854, column: 16, scope: !3893)
!3899 = !DILocation(line: 1854, column: 11, scope: !3893)
!3900 = !DILocation(line: 1856, column: 13, scope: !3901)
!3901 = distinct !DILexicalBlock(scope: !3889, file: !1, line: 1856, column: 13)
!3902 = !DILocation(line: 1856, column: 13, scope: !3889)
!3903 = !DILocation(line: 1858, column: 37, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3901, file: !1, line: 1857, column: 11)
!3905 = !DILocation(line: 1858, column: 47, scope: !3904)
!3906 = !DILocation(line: 1858, column: 63, scope: !3904)
!3907 = !DILocation(line: 1858, column: 21, scope: !3904)
!3908 = !DILocation(line: 1858, column: 19, scope: !3904)
!3909 = !DILocation(line: 1859, column: 6, scope: !3904)
!3910 = !DILocation(line: 1860, column: 22, scope: !3904)
!3911 = !DILocation(line: 1860, column: 14, scope: !3904)
!3912 = !DILocation(line: 1860, column: 20, scope: !3904)
!3913 = !DILocation(line: 1861, column: 36, scope: !3904)
!3914 = !DILocation(line: 1861, column: 7, scope: !3904)
!3915 = !DILocation(line: 1861, column: 17, scope: !3904)
!3916 = !DILocation(line: 1861, column: 34, scope: !3904)
!3917 = !DILocation(line: 1862, column: 36, scope: !3904)
!3918 = !DILocation(line: 1862, column: 42, scope: !3904)
!3919 = !DILocation(line: 1862, column: 6, scope: !3904)
!3920 = !DILocation(line: 1862, column: 16, scope: !3904)
!3921 = !DILocation(line: 1862, column: 33, scope: !3904)
!3922 = !DILocation(line: 1863, column: 13, scope: !3904)
!3923 = !DILocation(line: 1866, column: 13, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3889, file: !1, line: 1866, column: 13)
!3925 = !DILocation(line: 1866, column: 23, scope: !3924)
!3926 = !DILocation(line: 1866, column: 13, scope: !3889)
!3927 = !DILocation(line: 1867, column: 45, scope: !3924)
!3928 = !DILocation(line: 1867, column: 51, scope: !3924)
!3929 = !DILocation(line: 1867, column: 17, scope: !3924)
!3930 = !DILocation(line: 1867, column: 15, scope: !3924)
!3931 = !DILocation(line: 1867, column: 11, scope: !3924)
!3932 = !DILocation(line: 1869, column: 13, scope: !3933)
!3933 = distinct !DILexicalBlock(scope: !3889, file: !1, line: 1869, column: 13)
!3934 = !DILocation(line: 1869, column: 13, scope: !3889)
!3935 = !DILocation(line: 1871, column: 37, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3933, file: !1, line: 1870, column: 11)
!3937 = !DILocation(line: 1871, column: 47, scope: !3936)
!3938 = !DILocation(line: 1871, column: 73, scope: !3936)
!3939 = !DILocation(line: 1871, column: 21, scope: !3936)
!3940 = !DILocation(line: 1871, column: 19, scope: !3936)
!3941 = !DILocation(line: 1872, column: 6, scope: !3936)
!3942 = !DILocation(line: 1873, column: 22, scope: !3936)
!3943 = !DILocation(line: 1873, column: 14, scope: !3936)
!3944 = !DILocation(line: 1873, column: 20, scope: !3936)
!3945 = !DILocation(line: 1874, column: 38, scope: !3936)
!3946 = !DILocation(line: 1874, column: 7, scope: !3936)
!3947 = !DILocation(line: 1874, column: 17, scope: !3936)
!3948 = !DILocation(line: 1874, column: 36, scope: !3936)
!3949 = !DILocation(line: 1875, column: 38, scope: !3936)
!3950 = !DILocation(line: 1875, column: 43, scope: !3936)
!3951 = !DILocation(line: 1875, column: 6, scope: !3936)
!3952 = !DILocation(line: 1875, column: 16, scope: !3936)
!3953 = !DILocation(line: 1875, column: 35, scope: !3936)
!3954 = !DILocation(line: 1876, column: 11, scope: !3936)
!3955 = !DILocation(line: 1877, column: 7, scope: !3889)
!3956 = distinct !{!3956, !3882, !3957}
!3957 = !DILocation(line: 1877, column: 7, scope: !3883)
!3958 = !DILocation(line: 1878, column: 5, scope: !3872)
!3959 = !DILocation(line: 1842, column: 37, scope: !3866)
!3960 = !DILocation(line: 1842, column: 3, scope: !3866)
!3961 = distinct !{!3961, !3870, !3962}
!3962 = !DILocation(line: 1878, column: 5, scope: !3863)
!3963 = !DILocation(line: 1880, column: 3, scope: !3754)
!3964 = !DILocation(line: 1881, column: 9, scope: !3754)
!3965 = !DILocation(line: 1881, column: 3, scope: !3754)
!3966 = !DILocation(line: 1882, column: 10, scope: !3754)
!3967 = !DILocation(line: 1882, column: 3, scope: !3754)
!3968 = distinct !DISubprogram(name: "opt_info_start_duplication", scope: !1, file: !1, line: 1889, type: !3969, scopeLine: 1890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3969 = !DISubroutineType(types: !3970)
!3970 = !{null, !1867}
!3971 = !DILocalVariable(name: "opt_info", arg: 1, scope: !3968, file: !1, line: 1889, type: !1867)
!3972 = !DILocation(line: 1889, column: 46, scope: !3968)
!3973 = !DILocation(line: 1891, column: 7, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3968, file: !1, line: 1891, column: 7)
!3975 = !DILocation(line: 1891, column: 7, scope: !3968)
!3976 = !DILocation(line: 1892, column: 33, scope: !3974)
!3977 = !DILocation(line: 1892, column: 5, scope: !3974)
!3978 = !DILocation(line: 1892, column: 15, scope: !3974)
!3979 = !DILocation(line: 1892, column: 31, scope: !3974)
!3980 = !DILocation(line: 1893, column: 1, scope: !3968)
!3981 = distinct !DISubprogram(name: "apply_opt_in_copies", scope: !1, file: !1, line: 2197, type: !3982, scopeLine: 2200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!3982 = !DISubroutineType(types: !3983)
!3983 = !{null, !1867, !5, !1005, !1005}
!3984 = !DILocalVariable(name: "opt_info", arg: 1, scope: !3981, file: !1, line: 2197, type: !1867)
!3985 = !DILocation(line: 2197, column: 39, scope: !3981)
!3986 = !DILocalVariable(name: "n_copies", arg: 2, scope: !3981, file: !1, line: 2198, type: !5)
!3987 = !DILocation(line: 2198, column: 31, scope: !3981)
!3988 = !DILocalVariable(name: "unrolling", arg: 3, scope: !3981, file: !1, line: 2198, type: !1005)
!3989 = !DILocation(line: 2198, column: 46, scope: !3981)
!3990 = !DILocalVariable(name: "rewrite_original_loop", arg: 4, scope: !3981, file: !1, line: 2199, type: !1005)
!3991 = !DILocation(line: 2199, column: 27, scope: !3981)
!3992 = !DILocalVariable(name: "i", scope: !3981, file: !1, line: 2201, type: !5)
!3993 = !DILocation(line: 2201, column: 12, scope: !3981)
!3994 = !DILocalVariable(name: "delta", scope: !3981, file: !1, line: 2201, type: !5)
!3995 = !DILocation(line: 2201, column: 15, scope: !3981)
!3996 = !DILocalVariable(name: "bb", scope: !3981, file: !1, line: 2202, type: !1150)
!3997 = !DILocation(line: 2202, column: 15, scope: !3981)
!3998 = !DILocalVariable(name: "orig_bb", scope: !3981, file: !1, line: 2202, type: !1150)
!3999 = !DILocation(line: 2202, column: 19, scope: !3981)
!4000 = !DILocalVariable(name: "insn", scope: !3981, file: !1, line: 2203, type: !775)
!4001 = !DILocation(line: 2203, column: 7, scope: !3981)
!4002 = !DILocalVariable(name: "orig_insn", scope: !3981, file: !1, line: 2203, type: !775)
!4003 = !DILocation(line: 2203, column: 13, scope: !3981)
!4004 = !DILocalVariable(name: "next", scope: !3981, file: !1, line: 2203, type: !775)
!4005 = !DILocation(line: 2203, column: 24, scope: !3981)
!4006 = !DILocalVariable(name: "ivts_templ", scope: !3981, file: !1, line: 2204, type: !1873)
!4007 = !DILocation(line: 2204, column: 22, scope: !3981)
!4008 = !DILocalVariable(name: "ivts", scope: !3981, file: !1, line: 2204, type: !1872)
!4009 = !DILocation(line: 2204, column: 35, scope: !3981)
!4010 = !DILocalVariable(name: "ve_templ", scope: !3981, file: !1, line: 2205, type: !1887)
!4011 = !DILocation(line: 2205, column: 24, scope: !3981)
!4012 = !DILocalVariable(name: "ves", scope: !3981, file: !1, line: 2205, type: !1886)
!4013 = !DILocation(line: 2205, column: 35, scope: !3981)
!4014 = !DILocation(line: 2209, column: 3, scope: !3981)
!4015 = !DILocation(line: 2212, column: 7, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3981, file: !1, line: 2212, column: 7)
!4017 = !DILocation(line: 2212, column: 17, scope: !4016)
!4018 = !DILocation(line: 2212, column: 7, scope: !3981)
!4019 = !DILocation(line: 2213, column: 17, scope: !4020)
!4020 = distinct !DILexicalBlock(scope: !4016, file: !1, line: 2213, column: 5)
!4021 = !DILocation(line: 2213, column: 27, scope: !4020)
!4022 = !DILocation(line: 2213, column: 15, scope: !4020)
!4023 = !DILocation(line: 2213, column: 10, scope: !4020)
!4024 = !DILocation(line: 2213, column: 45, scope: !4025)
!4025 = distinct !DILexicalBlock(scope: !4020, file: !1, line: 2213, column: 5)
!4026 = !DILocation(line: 2213, column: 5, scope: !4020)
!4027 = !DILocation(line: 2214, column: 32, scope: !4025)
!4028 = !DILocation(line: 2214, column: 7, scope: !4025)
!4029 = !DILocation(line: 2213, column: 58, scope: !4025)
!4030 = !DILocation(line: 2213, column: 64, scope: !4025)
!4031 = !DILocation(line: 2213, column: 56, scope: !4025)
!4032 = !DILocation(line: 2213, column: 5, scope: !4025)
!4033 = distinct !{!4033, !4026, !4034}
!4034 = !DILocation(line: 2214, column: 36, scope: !4020)
!4035 = !DILocation(line: 2216, column: 12, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !3981, file: !1, line: 2216, column: 3)
!4037 = !DILocation(line: 2216, column: 22, scope: !4036)
!4038 = !DILocation(line: 2216, column: 10, scope: !4036)
!4039 = !DILocation(line: 2216, column: 8, scope: !4036)
!4040 = !DILocation(line: 2216, column: 39, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4036, file: !1, line: 2216, column: 3)
!4042 = !DILocation(line: 2216, column: 54, scope: !4041)
!4043 = !DILocation(line: 2216, column: 41, scope: !4041)
!4044 = !DILocation(line: 2216, column: 3, scope: !4036)
!4045 = !DILocation(line: 2218, column: 12, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4041, file: !1, line: 2217, column: 5)
!4047 = !DILocation(line: 2218, column: 10, scope: !4046)
!4048 = !DILocation(line: 2219, column: 34, scope: !4046)
!4049 = !DILocation(line: 2219, column: 17, scope: !4046)
!4050 = !DILocation(line: 2219, column: 15, scope: !4046)
!4051 = !DILocation(line: 2223, column: 49, scope: !4046)
!4052 = !DILocation(line: 2223, column: 53, scope: !4046)
!4053 = !DILocation(line: 2223, column: 41, scope: !4046)
!4054 = !DILocation(line: 2223, column: 58, scope: !4046)
!4055 = !DILocation(line: 2224, column: 6, scope: !4046)
!4056 = !DILocation(line: 2223, column: 15, scope: !4046)
!4057 = !DILocation(line: 2223, column: 13, scope: !4046)
!4058 = !DILocation(line: 2225, column: 7, scope: !4046)
!4059 = !DILocation(line: 2225, column: 11, scope: !4046)
!4060 = !DILocation(line: 2225, column: 15, scope: !4046)
!4061 = !DILocation(line: 2226, column: 19, scope: !4046)
!4062 = !DILocation(line: 2226, column: 17, scope: !4046)
!4063 = !DILocation(line: 2227, column: 19, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4046, file: !1, line: 2227, column: 7)
!4065 = !DILocation(line: 2227, column: 17, scope: !4064)
!4066 = !DILocation(line: 2227, column: 12, scope: !4064)
!4067 = !DILocation(line: 2227, column: 33, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4064, file: !1, line: 2227, column: 7)
!4069 = !DILocation(line: 2227, column: 41, scope: !4068)
!4070 = !DILocation(line: 2227, column: 38, scope: !4068)
!4071 = !DILocation(line: 2227, column: 7, scope: !4064)
!4072 = !DILocation(line: 2229, column: 18, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4068, file: !1, line: 2228, column: 9)
!4074 = !DILocation(line: 2229, column: 16, scope: !4073)
!4075 = !DILocation(line: 2230, column: 16, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4073, file: !1, line: 2230, column: 15)
!4077 = !DILocation(line: 2230, column: 15, scope: !4073)
!4078 = !DILocation(line: 2231, column: 13, scope: !4076)
!4079 = !DILocation(line: 2233, column: 11, scope: !4073)
!4080 = !DILocation(line: 2233, column: 19, scope: !4073)
!4081 = !DILocation(line: 2233, column: 18, scope: !4073)
!4082 = !DILocation(line: 2234, column: 25, scope: !4073)
!4083 = !DILocation(line: 2234, column: 23, scope: !4073)
!4084 = distinct !{!4084, !4079, !4082}
!4085 = !DILocation(line: 2236, column: 29, scope: !4073)
!4086 = !DILocation(line: 2236, column: 22, scope: !4073)
!4087 = !DILocation(line: 2236, column: 27, scope: !4073)
!4088 = !DILocation(line: 2237, column: 27, scope: !4073)
!4089 = !DILocation(line: 2237, column: 20, scope: !4073)
!4090 = !DILocation(line: 2237, column: 25, scope: !4073)
!4091 = !DILocation(line: 2240, column: 15, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !4073, file: !1, line: 2240, column: 15)
!4093 = !DILocation(line: 2240, column: 25, scope: !4092)
!4094 = !DILocation(line: 2240, column: 15, scope: !4073)
!4095 = !DILocation(line: 2243, column: 14, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4092, file: !1, line: 2241, column: 13)
!4097 = !DILocation(line: 2243, column: 24, scope: !4096)
!4098 = !DILocation(line: 2243, column: 40, scope: !4096)
!4099 = !DILocation(line: 2243, column: 3, scope: !4096)
!4100 = !DILocation(line: 2242, column: 22, scope: !4096)
!4101 = !DILocation(line: 2242, column: 20, scope: !4096)
!4102 = !DILocation(line: 2245, column: 19, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4096, file: !1, line: 2245, column: 19)
!4104 = !DILocation(line: 2245, column: 19, scope: !4096)
!4105 = !DILocation(line: 2247, column: 5, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4103, file: !1, line: 2246, column: 17)
!4107 = !DILocation(line: 2250, column: 24, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4106, file: !1, line: 2250, column: 23)
!4109 = !DILocation(line: 2250, column: 23, scope: !4106)
!4110 = !DILocation(line: 2251, column: 49, scope: !4108)
!4111 = !DILocation(line: 2251, column: 55, scope: !4108)
!4112 = !DILocation(line: 2251, column: 21, scope: !4108)
!4113 = !DILocation(line: 2252, column: 29, scope: !4106)
!4114 = !DILocation(line: 2252, column: 35, scope: !4106)
!4115 = !DILocation(line: 2252, column: 41, scope: !4106)
!4116 = !DILocation(line: 2252, column: 19, scope: !4106)
!4117 = !DILocation(line: 2253, column: 17, scope: !4106)
!4118 = !DILocation(line: 2254, column: 13, scope: !4096)
!4119 = !DILocation(line: 2256, column: 15, scope: !4120)
!4120 = distinct !DILexicalBlock(scope: !4073, file: !1, line: 2256, column: 15)
!4121 = !DILocation(line: 2256, column: 25, scope: !4120)
!4122 = !DILocation(line: 2256, column: 28, scope: !4120)
!4123 = !DILocation(line: 2256, column: 38, scope: !4120)
!4124 = !DILocation(line: 2256, column: 15, scope: !4073)
!4125 = !DILocation(line: 2259, column: 14, scope: !4126)
!4126 = distinct !DILexicalBlock(scope: !4120, file: !1, line: 2257, column: 13)
!4127 = !DILocation(line: 2259, column: 24, scope: !4126)
!4128 = !DILocation(line: 2259, column: 50, scope: !4126)
!4129 = !DILocation(line: 2259, column: 3, scope: !4126)
!4130 = !DILocation(line: 2258, column: 21, scope: !4126)
!4131 = !DILocation(line: 2258, column: 19, scope: !4126)
!4132 = !DILocation(line: 2260, column: 19, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4126, file: !1, line: 2260, column: 19)
!4134 = !DILocation(line: 2260, column: 19, scope: !4126)
!4135 = !DILocation(line: 2262, column: 5, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4133, file: !1, line: 2261, column: 17)
!4137 = !DILocation(line: 2264, column: 48, scope: !4136)
!4138 = !DILocation(line: 2264, column: 53, scope: !4136)
!4139 = !DILocation(line: 2264, column: 19, scope: !4136)
!4140 = !DILocation(line: 2265, column: 17, scope: !4136)
!4141 = !DILocation(line: 2266, column: 13, scope: !4126)
!4142 = !DILocation(line: 2267, column: 23, scope: !4073)
!4143 = !DILocation(line: 2267, column: 21, scope: !4073)
!4144 = !DILocation(line: 2268, column: 9, scope: !4073)
!4145 = !DILocation(line: 2227, column: 73, scope: !4068)
!4146 = !DILocation(line: 2227, column: 71, scope: !4068)
!4147 = !DILocation(line: 2227, column: 7, scope: !4068)
!4148 = distinct !{!4148, !4071, !4149}
!4149 = !DILocation(line: 2268, column: 9, scope: !4064)
!4150 = !DILocation(line: 2269, column: 5, scope: !4046)
!4151 = !DILocation(line: 2216, column: 73, scope: !4041)
!4152 = !DILocation(line: 2216, column: 3, scope: !4041)
!4153 = distinct !{!4153, !4044, !4154}
!4154 = !DILocation(line: 2269, column: 5, scope: !4036)
!4155 = !DILocation(line: 2271, column: 8, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !3981, file: !1, line: 2271, column: 7)
!4157 = !DILocation(line: 2271, column: 7, scope: !3981)
!4158 = !DILocation(line: 2272, column: 5, scope: !4156)
!4159 = !DILocation(line: 2276, column: 7, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !3981, file: !1, line: 2276, column: 7)
!4161 = !DILocation(line: 2276, column: 17, scope: !4160)
!4162 = !DILocation(line: 2276, column: 7, scope: !3981)
!4163 = !DILocation(line: 2278, column: 18, scope: !4164)
!4164 = distinct !DILexicalBlock(scope: !4165, file: !1, line: 2278, column: 7)
!4165 = distinct !DILexicalBlock(scope: !4160, file: !1, line: 2277, column: 5)
!4166 = !DILocation(line: 2278, column: 28, scope: !4164)
!4167 = !DILocation(line: 2278, column: 16, scope: !4164)
!4168 = !DILocation(line: 2278, column: 12, scope: !4164)
!4169 = !DILocation(line: 2278, column: 48, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4164, file: !1, line: 2278, column: 7)
!4171 = !DILocation(line: 2278, column: 7, scope: !4164)
!4172 = !DILocation(line: 2279, column: 39, scope: !4170)
!4173 = !DILocation(line: 2279, column: 44, scope: !4170)
!4174 = !DILocation(line: 2279, column: 54, scope: !4170)
!4175 = !DILocation(line: 2279, column: 2, scope: !4170)
!4176 = !DILocation(line: 2278, column: 59, scope: !4170)
!4177 = !DILocation(line: 2278, column: 64, scope: !4170)
!4178 = !DILocation(line: 2278, column: 57, scope: !4170)
!4179 = !DILocation(line: 2278, column: 7, scope: !4170)
!4180 = distinct !{!4180, !4171, !4181}
!4181 = !DILocation(line: 2279, column: 68, scope: !4164)
!4182 = !DILocation(line: 2280, column: 18, scope: !4183)
!4183 = distinct !DILexicalBlock(scope: !4165, file: !1, line: 2280, column: 7)
!4184 = !DILocation(line: 2280, column: 28, scope: !4183)
!4185 = !DILocation(line: 2280, column: 16, scope: !4183)
!4186 = !DILocation(line: 2280, column: 12, scope: !4183)
!4187 = !DILocation(line: 2280, column: 48, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4183, file: !1, line: 2280, column: 7)
!4189 = !DILocation(line: 2280, column: 7, scope: !4183)
!4190 = !DILocation(line: 2281, column: 35, scope: !4188)
!4191 = !DILocation(line: 2281, column: 40, scope: !4188)
!4192 = !DILocation(line: 2281, column: 50, scope: !4188)
!4193 = !DILocation(line: 2281, column: 2, scope: !4188)
!4194 = !DILocation(line: 2280, column: 59, scope: !4188)
!4195 = !DILocation(line: 2280, column: 64, scope: !4188)
!4196 = !DILocation(line: 2280, column: 57, scope: !4188)
!4197 = !DILocation(line: 2280, column: 7, scope: !4188)
!4198 = distinct !{!4198, !4189, !4199}
!4199 = !DILocation(line: 2281, column: 59, scope: !4183)
!4200 = !DILocation(line: 2282, column: 5, scope: !4165)
!4201 = !DILocation(line: 2287, column: 12, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !3981, file: !1, line: 2287, column: 3)
!4203 = !DILocation(line: 2287, column: 22, scope: !4202)
!4204 = !DILocation(line: 2287, column: 10, scope: !4202)
!4205 = !DILocation(line: 2287, column: 8, scope: !4202)
!4206 = !DILocation(line: 2287, column: 39, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4202, file: !1, line: 2287, column: 3)
!4208 = !DILocation(line: 2287, column: 54, scope: !4207)
!4209 = !DILocation(line: 2287, column: 41, scope: !4207)
!4210 = !DILocation(line: 2287, column: 3, scope: !4202)
!4211 = !DILocation(line: 2289, column: 12, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4207, file: !1, line: 2288, column: 5)
!4213 = !DILocation(line: 2289, column: 10, scope: !4212)
!4214 = !DILocation(line: 2290, column: 34, scope: !4212)
!4215 = !DILocation(line: 2290, column: 17, scope: !4212)
!4216 = !DILocation(line: 2290, column: 15, scope: !4212)
!4217 = !DILocation(line: 2291, column: 24, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !4212, file: !1, line: 2291, column: 11)
!4219 = !DILocation(line: 2291, column: 11, scope: !4218)
!4220 = !DILocation(line: 2291, column: 36, scope: !4218)
!4221 = !DILocation(line: 2291, column: 33, scope: !4218)
!4222 = !DILocation(line: 2291, column: 11, scope: !4212)
!4223 = !DILocation(line: 2292, column: 2, scope: !4218)
!4224 = !DILocation(line: 2294, column: 44, scope: !4212)
!4225 = !DILocation(line: 2294, column: 54, scope: !4212)
!4226 = !DILocation(line: 2294, column: 15, scope: !4212)
!4227 = !DILocation(line: 2294, column: 13, scope: !4212)
!4228 = !DILocation(line: 2295, column: 24, scope: !4229)
!4229 = distinct !DILexicalBlock(scope: !4212, file: !1, line: 2295, column: 7)
!4230 = !DILocation(line: 2295, column: 22, scope: !4229)
!4231 = !DILocation(line: 2295, column: 12, scope: !4229)
!4232 = !DILocation(line: 2296, column: 12, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4229, file: !1, line: 2295, column: 7)
!4234 = !DILocation(line: 2296, column: 25, scope: !4233)
!4235 = !DILocation(line: 2296, column: 22, scope: !4233)
!4236 = !DILocation(line: 2295, column: 7, scope: !4229)
!4237 = !DILocation(line: 2299, column: 18, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4233, file: !1, line: 2298, column: 9)
!4239 = !DILocation(line: 2299, column: 16, scope: !4238)
!4240 = !DILocation(line: 2301, column: 16, scope: !4241)
!4241 = distinct !DILexicalBlock(scope: !4238, file: !1, line: 2301, column: 15)
!4242 = !DILocation(line: 2301, column: 15, scope: !4238)
!4243 = !DILocation(line: 2302, column: 7, scope: !4241)
!4244 = !DILocation(line: 2304, column: 29, scope: !4238)
!4245 = !DILocation(line: 2304, column: 22, scope: !4238)
!4246 = !DILocation(line: 2304, column: 27, scope: !4238)
!4247 = !DILocation(line: 2305, column: 15, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4238, file: !1, line: 2305, column: 15)
!4249 = !DILocation(line: 2305, column: 25, scope: !4248)
!4250 = !DILocation(line: 2305, column: 15, scope: !4238)
!4251 = !DILocation(line: 2308, column: 14, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4248, file: !1, line: 2306, column: 13)
!4253 = !DILocation(line: 2308, column: 24, scope: !4252)
!4254 = !DILocation(line: 2308, column: 40, scope: !4252)
!4255 = !DILocation(line: 2308, column: 3, scope: !4252)
!4256 = !DILocation(line: 2307, column: 22, scope: !4252)
!4257 = !DILocation(line: 2307, column: 20, scope: !4252)
!4258 = !DILocation(line: 2309, column: 19, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4252, file: !1, line: 2309, column: 19)
!4260 = !DILocation(line: 2309, column: 19, scope: !4252)
!4261 = !DILocation(line: 2311, column: 24, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4263, file: !1, line: 2311, column: 23)
!4263 = distinct !DILexicalBlock(scope: !4259, file: !1, line: 2310, column: 17)
!4264 = !DILocation(line: 2311, column: 23, scope: !4263)
!4265 = !DILocation(line: 2312, column: 49, scope: !4262)
!4266 = !DILocation(line: 2312, column: 55, scope: !4262)
!4267 = !DILocation(line: 2312, column: 21, scope: !4262)
!4268 = !DILocation(line: 2313, column: 29, scope: !4263)
!4269 = !DILocation(line: 2313, column: 35, scope: !4263)
!4270 = !DILocation(line: 2313, column: 46, scope: !4263)
!4271 = !DILocation(line: 2313, column: 19, scope: !4263)
!4272 = !DILocation(line: 2314, column: 19, scope: !4263)
!4273 = !DILocation(line: 2316, column: 13, scope: !4252)
!4274 = !DILocation(line: 2318, column: 9, scope: !4238)
!4275 = !DILocation(line: 2297, column: 24, scope: !4233)
!4276 = !DILocation(line: 2297, column: 22, scope: !4233)
!4277 = !DILocation(line: 2295, column: 7, scope: !4233)
!4278 = distinct !{!4278, !4236, !4279}
!4279 = !DILocation(line: 2318, column: 9, scope: !4229)
!4280 = !DILocation(line: 2319, column: 5, scope: !4212)
!4281 = !DILocation(line: 2287, column: 73, scope: !4207)
!4282 = !DILocation(line: 2287, column: 3, scope: !4207)
!4283 = distinct !{!4283, !4210, !4284}
!4284 = !DILocation(line: 2319, column: 5, scope: !4202)
!4285 = !DILocation(line: 2320, column: 1, scope: !3981)
!4286 = distinct !DISubprogram(name: "free_opt_info", scope: !1, file: !1, line: 2325, type: !3969, scopeLine: 2326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4287 = !DILocalVariable(name: "opt_info", arg: 1, scope: !4286, file: !1, line: 2325, type: !1867)
!4288 = !DILocation(line: 2325, column: 33, scope: !4286)
!4289 = !DILocation(line: 2327, column: 7, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4286, file: !1, line: 2327, column: 7)
!4291 = !DILocation(line: 2327, column: 17, scope: !4290)
!4292 = !DILocation(line: 2327, column: 7, scope: !4286)
!4293 = !DILocation(line: 2328, column: 18, scope: !4290)
!4294 = !DILocation(line: 2328, column: 28, scope: !4290)
!4295 = !DILocation(line: 2328, column: 5, scope: !4290)
!4296 = !DILocation(line: 2329, column: 7, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4286, file: !1, line: 2329, column: 7)
!4298 = !DILocation(line: 2329, column: 17, scope: !4297)
!4299 = !DILocation(line: 2329, column: 7, scope: !4286)
!4300 = !DILocalVariable(name: "ves", scope: !4301, file: !1, line: 2331, type: !1886)
!4301 = distinct !DILexicalBlock(scope: !4297, file: !1, line: 2330, column: 5)
!4302 = !DILocation(line: 2331, column: 29, scope: !4301)
!4303 = !DILocation(line: 2333, column: 18, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4301, file: !1, line: 2333, column: 7)
!4305 = !DILocation(line: 2333, column: 28, scope: !4304)
!4306 = !DILocation(line: 2333, column: 16, scope: !4304)
!4307 = !DILocation(line: 2333, column: 12, scope: !4304)
!4308 = !DILocation(line: 2333, column: 48, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4304, file: !1, line: 2333, column: 7)
!4310 = !DILocation(line: 2333, column: 7, scope: !4304)
!4311 = !DILocation(line: 2334, column: 2, scope: !4309)
!4312 = !DILocation(line: 2333, column: 59, scope: !4309)
!4313 = !DILocation(line: 2333, column: 64, scope: !4309)
!4314 = !DILocation(line: 2333, column: 57, scope: !4309)
!4315 = !DILocation(line: 2333, column: 7, scope: !4309)
!4316 = distinct !{!4316, !4310, !4317}
!4317 = !DILocation(line: 2334, column: 2, scope: !4304)
!4318 = !DILocation(line: 2335, column: 20, scope: !4301)
!4319 = !DILocation(line: 2335, column: 30, scope: !4301)
!4320 = !DILocation(line: 2335, column: 7, scope: !4301)
!4321 = !DILocation(line: 2336, column: 5, scope: !4301)
!4322 = !DILocation(line: 2337, column: 9, scope: !4286)
!4323 = !DILocation(line: 2337, column: 3, scope: !4286)
!4324 = !DILocation(line: 2338, column: 1, scope: !4286)
!4325 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !133, file: !133, line: 150, type: !4326, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4326 = !DISubroutineType(types: !4327)
!4327 = !{!734, !4328, !5, !4330}
!4328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4329, size: 64)
!4329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !753)
!4330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !760, size: 64)
!4331 = !DILocalVariable(name: "vec_", arg: 1, scope: !4325, file: !133, line: 150, type: !4328)
!4332 = !DILocation(line: 150, column: 1, scope: !4325)
!4333 = !DILocalVariable(name: "ix_", arg: 2, scope: !4325, file: !133, line: 150, type: !5)
!4334 = !DILocalVariable(name: "ptr", arg: 3, scope: !4325, file: !133, line: 150, type: !4330)
!4335 = !DILocation(line: 150, column: 1, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4325, file: !133, line: 150, column: 1)
!4337 = !DILocation(line: 150, column: 1, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4336, file: !133, line: 150, column: 1)
!4339 = !DILocation(line: 150, column: 1, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !4336, file: !133, line: 150, column: 1)
!4341 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !133, file: !133, line: 152, type: !4342, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4342 = !DISubroutineType(types: !4343)
!4343 = !{null, !4344}
!4344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!4345 = !DILocalVariable(name: "vec_", arg: 1, scope: !4341, file: !133, line: 152, type: !4344)
!4346 = !DILocation(line: 152, column: 1, scope: !4341)
!4347 = !DILocation(line: 152, column: 1, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4341, file: !133, line: 152, column: 1)
!4349 = distinct !DISubprogram(name: "si_info_hash", scope: !1, file: !1, line: 1492, type: !1206, scopeLine: 1493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4350 = !DILocalVariable(name: "ivts", arg: 1, scope: !4349, file: !1, line: 1492, type: !1209)
!4351 = !DILocation(line: 1492, column: 27, scope: !4349)
!4352 = !DILocation(line: 1494, column: 22, scope: !4349)
!4353 = !DILocation(line: 1494, column: 3, scope: !4349)
!4354 = distinct !DISubprogram(name: "si_info_eq", scope: !1, file: !1, line: 1500, type: !1214, scopeLine: 1501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4355 = !DILocalVariable(name: "ivts1", arg: 1, scope: !4354, file: !1, line: 1500, type: !1209)
!4356 = !DILocation(line: 1500, column: 25, scope: !4354)
!4357 = !DILocalVariable(name: "ivts2", arg: 2, scope: !4354, file: !1, line: 1500, type: !1209)
!4358 = !DILocation(line: 1500, column: 44, scope: !4354)
!4359 = !DILocalVariable(name: "i1", scope: !4354, file: !1, line: 1502, type: !4360)
!4360 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1907)
!4361 = !DILocation(line: 1502, column: 35, scope: !4354)
!4362 = !DILocation(line: 1502, column: 69, scope: !4354)
!4363 = !DILocation(line: 1502, column: 40, scope: !4354)
!4364 = !DILocalVariable(name: "i2", scope: !4354, file: !1, line: 1503, type: !4360)
!4365 = !DILocation(line: 1503, column: 35, scope: !4354)
!4366 = !DILocation(line: 1503, column: 69, scope: !4354)
!4367 = !DILocation(line: 1503, column: 40, scope: !4354)
!4368 = !DILocation(line: 1505, column: 10, scope: !4354)
!4369 = !DILocation(line: 1505, column: 14, scope: !4354)
!4370 = !DILocation(line: 1505, column: 22, scope: !4354)
!4371 = !DILocation(line: 1505, column: 26, scope: !4354)
!4372 = !DILocation(line: 1505, column: 19, scope: !4354)
!4373 = !DILocation(line: 1505, column: 3, scope: !4354)
!4374 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !133, file: !133, line: 150, type: !4375, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4375 = !DISubroutineType(types: !4376)
!4376 = !{!5, !4328}
!4377 = !DILocalVariable(name: "vec_", arg: 1, scope: !4374, file: !133, line: 150, type: !4328)
!4378 = !DILocation(line: 150, column: 1, scope: !4374)
!4379 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !133, file: !133, line: 150, type: !4380, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4380 = !DISubroutineType(types: !4381)
!4381 = !{!760, !4328, !5}
!4382 = !DILocalVariable(name: "vec_", arg: 1, scope: !4379, file: !133, line: 150, type: !4328)
!4383 = !DILocation(line: 150, column: 1, scope: !4379)
!4384 = !DILocalVariable(name: "ix_", arg: 2, scope: !4379, file: !133, line: 150, type: !5)
!4385 = !DILocation(line: 0, scope: !4379)
!4386 = distinct !DISubprogram(name: "ve_info_hash", scope: !1, file: !1, line: 1511, type: !1206, scopeLine: 1512, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4387 = !DILocalVariable(name: "ves", arg: 1, scope: !4386, file: !1, line: 1511, type: !1209)
!4388 = !DILocation(line: 1511, column: 27, scope: !4386)
!4389 = !DILocation(line: 1513, column: 22, scope: !4386)
!4390 = !DILocation(line: 1513, column: 3, scope: !4386)
!4391 = distinct !DISubprogram(name: "ve_info_eq", scope: !1, file: !1, line: 1520, type: !1214, scopeLine: 1521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4392 = !DILocalVariable(name: "ivts1", arg: 1, scope: !4391, file: !1, line: 1520, type: !1209)
!4393 = !DILocation(line: 1520, column: 25, scope: !4391)
!4394 = !DILocalVariable(name: "ivts2", arg: 2, scope: !4391, file: !1, line: 1520, type: !1209)
!4395 = !DILocation(line: 1520, column: 44, scope: !4391)
!4396 = !DILocalVariable(name: "i1", scope: !4391, file: !1, line: 1522, type: !4397)
!4397 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1909)
!4398 = !DILocation(line: 1522, column: 37, scope: !4391)
!4399 = !DILocation(line: 1522, column: 73, scope: !4391)
!4400 = !DILocation(line: 1522, column: 42, scope: !4391)
!4401 = !DILocalVariable(name: "i2", scope: !4391, file: !1, line: 1523, type: !4397)
!4402 = !DILocation(line: 1523, column: 37, scope: !4391)
!4403 = !DILocation(line: 1523, column: 73, scope: !4391)
!4404 = !DILocation(line: 1523, column: 42, scope: !4391)
!4405 = !DILocation(line: 1525, column: 10, scope: !4391)
!4406 = !DILocation(line: 1525, column: 14, scope: !4391)
!4407 = !DILocation(line: 1525, column: 22, scope: !4391)
!4408 = !DILocation(line: 1525, column: 26, scope: !4391)
!4409 = !DILocation(line: 1525, column: 19, scope: !4391)
!4410 = !DILocation(line: 1525, column: 3, scope: !4391)
!4411 = distinct !DISubprogram(name: "analyze_iv_to_split_insn", scope: !1, file: !1, line: 1738, type: !4412, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4412 = !DISubroutineType(types: !4413)
!4413 = !{!1872, !775}
!4414 = !DILocalVariable(name: "insn", arg: 1, scope: !4411, file: !1, line: 1738, type: !775)
!4415 = !DILocation(line: 1738, column: 31, scope: !4411)
!4416 = !DILocalVariable(name: "set", scope: !4411, file: !1, line: 1740, type: !775)
!4417 = !DILocation(line: 1740, column: 7, scope: !4411)
!4418 = !DILocalVariable(name: "dest", scope: !4411, file: !1, line: 1740, type: !775)
!4419 = !DILocation(line: 1740, column: 12, scope: !4411)
!4420 = !DILocalVariable(name: "iv", scope: !4411, file: !1, line: 1741, type: !4421)
!4421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_iv", file: !376, line: 328, size: 448, elements: !4422)
!4422 = !{!4423, !4424, !4425, !4426, !4427, !4428, !4429, !4430}
!4423 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4421, file: !376, line: 332, baseType: !775, size: 64)
!4424 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !4421, file: !376, line: 332, baseType: !775, size: 64, offset: 64)
!4425 = !DIDerivedType(tag: DW_TAG_member, name: "extend", scope: !4421, file: !376, line: 335, baseType: !516, size: 32, offset: 128)
!4426 = !DIDerivedType(tag: DW_TAG_member, name: "delta", scope: !4421, file: !376, line: 338, baseType: !775, size: 64, offset: 192)
!4427 = !DIDerivedType(tag: DW_TAG_member, name: "mult", scope: !4421, file: !376, line: 338, baseType: !775, size: 64, offset: 256)
!4428 = !DIDerivedType(tag: DW_TAG_member, name: "extend_mode", scope: !4421, file: !376, line: 341, baseType: !3, size: 32, offset: 320)
!4429 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !4421, file: !376, line: 344, baseType: !3, size: 32, offset: 352)
!4430 = !DIDerivedType(tag: DW_TAG_member, name: "first_special", scope: !4421, file: !376, line: 347, baseType: !5, size: 1, offset: 384, flags: DIFlagBitField, extraData: i64 384)
!4431 = !DILocation(line: 1741, column: 17, scope: !4411)
!4432 = !DILocalVariable(name: "ivts", scope: !4411, file: !1, line: 1742, type: !1872)
!4433 = !DILocation(line: 1742, column: 23, scope: !4411)
!4434 = !DILocalVariable(name: "ok", scope: !4411, file: !1, line: 1743, type: !1005)
!4435 = !DILocation(line: 1743, column: 8, scope: !4411)
!4436 = !DILocation(line: 1747, column: 9, scope: !4411)
!4437 = !DILocation(line: 1747, column: 7, scope: !4411)
!4438 = !DILocation(line: 1748, column: 8, scope: !4439)
!4439 = distinct !DILexicalBlock(scope: !4411, file: !1, line: 1748, column: 7)
!4440 = !DILocation(line: 1748, column: 7, scope: !4411)
!4441 = !DILocation(line: 1749, column: 5, scope: !4439)
!4442 = !DILocation(line: 1751, column: 10, scope: !4411)
!4443 = !DILocation(line: 1751, column: 8, scope: !4411)
!4444 = !DILocation(line: 1752, column: 8, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4411, file: !1, line: 1752, column: 7)
!4446 = !DILocation(line: 1752, column: 7, scope: !4411)
!4447 = !DILocation(line: 1753, column: 5, scope: !4445)
!4448 = !DILocation(line: 1755, column: 15, scope: !4449)
!4449 = distinct !DILexicalBlock(scope: !4411, file: !1, line: 1755, column: 7)
!4450 = !DILocation(line: 1755, column: 21, scope: !4449)
!4451 = !DILocation(line: 1755, column: 8, scope: !4449)
!4452 = !DILocation(line: 1755, column: 7, scope: !4411)
!4453 = !DILocation(line: 1756, column: 5, scope: !4449)
!4454 = !DILocation(line: 1758, column: 27, scope: !4411)
!4455 = !DILocation(line: 1758, column: 33, scope: !4411)
!4456 = !DILocation(line: 1758, column: 8, scope: !4411)
!4457 = !DILocation(line: 1758, column: 6, scope: !4411)
!4458 = !DILocation(line: 1768, column: 9, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4411, file: !1, line: 1768, column: 7)
!4460 = !DILocation(line: 1768, column: 7, scope: !4411)
!4461 = !DILocation(line: 1769, column: 5, scope: !4459)
!4462 = !DILocation(line: 1771, column: 10, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4411, file: !1, line: 1771, column: 7)
!4464 = !DILocation(line: 1771, column: 18, scope: !4463)
!4465 = !DILocation(line: 1771, column: 15, scope: !4463)
!4466 = !DILocation(line: 1772, column: 7, scope: !4463)
!4467 = !DILocation(line: 1772, column: 13, scope: !4463)
!4468 = !DILocation(line: 1772, column: 24, scope: !4463)
!4469 = !DILocation(line: 1772, column: 18, scope: !4463)
!4470 = !DILocation(line: 1771, column: 7, scope: !4411)
!4471 = !DILocation(line: 1773, column: 5, scope: !4463)
!4472 = !DILocation(line: 1776, column: 10, scope: !4411)
!4473 = !DILocation(line: 1776, column: 8, scope: !4411)
!4474 = !DILocation(line: 1777, column: 16, scope: !4411)
!4475 = !DILocation(line: 1777, column: 3, scope: !4411)
!4476 = !DILocation(line: 1777, column: 9, scope: !4411)
!4477 = !DILocation(line: 1777, column: 14, scope: !4411)
!4478 = !DILocation(line: 1778, column: 3, scope: !4411)
!4479 = !DILocation(line: 1778, column: 9, scope: !4411)
!4480 = !DILocation(line: 1778, column: 18, scope: !4411)
!4481 = !DILocation(line: 1779, column: 19, scope: !4411)
!4482 = !DILocation(line: 1779, column: 3, scope: !4411)
!4483 = !DILocation(line: 1779, column: 9, scope: !4411)
!4484 = !DILocation(line: 1779, column: 14, scope: !4411)
!4485 = !DILocation(line: 1780, column: 3, scope: !4411)
!4486 = !DILocation(line: 1780, column: 9, scope: !4411)
!4487 = !DILocation(line: 1780, column: 14, scope: !4411)
!4488 = !DILocation(line: 1781, column: 3, scope: !4411)
!4489 = !DILocation(line: 1781, column: 9, scope: !4411)
!4490 = !DILocation(line: 1781, column: 15, scope: !4411)
!4491 = !DILocation(line: 1782, column: 3, scope: !4411)
!4492 = !DILocation(line: 1782, column: 9, scope: !4411)
!4493 = !DILocation(line: 1782, column: 16, scope: !4411)
!4494 = !DILocation(line: 1784, column: 10, scope: !4411)
!4495 = !DILocation(line: 1784, column: 3, scope: !4411)
!4496 = !DILocation(line: 1785, column: 1, scope: !4411)
!4497 = distinct !DISubprogram(name: "analyze_insn_to_expand_var", scope: !1, file: !1, line: 1610, type: !4498, scopeLine: 1611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4498 = !DISubroutineType(types: !4499)
!4499 = !{!1886, !738, !775}
!4500 = !DILocalVariable(name: "loop", arg: 1, scope: !4497, file: !1, line: 1610, type: !738)
!4501 = !DILocation(line: 1610, column: 42, scope: !4497)
!4502 = !DILocalVariable(name: "insn", arg: 2, scope: !4497, file: !1, line: 1610, type: !775)
!4503 = !DILocation(line: 1610, column: 52, scope: !4497)
!4504 = !DILocalVariable(name: "set", scope: !4497, file: !1, line: 1612, type: !775)
!4505 = !DILocation(line: 1612, column: 7, scope: !4497)
!4506 = !DILocalVariable(name: "dest", scope: !4497, file: !1, line: 1612, type: !775)
!4507 = !DILocation(line: 1612, column: 12, scope: !4497)
!4508 = !DILocalVariable(name: "src", scope: !4497, file: !1, line: 1612, type: !775)
!4509 = !DILocation(line: 1612, column: 18, scope: !4497)
!4510 = !DILocalVariable(name: "op1", scope: !4497, file: !1, line: 1612, type: !775)
!4511 = !DILocation(line: 1612, column: 23, scope: !4497)
!4512 = !DILocalVariable(name: "op2", scope: !4497, file: !1, line: 1612, type: !775)
!4513 = !DILocation(line: 1612, column: 28, scope: !4497)
!4514 = !DILocalVariable(name: "something", scope: !4497, file: !1, line: 1612, type: !775)
!4515 = !DILocation(line: 1612, column: 33, scope: !4497)
!4516 = !DILocalVariable(name: "ves", scope: !4497, file: !1, line: 1613, type: !1886)
!4517 = !DILocation(line: 1613, column: 25, scope: !4497)
!4518 = !DILocalVariable(name: "mode1", scope: !4497, file: !1, line: 1614, type: !3)
!4519 = !DILocation(line: 1614, column: 21, scope: !4497)
!4520 = !DILocalVariable(name: "mode2", scope: !4497, file: !1, line: 1614, type: !3)
!4521 = !DILocation(line: 1614, column: 28, scope: !4497)
!4522 = !DILocalVariable(name: "accum_pos", scope: !4497, file: !1, line: 1615, type: !5)
!4523 = !DILocation(line: 1615, column: 12, scope: !4497)
!4524 = !DILocalVariable(name: "debug_uses", scope: !4497, file: !1, line: 1616, type: !734)
!4525 = !DILocation(line: 1616, column: 7, scope: !4497)
!4526 = !DILocation(line: 1618, column: 9, scope: !4497)
!4527 = !DILocation(line: 1618, column: 7, scope: !4497)
!4528 = !DILocation(line: 1619, column: 8, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1619, column: 7)
!4530 = !DILocation(line: 1619, column: 7, scope: !4497)
!4531 = !DILocation(line: 1620, column: 5, scope: !4529)
!4532 = !DILocation(line: 1622, column: 10, scope: !4497)
!4533 = !DILocation(line: 1622, column: 8, scope: !4497)
!4534 = !DILocation(line: 1623, column: 9, scope: !4497)
!4535 = !DILocation(line: 1623, column: 7, scope: !4497)
!4536 = !DILocation(line: 1625, column: 7, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1625, column: 7)
!4538 = !DILocation(line: 1625, column: 22, scope: !4537)
!4539 = !DILocation(line: 1626, column: 7, scope: !4537)
!4540 = !DILocation(line: 1626, column: 10, scope: !4537)
!4541 = !DILocation(line: 1626, column: 25, scope: !4537)
!4542 = !DILocation(line: 1627, column: 7, scope: !4537)
!4543 = !DILocation(line: 1627, column: 10, scope: !4537)
!4544 = !DILocation(line: 1627, column: 25, scope: !4537)
!4545 = !DILocation(line: 1625, column: 7, scope: !4497)
!4546 = !DILocation(line: 1628, column: 5, scope: !4537)
!4547 = !DILocation(line: 1639, column: 23, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1639, column: 7)
!4549 = !DILocation(line: 1639, column: 39, scope: !4548)
!4550 = !DILocation(line: 1639, column: 8, scope: !4548)
!4551 = !DILocation(line: 1639, column: 7, scope: !4497)
!4552 = !DILocation(line: 1640, column: 5, scope: !4548)
!4553 = !DILocation(line: 1642, column: 9, scope: !4497)
!4554 = !DILocation(line: 1642, column: 7, scope: !4497)
!4555 = !DILocation(line: 1643, column: 9, scope: !4497)
!4556 = !DILocation(line: 1643, column: 7, scope: !4497)
!4557 = !DILocation(line: 1645, column: 8, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1645, column: 7)
!4559 = !DILocation(line: 1646, column: 7, scope: !4558)
!4560 = !DILocation(line: 1646, column: 12, scope: !4558)
!4561 = !DILocation(line: 1646, column: 28, scope: !4558)
!4562 = !DILocation(line: 1647, column: 12, scope: !4558)
!4563 = !DILocation(line: 1647, column: 15, scope: !4558)
!4564 = !DILocation(line: 1645, column: 7, scope: !4497)
!4565 = !DILocation(line: 1648, column: 5, scope: !4558)
!4566 = !DILocation(line: 1650, column: 20, scope: !4567)
!4567 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1650, column: 7)
!4568 = !DILocation(line: 1650, column: 26, scope: !4567)
!4569 = !DILocation(line: 1650, column: 7, scope: !4567)
!4570 = !DILocation(line: 1650, column: 7, scope: !4497)
!4571 = !DILocation(line: 1651, column: 15, scope: !4567)
!4572 = !DILocation(line: 1651, column: 5, scope: !4567)
!4573 = !DILocation(line: 1652, column: 25, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4567, file: !1, line: 1652, column: 12)
!4575 = !DILocation(line: 1652, column: 31, scope: !4574)
!4576 = !DILocation(line: 1652, column: 12, scope: !4574)
!4577 = !DILocation(line: 1652, column: 12, scope: !4567)
!4578 = !DILocation(line: 1653, column: 15, scope: !4574)
!4579 = !DILocation(line: 1653, column: 5, scope: !4574)
!4580 = !DILocation(line: 1655, column: 5, scope: !4574)
!4581 = !DILocation(line: 1661, column: 7, scope: !4582)
!4582 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1661, column: 7)
!4583 = !DILocation(line: 1661, column: 17, scope: !4582)
!4584 = !DILocation(line: 1662, column: 7, scope: !4582)
!4585 = !DILocation(line: 1662, column: 10, scope: !4582)
!4586 = !DILocation(line: 1662, column: 25, scope: !4582)
!4587 = !DILocation(line: 1661, column: 7, scope: !4497)
!4588 = !DILocation(line: 1663, column: 4, scope: !4582)
!4589 = !DILocation(line: 1665, column: 16, scope: !4497)
!4590 = !DILocation(line: 1665, column: 26, scope: !4497)
!4591 = !DILocation(line: 1665, column: 15, scope: !4497)
!4592 = !DILocation(line: 1665, column: 34, scope: !4497)
!4593 = !DILocation(line: 1665, column: 40, scope: !4497)
!4594 = !DILocation(line: 1665, column: 13, scope: !4497)
!4595 = !DILocation(line: 1667, column: 25, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1667, column: 7)
!4597 = !DILocation(line: 1667, column: 31, scope: !4596)
!4598 = !DILocation(line: 1667, column: 7, scope: !4596)
!4599 = !DILocation(line: 1667, column: 7, scope: !4497)
!4600 = !DILocation(line: 1668, column: 5, scope: !4596)
!4601 = !DILocation(line: 1670, column: 42, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1670, column: 7)
!4603 = !DILocation(line: 1670, column: 48, scope: !4602)
!4604 = !DILocation(line: 1670, column: 8, scope: !4602)
!4605 = !DILocation(line: 1670, column: 7, scope: !4497)
!4606 = !DILocation(line: 1671, column: 5, scope: !4602)
!4607 = !DILocation(line: 1673, column: 11, scope: !4497)
!4608 = !DILocation(line: 1673, column: 9, scope: !4497)
!4609 = !DILocation(line: 1674, column: 11, scope: !4497)
!4610 = !DILocation(line: 1674, column: 9, scope: !4497)
!4611 = !DILocation(line: 1675, column: 8, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1675, column: 7)
!4613 = !DILocation(line: 1676, column: 8, scope: !4612)
!4614 = !DILocation(line: 1676, column: 11, scope: !4612)
!4615 = !DILocation(line: 1677, column: 7, scope: !4612)
!4616 = !DILocation(line: 1677, column: 11, scope: !4612)
!4617 = !DILocation(line: 1675, column: 7, scope: !4497)
!4618 = !DILocation(line: 1678, column: 5, scope: !4612)
!4619 = !DILocation(line: 1680, column: 7, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1680, column: 7)
!4621 = !DILocation(line: 1680, column: 7, scope: !4497)
!4622 = !DILocation(line: 1682, column: 14, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4620, file: !1, line: 1681, column: 3)
!4624 = !DILocation(line: 1682, column: 5, scope: !4623)
!4625 = !DILocation(line: 1684, column: 16, scope: !4623)
!4626 = !DILocation(line: 1684, column: 27, scope: !4623)
!4627 = !DILocation(line: 1684, column: 5, scope: !4623)
!4628 = !DILocation(line: 1685, column: 14, scope: !4623)
!4629 = !DILocation(line: 1685, column: 5, scope: !4623)
!4630 = !DILocation(line: 1686, column: 3, scope: !4623)
!4631 = !DILocation(line: 1688, column: 7, scope: !4632)
!4632 = distinct !DILexicalBlock(scope: !4497, file: !1, line: 1688, column: 7)
!4633 = !DILocation(line: 1688, column: 7, scope: !4497)
!4634 = !DILocation(line: 1697, column: 31, scope: !4632)
!4635 = !DILocation(line: 1697, column: 37, scope: !4632)
!4636 = !DILocation(line: 1697, column: 43, scope: !4632)
!4637 = !DILocation(line: 1697, column: 5, scope: !4632)
!4638 = !DILocation(line: 1700, column: 9, scope: !4497)
!4639 = !DILocation(line: 1700, column: 7, scope: !4497)
!4640 = !DILocation(line: 1701, column: 15, scope: !4497)
!4641 = !DILocation(line: 1701, column: 3, scope: !4497)
!4642 = !DILocation(line: 1701, column: 8, scope: !4497)
!4643 = !DILocation(line: 1701, column: 13, scope: !4497)
!4644 = !DILocation(line: 1702, column: 24, scope: !4497)
!4645 = !DILocation(line: 1702, column: 14, scope: !4497)
!4646 = !DILocation(line: 1702, column: 3, scope: !4497)
!4647 = !DILocation(line: 1702, column: 8, scope: !4497)
!4648 = !DILocation(line: 1702, column: 12, scope: !4497)
!4649 = !DILocation(line: 1703, column: 25, scope: !4497)
!4650 = !DILocation(line: 1703, column: 3, scope: !4497)
!4651 = !DILocation(line: 1703, column: 8, scope: !4497)
!4652 = !DILocation(line: 1703, column: 23, scope: !4497)
!4653 = !DILocation(line: 1704, column: 3, scope: !4497)
!4654 = !DILocation(line: 1704, column: 8, scope: !4497)
!4655 = !DILocation(line: 1704, column: 13, scope: !4497)
!4656 = !DILocation(line: 1705, column: 13, scope: !4497)
!4657 = !DILocation(line: 1705, column: 3, scope: !4497)
!4658 = !DILocation(line: 1705, column: 8, scope: !4497)
!4659 = !DILocation(line: 1705, column: 11, scope: !4497)
!4660 = !DILocation(line: 1706, column: 3, scope: !4497)
!4661 = !DILocation(line: 1706, column: 8, scope: !4497)
!4662 = !DILocation(line: 1706, column: 24, scope: !4497)
!4663 = !DILocation(line: 1707, column: 3, scope: !4497)
!4664 = !DILocation(line: 1707, column: 8, scope: !4497)
!4665 = !DILocation(line: 1707, column: 24, scope: !4497)
!4666 = !DILocation(line: 1708, column: 20, scope: !4497)
!4667 = !DILocation(line: 1708, column: 3, scope: !4497)
!4668 = !DILocation(line: 1708, column: 8, scope: !4497)
!4669 = !DILocation(line: 1708, column: 18, scope: !4497)
!4670 = !DILocation(line: 1709, column: 10, scope: !4497)
!4671 = !DILocation(line: 1709, column: 3, scope: !4497)
!4672 = !DILocation(line: 1710, column: 1, scope: !4497)
!4673 = distinct !DISubprogram(name: "referenced_in_one_insn_in_loop_p", scope: !1, file: !1, line: 1533, type: !4674, scopeLine: 1535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4674 = !DISubroutineType(types: !4675)
!4675 = !{!1005, !738, !775, !3358}
!4676 = !DILocalVariable(name: "loop", arg: 1, scope: !4673, file: !1, line: 1533, type: !738)
!4677 = !DILocation(line: 1533, column: 48, scope: !4673)
!4678 = !DILocalVariable(name: "reg", arg: 2, scope: !4673, file: !1, line: 1533, type: !775)
!4679 = !DILocation(line: 1533, column: 58, scope: !4673)
!4680 = !DILocalVariable(name: "debug_uses", arg: 3, scope: !4673, file: !1, line: 1534, type: !3358)
!4681 = !DILocation(line: 1534, column: 12, scope: !4673)
!4682 = !DILocalVariable(name: "body", scope: !4673, file: !1, line: 1536, type: !2756)
!4683 = !DILocation(line: 1536, column: 16, scope: !4673)
!4684 = !DILocalVariable(name: "bb", scope: !4673, file: !1, line: 1536, type: !1150)
!4685 = !DILocation(line: 1536, column: 22, scope: !4673)
!4686 = !DILocalVariable(name: "i", scope: !4673, file: !1, line: 1537, type: !5)
!4687 = !DILocation(line: 1537, column: 12, scope: !4673)
!4688 = !DILocalVariable(name: "count_ref", scope: !4673, file: !1, line: 1538, type: !734)
!4689 = !DILocation(line: 1538, column: 7, scope: !4673)
!4690 = !DILocalVariable(name: "insn", scope: !4673, file: !1, line: 1539, type: !775)
!4691 = !DILocation(line: 1539, column: 7, scope: !4673)
!4692 = !DILocation(line: 1541, column: 25, scope: !4673)
!4693 = !DILocation(line: 1541, column: 10, scope: !4673)
!4694 = !DILocation(line: 1541, column: 8, scope: !4673)
!4695 = !DILocation(line: 1542, column: 10, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4673, file: !1, line: 1542, column: 3)
!4697 = !DILocation(line: 1542, column: 8, scope: !4696)
!4698 = !DILocation(line: 1542, column: 15, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !4696, file: !1, line: 1542, column: 3)
!4700 = !DILocation(line: 1542, column: 19, scope: !4699)
!4701 = !DILocation(line: 1542, column: 25, scope: !4699)
!4702 = !DILocation(line: 1542, column: 17, scope: !4699)
!4703 = !DILocation(line: 1542, column: 3, scope: !4696)
!4704 = !DILocation(line: 1544, column: 12, scope: !4705)
!4705 = distinct !DILexicalBlock(scope: !4699, file: !1, line: 1543, column: 5)
!4706 = !DILocation(line: 1544, column: 17, scope: !4705)
!4707 = !DILocation(line: 1544, column: 10, scope: !4705)
!4708 = !DILocation(line: 1546, column: 7, scope: !4709)
!4709 = distinct !DILexicalBlock(scope: !4705, file: !1, line: 1546, column: 7)
!4710 = !DILocation(line: 1546, column: 7, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4709, file: !1, line: 1546, column: 7)
!4712 = !DILocation(line: 0, scope: !4711)
!4713 = !DILocation(line: 1547, column: 25, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4711, file: !1, line: 1547, column: 6)
!4715 = !DILocation(line: 1547, column: 30, scope: !4714)
!4716 = !DILocation(line: 1547, column: 7, scope: !4714)
!4717 = !DILocation(line: 1547, column: 6, scope: !4711)
!4718 = !DILocation(line: 1548, column: 4, scope: !4714)
!4719 = !DILocation(line: 1549, column: 11, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4714, file: !1, line: 1549, column: 11)
!4721 = !DILocation(line: 1549, column: 11, scope: !4714)
!4722 = !DILocation(line: 1550, column: 7, scope: !4720)
!4723 = !DILocation(line: 1550, column: 4, scope: !4720)
!4724 = !DILocation(line: 1551, column: 11, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4720, file: !1, line: 1551, column: 11)
!4726 = !DILocation(line: 1551, column: 23, scope: !4725)
!4727 = !DILocation(line: 1551, column: 11, scope: !4720)
!4728 = !DILocation(line: 1552, column: 4, scope: !4725)
!4729 = !DILocation(line: 1547, column: 34, scope: !4714)
!4730 = distinct !{!4730, !4708, !4731}
!4731 = !DILocation(line: 1552, column: 4, scope: !4709)
!4732 = !DILocation(line: 1553, column: 5, scope: !4705)
!4733 = !DILocation(line: 1542, column: 37, scope: !4699)
!4734 = !DILocation(line: 1542, column: 3, scope: !4699)
!4735 = distinct !{!4735, !4703, !4736}
!4736 = !DILocation(line: 1553, column: 5, scope: !4696)
!4737 = !DILocation(line: 1554, column: 9, scope: !4673)
!4738 = !DILocation(line: 1554, column: 3, scope: !4673)
!4739 = !DILocation(line: 1555, column: 11, scope: !4673)
!4740 = !DILocation(line: 1555, column: 22, scope: !4673)
!4741 = !DILocation(line: 1555, column: 10, scope: !4673)
!4742 = !DILocation(line: 1555, column: 3, scope: !4673)
!4743 = distinct !DISubprogram(name: "reset_debug_uses_in_loop", scope: !1, file: !1, line: 1561, type: !4744, scopeLine: 1562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4744 = !DISubroutineType(types: !4745)
!4745 = !{null, !738, !775, !734}
!4746 = !DILocalVariable(name: "loop", arg: 1, scope: !4743, file: !1, line: 1561, type: !738)
!4747 = !DILocation(line: 1561, column: 40, scope: !4743)
!4748 = !DILocalVariable(name: "reg", arg: 2, scope: !4743, file: !1, line: 1561, type: !775)
!4749 = !DILocation(line: 1561, column: 50, scope: !4743)
!4750 = !DILocalVariable(name: "debug_uses", arg: 3, scope: !4743, file: !1, line: 1561, type: !734)
!4751 = !DILocation(line: 1561, column: 59, scope: !4743)
!4752 = !DILocalVariable(name: "body", scope: !4743, file: !1, line: 1563, type: !2756)
!4753 = !DILocation(line: 1563, column: 16, scope: !4743)
!4754 = !DILocalVariable(name: "bb", scope: !4743, file: !1, line: 1563, type: !1150)
!4755 = !DILocation(line: 1563, column: 22, scope: !4743)
!4756 = !DILocalVariable(name: "i", scope: !4743, file: !1, line: 1564, type: !5)
!4757 = !DILocation(line: 1564, column: 12, scope: !4743)
!4758 = !DILocalVariable(name: "insn", scope: !4743, file: !1, line: 1565, type: !775)
!4759 = !DILocation(line: 1565, column: 7, scope: !4743)
!4760 = !DILocation(line: 1567, column: 25, scope: !4743)
!4761 = !DILocation(line: 1567, column: 10, scope: !4743)
!4762 = !DILocation(line: 1567, column: 8, scope: !4743)
!4763 = !DILocation(line: 1568, column: 10, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4743, file: !1, line: 1568, column: 3)
!4765 = !DILocation(line: 1568, column: 8, scope: !4764)
!4766 = !DILocation(line: 1568, column: 15, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4764, file: !1, line: 1568, column: 3)
!4768 = !DILocation(line: 1568, column: 26, scope: !4767)
!4769 = !DILocation(line: 1568, column: 29, scope: !4767)
!4770 = !DILocation(line: 1568, column: 33, scope: !4767)
!4771 = !DILocation(line: 1568, column: 39, scope: !4767)
!4772 = !DILocation(line: 1568, column: 31, scope: !4767)
!4773 = !DILocation(line: 0, scope: !4767)
!4774 = !DILocation(line: 1568, column: 3, scope: !4764)
!4775 = !DILocation(line: 1570, column: 12, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4767, file: !1, line: 1569, column: 5)
!4777 = !DILocation(line: 1570, column: 17, scope: !4776)
!4778 = !DILocation(line: 1570, column: 10, scope: !4776)
!4779 = !DILocation(line: 1572, column: 7, scope: !4780)
!4780 = distinct !DILexicalBlock(scope: !4776, file: !1, line: 1572, column: 7)
!4781 = !DILocation(line: 1572, column: 7, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4780, file: !1, line: 1572, column: 7)
!4783 = !DILocation(line: 0, scope: !4782)
!4784 = !DILocation(line: 1573, column: 7, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4782, file: !1, line: 1573, column: 6)
!4786 = !DILocation(line: 1573, column: 27, scope: !4785)
!4787 = !DILocation(line: 1573, column: 49, scope: !4785)
!4788 = !DILocation(line: 1573, column: 54, scope: !4785)
!4789 = !DILocation(line: 1573, column: 31, scope: !4785)
!4790 = !DILocation(line: 1573, column: 6, scope: !4782)
!4791 = !DILocation(line: 1574, column: 4, scope: !4785)
!4792 = !DILocation(line: 1577, column: 23, scope: !4793)
!4793 = distinct !DILexicalBlock(scope: !4785, file: !1, line: 1576, column: 4)
!4794 = !DILocation(line: 1577, column: 30, scope: !4793)
!4795 = !DILocation(line: 1578, column: 9, scope: !4793)
!4796 = !DILocation(line: 1577, column: 6, scope: !4793)
!4797 = !DILocation(line: 1579, column: 11, scope: !4798)
!4798 = distinct !DILexicalBlock(scope: !4793, file: !1, line: 1579, column: 10)
!4799 = !DILocation(line: 1579, column: 10, scope: !4793)
!4800 = !DILocation(line: 1580, column: 8, scope: !4798)
!4801 = !DILocation(line: 1573, column: 58, scope: !4785)
!4802 = distinct !{!4802, !4779, !4803}
!4803 = !DILocation(line: 1581, column: 4, scope: !4780)
!4804 = !DILocation(line: 1582, column: 5, scope: !4776)
!4805 = !DILocation(line: 1568, column: 51, scope: !4767)
!4806 = !DILocation(line: 1568, column: 3, scope: !4767)
!4807 = distinct !{!4807, !4774, !4808}
!4808 = !DILocation(line: 1582, column: 5, scope: !4764)
!4809 = !DILocation(line: 1583, column: 9, scope: !4743)
!4810 = !DILocation(line: 1583, column: 3, scope: !4743)
!4811 = !DILocation(line: 1584, column: 1, scope: !4743)
!4812 = distinct !DISubprogram(name: "VEC_rtx_heap_alloc", scope: !517, file: !517, line: 201, type: !4813, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4813 = !DISubroutineType(types: !4814)
!4814 = !{!1892, !734}
!4815 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4812, file: !517, line: 201, type: !734)
!4816 = !DILocation(line: 201, column: 1, scope: !4812)
!4817 = distinct !DISubprogram(name: "allocate_basic_variable", scope: !1, file: !1, line: 1938, type: !4818, scopeLine: 1939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4818 = !DISubroutineType(types: !4819)
!4819 = !{null, !1872}
!4820 = !DILocalVariable(name: "ivts", arg: 1, scope: !4817, file: !1, line: 1938, type: !1872)
!4821 = !DILocation(line: 1938, column: 46, scope: !4817)
!4822 = !DILocalVariable(name: "expr", scope: !4817, file: !1, line: 1940, type: !775)
!4823 = !DILocation(line: 1940, column: 7, scope: !4817)
!4824 = !DILocation(line: 1940, column: 30, scope: !4817)
!4825 = !DILocation(line: 1940, column: 55, scope: !4817)
!4826 = !DILocation(line: 1940, column: 15, scope: !4817)
!4827 = !DILocation(line: 1940, column: 14, scope: !4817)
!4828 = !DILocation(line: 1942, column: 33, scope: !4817)
!4829 = !DILocation(line: 1942, column: 20, scope: !4817)
!4830 = !DILocation(line: 1942, column: 3, scope: !4817)
!4831 = !DILocation(line: 1942, column: 9, scope: !4817)
!4832 = !DILocation(line: 1942, column: 18, scope: !4817)
!4833 = !DILocation(line: 1943, column: 1, scope: !4817)
!4834 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !133, file: !133, line: 281, type: !4835, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4835 = !DISubroutineType(types: !4836)
!4836 = !{!1150, !4837, !5}
!4837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4838, size: 64)
!4838 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1158)
!4839 = !DILocalVariable(name: "vec_", arg: 1, scope: !4834, file: !133, line: 281, type: !4837)
!4840 = !DILocation(line: 281, column: 1, scope: !4834)
!4841 = !DILocalVariable(name: "ix_", arg: 2, scope: !4834, file: !133, line: 281, type: !5)
!4842 = !DILocation(line: 0, scope: !4834)
!4843 = distinct !DISubprogram(name: "determine_split_iv_delta", scope: !1, file: !1, line: 1901, type: !4844, scopeLine: 1902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4844 = !DISubroutineType(types: !4845)
!4845 = !{!5, !5, !5, !1005}
!4846 = !DILocalVariable(name: "n_copy", arg: 1, scope: !4843, file: !1, line: 1901, type: !5)
!4847 = !DILocation(line: 1901, column: 36, scope: !4843)
!4848 = !DILocalVariable(name: "n_copies", arg: 2, scope: !4843, file: !1, line: 1901, type: !5)
!4849 = !DILocation(line: 1901, column: 53, scope: !4843)
!4850 = !DILocalVariable(name: "unrolling", arg: 3, scope: !4843, file: !1, line: 1901, type: !1005)
!4851 = !DILocation(line: 1901, column: 68, scope: !4843)
!4852 = !DILocation(line: 1903, column: 7, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4843, file: !1, line: 1903, column: 7)
!4854 = !DILocation(line: 1903, column: 7, scope: !4843)
!4855 = !DILocation(line: 1907, column: 14, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4853, file: !1, line: 1904, column: 5)
!4857 = !DILocation(line: 1907, column: 7, scope: !4856)
!4858 = !DILocation(line: 1913, column: 11, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4860, file: !1, line: 1913, column: 11)
!4860 = distinct !DILexicalBlock(scope: !4853, file: !1, line: 1910, column: 5)
!4861 = !DILocation(line: 1913, column: 11, scope: !4860)
!4862 = !DILocation(line: 1914, column: 9, scope: !4859)
!4863 = !DILocation(line: 1914, column: 16, scope: !4859)
!4864 = !DILocation(line: 1914, column: 2, scope: !4859)
!4865 = !DILocation(line: 1916, column: 9, scope: !4859)
!4866 = !DILocation(line: 1916, column: 2, scope: !4859)
!4867 = !DILocation(line: 1918, column: 1, scope: !4843)
!4868 = distinct !DISubprogram(name: "insert_base_initialization", scope: !1, file: !1, line: 1949, type: !4869, scopeLine: 1950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4869 = !DISubroutineType(types: !4870)
!4870 = !{null, !1872, !775}
!4871 = !DILocalVariable(name: "ivts", arg: 1, scope: !4868, file: !1, line: 1949, type: !1872)
!4872 = !DILocation(line: 1949, column: 49, scope: !4868)
!4873 = !DILocalVariable(name: "insn", arg: 2, scope: !4868, file: !1, line: 1949, type: !775)
!4874 = !DILocation(line: 1949, column: 59, scope: !4868)
!4875 = !DILocalVariable(name: "expr", scope: !4868, file: !1, line: 1951, type: !775)
!4876 = !DILocation(line: 1951, column: 7, scope: !4868)
!4877 = !DILocation(line: 1951, column: 40, scope: !4868)
!4878 = !DILocation(line: 1951, column: 59, scope: !4868)
!4879 = !DILocation(line: 1951, column: 25, scope: !4868)
!4880 = !DILocation(line: 1951, column: 24, scope: !4868)
!4881 = !DILocation(line: 1951, column: 14, scope: !4868)
!4882 = !DILocalVariable(name: "seq", scope: !4868, file: !1, line: 1952, type: !775)
!4883 = !DILocation(line: 1952, column: 7, scope: !4868)
!4884 = !DILocation(line: 1954, column: 3, scope: !4868)
!4885 = !DILocation(line: 1955, column: 25, scope: !4868)
!4886 = !DILocation(line: 1955, column: 31, scope: !4868)
!4887 = !DILocation(line: 1955, column: 37, scope: !4868)
!4888 = !DILocation(line: 1955, column: 10, scope: !4868)
!4889 = !DILocation(line: 1955, column: 8, scope: !4868)
!4890 = !DILocation(line: 1956, column: 7, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4868, file: !1, line: 1956, column: 7)
!4892 = !DILocation(line: 1956, column: 15, scope: !4891)
!4893 = !DILocation(line: 1956, column: 21, scope: !4891)
!4894 = !DILocation(line: 1956, column: 12, scope: !4891)
!4895 = !DILocation(line: 1956, column: 7, scope: !4868)
!4896 = !DILocation(line: 1957, column: 21, scope: !4891)
!4897 = !DILocation(line: 1957, column: 27, scope: !4891)
!4898 = !DILocation(line: 1957, column: 37, scope: !4891)
!4899 = !DILocation(line: 1957, column: 5, scope: !4891)
!4900 = !DILocation(line: 1958, column: 9, scope: !4868)
!4901 = !DILocation(line: 1958, column: 7, scope: !4868)
!4902 = !DILocation(line: 1959, column: 3, scope: !4868)
!4903 = !DILocation(line: 1961, column: 21, scope: !4868)
!4904 = !DILocation(line: 1961, column: 26, scope: !4868)
!4905 = !DILocation(line: 1961, column: 3, scope: !4868)
!4906 = !DILocation(line: 1962, column: 1, scope: !4868)
!4907 = distinct !DISubprogram(name: "split_iv", scope: !1, file: !1, line: 1968, type: !4908, scopeLine: 1969, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!4908 = !DISubroutineType(types: !4909)
!4909 = !{null, !1872, !775, !5}
!4910 = !DILocalVariable(name: "ivts", arg: 1, scope: !4907, file: !1, line: 1968, type: !1872)
!4911 = !DILocation(line: 1968, column: 31, scope: !4907)
!4912 = !DILocalVariable(name: "insn", arg: 2, scope: !4907, file: !1, line: 1968, type: !775)
!4913 = !DILocation(line: 1968, column: 41, scope: !4907)
!4914 = !DILocalVariable(name: "delta", arg: 3, scope: !4907, file: !1, line: 1968, type: !5)
!4915 = !DILocation(line: 1968, column: 56, scope: !4907)
!4916 = !DILocalVariable(name: "expr", scope: !4907, file: !1, line: 1970, type: !775)
!4917 = !DILocation(line: 1970, column: 7, scope: !4907)
!4918 = !DILocalVariable(name: "loc", scope: !4907, file: !1, line: 1970, type: !4919)
!4919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !775, size: 64)
!4920 = !DILocation(line: 1970, column: 14, scope: !4907)
!4921 = !DILocalVariable(name: "seq", scope: !4907, file: !1, line: 1970, type: !775)
!4922 = !DILocation(line: 1970, column: 19, scope: !4907)
!4923 = !DILocalVariable(name: "incr", scope: !4907, file: !1, line: 1970, type: !775)
!4924 = !DILocation(line: 1970, column: 24, scope: !4907)
!4925 = !DILocalVariable(name: "var", scope: !4907, file: !1, line: 1970, type: !775)
!4926 = !DILocation(line: 1970, column: 30, scope: !4907)
!4927 = !DILocalVariable(name: "mode", scope: !4907, file: !1, line: 1971, type: !3)
!4928 = !DILocation(line: 1971, column: 21, scope: !4907)
!4929 = !DILocation(line: 1971, column: 28, scope: !4907)
!4930 = !DILocalVariable(name: "src", scope: !4907, file: !1, line: 1972, type: !775)
!4931 = !DILocation(line: 1972, column: 7, scope: !4907)
!4932 = !DILocalVariable(name: "dest", scope: !4907, file: !1, line: 1972, type: !775)
!4933 = !DILocation(line: 1972, column: 12, scope: !4907)
!4934 = !DILocalVariable(name: "set", scope: !4907, file: !1, line: 1972, type: !775)
!4935 = !DILocation(line: 1972, column: 18, scope: !4907)
!4936 = !DILocation(line: 1975, column: 8, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4907, file: !1, line: 1975, column: 7)
!4938 = !DILocation(line: 1975, column: 7, scope: !4907)
!4939 = !DILocation(line: 1976, column: 12, scope: !4937)
!4940 = !DILocation(line: 1976, column: 18, scope: !4937)
!4941 = !DILocation(line: 1976, column: 10, scope: !4937)
!4942 = !DILocation(line: 1976, column: 5, scope: !4937)
!4943 = !DILocation(line: 1979, column: 41, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4937, file: !1, line: 1978, column: 5)
!4945 = !DILocation(line: 1980, column: 7, scope: !4944)
!4946 = !DILocation(line: 1980, column: 13, scope: !4944)
!4947 = !DILocation(line: 1980, column: 33, scope: !4944)
!4948 = !DILocation(line: 1980, column: 40, scope: !4944)
!4949 = !DILocation(line: 1980, column: 19, scope: !4944)
!4950 = !DILocation(line: 1979, column: 14, scope: !4944)
!4951 = !DILocation(line: 1979, column: 12, scope: !4944)
!4952 = !DILocation(line: 1981, column: 41, scope: !4944)
!4953 = !DILocation(line: 1982, column: 7, scope: !4944)
!4954 = !DILocation(line: 1982, column: 13, scope: !4944)
!4955 = !DILocation(line: 1982, column: 23, scope: !4944)
!4956 = !DILocation(line: 1981, column: 14, scope: !4944)
!4957 = !DILocation(line: 1981, column: 12, scope: !4944)
!4958 = !DILocation(line: 1986, column: 24, scope: !4907)
!4959 = !DILocation(line: 1986, column: 43, scope: !4907)
!4960 = !DILocation(line: 1986, column: 9, scope: !4907)
!4961 = !DILocation(line: 1986, column: 7, scope: !4907)
!4962 = !DILocation(line: 1989, column: 24, scope: !4963)
!4963 = distinct !DILexicalBlock(scope: !4907, file: !1, line: 1989, column: 7)
!4964 = !DILocation(line: 1989, column: 30, scope: !4963)
!4965 = !DILocation(line: 1989, column: 35, scope: !4963)
!4966 = !DILocation(line: 1989, column: 7, scope: !4963)
!4967 = !DILocation(line: 1989, column: 7, scope: !4907)
!4968 = !DILocation(line: 1990, column: 5, scope: !4963)
!4969 = !DILocation(line: 1993, column: 3, scope: !4907)
!4970 = !DILocation(line: 1994, column: 22, scope: !4907)
!4971 = !DILocation(line: 1994, column: 9, scope: !4907)
!4972 = !DILocation(line: 1994, column: 7, scope: !4907)
!4973 = !DILocation(line: 1995, column: 25, scope: !4907)
!4974 = !DILocation(line: 1995, column: 31, scope: !4907)
!4975 = !DILocation(line: 1995, column: 10, scope: !4907)
!4976 = !DILocation(line: 1995, column: 8, scope: !4907)
!4977 = !DILocation(line: 1996, column: 7, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4907, file: !1, line: 1996, column: 7)
!4979 = !DILocation(line: 1996, column: 15, scope: !4978)
!4980 = !DILocation(line: 1996, column: 12, scope: !4978)
!4981 = !DILocation(line: 1996, column: 7, scope: !4907)
!4982 = !DILocation(line: 1997, column: 21, scope: !4978)
!4983 = !DILocation(line: 1997, column: 26, scope: !4978)
!4984 = !DILocation(line: 1997, column: 5, scope: !4978)
!4985 = !DILocation(line: 1998, column: 9, scope: !4907)
!4986 = !DILocation(line: 1998, column: 7, scope: !4907)
!4987 = !DILocation(line: 1999, column: 3, scope: !4907)
!4988 = !DILocation(line: 2000, column: 21, scope: !4907)
!4989 = !DILocation(line: 2000, column: 26, scope: !4907)
!4990 = !DILocation(line: 2000, column: 3, scope: !4907)
!4991 = !DILocation(line: 2002, column: 24, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4907, file: !1, line: 2002, column: 7)
!4993 = !DILocation(line: 2002, column: 30, scope: !4992)
!4994 = !DILocation(line: 2002, column: 35, scope: !4992)
!4995 = !DILocation(line: 2002, column: 7, scope: !4992)
!4996 = !DILocation(line: 2002, column: 7, scope: !4907)
!4997 = !DILocation(line: 2003, column: 5, scope: !4992)
!4998 = !DILocation(line: 2007, column: 9, scope: !4907)
!4999 = !DILocation(line: 2007, column: 7, scope: !4907)
!5000 = !DILocation(line: 2008, column: 3, scope: !4907)
!5001 = !DILocation(line: 2010, column: 3, scope: !4907)
!5002 = !DILocation(line: 2011, column: 10, scope: !4907)
!5003 = !DILocation(line: 2011, column: 4, scope: !4907)
!5004 = !DILocation(line: 2011, column: 8, scope: !4907)
!5005 = !DILocation(line: 2012, column: 19, scope: !4907)
!5006 = !DILocation(line: 2012, column: 9, scope: !4907)
!5007 = !DILocation(line: 2012, column: 7, scope: !4907)
!5008 = !DILocation(line: 2013, column: 20, scope: !4907)
!5009 = !DILocation(line: 2013, column: 10, scope: !4907)
!5010 = !DILocation(line: 2013, column: 8, scope: !4907)
!5011 = !DILocation(line: 2014, column: 24, scope: !4907)
!5012 = !DILocation(line: 2014, column: 29, scope: !4907)
!5013 = !DILocation(line: 2014, column: 9, scope: !4907)
!5014 = !DILocation(line: 2014, column: 7, scope: !4907)
!5015 = !DILocation(line: 2015, column: 7, scope: !5016)
!5016 = distinct !DILexicalBlock(scope: !4907, file: !1, line: 2015, column: 7)
!5017 = !DILocation(line: 2015, column: 14, scope: !5016)
!5018 = !DILocation(line: 2015, column: 11, scope: !5016)
!5019 = !DILocation(line: 2015, column: 7, scope: !4907)
!5020 = !DILocation(line: 2016, column: 21, scope: !5016)
!5021 = !DILocation(line: 2016, column: 27, scope: !5016)
!5022 = !DILocation(line: 2016, column: 5, scope: !5016)
!5023 = !DILocation(line: 2017, column: 9, scope: !4907)
!5024 = !DILocation(line: 2017, column: 7, scope: !4907)
!5025 = !DILocation(line: 2018, column: 3, scope: !4907)
!5026 = !DILocation(line: 2020, column: 21, scope: !4907)
!5027 = !DILocation(line: 2020, column: 26, scope: !4907)
!5028 = !DILocation(line: 2020, column: 3, scope: !4907)
!5029 = !DILocation(line: 2021, column: 16, scope: !4907)
!5030 = !DILocation(line: 2021, column: 3, scope: !4907)
!5031 = !DILocation(line: 2022, column: 1, scope: !4907)
!5032 = distinct !DISubprogram(name: "expand_var_during_unrolling", scope: !1, file: !1, line: 2050, type: !5033, scopeLine: 2051, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5033 = !DISubroutineType(types: !5034)
!5034 = !{null, !1886, !775}
!5035 = !DILocalVariable(name: "ve", arg: 1, scope: !5032, file: !1, line: 2050, type: !1886)
!5036 = !DILocation(line: 2050, column: 52, scope: !5032)
!5037 = !DILocalVariable(name: "insn", arg: 2, scope: !5032, file: !1, line: 2050, type: !775)
!5038 = !DILocation(line: 2050, column: 60, scope: !5032)
!5039 = !DILocalVariable(name: "new_reg", scope: !5032, file: !1, line: 2052, type: !775)
!5040 = !DILocation(line: 2052, column: 7, scope: !5032)
!5041 = !DILocalVariable(name: "set", scope: !5032, file: !1, line: 2052, type: !775)
!5042 = !DILocation(line: 2052, column: 16, scope: !5032)
!5043 = !DILocalVariable(name: "really_new_expansion", scope: !5032, file: !1, line: 2053, type: !1005)
!5044 = !DILocation(line: 2053, column: 8, scope: !5032)
!5045 = !DILocation(line: 2055, column: 9, scope: !5032)
!5046 = !DILocation(line: 2055, column: 7, scope: !5032)
!5047 = !DILocation(line: 2056, column: 3, scope: !5032)
!5048 = !DILocation(line: 2060, column: 7, scope: !5049)
!5049 = distinct !DILexicalBlock(scope: !5032, file: !1, line: 2060, column: 7)
!5050 = !DILocation(line: 2060, column: 53, scope: !5049)
!5051 = !DILocation(line: 2060, column: 57, scope: !5049)
!5052 = !DILocation(line: 2060, column: 51, scope: !5049)
!5053 = !DILocation(line: 2060, column: 7, scope: !5032)
!5054 = !DILocation(line: 2062, column: 28, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5049, file: !1, line: 2061, column: 5)
!5056 = !DILocation(line: 2063, column: 30, scope: !5055)
!5057 = !DILocation(line: 2063, column: 17, scope: !5055)
!5058 = !DILocation(line: 2063, column: 15, scope: !5055)
!5059 = !DILocation(line: 2064, column: 5, scope: !5055)
!5060 = !DILocation(line: 2066, column: 30, scope: !5049)
!5061 = !DILocation(line: 2066, column: 15, scope: !5049)
!5062 = !DILocation(line: 2066, column: 13, scope: !5049)
!5063 = !DILocation(line: 2068, column: 20, scope: !5032)
!5064 = !DILocation(line: 2068, column: 27, scope: !5032)
!5065 = !DILocation(line: 2068, column: 43, scope: !5032)
!5066 = !DILocation(line: 2068, column: 3, scope: !5032)
!5067 = !DILocation(line: 2069, column: 20, scope: !5032)
!5068 = !DILocation(line: 2069, column: 27, scope: !5032)
!5069 = !DILocation(line: 2069, column: 64, scope: !5032)
!5070 = !DILocation(line: 2069, column: 3, scope: !5032)
!5071 = !DILocation(line: 2071, column: 7, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5032, file: !1, line: 2071, column: 7)
!5073 = !DILocation(line: 2071, column: 7, scope: !5032)
!5074 = !DILocation(line: 2072, column: 9, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5072, file: !1, line: 2072, column: 9)
!5076 = !DILocation(line: 2072, column: 9, scope: !5072)
!5077 = !DILocation(line: 2074, column: 9, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5075, file: !1, line: 2073, column: 7)
!5079 = !DILocation(line: 2075, column: 9, scope: !5078)
!5080 = !DILocation(line: 2075, column: 13, scope: !5078)
!5081 = !DILocation(line: 2075, column: 28, scope: !5078)
!5082 = !DILocation(line: 2076, column: 7, scope: !5078)
!5083 = !DILocation(line: 2077, column: 1, scope: !5032)
!5084 = distinct !DISubprogram(name: "insert_var_expansion_initialization", scope: !1, file: !1, line: 2107, type: !5085, scopeLine: 2109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5085 = !DISubroutineType(types: !5086)
!5086 = !{null, !1886, !1150}
!5087 = !DILocalVariable(name: "ve", arg: 1, scope: !5084, file: !1, line: 2107, type: !1886)
!5088 = !DILocation(line: 2107, column: 60, scope: !5084)
!5089 = !DILocalVariable(name: "place", arg: 2, scope: !5084, file: !1, line: 2108, type: !1150)
!5090 = !DILocation(line: 2108, column: 22, scope: !5084)
!5091 = !DILocalVariable(name: "seq", scope: !5084, file: !1, line: 2110, type: !775)
!5092 = !DILocation(line: 2110, column: 7, scope: !5084)
!5093 = !DILocalVariable(name: "var", scope: !5084, file: !1, line: 2110, type: !775)
!5094 = !DILocation(line: 2110, column: 12, scope: !5084)
!5095 = !DILocalVariable(name: "zero_init", scope: !5084, file: !1, line: 2110, type: !775)
!5096 = !DILocation(line: 2110, column: 17, scope: !5084)
!5097 = !DILocalVariable(name: "insn", scope: !5084, file: !1, line: 2110, type: !775)
!5098 = !DILocation(line: 2110, column: 28, scope: !5084)
!5099 = !DILocalVariable(name: "i", scope: !5084, file: !1, line: 2111, type: !5)
!5100 = !DILocation(line: 2111, column: 12, scope: !5084)
!5101 = !DILocalVariable(name: "mode", scope: !5084, file: !1, line: 2112, type: !3)
!5102 = !DILocation(line: 2112, column: 21, scope: !5084)
!5103 = !DILocation(line: 2112, column: 28, scope: !5084)
!5104 = !DILocalVariable(name: "honor_signed_zero_p", scope: !5084, file: !1, line: 2113, type: !1005)
!5105 = !DILocation(line: 2113, column: 8, scope: !5084)
!5106 = !DILocation(line: 2113, column: 30, scope: !5084)
!5107 = !DILocation(line: 0, scope: !5084)
!5108 = !DILocation(line: 2115, column: 7, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5084, file: !1, line: 2115, column: 7)
!5110 = !DILocation(line: 2115, column: 44, scope: !5109)
!5111 = !DILocation(line: 2115, column: 7, scope: !5084)
!5112 = !DILocation(line: 2116, column: 5, scope: !5109)
!5113 = !DILocation(line: 2118, column: 3, scope: !5084)
!5114 = !DILocation(line: 2119, column: 7, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5084, file: !1, line: 2119, column: 7)
!5116 = !DILocation(line: 2119, column: 11, scope: !5115)
!5117 = !DILocation(line: 2119, column: 14, scope: !5115)
!5118 = !DILocation(line: 2119, column: 22, scope: !5115)
!5119 = !DILocation(line: 2119, column: 25, scope: !5115)
!5120 = !DILocation(line: 2119, column: 29, scope: !5115)
!5121 = !DILocation(line: 2119, column: 32, scope: !5115)
!5122 = !DILocation(line: 2119, column: 7, scope: !5084)
!5123 = !DILocation(line: 2120, column: 12, scope: !5124)
!5124 = distinct !DILexicalBlock(scope: !5115, file: !1, line: 2120, column: 5)
!5125 = !DILocation(line: 2120, column: 10, scope: !5124)
!5126 = !DILocation(line: 2120, column: 17, scope: !5127)
!5127 = distinct !DILexicalBlock(scope: !5124, file: !1, line: 2120, column: 5)
!5128 = !DILocation(line: 2120, column: 5, scope: !5124)
!5129 = !DILocation(line: 2122, column: 6, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5131, file: !1, line: 2122, column: 6)
!5131 = distinct !DILexicalBlock(scope: !5127, file: !1, line: 2121, column: 7)
!5132 = !DILocation(line: 2122, column: 6, scope: !5131)
!5133 = !DILocation(line: 2123, column: 41, scope: !5130)
!5134 = !DILocation(line: 2123, column: 47, scope: !5130)
!5135 = !DILocation(line: 2123, column: 66, scope: !5130)
!5136 = !DILocation(line: 2123, column: 16, scope: !5130)
!5137 = !DILocation(line: 2123, column: 14, scope: !5130)
!5138 = !DILocation(line: 2123, column: 4, scope: !5130)
!5139 = !DILocation(line: 2125, column: 16, scope: !5130)
!5140 = !DILocation(line: 2125, column: 14, scope: !5130)
!5141 = !DILocation(line: 2127, column: 25, scope: !5131)
!5142 = !DILocation(line: 2127, column: 30, scope: !5131)
!5143 = !DILocation(line: 2127, column: 9, scope: !5131)
!5144 = !DILocation(line: 2128, column: 7, scope: !5131)
!5145 = !DILocation(line: 2120, column: 65, scope: !5127)
!5146 = !DILocation(line: 2120, column: 5, scope: !5127)
!5147 = distinct !{!5147, !5128, !5148}
!5148 = !DILocation(line: 2128, column: 7, scope: !5124)
!5149 = !DILocation(line: 2129, column: 12, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5115, file: !1, line: 2129, column: 12)
!5151 = !DILocation(line: 2129, column: 16, scope: !5150)
!5152 = !DILocation(line: 2129, column: 19, scope: !5150)
!5153 = !DILocation(line: 2129, column: 12, scope: !5115)
!5154 = !DILocation(line: 2130, column: 12, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5150, file: !1, line: 2130, column: 5)
!5156 = !DILocation(line: 2130, column: 10, scope: !5155)
!5157 = !DILocation(line: 2130, column: 17, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5155, file: !1, line: 2130, column: 5)
!5159 = !DILocation(line: 2130, column: 5, scope: !5155)
!5160 = !DILocation(line: 2132, column: 22, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !5158, file: !1, line: 2131, column: 7)
!5162 = !DILocation(line: 2132, column: 19, scope: !5161)
!5163 = !DILocation(line: 2133, column: 25, scope: !5161)
!5164 = !DILocation(line: 2133, column: 30, scope: !5161)
!5165 = !DILocation(line: 2133, column: 9, scope: !5161)
!5166 = !DILocation(line: 2134, column: 7, scope: !5161)
!5167 = !DILocation(line: 2130, column: 65, scope: !5158)
!5168 = !DILocation(line: 2130, column: 5, scope: !5158)
!5169 = distinct !{!5169, !5159, !5170}
!5170 = !DILocation(line: 2134, column: 7, scope: !5155)
!5171 = !DILocation(line: 2136, column: 9, scope: !5084)
!5172 = !DILocation(line: 2136, column: 7, scope: !5084)
!5173 = !DILocation(line: 2137, column: 3, scope: !5084)
!5174 = !DILocation(line: 2139, column: 10, scope: !5084)
!5175 = !DILocation(line: 2139, column: 8, scope: !5084)
!5176 = !DILocation(line: 2140, column: 3, scope: !5084)
!5177 = !DILocation(line: 2140, column: 11, scope: !5084)
!5178 = !DILocation(line: 2140, column: 10, scope: !5084)
!5179 = !DILocation(line: 2141, column: 12, scope: !5084)
!5180 = !DILocation(line: 2141, column: 10, scope: !5084)
!5181 = distinct !{!5181, !5176, !5179}
!5182 = !DILocation(line: 2143, column: 20, scope: !5084)
!5183 = !DILocation(line: 2143, column: 25, scope: !5084)
!5184 = !DILocation(line: 2143, column: 3, scope: !5084)
!5185 = !DILocation(line: 2144, column: 1, scope: !5084)
!5186 = distinct !DISubprogram(name: "combine_var_copies_in_loop_exit", scope: !1, file: !1, line: 2151, type: !5085, scopeLine: 2152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5187 = !DILocalVariable(name: "ve", arg: 1, scope: !5186, file: !1, line: 2151, type: !1886)
!5188 = !DILocation(line: 2151, column: 56, scope: !5186)
!5189 = !DILocalVariable(name: "place", arg: 2, scope: !5186, file: !1, line: 2151, type: !1150)
!5190 = !DILocation(line: 2151, column: 72, scope: !5186)
!5191 = !DILocalVariable(name: "sum", scope: !5186, file: !1, line: 2153, type: !775)
!5192 = !DILocation(line: 2153, column: 7, scope: !5186)
!5193 = !DILocation(line: 2153, column: 13, scope: !5186)
!5194 = !DILocation(line: 2153, column: 17, scope: !5186)
!5195 = !DILocalVariable(name: "expr", scope: !5186, file: !1, line: 2154, type: !775)
!5196 = !DILocation(line: 2154, column: 7, scope: !5186)
!5197 = !DILocalVariable(name: "seq", scope: !5186, file: !1, line: 2154, type: !775)
!5198 = !DILocation(line: 2154, column: 13, scope: !5186)
!5199 = !DILocalVariable(name: "var", scope: !5186, file: !1, line: 2154, type: !775)
!5200 = !DILocation(line: 2154, column: 18, scope: !5186)
!5201 = !DILocalVariable(name: "insn", scope: !5186, file: !1, line: 2154, type: !775)
!5202 = !DILocation(line: 2154, column: 23, scope: !5186)
!5203 = !DILocalVariable(name: "i", scope: !5186, file: !1, line: 2155, type: !5)
!5204 = !DILocation(line: 2155, column: 12, scope: !5186)
!5205 = !DILocation(line: 2157, column: 7, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5186, file: !1, line: 2157, column: 7)
!5207 = !DILocation(line: 2157, column: 44, scope: !5206)
!5208 = !DILocation(line: 2157, column: 7, scope: !5186)
!5209 = !DILocation(line: 2158, column: 5, scope: !5206)
!5210 = !DILocation(line: 2160, column: 3, scope: !5186)
!5211 = !DILocation(line: 2161, column: 7, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5186, file: !1, line: 2161, column: 7)
!5213 = !DILocation(line: 2161, column: 11, scope: !5212)
!5214 = !DILocation(line: 2161, column: 14, scope: !5212)
!5215 = !DILocation(line: 2161, column: 22, scope: !5212)
!5216 = !DILocation(line: 2161, column: 25, scope: !5212)
!5217 = !DILocation(line: 2161, column: 29, scope: !5212)
!5218 = !DILocation(line: 2161, column: 32, scope: !5212)
!5219 = !DILocation(line: 2161, column: 7, scope: !5186)
!5220 = !DILocation(line: 2162, column: 12, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5212, file: !1, line: 2162, column: 5)
!5222 = !DILocation(line: 2162, column: 10, scope: !5221)
!5223 = !DILocation(line: 2162, column: 17, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5221, file: !1, line: 2162, column: 5)
!5225 = !DILocation(line: 2162, column: 5, scope: !5221)
!5226 = !DILocation(line: 2164, column: 42, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5224, file: !1, line: 2163, column: 7)
!5228 = !DILocation(line: 2165, column: 36, scope: !5227)
!5229 = !DILocation(line: 2165, column: 41, scope: !5227)
!5230 = !DILocation(line: 2164, column: 15, scope: !5227)
!5231 = !DILocation(line: 2164, column: 13, scope: !5227)
!5232 = !DILocation(line: 2166, column: 7, scope: !5227)
!5233 = !DILocation(line: 2162, column: 65, scope: !5224)
!5234 = !DILocation(line: 2162, column: 5, scope: !5224)
!5235 = distinct !{!5235, !5225, !5236}
!5236 = !DILocation(line: 2166, column: 7, scope: !5221)
!5237 = !DILocation(line: 2167, column: 12, scope: !5238)
!5238 = distinct !DILexicalBlock(scope: !5212, file: !1, line: 2167, column: 12)
!5239 = !DILocation(line: 2167, column: 16, scope: !5238)
!5240 = !DILocation(line: 2167, column: 19, scope: !5238)
!5241 = !DILocation(line: 2167, column: 12, scope: !5212)
!5242 = !DILocation(line: 2168, column: 12, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5238, file: !1, line: 2168, column: 5)
!5244 = !DILocation(line: 2168, column: 10, scope: !5243)
!5245 = !DILocation(line: 2168, column: 17, scope: !5246)
!5246 = distinct !DILexicalBlock(scope: !5243, file: !1, line: 2168, column: 5)
!5247 = !DILocation(line: 2168, column: 5, scope: !5243)
!5248 = !DILocation(line: 2170, column: 42, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5246, file: !1, line: 2169, column: 7)
!5250 = !DILocation(line: 2171, column: 36, scope: !5249)
!5251 = !DILocation(line: 2171, column: 41, scope: !5249)
!5252 = !DILocation(line: 2170, column: 15, scope: !5249)
!5253 = !DILocation(line: 2170, column: 13, scope: !5249)
!5254 = !DILocation(line: 2172, column: 7, scope: !5249)
!5255 = !DILocation(line: 2168, column: 65, scope: !5246)
!5256 = !DILocation(line: 2168, column: 5, scope: !5246)
!5257 = distinct !{!5257, !5247, !5258}
!5258 = !DILocation(line: 2172, column: 7, scope: !5243)
!5259 = !DILocation(line: 2174, column: 25, scope: !5186)
!5260 = !DILocation(line: 2174, column: 30, scope: !5186)
!5261 = !DILocation(line: 2174, column: 34, scope: !5186)
!5262 = !DILocation(line: 2174, column: 10, scope: !5186)
!5263 = !DILocation(line: 2174, column: 8, scope: !5186)
!5264 = !DILocation(line: 2175, column: 7, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5186, file: !1, line: 2175, column: 7)
!5266 = !DILocation(line: 2175, column: 15, scope: !5265)
!5267 = !DILocation(line: 2175, column: 19, scope: !5265)
!5268 = !DILocation(line: 2175, column: 12, scope: !5265)
!5269 = !DILocation(line: 2175, column: 7, scope: !5186)
!5270 = !DILocation(line: 2176, column: 21, scope: !5265)
!5271 = !DILocation(line: 2176, column: 25, scope: !5265)
!5272 = !DILocation(line: 2176, column: 30, scope: !5265)
!5273 = !DILocation(line: 2176, column: 5, scope: !5265)
!5274 = !DILocation(line: 2177, column: 9, scope: !5186)
!5275 = !DILocation(line: 2177, column: 7, scope: !5186)
!5276 = !DILocation(line: 2178, column: 3, scope: !5186)
!5277 = !DILocation(line: 2180, column: 10, scope: !5186)
!5278 = !DILocation(line: 2180, column: 8, scope: !5186)
!5279 = !DILocation(line: 2181, column: 3, scope: !5186)
!5280 = !DILocation(line: 2181, column: 11, scope: !5186)
!5281 = !DILocation(line: 0, scope: !5186)
!5282 = !DILocation(line: 2181, column: 10, scope: !5186)
!5283 = !DILocation(line: 2182, column: 12, scope: !5186)
!5284 = !DILocation(line: 2182, column: 10, scope: !5186)
!5285 = distinct !{!5285, !5279, !5283}
!5286 = !DILocation(line: 2184, column: 20, scope: !5186)
!5287 = !DILocation(line: 2184, column: 25, scope: !5186)
!5288 = !DILocation(line: 2184, column: 3, scope: !5186)
!5289 = !DILocation(line: 2185, column: 1, scope: !5186)
!5290 = distinct !DISubprogram(name: "get_ivts_expr", scope: !1, file: !1, line: 1924, type: !5291, scopeLine: 1925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5291 = !DISubroutineType(types: !5292)
!5292 = !{!4919, !775, !1872}
!5293 = !DILocalVariable(name: "expr", arg: 1, scope: !5290, file: !1, line: 1924, type: !775)
!5294 = !DILocation(line: 1924, column: 20, scope: !5290)
!5295 = !DILocalVariable(name: "ivts", arg: 2, scope: !5290, file: !1, line: 1924, type: !1872)
!5296 = !DILocation(line: 1924, column: 46, scope: !5290)
!5297 = !DILocalVariable(name: "i", scope: !5290, file: !1, line: 1926, type: !5)
!5298 = !DILocation(line: 1926, column: 12, scope: !5290)
!5299 = !DILocalVariable(name: "ret", scope: !5290, file: !1, line: 1927, type: !4919)
!5300 = !DILocation(line: 1927, column: 8, scope: !5290)
!5301 = !DILocation(line: 1929, column: 10, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5290, file: !1, line: 1929, column: 3)
!5303 = !DILocation(line: 1929, column: 8, scope: !5302)
!5304 = !DILocation(line: 1929, column: 15, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5302, file: !1, line: 1929, column: 3)
!5306 = !DILocation(line: 1929, column: 19, scope: !5305)
!5307 = !DILocation(line: 1929, column: 25, scope: !5305)
!5308 = !DILocation(line: 1929, column: 17, scope: !5305)
!5309 = !DILocation(line: 1929, column: 3, scope: !5302)
!5310 = !DILocation(line: 1930, column: 12, scope: !5305)
!5311 = !DILocation(line: 1930, column: 9, scope: !5305)
!5312 = !DILocation(line: 1930, column: 5, scope: !5305)
!5313 = !DILocation(line: 1929, column: 33, scope: !5305)
!5314 = !DILocation(line: 1929, column: 3, scope: !5305)
!5315 = distinct !{!5315, !5309, !5316}
!5316 = !DILocation(line: 1930, column: 12, scope: !5302)
!5317 = !DILocation(line: 1932, column: 10, scope: !5290)
!5318 = !DILocation(line: 1932, column: 3, scope: !5290)
!5319 = distinct !DISubprogram(name: "get_expansion", scope: !1, file: !1, line: 2028, type: !5320, scopeLine: 2029, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5320 = !DISubroutineType(types: !5321)
!5321 = !{!775, !1886}
!5322 = !DILocalVariable(name: "ve", arg: 1, scope: !5319, file: !1, line: 2028, type: !1886)
!5323 = !DILocation(line: 2028, column: 38, scope: !5319)
!5324 = !DILocalVariable(name: "reg", scope: !5319, file: !1, line: 2030, type: !775)
!5325 = !DILocation(line: 2030, column: 7, scope: !5319)
!5326 = !DILocation(line: 2032, column: 7, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5319, file: !1, line: 2032, column: 7)
!5328 = !DILocation(line: 2032, column: 11, scope: !5327)
!5329 = !DILocation(line: 2032, column: 27, scope: !5327)
!5330 = !DILocation(line: 2032, column: 7, scope: !5319)
!5331 = !DILocation(line: 2033, column: 11, scope: !5327)
!5332 = !DILocation(line: 2033, column: 15, scope: !5327)
!5333 = !DILocation(line: 2033, column: 9, scope: !5327)
!5334 = !DILocation(line: 2033, column: 5, scope: !5327)
!5335 = !DILocation(line: 2035, column: 11, scope: !5327)
!5336 = !DILocation(line: 2035, column: 9, scope: !5327)
!5337 = !DILocation(line: 2037, column: 7, scope: !5338)
!5338 = distinct !DILexicalBlock(scope: !5319, file: !1, line: 2037, column: 7)
!5339 = !DILocation(line: 2037, column: 58, scope: !5338)
!5340 = !DILocation(line: 2037, column: 62, scope: !5338)
!5341 = !DILocation(line: 2037, column: 44, scope: !5338)
!5342 = !DILocation(line: 2037, column: 7, scope: !5319)
!5343 = !DILocation(line: 2038, column: 5, scope: !5338)
!5344 = !DILocation(line: 2038, column: 9, scope: !5338)
!5345 = !DILocation(line: 2038, column: 25, scope: !5338)
!5346 = !DILocation(line: 2040, column: 5, scope: !5338)
!5347 = !DILocation(line: 2040, column: 9, scope: !5338)
!5348 = !DILocation(line: 2040, column: 24, scope: !5338)
!5349 = !DILocation(line: 2042, column: 10, scope: !5319)
!5350 = !DILocation(line: 2042, column: 3, scope: !5319)
!5351 = distinct !DISubprogram(name: "VEC_rtx_heap_safe_push", scope: !517, file: !517, line: 201, type: !5352, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5352 = !DISubroutineType(types: !5353)
!5353 = !{!4919, !5354, !775}
!5354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1892, size: 64)
!5355 = !DILocalVariable(name: "vec_", arg: 1, scope: !5351, file: !517, line: 201, type: !5354)
!5356 = !DILocation(line: 201, column: 1, scope: !5351)
!5357 = !DILocalVariable(name: "obj_", arg: 2, scope: !5351, file: !517, line: 201, type: !775)
!5358 = distinct !DISubprogram(name: "VEC_rtx_base_index", scope: !517, file: !517, line: 200, type: !5359, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5359 = !DISubroutineType(types: !5360)
!5360 = !{!775, !5361, !5}
!5361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5362, size: 64)
!5362 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1780)
!5363 = !DILocalVariable(name: "vec_", arg: 1, scope: !5358, file: !517, line: 200, type: !5361)
!5364 = !DILocation(line: 200, column: 1, scope: !5358)
!5365 = !DILocalVariable(name: "ix_", arg: 2, scope: !5358, file: !517, line: 200, type: !5)
!5366 = !DILocation(line: 0, scope: !5358)
!5367 = distinct !DISubprogram(name: "VEC_rtx_base_length", scope: !517, file: !517, line: 200, type: !5368, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5368 = !DISubroutineType(types: !5369)
!5369 = !{!5, !5361}
!5370 = !DILocalVariable(name: "vec_", arg: 1, scope: !5367, file: !517, line: 200, type: !5361)
!5371 = !DILocation(line: 200, column: 1, scope: !5367)
!5372 = distinct !DISubprogram(name: "VEC_rtx_heap_reserve", scope: !517, file: !517, line: 201, type: !5373, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5373 = !DISubroutineType(types: !5374)
!5374 = !{!734, !5354, !734}
!5375 = !DILocalVariable(name: "vec_", arg: 1, scope: !5372, file: !517, line: 201, type: !5354)
!5376 = !DILocation(line: 201, column: 1, scope: !5372)
!5377 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5372, file: !517, line: 201, type: !734)
!5378 = !DILocalVariable(name: "extend", scope: !5372, file: !517, line: 201, type: !734)
!5379 = !DILocation(line: 201, column: 1, scope: !5380)
!5380 = distinct !DILexicalBlock(scope: !5372, file: !517, line: 201, column: 1)
!5381 = distinct !DISubprogram(name: "VEC_rtx_base_quick_push", scope: !517, file: !517, line: 200, type: !5382, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5382 = !DISubroutineType(types: !5383)
!5383 = !{!4919, !5384, !775}
!5384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1780, size: 64)
!5385 = !DILocalVariable(name: "vec_", arg: 1, scope: !5381, file: !517, line: 200, type: !5384)
!5386 = !DILocation(line: 200, column: 1, scope: !5381)
!5387 = !DILocalVariable(name: "obj_", arg: 2, scope: !5381, file: !517, line: 200, type: !775)
!5388 = !DILocalVariable(name: "slot_", scope: !5381, file: !517, line: 200, type: !4919)
!5389 = distinct !DISubprogram(name: "VEC_rtx_base_space", scope: !517, file: !517, line: 200, type: !5390, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5390 = !DISubroutineType(types: !5391)
!5391 = !{!734, !5384, !734}
!5392 = !DILocalVariable(name: "vec_", arg: 1, scope: !5389, file: !517, line: 200, type: !5384)
!5393 = !DILocation(line: 200, column: 1, scope: !5389)
!5394 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5389, file: !517, line: 200, type: !734)
!5395 = distinct !DISubprogram(name: "VEC_rtx_base_iterate", scope: !517, file: !517, line: 200, type: !5396, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5396 = !DISubroutineType(types: !5397)
!5397 = !{!734, !5361, !5, !4919}
!5398 = !DILocalVariable(name: "vec_", arg: 1, scope: !5395, file: !517, line: 200, type: !5361)
!5399 = !DILocation(line: 200, column: 1, scope: !5395)
!5400 = !DILocalVariable(name: "ix_", arg: 2, scope: !5395, file: !517, line: 200, type: !5)
!5401 = !DILocalVariable(name: "ptr", arg: 3, scope: !5395, file: !517, line: 200, type: !4919)
!5402 = !DILocation(line: 200, column: 1, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5395, file: !517, line: 200, column: 1)
!5404 = !DILocation(line: 200, column: 1, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5403, file: !517, line: 200, column: 1)
!5406 = !DILocation(line: 200, column: 1, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5403, file: !517, line: 200, column: 1)
!5408 = distinct !DISubprogram(name: "VEC_rtx_heap_free", scope: !517, file: !517, line: 201, type: !5409, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5409 = !DISubroutineType(types: !5410)
!5410 = !{null, !5354}
!5411 = !DILocalVariable(name: "vec_", arg: 1, scope: !5408, file: !517, line: 201, type: !5354)
!5412 = !DILocation(line: 201, column: 1, scope: !5408)
!5413 = !DILocation(line: 201, column: 1, scope: !5414)
!5414 = distinct !DILexicalBlock(scope: !5408, file: !517, line: 201, column: 1)
!5415 = distinct !DISubprogram(name: "decide_unroll_constant_iterations", scope: !1, file: !1, line: 523, type: !3425, scopeLine: 524, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5416 = !DILocalVariable(name: "loop", arg: 1, scope: !5415, file: !1, line: 523, type: !738)
!5417 = !DILocation(line: 523, column: 49, scope: !5415)
!5418 = !DILocalVariable(name: "flags", arg: 2, scope: !5415, file: !1, line: 523, type: !734)
!5419 = !DILocation(line: 523, column: 59, scope: !5415)
!5420 = !DILocalVariable(name: "nunroll", scope: !5415, file: !1, line: 525, type: !5)
!5421 = !DILocation(line: 525, column: 12, scope: !5415)
!5422 = !DILocalVariable(name: "nunroll_by_av", scope: !5415, file: !1, line: 525, type: !5)
!5423 = !DILocation(line: 525, column: 21, scope: !5415)
!5424 = !DILocalVariable(name: "best_copies", scope: !5415, file: !1, line: 525, type: !5)
!5425 = !DILocation(line: 525, column: 36, scope: !5415)
!5426 = !DILocalVariable(name: "best_unroll", scope: !5415, file: !1, line: 525, type: !5)
!5427 = !DILocation(line: 525, column: 49, scope: !5415)
!5428 = !DILocalVariable(name: "n_copies", scope: !5415, file: !1, line: 525, type: !5)
!5429 = !DILocation(line: 525, column: 66, scope: !5415)
!5430 = !DILocalVariable(name: "i", scope: !5415, file: !1, line: 525, type: !5)
!5431 = !DILocation(line: 525, column: 76, scope: !5415)
!5432 = !DILocalVariable(name: "desc", scope: !5415, file: !1, line: 526, type: !2340)
!5433 = !DILocation(line: 526, column: 22, scope: !5415)
!5434 = !DILocation(line: 528, column: 9, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 528, column: 7)
!5436 = !DILocation(line: 528, column: 15, scope: !5435)
!5437 = !DILocation(line: 528, column: 7, scope: !5415)
!5438 = !DILocation(line: 531, column: 7, scope: !5439)
!5439 = distinct !DILexicalBlock(scope: !5435, file: !1, line: 529, column: 5)
!5440 = !DILocation(line: 534, column: 7, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 534, column: 7)
!5442 = !DILocation(line: 534, column: 7, scope: !5415)
!5443 = !DILocation(line: 535, column: 14, scope: !5441)
!5444 = !DILocation(line: 535, column: 5, scope: !5441)
!5445 = !DILocation(line: 541, column: 13, scope: !5415)
!5446 = !DILocation(line: 541, column: 54, scope: !5415)
!5447 = !DILocation(line: 541, column: 60, scope: !5415)
!5448 = !DILocation(line: 541, column: 52, scope: !5415)
!5449 = !DILocation(line: 541, column: 11, scope: !5415)
!5450 = !DILocation(line: 543, column: 7, scope: !5415)
!5451 = !DILocation(line: 543, column: 56, scope: !5415)
!5452 = !DILocation(line: 543, column: 62, scope: !5415)
!5453 = !DILocation(line: 543, column: 54, scope: !5415)
!5454 = !DILocation(line: 543, column: 5, scope: !5415)
!5455 = !DILocation(line: 544, column: 7, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 544, column: 7)
!5457 = !DILocation(line: 544, column: 17, scope: !5456)
!5458 = !DILocation(line: 544, column: 15, scope: !5456)
!5459 = !DILocation(line: 544, column: 7, scope: !5415)
!5460 = !DILocation(line: 545, column: 15, scope: !5456)
!5461 = !DILocation(line: 545, column: 13, scope: !5456)
!5462 = !DILocation(line: 545, column: 5, scope: !5456)
!5463 = !DILocation(line: 546, column: 7, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 546, column: 7)
!5465 = !DILocation(line: 546, column: 28, scope: !5464)
!5466 = !DILocation(line: 546, column: 15, scope: !5464)
!5467 = !DILocation(line: 546, column: 7, scope: !5415)
!5468 = !DILocation(line: 547, column: 15, scope: !5464)
!5469 = !DILocation(line: 547, column: 13, scope: !5464)
!5470 = !DILocation(line: 547, column: 5, scope: !5464)
!5471 = !DILocation(line: 550, column: 7, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 550, column: 7)
!5473 = !DILocation(line: 550, column: 15, scope: !5472)
!5474 = !DILocation(line: 550, column: 7, scope: !5415)
!5475 = !DILocation(line: 552, column: 11, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5477, file: !1, line: 552, column: 11)
!5477 = distinct !DILexicalBlock(scope: !5472, file: !1, line: 551, column: 5)
!5478 = !DILocation(line: 552, column: 11, scope: !5477)
!5479 = !DILocation(line: 553, column: 11, scope: !5476)
!5480 = !DILocation(line: 553, column: 2, scope: !5476)
!5481 = !DILocation(line: 554, column: 7, scope: !5477)
!5482 = !DILocation(line: 558, column: 32, scope: !5415)
!5483 = !DILocation(line: 558, column: 10, scope: !5415)
!5484 = !DILocation(line: 558, column: 8, scope: !5415)
!5485 = !DILocation(line: 561, column: 8, scope: !5486)
!5486 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 561, column: 7)
!5487 = !DILocation(line: 561, column: 14, scope: !5486)
!5488 = !DILocation(line: 561, column: 23, scope: !5486)
!5489 = !DILocation(line: 561, column: 27, scope: !5486)
!5490 = !DILocation(line: 561, column: 33, scope: !5486)
!5491 = !DILocation(line: 561, column: 44, scope: !5486)
!5492 = !DILocation(line: 561, column: 47, scope: !5486)
!5493 = !DILocation(line: 561, column: 53, scope: !5486)
!5494 = !DILocation(line: 561, column: 7, scope: !5415)
!5495 = !DILocation(line: 563, column: 11, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5497, file: !1, line: 563, column: 11)
!5497 = distinct !DILexicalBlock(scope: !5486, file: !1, line: 562, column: 5)
!5498 = !DILocation(line: 563, column: 11, scope: !5497)
!5499 = !DILocation(line: 564, column: 11, scope: !5496)
!5500 = !DILocation(line: 564, column: 2, scope: !5496)
!5501 = !DILocation(line: 566, column: 7, scope: !5497)
!5502 = !DILocation(line: 570, column: 7, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 570, column: 7)
!5504 = !DILocation(line: 570, column: 13, scope: !5503)
!5505 = !DILocation(line: 570, column: 25, scope: !5503)
!5506 = !DILocation(line: 570, column: 23, scope: !5503)
!5507 = !DILocation(line: 570, column: 21, scope: !5503)
!5508 = !DILocation(line: 570, column: 19, scope: !5503)
!5509 = !DILocation(line: 570, column: 7, scope: !5415)
!5510 = !DILocation(line: 572, column: 11, scope: !5511)
!5511 = distinct !DILexicalBlock(scope: !5512, file: !1, line: 572, column: 11)
!5512 = distinct !DILexicalBlock(scope: !5503, file: !1, line: 571, column: 5)
!5513 = !DILocation(line: 572, column: 11, scope: !5512)
!5514 = !DILocation(line: 573, column: 11, scope: !5511)
!5515 = !DILocation(line: 573, column: 2, scope: !5511)
!5516 = !DILocation(line: 574, column: 7, scope: !5512)
!5517 = !DILocation(line: 581, column: 21, scope: !5415)
!5518 = !DILocation(line: 581, column: 19, scope: !5415)
!5519 = !DILocation(line: 581, column: 29, scope: !5415)
!5520 = !DILocation(line: 581, column: 15, scope: !5415)
!5521 = !DILocation(line: 583, column: 11, scope: !5415)
!5522 = !DILocation(line: 583, column: 9, scope: !5415)
!5523 = !DILocation(line: 583, column: 19, scope: !5415)
!5524 = !DILocation(line: 583, column: 5, scope: !5415)
!5525 = !DILocation(line: 584, column: 7, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 584, column: 7)
!5527 = !DILocation(line: 584, column: 9, scope: !5526)
!5528 = !DILocation(line: 584, column: 16, scope: !5526)
!5529 = !DILocation(line: 584, column: 22, scope: !5526)
!5530 = !DILocation(line: 584, column: 13, scope: !5526)
!5531 = !DILocation(line: 584, column: 7, scope: !5415)
!5532 = !DILocation(line: 585, column: 9, scope: !5526)
!5533 = !DILocation(line: 585, column: 15, scope: !5526)
!5534 = !DILocation(line: 585, column: 21, scope: !5526)
!5535 = !DILocation(line: 585, column: 7, scope: !5526)
!5536 = !DILocation(line: 585, column: 5, scope: !5526)
!5537 = !DILocation(line: 587, column: 3, scope: !5415)
!5538 = !DILocation(line: 587, column: 10, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5540, file: !1, line: 587, column: 3)
!5540 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 587, column: 3)
!5541 = !DILocation(line: 587, column: 15, scope: !5539)
!5542 = !DILocation(line: 587, column: 23, scope: !5539)
!5543 = !DILocation(line: 587, column: 12, scope: !5539)
!5544 = !DILocation(line: 587, column: 3, scope: !5540)
!5545 = !DILocalVariable(name: "exit_mod", scope: !5546, file: !1, line: 589, type: !5)
!5546 = distinct !DILexicalBlock(scope: !5539, file: !1, line: 588, column: 5)
!5547 = !DILocation(line: 589, column: 16, scope: !5546)
!5548 = !DILocation(line: 589, column: 27, scope: !5546)
!5549 = !DILocation(line: 589, column: 33, scope: !5546)
!5550 = !DILocation(line: 589, column: 42, scope: !5546)
!5551 = !DILocation(line: 589, column: 44, scope: !5546)
!5552 = !DILocation(line: 589, column: 41, scope: !5546)
!5553 = !DILocation(line: 589, column: 39, scope: !5546)
!5554 = !DILocation(line: 591, column: 32, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 591, column: 11)
!5556 = !DILocation(line: 591, column: 12, scope: !5555)
!5557 = !DILocation(line: 591, column: 11, scope: !5546)
!5558 = !DILocation(line: 592, column: 13, scope: !5555)
!5559 = !DILocation(line: 592, column: 24, scope: !5555)
!5560 = !DILocation(line: 592, column: 22, scope: !5555)
!5561 = !DILocation(line: 592, column: 26, scope: !5555)
!5562 = !DILocation(line: 592, column: 11, scope: !5555)
!5563 = !DILocation(line: 592, column: 2, scope: !5555)
!5564 = !DILocation(line: 593, column: 16, scope: !5565)
!5565 = distinct !DILexicalBlock(scope: !5555, file: !1, line: 593, column: 16)
!5566 = !DILocation(line: 593, column: 39, scope: !5565)
!5567 = !DILocation(line: 593, column: 25, scope: !5565)
!5568 = !DILocation(line: 594, column: 9, scope: !5565)
!5569 = !DILocation(line: 594, column: 12, scope: !5565)
!5570 = !DILocation(line: 594, column: 18, scope: !5565)
!5571 = !DILocation(line: 594, column: 37, scope: !5565)
!5572 = !DILocation(line: 593, column: 16, scope: !5555)
!5573 = !DILocation(line: 595, column: 13, scope: !5565)
!5574 = !DILocation(line: 595, column: 24, scope: !5565)
!5575 = !DILocation(line: 595, column: 22, scope: !5565)
!5576 = !DILocation(line: 595, column: 26, scope: !5565)
!5577 = !DILocation(line: 595, column: 11, scope: !5565)
!5578 = !DILocation(line: 595, column: 2, scope: !5565)
!5579 = !DILocation(line: 597, column: 13, scope: !5565)
!5580 = !DILocation(line: 597, column: 15, scope: !5565)
!5581 = !DILocation(line: 597, column: 11, scope: !5565)
!5582 = !DILocation(line: 599, column: 11, scope: !5583)
!5583 = distinct !DILexicalBlock(scope: !5546, file: !1, line: 599, column: 11)
!5584 = !DILocation(line: 599, column: 22, scope: !5583)
!5585 = !DILocation(line: 599, column: 20, scope: !5583)
!5586 = !DILocation(line: 599, column: 11, scope: !5546)
!5587 = !DILocation(line: 601, column: 18, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5583, file: !1, line: 600, column: 2)
!5589 = !DILocation(line: 601, column: 16, scope: !5588)
!5590 = !DILocation(line: 602, column: 18, scope: !5588)
!5591 = !DILocation(line: 602, column: 16, scope: !5588)
!5592 = !DILocation(line: 603, column: 2, scope: !5588)
!5593 = !DILocation(line: 604, column: 5, scope: !5546)
!5594 = !DILocation(line: 587, column: 29, scope: !5539)
!5595 = !DILocation(line: 587, column: 3, scope: !5539)
!5596 = distinct !{!5596, !5544, !5597}
!5597 = !DILocation(line: 604, column: 5, scope: !5540)
!5598 = !DILocation(line: 606, column: 7, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 606, column: 7)
!5600 = !DILocation(line: 606, column: 7, scope: !5415)
!5601 = !DILocation(line: 607, column: 14, scope: !5599)
!5602 = !DILocation(line: 608, column: 7, scope: !5599)
!5603 = !DILocation(line: 608, column: 19, scope: !5599)
!5604 = !DILocation(line: 608, column: 24, scope: !5599)
!5605 = !DILocation(line: 608, column: 37, scope: !5599)
!5606 = !DILocation(line: 607, column: 5, scope: !5599)
!5607 = !DILocation(line: 610, column: 3, scope: !5415)
!5608 = !DILocation(line: 610, column: 9, scope: !5415)
!5609 = !DILocation(line: 610, column: 22, scope: !5415)
!5610 = !DILocation(line: 610, column: 31, scope: !5415)
!5611 = !DILocation(line: 611, column: 30, scope: !5415)
!5612 = !DILocation(line: 611, column: 3, scope: !5415)
!5613 = !DILocation(line: 611, column: 9, scope: !5415)
!5614 = !DILocation(line: 611, column: 22, scope: !5415)
!5615 = !DILocation(line: 611, column: 28, scope: !5415)
!5616 = !DILocation(line: 613, column: 7, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 613, column: 7)
!5618 = !DILocation(line: 613, column: 7, scope: !5415)
!5619 = !DILocation(line: 614, column: 14, scope: !5617)
!5620 = !DILocation(line: 616, column: 7, scope: !5617)
!5621 = !DILocation(line: 616, column: 13, scope: !5617)
!5622 = !DILocation(line: 616, column: 26, scope: !5617)
!5623 = !DILocation(line: 614, column: 5, scope: !5617)
!5624 = !DILocation(line: 617, column: 1, scope: !5415)
!5625 = distinct !DISubprogram(name: "decide_unroll_runtime_iterations", scope: !1, file: !1, line: 804, type: !3425, scopeLine: 805, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5626 = !DILocalVariable(name: "loop", arg: 1, scope: !5625, file: !1, line: 804, type: !738)
!5627 = !DILocation(line: 804, column: 48, scope: !5625)
!5628 = !DILocalVariable(name: "flags", arg: 2, scope: !5625, file: !1, line: 804, type: !734)
!5629 = !DILocation(line: 804, column: 58, scope: !5625)
!5630 = !DILocalVariable(name: "nunroll", scope: !5625, file: !1, line: 806, type: !5)
!5631 = !DILocation(line: 806, column: 12, scope: !5625)
!5632 = !DILocalVariable(name: "nunroll_by_av", scope: !5625, file: !1, line: 806, type: !5)
!5633 = !DILocation(line: 806, column: 21, scope: !5625)
!5634 = !DILocalVariable(name: "i", scope: !5625, file: !1, line: 806, type: !5)
!5635 = !DILocation(line: 806, column: 36, scope: !5625)
!5636 = !DILocalVariable(name: "desc", scope: !5625, file: !1, line: 807, type: !2340)
!5637 = !DILocation(line: 807, column: 22, scope: !5625)
!5638 = !DILocation(line: 809, column: 9, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 809, column: 7)
!5640 = !DILocation(line: 809, column: 15, scope: !5639)
!5641 = !DILocation(line: 809, column: 7, scope: !5625)
!5642 = !DILocation(line: 812, column: 7, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5639, file: !1, line: 810, column: 5)
!5644 = !DILocation(line: 815, column: 7, scope: !5645)
!5645 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 815, column: 7)
!5646 = !DILocation(line: 815, column: 7, scope: !5625)
!5647 = !DILocation(line: 816, column: 14, scope: !5645)
!5648 = !DILocation(line: 816, column: 5, scope: !5645)
!5649 = !DILocation(line: 822, column: 13, scope: !5625)
!5650 = !DILocation(line: 822, column: 54, scope: !5625)
!5651 = !DILocation(line: 822, column: 60, scope: !5625)
!5652 = !DILocation(line: 822, column: 52, scope: !5625)
!5653 = !DILocation(line: 822, column: 11, scope: !5625)
!5654 = !DILocation(line: 823, column: 19, scope: !5625)
!5655 = !DILocation(line: 823, column: 68, scope: !5625)
!5656 = !DILocation(line: 823, column: 74, scope: !5625)
!5657 = !DILocation(line: 823, column: 66, scope: !5625)
!5658 = !DILocation(line: 823, column: 17, scope: !5625)
!5659 = !DILocation(line: 824, column: 7, scope: !5660)
!5660 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 824, column: 7)
!5661 = !DILocation(line: 824, column: 17, scope: !5660)
!5662 = !DILocation(line: 824, column: 15, scope: !5660)
!5663 = !DILocation(line: 824, column: 7, scope: !5625)
!5664 = !DILocation(line: 825, column: 15, scope: !5660)
!5665 = !DILocation(line: 825, column: 13, scope: !5660)
!5666 = !DILocation(line: 825, column: 5, scope: !5660)
!5667 = !DILocation(line: 826, column: 7, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 826, column: 7)
!5669 = !DILocation(line: 826, column: 28, scope: !5668)
!5670 = !DILocation(line: 826, column: 15, scope: !5668)
!5671 = !DILocation(line: 826, column: 7, scope: !5625)
!5672 = !DILocation(line: 827, column: 15, scope: !5668)
!5673 = !DILocation(line: 827, column: 13, scope: !5668)
!5674 = !DILocation(line: 827, column: 5, scope: !5668)
!5675 = !DILocation(line: 830, column: 7, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 830, column: 7)
!5677 = !DILocation(line: 830, column: 15, scope: !5676)
!5678 = !DILocation(line: 830, column: 7, scope: !5625)
!5679 = !DILocation(line: 832, column: 11, scope: !5680)
!5680 = distinct !DILexicalBlock(scope: !5681, file: !1, line: 832, column: 11)
!5681 = distinct !DILexicalBlock(scope: !5676, file: !1, line: 831, column: 5)
!5682 = !DILocation(line: 832, column: 11, scope: !5681)
!5683 = !DILocation(line: 833, column: 11, scope: !5680)
!5684 = !DILocation(line: 833, column: 2, scope: !5680)
!5685 = !DILocation(line: 834, column: 7, scope: !5681)
!5686 = !DILocation(line: 838, column: 32, scope: !5625)
!5687 = !DILocation(line: 838, column: 10, scope: !5625)
!5688 = !DILocation(line: 838, column: 8, scope: !5625)
!5689 = !DILocation(line: 841, column: 8, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 841, column: 7)
!5691 = !DILocation(line: 841, column: 14, scope: !5690)
!5692 = !DILocation(line: 841, column: 23, scope: !5690)
!5693 = !DILocation(line: 841, column: 26, scope: !5690)
!5694 = !DILocation(line: 841, column: 32, scope: !5690)
!5695 = !DILocation(line: 841, column: 7, scope: !5625)
!5696 = !DILocation(line: 843, column: 11, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5698, file: !1, line: 843, column: 11)
!5698 = distinct !DILexicalBlock(scope: !5690, file: !1, line: 842, column: 5)
!5699 = !DILocation(line: 843, column: 11, scope: !5698)
!5700 = !DILocation(line: 844, column: 11, scope: !5697)
!5701 = !DILocation(line: 844, column: 2, scope: !5697)
!5702 = !DILocation(line: 847, column: 7, scope: !5698)
!5703 = !DILocation(line: 850, column: 7, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 850, column: 7)
!5705 = !DILocation(line: 850, column: 13, scope: !5704)
!5706 = !DILocation(line: 850, column: 7, scope: !5625)
!5707 = !DILocation(line: 852, column: 11, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5709, file: !1, line: 852, column: 11)
!5709 = distinct !DILexicalBlock(scope: !5704, file: !1, line: 851, column: 5)
!5710 = !DILocation(line: 852, column: 11, scope: !5709)
!5711 = !DILocation(line: 853, column: 11, scope: !5708)
!5712 = !DILocation(line: 853, column: 2, scope: !5708)
!5713 = !DILocation(line: 854, column: 7, scope: !5709)
!5714 = !DILocation(line: 858, column: 7, scope: !5715)
!5715 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 858, column: 7)
!5716 = !DILocation(line: 858, column: 13, scope: !5715)
!5717 = !DILocation(line: 858, column: 21, scope: !5715)
!5718 = !DILocation(line: 858, column: 27, scope: !5715)
!5719 = !DILocation(line: 858, column: 56, scope: !5715)
!5720 = !DILocation(line: 858, column: 30, scope: !5715)
!5721 = !DILocation(line: 858, column: 68, scope: !5715)
!5722 = !DILocation(line: 858, column: 66, scope: !5715)
!5723 = !DILocation(line: 858, column: 62, scope: !5715)
!5724 = !DILocation(line: 858, column: 7, scope: !5625)
!5725 = !DILocation(line: 860, column: 11, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5727, file: !1, line: 860, column: 11)
!5727 = distinct !DILexicalBlock(scope: !5715, file: !1, line: 859, column: 5)
!5728 = !DILocation(line: 860, column: 11, scope: !5727)
!5729 = !DILocation(line: 861, column: 11, scope: !5726)
!5730 = !DILocation(line: 861, column: 2, scope: !5726)
!5731 = !DILocation(line: 862, column: 7, scope: !5727)
!5732 = !DILocation(line: 867, column: 10, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 867, column: 3)
!5734 = !DILocation(line: 867, column: 8, scope: !5733)
!5735 = !DILocation(line: 867, column: 19, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5733, file: !1, line: 867, column: 3)
!5737 = !DILocation(line: 867, column: 17, scope: !5736)
!5738 = !DILocation(line: 867, column: 24, scope: !5736)
!5739 = !DILocation(line: 867, column: 21, scope: !5736)
!5740 = !DILocation(line: 867, column: 3, scope: !5733)
!5741 = !DILocation(line: 868, column: 5, scope: !5736)
!5742 = !DILocation(line: 867, column: 35, scope: !5736)
!5743 = !DILocation(line: 867, column: 3, scope: !5736)
!5744 = distinct !{!5744, !5740, !5745}
!5745 = !DILocation(line: 868, column: 5, scope: !5733)
!5746 = !DILocation(line: 870, column: 3, scope: !5625)
!5747 = !DILocation(line: 870, column: 9, scope: !5625)
!5748 = !DILocation(line: 870, column: 22, scope: !5625)
!5749 = !DILocation(line: 870, column: 31, scope: !5625)
!5750 = !DILocation(line: 871, column: 30, scope: !5625)
!5751 = !DILocation(line: 871, column: 32, scope: !5625)
!5752 = !DILocation(line: 871, column: 3, scope: !5625)
!5753 = !DILocation(line: 871, column: 9, scope: !5625)
!5754 = !DILocation(line: 871, column: 22, scope: !5625)
!5755 = !DILocation(line: 871, column: 28, scope: !5625)
!5756 = !DILocation(line: 873, column: 7, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 873, column: 7)
!5758 = !DILocation(line: 873, column: 7, scope: !5625)
!5759 = !DILocation(line: 874, column: 14, scope: !5757)
!5760 = !DILocation(line: 877, column: 7, scope: !5757)
!5761 = !DILocation(line: 877, column: 13, scope: !5757)
!5762 = !DILocation(line: 877, column: 26, scope: !5757)
!5763 = !DILocation(line: 874, column: 5, scope: !5757)
!5764 = !DILocation(line: 878, column: 1, scope: !5625)
!5765 = distinct !DISubprogram(name: "decide_unroll_stupid", scope: !1, file: !1, line: 1345, type: !3425, scopeLine: 1346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5766 = !DILocalVariable(name: "loop", arg: 1, scope: !5765, file: !1, line: 1345, type: !738)
!5767 = !DILocation(line: 1345, column: 36, scope: !5765)
!5768 = !DILocalVariable(name: "flags", arg: 2, scope: !5765, file: !1, line: 1345, type: !734)
!5769 = !DILocation(line: 1345, column: 46, scope: !5765)
!5770 = !DILocalVariable(name: "nunroll", scope: !5765, file: !1, line: 1347, type: !5)
!5771 = !DILocation(line: 1347, column: 12, scope: !5765)
!5772 = !DILocalVariable(name: "nunroll_by_av", scope: !5765, file: !1, line: 1347, type: !5)
!5773 = !DILocation(line: 1347, column: 21, scope: !5765)
!5774 = !DILocalVariable(name: "i", scope: !5765, file: !1, line: 1347, type: !5)
!5775 = !DILocation(line: 1347, column: 36, scope: !5765)
!5776 = !DILocalVariable(name: "desc", scope: !5765, file: !1, line: 1348, type: !2340)
!5777 = !DILocation(line: 1348, column: 22, scope: !5765)
!5778 = !DILocation(line: 1350, column: 9, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1350, column: 7)
!5780 = !DILocation(line: 1350, column: 15, scope: !5779)
!5781 = !DILocation(line: 1350, column: 7, scope: !5765)
!5782 = !DILocation(line: 1353, column: 7, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5779, file: !1, line: 1351, column: 5)
!5784 = !DILocation(line: 1356, column: 7, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1356, column: 7)
!5786 = !DILocation(line: 1356, column: 7, scope: !5765)
!5787 = !DILocation(line: 1357, column: 14, scope: !5785)
!5788 = !DILocation(line: 1357, column: 5, scope: !5785)
!5789 = !DILocation(line: 1361, column: 13, scope: !5765)
!5790 = !DILocation(line: 1361, column: 54, scope: !5765)
!5791 = !DILocation(line: 1361, column: 60, scope: !5765)
!5792 = !DILocation(line: 1361, column: 52, scope: !5765)
!5793 = !DILocation(line: 1361, column: 11, scope: !5765)
!5794 = !DILocation(line: 1363, column: 7, scope: !5765)
!5795 = !DILocation(line: 1363, column: 56, scope: !5765)
!5796 = !DILocation(line: 1363, column: 62, scope: !5765)
!5797 = !DILocation(line: 1363, column: 54, scope: !5765)
!5798 = !DILocation(line: 1363, column: 5, scope: !5765)
!5799 = !DILocation(line: 1364, column: 7, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1364, column: 7)
!5801 = !DILocation(line: 1364, column: 17, scope: !5800)
!5802 = !DILocation(line: 1364, column: 15, scope: !5800)
!5803 = !DILocation(line: 1364, column: 7, scope: !5765)
!5804 = !DILocation(line: 1365, column: 15, scope: !5800)
!5805 = !DILocation(line: 1365, column: 13, scope: !5800)
!5806 = !DILocation(line: 1365, column: 5, scope: !5800)
!5807 = !DILocation(line: 1366, column: 7, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1366, column: 7)
!5809 = !DILocation(line: 1366, column: 28, scope: !5808)
!5810 = !DILocation(line: 1366, column: 15, scope: !5808)
!5811 = !DILocation(line: 1366, column: 7, scope: !5765)
!5812 = !DILocation(line: 1367, column: 15, scope: !5808)
!5813 = !DILocation(line: 1367, column: 13, scope: !5808)
!5814 = !DILocation(line: 1367, column: 5, scope: !5808)
!5815 = !DILocation(line: 1370, column: 7, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1370, column: 7)
!5817 = !DILocation(line: 1370, column: 15, scope: !5816)
!5818 = !DILocation(line: 1370, column: 7, scope: !5765)
!5819 = !DILocation(line: 1372, column: 11, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5821, file: !1, line: 1372, column: 11)
!5821 = distinct !DILexicalBlock(scope: !5816, file: !1, line: 1371, column: 5)
!5822 = !DILocation(line: 1372, column: 11, scope: !5821)
!5823 = !DILocation(line: 1373, column: 11, scope: !5820)
!5824 = !DILocation(line: 1373, column: 2, scope: !5820)
!5825 = !DILocation(line: 1374, column: 7, scope: !5821)
!5826 = !DILocation(line: 1378, column: 32, scope: !5765)
!5827 = !DILocation(line: 1378, column: 10, scope: !5765)
!5828 = !DILocation(line: 1378, column: 8, scope: !5765)
!5829 = !DILocation(line: 1381, column: 7, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1381, column: 7)
!5831 = !DILocation(line: 1381, column: 13, scope: !5830)
!5832 = !DILocation(line: 1381, column: 22, scope: !5830)
!5833 = !DILocation(line: 1381, column: 26, scope: !5830)
!5834 = !DILocation(line: 1381, column: 32, scope: !5830)
!5835 = !DILocation(line: 1381, column: 7, scope: !5765)
!5836 = !DILocation(line: 1383, column: 11, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5838, file: !1, line: 1383, column: 11)
!5838 = distinct !DILexicalBlock(scope: !5830, file: !1, line: 1382, column: 5)
!5839 = !DILocation(line: 1383, column: 11, scope: !5838)
!5840 = !DILocation(line: 1384, column: 11, scope: !5837)
!5841 = !DILocation(line: 1384, column: 2, scope: !5837)
!5842 = !DILocation(line: 1385, column: 7, scope: !5838)
!5843 = !DILocation(line: 1390, column: 26, scope: !5844)
!5844 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1390, column: 7)
!5845 = !DILocation(line: 1390, column: 7, scope: !5844)
!5846 = !DILocation(line: 1390, column: 32, scope: !5844)
!5847 = !DILocation(line: 1390, column: 7, scope: !5765)
!5848 = !DILocation(line: 1392, column: 11, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5850, file: !1, line: 1392, column: 11)
!5850 = distinct !DILexicalBlock(scope: !5844, file: !1, line: 1391, column: 5)
!5851 = !DILocation(line: 1392, column: 11, scope: !5850)
!5852 = !DILocation(line: 1393, column: 11, scope: !5849)
!5853 = !DILocation(line: 1393, column: 2, scope: !5849)
!5854 = !DILocation(line: 1394, column: 7, scope: !5850)
!5855 = !DILocation(line: 1398, column: 7, scope: !5856)
!5856 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1398, column: 7)
!5857 = !DILocation(line: 1398, column: 13, scope: !5856)
!5858 = !DILocation(line: 1398, column: 21, scope: !5856)
!5859 = !DILocation(line: 1399, column: 7, scope: !5856)
!5860 = !DILocation(line: 1399, column: 36, scope: !5856)
!5861 = !DILocation(line: 1399, column: 10, scope: !5856)
!5862 = !DILocation(line: 1399, column: 48, scope: !5856)
!5863 = !DILocation(line: 1399, column: 46, scope: !5856)
!5864 = !DILocation(line: 1399, column: 42, scope: !5856)
!5865 = !DILocation(line: 1398, column: 7, scope: !5765)
!5866 = !DILocation(line: 1401, column: 11, scope: !5867)
!5867 = distinct !DILexicalBlock(scope: !5868, file: !1, line: 1401, column: 11)
!5868 = distinct !DILexicalBlock(scope: !5856, file: !1, line: 1400, column: 5)
!5869 = !DILocation(line: 1401, column: 11, scope: !5868)
!5870 = !DILocation(line: 1402, column: 11, scope: !5867)
!5871 = !DILocation(line: 1402, column: 2, scope: !5867)
!5872 = !DILocation(line: 1403, column: 7, scope: !5868)
!5873 = !DILocation(line: 1409, column: 10, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1409, column: 3)
!5875 = !DILocation(line: 1409, column: 8, scope: !5874)
!5876 = !DILocation(line: 1409, column: 19, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5874, file: !1, line: 1409, column: 3)
!5878 = !DILocation(line: 1409, column: 17, scope: !5877)
!5879 = !DILocation(line: 1409, column: 24, scope: !5877)
!5880 = !DILocation(line: 1409, column: 21, scope: !5877)
!5881 = !DILocation(line: 1409, column: 3, scope: !5874)
!5882 = !DILocation(line: 1410, column: 5, scope: !5877)
!5883 = !DILocation(line: 1409, column: 35, scope: !5877)
!5884 = !DILocation(line: 1409, column: 3, scope: !5877)
!5885 = distinct !{!5885, !5881, !5886}
!5886 = !DILocation(line: 1410, column: 5, scope: !5874)
!5887 = !DILocation(line: 1412, column: 3, scope: !5765)
!5888 = !DILocation(line: 1412, column: 9, scope: !5765)
!5889 = !DILocation(line: 1412, column: 22, scope: !5765)
!5890 = !DILocation(line: 1412, column: 31, scope: !5765)
!5891 = !DILocation(line: 1413, column: 30, scope: !5765)
!5892 = !DILocation(line: 1413, column: 32, scope: !5765)
!5893 = !DILocation(line: 1413, column: 3, scope: !5765)
!5894 = !DILocation(line: 1413, column: 9, scope: !5765)
!5895 = !DILocation(line: 1413, column: 22, scope: !5765)
!5896 = !DILocation(line: 1413, column: 28, scope: !5765)
!5897 = !DILocation(line: 1415, column: 7, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5765, file: !1, line: 1415, column: 7)
!5899 = !DILocation(line: 1415, column: 7, scope: !5765)
!5900 = !DILocation(line: 1416, column: 14, scope: !5898)
!5901 = !DILocation(line: 1418, column: 7, scope: !5898)
!5902 = !DILocation(line: 1418, column: 13, scope: !5898)
!5903 = !DILocation(line: 1418, column: 26, scope: !5898)
!5904 = !DILocation(line: 1416, column: 5, scope: !5898)
!5905 = !DILocation(line: 1419, column: 1, scope: !5765)
!5906 = distinct !DISubprogram(name: "decide_peel_simple", scope: !1, file: !1, line: 1192, type: !3425, scopeLine: 1193, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!5907 = !DILocalVariable(name: "loop", arg: 1, scope: !5906, file: !1, line: 1192, type: !738)
!5908 = !DILocation(line: 1192, column: 34, scope: !5906)
!5909 = !DILocalVariable(name: "flags", arg: 2, scope: !5906, file: !1, line: 1192, type: !734)
!5910 = !DILocation(line: 1192, column: 44, scope: !5906)
!5911 = !DILocalVariable(name: "npeel", scope: !5906, file: !1, line: 1194, type: !5)
!5912 = !DILocation(line: 1194, column: 12, scope: !5906)
!5913 = !DILocalVariable(name: "desc", scope: !5906, file: !1, line: 1195, type: !2340)
!5914 = !DILocation(line: 1195, column: 22, scope: !5906)
!5915 = !DILocation(line: 1197, column: 9, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1197, column: 7)
!5917 = !DILocation(line: 1197, column: 15, scope: !5916)
!5918 = !DILocation(line: 1197, column: 7, scope: !5906)
!5919 = !DILocation(line: 1200, column: 7, scope: !5920)
!5920 = distinct !DILexicalBlock(scope: !5916, file: !1, line: 1198, column: 5)
!5921 = !DILocation(line: 1203, column: 7, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1203, column: 7)
!5923 = !DILocation(line: 1203, column: 7, scope: !5906)
!5924 = !DILocation(line: 1204, column: 14, scope: !5922)
!5925 = !DILocation(line: 1204, column: 5, scope: !5922)
!5926 = !DILocation(line: 1207, column: 11, scope: !5906)
!5927 = !DILocation(line: 1207, column: 50, scope: !5906)
!5928 = !DILocation(line: 1207, column: 56, scope: !5906)
!5929 = !DILocation(line: 1207, column: 48, scope: !5906)
!5930 = !DILocation(line: 1207, column: 9, scope: !5906)
!5931 = !DILocation(line: 1208, column: 7, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1208, column: 7)
!5933 = !DILocation(line: 1208, column: 26, scope: !5932)
!5934 = !DILocation(line: 1208, column: 13, scope: !5932)
!5935 = !DILocation(line: 1208, column: 7, scope: !5906)
!5936 = !DILocation(line: 1209, column: 13, scope: !5932)
!5937 = !DILocation(line: 1209, column: 11, scope: !5932)
!5938 = !DILocation(line: 1209, column: 5, scope: !5932)
!5939 = !DILocation(line: 1212, column: 8, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1212, column: 7)
!5941 = !DILocation(line: 1212, column: 7, scope: !5906)
!5942 = !DILocation(line: 1214, column: 11, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5944, file: !1, line: 1214, column: 11)
!5944 = distinct !DILexicalBlock(scope: !5940, file: !1, line: 1213, column: 5)
!5945 = !DILocation(line: 1214, column: 11, scope: !5944)
!5946 = !DILocation(line: 1215, column: 11, scope: !5943)
!5947 = !DILocation(line: 1215, column: 2, scope: !5943)
!5948 = !DILocation(line: 1216, column: 7, scope: !5944)
!5949 = !DILocation(line: 1220, column: 32, scope: !5906)
!5950 = !DILocation(line: 1220, column: 10, scope: !5906)
!5951 = !DILocation(line: 1220, column: 8, scope: !5906)
!5952 = !DILocation(line: 1223, column: 7, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1223, column: 7)
!5954 = !DILocation(line: 1223, column: 13, scope: !5953)
!5955 = !DILocation(line: 1223, column: 22, scope: !5953)
!5956 = !DILocation(line: 1223, column: 26, scope: !5953)
!5957 = !DILocation(line: 1223, column: 32, scope: !5953)
!5958 = !DILocation(line: 1223, column: 44, scope: !5953)
!5959 = !DILocation(line: 1223, column: 47, scope: !5953)
!5960 = !DILocation(line: 1223, column: 53, scope: !5953)
!5961 = !DILocation(line: 1223, column: 7, scope: !5906)
!5962 = !DILocation(line: 1225, column: 11, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5964, file: !1, line: 1225, column: 11)
!5964 = distinct !DILexicalBlock(scope: !5953, file: !1, line: 1224, column: 5)
!5965 = !DILocation(line: 1225, column: 11, scope: !5964)
!5966 = !DILocation(line: 1226, column: 11, scope: !5963)
!5967 = !DILocation(line: 1226, column: 2, scope: !5963)
!5968 = !DILocation(line: 1227, column: 7, scope: !5964)
!5969 = !DILocation(line: 1232, column: 26, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1232, column: 7)
!5971 = !DILocation(line: 1232, column: 7, scope: !5970)
!5972 = !DILocation(line: 1232, column: 32, scope: !5970)
!5973 = !DILocation(line: 1232, column: 7, scope: !5906)
!5974 = !DILocation(line: 1234, column: 11, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5976, file: !1, line: 1234, column: 11)
!5976 = distinct !DILexicalBlock(scope: !5970, file: !1, line: 1233, column: 5)
!5977 = !DILocation(line: 1234, column: 11, scope: !5976)
!5978 = !DILocation(line: 1235, column: 11, scope: !5975)
!5979 = !DILocation(line: 1235, column: 2, scope: !5975)
!5980 = !DILocation(line: 1236, column: 7, scope: !5976)
!5981 = !DILocation(line: 1239, column: 7, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1239, column: 7)
!5983 = !DILocation(line: 1239, column: 13, scope: !5982)
!5984 = !DILocation(line: 1239, column: 21, scope: !5982)
!5985 = !DILocation(line: 1239, column: 7, scope: !5906)
!5986 = !DILocalVariable(name: "niter", scope: !5987, file: !1, line: 1241, type: !5)
!5987 = distinct !DILexicalBlock(scope: !5982, file: !1, line: 1240, column: 5)
!5988 = !DILocation(line: 1241, column: 16, scope: !5987)
!5989 = !DILocation(line: 1241, column: 50, scope: !5987)
!5990 = !DILocation(line: 1241, column: 24, scope: !5987)
!5991 = !DILocation(line: 1242, column: 11, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5987, file: !1, line: 1242, column: 11)
!5993 = !DILocation(line: 1242, column: 17, scope: !5992)
!5994 = !DILocation(line: 1242, column: 23, scope: !5992)
!5995 = !DILocation(line: 1242, column: 21, scope: !5992)
!5996 = !DILocation(line: 1242, column: 11, scope: !5987)
!5997 = !DILocation(line: 1244, column: 8, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5999, file: !1, line: 1244, column: 8)
!5999 = distinct !DILexicalBlock(scope: !5992, file: !1, line: 1243, column: 2)
!6000 = !DILocation(line: 1244, column: 8, scope: !5999)
!6001 = !DILocation(line: 1246, column: 17, scope: !6002)
!6002 = distinct !DILexicalBlock(scope: !5998, file: !1, line: 1245, column: 6)
!6003 = !DILocation(line: 1246, column: 8, scope: !6002)
!6004 = !DILocation(line: 1247, column: 17, scope: !6002)
!6005 = !DILocation(line: 1248, column: 29, scope: !6002)
!6006 = !DILocation(line: 1248, column: 35, scope: !6002)
!6007 = !DILocation(line: 1248, column: 10, scope: !6002)
!6008 = !DILocation(line: 1247, column: 8, scope: !6002)
!6009 = !DILocation(line: 1249, column: 17, scope: !6002)
!6010 = !DILocation(line: 1250, column: 10, scope: !6002)
!6011 = !DILocation(line: 1249, column: 8, scope: !6002)
!6012 = !DILocation(line: 1251, column: 6, scope: !6002)
!6013 = !DILocation(line: 1252, column: 4, scope: !5999)
!6014 = !DILocation(line: 1254, column: 15, scope: !5987)
!6015 = !DILocation(line: 1254, column: 21, scope: !5987)
!6016 = !DILocation(line: 1254, column: 13, scope: !5987)
!6017 = !DILocation(line: 1255, column: 5, scope: !5987)
!6018 = !DILocation(line: 1260, column: 11, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6020, file: !1, line: 1260, column: 11)
!6020 = distinct !DILexicalBlock(scope: !5982, file: !1, line: 1257, column: 5)
!6021 = !DILocation(line: 1260, column: 11, scope: !6020)
!6022 = !DILocation(line: 1261, column: 11, scope: !6019)
!6023 = !DILocation(line: 1261, column: 2, scope: !6019)
!6024 = !DILocation(line: 1263, column: 7, scope: !6020)
!6025 = !DILocation(line: 1267, column: 3, scope: !5906)
!6026 = !DILocation(line: 1267, column: 9, scope: !5906)
!6027 = !DILocation(line: 1267, column: 22, scope: !5906)
!6028 = !DILocation(line: 1267, column: 31, scope: !5906)
!6029 = !DILocation(line: 1268, column: 30, scope: !5906)
!6030 = !DILocation(line: 1268, column: 3, scope: !5906)
!6031 = !DILocation(line: 1268, column: 9, scope: !5906)
!6032 = !DILocation(line: 1268, column: 22, scope: !5906)
!6033 = !DILocation(line: 1268, column: 28, scope: !5906)
!6034 = !DILocation(line: 1270, column: 7, scope: !6035)
!6035 = distinct !DILexicalBlock(scope: !5906, file: !1, line: 1270, column: 7)
!6036 = !DILocation(line: 1270, column: 7, scope: !5906)
!6037 = !DILocation(line: 1271, column: 14, scope: !6035)
!6038 = !DILocation(line: 1272, column: 7, scope: !6035)
!6039 = !DILocation(line: 1272, column: 13, scope: !6035)
!6040 = !DILocation(line: 1272, column: 26, scope: !6035)
!6041 = !DILocation(line: 1271, column: 5, scope: !6035)
!6042 = !DILocation(line: 1273, column: 1, scope: !5906)
!6043 = distinct !DISubprogram(name: "loop_exit_at_end_p", scope: !1, file: !1, line: 212, type: !6044, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6044 = !DISubroutineType(types: !6045)
!6045 = !{!1005, !738}
!6046 = !DILocalVariable(name: "loop", arg: 1, scope: !6043, file: !1, line: 212, type: !738)
!6047 = !DILocation(line: 212, column: 34, scope: !6043)
!6048 = !DILocalVariable(name: "desc", scope: !6043, file: !1, line: 214, type: !2340)
!6049 = !DILocation(line: 214, column: 22, scope: !6043)
!6050 = !DILocation(line: 214, column: 51, scope: !6043)
!6051 = !DILocation(line: 214, column: 29, scope: !6043)
!6052 = !DILocalVariable(name: "insn", scope: !6043, file: !1, line: 215, type: !775)
!6053 = !DILocation(line: 215, column: 7, scope: !6043)
!6054 = !DILocation(line: 217, column: 7, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6043, file: !1, line: 217, column: 7)
!6056 = !DILocation(line: 217, column: 13, scope: !6055)
!6057 = !DILocation(line: 217, column: 22, scope: !6055)
!6058 = !DILocation(line: 217, column: 30, scope: !6055)
!6059 = !DILocation(line: 217, column: 36, scope: !6055)
!6060 = !DILocation(line: 217, column: 27, scope: !6055)
!6061 = !DILocation(line: 217, column: 7, scope: !6043)
!6062 = !DILocation(line: 218, column: 5, scope: !6055)
!6063 = !DILocation(line: 221, column: 3, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6043, file: !1, line: 221, column: 3)
!6065 = !DILocation(line: 221, column: 3, scope: !6066)
!6066 = distinct !DILexicalBlock(scope: !6064, file: !1, line: 221, column: 3)
!6067 = !DILocation(line: 0, scope: !6066)
!6068 = !DILocation(line: 223, column: 11, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6070, file: !1, line: 223, column: 11)
!6070 = distinct !DILexicalBlock(scope: !6066, file: !1, line: 222, column: 5)
!6071 = !DILocation(line: 223, column: 11, scope: !6070)
!6072 = !DILocation(line: 224, column: 2, scope: !6069)
!6073 = !DILocation(line: 225, column: 5, scope: !6070)
!6074 = distinct !{!6074, !6063, !6075}
!6075 = !DILocation(line: 225, column: 5, scope: !6064)
!6076 = !DILocation(line: 227, column: 3, scope: !6043)
!6077 = !DILocation(line: 228, column: 1, scope: !6043)
!6078 = distinct !DISubprogram(name: "SET_BIT", scope: !2323, file: !2323, line: 63, type: !3720, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6079 = !DILocalVariable(name: "map", arg: 1, scope: !6078, file: !2323, line: 63, type: !2322)
!6080 = !DILocation(line: 63, column: 18, scope: !6078)
!6081 = !DILocalVariable(name: "bitno", arg: 2, scope: !6078, file: !2323, line: 63, type: !5)
!6082 = !DILocation(line: 63, column: 36, scope: !6078)
!6083 = !DILocation(line: 65, column: 7, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !6078, file: !2323, line: 65, column: 7)
!6085 = !DILocation(line: 65, column: 12, scope: !6084)
!6086 = !DILocation(line: 65, column: 7, scope: !6078)
!6087 = !DILocalVariable(name: "oldbit", scope: !6088, file: !2323, line: 67, type: !1005)
!6088 = distinct !DILexicalBlock(scope: !6084, file: !2323, line: 66, column: 5)
!6089 = !DILocation(line: 67, column: 12, scope: !6088)
!6090 = !DILocation(line: 68, column: 16, scope: !6088)
!6091 = !DILocation(line: 68, column: 14, scope: !6088)
!6092 = !DILocation(line: 69, column: 12, scope: !6093)
!6093 = distinct !DILexicalBlock(scope: !6088, file: !2323, line: 69, column: 11)
!6094 = !DILocation(line: 69, column: 11, scope: !6088)
!6095 = !DILocation(line: 70, column: 2, scope: !6093)
!6096 = !DILocation(line: 70, column: 7, scope: !6093)
!6097 = !DILocation(line: 70, column: 16, scope: !6093)
!6098 = !DILocation(line: 70, column: 22, scope: !6093)
!6099 = !DILocation(line: 70, column: 41, scope: !6093)
!6100 = !DILocation(line: 71, column: 5, scope: !6088)
!6101 = !DILocation(line: 73, column: 33, scope: !6078)
!6102 = !DILocation(line: 73, column: 40, scope: !6078)
!6103 = !DILocation(line: 73, column: 29, scope: !6078)
!6104 = !DILocation(line: 72, column: 3, scope: !6078)
!6105 = !DILocation(line: 72, column: 8, scope: !6078)
!6106 = !DILocation(line: 72, column: 13, scope: !6078)
!6107 = !DILocation(line: 72, column: 19, scope: !6078)
!6108 = !DILocation(line: 73, column: 5, scope: !6078)
!6109 = !DILocation(line: 74, column: 1, scope: !6078)
!6110 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !133, file: !133, line: 281, type: !6111, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6111 = !DISubroutineType(types: !6112)
!6112 = !{!734, !4837, !5, !2756}
!6113 = !DILocalVariable(name: "vec_", arg: 1, scope: !6110, file: !133, line: 281, type: !4837)
!6114 = !DILocation(line: 281, column: 1, scope: !6110)
!6115 = !DILocalVariable(name: "ix_", arg: 2, scope: !6110, file: !133, line: 281, type: !5)
!6116 = !DILocalVariable(name: "ptr", arg: 3, scope: !6110, file: !133, line: 281, type: !2756)
!6117 = !DILocation(line: 281, column: 1, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !6110, file: !133, line: 281, column: 1)
!6119 = !DILocation(line: 281, column: 1, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6118, file: !133, line: 281, column: 1)
!6121 = !DILocation(line: 281, column: 1, scope: !6122)
!6122 = distinct !DILexicalBlock(scope: !6118, file: !133, line: 281, column: 1)
!6123 = distinct !DISubprogram(name: "VEC_basic_block_heap_safe_push", scope: !133, file: !133, line: 283, type: !6124, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6124 = !DISubroutineType(types: !6125)
!6125 = !{!2756, !6126, !1150}
!6126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1911, size: 64)
!6127 = !DILocalVariable(name: "vec_", arg: 1, scope: !6123, file: !133, line: 283, type: !6126)
!6128 = !DILocation(line: 283, column: 1, scope: !6123)
!6129 = !DILocalVariable(name: "obj_", arg: 2, scope: !6123, file: !133, line: 283, type: !1150)
!6130 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !133, file: !133, line: 283, type: !6131, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6131 = !DISubroutineType(types: !6132)
!6132 = !{null, !6126}
!6133 = !DILocalVariable(name: "vec_", arg: 1, scope: !6130, file: !133, line: 283, type: !6126)
!6134 = !DILocation(line: 283, column: 1, scope: !6130)
!6135 = !DILocation(line: 283, column: 1, scope: !6136)
!6136 = distinct !DILexicalBlock(scope: !6130, file: !133, line: 283, column: 1)
!6137 = distinct !DISubprogram(name: "single_pred_edge", scope: !133, file: !133, line: 653, type: !6138, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6138 = !DISubroutineType(types: !6139)
!6139 = !{!760, !6140}
!6140 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !761, line: 112, baseType: !6141)
!6141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6142, size: 64)
!6142 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !745)
!6143 = !DILocalVariable(name: "bb", arg: 1, scope: !6137, file: !133, line: 653, type: !6140)
!6144 = !DILocation(line: 653, column: 37, scope: !6137)
!6145 = !DILocation(line: 655, column: 3, scope: !6137)
!6146 = !DILocation(line: 656, column: 10, scope: !6137)
!6147 = !DILocation(line: 656, column: 3, scope: !6137)
!6148 = distinct !DISubprogram(name: "single_succ_edge", scope: !133, file: !133, line: 643, type: !6138, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6149 = !DILocalVariable(name: "bb", arg: 1, scope: !6148, file: !133, line: 643, type: !6140)
!6150 = !DILocation(line: 643, column: 37, scope: !6148)
!6151 = !DILocation(line: 645, column: 3, scope: !6148)
!6152 = !DILocation(line: 646, column: 10, scope: !6148)
!6153 = !DILocation(line: 646, column: 3, scope: !6148)
!6154 = distinct !DISubprogram(name: "VEC_basic_block_heap_reserve", scope: !133, file: !133, line: 283, type: !6155, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6155 = !DISubroutineType(types: !6156)
!6156 = !{!734, !6126, !734}
!6157 = !DILocalVariable(name: "vec_", arg: 1, scope: !6154, file: !133, line: 283, type: !6126)
!6158 = !DILocation(line: 283, column: 1, scope: !6154)
!6159 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6154, file: !133, line: 283, type: !734)
!6160 = !DILocalVariable(name: "extend", scope: !6154, file: !133, line: 283, type: !734)
!6161 = !DILocation(line: 283, column: 1, scope: !6162)
!6162 = distinct !DILexicalBlock(scope: !6154, file: !133, line: 283, column: 1)
!6163 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !133, file: !133, line: 281, type: !6164, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6164 = !DISubroutineType(types: !6165)
!6165 = !{!2756, !6166, !1150}
!6166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1158, size: 64)
!6167 = !DILocalVariable(name: "vec_", arg: 1, scope: !6163, file: !133, line: 281, type: !6166)
!6168 = !DILocation(line: 281, column: 1, scope: !6163)
!6169 = !DILocalVariable(name: "obj_", arg: 2, scope: !6163, file: !133, line: 281, type: !1150)
!6170 = !DILocalVariable(name: "slot_", scope: !6163, file: !133, line: 281, type: !2756)
!6171 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !133, file: !133, line: 281, type: !6172, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6172 = !DISubroutineType(types: !6173)
!6173 = !{!734, !6166, !734}
!6174 = !DILocalVariable(name: "vec_", arg: 1, scope: !6171, file: !133, line: 281, type: !6166)
!6175 = !DILocation(line: 281, column: 1, scope: !6171)
!6176 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6171, file: !133, line: 281, type: !734)
!6177 = distinct !DISubprogram(name: "single_pred_p", scope: !133, file: !133, line: 634, type: !6178, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6178 = !DISubroutineType(types: !6179)
!6179 = !{!1005, !6140}
!6180 = !DILocalVariable(name: "bb", arg: 1, scope: !6177, file: !133, line: 634, type: !6140)
!6181 = !DILocation(line: 634, column: 34, scope: !6177)
!6182 = !DILocation(line: 636, column: 10, scope: !6177)
!6183 = !DILocation(line: 636, column: 33, scope: !6177)
!6184 = !DILocation(line: 636, column: 3, scope: !6177)
!6185 = distinct !DISubprogram(name: "single_succ_p", scope: !133, file: !133, line: 626, type: !6178, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !1923)
!6186 = !DILocalVariable(name: "bb", arg: 1, scope: !6185, file: !133, line: 626, type: !6140)
!6187 = !DILocation(line: 626, column: 34, scope: !6185)
!6188 = !DILocation(line: 628, column: 10, scope: !6185)
!6189 = !DILocation(line: 628, column: 33, scope: !6185)
!6190 = !DILocation(line: 628, column: 3, scope: !6185)
