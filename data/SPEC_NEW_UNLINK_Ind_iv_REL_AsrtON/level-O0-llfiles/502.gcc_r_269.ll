; ModuleID = 'stor-layout.c'
source_filename = "stor-layout.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.diagnostic_info = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.pointer_set_t = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.record_layout_info_s = type { %union.tree_node*, %union.tree_node*, i32, %union.tree_node*, i32, i32, %union.tree_node*, %union.tree_node*, i32, i32 }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }

@maximum_field_alignment = dso_local global i32 0, align 4, !dbg !0
@initial_max_fld_align = dso_local global i32 0, align 4, !dbg !2780
@reference_types_internal = internal global i32 0, align 4, !dbg !2803
@pending_sizes = internal global %union.tree_node* null, align 8, !dbg !2799
@.str = private unnamed_addr constant [14 x i8] c"stor-layout.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@cfun = external dso_local global %struct.function*, align 8
@.str.2 = private unnamed_addr constant [41 x i8] c"type size can%'t be explicitly evaluated\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"variable-size type declared outside of any function\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@size_functions = internal global %struct.VEC_tree_gc* null, align 8, !dbg !2801
@mode_size = external dso_local global [87 x i8], align 16
@class_narrowest_mode = external dso_local constant [18 x i8], align 16
@mode_precision = external dso_local constant [87 x i16], align 16
@mode_wider = external dso_local constant [87 x i8], align 16
@mode_class = external dso_local constant [87 x i8], align 16
@ix86_isa_flags = external dso_local global i32, align 4
@mode_base_align = external dso_local global [87 x i8], align 16
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@sizetype_tab = common dso_local global [4 x %union.tree_node*] zeroinitializer, align 16, !dbg !2796
@targetm = external dso_local global %struct.gcc_target, align 8
@warn_larger_than = external dso_local global i8, align 1
@larger_than_size = external dso_local global i64, align 8
@.str.4 = private unnamed_addr constant [25 x i8] c"size of %q+D is %d bytes\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"size of %q+D is larger than %wd bytes\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"\0Aoffset\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c" bitpos\00", align 1
@.str.9 = private unnamed_addr constant [42 x i8] c"\0Aaligns: rec = %u, unpack = %u, off = %u\0A\00", align 1
@.str.10 = private unnamed_addr constant [29 x i8] c"remaining in alignment = %u\0A\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"packed may be necessary\0A\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"pending statics:\0A\00", align 1
@warn_packed = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [41 x i8] c"packed attribute is unnecessary for %q+D\00", align 1
@.str.14 = private unnamed_addr constant [29 x i8] c"padding struct to align %q+D\00", align 1
@warn_packed_bitfield_compat = external dso_local global i32, align 4
@input_location = external dso_local global i32, align 4
@.str.15 = private unnamed_addr constant [54 x i8] c"Offset of packed bit-field %qD has changed in GCC 4.4\00", align 1
@mode_nunits = external dso_local constant [87 x i8], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@have_regs_of_mode = external dso_local global [87 x i8], align 16
@.str.16 = private unnamed_addr constant [57 x i8] c"alignment of array elements is greater than element size\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"bit_size_type\00", align 1
@gt_ggc_r_gt_stor_layout_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.VEC_tree_gc** @size_functions to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_VEC_tree_gc, void (i8*)* @gt_pch_nx_VEC_tree_gc }, %struct.ggc_root_tab { i8* bitcast (%union.tree_node** @pending_sizes to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2782
@self_referential_size.fnno = internal global i64 0, align 8, !dbg !2805
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.18 = private unnamed_addr constant [4 x i8] c"p%d\00", align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.19 = private unnamed_addr constant [6 x i8] c"SZ%lu\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"padding struct size to alignment boundary\00", align 1
@.str.21 = private unnamed_addr constant [40 x i8] c"packed attribute is unnecessary for %qE\00", align 1
@.str.22 = private unnamed_addr constant [32 x i8] c"packed attribute is unnecessary\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @internal_reference_types() #0 !dbg !2815 {
entry:
  store i32 1, i32* @reference_types_internal, align 4, !dbg !2818
  ret void, !dbg !2819
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_pending_sizes() #0 !dbg !2820 {
entry:
  %chain = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain, metadata !2823, metadata !DIExpression()), !dbg !2824
  %0 = load %union.tree_node*, %union.tree_node** @pending_sizes, align 8, !dbg !2825
  store %union.tree_node* %0, %union.tree_node** %chain, align 8, !dbg !2824
  store %union.tree_node* null, %union.tree_node** @pending_sizes, align 8, !dbg !2826
  %1 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2827
  ret %union.tree_node* %1, !dbg !2828
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @put_pending_size(%union.tree_node* %expr) #0 !dbg !2829 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2832, metadata !DIExpression()), !dbg !2833
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2834
  %call = call %union.tree_node* @skip_simple_arithmetic(%union.tree_node* %0), !dbg !2835
  store %union.tree_node* %call, %union.tree_node** %expr.addr, align 8, !dbg !2836
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2837
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2837
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2837
  %bf.load = load i64, i64* %2, align 8, !dbg !2837
  %bf.clear = and i64 %bf.load, 65535, !dbg !2837
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2837
  %cmp = icmp eq i32 %bf.cast, 120, !dbg !2839
  br i1 %cmp, label %if.then, label %if.end, !dbg !2840

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2841
  %4 = load %union.tree_node*, %union.tree_node** @pending_sizes, align 8, !dbg !2841
  %call1 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %3, %union.tree_node* %4), !dbg !2841
  store %union.tree_node* %call1, %union.tree_node** @pending_sizes, align 8, !dbg !2842
  br label %if.end, !dbg !2843

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2844
}

declare dso_local %union.tree_node* @skip_simple_arithmetic(%union.tree_node*) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @put_pending_sizes(%union.tree_node* %chain) #0 !dbg !2845 {
entry:
  %chain.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chain, %union.tree_node** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain.addr, metadata !2846, metadata !DIExpression()), !dbg !2847
  %0 = load %union.tree_node*, %union.tree_node** @pending_sizes, align 8, !dbg !2848
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !2848
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2848

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2848
  br label %cond.end, !dbg !2848

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2848
  %1 = load %union.tree_node*, %union.tree_node** %chain.addr, align 8, !dbg !2849
  store %union.tree_node* %1, %union.tree_node** @pending_sizes, align 8, !dbg !2850
  ret void, !dbg !2851
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @variable_size(%union.tree_node* %size) #0 !dbg !2852 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %save = alloca %union.tree_node*, align 8
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !2853, metadata !DIExpression()), !dbg !2854
  call void @llvm.dbg.declare(metadata %union.tree_node** %save, metadata !2855, metadata !DIExpression()), !dbg !2856
  %0 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2857
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2857
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2857
  %bf.load = load i64, i64* %1, align 8, !dbg !2857
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !2857
  %bf.clear = and i64 %bf.lshr, 1, !dbg !2857
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2857
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !2857
  br i1 %tobool, label %if.then, label %if.end, !dbg !2859

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2860
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !2861
  br label %return, !dbg !2861

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2862
  %cmp = icmp ne %union.tree_node* %3, null, !dbg !2862
  br i1 %cmp, label %land.lhs.true, label %if.end11, !dbg !2862

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2862
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !2862
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !2862
  %bf.load2 = load i64, i64* %5, align 8, !dbg !2862
  %bf.lshr3 = lshr i64 %bf.load2, 17, !dbg !2862
  %bf.clear4 = and i64 %bf.lshr3, 1, !dbg !2862
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !2862
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !2862
  br i1 %tobool6, label %if.end11, label %land.lhs.true7, !dbg !2862

land.lhs.true7:                                   ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2862
  %call = call zeroext i8 @contains_placeholder_p(%union.tree_node* %6), !dbg !2862
  %conv = zext i8 %call to i32, !dbg !2862
  %tobool8 = icmp ne i32 %conv, 0, !dbg !2862
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !2864

if.then9:                                         ; preds = %land.lhs.true7
  %7 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2865
  %call10 = call %union.tree_node* @self_referential_size(%union.tree_node* %7), !dbg !2866
  store %union.tree_node* %call10, %union.tree_node** %retval, align 8, !dbg !2867
  br label %return, !dbg !2867

if.end11:                                         ; preds = %land.lhs.true7, %land.lhs.true, %if.end
  %8 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 0), align 8, !dbg !2868
  %call12 = call i32 %8(), !dbg !2870
  %cmp13 = icmp slt i32 %call12, 0, !dbg !2871
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !2872

if.then15:                                        ; preds = %if.end11
  %9 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2873
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !2874
  br label %return, !dbg !2874

if.end16:                                         ; preds = %if.end11
  %10 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2875
  %call17 = call %union.tree_node* @save_expr(%union.tree_node* %10), !dbg !2876
  store %union.tree_node* %call17, %union.tree_node** %size.addr, align 8, !dbg !2877
  %11 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2878
  %call18 = call %union.tree_node* @skip_simple_arithmetic(%union.tree_node* %11), !dbg !2879
  store %union.tree_node* %call18, %union.tree_node** %save, align 8, !dbg !2880
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2881
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2881
  %tobool19 = icmp ne %struct.function* %add.ptr, null, !dbg !2881
  br i1 %tobool19, label %land.lhs.true20, label %if.end27, !dbg !2883

land.lhs.true20:                                  ; preds = %if.end16
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2884
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !2884
  %dont_save_pending_sizes_p = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 20, !dbg !2885
  %bf.load22 = load i32, i32* %dont_save_pending_sizes_p, align 8, !dbg !2885
  %bf.lshr23 = lshr i32 %bf.load22, 23, !dbg !2885
  %bf.clear24 = and i32 %bf.lshr23, 1, !dbg !2885
  %tobool25 = icmp ne i32 %bf.clear24, 0, !dbg !2884
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !2886

if.then26:                                        ; preds = %land.lhs.true20
  %14 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2887
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !2888
  br label %return, !dbg !2888

if.end27:                                         ; preds = %land.lhs.true20, %if.end16
  %15 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 0), align 8, !dbg !2889
  %call28 = call i32 %15(), !dbg !2891
  %tobool29 = icmp ne i32 %call28, 0, !dbg !2891
  br i1 %tobool29, label %if.then30, label %if.end39, !dbg !2892

if.then30:                                        ; preds = %if.end27
  %16 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2893
  %base31 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2893
  %17 = bitcast %struct.tree_base* %base31 to i64*, !dbg !2893
  %bf.load32 = load i64, i64* %17, align 8, !dbg !2893
  %bf.lshr33 = lshr i64 %bf.load32, 17, !dbg !2893
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !2893
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !2893
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !2893
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !2896

if.then37:                                        ; preds = %if.then30
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0)), !dbg !2897
  br label %if.end38, !dbg !2897

if.else:                                          ; preds = %if.then30
  call void (i8*, ...) @error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0)), !dbg !2898
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then37
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 16, !dbg !2899
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !2900
  br label %return, !dbg !2900

if.end39:                                         ; preds = %if.end27
  %19 = load %union.tree_node*, %union.tree_node** %save, align 8, !dbg !2901
  call void @put_pending_size(%union.tree_node* %19), !dbg !2902
  %20 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2903
  store %union.tree_node* %20, %union.tree_node** %retval, align 8, !dbg !2904
  br label %return, !dbg !2904

return:                                           ; preds = %if.end39, %if.end38, %if.then26, %if.then15, %if.then9, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2905
  ret %union.tree_node* %21, !dbg !2905
}

declare dso_local zeroext i8 @contains_placeholder_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @self_referential_size(%union.tree_node* %size) #0 !dbg !2807 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %size.addr = alloca %union.tree_node*, align 8
  %self_refs = alloca %struct.VEC_tree_heap*, align 8
  %param_type_list = alloca %union.tree_node*, align 8
  %param_decl_list = alloca %union.tree_node*, align 8
  %arg_list = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %ref = alloca %union.tree_node*, align 8
  %return_type = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %fnname = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %buf = alloca [128 x i8], align 16
  %subst = alloca %union.tree_node*, align 8
  %param_name = alloca %union.tree_node*, align 8
  %param_type = alloca %union.tree_node*, align 8
  %param_decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !2906, metadata !DIExpression()), !dbg !2907
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %self_refs, metadata !2908, metadata !DIExpression()), !dbg !2914
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %self_refs, align 8, !dbg !2914
  call void @llvm.dbg.declare(metadata %union.tree_node** %param_type_list, metadata !2915, metadata !DIExpression()), !dbg !2916
  store %union.tree_node* null, %union.tree_node** %param_type_list, align 8, !dbg !2916
  call void @llvm.dbg.declare(metadata %union.tree_node** %param_decl_list, metadata !2917, metadata !DIExpression()), !dbg !2918
  store %union.tree_node* null, %union.tree_node** %param_decl_list, align 8, !dbg !2918
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_list, metadata !2919, metadata !DIExpression()), !dbg !2920
  store %union.tree_node* null, %union.tree_node** %arg_list, align 8, !dbg !2920
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !2921, metadata !DIExpression()), !dbg !2922
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !2923, metadata !DIExpression()), !dbg !2924
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_type, metadata !2925, metadata !DIExpression()), !dbg !2926
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !2927, metadata !DIExpression()), !dbg !2928
  call void @llvm.dbg.declare(metadata %union.tree_node** %fnname, metadata !2929, metadata !DIExpression()), !dbg !2930
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !2931, metadata !DIExpression()), !dbg !2932
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2933, metadata !DIExpression()), !dbg !2934
  call void @llvm.dbg.declare(metadata [128 x i8]* %buf, metadata !2935, metadata !DIExpression()), !dbg !2939
  %0 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2940
  %call = call %union.tree_node* @skip_simple_arithmetic(%union.tree_node* %0), !dbg !2941
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !2942
  %1 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2943
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !2943
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !2943
  %bf.load = load i64, i64* %2, align 8, !dbg !2943
  %bf.clear = and i64 %bf.load, 65535, !dbg !2943
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2943
  %cmp = icmp eq i32 %bf.cast, 59, !dbg !2945
  br i1 %cmp, label %if.then, label %if.end, !dbg !2946

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2947
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !2948
  br label %return, !dbg !2948

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2949
  call void @find_placeholder_in_expr(%union.tree_node* %4, %struct.VEC_tree_heap** %self_refs), !dbg !2950
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %self_refs, align 8, !dbg !2951
  %tobool = icmp ne %struct.VEC_tree_heap* %5, null, !dbg !2951
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2951

cond.true:                                        ; preds = %if.end
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %self_refs, align 8, !dbg !2951
  %base1 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !2951
  br label %cond.end, !dbg !2951

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2951

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !2951
  %call2 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !2951
  %cmp3 = icmp ugt i32 %call2, 0, !dbg !2951
  br i1 %cmp3, label %cond.false5, label %cond.true4, !dbg !2951

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2951
  br label %cond.end6, !dbg !2951

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !2951

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !2951
  %7 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2952
  store %union.tree_node* %7, %union.tree_node** %t, align 8, !dbg !2953
  %call8 = call %union.tree_node* @walk_tree_1(%union.tree_node** %t, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_self_referential_tree_r, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !2954
  %cmp9 = icmp ne %union.tree_node* %call8, null, !dbg !2956
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !2957

if.then10:                                        ; preds = %cond.end6
  %8 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !2958
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !2959
  br label %return, !dbg !2959

if.end11:                                         ; preds = %cond.end6
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !2960
  store %union.tree_node* %9, %union.tree_node** %size.addr, align 8, !dbg !2961
  store i32 0, i32* %i, align 4, !dbg !2962
  br label %for.cond, !dbg !2964

for.cond:                                         ; preds = %for.inc, %if.end11
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %self_refs, align 8, !dbg !2965
  %tobool12 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !2965
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !2965

cond.true13:                                      ; preds = %for.cond
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %self_refs, align 8, !dbg !2965
  %base14 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !2965
  br label %cond.end16, !dbg !2965

cond.false15:                                     ; preds = %for.cond
  br label %cond.end16, !dbg !2965

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !2965
  %12 = load i32, i32* %i, align 4, !dbg !2965
  %call18 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond17, i32 %12, %union.tree_node** %ref), !dbg !2965
  %tobool19 = icmp ne i32 %call18, 0, !dbg !2967
  br i1 %tobool19, label %for.body, label %for.end, !dbg !2967

for.body:                                         ; preds = %cond.end16
  call void @llvm.dbg.declare(metadata %union.tree_node** %subst, metadata !2968, metadata !DIExpression()), !dbg !2970
  call void @llvm.dbg.declare(metadata %union.tree_node** %param_name, metadata !2971, metadata !DIExpression()), !dbg !2972
  call void @llvm.dbg.declare(metadata %union.tree_node** %param_type, metadata !2973, metadata !DIExpression()), !dbg !2974
  call void @llvm.dbg.declare(metadata %union.tree_node** %param_decl, metadata !2975, metadata !DIExpression()), !dbg !2976
  %13 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2977
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !2977
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !2977
  %bf.load21 = load i64, i64* %14, align 8, !dbg !2977
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !2977
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !2977
  %idxprom = sext i32 %bf.cast23 to i64, !dbg !2977
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2977
  %15 = load i32, i32* %arrayidx, align 4, !dbg !2977
  %cmp24 = icmp eq i32 %15, 3, !dbg !2977
  br i1 %cmp24, label %if.then25, label %if.else, !dbg !2979

if.then25:                                        ; preds = %for.body
  %16 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2980
  %base26 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !2980
  %17 = bitcast %struct.tree_base* %base26 to i64*, !dbg !2980
  %bf.load27 = load i64, i64* %17, align 8, !dbg !2980
  %bf.lshr = lshr i64 %bf.load27, 20, !dbg !2980
  %bf.clear28 = and i64 %bf.lshr, 1, !dbg !2980
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !2980
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !2980
  br i1 %tobool30, label %cond.false32, label %cond.true31, !dbg !2980

cond.true31:                                      ; preds = %if.then25
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 265, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2980
  br label %cond.end33, !dbg !2980

cond.false32:                                     ; preds = %if.then25
  br label %cond.end33, !dbg !2980

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !2980
  %18 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2982
  store %union.tree_node* %18, %union.tree_node** %subst, align 8, !dbg !2983
  br label %if.end44, !dbg !2984

if.else:                                          ; preds = %for.body
  %19 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2985
  %base35 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !2985
  %20 = bitcast %struct.tree_base* %base35 to i64*, !dbg !2985
  %bf.load36 = load i64, i64* %20, align 8, !dbg !2985
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !2985
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !2985
  %cmp39 = icmp eq i32 %bf.cast38, 121, !dbg !2987
  br i1 %cmp39, label %if.then40, label %if.else41, !dbg !2988

if.then40:                                        ; preds = %if.else
  %21 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2989
  store %union.tree_node* %21, %union.tree_node** %subst, align 8, !dbg !2990
  br label %if.end43, !dbg !2991

if.else41:                                        ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !2992
  %exp = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !2992
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !2992
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !2992
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx42, align 8, !dbg !2992
  store %union.tree_node* %23, %union.tree_node** %subst, align 8, !dbg !2993
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then40
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %cond.end33
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !2994
  %24 = load i32, i32* %i, align 4, !dbg !2995
  %call45 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i32 %24), !dbg !2996
  %arraydecay46 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !2997
  %call47 = call %union.tree_node* @get_identifier(i8* %arraydecay46), !dbg !2998
  store %union.tree_node* %call47, %union.tree_node** %param_name, align 8, !dbg !2999
  %25 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3000
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !3000
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3000
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3000
  store %union.tree_node* %26, %union.tree_node** %param_type, align 8, !dbg !3001
  %27 = load i32, i32* @input_location, align 4, !dbg !3002
  %28 = load %union.tree_node*, %union.tree_node** %param_name, align 8, !dbg !3002
  %29 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3002
  %call48 = call %union.tree_node* @build_decl_stat(i32 %27, i32 34, %union.tree_node* %28, %union.tree_node* %29), !dbg !3002
  store %union.tree_node* %call48, %union.tree_node** %param_decl, align 8, !dbg !3003
  %30 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 1), align 8, !dbg !3004
  %call49 = call zeroext i8 %30(%union.tree_node* null), !dbg !3006
  %conv = zext i8 %call49 to i32, !dbg !3006
  %tobool50 = icmp ne i32 %conv, 0, !dbg !3006
  br i1 %tobool50, label %land.lhs.true, label %if.else81, !dbg !3007

land.lhs.true:                                    ; preds = %if.end44
  %31 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3008
  %base51 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !3008
  %32 = bitcast %struct.tree_base* %base51 to i64*, !dbg !3008
  %bf.load52 = load i64, i64* %32, align 8, !dbg !3008
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !3008
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !3008
  %cmp55 = icmp eq i32 %bf.cast54, 6, !dbg !3008
  br i1 %cmp55, label %land.lhs.true70, label %lor.lhs.false, !dbg !3008

lor.lhs.false:                                    ; preds = %land.lhs.true
  %33 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3008
  %base57 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !3008
  %34 = bitcast %struct.tree_base* %base57 to i64*, !dbg !3008
  %bf.load58 = load i64, i64* %34, align 8, !dbg !3008
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !3008
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !3008
  %cmp61 = icmp eq i32 %bf.cast60, 7, !dbg !3008
  br i1 %cmp61, label %land.lhs.true70, label %lor.lhs.false63, !dbg !3008

lor.lhs.false63:                                  ; preds = %lor.lhs.false
  %35 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3008
  %base64 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !3008
  %36 = bitcast %struct.tree_base* %base64 to i64*, !dbg !3008
  %bf.load65 = load i64, i64* %36, align 8, !dbg !3008
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !3008
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !3008
  %cmp68 = icmp eq i32 %bf.cast67, 8, !dbg !3008
  br i1 %cmp68, label %land.lhs.true70, label %if.else81, !dbg !3009

land.lhs.true70:                                  ; preds = %lor.lhs.false63, %lor.lhs.false, %land.lhs.true
  %37 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3010
  %type71 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !3010
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type71, i32 0, i32 6, !dbg !3010
  %bf.load72 = load i32, i32* %precision, align 4, !dbg !3010
  %bf.clear73 = and i32 %bf.load72, 1023, !dbg !3010
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3011
  %type74 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !3011
  %precision75 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type74, i32 0, i32 6, !dbg !3011
  %bf.load76 = load i32, i32* %precision75, align 4, !dbg !3011
  %bf.clear77 = and i32 %bf.load76, 1023, !dbg !3011
  %cmp78 = icmp slt i32 %bf.clear73, %bf.clear77, !dbg !3012
  br i1 %cmp78, label %if.then80, label %if.else81, !dbg !3013

if.then80:                                        ; preds = %land.lhs.true70
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !3014
  %40 = load %union.tree_node*, %union.tree_node** %param_decl, align 8, !dbg !3015
  %decl_common = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !3015
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !3015
  store %union.tree_node* %39, %union.tree_node** %initial, align 8, !dbg !3016
  br label %if.end84, !dbg !3015

if.else81:                                        ; preds = %land.lhs.true70, %lor.lhs.false63, %if.end44
  %41 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3017
  %42 = load %union.tree_node*, %union.tree_node** %param_decl, align 8, !dbg !3018
  %decl_common82 = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !3018
  %initial83 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common82, i32 0, i32 5, !dbg !3018
  store %union.tree_node* %41, %union.tree_node** %initial83, align 8, !dbg !3019
  br label %if.end84

if.end84:                                         ; preds = %if.else81, %if.then80
  %43 = load %union.tree_node*, %union.tree_node** %param_decl, align 8, !dbg !3020
  %decl_common85 = bitcast %union.tree_node* %43 to %struct.tree_decl_common*, !dbg !3020
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common85, i32 0, i32 2, !dbg !3020
  %44 = bitcast i40* %artificial_flag to i64*, !dbg !3020
  %bf.load86 = load i64, i64* %44, align 8, !dbg !3021
  %bf.clear87 = and i64 %bf.load86, -4097, !dbg !3021
  %bf.set = or i64 %bf.clear87, 4096, !dbg !3021
  store i64 %bf.set, i64* %44, align 8, !dbg !3021
  %45 = load %union.tree_node*, %union.tree_node** %param_decl, align 8, !dbg !3022
  %base88 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !3022
  %46 = bitcast %struct.tree_base* %base88 to i64*, !dbg !3022
  %bf.load89 = load i64, i64* %46, align 8, !dbg !3023
  %bf.clear90 = and i64 %bf.load89, -1048577, !dbg !3023
  %bf.set91 = or i64 %bf.clear90, 1048576, !dbg !3023
  store i64 %bf.set91, i64* %46, align 8, !dbg !3023
  %47 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !3024
  %48 = load %union.tree_node*, %union.tree_node** %subst, align 8, !dbg !3025
  %49 = load %union.tree_node*, %union.tree_node** %param_decl, align 8, !dbg !3026
  %call92 = call %union.tree_node* @substitute_in_expr(%union.tree_node* %47, %union.tree_node* %48, %union.tree_node* %49), !dbg !3027
  store %union.tree_node* %call92, %union.tree_node** %size.addr, align 8, !dbg !3028
  %50 = load %union.tree_node*, %union.tree_node** %param_type, align 8, !dbg !3029
  %51 = load %union.tree_node*, %union.tree_node** %param_type_list, align 8, !dbg !3029
  %call93 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %50, %union.tree_node* %51), !dbg !3029
  store %union.tree_node* %call93, %union.tree_node** %param_type_list, align 8, !dbg !3030
  %52 = load %union.tree_node*, %union.tree_node** %param_decl, align 8, !dbg !3031
  %53 = load %union.tree_node*, %union.tree_node** %param_decl_list, align 8, !dbg !3032
  %call94 = call %union.tree_node* @chainon(%union.tree_node* %52, %union.tree_node* %53), !dbg !3033
  store %union.tree_node* %call94, %union.tree_node** %param_decl_list, align 8, !dbg !3034
  %54 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3035
  %55 = load %union.tree_node*, %union.tree_node** %arg_list, align 8, !dbg !3035
  %call95 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %54, %union.tree_node* %55), !dbg !3035
  store %union.tree_node* %call95, %union.tree_node** %arg_list, align 8, !dbg !3036
  br label %for.inc, !dbg !3037

for.inc:                                          ; preds = %if.end84
  %56 = load i32, i32* %i, align 4, !dbg !3038
  %inc = add i32 %56, 1, !dbg !3038
  store i32 %inc, i32* %i, align 4, !dbg !3038
  br label %for.cond, !dbg !3039, !llvm.loop !3040

for.end:                                          ; preds = %cond.end16
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %self_refs), !dbg !3042
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3043
  %58 = load %union.tree_node*, %union.tree_node** %param_type_list, align 8, !dbg !3043
  %call96 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %57, %union.tree_node* %58), !dbg !3043
  store %union.tree_node* %call96, %union.tree_node** %param_type_list, align 8, !dbg !3044
  %59 = load %union.tree_node*, %union.tree_node** %param_type_list, align 8, !dbg !3045
  %call97 = call %union.tree_node* @nreverse(%union.tree_node* %59), !dbg !3046
  store %union.tree_node* %call97, %union.tree_node** %param_type_list, align 8, !dbg !3047
  %60 = load %union.tree_node*, %union.tree_node** %param_decl_list, align 8, !dbg !3048
  %call98 = call %union.tree_node* @nreverse(%union.tree_node* %60), !dbg !3049
  store %union.tree_node* %call98, %union.tree_node** %param_decl_list, align 8, !dbg !3050
  %61 = load %union.tree_node*, %union.tree_node** %arg_list, align 8, !dbg !3051
  %call99 = call %union.tree_node* @nreverse(%union.tree_node* %61), !dbg !3052
  store %union.tree_node* %call99, %union.tree_node** %arg_list, align 8, !dbg !3053
  %62 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !3054
  %common100 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !3054
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !3054
  %63 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !3054
  store %union.tree_node* %63, %union.tree_node** %return_type, align 8, !dbg !3055
  %64 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !3056
  %65 = load %union.tree_node*, %union.tree_node** %param_type_list, align 8, !dbg !3057
  %call102 = call %union.tree_node* @build_function_type(%union.tree_node* %64, %union.tree_node* %65), !dbg !3058
  store %union.tree_node* %call102, %union.tree_node** %fntype, align 8, !dbg !3059
  %arraydecay103 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !3060
  %66 = load i64, i64* @self_referential_size.fnno, align 8, !dbg !3061
  %inc104 = add i64 %66, 1, !dbg !3061
  store i64 %inc104, i64* @self_referential_size.fnno, align 8, !dbg !3061
  %call105 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay103, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0), i64 %66), !dbg !3062
  %arraydecay106 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i64 0, i64 0, !dbg !3063
  %call107 = call %union.tree_node* @get_file_function_name(i8* %arraydecay106), !dbg !3064
  store %union.tree_node* %call107, %union.tree_node** %fnname, align 8, !dbg !3065
  %67 = load i32, i32* @input_location, align 4, !dbg !3066
  %68 = load %union.tree_node*, %union.tree_node** %fnname, align 8, !dbg !3066
  %69 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !3066
  %call108 = call %union.tree_node* @build_decl_stat(i32 %67, i32 29, %union.tree_node* %68, %union.tree_node* %69), !dbg !3066
  store %union.tree_node* %call108, %union.tree_node** %fndecl, align 8, !dbg !3067
  %70 = load %union.tree_node*, %union.tree_node** %param_decl_list, align 8, !dbg !3068
  store %union.tree_node* %70, %union.tree_node** %t, align 8, !dbg !3070
  br label %for.cond109, !dbg !3071

for.cond109:                                      ; preds = %for.inc112, %for.end
  %71 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3072
  %tobool110 = icmp ne %union.tree_node* %71, null, !dbg !3074
  br i1 %tobool110, label %for.body111, label %for.end114, !dbg !3074

for.body111:                                      ; preds = %for.cond109
  %72 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3075
  %73 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3076
  %decl_minimal = bitcast %union.tree_node* %73 to %struct.tree_decl_minimal*, !dbg !3076
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3076
  store %union.tree_node* %72, %union.tree_node** %context, align 8, !dbg !3077
  br label %for.inc112, !dbg !3076

for.inc112:                                       ; preds = %for.body111
  %74 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3078
  %common113 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !3078
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common113, i32 0, i32 1, !dbg !3078
  %75 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3078
  store %union.tree_node* %75, %union.tree_node** %t, align 8, !dbg !3079
  br label %for.cond109, !dbg !3080, !llvm.loop !3081

for.end114:                                       ; preds = %for.cond109
  %76 = load %union.tree_node*, %union.tree_node** %param_decl_list, align 8, !dbg !3083
  %77 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3084
  %decl_non_common = bitcast %union.tree_node* %77 to %struct.tree_decl_non_common*, !dbg !3084
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !3084
  store %union.tree_node* %76, %union.tree_node** %arguments, align 8, !dbg !3085
  %78 = load i32, i32* @input_location, align 4, !dbg !3086
  %79 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !3086
  %call115 = call %union.tree_node* @build_decl_stat(i32 %78, i32 36, %union.tree_node* null, %union.tree_node* %79), !dbg !3086
  %80 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3087
  %decl_non_common116 = bitcast %union.tree_node* %80 to %struct.tree_decl_non_common*, !dbg !3087
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common116, i32 0, i32 3, !dbg !3087
  store %union.tree_node* %call115, %union.tree_node** %result, align 8, !dbg !3088
  %81 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3089
  %82 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3090
  %decl_non_common117 = bitcast %union.tree_node* %82 to %struct.tree_decl_non_common*, !dbg !3090
  %result118 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common117, i32 0, i32 3, !dbg !3090
  %83 = load %union.tree_node*, %union.tree_node** %result118, align 8, !dbg !3090
  %decl_minimal119 = bitcast %union.tree_node* %83 to %struct.tree_decl_minimal*, !dbg !3090
  %context120 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal119, i32 0, i32 4, !dbg !3090
  store %union.tree_node* %81, %union.tree_node** %context120, align 8, !dbg !3091
  %84 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3092
  %decl_common121 = bitcast %union.tree_node* %84 to %struct.tree_decl_common*, !dbg !3092
  %artificial_flag122 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common121, i32 0, i32 2, !dbg !3092
  %85 = bitcast i40* %artificial_flag122 to i64*, !dbg !3092
  %bf.load123 = load i64, i64* %85, align 8, !dbg !3093
  %bf.clear124 = and i64 %bf.load123, -4097, !dbg !3093
  %bf.set125 = or i64 %bf.clear124, 4096, !dbg !3093
  store i64 %bf.set125, i64* %85, align 8, !dbg !3093
  %86 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3094
  %decl_common126 = bitcast %union.tree_node* %86 to %struct.tree_decl_common*, !dbg !3094
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common126, i32 0, i32 2, !dbg !3094
  %87 = bitcast i40* %ignored_flag to i64*, !dbg !3094
  %bf.load127 = load i64, i64* %87, align 8, !dbg !3095
  %bf.clear128 = and i64 %bf.load127, -1025, !dbg !3095
  %bf.set129 = or i64 %bf.clear128, 1024, !dbg !3095
  store i64 %bf.set129, i64* %87, align 8, !dbg !3095
  %88 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3096
  %base130 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !3096
  %89 = bitcast %struct.tree_base* %base130 to i64*, !dbg !3096
  %bf.load131 = load i64, i64* %89, align 8, !dbg !3097
  %bf.clear132 = and i64 %bf.load131, -1048577, !dbg !3097
  %bf.set133 = or i64 %bf.clear132, 1048576, !dbg !3097
  store i64 %bf.set133, i64* %89, align 8, !dbg !3097
  %90 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3098
  %base134 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !3098
  %91 = bitcast %struct.tree_base* %base134 to i64*, !dbg !3098
  %bf.load135 = load i64, i64* %91, align 8, !dbg !3099
  %bf.clear136 = and i64 %bf.load135, -33554433, !dbg !3099
  %bf.set137 = or i64 %bf.clear136, 33554432, !dbg !3099
  store i64 %bf.set137, i64* %91, align 8, !dbg !3099
  %92 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3100
  %function_decl = bitcast %union.tree_node* %92 to %struct.tree_function_decl*, !dbg !3100
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3100
  %bf.load138 = load i32, i32* %declared_inline_flag, align 8, !dbg !3101
  %bf.clear139 = and i32 %bf.load138, -2097153, !dbg !3101
  %bf.set140 = or i32 %bf.clear139, 2097152, !dbg !3101
  store i32 %bf.set140, i32* %declared_inline_flag, align 8, !dbg !3101
  %call141 = call %union.tree_node* @make_node_stat(i32 4), !dbg !3102
  %93 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3103
  %decl_common142 = bitcast %union.tree_node* %93 to %struct.tree_decl_common*, !dbg !3103
  %initial143 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common142, i32 0, i32 5, !dbg !3103
  store %union.tree_node* %call141, %union.tree_node** %initial143, align 8, !dbg !3104
  %94 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3105
  %95 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3106
  %decl_common144 = bitcast %union.tree_node* %95 to %struct.tree_decl_common*, !dbg !3106
  %initial145 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common144, i32 0, i32 5, !dbg !3106
  %96 = load %union.tree_node*, %union.tree_node** %initial145, align 8, !dbg !3106
  %block = bitcast %union.tree_node* %96 to %struct.tree_block*, !dbg !3106
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 6, !dbg !3106
  store %union.tree_node* %94, %union.tree_node** %supercontext, align 8, !dbg !3107
  %97 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !3108
  %98 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3108
  %decl_non_common146 = bitcast %union.tree_node* %98 to %struct.tree_decl_non_common*, !dbg !3108
  %result147 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common146, i32 0, i32 3, !dbg !3108
  %99 = load %union.tree_node*, %union.tree_node** %result147, align 8, !dbg !3108
  %100 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !3108
  %call148 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %97, %union.tree_node* %99, %union.tree_node* %100), !dbg !3108
  store %union.tree_node* %call148, %union.tree_node** %t, align 8, !dbg !3109
  %101 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3110
  %102 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3110
  %call149 = call %union.tree_node* @build1_stat(i32 135, %union.tree_node* %101, %union.tree_node* %102), !dbg !3110
  %103 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3111
  %decl_non_common150 = bitcast %union.tree_node* %103 to %struct.tree_decl_non_common*, !dbg !3111
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common150, i32 0, i32 1, !dbg !3111
  store %union.tree_node* %call149, %union.tree_node** %saved_tree, align 8, !dbg !3112
  %104 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3113
  %base151 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !3113
  %105 = bitcast %struct.tree_base* %base151 to i64*, !dbg !3113
  %bf.load152 = load i64, i64* %105, align 8, !dbg !3114
  %bf.clear153 = and i64 %bf.load152, -67108865, !dbg !3114
  %bf.set154 = or i64 %bf.clear153, 67108864, !dbg !3114
  store i64 %bf.set154, i64* %105, align 8, !dbg !3114
  %106 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3115
  %call155 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** @size_functions, %union.tree_node* %106), !dbg !3115
  %107 = load i32, i32* @input_location, align 4, !dbg !3116
  %108 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3117
  %109 = load %union.tree_node*, %union.tree_node** %arg_list, align 8, !dbg !3118
  %call156 = call %union.tree_node* @build_function_call_expr(i32 %107, %union.tree_node* %108, %union.tree_node* %109), !dbg !3119
  store %union.tree_node* %call156, %union.tree_node** %retval, align 8, !dbg !3120
  br label %return, !dbg !3120

return:                                           ; preds = %for.end114, %if.then10, %if.then
  %110 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3121
  ret %union.tree_node* %110, !dbg !3121
}

declare dso_local %union.tree_node* @save_expr(%union.tree_node*) #2

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @finalize_size_functions() #0 !dbg !3122 {
entry:
  %i = alloca i32, align 4
  %fndecl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3123, metadata !DIExpression()), !dbg !3124
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !3125, metadata !DIExpression()), !dbg !3126
  store i32 0, i32* %i, align 4, !dbg !3127
  br label %for.cond, !dbg !3129

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @size_functions, align 8, !dbg !3130
  %tobool = icmp ne %struct.VEC_tree_gc* %0, null, !dbg !3130
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3130

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** @size_functions, align 8, !dbg !3130
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %1, i32 0, i32 0, !dbg !3130
  br label %cond.end, !dbg !3130

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3130

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3130
  %2 = load i32, i32* %i, align 4, !dbg !3130
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %fndecl), !dbg !3130
  %tobool1 = icmp ne i32 %call, 0, !dbg !3132
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3132

for.body:                                         ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3133
  call void @dump_function(i32 4, %union.tree_node* %3), !dbg !3135
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3136
  call void @gimplify_function_tree(%union.tree_node* %4), !dbg !3137
  %5 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3138
  call void @dump_function(i32 5, %union.tree_node* %5), !dbg !3139
  %6 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3140
  call void @cgraph_finalize_function(%union.tree_node* %6, i8 zeroext 0), !dbg !3141
  br label %for.inc, !dbg !3142

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !3143
  %inc = add i32 %7, 1, !dbg !3143
  store i32 %inc, i32* %i, align 4, !dbg !3143
  br label %for.cond, !dbg !3144, !llvm.loop !3145

for.end:                                          ; preds = %cond.end
  call void @VEC_tree_gc_free(%struct.VEC_tree_gc** @size_functions), !dbg !3147
  ret void, !dbg !3148
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !3149 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3154, metadata !DIExpression()), !dbg !3155
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3156, metadata !DIExpression()), !dbg !3155
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !3157, metadata !DIExpression()), !dbg !3155
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3158
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3158
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3158

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3158
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3158
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !3158
  %3 = load i32, i32* %num, align 8, !dbg !3158
  %cmp = icmp ult i32 %1, %3, !dbg !3158
  br i1 %cmp, label %if.then, label %if.else, !dbg !3155

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3160
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !3160
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3160
  %idxprom = zext i32 %5 to i64, !dbg !3160
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3160
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3160
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !3160
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !3160
  store i32 1, i32* %retval, align 4, !dbg !3160
  br label %return, !dbg !3160

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !3162
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !3162
  store i32 0, i32* %retval, align 4, !dbg !3162
  br label %return, !dbg !3162

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3155
  ret i32 %9, !dbg !3155
}

declare dso_local void @dump_function(i32, %union.tree_node*) #2

declare dso_local void @gimplify_function_tree(%union.tree_node*) #2

declare dso_local void @cgraph_finalize_function(%union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_gc_free(%struct.VEC_tree_gc** %vec_) #0 !dbg !3164 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !3168, metadata !DIExpression()), !dbg !3169
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !3170
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !3170
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !3170
  br i1 %tobool, label %if.then, label %if.end, !dbg !3169

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !3170
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !3170
  %4 = bitcast %struct.VEC_tree_gc* %3 to i8*, !dbg !3170
  call void @ggc_free(i8* %4), !dbg !3170
  br label %if.end, !dbg !3170

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !3169
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %5, align 8, !dbg !3169
  ret void, !dbg !3169
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mode_for_size(i32 %size, i32 %mclass, i32 %limit) #0 !dbg !3172 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %mclass.addr = alloca i32, align 4
  %limit.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !3175, metadata !DIExpression()), !dbg !3176
  store i32 %mclass, i32* %mclass.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mclass.addr, metadata !3177, metadata !DIExpression()), !dbg !3178
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !3179, metadata !DIExpression()), !dbg !3180
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3181, metadata !DIExpression()), !dbg !3182
  %0 = load i32, i32* %limit.addr, align 4, !dbg !3183
  %tobool = icmp ne i32 %0, 0, !dbg !3183
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3185

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4, !dbg !3186
  %2 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 17), align 1, !dbg !3187
  %conv = zext i8 %2 to i16, !dbg !3187
  %conv1 = zext i16 %conv to i32, !dbg !3187
  %mul = mul nsw i32 %conv1, 8, !dbg !3187
  %conv2 = trunc i32 %mul to i16, !dbg !3187
  %conv3 = zext i16 %conv2 to i32, !dbg !3187
  %cmp = icmp ugt i32 %1, %conv3, !dbg !3188
  br i1 %cmp, label %if.then, label %if.end, !dbg !3189

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !3190
  br label %return, !dbg !3190

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %mclass.addr, align 4, !dbg !3191
  %idxprom = zext i32 %3 to i64, !dbg !3191
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 %idxprom, !dbg !3191
  %4 = load i8, i8* %arrayidx, align 1, !dbg !3191
  %conv5 = zext i8 %4 to i32, !dbg !3191
  store i32 %conv5, i32* %mode, align 4, !dbg !3193
  br label %for.cond, !dbg !3194

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %mode, align 4, !dbg !3195
  %cmp6 = icmp ne i32 %5, 0, !dbg !3197
  br i1 %cmp6, label %for.body, label %for.end, !dbg !3198

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %mode, align 4, !dbg !3199
  %idxprom8 = zext i32 %6 to i64, !dbg !3199
  %arrayidx9 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom8, !dbg !3199
  %7 = load i16, i16* %arrayidx9, align 2, !dbg !3199
  %conv10 = zext i16 %7 to i32, !dbg !3199
  %8 = load i32, i32* %size.addr, align 4, !dbg !3201
  %cmp11 = icmp eq i32 %conv10, %8, !dbg !3202
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !3203

if.then13:                                        ; preds = %for.body
  %9 = load i32, i32* %mode, align 4, !dbg !3204
  store i32 %9, i32* %retval, align 4, !dbg !3205
  br label %return, !dbg !3205

if.end14:                                         ; preds = %for.body
  br label %for.inc, !dbg !3201

for.inc:                                          ; preds = %if.end14
  %10 = load i32, i32* %mode, align 4, !dbg !3206
  %idxprom15 = zext i32 %10 to i64, !dbg !3206
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom15, !dbg !3206
  %11 = load i8, i8* %arrayidx16, align 1, !dbg !3206
  %conv17 = zext i8 %11 to i32, !dbg !3206
  store i32 %conv17, i32* %mode, align 4, !dbg !3207
  br label %for.cond, !dbg !3208, !llvm.loop !3209

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !3211
  br label %return, !dbg !3211

return:                                           ; preds = %for.end, %if.then13, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !3212
  ret i32 %12, !dbg !3212
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mode_for_size_tree(%union.tree_node* %size, i32 %mclass, i32 %limit) #0 !dbg !3213 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca %union.tree_node*, align 8
  %mclass.addr = alloca i32, align 4
  %limit.addr = alloca i32, align 4
  %uhwi = alloca i64, align 8
  %ui = alloca i32, align 4
  store %union.tree_node* %size, %union.tree_node** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %size.addr, metadata !3219, metadata !DIExpression()), !dbg !3220
  store i32 %mclass, i32* %mclass.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mclass.addr, metadata !3221, metadata !DIExpression()), !dbg !3222
  store i32 %limit, i32* %limit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %limit.addr, metadata !3223, metadata !DIExpression()), !dbg !3224
  call void @llvm.dbg.declare(metadata i64* %uhwi, metadata !3225, metadata !DIExpression()), !dbg !3226
  call void @llvm.dbg.declare(metadata i32* %ui, metadata !3227, metadata !DIExpression()), !dbg !3228
  %0 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !3229
  %call = call i32 @host_integerp(%union.tree_node* %0, i32 1), !dbg !3231
  %tobool = icmp ne i32 %call, 0, !dbg !3231
  br i1 %tobool, label %if.end, label %if.then, !dbg !3232

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3233
  br label %return, !dbg !3233

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %size.addr, align 8, !dbg !3234
  %call1 = call i64 @tree_low_cst(%union.tree_node* %1, i32 1), !dbg !3235
  store i64 %call1, i64* %uhwi, align 8, !dbg !3236
  %2 = load i64, i64* %uhwi, align 8, !dbg !3237
  %conv = trunc i64 %2 to i32, !dbg !3237
  store i32 %conv, i32* %ui, align 4, !dbg !3238
  %3 = load i64, i64* %uhwi, align 8, !dbg !3239
  %4 = load i32, i32* %ui, align 4, !dbg !3241
  %conv2 = zext i32 %4 to i64, !dbg !3241
  %cmp = icmp ne i64 %3, %conv2, !dbg !3242
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !3243

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !3244
  br label %return, !dbg !3244

if.end5:                                          ; preds = %if.end
  %5 = load i32, i32* %ui, align 4, !dbg !3245
  %6 = load i32, i32* %mclass.addr, align 4, !dbg !3246
  %7 = load i32, i32* %limit.addr, align 4, !dbg !3247
  %call6 = call i32 @mode_for_size(i32 %5, i32 %6, i32 %7), !dbg !3248
  store i32 %call6, i32* %retval, align 4, !dbg !3249
  br label %return, !dbg !3249

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3250
  ret i32 %8, !dbg !3250
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @smallest_mode_for_size(i32 %size, i32 %mclass) #0 !dbg !3251 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %mclass.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !3254, metadata !DIExpression()), !dbg !3255
  store i32 %mclass, i32* %mclass.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mclass.addr, metadata !3256, metadata !DIExpression()), !dbg !3257
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3258, metadata !DIExpression()), !dbg !3259
  %0 = load i32, i32* %mclass.addr, align 4, !dbg !3260
  %idxprom = zext i32 %0 to i64, !dbg !3260
  %arrayidx = getelementptr inbounds [18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 %idxprom, !dbg !3260
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3260
  %conv = zext i8 %1 to i32, !dbg !3260
  store i32 %conv, i32* %mode, align 4, !dbg !3262
  br label %for.cond, !dbg !3263

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %mode, align 4, !dbg !3264
  %cmp = icmp ne i32 %2, 0, !dbg !3266
  br i1 %cmp, label %for.body, label %for.end, !dbg !3267

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %mode, align 4, !dbg !3268
  %idxprom2 = zext i32 %3 to i64, !dbg !3268
  %arrayidx3 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom2, !dbg !3268
  %4 = load i16, i16* %arrayidx3, align 2, !dbg !3268
  %conv4 = zext i16 %4 to i32, !dbg !3268
  %5 = load i32, i32* %size.addr, align 4, !dbg !3270
  %cmp5 = icmp uge i32 %conv4, %5, !dbg !3271
  br i1 %cmp5, label %if.then, label %if.end, !dbg !3272

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %mode, align 4, !dbg !3273
  store i32 %6, i32* %retval, align 4, !dbg !3274
  br label %return, !dbg !3274

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3270

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %mode, align 4, !dbg !3275
  %idxprom7 = zext i32 %7 to i64, !dbg !3275
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom7, !dbg !3275
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !3275
  %conv9 = zext i8 %8 to i32, !dbg !3275
  store i32 %conv9, i32* %mode, align 4, !dbg !3276
  br label %for.cond, !dbg !3277, !llvm.loop !3278

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 430, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3280
  store i32 0, i32* %retval, align 4, !dbg !3281
  br label %return, !dbg !3281

return:                                           ; preds = %for.end, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3282
  ret i32 %9, !dbg !3282
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @int_mode_for_mode(i32 %mode) #0 !dbg !3283 {
entry:
  %mode.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3286, metadata !DIExpression()), !dbg !3287
  %0 = load i32, i32* %mode.addr, align 4, !dbg !3288
  %idxprom = zext i32 %0 to i64, !dbg !3288
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3288
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3288
  %conv = zext i8 %1 to i32, !dbg !3288
  switch i32 %conv, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 10, label %sw.bb1
    i32 11, label %sw.bb1
    i32 8, label %sw.bb1
    i32 9, label %sw.bb1
    i32 12, label %sw.bb1
    i32 17, label %sw.bb1
    i32 4, label %sw.bb1
    i32 6, label %sw.bb1
    i32 5, label %sw.bb1
    i32 7, label %sw.bb1
    i32 13, label %sw.bb1
    i32 15, label %sw.bb1
    i32 14, label %sw.bb1
    i32 16, label %sw.bb1
    i32 0, label %sw.bb8
    i32 1, label %sw.bb10
  ], !dbg !3289

sw.bb:                                            ; preds = %entry, %entry
  br label %sw.epilog, !dbg !3290

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !3292
  %idxprom2 = zext i32 %2 to i64, !dbg !3292
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom2, !dbg !3292
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !3292
  %conv4 = zext i8 %3 to i16, !dbg !3292
  %conv5 = zext i16 %conv4 to i32, !dbg !3292
  %mul = mul nsw i32 %conv5, 8, !dbg !3292
  %conv6 = trunc i32 %mul to i16, !dbg !3292
  %conv7 = zext i16 %conv6 to i32, !dbg !3292
  %call = call i32 @mode_for_size(i32 %conv7, i32 2, i32 0), !dbg !3293
  store i32 %call, i32* %mode.addr, align 4, !dbg !3294
  br label %sw.epilog, !dbg !3295

sw.bb8:                                           ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !3296
  %cmp = icmp eq i32 %4, 1, !dbg !3298
  br i1 %cmp, label %if.then, label %if.end, !dbg !3299

if.then:                                          ; preds = %sw.bb8
  br label %sw.epilog, !dbg !3300

if.end:                                           ; preds = %sw.bb8
  br label %sw.bb10, !dbg !3301

sw.bb10:                                          ; preds = %entry, %if.end
  br label %sw.default, !dbg !3301

sw.default:                                       ; preds = %entry, %sw.bb10
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 472, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3302
  br label %sw.epilog, !dbg !3303

sw.epilog:                                        ; preds = %sw.default, %if.then, %sw.bb1, %sw.bb
  %5 = load i32, i32* %mode.addr, align 4, !dbg !3304
  ret i32 %5, !dbg !3305
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_mode_alignment(i32 %mode) #0 !dbg !3306 {
entry:
  %mode.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3309, metadata !DIExpression()), !dbg !3310
  %0 = load i32, i32* @ix86_isa_flags, align 4, !dbg !3311
  %and = and i32 %0, 32, !dbg !3311
  %cmp = icmp ne i32 %and, 0, !dbg !3311
  %1 = zext i1 %cmp to i64, !dbg !3311
  %cond = select i1 %cmp, i32 256, i32 128, !dbg !3311
  %2 = load i32, i32* %mode.addr, align 4, !dbg !3311
  %idxprom = zext i32 %2 to i64, !dbg !3311
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_base_align, i64 0, i64 %idxprom, !dbg !3311
  %3 = load i8, i8* %arrayidx, align 1, !dbg !3311
  %conv = zext i8 %3 to i32, !dbg !3311
  %mul = mul nsw i32 %conv, 8, !dbg !3311
  %cmp1 = icmp sgt i32 1, %mul, !dbg !3311
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !3311

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !3311

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !3311
  %idxprom3 = zext i32 %4 to i64, !dbg !3311
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_base_align, i64 0, i64 %idxprom3, !dbg !3311
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !3311
  %conv5 = zext i8 %5 to i32, !dbg !3311
  %mul6 = mul nsw i32 %conv5, 8, !dbg !3311
  br label %cond.end, !dbg !3311

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond7 = phi i32 [ 1, %cond.true ], [ %mul6, %cond.false ], !dbg !3311
  %cmp8 = icmp slt i32 %cond, %cond7, !dbg !3311
  br i1 %cmp8, label %cond.true10, label %cond.false15, !dbg !3311

cond.true10:                                      ; preds = %cond.end
  %6 = load i32, i32* @ix86_isa_flags, align 4, !dbg !3311
  %and11 = and i32 %6, 32, !dbg !3311
  %cmp12 = icmp ne i32 %and11, 0, !dbg !3311
  %7 = zext i1 %cmp12 to i64, !dbg !3311
  %cond14 = select i1 %cmp12, i32 256, i32 128, !dbg !3311
  br label %cond.end30, !dbg !3311

cond.false15:                                     ; preds = %cond.end
  %8 = load i32, i32* %mode.addr, align 4, !dbg !3311
  %idxprom16 = zext i32 %8 to i64, !dbg !3311
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_base_align, i64 0, i64 %idxprom16, !dbg !3311
  %9 = load i8, i8* %arrayidx17, align 1, !dbg !3311
  %conv18 = zext i8 %9 to i32, !dbg !3311
  %mul19 = mul nsw i32 %conv18, 8, !dbg !3311
  %cmp20 = icmp sgt i32 1, %mul19, !dbg !3311
  br i1 %cmp20, label %cond.true22, label %cond.false23, !dbg !3311

cond.true22:                                      ; preds = %cond.false15
  br label %cond.end28, !dbg !3311

cond.false23:                                     ; preds = %cond.false15
  %10 = load i32, i32* %mode.addr, align 4, !dbg !3311
  %idxprom24 = zext i32 %10 to i64, !dbg !3311
  %arrayidx25 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_base_align, i64 0, i64 %idxprom24, !dbg !3311
  %11 = load i8, i8* %arrayidx25, align 1, !dbg !3311
  %conv26 = zext i8 %11 to i32, !dbg !3311
  %mul27 = mul nsw i32 %conv26, 8, !dbg !3311
  br label %cond.end28, !dbg !3311

cond.end28:                                       ; preds = %cond.false23, %cond.true22
  %cond29 = phi i32 [ 1, %cond.true22 ], [ %mul27, %cond.false23 ], !dbg !3311
  br label %cond.end30, !dbg !3311

cond.end30:                                       ; preds = %cond.end28, %cond.true10
  %cond31 = phi i32 [ %cond14, %cond.true10 ], [ %cond29, %cond.end28 ], !dbg !3311
  ret i32 %cond31, !dbg !3312
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @layout_decl(%union.tree_node* %decl, i32 %known_align) #0 !dbg !3313 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %known_align.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %rtl = alloca %struct.rtx_def*, align 8
  %loc = alloca i32, align 4
  %old_user_align = alloca i8, align 1
  %zero_bitfield = alloca i8, align 1
  %packed_p = alloca i8, align 1
  %mfa = alloca i32, align 4
  %xmode = alloca i32, align 4
  %xalign = alloca i32, align 4
  %size387 = alloca %union.tree_node*, align 8
  %size_as_int = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3316, metadata !DIExpression()), !dbg !3317
  store i32 %known_align, i32* %known_align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %known_align.addr, metadata !3318, metadata !DIExpression()), !dbg !3319
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3320, metadata !DIExpression()), !dbg !3321
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3322
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3322
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3322
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !3322
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3321
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3323, metadata !DIExpression()), !dbg !3324
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3325
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3325
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3325
  %bf.load = load i64, i64* %3, align 8, !dbg !3325
  %bf.clear = and i64 %bf.load, 65535, !dbg !3325
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3325
  store i32 %bf.cast, i32* %code, align 4, !dbg !3324
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl, metadata !3326, metadata !DIExpression()), !dbg !3327
  store %struct.rtx_def* null, %struct.rtx_def** %rtl, align 8, !dbg !3327
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !3328, metadata !DIExpression()), !dbg !3329
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3330
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !3330
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !3330
  %5 = load i32, i32* %locus, align 8, !dbg !3330
  store i32 %5, i32* %loc, align 4, !dbg !3329
  %6 = load i32, i32* %code, align 4, !dbg !3331
  %cmp = icmp eq i32 %6, 33, !dbg !3333
  br i1 %cmp, label %if.then, label %if.end, !dbg !3334

if.then:                                          ; preds = %entry
  br label %if.end429, !dbg !3335

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %code, align 4, !dbg !3336
  %cmp2 = icmp eq i32 %7, 32, !dbg !3336
  br i1 %cmp2, label %cond.false, label %lor.lhs.false, !dbg !3336

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i32, i32* %code, align 4, !dbg !3336
  %cmp3 = icmp eq i32 %8, 34, !dbg !3336
  br i1 %cmp3, label %cond.false, label %lor.lhs.false4, !dbg !3336

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %9 = load i32, i32* %code, align 4, !dbg !3336
  %cmp5 = icmp eq i32 %9, 36, !dbg !3336
  br i1 %cmp5, label %cond.false, label %lor.lhs.false6, !dbg !3336

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %10 = load i32, i32* %code, align 4, !dbg !3336
  %cmp7 = icmp eq i32 %10, 35, !dbg !3336
  br i1 %cmp7, label %cond.false, label %lor.lhs.false8, !dbg !3336

lor.lhs.false8:                                   ; preds = %lor.lhs.false6
  %11 = load i32, i32* %code, align 4, !dbg !3336
  %cmp9 = icmp eq i32 %11, 31, !dbg !3336
  br i1 %cmp9, label %cond.false, label %cond.true, !dbg !3336

cond.true:                                        ; preds = %lor.lhs.false8
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 527, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3336
  br label %cond.end, !dbg !3336

cond.false:                                       ; preds = %lor.lhs.false8, %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false, %if.end
  br label %cond.end, !dbg !3336

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3336
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3337
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3337
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !3337
  %bf.load11 = load i64, i64* %13, align 8, !dbg !3337
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !3337
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !3337
  %idxprom = zext i32 %bf.cast13 to i64, !dbg !3337
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !3337
  %arrayidx14 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !3337
  %14 = load i8, i8* %arrayidx14, align 1, !dbg !3337
  %conv = zext i8 %14 to i32, !dbg !3337
  %tobool = icmp ne i32 %conv, 0, !dbg !3337
  br i1 %tobool, label %land.lhs.true, label %cond.false30, !dbg !3337

land.lhs.true:                                    ; preds = %cond.end
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3337
  %decl_with_rtl = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !3337
  %rtl15 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !3337
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl15, align 8, !dbg !3337
  %cmp16 = icmp ne %struct.rtx_def* %16, null, !dbg !3337
  br i1 %cmp16, label %cond.true18, label %cond.false30, !dbg !3337

cond.true18:                                      ; preds = %land.lhs.true
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3337
  %decl_with_rtl19 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_rtl*, !dbg !3337
  %rtl20 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl19, i32 0, i32 1, !dbg !3337
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl20, align 8, !dbg !3337
  %tobool21 = icmp ne %struct.rtx_def* %18, null, !dbg !3337
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !3337

cond.true22:                                      ; preds = %cond.true18
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3337
  %decl_with_rtl23 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !3337
  %rtl24 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl23, i32 0, i32 1, !dbg !3337
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl24, align 8, !dbg !3337
  br label %cond.end28, !dbg !3337

cond.false25:                                     ; preds = %cond.true18
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3337
  call void @make_decl_rtl(%union.tree_node* %21), !dbg !3337
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3337
  %decl_with_rtl26 = bitcast %union.tree_node* %22 to %struct.tree_decl_with_rtl*, !dbg !3337
  %rtl27 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl26, i32 0, i32 1, !dbg !3337
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl27, align 8, !dbg !3337
  br label %cond.end28, !dbg !3337

cond.end28:                                       ; preds = %cond.false25, %cond.true22
  %cond29 = phi %struct.rtx_def* [ %20, %cond.true22 ], [ %23, %cond.false25 ], !dbg !3337
  br label %cond.end31, !dbg !3337

cond.false30:                                     ; preds = %land.lhs.true, %cond.end
  br label %cond.end31, !dbg !3337

cond.end31:                                       ; preds = %cond.false30, %cond.end28
  %cond32 = phi %struct.rtx_def* [ %cond29, %cond.end28 ], [ null, %cond.false30 ], !dbg !3337
  store %struct.rtx_def* %cond32, %struct.rtx_def** %rtl, align 8, !dbg !3338
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3339
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3341
  %cmp33 = icmp eq %union.tree_node* %24, %25, !dbg !3342
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !3343

if.then35:                                        ; preds = %cond.end31
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !3344
  store %union.tree_node* %26, %union.tree_node** %type, align 8, !dbg !3345
  br label %if.end36, !dbg !3346

if.end36:                                         ; preds = %if.then35, %cond.end31
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3347
  %base37 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !3347
  %28 = bitcast %struct.tree_base* %base37 to i64*, !dbg !3347
  %bf.load38 = load i64, i64* %28, align 8, !dbg !3347
  %bf.lshr = lshr i64 %bf.load38, 21, !dbg !3347
  %bf.clear39 = and i64 %bf.lshr, 1, !dbg !3347
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !3347
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3348
  %base41 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !3348
  %30 = bitcast %struct.tree_base* %base41 to i64*, !dbg !3348
  %31 = zext i32 %bf.cast40 to i64, !dbg !3349
  %bf.load42 = load i64, i64* %30, align 8, !dbg !3349
  %bf.value = and i64 %31, 1, !dbg !3349
  %bf.shl = shl i64 %bf.value, 21, !dbg !3349
  %bf.clear43 = and i64 %bf.load42, -2097153, !dbg !3349
  %bf.set = or i64 %bf.clear43, %bf.shl, !dbg !3349
  store i64 %bf.set, i64* %30, align 8, !dbg !3349
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !3349
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3350
  %decl_common = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !3350
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3350
  %33 = bitcast i40* %mode to i64*, !dbg !3350
  %bf.load44 = load i64, i64* %33, align 8, !dbg !3350
  %bf.clear45 = and i64 %bf.load44, 255, !dbg !3350
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !3350
  %cmp47 = icmp eq i32 %bf.cast46, 0, !dbg !3352
  br i1 %cmp47, label %if.then49, label %if.end72, !dbg !3353

if.then49:                                        ; preds = %if.end36
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3354
  %base50 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !3354
  %35 = bitcast %struct.tree_base* %base50 to i64*, !dbg !3354
  %bf.load51 = load i64, i64* %35, align 8, !dbg !3354
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !3354
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !3354
  %cmp54 = icmp eq i32 %bf.cast53, 14, !dbg !3354
  br i1 %cmp54, label %cond.true56, label %cond.false57, !dbg !3354

cond.true56:                                      ; preds = %if.then49
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3354
  %call = call i32 @vector_type_mode(%union.tree_node* %36), !dbg !3354
  br label %cond.end63, !dbg !3354

cond.false57:                                     ; preds = %if.then49
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3354
  %type58 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !3354
  %mode59 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 6, !dbg !3354
  %bf.load60 = load i32, i32* %mode59, align 4, !dbg !3354
  %bf.lshr61 = lshr i32 %bf.load60, 16, !dbg !3354
  %bf.clear62 = and i32 %bf.lshr61, 255, !dbg !3354
  br label %cond.end63, !dbg !3354

cond.end63:                                       ; preds = %cond.false57, %cond.true56
  %cond64 = phi i32 [ %call, %cond.true56 ], [ %bf.clear62, %cond.false57 ], !dbg !3354
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3355
  %decl_common65 = bitcast %union.tree_node* %38 to %struct.tree_decl_common*, !dbg !3355
  %mode66 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common65, i32 0, i32 2, !dbg !3355
  %39 = bitcast i40* %mode66 to i64*, !dbg !3355
  %40 = zext i32 %cond64 to i64, !dbg !3356
  %bf.load67 = load i64, i64* %39, align 8, !dbg !3356
  %bf.value68 = and i64 %40, 255, !dbg !3356
  %bf.clear69 = and i64 %bf.load67, -256, !dbg !3356
  %bf.set70 = or i64 %bf.clear69, %bf.value68, !dbg !3356
  store i64 %bf.set70, i64* %39, align 8, !dbg !3356
  %bf.result.cast71 = trunc i64 %bf.value68 to i32, !dbg !3356
  br label %if.end72, !dbg !3355

if.end72:                                         ; preds = %cond.end63, %if.end36
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3357
  %decl_common73 = bitcast %union.tree_node* %41 to %struct.tree_decl_common*, !dbg !3357
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common73, i32 0, i32 1, !dbg !3357
  %42 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3357
  %cmp74 = icmp eq %union.tree_node* %42, null, !dbg !3359
  br i1 %cmp74, label %if.then76, label %if.else, !dbg !3360

if.then76:                                        ; preds = %if.end72
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3361
  %type77 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !3361
  %size78 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type77, i32 0, i32 2, !dbg !3361
  %44 = load %union.tree_node*, %union.tree_node** %size78, align 8, !dbg !3361
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3363
  %decl_common79 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !3363
  %size80 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common79, i32 0, i32 1, !dbg !3363
  store %union.tree_node* %44, %union.tree_node** %size80, align 8, !dbg !3364
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3365
  %type81 = bitcast %union.tree_node* %46 to %struct.tree_type*, !dbg !3365
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 3, !dbg !3365
  %47 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3365
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3366
  %decl_common82 = bitcast %union.tree_node* %48 to %struct.tree_decl_common*, !dbg !3366
  %size_unit83 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common82, i32 0, i32 4, !dbg !3366
  store %union.tree_node* %47, %union.tree_node** %size_unit83, align 8, !dbg !3367
  br label %if.end96, !dbg !3368

if.else:                                          ; preds = %if.end72
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3369
  %decl_common84 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !3369
  %size_unit85 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common84, i32 0, i32 4, !dbg !3369
  %50 = load %union.tree_node*, %union.tree_node** %size_unit85, align 8, !dbg !3369
  %cmp86 = icmp eq %union.tree_node* %50, null, !dbg !3371
  br i1 %cmp86, label %if.then88, label %if.end95, !dbg !3372

if.then88:                                        ; preds = %if.else
  %51 = load i32, i32* %loc, align 4, !dbg !3373
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !3374
  %53 = load i32, i32* %loc, align 4, !dbg !3375
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3376
  %decl_common89 = bitcast %union.tree_node* %54 to %struct.tree_decl_common*, !dbg !3376
  %size90 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common89, i32 0, i32 1, !dbg !3376
  %55 = load %union.tree_node*, %union.tree_node** %size90, align 8, !dbg !3376
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !dbg !3377
  %call91 = call %union.tree_node* @size_binop_loc(i32 %53, i32 68, %union.tree_node* %55, %union.tree_node* %56), !dbg !3378
  %call92 = call %union.tree_node* @fold_convert_loc(i32 %51, %union.tree_node* %52, %union.tree_node* %call91), !dbg !3379
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3380
  %decl_common93 = bitcast %union.tree_node* %57 to %struct.tree_decl_common*, !dbg !3380
  %size_unit94 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common93, i32 0, i32 4, !dbg !3380
  store %union.tree_node* %call92, %union.tree_node** %size_unit94, align 8, !dbg !3381
  br label %if.end95, !dbg !3380

if.end95:                                         ; preds = %if.then88, %if.else
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then76
  %58 = load i32, i32* %code, align 4, !dbg !3382
  %cmp97 = icmp ne i32 %58, 31, !dbg !3384
  br i1 %cmp97, label %if.then99, label %if.else100, !dbg !3385

if.then99:                                        ; preds = %if.end96
  %59 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3386
  %60 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3387
  call void @do_type_align(%union.tree_node* %59, %union.tree_node* %60), !dbg !3388
  br label %if.end329, !dbg !3388

if.else100:                                       ; preds = %if.end96
  call void @llvm.dbg.declare(metadata i8* %old_user_align, metadata !3389, metadata !DIExpression()), !dbg !3391
  %61 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3392
  %common101 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !3392
  %base102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 0, !dbg !3392
  %62 = bitcast %struct.tree_base* %base102 to i64*, !dbg !3392
  %bf.load103 = load i64, i64* %62, align 8, !dbg !3392
  %bf.lshr104 = lshr i64 %bf.load103, 42, !dbg !3392
  %bf.clear105 = and i64 %bf.lshr104, 1, !dbg !3392
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !3392
  %conv107 = trunc i32 %bf.cast106 to i8, !dbg !3392
  store i8 %conv107, i8* %old_user_align, align 1, !dbg !3391
  call void @llvm.dbg.declare(metadata i8* %zero_bitfield, metadata !3393, metadata !DIExpression()), !dbg !3394
  store i8 0, i8* %zero_bitfield, align 1, !dbg !3394
  call void @llvm.dbg.declare(metadata i8* %packed_p, metadata !3395, metadata !DIExpression()), !dbg !3396
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3397
  %common108 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !3397
  %base109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 0, !dbg !3397
  %64 = bitcast %struct.tree_base* %base109 to i64*, !dbg !3397
  %bf.load110 = load i64, i64* %64, align 8, !dbg !3397
  %bf.lshr111 = lshr i64 %bf.load110, 41, !dbg !3397
  %bf.clear112 = and i64 %bf.lshr111, 1, !dbg !3397
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !3397
  %conv114 = trunc i32 %bf.cast113 to i8, !dbg !3397
  store i8 %conv114, i8* %packed_p, align 1, !dbg !3396
  call void @llvm.dbg.declare(metadata i32* %mfa, metadata !3398, metadata !DIExpression()), !dbg !3399
  %65 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3400
  %decl_common115 = bitcast %union.tree_node* %65 to %struct.tree_decl_common*, !dbg !3400
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common115, i32 0, i32 2, !dbg !3400
  %66 = bitcast i40* %decl_flag_1 to i64*, !dbg !3400
  %bf.load116 = load i64, i64* %66, align 8, !dbg !3400
  %bf.lshr117 = lshr i64 %bf.load116, 25, !dbg !3400
  %bf.clear118 = and i64 %bf.lshr117, 1, !dbg !3400
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !3400
  %tobool120 = icmp ne i32 %bf.cast119, 0, !dbg !3400
  br i1 %tobool120, label %if.then121, label %if.else260, !dbg !3402

if.then121:                                       ; preds = %if.else100
  %67 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3403
  %68 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3405
  %field_decl = bitcast %union.tree_node* %68 to %struct.tree_field_decl*, !dbg !3405
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 2, !dbg !3405
  store %union.tree_node* %67, %union.tree_node** %bit_field_type, align 8, !dbg !3406
  %69 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3407
  %decl_common122 = bitcast %union.tree_node* %69 to %struct.tree_decl_common*, !dbg !3407
  %size123 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common122, i32 0, i32 1, !dbg !3407
  %70 = load %union.tree_node*, %union.tree_node** %size123, align 8, !dbg !3407
  %call124 = call i32 @integer_zerop(%union.tree_node* %70), !dbg !3409
  %tobool125 = icmp ne i32 %call124, 0, !dbg !3409
  br i1 %tobool125, label %land.lhs.true126, label %if.end131, !dbg !3410

land.lhs.true126:                                 ; preds = %if.then121
  %71 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !3411
  %72 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3412
  %decl_minimal127 = bitcast %union.tree_node* %72 to %struct.tree_decl_minimal*, !dbg !3412
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal127, i32 0, i32 4, !dbg !3412
  %73 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3412
  %call128 = call zeroext i8 %71(%union.tree_node* %73), !dbg !3413
  %tobool129 = icmp ne i8 %call128, 0, !dbg !3413
  br i1 %tobool129, label %if.end131, label %if.then130, !dbg !3414

if.then130:                                       ; preds = %land.lhs.true126
  store i8 1, i8* %zero_bitfield, align 1, !dbg !3415
  store i8 0, i8* %packed_p, align 1, !dbg !3417
  %74 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3418
  %75 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3420
  call void @do_type_align(%union.tree_node* %74, %union.tree_node* %75), !dbg !3421
  br label %if.end131, !dbg !3422

if.end131:                                        ; preds = %if.then130, %land.lhs.true126, %if.then121
  %76 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3423
  %type132 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !3423
  %size133 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type132, i32 0, i32 2, !dbg !3423
  %77 = load %union.tree_node*, %union.tree_node** %size133, align 8, !dbg !3423
  %cmp134 = icmp ne %union.tree_node* %77, null, !dbg !3425
  br i1 %cmp134, label %land.lhs.true136, label %if.end215, !dbg !3426

land.lhs.true136:                                 ; preds = %if.end131
  %78 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3427
  %type137 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !3427
  %size138 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type137, i32 0, i32 2, !dbg !3427
  %79 = load %union.tree_node*, %union.tree_node** %size138, align 8, !dbg !3427
  %base139 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !3427
  %80 = bitcast %struct.tree_base* %base139 to i64*, !dbg !3427
  %bf.load140 = load i64, i64* %80, align 8, !dbg !3427
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !3427
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !3427
  %cmp143 = icmp eq i32 %bf.cast142, 23, !dbg !3428
  br i1 %cmp143, label %land.lhs.true145, label %if.end215, !dbg !3429

land.lhs.true145:                                 ; preds = %land.lhs.true136
  %81 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3430
  %base146 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !3430
  %82 = bitcast %struct.tree_base* %base146 to i64*, !dbg !3430
  %bf.load147 = load i64, i64* %82, align 8, !dbg !3430
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !3430
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !3430
  %cmp150 = icmp eq i32 %bf.cast149, 14, !dbg !3430
  br i1 %cmp150, label %cond.true152, label %cond.false154, !dbg !3430

cond.true152:                                     ; preds = %land.lhs.true145
  %83 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3430
  %call153 = call i32 @vector_type_mode(%union.tree_node* %83), !dbg !3430
  br label %cond.end160, !dbg !3430

cond.false154:                                    ; preds = %land.lhs.true145
  %84 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3430
  %type155 = bitcast %union.tree_node* %84 to %struct.tree_type*, !dbg !3430
  %mode156 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type155, i32 0, i32 6, !dbg !3430
  %bf.load157 = load i32, i32* %mode156, align 4, !dbg !3430
  %bf.lshr158 = lshr i32 %bf.load157, 16, !dbg !3430
  %bf.clear159 = and i32 %bf.lshr158, 255, !dbg !3430
  br label %cond.end160, !dbg !3430

cond.end160:                                      ; preds = %cond.false154, %cond.true152
  %cond161 = phi i32 [ %call153, %cond.true152 ], [ %bf.clear159, %cond.false154 ], !dbg !3430
  %idxprom162 = zext i32 %cond161 to i64, !dbg !3430
  %arrayidx163 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom162, !dbg !3430
  %85 = load i8, i8* %arrayidx163, align 1, !dbg !3430
  %conv164 = zext i8 %85 to i32, !dbg !3430
  %cmp165 = icmp eq i32 %conv164, 2, !dbg !3431
  br i1 %cmp165, label %if.then167, label %if.end215, !dbg !3432

if.then167:                                       ; preds = %cond.end160
  call void @llvm.dbg.declare(metadata i32* %xmode, metadata !3433, metadata !DIExpression()), !dbg !3435
  %86 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3436
  %decl_common168 = bitcast %union.tree_node* %86 to %struct.tree_decl_common*, !dbg !3436
  %size169 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common168, i32 0, i32 1, !dbg !3436
  %87 = load %union.tree_node*, %union.tree_node** %size169, align 8, !dbg !3436
  %call170 = call i32 @mode_for_size_tree(%union.tree_node* %87, i32 2, i32 1), !dbg !3437
  store i32 %call170, i32* %xmode, align 4, !dbg !3435
  call void @llvm.dbg.declare(metadata i32* %xalign, metadata !3438, metadata !DIExpression()), !dbg !3439
  %88 = load i32, i32* %xmode, align 4, !dbg !3440
  %call171 = call i32 @get_mode_alignment(i32 %88), !dbg !3440
  store i32 %call171, i32* %xalign, align 4, !dbg !3439
  %89 = load i32, i32* %xmode, align 4, !dbg !3441
  %cmp172 = icmp ne i32 %89, 1, !dbg !3443
  br i1 %cmp172, label %land.lhs.true174, label %if.end214, !dbg !3444

land.lhs.true174:                                 ; preds = %if.then167
  %90 = load i32, i32* %xalign, align 4, !dbg !3445
  %cmp175 = icmp ugt i32 %90, 8, !dbg !3446
  br i1 %cmp175, label %land.lhs.true177, label %land.lhs.true185, !dbg !3447

land.lhs.true177:                                 ; preds = %land.lhs.true174
  %91 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3448
  %common178 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !3448
  %base179 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common178, i32 0, i32 0, !dbg !3448
  %92 = bitcast %struct.tree_base* %base179 to i64*, !dbg !3448
  %bf.load180 = load i64, i64* %92, align 8, !dbg !3448
  %bf.lshr181 = lshr i64 %bf.load180, 41, !dbg !3448
  %bf.clear182 = and i64 %bf.lshr181, 1, !dbg !3448
  %bf.cast183 = trunc i64 %bf.clear182 to i32, !dbg !3448
  %tobool184 = icmp ne i32 %bf.cast183, 0, !dbg !3448
  br i1 %tobool184, label %if.end214, label %land.lhs.true185, !dbg !3449

land.lhs.true185:                                 ; preds = %land.lhs.true177, %land.lhs.true174
  %93 = load i32, i32* %known_align.addr, align 4, !dbg !3450
  %cmp186 = icmp eq i32 %93, 0, !dbg !3451
  br i1 %cmp186, label %if.then191, label %lor.lhs.false188, !dbg !3452

lor.lhs.false188:                                 ; preds = %land.lhs.true185
  %94 = load i32, i32* %known_align.addr, align 4, !dbg !3453
  %95 = load i32, i32* %xalign, align 4, !dbg !3454
  %cmp189 = icmp uge i32 %94, %95, !dbg !3455
  br i1 %cmp189, label %if.then191, label %if.end214, !dbg !3456

if.then191:                                       ; preds = %lor.lhs.false188, %land.lhs.true185
  %96 = load i32, i32* %xalign, align 4, !dbg !3457
  %97 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3457
  %decl_common192 = bitcast %union.tree_node* %97 to %struct.tree_decl_common*, !dbg !3457
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common192, i32 0, i32 3, !dbg !3457
  %98 = load i32, i32* %align, align 8, !dbg !3457
  %cmp193 = icmp ugt i32 %96, %98, !dbg !3457
  br i1 %cmp193, label %cond.true195, label %cond.false196, !dbg !3457

cond.true195:                                     ; preds = %if.then191
  %99 = load i32, i32* %xalign, align 4, !dbg !3457
  br label %cond.end199, !dbg !3457

cond.false196:                                    ; preds = %if.then191
  %100 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3457
  %decl_common197 = bitcast %union.tree_node* %100 to %struct.tree_decl_common*, !dbg !3457
  %align198 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common197, i32 0, i32 3, !dbg !3457
  %101 = load i32, i32* %align198, align 8, !dbg !3457
  br label %cond.end199, !dbg !3457

cond.end199:                                      ; preds = %cond.false196, %cond.true195
  %cond200 = phi i32 [ %99, %cond.true195 ], [ %101, %cond.false196 ], !dbg !3457
  %102 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3459
  %decl_common201 = bitcast %union.tree_node* %102 to %struct.tree_decl_common*, !dbg !3459
  %align202 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common201, i32 0, i32 3, !dbg !3459
  store i32 %cond200, i32* %align202, align 8, !dbg !3460
  %103 = load i32, i32* %xmode, align 4, !dbg !3461
  %104 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3462
  %decl_common203 = bitcast %union.tree_node* %104 to %struct.tree_decl_common*, !dbg !3462
  %mode204 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common203, i32 0, i32 2, !dbg !3462
  %105 = bitcast i40* %mode204 to i64*, !dbg !3462
  %106 = zext i32 %103 to i64, !dbg !3463
  %bf.load205 = load i64, i64* %105, align 8, !dbg !3463
  %bf.value206 = and i64 %106, 255, !dbg !3463
  %bf.clear207 = and i64 %bf.load205, -256, !dbg !3463
  %bf.set208 = or i64 %bf.clear207, %bf.value206, !dbg !3463
  store i64 %bf.set208, i64* %105, align 8, !dbg !3463
  %bf.result.cast209 = trunc i64 %bf.value206 to i32, !dbg !3463
  %107 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3464
  %decl_common210 = bitcast %union.tree_node* %107 to %struct.tree_decl_common*, !dbg !3464
  %decl_flag_1211 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common210, i32 0, i32 2, !dbg !3464
  %108 = bitcast i40* %decl_flag_1211 to i64*, !dbg !3464
  %bf.load212 = load i64, i64* %108, align 8, !dbg !3465
  %bf.clear213 = and i64 %bf.load212, -33554433, !dbg !3465
  store i64 %bf.clear213, i64* %108, align 8, !dbg !3465
  br label %if.end214, !dbg !3466

if.end214:                                        ; preds = %cond.end199, %lor.lhs.false188, %land.lhs.true177, %if.then167
  br label %if.end215, !dbg !3467

if.end215:                                        ; preds = %if.end214, %cond.end160, %land.lhs.true136, %if.end131
  %109 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3468
  %base216 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !3468
  %110 = bitcast %struct.tree_base* %base216 to i64*, !dbg !3468
  %bf.load217 = load i64, i64* %110, align 8, !dbg !3468
  %bf.clear218 = and i64 %bf.load217, 65535, !dbg !3468
  %bf.cast219 = trunc i64 %bf.clear218 to i32, !dbg !3468
  %cmp220 = icmp eq i32 %bf.cast219, 14, !dbg !3468
  br i1 %cmp220, label %cond.true222, label %cond.false224, !dbg !3468

cond.true222:                                     ; preds = %if.end215
  %111 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3468
  %call223 = call i32 @vector_type_mode(%union.tree_node* %111), !dbg !3468
  br label %cond.end230, !dbg !3468

cond.false224:                                    ; preds = %if.end215
  %112 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3468
  %type225 = bitcast %union.tree_node* %112 to %struct.tree_type*, !dbg !3468
  %mode226 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type225, i32 0, i32 6, !dbg !3468
  %bf.load227 = load i32, i32* %mode226, align 4, !dbg !3468
  %bf.lshr228 = lshr i32 %bf.load227, 16, !dbg !3468
  %bf.clear229 = and i32 %bf.lshr228, 255, !dbg !3468
  br label %cond.end230, !dbg !3468

cond.end230:                                      ; preds = %cond.false224, %cond.true222
  %cond231 = phi i32 [ %call223, %cond.true222 ], [ %bf.clear229, %cond.false224 ], !dbg !3468
  %cmp232 = icmp eq i32 %cond231, 1, !dbg !3470
  br i1 %cmp232, label %land.lhs.true234, label %if.end259, !dbg !3471

land.lhs.true234:                                 ; preds = %cond.end230
  %113 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3472
  %decl_common235 = bitcast %union.tree_node* %113 to %struct.tree_decl_common*, !dbg !3472
  %mode236 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common235, i32 0, i32 2, !dbg !3472
  %114 = bitcast i40* %mode236 to i64*, !dbg !3472
  %bf.load237 = load i64, i64* %114, align 8, !dbg !3472
  %bf.clear238 = and i64 %bf.load237, 255, !dbg !3472
  %bf.cast239 = trunc i64 %bf.clear238 to i32, !dbg !3472
  %cmp240 = icmp eq i32 %bf.cast239, 1, !dbg !3473
  br i1 %cmp240, label %land.lhs.true242, label %if.end259, !dbg !3474

land.lhs.true242:                                 ; preds = %land.lhs.true234
  %115 = load i32, i32* %known_align.addr, align 4, !dbg !3475
  %116 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3476
  %type243 = bitcast %union.tree_node* %116 to %struct.tree_type*, !dbg !3476
  %align244 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type243, i32 0, i32 7, !dbg !3476
  %117 = load i32, i32* %align244, align 8, !dbg !3476
  %cmp245 = icmp uge i32 %115, %117, !dbg !3477
  br i1 %cmp245, label %land.lhs.true247, label %if.end259, !dbg !3478

land.lhs.true247:                                 ; preds = %land.lhs.true242
  %118 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3479
  %decl_common248 = bitcast %union.tree_node* %118 to %struct.tree_decl_common*, !dbg !3479
  %align249 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common248, i32 0, i32 3, !dbg !3479
  %119 = load i32, i32* %align249, align 8, !dbg !3479
  %120 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3480
  %type250 = bitcast %union.tree_node* %120 to %struct.tree_type*, !dbg !3480
  %align251 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type250, i32 0, i32 7, !dbg !3480
  %121 = load i32, i32* %align251, align 8, !dbg !3480
  %cmp252 = icmp uge i32 %119, %121, !dbg !3481
  br i1 %cmp252, label %if.then254, label %if.end259, !dbg !3482

if.then254:                                       ; preds = %land.lhs.true247
  %122 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3483
  %decl_common255 = bitcast %union.tree_node* %122 to %struct.tree_decl_common*, !dbg !3483
  %decl_flag_1256 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common255, i32 0, i32 2, !dbg !3483
  %123 = bitcast i40* %decl_flag_1256 to i64*, !dbg !3483
  %bf.load257 = load i64, i64* %123, align 8, !dbg !3484
  %bf.clear258 = and i64 %bf.load257, -33554433, !dbg !3484
  store i64 %bf.clear258, i64* %123, align 8, !dbg !3484
  br label %if.end259, !dbg !3483

if.end259:                                        ; preds = %if.then254, %land.lhs.true247, %land.lhs.true242, %land.lhs.true234, %cond.end230
  br label %if.end274, !dbg !3485

if.else260:                                       ; preds = %if.else100
  %124 = load i8, i8* %packed_p, align 1, !dbg !3486
  %conv261 = zext i8 %124 to i32, !dbg !3486
  %tobool262 = icmp ne i32 %conv261, 0, !dbg !3486
  br i1 %tobool262, label %land.lhs.true263, label %if.else272, !dbg !3488

land.lhs.true263:                                 ; preds = %if.else260
  %125 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3489
  %common264 = bitcast %union.tree_node* %125 to %struct.tree_common*, !dbg !3489
  %base265 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common264, i32 0, i32 0, !dbg !3489
  %126 = bitcast %struct.tree_base* %base265 to i64*, !dbg !3489
  %bf.load266 = load i64, i64* %126, align 8, !dbg !3489
  %bf.lshr267 = lshr i64 %bf.load266, 42, !dbg !3489
  %bf.clear268 = and i64 %bf.lshr267, 1, !dbg !3489
  %bf.cast269 = trunc i64 %bf.clear268 to i32, !dbg !3489
  %tobool270 = icmp ne i32 %bf.cast269, 0, !dbg !3489
  br i1 %tobool270, label %if.then271, label %if.else272, !dbg !3490

if.then271:                                       ; preds = %land.lhs.true263
  br label %if.end273, !dbg !3490

if.else272:                                       ; preds = %land.lhs.true263, %if.else260
  %127 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3491
  %128 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3492
  call void @do_type_align(%union.tree_node* %127, %union.tree_node* %128), !dbg !3493
  br label %if.end273

if.end273:                                        ; preds = %if.else272, %if.then271
  br label %if.end274

if.end274:                                        ; preds = %if.end273, %if.end259
  %129 = load i8, i8* %packed_p, align 1, !dbg !3494
  %conv275 = zext i8 %129 to i32, !dbg !3494
  %tobool276 = icmp ne i32 %conv275, 0, !dbg !3494
  br i1 %tobool276, label %land.lhs.true277, label %if.end292, !dbg !3496

land.lhs.true277:                                 ; preds = %if.end274
  %130 = load i8, i8* %old_user_align, align 1, !dbg !3497
  %tobool278 = icmp ne i8 %130, 0, !dbg !3497
  br i1 %tobool278, label %if.end292, label %if.then279, !dbg !3498

if.then279:                                       ; preds = %land.lhs.true277
  %131 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3499
  %decl_common280 = bitcast %union.tree_node* %131 to %struct.tree_decl_common*, !dbg !3499
  %align281 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common280, i32 0, i32 3, !dbg !3499
  %132 = load i32, i32* %align281, align 8, !dbg !3499
  %cmp282 = icmp ult i32 %132, 8, !dbg !3499
  br i1 %cmp282, label %cond.true284, label %cond.false287, !dbg !3499

cond.true284:                                     ; preds = %if.then279
  %133 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3499
  %decl_common285 = bitcast %union.tree_node* %133 to %struct.tree_decl_common*, !dbg !3499
  %align286 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common285, i32 0, i32 3, !dbg !3499
  %134 = load i32, i32* %align286, align 8, !dbg !3499
  br label %cond.end288, !dbg !3499

cond.false287:                                    ; preds = %if.then279
  br label %cond.end288, !dbg !3499

cond.end288:                                      ; preds = %cond.false287, %cond.true284
  %cond289 = phi i32 [ %134, %cond.true284 ], [ 8, %cond.false287 ], !dbg !3499
  %135 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3500
  %decl_common290 = bitcast %union.tree_node* %135 to %struct.tree_decl_common*, !dbg !3500
  %align291 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common290, i32 0, i32 3, !dbg !3500
  store i32 %cond289, i32* %align291, align 8, !dbg !3501
  br label %if.end292, !dbg !3500

if.end292:                                        ; preds = %cond.end288, %land.lhs.true277, %if.end274
  %136 = load i8, i8* %packed_p, align 1, !dbg !3502
  %tobool293 = icmp ne i8 %136, 0, !dbg !3502
  br i1 %tobool293, label %if.end308, label %land.lhs.true294, !dbg !3504

land.lhs.true294:                                 ; preds = %if.end292
  %137 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3505
  %common295 = bitcast %union.tree_node* %137 to %struct.tree_common*, !dbg !3505
  %base296 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common295, i32 0, i32 0, !dbg !3505
  %138 = bitcast %struct.tree_base* %base296 to i64*, !dbg !3505
  %bf.load297 = load i64, i64* %138, align 8, !dbg !3505
  %bf.lshr298 = lshr i64 %bf.load297, 42, !dbg !3505
  %bf.clear299 = and i64 %bf.lshr298, 1, !dbg !3505
  %bf.cast300 = trunc i64 %bf.clear299 to i32, !dbg !3505
  %tobool301 = icmp ne i32 %bf.cast300, 0, !dbg !3505
  br i1 %tobool301, label %if.end308, label %if.then302, !dbg !3506

if.then302:                                       ; preds = %land.lhs.true294
  %139 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3507
  %140 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3507
  %decl_common303 = bitcast %union.tree_node* %140 to %struct.tree_decl_common*, !dbg !3507
  %align304 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common303, i32 0, i32 3, !dbg !3507
  %141 = load i32, i32* %align304, align 8, !dbg !3507
  %call305 = call i32 @x86_field_alignment(%union.tree_node* %139, i32 %141), !dbg !3507
  %142 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3509
  %decl_common306 = bitcast %union.tree_node* %142 to %struct.tree_decl_common*, !dbg !3509
  %align307 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common306, i32 0, i32 3, !dbg !3509
  store i32 %call305, i32* %align307, align 8, !dbg !3510
  br label %if.end308, !dbg !3511

if.end308:                                        ; preds = %if.then302, %land.lhs.true294, %if.end292
  %143 = load i8, i8* %zero_bitfield, align 1, !dbg !3512
  %tobool309 = icmp ne i8 %143, 0, !dbg !3512
  br i1 %tobool309, label %if.then310, label %if.else311, !dbg !3514

if.then310:                                       ; preds = %if.end308
  %144 = load i32, i32* @initial_max_fld_align, align 4, !dbg !3515
  %mul = mul i32 %144, 8, !dbg !3516
  store i32 %mul, i32* %mfa, align 4, !dbg !3517
  br label %if.end312, !dbg !3518

if.else311:                                       ; preds = %if.end308
  %145 = load i32, i32* @maximum_field_alignment, align 4, !dbg !3519
  store i32 %145, i32* %mfa, align 4, !dbg !3520
  br label %if.end312

if.end312:                                        ; preds = %if.else311, %if.then310
  %146 = load i32, i32* %mfa, align 4, !dbg !3521
  %cmp313 = icmp ne i32 %146, 0, !dbg !3523
  br i1 %cmp313, label %if.then315, label %if.end328, !dbg !3524

if.then315:                                       ; preds = %if.end312
  %147 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3525
  %decl_common316 = bitcast %union.tree_node* %147 to %struct.tree_decl_common*, !dbg !3525
  %align317 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common316, i32 0, i32 3, !dbg !3525
  %148 = load i32, i32* %align317, align 8, !dbg !3525
  %149 = load i32, i32* %mfa, align 4, !dbg !3525
  %cmp318 = icmp ult i32 %148, %149, !dbg !3525
  br i1 %cmp318, label %cond.true320, label %cond.false323, !dbg !3525

cond.true320:                                     ; preds = %if.then315
  %150 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3525
  %decl_common321 = bitcast %union.tree_node* %150 to %struct.tree_decl_common*, !dbg !3525
  %align322 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common321, i32 0, i32 3, !dbg !3525
  %151 = load i32, i32* %align322, align 8, !dbg !3525
  br label %cond.end324, !dbg !3525

cond.false323:                                    ; preds = %if.then315
  %152 = load i32, i32* %mfa, align 4, !dbg !3525
  br label %cond.end324, !dbg !3525

cond.end324:                                      ; preds = %cond.false323, %cond.true320
  %cond325 = phi i32 [ %151, %cond.true320 ], [ %152, %cond.false323 ], !dbg !3525
  %153 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3526
  %decl_common326 = bitcast %union.tree_node* %153 to %struct.tree_decl_common*, !dbg !3526
  %align327 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common326, i32 0, i32 3, !dbg !3526
  store i32 %cond325, i32* %align327, align 8, !dbg !3527
  br label %if.end328, !dbg !3526

if.end328:                                        ; preds = %cond.end324, %if.end312
  br label %if.end329

if.end329:                                        ; preds = %if.end328, %if.then99
  %154 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3528
  %decl_common330 = bitcast %union.tree_node* %154 to %struct.tree_decl_common*, !dbg !3528
  %size331 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common330, i32 0, i32 1, !dbg !3528
  %155 = load %union.tree_node*, %union.tree_node** %size331, align 8, !dbg !3528
  %cmp332 = icmp ne %union.tree_node* %155, null, !dbg !3530
  br i1 %cmp332, label %land.lhs.true334, label %if.end349, !dbg !3531

land.lhs.true334:                                 ; preds = %if.end329
  %156 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3532
  %decl_common335 = bitcast %union.tree_node* %156 to %struct.tree_decl_common*, !dbg !3532
  %size336 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common335, i32 0, i32 1, !dbg !3532
  %157 = load %union.tree_node*, %union.tree_node** %size336, align 8, !dbg !3532
  %base337 = bitcast %union.tree_node* %157 to %struct.tree_base*, !dbg !3532
  %158 = bitcast %struct.tree_base* %base337 to i64*, !dbg !3532
  %bf.load338 = load i64, i64* %158, align 8, !dbg !3532
  %bf.clear339 = and i64 %bf.load338, 65535, !dbg !3532
  %bf.cast340 = trunc i64 %bf.clear339 to i32, !dbg !3532
  %cmp341 = icmp ne i32 %bf.cast340, 23, !dbg !3533
  br i1 %cmp341, label %if.then343, label %if.end349, !dbg !3534

if.then343:                                       ; preds = %land.lhs.true334
  %159 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3535
  %decl_common344 = bitcast %union.tree_node* %159 to %struct.tree_decl_common*, !dbg !3535
  %size345 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common344, i32 0, i32 1, !dbg !3535
  %160 = load %union.tree_node*, %union.tree_node** %size345, align 8, !dbg !3535
  %call346 = call %union.tree_node* @variable_size(%union.tree_node* %160), !dbg !3536
  %161 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3537
  %decl_common347 = bitcast %union.tree_node* %161 to %struct.tree_decl_common*, !dbg !3537
  %size348 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common347, i32 0, i32 1, !dbg !3537
  store %union.tree_node* %call346, %union.tree_node** %size348, align 8, !dbg !3538
  br label %if.end349, !dbg !3537

if.end349:                                        ; preds = %if.then343, %land.lhs.true334, %if.end329
  %162 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3539
  %decl_common350 = bitcast %union.tree_node* %162 to %struct.tree_decl_common*, !dbg !3539
  %size_unit351 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common350, i32 0, i32 4, !dbg !3539
  %163 = load %union.tree_node*, %union.tree_node** %size_unit351, align 8, !dbg !3539
  %cmp352 = icmp ne %union.tree_node* %163, null, !dbg !3541
  br i1 %cmp352, label %land.lhs.true354, label %if.end369, !dbg !3542

land.lhs.true354:                                 ; preds = %if.end349
  %164 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3543
  %decl_common355 = bitcast %union.tree_node* %164 to %struct.tree_decl_common*, !dbg !3543
  %size_unit356 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common355, i32 0, i32 4, !dbg !3543
  %165 = load %union.tree_node*, %union.tree_node** %size_unit356, align 8, !dbg !3543
  %base357 = bitcast %union.tree_node* %165 to %struct.tree_base*, !dbg !3543
  %166 = bitcast %struct.tree_base* %base357 to i64*, !dbg !3543
  %bf.load358 = load i64, i64* %166, align 8, !dbg !3543
  %bf.clear359 = and i64 %bf.load358, 65535, !dbg !3543
  %bf.cast360 = trunc i64 %bf.clear359 to i32, !dbg !3543
  %cmp361 = icmp ne i32 %bf.cast360, 23, !dbg !3544
  br i1 %cmp361, label %if.then363, label %if.end369, !dbg !3545

if.then363:                                       ; preds = %land.lhs.true354
  %167 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3546
  %decl_common364 = bitcast %union.tree_node* %167 to %struct.tree_decl_common*, !dbg !3546
  %size_unit365 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common364, i32 0, i32 4, !dbg !3546
  %168 = load %union.tree_node*, %union.tree_node** %size_unit365, align 8, !dbg !3546
  %call366 = call %union.tree_node* @variable_size(%union.tree_node* %168), !dbg !3547
  %169 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3548
  %decl_common367 = bitcast %union.tree_node* %169 to %struct.tree_decl_common*, !dbg !3548
  %size_unit368 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common367, i32 0, i32 4, !dbg !3548
  store %union.tree_node* %call366, %union.tree_node** %size_unit368, align 8, !dbg !3549
  br label %if.end369, !dbg !3548

if.end369:                                        ; preds = %if.then363, %land.lhs.true354, %if.end349
  %170 = load i8, i8* @warn_larger_than, align 1, !dbg !3550
  %conv370 = zext i8 %170 to i32, !dbg !3550
  %tobool371 = icmp ne i32 %conv370, 0, !dbg !3550
  br i1 %tobool371, label %land.lhs.true372, label %if.end416, !dbg !3552

land.lhs.true372:                                 ; preds = %if.end369
  %171 = load i32, i32* %code, align 4, !dbg !3553
  %cmp373 = icmp eq i32 %171, 32, !dbg !3554
  br i1 %cmp373, label %land.lhs.true378, label %lor.lhs.false375, !dbg !3555

lor.lhs.false375:                                 ; preds = %land.lhs.true372
  %172 = load i32, i32* %code, align 4, !dbg !3556
  %cmp376 = icmp eq i32 %172, 34, !dbg !3557
  br i1 %cmp376, label %land.lhs.true378, label %if.end416, !dbg !3558

land.lhs.true378:                                 ; preds = %lor.lhs.false375, %land.lhs.true372
  %173 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3559
  %decl_common379 = bitcast %union.tree_node* %173 to %struct.tree_decl_common*, !dbg !3559
  %decl_flag_1380 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common379, i32 0, i32 2, !dbg !3559
  %174 = bitcast i40* %decl_flag_1380 to i64*, !dbg !3559
  %bf.load381 = load i64, i64* %174, align 8, !dbg !3559
  %bf.lshr382 = lshr i64 %bf.load381, 25, !dbg !3559
  %bf.clear383 = and i64 %bf.lshr382, 1, !dbg !3559
  %bf.cast384 = trunc i64 %bf.clear383 to i32, !dbg !3559
  %tobool385 = icmp ne i32 %bf.cast384, 0, !dbg !3559
  br i1 %tobool385, label %if.end416, label %if.then386, !dbg !3560

if.then386:                                       ; preds = %land.lhs.true378
  call void @llvm.dbg.declare(metadata %union.tree_node** %size387, metadata !3561, metadata !DIExpression()), !dbg !3563
  %175 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3564
  %decl_common388 = bitcast %union.tree_node* %175 to %struct.tree_decl_common*, !dbg !3564
  %size_unit389 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common388, i32 0, i32 4, !dbg !3564
  %176 = load %union.tree_node*, %union.tree_node** %size_unit389, align 8, !dbg !3564
  store %union.tree_node* %176, %union.tree_node** %size387, align 8, !dbg !3563
  %177 = load %union.tree_node*, %union.tree_node** %size387, align 8, !dbg !3565
  %cmp390 = icmp ne %union.tree_node* %177, null, !dbg !3567
  br i1 %cmp390, label %land.lhs.true392, label %if.end415, !dbg !3568

land.lhs.true392:                                 ; preds = %if.then386
  %178 = load %union.tree_node*, %union.tree_node** %size387, align 8, !dbg !3569
  %base393 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !3569
  %179 = bitcast %struct.tree_base* %base393 to i64*, !dbg !3569
  %bf.load394 = load i64, i64* %179, align 8, !dbg !3569
  %bf.clear395 = and i64 %bf.load394, 65535, !dbg !3569
  %bf.cast396 = trunc i64 %bf.clear395 to i32, !dbg !3569
  %cmp397 = icmp eq i32 %bf.cast396, 23, !dbg !3570
  br i1 %cmp397, label %land.lhs.true399, label %if.end415, !dbg !3571

land.lhs.true399:                                 ; preds = %land.lhs.true392
  %180 = load %union.tree_node*, %union.tree_node** %size387, align 8, !dbg !3572
  %181 = load i64, i64* @larger_than_size, align 8, !dbg !3573
  %call400 = call i32 @compare_tree_int(%union.tree_node* %180, i64 %181), !dbg !3574
  %cmp401 = icmp sgt i32 %call400, 0, !dbg !3575
  br i1 %cmp401, label %if.then403, label %if.end415, !dbg !3576

if.then403:                                       ; preds = %land.lhs.true399
  call void @llvm.dbg.declare(metadata i32* %size_as_int, metadata !3577, metadata !DIExpression()), !dbg !3579
  %182 = load %union.tree_node*, %union.tree_node** %size387, align 8, !dbg !3580
  %int_cst = bitcast %union.tree_node* %182 to %struct.tree_int_cst*, !dbg !3580
  %int_cst404 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3580
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst404, i32 0, i32 0, !dbg !3580
  %183 = load i64, i64* %low, align 8, !dbg !3580
  %conv405 = trunc i64 %183 to i32, !dbg !3580
  store i32 %conv405, i32* %size_as_int, align 4, !dbg !3579
  %184 = load %union.tree_node*, %union.tree_node** %size387, align 8, !dbg !3581
  %185 = load i32, i32* %size_as_int, align 4, !dbg !3583
  %conv406 = sext i32 %185 to i64, !dbg !3583
  %call407 = call i32 @compare_tree_int(%union.tree_node* %184, i64 %conv406), !dbg !3584
  %cmp408 = icmp eq i32 %call407, 0, !dbg !3585
  br i1 %cmp408, label %if.then410, label %if.else412, !dbg !3586

if.then410:                                       ; preds = %if.then403
  %186 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3587
  %187 = load i32, i32* %size_as_int, align 4, !dbg !3588
  %call411 = call zeroext i8 (i32, i8*, ...) @warning(i32 121, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), %union.tree_node* %186, i32 %187), !dbg !3589
  br label %if.end414, !dbg !3589

if.else412:                                       ; preds = %if.then403
  %188 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3590
  %189 = load i64, i64* @larger_than_size, align 8, !dbg !3591
  %call413 = call zeroext i8 (i32, i8*, ...) @warning(i32 121, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0), %union.tree_node* %188, i64 %189), !dbg !3592
  br label %if.end414

if.end414:                                        ; preds = %if.else412, %if.then410
  br label %if.end415, !dbg !3593

if.end415:                                        ; preds = %if.end414, %land.lhs.true399, %land.lhs.true392, %if.then386
  br label %if.end416, !dbg !3594

if.end416:                                        ; preds = %if.end415, %land.lhs.true378, %lor.lhs.false375, %if.end369
  %190 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !3595
  %tobool417 = icmp ne %struct.rtx_def* %190, null, !dbg !3595
  br i1 %tobool417, label %if.then418, label %if.end429, !dbg !3597

if.then418:                                       ; preds = %if.end416
  %191 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3598
  %decl_common419 = bitcast %union.tree_node* %191 to %struct.tree_decl_common*, !dbg !3598
  %mode420 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common419, i32 0, i32 2, !dbg !3598
  %192 = bitcast i40* %mode420 to i64*, !dbg !3598
  %bf.load421 = load i64, i64* %192, align 8, !dbg !3598
  %bf.clear422 = and i64 %bf.load421, 255, !dbg !3598
  %bf.cast423 = trunc i64 %bf.clear422 to i32, !dbg !3598
  %193 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !3598
  %194 = bitcast %struct.rtx_def* %193 to i32*, !dbg !3598
  %bf.load424 = load i32, i32* %194, align 8, !dbg !3598
  %bf.value425 = and i32 %bf.cast423, 255, !dbg !3598
  %bf.shl426 = shl i32 %bf.value425, 16, !dbg !3598
  %bf.clear427 = and i32 %bf.load424, -16711681, !dbg !3598
  %bf.set428 = or i32 %bf.clear427, %bf.shl426, !dbg !3598
  store i32 %bf.set428, i32* %194, align 8, !dbg !3598
  %195 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3600
  call void @set_decl_rtl(%union.tree_node* %195, %struct.rtx_def* null), !dbg !3600
  %196 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !3601
  %197 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3602
  call void @set_mem_attributes(%struct.rtx_def* %196, %union.tree_node* %197, i32 1), !dbg !3603
  %198 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3604
  %199 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !3604
  call void @set_decl_rtl(%union.tree_node* %198, %struct.rtx_def* %199), !dbg !3604
  br label %if.end429, !dbg !3605

if.end429:                                        ; preds = %if.then, %if.then418, %if.end416
  ret void, !dbg !3606
}

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @vector_type_mode(%union.tree_node* %t) #0 !dbg !3607 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %innermode = alloca i32, align 4
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3610, metadata !DIExpression()), !dbg !3611
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3612, metadata !DIExpression()), !dbg !3613
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3614
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3614
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3614
  %bf.load = load i64, i64* %1, align 8, !dbg !3614
  %bf.clear = and i64 %bf.load, 65535, !dbg !3614
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3614
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !3614
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3614

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3614
  br label %cond.end, !dbg !3614

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3614

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3614
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3615
  %type = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !3616
  %mode1 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !3617
  %bf.load2 = load i32, i32* %mode1, align 4, !dbg !3617
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !3617
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !3617
  store i32 %bf.clear3, i32* %mode, align 4, !dbg !3618
  %3 = load i32, i32* %mode, align 4, !dbg !3619
  %idxprom = zext i32 %3 to i64, !dbg !3619
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3619
  %4 = load i8, i8* %arrayidx, align 1, !dbg !3619
  %conv = zext i8 %4 to i32, !dbg !3619
  %cmp4 = icmp eq i32 %conv, 12, !dbg !3619
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false, !dbg !3619

lor.lhs.false:                                    ; preds = %cond.end
  %5 = load i32, i32* %mode, align 4, !dbg !3619
  %idxprom6 = zext i32 %5 to i64, !dbg !3619
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom6, !dbg !3619
  %6 = load i8, i8* %arrayidx7, align 1, !dbg !3619
  %conv8 = zext i8 %6 to i32, !dbg !3619
  %cmp9 = icmp eq i32 %conv8, 17, !dbg !3619
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false11, !dbg !3619

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %7 = load i32, i32* %mode, align 4, !dbg !3619
  %idxprom12 = zext i32 %7 to i64, !dbg !3619
  %arrayidx13 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom12, !dbg !3619
  %8 = load i8, i8* %arrayidx13, align 1, !dbg !3619
  %conv14 = zext i8 %8 to i32, !dbg !3619
  %cmp15 = icmp eq i32 %conv14, 13, !dbg !3619
  br i1 %cmp15, label %land.lhs.true, label %lor.lhs.false17, !dbg !3619

lor.lhs.false17:                                  ; preds = %lor.lhs.false11
  %9 = load i32, i32* %mode, align 4, !dbg !3619
  %idxprom18 = zext i32 %9 to i64, !dbg !3619
  %arrayidx19 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom18, !dbg !3619
  %10 = load i8, i8* %arrayidx19, align 1, !dbg !3619
  %conv20 = zext i8 %10 to i32, !dbg !3619
  %cmp21 = icmp eq i32 %conv20, 14, !dbg !3619
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false23, !dbg !3619

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %11 = load i32, i32* %mode, align 4, !dbg !3619
  %idxprom24 = zext i32 %11 to i64, !dbg !3619
  %arrayidx25 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom24, !dbg !3619
  %12 = load i8, i8* %arrayidx25, align 1, !dbg !3619
  %conv26 = zext i8 %12 to i32, !dbg !3619
  %cmp27 = icmp eq i32 %conv26, 15, !dbg !3619
  br i1 %cmp27, label %land.lhs.true, label %lor.lhs.false29, !dbg !3619

lor.lhs.false29:                                  ; preds = %lor.lhs.false23
  %13 = load i32, i32* %mode, align 4, !dbg !3619
  %idxprom30 = zext i32 %13 to i64, !dbg !3619
  %arrayidx31 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom30, !dbg !3619
  %14 = load i8, i8* %arrayidx31, align 1, !dbg !3619
  %conv32 = zext i8 %14 to i32, !dbg !3619
  %cmp33 = icmp eq i32 %conv32, 16, !dbg !3619
  br i1 %cmp33, label %land.lhs.true, label %if.end72, !dbg !3621

land.lhs.true:                                    ; preds = %lor.lhs.false29, %lor.lhs.false23, %lor.lhs.false17, %lor.lhs.false11, %lor.lhs.false, %cond.end
  %15 = load i8 (i32)*, i8 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 59), align 8, !dbg !3622
  %16 = load i32, i32* %mode, align 4, !dbg !3623
  %call = call zeroext i8 %15(i32 %16), !dbg !3624
  %tobool = icmp ne i8 %call, 0, !dbg !3624
  br i1 %tobool, label %lor.lhs.false35, label %if.then, !dbg !3625

lor.lhs.false35:                                  ; preds = %land.lhs.true
  %17 = load i32, i32* %mode, align 4, !dbg !3626
  %idxprom36 = zext i32 %17 to i64, !dbg !3627
  %arrayidx37 = getelementptr inbounds [87 x i8], [87 x i8]* @have_regs_of_mode, i64 0, i64 %idxprom36, !dbg !3627
  %18 = load i8, i8* %arrayidx37, align 1, !dbg !3627
  %tobool38 = icmp ne i8 %18, 0, !dbg !3627
  br i1 %tobool38, label %if.end72, label %if.then, !dbg !3628

if.then:                                          ; preds = %lor.lhs.false35, %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %innermode, metadata !3629, metadata !DIExpression()), !dbg !3631
  %19 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3632
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !3632
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3632
  %20 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !3632
  %type40 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !3633
  %mode41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i32 0, i32 6, !dbg !3634
  %bf.load42 = load i32, i32* %mode41, align 4, !dbg !3634
  %bf.lshr43 = lshr i32 %bf.load42, 16, !dbg !3634
  %bf.clear44 = and i32 %bf.lshr43, 255, !dbg !3634
  store i32 %bf.clear44, i32* %innermode, align 4, !dbg !3631
  %21 = load i32, i32* %innermode, align 4, !dbg !3635
  %idxprom45 = zext i32 %21 to i64, !dbg !3635
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !3635
  %22 = load i8, i8* %arrayidx46, align 1, !dbg !3635
  %conv47 = zext i8 %22 to i32, !dbg !3635
  %cmp48 = icmp eq i32 %conv47, 2, !dbg !3637
  br i1 %cmp48, label %if.then50, label %if.end71, !dbg !3638

if.then50:                                        ; preds = %if.then
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3639
  %type51 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !3639
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type51, i32 0, i32 6, !dbg !3639
  %bf.load52 = load i32, i32* %precision, align 4, !dbg !3639
  %bf.clear53 = and i32 %bf.load52, 1023, !dbg !3639
  %sh_prom = zext i32 %bf.clear53 to i64, !dbg !3639
  %shl = shl i64 1, %sh_prom, !dbg !3639
  %24 = load i32, i32* %innermode, align 4, !dbg !3641
  %idxprom54 = zext i32 %24 to i64, !dbg !3641
  %arrayidx55 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom54, !dbg !3641
  %25 = load i8, i8* %arrayidx55, align 1, !dbg !3641
  %conv56 = zext i8 %25 to i16, !dbg !3641
  %conv57 = zext i16 %conv56 to i32, !dbg !3641
  %mul = mul nsw i32 %conv57, 8, !dbg !3641
  %conv58 = trunc i32 %mul to i16, !dbg !3641
  %conv59 = zext i16 %conv58 to i64, !dbg !3641
  %mul60 = mul i64 %shl, %conv59, !dbg !3642
  %conv61 = trunc i64 %mul60 to i32, !dbg !3639
  %call62 = call i32 @mode_for_size(i32 %conv61, i32 2, i32 0), !dbg !3643
  store i32 %call62, i32* %mode, align 4, !dbg !3644
  %26 = load i32, i32* %mode, align 4, !dbg !3645
  %cmp63 = icmp ne i32 %26, 0, !dbg !3647
  br i1 %cmp63, label %land.lhs.true65, label %if.end, !dbg !3648

land.lhs.true65:                                  ; preds = %if.then50
  %27 = load i32, i32* %mode, align 4, !dbg !3649
  %idxprom66 = zext i32 %27 to i64, !dbg !3650
  %arrayidx67 = getelementptr inbounds [87 x i8], [87 x i8]* @have_regs_of_mode, i64 0, i64 %idxprom66, !dbg !3650
  %28 = load i8, i8* %arrayidx67, align 1, !dbg !3650
  %conv68 = zext i8 %28 to i32, !dbg !3650
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !3650
  br i1 %tobool69, label %if.then70, label %if.end, !dbg !3651

if.then70:                                        ; preds = %land.lhs.true65
  %29 = load i32, i32* %mode, align 4, !dbg !3652
  store i32 %29, i32* %retval, align 4, !dbg !3653
  br label %return, !dbg !3653

if.end:                                           ; preds = %land.lhs.true65, %if.then50
  br label %if.end71, !dbg !3654

if.end71:                                         ; preds = %if.end, %if.then
  store i32 1, i32* %retval, align 4, !dbg !3655
  br label %return, !dbg !3655

if.end72:                                         ; preds = %lor.lhs.false35, %lor.lhs.false29
  %30 = load i32, i32* %mode, align 4, !dbg !3656
  store i32 %30, i32* %retval, align 4, !dbg !3657
  br label %return, !dbg !3657

return:                                           ; preds = %if.end72, %if.end71, %if.then70
  %31 = load i32, i32* %retval, align 4, !dbg !3658
  ret i32 %31, !dbg !3658
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_type_align(%union.tree_node* %type, %union.tree_node* %decl) #0 !dbg !3659 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3662, metadata !DIExpression()), !dbg !3663
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3666
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !3666
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 7, !dbg !3666
  %1 = load i32, i32* %align, align 8, !dbg !3666
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3668
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !3668
  %align2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !3668
  %3 = load i32, i32* %align2, align 8, !dbg !3668
  %cmp = icmp ugt i32 %1, %3, !dbg !3669
  br i1 %cmp, label %if.then, label %if.end17, !dbg !3670

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3671
  %type3 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !3671
  %align4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 7, !dbg !3671
  %5 = load i32, i32* %align4, align 8, !dbg !3671
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3673
  %decl_common5 = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !3673
  %align6 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common5, i32 0, i32 3, !dbg !3673
  store i32 %5, i32* %align6, align 8, !dbg !3674
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3675
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3675
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !3675
  %bf.load = load i64, i64* %8, align 8, !dbg !3675
  %bf.clear = and i64 %bf.load, 65535, !dbg !3675
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3675
  %cmp7 = icmp eq i32 %bf.cast, 31, !dbg !3677
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !3678

if.then8:                                         ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3679
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !3679
  %base9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !3679
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !3679
  %bf.load10 = load i64, i64* %10, align 8, !dbg !3679
  %bf.lshr = lshr i64 %bf.load10, 42, !dbg !3679
  %bf.clear11 = and i64 %bf.lshr, 1, !dbg !3679
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !3679
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3680
  %common13 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3680
  %base14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 0, !dbg !3680
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3680
  %13 = zext i32 %bf.cast12 to i64, !dbg !3681
  %bf.load15 = load i64, i64* %12, align 8, !dbg !3681
  %bf.value = and i64 %13, 1, !dbg !3681
  %bf.shl = shl i64 %bf.value, 42, !dbg !3681
  %bf.clear16 = and i64 %bf.load15, -4398046511105, !dbg !3681
  %bf.set = or i64 %bf.clear16, %bf.shl, !dbg !3681
  store i64 %bf.set, i64* %12, align 8, !dbg !3681
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !3681
  br label %if.end, !dbg !3680

if.end:                                           ; preds = %if.then8, %if.then
  br label %if.end17, !dbg !3682

if.end17:                                         ; preds = %if.end, %entry
  ret void, !dbg !3683
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @x86_field_alignment(%union.tree_node*, i32) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @relayout_decl(%union.tree_node* %decl) #0 !dbg !3684 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3685, metadata !DIExpression()), !dbg !3686
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3687
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !3687
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !3687
  store %union.tree_node* null, %union.tree_node** %size_unit, align 8, !dbg !3688
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3689
  %decl_common1 = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !3689
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 1, !dbg !3689
  store %union.tree_node* null, %union.tree_node** %size, align 8, !dbg !3690
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3691
  %decl_common2 = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !3691
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 2, !dbg !3691
  %3 = bitcast i40* %mode to i64*, !dbg !3691
  %bf.load = load i64, i64* %3, align 8, !dbg !3692
  %bf.clear = and i64 %bf.load, -256, !dbg !3692
  store i64 %bf.clear, i64* %3, align 8, !dbg !3692
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3693
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3693
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !3693
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3693
  %bf.load3 = load i64, i64* %5, align 8, !dbg !3693
  %bf.lshr = lshr i64 %bf.load3, 42, !dbg !3693
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !3693
  %bf.cast = trunc i64 %bf.clear4 to i32, !dbg !3693
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3693
  br i1 %tobool, label %if.end, label %if.then, !dbg !3695

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3696
  %decl_common5 = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !3696
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common5, i32 0, i32 3, !dbg !3696
  store i32 0, i32* %align, align 8, !dbg !3697
  br label %if.end, !dbg !3696

if.end:                                           ; preds = %if.then, %entry
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3698
  call void @set_decl_rtl(%union.tree_node* %7, %struct.rtx_def* null), !dbg !3698
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3699
  call void @layout_decl(%union.tree_node* %8, i32 0), !dbg !3700
  ret void, !dbg !3701
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.record_layout_info_s* @start_record_layout(%union.tree_node* %t) #0 !dbg !3702 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %rli = alloca %struct.record_layout_info_s*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3706, metadata !DIExpression()), !dbg !3707
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli, metadata !3708, metadata !DIExpression()), !dbg !3709
  %call = call i8* @xmalloc(i64 64), !dbg !3710
  %0 = bitcast i8* %call to %struct.record_layout_info_s*, !dbg !3710
  store %struct.record_layout_info_s* %0, %struct.record_layout_info_s** %rli, align 8, !dbg !3709
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3711
  %2 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3712
  %t1 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %2, i32 0, i32 0, !dbg !3713
  store %union.tree_node* %1, %union.tree_node** %t1, align 8, !dbg !3714
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3715
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !3715
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 7, !dbg !3715
  %4 = load i32, i32* %align, align 8, !dbg !3715
  %cmp = icmp ugt i32 8, %4, !dbg !3715
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3715

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !3715

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3715
  %type2 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !3715
  %align3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 7, !dbg !3715
  %6 = load i32, i32* %align3, align 8, !dbg !3715
  br label %cond.end, !dbg !3715

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 8, %cond.true ], [ %6, %cond.false ], !dbg !3715
  %7 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3716
  %record_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %7, i32 0, i32 4, !dbg !3717
  store i32 %cond, i32* %record_align, align 8, !dbg !3718
  %8 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3719
  %record_align4 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %8, i32 0, i32 4, !dbg !3720
  %9 = load i32, i32* %record_align4, align 8, !dbg !3720
  %10 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3721
  %unpacked_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %10, i32 0, i32 5, !dbg !3722
  store i32 %9, i32* %unpacked_align, align 4, !dbg !3723
  %11 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3724
  %record_align5 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %11, i32 0, i32 4, !dbg !3724
  %12 = load i32, i32* %record_align5, align 8, !dbg !3724
  %13 = load i32, i32* @ix86_isa_flags, align 4, !dbg !3724
  %and = and i32 %13, 32, !dbg !3724
  %cmp6 = icmp ne i32 %and, 0, !dbg !3724
  %14 = zext i1 %cmp6 to i64, !dbg !3724
  %cond7 = select i1 %cmp6, i32 256, i32 128, !dbg !3724
  %cmp8 = icmp ugt i32 %12, %cond7, !dbg !3724
  br i1 %cmp8, label %cond.true9, label %cond.false11, !dbg !3724

cond.true9:                                       ; preds = %cond.end
  %15 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3724
  %record_align10 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %15, i32 0, i32 4, !dbg !3724
  %16 = load i32, i32* %record_align10, align 8, !dbg !3724
  br label %cond.end15, !dbg !3724

cond.false11:                                     ; preds = %cond.end
  %17 = load i32, i32* @ix86_isa_flags, align 4, !dbg !3724
  %and12 = and i32 %17, 32, !dbg !3724
  %cmp13 = icmp ne i32 %and12, 0, !dbg !3724
  %18 = zext i1 %cmp13 to i64, !dbg !3724
  %cond14 = select i1 %cmp13, i32 256, i32 128, !dbg !3724
  br label %cond.end15, !dbg !3724

cond.end15:                                       ; preds = %cond.false11, %cond.true9
  %cond16 = phi i32 [ %16, %cond.true9 ], [ %cond14, %cond.false11 ], !dbg !3724
  %19 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3725
  %offset_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %19, i32 0, i32 2, !dbg !3726
  store i32 %cond16, i32* %offset_align, align 8, !dbg !3727
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !3728
  %21 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3729
  %offset = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %21, i32 0, i32 1, !dbg !3730
  store %union.tree_node* %20, %union.tree_node** %offset, align 8, !dbg !3731
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !dbg !3732
  %23 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3733
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %23, i32 0, i32 3, !dbg !3734
  store %union.tree_node* %22, %union.tree_node** %bitpos, align 8, !dbg !3735
  %24 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3736
  %prev_field = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %24, i32 0, i32 6, !dbg !3737
  store %union.tree_node* null, %union.tree_node** %prev_field, align 8, !dbg !3738
  %25 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3739
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %25, i32 0, i32 7, !dbg !3740
  store %union.tree_node* null, %union.tree_node** %pending_statics, align 8, !dbg !3741
  %26 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3742
  %packed_maybe_necessary = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %26, i32 0, i32 9, !dbg !3743
  store i32 0, i32* %packed_maybe_necessary, align 4, !dbg !3744
  %27 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3745
  %remaining_in_alignment = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %27, i32 0, i32 8, !dbg !3746
  store i32 0, i32* %remaining_in_alignment, align 8, !dbg !3747
  %28 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !3748
  ret %struct.record_layout_info_s* %28, !dbg !3749
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @bit_from_pos(%union.tree_node* %offset, %union.tree_node* %bitpos) #0 !dbg !3750 {
entry:
  %offset.addr = alloca %union.tree_node*, align 8
  %bitpos.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !3753, metadata !DIExpression()), !dbg !3754
  store %union.tree_node* %bitpos, %union.tree_node** %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bitpos.addr, metadata !3755, metadata !DIExpression()), !dbg !3756
  %0 = load %union.tree_node*, %union.tree_node** %bitpos.addr, align 8, !dbg !3757
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !3757
  %2 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3757
  %call = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %1, %union.tree_node* %2), !dbg !3757
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !dbg !3757
  %call1 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %call, %union.tree_node* %3), !dbg !3757
  %call2 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %0, %union.tree_node* %call1), !dbg !3757
  ret %union.tree_node* %call2, !dbg !3758
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @byte_from_pos(%union.tree_node* %offset, %union.tree_node* %bitpos) #0 !dbg !3759 {
entry:
  %offset.addr = alloca %union.tree_node*, align 8
  %bitpos.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !3760, metadata !DIExpression()), !dbg !3761
  store %union.tree_node* %bitpos, %union.tree_node** %bitpos.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bitpos.addr, metadata !3762, metadata !DIExpression()), !dbg !3763
  %0 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !3764
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !3764
  %2 = load %union.tree_node*, %union.tree_node** %bitpos.addr, align 8, !dbg !3764
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !dbg !3764
  %call = call %union.tree_node* @size_binop_loc(i32 0, i32 67, %union.tree_node* %2, %union.tree_node* %3), !dbg !3764
  %call1 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %1, %union.tree_node* %call), !dbg !3764
  %call2 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %0, %union.tree_node* %call1), !dbg !3764
  ret %union.tree_node* %call2, !dbg !3765
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pos_from_bit(%union.tree_node** %poffset, %union.tree_node** %pbitpos, i32 %off_align, %union.tree_node* %pos) #0 !dbg !3766 {
entry:
  %poffset.addr = alloca %union.tree_node**, align 8
  %pbitpos.addr = alloca %union.tree_node**, align 8
  %off_align.addr = alloca i32, align 4
  %pos.addr = alloca %union.tree_node*, align 8
  store %union.tree_node** %poffset, %union.tree_node*** %poffset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %poffset.addr, metadata !3769, metadata !DIExpression()), !dbg !3770
  store %union.tree_node** %pbitpos, %union.tree_node*** %pbitpos.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pbitpos.addr, metadata !3771, metadata !DIExpression()), !dbg !3772
  store i32 %off_align, i32* %off_align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %off_align.addr, metadata !3773, metadata !DIExpression()), !dbg !3774
  store %union.tree_node* %pos, %union.tree_node** %pos.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %pos.addr, metadata !3775, metadata !DIExpression()), !dbg !3776
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !3777
  %1 = load %union.tree_node*, %union.tree_node** %pos.addr, align 8, !dbg !3777
  %2 = load i32, i32* %off_align.addr, align 4, !dbg !3777
  %conv = zext i32 %2 to i64, !dbg !3777
  %call = call %union.tree_node* @size_int_kind(i64 %conv, i32 2), !dbg !3777
  %call1 = call %union.tree_node* @size_binop_loc(i32 0, i32 69, %union.tree_node* %1, %union.tree_node* %call), !dbg !3777
  %call2 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %0, %union.tree_node* %call1), !dbg !3777
  %3 = load i32, i32* %off_align.addr, align 4, !dbg !3777
  %div = udiv i32 %3, 8, !dbg !3777
  %conv3 = zext i32 %div to i64, !dbg !3777
  %call4 = call %union.tree_node* @size_int_kind(i64 %conv3, i32 0), !dbg !3777
  %call5 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %call2, %union.tree_node* %call4), !dbg !3777
  %4 = load %union.tree_node**, %union.tree_node*** %poffset.addr, align 8, !dbg !3778
  store %union.tree_node* %call5, %union.tree_node** %4, align 8, !dbg !3779
  %5 = load %union.tree_node*, %union.tree_node** %pos.addr, align 8, !dbg !3780
  %6 = load i32, i32* %off_align.addr, align 4, !dbg !3780
  %conv6 = zext i32 %6 to i64, !dbg !3780
  %call7 = call %union.tree_node* @size_int_kind(i64 %conv6, i32 2), !dbg !3780
  %call8 = call %union.tree_node* @size_binop_loc(i32 0, i32 73, %union.tree_node* %5, %union.tree_node* %call7), !dbg !3780
  %7 = load %union.tree_node**, %union.tree_node*** %pbitpos.addr, align 8, !dbg !3781
  store %union.tree_node* %call8, %union.tree_node** %7, align 8, !dbg !3782
  ret void, !dbg !3783
}

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @normalize_offset(%union.tree_node** %poffset, %union.tree_node** %pbitpos, i32 %off_align) #0 !dbg !3784 {
entry:
  %poffset.addr = alloca %union.tree_node**, align 8
  %pbitpos.addr = alloca %union.tree_node**, align 8
  %off_align.addr = alloca i32, align 4
  %extra_aligns = alloca %union.tree_node*, align 8
  store %union.tree_node** %poffset, %union.tree_node*** %poffset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %poffset.addr, metadata !3787, metadata !DIExpression()), !dbg !3788
  store %union.tree_node** %pbitpos, %union.tree_node*** %pbitpos.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pbitpos.addr, metadata !3789, metadata !DIExpression()), !dbg !3790
  store i32 %off_align, i32* %off_align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %off_align.addr, metadata !3791, metadata !DIExpression()), !dbg !3792
  %0 = load %union.tree_node**, %union.tree_node*** %pbitpos.addr, align 8, !dbg !3793
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !3795
  %2 = load i32, i32* %off_align.addr, align 4, !dbg !3796
  %conv = zext i32 %2 to i64, !dbg !3796
  %call = call i32 @compare_tree_int(%union.tree_node* %1, i64 %conv), !dbg !3797
  %cmp = icmp sge i32 %call, 0, !dbg !3798
  br i1 %cmp, label %if.then, label %if.end, !dbg !3799

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %extra_aligns, metadata !3800, metadata !DIExpression()), !dbg !3802
  %3 = load %union.tree_node**, %union.tree_node*** %pbitpos.addr, align 8, !dbg !3803
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !3803
  %5 = load i32, i32* %off_align.addr, align 4, !dbg !3803
  %conv2 = zext i32 %5 to i64, !dbg !3803
  %call3 = call %union.tree_node* @size_int_kind(i64 %conv2, i32 2), !dbg !3803
  %call4 = call %union.tree_node* @size_binop_loc(i32 0, i32 69, %union.tree_node* %4, %union.tree_node* %call3), !dbg !3803
  store %union.tree_node* %call4, %union.tree_node** %extra_aligns, align 8, !dbg !3802
  %6 = load %union.tree_node**, %union.tree_node*** %poffset.addr, align 8, !dbg !3804
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !3804
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !3804
  %9 = load %union.tree_node*, %union.tree_node** %extra_aligns, align 8, !dbg !3804
  %call5 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %8, %union.tree_node* %9), !dbg !3804
  %10 = load i32, i32* %off_align.addr, align 4, !dbg !3804
  %div = udiv i32 %10, 8, !dbg !3804
  %conv6 = zext i32 %div to i64, !dbg !3804
  %call7 = call %union.tree_node* @size_int_kind(i64 %conv6, i32 0), !dbg !3804
  %call8 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %call5, %union.tree_node* %call7), !dbg !3804
  %call9 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %7, %union.tree_node* %call8), !dbg !3804
  %11 = load %union.tree_node**, %union.tree_node*** %poffset.addr, align 8, !dbg !3805
  store %union.tree_node* %call9, %union.tree_node** %11, align 8, !dbg !3806
  %12 = load %union.tree_node**, %union.tree_node*** %pbitpos.addr, align 8, !dbg !3807
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !3807
  %14 = load i32, i32* %off_align.addr, align 4, !dbg !3807
  %conv10 = zext i32 %14 to i64, !dbg !3807
  %call11 = call %union.tree_node* @size_int_kind(i64 %conv10, i32 2), !dbg !3807
  %call12 = call %union.tree_node* @size_binop_loc(i32 0, i32 73, %union.tree_node* %13, %union.tree_node* %call11), !dbg !3807
  %15 = load %union.tree_node**, %union.tree_node*** %pbitpos.addr, align 8, !dbg !3808
  store %union.tree_node* %call12, %union.tree_node** %15, align 8, !dbg !3809
  br label %if.end, !dbg !3810

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3811
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_rli(%struct.record_layout_info_s* %rli) #0 !dbg !3812 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !3815, metadata !DIExpression()), !dbg !3816
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3817
  %1 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3818
  %t = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %1, i32 0, i32 0, !dbg !3819
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3819
  call void @print_node_brief(%struct._IO_FILE* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), %union.tree_node* %2, i32 0), !dbg !3820
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3821
  %4 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3822
  %offset = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %4, i32 0, i32 1, !dbg !3823
  %5 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3823
  call void @print_node_brief(%struct._IO_FILE* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), %union.tree_node* %5, i32 0), !dbg !3824
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3825
  %7 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3826
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %7, i32 0, i32 3, !dbg !3827
  %8 = load %union.tree_node*, %union.tree_node** %bitpos, align 8, !dbg !3827
  call void @print_node_brief(%struct._IO_FILE* %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), %union.tree_node* %8, i32 0), !dbg !3828
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3829
  %10 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3830
  %record_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %10, i32 0, i32 4, !dbg !3831
  %11 = load i32, i32* %record_align, align 8, !dbg !3831
  %12 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3832
  %unpacked_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %12, i32 0, i32 5, !dbg !3833
  %13 = load i32, i32* %unpacked_align, align 4, !dbg !3833
  %14 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3834
  %offset_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %14, i32 0, i32 2, !dbg !3835
  %15 = load i32, i32* %offset_align, align 8, !dbg !3835
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.9, i64 0, i64 0), i32 %11, i32 %13, i32 %15), !dbg !3836
  %16 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !3837
  %17 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3839
  %t1 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %17, i32 0, i32 0, !dbg !3840
  %18 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !3840
  %call2 = call zeroext i8 %16(%union.tree_node* %18), !dbg !3841
  %tobool = icmp ne i8 %call2, 0, !dbg !3841
  br i1 %tobool, label %if.then, label %if.end, !dbg !3842

if.then:                                          ; preds = %entry
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3843
  %20 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3844
  %remaining_in_alignment = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %20, i32 0, i32 8, !dbg !3845
  %21 = load i32, i32* %remaining_in_alignment, align 8, !dbg !3845
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i64 0, i64 0), i32 %21), !dbg !3846
  br label %if.end, !dbg !3846

if.end:                                           ; preds = %if.then, %entry
  %22 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3847
  %packed_maybe_necessary = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %22, i32 0, i32 9, !dbg !3849
  %23 = load i32, i32* %packed_maybe_necessary, align 4, !dbg !3849
  %tobool4 = icmp ne i32 %23, 0, !dbg !3847
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !3850

if.then5:                                         ; preds = %if.end
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3851
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0)), !dbg !3852
  br label %if.end7, !dbg !3852

if.end7:                                          ; preds = %if.then5, %if.end
  %25 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3853
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %25, i32 0, i32 7, !dbg !3855
  %26 = load %union.tree_node*, %union.tree_node** %pending_statics, align 8, !dbg !3855
  %tobool8 = icmp ne %union.tree_node* %26, null, !dbg !3853
  br i1 %tobool8, label %if.then9, label %if.end12, !dbg !3856

if.then9:                                         ; preds = %if.end7
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3857
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0)), !dbg !3859
  %28 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3860
  %pending_statics11 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %28, i32 0, i32 7, !dbg !3861
  %29 = load %union.tree_node*, %union.tree_node** %pending_statics11, align 8, !dbg !3861
  call void @debug_tree(%union.tree_node* %29), !dbg !3862
  br label %if.end12, !dbg !3863

if.end12:                                         ; preds = %if.then9, %if.end7
  ret void, !dbg !3864
}

declare dso_local void @print_node_brief(%struct._IO_FILE*, i8*, %union.tree_node*, i32) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @debug_tree(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @normalize_rli(%struct.record_layout_info_s* %rli) #0 !dbg !3865 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !3866, metadata !DIExpression()), !dbg !3867
  %0 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3868
  %offset = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %0, i32 0, i32 1, !dbg !3869
  %1 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3870
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %1, i32 0, i32 3, !dbg !3871
  %2 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3872
  %offset_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %2, i32 0, i32 2, !dbg !3873
  %3 = load i32, i32* %offset_align, align 8, !dbg !3873
  call void @normalize_offset(%union.tree_node** %offset, %union.tree_node** %bitpos, i32 %3), !dbg !3874
  ret void, !dbg !3875
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @rli_size_unit_so_far(%struct.record_layout_info_s* %rli) #0 !dbg !3876 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !3879, metadata !DIExpression()), !dbg !3880
  %0 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3881
  %offset = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %0, i32 0, i32 1, !dbg !3882
  %1 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3882
  %2 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3883
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %2, i32 0, i32 3, !dbg !3884
  %3 = load %union.tree_node*, %union.tree_node** %bitpos, align 8, !dbg !3884
  %call = call %union.tree_node* @byte_from_pos(%union.tree_node* %1, %union.tree_node* %3), !dbg !3885
  ret %union.tree_node* %call, !dbg !3886
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @rli_size_so_far(%struct.record_layout_info_s* %rli) #0 !dbg !3887 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !3888, metadata !DIExpression()), !dbg !3889
  %0 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3890
  %offset = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %0, i32 0, i32 1, !dbg !3891
  %1 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3891
  %2 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3892
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %2, i32 0, i32 3, !dbg !3893
  %3 = load %union.tree_node*, %union.tree_node** %bitpos, align 8, !dbg !3893
  %call = call %union.tree_node* @bit_from_pos(%union.tree_node* %1, %union.tree_node* %3), !dbg !3894
  ret %union.tree_node* %call, !dbg !3895
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @update_alignment_for_field(%struct.record_layout_info_s* %rli, %union.tree_node* %field, i32 %known_align) #0 !dbg !3896 {
entry:
  %retval = alloca i32, align 4
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  %known_align.addr = alloca i32, align 4
  %desired_align = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %user_align = alloca i8, align 1
  %is_bitfield = alloca i8, align 1
  %type_align = alloca i32, align 4
  %type_align95 = alloca i32, align 4
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !3899, metadata !DIExpression()), !dbg !3900
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !3901, metadata !DIExpression()), !dbg !3902
  store i32 %known_align, i32* %known_align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %known_align.addr, metadata !3903, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.declare(metadata i32* %desired_align, metadata !3905, metadata !DIExpression()), !dbg !3906
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3907, metadata !DIExpression()), !dbg !3908
  %0 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3909
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3909
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3909
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !3909
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !3908
  call void @llvm.dbg.declare(metadata i8* %user_align, metadata !3910, metadata !DIExpression()), !dbg !3911
  call void @llvm.dbg.declare(metadata i8* %is_bitfield, metadata !3912, metadata !DIExpression()), !dbg !3913
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3914
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3914
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3914
  %bf.load = load i64, i64* %3, align 8, !dbg !3914
  %bf.clear = and i64 %bf.load, 65535, !dbg !3914
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3914
  %cmp = icmp eq i32 %bf.cast, 0, !dbg !3916
  br i1 %cmp, label %if.then, label %if.end, !dbg !3917

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3918
  br label %return, !dbg !3918

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3919
  %5 = load i32, i32* %known_align.addr, align 4, !dbg !3920
  call void @layout_decl(%union.tree_node* %4, i32 %5), !dbg !3921
  %6 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3922
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !3922
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !3922
  %7 = load i32, i32* %align, align 8, !dbg !3922
  store i32 %7, i32* %desired_align, align 4, !dbg !3923
  %8 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3924
  %common2 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !3924
  %base3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 0, !dbg !3924
  %9 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3924
  %bf.load4 = load i64, i64* %9, align 8, !dbg !3924
  %bf.lshr = lshr i64 %bf.load4, 42, !dbg !3924
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !3924
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3924
  %conv = trunc i32 %bf.cast6 to i8, !dbg !3924
  store i8 %conv, i8* %user_align, align 1, !dbg !3925
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3926
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3927
  %cmp7 = icmp ne %union.tree_node* %10, %11, !dbg !3928
  br i1 %cmp7, label %land.lhs.true, label %land.end, !dbg !3929

land.lhs.true:                                    ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3930
  %field_decl = bitcast %union.tree_node* %12 to %struct.tree_field_decl*, !dbg !3930
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 2, !dbg !3930
  %13 = load %union.tree_node*, %union.tree_node** %bit_field_type, align 8, !dbg !3930
  %tobool = icmp ne %union.tree_node* %13, null, !dbg !3930
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3931

land.rhs:                                         ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3932
  %type9 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !3932
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 2, !dbg !3932
  %15 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !3932
  %call = call i32 @integer_zerop(%union.tree_node* %15), !dbg !3933
  %tobool10 = icmp ne i32 %call, 0, !dbg !3934
  %lnot = xor i1 %tobool10, true, !dbg !3934
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end
  %16 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %lnot, %land.rhs ], !dbg !3935
  %land.ext = zext i1 %16 to i32, !dbg !3931
  %conv11 = trunc i32 %land.ext to i8, !dbg !3936
  store i8 %conv11, i8* %is_bitfield, align 1, !dbg !3937
  %17 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !3938
  %18 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3940
  %t = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %18, i32 0, i32 0, !dbg !3941
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3941
  %call12 = call zeroext i8 %17(%union.tree_node* %19), !dbg !3942
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3942
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !3943

if.then14:                                        ; preds = %land.end
  %20 = load i8, i8* %is_bitfield, align 1, !dbg !3944
  %tobool15 = icmp ne i8 %20, 0, !dbg !3944
  br i1 %tobool15, label %lor.lhs.false, label %land.lhs.true16, !dbg !3947

land.lhs.true16:                                  ; preds = %if.then14
  %21 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3948
  %common17 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !3948
  %base18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 0, !dbg !3948
  %22 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3948
  %bf.load19 = load i64, i64* %22, align 8, !dbg !3948
  %bf.lshr20 = lshr i64 %bf.load19, 41, !dbg !3948
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !3948
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !3948
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !3948
  br i1 %tobool23, label %lor.lhs.false, label %if.then47, !dbg !3949

lor.lhs.false:                                    ; preds = %land.lhs.true16, %if.then14
  %23 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3950
  %decl_common24 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !3950
  %size25 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common24, i32 0, i32 1, !dbg !3950
  %24 = load %union.tree_node*, %union.tree_node** %size25, align 8, !dbg !3950
  %call26 = call i32 @integer_zerop(%union.tree_node* %24), !dbg !3951
  %tobool27 = icmp ne i32 %call26, 0, !dbg !3951
  br i1 %tobool27, label %cond.false, label %cond.true, !dbg !3952

cond.true:                                        ; preds = %lor.lhs.false
  %25 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3953
  %common28 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !3953
  %base29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 0, !dbg !3953
  %26 = bitcast %struct.tree_base* %base29 to i64*, !dbg !3953
  %bf.load30 = load i64, i64* %26, align 8, !dbg !3953
  %bf.lshr31 = lshr i64 %bf.load30, 41, !dbg !3953
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !3953
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !3953
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !3953
  br i1 %tobool34, label %if.end84, label %if.then47, !dbg !3954

cond.false:                                       ; preds = %lor.lhs.false
  %27 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3955
  %prev_field = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %27, i32 0, i32 6, !dbg !3956
  %28 = load %union.tree_node*, %union.tree_node** %prev_field, align 8, !dbg !3956
  %tobool35 = icmp ne %union.tree_node* %28, null, !dbg !3955
  br i1 %tobool35, label %land.lhs.true36, label %if.end84, !dbg !3957

land.lhs.true36:                                  ; preds = %cond.false
  %29 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3958
  %prev_field37 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %29, i32 0, i32 6, !dbg !3958
  %30 = load %union.tree_node*, %union.tree_node** %prev_field37, align 8, !dbg !3958
  %field_decl38 = bitcast %union.tree_node* %30 to %struct.tree_field_decl*, !dbg !3958
  %bit_field_type39 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl38, i32 0, i32 2, !dbg !3958
  %31 = load %union.tree_node*, %union.tree_node** %bit_field_type39, align 8, !dbg !3958
  %tobool40 = icmp ne %union.tree_node* %31, null, !dbg !3958
  br i1 %tobool40, label %land.lhs.true41, label %if.end84, !dbg !3959

land.lhs.true41:                                  ; preds = %land.lhs.true36
  %32 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3960
  %prev_field42 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %32, i32 0, i32 6, !dbg !3960
  %33 = load %union.tree_node*, %union.tree_node** %prev_field42, align 8, !dbg !3960
  %decl_common43 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !3960
  %size44 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common43, i32 0, i32 1, !dbg !3960
  %34 = load %union.tree_node*, %union.tree_node** %size44, align 8, !dbg !3960
  %call45 = call i32 @integer_zerop(%union.tree_node* %34), !dbg !3961
  %tobool46 = icmp ne i32 %call45, 0, !dbg !3961
  br i1 %tobool46, label %if.end84, label %if.then47, !dbg !3952

if.then47:                                        ; preds = %land.lhs.true41, %cond.true, %land.lhs.true16
  call void @llvm.dbg.declare(metadata i32* %type_align, metadata !3962, metadata !DIExpression()), !dbg !3964
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3965
  %type48 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !3965
  %align49 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type48, i32 0, i32 7, !dbg !3965
  %36 = load i32, i32* %align49, align 8, !dbg !3965
  store i32 %36, i32* %type_align, align 4, !dbg !3964
  %37 = load i32, i32* %type_align, align 4, !dbg !3966
  %38 = load i32, i32* %desired_align, align 4, !dbg !3966
  %cmp50 = icmp ugt i32 %37, %38, !dbg !3966
  br i1 %cmp50, label %cond.true52, label %cond.false53, !dbg !3966

cond.true52:                                      ; preds = %if.then47
  %39 = load i32, i32* %type_align, align 4, !dbg !3966
  br label %cond.end, !dbg !3966

cond.false53:                                     ; preds = %if.then47
  %40 = load i32, i32* %desired_align, align 4, !dbg !3966
  br label %cond.end, !dbg !3966

cond.end:                                         ; preds = %cond.false53, %cond.true52
  %cond = phi i32 [ %39, %cond.true52 ], [ %40, %cond.false53 ], !dbg !3966
  store i32 %cond, i32* %type_align, align 4, !dbg !3967
  %41 = load i32, i32* @maximum_field_alignment, align 4, !dbg !3968
  %cmp54 = icmp ne i32 %41, 0, !dbg !3970
  br i1 %cmp54, label %if.then56, label %if.end63, !dbg !3971

if.then56:                                        ; preds = %cond.end
  %42 = load i32, i32* %type_align, align 4, !dbg !3972
  %43 = load i32, i32* @maximum_field_alignment, align 4, !dbg !3972
  %cmp57 = icmp ult i32 %42, %43, !dbg !3972
  br i1 %cmp57, label %cond.true59, label %cond.false60, !dbg !3972

cond.true59:                                      ; preds = %if.then56
  %44 = load i32, i32* %type_align, align 4, !dbg !3972
  br label %cond.end61, !dbg !3972

cond.false60:                                     ; preds = %if.then56
  %45 = load i32, i32* @maximum_field_alignment, align 4, !dbg !3972
  br label %cond.end61, !dbg !3972

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond62 = phi i32 [ %44, %cond.true59 ], [ %45, %cond.false60 ], !dbg !3972
  store i32 %cond62, i32* %type_align, align 4, !dbg !3973
  br label %if.end63, !dbg !3974

if.end63:                                         ; preds = %cond.end61, %cond.end
  %46 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3975
  %record_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %46, i32 0, i32 4, !dbg !3975
  %47 = load i32, i32* %record_align, align 8, !dbg !3975
  %48 = load i32, i32* %type_align, align 4, !dbg !3975
  %cmp64 = icmp ugt i32 %47, %48, !dbg !3975
  br i1 %cmp64, label %cond.true66, label %cond.false68, !dbg !3975

cond.true66:                                      ; preds = %if.end63
  %49 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3975
  %record_align67 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %49, i32 0, i32 4, !dbg !3975
  %50 = load i32, i32* %record_align67, align 8, !dbg !3975
  br label %cond.end69, !dbg !3975

cond.false68:                                     ; preds = %if.end63
  %51 = load i32, i32* %type_align, align 4, !dbg !3975
  br label %cond.end69, !dbg !3975

cond.end69:                                       ; preds = %cond.false68, %cond.true66
  %cond70 = phi i32 [ %50, %cond.true66 ], [ %51, %cond.false68 ], !dbg !3975
  %52 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3976
  %record_align71 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %52, i32 0, i32 4, !dbg !3977
  store i32 %cond70, i32* %record_align71, align 8, !dbg !3978
  %53 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3979
  %unpacked_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %53, i32 0, i32 5, !dbg !3979
  %54 = load i32, i32* %unpacked_align, align 4, !dbg !3979
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3979
  %type72 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !3979
  %align73 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type72, i32 0, i32 7, !dbg !3979
  %56 = load i32, i32* %align73, align 8, !dbg !3979
  %cmp74 = icmp ugt i32 %54, %56, !dbg !3979
  br i1 %cmp74, label %cond.true76, label %cond.false78, !dbg !3979

cond.true76:                                      ; preds = %cond.end69
  %57 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3979
  %unpacked_align77 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %57, i32 0, i32 5, !dbg !3979
  %58 = load i32, i32* %unpacked_align77, align 4, !dbg !3979
  br label %cond.end81, !dbg !3979

cond.false78:                                     ; preds = %cond.end69
  %59 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3979
  %type79 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !3979
  %align80 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type79, i32 0, i32 7, !dbg !3979
  %60 = load i32, i32* %align80, align 8, !dbg !3979
  br label %cond.end81, !dbg !3979

cond.end81:                                       ; preds = %cond.false78, %cond.true76
  %cond82 = phi i32 [ %58, %cond.true76 ], [ %60, %cond.false78 ], !dbg !3979
  %61 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !3980
  %unpacked_align83 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %61, i32 0, i32 5, !dbg !3981
  store i32 %cond82, i32* %unpacked_align83, align 4, !dbg !3982
  br label %if.end84, !dbg !3983

if.end84:                                         ; preds = %cond.end81, %land.lhs.true41, %land.lhs.true36, %cond.false, %cond.true
  br label %if.end218, !dbg !3984

if.else:                                          ; preds = %land.end
  %62 = load i8, i8* %is_bitfield, align 1, !dbg !3985
  %conv85 = zext i8 %62 to i32, !dbg !3985
  %tobool86 = icmp ne i32 %conv85, 0, !dbg !3985
  br i1 %tobool86, label %if.then87, label %if.else194, !dbg !3987

if.then87:                                        ; preds = %if.else
  %63 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3988
  %decl_minimal = bitcast %union.tree_node* %63 to %struct.tree_decl_minimal*, !dbg !3988
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !3988
  %64 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3988
  %cmp88 = icmp ne %union.tree_node* %64, null, !dbg !3991
  br i1 %cmp88, label %if.then94, label %lor.lhs.false90, !dbg !3992

lor.lhs.false90:                                  ; preds = %if.then87
  %65 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 21), align 8, !dbg !3993
  %call91 = call zeroext i8 %65(), !dbg !3994
  %conv92 = zext i8 %call91 to i32, !dbg !3994
  %tobool93 = icmp ne i32 %conv92, 0, !dbg !3994
  br i1 %tobool93, label %if.then94, label %if.end193, !dbg !3995

if.then94:                                        ; preds = %lor.lhs.false90, %if.then87
  call void @llvm.dbg.declare(metadata i32* %type_align95, metadata !3996, metadata !DIExpression()), !dbg !3998
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3999
  %type96 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !3999
  %align97 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type96, i32 0, i32 7, !dbg !3999
  %67 = load i32, i32* %align97, align 8, !dbg !3999
  store i32 %67, i32* %type_align95, align 4, !dbg !3998
  %68 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4000
  %common98 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !4000
  %base99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 0, !dbg !4000
  %69 = bitcast %struct.tree_base* %base99 to i64*, !dbg !4000
  %bf.load100 = load i64, i64* %69, align 8, !dbg !4000
  %bf.lshr101 = lshr i64 %bf.load100, 42, !dbg !4000
  %bf.clear102 = and i64 %bf.lshr101, 1, !dbg !4000
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !4000
  %tobool104 = icmp ne i32 %bf.cast103, 0, !dbg !4000
  br i1 %tobool104, label %if.end107, label %if.then105, !dbg !4002

if.then105:                                       ; preds = %if.then94
  %70 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4003
  %71 = load i32, i32* %type_align95, align 4, !dbg !4003
  %call106 = call i32 @x86_field_alignment(%union.tree_node* %70, i32 %71), !dbg !4003
  store i32 %call106, i32* %type_align95, align 4, !dbg !4004
  br label %if.end107, !dbg !4005

if.end107:                                        ; preds = %if.then105, %if.then94
  %72 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4006
  %decl_common108 = bitcast %union.tree_node* %72 to %struct.tree_decl_common*, !dbg !4006
  %size109 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common108, i32 0, i32 1, !dbg !4006
  %73 = load %union.tree_node*, %union.tree_node** %size109, align 8, !dbg !4006
  %call110 = call i32 @integer_zerop(%union.tree_node* %73), !dbg !4008
  %tobool111 = icmp ne i32 %call110, 0, !dbg !4008
  br i1 %tobool111, label %if.then112, label %if.else123, !dbg !4009

if.then112:                                       ; preds = %if.end107
  %74 = load i32, i32* @initial_max_fld_align, align 4, !dbg !4010
  %tobool113 = icmp ne i32 %74, 0, !dbg !4010
  br i1 %tobool113, label %if.then114, label %if.end122, !dbg !4013

if.then114:                                       ; preds = %if.then112
  %75 = load i32, i32* %type_align95, align 4, !dbg !4014
  %76 = load i32, i32* @initial_max_fld_align, align 4, !dbg !4014
  %mul = mul i32 %76, 8, !dbg !4014
  %cmp115 = icmp ult i32 %75, %mul, !dbg !4014
  br i1 %cmp115, label %cond.true117, label %cond.false118, !dbg !4014

cond.true117:                                     ; preds = %if.then114
  %77 = load i32, i32* %type_align95, align 4, !dbg !4014
  br label %cond.end120, !dbg !4014

cond.false118:                                    ; preds = %if.then114
  %78 = load i32, i32* @initial_max_fld_align, align 4, !dbg !4014
  %mul119 = mul i32 %78, 8, !dbg !4014
  br label %cond.end120, !dbg !4014

cond.end120:                                      ; preds = %cond.false118, %cond.true117
  %cond121 = phi i32 [ %77, %cond.true117 ], [ %mul119, %cond.false118 ], !dbg !4014
  store i32 %cond121, i32* %type_align95, align 4, !dbg !4015
  br label %if.end122, !dbg !4016

if.end122:                                        ; preds = %cond.end120, %if.then112
  br label %if.end150, !dbg !4017

if.else123:                                       ; preds = %if.end107
  %79 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4018
  %cmp124 = icmp ne i32 %79, 0, !dbg !4020
  br i1 %cmp124, label %if.then126, label %if.else133, !dbg !4021

if.then126:                                       ; preds = %if.else123
  %80 = load i32, i32* %type_align95, align 4, !dbg !4022
  %81 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4022
  %cmp127 = icmp ult i32 %80, %81, !dbg !4022
  br i1 %cmp127, label %cond.true129, label %cond.false130, !dbg !4022

cond.true129:                                     ; preds = %if.then126
  %82 = load i32, i32* %type_align95, align 4, !dbg !4022
  br label %cond.end131, !dbg !4022

cond.false130:                                    ; preds = %if.then126
  %83 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4022
  br label %cond.end131, !dbg !4022

cond.end131:                                      ; preds = %cond.false130, %cond.true129
  %cond132 = phi i32 [ %82, %cond.true129 ], [ %83, %cond.false130 ], !dbg !4022
  store i32 %cond132, i32* %type_align95, align 4, !dbg !4023
  br label %if.end149, !dbg !4024

if.else133:                                       ; preds = %if.else123
  %84 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4025
  %common134 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !4025
  %base135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 0, !dbg !4025
  %85 = bitcast %struct.tree_base* %base135 to i64*, !dbg !4025
  %bf.load136 = load i64, i64* %85, align 8, !dbg !4025
  %bf.lshr137 = lshr i64 %bf.load136, 41, !dbg !4025
  %bf.clear138 = and i64 %bf.lshr137, 1, !dbg !4025
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !4025
  %tobool140 = icmp ne i32 %bf.cast139, 0, !dbg !4025
  br i1 %tobool140, label %if.then141, label %if.end148, !dbg !4027

if.then141:                                       ; preds = %if.else133
  %86 = load i32, i32* %type_align95, align 4, !dbg !4028
  %cmp142 = icmp ult i32 %86, 8, !dbg !4028
  br i1 %cmp142, label %cond.true144, label %cond.false145, !dbg !4028

cond.true144:                                     ; preds = %if.then141
  %87 = load i32, i32* %type_align95, align 4, !dbg !4028
  br label %cond.end146, !dbg !4028

cond.false145:                                    ; preds = %if.then141
  br label %cond.end146, !dbg !4028

cond.end146:                                      ; preds = %cond.false145, %cond.true144
  %cond147 = phi i32 [ %87, %cond.true144 ], [ 8, %cond.false145 ], !dbg !4028
  store i32 %cond147, i32* %type_align95, align 4, !dbg !4029
  br label %if.end148, !dbg !4030

if.end148:                                        ; preds = %cond.end146, %if.else133
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %cond.end131
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.end122
  %88 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4031
  %record_align151 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %88, i32 0, i32 4, !dbg !4031
  %89 = load i32, i32* %record_align151, align 8, !dbg !4031
  %90 = load i32, i32* %desired_align, align 4, !dbg !4031
  %cmp152 = icmp ugt i32 %89, %90, !dbg !4031
  br i1 %cmp152, label %cond.true154, label %cond.false156, !dbg !4031

cond.true154:                                     ; preds = %if.end150
  %91 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4031
  %record_align155 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %91, i32 0, i32 4, !dbg !4031
  %92 = load i32, i32* %record_align155, align 8, !dbg !4031
  br label %cond.end157, !dbg !4031

cond.false156:                                    ; preds = %if.end150
  %93 = load i32, i32* %desired_align, align 4, !dbg !4031
  br label %cond.end157, !dbg !4031

cond.end157:                                      ; preds = %cond.false156, %cond.true154
  %cond158 = phi i32 [ %92, %cond.true154 ], [ %93, %cond.false156 ], !dbg !4031
  %94 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4032
  %record_align159 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %94, i32 0, i32 4, !dbg !4033
  store i32 %cond158, i32* %record_align159, align 8, !dbg !4034
  %95 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4035
  %record_align160 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %95, i32 0, i32 4, !dbg !4035
  %96 = load i32, i32* %record_align160, align 8, !dbg !4035
  %97 = load i32, i32* %type_align95, align 4, !dbg !4035
  %cmp161 = icmp ugt i32 %96, %97, !dbg !4035
  br i1 %cmp161, label %cond.true163, label %cond.false165, !dbg !4035

cond.true163:                                     ; preds = %cond.end157
  %98 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4035
  %record_align164 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %98, i32 0, i32 4, !dbg !4035
  %99 = load i32, i32* %record_align164, align 8, !dbg !4035
  br label %cond.end166, !dbg !4035

cond.false165:                                    ; preds = %cond.end157
  %100 = load i32, i32* %type_align95, align 4, !dbg !4035
  br label %cond.end166, !dbg !4035

cond.end166:                                      ; preds = %cond.false165, %cond.true163
  %cond167 = phi i32 [ %99, %cond.true163 ], [ %100, %cond.false165 ], !dbg !4035
  %101 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4036
  %record_align168 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %101, i32 0, i32 4, !dbg !4037
  store i32 %cond167, i32* %record_align168, align 8, !dbg !4038
  %102 = load i32, i32* @warn_packed, align 4, !dbg !4039
  %tobool169 = icmp ne i32 %102, 0, !dbg !4039
  br i1 %tobool169, label %if.then170, label %if.end184, !dbg !4041

if.then170:                                       ; preds = %cond.end166
  %103 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4042
  %unpacked_align171 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %103, i32 0, i32 5, !dbg !4042
  %104 = load i32, i32* %unpacked_align171, align 4, !dbg !4042
  %105 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4042
  %type172 = bitcast %union.tree_node* %105 to %struct.tree_type*, !dbg !4042
  %align173 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type172, i32 0, i32 7, !dbg !4042
  %106 = load i32, i32* %align173, align 8, !dbg !4042
  %cmp174 = icmp ugt i32 %104, %106, !dbg !4042
  br i1 %cmp174, label %cond.true176, label %cond.false178, !dbg !4042

cond.true176:                                     ; preds = %if.then170
  %107 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4042
  %unpacked_align177 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %107, i32 0, i32 5, !dbg !4042
  %108 = load i32, i32* %unpacked_align177, align 4, !dbg !4042
  br label %cond.end181, !dbg !4042

cond.false178:                                    ; preds = %if.then170
  %109 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4042
  %type179 = bitcast %union.tree_node* %109 to %struct.tree_type*, !dbg !4042
  %align180 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type179, i32 0, i32 7, !dbg !4042
  %110 = load i32, i32* %align180, align 8, !dbg !4042
  br label %cond.end181, !dbg !4042

cond.end181:                                      ; preds = %cond.false178, %cond.true176
  %cond182 = phi i32 [ %108, %cond.true176 ], [ %110, %cond.false178 ], !dbg !4042
  %111 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4043
  %unpacked_align183 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %111, i32 0, i32 5, !dbg !4044
  store i32 %cond182, i32* %unpacked_align183, align 4, !dbg !4045
  br label %if.end184, !dbg !4043

if.end184:                                        ; preds = %cond.end181, %cond.end166
  %112 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4046
  %common185 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !4046
  %base186 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common185, i32 0, i32 0, !dbg !4046
  %113 = bitcast %struct.tree_base* %base186 to i64*, !dbg !4046
  %bf.load187 = load i64, i64* %113, align 8, !dbg !4046
  %bf.lshr188 = lshr i64 %bf.load187, 42, !dbg !4046
  %bf.clear189 = and i64 %bf.lshr188, 1, !dbg !4046
  %bf.cast190 = trunc i64 %bf.clear189 to i32, !dbg !4046
  %114 = load i8, i8* %user_align, align 1, !dbg !4047
  %conv191 = zext i8 %114 to i32, !dbg !4047
  %or = or i32 %conv191, %bf.cast190, !dbg !4047
  %conv192 = trunc i32 %or to i8, !dbg !4047
  store i8 %conv192, i8* %user_align, align 1, !dbg !4047
  br label %if.end193, !dbg !4048

if.end193:                                        ; preds = %if.end184, %lor.lhs.false90
  br label %if.end217, !dbg !4049

if.else194:                                       ; preds = %if.else
  %115 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4050
  %record_align195 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %115, i32 0, i32 4, !dbg !4050
  %116 = load i32, i32* %record_align195, align 8, !dbg !4050
  %117 = load i32, i32* %desired_align, align 4, !dbg !4050
  %cmp196 = icmp ugt i32 %116, %117, !dbg !4050
  br i1 %cmp196, label %cond.true198, label %cond.false200, !dbg !4050

cond.true198:                                     ; preds = %if.else194
  %118 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4050
  %record_align199 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %118, i32 0, i32 4, !dbg !4050
  %119 = load i32, i32* %record_align199, align 8, !dbg !4050
  br label %cond.end201, !dbg !4050

cond.false200:                                    ; preds = %if.else194
  %120 = load i32, i32* %desired_align, align 4, !dbg !4050
  br label %cond.end201, !dbg !4050

cond.end201:                                      ; preds = %cond.false200, %cond.true198
  %cond202 = phi i32 [ %119, %cond.true198 ], [ %120, %cond.false200 ], !dbg !4050
  %121 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4052
  %record_align203 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %121, i32 0, i32 4, !dbg !4053
  store i32 %cond202, i32* %record_align203, align 8, !dbg !4054
  %122 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4055
  %unpacked_align204 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %122, i32 0, i32 5, !dbg !4055
  %123 = load i32, i32* %unpacked_align204, align 4, !dbg !4055
  %124 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4055
  %type205 = bitcast %union.tree_node* %124 to %struct.tree_type*, !dbg !4055
  %align206 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type205, i32 0, i32 7, !dbg !4055
  %125 = load i32, i32* %align206, align 8, !dbg !4055
  %cmp207 = icmp ugt i32 %123, %125, !dbg !4055
  br i1 %cmp207, label %cond.true209, label %cond.false211, !dbg !4055

cond.true209:                                     ; preds = %cond.end201
  %126 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4055
  %unpacked_align210 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %126, i32 0, i32 5, !dbg !4055
  %127 = load i32, i32* %unpacked_align210, align 4, !dbg !4055
  br label %cond.end214, !dbg !4055

cond.false211:                                    ; preds = %cond.end201
  %128 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4055
  %type212 = bitcast %union.tree_node* %128 to %struct.tree_type*, !dbg !4055
  %align213 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type212, i32 0, i32 7, !dbg !4055
  %129 = load i32, i32* %align213, align 8, !dbg !4055
  br label %cond.end214, !dbg !4055

cond.end214:                                      ; preds = %cond.false211, %cond.true209
  %cond215 = phi i32 [ %127, %cond.true209 ], [ %129, %cond.false211 ], !dbg !4055
  %130 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4056
  %unpacked_align216 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %130, i32 0, i32 5, !dbg !4057
  store i32 %cond215, i32* %unpacked_align216, align 4, !dbg !4058
  br label %if.end217

if.end217:                                        ; preds = %cond.end214, %if.end193
  br label %if.end218

if.end218:                                        ; preds = %if.end217, %if.end84
  %131 = load i8, i8* %user_align, align 1, !dbg !4059
  %conv219 = zext i8 %131 to i32, !dbg !4059
  %132 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4060
  %t220 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %132, i32 0, i32 0, !dbg !4060
  %133 = load %union.tree_node*, %union.tree_node** %t220, align 8, !dbg !4060
  %common221 = bitcast %union.tree_node* %133 to %struct.tree_common*, !dbg !4060
  %base222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 0, !dbg !4060
  %134 = bitcast %struct.tree_base* %base222 to i64*, !dbg !4060
  %bf.load223 = load i64, i64* %134, align 8, !dbg !4061
  %bf.lshr224 = lshr i64 %bf.load223, 42, !dbg !4061
  %bf.clear225 = and i64 %bf.lshr224, 1, !dbg !4061
  %bf.cast226 = trunc i64 %bf.clear225 to i32, !dbg !4061
  %or227 = or i32 %bf.cast226, %conv219, !dbg !4061
  %135 = zext i32 %or227 to i64, !dbg !4061
  %bf.load228 = load i64, i64* %134, align 8, !dbg !4061
  %bf.value = and i64 %135, 1, !dbg !4061
  %bf.shl = shl i64 %bf.value, 42, !dbg !4061
  %bf.clear229 = and i64 %bf.load228, -4398046511105, !dbg !4061
  %bf.set = or i64 %bf.clear229, %bf.shl, !dbg !4061
  store i64 %bf.set, i64* %134, align 8, !dbg !4061
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4061
  %136 = load i32, i32* %desired_align, align 4, !dbg !4062
  store i32 %136, i32* %retval, align 4, !dbg !4063
  br label %return, !dbg !4063

return:                                           ; preds = %if.end218, %if.then
  %137 = load i32, i32* %retval, align 4, !dbg !4064
  ret i32 %137, !dbg !4064
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @place_field(%struct.record_layout_info_s* %rli, %union.tree_node* %field) #0 !dbg !4065 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  %desired_align = alloca i32, align 4
  %known_align = alloca i32, align 4
  %actual_align = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %type_align = alloca i32, align 4
  %dsize = alloca %union.tree_node*, align 8
  %field_size = alloca i64, align 8
  %offset222 = alloca i64, align 8
  %bit_offset225 = alloca i64, align 8
  %prev_saved = alloca %union.tree_node*, align 8
  %prev_type = alloca %union.tree_node*, align 8
  %bitsize = alloca i64, align 8
  %typesize = alloca i64, align 8
  %type_align414 = alloca i32, align 4
  %bitsize432 = alloca i64, align 8
  %typesize436 = alloca i64, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !4068, metadata !DIExpression()), !dbg !4069
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !4070, metadata !DIExpression()), !dbg !4071
  call void @llvm.dbg.declare(metadata i32* %desired_align, metadata !4072, metadata !DIExpression()), !dbg !4073
  call void @llvm.dbg.declare(metadata i32* %known_align, metadata !4074, metadata !DIExpression()), !dbg !4075
  call void @llvm.dbg.declare(metadata i32* %actual_align, metadata !4076, metadata !DIExpression()), !dbg !4077
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4078, metadata !DIExpression()), !dbg !4079
  %0 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4080
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !4080
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4080
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4080
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !4079
  %2 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4081
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4081
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !4081
  %bf.load = load i64, i64* %3, align 8, !dbg !4081
  %bf.clear = and i64 %bf.load, 65535, !dbg !4081
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4081
  %cmp = icmp ne i32 %bf.cast, 0, !dbg !4081
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4081

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1043, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4081
  br label %cond.end, !dbg !4081

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4081

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4081
  %4 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4082
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4082
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4082
  %bf.load3 = load i64, i64* %5, align 8, !dbg !4082
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4082
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4082
  %cmp6 = icmp eq i32 %bf.cast5, 32, !dbg !4084
  br i1 %cmp6, label %if.then, label %if.else, !dbg !4085

if.then:                                          ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4086
  %7 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4086
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %7, i32 0, i32 7, !dbg !4086
  %8 = load %union.tree_node*, %union.tree_node** %pending_statics, align 8, !dbg !4086
  %call = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %6, %union.tree_node* %8), !dbg !4086
  %9 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4088
  %pending_statics7 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %9, i32 0, i32 7, !dbg !4089
  store %union.tree_node* %call, %union.tree_node** %pending_statics7, align 8, !dbg !4090
  br label %if.end660, !dbg !4091

if.else:                                          ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4092
  %base8 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4092
  %11 = bitcast %struct.tree_base* %base8 to i64*, !dbg !4092
  %bf.load9 = load i64, i64* %11, align 8, !dbg !4092
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !4092
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !4092
  %cmp12 = icmp ne i32 %bf.cast11, 31, !dbg !4094
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !4095

if.then13:                                        ; preds = %if.else
  br label %if.end660, !dbg !4096

if.else14:                                        ; preds = %if.else
  %12 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4097
  %t = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %12, i32 0, i32 0, !dbg !4097
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4097
  %base15 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4097
  %14 = bitcast %struct.tree_base* %base15 to i64*, !dbg !4097
  %bf.load16 = load i64, i64* %14, align 8, !dbg !4097
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !4097
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !4097
  %cmp19 = icmp ne i32 %bf.cast18, 16, !dbg !4099
  br i1 %cmp19, label %if.then20, label %if.else21, !dbg !4100

if.then20:                                        ; preds = %if.else14
  %15 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4101
  %16 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4103
  call void @place_union_field(%struct.record_layout_info_s* %15, %union.tree_node* %16), !dbg !4104
  br label %if.end660, !dbg !4105

if.else21:                                        ; preds = %if.else14
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4106
  %base22 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4106
  %18 = bitcast %struct.tree_base* %base22 to i64*, !dbg !4106
  %bf.load23 = load i64, i64* %18, align 8, !dbg !4106
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !4106
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !4106
  %cmp26 = icmp eq i32 %bf.cast25, 0, !dbg !4108
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !4109

if.then27:                                        ; preds = %if.else21
  %19 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4110
  %offset = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %19, i32 0, i32 1, !dbg !4112
  %20 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4112
  %21 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4113
  %field_decl = bitcast %union.tree_node* %21 to %struct.tree_field_decl*, !dbg !4113
  %offset28 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !4113
  store %union.tree_node* %20, %union.tree_node** %offset28, align 8, !dbg !4114
  %22 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4115
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %22, i32 0, i32 3, !dbg !4116
  %23 = load %union.tree_node*, %union.tree_node** %bitpos, align 8, !dbg !4116
  %24 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4117
  %field_decl29 = bitcast %union.tree_node* %24 to %struct.tree_field_decl*, !dbg !4117
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl29, i32 0, i32 4, !dbg !4117
  store %union.tree_node* %23, %union.tree_node** %bit_offset, align 8, !dbg !4118
  %25 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4119
  %offset_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %25, i32 0, i32 2, !dbg !4119
  %26 = load i32, i32* %offset_align, align 8, !dbg !4119
  %27 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4119
  %offset_align30 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %27, i32 0, i32 2, !dbg !4119
  %28 = load i32, i32* %offset_align30, align 8, !dbg !4119
  %sub = sub i32 0, %28, !dbg !4119
  %and = and i32 %26, %sub, !dbg !4119
  %conv = zext i32 %and to i64, !dbg !4119
  %call31 = call i32 @exact_log2(i64 %conv), !dbg !4119
  %29 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4119
  %decl_common = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !4119
  %off_align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4119
  %30 = bitcast i40* %off_align to i64*, !dbg !4119
  %31 = zext i32 %call31 to i64, !dbg !4119
  %bf.load32 = load i64, i64* %30, align 8, !dbg !4119
  %bf.value = and i64 %31, 255, !dbg !4119
  %bf.shl = shl i64 %bf.value, 32, !dbg !4119
  %bf.clear33 = and i64 %bf.load32, -1095216660481, !dbg !4119
  %bf.set = or i64 %bf.clear33, %bf.shl, !dbg !4119
  store i64 %bf.set, i64* %30, align 8, !dbg !4119
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4119
  br label %if.end660, !dbg !4120

if.end:                                           ; preds = %if.else21
  br label %if.end34

if.end34:                                         ; preds = %if.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34
  br label %if.end36

if.end36:                                         ; preds = %if.end35
  %32 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4121
  %bitpos37 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %32, i32 0, i32 3, !dbg !4123
  %33 = load %union.tree_node*, %union.tree_node** %bitpos37, align 8, !dbg !4123
  %call38 = call i32 @integer_zerop(%union.tree_node* %33), !dbg !4124
  %tobool = icmp ne i32 %call38, 0, !dbg !4124
  br i1 %tobool, label %if.else47, label %if.then39, !dbg !4125

if.then39:                                        ; preds = %if.end36
  %34 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4126
  %bitpos40 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %34, i32 0, i32 3, !dbg !4127
  %35 = load %union.tree_node*, %union.tree_node** %bitpos40, align 8, !dbg !4127
  %call41 = call i64 @tree_low_cst(%union.tree_node* %35, i32 1), !dbg !4128
  %36 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4129
  %bitpos42 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %36, i32 0, i32 3, !dbg !4130
  %37 = load %union.tree_node*, %union.tree_node** %bitpos42, align 8, !dbg !4130
  %call43 = call i64 @tree_low_cst(%union.tree_node* %37, i32 1), !dbg !4131
  %sub44 = sub nsw i64 0, %call43, !dbg !4132
  %and45 = and i64 %call41, %sub44, !dbg !4133
  %conv46 = trunc i64 %and45 to i32, !dbg !4134
  store i32 %conv46, i32* %known_align, align 4, !dbg !4135
  br label %if.end68, !dbg !4136

if.else47:                                        ; preds = %if.end36
  %38 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4137
  %offset48 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %38, i32 0, i32 1, !dbg !4139
  %39 = load %union.tree_node*, %union.tree_node** %offset48, align 8, !dbg !4139
  %call49 = call i32 @integer_zerop(%union.tree_node* %39), !dbg !4140
  %tobool50 = icmp ne i32 %call49, 0, !dbg !4140
  br i1 %tobool50, label %if.then51, label %if.else52, !dbg !4141

if.then51:                                        ; preds = %if.else47
  store i32 0, i32* %known_align, align 4, !dbg !4142
  br label %if.end67, !dbg !4143

if.else52:                                        ; preds = %if.else47
  %40 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4144
  %offset53 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %40, i32 0, i32 1, !dbg !4146
  %41 = load %union.tree_node*, %union.tree_node** %offset53, align 8, !dbg !4146
  %call54 = call i32 @host_integerp(%union.tree_node* %41, i32 1), !dbg !4147
  %tobool55 = icmp ne i32 %call54, 0, !dbg !4147
  br i1 %tobool55, label %if.then56, label %if.else64, !dbg !4148

if.then56:                                        ; preds = %if.else52
  %42 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4149
  %offset57 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %42, i32 0, i32 1, !dbg !4150
  %43 = load %union.tree_node*, %union.tree_node** %offset57, align 8, !dbg !4150
  %call58 = call i64 @tree_low_cst(%union.tree_node* %43, i32 1), !dbg !4151
  %44 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4152
  %offset59 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %44, i32 0, i32 1, !dbg !4153
  %45 = load %union.tree_node*, %union.tree_node** %offset59, align 8, !dbg !4153
  %call60 = call i64 @tree_low_cst(%union.tree_node* %45, i32 1), !dbg !4154
  %sub61 = sub nsw i64 0, %call60, !dbg !4155
  %and62 = and i64 %call58, %sub61, !dbg !4156
  %mul = mul nsw i64 8, %and62, !dbg !4157
  %conv63 = trunc i64 %mul to i32, !dbg !4158
  store i32 %conv63, i32* %known_align, align 4, !dbg !4159
  br label %if.end66, !dbg !4160

if.else64:                                        ; preds = %if.else52
  %46 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4161
  %offset_align65 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %46, i32 0, i32 2, !dbg !4162
  %47 = load i32, i32* %offset_align65, align 8, !dbg !4162
  store i32 %47, i32* %known_align, align 4, !dbg !4163
  br label %if.end66

if.end66:                                         ; preds = %if.else64, %if.then56
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then51
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then39
  %48 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4164
  %49 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4165
  %50 = load i32, i32* %known_align, align 4, !dbg !4166
  %call69 = call i32 @update_alignment_for_field(%struct.record_layout_info_s* %48, %union.tree_node* %49, i32 %50), !dbg !4167
  store i32 %call69, i32* %desired_align, align 4, !dbg !4168
  %51 = load i32, i32* %known_align, align 4, !dbg !4169
  %cmp70 = icmp eq i32 %51, 0, !dbg !4171
  br i1 %cmp70, label %if.then72, label %if.end88, !dbg !4172

if.then72:                                        ; preds = %if.end68
  %52 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4173
  %and73 = and i32 %52, 32, !dbg !4173
  %cmp74 = icmp ne i32 %and73, 0, !dbg !4173
  %53 = zext i1 %cmp74 to i64, !dbg !4173
  %cond76 = select i1 %cmp74, i32 256, i32 128, !dbg !4173
  %54 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4173
  %record_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %54, i32 0, i32 4, !dbg !4173
  %55 = load i32, i32* %record_align, align 8, !dbg !4173
  %cmp77 = icmp ugt i32 %cond76, %55, !dbg !4173
  br i1 %cmp77, label %cond.true79, label %cond.false84, !dbg !4173

cond.true79:                                      ; preds = %if.then72
  %56 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4173
  %and80 = and i32 %56, 32, !dbg !4173
  %cmp81 = icmp ne i32 %and80, 0, !dbg !4173
  %57 = zext i1 %cmp81 to i64, !dbg !4173
  %cond83 = select i1 %cmp81, i32 256, i32 128, !dbg !4173
  br label %cond.end86, !dbg !4173

cond.false84:                                     ; preds = %if.then72
  %58 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4173
  %record_align85 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %58, i32 0, i32 4, !dbg !4173
  %59 = load i32, i32* %record_align85, align 8, !dbg !4173
  br label %cond.end86, !dbg !4173

cond.end86:                                       ; preds = %cond.false84, %cond.true79
  %cond87 = phi i32 [ %cond83, %cond.true79 ], [ %59, %cond.false84 ], !dbg !4173
  store i32 %cond87, i32* %known_align, align 4, !dbg !4174
  br label %if.end88, !dbg !4175

if.end88:                                         ; preds = %cond.end86, %if.end68
  %60 = load i32, i32* @warn_packed, align 4, !dbg !4176
  %tobool89 = icmp ne i32 %60, 0, !dbg !4176
  br i1 %tobool89, label %land.lhs.true, label %if.end120, !dbg !4178

land.lhs.true:                                    ; preds = %if.end88
  %61 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4179
  %common90 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !4179
  %base91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 0, !dbg !4179
  %62 = bitcast %struct.tree_base* %base91 to i64*, !dbg !4179
  %bf.load92 = load i64, i64* %62, align 8, !dbg !4179
  %bf.lshr = lshr i64 %bf.load92, 41, !dbg !4179
  %bf.clear93 = and i64 %bf.lshr, 1, !dbg !4179
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !4179
  %tobool95 = icmp ne i32 %bf.cast94, 0, !dbg !4179
  br i1 %tobool95, label %if.then96, label %if.end120, !dbg !4180

if.then96:                                        ; preds = %land.lhs.true
  %63 = load i32, i32* %known_align, align 4, !dbg !4181
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4184
  %type97 = bitcast %union.tree_node* %64 to %struct.tree_type*, !dbg !4184
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type97, i32 0, i32 7, !dbg !4184
  %65 = load i32, i32* %align, align 8, !dbg !4184
  %cmp98 = icmp uge i32 %63, %65, !dbg !4185
  br i1 %cmp98, label %if.then100, label %if.else118, !dbg !4186

if.then100:                                       ; preds = %if.then96
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4187
  %type101 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !4187
  %align102 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type101, i32 0, i32 7, !dbg !4187
  %67 = load i32, i32* %align102, align 8, !dbg !4187
  %68 = load i32, i32* %desired_align, align 4, !dbg !4190
  %cmp103 = icmp ugt i32 %67, %68, !dbg !4191
  br i1 %cmp103, label %if.then105, label %if.end117, !dbg !4192

if.then105:                                       ; preds = %if.then100
  %69 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4193
  %t106 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %69, i32 0, i32 0, !dbg !4193
  %70 = load %union.tree_node*, %union.tree_node** %t106, align 8, !dbg !4193
  %common107 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !4193
  %base108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 0, !dbg !4193
  %71 = bitcast %struct.tree_base* %base108 to i64*, !dbg !4193
  %bf.load109 = load i64, i64* %71, align 8, !dbg !4193
  %bf.lshr110 = lshr i64 %bf.load109, 41, !dbg !4193
  %bf.clear111 = and i64 %bf.lshr110, 1, !dbg !4193
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !4193
  %tobool113 = icmp ne i32 %bf.cast112, 0, !dbg !4193
  br i1 %tobool113, label %if.end116, label %if.then114, !dbg !4197

if.then114:                                       ; preds = %if.then105
  %72 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4198
  %call115 = call zeroext i8 (i32, i8*, ...) @warning(i32 45, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.13, i64 0, i64 0), %union.tree_node* %72), !dbg !4199
  br label %if.end116, !dbg !4199

if.end116:                                        ; preds = %if.then114, %if.then105
  br label %if.end117, !dbg !4200

if.end117:                                        ; preds = %if.end116, %if.then100
  br label %if.end119, !dbg !4201

if.else118:                                       ; preds = %if.then96
  %73 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4202
  %packed_maybe_necessary = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %73, i32 0, i32 9, !dbg !4203
  store i32 1, i32* %packed_maybe_necessary, align 4, !dbg !4204
  br label %if.end119

if.end119:                                        ; preds = %if.else118, %if.end117
  br label %if.end120, !dbg !4205

if.end120:                                        ; preds = %if.end119, %land.lhs.true, %if.end88
  %74 = load i32, i32* %known_align, align 4, !dbg !4206
  %75 = load i32, i32* %desired_align, align 4, !dbg !4208
  %cmp121 = icmp ult i32 %74, %75, !dbg !4209
  br i1 %cmp121, label %land.lhs.true123, label %if.end162, !dbg !4210

land.lhs.true123:                                 ; preds = %if.end120
  %76 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !4211
  %77 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4212
  %t124 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %77, i32 0, i32 0, !dbg !4213
  %78 = load %union.tree_node*, %union.tree_node** %t124, align 8, !dbg !4213
  %call125 = call zeroext i8 %76(%union.tree_node* %78), !dbg !4214
  %tobool126 = icmp ne i8 %call125, 0, !dbg !4214
  br i1 %tobool126, label %if.end162, label %if.then127, !dbg !4215

if.then127:                                       ; preds = %land.lhs.true123
  %79 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4216
  %decl_minimal = bitcast %union.tree_node* %79 to %struct.tree_decl_minimal*, !dbg !4216
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4216
  %80 = load i32, i32* %locus, align 8, !dbg !4216
  %cmp128 = icmp ne i32 %80, 1, !dbg !4219
  br i1 %cmp128, label %if.then130, label %if.end132, !dbg !4220

if.then130:                                       ; preds = %if.then127
  %81 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4221
  %call131 = call zeroext i8 (i32, i8*, ...) @warning(i32 157, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0), %union.tree_node* %81), !dbg !4222
  br label %if.end132, !dbg !4222

if.end132:                                        ; preds = %if.then130, %if.then127
  %82 = load i32, i32* %desired_align, align 4, !dbg !4223
  %83 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4225
  %offset_align133 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %83, i32 0, i32 2, !dbg !4226
  %84 = load i32, i32* %offset_align133, align 8, !dbg !4226
  %cmp134 = icmp ult i32 %82, %84, !dbg !4227
  br i1 %cmp134, label %if.then136, label %if.else140, !dbg !4228

if.then136:                                       ; preds = %if.end132
  %85 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4229
  %bitpos137 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %85, i32 0, i32 3, !dbg !4229
  %86 = load %union.tree_node*, %union.tree_node** %bitpos137, align 8, !dbg !4229
  %87 = load i32, i32* %desired_align, align 4, !dbg !4229
  %call138 = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %86, i32 %87), !dbg !4229
  %88 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4230
  %bitpos139 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %88, i32 0, i32 3, !dbg !4231
  store %union.tree_node* %call138, %union.tree_node** %bitpos139, align 8, !dbg !4232
  br label %if.end151, !dbg !4230

if.else140:                                       ; preds = %if.end132
  %89 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4233
  %offset141 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %89, i32 0, i32 1, !dbg !4233
  %90 = load %union.tree_node*, %union.tree_node** %offset141, align 8, !dbg !4233
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4233
  %92 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4233
  %bitpos142 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %92, i32 0, i32 3, !dbg !4233
  %93 = load %union.tree_node*, %union.tree_node** %bitpos142, align 8, !dbg !4233
  %94 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !dbg !4233
  %call143 = call %union.tree_node* @size_binop_loc(i32 0, i32 68, %union.tree_node* %93, %union.tree_node* %94), !dbg !4233
  %call144 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %91, %union.tree_node* %call143), !dbg !4233
  %call145 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %90, %union.tree_node* %call144), !dbg !4233
  %95 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4235
  %offset146 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %95, i32 0, i32 1, !dbg !4236
  store %union.tree_node* %call145, %union.tree_node** %offset146, align 8, !dbg !4237
  %96 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !dbg !4238
  %97 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4239
  %bitpos147 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %97, i32 0, i32 3, !dbg !4240
  store %union.tree_node* %96, %union.tree_node** %bitpos147, align 8, !dbg !4241
  %98 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4242
  %offset148 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %98, i32 0, i32 1, !dbg !4242
  %99 = load %union.tree_node*, %union.tree_node** %offset148, align 8, !dbg !4242
  %100 = load i32, i32* %desired_align, align 4, !dbg !4242
  %div = udiv i32 %100, 8, !dbg !4242
  %call149 = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %99, i32 %div), !dbg !4242
  %101 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4243
  %offset150 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %101, i32 0, i32 1, !dbg !4244
  store %union.tree_node* %call149, %union.tree_node** %offset150, align 8, !dbg !4245
  br label %if.end151

if.end151:                                        ; preds = %if.else140, %if.then136
  %102 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4246
  %offset152 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %102, i32 0, i32 1, !dbg !4246
  %103 = load %union.tree_node*, %union.tree_node** %offset152, align 8, !dbg !4246
  %base153 = bitcast %union.tree_node* %103 to %struct.tree_base*, !dbg !4246
  %104 = bitcast %struct.tree_base* %base153 to i64*, !dbg !4246
  %bf.load154 = load i64, i64* %104, align 8, !dbg !4246
  %bf.lshr155 = lshr i64 %bf.load154, 17, !dbg !4246
  %bf.clear156 = and i64 %bf.lshr155, 1, !dbg !4246
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !4246
  %tobool158 = icmp ne i32 %bf.cast157, 0, !dbg !4246
  br i1 %tobool158, label %if.end161, label %if.then159, !dbg !4248

if.then159:                                       ; preds = %if.end151
  %105 = load i32, i32* %desired_align, align 4, !dbg !4249
  %106 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4250
  %offset_align160 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %106, i32 0, i32 2, !dbg !4251
  store i32 %105, i32* %offset_align160, align 8, !dbg !4252
  br label %if.end161, !dbg !4250

if.end161:                                        ; preds = %if.then159, %if.end151
  br label %if.end162, !dbg !4253

if.end162:                                        ; preds = %if.end161, %land.lhs.true123, %if.end120
  %107 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !4254
  %108 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4256
  %t163 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %108, i32 0, i32 0, !dbg !4257
  %109 = load %union.tree_node*, %union.tree_node** %t163, align 8, !dbg !4257
  %call164 = call zeroext i8 %107(%union.tree_node* %109), !dbg !4258
  %tobool165 = icmp ne i8 %call164, 0, !dbg !4258
  br i1 %tobool165, label %if.end288, label %land.lhs.true166, !dbg !4259

land.lhs.true166:                                 ; preds = %if.end162
  %110 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4260
  %base167 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !4260
  %111 = bitcast %struct.tree_base* %base167 to i64*, !dbg !4260
  %bf.load168 = load i64, i64* %111, align 8, !dbg !4260
  %bf.clear169 = and i64 %bf.load168, 65535, !dbg !4260
  %bf.cast170 = trunc i64 %bf.clear169 to i32, !dbg !4260
  %cmp171 = icmp eq i32 %bf.cast170, 31, !dbg !4261
  br i1 %cmp171, label %land.lhs.true173, label %if.end288, !dbg !4262

land.lhs.true173:                                 ; preds = %land.lhs.true166
  %112 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4263
  %113 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4264
  %cmp174 = icmp ne %union.tree_node* %112, %113, !dbg !4265
  br i1 %cmp174, label %land.lhs.true176, label %if.end288, !dbg !4266

land.lhs.true176:                                 ; preds = %land.lhs.true173
  %114 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4267
  %decl_common177 = bitcast %union.tree_node* %114 to %struct.tree_decl_common*, !dbg !4267
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common177, i32 0, i32 2, !dbg !4267
  %115 = bitcast i40* %decl_flag_1 to i64*, !dbg !4267
  %bf.load178 = load i64, i64* %115, align 8, !dbg !4267
  %bf.lshr179 = lshr i64 %bf.load178, 25, !dbg !4267
  %bf.clear180 = and i64 %bf.lshr179, 1, !dbg !4267
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !4267
  %tobool182 = icmp ne i32 %bf.cast181, 0, !dbg !4267
  br i1 %tobool182, label %land.lhs.true183, label %if.end288, !dbg !4268

land.lhs.true183:                                 ; preds = %land.lhs.true176
  %116 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4269
  %common184 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !4269
  %base185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 0, !dbg !4269
  %117 = bitcast %struct.tree_base* %base185 to i64*, !dbg !4269
  %bf.load186 = load i64, i64* %117, align 8, !dbg !4269
  %bf.lshr187 = lshr i64 %bf.load186, 41, !dbg !4269
  %bf.clear188 = and i64 %bf.lshr187, 1, !dbg !4269
  %bf.cast189 = trunc i64 %bf.clear188 to i32, !dbg !4269
  %tobool190 = icmp ne i32 %bf.cast189, 0, !dbg !4269
  br i1 %tobool190, label %lor.lhs.false, label %land.lhs.true195, !dbg !4270

lor.lhs.false:                                    ; preds = %land.lhs.true183
  %118 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4271
  %type191 = bitcast %union.tree_node* %118 to %struct.tree_type*, !dbg !4271
  %align192 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type191, i32 0, i32 7, !dbg !4271
  %119 = load i32, i32* %align192, align 8, !dbg !4271
  %cmp193 = icmp ule i32 %119, 8, !dbg !4272
  br i1 %cmp193, label %land.lhs.true195, label %if.end288, !dbg !4273

land.lhs.true195:                                 ; preds = %lor.lhs.false, %land.lhs.true183
  %120 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4274
  %cmp196 = icmp eq i32 %120, 0, !dbg !4275
  br i1 %cmp196, label %land.lhs.true198, label %if.end288, !dbg !4276

land.lhs.true198:                                 ; preds = %land.lhs.true195
  %121 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4277
  %decl_common199 = bitcast %union.tree_node* %121 to %struct.tree_decl_common*, !dbg !4277
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common199, i32 0, i32 1, !dbg !4277
  %122 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4277
  %call200 = call i32 @integer_zerop(%union.tree_node* %122), !dbg !4278
  %tobool201 = icmp ne i32 %call200, 0, !dbg !4278
  br i1 %tobool201, label %if.end288, label %land.lhs.true202, !dbg !4279

land.lhs.true202:                                 ; preds = %land.lhs.true198
  %123 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4280
  %decl_common203 = bitcast %union.tree_node* %123 to %struct.tree_decl_common*, !dbg !4280
  %size204 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common203, i32 0, i32 1, !dbg !4280
  %124 = load %union.tree_node*, %union.tree_node** %size204, align 8, !dbg !4280
  %call205 = call i32 @host_integerp(%union.tree_node* %124, i32 1), !dbg !4281
  %tobool206 = icmp ne i32 %call205, 0, !dbg !4281
  br i1 %tobool206, label %land.lhs.true207, label %if.end288, !dbg !4282

land.lhs.true207:                                 ; preds = %land.lhs.true202
  %125 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4283
  %offset208 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %125, i32 0, i32 1, !dbg !4284
  %126 = load %union.tree_node*, %union.tree_node** %offset208, align 8, !dbg !4284
  %call209 = call i32 @host_integerp(%union.tree_node* %126, i32 1), !dbg !4285
  %tobool210 = icmp ne i32 %call209, 0, !dbg !4285
  br i1 %tobool210, label %land.lhs.true211, label %if.end288, !dbg !4286

land.lhs.true211:                                 ; preds = %land.lhs.true207
  %127 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4287
  %type212 = bitcast %union.tree_node* %127 to %struct.tree_type*, !dbg !4287
  %size213 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type212, i32 0, i32 2, !dbg !4287
  %128 = load %union.tree_node*, %union.tree_node** %size213, align 8, !dbg !4287
  %call214 = call i32 @host_integerp(%union.tree_node* %128, i32 1), !dbg !4288
  %tobool215 = icmp ne i32 %call214, 0, !dbg !4288
  br i1 %tobool215, label %if.then216, label %if.end288, !dbg !4289

if.then216:                                       ; preds = %land.lhs.true211
  call void @llvm.dbg.declare(metadata i32* %type_align, metadata !4290, metadata !DIExpression()), !dbg !4292
  %129 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4293
  %type217 = bitcast %union.tree_node* %129 to %struct.tree_type*, !dbg !4293
  %align218 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type217, i32 0, i32 7, !dbg !4293
  %130 = load i32, i32* %align218, align 8, !dbg !4293
  store i32 %130, i32* %type_align, align 4, !dbg !4292
  call void @llvm.dbg.declare(metadata %union.tree_node** %dsize, metadata !4294, metadata !DIExpression()), !dbg !4295
  %131 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4296
  %decl_common219 = bitcast %union.tree_node* %131 to %struct.tree_decl_common*, !dbg !4296
  %size220 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common219, i32 0, i32 1, !dbg !4296
  %132 = load %union.tree_node*, %union.tree_node** %size220, align 8, !dbg !4296
  store %union.tree_node* %132, %union.tree_node** %dsize, align 8, !dbg !4295
  call void @llvm.dbg.declare(metadata i64* %field_size, metadata !4297, metadata !DIExpression()), !dbg !4298
  %133 = load %union.tree_node*, %union.tree_node** %dsize, align 8, !dbg !4299
  %call221 = call i64 @tree_low_cst(%union.tree_node* %133, i32 1), !dbg !4300
  store i64 %call221, i64* %field_size, align 8, !dbg !4298
  call void @llvm.dbg.declare(metadata i64* %offset222, metadata !4301, metadata !DIExpression()), !dbg !4302
  %134 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4303
  %offset223 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %134, i32 0, i32 1, !dbg !4304
  %135 = load %union.tree_node*, %union.tree_node** %offset223, align 8, !dbg !4304
  %call224 = call i64 @tree_low_cst(%union.tree_node* %135, i32 0), !dbg !4305
  store i64 %call224, i64* %offset222, align 8, !dbg !4302
  call void @llvm.dbg.declare(metadata i64* %bit_offset225, metadata !4306, metadata !DIExpression()), !dbg !4307
  %136 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4308
  %bitpos226 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %136, i32 0, i32 3, !dbg !4309
  %137 = load %union.tree_node*, %union.tree_node** %bitpos226, align 8, !dbg !4309
  %call227 = call i64 @tree_low_cst(%union.tree_node* %137, i32 0), !dbg !4310
  store i64 %call227, i64* %bit_offset225, align 8, !dbg !4307
  %138 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4311
  %common228 = bitcast %union.tree_node* %138 to %struct.tree_common*, !dbg !4311
  %base229 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common228, i32 0, i32 0, !dbg !4311
  %139 = bitcast %struct.tree_base* %base229 to i64*, !dbg !4311
  %bf.load230 = load i64, i64* %139, align 8, !dbg !4311
  %bf.lshr231 = lshr i64 %bf.load230, 42, !dbg !4311
  %bf.clear232 = and i64 %bf.lshr231, 1, !dbg !4311
  %bf.cast233 = trunc i64 %bf.clear232 to i32, !dbg !4311
  %tobool234 = icmp ne i32 %bf.cast233, 0, !dbg !4311
  br i1 %tobool234, label %if.end237, label %if.then235, !dbg !4313

if.then235:                                       ; preds = %if.then216
  %140 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4314
  %141 = load i32, i32* %type_align, align 4, !dbg !4314
  %call236 = call i32 @x86_field_alignment(%union.tree_node* %140, i32 %141), !dbg !4314
  store i32 %call236, i32* %type_align, align 4, !dbg !4315
  br label %if.end237, !dbg !4316

if.end237:                                        ; preds = %if.then235, %if.then216
  %142 = load i64, i64* %offset222, align 8, !dbg !4317
  %143 = load i64, i64* %bit_offset225, align 8, !dbg !4319
  %144 = load i64, i64* %field_size, align 8, !dbg !4320
  %145 = load i32, i32* %type_align, align 4, !dbg !4321
  %conv238 = zext i32 %145 to i64, !dbg !4321
  %146 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4322
  %call239 = call i32 @excess_unit_span(i64 %142, i64 %143, i64 %144, i64 %conv238, %union.tree_node* %146), !dbg !4323
  %tobool240 = icmp ne i32 %call239, 0, !dbg !4323
  br i1 %tobool240, label %if.then241, label %if.end259, !dbg !4324

if.then241:                                       ; preds = %if.end237
  %147 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4325
  %common242 = bitcast %union.tree_node* %147 to %struct.tree_common*, !dbg !4325
  %base243 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common242, i32 0, i32 0, !dbg !4325
  %148 = bitcast %struct.tree_base* %base243 to i64*, !dbg !4325
  %bf.load244 = load i64, i64* %148, align 8, !dbg !4325
  %bf.lshr245 = lshr i64 %bf.load244, 41, !dbg !4325
  %bf.clear246 = and i64 %bf.lshr245, 1, !dbg !4325
  %bf.cast247 = trunc i64 %bf.clear246 to i32, !dbg !4325
  %tobool248 = icmp ne i32 %bf.cast247, 0, !dbg !4325
  br i1 %tobool248, label %if.then249, label %if.else254, !dbg !4328

if.then249:                                       ; preds = %if.then241
  %149 = load i32, i32* @warn_packed_bitfield_compat, align 4, !dbg !4329
  %cmp250 = icmp eq i32 %149, 1, !dbg !4332
  br i1 %cmp250, label %if.then252, label %if.end253, !dbg !4333

if.then252:                                       ; preds = %if.then249
  %150 = load i32, i32* @input_location, align 4, !dbg !4334
  %151 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4335
  call void (i32, i8*, ...) @inform(i32 %150, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.15, i64 0, i64 0), %union.tree_node* %151), !dbg !4336
  br label %if.end253, !dbg !4336

if.end253:                                        ; preds = %if.then252, %if.then249
  br label %if.end258, !dbg !4337

if.else254:                                       ; preds = %if.then241
  %152 = load i32, i32* @input_location, align 4, !dbg !4338
  %153 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4339
  %bitpos255 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %153, i32 0, i32 3, !dbg !4340
  %154 = load %union.tree_node*, %union.tree_node** %bitpos255, align 8, !dbg !4340
  %155 = load i32, i32* %type_align, align 4, !dbg !4341
  %call256 = call %union.tree_node* @round_up_loc(i32 %152, %union.tree_node* %154, i32 %155), !dbg !4342
  %156 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4343
  %bitpos257 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %156, i32 0, i32 3, !dbg !4344
  store %union.tree_node* %call256, %union.tree_node** %bitpos257, align 8, !dbg !4345
  br label %if.end258

if.end258:                                        ; preds = %if.else254, %if.end253
  br label %if.end259, !dbg !4346

if.end259:                                        ; preds = %if.end258, %if.end237
  %157 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4347
  %common260 = bitcast %union.tree_node* %157 to %struct.tree_common*, !dbg !4347
  %base261 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common260, i32 0, i32 0, !dbg !4347
  %158 = bitcast %struct.tree_base* %base261 to i64*, !dbg !4347
  %bf.load262 = load i64, i64* %158, align 8, !dbg !4347
  %bf.lshr263 = lshr i64 %bf.load262, 41, !dbg !4347
  %bf.clear264 = and i64 %bf.lshr263, 1, !dbg !4347
  %bf.cast265 = trunc i64 %bf.clear264 to i32, !dbg !4347
  %tobool266 = icmp ne i32 %bf.cast265, 0, !dbg !4347
  br i1 %tobool266, label %if.end287, label %if.then267, !dbg !4349

if.then267:                                       ; preds = %if.end259
  %159 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4350
  %common268 = bitcast %union.tree_node* %159 to %struct.tree_common*, !dbg !4350
  %base269 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common268, i32 0, i32 0, !dbg !4350
  %160 = bitcast %struct.tree_base* %base269 to i64*, !dbg !4350
  %bf.load270 = load i64, i64* %160, align 8, !dbg !4350
  %bf.lshr271 = lshr i64 %bf.load270, 42, !dbg !4350
  %bf.clear272 = and i64 %bf.lshr271, 1, !dbg !4350
  %bf.cast273 = trunc i64 %bf.clear272 to i32, !dbg !4350
  %161 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4351
  %t274 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %161, i32 0, i32 0, !dbg !4351
  %162 = load %union.tree_node*, %union.tree_node** %t274, align 8, !dbg !4351
  %common275 = bitcast %union.tree_node* %162 to %struct.tree_common*, !dbg !4351
  %base276 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common275, i32 0, i32 0, !dbg !4351
  %163 = bitcast %struct.tree_base* %base276 to i64*, !dbg !4351
  %bf.load277 = load i64, i64* %163, align 8, !dbg !4352
  %bf.lshr278 = lshr i64 %bf.load277, 42, !dbg !4352
  %bf.clear279 = and i64 %bf.lshr278, 1, !dbg !4352
  %bf.cast280 = trunc i64 %bf.clear279 to i32, !dbg !4352
  %or = or i32 %bf.cast280, %bf.cast273, !dbg !4352
  %164 = zext i32 %or to i64, !dbg !4352
  %bf.load281 = load i64, i64* %163, align 8, !dbg !4352
  %bf.value282 = and i64 %164, 1, !dbg !4352
  %bf.shl283 = shl i64 %bf.value282, 42, !dbg !4352
  %bf.clear284 = and i64 %bf.load281, -4398046511105, !dbg !4352
  %bf.set285 = or i64 %bf.clear284, %bf.shl283, !dbg !4352
  store i64 %bf.set285, i64* %163, align 8, !dbg !4352
  %bf.result.cast286 = trunc i64 %bf.value282 to i32, !dbg !4352
  br label %if.end287, !dbg !4351

if.end287:                                        ; preds = %if.then267, %if.end259
  br label %if.end288, !dbg !4353

if.end288:                                        ; preds = %if.end287, %land.lhs.true211, %land.lhs.true207, %land.lhs.true202, %land.lhs.true198, %land.lhs.true195, %lor.lhs.false, %land.lhs.true176, %land.lhs.true173, %land.lhs.true166, %if.end162
  %165 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !4354
  %166 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4356
  %t289 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %166, i32 0, i32 0, !dbg !4357
  %167 = load %union.tree_node*, %union.tree_node** %t289, align 8, !dbg !4357
  %call290 = call zeroext i8 %165(%union.tree_node* %167), !dbg !4358
  %tobool291 = icmp ne i8 %call290, 0, !dbg !4358
  br i1 %tobool291, label %if.then292, label %if.end471, !dbg !4359

if.then292:                                       ; preds = %if.end288
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_saved, metadata !4360, metadata !DIExpression()), !dbg !4362
  %168 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4363
  %prev_field = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %168, i32 0, i32 6, !dbg !4364
  %169 = load %union.tree_node*, %union.tree_node** %prev_field, align 8, !dbg !4364
  store %union.tree_node* %169, %union.tree_node** %prev_saved, align 8, !dbg !4362
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_type, metadata !4365, metadata !DIExpression()), !dbg !4366
  %170 = load %union.tree_node*, %union.tree_node** %prev_saved, align 8, !dbg !4367
  %tobool293 = icmp ne %union.tree_node* %170, null, !dbg !4367
  br i1 %tobool293, label %cond.true294, label %cond.false296, !dbg !4367

cond.true294:                                     ; preds = %if.then292
  %171 = load %union.tree_node*, %union.tree_node** %prev_saved, align 8, !dbg !4368
  %field_decl295 = bitcast %union.tree_node* %171 to %struct.tree_field_decl*, !dbg !4368
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl295, i32 0, i32 2, !dbg !4368
  %172 = load %union.tree_node*, %union.tree_node** %bit_field_type, align 8, !dbg !4368
  br label %cond.end297, !dbg !4367

cond.false296:                                    ; preds = %if.then292
  br label %cond.end297, !dbg !4367

cond.end297:                                      ; preds = %cond.false296, %cond.true294
  %cond298 = phi %union.tree_node* [ %172, %cond.true294 ], [ null, %cond.false296 ], !dbg !4367
  store %union.tree_node* %cond298, %union.tree_node** %prev_type, align 8, !dbg !4366
  %173 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4369
  %prev_field299 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %173, i32 0, i32 6, !dbg !4371
  %174 = load %union.tree_node*, %union.tree_node** %prev_field299, align 8, !dbg !4371
  %tobool300 = icmp ne %union.tree_node* %174, null, !dbg !4369
  br i1 %tobool300, label %if.then301, label %if.end394, !dbg !4372

if.then301:                                       ; preds = %cond.end297
  %175 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4373
  %field_decl302 = bitcast %union.tree_node* %175 to %struct.tree_field_decl*, !dbg !4373
  %bit_field_type303 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl302, i32 0, i32 2, !dbg !4373
  %176 = load %union.tree_node*, %union.tree_node** %bit_field_type303, align 8, !dbg !4373
  %tobool304 = icmp ne %union.tree_node* %176, null, !dbg !4373
  br i1 %tobool304, label %land.lhs.true305, label %if.else367, !dbg !4376

land.lhs.true305:                                 ; preds = %if.then301
  %177 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4377
  %decl_common306 = bitcast %union.tree_node* %177 to %struct.tree_decl_common*, !dbg !4377
  %size307 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common306, i32 0, i32 1, !dbg !4377
  %178 = load %union.tree_node*, %union.tree_node** %size307, align 8, !dbg !4377
  %call308 = call i32 @integer_zerop(%union.tree_node* %178), !dbg !4378
  %tobool309 = icmp ne i32 %call308, 0, !dbg !4378
  br i1 %tobool309, label %if.else367, label %land.lhs.true310, !dbg !4379

land.lhs.true310:                                 ; preds = %land.lhs.true305
  %179 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4380
  %prev_field311 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %179, i32 0, i32 6, !dbg !4380
  %180 = load %union.tree_node*, %union.tree_node** %prev_field311, align 8, !dbg !4380
  %decl_common312 = bitcast %union.tree_node* %180 to %struct.tree_decl_common*, !dbg !4380
  %size313 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common312, i32 0, i32 1, !dbg !4380
  %181 = load %union.tree_node*, %union.tree_node** %size313, align 8, !dbg !4380
  %call314 = call i32 @integer_zerop(%union.tree_node* %181), !dbg !4381
  %tobool315 = icmp ne i32 %call314, 0, !dbg !4381
  br i1 %tobool315, label %if.else367, label %land.lhs.true316, !dbg !4382

land.lhs.true316:                                 ; preds = %land.lhs.true310
  %182 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4383
  %prev_field317 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %182, i32 0, i32 6, !dbg !4383
  %183 = load %union.tree_node*, %union.tree_node** %prev_field317, align 8, !dbg !4383
  %decl_common318 = bitcast %union.tree_node* %183 to %struct.tree_decl_common*, !dbg !4383
  %size319 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common318, i32 0, i32 1, !dbg !4383
  %184 = load %union.tree_node*, %union.tree_node** %size319, align 8, !dbg !4383
  %call320 = call i32 @host_integerp(%union.tree_node* %184, i32 0), !dbg !4384
  %tobool321 = icmp ne i32 %call320, 0, !dbg !4384
  br i1 %tobool321, label %land.lhs.true322, label %if.else367, !dbg !4385

land.lhs.true322:                                 ; preds = %land.lhs.true316
  %185 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4386
  %type323 = bitcast %union.tree_node* %185 to %struct.tree_type*, !dbg !4386
  %size324 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type323, i32 0, i32 2, !dbg !4386
  %186 = load %union.tree_node*, %union.tree_node** %size324, align 8, !dbg !4386
  %call325 = call i32 @host_integerp(%union.tree_node* %186, i32 0), !dbg !4387
  %tobool326 = icmp ne i32 %call325, 0, !dbg !4387
  br i1 %tobool326, label %land.lhs.true327, label %if.else367, !dbg !4388

land.lhs.true327:                                 ; preds = %land.lhs.true322
  %187 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4389
  %type328 = bitcast %union.tree_node* %187 to %struct.tree_type*, !dbg !4389
  %size329 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type328, i32 0, i32 2, !dbg !4389
  %188 = load %union.tree_node*, %union.tree_node** %size329, align 8, !dbg !4389
  %189 = load %union.tree_node*, %union.tree_node** %prev_type, align 8, !dbg !4390
  %type330 = bitcast %union.tree_node* %189 to %struct.tree_type*, !dbg !4390
  %size331 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type330, i32 0, i32 2, !dbg !4390
  %190 = load %union.tree_node*, %union.tree_node** %size331, align 8, !dbg !4390
  %call332 = call i32 @simple_cst_equal(%union.tree_node* %188, %union.tree_node* %190), !dbg !4391
  %tobool333 = icmp ne i32 %call332, 0, !dbg !4391
  br i1 %tobool333, label %if.then334, label %if.else367, !dbg !4392

if.then334:                                       ; preds = %land.lhs.true327
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !4393, metadata !DIExpression()), !dbg !4395
  %191 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4396
  %decl_common335 = bitcast %union.tree_node* %191 to %struct.tree_decl_common*, !dbg !4396
  %size336 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common335, i32 0, i32 1, !dbg !4396
  %192 = load %union.tree_node*, %union.tree_node** %size336, align 8, !dbg !4396
  %call337 = call i64 @tree_low_cst(%union.tree_node* %192, i32 1), !dbg !4397
  store i64 %call337, i64* %bitsize, align 8, !dbg !4395
  %193 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4398
  %remaining_in_alignment = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %193, i32 0, i32 8, !dbg !4400
  %194 = load i32, i32* %remaining_in_alignment, align 8, !dbg !4400
  %conv338 = sext i32 %194 to i64, !dbg !4398
  %195 = load i64, i64* %bitsize, align 8, !dbg !4401
  %cmp339 = icmp slt i64 %conv338, %195, !dbg !4402
  br i1 %cmp339, label %if.then341, label %if.else361, !dbg !4403

if.then341:                                       ; preds = %if.then334
  call void @llvm.dbg.declare(metadata i64* %typesize, metadata !4404, metadata !DIExpression()), !dbg !4406
  %196 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4407
  %type342 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !4407
  %size343 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type342, i32 0, i32 2, !dbg !4407
  %197 = load %union.tree_node*, %union.tree_node** %size343, align 8, !dbg !4407
  %call344 = call i64 @tree_low_cst(%union.tree_node* %197, i32 1), !dbg !4408
  store i64 %call344, i64* %typesize, align 8, !dbg !4406
  %198 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4409
  %bitpos345 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %198, i32 0, i32 3, !dbg !4409
  %199 = load %union.tree_node*, %union.tree_node** %bitpos345, align 8, !dbg !4409
  %200 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4409
  %remaining_in_alignment346 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %200, i32 0, i32 8, !dbg !4409
  %201 = load i32, i32* %remaining_in_alignment346, align 8, !dbg !4409
  %conv347 = sext i32 %201 to i64, !dbg !4409
  %call348 = call %union.tree_node* @size_int_kind(i64 %conv347, i32 2), !dbg !4409
  %call349 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %199, %union.tree_node* %call348), !dbg !4409
  %202 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4410
  %bitpos350 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %202, i32 0, i32 3, !dbg !4411
  store %union.tree_node* %call349, %union.tree_node** %bitpos350, align 8, !dbg !4412
  %203 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4413
  %204 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4414
  %prev_field351 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %204, i32 0, i32 6, !dbg !4415
  store %union.tree_node* %203, %union.tree_node** %prev_field351, align 8, !dbg !4416
  %205 = load i64, i64* %typesize, align 8, !dbg !4417
  %206 = load i64, i64* %bitsize, align 8, !dbg !4419
  %cmp352 = icmp slt i64 %205, %206, !dbg !4420
  br i1 %cmp352, label %if.then354, label %if.else356, !dbg !4421

if.then354:                                       ; preds = %if.then341
  %207 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4422
  %remaining_in_alignment355 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %207, i32 0, i32 8, !dbg !4423
  store i32 0, i32* %remaining_in_alignment355, align 8, !dbg !4424
  br label %if.end360, !dbg !4422

if.else356:                                       ; preds = %if.then341
  %208 = load i64, i64* %typesize, align 8, !dbg !4425
  %209 = load i64, i64* %bitsize, align 8, !dbg !4426
  %sub357 = sub nsw i64 %208, %209, !dbg !4427
  %conv358 = trunc i64 %sub357 to i32, !dbg !4425
  %210 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4428
  %remaining_in_alignment359 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %210, i32 0, i32 8, !dbg !4429
  store i32 %conv358, i32* %remaining_in_alignment359, align 8, !dbg !4430
  br label %if.end360

if.end360:                                        ; preds = %if.else356, %if.then354
  br label %if.end366, !dbg !4431

if.else361:                                       ; preds = %if.then334
  %211 = load i64, i64* %bitsize, align 8, !dbg !4432
  %212 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4433
  %remaining_in_alignment362 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %212, i32 0, i32 8, !dbg !4434
  %213 = load i32, i32* %remaining_in_alignment362, align 8, !dbg !4435
  %conv363 = sext i32 %213 to i64, !dbg !4435
  %sub364 = sub nsw i64 %conv363, %211, !dbg !4435
  %conv365 = trunc i64 %sub364 to i32, !dbg !4435
  store i32 %conv365, i32* %remaining_in_alignment362, align 8, !dbg !4435
  br label %if.end366

if.end366:                                        ; preds = %if.else361, %if.end360
  br label %if.end393, !dbg !4436

if.else367:                                       ; preds = %land.lhs.true327, %land.lhs.true322, %land.lhs.true316, %land.lhs.true310, %land.lhs.true305, %if.then301
  %214 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4437
  %prev_field368 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %214, i32 0, i32 6, !dbg !4437
  %215 = load %union.tree_node*, %union.tree_node** %prev_field368, align 8, !dbg !4437
  %decl_common369 = bitcast %union.tree_node* %215 to %struct.tree_decl_common*, !dbg !4437
  %size370 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common369, i32 0, i32 1, !dbg !4437
  %216 = load %union.tree_node*, %union.tree_node** %size370, align 8, !dbg !4437
  %call371 = call i32 @integer_zerop(%union.tree_node* %216), !dbg !4440
  %tobool372 = icmp ne i32 %call371, 0, !dbg !4440
  br i1 %tobool372, label %if.else380, label %if.then373, !dbg !4441

if.then373:                                       ; preds = %if.else367
  %217 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4442
  %bitpos374 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %217, i32 0, i32 3, !dbg !4442
  %218 = load %union.tree_node*, %union.tree_node** %bitpos374, align 8, !dbg !4442
  %219 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4442
  %remaining_in_alignment375 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %219, i32 0, i32 8, !dbg !4442
  %220 = load i32, i32* %remaining_in_alignment375, align 8, !dbg !4442
  %conv376 = sext i32 %220 to i64, !dbg !4442
  %call377 = call %union.tree_node* @size_int_kind(i64 %conv376, i32 2), !dbg !4442
  %call378 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %218, %union.tree_node* %call377), !dbg !4442
  %221 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4444
  %bitpos379 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %221, i32 0, i32 3, !dbg !4445
  store %union.tree_node* %call378, %union.tree_node** %bitpos379, align 8, !dbg !4446
  br label %if.end381, !dbg !4447

if.else380:                                       ; preds = %if.else367
  store %union.tree_node* null, %union.tree_node** %prev_saved, align 8, !dbg !4448
  br label %if.end381

if.end381:                                        ; preds = %if.else380, %if.then373
  %222 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4449
  %field_decl382 = bitcast %union.tree_node* %222 to %struct.tree_field_decl*, !dbg !4449
  %bit_field_type383 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl382, i32 0, i32 2, !dbg !4449
  %223 = load %union.tree_node*, %union.tree_node** %bit_field_type383, align 8, !dbg !4449
  %tobool384 = icmp ne %union.tree_node* %223, null, !dbg !4449
  br i1 %tobool384, label %lor.lhs.false385, label %if.then390, !dbg !4451

lor.lhs.false385:                                 ; preds = %if.end381
  %224 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4452
  %decl_common386 = bitcast %union.tree_node* %224 to %struct.tree_decl_common*, !dbg !4452
  %size387 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common386, i32 0, i32 1, !dbg !4452
  %225 = load %union.tree_node*, %union.tree_node** %size387, align 8, !dbg !4452
  %call388 = call i32 @integer_zerop(%union.tree_node* %225), !dbg !4453
  %tobool389 = icmp ne i32 %call388, 0, !dbg !4453
  br i1 %tobool389, label %if.then390, label %if.end392, !dbg !4454

if.then390:                                       ; preds = %lor.lhs.false385, %if.end381
  %226 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4455
  %prev_field391 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %226, i32 0, i32 6, !dbg !4456
  store %union.tree_node* null, %union.tree_node** %prev_field391, align 8, !dbg !4457
  br label %if.end392, !dbg !4455

if.end392:                                        ; preds = %if.then390, %lor.lhs.false385
  br label %if.end393

if.end393:                                        ; preds = %if.end392, %if.end366
  %227 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4458
  call void @normalize_rli(%struct.record_layout_info_s* %227), !dbg !4459
  br label %if.end394, !dbg !4460

if.end394:                                        ; preds = %if.end393, %cond.end297
  %228 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4461
  %field_decl395 = bitcast %union.tree_node* %228 to %struct.tree_field_decl*, !dbg !4461
  %bit_field_type396 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl395, i32 0, i32 2, !dbg !4461
  %229 = load %union.tree_node*, %union.tree_node** %bit_field_type396, align 8, !dbg !4461
  %tobool397 = icmp ne %union.tree_node* %229, null, !dbg !4461
  br i1 %tobool397, label %lor.lhs.false398, label %if.then413, !dbg !4463

lor.lhs.false398:                                 ; preds = %if.end394
  %230 = load %union.tree_node*, %union.tree_node** %prev_saved, align 8, !dbg !4464
  %cmp399 = icmp ne %union.tree_node* %230, null, !dbg !4465
  br i1 %cmp399, label %cond.true401, label %cond.false408, !dbg !4466

cond.true401:                                     ; preds = %lor.lhs.false398
  %231 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4467
  %type402 = bitcast %union.tree_node* %231 to %struct.tree_type*, !dbg !4467
  %size403 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type402, i32 0, i32 2, !dbg !4467
  %232 = load %union.tree_node*, %union.tree_node** %size403, align 8, !dbg !4467
  %233 = load %union.tree_node*, %union.tree_node** %prev_type, align 8, !dbg !4468
  %type404 = bitcast %union.tree_node* %233 to %struct.tree_type*, !dbg !4468
  %size405 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type404, i32 0, i32 2, !dbg !4468
  %234 = load %union.tree_node*, %union.tree_node** %size405, align 8, !dbg !4468
  %call406 = call i32 @simple_cst_equal(%union.tree_node* %232, %union.tree_node* %234), !dbg !4469
  %tobool407 = icmp ne i32 %call406, 0, !dbg !4469
  br i1 %tobool407, label %if.end470, label %if.then413, !dbg !4464

cond.false408:                                    ; preds = %lor.lhs.false398
  %235 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4470
  %decl_common409 = bitcast %union.tree_node* %235 to %struct.tree_decl_common*, !dbg !4470
  %size410 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common409, i32 0, i32 1, !dbg !4470
  %236 = load %union.tree_node*, %union.tree_node** %size410, align 8, !dbg !4470
  %call411 = call i32 @integer_zerop(%union.tree_node* %236), !dbg !4471
  %tobool412 = icmp ne i32 %call411, 0, !dbg !4471
  br i1 %tobool412, label %if.end470, label %if.then413, !dbg !4466

if.then413:                                       ; preds = %cond.false408, %cond.true401, %if.end394
  call void @llvm.dbg.declare(metadata i32* %type_align414, metadata !4472, metadata !DIExpression()), !dbg !4474
  store i32 8, i32* %type_align414, align 4, !dbg !4474
  %237 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4475
  %decl_common415 = bitcast %union.tree_node* %237 to %struct.tree_decl_common*, !dbg !4475
  %size416 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common415, i32 0, i32 1, !dbg !4475
  %238 = load %union.tree_node*, %union.tree_node** %size416, align 8, !dbg !4475
  %cmp417 = icmp ne %union.tree_node* %238, null, !dbg !4477
  br i1 %cmp417, label %land.lhs.true419, label %if.end451, !dbg !4478

land.lhs.true419:                                 ; preds = %if.then413
  %239 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4479
  %common420 = bitcast %union.tree_node* %239 to %struct.tree_common*, !dbg !4479
  %type421 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common420, i32 0, i32 2, !dbg !4479
  %240 = load %union.tree_node*, %union.tree_node** %type421, align 8, !dbg !4479
  %type422 = bitcast %union.tree_node* %240 to %struct.tree_type*, !dbg !4479
  %size423 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type422, i32 0, i32 2, !dbg !4479
  %241 = load %union.tree_node*, %union.tree_node** %size423, align 8, !dbg !4479
  %call424 = call i32 @host_integerp(%union.tree_node* %241, i32 1), !dbg !4480
  %tobool425 = icmp ne i32 %call424, 0, !dbg !4480
  br i1 %tobool425, label %land.lhs.true426, label %if.end451, !dbg !4481

land.lhs.true426:                                 ; preds = %land.lhs.true419
  %242 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4482
  %decl_common427 = bitcast %union.tree_node* %242 to %struct.tree_decl_common*, !dbg !4482
  %size428 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common427, i32 0, i32 1, !dbg !4482
  %243 = load %union.tree_node*, %union.tree_node** %size428, align 8, !dbg !4482
  %call429 = call i32 @host_integerp(%union.tree_node* %243, i32 1), !dbg !4483
  %tobool430 = icmp ne i32 %call429, 0, !dbg !4483
  br i1 %tobool430, label %if.then431, label %if.end451, !dbg !4484

if.then431:                                       ; preds = %land.lhs.true426
  call void @llvm.dbg.declare(metadata i64* %bitsize432, metadata !4485, metadata !DIExpression()), !dbg !4487
  %244 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4488
  %decl_common433 = bitcast %union.tree_node* %244 to %struct.tree_decl_common*, !dbg !4488
  %size434 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common433, i32 0, i32 1, !dbg !4488
  %245 = load %union.tree_node*, %union.tree_node** %size434, align 8, !dbg !4488
  %call435 = call i64 @tree_low_cst(%union.tree_node* %245, i32 1), !dbg !4489
  store i64 %call435, i64* %bitsize432, align 8, !dbg !4487
  call void @llvm.dbg.declare(metadata i64* %typesize436, metadata !4490, metadata !DIExpression()), !dbg !4491
  %246 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4492
  %common437 = bitcast %union.tree_node* %246 to %struct.tree_common*, !dbg !4492
  %type438 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common437, i32 0, i32 2, !dbg !4492
  %247 = load %union.tree_node*, %union.tree_node** %type438, align 8, !dbg !4492
  %type439 = bitcast %union.tree_node* %247 to %struct.tree_type*, !dbg !4492
  %size440 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type439, i32 0, i32 2, !dbg !4492
  %248 = load %union.tree_node*, %union.tree_node** %size440, align 8, !dbg !4492
  %call441 = call i64 @tree_low_cst(%union.tree_node* %248, i32 1), !dbg !4493
  store i64 %call441, i64* %typesize436, align 8, !dbg !4491
  %249 = load i64, i64* %typesize436, align 8, !dbg !4494
  %250 = load i64, i64* %bitsize432, align 8, !dbg !4496
  %cmp442 = icmp ult i64 %249, %250, !dbg !4497
  br i1 %cmp442, label %if.then444, label %if.else446, !dbg !4498

if.then444:                                       ; preds = %if.then431
  %251 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4499
  %remaining_in_alignment445 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %251, i32 0, i32 8, !dbg !4500
  store i32 0, i32* %remaining_in_alignment445, align 8, !dbg !4501
  br label %if.end450, !dbg !4499

if.else446:                                       ; preds = %if.then431
  %252 = load i64, i64* %typesize436, align 8, !dbg !4502
  %253 = load i64, i64* %bitsize432, align 8, !dbg !4503
  %sub447 = sub i64 %252, %253, !dbg !4504
  %conv448 = trunc i64 %sub447 to i32, !dbg !4502
  %254 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4505
  %remaining_in_alignment449 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %254, i32 0, i32 8, !dbg !4506
  store i32 %conv448, i32* %remaining_in_alignment449, align 8, !dbg !4507
  br label %if.end450

if.end450:                                        ; preds = %if.else446, %if.then444
  br label %if.end451, !dbg !4508

if.end451:                                        ; preds = %if.end450, %land.lhs.true426, %land.lhs.true419, %if.then413
  %255 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4509
  %common452 = bitcast %union.tree_node* %255 to %struct.tree_common*, !dbg !4509
  %type453 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common452, i32 0, i32 2, !dbg !4509
  %256 = load %union.tree_node*, %union.tree_node** %type453, align 8, !dbg !4509
  %type454 = bitcast %union.tree_node* %256 to %struct.tree_type*, !dbg !4509
  %align455 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type454, i32 0, i32 7, !dbg !4509
  %257 = load i32, i32* %align455, align 8, !dbg !4509
  store i32 %257, i32* %type_align414, align 4, !dbg !4510
  %258 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4511
  %cmp456 = icmp ne i32 %258, 0, !dbg !4513
  br i1 %cmp456, label %if.then458, label %if.end465, !dbg !4514

if.then458:                                       ; preds = %if.end451
  %259 = load i32, i32* %type_align414, align 4, !dbg !4515
  %260 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4515
  %cmp459 = icmp ult i32 %259, %260, !dbg !4515
  br i1 %cmp459, label %cond.true461, label %cond.false462, !dbg !4515

cond.true461:                                     ; preds = %if.then458
  %261 = load i32, i32* %type_align414, align 4, !dbg !4515
  br label %cond.end463, !dbg !4515

cond.false462:                                    ; preds = %if.then458
  %262 = load i32, i32* @maximum_field_alignment, align 4, !dbg !4515
  br label %cond.end463, !dbg !4515

cond.end463:                                      ; preds = %cond.false462, %cond.true461
  %cond464 = phi i32 [ %261, %cond.true461 ], [ %262, %cond.false462 ], !dbg !4515
  store i32 %cond464, i32* %type_align414, align 4, !dbg !4516
  br label %if.end465, !dbg !4517

if.end465:                                        ; preds = %cond.end463, %if.end451
  %263 = load i32, i32* @input_location, align 4, !dbg !4518
  %264 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4519
  %bitpos466 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %264, i32 0, i32 3, !dbg !4520
  %265 = load %union.tree_node*, %union.tree_node** %bitpos466, align 8, !dbg !4520
  %266 = load i32, i32* %type_align414, align 4, !dbg !4521
  %call467 = call %union.tree_node* @round_up_loc(i32 %263, %union.tree_node* %265, i32 %266), !dbg !4522
  %267 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4523
  %bitpos468 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %267, i32 0, i32 3, !dbg !4524
  store %union.tree_node* %call467, %union.tree_node** %bitpos468, align 8, !dbg !4525
  %268 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4526
  %prev_field469 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %268, i32 0, i32 6, !dbg !4527
  store %union.tree_node* null, %union.tree_node** %prev_field469, align 8, !dbg !4528
  br label %if.end470, !dbg !4529

if.end470:                                        ; preds = %if.end465, %cond.false408, %cond.true401
  br label %if.end471, !dbg !4530

if.end471:                                        ; preds = %if.end470, %if.end288
  %269 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4531
  call void @normalize_rli(%struct.record_layout_info_s* %269), !dbg !4532
  %270 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4533
  %offset472 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %270, i32 0, i32 1, !dbg !4534
  %271 = load %union.tree_node*, %union.tree_node** %offset472, align 8, !dbg !4534
  %272 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4535
  %field_decl473 = bitcast %union.tree_node* %272 to %struct.tree_field_decl*, !dbg !4535
  %offset474 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl473, i32 0, i32 1, !dbg !4535
  store %union.tree_node* %271, %union.tree_node** %offset474, align 8, !dbg !4536
  %273 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4537
  %bitpos475 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %273, i32 0, i32 3, !dbg !4538
  %274 = load %union.tree_node*, %union.tree_node** %bitpos475, align 8, !dbg !4538
  %275 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4539
  %field_decl476 = bitcast %union.tree_node* %275 to %struct.tree_field_decl*, !dbg !4539
  %bit_offset477 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl476, i32 0, i32 4, !dbg !4539
  store %union.tree_node* %274, %union.tree_node** %bit_offset477, align 8, !dbg !4540
  %276 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4541
  %offset_align478 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %276, i32 0, i32 2, !dbg !4541
  %277 = load i32, i32* %offset_align478, align 8, !dbg !4541
  %278 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4541
  %offset_align479 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %278, i32 0, i32 2, !dbg !4541
  %279 = load i32, i32* %offset_align479, align 8, !dbg !4541
  %sub480 = sub i32 0, %279, !dbg !4541
  %and481 = and i32 %277, %sub480, !dbg !4541
  %conv482 = zext i32 %and481 to i64, !dbg !4541
  %call483 = call i32 @exact_log2(i64 %conv482), !dbg !4541
  %280 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4541
  %decl_common484 = bitcast %union.tree_node* %280 to %struct.tree_decl_common*, !dbg !4541
  %off_align485 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common484, i32 0, i32 2, !dbg !4541
  %281 = bitcast i40* %off_align485 to i64*, !dbg !4541
  %282 = zext i32 %call483 to i64, !dbg !4541
  %bf.load486 = load i64, i64* %281, align 8, !dbg !4541
  %bf.value487 = and i64 %282, 255, !dbg !4541
  %bf.shl488 = shl i64 %bf.value487, 32, !dbg !4541
  %bf.clear489 = and i64 %bf.load486, -1095216660481, !dbg !4541
  %bf.set490 = or i64 %bf.clear489, %bf.shl488, !dbg !4541
  store i64 %bf.set490, i64* %281, align 8, !dbg !4541
  %bf.result.cast491 = trunc i64 %bf.value487 to i32, !dbg !4541
  %283 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4542
  %field_decl492 = bitcast %union.tree_node* %283 to %struct.tree_field_decl*, !dbg !4542
  %bit_offset493 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl492, i32 0, i32 4, !dbg !4542
  %284 = load %union.tree_node*, %union.tree_node** %bit_offset493, align 8, !dbg !4542
  %call494 = call i32 @integer_zerop(%union.tree_node* %284), !dbg !4544
  %tobool495 = icmp ne i32 %call494, 0, !dbg !4544
  br i1 %tobool495, label %if.else506, label %if.then496, !dbg !4545

if.then496:                                       ; preds = %if.end471
  %285 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4546
  %field_decl497 = bitcast %union.tree_node* %285 to %struct.tree_field_decl*, !dbg !4546
  %bit_offset498 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl497, i32 0, i32 4, !dbg !4546
  %286 = load %union.tree_node*, %union.tree_node** %bit_offset498, align 8, !dbg !4546
  %call499 = call i64 @tree_low_cst(%union.tree_node* %286, i32 1), !dbg !4547
  %287 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4548
  %field_decl500 = bitcast %union.tree_node* %287 to %struct.tree_field_decl*, !dbg !4548
  %bit_offset501 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl500, i32 0, i32 4, !dbg !4548
  %288 = load %union.tree_node*, %union.tree_node** %bit_offset501, align 8, !dbg !4548
  %call502 = call i64 @tree_low_cst(%union.tree_node* %288, i32 1), !dbg !4549
  %sub503 = sub nsw i64 0, %call502, !dbg !4550
  %and504 = and i64 %call499, %sub503, !dbg !4551
  %conv505 = trunc i64 %and504 to i32, !dbg !4552
  store i32 %conv505, i32* %actual_align, align 4, !dbg !4553
  br label %if.end554, !dbg !4554

if.else506:                                       ; preds = %if.end471
  %289 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4555
  %field_decl507 = bitcast %union.tree_node* %289 to %struct.tree_field_decl*, !dbg !4555
  %offset508 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl507, i32 0, i32 1, !dbg !4555
  %290 = load %union.tree_node*, %union.tree_node** %offset508, align 8, !dbg !4555
  %call509 = call i32 @integer_zerop(%union.tree_node* %290), !dbg !4557
  %tobool510 = icmp ne i32 %call509, 0, !dbg !4557
  br i1 %tobool510, label %if.then511, label %if.else528, !dbg !4558

if.then511:                                       ; preds = %if.else506
  %291 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4559
  %and512 = and i32 %291, 32, !dbg !4559
  %cmp513 = icmp ne i32 %and512, 0, !dbg !4559
  %292 = zext i1 %cmp513 to i64, !dbg !4559
  %cond515 = select i1 %cmp513, i32 256, i32 128, !dbg !4559
  %293 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4559
  %record_align516 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %293, i32 0, i32 4, !dbg !4559
  %294 = load i32, i32* %record_align516, align 8, !dbg !4559
  %cmp517 = icmp ugt i32 %cond515, %294, !dbg !4559
  br i1 %cmp517, label %cond.true519, label %cond.false524, !dbg !4559

cond.true519:                                     ; preds = %if.then511
  %295 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4559
  %and520 = and i32 %295, 32, !dbg !4559
  %cmp521 = icmp ne i32 %and520, 0, !dbg !4559
  %296 = zext i1 %cmp521 to i64, !dbg !4559
  %cond523 = select i1 %cmp521, i32 256, i32 128, !dbg !4559
  br label %cond.end526, !dbg !4559

cond.false524:                                    ; preds = %if.then511
  %297 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4559
  %record_align525 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %297, i32 0, i32 4, !dbg !4559
  %298 = load i32, i32* %record_align525, align 8, !dbg !4559
  br label %cond.end526, !dbg !4559

cond.end526:                                      ; preds = %cond.false524, %cond.true519
  %cond527 = phi i32 [ %cond523, %cond.true519 ], [ %298, %cond.false524 ], !dbg !4559
  store i32 %cond527, i32* %actual_align, align 4, !dbg !4560
  br label %if.end553, !dbg !4561

if.else528:                                       ; preds = %if.else506
  %299 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4562
  %field_decl529 = bitcast %union.tree_node* %299 to %struct.tree_field_decl*, !dbg !4562
  %offset530 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl529, i32 0, i32 1, !dbg !4562
  %300 = load %union.tree_node*, %union.tree_node** %offset530, align 8, !dbg !4562
  %call531 = call i32 @host_integerp(%union.tree_node* %300, i32 1), !dbg !4564
  %tobool532 = icmp ne i32 %call531, 0, !dbg !4564
  br i1 %tobool532, label %if.then533, label %if.else544, !dbg !4565

if.then533:                                       ; preds = %if.else528
  %301 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4566
  %field_decl534 = bitcast %union.tree_node* %301 to %struct.tree_field_decl*, !dbg !4566
  %offset535 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl534, i32 0, i32 1, !dbg !4566
  %302 = load %union.tree_node*, %union.tree_node** %offset535, align 8, !dbg !4566
  %call536 = call i64 @tree_low_cst(%union.tree_node* %302, i32 1), !dbg !4567
  %303 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4568
  %field_decl537 = bitcast %union.tree_node* %303 to %struct.tree_field_decl*, !dbg !4568
  %offset538 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl537, i32 0, i32 1, !dbg !4568
  %304 = load %union.tree_node*, %union.tree_node** %offset538, align 8, !dbg !4568
  %call539 = call i64 @tree_low_cst(%union.tree_node* %304, i32 1), !dbg !4569
  %sub540 = sub nsw i64 0, %call539, !dbg !4570
  %and541 = and i64 %call536, %sub540, !dbg !4571
  %mul542 = mul nsw i64 8, %and541, !dbg !4572
  %conv543 = trunc i64 %mul542 to i32, !dbg !4573
  store i32 %conv543, i32* %actual_align, align 4, !dbg !4574
  br label %if.end552, !dbg !4575

if.else544:                                       ; preds = %if.else528
  %305 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4576
  %decl_common545 = bitcast %union.tree_node* %305 to %struct.tree_decl_common*, !dbg !4576
  %off_align546 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common545, i32 0, i32 2, !dbg !4576
  %306 = bitcast i40* %off_align546 to i64*, !dbg !4576
  %bf.load547 = load i64, i64* %306, align 8, !dbg !4576
  %bf.lshr548 = lshr i64 %bf.load547, 32, !dbg !4576
  %bf.clear549 = and i64 %bf.lshr548, 255, !dbg !4576
  %bf.cast550 = trunc i64 %bf.clear549 to i32, !dbg !4576
  %sh_prom = zext i32 %bf.cast550 to i64, !dbg !4576
  %shl = shl i64 1, %sh_prom, !dbg !4576
  %conv551 = trunc i64 %shl to i32, !dbg !4576
  store i32 %conv551, i32* %actual_align, align 4, !dbg !4577
  br label %if.end552

if.end552:                                        ; preds = %if.else544, %if.then533
  br label %if.end553

if.end553:                                        ; preds = %if.end552, %cond.end526
  br label %if.end554

if.end554:                                        ; preds = %if.end553, %if.then496
  %307 = load i32, i32* %known_align, align 4, !dbg !4578
  %308 = load i32, i32* %actual_align, align 4, !dbg !4580
  %cmp555 = icmp ne i32 %307, %308, !dbg !4581
  br i1 %cmp555, label %if.then557, label %if.end558, !dbg !4582

if.then557:                                       ; preds = %if.end554
  %309 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4583
  %310 = load i32, i32* %actual_align, align 4, !dbg !4584
  call void @layout_decl(%union.tree_node* %309, i32 %310), !dbg !4585
  br label %if.end558, !dbg !4585

if.end558:                                        ; preds = %if.then557, %if.end554
  %311 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4586
  %prev_field559 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %311, i32 0, i32 6, !dbg !4588
  %312 = load %union.tree_node*, %union.tree_node** %prev_field559, align 8, !dbg !4588
  %cmp560 = icmp eq %union.tree_node* %312, null, !dbg !4589
  br i1 %cmp560, label %land.lhs.true562, label %if.end568, !dbg !4590

land.lhs.true562:                                 ; preds = %if.end558
  %313 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4591
  %field_decl563 = bitcast %union.tree_node* %313 to %struct.tree_field_decl*, !dbg !4591
  %bit_field_type564 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl563, i32 0, i32 2, !dbg !4591
  %314 = load %union.tree_node*, %union.tree_node** %bit_field_type564, align 8, !dbg !4591
  %tobool565 = icmp ne %union.tree_node* %314, null, !dbg !4591
  br i1 %tobool565, label %if.then566, label %if.end568, !dbg !4592

if.then566:                                       ; preds = %land.lhs.true562
  %315 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4593
  %316 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4594
  %prev_field567 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %316, i32 0, i32 6, !dbg !4595
  store %union.tree_node* %315, %union.tree_node** %prev_field567, align 8, !dbg !4596
  br label %if.end568, !dbg !4594

if.end568:                                        ; preds = %if.then566, %land.lhs.true562, %if.end558
  %317 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4597
  %decl_common569 = bitcast %union.tree_node* %317 to %struct.tree_decl_common*, !dbg !4597
  %size570 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common569, i32 0, i32 1, !dbg !4597
  %318 = load %union.tree_node*, %union.tree_node** %size570, align 8, !dbg !4597
  %cmp571 = icmp eq %union.tree_node* %318, null, !dbg !4599
  br i1 %cmp571, label %if.then573, label %if.else574, !dbg !4600

if.then573:                                       ; preds = %if.end568
  br label %if.end660, !dbg !4600

if.else574:                                       ; preds = %if.end568
  %319 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4601
  %decl_common575 = bitcast %union.tree_node* %319 to %struct.tree_decl_common*, !dbg !4601
  %size576 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common575, i32 0, i32 1, !dbg !4601
  %320 = load %union.tree_node*, %union.tree_node** %size576, align 8, !dbg !4601
  %base577 = bitcast %union.tree_node* %320 to %struct.tree_base*, !dbg !4601
  %321 = bitcast %struct.tree_base* %base577 to i64*, !dbg !4601
  %bf.load578 = load i64, i64* %321, align 8, !dbg !4601
  %bf.clear579 = and i64 %bf.load578, 65535, !dbg !4601
  %bf.cast580 = trunc i64 %bf.clear579 to i32, !dbg !4601
  %cmp581 = icmp ne i32 %bf.cast580, 23, !dbg !4603
  br i1 %cmp581, label %if.then592, label %lor.lhs.false583, !dbg !4604

lor.lhs.false583:                                 ; preds = %if.else574
  %322 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4605
  %decl_common584 = bitcast %union.tree_node* %322 to %struct.tree_decl_common*, !dbg !4605
  %size585 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common584, i32 0, i32 1, !dbg !4605
  %323 = load %union.tree_node*, %union.tree_node** %size585, align 8, !dbg !4605
  %base586 = bitcast %union.tree_node* %323 to %struct.tree_base*, !dbg !4605
  %324 = bitcast %struct.tree_base* %base586 to i64*, !dbg !4605
  %bf.load587 = load i64, i64* %324, align 8, !dbg !4605
  %bf.lshr588 = lshr i64 %bf.load587, 27, !dbg !4605
  %bf.clear589 = and i64 %bf.lshr588, 1, !dbg !4605
  %bf.cast590 = trunc i64 %bf.clear589 to i32, !dbg !4605
  %tobool591 = icmp ne i32 %bf.cast590, 0, !dbg !4605
  br i1 %tobool591, label %if.then592, label %if.else613, !dbg !4606

if.then592:                                       ; preds = %lor.lhs.false583, %if.else574
  %325 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4607
  %offset593 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %325, i32 0, i32 1, !dbg !4607
  %326 = load %union.tree_node*, %union.tree_node** %offset593, align 8, !dbg !4607
  %327 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4607
  %328 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4607
  %bitpos594 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %328, i32 0, i32 3, !dbg !4607
  %329 = load %union.tree_node*, %union.tree_node** %bitpos594, align 8, !dbg !4607
  %330 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !dbg !4607
  %call595 = call %union.tree_node* @size_binop_loc(i32 0, i32 68, %union.tree_node* %329, %union.tree_node* %330), !dbg !4607
  %call596 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %327, %union.tree_node* %call595), !dbg !4607
  %call597 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %326, %union.tree_node* %call596), !dbg !4607
  %331 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4609
  %offset598 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %331, i32 0, i32 1, !dbg !4610
  store %union.tree_node* %call597, %union.tree_node** %offset598, align 8, !dbg !4611
  %332 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4612
  %offset599 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %332, i32 0, i32 1, !dbg !4612
  %333 = load %union.tree_node*, %union.tree_node** %offset599, align 8, !dbg !4612
  %334 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4612
  %decl_common600 = bitcast %union.tree_node* %334 to %struct.tree_decl_common*, !dbg !4612
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common600, i32 0, i32 4, !dbg !4612
  %335 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4612
  %call601 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %333, %union.tree_node* %335), !dbg !4612
  %336 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4613
  %offset602 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %336, i32 0, i32 1, !dbg !4614
  store %union.tree_node* %call601, %union.tree_node** %offset602, align 8, !dbg !4615
  %337 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !dbg !4616
  %338 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4617
  %bitpos603 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %338, i32 0, i32 3, !dbg !4618
  store %union.tree_node* %337, %union.tree_node** %bitpos603, align 8, !dbg !4619
  %339 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4620
  %offset_align604 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %339, i32 0, i32 2, !dbg !4620
  %340 = load i32, i32* %offset_align604, align 8, !dbg !4620
  %341 = load i32, i32* %desired_align, align 4, !dbg !4620
  %cmp605 = icmp ult i32 %340, %341, !dbg !4620
  br i1 %cmp605, label %cond.true607, label %cond.false609, !dbg !4620

cond.true607:                                     ; preds = %if.then592
  %342 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4620
  %offset_align608 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %342, i32 0, i32 2, !dbg !4620
  %343 = load i32, i32* %offset_align608, align 8, !dbg !4620
  br label %cond.end610, !dbg !4620

cond.false609:                                    ; preds = %if.then592
  %344 = load i32, i32* %desired_align, align 4, !dbg !4620
  br label %cond.end610, !dbg !4620

cond.end610:                                      ; preds = %cond.false609, %cond.true607
  %cond611 = phi i32 [ %343, %cond.true607 ], [ %344, %cond.false609 ], !dbg !4620
  %345 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4621
  %offset_align612 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %345, i32 0, i32 2, !dbg !4622
  store i32 %cond611, i32* %offset_align612, align 8, !dbg !4623
  br label %if.end659, !dbg !4624

if.else613:                                       ; preds = %lor.lhs.false583
  %346 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 18), align 8, !dbg !4625
  %347 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4627
  %t614 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %347, i32 0, i32 0, !dbg !4628
  %348 = load %union.tree_node*, %union.tree_node** %t614, align 8, !dbg !4628
  %call615 = call zeroext i8 %346(%union.tree_node* %348), !dbg !4629
  %tobool616 = icmp ne i8 %call615, 0, !dbg !4629
  br i1 %tobool616, label %if.then617, label %if.else652, !dbg !4630

if.then617:                                       ; preds = %if.else613
  %349 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4631
  %bitpos618 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %349, i32 0, i32 3, !dbg !4631
  %350 = load %union.tree_node*, %union.tree_node** %bitpos618, align 8, !dbg !4631
  %351 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4631
  %decl_common619 = bitcast %union.tree_node* %351 to %struct.tree_decl_common*, !dbg !4631
  %size620 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common619, i32 0, i32 1, !dbg !4631
  %352 = load %union.tree_node*, %union.tree_node** %size620, align 8, !dbg !4631
  %call621 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %350, %union.tree_node* %352), !dbg !4631
  %353 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4633
  %bitpos622 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %353, i32 0, i32 3, !dbg !4634
  store %union.tree_node* %call621, %union.tree_node** %bitpos622, align 8, !dbg !4635
  %354 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4636
  %common623 = bitcast %union.tree_node* %354 to %struct.tree_common*, !dbg !4636
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common623, i32 0, i32 1, !dbg !4636
  %355 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4636
  %cmp624 = icmp eq %union.tree_node* %355, null, !dbg !4638
  br i1 %cmp624, label %land.lhs.true635, label %lor.lhs.false626, !dbg !4639

lor.lhs.false626:                                 ; preds = %if.then617
  %356 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4640
  %common627 = bitcast %union.tree_node* %356 to %struct.tree_common*, !dbg !4640
  %chain628 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common627, i32 0, i32 1, !dbg !4640
  %357 = load %union.tree_node*, %union.tree_node** %chain628, align 8, !dbg !4640
  %base629 = bitcast %union.tree_node* %357 to %struct.tree_base*, !dbg !4640
  %358 = bitcast %struct.tree_base* %base629 to i64*, !dbg !4640
  %bf.load630 = load i64, i64* %358, align 8, !dbg !4640
  %bf.clear631 = and i64 %bf.load630, 65535, !dbg !4640
  %bf.cast632 = trunc i64 %bf.clear631 to i32, !dbg !4640
  %cmp633 = icmp ne i32 %bf.cast632, 31, !dbg !4641
  br i1 %cmp633, label %land.lhs.true635, label %if.end651, !dbg !4642

land.lhs.true635:                                 ; preds = %lor.lhs.false626, %if.then617
  %359 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4643
  %field_decl636 = bitcast %union.tree_node* %359 to %struct.tree_field_decl*, !dbg !4643
  %bit_field_type637 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl636, i32 0, i32 2, !dbg !4643
  %360 = load %union.tree_node*, %union.tree_node** %bit_field_type637, align 8, !dbg !4643
  %tobool638 = icmp ne %union.tree_node* %360, null, !dbg !4643
  br i1 %tobool638, label %land.lhs.true639, label %if.end651, !dbg !4644

land.lhs.true639:                                 ; preds = %land.lhs.true635
  %361 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4645
  %decl_common640 = bitcast %union.tree_node* %361 to %struct.tree_decl_common*, !dbg !4645
  %size641 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common640, i32 0, i32 1, !dbg !4645
  %362 = load %union.tree_node*, %union.tree_node** %size641, align 8, !dbg !4645
  %call642 = call i32 @integer_zerop(%union.tree_node* %362), !dbg !4646
  %tobool643 = icmp ne i32 %call642, 0, !dbg !4646
  br i1 %tobool643, label %if.end651, label %if.then644, !dbg !4647

if.then644:                                       ; preds = %land.lhs.true639
  %363 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4648
  %bitpos645 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %363, i32 0, i32 3, !dbg !4648
  %364 = load %union.tree_node*, %union.tree_node** %bitpos645, align 8, !dbg !4648
  %365 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4648
  %remaining_in_alignment646 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %365, i32 0, i32 8, !dbg !4648
  %366 = load i32, i32* %remaining_in_alignment646, align 8, !dbg !4648
  %conv647 = sext i32 %366 to i64, !dbg !4648
  %call648 = call %union.tree_node* @size_int_kind(i64 %conv647, i32 2), !dbg !4648
  %call649 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %364, %union.tree_node* %call648), !dbg !4648
  %367 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4649
  %bitpos650 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %367, i32 0, i32 3, !dbg !4650
  store %union.tree_node* %call649, %union.tree_node** %bitpos650, align 8, !dbg !4651
  br label %if.end651, !dbg !4649

if.end651:                                        ; preds = %if.then644, %land.lhs.true639, %land.lhs.true635, %lor.lhs.false626
  %368 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4652
  call void @normalize_rli(%struct.record_layout_info_s* %368), !dbg !4653
  br label %if.end658, !dbg !4654

if.else652:                                       ; preds = %if.else613
  %369 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4655
  %bitpos653 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %369, i32 0, i32 3, !dbg !4655
  %370 = load %union.tree_node*, %union.tree_node** %bitpos653, align 8, !dbg !4655
  %371 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4655
  %decl_common654 = bitcast %union.tree_node* %371 to %struct.tree_decl_common*, !dbg !4655
  %size655 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common654, i32 0, i32 1, !dbg !4655
  %372 = load %union.tree_node*, %union.tree_node** %size655, align 8, !dbg !4655
  %call656 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %370, %union.tree_node* %372), !dbg !4655
  %373 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4657
  %bitpos657 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %373, i32 0, i32 3, !dbg !4658
  store %union.tree_node* %call656, %union.tree_node** %bitpos657, align 8, !dbg !4659
  %374 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4660
  call void @normalize_rli(%struct.record_layout_info_s* %374), !dbg !4661
  br label %if.end658

if.end658:                                        ; preds = %if.else652, %if.end651
  br label %if.end659

if.end659:                                        ; preds = %if.end658, %cond.end610
  br label %if.end660

if.end660:                                        ; preds = %if.then, %if.then13, %if.then20, %if.then27, %if.end659, %if.then573
  ret void, !dbg !4662
}

; Function Attrs: noinline nounwind uwtable
define internal void @place_union_field(%struct.record_layout_info_s* %rli, %union.tree_node* %field) #0 !dbg !4663 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !4664, metadata !DIExpression()), !dbg !4665
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !4666, metadata !DIExpression()), !dbg !4667
  %0 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4668
  %1 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4669
  %call = call i32 @update_alignment_for_field(%struct.record_layout_info_s* %0, %union.tree_node* %1, i32 0), !dbg !4670
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !4671
  %3 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4672
  %field_decl = bitcast %union.tree_node* %3 to %struct.tree_field_decl*, !dbg !4672
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !4672
  store %union.tree_node* %2, %union.tree_node** %offset, align 8, !dbg !4673
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 19), align 8, !dbg !4674
  %5 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4675
  %field_decl1 = bitcast %union.tree_node* %5 to %struct.tree_field_decl*, !dbg !4675
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl1, i32 0, i32 4, !dbg !4675
  store %union.tree_node* %4, %union.tree_node** %bit_offset, align 8, !dbg !4676
  %6 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4677
  %and = and i32 %6, 32, !dbg !4677
  %cmp = icmp ne i32 %and, 0, !dbg !4677
  %7 = zext i1 %cmp to i64, !dbg !4677
  %cond = select i1 %cmp, i32 256, i32 128, !dbg !4677
  %8 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4677
  %and2 = and i32 %8, 32, !dbg !4677
  %cmp3 = icmp ne i32 %and2, 0, !dbg !4677
  %9 = zext i1 %cmp3 to i64, !dbg !4677
  %cond4 = select i1 %cmp3, i32 256, i32 128, !dbg !4677
  %sub = sub nsw i32 0, %cond4, !dbg !4677
  %and5 = and i32 %cond, %sub, !dbg !4677
  %conv = sext i32 %and5 to i64, !dbg !4677
  %call6 = call i32 @exact_log2(i64 %conv), !dbg !4677
  %10 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4677
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !4677
  %off_align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4677
  %11 = bitcast i40* %off_align to i64*, !dbg !4677
  %12 = zext i32 %call6 to i64, !dbg !4677
  %bf.load = load i64, i64* %11, align 8, !dbg !4677
  %bf.value = and i64 %12, 255, !dbg !4677
  %bf.shl = shl i64 %bf.value, 32, !dbg !4677
  %bf.clear = and i64 %bf.load, -1095216660481, !dbg !4677
  %bf.set = or i64 %bf.clear, %bf.shl, !dbg !4677
  store i64 %bf.set, i64* %11, align 8, !dbg !4677
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4677
  %13 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4678
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !4678
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4678
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4678
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4678
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !4678
  %bf.load7 = load i64, i64* %15, align 8, !dbg !4678
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !4678
  %bf.cast = trunc i64 %bf.clear8 to i32, !dbg !4678
  %cmp9 = icmp eq i32 %bf.cast, 0, !dbg !4680
  br i1 %cmp9, label %if.then, label %if.end, !dbg !4681

if.then:                                          ; preds = %entry
  br label %if.end37, !dbg !4682

if.end:                                           ; preds = %entry
  %16 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4683
  %t = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %16, i32 0, i32 0, !dbg !4683
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4683
  %base11 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4683
  %18 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4683
  %bf.load12 = load i64, i64* %18, align 8, !dbg !4683
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4683
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4683
  %cmp15 = icmp eq i32 %bf.cast14, 17, !dbg !4685
  br i1 %cmp15, label %if.then17, label %if.else, !dbg !4686

if.then17:                                        ; preds = %if.end
  %19 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4687
  %offset18 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %19, i32 0, i32 1, !dbg !4687
  %20 = load %union.tree_node*, %union.tree_node** %offset18, align 8, !dbg !4687
  %21 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4687
  %decl_common19 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !4687
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common19, i32 0, i32 4, !dbg !4687
  %22 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4687
  %call20 = call %union.tree_node* @size_binop_loc(i32 0, i32 81, %union.tree_node* %20, %union.tree_node* %22), !dbg !4687
  %23 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4688
  %offset21 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %23, i32 0, i32 1, !dbg !4689
  store %union.tree_node* %call20, %union.tree_node** %offset21, align 8, !dbg !4690
  br label %if.end37, !dbg !4688

if.else:                                          ; preds = %if.end
  %24 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4691
  %t22 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %24, i32 0, i32 0, !dbg !4691
  %25 = load %union.tree_node*, %union.tree_node** %t22, align 8, !dbg !4691
  %base23 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4691
  %26 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4691
  %bf.load24 = load i64, i64* %26, align 8, !dbg !4691
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !4691
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !4691
  %cmp27 = icmp eq i32 %bf.cast26, 18, !dbg !4693
  br i1 %cmp27, label %if.then29, label %if.end36, !dbg !4694

if.then29:                                        ; preds = %if.else
  %27 = load i32, i32* @input_location, align 4, !dbg !4695
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4695
  %29 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4695
  %field_decl30 = bitcast %union.tree_node* %29 to %struct.tree_field_decl*, !dbg !4695
  %qualifier = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl30, i32 0, i32 3, !dbg !4695
  %30 = load %union.tree_node*, %union.tree_node** %qualifier, align 8, !dbg !4695
  %31 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !4695
  %decl_common31 = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !4695
  %size_unit32 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common31, i32 0, i32 4, !dbg !4695
  %32 = load %union.tree_node*, %union.tree_node** %size_unit32, align 8, !dbg !4695
  %33 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4695
  %offset33 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %33, i32 0, i32 1, !dbg !4695
  %34 = load %union.tree_node*, %union.tree_node** %offset33, align 8, !dbg !4695
  %call34 = call %union.tree_node* @fold_build3_stat_loc(i32 %27, i32 56, %union.tree_node* %28, %union.tree_node* %30, %union.tree_node* %32, %union.tree_node* %34), !dbg !4695
  %35 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4696
  %offset35 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %35, i32 0, i32 1, !dbg !4697
  store %union.tree_node* %call34, %union.tree_node** %offset35, align 8, !dbg !4698
  br label %if.end36, !dbg !4696

if.end36:                                         ; preds = %if.then29, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.then, %if.end36, %if.then17
  ret void, !dbg !4699
}

declare dso_local i32 @exact_log2(i64) #2

declare dso_local %union.tree_node* @round_up_loc(i32, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @excess_unit_span(i64 %byte_offset, i64 %bit_offset, i64 %size, i64 %align, %union.tree_node* %type) #0 !dbg !4700 {
entry:
  %byte_offset.addr = alloca i64, align 8
  %bit_offset.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %align.addr = alloca i64, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %offset = alloca i64, align 8
  store i64 %byte_offset, i64* %byte_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %byte_offset.addr, metadata !4703, metadata !DIExpression()), !dbg !4704
  store i64 %bit_offset, i64* %bit_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bit_offset.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !4707, metadata !DIExpression()), !dbg !4708
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !4709, metadata !DIExpression()), !dbg !4710
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4711, metadata !DIExpression()), !dbg !4712
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4713, metadata !DIExpression()), !dbg !4714
  %0 = load i64, i64* %byte_offset.addr, align 8, !dbg !4715
  %mul = mul nsw i64 %0, 8, !dbg !4716
  %1 = load i64, i64* %bit_offset.addr, align 8, !dbg !4717
  %add = add nsw i64 %mul, %1, !dbg !4718
  store i64 %add, i64* %offset, align 8, !dbg !4714
  %2 = load i64, i64* %offset, align 8, !dbg !4719
  %3 = load i64, i64* %align.addr, align 8, !dbg !4720
  %rem = urem i64 %2, %3, !dbg !4721
  store i64 %rem, i64* %offset, align 8, !dbg !4722
  %4 = load i64, i64* %offset, align 8, !dbg !4723
  %5 = load i64, i64* %size.addr, align 8, !dbg !4724
  %add1 = add i64 %4, %5, !dbg !4725
  %6 = load i64, i64* %align.addr, align 8, !dbg !4726
  %add2 = add i64 %add1, %6, !dbg !4727
  %sub = sub i64 %add2, 1, !dbg !4728
  %7 = load i64, i64* %align.addr, align 8, !dbg !4729
  %div = udiv i64 %sub, %7, !dbg !4730
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4731
  %type3 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !4731
  %size4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 2, !dbg !4731
  %9 = load %union.tree_node*, %union.tree_node** %size4, align 8, !dbg !4731
  %call = call i64 @tree_low_cst(%union.tree_node* %9, i32 1), !dbg !4732
  %10 = load i64, i64* %align.addr, align 8, !dbg !4733
  %div5 = udiv i64 %call, %10, !dbg !4734
  %cmp = icmp ugt i64 %div, %div5, !dbg !4735
  %conv = zext i1 %cmp to i32, !dbg !4735
  ret i32 %conv, !dbg !4736
}

declare dso_local void @inform(i32, i8*, ...) #2

declare dso_local i32 @simple_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @compute_record_mode(%union.tree_node* %type) #0 !dbg !4737 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4738, metadata !DIExpression()), !dbg !4739
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4740, metadata !DIExpression()), !dbg !4741
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4742, metadata !DIExpression()), !dbg !4743
  store i32 0, i32* %mode, align 4, !dbg !4743
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4744
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !4744
  %mode2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !4744
  %bf.load = load i32, i32* %mode2, align 4, !dbg !4744
  %bf.clear = and i32 %bf.load, -16711681, !dbg !4744
  %bf.set = or i32 %bf.clear, 65536, !dbg !4744
  store i32 %bf.set, i32* %mode2, align 4, !dbg !4744
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4745
  %type3 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !4745
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 2, !dbg !4745
  %2 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4745
  %call = call i32 @host_integerp(%union.tree_node* %2, i32 1), !dbg !4747
  %tobool = icmp ne i32 %call, 0, !dbg !4747
  br i1 %tobool, label %if.end, label %if.then, !dbg !4748

if.then:                                          ; preds = %entry
  br label %if.end178, !dbg !4749

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4750
  %type4 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !4750
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 1, !dbg !4750
  %4 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4750
  store %union.tree_node* %4, %union.tree_node** %field, align 8, !dbg !4752
  br label %for.cond, !dbg !4753

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4754
  %tobool5 = icmp ne %union.tree_node* %5, null, !dbg !4756
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4756

for.body:                                         ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4757
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4757
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4757
  %bf.load6 = load i64, i64* %7, align 8, !dbg !4757
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !4757
  %bf.cast = trunc i64 %bf.clear7 to i32, !dbg !4757
  %cmp = icmp ne i32 %bf.cast, 31, !dbg !4760
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !4761

if.then8:                                         ; preds = %for.body
  br label %for.inc, !dbg !4762

if.end9:                                          ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4763
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4763
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4763
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !4763
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4763
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4763
  %bf.load12 = load i64, i64* %10, align 8, !dbg !4763
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4763
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4763
  %cmp15 = icmp eq i32 %bf.cast14, 0, !dbg !4765
  br i1 %cmp15, label %if.then65, label %lor.lhs.false, !dbg !4766

lor.lhs.false:                                    ; preds = %if.end9
  %11 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4767
  %common16 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4767
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !4767
  %12 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !4767
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4767
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !4767
  %bf.load19 = load i64, i64* %13, align 8, !dbg !4767
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !4767
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !4767
  %cmp22 = icmp eq i32 %bf.cast21, 14, !dbg !4767
  br i1 %cmp22, label %cond.true, label %cond.false, !dbg !4767

cond.true:                                        ; preds = %lor.lhs.false
  %14 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4767
  %common23 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4767
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !4767
  %15 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !4767
  %call25 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !4767
  br label %cond.end, !dbg !4767

cond.false:                                       ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4767
  %common26 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !4767
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !4767
  %17 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !4767
  %type28 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !4767
  %mode29 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 6, !dbg !4767
  %bf.load30 = load i32, i32* %mode29, align 4, !dbg !4767
  %bf.lshr = lshr i32 %bf.load30, 16, !dbg !4767
  %bf.clear31 = and i32 %bf.lshr, 255, !dbg !4767
  br label %cond.end, !dbg !4767

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call25, %cond.true ], [ %bf.clear31, %cond.false ], !dbg !4767
  %cmp32 = icmp eq i32 %cond, 1, !dbg !4768
  br i1 %cmp32, label %land.lhs.true, label %lor.lhs.false53, !dbg !4769

land.lhs.true:                                    ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4770
  %common33 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !4770
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !4770
  %19 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !4770
  %type35 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !4770
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 6, !dbg !4770
  %bf.load36 = load i32, i32* %no_force_blk_flag, align 4, !dbg !4770
  %bf.lshr37 = lshr i32 %bf.load36, 10, !dbg !4770
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !4770
  %tobool39 = icmp ne i32 %bf.clear38, 0, !dbg !4770
  br i1 %tobool39, label %lor.lhs.false53, label %land.lhs.true40, !dbg !4771

land.lhs.true40:                                  ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4772
  %common41 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4772
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !4772
  %21 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !4772
  %type43 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !4772
  %size44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 2, !dbg !4772
  %22 = load %union.tree_node*, %union.tree_node** %size44, align 8, !dbg !4772
  %cmp45 = icmp ne %union.tree_node* %22, null, !dbg !4773
  br i1 %cmp45, label %land.lhs.true46, label %if.then65, !dbg !4774

land.lhs.true46:                                  ; preds = %land.lhs.true40
  %23 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4775
  %common47 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !4775
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !4775
  %24 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !4775
  %type49 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !4775
  %size50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 2, !dbg !4775
  %25 = load %union.tree_node*, %union.tree_node** %size50, align 8, !dbg !4775
  %call51 = call i32 @integer_zerop(%union.tree_node* %25), !dbg !4776
  %tobool52 = icmp ne i32 %call51, 0, !dbg !4776
  br i1 %tobool52, label %lor.lhs.false53, label %if.then65, !dbg !4777

lor.lhs.false53:                                  ; preds = %land.lhs.true46, %land.lhs.true, %cond.end
  %26 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4778
  %call54 = call %union.tree_node* @bit_position(%union.tree_node* %26), !dbg !4779
  %call55 = call i32 @host_integerp(%union.tree_node* %call54, i32 1), !dbg !4780
  %tobool56 = icmp ne i32 %call55, 0, !dbg !4780
  br i1 %tobool56, label %lor.lhs.false57, label %if.then65, !dbg !4781

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %27 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4782
  %decl_common = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !4782
  %size58 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !4782
  %28 = load %union.tree_node*, %union.tree_node** %size58, align 8, !dbg !4782
  %cmp59 = icmp eq %union.tree_node* %28, null, !dbg !4783
  br i1 %cmp59, label %if.then65, label %lor.lhs.false60, !dbg !4784

lor.lhs.false60:                                  ; preds = %lor.lhs.false57
  %29 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4785
  %decl_common61 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !4785
  %size62 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common61, i32 0, i32 1, !dbg !4785
  %30 = load %union.tree_node*, %union.tree_node** %size62, align 8, !dbg !4785
  %call63 = call i32 @host_integerp(%union.tree_node* %30, i32 1), !dbg !4786
  %tobool64 = icmp ne i32 %call63, 0, !dbg !4786
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !4787

if.then65:                                        ; preds = %lor.lhs.false60, %lor.lhs.false57, %lor.lhs.false53, %land.lhs.true46, %land.lhs.true40, %if.end9
  br label %if.end178, !dbg !4788

if.end66:                                         ; preds = %lor.lhs.false60
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4789
  %type67 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !4789
  %size68 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 2, !dbg !4789
  %32 = load %union.tree_node*, %union.tree_node** %size68, align 8, !dbg !4789
  %33 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4791
  %decl_common69 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !4791
  %size70 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common69, i32 0, i32 1, !dbg !4791
  %34 = load %union.tree_node*, %union.tree_node** %size70, align 8, !dbg !4791
  %call71 = call i32 @simple_cst_equal(%union.tree_node* %32, %union.tree_node* %34), !dbg !4792
  %tobool72 = icmp ne i32 %call71, 0, !dbg !4792
  br i1 %tobool72, label %if.then73, label %if.end79, !dbg !4793

if.then73:                                        ; preds = %if.end66
  %35 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4794
  %decl_common74 = bitcast %union.tree_node* %35 to %struct.tree_decl_common*, !dbg !4794
  %mode75 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common74, i32 0, i32 2, !dbg !4794
  %36 = bitcast i40* %mode75 to i64*, !dbg !4794
  %bf.load76 = load i64, i64* %36, align 8, !dbg !4794
  %bf.clear77 = and i64 %bf.load76, 255, !dbg !4794
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !4794
  store i32 %bf.cast78, i32* %mode, align 4, !dbg !4795
  br label %if.end79, !dbg !4796

if.end79:                                         ; preds = %if.then73, %if.end66
  br label %for.inc, !dbg !4797

for.inc:                                          ; preds = %if.end79, %if.then8
  %37 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4798
  %common80 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !4798
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 1, !dbg !4798
  %38 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4798
  store %union.tree_node* %38, %union.tree_node** %field, align 8, !dbg !4799
  br label %for.cond, !dbg !4800, !llvm.loop !4801

for.end:                                          ; preds = %for.cond
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4803
  %base81 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4803
  %40 = bitcast %struct.tree_base* %base81 to i64*, !dbg !4803
  %bf.load82 = load i64, i64* %40, align 8, !dbg !4803
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !4803
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !4803
  %cmp85 = icmp eq i32 %bf.cast84, 16, !dbg !4805
  br i1 %cmp85, label %land.lhs.true86, label %if.else, !dbg !4806

land.lhs.true86:                                  ; preds = %for.end
  %41 = load i32, i32* %mode, align 4, !dbg !4807
  %cmp87 = icmp ne i32 %41, 0, !dbg !4808
  br i1 %cmp87, label %land.lhs.true88, label %if.else, !dbg !4809

land.lhs.true88:                                  ; preds = %land.lhs.true86
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4810
  %type89 = bitcast %union.tree_node* %42 to %struct.tree_type*, !dbg !4810
  %size90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 2, !dbg !4810
  %43 = load %union.tree_node*, %union.tree_node** %size90, align 8, !dbg !4810
  %call91 = call i32 @host_integerp(%union.tree_node* %43, i32 1), !dbg !4811
  %tobool92 = icmp ne i32 %call91, 0, !dbg !4811
  br i1 %tobool92, label %land.lhs.true93, label %if.else, !dbg !4812

land.lhs.true93:                                  ; preds = %land.lhs.true88
  %44 = load i32, i32* %mode, align 4, !dbg !4813
  %idxprom = zext i32 %44 to i64, !dbg !4813
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4813
  %45 = load i8, i8* %arrayidx, align 1, !dbg !4813
  %conv = zext i8 %45 to i16, !dbg !4813
  %conv94 = zext i16 %conv to i32, !dbg !4813
  %mul = mul nsw i32 %conv94, 8, !dbg !4813
  %conv95 = trunc i32 %mul to i16, !dbg !4813
  %conv96 = zext i16 %conv95 to i64, !dbg !4813
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4814
  %type97 = bitcast %union.tree_node* %46 to %struct.tree_type*, !dbg !4814
  %size98 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type97, i32 0, i32 2, !dbg !4814
  %47 = load %union.tree_node*, %union.tree_node** %size98, align 8, !dbg !4814
  %int_cst = bitcast %union.tree_node* %47 to %struct.tree_int_cst*, !dbg !4814
  %int_cst99 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4814
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst99, i32 0, i32 0, !dbg !4814
  %48 = load i64, i64* %low, align 8, !dbg !4814
  %cmp100 = icmp eq i64 %conv96, %48, !dbg !4815
  br i1 %cmp100, label %if.then102, label %if.else, !dbg !4816

if.then102:                                       ; preds = %land.lhs.true93
  %49 = load i32, i32* %mode, align 4, !dbg !4817
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4817
  %type103 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !4817
  %mode104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 6, !dbg !4817
  %bf.load105 = load i32, i32* %mode104, align 4, !dbg !4817
  %bf.value = and i32 %49, 255, !dbg !4817
  %bf.shl = shl i32 %bf.value, 16, !dbg !4817
  %bf.clear106 = and i32 %bf.load105, -16711681, !dbg !4817
  %bf.set107 = or i32 %bf.clear106, %bf.shl, !dbg !4817
  store i32 %bf.set107, i32* %mode104, align 4, !dbg !4817
  br label %if.end118, !dbg !4817

if.else:                                          ; preds = %land.lhs.true93, %land.lhs.true88, %land.lhs.true86, %for.end
  %51 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4818
  %type108 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !4818
  %size109 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type108, i32 0, i32 2, !dbg !4818
  %52 = load %union.tree_node*, %union.tree_node** %size109, align 8, !dbg !4818
  %call110 = call i32 @mode_for_size_tree(%union.tree_node* %52, i32 2, i32 1), !dbg !4818
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4818
  %type111 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !4818
  %mode112 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type111, i32 0, i32 6, !dbg !4818
  %bf.load113 = load i32, i32* %mode112, align 4, !dbg !4818
  %bf.value114 = and i32 %call110, 255, !dbg !4818
  %bf.shl115 = shl i32 %bf.value114, 16, !dbg !4818
  %bf.clear116 = and i32 %bf.load113, -16711681, !dbg !4818
  %bf.set117 = or i32 %bf.clear116, %bf.shl115, !dbg !4818
  store i32 %bf.set117, i32* %mode112, align 4, !dbg !4818
  br label %if.end118

if.end118:                                        ; preds = %if.else, %if.then102
  %54 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4819
  %base119 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !4819
  %55 = bitcast %struct.tree_base* %base119 to i64*, !dbg !4819
  %bf.load120 = load i64, i64* %55, align 8, !dbg !4819
  %bf.clear121 = and i64 %bf.load120, 65535, !dbg !4819
  %bf.cast122 = trunc i64 %bf.clear121 to i32, !dbg !4819
  %cmp123 = icmp eq i32 %bf.cast122, 14, !dbg !4819
  br i1 %cmp123, label %cond.true125, label %cond.false127, !dbg !4819

cond.true125:                                     ; preds = %if.end118
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4819
  %call126 = call i32 @vector_type_mode(%union.tree_node* %56), !dbg !4819
  br label %cond.end133, !dbg !4819

cond.false127:                                    ; preds = %if.end118
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4819
  %type128 = bitcast %union.tree_node* %57 to %struct.tree_type*, !dbg !4819
  %mode129 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type128, i32 0, i32 6, !dbg !4819
  %bf.load130 = load i32, i32* %mode129, align 4, !dbg !4819
  %bf.lshr131 = lshr i32 %bf.load130, 16, !dbg !4819
  %bf.clear132 = and i32 %bf.lshr131, 255, !dbg !4819
  br label %cond.end133, !dbg !4819

cond.end133:                                      ; preds = %cond.false127, %cond.true125
  %cond134 = phi i32 [ %call126, %cond.true125 ], [ %bf.clear132, %cond.false127 ], !dbg !4819
  %cmp135 = icmp ne i32 %cond134, 1, !dbg !4821
  br i1 %cmp135, label %land.lhs.true137, label %if.end178, !dbg !4822

land.lhs.true137:                                 ; preds = %cond.end133
  br i1 false, label %land.lhs.true138, label %if.end178, !dbg !4823

land.lhs.true138:                                 ; preds = %land.lhs.true137
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4824
  %type139 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !4824
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type139, i32 0, i32 7, !dbg !4824
  %59 = load i32, i32* %align, align 8, !dbg !4824
  %60 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4825
  %and = and i32 %60, 32, !dbg !4825
  %cmp140 = icmp ne i32 %and, 0, !dbg !4825
  %61 = zext i1 %cmp140 to i64, !dbg !4825
  %cond142 = select i1 %cmp140, i32 256, i32 128, !dbg !4825
  %cmp143 = icmp uge i32 %59, %cond142, !dbg !4826
  br i1 %cmp143, label %if.end178, label %lor.lhs.false145, !dbg !4827

lor.lhs.false145:                                 ; preds = %land.lhs.true138
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4828
  %type146 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !4828
  %align147 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type146, i32 0, i32 7, !dbg !4828
  %63 = load i32, i32* %align147, align 8, !dbg !4828
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4829
  %base148 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4829
  %65 = bitcast %struct.tree_base* %base148 to i64*, !dbg !4829
  %bf.load149 = load i64, i64* %65, align 8, !dbg !4829
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !4829
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !4829
  %cmp152 = icmp eq i32 %bf.cast151, 14, !dbg !4829
  br i1 %cmp152, label %cond.true154, label %cond.false156, !dbg !4829

cond.true154:                                     ; preds = %lor.lhs.false145
  %66 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4829
  %call155 = call i32 @vector_type_mode(%union.tree_node* %66), !dbg !4829
  br label %cond.end162, !dbg !4829

cond.false156:                                    ; preds = %lor.lhs.false145
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4829
  %type157 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !4829
  %mode158 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type157, i32 0, i32 6, !dbg !4829
  %bf.load159 = load i32, i32* %mode158, align 4, !dbg !4829
  %bf.lshr160 = lshr i32 %bf.load159, 16, !dbg !4829
  %bf.clear161 = and i32 %bf.lshr160, 255, !dbg !4829
  br label %cond.end162, !dbg !4829

cond.end162:                                      ; preds = %cond.false156, %cond.true154
  %cond163 = phi i32 [ %call155, %cond.true154 ], [ %bf.clear161, %cond.false156 ], !dbg !4829
  %call164 = call i32 @get_mode_alignment(i32 %cond163), !dbg !4829
  %cmp165 = icmp uge i32 %63, %call164, !dbg !4830
  br i1 %cmp165, label %if.end178, label %if.then167, !dbg !4831

if.then167:                                       ; preds = %cond.end162
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4832
  %type168 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !4832
  %no_force_blk_flag169 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type168, i32 0, i32 6, !dbg !4832
  %bf.load170 = load i32, i32* %no_force_blk_flag169, align 4, !dbg !4834
  %bf.clear171 = and i32 %bf.load170, -1025, !dbg !4834
  %bf.set172 = or i32 %bf.clear171, 1024, !dbg !4834
  store i32 %bf.set172, i32* %no_force_blk_flag169, align 4, !dbg !4834
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4835
  %type173 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !4835
  %mode174 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type173, i32 0, i32 6, !dbg !4835
  %bf.load175 = load i32, i32* %mode174, align 4, !dbg !4835
  %bf.clear176 = and i32 %bf.load175, -16711681, !dbg !4835
  %bf.set177 = or i32 %bf.clear176, 65536, !dbg !4835
  store i32 %bf.set177, i32* %mode174, align 4, !dbg !4835
  br label %if.end178, !dbg !4836

if.end178:                                        ; preds = %if.then, %if.then65, %if.then167, %cond.end162, %land.lhs.true138, %land.lhs.true137, %cond.end133
  ret void, !dbg !4837
}

declare dso_local %union.tree_node* @bit_position(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @finish_record_layout(%struct.record_layout_info_s* %rli, i32 %free_p) #0 !dbg !4838 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  %free_p.addr = alloca i32, align 4
  %variant = alloca %union.tree_node*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !4841, metadata !DIExpression()), !dbg !4842
  store i32 %free_p, i32* %free_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %free_p.addr, metadata !4843, metadata !DIExpression()), !dbg !4844
  call void @llvm.dbg.declare(metadata %union.tree_node** %variant, metadata !4845, metadata !DIExpression()), !dbg !4846
  %0 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4847
  call void @finalize_record_size(%struct.record_layout_info_s* %0), !dbg !4848
  %1 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4849
  %t = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %1, i32 0, i32 0, !dbg !4850
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4850
  call void @compute_record_mode(%union.tree_node* %2), !dbg !4851
  %3 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4852
  %t1 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %3, i32 0, i32 0, !dbg !4853
  %4 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !4853
  call void @finalize_type_size(%union.tree_node* %4), !dbg !4854
  %5 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4855
  %t2 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %5, i32 0, i32 0, !dbg !4855
  %6 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !4855
  %type = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !4855
  %next_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 15, !dbg !4855
  %7 = load %union.tree_node*, %union.tree_node** %next_variant, align 8, !dbg !4855
  store %union.tree_node* %7, %union.tree_node** %variant, align 8, !dbg !4857
  br label %for.cond, !dbg !4858

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !4859
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !4861
  br i1 %tobool, label %for.body, label %for.end, !dbg !4861

for.body:                                         ; preds = %for.cond
  %9 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4862
  %t3 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %9, i32 0, i32 0, !dbg !4862
  %10 = load %union.tree_node*, %union.tree_node** %t3, align 8, !dbg !4862
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !4862
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !4862
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !4862
  %bf.load = load i64, i64* %11, align 8, !dbg !4862
  %bf.lshr = lshr i64 %bf.load, 41, !dbg !4862
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4862
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4862
  %12 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !4863
  %common4 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !4863
  %base5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 0, !dbg !4863
  %13 = bitcast %struct.tree_base* %base5 to i64*, !dbg !4863
  %14 = zext i32 %bf.cast to i64, !dbg !4864
  %bf.load6 = load i64, i64* %13, align 8, !dbg !4864
  %bf.value = and i64 %14, 1, !dbg !4864
  %bf.shl = shl i64 %bf.value, 41, !dbg !4864
  %bf.clear7 = and i64 %bf.load6, -2199023255553, !dbg !4864
  %bf.set = or i64 %bf.clear7, %bf.shl, !dbg !4864
  store i64 %bf.set, i64* %13, align 8, !dbg !4864
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4864
  br label %for.inc, !dbg !4863

for.inc:                                          ; preds = %for.body
  %15 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !4865
  %type8 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !4865
  %next_variant9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 15, !dbg !4865
  %16 = load %union.tree_node*, %union.tree_node** %next_variant9, align 8, !dbg !4865
  store %union.tree_node* %16, %union.tree_node** %variant, align 8, !dbg !4866
  br label %for.cond, !dbg !4867, !llvm.loop !4868

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !4870

while.cond:                                       ; preds = %while.body, %for.end
  %17 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4871
  %pending_statics = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %17, i32 0, i32 7, !dbg !4872
  %18 = load %union.tree_node*, %union.tree_node** %pending_statics, align 8, !dbg !4872
  %tobool10 = icmp ne %union.tree_node* %18, null, !dbg !4870
  br i1 %tobool10, label %while.body, label %while.end, !dbg !4870

while.body:                                       ; preds = %while.cond
  %19 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4873
  %pending_statics11 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %19, i32 0, i32 7, !dbg !4873
  %20 = load %union.tree_node*, %union.tree_node** %pending_statics11, align 8, !dbg !4873
  %list = bitcast %union.tree_node* %20 to %struct.tree_list*, !dbg !4873
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4873
  %21 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4873
  call void @layout_decl(%union.tree_node* %21, i32 0), !dbg !4875
  %22 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4876
  %pending_statics12 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %22, i32 0, i32 7, !dbg !4876
  %23 = load %union.tree_node*, %union.tree_node** %pending_statics12, align 8, !dbg !4876
  %common13 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !4876
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 1, !dbg !4876
  %24 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4876
  %25 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4877
  %pending_statics14 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %25, i32 0, i32 7, !dbg !4878
  store %union.tree_node* %24, %union.tree_node** %pending_statics14, align 8, !dbg !4879
  br label %while.cond, !dbg !4870, !llvm.loop !4880

while.end:                                        ; preds = %while.cond
  %26 = load i32, i32* %free_p.addr, align 4, !dbg !4882
  %tobool15 = icmp ne i32 %26, 0, !dbg !4882
  br i1 %tobool15, label %if.then, label %if.end, !dbg !4884

if.then:                                          ; preds = %while.end
  %27 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4885
  %28 = bitcast %struct.record_layout_info_s* %27 to i8*, !dbg !4885
  call void @free(i8* %28), !dbg !4886
  br label %if.end, !dbg !4886

if.end:                                           ; preds = %if.then, %while.end
  ret void, !dbg !4887
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_record_size(%struct.record_layout_info_s* %rli) #0 !dbg !4888 {
entry:
  %rli.addr = alloca %struct.record_layout_info_s*, align 8
  %unpadded_size = alloca %union.tree_node*, align 8
  %unpadded_size_unit = alloca %union.tree_node*, align 8
  %unpacked_size = alloca %union.tree_node*, align 8
  %name93 = alloca %union.tree_node*, align 8
  store %struct.record_layout_info_s* %rli, %struct.record_layout_info_s** %rli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli.addr, metadata !4889, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.declare(metadata %union.tree_node** %unpadded_size, metadata !4891, metadata !DIExpression()), !dbg !4892
  call void @llvm.dbg.declare(metadata %union.tree_node** %unpadded_size_unit, metadata !4893, metadata !DIExpression()), !dbg !4894
  %0 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4895
  %offset_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %0, i32 0, i32 2, !dbg !4896
  store i32 8, i32* %offset_align, align 8, !dbg !4897
  %1 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4898
  call void @normalize_rli(%struct.record_layout_info_s* %1), !dbg !4899
  %2 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4900
  %t = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %2, i32 0, i32 0, !dbg !4900
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4900
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !4900
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 7, !dbg !4900
  %4 = load i32, i32* %align, align 8, !dbg !4900
  %5 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4900
  %record_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %5, i32 0, i32 4, !dbg !4900
  %6 = load i32, i32* %record_align, align 8, !dbg !4900
  %cmp = icmp ugt i32 %4, %6, !dbg !4900
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4900

cond.true:                                        ; preds = %entry
  %7 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4900
  %t1 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %7, i32 0, i32 0, !dbg !4900
  %8 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !4900
  %type2 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !4900
  %align3 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 7, !dbg !4900
  %9 = load i32, i32* %align3, align 8, !dbg !4900
  br label %cond.end, !dbg !4900

cond.false:                                       ; preds = %entry
  %10 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4900
  %record_align4 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %10, i32 0, i32 4, !dbg !4900
  %11 = load i32, i32* %record_align4, align 8, !dbg !4900
  br label %cond.end, !dbg !4900

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %9, %cond.true ], [ %11, %cond.false ], !dbg !4900
  %12 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4901
  %t5 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %12, i32 0, i32 0, !dbg !4901
  %13 = load %union.tree_node*, %union.tree_node** %t5, align 8, !dbg !4901
  %type6 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !4901
  %align7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 7, !dbg !4901
  store i32 %cond, i32* %align7, align 8, !dbg !4902
  %14 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4903
  %call = call %union.tree_node* @rli_size_so_far(%struct.record_layout_info_s* %14), !dbg !4904
  store %union.tree_node* %call, %union.tree_node** %unpadded_size, align 8, !dbg !4905
  %15 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4906
  %call8 = call %union.tree_node* @rli_size_unit_so_far(%struct.record_layout_info_s* %15), !dbg !4907
  store %union.tree_node* %call8, %union.tree_node** %unpadded_size_unit, align 8, !dbg !4908
  %16 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4909
  %bitpos = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %16, i32 0, i32 3, !dbg !4911
  %17 = load %union.tree_node*, %union.tree_node** %bitpos, align 8, !dbg !4911
  %call9 = call i32 @integer_zerop(%union.tree_node* %17), !dbg !4912
  %tobool = icmp ne i32 %call9, 0, !dbg !4912
  br i1 %tobool, label %if.end, label %if.then, !dbg !4913

if.then:                                          ; preds = %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %unpadded_size_unit, align 8, !dbg !4914
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 16, !dbg !4914
  %call10 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %18, %union.tree_node* %19), !dbg !4914
  store %union.tree_node* %call10, %union.tree_node** %unpadded_size_unit, align 8, !dbg !4915
  br label %if.end, !dbg !4916

if.end:                                           ; preds = %if.then, %cond.end
  %20 = load i32, i32* @input_location, align 4, !dbg !4917
  %21 = load %union.tree_node*, %union.tree_node** %unpadded_size, align 8, !dbg !4918
  %22 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4919
  %t11 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %22, i32 0, i32 0, !dbg !4919
  %23 = load %union.tree_node*, %union.tree_node** %t11, align 8, !dbg !4919
  %type12 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !4919
  %align13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 7, !dbg !4919
  %24 = load i32, i32* %align13, align 8, !dbg !4919
  %call14 = call %union.tree_node* @round_up_loc(i32 %20, %union.tree_node* %21, i32 %24), !dbg !4920
  %25 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4921
  %t15 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %25, i32 0, i32 0, !dbg !4921
  %26 = load %union.tree_node*, %union.tree_node** %t15, align 8, !dbg !4921
  %type16 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !4921
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 2, !dbg !4921
  store %union.tree_node* %call14, %union.tree_node** %size, align 8, !dbg !4922
  %27 = load i32, i32* @input_location, align 4, !dbg !4923
  %28 = load %union.tree_node*, %union.tree_node** %unpadded_size_unit, align 8, !dbg !4924
  %29 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4925
  %t17 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %29, i32 0, i32 0, !dbg !4925
  %30 = load %union.tree_node*, %union.tree_node** %t17, align 8, !dbg !4925
  %type18 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !4925
  %align19 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 7, !dbg !4925
  %31 = load i32, i32* %align19, align 8, !dbg !4925
  %div = udiv i32 %31, 8, !dbg !4925
  %call20 = call %union.tree_node* @round_up_loc(i32 %27, %union.tree_node* %28, i32 %div), !dbg !4926
  %32 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4927
  %t21 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %32, i32 0, i32 0, !dbg !4927
  %33 = load %union.tree_node*, %union.tree_node** %t21, align 8, !dbg !4927
  %type22 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !4927
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 3, !dbg !4927
  store %union.tree_node* %call20, %union.tree_node** %size_unit, align 8, !dbg !4928
  %34 = load %union.tree_node*, %union.tree_node** %unpadded_size, align 8, !dbg !4929
  %base = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4929
  %35 = bitcast %struct.tree_base* %base to i64*, !dbg !4929
  %bf.load = load i64, i64* %35, align 8, !dbg !4929
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !4929
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4929
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4929
  %tobool23 = icmp ne i32 %bf.cast, 0, !dbg !4929
  br i1 %tobool23, label %land.lhs.true, label %if.end33, !dbg !4931

land.lhs.true:                                    ; preds = %if.end
  %36 = load %union.tree_node*, %union.tree_node** %unpadded_size, align 8, !dbg !4932
  %37 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4933
  %t24 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %37, i32 0, i32 0, !dbg !4933
  %38 = load %union.tree_node*, %union.tree_node** %t24, align 8, !dbg !4933
  %type25 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !4933
  %size26 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 2, !dbg !4933
  %39 = load %union.tree_node*, %union.tree_node** %size26, align 8, !dbg !4933
  %call27 = call i32 @simple_cst_equal(%union.tree_node* %36, %union.tree_node* %39), !dbg !4934
  %cmp28 = icmp eq i32 %call27, 0, !dbg !4935
  br i1 %cmp28, label %land.lhs.true29, label %if.end33, !dbg !4936

land.lhs.true29:                                  ; preds = %land.lhs.true
  %40 = load i32, i32* @input_location, align 4, !dbg !4937
  %cmp30 = icmp ne i32 %40, 1, !dbg !4938
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !4939

if.then31:                                        ; preds = %land.lhs.true29
  %call32 = call zeroext i8 (i32, i8*, ...) @warning(i32 157, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i64 0, i64 0)), !dbg !4940
  br label %if.end33, !dbg !4940

if.end33:                                         ; preds = %if.then31, %land.lhs.true29, %land.lhs.true, %if.end
  %41 = load i32, i32* @warn_packed, align 4, !dbg !4941
  %tobool34 = icmp ne i32 %41, 0, !dbg !4941
  br i1 %tobool34, label %land.lhs.true35, label %if.end116, !dbg !4943

land.lhs.true35:                                  ; preds = %if.end33
  %42 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4944
  %t36 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %42, i32 0, i32 0, !dbg !4944
  %43 = load %union.tree_node*, %union.tree_node** %t36, align 8, !dbg !4944
  %base37 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4944
  %44 = bitcast %struct.tree_base* %base37 to i64*, !dbg !4944
  %bf.load38 = load i64, i64* %44, align 8, !dbg !4944
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !4944
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !4944
  %cmp41 = icmp eq i32 %bf.cast40, 16, !dbg !4945
  br i1 %cmp41, label %land.lhs.true42, label %if.end116, !dbg !4946

land.lhs.true42:                                  ; preds = %land.lhs.true35
  %45 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4947
  %t43 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %45, i32 0, i32 0, !dbg !4947
  %46 = load %union.tree_node*, %union.tree_node** %t43, align 8, !dbg !4947
  %common = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !4947
  %base44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !4947
  %47 = bitcast %struct.tree_base* %base44 to i64*, !dbg !4947
  %bf.load45 = load i64, i64* %47, align 8, !dbg !4947
  %bf.lshr46 = lshr i64 %bf.load45, 41, !dbg !4947
  %bf.clear47 = and i64 %bf.lshr46, 1, !dbg !4947
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !4947
  %tobool49 = icmp ne i32 %bf.cast48, 0, !dbg !4947
  br i1 %tobool49, label %land.lhs.true50, label %if.end116, !dbg !4948

land.lhs.true50:                                  ; preds = %land.lhs.true42
  %48 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4949
  %packed_maybe_necessary = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %48, i32 0, i32 9, !dbg !4950
  %49 = load i32, i32* %packed_maybe_necessary, align 4, !dbg !4950
  %tobool51 = icmp ne i32 %49, 0, !dbg !4949
  br i1 %tobool51, label %if.end116, label %land.lhs.true52, !dbg !4951

land.lhs.true52:                                  ; preds = %land.lhs.true50
  %50 = load %union.tree_node*, %union.tree_node** %unpadded_size, align 8, !dbg !4952
  %base53 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !4952
  %51 = bitcast %struct.tree_base* %base53 to i64*, !dbg !4952
  %bf.load54 = load i64, i64* %51, align 8, !dbg !4952
  %bf.lshr55 = lshr i64 %bf.load54, 17, !dbg !4952
  %bf.clear56 = and i64 %bf.lshr55, 1, !dbg !4952
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !4952
  %tobool58 = icmp ne i32 %bf.cast57, 0, !dbg !4952
  br i1 %tobool58, label %if.then59, label %if.end116, !dbg !4953

if.then59:                                        ; preds = %land.lhs.true52
  call void @llvm.dbg.declare(metadata %union.tree_node** %unpacked_size, metadata !4954, metadata !DIExpression()), !dbg !4956
  %52 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4957
  %t60 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %52, i32 0, i32 0, !dbg !4957
  %53 = load %union.tree_node*, %union.tree_node** %t60, align 8, !dbg !4957
  %type61 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !4957
  %align62 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type61, i32 0, i32 7, !dbg !4957
  %54 = load i32, i32* %align62, align 8, !dbg !4957
  %55 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4957
  %unpacked_align = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %55, i32 0, i32 5, !dbg !4957
  %56 = load i32, i32* %unpacked_align, align 4, !dbg !4957
  %cmp63 = icmp ugt i32 %54, %56, !dbg !4957
  br i1 %cmp63, label %cond.true64, label %cond.false68, !dbg !4957

cond.true64:                                      ; preds = %if.then59
  %57 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4957
  %t65 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %57, i32 0, i32 0, !dbg !4957
  %58 = load %union.tree_node*, %union.tree_node** %t65, align 8, !dbg !4957
  %type66 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !4957
  %align67 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type66, i32 0, i32 7, !dbg !4957
  %59 = load i32, i32* %align67, align 8, !dbg !4957
  br label %cond.end70, !dbg !4957

cond.false68:                                     ; preds = %if.then59
  %60 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4957
  %unpacked_align69 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %60, i32 0, i32 5, !dbg !4957
  %61 = load i32, i32* %unpacked_align69, align 4, !dbg !4957
  br label %cond.end70, !dbg !4957

cond.end70:                                       ; preds = %cond.false68, %cond.true64
  %cond71 = phi i32 [ %59, %cond.true64 ], [ %61, %cond.false68 ], !dbg !4957
  %62 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4958
  %unpacked_align72 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %62, i32 0, i32 5, !dbg !4959
  store i32 %cond71, i32* %unpacked_align72, align 4, !dbg !4960
  %63 = load i32, i32* @input_location, align 4, !dbg !4961
  %64 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4962
  %t73 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %64, i32 0, i32 0, !dbg !4962
  %65 = load %union.tree_node*, %union.tree_node** %t73, align 8, !dbg !4962
  %type74 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !4962
  %size75 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type74, i32 0, i32 2, !dbg !4962
  %66 = load %union.tree_node*, %union.tree_node** %size75, align 8, !dbg !4962
  %67 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4963
  %unpacked_align76 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %67, i32 0, i32 5, !dbg !4964
  %68 = load i32, i32* %unpacked_align76, align 4, !dbg !4964
  %call77 = call %union.tree_node* @round_up_loc(i32 %63, %union.tree_node* %66, i32 %68), !dbg !4965
  store %union.tree_node* %call77, %union.tree_node** %unpacked_size, align 8, !dbg !4966
  %69 = load %union.tree_node*, %union.tree_node** %unpacked_size, align 8, !dbg !4967
  %70 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4969
  %t78 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %70, i32 0, i32 0, !dbg !4969
  %71 = load %union.tree_node*, %union.tree_node** %t78, align 8, !dbg !4969
  %type79 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !4969
  %size80 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type79, i32 0, i32 2, !dbg !4969
  %72 = load %union.tree_node*, %union.tree_node** %size80, align 8, !dbg !4969
  %call81 = call i32 @simple_cst_equal(%union.tree_node* %69, %union.tree_node* %72), !dbg !4970
  %tobool82 = icmp ne i32 %call81, 0, !dbg !4970
  br i1 %tobool82, label %if.then83, label %if.end115, !dbg !4971

if.then83:                                        ; preds = %cond.end70
  %73 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4972
  %t84 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %73, i32 0, i32 0, !dbg !4972
  %74 = load %union.tree_node*, %union.tree_node** %t84, align 8, !dbg !4972
  %common85 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !4972
  %base86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 0, !dbg !4972
  %75 = bitcast %struct.tree_base* %base86 to i64*, !dbg !4972
  %bf.load87 = load i64, i64* %75, align 8, !dbg !4974
  %bf.clear88 = and i64 %bf.load87, -2199023255553, !dbg !4974
  store i64 %bf.clear88, i64* %75, align 8, !dbg !4974
  %76 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4975
  %t89 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %76, i32 0, i32 0, !dbg !4975
  %77 = load %union.tree_node*, %union.tree_node** %t89, align 8, !dbg !4975
  %type90 = bitcast %union.tree_node* %77 to %struct.tree_type*, !dbg !4975
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type90, i32 0, i32 12, !dbg !4975
  %78 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4975
  %tobool91 = icmp ne %union.tree_node* %78, null, !dbg !4975
  br i1 %tobool91, label %if.then92, label %if.else112, !dbg !4977

if.then92:                                        ; preds = %if.then83
  call void @llvm.dbg.declare(metadata %union.tree_node** %name93, metadata !4978, metadata !DIExpression()), !dbg !4980
  %79 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4981
  %t94 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %79, i32 0, i32 0, !dbg !4981
  %80 = load %union.tree_node*, %union.tree_node** %t94, align 8, !dbg !4981
  %type95 = bitcast %union.tree_node* %80 to %struct.tree_type*, !dbg !4981
  %name96 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 12, !dbg !4981
  %81 = load %union.tree_node*, %union.tree_node** %name96, align 8, !dbg !4981
  %base97 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !4981
  %82 = bitcast %struct.tree_base* %base97 to i64*, !dbg !4981
  %bf.load98 = load i64, i64* %82, align 8, !dbg !4981
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !4981
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !4981
  %cmp101 = icmp eq i32 %bf.cast100, 1, !dbg !4983
  br i1 %cmp101, label %if.then102, label %if.else, !dbg !4984

if.then102:                                       ; preds = %if.then92
  %83 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4985
  %t103 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %83, i32 0, i32 0, !dbg !4985
  %84 = load %union.tree_node*, %union.tree_node** %t103, align 8, !dbg !4985
  %type104 = bitcast %union.tree_node* %84 to %struct.tree_type*, !dbg !4985
  %name105 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type104, i32 0, i32 12, !dbg !4985
  %85 = load %union.tree_node*, %union.tree_node** %name105, align 8, !dbg !4985
  store %union.tree_node* %85, %union.tree_node** %name93, align 8, !dbg !4986
  br label %if.end110, !dbg !4987

if.else:                                          ; preds = %if.then92
  %86 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli.addr, align 8, !dbg !4988
  %t106 = getelementptr inbounds %struct.record_layout_info_s, %struct.record_layout_info_s* %86, i32 0, i32 0, !dbg !4988
  %87 = load %union.tree_node*, %union.tree_node** %t106, align 8, !dbg !4988
  %type107 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !4988
  %name108 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type107, i32 0, i32 12, !dbg !4988
  %88 = load %union.tree_node*, %union.tree_node** %name108, align 8, !dbg !4988
  %decl_minimal = bitcast %union.tree_node* %88 to %struct.tree_decl_minimal*, !dbg !4988
  %name109 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !4988
  %89 = load %union.tree_node*, %union.tree_node** %name109, align 8, !dbg !4988
  store %union.tree_node* %89, %union.tree_node** %name93, align 8, !dbg !4989
  br label %if.end110

if.end110:                                        ; preds = %if.else, %if.then102
  %90 = load %union.tree_node*, %union.tree_node** %name93, align 8, !dbg !4990
  %call111 = call zeroext i8 (i32, i8*, ...) @warning(i32 155, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.21, i64 0, i64 0), %union.tree_node* %90), !dbg !4992
  br label %if.end114, !dbg !4993

if.else112:                                       ; preds = %if.then83
  %call113 = call zeroext i8 (i32, i8*, ...) @warning(i32 155, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22, i64 0, i64 0)), !dbg !4994
  br label %if.end114

if.end114:                                        ; preds = %if.else112, %if.end110
  br label %if.end115, !dbg !4997

if.end115:                                        ; preds = %if.end114, %cond.end70
  br label %if.end116, !dbg !4998

if.end116:                                        ; preds = %if.end115, %land.lhs.true52, %land.lhs.true50, %land.lhs.true42, %land.lhs.true35, %if.end33
  ret void, !dbg !4999
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_type_size(%union.tree_node* %type) #0 !dbg !5000 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %mode_align = alloca i32, align 4
  %variant = alloca %union.tree_node*, align 8
  %size142 = alloca %union.tree_node*, align 8
  %size_unit145 = alloca %union.tree_node*, align 8
  %align148 = alloca i32, align 4
  %user_align = alloca i32, align 4
  %mode157 = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5001, metadata !DIExpression()), !dbg !5002
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5003
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5003
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5003
  %bf.load = load i64, i64* %1, align 8, !dbg !5003
  %bf.clear = and i64 %bf.load, 65535, !dbg !5003
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5003
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !5003
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5003

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5003
  %call = call i32 @vector_type_mode(%union.tree_node* %2), !dbg !5003
  br label %cond.end, !dbg !5003

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5003
  %type1 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5003
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5003
  %bf.load2 = load i32, i32* %mode, align 4, !dbg !5003
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !5003
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !5003
  br label %cond.end, !dbg !5003

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear3, %cond.false ], !dbg !5003
  %cmp4 = icmp ne i32 %cond, 1, !dbg !5005
  br i1 %cmp4, label %land.lhs.true, label %if.end69, !dbg !5006

land.lhs.true:                                    ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5007
  %base5 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5007
  %5 = bitcast %struct.tree_base* %base5 to i64*, !dbg !5007
  %bf.load6 = load i64, i64* %5, align 8, !dbg !5007
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !5007
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !5007
  %cmp9 = icmp eq i32 %bf.cast8, 14, !dbg !5007
  br i1 %cmp9, label %cond.true10, label %cond.false12, !dbg !5007

cond.true10:                                      ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5007
  %call11 = call i32 @vector_type_mode(%union.tree_node* %6), !dbg !5007
  br label %cond.end18, !dbg !5007

cond.false12:                                     ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5007
  %type13 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !5007
  %mode14 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 6, !dbg !5007
  %bf.load15 = load i32, i32* %mode14, align 4, !dbg !5007
  %bf.lshr16 = lshr i32 %bf.load15, 16, !dbg !5007
  %bf.clear17 = and i32 %bf.lshr16, 255, !dbg !5007
  br label %cond.end18, !dbg !5007

cond.end18:                                       ; preds = %cond.false12, %cond.true10
  %cond19 = phi i32 [ %call11, %cond.true10 ], [ %bf.clear17, %cond.false12 ], !dbg !5007
  %cmp20 = icmp ne i32 %cond19, 0, !dbg !5008
  br i1 %cmp20, label %land.lhs.true21, label %if.end69, !dbg !5009

land.lhs.true21:                                  ; preds = %cond.end18
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5010
  %base22 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5010
  %9 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5010
  %bf.load23 = load i64, i64* %9, align 8, !dbg !5010
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !5010
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5010
  %cmp26 = icmp ne i32 %bf.cast25, 16, !dbg !5011
  br i1 %cmp26, label %land.lhs.true27, label %if.end69, !dbg !5012

land.lhs.true27:                                  ; preds = %land.lhs.true21
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5013
  %base28 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5013
  %11 = bitcast %struct.tree_base* %base28 to i64*, !dbg !5013
  %bf.load29 = load i64, i64* %11, align 8, !dbg !5013
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !5013
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !5013
  %cmp32 = icmp ne i32 %bf.cast31, 17, !dbg !5014
  br i1 %cmp32, label %land.lhs.true33, label %if.end69, !dbg !5015

land.lhs.true33:                                  ; preds = %land.lhs.true27
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5016
  %base34 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5016
  %13 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5016
  %bf.load35 = load i64, i64* %13, align 8, !dbg !5016
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !5016
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !5016
  %cmp38 = icmp ne i32 %bf.cast37, 18, !dbg !5017
  br i1 %cmp38, label %land.lhs.true39, label %if.end69, !dbg !5018

land.lhs.true39:                                  ; preds = %land.lhs.true33
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5019
  %base40 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5019
  %15 = bitcast %struct.tree_base* %base40 to i64*, !dbg !5019
  %bf.load41 = load i64, i64* %15, align 8, !dbg !5019
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !5019
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !5019
  %cmp44 = icmp ne i32 %bf.cast43, 15, !dbg !5020
  br i1 %cmp44, label %if.then, label %if.end69, !dbg !5021

if.then:                                          ; preds = %land.lhs.true39
  call void @llvm.dbg.declare(metadata i32* %mode_align, metadata !5022, metadata !DIExpression()), !dbg !5024
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5025
  %base45 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5025
  %17 = bitcast %struct.tree_base* %base45 to i64*, !dbg !5025
  %bf.load46 = load i64, i64* %17, align 8, !dbg !5025
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !5025
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !5025
  %cmp49 = icmp eq i32 %bf.cast48, 14, !dbg !5025
  br i1 %cmp49, label %cond.true50, label %cond.false52, !dbg !5025

cond.true50:                                      ; preds = %if.then
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5025
  %call51 = call i32 @vector_type_mode(%union.tree_node* %18), !dbg !5025
  br label %cond.end58, !dbg !5025

cond.false52:                                     ; preds = %if.then
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5025
  %type53 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !5025
  %mode54 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type53, i32 0, i32 6, !dbg !5025
  %bf.load55 = load i32, i32* %mode54, align 4, !dbg !5025
  %bf.lshr56 = lshr i32 %bf.load55, 16, !dbg !5025
  %bf.clear57 = and i32 %bf.lshr56, 255, !dbg !5025
  br label %cond.end58, !dbg !5025

cond.end58:                                       ; preds = %cond.false52, %cond.true50
  %cond59 = phi i32 [ %call51, %cond.true50 ], [ %bf.clear57, %cond.false52 ], !dbg !5025
  %call60 = call i32 @get_mode_alignment(i32 %cond59), !dbg !5025
  store i32 %call60, i32* %mode_align, align 4, !dbg !5024
  %20 = load i32, i32* %mode_align, align 4, !dbg !5026
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5028
  %type61 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !5028
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type61, i32 0, i32 7, !dbg !5028
  %22 = load i32, i32* %align, align 8, !dbg !5028
  %cmp62 = icmp uge i32 %20, %22, !dbg !5029
  br i1 %cmp62, label %if.then63, label %if.end, !dbg !5030

if.then63:                                        ; preds = %cond.end58
  %23 = load i32, i32* %mode_align, align 4, !dbg !5031
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5033
  %type64 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !5033
  %align65 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type64, i32 0, i32 7, !dbg !5033
  store i32 %23, i32* %align65, align 8, !dbg !5034
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5035
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !5035
  %base66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !5035
  %26 = bitcast %struct.tree_base* %base66 to i64*, !dbg !5035
  %bf.load67 = load i64, i64* %26, align 8, !dbg !5036
  %bf.clear68 = and i64 %bf.load67, -4398046511105, !dbg !5036
  store i64 %bf.clear68, i64* %26, align 8, !dbg !5036
  br label %if.end, !dbg !5037

if.end:                                           ; preds = %if.then63, %cond.end58
  br label %if.end69, !dbg !5038

if.end69:                                         ; preds = %if.end, %land.lhs.true39, %land.lhs.true33, %land.lhs.true27, %land.lhs.true21, %cond.end18, %cond.end
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5039
  %type70 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !5039
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type70, i32 0, i32 3, !dbg !5039
  %28 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5039
  %cmp71 = icmp eq %union.tree_node* %28, null, !dbg !5041
  br i1 %cmp71, label %land.lhs.true72, label %if.end82, !dbg !5042

land.lhs.true72:                                  ; preds = %if.end69
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5043
  %type73 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !5043
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type73, i32 0, i32 2, !dbg !5043
  %30 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5043
  %cmp74 = icmp ne %union.tree_node* %30, null, !dbg !5044
  br i1 %cmp74, label %if.then75, label %if.end82, !dbg !5045

if.then75:                                        ; preds = %land.lhs.true72
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5046
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5046
  %type76 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !5046
  %size77 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type76, i32 0, i32 2, !dbg !5046
  %33 = load %union.tree_node*, %union.tree_node** %size77, align 8, !dbg !5046
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 21), align 8, !dbg !5046
  %call78 = call %union.tree_node* @size_binop_loc(i32 0, i32 69, %union.tree_node* %33, %union.tree_node* %34), !dbg !5046
  %call79 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %31, %union.tree_node* %call78), !dbg !5046
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5047
  %type80 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !5047
  %size_unit81 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type80, i32 0, i32 3, !dbg !5047
  store %union.tree_node* %call79, %union.tree_node** %size_unit81, align 8, !dbg !5048
  br label %if.end82, !dbg !5047

if.end82:                                         ; preds = %if.then75, %land.lhs.true72, %if.end69
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5049
  %type83 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !5049
  %size84 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 2, !dbg !5049
  %37 = load %union.tree_node*, %union.tree_node** %size84, align 8, !dbg !5049
  %cmp85 = icmp ne %union.tree_node* %37, null, !dbg !5051
  br i1 %cmp85, label %if.then86, label %if.end101, !dbg !5052

if.then86:                                        ; preds = %if.end82
  %38 = load i32, i32* @input_location, align 4, !dbg !5053
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5055
  %type87 = bitcast %union.tree_node* %39 to %struct.tree_type*, !dbg !5055
  %size88 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 2, !dbg !5055
  %40 = load %union.tree_node*, %union.tree_node** %size88, align 8, !dbg !5055
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5056
  %type89 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !5056
  %align90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 7, !dbg !5056
  %42 = load i32, i32* %align90, align 8, !dbg !5056
  %call91 = call %union.tree_node* @round_up_loc(i32 %38, %union.tree_node* %40, i32 %42), !dbg !5057
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5058
  %type92 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !5058
  %size93 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type92, i32 0, i32 2, !dbg !5058
  store %union.tree_node* %call91, %union.tree_node** %size93, align 8, !dbg !5059
  %44 = load i32, i32* @input_location, align 4, !dbg !5060
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5061
  %type94 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !5061
  %size_unit95 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type94, i32 0, i32 3, !dbg !5061
  %46 = load %union.tree_node*, %union.tree_node** %size_unit95, align 8, !dbg !5061
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5062
  %type96 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !5062
  %align97 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type96, i32 0, i32 7, !dbg !5062
  %48 = load i32, i32* %align97, align 8, !dbg !5062
  %div = udiv i32 %48, 8, !dbg !5062
  %call98 = call %union.tree_node* @round_up_loc(i32 %44, %union.tree_node* %46, i32 %div), !dbg !5063
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5064
  %type99 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !5064
  %size_unit100 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type99, i32 0, i32 3, !dbg !5064
  store %union.tree_node* %call98, %union.tree_node** %size_unit100, align 8, !dbg !5065
  br label %if.end101, !dbg !5066

if.end101:                                        ; preds = %if.then86, %if.end82
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5067
  %type102 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !5067
  %size103 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 2, !dbg !5067
  %51 = load %union.tree_node*, %union.tree_node** %size103, align 8, !dbg !5067
  %cmp104 = icmp ne %union.tree_node* %51, null, !dbg !5069
  br i1 %cmp104, label %land.lhs.true105, label %if.end119, !dbg !5070

land.lhs.true105:                                 ; preds = %if.end101
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5071
  %type106 = bitcast %union.tree_node* %52 to %struct.tree_type*, !dbg !5071
  %size107 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type106, i32 0, i32 2, !dbg !5071
  %53 = load %union.tree_node*, %union.tree_node** %size107, align 8, !dbg !5071
  %base108 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !5071
  %54 = bitcast %struct.tree_base* %base108 to i64*, !dbg !5071
  %bf.load109 = load i64, i64* %54, align 8, !dbg !5071
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !5071
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !5071
  %cmp112 = icmp ne i32 %bf.cast111, 23, !dbg !5072
  br i1 %cmp112, label %if.then113, label %if.end119, !dbg !5073

if.then113:                                       ; preds = %land.lhs.true105
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5074
  %type114 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !5074
  %size115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 2, !dbg !5074
  %56 = load %union.tree_node*, %union.tree_node** %size115, align 8, !dbg !5074
  %call116 = call %union.tree_node* @variable_size(%union.tree_node* %56), !dbg !5075
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5076
  %type117 = bitcast %union.tree_node* %57 to %struct.tree_type*, !dbg !5076
  %size118 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type117, i32 0, i32 2, !dbg !5076
  store %union.tree_node* %call116, %union.tree_node** %size118, align 8, !dbg !5077
  br label %if.end119, !dbg !5076

if.end119:                                        ; preds = %if.then113, %land.lhs.true105, %if.end101
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5078
  %type120 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !5078
  %size_unit121 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type120, i32 0, i32 3, !dbg !5078
  %59 = load %union.tree_node*, %union.tree_node** %size_unit121, align 8, !dbg !5078
  %cmp122 = icmp ne %union.tree_node* %59, null, !dbg !5080
  br i1 %cmp122, label %land.lhs.true123, label %if.end137, !dbg !5081

land.lhs.true123:                                 ; preds = %if.end119
  %60 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5082
  %type124 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !5082
  %size_unit125 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type124, i32 0, i32 3, !dbg !5082
  %61 = load %union.tree_node*, %union.tree_node** %size_unit125, align 8, !dbg !5082
  %base126 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !5082
  %62 = bitcast %struct.tree_base* %base126 to i64*, !dbg !5082
  %bf.load127 = load i64, i64* %62, align 8, !dbg !5082
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !5082
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !5082
  %cmp130 = icmp ne i32 %bf.cast129, 23, !dbg !5083
  br i1 %cmp130, label %if.then131, label %if.end137, !dbg !5084

if.then131:                                       ; preds = %land.lhs.true123
  %63 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5085
  %type132 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !5085
  %size_unit133 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type132, i32 0, i32 3, !dbg !5085
  %64 = load %union.tree_node*, %union.tree_node** %size_unit133, align 8, !dbg !5085
  %call134 = call %union.tree_node* @variable_size(%union.tree_node* %64), !dbg !5086
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5087
  %type135 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !5087
  %size_unit136 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type135, i32 0, i32 3, !dbg !5087
  store %union.tree_node* %call134, %union.tree_node** %size_unit136, align 8, !dbg !5088
  br label %if.end137, !dbg !5087

if.end137:                                        ; preds = %if.then131, %land.lhs.true123, %if.end119
  %66 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5089
  %type138 = bitcast %union.tree_node* %66 to %struct.tree_type*, !dbg !5089
  %next_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 15, !dbg !5089
  %67 = load %union.tree_node*, %union.tree_node** %next_variant, align 8, !dbg !5089
  %tobool = icmp ne %union.tree_node* %67, null, !dbg !5089
  br i1 %tobool, label %if.then141, label %lor.lhs.false, !dbg !5091

lor.lhs.false:                                    ; preds = %if.end137
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5092
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5093
  %type139 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !5093
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type139, i32 0, i32 16, !dbg !5093
  %70 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5093
  %cmp140 = icmp ne %union.tree_node* %68, %70, !dbg !5094
  br i1 %cmp140, label %if.then141, label %if.end195, !dbg !5095

if.then141:                                       ; preds = %lor.lhs.false, %if.end137
  call void @llvm.dbg.declare(metadata %union.tree_node** %variant, metadata !5096, metadata !DIExpression()), !dbg !5098
  call void @llvm.dbg.declare(metadata %union.tree_node** %size142, metadata !5099, metadata !DIExpression()), !dbg !5100
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5101
  %type143 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !5101
  %size144 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type143, i32 0, i32 2, !dbg !5101
  %72 = load %union.tree_node*, %union.tree_node** %size144, align 8, !dbg !5101
  store %union.tree_node* %72, %union.tree_node** %size142, align 8, !dbg !5100
  call void @llvm.dbg.declare(metadata %union.tree_node** %size_unit145, metadata !5102, metadata !DIExpression()), !dbg !5103
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5104
  %type146 = bitcast %union.tree_node* %73 to %struct.tree_type*, !dbg !5104
  %size_unit147 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type146, i32 0, i32 3, !dbg !5104
  %74 = load %union.tree_node*, %union.tree_node** %size_unit147, align 8, !dbg !5104
  store %union.tree_node* %74, %union.tree_node** %size_unit145, align 8, !dbg !5103
  call void @llvm.dbg.declare(metadata i32* %align148, metadata !5105, metadata !DIExpression()), !dbg !5106
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5107
  %type149 = bitcast %union.tree_node* %75 to %struct.tree_type*, !dbg !5107
  %align150 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type149, i32 0, i32 7, !dbg !5107
  %76 = load i32, i32* %align150, align 8, !dbg !5107
  store i32 %76, i32* %align148, align 4, !dbg !5106
  call void @llvm.dbg.declare(metadata i32* %user_align, metadata !5108, metadata !DIExpression()), !dbg !5109
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5110
  %common151 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !5110
  %base152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 0, !dbg !5110
  %78 = bitcast %struct.tree_base* %base152 to i64*, !dbg !5110
  %bf.load153 = load i64, i64* %78, align 8, !dbg !5110
  %bf.lshr154 = lshr i64 %bf.load153, 42, !dbg !5110
  %bf.clear155 = and i64 %bf.lshr154, 1, !dbg !5110
  %bf.cast156 = trunc i64 %bf.clear155 to i32, !dbg !5110
  store i32 %bf.cast156, i32* %user_align, align 4, !dbg !5109
  call void @llvm.dbg.declare(metadata i32* %mode157, metadata !5111, metadata !DIExpression()), !dbg !5112
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5113
  %base158 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !5113
  %80 = bitcast %struct.tree_base* %base158 to i64*, !dbg !5113
  %bf.load159 = load i64, i64* %80, align 8, !dbg !5113
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !5113
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !5113
  %cmp162 = icmp eq i32 %bf.cast161, 14, !dbg !5113
  br i1 %cmp162, label %cond.true163, label %cond.false165, !dbg !5113

cond.true163:                                     ; preds = %if.then141
  %81 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5113
  %call164 = call i32 @vector_type_mode(%union.tree_node* %81), !dbg !5113
  br label %cond.end171, !dbg !5113

cond.false165:                                    ; preds = %if.then141
  %82 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5113
  %type166 = bitcast %union.tree_node* %82 to %struct.tree_type*, !dbg !5113
  %mode167 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type166, i32 0, i32 6, !dbg !5113
  %bf.load168 = load i32, i32* %mode167, align 4, !dbg !5113
  %bf.lshr169 = lshr i32 %bf.load168, 16, !dbg !5113
  %bf.clear170 = and i32 %bf.lshr169, 255, !dbg !5113
  br label %cond.end171, !dbg !5113

cond.end171:                                      ; preds = %cond.false165, %cond.true163
  %cond172 = phi i32 [ %call164, %cond.true163 ], [ %bf.clear170, %cond.false165 ], !dbg !5113
  store i32 %cond172, i32* %mode157, align 4, !dbg !5112
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5114
  %type173 = bitcast %union.tree_node* %83 to %struct.tree_type*, !dbg !5114
  %main_variant174 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type173, i32 0, i32 16, !dbg !5114
  %84 = load %union.tree_node*, %union.tree_node** %main_variant174, align 8, !dbg !5114
  store %union.tree_node* %84, %union.tree_node** %variant, align 8, !dbg !5116
  br label %for.cond, !dbg !5117

for.cond:                                         ; preds = %for.inc, %cond.end171
  %85 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5118
  %cmp175 = icmp ne %union.tree_node* %85, null, !dbg !5120
  br i1 %cmp175, label %for.body, label %for.end, !dbg !5121

for.body:                                         ; preds = %for.cond
  %86 = load %union.tree_node*, %union.tree_node** %size142, align 8, !dbg !5122
  %87 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5124
  %type176 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !5124
  %size177 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type176, i32 0, i32 2, !dbg !5124
  store %union.tree_node* %86, %union.tree_node** %size177, align 8, !dbg !5125
  %88 = load %union.tree_node*, %union.tree_node** %size_unit145, align 8, !dbg !5126
  %89 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5127
  %type178 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !5127
  %size_unit179 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type178, i32 0, i32 3, !dbg !5127
  store %union.tree_node* %88, %union.tree_node** %size_unit179, align 8, !dbg !5128
  %90 = load i32, i32* %align148, align 4, !dbg !5129
  %91 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5130
  %type180 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !5130
  %align181 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type180, i32 0, i32 7, !dbg !5130
  store i32 %90, i32* %align181, align 8, !dbg !5131
  %92 = load i32, i32* %user_align, align 4, !dbg !5132
  %93 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5133
  %common182 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !5133
  %base183 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common182, i32 0, i32 0, !dbg !5133
  %94 = bitcast %struct.tree_base* %base183 to i64*, !dbg !5133
  %95 = zext i32 %92 to i64, !dbg !5134
  %bf.load184 = load i64, i64* %94, align 8, !dbg !5134
  %bf.value = and i64 %95, 1, !dbg !5134
  %bf.shl = shl i64 %bf.value, 42, !dbg !5134
  %bf.clear185 = and i64 %bf.load184, -4398046511105, !dbg !5134
  %bf.set = or i64 %bf.clear185, %bf.shl, !dbg !5134
  store i64 %bf.set, i64* %94, align 8, !dbg !5134
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5134
  %96 = load i32, i32* %mode157, align 4, !dbg !5135
  %97 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5135
  %type186 = bitcast %union.tree_node* %97 to %struct.tree_type*, !dbg !5135
  %mode187 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type186, i32 0, i32 6, !dbg !5135
  %bf.load188 = load i32, i32* %mode187, align 4, !dbg !5135
  %bf.value189 = and i32 %96, 255, !dbg !5135
  %bf.shl190 = shl i32 %bf.value189, 16, !dbg !5135
  %bf.clear191 = and i32 %bf.load188, -16711681, !dbg !5135
  %bf.set192 = or i32 %bf.clear191, %bf.shl190, !dbg !5135
  store i32 %bf.set192, i32* %mode187, align 4, !dbg !5135
  br label %for.inc, !dbg !5136

for.inc:                                          ; preds = %for.body
  %98 = load %union.tree_node*, %union.tree_node** %variant, align 8, !dbg !5137
  %type193 = bitcast %union.tree_node* %98 to %struct.tree_type*, !dbg !5137
  %next_variant194 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type193, i32 0, i32 15, !dbg !5137
  %99 = load %union.tree_node*, %union.tree_node** %next_variant194, align 8, !dbg !5137
  store %union.tree_node* %99, %union.tree_node** %variant, align 8, !dbg !5138
  br label %for.cond, !dbg !5139, !llvm.loop !5140

for.end:                                          ; preds = %for.cond
  br label %if.end195, !dbg !5142

if.end195:                                        ; preds = %for.end, %lor.lhs.false
  ret void, !dbg !5143
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @finish_builtin_struct(%union.tree_node* %type, i8* %name, %union.tree_node* %fields, %union.tree_node* %align_type) #0 !dbg !5144 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %fields.addr = alloca %union.tree_node*, align 8
  %align_type.addr = alloca %union.tree_node*, align 8
  %tail = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5147, metadata !DIExpression()), !dbg !5148
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !5149, metadata !DIExpression()), !dbg !5150
  store %union.tree_node* %fields, %union.tree_node** %fields.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fields.addr, metadata !5151, metadata !DIExpression()), !dbg !5152
  store %union.tree_node* %align_type, %union.tree_node** %align_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %align_type.addr, metadata !5153, metadata !DIExpression()), !dbg !5154
  call void @llvm.dbg.declare(metadata %union.tree_node** %tail, metadata !5155, metadata !DIExpression()), !dbg !5156
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !5157, metadata !DIExpression()), !dbg !5158
  store %union.tree_node* null, %union.tree_node** %tail, align 8, !dbg !5159
  br label %for.cond, !dbg !5161

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !5162
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5164
  br i1 %tobool, label %for.body, label %for.end, !dbg !5164

for.body:                                         ; preds = %for.cond
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5165
  %2 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !5167
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !5167
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !5167
  store %union.tree_node* %1, %union.tree_node** %context, align 8, !dbg !5168
  %3 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !5169
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5169
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5169
  %4 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5169
  store %union.tree_node* %4, %union.tree_node** %next, align 8, !dbg !5170
  %5 = load %union.tree_node*, %union.tree_node** %tail, align 8, !dbg !5171
  %6 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !5172
  %common1 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5172
  %chain2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1, !dbg !5172
  store %union.tree_node* %5, %union.tree_node** %chain2, align 8, !dbg !5173
  br label %for.inc, !dbg !5174

for.inc:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %fields.addr, align 8, !dbg !5175
  store %union.tree_node* %7, %union.tree_node** %tail, align 8, !dbg !5176
  %8 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !5177
  store %union.tree_node* %8, %union.tree_node** %fields.addr, align 8, !dbg !5178
  br label %for.cond, !dbg !5179, !llvm.loop !5180

for.end:                                          ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %tail, align 8, !dbg !5182
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5183
  %type3 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5183
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 1, !dbg !5183
  store %union.tree_node* %9, %union.tree_node** %values, align 8, !dbg !5184
  %11 = load %union.tree_node*, %union.tree_node** %align_type.addr, align 8, !dbg !5185
  %tobool4 = icmp ne %union.tree_node* %11, null, !dbg !5185
  br i1 %tobool4, label %if.then, label %if.end, !dbg !5187

if.then:                                          ; preds = %for.end
  %12 = load %union.tree_node*, %union.tree_node** %align_type.addr, align 8, !dbg !5188
  %type5 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !5188
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 7, !dbg !5188
  %13 = load i32, i32* %align, align 8, !dbg !5188
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5190
  %type6 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !5190
  %align7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 7, !dbg !5190
  store i32 %13, i32* %align7, align 8, !dbg !5191
  %15 = load %union.tree_node*, %union.tree_node** %align_type.addr, align 8, !dbg !5192
  %common8 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5192
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 0, !dbg !5192
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !5192
  %bf.load = load i64, i64* %16, align 8, !dbg !5192
  %bf.lshr = lshr i64 %bf.load, 42, !dbg !5192
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5192
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5192
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5193
  %common9 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5193
  %base10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 0, !dbg !5193
  %18 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5193
  %19 = zext i32 %bf.cast to i64, !dbg !5194
  %bf.load11 = load i64, i64* %18, align 8, !dbg !5194
  %bf.value = and i64 %19, 1, !dbg !5194
  %bf.shl = shl i64 %bf.value, 42, !dbg !5194
  %bf.clear12 = and i64 %bf.load11, -4398046511105, !dbg !5194
  %bf.set = or i64 %bf.clear12, %bf.shl, !dbg !5194
  store i64 %bf.set, i64* %18, align 8, !dbg !5194
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5194
  br label %if.end, !dbg !5195

if.end:                                           ; preds = %if.then, %for.end
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5196
  call void @layout_type(%union.tree_node* %20), !dbg !5197
  %21 = load i8*, i8** %name.addr, align 8, !dbg !5198
  %call = call %union.tree_node* @get_identifier(i8* %21), !dbg !5198
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5198
  %call13 = call %union.tree_node* @build_decl_stat(i32 1, i32 35, %union.tree_node* %call, %union.tree_node* %22), !dbg !5198
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5199
  %type14 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !5199
  %name15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 12, !dbg !5199
  store %union.tree_node* %call13, %union.tree_node** %name15, align 8, !dbg !5200
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5201
  %type16 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !5201
  %name17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 12, !dbg !5201
  %25 = load %union.tree_node*, %union.tree_node** %name17, align 8, !dbg !5201
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5202
  %common18 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !5202
  %chain19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 1, !dbg !5202
  store %union.tree_node* %25, %union.tree_node** %chain19, align 8, !dbg !5203
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5204
  %type20 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !5204
  %name21 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 12, !dbg !5204
  %28 = load %union.tree_node*, %union.tree_node** %name21, align 8, !dbg !5204
  call void @layout_decl(%union.tree_node* %28, i32 0), !dbg !5205
  ret void, !dbg !5206
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @layout_type(%union.tree_node* %type) #0 !dbg !5207 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %nunits = alloca i32, align 4
  %innertype = alloca %union.tree_node*, align 8
  %innermode = alloca i32, align 4
  %mode329 = alloca i32, align 4
  %mode533 = alloca i32, align 4
  %as = alloca i8, align 1
  %index = alloca %union.tree_node*, align 8
  %element = alloca %union.tree_node*, align 8
  %ub = alloca %union.tree_node*, align 8
  %lb = alloca %union.tree_node*, align 8
  %element_size = alloca %union.tree_node*, align 8
  %length = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %rli = alloca %struct.record_layout_info_s*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5210
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5210
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5210

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1792, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5210
  br label %cond.end, !dbg !5210

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5210

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5210
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5211
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5213
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !5214
  br i1 %cmp, label %if.then, label %if.end, !dbg !5215

if.then:                                          ; preds = %cond.end
  br label %if.end969, !dbg !5216

if.end:                                           ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5217
  %type1 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5217
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2, !dbg !5217
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5217
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !5217
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !5219

if.then3:                                         ; preds = %if.end
  br label %if.end969, !dbg !5220

if.end4:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5221
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5221
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !5221
  %bf.load = load i64, i64* %6, align 8, !dbg !5221
  %bf.clear = and i64 %bf.load, 65535, !dbg !5221
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5221
  switch i32 %bf.cast, label %sw.default [
    i32 22, label %sw.bb
    i32 7, label %sw.bb5
    i32 8, label %sw.bb16
    i32 6, label %sw.bb16
    i32 9, label %sw.bb83
    i32 11, label %sw.bb145
    i32 13, label %sw.bb195
    i32 14, label %sw.bb281
    i32 19, label %sw.bb486
    i32 5, label %sw.bb497
    i32 20, label %sw.bb517
    i32 21, label %sw.bb517
    i32 10, label %sw.bb532
    i32 12, label %sw.bb532
    i32 15, label %sw.bb602
    i32 16, label %sw.bb876
    i32 17, label %sw.bb876
    i32 18, label %sw.bb876
  ], !dbg !5222

sw.bb:                                            ; preds = %if.end4
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1806, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5223
  br label %sw.bb5, !dbg !5223

sw.bb5:                                           ; preds = %if.end4, %sw.bb
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5225
  %type6 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !5225
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 6, !dbg !5225
  %bf.load7 = load i32, i32* %precision, align 4, !dbg !5225
  %bf.clear8 = and i32 %bf.load7, 1023, !dbg !5225
  %cmp9 = icmp eq i32 %bf.clear8, 0, !dbg !5227
  br i1 %cmp9, label %if.then10, label %if.end15, !dbg !5228

if.then10:                                        ; preds = %sw.bb5
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5229
  %type11 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !5229
  %precision12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !5229
  %bf.load13 = load i32, i32* %precision12, align 4, !dbg !5230
  %bf.clear14 = and i32 %bf.load13, -1024, !dbg !5230
  %bf.set = or i32 %bf.clear14, 1, !dbg !5230
  store i32 %bf.set, i32* %precision12, align 4, !dbg !5230
  br label %if.end15, !dbg !5229

if.end15:                                         ; preds = %if.then10, %sw.bb5
  br label %sw.bb16, !dbg !5231

sw.bb16:                                          ; preds = %if.end4, %if.end4, %if.end15
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5232
  %type17 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !5232
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 13, !dbg !5232
  %10 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !5232
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5232
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5232
  %bf.load19 = load i64, i64* %11, align 8, !dbg !5232
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5232
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5232
  %cmp22 = icmp eq i32 %bf.cast21, 23, !dbg !5234
  br i1 %cmp22, label %land.lhs.true, label %if.end31, !dbg !5235

land.lhs.true:                                    ; preds = %sw.bb16
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5236
  %type23 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !5236
  %minval24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 13, !dbg !5236
  %13 = load %union.tree_node*, %union.tree_node** %minval24, align 8, !dbg !5236
  %call = call i32 @tree_int_cst_sgn(%union.tree_node* %13), !dbg !5237
  %cmp25 = icmp sge i32 %call, 0, !dbg !5238
  br i1 %cmp25, label %if.then26, label %if.end31, !dbg !5239

if.then26:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5240
  %base27 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5240
  %15 = bitcast %struct.tree_base* %base27 to i64*, !dbg !5240
  %bf.load28 = load i64, i64* %15, align 8, !dbg !5241
  %bf.clear29 = and i64 %bf.load28, -2097153, !dbg !5241
  %bf.set30 = or i64 %bf.clear29, 2097152, !dbg !5241
  store i64 %bf.set30, i64* %15, align 8, !dbg !5241
  br label %if.end31, !dbg !5240

if.end31:                                         ; preds = %if.then26, %land.lhs.true, %sw.bb16
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5242
  %type32 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !5242
  %precision33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6, !dbg !5242
  %bf.load34 = load i32, i32* %precision33, align 4, !dbg !5242
  %bf.clear35 = and i32 %bf.load34, 1023, !dbg !5242
  %call36 = call i32 @smallest_mode_for_size(i32 %bf.clear35, i32 2), !dbg !5242
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5242
  %type37 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !5242
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type37, i32 0, i32 6, !dbg !5242
  %bf.load38 = load i32, i32* %mode, align 4, !dbg !5242
  %bf.value = and i32 %call36, 255, !dbg !5242
  %bf.shl = shl i32 %bf.value, 16, !dbg !5242
  %bf.clear39 = and i32 %bf.load38, -16711681, !dbg !5242
  %bf.set40 = or i32 %bf.clear39, %bf.shl, !dbg !5242
  store i32 %bf.set40, i32* %mode, align 4, !dbg !5242
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5243
  %base41 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5243
  %19 = bitcast %struct.tree_base* %base41 to i64*, !dbg !5243
  %bf.load42 = load i64, i64* %19, align 8, !dbg !5243
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !5243
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !5243
  %cmp45 = icmp eq i32 %bf.cast44, 14, !dbg !5243
  br i1 %cmp45, label %cond.true46, label %cond.false48, !dbg !5243

cond.true46:                                      ; preds = %if.end31
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5243
  %call47 = call i32 @vector_type_mode(%union.tree_node* %20), !dbg !5243
  br label %cond.end53, !dbg !5243

cond.false48:                                     ; preds = %if.end31
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5243
  %type49 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !5243
  %mode50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 6, !dbg !5243
  %bf.load51 = load i32, i32* %mode50, align 4, !dbg !5243
  %bf.lshr = lshr i32 %bf.load51, 16, !dbg !5243
  %bf.clear52 = and i32 %bf.lshr, 255, !dbg !5243
  br label %cond.end53, !dbg !5243

cond.end53:                                       ; preds = %cond.false48, %cond.true46
  %cond54 = phi i32 [ %call47, %cond.true46 ], [ %bf.clear52, %cond.false48 ], !dbg !5243
  %idxprom = zext i32 %cond54 to i64, !dbg !5243
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !5243
  %22 = load i8, i8* %arrayidx, align 1, !dbg !5243
  %conv = zext i8 %22 to i16, !dbg !5243
  %conv55 = zext i16 %conv to i32, !dbg !5243
  %mul = mul nsw i32 %conv55, 8, !dbg !5243
  %conv56 = trunc i32 %mul to i16, !dbg !5243
  %conv57 = zext i16 %conv56 to i64, !dbg !5243
  %call58 = call %union.tree_node* @size_int_kind(i64 %conv57, i32 2), !dbg !5243
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5244
  %type59 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !5244
  %size60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 2, !dbg !5244
  store %union.tree_node* %call58, %union.tree_node** %size60, align 8, !dbg !5245
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5246
  %base61 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5246
  %25 = bitcast %struct.tree_base* %base61 to i64*, !dbg !5246
  %bf.load62 = load i64, i64* %25, align 8, !dbg !5246
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !5246
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !5246
  %cmp65 = icmp eq i32 %bf.cast64, 14, !dbg !5246
  br i1 %cmp65, label %cond.true67, label %cond.false69, !dbg !5246

cond.true67:                                      ; preds = %cond.end53
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5246
  %call68 = call i32 @vector_type_mode(%union.tree_node* %26), !dbg !5246
  br label %cond.end75, !dbg !5246

cond.false69:                                     ; preds = %cond.end53
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5246
  %type70 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !5246
  %mode71 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type70, i32 0, i32 6, !dbg !5246
  %bf.load72 = load i32, i32* %mode71, align 4, !dbg !5246
  %bf.lshr73 = lshr i32 %bf.load72, 16, !dbg !5246
  %bf.clear74 = and i32 %bf.lshr73, 255, !dbg !5246
  br label %cond.end75, !dbg !5246

cond.end75:                                       ; preds = %cond.false69, %cond.true67
  %cond76 = phi i32 [ %call68, %cond.true67 ], [ %bf.clear74, %cond.false69 ], !dbg !5246
  %idxprom77 = zext i32 %cond76 to i64, !dbg !5246
  %arrayidx78 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom77, !dbg !5246
  %28 = load i8, i8* %arrayidx78, align 1, !dbg !5246
  %conv79 = zext i8 %28 to i16, !dbg !5246
  %conv80 = zext i16 %conv79 to i64, !dbg !5246
  %call81 = call %union.tree_node* @size_int_kind(i64 %conv80, i32 0), !dbg !5246
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5247
  %type82 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !5247
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 3, !dbg !5247
  store %union.tree_node* %call81, %union.tree_node** %size_unit, align 8, !dbg !5248
  br label %sw.epilog, !dbg !5249

sw.bb83:                                          ; preds = %if.end4
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5250
  %type84 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !5250
  %precision85 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type84, i32 0, i32 6, !dbg !5250
  %bf.load86 = load i32, i32* %precision85, align 4, !dbg !5250
  %bf.clear87 = and i32 %bf.load86, 1023, !dbg !5250
  %call88 = call i32 @mode_for_size(i32 %bf.clear87, i32 8, i32 0), !dbg !5250
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5250
  %type89 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !5250
  %mode90 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 6, !dbg !5250
  %bf.load91 = load i32, i32* %mode90, align 4, !dbg !5250
  %bf.value92 = and i32 %call88, 255, !dbg !5250
  %bf.shl93 = shl i32 %bf.value92, 16, !dbg !5250
  %bf.clear94 = and i32 %bf.load91, -16711681, !dbg !5250
  %bf.set95 = or i32 %bf.clear94, %bf.shl93, !dbg !5250
  store i32 %bf.set95, i32* %mode90, align 4, !dbg !5250
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5251
  %base96 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5251
  %33 = bitcast %struct.tree_base* %base96 to i64*, !dbg !5251
  %bf.load97 = load i64, i64* %33, align 8, !dbg !5251
  %bf.clear98 = and i64 %bf.load97, 65535, !dbg !5251
  %bf.cast99 = trunc i64 %bf.clear98 to i32, !dbg !5251
  %cmp100 = icmp eq i32 %bf.cast99, 14, !dbg !5251
  br i1 %cmp100, label %cond.true102, label %cond.false104, !dbg !5251

cond.true102:                                     ; preds = %sw.bb83
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5251
  %call103 = call i32 @vector_type_mode(%union.tree_node* %34), !dbg !5251
  br label %cond.end110, !dbg !5251

cond.false104:                                    ; preds = %sw.bb83
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5251
  %type105 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !5251
  %mode106 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type105, i32 0, i32 6, !dbg !5251
  %bf.load107 = load i32, i32* %mode106, align 4, !dbg !5251
  %bf.lshr108 = lshr i32 %bf.load107, 16, !dbg !5251
  %bf.clear109 = and i32 %bf.lshr108, 255, !dbg !5251
  br label %cond.end110, !dbg !5251

cond.end110:                                      ; preds = %cond.false104, %cond.true102
  %cond111 = phi i32 [ %call103, %cond.true102 ], [ %bf.clear109, %cond.false104 ], !dbg !5251
  %idxprom112 = zext i32 %cond111 to i64, !dbg !5251
  %arrayidx113 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom112, !dbg !5251
  %36 = load i8, i8* %arrayidx113, align 1, !dbg !5251
  %conv114 = zext i8 %36 to i16, !dbg !5251
  %conv115 = zext i16 %conv114 to i32, !dbg !5251
  %mul116 = mul nsw i32 %conv115, 8, !dbg !5251
  %conv117 = trunc i32 %mul116 to i16, !dbg !5251
  %conv118 = zext i16 %conv117 to i64, !dbg !5251
  %call119 = call %union.tree_node* @size_int_kind(i64 %conv118, i32 2), !dbg !5251
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5252
  %type120 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !5252
  %size121 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type120, i32 0, i32 2, !dbg !5252
  store %union.tree_node* %call119, %union.tree_node** %size121, align 8, !dbg !5253
  %38 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5254
  %base122 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5254
  %39 = bitcast %struct.tree_base* %base122 to i64*, !dbg !5254
  %bf.load123 = load i64, i64* %39, align 8, !dbg !5254
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !5254
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !5254
  %cmp126 = icmp eq i32 %bf.cast125, 14, !dbg !5254
  br i1 %cmp126, label %cond.true128, label %cond.false130, !dbg !5254

cond.true128:                                     ; preds = %cond.end110
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5254
  %call129 = call i32 @vector_type_mode(%union.tree_node* %40), !dbg !5254
  br label %cond.end136, !dbg !5254

cond.false130:                                    ; preds = %cond.end110
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5254
  %type131 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !5254
  %mode132 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type131, i32 0, i32 6, !dbg !5254
  %bf.load133 = load i32, i32* %mode132, align 4, !dbg !5254
  %bf.lshr134 = lshr i32 %bf.load133, 16, !dbg !5254
  %bf.clear135 = and i32 %bf.lshr134, 255, !dbg !5254
  br label %cond.end136, !dbg !5254

cond.end136:                                      ; preds = %cond.false130, %cond.true128
  %cond137 = phi i32 [ %call129, %cond.true128 ], [ %bf.clear135, %cond.false130 ], !dbg !5254
  %idxprom138 = zext i32 %cond137 to i64, !dbg !5254
  %arrayidx139 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom138, !dbg !5254
  %42 = load i8, i8* %arrayidx139, align 1, !dbg !5254
  %conv140 = zext i8 %42 to i16, !dbg !5254
  %conv141 = zext i16 %conv140 to i64, !dbg !5254
  %call142 = call %union.tree_node* @size_int_kind(i64 %conv141, i32 0), !dbg !5254
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5255
  %type143 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !5255
  %size_unit144 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type143, i32 0, i32 3, !dbg !5255
  store %union.tree_node* %call142, %union.tree_node** %size_unit144, align 8, !dbg !5256
  br label %sw.epilog, !dbg !5257

sw.bb145:                                         ; preds = %if.end4
  %44 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5258
  %base146 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !5258
  %45 = bitcast %struct.tree_base* %base146 to i64*, !dbg !5258
  %bf.load147 = load i64, i64* %45, align 8, !dbg !5258
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !5258
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !5258
  %cmp150 = icmp eq i32 %bf.cast149, 14, !dbg !5258
  br i1 %cmp150, label %cond.true152, label %cond.false154, !dbg !5258

cond.true152:                                     ; preds = %sw.bb145
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5258
  %call153 = call i32 @vector_type_mode(%union.tree_node* %46), !dbg !5258
  br label %cond.end160, !dbg !5258

cond.false154:                                    ; preds = %sw.bb145
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5258
  %type155 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !5258
  %mode156 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type155, i32 0, i32 6, !dbg !5258
  %bf.load157 = load i32, i32* %mode156, align 4, !dbg !5258
  %bf.lshr158 = lshr i32 %bf.load157, 16, !dbg !5258
  %bf.clear159 = and i32 %bf.lshr158, 255, !dbg !5258
  br label %cond.end160, !dbg !5258

cond.end160:                                      ; preds = %cond.false154, %cond.true152
  %cond161 = phi i32 [ %call153, %cond.true152 ], [ %bf.clear159, %cond.false154 ], !dbg !5258
  %idxprom162 = zext i32 %cond161 to i64, !dbg !5258
  %arrayidx163 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom162, !dbg !5258
  %48 = load i8, i8* %arrayidx163, align 1, !dbg !5258
  %conv164 = zext i8 %48 to i16, !dbg !5258
  %conv165 = zext i16 %conv164 to i32, !dbg !5258
  %mul166 = mul nsw i32 %conv165, 8, !dbg !5258
  %conv167 = trunc i32 %mul166 to i16, !dbg !5258
  %conv168 = zext i16 %conv167 to i64, !dbg !5258
  %call169 = call %union.tree_node* @size_int_kind(i64 %conv168, i32 2), !dbg !5258
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5259
  %type170 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !5259
  %size171 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type170, i32 0, i32 2, !dbg !5259
  store %union.tree_node* %call169, %union.tree_node** %size171, align 8, !dbg !5260
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5261
  %base172 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !5261
  %51 = bitcast %struct.tree_base* %base172 to i64*, !dbg !5261
  %bf.load173 = load i64, i64* %51, align 8, !dbg !5261
  %bf.clear174 = and i64 %bf.load173, 65535, !dbg !5261
  %bf.cast175 = trunc i64 %bf.clear174 to i32, !dbg !5261
  %cmp176 = icmp eq i32 %bf.cast175, 14, !dbg !5261
  br i1 %cmp176, label %cond.true178, label %cond.false180, !dbg !5261

cond.true178:                                     ; preds = %cond.end160
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5261
  %call179 = call i32 @vector_type_mode(%union.tree_node* %52), !dbg !5261
  br label %cond.end186, !dbg !5261

cond.false180:                                    ; preds = %cond.end160
  %53 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5261
  %type181 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !5261
  %mode182 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type181, i32 0, i32 6, !dbg !5261
  %bf.load183 = load i32, i32* %mode182, align 4, !dbg !5261
  %bf.lshr184 = lshr i32 %bf.load183, 16, !dbg !5261
  %bf.clear185 = and i32 %bf.lshr184, 255, !dbg !5261
  br label %cond.end186, !dbg !5261

cond.end186:                                      ; preds = %cond.false180, %cond.true178
  %cond187 = phi i32 [ %call179, %cond.true178 ], [ %bf.clear185, %cond.false180 ], !dbg !5261
  %idxprom188 = zext i32 %cond187 to i64, !dbg !5261
  %arrayidx189 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom188, !dbg !5261
  %54 = load i8, i8* %arrayidx189, align 1, !dbg !5261
  %conv190 = zext i8 %54 to i16, !dbg !5261
  %conv191 = zext i16 %conv190 to i64, !dbg !5261
  %call192 = call %union.tree_node* @size_int_kind(i64 %conv191, i32 0), !dbg !5261
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5262
  %type193 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !5262
  %size_unit194 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type193, i32 0, i32 3, !dbg !5262
  store %union.tree_node* %call192, %union.tree_node** %size_unit194, align 8, !dbg !5263
  br label %sw.epilog, !dbg !5264

sw.bb195:                                         ; preds = %if.end4
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5265
  %common = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !5265
  %type196 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5265
  %57 = load %union.tree_node*, %union.tree_node** %type196, align 8, !dbg !5265
  %base197 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !5265
  %58 = bitcast %struct.tree_base* %base197 to i64*, !dbg !5265
  %bf.load198 = load i64, i64* %58, align 8, !dbg !5265
  %bf.lshr199 = lshr i64 %bf.load198, 21, !dbg !5265
  %bf.clear200 = and i64 %bf.lshr199, 1, !dbg !5265
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !5265
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5266
  %base202 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !5266
  %60 = bitcast %struct.tree_base* %base202 to i64*, !dbg !5266
  %61 = zext i32 %bf.cast201 to i64, !dbg !5267
  %bf.load203 = load i64, i64* %60, align 8, !dbg !5267
  %bf.value204 = and i64 %61, 1, !dbg !5267
  %bf.shl205 = shl i64 %bf.value204, 21, !dbg !5267
  %bf.clear206 = and i64 %bf.load203, -2097153, !dbg !5267
  %bf.set207 = or i64 %bf.clear206, %bf.shl205, !dbg !5267
  store i64 %bf.set207, i64* %60, align 8, !dbg !5267
  %bf.result.cast = trunc i64 %bf.value204 to i32, !dbg !5267
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5268
  %common208 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !5268
  %type209 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common208, i32 0, i32 2, !dbg !5268
  %63 = load %union.tree_node*, %union.tree_node** %type209, align 8, !dbg !5268
  %type210 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !5268
  %precision211 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type210, i32 0, i32 6, !dbg !5268
  %bf.load212 = load i32, i32* %precision211, align 4, !dbg !5268
  %bf.clear213 = and i32 %bf.load212, 1023, !dbg !5268
  %mul214 = mul nsw i32 2, %bf.clear213, !dbg !5268
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5268
  %common215 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !5268
  %type216 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common215, i32 0, i32 2, !dbg !5268
  %65 = load %union.tree_node*, %union.tree_node** %type216, align 8, !dbg !5268
  %base217 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !5268
  %66 = bitcast %struct.tree_base* %base217 to i64*, !dbg !5268
  %bf.load218 = load i64, i64* %66, align 8, !dbg !5268
  %bf.clear219 = and i64 %bf.load218, 65535, !dbg !5268
  %bf.cast220 = trunc i64 %bf.clear219 to i32, !dbg !5268
  %cmp221 = icmp eq i32 %bf.cast220, 9, !dbg !5268
  %67 = zext i1 %cmp221 to i64, !dbg !5268
  %cond223 = select i1 %cmp221, i32 11, i32 10, !dbg !5268
  %call224 = call i32 @mode_for_size(i32 %mul214, i32 %cond223, i32 0), !dbg !5268
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5268
  %type225 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !5268
  %mode226 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type225, i32 0, i32 6, !dbg !5268
  %bf.load227 = load i32, i32* %mode226, align 4, !dbg !5268
  %bf.value228 = and i32 %call224, 255, !dbg !5268
  %bf.shl229 = shl i32 %bf.value228, 16, !dbg !5268
  %bf.clear230 = and i32 %bf.load227, -16711681, !dbg !5268
  %bf.set231 = or i32 %bf.clear230, %bf.shl229, !dbg !5268
  store i32 %bf.set231, i32* %mode226, align 4, !dbg !5268
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5269
  %base232 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !5269
  %70 = bitcast %struct.tree_base* %base232 to i64*, !dbg !5269
  %bf.load233 = load i64, i64* %70, align 8, !dbg !5269
  %bf.clear234 = and i64 %bf.load233, 65535, !dbg !5269
  %bf.cast235 = trunc i64 %bf.clear234 to i32, !dbg !5269
  %cmp236 = icmp eq i32 %bf.cast235, 14, !dbg !5269
  br i1 %cmp236, label %cond.true238, label %cond.false240, !dbg !5269

cond.true238:                                     ; preds = %sw.bb195
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5269
  %call239 = call i32 @vector_type_mode(%union.tree_node* %71), !dbg !5269
  br label %cond.end246, !dbg !5269

cond.false240:                                    ; preds = %sw.bb195
  %72 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5269
  %type241 = bitcast %union.tree_node* %72 to %struct.tree_type*, !dbg !5269
  %mode242 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type241, i32 0, i32 6, !dbg !5269
  %bf.load243 = load i32, i32* %mode242, align 4, !dbg !5269
  %bf.lshr244 = lshr i32 %bf.load243, 16, !dbg !5269
  %bf.clear245 = and i32 %bf.lshr244, 255, !dbg !5269
  br label %cond.end246, !dbg !5269

cond.end246:                                      ; preds = %cond.false240, %cond.true238
  %cond247 = phi i32 [ %call239, %cond.true238 ], [ %bf.clear245, %cond.false240 ], !dbg !5269
  %idxprom248 = zext i32 %cond247 to i64, !dbg !5269
  %arrayidx249 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom248, !dbg !5269
  %73 = load i8, i8* %arrayidx249, align 1, !dbg !5269
  %conv250 = zext i8 %73 to i16, !dbg !5269
  %conv251 = zext i16 %conv250 to i32, !dbg !5269
  %mul252 = mul nsw i32 %conv251, 8, !dbg !5269
  %conv253 = trunc i32 %mul252 to i16, !dbg !5269
  %conv254 = zext i16 %conv253 to i64, !dbg !5269
  %call255 = call %union.tree_node* @size_int_kind(i64 %conv254, i32 2), !dbg !5269
  %74 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5270
  %type256 = bitcast %union.tree_node* %74 to %struct.tree_type*, !dbg !5270
  %size257 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type256, i32 0, i32 2, !dbg !5270
  store %union.tree_node* %call255, %union.tree_node** %size257, align 8, !dbg !5271
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5272
  %base258 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !5272
  %76 = bitcast %struct.tree_base* %base258 to i64*, !dbg !5272
  %bf.load259 = load i64, i64* %76, align 8, !dbg !5272
  %bf.clear260 = and i64 %bf.load259, 65535, !dbg !5272
  %bf.cast261 = trunc i64 %bf.clear260 to i32, !dbg !5272
  %cmp262 = icmp eq i32 %bf.cast261, 14, !dbg !5272
  br i1 %cmp262, label %cond.true264, label %cond.false266, !dbg !5272

cond.true264:                                     ; preds = %cond.end246
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5272
  %call265 = call i32 @vector_type_mode(%union.tree_node* %77), !dbg !5272
  br label %cond.end272, !dbg !5272

cond.false266:                                    ; preds = %cond.end246
  %78 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5272
  %type267 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !5272
  %mode268 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type267, i32 0, i32 6, !dbg !5272
  %bf.load269 = load i32, i32* %mode268, align 4, !dbg !5272
  %bf.lshr270 = lshr i32 %bf.load269, 16, !dbg !5272
  %bf.clear271 = and i32 %bf.lshr270, 255, !dbg !5272
  br label %cond.end272, !dbg !5272

cond.end272:                                      ; preds = %cond.false266, %cond.true264
  %cond273 = phi i32 [ %call265, %cond.true264 ], [ %bf.clear271, %cond.false266 ], !dbg !5272
  %idxprom274 = zext i32 %cond273 to i64, !dbg !5272
  %arrayidx275 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom274, !dbg !5272
  %79 = load i8, i8* %arrayidx275, align 1, !dbg !5272
  %conv276 = zext i8 %79 to i16, !dbg !5272
  %conv277 = zext i16 %conv276 to i64, !dbg !5272
  %call278 = call %union.tree_node* @size_int_kind(i64 %conv277, i32 0), !dbg !5272
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5273
  %type279 = bitcast %union.tree_node* %80 to %struct.tree_type*, !dbg !5273
  %size_unit280 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type279, i32 0, i32 3, !dbg !5273
  store %union.tree_node* %call278, %union.tree_node** %size_unit280, align 8, !dbg !5274
  br label %sw.epilog, !dbg !5275

sw.bb281:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !5276, metadata !DIExpression()), !dbg !5278
  %81 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5279
  %type282 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !5279
  %precision283 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type282, i32 0, i32 6, !dbg !5279
  %bf.load284 = load i32, i32* %precision283, align 4, !dbg !5279
  %bf.clear285 = and i32 %bf.load284, 1023, !dbg !5279
  %sh_prom = zext i32 %bf.clear285 to i64, !dbg !5279
  %shl = shl i64 1, %sh_prom, !dbg !5279
  %conv286 = trunc i64 %shl to i32, !dbg !5279
  store i32 %conv286, i32* %nunits, align 4, !dbg !5278
  call void @llvm.dbg.declare(metadata %union.tree_node** %innertype, metadata !5280, metadata !DIExpression()), !dbg !5281
  %82 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5282
  %common287 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !5282
  %type288 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common287, i32 0, i32 2, !dbg !5282
  %83 = load %union.tree_node*, %union.tree_node** %type288, align 8, !dbg !5282
  store %union.tree_node* %83, %union.tree_node** %innertype, align 8, !dbg !5281
  %84 = load i32, i32* %nunits, align 4, !dbg !5283
  %85 = load i32, i32* %nunits, align 4, !dbg !5283
  %sub = sub nsw i32 %85, 1, !dbg !5283
  %and = and i32 %84, %sub, !dbg !5283
  %tobool289 = icmp ne i32 %and, 0, !dbg !5283
  br i1 %tobool289, label %cond.true290, label %cond.false291, !dbg !5283

cond.true290:                                     ; preds = %sw.bb281
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1855, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5283
  br label %cond.end292, !dbg !5283

cond.false291:                                    ; preds = %sw.bb281
  br label %cond.end292, !dbg !5283

cond.end292:                                      ; preds = %cond.false291, %cond.true290
  %cond293 = phi i32 [ 0, %cond.true290 ], [ 0, %cond.false291 ], !dbg !5283
  %86 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5284
  %base294 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !5284
  %87 = bitcast %struct.tree_base* %base294 to i64*, !dbg !5284
  %bf.load295 = load i64, i64* %87, align 8, !dbg !5284
  %bf.clear296 = and i64 %bf.load295, 65535, !dbg !5284
  %bf.cast297 = trunc i64 %bf.clear296 to i32, !dbg !5284
  %cmp298 = icmp eq i32 %bf.cast297, 14, !dbg !5284
  br i1 %cmp298, label %cond.true300, label %cond.false302, !dbg !5284

cond.true300:                                     ; preds = %cond.end292
  %88 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5284
  %call301 = call i32 @vector_type_mode(%union.tree_node* %88), !dbg !5284
  br label %cond.end308, !dbg !5284

cond.false302:                                    ; preds = %cond.end292
  %89 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5284
  %type303 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !5284
  %mode304 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type303, i32 0, i32 6, !dbg !5284
  %bf.load305 = load i32, i32* %mode304, align 4, !dbg !5284
  %bf.lshr306 = lshr i32 %bf.load305, 16, !dbg !5284
  %bf.clear307 = and i32 %bf.lshr306, 255, !dbg !5284
  br label %cond.end308, !dbg !5284

cond.end308:                                      ; preds = %cond.false302, %cond.true300
  %cond309 = phi i32 [ %call301, %cond.true300 ], [ %bf.clear307, %cond.false302 ], !dbg !5284
  %cmp310 = icmp eq i32 %cond309, 0, !dbg !5286
  br i1 %cmp310, label %if.then312, label %if.end438, !dbg !5287

if.then312:                                       ; preds = %cond.end308
  call void @llvm.dbg.declare(metadata i32* %innermode, metadata !5288, metadata !DIExpression()), !dbg !5290
  %90 = load %union.tree_node*, %union.tree_node** %innertype, align 8, !dbg !5291
  %base313 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !5291
  %91 = bitcast %struct.tree_base* %base313 to i64*, !dbg !5291
  %bf.load314 = load i64, i64* %91, align 8, !dbg !5291
  %bf.clear315 = and i64 %bf.load314, 65535, !dbg !5291
  %bf.cast316 = trunc i64 %bf.clear315 to i32, !dbg !5291
  %cmp317 = icmp eq i32 %bf.cast316, 14, !dbg !5291
  br i1 %cmp317, label %cond.true319, label %cond.false321, !dbg !5291

cond.true319:                                     ; preds = %if.then312
  %92 = load %union.tree_node*, %union.tree_node** %innertype, align 8, !dbg !5291
  %call320 = call i32 @vector_type_mode(%union.tree_node* %92), !dbg !5291
  br label %cond.end327, !dbg !5291

cond.false321:                                    ; preds = %if.then312
  %93 = load %union.tree_node*, %union.tree_node** %innertype, align 8, !dbg !5291
  %type322 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !5291
  %mode323 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type322, i32 0, i32 6, !dbg !5291
  %bf.load324 = load i32, i32* %mode323, align 4, !dbg !5291
  %bf.lshr325 = lshr i32 %bf.load324, 16, !dbg !5291
  %bf.clear326 = and i32 %bf.lshr325, 255, !dbg !5291
  br label %cond.end327, !dbg !5291

cond.end327:                                      ; preds = %cond.false321, %cond.true319
  %cond328 = phi i32 [ %call320, %cond.true319 ], [ %bf.clear326, %cond.false321 ], !dbg !5291
  store i32 %cond328, i32* %innermode, align 4, !dbg !5290
  call void @llvm.dbg.declare(metadata i32* %mode329, metadata !5292, metadata !DIExpression()), !dbg !5293
  %94 = load i32, i32* %innermode, align 4, !dbg !5294
  %idxprom330 = zext i32 %94 to i64, !dbg !5294
  %arrayidx331 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom330, !dbg !5294
  %95 = load i8, i8* %arrayidx331, align 1, !dbg !5294
  %conv332 = zext i8 %95 to i32, !dbg !5294
  %cmp333 = icmp eq i32 %conv332, 8, !dbg !5294
  br i1 %cmp333, label %if.then340, label %lor.lhs.false, !dbg !5294

lor.lhs.false:                                    ; preds = %cond.end327
  %96 = load i32, i32* %innermode, align 4, !dbg !5294
  %idxprom335 = zext i32 %96 to i64, !dbg !5294
  %arrayidx336 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom335, !dbg !5294
  %97 = load i8, i8* %arrayidx336, align 1, !dbg !5294
  %conv337 = zext i8 %97 to i32, !dbg !5294
  %cmp338 = icmp eq i32 %conv337, 9, !dbg !5294
  br i1 %cmp338, label %if.then340, label %if.else, !dbg !5296

if.then340:                                       ; preds = %lor.lhs.false, %cond.end327
  store i32 78, i32* %mode329, align 4, !dbg !5297
  br label %if.end373, !dbg !5298

if.else:                                          ; preds = %lor.lhs.false
  %98 = load i32, i32* %innermode, align 4, !dbg !5299
  %idxprom341 = zext i32 %98 to i64, !dbg !5299
  %arrayidx342 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom341, !dbg !5299
  %99 = load i8, i8* %arrayidx342, align 1, !dbg !5299
  %conv343 = zext i8 %99 to i32, !dbg !5299
  %cmp344 = icmp eq i32 %conv343, 4, !dbg !5299
  br i1 %cmp344, label %if.then346, label %if.else347, !dbg !5301

if.then346:                                       ; preds = %if.else
  store i32 0, i32* %mode329, align 4, !dbg !5302
  br label %if.end372, !dbg !5303

if.else347:                                       ; preds = %if.else
  %100 = load i32, i32* %innermode, align 4, !dbg !5304
  %idxprom348 = zext i32 %100 to i64, !dbg !5304
  %arrayidx349 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom348, !dbg !5304
  %101 = load i8, i8* %arrayidx349, align 1, !dbg !5304
  %conv350 = zext i8 %101 to i32, !dbg !5304
  %cmp351 = icmp eq i32 %conv350, 5, !dbg !5304
  br i1 %cmp351, label %if.then353, label %if.else354, !dbg !5306

if.then353:                                       ; preds = %if.else347
  store i32 0, i32* %mode329, align 4, !dbg !5307
  br label %if.end371, !dbg !5308

if.else354:                                       ; preds = %if.else347
  %102 = load i32, i32* %innermode, align 4, !dbg !5309
  %idxprom355 = zext i32 %102 to i64, !dbg !5309
  %arrayidx356 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom355, !dbg !5309
  %103 = load i8, i8* %arrayidx356, align 1, !dbg !5309
  %conv357 = zext i8 %103 to i32, !dbg !5309
  %cmp358 = icmp eq i32 %conv357, 6, !dbg !5309
  br i1 %cmp358, label %if.then360, label %if.else361, !dbg !5311

if.then360:                                       ; preds = %if.else354
  store i32 0, i32* %mode329, align 4, !dbg !5312
  br label %if.end370, !dbg !5313

if.else361:                                       ; preds = %if.else354
  %104 = load i32, i32* %innermode, align 4, !dbg !5314
  %idxprom362 = zext i32 %104 to i64, !dbg !5314
  %arrayidx363 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom362, !dbg !5314
  %105 = load i8, i8* %arrayidx363, align 1, !dbg !5314
  %conv364 = zext i8 %105 to i32, !dbg !5314
  %cmp365 = icmp eq i32 %conv364, 7, !dbg !5314
  br i1 %cmp365, label %if.then367, label %if.else368, !dbg !5316

if.then367:                                       ; preds = %if.else361
  store i32 0, i32* %mode329, align 4, !dbg !5317
  br label %if.end369, !dbg !5318

if.else368:                                       ; preds = %if.else361
  store i32 55, i32* %mode329, align 4, !dbg !5319
  br label %if.end369

if.end369:                                        ; preds = %if.else368, %if.then367
  br label %if.end370

if.end370:                                        ; preds = %if.end369, %if.then360
  br label %if.end371

if.end371:                                        ; preds = %if.end370, %if.then353
  br label %if.end372

if.end372:                                        ; preds = %if.end371, %if.then346
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then340
  br label %for.cond, !dbg !5320

for.cond:                                         ; preds = %for.inc, %if.end373
  %106 = load i32, i32* %mode329, align 4, !dbg !5321
  %cmp374 = icmp ne i32 %106, 0, !dbg !5324
  br i1 %cmp374, label %for.body, label %for.end, !dbg !5325

for.body:                                         ; preds = %for.cond
  %107 = load i32, i32* %mode329, align 4, !dbg !5326
  %idxprom376 = zext i32 %107 to i64, !dbg !5326
  %arrayidx377 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom376, !dbg !5326
  %108 = load i8, i8* %arrayidx377, align 1, !dbg !5326
  %conv378 = zext i8 %108 to i32, !dbg !5326
  %109 = load i32, i32* %nunits, align 4, !dbg !5328
  %cmp379 = icmp eq i32 %conv378, %109, !dbg !5329
  br i1 %cmp379, label %land.lhs.true381, label %if.end388, !dbg !5330

land.lhs.true381:                                 ; preds = %for.body
  %110 = load i32, i32* %mode329, align 4, !dbg !5331
  %idxprom382 = zext i32 %110 to i64, !dbg !5331
  %arrayidx383 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom382, !dbg !5331
  %111 = load i8, i8* %arrayidx383, align 1, !dbg !5331
  %conv384 = zext i8 %111 to i32, !dbg !5331
  %112 = load i32, i32* %innermode, align 4, !dbg !5332
  %cmp385 = icmp eq i32 %conv384, %112, !dbg !5333
  br i1 %cmp385, label %if.then387, label %if.end388, !dbg !5334

if.then387:                                       ; preds = %land.lhs.true381
  br label %for.end, !dbg !5335

if.end388:                                        ; preds = %land.lhs.true381, %for.body
  br label %for.inc, !dbg !5332

for.inc:                                          ; preds = %if.end388
  %113 = load i32, i32* %mode329, align 4, !dbg !5336
  %idxprom389 = zext i32 %113 to i64, !dbg !5336
  %arrayidx390 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom389, !dbg !5336
  %114 = load i8, i8* %arrayidx390, align 1, !dbg !5336
  %conv391 = zext i8 %114 to i32, !dbg !5336
  store i32 %conv391, i32* %mode329, align 4, !dbg !5337
  br label %for.cond, !dbg !5338, !llvm.loop !5339

for.end:                                          ; preds = %if.then387, %for.cond
  %115 = load i32, i32* %mode329, align 4, !dbg !5341
  %cmp392 = icmp eq i32 %115, 0, !dbg !5343
  br i1 %cmp392, label %land.lhs.true394, label %if.end410, !dbg !5344

land.lhs.true394:                                 ; preds = %for.end
  %116 = load i32, i32* %innermode, align 4, !dbg !5345
  %idxprom395 = zext i32 %116 to i64, !dbg !5345
  %arrayidx396 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom395, !dbg !5345
  %117 = load i8, i8* %arrayidx396, align 1, !dbg !5345
  %conv397 = zext i8 %117 to i32, !dbg !5345
  %cmp398 = icmp eq i32 %conv397, 2, !dbg !5346
  br i1 %cmp398, label %if.then400, label %if.end410, !dbg !5347

if.then400:                                       ; preds = %land.lhs.true394
  %118 = load i32, i32* %nunits, align 4, !dbg !5348
  %119 = load i32, i32* %innermode, align 4, !dbg !5349
  %idxprom401 = zext i32 %119 to i64, !dbg !5349
  %arrayidx402 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom401, !dbg !5349
  %120 = load i8, i8* %arrayidx402, align 1, !dbg !5349
  %conv403 = zext i8 %120 to i16, !dbg !5349
  %conv404 = zext i16 %conv403 to i32, !dbg !5349
  %mul405 = mul nsw i32 %conv404, 8, !dbg !5349
  %conv406 = trunc i32 %mul405 to i16, !dbg !5349
  %conv407 = zext i16 %conv406 to i32, !dbg !5349
  %mul408 = mul nsw i32 %118, %conv407, !dbg !5350
  %call409 = call i32 @mode_for_size(i32 %mul408, i32 2, i32 0), !dbg !5351
  store i32 %call409, i32* %mode329, align 4, !dbg !5352
  br label %if.end410, !dbg !5353

if.end410:                                        ; preds = %if.then400, %land.lhs.true394, %for.end
  %121 = load i32, i32* %mode329, align 4, !dbg !5354
  %cmp411 = icmp eq i32 %121, 0, !dbg !5356
  br i1 %cmp411, label %if.then423, label %lor.lhs.false413, !dbg !5357

lor.lhs.false413:                                 ; preds = %if.end410
  %122 = load i32, i32* %mode329, align 4, !dbg !5358
  %idxprom414 = zext i32 %122 to i64, !dbg !5358
  %arrayidx415 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom414, !dbg !5358
  %123 = load i8, i8* %arrayidx415, align 1, !dbg !5358
  %conv416 = zext i8 %123 to i32, !dbg !5358
  %cmp417 = icmp eq i32 %conv416, 2, !dbg !5359
  br i1 %cmp417, label %land.lhs.true419, label %if.else429, !dbg !5360

land.lhs.true419:                                 ; preds = %lor.lhs.false413
  %124 = load i32, i32* %mode329, align 4, !dbg !5361
  %idxprom420 = zext i32 %124 to i64, !dbg !5362
  %arrayidx421 = getelementptr inbounds [87 x i8], [87 x i8]* @have_regs_of_mode, i64 0, i64 %idxprom420, !dbg !5362
  %125 = load i8, i8* %arrayidx421, align 1, !dbg !5362
  %tobool422 = icmp ne i8 %125, 0, !dbg !5362
  br i1 %tobool422, label %if.else429, label %if.then423, !dbg !5363

if.then423:                                       ; preds = %land.lhs.true419, %if.end410
  %126 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5364
  %type424 = bitcast %union.tree_node* %126 to %struct.tree_type*, !dbg !5364
  %mode425 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type424, i32 0, i32 6, !dbg !5364
  %bf.load426 = load i32, i32* %mode425, align 4, !dbg !5364
  %bf.clear427 = and i32 %bf.load426, -16711681, !dbg !5364
  %bf.set428 = or i32 %bf.clear427, 65536, !dbg !5364
  store i32 %bf.set428, i32* %mode425, align 4, !dbg !5364
  br label %if.end437, !dbg !5364

if.else429:                                       ; preds = %land.lhs.true419, %lor.lhs.false413
  %127 = load i32, i32* %mode329, align 4, !dbg !5365
  %128 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5365
  %type430 = bitcast %union.tree_node* %128 to %struct.tree_type*, !dbg !5365
  %mode431 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type430, i32 0, i32 6, !dbg !5365
  %bf.load432 = load i32, i32* %mode431, align 4, !dbg !5365
  %bf.value433 = and i32 %127, 255, !dbg !5365
  %bf.shl434 = shl i32 %bf.value433, 16, !dbg !5365
  %bf.clear435 = and i32 %bf.load432, -16711681, !dbg !5365
  %bf.set436 = or i32 %bf.clear435, %bf.shl434, !dbg !5365
  store i32 %bf.set436, i32* %mode431, align 4, !dbg !5365
  br label %if.end437

if.end437:                                        ; preds = %if.else429, %if.then423
  br label %if.end438, !dbg !5366

if.end438:                                        ; preds = %if.end437, %cond.end308
  %129 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5367
  %common439 = bitcast %union.tree_node* %129 to %struct.tree_common*, !dbg !5367
  %type440 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common439, i32 0, i32 2, !dbg !5367
  %130 = load %union.tree_node*, %union.tree_node** %type440, align 8, !dbg !5367
  %base441 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !5367
  %131 = bitcast %struct.tree_base* %base441 to i64*, !dbg !5367
  %bf.load442 = load i64, i64* %131, align 8, !dbg !5367
  %bf.lshr443 = lshr i64 %bf.load442, 31, !dbg !5367
  %bf.clear444 = and i64 %bf.lshr443, 1, !dbg !5367
  %bf.cast445 = trunc i64 %bf.clear444 to i32, !dbg !5367
  %132 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5368
  %base446 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !5368
  %133 = bitcast %struct.tree_base* %base446 to i64*, !dbg !5368
  %134 = zext i32 %bf.cast445 to i64, !dbg !5369
  %bf.load447 = load i64, i64* %133, align 8, !dbg !5369
  %bf.value448 = and i64 %134, 1, !dbg !5369
  %bf.shl449 = shl i64 %bf.value448, 31, !dbg !5369
  %bf.clear450 = and i64 %bf.load447, -2147483649, !dbg !5369
  %bf.set451 = or i64 %bf.clear450, %bf.shl449, !dbg !5369
  store i64 %bf.set451, i64* %133, align 8, !dbg !5369
  %bf.result.cast452 = trunc i64 %bf.value448 to i32, !dbg !5369
  %135 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5370
  %common453 = bitcast %union.tree_node* %135 to %struct.tree_common*, !dbg !5370
  %type454 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common453, i32 0, i32 2, !dbg !5370
  %136 = load %union.tree_node*, %union.tree_node** %type454, align 8, !dbg !5370
  %base455 = bitcast %union.tree_node* %136 to %struct.tree_base*, !dbg !5370
  %137 = bitcast %struct.tree_base* %base455 to i64*, !dbg !5370
  %bf.load456 = load i64, i64* %137, align 8, !dbg !5370
  %bf.lshr457 = lshr i64 %bf.load456, 21, !dbg !5370
  %bf.clear458 = and i64 %bf.lshr457, 1, !dbg !5370
  %bf.cast459 = trunc i64 %bf.clear458 to i32, !dbg !5370
  %138 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5371
  %base460 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !5371
  %139 = bitcast %struct.tree_base* %base460 to i64*, !dbg !5371
  %140 = zext i32 %bf.cast459 to i64, !dbg !5372
  %bf.load461 = load i64, i64* %139, align 8, !dbg !5372
  %bf.value462 = and i64 %140, 1, !dbg !5372
  %bf.shl463 = shl i64 %bf.value462, 21, !dbg !5372
  %bf.clear464 = and i64 %bf.load461, -2097153, !dbg !5372
  %bf.set465 = or i64 %bf.clear464, %bf.shl463, !dbg !5372
  store i64 %bf.set465, i64* %139, align 8, !dbg !5372
  %bf.result.cast466 = trunc i64 %bf.value462 to i32, !dbg !5372
  %141 = load %union.tree_node*, %union.tree_node** %innertype, align 8, !dbg !5373
  %type467 = bitcast %union.tree_node* %141 to %struct.tree_type*, !dbg !5373
  %size_unit468 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type467, i32 0, i32 3, !dbg !5373
  %142 = load %union.tree_node*, %union.tree_node** %size_unit468, align 8, !dbg !5373
  %143 = load i32, i32* %nunits, align 4, !dbg !5374
  %conv469 = sext i32 %143 to i64, !dbg !5374
  %call470 = call %union.tree_node* @size_int_kind(i64 %conv469, i32 0), !dbg !5374
  %call471 = call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %142, %union.tree_node* %call470, i32 0), !dbg !5375
  %144 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5376
  %type472 = bitcast %union.tree_node* %144 to %struct.tree_type*, !dbg !5376
  %size_unit473 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type472, i32 0, i32 3, !dbg !5376
  store %union.tree_node* %call471, %union.tree_node** %size_unit473, align 8, !dbg !5377
  %145 = load %union.tree_node*, %union.tree_node** %innertype, align 8, !dbg !5378
  %type474 = bitcast %union.tree_node* %145 to %struct.tree_type*, !dbg !5378
  %size475 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type474, i32 0, i32 2, !dbg !5378
  %146 = load %union.tree_node*, %union.tree_node** %size475, align 8, !dbg !5378
  %147 = load i32, i32* %nunits, align 4, !dbg !5379
  %conv476 = sext i32 %147 to i64, !dbg !5379
  %call477 = call %union.tree_node* @size_int_kind(i64 %conv476, i32 2), !dbg !5379
  %call478 = call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %146, %union.tree_node* %call477, i32 0), !dbg !5380
  %148 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5381
  %type479 = bitcast %union.tree_node* %148 to %struct.tree_type*, !dbg !5381
  %size480 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type479, i32 0, i32 2, !dbg !5381
  store %union.tree_node* %call478, %union.tree_node** %size480, align 8, !dbg !5382
  %149 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5383
  %type481 = bitcast %union.tree_node* %149 to %struct.tree_type*, !dbg !5383
  %size482 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type481, i32 0, i32 2, !dbg !5383
  %150 = load %union.tree_node*, %union.tree_node** %size482, align 8, !dbg !5383
  %call483 = call i64 @tree_low_cst(%union.tree_node* %150, i32 0), !dbg !5384
  %conv484 = trunc i64 %call483 to i32, !dbg !5384
  %151 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5385
  %type485 = bitcast %union.tree_node* %151 to %struct.tree_type*, !dbg !5385
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type485, i32 0, i32 7, !dbg !5385
  store i32 %conv484, i32* %align, align 8, !dbg !5386
  br label %sw.epilog, !dbg !5387

sw.bb486:                                         ; preds = %if.end4
  %152 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5388
  %type487 = bitcast %union.tree_node* %152 to %struct.tree_type*, !dbg !5388
  %align488 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type487, i32 0, i32 7, !dbg !5388
  store i32 1, i32* %align488, align 8, !dbg !5389
  %153 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5390
  %common489 = bitcast %union.tree_node* %153 to %struct.tree_common*, !dbg !5390
  %base490 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common489, i32 0, i32 0, !dbg !5390
  %154 = bitcast %struct.tree_base* %base490 to i64*, !dbg !5390
  %bf.load491 = load i64, i64* %154, align 8, !dbg !5391
  %bf.clear492 = and i64 %bf.load491, -4398046511105, !dbg !5391
  store i64 %bf.clear492, i64* %154, align 8, !dbg !5391
  %155 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5392
  %type493 = bitcast %union.tree_node* %155 to %struct.tree_type*, !dbg !5392
  %mode494 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type493, i32 0, i32 6, !dbg !5392
  %bf.load495 = load i32, i32* %mode494, align 4, !dbg !5392
  %bf.clear496 = and i32 %bf.load495, -16711681, !dbg !5392
  store i32 %bf.clear496, i32* %mode494, align 4, !dbg !5392
  br label %sw.epilog, !dbg !5393

sw.bb497:                                         ; preds = %if.end4
  %call498 = call %union.tree_node* @size_int_kind(i64 32, i32 2), !dbg !5394
  %156 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5395
  %type499 = bitcast %union.tree_node* %156 to %struct.tree_type*, !dbg !5395
  %size500 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type499, i32 0, i32 2, !dbg !5395
  store %union.tree_node* %call498, %union.tree_node** %size500, align 8, !dbg !5396
  %call501 = call %union.tree_node* @size_int_kind(i64 4, i32 0), !dbg !5397
  %157 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5398
  %type502 = bitcast %union.tree_node* %157 to %struct.tree_type*, !dbg !5398
  %size_unit503 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type502, i32 0, i32 3, !dbg !5398
  store %union.tree_node* %call501, %union.tree_node** %size_unit503, align 8, !dbg !5399
  %call504 = call i32 @mode_for_size(i32 32, i32 2, i32 0), !dbg !5400
  %158 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5400
  %type505 = bitcast %union.tree_node* %158 to %struct.tree_type*, !dbg !5400
  %mode506 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type505, i32 0, i32 6, !dbg !5400
  %bf.load507 = load i32, i32* %mode506, align 4, !dbg !5400
  %bf.value508 = and i32 %call504, 255, !dbg !5400
  %bf.shl509 = shl i32 %bf.value508, 16, !dbg !5400
  %bf.clear510 = and i32 %bf.load507, -16711681, !dbg !5400
  %bf.set511 = or i32 %bf.clear510, %bf.shl509, !dbg !5400
  store i32 %bf.set511, i32* %mode506, align 4, !dbg !5400
  %159 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5401
  %type512 = bitcast %union.tree_node* %159 to %struct.tree_type*, !dbg !5401
  %precision513 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type512, i32 0, i32 6, !dbg !5401
  %bf.load514 = load i32, i32* %precision513, align 4, !dbg !5402
  %bf.clear515 = and i32 %bf.load514, -1024, !dbg !5402
  %bf.set516 = or i32 %bf.clear515, 32, !dbg !5402
  store i32 %bf.set516, i32* %precision513, align 4, !dbg !5402
  br label %sw.epilog, !dbg !5403

sw.bb517:                                         ; preds = %if.end4, %if.end4
  %call518 = call i32 @mode_for_size(i32 8, i32 2, i32 0), !dbg !5404
  %160 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5404
  %type519 = bitcast %union.tree_node* %160 to %struct.tree_type*, !dbg !5404
  %mode520 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type519, i32 0, i32 6, !dbg !5404
  %bf.load521 = load i32, i32* %mode520, align 4, !dbg !5404
  %bf.value522 = and i32 %call518, 255, !dbg !5404
  %bf.shl523 = shl i32 %bf.value522, 16, !dbg !5404
  %bf.clear524 = and i32 %bf.load521, -16711681, !dbg !5404
  %bf.set525 = or i32 %bf.clear524, %bf.shl523, !dbg !5404
  store i32 %bf.set525, i32* %mode520, align 4, !dbg !5404
  %call526 = call %union.tree_node* @size_int_kind(i64 8, i32 2), !dbg !5405
  %161 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5406
  %type527 = bitcast %union.tree_node* %161 to %struct.tree_type*, !dbg !5406
  %size528 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type527, i32 0, i32 2, !dbg !5406
  store %union.tree_node* %call526, %union.tree_node** %size528, align 8, !dbg !5407
  %call529 = call %union.tree_node* @size_int_kind(i64 1, i32 0), !dbg !5408
  %162 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5409
  %type530 = bitcast %union.tree_node* %162 to %struct.tree_type*, !dbg !5409
  %size_unit531 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type530, i32 0, i32 3, !dbg !5409
  store %union.tree_node* %call529, %union.tree_node** %size_unit531, align 8, !dbg !5410
  br label %sw.epilog, !dbg !5411

sw.bb532:                                         ; preds = %if.end4, %if.end4
  call void @llvm.dbg.declare(metadata i32* %mode533, metadata !5412, metadata !DIExpression()), !dbg !5414
  %163 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5415
  %base534 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !5415
  %164 = bitcast %struct.tree_base* %base534 to i64*, !dbg !5415
  %bf.load535 = load i64, i64* %164, align 8, !dbg !5415
  %bf.clear536 = and i64 %bf.load535, 65535, !dbg !5415
  %bf.cast537 = trunc i64 %bf.clear536 to i32, !dbg !5415
  %cmp538 = icmp eq i32 %bf.cast537, 14, !dbg !5415
  br i1 %cmp538, label %cond.true540, label %cond.false542, !dbg !5415

cond.true540:                                     ; preds = %sw.bb532
  %165 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5415
  %call541 = call i32 @vector_type_mode(%union.tree_node* %165), !dbg !5415
  br label %cond.end548, !dbg !5415

cond.false542:                                    ; preds = %sw.bb532
  %166 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5415
  %type543 = bitcast %union.tree_node* %166 to %struct.tree_type*, !dbg !5415
  %mode544 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type543, i32 0, i32 6, !dbg !5415
  %bf.load545 = load i32, i32* %mode544, align 4, !dbg !5415
  %bf.lshr546 = lshr i32 %bf.load545, 16, !dbg !5415
  %bf.clear547 = and i32 %bf.lshr546, 255, !dbg !5415
  br label %cond.end548, !dbg !5415

cond.end548:                                      ; preds = %cond.false542, %cond.true540
  %cond549 = phi i32 [ %call541, %cond.true540 ], [ %bf.clear547, %cond.false542 ], !dbg !5415
  store i32 %cond549, i32* %mode533, align 4, !dbg !5414
  %167 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5416
  %base550 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !5416
  %168 = bitcast %struct.tree_base* %base550 to i64*, !dbg !5416
  %bf.load551 = load i64, i64* %168, align 8, !dbg !5416
  %bf.clear552 = and i64 %bf.load551, 65535, !dbg !5416
  %bf.cast553 = trunc i64 %bf.clear552 to i32, !dbg !5416
  %cmp554 = icmp eq i32 %bf.cast553, 12, !dbg !5418
  br i1 %cmp554, label %land.lhs.true556, label %if.end567, !dbg !5419

land.lhs.true556:                                 ; preds = %cond.end548
  %169 = load i32, i32* @reference_types_internal, align 4, !dbg !5420
  %tobool557 = icmp ne i32 %169, 0, !dbg !5420
  br i1 %tobool557, label %if.then558, label %if.end567, !dbg !5421

if.then558:                                       ; preds = %land.lhs.true556
  call void @llvm.dbg.declare(metadata i8* %as, metadata !5422, metadata !DIExpression()), !dbg !5425
  %170 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5426
  %common559 = bitcast %union.tree_node* %170 to %struct.tree_common*, !dbg !5426
  %type560 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common559, i32 0, i32 2, !dbg !5426
  %171 = load %union.tree_node*, %union.tree_node** %type560, align 8, !dbg !5426
  %base561 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !5426
  %172 = bitcast %struct.tree_base* %base561 to i64*, !dbg !5426
  %bf.load562 = load i64, i64* %172, align 8, !dbg !5426
  %bf.lshr563 = lshr i64 %bf.load562, 56, !dbg !5426
  %bf.cast564 = trunc i64 %bf.lshr563 to i32, !dbg !5426
  %conv565 = trunc i32 %bf.cast564 to i8, !dbg !5426
  store i8 %conv565, i8* %as, align 1, !dbg !5425
  %173 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !5427
  %174 = load i8, i8* %as, align 1, !dbg !5428
  %call566 = call i32 %173(i8 zeroext %174), !dbg !5429
  store i32 %call566, i32* %mode533, align 4, !dbg !5430
  br label %if.end567, !dbg !5431

if.end567:                                        ; preds = %if.then558, %land.lhs.true556, %cond.end548
  %175 = load i32, i32* %mode533, align 4, !dbg !5432
  %idxprom568 = zext i32 %175 to i64, !dbg !5432
  %arrayidx569 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom568, !dbg !5432
  %176 = load i8, i8* %arrayidx569, align 1, !dbg !5432
  %conv570 = zext i8 %176 to i16, !dbg !5432
  %conv571 = zext i16 %conv570 to i32, !dbg !5432
  %mul572 = mul nsw i32 %conv571, 8, !dbg !5432
  %conv573 = trunc i32 %mul572 to i16, !dbg !5432
  %conv574 = zext i16 %conv573 to i64, !dbg !5432
  %call575 = call %union.tree_node* @size_int_kind(i64 %conv574, i32 2), !dbg !5432
  %177 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5433
  %type576 = bitcast %union.tree_node* %177 to %struct.tree_type*, !dbg !5433
  %size577 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type576, i32 0, i32 2, !dbg !5433
  store %union.tree_node* %call575, %union.tree_node** %size577, align 8, !dbg !5434
  %178 = load i32, i32* %mode533, align 4, !dbg !5435
  %idxprom578 = zext i32 %178 to i64, !dbg !5435
  %arrayidx579 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom578, !dbg !5435
  %179 = load i8, i8* %arrayidx579, align 1, !dbg !5435
  %conv580 = zext i8 %179 to i16, !dbg !5435
  %conv581 = zext i16 %conv580 to i64, !dbg !5435
  %call582 = call %union.tree_node* @size_int_kind(i64 %conv581, i32 0), !dbg !5435
  %180 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5436
  %type583 = bitcast %union.tree_node* %180 to %struct.tree_type*, !dbg !5436
  %size_unit584 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type583, i32 0, i32 3, !dbg !5436
  store %union.tree_node* %call582, %union.tree_node** %size_unit584, align 8, !dbg !5437
  %181 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5438
  %base585 = bitcast %union.tree_node* %181 to %struct.tree_base*, !dbg !5438
  %182 = bitcast %struct.tree_base* %base585 to i64*, !dbg !5438
  %bf.load586 = load i64, i64* %182, align 8, !dbg !5439
  %bf.clear587 = and i64 %bf.load586, -2097153, !dbg !5439
  %bf.set588 = or i64 %bf.clear587, 2097152, !dbg !5439
  store i64 %bf.set588, i64* %182, align 8, !dbg !5439
  %183 = load i32, i32* %mode533, align 4, !dbg !5440
  %idxprom589 = zext i32 %183 to i64, !dbg !5440
  %arrayidx590 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom589, !dbg !5440
  %184 = load i8, i8* %arrayidx590, align 1, !dbg !5440
  %conv591 = zext i8 %184 to i16, !dbg !5440
  %conv592 = zext i16 %conv591 to i32, !dbg !5440
  %mul593 = mul nsw i32 %conv592, 8, !dbg !5440
  %conv594 = trunc i32 %mul593 to i16, !dbg !5440
  %conv595 = zext i16 %conv594 to i32, !dbg !5440
  %185 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5441
  %type596 = bitcast %union.tree_node* %185 to %struct.tree_type*, !dbg !5441
  %precision597 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type596, i32 0, i32 6, !dbg !5441
  %bf.load598 = load i32, i32* %precision597, align 4, !dbg !5442
  %bf.value599 = and i32 %conv595, 1023, !dbg !5442
  %bf.clear600 = and i32 %bf.load598, -1024, !dbg !5442
  %bf.set601 = or i32 %bf.clear600, %bf.value599, !dbg !5442
  store i32 %bf.set601, i32* %precision597, align 4, !dbg !5442
  br label %sw.epilog, !dbg !5443

sw.bb602:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !5444, metadata !DIExpression()), !dbg !5446
  %186 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5447
  %type603 = bitcast %union.tree_node* %186 to %struct.tree_type*, !dbg !5447
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type603, i32 0, i32 1, !dbg !5447
  %187 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5447
  store %union.tree_node* %187, %union.tree_node** %index, align 8, !dbg !5446
  call void @llvm.dbg.declare(metadata %union.tree_node** %element, metadata !5448, metadata !DIExpression()), !dbg !5449
  %188 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5450
  %common604 = bitcast %union.tree_node* %188 to %struct.tree_common*, !dbg !5450
  %type605 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common604, i32 0, i32 2, !dbg !5450
  %189 = load %union.tree_node*, %union.tree_node** %type605, align 8, !dbg !5450
  store %union.tree_node* %189, %union.tree_node** %element, align 8, !dbg !5449
  %190 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5451
  %call606 = call %union.tree_node* @build_pointer_type(%union.tree_node* %190), !dbg !5452
  %191 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5453
  %tobool607 = icmp ne %union.tree_node* %191, null, !dbg !5453
  br i1 %tobool607, label %land.lhs.true608, label %if.end650, !dbg !5455

land.lhs.true608:                                 ; preds = %sw.bb602
  %192 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5456
  %type609 = bitcast %union.tree_node* %192 to %struct.tree_type*, !dbg !5456
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type609, i32 0, i32 14, !dbg !5456
  %193 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !5456
  %tobool610 = icmp ne %union.tree_node* %193, null, !dbg !5456
  br i1 %tobool610, label %land.lhs.true611, label %if.end650, !dbg !5457

land.lhs.true611:                                 ; preds = %land.lhs.true608
  %194 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5458
  %type612 = bitcast %union.tree_node* %194 to %struct.tree_type*, !dbg !5458
  %minval613 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type612, i32 0, i32 13, !dbg !5458
  %195 = load %union.tree_node*, %union.tree_node** %minval613, align 8, !dbg !5458
  %tobool614 = icmp ne %union.tree_node* %195, null, !dbg !5458
  br i1 %tobool614, label %land.lhs.true615, label %if.end650, !dbg !5459

land.lhs.true615:                                 ; preds = %land.lhs.true611
  %196 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5460
  %type616 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !5460
  %size617 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type616, i32 0, i32 2, !dbg !5460
  %197 = load %union.tree_node*, %union.tree_node** %size617, align 8, !dbg !5460
  %tobool618 = icmp ne %union.tree_node* %197, null, !dbg !5460
  br i1 %tobool618, label %if.then619, label %if.end650, !dbg !5461

if.then619:                                       ; preds = %land.lhs.true615
  call void @llvm.dbg.declare(metadata %union.tree_node** %ub, metadata !5462, metadata !DIExpression()), !dbg !5464
  %198 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5465
  %type620 = bitcast %union.tree_node* %198 to %struct.tree_type*, !dbg !5465
  %maxval621 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type620, i32 0, i32 14, !dbg !5465
  %199 = load %union.tree_node*, %union.tree_node** %maxval621, align 8, !dbg !5465
  store %union.tree_node* %199, %union.tree_node** %ub, align 8, !dbg !5464
  call void @llvm.dbg.declare(metadata %union.tree_node** %lb, metadata !5466, metadata !DIExpression()), !dbg !5467
  %200 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5468
  %type622 = bitcast %union.tree_node* %200 to %struct.tree_type*, !dbg !5468
  %minval623 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type622, i32 0, i32 13, !dbg !5468
  %201 = load %union.tree_node*, %union.tree_node** %minval623, align 8, !dbg !5468
  store %union.tree_node* %201, %union.tree_node** %lb, align 8, !dbg !5467
  call void @llvm.dbg.declare(metadata %union.tree_node** %element_size, metadata !5469, metadata !DIExpression()), !dbg !5470
  %202 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5471
  %type624 = bitcast %union.tree_node* %202 to %struct.tree_type*, !dbg !5471
  %size625 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type624, i32 0, i32 2, !dbg !5471
  %203 = load %union.tree_node*, %union.tree_node** %size625, align 8, !dbg !5471
  store %union.tree_node* %203, %union.tree_node** %element_size, align 8, !dbg !5470
  call void @llvm.dbg.declare(metadata %union.tree_node** %length, metadata !5472, metadata !DIExpression()), !dbg !5473
  %204 = load %union.tree_node*, %union.tree_node** %element_size, align 8, !dbg !5474
  %call626 = call i32 @integer_zerop(%union.tree_node* %204), !dbg !5476
  %tobool627 = icmp ne i32 %call626, 0, !dbg !5476
  br i1 %tobool627, label %if.then628, label %if.else629, !dbg !5477

if.then628:                                       ; preds = %if.then619
  %205 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !dbg !5478
  store %union.tree_node* %205, %union.tree_node** %length, align 8, !dbg !5479
  br label %if.end635, !dbg !5480

if.else629:                                       ; preds = %if.then619
  %206 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 16, !dbg !5481
  %207 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5481
  %208 = load i32, i32* @input_location, align 4, !dbg !5481
  %209 = load %union.tree_node*, %union.tree_node** %lb, align 8, !dbg !5481
  %common630 = bitcast %union.tree_node* %209 to %struct.tree_common*, !dbg !5481
  %type631 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common630, i32 0, i32 2, !dbg !5481
  %210 = load %union.tree_node*, %union.tree_node** %type631, align 8, !dbg !5481
  %211 = load %union.tree_node*, %union.tree_node** %ub, align 8, !dbg !5481
  %212 = load %union.tree_node*, %union.tree_node** %lb, align 8, !dbg !5481
  %call632 = call %union.tree_node* @fold_build2_stat_loc(i32 %208, i32 64, %union.tree_node* %210, %union.tree_node* %211, %union.tree_node* %212), !dbg !5481
  %call633 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %207, %union.tree_node* %call632), !dbg !5481
  %call634 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %206, %union.tree_node* %call633), !dbg !5481
  store %union.tree_node* %call634, %union.tree_node** %length, align 8, !dbg !5482
  br label %if.end635

if.end635:                                        ; preds = %if.else629, %if.then628
  %213 = load %union.tree_node*, %union.tree_node** %element_size, align 8, !dbg !5483
  %214 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5483
  %215 = load %union.tree_node*, %union.tree_node** %length, align 8, !dbg !5483
  %call636 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %214, %union.tree_node* %215), !dbg !5483
  %call637 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %213, %union.tree_node* %call636), !dbg !5483
  %216 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5484
  %type638 = bitcast %union.tree_node* %216 to %struct.tree_type*, !dbg !5484
  %size639 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type638, i32 0, i32 2, !dbg !5484
  store %union.tree_node* %call637, %union.tree_node** %size639, align 8, !dbg !5485
  %217 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5486
  %type640 = bitcast %union.tree_node* %217 to %struct.tree_type*, !dbg !5486
  %size_unit641 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type640, i32 0, i32 3, !dbg !5486
  %218 = load %union.tree_node*, %union.tree_node** %size_unit641, align 8, !dbg !5486
  %tobool642 = icmp ne %union.tree_node* %218, null, !dbg !5486
  br i1 %tobool642, label %if.then643, label %if.end649, !dbg !5488

if.then643:                                       ; preds = %if.end635
  %219 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5489
  %type644 = bitcast %union.tree_node* %219 to %struct.tree_type*, !dbg !5489
  %size_unit645 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type644, i32 0, i32 3, !dbg !5489
  %220 = load %union.tree_node*, %union.tree_node** %size_unit645, align 8, !dbg !5489
  %221 = load %union.tree_node*, %union.tree_node** %length, align 8, !dbg !5489
  %call646 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %220, %union.tree_node* %221), !dbg !5489
  %222 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5490
  %type647 = bitcast %union.tree_node* %222 to %struct.tree_type*, !dbg !5490
  %size_unit648 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type647, i32 0, i32 3, !dbg !5490
  store %union.tree_node* %call646, %union.tree_node** %size_unit648, align 8, !dbg !5491
  br label %if.end649, !dbg !5490

if.end649:                                        ; preds = %if.then643, %if.end635
  br label %if.end650, !dbg !5492

if.end650:                                        ; preds = %if.end649, %land.lhs.true615, %land.lhs.true611, %land.lhs.true608, %sw.bb602
  %223 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5493
  %type651 = bitcast %union.tree_node* %223 to %struct.tree_type*, !dbg !5493
  %align652 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type651, i32 0, i32 7, !dbg !5493
  %224 = load i32, i32* %align652, align 8, !dbg !5493
  %cmp653 = icmp ugt i32 %224, 8, !dbg !5493
  br i1 %cmp653, label %cond.true655, label %cond.false658, !dbg !5493

cond.true655:                                     ; preds = %if.end650
  %225 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5493
  %type656 = bitcast %union.tree_node* %225 to %struct.tree_type*, !dbg !5493
  %align657 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type656, i32 0, i32 7, !dbg !5493
  %226 = load i32, i32* %align657, align 8, !dbg !5493
  br label %cond.end659, !dbg !5493

cond.false658:                                    ; preds = %if.end650
  br label %cond.end659, !dbg !5493

cond.end659:                                      ; preds = %cond.false658, %cond.true655
  %cond660 = phi i32 [ %226, %cond.true655 ], [ 8, %cond.false658 ], !dbg !5493
  %227 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5494
  %type661 = bitcast %union.tree_node* %227 to %struct.tree_type*, !dbg !5494
  %align662 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type661, i32 0, i32 7, !dbg !5494
  store i32 %cond660, i32* %align662, align 8, !dbg !5495
  %228 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5496
  %type663 = bitcast %union.tree_node* %228 to %struct.tree_type*, !dbg !5496
  %size664 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type663, i32 0, i32 2, !dbg !5496
  %229 = load %union.tree_node*, %union.tree_node** %size664, align 8, !dbg !5496
  %tobool665 = icmp ne %union.tree_node* %229, null, !dbg !5496
  br i1 %tobool665, label %if.end668, label %if.then666, !dbg !5498

if.then666:                                       ; preds = %cond.end659
  %230 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5499
  %type667 = bitcast %union.tree_node* %230 to %struct.tree_type*, !dbg !5499
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type667, i32 0, i32 19, !dbg !5499
  store %union.tree_node* null, %union.tree_node** %canonical, align 8, !dbg !5499
  br label %if.end668, !dbg !5499

if.end668:                                        ; preds = %if.then666, %cond.end659
  %231 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5500
  %common669 = bitcast %union.tree_node* %231 to %struct.tree_common*, !dbg !5500
  %base670 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common669, i32 0, i32 0, !dbg !5500
  %232 = bitcast %struct.tree_base* %base670 to i64*, !dbg !5500
  %bf.load671 = load i64, i64* %232, align 8, !dbg !5500
  %bf.lshr672 = lshr i64 %bf.load671, 42, !dbg !5500
  %bf.clear673 = and i64 %bf.lshr672, 1, !dbg !5500
  %bf.cast674 = trunc i64 %bf.clear673 to i32, !dbg !5500
  %233 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5501
  %common675 = bitcast %union.tree_node* %233 to %struct.tree_common*, !dbg !5501
  %base676 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common675, i32 0, i32 0, !dbg !5501
  %234 = bitcast %struct.tree_base* %base676 to i64*, !dbg !5501
  %235 = zext i32 %bf.cast674 to i64, !dbg !5502
  %bf.load677 = load i64, i64* %234, align 8, !dbg !5502
  %bf.value678 = and i64 %235, 1, !dbg !5502
  %bf.shl679 = shl i64 %bf.value678, 42, !dbg !5502
  %bf.clear680 = and i64 %bf.load677, -4398046511105, !dbg !5502
  %bf.set681 = or i64 %bf.clear680, %bf.shl679, !dbg !5502
  store i64 %bf.set681, i64* %234, align 8, !dbg !5502
  %bf.result.cast682 = trunc i64 %bf.value678 to i32, !dbg !5502
  %236 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5503
  %type683 = bitcast %union.tree_node* %236 to %struct.tree_type*, !dbg !5503
  %mode684 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type683, i32 0, i32 6, !dbg !5503
  %bf.load685 = load i32, i32* %mode684, align 4, !dbg !5503
  %bf.clear686 = and i32 %bf.load685, -16711681, !dbg !5503
  %bf.set687 = or i32 %bf.clear686, 65536, !dbg !5503
  store i32 %bf.set687, i32* %mode684, align 4, !dbg !5503
  %237 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5504
  %type688 = bitcast %union.tree_node* %237 to %struct.tree_type*, !dbg !5504
  %size689 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type688, i32 0, i32 2, !dbg !5504
  %238 = load %union.tree_node*, %union.tree_node** %size689, align 8, !dbg !5504
  %cmp690 = icmp ne %union.tree_node* %238, null, !dbg !5506
  br i1 %cmp690, label %land.lhs.true692, label %if.end838, !dbg !5507

land.lhs.true692:                                 ; preds = %if.end668
  %239 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5508
  %common693 = bitcast %union.tree_node* %239 to %struct.tree_common*, !dbg !5508
  %type694 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common693, i32 0, i32 2, !dbg !5508
  %240 = load %union.tree_node*, %union.tree_node** %type694, align 8, !dbg !5508
  %base695 = bitcast %union.tree_node* %240 to %struct.tree_base*, !dbg !5508
  %241 = bitcast %struct.tree_base* %base695 to i64*, !dbg !5508
  %bf.load696 = load i64, i64* %241, align 8, !dbg !5508
  %bf.clear697 = and i64 %bf.load696, 65535, !dbg !5508
  %bf.cast698 = trunc i64 %bf.clear697 to i32, !dbg !5508
  %cmp699 = icmp eq i32 %bf.cast698, 14, !dbg !5508
  br i1 %cmp699, label %cond.true701, label %cond.false705, !dbg !5508

cond.true701:                                     ; preds = %land.lhs.true692
  %242 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5508
  %common702 = bitcast %union.tree_node* %242 to %struct.tree_common*, !dbg !5508
  %type703 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common702, i32 0, i32 2, !dbg !5508
  %243 = load %union.tree_node*, %union.tree_node** %type703, align 8, !dbg !5508
  %call704 = call i32 @vector_type_mode(%union.tree_node* %243), !dbg !5508
  br label %cond.end713, !dbg !5508

cond.false705:                                    ; preds = %land.lhs.true692
  %244 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5508
  %common706 = bitcast %union.tree_node* %244 to %struct.tree_common*, !dbg !5508
  %type707 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common706, i32 0, i32 2, !dbg !5508
  %245 = load %union.tree_node*, %union.tree_node** %type707, align 8, !dbg !5508
  %type708 = bitcast %union.tree_node* %245 to %struct.tree_type*, !dbg !5508
  %mode709 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type708, i32 0, i32 6, !dbg !5508
  %bf.load710 = load i32, i32* %mode709, align 4, !dbg !5508
  %bf.lshr711 = lshr i32 %bf.load710, 16, !dbg !5508
  %bf.clear712 = and i32 %bf.lshr711, 255, !dbg !5508
  br label %cond.end713, !dbg !5508

cond.end713:                                      ; preds = %cond.false705, %cond.true701
  %cond714 = phi i32 [ %call704, %cond.true701 ], [ %bf.clear712, %cond.false705 ], !dbg !5508
  %cmp715 = icmp ne i32 %cond714, 1, !dbg !5509
  br i1 %cmp715, label %if.then725, label %lor.lhs.false717, !dbg !5510

lor.lhs.false717:                                 ; preds = %cond.end713
  %246 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5511
  %common718 = bitcast %union.tree_node* %246 to %struct.tree_common*, !dbg !5511
  %type719 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common718, i32 0, i32 2, !dbg !5511
  %247 = load %union.tree_node*, %union.tree_node** %type719, align 8, !dbg !5511
  %type720 = bitcast %union.tree_node* %247 to %struct.tree_type*, !dbg !5511
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type720, i32 0, i32 6, !dbg !5511
  %bf.load721 = load i32, i32* %no_force_blk_flag, align 4, !dbg !5511
  %bf.lshr722 = lshr i32 %bf.load721, 10, !dbg !5511
  %bf.clear723 = and i32 %bf.lshr722, 1, !dbg !5511
  %tobool724 = icmp ne i32 %bf.clear723, 0, !dbg !5511
  br i1 %tobool724, label %if.then725, label %if.end838, !dbg !5512

if.then725:                                       ; preds = %lor.lhs.false717, %cond.end713
  %248 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5513
  %type726 = bitcast %union.tree_node* %248 to %struct.tree_type*, !dbg !5513
  %size727 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type726, i32 0, i32 2, !dbg !5513
  %249 = load %union.tree_node*, %union.tree_node** %size727, align 8, !dbg !5513
  %250 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5516
  %common728 = bitcast %union.tree_node* %250 to %struct.tree_common*, !dbg !5516
  %type729 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common728, i32 0, i32 2, !dbg !5516
  %251 = load %union.tree_node*, %union.tree_node** %type729, align 8, !dbg !5516
  %type730 = bitcast %union.tree_node* %251 to %struct.tree_type*, !dbg !5516
  %size731 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type730, i32 0, i32 2, !dbg !5516
  %252 = load %union.tree_node*, %union.tree_node** %size731, align 8, !dbg !5516
  %call732 = call i32 @simple_cst_equal(%union.tree_node* %249, %union.tree_node* %252), !dbg !5517
  %tobool733 = icmp ne i32 %call732, 0, !dbg !5517
  br i1 %tobool733, label %if.then734, label %if.else764, !dbg !5518

if.then734:                                       ; preds = %if.then725
  %253 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5519
  %common735 = bitcast %union.tree_node* %253 to %struct.tree_common*, !dbg !5519
  %type736 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common735, i32 0, i32 2, !dbg !5519
  %254 = load %union.tree_node*, %union.tree_node** %type736, align 8, !dbg !5519
  %base737 = bitcast %union.tree_node* %254 to %struct.tree_base*, !dbg !5519
  %255 = bitcast %struct.tree_base* %base737 to i64*, !dbg !5519
  %bf.load738 = load i64, i64* %255, align 8, !dbg !5519
  %bf.clear739 = and i64 %bf.load738, 65535, !dbg !5519
  %bf.cast740 = trunc i64 %bf.clear739 to i32, !dbg !5519
  %cmp741 = icmp eq i32 %bf.cast740, 14, !dbg !5519
  br i1 %cmp741, label %cond.true743, label %cond.false747, !dbg !5519

cond.true743:                                     ; preds = %if.then734
  %256 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5519
  %common744 = bitcast %union.tree_node* %256 to %struct.tree_common*, !dbg !5519
  %type745 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common744, i32 0, i32 2, !dbg !5519
  %257 = load %union.tree_node*, %union.tree_node** %type745, align 8, !dbg !5519
  %call746 = call i32 @vector_type_mode(%union.tree_node* %257), !dbg !5519
  br label %cond.end755, !dbg !5519

cond.false747:                                    ; preds = %if.then734
  %258 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5519
  %common748 = bitcast %union.tree_node* %258 to %struct.tree_common*, !dbg !5519
  %type749 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common748, i32 0, i32 2, !dbg !5519
  %259 = load %union.tree_node*, %union.tree_node** %type749, align 8, !dbg !5519
  %type750 = bitcast %union.tree_node* %259 to %struct.tree_type*, !dbg !5519
  %mode751 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type750, i32 0, i32 6, !dbg !5519
  %bf.load752 = load i32, i32* %mode751, align 4, !dbg !5519
  %bf.lshr753 = lshr i32 %bf.load752, 16, !dbg !5519
  %bf.clear754 = and i32 %bf.lshr753, 255, !dbg !5519
  br label %cond.end755, !dbg !5519

cond.end755:                                      ; preds = %cond.false747, %cond.true743
  %cond756 = phi i32 [ %call746, %cond.true743 ], [ %bf.clear754, %cond.false747 ], !dbg !5519
  %260 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5519
  %type757 = bitcast %union.tree_node* %260 to %struct.tree_type*, !dbg !5519
  %mode758 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type757, i32 0, i32 6, !dbg !5519
  %bf.load759 = load i32, i32* %mode758, align 4, !dbg !5519
  %bf.value760 = and i32 %cond756, 255, !dbg !5519
  %bf.shl761 = shl i32 %bf.value760, 16, !dbg !5519
  %bf.clear762 = and i32 %bf.load759, -16711681, !dbg !5519
  %bf.set763 = or i32 %bf.clear762, %bf.shl761, !dbg !5519
  store i32 %bf.set763, i32* %mode758, align 4, !dbg !5519
  br label %if.end775, !dbg !5519

if.else764:                                       ; preds = %if.then725
  %261 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5520
  %type765 = bitcast %union.tree_node* %261 to %struct.tree_type*, !dbg !5520
  %size766 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type765, i32 0, i32 2, !dbg !5520
  %262 = load %union.tree_node*, %union.tree_node** %size766, align 8, !dbg !5520
  %call767 = call i32 @mode_for_size_tree(%union.tree_node* %262, i32 2, i32 1), !dbg !5520
  %263 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5520
  %type768 = bitcast %union.tree_node* %263 to %struct.tree_type*, !dbg !5520
  %mode769 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type768, i32 0, i32 6, !dbg !5520
  %bf.load770 = load i32, i32* %mode769, align 4, !dbg !5520
  %bf.value771 = and i32 %call767, 255, !dbg !5520
  %bf.shl772 = shl i32 %bf.value771, 16, !dbg !5520
  %bf.clear773 = and i32 %bf.load770, -16711681, !dbg !5520
  %bf.set774 = or i32 %bf.clear773, %bf.shl772, !dbg !5520
  store i32 %bf.set774, i32* %mode769, align 4, !dbg !5520
  br label %if.end775

if.end775:                                        ; preds = %if.else764, %cond.end755
  %264 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5521
  %base776 = bitcast %union.tree_node* %264 to %struct.tree_base*, !dbg !5521
  %265 = bitcast %struct.tree_base* %base776 to i64*, !dbg !5521
  %bf.load777 = load i64, i64* %265, align 8, !dbg !5521
  %bf.clear778 = and i64 %bf.load777, 65535, !dbg !5521
  %bf.cast779 = trunc i64 %bf.clear778 to i32, !dbg !5521
  %cmp780 = icmp eq i32 %bf.cast779, 14, !dbg !5521
  br i1 %cmp780, label %cond.true782, label %cond.false784, !dbg !5521

cond.true782:                                     ; preds = %if.end775
  %266 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5521
  %call783 = call i32 @vector_type_mode(%union.tree_node* %266), !dbg !5521
  br label %cond.end790, !dbg !5521

cond.false784:                                    ; preds = %if.end775
  %267 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5521
  %type785 = bitcast %union.tree_node* %267 to %struct.tree_type*, !dbg !5521
  %mode786 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type785, i32 0, i32 6, !dbg !5521
  %bf.load787 = load i32, i32* %mode786, align 4, !dbg !5521
  %bf.lshr788 = lshr i32 %bf.load787, 16, !dbg !5521
  %bf.clear789 = and i32 %bf.lshr788, 255, !dbg !5521
  br label %cond.end790, !dbg !5521

cond.end790:                                      ; preds = %cond.false784, %cond.true782
  %cond791 = phi i32 [ %call783, %cond.true782 ], [ %bf.clear789, %cond.false784 ], !dbg !5521
  %cmp792 = icmp ne i32 %cond791, 1, !dbg !5523
  br i1 %cmp792, label %land.lhs.true794, label %if.end837, !dbg !5524

land.lhs.true794:                                 ; preds = %cond.end790
  br i1 false, label %land.lhs.true795, label %if.end837, !dbg !5525

land.lhs.true795:                                 ; preds = %land.lhs.true794
  %268 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5526
  %type796 = bitcast %union.tree_node* %268 to %struct.tree_type*, !dbg !5526
  %align797 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type796, i32 0, i32 7, !dbg !5526
  %269 = load i32, i32* %align797, align 8, !dbg !5526
  %270 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5527
  %and798 = and i32 %270, 32, !dbg !5527
  %cmp799 = icmp ne i32 %and798, 0, !dbg !5527
  %271 = zext i1 %cmp799 to i64, !dbg !5527
  %cond801 = select i1 %cmp799, i32 256, i32 128, !dbg !5527
  %cmp802 = icmp ult i32 %269, %cond801, !dbg !5528
  br i1 %cmp802, label %land.lhs.true804, label %if.end837, !dbg !5529

land.lhs.true804:                                 ; preds = %land.lhs.true795
  %272 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5530
  %type805 = bitcast %union.tree_node* %272 to %struct.tree_type*, !dbg !5530
  %align806 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type805, i32 0, i32 7, !dbg !5530
  %273 = load i32, i32* %align806, align 8, !dbg !5530
  %274 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5531
  %base807 = bitcast %union.tree_node* %274 to %struct.tree_base*, !dbg !5531
  %275 = bitcast %struct.tree_base* %base807 to i64*, !dbg !5531
  %bf.load808 = load i64, i64* %275, align 8, !dbg !5531
  %bf.clear809 = and i64 %bf.load808, 65535, !dbg !5531
  %bf.cast810 = trunc i64 %bf.clear809 to i32, !dbg !5531
  %cmp811 = icmp eq i32 %bf.cast810, 14, !dbg !5531
  br i1 %cmp811, label %cond.true813, label %cond.false815, !dbg !5531

cond.true813:                                     ; preds = %land.lhs.true804
  %276 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5531
  %call814 = call i32 @vector_type_mode(%union.tree_node* %276), !dbg !5531
  br label %cond.end821, !dbg !5531

cond.false815:                                    ; preds = %land.lhs.true804
  %277 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5531
  %type816 = bitcast %union.tree_node* %277 to %struct.tree_type*, !dbg !5531
  %mode817 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type816, i32 0, i32 6, !dbg !5531
  %bf.load818 = load i32, i32* %mode817, align 4, !dbg !5531
  %bf.lshr819 = lshr i32 %bf.load818, 16, !dbg !5531
  %bf.clear820 = and i32 %bf.lshr819, 255, !dbg !5531
  br label %cond.end821, !dbg !5531

cond.end821:                                      ; preds = %cond.false815, %cond.true813
  %cond822 = phi i32 [ %call814, %cond.true813 ], [ %bf.clear820, %cond.false815 ], !dbg !5531
  %call823 = call i32 @get_mode_alignment(i32 %cond822), !dbg !5531
  %cmp824 = icmp ult i32 %273, %call823, !dbg !5532
  br i1 %cmp824, label %if.then826, label %if.end837, !dbg !5533

if.then826:                                       ; preds = %cond.end821
  %278 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5534
  %type827 = bitcast %union.tree_node* %278 to %struct.tree_type*, !dbg !5534
  %no_force_blk_flag828 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type827, i32 0, i32 6, !dbg !5534
  %bf.load829 = load i32, i32* %no_force_blk_flag828, align 4, !dbg !5536
  %bf.clear830 = and i32 %bf.load829, -1025, !dbg !5536
  %bf.set831 = or i32 %bf.clear830, 1024, !dbg !5536
  store i32 %bf.set831, i32* %no_force_blk_flag828, align 4, !dbg !5536
  %279 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5537
  %type832 = bitcast %union.tree_node* %279 to %struct.tree_type*, !dbg !5537
  %mode833 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type832, i32 0, i32 6, !dbg !5537
  %bf.load834 = load i32, i32* %mode833, align 4, !dbg !5537
  %bf.clear835 = and i32 %bf.load834, -16711681, !dbg !5537
  %bf.set836 = or i32 %bf.clear835, 65536, !dbg !5537
  store i32 %bf.set836, i32* %mode833, align 4, !dbg !5537
  br label %if.end837, !dbg !5538

if.end837:                                        ; preds = %if.then826, %cond.end821, %land.lhs.true795, %land.lhs.true794, %cond.end790
  br label %if.end838, !dbg !5539

if.end838:                                        ; preds = %if.end837, %lor.lhs.false717, %if.end668
  %280 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5540
  %type839 = bitcast %union.tree_node* %280 to %struct.tree_type*, !dbg !5540
  %size_unit840 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type839, i32 0, i32 3, !dbg !5540
  %281 = load %union.tree_node*, %union.tree_node** %size_unit840, align 8, !dbg !5540
  %tobool841 = icmp ne %union.tree_node* %281, null, !dbg !5540
  br i1 %tobool841, label %land.lhs.true842, label %if.end875, !dbg !5542

land.lhs.true842:                                 ; preds = %if.end838
  %282 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5543
  %type843 = bitcast %union.tree_node* %282 to %struct.tree_type*, !dbg !5543
  %size_unit844 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type843, i32 0, i32 3, !dbg !5543
  %283 = load %union.tree_node*, %union.tree_node** %size_unit844, align 8, !dbg !5543
  %base845 = bitcast %union.tree_node* %283 to %struct.tree_base*, !dbg !5543
  %284 = bitcast %struct.tree_base* %base845 to i64*, !dbg !5543
  %bf.load846 = load i64, i64* %284, align 8, !dbg !5543
  %bf.clear847 = and i64 %bf.load846, 65535, !dbg !5543
  %bf.cast848 = trunc i64 %bf.clear847 to i32, !dbg !5543
  %cmp849 = icmp eq i32 %bf.cast848, 23, !dbg !5544
  br i1 %cmp849, label %land.lhs.true851, label %if.end875, !dbg !5545

land.lhs.true851:                                 ; preds = %land.lhs.true842
  %285 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5546
  %type852 = bitcast %union.tree_node* %285 to %struct.tree_type*, !dbg !5546
  %size_unit853 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type852, i32 0, i32 3, !dbg !5546
  %286 = load %union.tree_node*, %union.tree_node** %size_unit853, align 8, !dbg !5546
  %base854 = bitcast %union.tree_node* %286 to %struct.tree_base*, !dbg !5546
  %287 = bitcast %struct.tree_base* %base854 to i64*, !dbg !5546
  %bf.load855 = load i64, i64* %287, align 8, !dbg !5546
  %bf.lshr856 = lshr i64 %bf.load855, 27, !dbg !5546
  %bf.clear857 = and i64 %bf.lshr856, 1, !dbg !5546
  %bf.cast858 = trunc i64 %bf.clear857 to i32, !dbg !5546
  %tobool859 = icmp ne i32 %bf.cast858, 0, !dbg !5546
  br i1 %tobool859, label %if.end875, label %land.lhs.true860, !dbg !5547

land.lhs.true860:                                 ; preds = %land.lhs.true851
  %288 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5548
  %type861 = bitcast %union.tree_node* %288 to %struct.tree_type*, !dbg !5548
  %size_unit862 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type861, i32 0, i32 3, !dbg !5548
  %289 = load %union.tree_node*, %union.tree_node** %size_unit862, align 8, !dbg !5548
  %call863 = call i32 @integer_zerop(%union.tree_node* %289), !dbg !5549
  %tobool864 = icmp ne i32 %call863, 0, !dbg !5549
  br i1 %tobool864, label %if.end875, label %land.lhs.true865, !dbg !5550

land.lhs.true865:                                 ; preds = %land.lhs.true860
  %290 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5551
  %type866 = bitcast %union.tree_node* %290 to %struct.tree_type*, !dbg !5551
  %size_unit867 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type866, i32 0, i32 3, !dbg !5551
  %291 = load %union.tree_node*, %union.tree_node** %size_unit867, align 8, !dbg !5551
  %292 = load %union.tree_node*, %union.tree_node** %element, align 8, !dbg !5552
  %type868 = bitcast %union.tree_node* %292 to %struct.tree_type*, !dbg !5552
  %align869 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type868, i32 0, i32 7, !dbg !5552
  %293 = load i32, i32* %align869, align 8, !dbg !5552
  %div = udiv i32 %293, 8, !dbg !5552
  %conv870 = zext i32 %div to i64, !dbg !5552
  %call871 = call i32 @compare_tree_int(%union.tree_node* %291, i64 %conv870), !dbg !5553
  %cmp872 = icmp slt i32 %call871, 0, !dbg !5554
  br i1 %cmp872, label %if.then874, label %if.end875, !dbg !5555

if.then874:                                       ; preds = %land.lhs.true865
  call void (i8*, ...) @error(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.16, i64 0, i64 0)), !dbg !5556
  br label %if.end875, !dbg !5556

if.end875:                                        ; preds = %if.then874, %land.lhs.true865, %land.lhs.true860, %land.lhs.true851, %land.lhs.true842, %if.end838
  br label %sw.epilog, !dbg !5557

sw.bb876:                                         ; preds = %if.end4, %if.end4, %if.end4
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5558, metadata !DIExpression()), !dbg !5560
  call void @llvm.dbg.declare(metadata %struct.record_layout_info_s** %rli, metadata !5561, metadata !DIExpression()), !dbg !5562
  %294 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5563
  %call877 = call %struct.record_layout_info_s* @start_record_layout(%union.tree_node* %294), !dbg !5564
  store %struct.record_layout_info_s* %call877, %struct.record_layout_info_s** %rli, align 8, !dbg !5565
  %295 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5566
  %base878 = bitcast %union.tree_node* %295 to %struct.tree_base*, !dbg !5566
  %296 = bitcast %struct.tree_base* %base878 to i64*, !dbg !5566
  %bf.load879 = load i64, i64* %296, align 8, !dbg !5566
  %bf.clear880 = and i64 %bf.load879, 65535, !dbg !5566
  %bf.cast881 = trunc i64 %bf.clear880 to i32, !dbg !5566
  %cmp882 = icmp eq i32 %bf.cast881, 18, !dbg !5568
  br i1 %cmp882, label %if.then884, label %if.end890, !dbg !5569

if.then884:                                       ; preds = %sw.bb876
  %297 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5570
  %type885 = bitcast %union.tree_node* %297 to %struct.tree_type*, !dbg !5570
  %values886 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type885, i32 0, i32 1, !dbg !5570
  %298 = load %union.tree_node*, %union.tree_node** %values886, align 8, !dbg !5570
  %call887 = call %union.tree_node* @nreverse(%union.tree_node* %298), !dbg !5571
  %299 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5572
  %type888 = bitcast %union.tree_node* %299 to %struct.tree_type*, !dbg !5572
  %values889 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type888, i32 0, i32 1, !dbg !5572
  store %union.tree_node* %call887, %union.tree_node** %values889, align 8, !dbg !5573
  br label %if.end890, !dbg !5572

if.end890:                                        ; preds = %if.then884, %sw.bb876
  %300 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5574
  %type891 = bitcast %union.tree_node* %300 to %struct.tree_type*, !dbg !5574
  %values892 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type891, i32 0, i32 1, !dbg !5574
  %301 = load %union.tree_node*, %union.tree_node** %values892, align 8, !dbg !5574
  store %union.tree_node* %301, %union.tree_node** %field, align 8, !dbg !5576
  br label %for.cond893, !dbg !5577

for.cond893:                                      ; preds = %for.inc896, %if.end890
  %302 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5578
  %tobool894 = icmp ne %union.tree_node* %302, null, !dbg !5580
  br i1 %tobool894, label %for.body895, label %for.end898, !dbg !5580

for.body895:                                      ; preds = %for.cond893
  %303 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !5581
  %304 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5582
  call void @place_field(%struct.record_layout_info_s* %303, %union.tree_node* %304), !dbg !5583
  br label %for.inc896, !dbg !5583

for.inc896:                                       ; preds = %for.body895
  %305 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5584
  %common897 = bitcast %union.tree_node* %305 to %struct.tree_common*, !dbg !5584
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common897, i32 0, i32 1, !dbg !5584
  %306 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5584
  store %union.tree_node* %306, %union.tree_node** %field, align 8, !dbg !5585
  br label %for.cond893, !dbg !5586, !llvm.loop !5587

for.end898:                                       ; preds = %for.cond893
  %307 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5589
  %base899 = bitcast %union.tree_node* %307 to %struct.tree_base*, !dbg !5589
  %308 = bitcast %struct.tree_base* %base899 to i64*, !dbg !5589
  %bf.load900 = load i64, i64* %308, align 8, !dbg !5589
  %bf.clear901 = and i64 %bf.load900, 65535, !dbg !5589
  %bf.cast902 = trunc i64 %bf.clear901 to i32, !dbg !5589
  %cmp903 = icmp eq i32 %bf.cast902, 18, !dbg !5591
  br i1 %cmp903, label %if.then905, label %if.end911, !dbg !5592

if.then905:                                       ; preds = %for.end898
  %309 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5593
  %type906 = bitcast %union.tree_node* %309 to %struct.tree_type*, !dbg !5593
  %values907 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type906, i32 0, i32 1, !dbg !5593
  %310 = load %union.tree_node*, %union.tree_node** %values907, align 8, !dbg !5593
  %call908 = call %union.tree_node* @nreverse(%union.tree_node* %310), !dbg !5594
  %311 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5595
  %type909 = bitcast %union.tree_node* %311 to %struct.tree_type*, !dbg !5595
  %values910 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type909, i32 0, i32 1, !dbg !5595
  store %union.tree_node* %call908, %union.tree_node** %values910, align 8, !dbg !5596
  br label %if.end911, !dbg !5595

if.end911:                                        ; preds = %if.then905, %for.end898
  %312 = load %struct.record_layout_info_s*, %struct.record_layout_info_s** %rli, align 8, !dbg !5597
  call void @finish_record_layout(%struct.record_layout_info_s* %312, i32 1), !dbg !5598
  br label %sw.epilog, !dbg !5599

sw.default:                                       ; preds = %if.end4
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2084, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5600
  br label %sw.epilog, !dbg !5601

sw.epilog:                                        ; preds = %sw.default, %if.end911, %if.end875, %if.end567, %sw.bb517, %sw.bb497, %sw.bb486, %if.end438, %cond.end272, %cond.end186, %cond.end136, %cond.end75
  %313 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5602
  %base912 = bitcast %union.tree_node* %313 to %struct.tree_base*, !dbg !5602
  %314 = bitcast %struct.tree_base* %base912 to i64*, !dbg !5602
  %bf.load913 = load i64, i64* %314, align 8, !dbg !5602
  %bf.clear914 = and i64 %bf.load913, 65535, !dbg !5602
  %bf.cast915 = trunc i64 %bf.clear914 to i32, !dbg !5602
  %cmp916 = icmp ne i32 %bf.cast915, 16, !dbg !5604
  br i1 %cmp916, label %land.lhs.true918, label %if.end933, !dbg !5605

land.lhs.true918:                                 ; preds = %sw.epilog
  %315 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5606
  %base919 = bitcast %union.tree_node* %315 to %struct.tree_base*, !dbg !5606
  %316 = bitcast %struct.tree_base* %base919 to i64*, !dbg !5606
  %bf.load920 = load i64, i64* %316, align 8, !dbg !5606
  %bf.clear921 = and i64 %bf.load920, 65535, !dbg !5606
  %bf.cast922 = trunc i64 %bf.clear921 to i32, !dbg !5606
  %cmp923 = icmp ne i32 %bf.cast922, 17, !dbg !5607
  br i1 %cmp923, label %land.lhs.true925, label %if.end933, !dbg !5608

land.lhs.true925:                                 ; preds = %land.lhs.true918
  %317 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5609
  %base926 = bitcast %union.tree_node* %317 to %struct.tree_base*, !dbg !5609
  %318 = bitcast %struct.tree_base* %base926 to i64*, !dbg !5609
  %bf.load927 = load i64, i64* %318, align 8, !dbg !5609
  %bf.clear928 = and i64 %bf.load927, 65535, !dbg !5609
  %bf.cast929 = trunc i64 %bf.clear928 to i32, !dbg !5609
  %cmp930 = icmp ne i32 %bf.cast929, 18, !dbg !5610
  br i1 %cmp930, label %if.then932, label %if.end933, !dbg !5611

if.then932:                                       ; preds = %land.lhs.true925
  %319 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5612
  call void @finalize_type_size(%union.tree_node* %319), !dbg !5613
  br label %if.end933, !dbg !5613

if.end933:                                        ; preds = %if.then932, %land.lhs.true925, %land.lhs.true918, %sw.epilog
  %320 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5614
  %base934 = bitcast %union.tree_node* %320 to %struct.tree_base*, !dbg !5614
  %321 = bitcast %struct.tree_base* %base934 to i64*, !dbg !5614
  %bf.load935 = load i64, i64* %321, align 8, !dbg !5614
  %bf.clear936 = and i64 %bf.load935, 65535, !dbg !5614
  %bf.cast937 = trunc i64 %bf.clear936 to i32, !dbg !5614
  %cmp938 = icmp eq i32 %bf.cast937, 15, !dbg !5614
  br i1 %cmp938, label %if.then961, label %lor.lhs.false940, !dbg !5614

lor.lhs.false940:                                 ; preds = %if.end933
  %322 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5614
  %base941 = bitcast %union.tree_node* %322 to %struct.tree_base*, !dbg !5614
  %323 = bitcast %struct.tree_base* %base941 to i64*, !dbg !5614
  %bf.load942 = load i64, i64* %323, align 8, !dbg !5614
  %bf.clear943 = and i64 %bf.load942, 65535, !dbg !5614
  %bf.cast944 = trunc i64 %bf.clear943 to i32, !dbg !5614
  %cmp945 = icmp eq i32 %bf.cast944, 16, !dbg !5614
  br i1 %cmp945, label %if.then961, label %lor.lhs.false947, !dbg !5614

lor.lhs.false947:                                 ; preds = %lor.lhs.false940
  %324 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5614
  %base948 = bitcast %union.tree_node* %324 to %struct.tree_base*, !dbg !5614
  %325 = bitcast %struct.tree_base* %base948 to i64*, !dbg !5614
  %bf.load949 = load i64, i64* %325, align 8, !dbg !5614
  %bf.clear950 = and i64 %bf.load949, 65535, !dbg !5614
  %bf.cast951 = trunc i64 %bf.clear950 to i32, !dbg !5614
  %cmp952 = icmp eq i32 %bf.cast951, 17, !dbg !5614
  br i1 %cmp952, label %if.then961, label %lor.lhs.false954, !dbg !5614

lor.lhs.false954:                                 ; preds = %lor.lhs.false947
  %326 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5614
  %base955 = bitcast %union.tree_node* %326 to %struct.tree_base*, !dbg !5614
  %327 = bitcast %struct.tree_base* %base955 to i64*, !dbg !5614
  %bf.load956 = load i64, i64* %327, align 8, !dbg !5614
  %bf.clear957 = and i64 %bf.load956, 65535, !dbg !5614
  %bf.cast958 = trunc i64 %bf.clear957 to i32, !dbg !5614
  %cmp959 = icmp eq i32 %bf.cast958, 18, !dbg !5614
  br i1 %cmp959, label %if.then961, label %if.end969, !dbg !5616

if.then961:                                       ; preds = %lor.lhs.false954, %lor.lhs.false947, %lor.lhs.false940, %if.end933
  %328 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5617
  %type962 = bitcast %union.tree_node* %328 to %struct.tree_type*, !dbg !5617
  %alias_set = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type962, i32 0, i32 8, !dbg !5617
  %329 = load i32, i32* %alias_set, align 4, !dbg !5617
  %cmp963 = icmp ne i32 %329, -1, !dbg !5617
  br i1 %cmp963, label %cond.true965, label %cond.false966, !dbg !5617

cond.true965:                                     ; preds = %if.then961
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2098, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5617
  br label %cond.end967, !dbg !5617

cond.false966:                                    ; preds = %if.then961
  br label %cond.end967, !dbg !5617

cond.end967:                                      ; preds = %cond.false966, %cond.true965
  %cond968 = phi i32 [ 0, %cond.true965 ], [ 0, %cond.false966 ], !dbg !5617
  br label %if.end969, !dbg !5617

if.end969:                                        ; preds = %if.then, %if.then3, %cond.end967, %lor.lhs.false954
  ret void, !dbg !5618
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @make_signed_type(i32 %precision) #0 !dbg !5619 {
entry:
  %precision.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !5622, metadata !DIExpression()), !dbg !5623
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5624, metadata !DIExpression()), !dbg !5625
  %call = call %union.tree_node* @make_node_stat(i32 8), !dbg !5626
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5625
  %0 = load i32, i32* %precision.addr, align 4, !dbg !5627
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5628
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5628
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5628
  %bf.load = load i32, i32* %precision2, align 4, !dbg !5629
  %bf.value = and i32 %0, 1023, !dbg !5629
  %bf.clear = and i32 %bf.load, -1024, !dbg !5629
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !5629
  store i32 %bf.set, i32* %precision2, align 4, !dbg !5629
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5630
  call void @fixup_signed_type(%union.tree_node* %2), !dbg !5631
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5632
  ret %union.tree_node* %3, !dbg !5633
}

declare dso_local %union.tree_node* @make_node_stat(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @fixup_signed_type(%union.tree_node* %type) #0 !dbg !5634 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %precision = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5635, metadata !DIExpression()), !dbg !5636
  call void @llvm.dbg.declare(metadata i32* %precision, metadata !5637, metadata !DIExpression()), !dbg !5638
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5639
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5639
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5639
  %bf.load = load i32, i32* %precision2, align 4, !dbg !5639
  %bf.clear = and i32 %bf.load, 1023, !dbg !5639
  store i32 %bf.clear, i32* %precision, align 4, !dbg !5638
  %1 = load i32, i32* %precision, align 4, !dbg !5640
  %cmp = icmp sgt i32 %1, 128, !dbg !5642
  br i1 %cmp, label %if.then, label %if.end, !dbg !5643

if.then:                                          ; preds = %entry
  store i32 128, i32* %precision, align 4, !dbg !5644
  br label %if.end, !dbg !5645

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5646
  %3 = load i32, i32* %precision, align 4, !dbg !5647
  call void @set_min_and_max_values_for_integral_type(%union.tree_node* %2, i32 %3, i8 zeroext 0), !dbg !5648
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5649
  call void @layout_type(%union.tree_node* %4), !dbg !5650
  ret void, !dbg !5651
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @make_unsigned_type(i32 %precision) #0 !dbg !5652 {
entry:
  %precision.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !5653, metadata !DIExpression()), !dbg !5654
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5655, metadata !DIExpression()), !dbg !5656
  %call = call %union.tree_node* @make_node_stat(i32 8), !dbg !5657
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5656
  %0 = load i32, i32* %precision.addr, align 4, !dbg !5658
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5659
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5659
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5659
  %bf.load = load i32, i32* %precision2, align 4, !dbg !5660
  %bf.value = and i32 %0, 1023, !dbg !5660
  %bf.clear = and i32 %bf.load, -1024, !dbg !5660
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !5660
  store i32 %bf.set, i32* %precision2, align 4, !dbg !5660
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5661
  call void @fixup_unsigned_type(%union.tree_node* %2), !dbg !5662
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5663
  ret %union.tree_node* %3, !dbg !5664
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @fixup_unsigned_type(%union.tree_node* %type) #0 !dbg !5665 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %precision = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5666, metadata !DIExpression()), !dbg !5667
  call void @llvm.dbg.declare(metadata i32* %precision, metadata !5668, metadata !DIExpression()), !dbg !5669
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5670
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5670
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5670
  %bf.load = load i32, i32* %precision2, align 4, !dbg !5670
  %bf.clear = and i32 %bf.load, 1023, !dbg !5670
  store i32 %bf.clear, i32* %precision, align 4, !dbg !5669
  %1 = load i32, i32* %precision, align 4, !dbg !5671
  %cmp = icmp sgt i32 %1, 128, !dbg !5673
  br i1 %cmp, label %if.then, label %if.end, !dbg !5674

if.then:                                          ; preds = %entry
  store i32 128, i32* %precision, align 4, !dbg !5675
  br label %if.end, !dbg !5676

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5677
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5677
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5677
  %bf.load3 = load i64, i64* %3, align 8, !dbg !5678
  %bf.clear4 = and i64 %bf.load3, -2097153, !dbg !5678
  %bf.set = or i64 %bf.clear4, 2097152, !dbg !5678
  store i64 %bf.set, i64* %3, align 8, !dbg !5678
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5679
  %5 = load i32, i32* %precision, align 4, !dbg !5680
  call void @set_min_and_max_values_for_integral_type(%union.tree_node* %4, i32 %5, i8 zeroext 1), !dbg !5681
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5682
  call void @layout_type(%union.tree_node* %6), !dbg !5683
  ret void, !dbg !5684
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @make_fract_type(i32 %precision, i32 %unsignedp, i32 %satp) #0 !dbg !5685 {
entry:
  %precision.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %satp.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !5690, metadata !DIExpression()), !dbg !5691
  store i32 %satp, i32* %satp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %satp.addr, metadata !5692, metadata !DIExpression()), !dbg !5693
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5694, metadata !DIExpression()), !dbg !5695
  %call = call %union.tree_node* @make_node_stat(i32 11), !dbg !5696
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5695
  %0 = load i32, i32* %precision.addr, align 4, !dbg !5697
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5698
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5698
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5698
  %bf.load = load i32, i32* %precision2, align 4, !dbg !5699
  %bf.value = and i32 %0, 1023, !dbg !5699
  %bf.clear = and i32 %bf.load, -1024, !dbg !5699
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !5699
  store i32 %bf.set, i32* %precision2, align 4, !dbg !5699
  %2 = load i32, i32* %satp.addr, align 4, !dbg !5700
  %tobool = icmp ne i32 %2, 0, !dbg !5700
  br i1 %tobool, label %if.then, label %if.end, !dbg !5702

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5703
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5703
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5703
  %bf.load3 = load i64, i64* %4, align 8, !dbg !5704
  %bf.clear4 = and i64 %bf.load3, -2147483649, !dbg !5704
  %bf.set5 = or i64 %bf.clear4, 2147483648, !dbg !5704
  store i64 %bf.set5, i64* %4, align 8, !dbg !5704
  br label %if.end, !dbg !5703

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %unsignedp.addr, align 4, !dbg !5705
  %tobool6 = icmp ne i32 %5, 0, !dbg !5705
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !5707

if.then7:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5708
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5708
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5708
  %bf.load9 = load i64, i64* %7, align 8, !dbg !5710
  %bf.clear10 = and i64 %bf.load9, -2097153, !dbg !5710
  %bf.set11 = or i64 %bf.clear10, 2097152, !dbg !5710
  store i64 %bf.set11, i64* %7, align 8, !dbg !5710
  %8 = load i32, i32* %precision.addr, align 4, !dbg !5711
  %call12 = call i32 @mode_for_size(i32 %8, i32 5, i32 0), !dbg !5711
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5711
  %type13 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !5711
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 6, !dbg !5711
  %bf.load14 = load i32, i32* %mode, align 4, !dbg !5711
  %bf.value15 = and i32 %call12, 255, !dbg !5711
  %bf.shl = shl i32 %bf.value15, 16, !dbg !5711
  %bf.clear16 = and i32 %bf.load14, -16711681, !dbg !5711
  %bf.set17 = or i32 %bf.clear16, %bf.shl, !dbg !5711
  store i32 %bf.set17, i32* %mode, align 4, !dbg !5711
  br label %if.end26, !dbg !5712

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %precision.addr, align 4, !dbg !5713
  %call18 = call i32 @mode_for_size(i32 %10, i32 4, i32 0), !dbg !5713
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5713
  %type19 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !5713
  %mode20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6, !dbg !5713
  %bf.load21 = load i32, i32* %mode20, align 4, !dbg !5713
  %bf.value22 = and i32 %call18, 255, !dbg !5713
  %bf.shl23 = shl i32 %bf.value22, 16, !dbg !5713
  %bf.clear24 = and i32 %bf.load21, -16711681, !dbg !5713
  %bf.set25 = or i32 %bf.clear24, %bf.shl23, !dbg !5713
  store i32 %bf.set25, i32* %mode20, align 4, !dbg !5713
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then7
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5714
  call void @layout_type(%union.tree_node* %12), !dbg !5715
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5716
  ret %union.tree_node* %13, !dbg !5717
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @make_accum_type(i32 %precision, i32 %unsignedp, i32 %satp) #0 !dbg !5718 {
entry:
  %precision.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %satp.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !5719, metadata !DIExpression()), !dbg !5720
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !5721, metadata !DIExpression()), !dbg !5722
  store i32 %satp, i32* %satp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %satp.addr, metadata !5723, metadata !DIExpression()), !dbg !5724
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5725, metadata !DIExpression()), !dbg !5726
  %call = call %union.tree_node* @make_node_stat(i32 11), !dbg !5727
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5726
  %0 = load i32, i32* %precision.addr, align 4, !dbg !5728
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5729
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5729
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5729
  %bf.load = load i32, i32* %precision2, align 4, !dbg !5730
  %bf.value = and i32 %0, 1023, !dbg !5730
  %bf.clear = and i32 %bf.load, -1024, !dbg !5730
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !5730
  store i32 %bf.set, i32* %precision2, align 4, !dbg !5730
  %2 = load i32, i32* %satp.addr, align 4, !dbg !5731
  %tobool = icmp ne i32 %2, 0, !dbg !5731
  br i1 %tobool, label %if.then, label %if.end, !dbg !5733

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5734
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5734
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5734
  %bf.load3 = load i64, i64* %4, align 8, !dbg !5735
  %bf.clear4 = and i64 %bf.load3, -2147483649, !dbg !5735
  %bf.set5 = or i64 %bf.clear4, 2147483648, !dbg !5735
  store i64 %bf.set5, i64* %4, align 8, !dbg !5735
  br label %if.end, !dbg !5734

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %unsignedp.addr, align 4, !dbg !5736
  %tobool6 = icmp ne i32 %5, 0, !dbg !5736
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !5738

if.then7:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5739
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5739
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5739
  %bf.load9 = load i64, i64* %7, align 8, !dbg !5741
  %bf.clear10 = and i64 %bf.load9, -2097153, !dbg !5741
  %bf.set11 = or i64 %bf.clear10, 2097152, !dbg !5741
  store i64 %bf.set11, i64* %7, align 8, !dbg !5741
  %8 = load i32, i32* %precision.addr, align 4, !dbg !5742
  %call12 = call i32 @mode_for_size(i32 %8, i32 7, i32 0), !dbg !5742
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5742
  %type13 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !5742
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 6, !dbg !5742
  %bf.load14 = load i32, i32* %mode, align 4, !dbg !5742
  %bf.value15 = and i32 %call12, 255, !dbg !5742
  %bf.shl = shl i32 %bf.value15, 16, !dbg !5742
  %bf.clear16 = and i32 %bf.load14, -16711681, !dbg !5742
  %bf.set17 = or i32 %bf.clear16, %bf.shl, !dbg !5742
  store i32 %bf.set17, i32* %mode, align 4, !dbg !5742
  br label %if.end26, !dbg !5743

if.else:                                          ; preds = %if.end
  %10 = load i32, i32* %precision.addr, align 4, !dbg !5744
  %call18 = call i32 @mode_for_size(i32 %10, i32 6, i32 0), !dbg !5744
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5744
  %type19 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !5744
  %mode20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6, !dbg !5744
  %bf.load21 = load i32, i32* %mode20, align 4, !dbg !5744
  %bf.value22 = and i32 %call18, 255, !dbg !5744
  %bf.shl23 = shl i32 %bf.value22, 16, !dbg !5744
  %bf.clear24 = and i32 %bf.load21, -16711681, !dbg !5744
  %bf.set25 = or i32 %bf.clear24, %bf.shl23, !dbg !5744
  store i32 %bf.set25, i32* %mode20, align 4, !dbg !5744
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then7
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5745
  call void @layout_type(%union.tree_node* %12), !dbg !5746
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5747
  ret %union.tree_node* %13, !dbg !5748
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initialize_sizetypes(i8 zeroext %signed_p) #0 !dbg !5749 {
entry:
  %signed_p.addr = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %precision = alloca i32, align 4
  store i8 %signed_p, i8* %signed_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %signed_p.addr, metadata !5752, metadata !DIExpression()), !dbg !5753
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5754, metadata !DIExpression()), !dbg !5755
  %call = call %union.tree_node* @make_node_stat(i32 8), !dbg !5756
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !5755
  call void @llvm.dbg.declare(metadata i32* %precision, metadata !5757, metadata !DIExpression()), !dbg !5758
  %0 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !5759
  %conv = zext i8 %0 to i16, !dbg !5759
  %conv1 = zext i16 %conv to i32, !dbg !5759
  %mul = mul nsw i32 %conv1, 8, !dbg !5759
  %conv2 = trunc i32 %mul to i16, !dbg !5759
  %conv3 = zext i16 %conv2 to i32, !dbg !5759
  store i32 %conv3, i32* %precision, align 4, !dbg !5758
  %1 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5760
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !5760
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !5760
  %bf.load = load i32, i32* %mode, align 4, !dbg !5760
  %bf.clear = and i32 %bf.load, -16711681, !dbg !5760
  %bf.set = or i32 %bf.clear, 1048576, !dbg !5760
  store i32 %bf.set, i32* %mode, align 4, !dbg !5760
  %call4 = call i32 @get_mode_alignment(i32 16), !dbg !5761
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5762
  %type5 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !5762
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 7, !dbg !5762
  store i32 %call4, i32* %align, align 8, !dbg !5763
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5764
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5764
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !5764
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5764
  %bf.load6 = load i64, i64* %4, align 8, !dbg !5765
  %bf.clear7 = and i64 %bf.load6, -4398046511105, !dbg !5765
  store i64 %bf.clear7, i64* %4, align 8, !dbg !5765
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5766
  %type8 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !5766
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !5766
  %bf.load9 = load i32, i32* %no_force_blk_flag, align 4, !dbg !5767
  %bf.clear10 = and i32 %bf.load9, -1025, !dbg !5767
  %bf.set11 = or i32 %bf.clear10, 1024, !dbg !5767
  store i32 %bf.set11, i32* %no_force_blk_flag, align 4, !dbg !5767
  %6 = load i8, i8* %signed_p.addr, align 1, !dbg !5768
  %tobool = icmp ne i8 %6, 0, !dbg !5769
  %lnot = xor i1 %tobool, true, !dbg !5769
  %lnot.ext = zext i1 %lnot to i32, !dbg !5769
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5770
  %base12 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5770
  %8 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5770
  %9 = zext i32 %lnot.ext to i64, !dbg !5771
  %bf.load13 = load i64, i64* %8, align 8, !dbg !5771
  %bf.value = and i64 %9, 1, !dbg !5771
  %bf.shl = shl i64 %bf.value, 21, !dbg !5771
  %bf.clear14 = and i64 %bf.load13, -2097153, !dbg !5771
  %bf.set15 = or i64 %bf.clear14, %bf.shl, !dbg !5771
  store i64 %bf.set15, i64* %8, align 8, !dbg !5771
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5771
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5772
  %11 = load i32, i32* %precision, align 4, !dbg !5773
  %conv16 = sext i32 %11 to i64, !dbg !5773
  %call17 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 %conv16), !dbg !5774
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5775
  %type18 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !5775
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 2, !dbg !5775
  store %union.tree_node* %call17, %union.tree_node** %size, align 8, !dbg !5776
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5777
  %14 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !5778
  %conv19 = zext i8 %14 to i16, !dbg !5778
  %conv20 = zext i16 %conv19 to i64, !dbg !5778
  %call21 = call %union.tree_node* @build_int_cst(%union.tree_node* %13, i64 %conv20), !dbg !5779
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5780
  %type22 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !5780
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 3, !dbg !5780
  store %union.tree_node* %call21, %union.tree_node** %size_unit, align 8, !dbg !5781
  %16 = load i32, i32* %precision, align 4, !dbg !5782
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5783
  %type23 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !5783
  %precision24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 6, !dbg !5783
  %bf.load25 = load i32, i32* %precision24, align 4, !dbg !5784
  %bf.value26 = and i32 %16, 1023, !dbg !5784
  %bf.clear27 = and i32 %bf.load25, -1024, !dbg !5784
  %bf.set28 = or i32 %bf.clear27, %bf.value26, !dbg !5784
  store i32 %bf.set28, i32* %precision24, align 4, !dbg !5784
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5785
  %19 = load i32, i32* %precision, align 4, !dbg !5786
  %20 = load i8, i8* %signed_p.addr, align 1, !dbg !5787
  %tobool29 = icmp ne i8 %20, 0, !dbg !5788
  %lnot30 = xor i1 %tobool29, true, !dbg !5788
  %lnot.ext31 = zext i1 %lnot30 to i32, !dbg !5788
  %conv32 = trunc i32 %lnot.ext31 to i8, !dbg !5788
  call void @set_min_and_max_values_for_integral_type(%union.tree_node* %18, i32 %19, i8 zeroext %conv32), !dbg !5789
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5790
  store %union.tree_node* %21, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5791
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5792
  %call33 = call %union.tree_node* @build_distinct_type_copy(%union.tree_node* %22), !dbg !5793
  store %union.tree_node* %call33, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5794
  ret void, !dbg !5795
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_min_and_max_values_for_integral_type(%union.tree_node* %type, i32 %precision, i8 zeroext %is_unsigned) #0 !dbg !5796 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %precision.addr = alloca i32, align 4
  %is_unsigned.addr = alloca i8, align 1
  %min_value = alloca %union.tree_node*, align 8
  %max_value = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5799, metadata !DIExpression()), !dbg !5800
  store i32 %precision, i32* %precision.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %precision.addr, metadata !5801, metadata !DIExpression()), !dbg !5802
  store i8 %is_unsigned, i8* %is_unsigned.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_unsigned.addr, metadata !5803, metadata !DIExpression()), !dbg !5804
  call void @llvm.dbg.declare(metadata %union.tree_node** %min_value, metadata !5805, metadata !DIExpression()), !dbg !5806
  call void @llvm.dbg.declare(metadata %union.tree_node** %max_value, metadata !5807, metadata !DIExpression()), !dbg !5808
  %0 = load i8, i8* %is_unsigned.addr, align 1, !dbg !5809
  %tobool = icmp ne i8 %0, 0, !dbg !5809
  br i1 %tobool, label %if.then, label %if.else, !dbg !5811

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5812
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %1, i64 0), !dbg !5814
  store %union.tree_node* %call, %union.tree_node** %min_value, align 8, !dbg !5815
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5816
  %3 = load i32, i32* %precision.addr, align 4, !dbg !5817
  %sub = sub nsw i32 %3, 64, !dbg !5818
  %cmp = icmp sge i32 %sub, 0, !dbg !5819
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5817

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !5817

cond.false:                                       ; preds = %if.then
  %4 = load i32, i32* %precision.addr, align 4, !dbg !5820
  %sh_prom = zext i32 %4 to i64, !dbg !5821
  %shl = shl i64 1, %sh_prom, !dbg !5821
  %sub1 = sub nsw i64 %shl, 1, !dbg !5822
  br label %cond.end, !dbg !5817

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %sub1, %cond.false ], !dbg !5817
  %5 = load i32, i32* %precision.addr, align 4, !dbg !5823
  %sub2 = sub nsw i32 %5, 64, !dbg !5824
  %cmp3 = icmp sgt i32 %sub2, 0, !dbg !5825
  br i1 %cmp3, label %cond.true4, label %cond.false8, !dbg !5823

cond.true4:                                       ; preds = %cond.end
  %6 = load i32, i32* %precision.addr, align 4, !dbg !5826
  %sub5 = sub nsw i32 %6, 64, !dbg !5827
  %sub6 = sub nsw i32 64, %sub5, !dbg !5828
  %sh_prom7 = zext i32 %sub6 to i64, !dbg !5829
  %shr = lshr i64 -1, %sh_prom7, !dbg !5829
  br label %cond.end9, !dbg !5823

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !5823

cond.end9:                                        ; preds = %cond.false8, %cond.true4
  %cond10 = phi i64 [ %shr, %cond.true4 ], [ 0, %cond.false8 ], !dbg !5823
  %call11 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %2, i64 %cond, i64 %cond10), !dbg !5830
  store %union.tree_node* %call11, %union.tree_node** %max_value, align 8, !dbg !5831
  br label %if.end, !dbg !5832

if.else:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5833
  %8 = load i32, i32* %precision.addr, align 4, !dbg !5835
  %sub12 = sub nsw i32 %8, 64, !dbg !5836
  %cmp13 = icmp sgt i32 %sub12, 0, !dbg !5837
  br i1 %cmp13, label %cond.true14, label %cond.false15, !dbg !5835

cond.true14:                                      ; preds = %if.else
  br label %cond.end19, !dbg !5835

cond.false15:                                     ; preds = %if.else
  %9 = load i32, i32* %precision.addr, align 4, !dbg !5838
  %sub16 = sub nsw i32 %9, 1, !dbg !5839
  %sh_prom17 = zext i32 %sub16 to i64, !dbg !5840
  %shl18 = shl i64 -1, %sh_prom17, !dbg !5840
  br label %cond.end19, !dbg !5835

cond.end19:                                       ; preds = %cond.false15, %cond.true14
  %cond20 = phi i64 [ 0, %cond.true14 ], [ %shl18, %cond.false15 ], !dbg !5835
  %10 = load i32, i32* %precision.addr, align 4, !dbg !5841
  %sub21 = sub nsw i32 %10, 64, !dbg !5842
  %sub22 = sub nsw i32 %sub21, 1, !dbg !5843
  %cmp23 = icmp sgt i32 %sub22, 0, !dbg !5844
  br i1 %cmp23, label %cond.true24, label %cond.false27, !dbg !5841

cond.true24:                                      ; preds = %cond.end19
  %11 = load i32, i32* %precision.addr, align 4, !dbg !5845
  %sub25 = sub nsw i32 %11, 64, !dbg !5846
  %sub26 = sub nsw i32 %sub25, 1, !dbg !5847
  br label %cond.end28, !dbg !5841

cond.false27:                                     ; preds = %cond.end19
  br label %cond.end28, !dbg !5841

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi i32 [ %sub26, %cond.true24 ], [ 0, %cond.false27 ], !dbg !5841
  %sh_prom30 = zext i32 %cond29 to i64, !dbg !5848
  %shl31 = shl i64 -1, %sh_prom30, !dbg !5848
  %call32 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %7, i64 %cond20, i64 %shl31), !dbg !5849
  store %union.tree_node* %call32, %union.tree_node** %min_value, align 8, !dbg !5850
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5851
  %13 = load i32, i32* %precision.addr, align 4, !dbg !5852
  %sub33 = sub nsw i32 %13, 64, !dbg !5853
  %cmp34 = icmp sgt i32 %sub33, 0, !dbg !5854
  br i1 %cmp34, label %cond.true35, label %cond.false36, !dbg !5852

cond.true35:                                      ; preds = %cond.end28
  br label %cond.end41, !dbg !5852

cond.false36:                                     ; preds = %cond.end28
  %14 = load i32, i32* %precision.addr, align 4, !dbg !5855
  %sub37 = sub nsw i32 %14, 1, !dbg !5856
  %sh_prom38 = zext i32 %sub37 to i64, !dbg !5857
  %shl39 = shl i64 1, %sh_prom38, !dbg !5857
  %sub40 = sub nsw i64 %shl39, 1, !dbg !5858
  br label %cond.end41, !dbg !5852

cond.end41:                                       ; preds = %cond.false36, %cond.true35
  %cond42 = phi i64 [ -1, %cond.true35 ], [ %sub40, %cond.false36 ], !dbg !5852
  %15 = load i32, i32* %precision.addr, align 4, !dbg !5859
  %sub43 = sub nsw i32 %15, 64, !dbg !5860
  %sub44 = sub nsw i32 %sub43, 1, !dbg !5861
  %cmp45 = icmp sgt i32 %sub44, 0, !dbg !5862
  br i1 %cmp45, label %cond.true46, label %cond.false52, !dbg !5859

cond.true46:                                      ; preds = %cond.end41
  %16 = load i32, i32* %precision.addr, align 4, !dbg !5863
  %sub47 = sub nsw i32 %16, 64, !dbg !5864
  %sub48 = sub nsw i32 %sub47, 1, !dbg !5865
  %sh_prom49 = zext i32 %sub48 to i64, !dbg !5866
  %shl50 = shl i64 1, %sh_prom49, !dbg !5866
  %sub51 = sub nsw i64 %shl50, 1, !dbg !5867
  br label %cond.end53, !dbg !5859

cond.false52:                                     ; preds = %cond.end41
  br label %cond.end53, !dbg !5859

cond.end53:                                       ; preds = %cond.false52, %cond.true46
  %cond54 = phi i64 [ %sub51, %cond.true46 ], [ 0, %cond.false52 ], !dbg !5859
  %call55 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %12, i64 %cond42, i64 %cond54), !dbg !5868
  store %union.tree_node* %call55, %union.tree_node** %max_value, align 8, !dbg !5869
  br label %if.end

if.end:                                           ; preds = %cond.end53, %cond.end9
  %17 = load %union.tree_node*, %union.tree_node** %min_value, align 8, !dbg !5870
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5871
  %type56 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !5871
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 13, !dbg !5871
  store %union.tree_node* %17, %union.tree_node** %minval, align 8, !dbg !5872
  %19 = load %union.tree_node*, %union.tree_node** %max_value, align 8, !dbg !5873
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5874
  %type57 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !5874
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type57, i32 0, i32 14, !dbg !5874
  store %union.tree_node* %19, %union.tree_node** %maxval, align 8, !dbg !5875
  ret void, !dbg !5876
}

declare dso_local %union.tree_node* @build_distinct_type_copy(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_sizetype(%union.tree_node* %type) #0 !dbg !5877 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %oprecision = alloca i32, align 4
  %precision2 = alloca i32, align 4
  %orig_max = alloca %union.tree_node*, align 8
  %new_max = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5878, metadata !DIExpression()), !dbg !5879
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5880, metadata !DIExpression()), !dbg !5881
  call void @llvm.dbg.declare(metadata i32* %oprecision, metadata !5882, metadata !DIExpression()), !dbg !5883
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5884
  %type1 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5884
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !5884
  %bf.load = load i32, i32* %precision, align 4, !dbg !5884
  %bf.clear = and i32 %bf.load, 1023, !dbg !5884
  store i32 %bf.clear, i32* %oprecision, align 4, !dbg !5883
  call void @llvm.dbg.declare(metadata i32* %precision2, metadata !5885, metadata !DIExpression()), !dbg !5886
  %1 = load i32, i32* %oprecision, align 4, !dbg !5887
  %add = add nsw i32 %1, 3, !dbg !5887
  %add3 = add nsw i32 %add, 1, !dbg !5887
  %2 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 17), align 1, !dbg !5887
  %conv = zext i8 %2 to i16, !dbg !5887
  %conv4 = zext i16 %conv to i32, !dbg !5887
  %mul = mul nsw i32 %conv4, 8, !dbg !5887
  %conv5 = trunc i32 %mul to i16, !dbg !5887
  %conv6 = zext i16 %conv5 to i32, !dbg !5887
  %cmp = icmp slt i32 %add3, %conv6, !dbg !5887
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5887

cond.true:                                        ; preds = %entry
  %3 = load i32, i32* %oprecision, align 4, !dbg !5887
  %add8 = add nsw i32 %3, 3, !dbg !5887
  %add9 = add nsw i32 %add8, 1, !dbg !5887
  br label %cond.end, !dbg !5887

cond.false:                                       ; preds = %entry
  %4 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 17), align 1, !dbg !5887
  %conv10 = zext i8 %4 to i16, !dbg !5887
  %conv11 = zext i16 %conv10 to i32, !dbg !5887
  %mul12 = mul nsw i32 %conv11, 8, !dbg !5887
  %conv13 = trunc i32 %mul12 to i16, !dbg !5887
  %conv14 = zext i16 %conv13 to i32, !dbg !5887
  br label %cond.end, !dbg !5887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add9, %cond.true ], [ %conv14, %cond.false ], !dbg !5887
  store i32 %cond, i32* %precision2, align 4, !dbg !5886
  %5 = load i32, i32* %precision2, align 4, !dbg !5888
  %call = call i32 @smallest_mode_for_size(i32 %5, i32 2), !dbg !5888
  %idxprom = zext i32 %call to i64, !dbg !5888
  %arrayidx = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom, !dbg !5888
  %6 = load i16, i16* %arrayidx, align 2, !dbg !5888
  %conv15 = zext i16 %6 to i32, !dbg !5888
  store i32 %conv15, i32* %precision2, align 4, !dbg !5889
  %7 = load i32, i32* %precision2, align 4, !dbg !5890
  %cmp16 = icmp sgt i32 %7, 128, !dbg !5892
  br i1 %cmp16, label %if.then, label %if.end, !dbg !5893

if.then:                                          ; preds = %cond.end
  store i32 128, i32* %precision2, align 4, !dbg !5894
  br label %if.end, !dbg !5895

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5896
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5896
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !5896
  %bf.load18 = load i64, i64* %9, align 8, !dbg !5896
  %bf.lshr = lshr i64 %bf.load18, 21, !dbg !5896
  %bf.clear19 = and i64 %bf.lshr, 1, !dbg !5896
  %bf.cast = trunc i64 %bf.clear19 to i32, !dbg !5896
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5896
  %base20 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5896
  %11 = bitcast %struct.tree_base* %base20 to i64*, !dbg !5896
  %bf.load21 = load i64, i64* %11, align 8, !dbg !5896
  %bf.lshr22 = lshr i64 %bf.load21, 21, !dbg !5896
  %bf.clear23 = and i64 %bf.lshr22, 1, !dbg !5896
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !5896
  %cmp25 = icmp eq i32 %bf.cast, %bf.cast24, !dbg !5896
  br i1 %cmp25, label %cond.false28, label %cond.true27, !dbg !5896

cond.true27:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2265, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5896
  br label %cond.end29, !dbg !5896

cond.false28:                                     ; preds = %if.end
  br label %cond.end29, !dbg !5896

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !5896
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5897
  %call31 = call %union.tree_node* @build_distinct_type_copy(%union.tree_node* %12), !dbg !5898
  store %union.tree_node* %call31, %union.tree_node** %t, align 8, !dbg !5899
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5900
  %type32 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !5900
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 1, !dbg !5900
  %14 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5900
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5901
  %type33 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !5901
  %values34 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 1, !dbg !5901
  store %union.tree_node* %14, %union.tree_node** %values34, align 8, !dbg !5902
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5903
  %base35 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5903
  %17 = bitcast %struct.tree_base* %base35 to i64*, !dbg !5903
  %bf.load36 = load i64, i64* %17, align 8, !dbg !5903
  %bf.lshr37 = lshr i64 %bf.load36, 27, !dbg !5903
  %bf.clear38 = and i64 %bf.lshr37, 1, !dbg !5903
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !5903
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5904
  %base40 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5904
  %19 = bitcast %struct.tree_base* %base40 to i64*, !dbg !5904
  %20 = zext i32 %bf.cast39 to i64, !dbg !5905
  %bf.load41 = load i64, i64* %19, align 8, !dbg !5905
  %bf.value = and i64 %20, 1, !dbg !5905
  %bf.shl = shl i64 %bf.value, 27, !dbg !5905
  %bf.clear42 = and i64 %bf.load41, -134217729, !dbg !5905
  %bf.set = or i64 %bf.clear42, %bf.shl, !dbg !5905
  store i64 %bf.set, i64* %19, align 8, !dbg !5905
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5905
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5906
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5907
  %type43 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !5907
  %values44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 1, !dbg !5907
  %23 = load %union.tree_node*, %union.tree_node** %values44, align 8, !dbg !5907
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5907
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5907
  store %union.tree_node* %21, %union.tree_node** %type45, align 8, !dbg !5908
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5909
  %type46 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !5909
  %uid = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type46, i32 0, i32 5, !dbg !5909
  %25 = load i32, i32* %uid, align 8, !dbg !5909
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5910
  %type47 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !5910
  %uid48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 5, !dbg !5910
  store i32 %25, i32* %uid48, align 8, !dbg !5911
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5912
  %type49 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !5912
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 6, !dbg !5912
  %bf.load50 = load i32, i32* %no_force_blk_flag, align 4, !dbg !5913
  %bf.clear51 = and i32 %bf.load50, -1025, !dbg !5913
  %bf.set52 = or i32 %bf.clear51, 1024, !dbg !5913
  store i32 %bf.set52, i32* %no_force_blk_flag, align 4, !dbg !5913
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5914
  %29 = bitcast %union.tree_node* %28 to i8*, !dbg !5915
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5916
  %31 = bitcast %union.tree_node* %30 to i8*, !dbg !5915
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5917
  %call53 = call i64 @tree_size(%union.tree_node* %32), !dbg !5918
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %31, i64 %call53, i1 false), !dbg !5915
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5919
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5920
  %type54 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !5920
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 16, !dbg !5920
  store %union.tree_node* %33, %union.tree_node** %main_variant, align 8, !dbg !5921
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5922
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5923
  %type55 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !5923
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type55, i32 0, i32 19, !dbg !5923
  store %union.tree_node* %35, %union.tree_node** %canonical, align 8, !dbg !5924
  %call56 = call %union.tree_node* @make_node_stat(i32 8), !dbg !5925
  store %union.tree_node* %call56, %union.tree_node** %t, align 8, !dbg !5926
  %call57 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0)), !dbg !5927
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5928
  %type58 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !5928
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 12, !dbg !5928
  store %union.tree_node* %call57, %union.tree_node** %name, align 8, !dbg !5929
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5930
  %type59 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !5930
  %values60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 1, !dbg !5930
  %39 = load %union.tree_node*, %union.tree_node** %values60, align 8, !dbg !5930
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5931
  %type61 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !5931
  %values62 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type61, i32 0, i32 1, !dbg !5931
  store %union.tree_node* %39, %union.tree_node** %values62, align 8, !dbg !5932
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5933
  %base63 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !5933
  %42 = bitcast %struct.tree_base* %base63 to i64*, !dbg !5933
  %bf.load64 = load i64, i64* %42, align 8, !dbg !5933
  %bf.lshr65 = lshr i64 %bf.load64, 27, !dbg !5933
  %bf.clear66 = and i64 %bf.lshr65, 1, !dbg !5933
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !5933
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5934
  %base68 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !5934
  %44 = bitcast %struct.tree_base* %base68 to i64*, !dbg !5934
  %45 = zext i32 %bf.cast67 to i64, !dbg !5935
  %bf.load69 = load i64, i64* %44, align 8, !dbg !5935
  %bf.value70 = and i64 %45, 1, !dbg !5935
  %bf.shl71 = shl i64 %bf.value70, 27, !dbg !5935
  %bf.clear72 = and i64 %bf.load69, -134217729, !dbg !5935
  %bf.set73 = or i64 %bf.clear72, %bf.shl71, !dbg !5935
  store i64 %bf.set73, i64* %44, align 8, !dbg !5935
  %bf.result.cast74 = trunc i64 %bf.value70 to i32, !dbg !5935
  %46 = load i32, i32* %precision2, align 4, !dbg !5936
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5937
  %type75 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !5937
  %precision76 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type75, i32 0, i32 6, !dbg !5937
  %bf.load77 = load i32, i32* %precision76, align 4, !dbg !5938
  %bf.value78 = and i32 %46, 1023, !dbg !5938
  %bf.clear79 = and i32 %bf.load77, -1024, !dbg !5938
  %bf.set80 = or i32 %bf.clear79, %bf.value78, !dbg !5938
  store i32 %bf.set80, i32* %precision76, align 4, !dbg !5938
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5939
  %type81 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !5939
  %uid82 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 5, !dbg !5939
  %49 = load i32, i32* %uid82, align 8, !dbg !5939
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5940
  %type83 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !5940
  %uid84 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 5, !dbg !5940
  store i32 %49, i32* %uid84, align 8, !dbg !5941
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5942
  %type85 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !5942
  %no_force_blk_flag86 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type85, i32 0, i32 6, !dbg !5942
  %bf.load87 = load i32, i32* %no_force_blk_flag86, align 4, !dbg !5943
  %bf.clear88 = and i32 %bf.load87, -1025, !dbg !5943
  %bf.set89 = or i32 %bf.clear88, 1024, !dbg !5943
  store i32 %bf.set89, i32* %no_force_blk_flag86, align 4, !dbg !5943
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5944
  %53 = bitcast %union.tree_node* %52 to i8*, !dbg !5945
  %54 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5946
  %55 = bitcast %union.tree_node* %54 to i8*, !dbg !5945
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5947
  %call90 = call i64 @tree_size(%union.tree_node* %56), !dbg !5948
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %55, i64 %call90, i1 false), !dbg !5945
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5949
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5950
  %type91 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !5950
  %main_variant92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 16, !dbg !5950
  store %union.tree_node* %57, %union.tree_node** %main_variant92, align 8, !dbg !5951
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5952
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5953
  %type93 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !5953
  %canonical94 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type93, i32 0, i32 19, !dbg !5953
  store %union.tree_node* %59, %union.tree_node** %canonical94, align 8, !dbg !5954
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5955
  %base95 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !5955
  %62 = bitcast %struct.tree_base* %base95 to i64*, !dbg !5955
  %bf.load96 = load i64, i64* %62, align 8, !dbg !5955
  %bf.lshr97 = lshr i64 %bf.load96, 21, !dbg !5955
  %bf.clear98 = and i64 %bf.lshr97, 1, !dbg !5955
  %bf.cast99 = trunc i64 %bf.clear98 to i32, !dbg !5955
  %tobool = icmp ne i32 %bf.cast99, 0, !dbg !5955
  br i1 %tobool, label %if.then100, label %if.else, !dbg !5957

if.then100:                                       ; preds = %cond.end29
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5958
  call void @fixup_unsigned_type(%union.tree_node* %63), !dbg !5960
  %64 = load i32, i32* %oprecision, align 4, !dbg !5961
  %call101 = call %union.tree_node* @make_signed_type(i32 %64), !dbg !5962
  store %union.tree_node* %call101, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !5963
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !5964
  %type102 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !5964
  %no_force_blk_flag103 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 6, !dbg !5964
  %bf.load104 = load i32, i32* %no_force_blk_flag103, align 4, !dbg !5965
  %bf.clear105 = and i32 %bf.load104, -1025, !dbg !5965
  %bf.set106 = or i32 %bf.clear105, 1024, !dbg !5965
  store i32 %bf.set106, i32* %no_force_blk_flag103, align 4, !dbg !5965
  %66 = load i32, i32* %precision2, align 4, !dbg !5966
  %call107 = call %union.tree_node* @make_signed_type(i32 %66), !dbg !5967
  store %union.tree_node* %call107, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !dbg !5968
  %67 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !dbg !5969
  %type108 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !5969
  %no_force_blk_flag109 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type108, i32 0, i32 6, !dbg !5969
  %bf.load110 = load i32, i32* %no_force_blk_flag109, align 4, !dbg !5970
  %bf.clear111 = and i32 %bf.load110, -1025, !dbg !5970
  %bf.set112 = or i32 %bf.clear111, 1024, !dbg !5970
  store i32 %bf.set112, i32* %no_force_blk_flag109, align 4, !dbg !5970
  br label %if.end113, !dbg !5971

if.else:                                          ; preds = %cond.end29
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5972
  call void @fixup_signed_type(%union.tree_node* %68), !dbg !5974
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5975
  store %union.tree_node* %69, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !5976
  %70 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 2), align 16, !dbg !5977
  store %union.tree_node* %70, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !dbg !5978
  br label %if.end113

if.end113:                                        ; preds = %if.else, %if.then100
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5979
  %base114 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !5979
  %72 = bitcast %struct.tree_base* %base114 to i64*, !dbg !5979
  %bf.load115 = load i64, i64* %72, align 8, !dbg !5979
  %bf.lshr116 = lshr i64 %bf.load115, 21, !dbg !5979
  %bf.clear117 = and i64 %bf.lshr116, 1, !dbg !5979
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !5979
  %tobool119 = icmp ne i32 %bf.cast118, 0, !dbg !5979
  br i1 %tobool119, label %if.then120, label %if.end128, !dbg !5981

if.then120:                                       ; preds = %if.end113
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_max, metadata !5982, metadata !DIExpression()), !dbg !5984
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_max, metadata !5985, metadata !DIExpression()), !dbg !5986
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5987
  %type121 = bitcast %union.tree_node* %73 to %struct.tree_type*, !dbg !5987
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type121, i32 0, i32 14, !dbg !5987
  %74 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !5987
  store %union.tree_node* %74, %union.tree_node** %orig_max, align 8, !dbg !5988
  %75 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5989
  %76 = load %union.tree_node*, %union.tree_node** %orig_max, align 8, !dbg !5990
  %int_cst = bitcast %union.tree_node* %76 to %struct.tree_int_cst*, !dbg !5990
  %int_cst122 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !5990
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst122, i32 0, i32 0, !dbg !5990
  %77 = load i64, i64* %low, align 8, !dbg !5990
  %78 = load %union.tree_node*, %union.tree_node** %orig_max, align 8, !dbg !5991
  %int_cst123 = bitcast %union.tree_node* %78 to %struct.tree_int_cst*, !dbg !5991
  %int_cst124 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst123, i32 0, i32 1, !dbg !5991
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst124, i32 0, i32 1, !dbg !5991
  %79 = load i64, i64* %high, align 8, !dbg !5991
  %call125 = call %union.tree_node* @build_int_cst_wide_type(%union.tree_node* %75, i64 %77, i64 %79), !dbg !5992
  store %union.tree_node* %call125, %union.tree_node** %new_max, align 8, !dbg !5993
  %80 = load %union.tree_node*, %union.tree_node** %new_max, align 8, !dbg !5994
  %81 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5995
  %type126 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !5995
  %maxval127 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type126, i32 0, i32 14, !dbg !5995
  store %union.tree_node* %80, %union.tree_node** %maxval127, align 8, !dbg !5996
  br label %if.end128, !dbg !5997

if.end128:                                        ; preds = %if.then120, %if.end113
  ret void, !dbg !5998
}

declare dso_local i64 @tree_size(%union.tree_node*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local %union.tree_node* @build_int_cst_wide_type(%union.tree_node*, i64, i64) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_best_mode(i32 %bitsize, i32 %bitpos, i32 %align, i32 %largest_mode, i32 %volatilep) #0 !dbg !5999 {
entry:
  %retval = alloca i32, align 4
  %bitsize.addr = alloca i32, align 4
  %bitpos.addr = alloca i32, align 4
  %align.addr = alloca i32, align 4
  %largest_mode.addr = alloca i32, align 4
  %volatilep.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %unit = alloca i32, align 4
  %wide_mode = alloca i32, align 4
  %tmode = alloca i32, align 4
  store i32 %bitsize, i32* %bitsize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitsize.addr, metadata !6002, metadata !DIExpression()), !dbg !6003
  store i32 %bitpos, i32* %bitpos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.addr, metadata !6004, metadata !DIExpression()), !dbg !6005
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !6006, metadata !DIExpression()), !dbg !6007
  store i32 %largest_mode, i32* %largest_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %largest_mode.addr, metadata !6008, metadata !DIExpression()), !dbg !6009
  store i32 %volatilep, i32* %volatilep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %volatilep.addr, metadata !6010, metadata !DIExpression()), !dbg !6011
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6012, metadata !DIExpression()), !dbg !6013
  call void @llvm.dbg.declare(metadata i32* %unit, metadata !6014, metadata !DIExpression()), !dbg !6015
  store i32 0, i32* %unit, align 4, !dbg !6015
  %0 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !6016
  %conv = zext i8 %0 to i32, !dbg !6016
  store i32 %conv, i32* %mode, align 4, !dbg !6018
  br label %for.cond, !dbg !6019

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %mode, align 4, !dbg !6020
  %cmp = icmp ne i32 %1, 0, !dbg !6022
  br i1 %cmp, label %for.body, label %for.end, !dbg !6023

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %mode, align 4, !dbg !6024
  %idxprom = zext i32 %2 to i64, !dbg !6024
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6024
  %3 = load i8, i8* %arrayidx, align 1, !dbg !6024
  %conv2 = zext i8 %3 to i16, !dbg !6024
  %conv3 = zext i16 %conv2 to i32, !dbg !6024
  %mul = mul nsw i32 %conv3, 8, !dbg !6024
  %conv4 = trunc i32 %mul to i16, !dbg !6024
  %conv5 = zext i16 %conv4 to i32, !dbg !6024
  store i32 %conv5, i32* %unit, align 4, !dbg !6026
  %4 = load i32, i32* %bitpos.addr, align 4, !dbg !6027
  %5 = load i32, i32* %unit, align 4, !dbg !6029
  %rem = urem i32 %4, %5, !dbg !6030
  %6 = load i32, i32* %bitsize.addr, align 4, !dbg !6031
  %add = add i32 %rem, %6, !dbg !6032
  %7 = load i32, i32* %unit, align 4, !dbg !6033
  %cmp6 = icmp ule i32 %add, %7, !dbg !6034
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6035

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !6036

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6037

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %mode, align 4, !dbg !6038
  %idxprom8 = zext i32 %8 to i64, !dbg !6038
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom8, !dbg !6038
  %9 = load i8, i8* %arrayidx9, align 1, !dbg !6038
  %conv10 = zext i8 %9 to i32, !dbg !6038
  store i32 %conv10, i32* %mode, align 4, !dbg !6039
  br label %for.cond, !dbg !6040, !llvm.loop !6041

for.end:                                          ; preds = %if.then, %for.cond
  %10 = load i32, i32* %mode, align 4, !dbg !6043
  %cmp11 = icmp eq i32 %10, 0, !dbg !6045
  br i1 %cmp11, label %if.then36, label %lor.lhs.false, !dbg !6046

lor.lhs.false:                                    ; preds = %for.end
  %11 = load i32, i32* %unit, align 4, !dbg !6047
  %12 = load i32, i32* @ix86_isa_flags, align 4, !dbg !6047
  %and = and i32 %12, 32, !dbg !6047
  %cmp13 = icmp ne i32 %and, 0, !dbg !6047
  %13 = zext i1 %cmp13 to i64, !dbg !6047
  %cond = select i1 %cmp13, i32 256, i32 128, !dbg !6047
  %cmp15 = icmp ult i32 %11, %cond, !dbg !6047
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !6047

cond.true:                                        ; preds = %lor.lhs.false
  %14 = load i32, i32* %unit, align 4, !dbg !6047
  br label %cond.end, !dbg !6047

cond.false:                                       ; preds = %lor.lhs.false
  %15 = load i32, i32* @ix86_isa_flags, align 4, !dbg !6047
  %and17 = and i32 %15, 32, !dbg !6047
  %cmp18 = icmp ne i32 %and17, 0, !dbg !6047
  %16 = zext i1 %cmp18 to i64, !dbg !6047
  %cond20 = select i1 %cmp18, i32 256, i32 128, !dbg !6047
  br label %cond.end, !dbg !6047

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond21 = phi i32 [ %14, %cond.true ], [ %cond20, %cond.false ], !dbg !6047
  %17 = load i32, i32* %align.addr, align 4, !dbg !6048
  %cmp22 = icmp ugt i32 %cond21, %17, !dbg !6049
  br i1 %cmp22, label %if.then36, label %lor.lhs.false24, !dbg !6050

lor.lhs.false24:                                  ; preds = %cond.end
  %18 = load i32, i32* %largest_mode.addr, align 4, !dbg !6051
  %cmp25 = icmp ne i32 %18, 0, !dbg !6052
  br i1 %cmp25, label %land.lhs.true, label %if.end37, !dbg !6053

land.lhs.true:                                    ; preds = %lor.lhs.false24
  %19 = load i32, i32* %unit, align 4, !dbg !6054
  %20 = load i32, i32* %largest_mode.addr, align 4, !dbg !6055
  %idxprom27 = zext i32 %20 to i64, !dbg !6055
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom27, !dbg !6055
  %21 = load i8, i8* %arrayidx28, align 1, !dbg !6055
  %conv29 = zext i8 %21 to i16, !dbg !6055
  %conv30 = zext i16 %conv29 to i32, !dbg !6055
  %mul31 = mul nsw i32 %conv30, 8, !dbg !6055
  %conv32 = trunc i32 %mul31 to i16, !dbg !6055
  %conv33 = zext i16 %conv32 to i32, !dbg !6055
  %cmp34 = icmp ugt i32 %19, %conv33, !dbg !6056
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !6057

if.then36:                                        ; preds = %land.lhs.true, %cond.end, %for.end
  store i32 0, i32* %retval, align 4, !dbg !6058
  br label %return, !dbg !6058

if.end37:                                         ; preds = %land.lhs.true, %lor.lhs.false24
  %22 = load i32, i32* %volatilep.addr, align 4, !dbg !6059
  %tobool = icmp ne i32 %22, 0, !dbg !6059
  br i1 %tobool, label %land.lhs.true38, label %if.end101, !dbg !6061

land.lhs.true38:                                  ; preds = %if.end37
  %23 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 22), align 8, !dbg !6062
  %call = call zeroext i8 %23(), !dbg !6063
  %tobool39 = icmp ne i8 %call, 0, !dbg !6063
  br i1 %tobool39, label %if.end101, label %if.then40, !dbg !6064

if.then40:                                        ; preds = %land.lhs.true38
  call void @llvm.dbg.declare(metadata i32* %wide_mode, metadata !6065, metadata !DIExpression()), !dbg !6067
  store i32 0, i32* %wide_mode, align 4, !dbg !6067
  call void @llvm.dbg.declare(metadata i32* %tmode, metadata !6068, metadata !DIExpression()), !dbg !6069
  %24 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !6070
  %conv41 = zext i8 %24 to i32, !dbg !6070
  store i32 %conv41, i32* %tmode, align 4, !dbg !6072
  br label %for.cond42, !dbg !6073

for.cond42:                                       ; preds = %for.inc92, %if.then40
  %25 = load i32, i32* %tmode, align 4, !dbg !6074
  %cmp43 = icmp ne i32 %25, 0, !dbg !6076
  br i1 %cmp43, label %for.body45, label %for.end96, !dbg !6077

for.body45:                                       ; preds = %for.cond42
  %26 = load i32, i32* %tmode, align 4, !dbg !6078
  %idxprom46 = zext i32 %26 to i64, !dbg !6078
  %arrayidx47 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom46, !dbg !6078
  %27 = load i8, i8* %arrayidx47, align 1, !dbg !6078
  %conv48 = zext i8 %27 to i16, !dbg !6078
  %conv49 = zext i16 %conv48 to i32, !dbg !6078
  %mul50 = mul nsw i32 %conv49, 8, !dbg !6078
  %conv51 = trunc i32 %mul50 to i16, !dbg !6078
  %conv52 = zext i16 %conv51 to i32, !dbg !6078
  store i32 %conv52, i32* %unit, align 4, !dbg !6080
  %28 = load i32, i32* %bitpos.addr, align 4, !dbg !6081
  %29 = load i32, i32* %unit, align 4, !dbg !6083
  %div = udiv i32 %28, %29, !dbg !6084
  %30 = load i32, i32* %bitpos.addr, align 4, !dbg !6085
  %31 = load i32, i32* %bitsize.addr, align 4, !dbg !6086
  %add53 = add nsw i32 %30, %31, !dbg !6087
  %sub = sub nsw i32 %add53, 1, !dbg !6088
  %32 = load i32, i32* %unit, align 4, !dbg !6089
  %div54 = udiv i32 %sub, %32, !dbg !6090
  %cmp55 = icmp eq i32 %div, %div54, !dbg !6091
  br i1 %cmp55, label %land.lhs.true57, label %if.end91, !dbg !6092

land.lhs.true57:                                  ; preds = %for.body45
  %33 = load i32, i32* %unit, align 4, !dbg !6093
  %cmp58 = icmp ule i32 %33, 32, !dbg !6094
  br i1 %cmp58, label %land.lhs.true60, label %if.end91, !dbg !6095

land.lhs.true60:                                  ; preds = %land.lhs.true57
  %34 = load i32, i32* %unit, align 4, !dbg !6096
  %35 = load i32, i32* %align.addr, align 4, !dbg !6097
  %36 = load i32, i32* @ix86_isa_flags, align 4, !dbg !6097
  %and61 = and i32 %36, 32, !dbg !6097
  %cmp62 = icmp ne i32 %and61, 0, !dbg !6097
  %37 = zext i1 %cmp62 to i64, !dbg !6097
  %cond64 = select i1 %cmp62, i32 256, i32 128, !dbg !6097
  %cmp65 = icmp ult i32 %35, %cond64, !dbg !6097
  br i1 %cmp65, label %cond.true67, label %cond.false68, !dbg !6097

cond.true67:                                      ; preds = %land.lhs.true60
  %38 = load i32, i32* %align.addr, align 4, !dbg !6097
  br label %cond.end73, !dbg !6097

cond.false68:                                     ; preds = %land.lhs.true60
  %39 = load i32, i32* @ix86_isa_flags, align 4, !dbg !6097
  %and69 = and i32 %39, 32, !dbg !6097
  %cmp70 = icmp ne i32 %and69, 0, !dbg !6097
  %40 = zext i1 %cmp70 to i64, !dbg !6097
  %cond72 = select i1 %cmp70, i32 256, i32 128, !dbg !6097
  br label %cond.end73, !dbg !6097

cond.end73:                                       ; preds = %cond.false68, %cond.true67
  %cond74 = phi i32 [ %38, %cond.true67 ], [ %cond72, %cond.false68 ], !dbg !6097
  %cmp75 = icmp ule i32 %34, %cond74, !dbg !6098
  br i1 %cmp75, label %land.lhs.true77, label %if.end91, !dbg !6099

land.lhs.true77:                                  ; preds = %cond.end73
  %41 = load i32, i32* %largest_mode.addr, align 4, !dbg !6100
  %cmp78 = icmp eq i32 %41, 0, !dbg !6101
  br i1 %cmp78, label %if.then90, label %lor.lhs.false80, !dbg !6102

lor.lhs.false80:                                  ; preds = %land.lhs.true77
  %42 = load i32, i32* %unit, align 4, !dbg !6103
  %43 = load i32, i32* %largest_mode.addr, align 4, !dbg !6104
  %idxprom81 = zext i32 %43 to i64, !dbg !6104
  %arrayidx82 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom81, !dbg !6104
  %44 = load i8, i8* %arrayidx82, align 1, !dbg !6104
  %conv83 = zext i8 %44 to i16, !dbg !6104
  %conv84 = zext i16 %conv83 to i32, !dbg !6104
  %mul85 = mul nsw i32 %conv84, 8, !dbg !6104
  %conv86 = trunc i32 %mul85 to i16, !dbg !6104
  %conv87 = zext i16 %conv86 to i32, !dbg !6104
  %cmp88 = icmp ule i32 %42, %conv87, !dbg !6105
  br i1 %cmp88, label %if.then90, label %if.end91, !dbg !6106

if.then90:                                        ; preds = %lor.lhs.false80, %land.lhs.true77
  %45 = load i32, i32* %tmode, align 4, !dbg !6107
  store i32 %45, i32* %wide_mode, align 4, !dbg !6108
  br label %if.end91, !dbg !6109

if.end91:                                         ; preds = %if.then90, %lor.lhs.false80, %cond.end73, %land.lhs.true57, %for.body45
  br label %for.inc92, !dbg !6110

for.inc92:                                        ; preds = %if.end91
  %46 = load i32, i32* %tmode, align 4, !dbg !6111
  %idxprom93 = zext i32 %46 to i64, !dbg !6111
  %arrayidx94 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom93, !dbg !6111
  %47 = load i8, i8* %arrayidx94, align 1, !dbg !6111
  %conv95 = zext i8 %47 to i32, !dbg !6111
  store i32 %conv95, i32* %tmode, align 4, !dbg !6112
  br label %for.cond42, !dbg !6113, !llvm.loop !6114

for.end96:                                        ; preds = %for.cond42
  %48 = load i32, i32* %wide_mode, align 4, !dbg !6116
  %cmp97 = icmp ne i32 %48, 0, !dbg !6118
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !6119

if.then99:                                        ; preds = %for.end96
  %49 = load i32, i32* %wide_mode, align 4, !dbg !6120
  store i32 %49, i32* %retval, align 4, !dbg !6121
  br label %return, !dbg !6121

if.end100:                                        ; preds = %for.end96
  br label %if.end101, !dbg !6122

if.end101:                                        ; preds = %if.end100, %land.lhs.true38, %if.end37
  %50 = load i32, i32* %mode, align 4, !dbg !6123
  store i32 %50, i32* %retval, align 4, !dbg !6124
  br label %return, !dbg !6124

return:                                           ; preds = %if.end101, %if.then99, %if.then36
  %51 = load i32, i32* %retval, align 4, !dbg !6125
  ret i32 %51, !dbg !6125
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @get_mode_bounds(i32 %mode, i32 %sign, i32 %target_mode, %struct.rtx_def** %mmin, %struct.rtx_def** %mmax) #0 !dbg !6126 {
entry:
  %mode.addr = alloca i32, align 4
  %sign.addr = alloca i32, align 4
  %target_mode.addr = alloca i32, align 4
  %mmin.addr = alloca %struct.rtx_def**, align 8
  %mmax.addr = alloca %struct.rtx_def**, align 8
  %size = alloca i32, align 4
  %min_val = alloca i64, align 8
  %max_val = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6130, metadata !DIExpression()), !dbg !6131
  store i32 %sign, i32* %sign.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sign.addr, metadata !6132, metadata !DIExpression()), !dbg !6133
  store i32 %target_mode, i32* %target_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target_mode.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  store %struct.rtx_def** %mmin, %struct.rtx_def*** %mmin.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %mmin.addr, metadata !6136, metadata !DIExpression()), !dbg !6137
  store %struct.rtx_def** %mmax, %struct.rtx_def*** %mmax.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %mmax.addr, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata i32* %size, metadata !6140, metadata !DIExpression()), !dbg !6141
  %0 = load i32, i32* %mode.addr, align 4, !dbg !6142
  %idxprom = zext i32 %0 to i64, !dbg !6142
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6142
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6142
  %conv = zext i8 %1 to i16, !dbg !6142
  %conv1 = zext i16 %conv to i32, !dbg !6142
  %mul = mul nsw i32 %conv1, 8, !dbg !6142
  %conv2 = trunc i32 %mul to i16, !dbg !6142
  %conv3 = zext i16 %conv2 to i32, !dbg !6142
  store i32 %conv3, i32* %size, align 4, !dbg !6141
  call void @llvm.dbg.declare(metadata i64* %min_val, metadata !6143, metadata !DIExpression()), !dbg !6144
  call void @llvm.dbg.declare(metadata i64* %max_val, metadata !6145, metadata !DIExpression()), !dbg !6146
  %2 = load i32, i32* %size, align 4, !dbg !6147
  %cmp = icmp ule i32 %2, 64, !dbg !6147
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6147

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2512, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6147
  br label %cond.end, !dbg !6147

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6147
  %3 = load i32, i32* %sign.addr, align 4, !dbg !6148
  %tobool = icmp ne i32 %3, 0, !dbg !6148
  br i1 %tobool, label %if.then, label %if.else, !dbg !6150

if.then:                                          ; preds = %cond.end
  %4 = load i32, i32* %size, align 4, !dbg !6151
  %sub = sub i32 %4, 1, !dbg !6153
  %sh_prom = zext i32 %sub to i64, !dbg !6154
  %shl = shl i64 1, %sh_prom, !dbg !6154
  %sub5 = sub i64 0, %shl, !dbg !6155
  store i64 %sub5, i64* %min_val, align 8, !dbg !6156
  %5 = load i32, i32* %size, align 4, !dbg !6157
  %sub6 = sub i32 %5, 1, !dbg !6158
  %sh_prom7 = zext i32 %sub6 to i64, !dbg !6159
  %shl8 = shl i64 1, %sh_prom7, !dbg !6159
  %sub9 = sub i64 %shl8, 1, !dbg !6160
  store i64 %sub9, i64* %max_val, align 8, !dbg !6161
  br label %if.end, !dbg !6162

if.else:                                          ; preds = %cond.end
  store i64 0, i64* %min_val, align 8, !dbg !6163
  %6 = load i32, i32* %size, align 4, !dbg !6165
  %sub10 = sub i32 %6, 1, !dbg !6166
  %sh_prom11 = zext i32 %sub10 to i64, !dbg !6167
  %shl12 = shl i64 1, %sh_prom11, !dbg !6167
  %shl13 = shl i64 %shl12, 1, !dbg !6168
  %sub14 = sub i64 %shl13, 1, !dbg !6169
  store i64 %sub14, i64* %max_val, align 8, !dbg !6170
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load i64, i64* %min_val, align 8, !dbg !6171
  %8 = load i32, i32* %target_mode.addr, align 4, !dbg !6172
  %call = call %struct.rtx_def* @gen_int_mode(i64 %7, i32 %8), !dbg !6173
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %mmin.addr, align 8, !dbg !6174
  store %struct.rtx_def* %call, %struct.rtx_def** %9, align 8, !dbg !6175
  %10 = load i64, i64* %max_val, align 8, !dbg !6176
  %11 = load i32, i32* %target_mode.addr, align 4, !dbg !6177
  %call15 = call %struct.rtx_def* @gen_int_mode(i64 %10, i32 %11), !dbg !6178
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %mmax.addr, align 8, !dbg !6179
  store %struct.rtx_def* %call15, %struct.rtx_def** %12, align 8, !dbg !6180
  ret void, !dbg !6181
}

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #2

declare dso_local void @gt_ggc_mx_VEC_tree_gc(i8*) #2

declare dso_local void @gt_pch_nx_VEC_tree_gc(i8*) #2

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

declare dso_local void @find_placeholder_in_expr(%union.tree_node*, %struct.VEC_tree_heap**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6182 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6185, metadata !DIExpression()), !dbg !6186
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6186
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6186
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6186

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6186
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6186
  %2 = load i32, i32* %num, align 8, !dbg !6186
  br label %cond.end, !dbg !6186

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6186

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6186
  ret i32 %cond, !dbg !6186
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_self_referential_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !6187 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %code = alloca i32, align 4
  %inner = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !6191, metadata !DIExpression()), !dbg !6192
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !6193, metadata !DIExpression()), !dbg !6194
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6195, metadata !DIExpression()), !dbg !6196
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6197, metadata !DIExpression()), !dbg !6198
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6199
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6199
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6199
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6199
  %bf.load = load i64, i64* %2, align 8, !dbg !6199
  %bf.clear = and i64 %bf.load, 65535, !dbg !6199
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6199
  store i32 %bf.cast, i32* %code, align 4, !dbg !6198
  %3 = load i32, i32* %code, align 4, !dbg !6200
  %idxprom = sext i32 %3 to i64, !dbg !6200
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6200
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6200
  %cmp = icmp eq i32 %4, 2, !dbg !6202
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6203

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %code, align 4, !dbg !6204
  %idxprom1 = sext i32 %5 to i64, !dbg !6204
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom1, !dbg !6204
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !6204
  %cmp3 = icmp eq i32 %6, 3, !dbg !6205
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !6206

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %7 = load i32, i32* %code, align 4, !dbg !6207
  %idxprom5 = sext i32 %7 to i64, !dbg !6207
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !6207
  %8 = load i32, i32* %arrayidx6, align 4, !dbg !6207
  %cmp7 = icmp eq i32 %8, 1, !dbg !6208
  br i1 %cmp7, label %if.then, label %if.else, !dbg !6209

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %9 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6210
  store i32 0, i32* %9, align 4, !dbg !6212
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6213
  br label %return, !dbg !6213

if.else:                                          ; preds = %lor.lhs.false4
  %10 = load i32, i32* %code, align 4, !dbg !6214
  %cmp8 = icmp eq i32 %10, 121, !dbg !6216
  br i1 %cmp8, label %land.lhs.true, label %if.else16, !dbg !6217

land.lhs.true:                                    ; preds = %if.else
  %11 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6218
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !6218
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !6218
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6218
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6218
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !6218
  %base10 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6218
  %14 = bitcast %struct.tree_base* %base10 to i64*, !dbg !6218
  %bf.load11 = load i64, i64* %14, align 8, !dbg !6218
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !6218
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !6218
  %cmp14 = icmp eq i32 %bf.cast13, 62, !dbg !6219
  br i1 %cmp14, label %if.then15, label %if.else16, !dbg !6220

if.then15:                                        ; preds = %land.lhs.true
  %15 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6221
  store i32 0, i32* %15, align 4, !dbg !6223
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6224
  br label %return, !dbg !6224

if.else16:                                        ; preds = %land.lhs.true, %if.else
  %16 = load i32, i32* %code, align 4, !dbg !6225
  %cmp17 = icmp eq i32 %16, 41, !dbg !6227
  br i1 %cmp17, label %if.then18, label %if.else38, !dbg !6228

if.then18:                                        ; preds = %if.else16
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !6229, metadata !DIExpression()), !dbg !6231
  %17 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6232
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !6232
  %exp19 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !6232
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !6232
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !6232
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !6232
  store %union.tree_node* %19, %union.tree_node** %inner, align 8, !dbg !6234
  br label %for.cond, !dbg !6235

for.cond:                                         ; preds = %for.inc, %if.then18
  %20 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !6236
  %base22 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6236
  %21 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6236
  %bf.load23 = load i64, i64* %21, align 8, !dbg !6236
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6236
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6236
  %idxprom26 = sext i32 %bf.cast25 to i64, !dbg !6236
  %arrayidx27 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom26, !dbg !6236
  %22 = load i32, i32* %arrayidx27, align 4, !dbg !6236
  %cmp28 = icmp eq i32 %22, 4, !dbg !6236
  br i1 %cmp28, label %for.body, label %for.end, !dbg !6238

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !6238

for.inc:                                          ; preds = %for.body
  %23 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !6239
  %exp29 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !6239
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !6239
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 0, !dbg !6239
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !6239
  store %union.tree_node* %24, %union.tree_node** %inner, align 8, !dbg !6240
  br label %for.cond, !dbg !6241, !llvm.loop !6242

for.end:                                          ; preds = %for.cond
  %25 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !6244
  %base32 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6244
  %26 = bitcast %struct.tree_base* %base32 to i64*, !dbg !6244
  %bf.load33 = load i64, i64* %26, align 8, !dbg !6244
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !6244
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !6244
  %cmp36 = icmp eq i32 %bf.cast35, 62, !dbg !6246
  br i1 %cmp36, label %if.then37, label %if.end, !dbg !6247

if.then37:                                        ; preds = %for.end
  %27 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6248
  store i32 0, i32* %27, align 4, !dbg !6250
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6251
  br label %return, !dbg !6251

if.end:                                           ; preds = %for.end
  br label %if.end42, !dbg !6252

if.else38:                                        ; preds = %if.else16
  %28 = load i32, i32* %code, align 4, !dbg !6253
  %cmp39 = icmp eq i32 %28, 120, !dbg !6255
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !6256

if.then40:                                        ; preds = %if.else38
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6257
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !6258
  br label %return, !dbg !6258

if.end41:                                         ; preds = %if.else38
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end
  br label %if.end43

if.end43:                                         ; preds = %if.end42
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  %30 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6259
  %31 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6260
  %32 = load i8*, i8** %data.addr, align 8, !dbg !6261
  %call = call %union.tree_node* @copy_tree_r(%union.tree_node** %30, i32* %31, i8* %32), !dbg !6262
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !6263
  br label %return, !dbg !6263

return:                                           ; preds = %if.end44, %if.then40, %if.then37, %if.then15, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6264
  ret %union.tree_node* %33, !dbg !6264
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local %union.tree_node* @substitute_in_expr(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !6265 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !6269, metadata !DIExpression()), !dbg !6270
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6271
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !6271
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !6271
  br i1 %tobool, label %if.then, label %if.end, !dbg !6270

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6271
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !6271
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !6271
  call void @free(i8* %4), !dbg !6271
  br label %if.end, !dbg !6271

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6270
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !6270
  ret void, !dbg !6270
}

declare dso_local %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_file_function_name(i8*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !6273 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6276, metadata !DIExpression()), !dbg !6277
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6278, metadata !DIExpression()), !dbg !6277
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6277
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !6277
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6277
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !6277
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !6277
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6277

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6277
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !6277
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !6277
  br label %cond.end, !dbg !6277

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6277
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6277
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !6277
  ret %union.tree_node** %call1, !dbg !6277
}

declare dso_local %union.tree_node* @build_function_call_expr(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @copy_tree_r(%union.tree_node**, i32*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !6279 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6282, metadata !DIExpression()), !dbg !6283
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6284, metadata !DIExpression()), !dbg !6283
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6285, metadata !DIExpression()), !dbg !6283
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6283
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !6283
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !6283
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6283

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6283
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !6283
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !6283
  br label %cond.end, !dbg !6283

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6283

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6283
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6283
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !6283
  %tobool1 = icmp ne i32 %call, 0, !dbg !6283
  %lnot = xor i1 %tobool1, true, !dbg !6283
  %lnot.ext = zext i1 %lnot to i32, !dbg !6283
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6283
  %5 = load i32, i32* %extend, align 4, !dbg !6286
  %tobool2 = icmp ne i32 %5, 0, !dbg !6286
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6283

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6286
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !6286
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !6286
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6286
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6286
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !6286
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6286
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !6286
  br label %if.end, !dbg !6286

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6283
  ret i32 %12, !dbg !6283
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !6288 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6292, metadata !DIExpression()), !dbg !6293
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6294, metadata !DIExpression()), !dbg !6293
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !6295, metadata !DIExpression()), !dbg !6293
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6293
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !6293
  %1 = load i32, i32* %num, align 8, !dbg !6293
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6293
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6293
  %3 = load i32, i32* %alloc, align 4, !dbg !6293
  %cmp = icmp ult i32 %1, %3, !dbg !6293
  %conv = zext i1 %cmp to i32, !dbg !6293
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6293
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6293
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6293
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !6293
  %6 = load i32, i32* %num1, align 8, !dbg !6293
  %inc = add i32 %6, 1, !dbg !6293
  store i32 %inc, i32* %num1, align 8, !dbg !6293
  %idxprom = zext i32 %6 to i64, !dbg !6293
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6293
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !6293
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6293
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6293
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !6293
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6293
  ret %union.tree_node** %9, !dbg !6293
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !6296 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6301, metadata !DIExpression()), !dbg !6300
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6300
  %cmp = icmp sge i32 %0, 0, !dbg !6300
  %conv = zext i1 %cmp to i32, !dbg !6300
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6300
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !6300
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6300

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6300
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6300
  %3 = load i32, i32* %alloc, align 4, !dbg !6300
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6300
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !6300
  %5 = load i32, i32* %num, align 8, !dbg !6300
  %sub = sub i32 %3, %5, !dbg !6300
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6300
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6300
  %conv2 = zext i1 %cmp1 to i32, !dbg !6300
  br label %cond.end, !dbg !6300

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6300
  %tobool3 = icmp ne i32 %7, 0, !dbg !6300
  %lnot = xor i1 %tobool3, true, !dbg !6300
  %lnot.ext = zext i1 %lnot to i32, !dbg !6300
  br label %cond.end, !dbg !6300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6300
  ret i32 %cond, !dbg !6300
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

declare dso_local void @ggc_free(i8*) #2

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2811, !2812, !2813}
!llvm.ident = !{!2814}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "maximum_field_alignment", scope: !2, file: !3, line: 51, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1493, globals: !2779, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "stor-layout.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !511, !526, !548, !585, !592, !1466, !1479}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510}
!379 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!384 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!385 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!386 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!387 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!388 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!389 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!390 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!391 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!392 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!393 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!394 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!395 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!396 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!397 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!398 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!399 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!511 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_dump_index", file: !512, line: 30, baseType: !7, size: 32, elements: !513)
!512 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!513 = !{!514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525}
!514 = !DIEnumerator(name: "TDI_none", value: 0, isUnsigned: true)
!515 = !DIEnumerator(name: "TDI_cgraph", value: 1, isUnsigned: true)
!516 = !DIEnumerator(name: "TDI_tu", value: 2, isUnsigned: true)
!517 = !DIEnumerator(name: "TDI_class", value: 3, isUnsigned: true)
!518 = !DIEnumerator(name: "TDI_original", value: 4, isUnsigned: true)
!519 = !DIEnumerator(name: "TDI_generic", value: 5, isUnsigned: true)
!520 = !DIEnumerator(name: "TDI_nested", value: 6, isUnsigned: true)
!521 = !DIEnumerator(name: "TDI_vcg", value: 7, isUnsigned: true)
!522 = !DIEnumerator(name: "TDI_tree_all", value: 8, isUnsigned: true)
!523 = !DIEnumerator(name: "TDI_rtl_all", value: 9, isUnsigned: true)
!524 = !DIEnumerator(name: "TDI_ipa_all", value: 10, isUnsigned: true)
!525 = !DIEnumerator(name: "TDI_end", value: 11, isUnsigned: true)
!526 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !527, line: 36, baseType: !7, size: 32, elements: !528)
!527 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!528 = !{!529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547}
!529 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!530 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!531 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!532 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!533 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!534 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!535 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!536 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!537 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!538 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!539 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!540 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!541 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!542 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!543 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!544 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!545 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!546 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!547 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!548 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !549)
!549 = !{!550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584}
!550 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!551 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!552 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!553 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!554 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!555 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!556 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!557 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!558 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!559 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!560 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!561 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!562 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!563 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!564 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!565 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!566 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!567 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!568 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!569 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!570 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!571 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!572 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!573 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!574 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!575 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!576 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!577 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!578 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!579 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!580 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!581 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!582 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!583 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!584 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!585 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !135, line: 4288, baseType: !7, size: 32, elements: !586)
!586 = !{!587, !588, !589, !590, !591}
!587 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!588 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!589 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!590 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!591 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!592 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !593, line: 723, baseType: !7, size: 32, elements: !594)
!593 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!594 = !{!595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465}
!595 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!596 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!597 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!598 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!599 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!600 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!601 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!602 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!603 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!604 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!605 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!606 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!607 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!608 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!609 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!610 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!611 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!612 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!613 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!614 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!615 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!616 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!617 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!618 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!619 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!620 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!621 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!622 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!623 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!624 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!625 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!626 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!627 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!628 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!629 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!630 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!631 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!632 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!633 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!634 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!635 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!636 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!637 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!638 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!639 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!640 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!641 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!642 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!643 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!644 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!645 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!646 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!647 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!648 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!649 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!650 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!651 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!652 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!653 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!654 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!655 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!656 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!657 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!658 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!659 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!660 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!661 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!662 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!663 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!664 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!665 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!666 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!667 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!668 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!669 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!670 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!671 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!672 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!673 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!674 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!675 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!676 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!677 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!678 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!679 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!680 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!681 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!682 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!683 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!684 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!685 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!686 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!687 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!688 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!689 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!690 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!691 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!692 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!693 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!694 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!695 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!696 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!697 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!698 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!699 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!700 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!701 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!702 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!703 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!704 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!705 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!706 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!707 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!708 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!709 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!710 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!711 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!712 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!713 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!714 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!715 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!716 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!717 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!718 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!719 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!720 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!721 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!722 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!723 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!724 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!725 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!726 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!727 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!728 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!729 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!730 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!731 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!732 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!733 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!734 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!735 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!736 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!737 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!738 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!739 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!740 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!741 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!742 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!743 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!744 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!745 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!746 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!747 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!748 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!749 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!750 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!751 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!752 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!753 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!754 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!755 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!756 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!757 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!758 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!759 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!760 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!761 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!762 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!763 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!764 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!765 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!766 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!767 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!768 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!769 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!770 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!771 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!772 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!773 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!774 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!775 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!776 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!777 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!778 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!779 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!780 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!781 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!782 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!783 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!784 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!785 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!786 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!787 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!788 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!789 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!790 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!791 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1465 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1466 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !1467)
!1467 = !{!1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478}
!1468 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1469 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1470 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1471 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1472 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1473 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1474 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1475 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1476 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1477 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1478 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1479 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !1480)
!1480 = !{!1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492}
!1481 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1482 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1483 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1484 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1485 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1486 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1487 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1488 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1489 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1490 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1491 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1492 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1493 = !{!134, !1494, !1778, !2765, !5, !526, !1672, !1591, !2766, !1624, !1548, !1550, !2494, !7}
!1494 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1495, line: 56, baseType: !1496)
!1495 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1497, size: 64)
!1497 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1498)
!1498 = !{!1499, !1532, !1538, !1551, !1570, !1581, !1586, !1597, !1603, !1617, !1629, !1667, !2164, !2192, !2200, !2201, !2206, !2215, !2221, !2226, !2230, !2234, !2408, !2455, !2461, !2467, !2474, !2485, !2510, !2527, !2539, !2561, !2576, !2747}
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1497, file: !135, line: 3372, baseType: !1500, size: 64)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1501)
!1501 = !{!1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1500, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1500, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1500, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1500, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1500, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1500, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1500, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1500, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1500, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1500, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1500, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1500, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1500, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1500, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1500, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1500, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1500, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1500, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1500, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1500, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1500, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1500, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1500, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1500, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1500, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1500, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1500, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1500, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1500, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1500, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1497, file: !135, line: 3373, baseType: !1533, size: 192)
!1533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1534)
!1534 = !{!1535, !1536, !1537}
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1533, file: !135, line: 403, baseType: !1500, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1533, file: !135, line: 404, baseType: !1494, size: 64, offset: 64)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1533, file: !135, line: 405, baseType: !1494, size: 64, offset: 128)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1497, file: !135, line: 3374, baseType: !1539, size: 320)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1540)
!1540 = !{!1541, !1542}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1539, file: !135, line: 1385, baseType: !1533, size: 192)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1539, file: !135, line: 1386, baseType: !1543, size: 128, offset: 192)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1544, line: 58, baseType: !1545)
!1544 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1545 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1544, line: 54, size: 128, elements: !1546)
!1546 = !{!1547, !1549}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1545, file: !1544, line: 56, baseType: !1548, size: 64)
!1548 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1545, file: !1544, line: 57, baseType: !1550, size: 64, offset: 64)
!1550 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1497, file: !135, line: 3375, baseType: !1552, size: 256)
!1552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1553)
!1553 = !{!1554, !1555}
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1552, file: !135, line: 1398, baseType: !1533, size: 192)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1552, file: !135, line: 1399, baseType: !1556, size: 64, offset: 192)
!1556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1557, size: 64)
!1557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1558, line: 52, size: 256, elements: !1559)
!1558 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1559 = !{!1560, !1561, !1562, !1563, !1564, !1565, !1566}
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1557, file: !1558, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1557, file: !1558, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1557, file: !1558, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1557, file: !1558, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1557, file: !1558, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1557, file: !1558, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1557, file: !1558, line: 62, baseType: !1567, size: 192, offset: 64)
!1567 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1548, size: 192, elements: !1568)
!1568 = !{!1569}
!1569 = !DISubrange(count: 3)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1497, file: !135, line: 3376, baseType: !1571, size: 256)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1572)
!1572 = !{!1573, !1574}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1571, file: !135, line: 1409, baseType: !1533, size: 192)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1571, file: !135, line: 1410, baseType: !1575, size: 64, offset: 192)
!1575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1576, size: 64)
!1576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1577, line: 27, size: 192, elements: !1578)
!1577 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1578 = !{!1579, !1580}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1576, file: !1577, line: 29, baseType: !1543, size: 128)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1576, file: !1577, line: 30, baseType: !5, size: 32, offset: 128)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1497, file: !135, line: 3377, baseType: !1582, size: 256)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1583)
!1583 = !{!1584, !1585}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1582, file: !135, line: 1438, baseType: !1533, size: 192)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1582, file: !135, line: 1439, baseType: !1494, size: 64, offset: 192)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1497, file: !135, line: 3378, baseType: !1587, size: 256)
!1587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1588)
!1588 = !{!1589, !1590, !1592}
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1587, file: !135, line: 1419, baseType: !1533, size: 192)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1587, file: !135, line: 1420, baseType: !1591, size: 32, offset: 192)
!1591 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1587, file: !135, line: 1421, baseType: !1593, size: 8, offset: 224)
!1593 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 8, elements: !1595)
!1594 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1595 = !{!1596}
!1596 = !DISubrange(count: 1)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1497, file: !135, line: 3379, baseType: !1598, size: 320)
!1598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1599)
!1599 = !{!1600, !1601, !1602}
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1598, file: !135, line: 1429, baseType: !1533, size: 192)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1598, file: !135, line: 1430, baseType: !1494, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1598, file: !135, line: 1431, baseType: !1494, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1497, file: !135, line: 3380, baseType: !1604, size: 320)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1605)
!1605 = !{!1606, !1607}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1604, file: !135, line: 1461, baseType: !1533, size: 192)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1604, file: !135, line: 1462, baseType: !1608, size: 128, offset: 192)
!1608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1609, line: 31, size: 128, elements: !1610)
!1609 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1610 = !{!1611, !1615, !1616}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1608, file: !1609, line: 32, baseType: !1612, size: 64)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1614)
!1614 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1608, file: !1609, line: 33, baseType: !7, size: 32, offset: 64)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1608, file: !1609, line: 34, baseType: !7, size: 32, offset: 96)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1497, file: !135, line: 3381, baseType: !1618, size: 384)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1619)
!1619 = !{!1620, !1621, !1626, !1627, !1628}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1618, file: !135, line: 2508, baseType: !1533, size: 192)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1618, file: !135, line: 2509, baseType: !1622, size: 32, offset: 192)
!1622 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1623, line: 58, baseType: !1624)
!1623 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1625, line: 44, baseType: !7)
!1625 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1618, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1618, file: !135, line: 2511, baseType: !1494, size: 64, offset: 256)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1618, file: !135, line: 2512, baseType: !1494, size: 64, offset: 320)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1497, file: !135, line: 3382, baseType: !1630, size: 896)
!1630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1631)
!1631 = !{!1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664}
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1630, file: !135, line: 2653, baseType: !1618, size: 384)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1630, file: !135, line: 2654, baseType: !1494, size: 64, offset: 384)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1630, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1630, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1630, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1630, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1630, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1630, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1630, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1630, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1630, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1630, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1630, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1630, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1630, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1630, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1630, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1630, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1630, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1630, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1630, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1630, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1630, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1630, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1630, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1630, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1630, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1630, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1630, file: !135, line: 2705, baseType: !1494, size: 64, offset: 576)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1630, file: !135, line: 2706, baseType: !1494, size: 64, offset: 640)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1630, file: !135, line: 2707, baseType: !1494, size: 64, offset: 704)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1630, file: !135, line: 2708, baseType: !1494, size: 64, offset: 768)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1630, file: !135, line: 2711, baseType: !1665, size: 64, offset: 832)
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1666, size: 64)
!1666 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1497, file: !135, line: 3383, baseType: !1668, size: 960)
!1668 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1669)
!1669 = !{!1670, !1671}
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1668, file: !135, line: 2757, baseType: !1630, size: 896)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1668, file: !135, line: 2758, baseType: !1672, size: 64, offset: 896)
!1672 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1495, line: 50, baseType: !1673)
!1673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1675, line: 240, size: 384, elements: !1676)
!1675 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1676 = !{!1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1674, file: !1675, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1674, file: !1675, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1674, file: !1675, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1674, file: !1675, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1674, file: !1675, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1674, file: !1675, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1674, file: !1675, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1674, file: !1675, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1674, file: !1675, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1674, file: !1675, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1674, file: !1675, line: 321, baseType: !1688, size: 320, offset: 64)
!1688 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1675, line: 315, size: 320, elements: !1689)
!1689 = !{!1690, !2097, !2099, !2162, !2163}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1688, file: !1675, line: 316, baseType: !1691, size: 64)
!1691 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1692, size: 64, elements: !1595)
!1692 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1675, line: 183, baseType: !1693)
!1693 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1675, line: 166, size: 64, elements: !1694)
!1694 = !{!1695, !1696, !1697, !1700, !1701, !1709, !1710, !1722, !1725, !1787, !1788, !2074, !2087, !2094}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1693, file: !1675, line: 168, baseType: !1591, size: 32)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1693, file: !1675, line: 169, baseType: !7, size: 32)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1693, file: !1675, line: 170, baseType: !1698, size: 64)
!1698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1699, size: 64)
!1699 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1594)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1693, file: !1675, line: 171, baseType: !1672, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1693, file: !1675, line: 172, baseType: !1702, size: 64)
!1702 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1495, line: 53, baseType: !1703)
!1703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1704, size: 64)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1675, line: 359, size: 128, elements: !1705)
!1705 = !{!1706, !1707}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1704, file: !1675, line: 360, baseType: !1591, size: 32)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1704, file: !1675, line: 361, baseType: !1708, size: 64, offset: 64)
!1708 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1672, size: 64, elements: !1595)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1693, file: !1675, line: 173, baseType: !5, size: 32)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1693, file: !1675, line: 174, baseType: !1711, size: 32)
!1711 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1675, line: 133, baseType: !1712)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1675, line: 115, size: 32, elements: !1713)
!1713 = !{!1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1712, file: !1675, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1712, file: !1675, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1712, file: !1675, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1712, file: !1675, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1712, file: !1675, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1712, file: !1675, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1712, file: !1675, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1712, file: !1675, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1693, file: !1675, line: 175, baseType: !1723, size: 64)
!1723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1724, size: 64)
!1724 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1675, line: 175, flags: DIFlagFwdDecl)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1693, file: !1675, line: 176, baseType: !1726, size: 64)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1728, line: 75, size: 256, elements: !1729)
!1728 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1729 = !{!1730, !1744, !1745, !1746}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1727, file: !1728, line: 76, baseType: !1731, size: 64)
!1731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1732, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1728, line: 68, baseType: !1733)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1728, line: 63, size: 320, elements: !1734)
!1734 = !{!1735, !1737, !1738, !1739}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1733, file: !1728, line: 64, baseType: !1736, size: 64)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1733, size: 64)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1733, file: !1728, line: 65, baseType: !1736, size: 64, offset: 64)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1733, file: !1728, line: 66, baseType: !7, size: 32, offset: 128)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1733, file: !1728, line: 67, baseType: !1740, size: 128, offset: 192)
!1740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1741, size: 128, elements: !1742)
!1741 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1728, line: 29, baseType: !1548)
!1742 = !{!1743}
!1743 = !DISubrange(count: 2)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1727, file: !1728, line: 77, baseType: !1731, size: 64, offset: 64)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1727, file: !1728, line: 78, baseType: !7, size: 32, offset: 128)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1727, file: !1728, line: 79, baseType: !1747, size: 64, offset: 192)
!1747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1748, size: 64)
!1748 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1728, line: 49, baseType: !1749)
!1749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1728, line: 45, size: 832, elements: !1750)
!1750 = !{!1751, !1752, !1753}
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1749, file: !1728, line: 46, baseType: !1736, size: 64)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1749, file: !1728, line: 47, baseType: !1726, size: 64, offset: 64)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1749, file: !1728, line: 48, baseType: !1754, size: 704, offset: 128)
!1754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1755, line: 164, size: 704, elements: !1756)
!1755 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1756 = !{!1757, !1758, !1769, !1770, !1771, !1772, !1773, !1774, !1779, !1783, !1784, !1785, !1786}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1754, file: !1755, line: 166, baseType: !1550, size: 64)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1754, file: !1755, line: 167, baseType: !1759, size: 64, offset: 64)
!1759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1760, size: 64)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1755, line: 157, size: 192, elements: !1761)
!1761 = !{!1762, !1764, !1765}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1760, file: !1755, line: 159, baseType: !1763, size: 64)
!1763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1594, size: 64)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1760, file: !1755, line: 160, baseType: !1759, size: 64, offset: 64)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1760, file: !1755, line: 161, baseType: !1766, size: 32, offset: 128)
!1766 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 32, elements: !1767)
!1767 = !{!1768}
!1768 = !DISubrange(count: 4)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1754, file: !1755, line: 168, baseType: !1763, size: 64, offset: 128)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1754, file: !1755, line: 169, baseType: !1763, size: 64, offset: 192)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1754, file: !1755, line: 170, baseType: !1763, size: 64, offset: 256)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1754, file: !1755, line: 171, baseType: !1550, size: 64, offset: 320)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1754, file: !1755, line: 172, baseType: !1591, size: 32, offset: 384)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1754, file: !1755, line: 176, baseType: !1775, size: 64, offset: 448)
!1775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1776, size: 64)
!1776 = !DISubroutineType(types: !1777)
!1777 = !{!1759, !1778, !1550}
!1778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1754, file: !1755, line: 177, baseType: !1780, size: 64, offset: 512)
!1780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1781, size: 64)
!1781 = !DISubroutineType(types: !1782)
!1782 = !{null, !1778, !1759}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1754, file: !1755, line: 178, baseType: !1778, size: 64, offset: 576)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1754, file: !1755, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1754, file: !1755, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1754, file: !1755, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1693, file: !1675, line: 177, baseType: !1494, size: 64)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1693, file: !1675, line: 178, baseType: !1789, size: 64)
!1789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1790, size: 64)
!1790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !1791)
!1791 = !{!1792, !2039, !2040, !2041, !2044, !2048, !2049, !2050, !2068, !2069, !2070, !2071, !2072, !2073}
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1790, file: !330, line: 219, baseType: !1793, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !1795)
!1795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !1796)
!1796 = !{!1797}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1795, file: !330, line: 151, baseType: !1798, size: 128)
!1798 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !1799)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1799, file: !330, line: 150, baseType: !7, size: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1799, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1799, file: !330, line: 150, baseType: !1804, size: 64, offset: 64)
!1804 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1805, size: 64, elements: !1595)
!1805 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1495, line: 108, baseType: !1806)
!1806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1807, size: 64)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !1808)
!1808 = !{!1809, !1810, !1811, !2031, !2032, !2033, !2034, !2035, !2036, !2037}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1807, file: !330, line: 124, baseType: !1789, size: 64)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1807, file: !330, line: 125, baseType: !1789, size: 64, offset: 64)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1807, file: !330, line: 131, baseType: !1812, size: 64, offset: 128)
!1812 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !1813)
!1813 = !{!1814, !2030}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1812, file: !330, line: 129, baseType: !1815, size: 64)
!1815 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1495, line: 66, baseType: !1816)
!1816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1817, size: 64)
!1817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1818, line: 143, size: 192, elements: !1819)
!1818 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1819 = !{!1820, !2028, !2029}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1817, file: !1818, line: 145, baseType: !1821, size: 64)
!1821 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1495, line: 69, baseType: !1822)
!1822 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1823, size: 64)
!1823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1818, line: 136, size: 192, elements: !1824)
!1824 = !{!1825, !2026, !2027}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1823, file: !1818, line: 137, baseType: !1826, size: 64)
!1826 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1495, line: 58, baseType: !1827)
!1827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1828, size: 64)
!1828 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1818, line: 737, size: 768, elements: !1829)
!1829 = !{!1830, !1847, !1881, !1887, !1892, !1897, !1904, !1910, !1916, !1921, !1935, !1940, !1946, !1951, !1961, !1966, !1984, !1991, !1998, !2004, !2009, !2015, !2021}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1828, file: !1818, line: 738, baseType: !1831, size: 256)
!1831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1818, line: 271, size: 256, elements: !1832)
!1832 = !{!1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846}
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1831, file: !1818, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1831, file: !1818, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1831, file: !1818, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1831, file: !1818, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1831, file: !1818, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1831, file: !1818, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1831, file: !1818, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1831, file: !1818, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1831, file: !1818, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1831, file: !1818, line: 312, baseType: !7, size: 32, offset: 32)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1831, file: !1818, line: 316, baseType: !1622, size: 32, offset: 64)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1831, file: !1818, line: 319, baseType: !7, size: 32, offset: 96)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1831, file: !1818, line: 323, baseType: !1789, size: 64, offset: 128)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1831, file: !1818, line: 327, baseType: !1494, size: 64, offset: 192)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1828, file: !1818, line: 739, baseType: !1848, size: 448)
!1848 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1818, line: 350, size: 448, elements: !1849)
!1849 = !{!1850, !1879}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1848, file: !1818, line: 353, baseType: !1851, size: 384)
!1851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1818, line: 333, size: 384, elements: !1852)
!1852 = !{!1853, !1854, !1862}
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1851, file: !1818, line: 336, baseType: !1831, size: 256)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1851, file: !1818, line: 343, baseType: !1855, size: 64, offset: 256)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1857, line: 37, size: 128, elements: !1858)
!1857 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1858 = !{!1859, !1860}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1856, file: !1857, line: 39, baseType: !1855, size: 64)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1856, file: !1857, line: 40, baseType: !1861, size: 64, offset: 64)
!1861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1494, size: 64)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1851, file: !1818, line: 344, baseType: !1863, size: 64, offset: 320)
!1863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1864, size: 64)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1857, line: 45, size: 320, elements: !1865)
!1865 = !{!1866, !1867}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1864, file: !1857, line: 47, baseType: !1863, size: 64)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1864, file: !1857, line: 48, baseType: !1868, size: 256, offset: 64)
!1868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1869)
!1869 = !{!1870, !1872, !1873, !1878}
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1868, file: !135, line: 1884, baseType: !1871, size: 64)
!1871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1868, size: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1868, file: !135, line: 1885, baseType: !1871, size: 64, offset: 64)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1868, file: !135, line: 1891, baseType: !1874, size: 64, offset: 128)
!1874 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1868, file: !135, line: 1891, size: 64, elements: !1875)
!1875 = !{!1876, !1877}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1874, file: !135, line: 1891, baseType: !1826, size: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1874, file: !135, line: 1891, baseType: !1494, size: 64)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1868, file: !135, line: 1892, baseType: !1861, size: 64, offset: 192)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1848, file: !1818, line: 359, baseType: !1880, size: 64, offset: 384)
!1880 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1494, size: 64, elements: !1595)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1828, file: !1818, line: 740, baseType: !1882, size: 512)
!1882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1818, line: 365, size: 512, elements: !1883)
!1883 = !{!1884, !1885, !1886}
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1882, file: !1818, line: 368, baseType: !1851, size: 384)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1882, file: !1818, line: 373, baseType: !1494, size: 64, offset: 384)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1882, file: !1818, line: 374, baseType: !1494, size: 64, offset: 448)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1828, file: !1818, line: 741, baseType: !1888, size: 576)
!1888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1818, line: 380, size: 576, elements: !1889)
!1889 = !{!1890, !1891}
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1888, file: !1818, line: 383, baseType: !1882, size: 512)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1888, file: !1818, line: 389, baseType: !1880, size: 64, offset: 512)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1828, file: !1818, line: 742, baseType: !1893, size: 320)
!1893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1818, line: 395, size: 320, elements: !1894)
!1894 = !{!1895, !1896}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1893, file: !1818, line: 397, baseType: !1831, size: 256)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1893, file: !1818, line: 400, baseType: !1815, size: 64, offset: 256)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1828, file: !1818, line: 743, baseType: !1898, size: 448)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1818, line: 406, size: 448, elements: !1899)
!1899 = !{!1900, !1901, !1902, !1903}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1898, file: !1818, line: 408, baseType: !1831, size: 256)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1898, file: !1818, line: 412, baseType: !1494, size: 64, offset: 256)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1898, file: !1818, line: 420, baseType: !1494, size: 64, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1898, file: !1818, line: 423, baseType: !1815, size: 64, offset: 384)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1828, file: !1818, line: 744, baseType: !1905, size: 384)
!1905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1818, line: 429, size: 384, elements: !1906)
!1906 = !{!1907, !1908, !1909}
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1905, file: !1818, line: 431, baseType: !1831, size: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1905, file: !1818, line: 434, baseType: !1494, size: 64, offset: 256)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1905, file: !1818, line: 437, baseType: !1815, size: 64, offset: 320)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1828, file: !1818, line: 745, baseType: !1911, size: 384)
!1911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1818, line: 443, size: 384, elements: !1912)
!1912 = !{!1913, !1914, !1915}
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1911, file: !1818, line: 445, baseType: !1831, size: 256)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1911, file: !1818, line: 449, baseType: !1494, size: 64, offset: 256)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1911, file: !1818, line: 453, baseType: !1815, size: 64, offset: 320)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1828, file: !1818, line: 746, baseType: !1917, size: 320)
!1917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1818, line: 459, size: 320, elements: !1918)
!1918 = !{!1919, !1920}
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1917, file: !1818, line: 461, baseType: !1831, size: 256)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1917, file: !1818, line: 464, baseType: !1494, size: 64, offset: 256)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1828, file: !1818, line: 747, baseType: !1922, size: 768)
!1922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1818, line: 469, size: 768, elements: !1923)
!1923 = !{!1924, !1925, !1926, !1927, !1928}
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1922, file: !1818, line: 471, baseType: !1831, size: 256)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1922, file: !1818, line: 474, baseType: !7, size: 32, offset: 256)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1922, file: !1818, line: 475, baseType: !7, size: 32, offset: 288)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1922, file: !1818, line: 478, baseType: !1494, size: 64, offset: 320)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1922, file: !1818, line: 481, baseType: !1929, size: 384, offset: 384)
!1929 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1930, size: 384, elements: !1595)
!1930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1931)
!1931 = !{!1932, !1933, !1934}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1930, file: !135, line: 1920, baseType: !1868, size: 256)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1930, file: !135, line: 1921, baseType: !1494, size: 64, offset: 256)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1930, file: !135, line: 1922, baseType: !1622, size: 32, offset: 320)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1828, file: !1818, line: 748, baseType: !1936, size: 320)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1818, line: 487, size: 320, elements: !1937)
!1937 = !{!1938, !1939}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1936, file: !1818, line: 490, baseType: !1831, size: 256)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1936, file: !1818, line: 494, baseType: !1591, size: 32, offset: 256)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1828, file: !1818, line: 749, baseType: !1941, size: 384)
!1941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1818, line: 500, size: 384, elements: !1942)
!1942 = !{!1943, !1944, !1945}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1941, file: !1818, line: 502, baseType: !1831, size: 256)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1941, file: !1818, line: 506, baseType: !1815, size: 64, offset: 256)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1941, file: !1818, line: 510, baseType: !1815, size: 64, offset: 320)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1828, file: !1818, line: 750, baseType: !1947, size: 320)
!1947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1818, line: 529, size: 320, elements: !1948)
!1948 = !{!1949, !1950}
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1947, file: !1818, line: 531, baseType: !1831, size: 256)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1947, file: !1818, line: 540, baseType: !1815, size: 64, offset: 256)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1828, file: !1818, line: 751, baseType: !1952, size: 704)
!1952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1818, line: 546, size: 704, elements: !1953)
!1953 = !{!1954, !1955, !1956, !1957, !1958, !1959, !1960}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1952, file: !1818, line: 549, baseType: !1882, size: 512)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1952, file: !1818, line: 553, baseType: !1698, size: 64, offset: 512)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1952, file: !1818, line: 557, baseType: !1614, size: 8, offset: 576)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1952, file: !1818, line: 558, baseType: !1614, size: 8, offset: 584)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1952, file: !1818, line: 559, baseType: !1614, size: 8, offset: 592)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1952, file: !1818, line: 560, baseType: !1614, size: 8, offset: 600)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1952, file: !1818, line: 566, baseType: !1880, size: 64, offset: 640)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1828, file: !1818, line: 752, baseType: !1962, size: 384)
!1962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1818, line: 571, size: 384, elements: !1963)
!1963 = !{!1964, !1965}
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1962, file: !1818, line: 573, baseType: !1893, size: 320)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1962, file: !1818, line: 577, baseType: !1494, size: 64, offset: 320)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1828, file: !1818, line: 753, baseType: !1967, size: 576)
!1967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1818, line: 600, size: 576, elements: !1968)
!1968 = !{!1969, !1970, !1971, !1974, !1983}
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1967, file: !1818, line: 602, baseType: !1893, size: 320)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1967, file: !1818, line: 605, baseType: !1494, size: 64, offset: 320)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1967, file: !1818, line: 609, baseType: !1972, size: 64, offset: 384)
!1972 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1973, line: 46, baseType: !1548)
!1973 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1967, file: !1818, line: 612, baseType: !1975, size: 64, offset: 448)
!1975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1976, size: 64)
!1976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1818, line: 581, size: 320, elements: !1977)
!1977 = !{!1978, !1979, !1980, !1981, !1982}
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1976, file: !1818, line: 583, baseType: !134, size: 32)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1976, file: !1818, line: 586, baseType: !1494, size: 64, offset: 64)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1976, file: !1818, line: 589, baseType: !1494, size: 64, offset: 128)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1976, file: !1818, line: 592, baseType: !1494, size: 64, offset: 192)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1976, file: !1818, line: 595, baseType: !1494, size: 64, offset: 256)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1967, file: !1818, line: 616, baseType: !1815, size: 64, offset: 512)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1828, file: !1818, line: 754, baseType: !1985, size: 512)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1818, line: 622, size: 512, elements: !1986)
!1986 = !{!1987, !1988, !1989, !1990}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1985, file: !1818, line: 624, baseType: !1893, size: 320)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1985, file: !1818, line: 628, baseType: !1494, size: 64, offset: 320)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1985, file: !1818, line: 632, baseType: !1494, size: 64, offset: 384)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1985, file: !1818, line: 636, baseType: !1494, size: 64, offset: 448)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1828, file: !1818, line: 755, baseType: !1992, size: 704)
!1992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1818, line: 642, size: 704, elements: !1993)
!1993 = !{!1994, !1995, !1996, !1997}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1992, file: !1818, line: 644, baseType: !1985, size: 512)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1992, file: !1818, line: 648, baseType: !1494, size: 64, offset: 512)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1992, file: !1818, line: 652, baseType: !1494, size: 64, offset: 576)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1992, file: !1818, line: 653, baseType: !1494, size: 64, offset: 640)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1828, file: !1818, line: 756, baseType: !1999, size: 448)
!1999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1818, line: 663, size: 448, elements: !2000)
!2000 = !{!2001, !2002, !2003}
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1999, file: !1818, line: 665, baseType: !1893, size: 320)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1999, file: !1818, line: 668, baseType: !1494, size: 64, offset: 320)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1999, file: !1818, line: 673, baseType: !1494, size: 64, offset: 384)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1828, file: !1818, line: 757, baseType: !2005, size: 384)
!2005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1818, line: 694, size: 384, elements: !2006)
!2006 = !{!2007, !2008}
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2005, file: !1818, line: 696, baseType: !1893, size: 320)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2005, file: !1818, line: 699, baseType: !1494, size: 64, offset: 320)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1828, file: !1818, line: 758, baseType: !2010, size: 384)
!2010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1818, line: 681, size: 384, elements: !2011)
!2011 = !{!2012, !2013, !2014}
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2010, file: !1818, line: 683, baseType: !1831, size: 256)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2010, file: !1818, line: 686, baseType: !1494, size: 64, offset: 256)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2010, file: !1818, line: 689, baseType: !1494, size: 64, offset: 320)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1828, file: !1818, line: 759, baseType: !2016, size: 384)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1818, line: 707, size: 384, elements: !2017)
!2017 = !{!2018, !2019, !2020}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2016, file: !1818, line: 709, baseType: !1831, size: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2016, file: !1818, line: 712, baseType: !1494, size: 64, offset: 256)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2016, file: !1818, line: 712, baseType: !1494, size: 64, offset: 320)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1828, file: !1818, line: 760, baseType: !2022, size: 320)
!2022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1818, line: 718, size: 320, elements: !2023)
!2023 = !{!2024, !2025}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2022, file: !1818, line: 720, baseType: !1831, size: 256)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2022, file: !1818, line: 723, baseType: !1494, size: 64, offset: 256)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1823, file: !1818, line: 138, baseType: !1822, size: 64, offset: 64)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1823, file: !1818, line: 139, baseType: !1822, size: 64, offset: 128)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1817, file: !1818, line: 146, baseType: !1821, size: 64, offset: 64)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1817, file: !1818, line: 152, baseType: !1815, size: 64, offset: 128)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1812, file: !330, line: 130, baseType: !1672, size: 64)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1807, file: !330, line: 134, baseType: !1778, size: 64, offset: 192)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1807, file: !330, line: 137, baseType: !1494, size: 64, offset: 256)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1807, file: !330, line: 138, baseType: !1622, size: 32, offset: 320)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1807, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1807, file: !330, line: 144, baseType: !1591, size: 32, offset: 384)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1807, file: !330, line: 145, baseType: !1591, size: 32, offset: 416)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1807, file: !330, line: 146, baseType: !2038, size: 64, offset: 448)
!2038 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1550)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1790, file: !330, line: 220, baseType: !1793, size: 64, offset: 64)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1790, file: !330, line: 223, baseType: !1778, size: 64, offset: 128)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1790, file: !330, line: 226, baseType: !2042, size: 64, offset: 192)
!2042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2043, size: 64)
!2043 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1790, file: !330, line: 229, baseType: !2045, size: 128, offset: 256)
!2045 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2046, size: 128, elements: !1742)
!2046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2047, size: 64)
!2047 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1790, file: !330, line: 232, baseType: !1789, size: 64, offset: 384)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1790, file: !330, line: 233, baseType: !1789, size: 64, offset: 448)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1790, file: !330, line: 238, baseType: !2051, size: 64, offset: 512)
!2051 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !2052)
!2052 = !{!2053, !2059}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2051, file: !330, line: 236, baseType: !2054, size: 64)
!2054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !2056)
!2056 = !{!2057, !2058}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2055, file: !330, line: 275, baseType: !1815, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2055, file: !330, line: 278, baseType: !1815, size: 64, offset: 64)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2051, file: !330, line: 237, baseType: !2060, size: 64)
!2060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2061, size: 64)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !2062)
!2062 = !{!2063, !2064, !2065, !2066, !2067}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2061, file: !330, line: 261, baseType: !1672, size: 64)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2061, file: !330, line: 262, baseType: !1672, size: 64, offset: 64)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2061, file: !330, line: 266, baseType: !1672, size: 64, offset: 128)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2061, file: !330, line: 267, baseType: !1672, size: 64, offset: 192)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2061, file: !330, line: 270, baseType: !1591, size: 32, offset: 256)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1790, file: !330, line: 241, baseType: !2038, size: 64, offset: 576)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1790, file: !330, line: 244, baseType: !1591, size: 32, offset: 640)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1790, file: !330, line: 247, baseType: !1591, size: 32, offset: 672)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1790, file: !330, line: 250, baseType: !1591, size: 32, offset: 704)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1790, file: !330, line: 253, baseType: !1591, size: 32, offset: 736)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1790, file: !330, line: 256, baseType: !1591, size: 32, offset: 768)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1693, file: !1675, line: 179, baseType: !2075, size: 64)
!2075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2076, size: 64)
!2076 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1675, line: 150, baseType: !2077)
!2077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1675, line: 142, size: 320, elements: !2078)
!2078 = !{!2079, !2080, !2081, !2082, !2085, !2086}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2077, file: !1675, line: 144, baseType: !1494, size: 64)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2077, file: !1675, line: 145, baseType: !1672, size: 64, offset: 64)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2077, file: !1675, line: 146, baseType: !1672, size: 64, offset: 128)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2077, file: !1675, line: 147, baseType: !2083, size: 32, offset: 192)
!2083 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2084, line: 31, baseType: !1591)
!2084 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2077, file: !1675, line: 148, baseType: !7, size: 32, offset: 224)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2077, file: !1675, line: 149, baseType: !1614, size: 8, offset: 256)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1693, file: !1675, line: 180, baseType: !2088, size: 64)
!2088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2089, size: 64)
!2089 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1675, line: 162, baseType: !2090)
!2090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1675, line: 159, size: 128, elements: !2091)
!2091 = !{!2092, !2093}
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2090, file: !1675, line: 160, baseType: !1494, size: 64)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2090, file: !1675, line: 161, baseType: !1550, size: 64, offset: 64)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1693, file: !1675, line: 181, baseType: !2095, size: 64)
!2095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2096, size: 64)
!2096 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1675, line: 181, flags: DIFlagFwdDecl)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1688, file: !1675, line: 317, baseType: !2098, size: 64)
!2098 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1550, size: 64, elements: !1595)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1688, file: !1675, line: 318, baseType: !2100, size: 320)
!2100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1675, line: 188, size: 320, elements: !2101)
!2101 = !{!2102, !2104, !2161}
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2100, file: !1675, line: 190, baseType: !2103, size: 192)
!2103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1692, size: 192, elements: !1568)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2100, file: !1675, line: 193, baseType: !2105, size: 64, offset: 192)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1675, line: 206, size: 320, elements: !2107)
!2107 = !{!2108, !2146, !2147, !2148, !2160}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2106, file: !1675, line: 208, baseType: !2109, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2110, size: 64)
!2110 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1495, line: 62, baseType: !2111)
!2111 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2112, line: 538, size: 256, elements: !2113)
!2112 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2113 = !{!2114, !2118, !2124, !2137}
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2111, file: !2112, line: 539, baseType: !2115, size: 32)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2112, line: 482, size: 32, elements: !2116)
!2116 = !{!2117}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2115, file: !2112, line: 484, baseType: !7, size: 32)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2111, file: !2112, line: 540, baseType: !2119, size: 192)
!2119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2112, line: 488, size: 192, elements: !2120)
!2120 = !{!2121, !2122, !2123}
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2119, file: !2112, line: 489, baseType: !2115, size: 32)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2119, file: !2112, line: 492, baseType: !1698, size: 64, offset: 64)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2119, file: !2112, line: 496, baseType: !1494, size: 64, offset: 128)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2111, file: !2112, line: 541, baseType: !2125, size: 256)
!2125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2112, line: 504, size: 256, elements: !2126)
!2126 = !{!2127, !2128, !2135, !2136}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2125, file: !2112, line: 505, baseType: !2115, size: 32)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2125, file: !2112, line: 509, baseType: !2129, size: 64, offset: 64)
!2129 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2112, line: 501, baseType: !2130)
!2130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2131, size: 64)
!2131 = !DISubroutineType(types: !2132)
!2132 = !{null, !2133}
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2134 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2125, file: !2112, line: 510, baseType: !2133, size: 64, offset: 128)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2125, file: !2112, line: 513, baseType: !2109, size: 64, offset: 192)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2111, file: !2112, line: 542, baseType: !2138, size: 128)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2112, line: 530, size: 128, elements: !2139)
!2139 = !{!2140, !2141}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2138, file: !2112, line: 531, baseType: !2115, size: 32)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2138, file: !2112, line: 534, baseType: !2142, size: 64, offset: 64)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2112, line: 525, baseType: !2143)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = !DISubroutineType(types: !2145)
!2145 = !{!1614, !1494, !1698, !1548, !1548}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2106, file: !1675, line: 211, baseType: !7, size: 32, offset: 64)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2106, file: !1675, line: 214, baseType: !1550, size: 64, offset: 128)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2106, file: !1675, line: 224, baseType: !2149, size: 64, offset: 192)
!2149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1675, line: 202, baseType: !2151)
!2151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1675, line: 202, size: 128, elements: !2152)
!2152 = !{!2153}
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2151, file: !1675, line: 202, baseType: !2154, size: 128)
!2154 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1675, line: 200, baseType: !2155)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1675, line: 200, size: 128, elements: !2156)
!2156 = !{!2157, !2158, !2159}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2155, file: !1675, line: 200, baseType: !7, size: 32)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2155, file: !1675, line: 200, baseType: !7, size: 32, offset: 32)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2155, file: !1675, line: 200, baseType: !1708, size: 64, offset: 64)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2106, file: !1675, line: 234, baseType: !2149, size: 64, offset: 256)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2100, file: !1675, line: 197, baseType: !1550, size: 64, offset: 256)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1688, file: !1675, line: 319, baseType: !1557, size: 256)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1688, file: !1675, line: 320, baseType: !1576, size: 192)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1497, file: !135, line: 3384, baseType: !2165, size: 1472)
!2165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2166)
!2166 = !{!2167, !2188, !2189, !2190, !2191}
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2165, file: !135, line: 3115, baseType: !2168, size: 1216)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2169)
!2169 = !{!2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2168, file: !135, line: 2985, baseType: !1668, size: 960)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2168, file: !135, line: 2986, baseType: !1494, size: 64, offset: 960)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2168, file: !135, line: 2987, baseType: !1494, size: 64, offset: 1024)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2168, file: !135, line: 2988, baseType: !1494, size: 64, offset: 1088)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2168, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2168, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2168, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2168, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2168, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2168, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2168, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2168, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2168, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2168, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2168, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2168, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2168, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2168, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2165, file: !135, line: 3117, baseType: !1494, size: 64, offset: 1216)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2165, file: !135, line: 3119, baseType: !1494, size: 64, offset: 1280)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2165, file: !135, line: 3121, baseType: !1494, size: 64, offset: 1344)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2165, file: !135, line: 3123, baseType: !1494, size: 64, offset: 1408)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1497, file: !135, line: 3385, baseType: !2193, size: 1088)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2194)
!2194 = !{!2195, !2196, !2197}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2193, file: !135, line: 2875, baseType: !1668, size: 960)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2193, file: !135, line: 2876, baseType: !1672, size: 64, offset: 960)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2193, file: !135, line: 2877, baseType: !2198, size: 64, offset: 1024)
!2198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2199, size: 64)
!2199 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !135, line: 2856, flags: DIFlagFwdDecl)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1497, file: !135, line: 3386, baseType: !2168, size: 1216)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1497, file: !135, line: 3387, baseType: !2202, size: 1280)
!2202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2203)
!2203 = !{!2204, !2205}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2202, file: !135, line: 3094, baseType: !2168, size: 1216)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2202, file: !135, line: 3095, baseType: !2198, size: 64, offset: 1216)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1497, file: !135, line: 3388, baseType: !2207, size: 1216)
!2207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2208)
!2208 = !{!2209, !2210, !2211, !2212, !2213, !2214}
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2207, file: !135, line: 2825, baseType: !1630, size: 896)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2207, file: !135, line: 2827, baseType: !1494, size: 64, offset: 896)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2207, file: !135, line: 2828, baseType: !1494, size: 64, offset: 960)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2207, file: !135, line: 2829, baseType: !1494, size: 64, offset: 1024)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2207, file: !135, line: 2830, baseType: !1494, size: 64, offset: 1088)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2207, file: !135, line: 2831, baseType: !1494, size: 64, offset: 1152)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1497, file: !135, line: 3389, baseType: !2216, size: 1024)
!2216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2217)
!2217 = !{!2218, !2219, !2220}
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2216, file: !135, line: 2851, baseType: !1668, size: 960)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2216, file: !135, line: 2852, baseType: !1591, size: 32, offset: 960)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2216, file: !135, line: 2853, baseType: !1591, size: 32, offset: 992)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1497, file: !135, line: 3390, baseType: !2222, size: 1024)
!2222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2223)
!2223 = !{!2224, !2225}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2222, file: !135, line: 2858, baseType: !1668, size: 960)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2222, file: !135, line: 2859, baseType: !2198, size: 64, offset: 960)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1497, file: !135, line: 3391, baseType: !2227, size: 960)
!2227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2228)
!2228 = !{!2229}
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2227, file: !135, line: 2863, baseType: !1668, size: 960)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1497, file: !135, line: 3392, baseType: !2231, size: 1472)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2232)
!2232 = !{!2233}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2231, file: !135, line: 3305, baseType: !2165, size: 1472)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1497, file: !135, line: 3393, baseType: !2235, size: 1792)
!2235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2236)
!2236 = !{!2237, !2238, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407}
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2235, file: !135, line: 3249, baseType: !2165, size: 1472)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2235, file: !135, line: 3251, baseType: !2239, size: 64, offset: 1472)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2241, line: 463, size: 1152, elements: !2242)
!2241 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2242 = !{!2243, !2246, !2277, !2278, !2281, !2284, !2332, !2333, !2334, !2335, !2336, !2360, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386}
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2240, file: !2241, line: 464, baseType: !2244, size: 64)
!2244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2245, size: 64)
!2245 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2241, line: 464, flags: DIFlagFwdDecl)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2240, file: !2241, line: 467, baseType: !2247, size: 64, offset: 64)
!2247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2248, size: 64)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !2249)
!2249 = !{!2250, !2252, !2253, !2266, !2267, !2268, !2269, !2270, !2271, !2273, !2275, !2276}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2248, file: !330, line: 377, baseType: !2251, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1495, line: 111, baseType: !1789)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2248, file: !330, line: 378, baseType: !2251, size: 64, offset: 64)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2248, file: !330, line: 381, baseType: !2254, size: 64, offset: 128)
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !2256)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !2257)
!2257 = !{!2258}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2256, file: !330, line: 282, baseType: !2259, size: 128)
!2259 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !2260)
!2260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !2261)
!2261 = !{!2262, !2263, !2264}
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2260, file: !330, line: 281, baseType: !7, size: 32)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2260, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2260, file: !330, line: 281, baseType: !2265, size: 64, offset: 64)
!2265 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2251, size: 64, elements: !1595)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2248, file: !330, line: 384, baseType: !1591, size: 32, offset: 192)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2248, file: !330, line: 387, baseType: !1591, size: 32, offset: 224)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2248, file: !330, line: 390, baseType: !1591, size: 32, offset: 256)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2248, file: !330, line: 394, baseType: !2254, size: 64, offset: 320)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2248, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2248, file: !330, line: 399, baseType: !2272, size: 64, offset: 416)
!2272 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !1742)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2248, file: !330, line: 402, baseType: !2274, size: 64, offset: 480)
!2274 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1742)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2248, file: !330, line: 406, baseType: !1591, size: 32, offset: 544)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2248, file: !330, line: 409, baseType: !1591, size: 32, offset: 576)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2240, file: !2241, line: 470, baseType: !1816, size: 64, offset: 128)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2240, file: !2241, line: 473, baseType: !2279, size: 64, offset: 192)
!2279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2280, size: 64)
!2280 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2241, line: 166, flags: DIFlagFwdDecl)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2240, file: !2241, line: 476, baseType: !2282, size: 64, offset: 256)
!2282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2283, size: 64)
!2283 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2241, line: 476, flags: DIFlagFwdDecl)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2240, file: !2241, line: 479, baseType: !2285, size: 64, offset: 320)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2286, line: 144, baseType: !2287)
!2286 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2286, line: 100, size: 896, elements: !2289)
!2289 = !{!2290, !2296, !2301, !2306, !2308, !2309, !2310, !2311, !2312, !2313, !2318, !2320, !2321, !2326, !2331}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2288, file: !2286, line: 102, baseType: !2291, size: 64)
!2291 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2286, line: 52, baseType: !2292)
!2292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2293, size: 64)
!2293 = !DISubroutineType(types: !2294)
!2294 = !{!2295, !2133}
!2295 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2286, line: 47, baseType: !7)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2288, file: !2286, line: 105, baseType: !2297, size: 64, offset: 64)
!2297 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2286, line: 59, baseType: !2298)
!2298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2299, size: 64)
!2299 = !DISubroutineType(types: !2300)
!2300 = !{!1591, !2133, !2133}
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2288, file: !2286, line: 108, baseType: !2302, size: 64, offset: 128)
!2302 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2286, line: 63, baseType: !2303)
!2303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2304, size: 64)
!2304 = !DISubroutineType(types: !2305)
!2305 = !{null, !1778}
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2288, file: !2286, line: 111, baseType: !2307, size: 64, offset: 192)
!2307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2288, file: !2286, line: 114, baseType: !1972, size: 64, offset: 256)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2288, file: !2286, line: 117, baseType: !1972, size: 64, offset: 320)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2288, file: !2286, line: 120, baseType: !1972, size: 64, offset: 384)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2288, file: !2286, line: 124, baseType: !7, size: 32, offset: 448)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2288, file: !2286, line: 128, baseType: !7, size: 32, offset: 480)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2288, file: !2286, line: 131, baseType: !2314, size: 64, offset: 512)
!2314 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2286, line: 75, baseType: !2315)
!2315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2316, size: 64)
!2316 = !DISubroutineType(types: !2317)
!2317 = !{!1778, !1972, !1972}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2288, file: !2286, line: 132, baseType: !2319, size: 64, offset: 576)
!2319 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2286, line: 78, baseType: !2303)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2288, file: !2286, line: 135, baseType: !1778, size: 64, offset: 640)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2288, file: !2286, line: 136, baseType: !2322, size: 64, offset: 704)
!2322 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2286, line: 82, baseType: !2323)
!2323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2324, size: 64)
!2324 = !DISubroutineType(types: !2325)
!2325 = !{!1778, !1778, !1972, !1972}
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2288, file: !2286, line: 137, baseType: !2327, size: 64, offset: 768)
!2327 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2286, line: 83, baseType: !2328)
!2328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2329, size: 64)
!2329 = !DISubroutineType(types: !2330)
!2330 = !{null, !1778, !1778}
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2288, file: !2286, line: 141, baseType: !7, size: 32, offset: 832)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2240, file: !2241, line: 484, baseType: !1494, size: 64, offset: 384)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2240, file: !2241, line: 488, baseType: !1494, size: 64, offset: 448)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2240, file: !2241, line: 493, baseType: !1494, size: 64, offset: 512)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2240, file: !2241, line: 496, baseType: !1494, size: 64, offset: 576)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2240, file: !2241, line: 501, baseType: !2337, size: 64, offset: 640)
!2337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2338, size: 64)
!2338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2339)
!2339 = !{!2340, !2343, !2344, !2345, !2346, !2348, !2349, !2354, !2355, !2356, !2357, !2358, !2359}
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2338, file: !341, line: 2356, baseType: !2341, size: 64)
!2341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2342, size: 64)
!2342 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2338, file: !341, line: 2357, baseType: !1698, size: 64, offset: 64)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2338, file: !341, line: 2358, baseType: !1591, size: 32, offset: 128)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2338, file: !341, line: 2359, baseType: !1591, size: 32, offset: 160)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2338, file: !341, line: 2360, baseType: !2347, size: 128, offset: 192)
!2347 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1591, size: 128, elements: !1767)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2338, file: !341, line: 2364, baseType: !1591, size: 32, offset: 320)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2338, file: !341, line: 2367, baseType: !2350, size: 128, offset: 384)
!2350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2351)
!2351 = !{!2352, !2353}
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2350, file: !341, line: 2351, baseType: !1672, size: 64)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2350, file: !341, line: 2352, baseType: !1550, size: 64, offset: 64)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2338, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2338, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2338, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2338, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2338, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2338, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2240, file: !2241, line: 504, baseType: !2361, size: 64, offset: 704)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2241, line: 504, flags: DIFlagFwdDecl)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2240, file: !2241, line: 507, baseType: !2285, size: 64, offset: 768)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2240, file: !2241, line: 510, baseType: !1591, size: 32, offset: 832)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2240, file: !2241, line: 513, baseType: !1591, size: 32, offset: 864)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2240, file: !2241, line: 516, baseType: !1622, size: 32, offset: 896)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2240, file: !2241, line: 519, baseType: !1622, size: 32, offset: 928)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2240, file: !2241, line: 522, baseType: !7, size: 32, offset: 960)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2240, file: !2241, line: 523, baseType: !7, size: 32, offset: 992)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2240, file: !2241, line: 528, baseType: !1698, size: 64, offset: 1024)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2240, file: !2241, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2240, file: !2241, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2240, file: !2241, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2240, file: !2241, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2240, file: !2241, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2240, file: !2241, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2240, file: !2241, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2240, file: !2241, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2240, file: !2241, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2240, file: !2241, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2240, file: !2241, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2240, file: !2241, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2240, file: !2241, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2240, file: !2241, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2240, file: !2241, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2240, file: !2241, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2235, file: !135, line: 3254, baseType: !1494, size: 64, offset: 1536)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2235, file: !135, line: 3257, baseType: !1494, size: 64, offset: 1600)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2235, file: !135, line: 3258, baseType: !1494, size: 64, offset: 1664)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2235, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2235, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2235, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2235, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2235, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2235, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2235, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2235, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2235, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2235, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2235, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2235, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2235, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2235, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2235, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2235, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2235, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2235, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1497, file: !135, line: 3394, baseType: !2409, size: 1344)
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2410)
!2410 = !{!2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452}
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2409, file: !135, line: 2280, baseType: !1533, size: 192)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2409, file: !135, line: 2281, baseType: !1494, size: 64, offset: 192)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2409, file: !135, line: 2282, baseType: !1494, size: 64, offset: 256)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2409, file: !135, line: 2283, baseType: !1494, size: 64, offset: 320)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2409, file: !135, line: 2284, baseType: !1494, size: 64, offset: 384)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2409, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2409, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2409, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2409, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2409, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2409, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2409, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2409, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2409, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2409, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2409, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2409, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2409, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2409, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2409, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2409, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2409, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2409, file: !135, line: 2306, baseType: !2083, size: 32, offset: 544)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2409, file: !135, line: 2307, baseType: !1494, size: 64, offset: 576)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2409, file: !135, line: 2308, baseType: !1494, size: 64, offset: 640)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2409, file: !135, line: 2314, baseType: !2437, size: 64, offset: 704)
!2437 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2438)
!2438 = !{!2439, !2440, !2441}
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2437, file: !135, line: 2310, baseType: !1591, size: 32)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2437, file: !135, line: 2311, baseType: !1698, size: 64)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2437, file: !135, line: 2312, baseType: !2442, size: 64)
!2442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2443, size: 64)
!2443 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2409, file: !135, line: 2315, baseType: !1494, size: 64, offset: 768)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2409, file: !135, line: 2316, baseType: !1494, size: 64, offset: 832)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2409, file: !135, line: 2317, baseType: !1494, size: 64, offset: 896)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2409, file: !135, line: 2318, baseType: !1494, size: 64, offset: 960)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2409, file: !135, line: 2319, baseType: !1494, size: 64, offset: 1024)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2409, file: !135, line: 2320, baseType: !1494, size: 64, offset: 1088)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2409, file: !135, line: 2321, baseType: !1494, size: 64, offset: 1152)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2409, file: !135, line: 2322, baseType: !1494, size: 64, offset: 1216)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2409, file: !135, line: 2324, baseType: !2453, size: 64, offset: 1280)
!2453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2454, size: 64)
!2454 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1497, file: !135, line: 3395, baseType: !2456, size: 320)
!2456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2457)
!2457 = !{!2458, !2459, !2460}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2456, file: !135, line: 1470, baseType: !1533, size: 192)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2456, file: !135, line: 1471, baseType: !1494, size: 64, offset: 192)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2456, file: !135, line: 1472, baseType: !1494, size: 64, offset: 256)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1497, file: !135, line: 3396, baseType: !2462, size: 320)
!2462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2463)
!2463 = !{!2464, !2465, !2466}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2462, file: !135, line: 1483, baseType: !1533, size: 192)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2462, file: !135, line: 1484, baseType: !1591, size: 32, offset: 192)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2462, file: !135, line: 1485, baseType: !1880, size: 64, offset: 256)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1497, file: !135, line: 3397, baseType: !2468, size: 384)
!2468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2469)
!2469 = !{!2470, !2471, !2472, !2473}
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2468, file: !135, line: 1830, baseType: !1533, size: 192)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2468, file: !135, line: 1831, baseType: !1622, size: 32, offset: 192)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2468, file: !135, line: 1832, baseType: !1494, size: 64, offset: 256)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2468, file: !135, line: 1835, baseType: !1880, size: 64, offset: 320)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1497, file: !135, line: 3398, baseType: !2475, size: 704)
!2475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2476)
!2476 = !{!2477, !2478, !2479, !2480, !2481, !2484}
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2475, file: !135, line: 1899, baseType: !1533, size: 192)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2475, file: !135, line: 1902, baseType: !1494, size: 64, offset: 192)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2475, file: !135, line: 1905, baseType: !1826, size: 64, offset: 256)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2475, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2475, file: !135, line: 1911, baseType: !2482, size: 64, offset: 384)
!2482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2483, size: 64)
!2483 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !135, line: 1876, flags: DIFlagFwdDecl)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2475, file: !135, line: 1914, baseType: !1868, size: 256, offset: 448)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1497, file: !135, line: 3399, baseType: !2486, size: 704)
!2486 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2487)
!2487 = !{!2488, !2489, !2490, !2491, !2492, !2493, !2505, !2506, !2507, !2508, !2509}
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2486, file: !135, line: 2009, baseType: !1533, size: 192)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2486, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2486, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2486, file: !135, line: 2014, baseType: !1622, size: 32, offset: 224)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2486, file: !135, line: 2016, baseType: !1494, size: 64, offset: 256)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2486, file: !135, line: 2017, baseType: !2494, size: 64, offset: 320)
!2494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!2495 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2496)
!2496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2497)
!2497 = !{!2498}
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2496, file: !135, line: 183, baseType: !2499, size: 128)
!2499 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2500)
!2500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2501)
!2501 = !{!2502, !2503, !2504}
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2500, file: !135, line: 182, baseType: !7, size: 32)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2500, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2500, file: !135, line: 182, baseType: !1880, size: 64, offset: 64)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2486, file: !135, line: 2019, baseType: !1494, size: 64, offset: 384)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2486, file: !135, line: 2020, baseType: !1494, size: 64, offset: 448)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2486, file: !135, line: 2021, baseType: !1494, size: 64, offset: 512)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2486, file: !135, line: 2022, baseType: !1494, size: 64, offset: 576)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2486, file: !135, line: 2023, baseType: !1494, size: 64, offset: 640)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1497, file: !135, line: 3400, baseType: !2511, size: 832)
!2511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2512)
!2512 = !{!2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2511, file: !135, line: 2431, baseType: !1533, size: 192)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2511, file: !135, line: 2433, baseType: !1494, size: 64, offset: 192)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2511, file: !135, line: 2434, baseType: !1494, size: 64, offset: 256)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2511, file: !135, line: 2435, baseType: !1494, size: 64, offset: 320)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2511, file: !135, line: 2436, baseType: !1494, size: 64, offset: 384)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2511, file: !135, line: 2437, baseType: !2494, size: 64, offset: 448)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2511, file: !135, line: 2438, baseType: !1494, size: 64, offset: 512)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2511, file: !135, line: 2440, baseType: !1494, size: 64, offset: 576)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2511, file: !135, line: 2441, baseType: !1494, size: 64, offset: 640)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2511, file: !135, line: 2443, baseType: !2523, size: 128, offset: 704)
!2523 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2524)
!2524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2525)
!2525 = !{!2526}
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2524, file: !135, line: 182, baseType: !2499, size: 128)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1497, file: !135, line: 3401, baseType: !2528, size: 320)
!2528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2529)
!2529 = !{!2530, !2531, !2538}
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2528, file: !135, line: 3329, baseType: !1533, size: 192)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2528, file: !135, line: 3330, baseType: !2532, size: 64, offset: 192)
!2532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2533, size: 64)
!2533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2534)
!2534 = !{!2535, !2536, !2537}
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2533, file: !135, line: 3322, baseType: !2532, size: 64)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2533, file: !135, line: 3323, baseType: !2532, size: 64, offset: 64)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2533, file: !135, line: 3324, baseType: !1494, size: 64, offset: 128)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2528, file: !135, line: 3331, baseType: !2532, size: 64, offset: 256)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1497, file: !135, line: 3402, baseType: !2540, size: 256)
!2540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2541)
!2541 = !{!2542, !2543}
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2540, file: !135, line: 1541, baseType: !1533, size: 192)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2540, file: !135, line: 1542, baseType: !2544, size: 64, offset: 192)
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2546)
!2546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2547)
!2547 = !{!2548}
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2546, file: !135, line: 1538, baseType: !2549, size: 192)
!2549 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2550)
!2550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2551)
!2551 = !{!2552, !2553, !2554}
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2550, file: !135, line: 1537, baseType: !7, size: 32)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2550, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2550, file: !135, line: 1537, baseType: !2555, size: 128, offset: 64)
!2555 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2556, size: 128, elements: !1595)
!2556 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2557)
!2557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2558)
!2558 = !{!2559, !2560}
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2557, file: !135, line: 1533, baseType: !1494, size: 64)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2557, file: !135, line: 1534, baseType: !1494, size: 64, offset: 64)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1497, file: !135, line: 3403, baseType: !2562, size: 512)
!2562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2563)
!2563 = !{!2564, !2565, !2566, !2567, !2573, !2574, !2575}
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2562, file: !135, line: 1939, baseType: !1533, size: 192)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2562, file: !135, line: 1940, baseType: !1622, size: 32, offset: 192)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2562, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2562, file: !135, line: 1946, baseType: !2568, size: 32, offset: 256)
!2568 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2569)
!2569 = !{!2570, !2571, !2572}
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2568, file: !135, line: 1943, baseType: !363, size: 32)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2568, file: !135, line: 1944, baseType: !370, size: 32)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2568, file: !135, line: 1945, baseType: !134, size: 32)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2562, file: !135, line: 1950, baseType: !1815, size: 64, offset: 320)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2562, file: !135, line: 1951, baseType: !1815, size: 64, offset: 384)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2562, file: !135, line: 1953, baseType: !1880, size: 64, offset: 448)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1497, file: !135, line: 3404, baseType: !2577, size: 1664)
!2577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2578)
!2578 = !{!2579, !2580}
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2577, file: !135, line: 3338, baseType: !1533, size: 192)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2577, file: !135, line: 3341, baseType: !2581, size: 1472, offset: 192)
!2581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !593, line: 410, size: 1472, elements: !2582)
!2582 = !{!2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746}
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2581, file: !593, line: 412, baseType: !1591, size: 32)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2581, file: !593, line: 413, baseType: !1591, size: 32, offset: 32)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2581, file: !593, line: 414, baseType: !1591, size: 32, offset: 64)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2581, file: !593, line: 415, baseType: !1591, size: 32, offset: 96)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2581, file: !593, line: 416, baseType: !1591, size: 32, offset: 128)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2581, file: !593, line: 417, baseType: !1591, size: 32, offset: 160)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2581, file: !593, line: 418, baseType: !1614, size: 8, offset: 192)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2581, file: !593, line: 419, baseType: !1614, size: 8, offset: 200)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2581, file: !593, line: 420, baseType: !2592, size: 8, offset: 208)
!2592 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2581, file: !593, line: 421, baseType: !2592, size: 8, offset: 216)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2581, file: !593, line: 422, baseType: !2592, size: 8, offset: 224)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2581, file: !593, line: 423, baseType: !2592, size: 8, offset: 232)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2581, file: !593, line: 424, baseType: !2592, size: 8, offset: 240)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2581, file: !593, line: 425, baseType: !2592, size: 8, offset: 248)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2581, file: !593, line: 426, baseType: !2592, size: 8, offset: 256)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2581, file: !593, line: 427, baseType: !2592, size: 8, offset: 264)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2581, file: !593, line: 428, baseType: !2592, size: 8, offset: 272)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2581, file: !593, line: 429, baseType: !2592, size: 8, offset: 280)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2581, file: !593, line: 430, baseType: !2592, size: 8, offset: 288)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2581, file: !593, line: 431, baseType: !2592, size: 8, offset: 296)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2581, file: !593, line: 432, baseType: !2592, size: 8, offset: 304)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2581, file: !593, line: 433, baseType: !2592, size: 8, offset: 312)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2581, file: !593, line: 434, baseType: !2592, size: 8, offset: 320)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2581, file: !593, line: 435, baseType: !2592, size: 8, offset: 328)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2581, file: !593, line: 436, baseType: !2592, size: 8, offset: 336)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2581, file: !593, line: 437, baseType: !2592, size: 8, offset: 344)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2581, file: !593, line: 438, baseType: !2592, size: 8, offset: 352)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2581, file: !593, line: 439, baseType: !2592, size: 8, offset: 360)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2581, file: !593, line: 440, baseType: !2592, size: 8, offset: 368)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2581, file: !593, line: 441, baseType: !2592, size: 8, offset: 376)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2581, file: !593, line: 442, baseType: !2592, size: 8, offset: 384)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2581, file: !593, line: 443, baseType: !2592, size: 8, offset: 392)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2581, file: !593, line: 444, baseType: !2592, size: 8, offset: 400)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2581, file: !593, line: 445, baseType: !2592, size: 8, offset: 408)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2581, file: !593, line: 446, baseType: !2592, size: 8, offset: 416)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2581, file: !593, line: 447, baseType: !2592, size: 8, offset: 424)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2581, file: !593, line: 448, baseType: !2592, size: 8, offset: 432)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2581, file: !593, line: 449, baseType: !2592, size: 8, offset: 440)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2581, file: !593, line: 450, baseType: !2592, size: 8, offset: 448)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2581, file: !593, line: 451, baseType: !2592, size: 8, offset: 456)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2581, file: !593, line: 452, baseType: !2592, size: 8, offset: 464)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2581, file: !593, line: 453, baseType: !2592, size: 8, offset: 472)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2581, file: !593, line: 454, baseType: !2592, size: 8, offset: 480)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2581, file: !593, line: 455, baseType: !2592, size: 8, offset: 488)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2581, file: !593, line: 456, baseType: !2592, size: 8, offset: 496)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2581, file: !593, line: 457, baseType: !2592, size: 8, offset: 504)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2581, file: !593, line: 458, baseType: !2592, size: 8, offset: 512)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2581, file: !593, line: 459, baseType: !2592, size: 8, offset: 520)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2581, file: !593, line: 460, baseType: !2592, size: 8, offset: 528)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2581, file: !593, line: 461, baseType: !2592, size: 8, offset: 536)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2581, file: !593, line: 462, baseType: !2592, size: 8, offset: 544)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2581, file: !593, line: 463, baseType: !2592, size: 8, offset: 552)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2581, file: !593, line: 464, baseType: !2592, size: 8, offset: 560)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2581, file: !593, line: 465, baseType: !2592, size: 8, offset: 568)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2581, file: !593, line: 466, baseType: !2592, size: 8, offset: 576)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2581, file: !593, line: 467, baseType: !2592, size: 8, offset: 584)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2581, file: !593, line: 468, baseType: !2592, size: 8, offset: 592)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2581, file: !593, line: 469, baseType: !2592, size: 8, offset: 600)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2581, file: !593, line: 470, baseType: !2592, size: 8, offset: 608)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2581, file: !593, line: 471, baseType: !2592, size: 8, offset: 616)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2581, file: !593, line: 472, baseType: !2592, size: 8, offset: 624)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2581, file: !593, line: 473, baseType: !2592, size: 8, offset: 632)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2581, file: !593, line: 474, baseType: !2592, size: 8, offset: 640)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2581, file: !593, line: 475, baseType: !2592, size: 8, offset: 648)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2581, file: !593, line: 476, baseType: !2592, size: 8, offset: 656)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2581, file: !593, line: 477, baseType: !2592, size: 8, offset: 664)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2581, file: !593, line: 478, baseType: !2592, size: 8, offset: 672)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2581, file: !593, line: 479, baseType: !2592, size: 8, offset: 680)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2581, file: !593, line: 480, baseType: !2592, size: 8, offset: 688)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2581, file: !593, line: 481, baseType: !2592, size: 8, offset: 696)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2581, file: !593, line: 482, baseType: !2592, size: 8, offset: 704)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2581, file: !593, line: 483, baseType: !2592, size: 8, offset: 712)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2581, file: !593, line: 484, baseType: !2592, size: 8, offset: 720)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2581, file: !593, line: 485, baseType: !2592, size: 8, offset: 728)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2581, file: !593, line: 486, baseType: !2592, size: 8, offset: 736)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2581, file: !593, line: 487, baseType: !2592, size: 8, offset: 744)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2581, file: !593, line: 488, baseType: !2592, size: 8, offset: 752)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2581, file: !593, line: 489, baseType: !2592, size: 8, offset: 760)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2581, file: !593, line: 490, baseType: !2592, size: 8, offset: 768)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2581, file: !593, line: 491, baseType: !2592, size: 8, offset: 776)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2581, file: !593, line: 492, baseType: !2592, size: 8, offset: 784)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2581, file: !593, line: 493, baseType: !2592, size: 8, offset: 792)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2581, file: !593, line: 494, baseType: !2592, size: 8, offset: 800)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2581, file: !593, line: 495, baseType: !2592, size: 8, offset: 808)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2581, file: !593, line: 496, baseType: !2592, size: 8, offset: 816)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2581, file: !593, line: 497, baseType: !2592, size: 8, offset: 824)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2581, file: !593, line: 498, baseType: !2592, size: 8, offset: 832)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2581, file: !593, line: 499, baseType: !2592, size: 8, offset: 840)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2581, file: !593, line: 500, baseType: !2592, size: 8, offset: 848)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2581, file: !593, line: 501, baseType: !2592, size: 8, offset: 856)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2581, file: !593, line: 502, baseType: !2592, size: 8, offset: 864)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2581, file: !593, line: 503, baseType: !2592, size: 8, offset: 872)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2581, file: !593, line: 504, baseType: !2592, size: 8, offset: 880)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2581, file: !593, line: 505, baseType: !2592, size: 8, offset: 888)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2581, file: !593, line: 506, baseType: !2592, size: 8, offset: 896)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2581, file: !593, line: 507, baseType: !2592, size: 8, offset: 904)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2581, file: !593, line: 508, baseType: !2592, size: 8, offset: 912)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2581, file: !593, line: 509, baseType: !2592, size: 8, offset: 920)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2581, file: !593, line: 510, baseType: !2592, size: 8, offset: 928)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2581, file: !593, line: 511, baseType: !2592, size: 8, offset: 936)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2581, file: !593, line: 512, baseType: !2592, size: 8, offset: 944)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2581, file: !593, line: 513, baseType: !2592, size: 8, offset: 952)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2581, file: !593, line: 514, baseType: !2592, size: 8, offset: 960)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2581, file: !593, line: 515, baseType: !2592, size: 8, offset: 968)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2581, file: !593, line: 516, baseType: !2592, size: 8, offset: 976)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2581, file: !593, line: 517, baseType: !2592, size: 8, offset: 984)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2581, file: !593, line: 518, baseType: !2592, size: 8, offset: 992)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2581, file: !593, line: 519, baseType: !2592, size: 8, offset: 1000)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2581, file: !593, line: 520, baseType: !2592, size: 8, offset: 1008)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2581, file: !593, line: 521, baseType: !2592, size: 8, offset: 1016)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2581, file: !593, line: 522, baseType: !2592, size: 8, offset: 1024)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2581, file: !593, line: 523, baseType: !2592, size: 8, offset: 1032)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2581, file: !593, line: 524, baseType: !2592, size: 8, offset: 1040)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2581, file: !593, line: 525, baseType: !2592, size: 8, offset: 1048)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2581, file: !593, line: 526, baseType: !2592, size: 8, offset: 1056)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2581, file: !593, line: 527, baseType: !2592, size: 8, offset: 1064)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2581, file: !593, line: 528, baseType: !2592, size: 8, offset: 1072)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2581, file: !593, line: 529, baseType: !2592, size: 8, offset: 1080)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2581, file: !593, line: 530, baseType: !2592, size: 8, offset: 1088)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2581, file: !593, line: 531, baseType: !2592, size: 8, offset: 1096)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2581, file: !593, line: 532, baseType: !2592, size: 8, offset: 1104)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2581, file: !593, line: 533, baseType: !2592, size: 8, offset: 1112)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2581, file: !593, line: 534, baseType: !2592, size: 8, offset: 1120)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2581, file: !593, line: 535, baseType: !2592, size: 8, offset: 1128)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2581, file: !593, line: 536, baseType: !2592, size: 8, offset: 1136)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2581, file: !593, line: 537, baseType: !2592, size: 8, offset: 1144)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2581, file: !593, line: 538, baseType: !2592, size: 8, offset: 1152)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2581, file: !593, line: 539, baseType: !2592, size: 8, offset: 1160)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2581, file: !593, line: 540, baseType: !2592, size: 8, offset: 1168)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2581, file: !593, line: 541, baseType: !2592, size: 8, offset: 1176)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2581, file: !593, line: 542, baseType: !2592, size: 8, offset: 1184)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2581, file: !593, line: 543, baseType: !2592, size: 8, offset: 1192)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2581, file: !593, line: 544, baseType: !2592, size: 8, offset: 1200)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2581, file: !593, line: 545, baseType: !2592, size: 8, offset: 1208)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2581, file: !593, line: 546, baseType: !2592, size: 8, offset: 1216)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2581, file: !593, line: 547, baseType: !2592, size: 8, offset: 1224)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2581, file: !593, line: 548, baseType: !2592, size: 8, offset: 1232)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2581, file: !593, line: 549, baseType: !2592, size: 8, offset: 1240)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2581, file: !593, line: 550, baseType: !2592, size: 8, offset: 1248)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2581, file: !593, line: 551, baseType: !2592, size: 8, offset: 1256)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2581, file: !593, line: 552, baseType: !2592, size: 8, offset: 1264)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2581, file: !593, line: 553, baseType: !2592, size: 8, offset: 1272)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2581, file: !593, line: 554, baseType: !2592, size: 8, offset: 1280)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2581, file: !593, line: 555, baseType: !2592, size: 8, offset: 1288)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2581, file: !593, line: 556, baseType: !2592, size: 8, offset: 1296)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2581, file: !593, line: 557, baseType: !2592, size: 8, offset: 1304)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2581, file: !593, line: 558, baseType: !2592, size: 8, offset: 1312)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2581, file: !593, line: 559, baseType: !2592, size: 8, offset: 1320)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2581, file: !593, line: 560, baseType: !2592, size: 8, offset: 1328)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2581, file: !593, line: 561, baseType: !2592, size: 8, offset: 1336)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2581, file: !593, line: 562, baseType: !2592, size: 8, offset: 1344)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2581, file: !593, line: 563, baseType: !2592, size: 8, offset: 1352)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2581, file: !593, line: 564, baseType: !2592, size: 8, offset: 1360)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2581, file: !593, line: 565, baseType: !2592, size: 8, offset: 1368)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2581, file: !593, line: 566, baseType: !2592, size: 8, offset: 1376)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2581, file: !593, line: 567, baseType: !2592, size: 8, offset: 1384)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2581, file: !593, line: 568, baseType: !2592, size: 8, offset: 1392)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2581, file: !593, line: 569, baseType: !2592, size: 8, offset: 1400)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2581, file: !593, line: 570, baseType: !2592, size: 8, offset: 1408)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2581, file: !593, line: 571, baseType: !2592, size: 8, offset: 1416)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2581, file: !593, line: 572, baseType: !2592, size: 8, offset: 1424)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2581, file: !593, line: 573, baseType: !2592, size: 8, offset: 1432)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2581, file: !593, line: 574, baseType: !2592, size: 8, offset: 1440)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1497, file: !135, line: 3405, baseType: !2748, size: 384)
!2748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2749)
!2749 = !{!2750, !2751}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2748, file: !135, line: 3353, baseType: !1533, size: 192)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2748, file: !135, line: 3356, baseType: !2752, size: 192, offset: 192)
!2752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !593, line: 578, size: 192, elements: !2753)
!2753 = !{!2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764}
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2752, file: !593, line: 580, baseType: !1591, size: 32)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2752, file: !593, line: 581, baseType: !1591, size: 32, offset: 32)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2752, file: !593, line: 582, baseType: !1591, size: 32, offset: 64)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2752, file: !593, line: 583, baseType: !1591, size: 32, offset: 96)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2752, file: !593, line: 584, baseType: !1614, size: 8, offset: 128)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2752, file: !593, line: 585, baseType: !1614, size: 8, offset: 136)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2752, file: !593, line: 586, baseType: !1614, size: 8, offset: 144)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2752, file: !593, line: 587, baseType: !1614, size: 8, offset: 152)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2752, file: !593, line: 588, baseType: !1614, size: 8, offset: 160)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2752, file: !593, line: 589, baseType: !1614, size: 8, offset: 168)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2752, file: !593, line: 590, baseType: !1614, size: 8, offset: 176)
!2765 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2767, size: 64)
!2767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "record_layout_info_s", file: !135, line: 4198, size: 512, elements: !2768)
!2768 = !{!2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778}
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !2767, file: !135, line: 4201, baseType: !1494, size: 64)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2767, file: !135, line: 4204, baseType: !1494, size: 64, offset: 64)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "offset_align", scope: !2767, file: !135, line: 4206, baseType: !7, size: 32, offset: 128)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "bitpos", scope: !2767, file: !135, line: 4208, baseType: !1494, size: 64, offset: 192)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "record_align", scope: !2767, file: !135, line: 4210, baseType: !7, size: 32, offset: 256)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "unpacked_align", scope: !2767, file: !135, line: 4213, baseType: !7, size: 32, offset: 288)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "prev_field", scope: !2767, file: !135, line: 4215, baseType: !1494, size: 64, offset: 320)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "pending_statics", scope: !2767, file: !135, line: 4218, baseType: !1494, size: 64, offset: 384)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "remaining_in_alignment", scope: !2767, file: !135, line: 4220, baseType: !1591, size: 32, offset: 448)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "packed_maybe_necessary", scope: !2767, file: !135, line: 4223, baseType: !1591, size: 32, offset: 480)
!2779 = !{!0, !2780, !2782, !2796, !2799, !2801, !2803, !2805}
!2780 = !DIGlobalVariableExpression(var: !2781, expr: !DIExpression())
!2781 = distinct !DIGlobalVariable(name: "initial_max_fld_align", scope: !2, file: !3, line: 53, type: !7, isLocal: false, isDefinition: true)
!2782 = !DIGlobalVariableExpression(var: !2783, expr: !DIExpression())
!2783 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_stor_layout_h", scope: !2, file: !2784, line: 24, type: !2785, isLocal: false, isDefinition: true)
!2784 = !DIFile(filename: "./gt-stor-layout.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2786, size: 960, elements: !1568)
!2786 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2787)
!2787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2788, line: 69, size: 320, elements: !2789)
!2788 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2789 = !{!2790, !2791, !2792, !2793, !2795}
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2787, file: !2788, line: 70, baseType: !1778, size: 64)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2787, file: !2788, line: 71, baseType: !1972, size: 64, offset: 64)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2787, file: !2788, line: 72, baseType: !1972, size: 64, offset: 128)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2787, file: !2788, line: 73, baseType: !2794, size: 64, offset: 192)
!2794 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2788, line: 65, baseType: !2303)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2787, file: !2788, line: 74, baseType: !2794, size: 64, offset: 256)
!2796 = !DIGlobalVariableExpression(var: !2797, expr: !DIExpression())
!2797 = distinct !DIGlobalVariable(name: "sizetype_tab", scope: !2, file: !3, line: 47, type: !2798, isLocal: false, isDefinition: true)
!2798 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1494, size: 256, elements: !1767)
!2799 = !DIGlobalVariableExpression(var: !2800, expr: !DIExpression())
!2800 = distinct !DIGlobalVariable(name: "pending_sizes", scope: !2, file: !3, line: 72, type: !1494, isLocal: true, isDefinition: true)
!2801 = !DIGlobalVariableExpression(var: !2802, expr: !DIExpression())
!2802 = distinct !DIGlobalVariable(name: "size_functions", scope: !2, file: !3, line: 173, type: !2494, isLocal: true, isDefinition: true)
!2803 = !DIGlobalVariableExpression(var: !2804, expr: !DIExpression())
!2804 = distinct !DIGlobalVariable(name: "reference_types_internal", scope: !2, file: !3, line: 58, type: !1591, isLocal: true, isDefinition: true)
!2805 = !DIGlobalVariableExpression(var: !2806, expr: !DIExpression())
!2806 = distinct !DIGlobalVariable(name: "fnno", scope: !2807, file: !3, line: 234, type: !1548, isLocal: true, isDefinition: true)
!2807 = distinct !DISubprogram(name: "self_referential_size", scope: !3, file: !3, line: 232, type: !2808, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!2808 = !DISubroutineType(types: !2809)
!2809 = !{!1494, !1494}
!2810 = !{}
!2811 = !{i32 7, !"Dwarf Version", i32 4}
!2812 = !{i32 2, !"Debug Info Version", i32 3}
!2813 = !{i32 1, !"wchar_size", i32 4}
!2814 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2815 = distinct !DISubprogram(name: "internal_reference_types", scope: !3, file: !3, line: 78, type: !2816, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{null}
!2818 = !DILocation(line: 80, column: 28, scope: !2815)
!2819 = !DILocation(line: 81, column: 1, scope: !2815)
!2820 = distinct !DISubprogram(name: "get_pending_sizes", scope: !3, file: !3, line: 86, type: !2821, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!2821 = !DISubroutineType(types: !2822)
!2822 = !{!1494}
!2823 = !DILocalVariable(name: "chain", scope: !2820, file: !3, line: 88, type: !1494)
!2824 = !DILocation(line: 88, column: 8, scope: !2820)
!2825 = !DILocation(line: 88, column: 16, scope: !2820)
!2826 = !DILocation(line: 90, column: 17, scope: !2820)
!2827 = !DILocation(line: 91, column: 10, scope: !2820)
!2828 = !DILocation(line: 91, column: 3, scope: !2820)
!2829 = distinct !DISubprogram(name: "put_pending_size", scope: !3, file: !3, line: 97, type: !2830, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!2830 = !DISubroutineType(types: !2831)
!2831 = !{null, !1494}
!2832 = !DILocalVariable(name: "expr", arg: 1, scope: !2829, file: !3, line: 97, type: !1494)
!2833 = !DILocation(line: 97, column: 24, scope: !2829)
!2834 = !DILocation(line: 101, column: 34, scope: !2829)
!2835 = !DILocation(line: 101, column: 10, scope: !2829)
!2836 = !DILocation(line: 101, column: 8, scope: !2829)
!2837 = !DILocation(line: 103, column: 7, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2829, file: !3, line: 103, column: 7)
!2839 = !DILocation(line: 103, column: 24, scope: !2838)
!2840 = !DILocation(line: 103, column: 7, scope: !2829)
!2841 = !DILocation(line: 104, column: 21, scope: !2838)
!2842 = !DILocation(line: 104, column: 19, scope: !2838)
!2843 = !DILocation(line: 104, column: 5, scope: !2838)
!2844 = !DILocation(line: 105, column: 1, scope: !2829)
!2845 = distinct !DISubprogram(name: "put_pending_sizes", scope: !3, file: !3, line: 111, type: !2830, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!2846 = !DILocalVariable(name: "chain", arg: 1, scope: !2845, file: !3, line: 111, type: !1494)
!2847 = !DILocation(line: 111, column: 25, scope: !2845)
!2848 = !DILocation(line: 113, column: 3, scope: !2845)
!2849 = !DILocation(line: 114, column: 19, scope: !2845)
!2850 = !DILocation(line: 114, column: 17, scope: !2845)
!2851 = !DILocation(line: 115, column: 1, scope: !2845)
!2852 = distinct !DISubprogram(name: "variable_size", scope: !3, file: !3, line: 121, type: !2808, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!2853 = !DILocalVariable(name: "size", arg: 1, scope: !2852, file: !3, line: 121, type: !1494)
!2854 = !DILocation(line: 121, column: 21, scope: !2852)
!2855 = !DILocalVariable(name: "save", scope: !2852, file: !3, line: 123, type: !1494)
!2856 = !DILocation(line: 123, column: 8, scope: !2852)
!2857 = !DILocation(line: 126, column: 7, scope: !2858)
!2858 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 126, column: 7)
!2859 = !DILocation(line: 126, column: 7, scope: !2852)
!2860 = !DILocation(line: 127, column: 12, scope: !2858)
!2861 = !DILocation(line: 127, column: 5, scope: !2858)
!2862 = !DILocation(line: 131, column: 7, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 131, column: 7)
!2864 = !DILocation(line: 131, column: 7, scope: !2852)
!2865 = !DILocation(line: 132, column: 35, scope: !2863)
!2866 = !DILocation(line: 132, column: 12, scope: !2863)
!2867 = !DILocation(line: 132, column: 5, scope: !2863)
!2868 = !DILocation(line: 137, column: 24, scope: !2869)
!2869 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 137, column: 7)
!2870 = !DILocation(line: 137, column: 7, scope: !2869)
!2871 = !DILocation(line: 137, column: 45, scope: !2869)
!2872 = !DILocation(line: 137, column: 7, scope: !2852)
!2873 = !DILocation(line: 138, column: 12, scope: !2869)
!2874 = !DILocation(line: 138, column: 5, scope: !2869)
!2875 = !DILocation(line: 140, column: 21, scope: !2852)
!2876 = !DILocation(line: 140, column: 10, scope: !2852)
!2877 = !DILocation(line: 140, column: 8, scope: !2852)
!2878 = !DILocation(line: 150, column: 34, scope: !2852)
!2879 = !DILocation(line: 150, column: 10, scope: !2852)
!2880 = !DILocation(line: 150, column: 8, scope: !2852)
!2881 = !DILocation(line: 152, column: 7, scope: !2882)
!2882 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 152, column: 7)
!2883 = !DILocation(line: 152, column: 12, scope: !2882)
!2884 = !DILocation(line: 152, column: 15, scope: !2882)
!2885 = !DILocation(line: 152, column: 21, scope: !2882)
!2886 = !DILocation(line: 152, column: 7, scope: !2852)
!2887 = !DILocation(line: 155, column: 12, scope: !2882)
!2888 = !DILocation(line: 155, column: 5, scope: !2882)
!2889 = !DILocation(line: 157, column: 24, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 157, column: 7)
!2891 = !DILocation(line: 157, column: 7, scope: !2890)
!2892 = !DILocation(line: 157, column: 7, scope: !2852)
!2893 = !DILocation(line: 159, column: 11, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2895, file: !3, line: 159, column: 11)
!2895 = distinct !DILexicalBlock(scope: !2890, file: !3, line: 158, column: 5)
!2896 = !DILocation(line: 159, column: 11, scope: !2895)
!2897 = !DILocation(line: 160, column: 2, scope: !2894)
!2898 = !DILocation(line: 162, column: 2, scope: !2894)
!2899 = !DILocation(line: 164, column: 14, scope: !2895)
!2900 = !DILocation(line: 164, column: 7, scope: !2895)
!2901 = !DILocation(line: 167, column: 21, scope: !2852)
!2902 = !DILocation(line: 167, column: 3, scope: !2852)
!2903 = !DILocation(line: 169, column: 10, scope: !2852)
!2904 = !DILocation(line: 169, column: 3, scope: !2852)
!2905 = !DILocation(line: 170, column: 1, scope: !2852)
!2906 = !DILocalVariable(name: "size", arg: 1, scope: !2807, file: !3, line: 232, type: !1494)
!2907 = !DILocation(line: 232, column: 29, scope: !2807)
!2908 = !DILocalVariable(name: "self_refs", scope: !2807, file: !3, line: 235, type: !2909)
!2909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2910, size: 64)
!2910 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2911)
!2911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2912)
!2912 = !{!2913}
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2911, file: !135, line: 184, baseType: !2499, size: 128)
!2914 = !DILocation(line: 235, column: 21, scope: !2807)
!2915 = !DILocalVariable(name: "param_type_list", scope: !2807, file: !3, line: 236, type: !1494)
!2916 = !DILocation(line: 236, column: 8, scope: !2807)
!2917 = !DILocalVariable(name: "param_decl_list", scope: !2807, file: !3, line: 236, type: !1494)
!2918 = !DILocation(line: 236, column: 32, scope: !2807)
!2919 = !DILocalVariable(name: "arg_list", scope: !2807, file: !3, line: 236, type: !1494)
!2920 = !DILocation(line: 236, column: 56, scope: !2807)
!2921 = !DILocalVariable(name: "t", scope: !2807, file: !3, line: 237, type: !1494)
!2922 = !DILocation(line: 237, column: 8, scope: !2807)
!2923 = !DILocalVariable(name: "ref", scope: !2807, file: !3, line: 237, type: !1494)
!2924 = !DILocation(line: 237, column: 11, scope: !2807)
!2925 = !DILocalVariable(name: "return_type", scope: !2807, file: !3, line: 237, type: !1494)
!2926 = !DILocation(line: 237, column: 16, scope: !2807)
!2927 = !DILocalVariable(name: "fntype", scope: !2807, file: !3, line: 237, type: !1494)
!2928 = !DILocation(line: 237, column: 29, scope: !2807)
!2929 = !DILocalVariable(name: "fnname", scope: !2807, file: !3, line: 237, type: !1494)
!2930 = !DILocation(line: 237, column: 37, scope: !2807)
!2931 = !DILocalVariable(name: "fndecl", scope: !2807, file: !3, line: 237, type: !1494)
!2932 = !DILocation(line: 237, column: 45, scope: !2807)
!2933 = !DILocalVariable(name: "i", scope: !2807, file: !3, line: 238, type: !7)
!2934 = !DILocation(line: 238, column: 16, scope: !2807)
!2935 = !DILocalVariable(name: "buf", scope: !2807, file: !3, line: 239, type: !2936)
!2936 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 1024, elements: !2937)
!2937 = !{!2938}
!2938 = !DISubrange(count: 128)
!2939 = !DILocation(line: 239, column: 8, scope: !2807)
!2940 = !DILocation(line: 242, column: 31, scope: !2807)
!2941 = !DILocation(line: 242, column: 7, scope: !2807)
!2942 = !DILocation(line: 242, column: 5, scope: !2807)
!2943 = !DILocation(line: 243, column: 7, scope: !2944)
!2944 = distinct !DILexicalBlock(scope: !2807, file: !3, line: 243, column: 7)
!2945 = !DILocation(line: 243, column: 21, scope: !2944)
!2946 = !DILocation(line: 243, column: 7, scope: !2807)
!2947 = !DILocation(line: 244, column: 12, scope: !2944)
!2948 = !DILocation(line: 244, column: 5, scope: !2944)
!2949 = !DILocation(line: 247, column: 29, scope: !2807)
!2950 = !DILocation(line: 247, column: 3, scope: !2807)
!2951 = !DILocation(line: 248, column: 3, scope: !2807)
!2952 = !DILocation(line: 251, column: 7, scope: !2807)
!2953 = !DILocation(line: 251, column: 5, scope: !2807)
!2954 = !DILocation(line: 252, column: 7, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2807, file: !3, line: 252, column: 7)
!2956 = !DILocation(line: 252, column: 64, scope: !2955)
!2957 = !DILocation(line: 252, column: 7, scope: !2807)
!2958 = !DILocation(line: 253, column: 12, scope: !2955)
!2959 = !DILocation(line: 253, column: 5, scope: !2955)
!2960 = !DILocation(line: 254, column: 10, scope: !2807)
!2961 = !DILocation(line: 254, column: 8, scope: !2807)
!2962 = !DILocation(line: 258, column: 10, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2807, file: !3, line: 258, column: 3)
!2964 = !DILocation(line: 258, column: 8, scope: !2963)
!2965 = !DILocation(line: 258, column: 15, scope: !2966)
!2966 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 258, column: 3)
!2967 = !DILocation(line: 258, column: 3, scope: !2963)
!2968 = !DILocalVariable(name: "subst", scope: !2969, file: !3, line: 260, type: !1494)
!2969 = distinct !DILexicalBlock(scope: !2966, file: !3, line: 259, column: 5)
!2970 = !DILocation(line: 260, column: 12, scope: !2969)
!2971 = !DILocalVariable(name: "param_name", scope: !2969, file: !3, line: 260, type: !1494)
!2972 = !DILocation(line: 260, column: 19, scope: !2969)
!2973 = !DILocalVariable(name: "param_type", scope: !2969, file: !3, line: 260, type: !1494)
!2974 = !DILocation(line: 260, column: 31, scope: !2969)
!2975 = !DILocalVariable(name: "param_decl", scope: !2969, file: !3, line: 260, type: !1494)
!2976 = !DILocation(line: 260, column: 43, scope: !2969)
!2977 = !DILocation(line: 262, column: 11, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2969, file: !3, line: 262, column: 11)
!2979 = !DILocation(line: 262, column: 11, scope: !2969)
!2980 = !DILocation(line: 265, column: 4, scope: !2981)
!2981 = distinct !DILexicalBlock(scope: !2978, file: !3, line: 263, column: 2)
!2982 = !DILocation(line: 266, column: 12, scope: !2981)
!2983 = !DILocation(line: 266, column: 10, scope: !2981)
!2984 = !DILocation(line: 267, column: 2, scope: !2981)
!2985 = !DILocation(line: 269, column: 16, scope: !2986)
!2986 = distinct !DILexicalBlock(scope: !2978, file: !3, line: 269, column: 16)
!2987 = !DILocation(line: 269, column: 32, scope: !2986)
!2988 = !DILocation(line: 269, column: 16, scope: !2978)
!2989 = !DILocation(line: 270, column: 17, scope: !2986)
!2990 = !DILocation(line: 270, column: 15, scope: !2986)
!2991 = !DILocation(line: 270, column: 9, scope: !2986)
!2992 = !DILocation(line: 273, column: 10, scope: !2986)
!2993 = !DILocation(line: 273, column: 8, scope: !2986)
!2994 = !DILocation(line: 275, column: 16, scope: !2969)
!2995 = !DILocation(line: 275, column: 28, scope: !2969)
!2996 = !DILocation(line: 275, column: 7, scope: !2969)
!2997 = !DILocation(line: 276, column: 36, scope: !2969)
!2998 = !DILocation(line: 276, column: 20, scope: !2969)
!2999 = !DILocation(line: 276, column: 18, scope: !2969)
!3000 = !DILocation(line: 277, column: 20, scope: !2969)
!3001 = !DILocation(line: 277, column: 18, scope: !2969)
!3002 = !DILocation(line: 279, column: 4, scope: !2969)
!3003 = !DILocation(line: 279, column: 2, scope: !2969)
!3004 = !DILocation(line: 280, column: 25, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2969, file: !3, line: 280, column: 11)
!3006 = !DILocation(line: 280, column: 11, scope: !3005)
!3007 = !DILocation(line: 281, column: 4, scope: !3005)
!3008 = !DILocation(line: 281, column: 7, scope: !3005)
!3009 = !DILocation(line: 282, column: 4, scope: !3005)
!3010 = !DILocation(line: 282, column: 7, scope: !3005)
!3011 = !DILocation(line: 282, column: 37, scope: !3005)
!3012 = !DILocation(line: 282, column: 35, scope: !3005)
!3013 = !DILocation(line: 280, column: 11, scope: !2969)
!3014 = !DILocation(line: 283, column: 31, scope: !3005)
!3015 = !DILocation(line: 283, column: 2, scope: !3005)
!3016 = !DILocation(line: 283, column: 29, scope: !3005)
!3017 = !DILocation(line: 285, column: 31, scope: !3005)
!3018 = !DILocation(line: 285, column: 2, scope: !3005)
!3019 = !DILocation(line: 285, column: 29, scope: !3005)
!3020 = !DILocation(line: 286, column: 7, scope: !2969)
!3021 = !DILocation(line: 286, column: 36, scope: !2969)
!3022 = !DILocation(line: 287, column: 7, scope: !2969)
!3023 = !DILocation(line: 287, column: 34, scope: !2969)
!3024 = !DILocation(line: 289, column: 34, scope: !2969)
!3025 = !DILocation(line: 289, column: 40, scope: !2969)
!3026 = !DILocation(line: 289, column: 47, scope: !2969)
!3027 = !DILocation(line: 289, column: 14, scope: !2969)
!3028 = !DILocation(line: 289, column: 12, scope: !2969)
!3029 = !DILocation(line: 291, column: 25, scope: !2969)
!3030 = !DILocation(line: 291, column: 23, scope: !2969)
!3031 = !DILocation(line: 292, column: 34, scope: !2969)
!3032 = !DILocation(line: 292, column: 46, scope: !2969)
!3033 = !DILocation(line: 292, column: 25, scope: !2969)
!3034 = !DILocation(line: 292, column: 23, scope: !2969)
!3035 = !DILocation(line: 293, column: 18, scope: !2969)
!3036 = !DILocation(line: 293, column: 16, scope: !2969)
!3037 = !DILocation(line: 294, column: 5, scope: !2969)
!3038 = !DILocation(line: 258, column: 55, scope: !2966)
!3039 = !DILocation(line: 258, column: 3, scope: !2966)
!3040 = distinct !{!3040, !2967, !3041}
!3041 = !DILocation(line: 294, column: 5, scope: !2963)
!3042 = !DILocation(line: 296, column: 3, scope: !2807)
!3043 = !DILocation(line: 299, column: 21, scope: !2807)
!3044 = !DILocation(line: 299, column: 19, scope: !2807)
!3045 = !DILocation(line: 302, column: 31, scope: !2807)
!3046 = !DILocation(line: 302, column: 21, scope: !2807)
!3047 = !DILocation(line: 302, column: 19, scope: !2807)
!3048 = !DILocation(line: 303, column: 31, scope: !2807)
!3049 = !DILocation(line: 303, column: 21, scope: !2807)
!3050 = !DILocation(line: 303, column: 19, scope: !2807)
!3051 = !DILocation(line: 304, column: 24, scope: !2807)
!3052 = !DILocation(line: 304, column: 14, scope: !2807)
!3053 = !DILocation(line: 304, column: 12, scope: !2807)
!3054 = !DILocation(line: 307, column: 17, scope: !2807)
!3055 = !DILocation(line: 307, column: 15, scope: !2807)
!3056 = !DILocation(line: 308, column: 33, scope: !2807)
!3057 = !DILocation(line: 308, column: 46, scope: !2807)
!3058 = !DILocation(line: 308, column: 12, scope: !2807)
!3059 = !DILocation(line: 308, column: 10, scope: !2807)
!3060 = !DILocation(line: 311, column: 12, scope: !2807)
!3061 = !DILocation(line: 311, column: 55, scope: !2807)
!3062 = !DILocation(line: 311, column: 3, scope: !2807)
!3063 = !DILocation(line: 312, column: 36, scope: !2807)
!3064 = !DILocation(line: 312, column: 12, scope: !2807)
!3065 = !DILocation(line: 312, column: 10, scope: !2807)
!3066 = !DILocation(line: 313, column: 12, scope: !2807)
!3067 = !DILocation(line: 313, column: 10, scope: !2807)
!3068 = !DILocation(line: 314, column: 12, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !2807, file: !3, line: 314, column: 3)
!3070 = !DILocation(line: 314, column: 10, scope: !3069)
!3071 = !DILocation(line: 314, column: 8, scope: !3069)
!3072 = !DILocation(line: 314, column: 29, scope: !3073)
!3073 = distinct !DILexicalBlock(scope: !3069, file: !3, line: 314, column: 3)
!3074 = !DILocation(line: 314, column: 3, scope: !3069)
!3075 = !DILocation(line: 315, column: 24, scope: !3073)
!3076 = !DILocation(line: 315, column: 5, scope: !3073)
!3077 = !DILocation(line: 315, column: 22, scope: !3073)
!3078 = !DILocation(line: 314, column: 36, scope: !3073)
!3079 = !DILocation(line: 314, column: 34, scope: !3073)
!3080 = !DILocation(line: 314, column: 3, scope: !3073)
!3081 = distinct !{!3081, !3074, !3082}
!3082 = !DILocation(line: 315, column: 24, scope: !3069)
!3083 = !DILocation(line: 316, column: 29, scope: !2807)
!3084 = !DILocation(line: 316, column: 3, scope: !2807)
!3085 = !DILocation(line: 316, column: 27, scope: !2807)
!3086 = !DILocation(line: 318, column: 7, scope: !2807)
!3087 = !DILocation(line: 317, column: 3, scope: !2807)
!3088 = !DILocation(line: 318, column: 5, scope: !2807)
!3089 = !DILocation(line: 319, column: 41, scope: !2807)
!3090 = !DILocation(line: 319, column: 3, scope: !2807)
!3091 = !DILocation(line: 319, column: 39, scope: !2807)
!3092 = !DILocation(line: 323, column: 3, scope: !2807)
!3093 = !DILocation(line: 323, column: 28, scope: !2807)
!3094 = !DILocation(line: 324, column: 3, scope: !2807)
!3095 = !DILocation(line: 324, column: 27, scope: !2807)
!3096 = !DILocation(line: 327, column: 3, scope: !2807)
!3097 = !DILocation(line: 327, column: 26, scope: !2807)
!3098 = !DILocation(line: 328, column: 3, scope: !2807)
!3099 = !DILocation(line: 328, column: 25, scope: !2807)
!3100 = !DILocation(line: 332, column: 3, scope: !2807)
!3101 = !DILocation(line: 332, column: 35, scope: !2807)
!3102 = !DILocation(line: 335, column: 27, scope: !2807)
!3103 = !DILocation(line: 335, column: 3, scope: !2807)
!3104 = !DILocation(line: 335, column: 25, scope: !2807)
!3105 = !DILocation(line: 336, column: 48, scope: !2807)
!3106 = !DILocation(line: 336, column: 3, scope: !2807)
!3107 = !DILocation(line: 336, column: 46, scope: !2807)
!3108 = !DILocation(line: 337, column: 7, scope: !2807)
!3109 = !DILocation(line: 337, column: 5, scope: !2807)
!3110 = !DILocation(line: 338, column: 30, scope: !2807)
!3111 = !DILocation(line: 338, column: 3, scope: !2807)
!3112 = !DILocation(line: 338, column: 28, scope: !2807)
!3113 = !DILocation(line: 339, column: 3, scope: !2807)
!3114 = !DILocation(line: 339, column: 24, scope: !2807)
!3115 = !DILocation(line: 342, column: 3, scope: !2807)
!3116 = !DILocation(line: 345, column: 36, scope: !2807)
!3117 = !DILocation(line: 345, column: 52, scope: !2807)
!3118 = !DILocation(line: 345, column: 60, scope: !2807)
!3119 = !DILocation(line: 345, column: 10, scope: !2807)
!3120 = !DILocation(line: 345, column: 3, scope: !2807)
!3121 = !DILocation(line: 346, column: 1, scope: !2807)
!3122 = distinct !DISubprogram(name: "finalize_size_functions", scope: !3, file: !3, line: 356, type: !2816, scopeLine: 357, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3123 = !DILocalVariable(name: "i", scope: !3122, file: !3, line: 358, type: !7)
!3124 = !DILocation(line: 358, column: 16, scope: !3122)
!3125 = !DILocalVariable(name: "fndecl", scope: !3122, file: !3, line: 359, type: !1494)
!3126 = !DILocation(line: 359, column: 8, scope: !3122)
!3127 = !DILocation(line: 361, column: 10, scope: !3128)
!3128 = distinct !DILexicalBlock(scope: !3122, file: !3, line: 361, column: 3)
!3129 = !DILocation(line: 361, column: 8, scope: !3128)
!3130 = !DILocation(line: 361, column: 15, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3128, file: !3, line: 361, column: 3)
!3132 = !DILocation(line: 361, column: 3, scope: !3128)
!3133 = !DILocation(line: 363, column: 36, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 362, column: 5)
!3135 = !DILocation(line: 363, column: 7, scope: !3134)
!3136 = !DILocation(line: 364, column: 31, scope: !3134)
!3137 = !DILocation(line: 364, column: 7, scope: !3134)
!3138 = !DILocation(line: 365, column: 35, scope: !3134)
!3139 = !DILocation(line: 365, column: 7, scope: !3134)
!3140 = !DILocation(line: 366, column: 33, scope: !3134)
!3141 = !DILocation(line: 366, column: 7, scope: !3134)
!3142 = !DILocation(line: 367, column: 5, scope: !3134)
!3143 = !DILocation(line: 361, column: 62, scope: !3131)
!3144 = !DILocation(line: 361, column: 3, scope: !3131)
!3145 = distinct !{!3145, !3132, !3146}
!3146 = !DILocation(line: 367, column: 5, scope: !3128)
!3147 = !DILocation(line: 369, column: 3, scope: !3122)
!3148 = !DILocation(line: 370, column: 1, scope: !3122)
!3149 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !135, file: !135, line: 182, type: !3150, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3150 = !DISubroutineType(types: !3151)
!3151 = !{!1591, !3152, !7, !1861}
!3152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3153, size: 64)
!3153 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2499)
!3154 = !DILocalVariable(name: "vec_", arg: 1, scope: !3149, file: !135, line: 182, type: !3152)
!3155 = !DILocation(line: 182, column: 1, scope: !3149)
!3156 = !DILocalVariable(name: "ix_", arg: 2, scope: !3149, file: !135, line: 182, type: !7)
!3157 = !DILocalVariable(name: "ptr", arg: 3, scope: !3149, file: !135, line: 182, type: !1861)
!3158 = !DILocation(line: 182, column: 1, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3149, file: !135, line: 182, column: 1)
!3160 = !DILocation(line: 182, column: 1, scope: !3161)
!3161 = distinct !DILexicalBlock(scope: !3159, file: !135, line: 182, column: 1)
!3162 = !DILocation(line: 182, column: 1, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3159, file: !135, line: 182, column: 1)
!3164 = distinct !DISubprogram(name: "VEC_tree_gc_free", scope: !135, file: !135, line: 183, type: !3165, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3165 = !DISubroutineType(types: !3166)
!3166 = !{null, !3167}
!3167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2494, size: 64)
!3168 = !DILocalVariable(name: "vec_", arg: 1, scope: !3164, file: !135, line: 183, type: !3167)
!3169 = !DILocation(line: 183, column: 1, scope: !3164)
!3170 = !DILocation(line: 183, column: 1, scope: !3171)
!3171 = distinct !DILexicalBlock(scope: !3164, file: !135, line: 183, column: 1)
!3172 = distinct !DISubprogram(name: "mode_for_size", scope: !3, file: !3, line: 382, type: !3173, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3173 = !DISubroutineType(types: !3174)
!3174 = !{!5, !7, !526, !1591}
!3175 = !DILocalVariable(name: "size", arg: 1, scope: !3172, file: !3, line: 382, type: !7)
!3176 = !DILocation(line: 382, column: 29, scope: !3172)
!3177 = !DILocalVariable(name: "mclass", arg: 2, scope: !3172, file: !3, line: 382, type: !526)
!3178 = !DILocation(line: 382, column: 51, scope: !3172)
!3179 = !DILocalVariable(name: "limit", arg: 3, scope: !3172, file: !3, line: 382, type: !1591)
!3180 = !DILocation(line: 382, column: 63, scope: !3172)
!3181 = !DILocalVariable(name: "mode", scope: !3172, file: !3, line: 384, type: !5)
!3182 = !DILocation(line: 384, column: 21, scope: !3172)
!3183 = !DILocation(line: 386, column: 7, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3172, file: !3, line: 386, column: 7)
!3185 = !DILocation(line: 386, column: 13, scope: !3184)
!3186 = !DILocation(line: 386, column: 16, scope: !3184)
!3187 = !DILocation(line: 386, column: 23, scope: !3184)
!3188 = !DILocation(line: 386, column: 21, scope: !3184)
!3189 = !DILocation(line: 386, column: 7, scope: !3172)
!3190 = !DILocation(line: 387, column: 5, scope: !3184)
!3191 = !DILocation(line: 390, column: 15, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3172, file: !3, line: 390, column: 3)
!3193 = !DILocation(line: 390, column: 13, scope: !3192)
!3194 = !DILocation(line: 390, column: 8, scope: !3192)
!3195 = !DILocation(line: 390, column: 50, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 390, column: 3)
!3197 = !DILocation(line: 390, column: 55, scope: !3196)
!3198 = !DILocation(line: 390, column: 3, scope: !3192)
!3199 = !DILocation(line: 392, column: 9, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3196, file: !3, line: 392, column: 9)
!3201 = !DILocation(line: 392, column: 38, scope: !3200)
!3202 = !DILocation(line: 392, column: 35, scope: !3200)
!3203 = !DILocation(line: 392, column: 9, scope: !3196)
!3204 = !DILocation(line: 393, column: 14, scope: !3200)
!3205 = !DILocation(line: 393, column: 7, scope: !3200)
!3206 = !DILocation(line: 391, column: 15, scope: !3196)
!3207 = !DILocation(line: 391, column: 13, scope: !3196)
!3208 = !DILocation(line: 390, column: 3, scope: !3196)
!3209 = distinct !{!3209, !3198, !3210}
!3210 = !DILocation(line: 393, column: 14, scope: !3192)
!3211 = !DILocation(line: 395, column: 3, scope: !3172)
!3212 = !DILocation(line: 396, column: 1, scope: !3172)
!3213 = distinct !DISubprogram(name: "mode_for_size_tree", scope: !3, file: !3, line: 401, type: !3214, scopeLine: 402, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3214 = !DISubroutineType(types: !3215)
!3215 = !{!5, !3216, !526, !1591}
!3216 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1495, line: 59, baseType: !3217)
!3217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3218, size: 64)
!3218 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1497)
!3219 = !DILocalVariable(name: "size", arg: 1, scope: !3213, file: !3, line: 401, type: !3216)
!3220 = !DILocation(line: 401, column: 32, scope: !3213)
!3221 = !DILocalVariable(name: "mclass", arg: 2, scope: !3213, file: !3, line: 401, type: !526)
!3222 = !DILocation(line: 401, column: 54, scope: !3213)
!3223 = !DILocalVariable(name: "limit", arg: 3, scope: !3213, file: !3, line: 401, type: !1591)
!3224 = !DILocation(line: 401, column: 66, scope: !3213)
!3225 = !DILocalVariable(name: "uhwi", scope: !3213, file: !3, line: 403, type: !1548)
!3226 = !DILocation(line: 403, column: 26, scope: !3213)
!3227 = !DILocalVariable(name: "ui", scope: !3213, file: !3, line: 404, type: !7)
!3228 = !DILocation(line: 404, column: 16, scope: !3213)
!3229 = !DILocation(line: 406, column: 23, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3213, file: !3, line: 406, column: 7)
!3231 = !DILocation(line: 406, column: 8, scope: !3230)
!3232 = !DILocation(line: 406, column: 7, scope: !3213)
!3233 = !DILocation(line: 407, column: 5, scope: !3230)
!3234 = !DILocation(line: 408, column: 24, scope: !3213)
!3235 = !DILocation(line: 408, column: 10, scope: !3213)
!3236 = !DILocation(line: 408, column: 8, scope: !3213)
!3237 = !DILocation(line: 409, column: 8, scope: !3213)
!3238 = !DILocation(line: 409, column: 6, scope: !3213)
!3239 = !DILocation(line: 410, column: 7, scope: !3240)
!3240 = distinct !DILexicalBlock(scope: !3213, file: !3, line: 410, column: 7)
!3241 = !DILocation(line: 410, column: 15, scope: !3240)
!3242 = !DILocation(line: 410, column: 12, scope: !3240)
!3243 = !DILocation(line: 410, column: 7, scope: !3213)
!3244 = !DILocation(line: 411, column: 5, scope: !3240)
!3245 = !DILocation(line: 412, column: 25, scope: !3213)
!3246 = !DILocation(line: 412, column: 29, scope: !3213)
!3247 = !DILocation(line: 412, column: 37, scope: !3213)
!3248 = !DILocation(line: 412, column: 10, scope: !3213)
!3249 = !DILocation(line: 412, column: 3, scope: !3213)
!3250 = !DILocation(line: 413, column: 1, scope: !3213)
!3251 = distinct !DISubprogram(name: "smallest_mode_for_size", scope: !3, file: !3, line: 419, type: !3252, scopeLine: 420, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3252 = !DISubroutineType(types: !3253)
!3253 = !{!5, !7, !526}
!3254 = !DILocalVariable(name: "size", arg: 1, scope: !3251, file: !3, line: 419, type: !7)
!3255 = !DILocation(line: 419, column: 38, scope: !3251)
!3256 = !DILocalVariable(name: "mclass", arg: 2, scope: !3251, file: !3, line: 419, type: !526)
!3257 = !DILocation(line: 419, column: 60, scope: !3251)
!3258 = !DILocalVariable(name: "mode", scope: !3251, file: !3, line: 421, type: !5)
!3259 = !DILocation(line: 421, column: 21, scope: !3251)
!3260 = !DILocation(line: 425, column: 15, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 425, column: 3)
!3262 = !DILocation(line: 425, column: 13, scope: !3261)
!3263 = !DILocation(line: 425, column: 8, scope: !3261)
!3264 = !DILocation(line: 425, column: 50, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3261, file: !3, line: 425, column: 3)
!3266 = !DILocation(line: 425, column: 55, scope: !3265)
!3267 = !DILocation(line: 425, column: 3, scope: !3261)
!3268 = !DILocation(line: 427, column: 9, scope: !3269)
!3269 = distinct !DILexicalBlock(scope: !3265, file: !3, line: 427, column: 9)
!3270 = !DILocation(line: 427, column: 38, scope: !3269)
!3271 = !DILocation(line: 427, column: 35, scope: !3269)
!3272 = !DILocation(line: 427, column: 9, scope: !3265)
!3273 = !DILocation(line: 428, column: 14, scope: !3269)
!3274 = !DILocation(line: 428, column: 7, scope: !3269)
!3275 = !DILocation(line: 426, column: 15, scope: !3265)
!3276 = !DILocation(line: 426, column: 13, scope: !3265)
!3277 = !DILocation(line: 425, column: 3, scope: !3265)
!3278 = distinct !{!3278, !3267, !3279}
!3279 = !DILocation(line: 428, column: 14, scope: !3261)
!3280 = !DILocation(line: 430, column: 3, scope: !3251)
!3281 = !DILocation(line: 432, column: 5, scope: !3251)
!3282 = !DILocation(line: 434, column: 1, scope: !3251)
!3283 = distinct !DISubprogram(name: "int_mode_for_mode", scope: !3, file: !3, line: 439, type: !3284, scopeLine: 440, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3284 = !DISubroutineType(types: !3285)
!3285 = !{!5, !5}
!3286 = !DILocalVariable(name: "mode", arg: 1, scope: !3283, file: !3, line: 439, type: !5)
!3287 = !DILocation(line: 439, column: 38, scope: !3283)
!3288 = !DILocation(line: 441, column: 11, scope: !3283)
!3289 = !DILocation(line: 441, column: 3, scope: !3283)
!3290 = !DILocation(line: 445, column: 7, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3283, file: !3, line: 442, column: 5)
!3292 = !DILocation(line: 461, column: 29, scope: !3291)
!3293 = !DILocation(line: 461, column: 14, scope: !3291)
!3294 = !DILocation(line: 461, column: 12, scope: !3291)
!3295 = !DILocation(line: 462, column: 7, scope: !3291)
!3296 = !DILocation(line: 465, column: 11, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !3291, file: !3, line: 465, column: 11)
!3298 = !DILocation(line: 465, column: 16, scope: !3297)
!3299 = !DILocation(line: 465, column: 11, scope: !3291)
!3300 = !DILocation(line: 466, column: 2, scope: !3297)
!3301 = !DILocation(line: 465, column: 19, scope: !3297)
!3302 = !DILocation(line: 472, column: 7, scope: !3291)
!3303 = !DILocation(line: 473, column: 5, scope: !3291)
!3304 = !DILocation(line: 475, column: 10, scope: !3283)
!3305 = !DILocation(line: 475, column: 3, scope: !3283)
!3306 = distinct !DISubprogram(name: "get_mode_alignment", scope: !3, file: !3, line: 482, type: !3307, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3307 = !DISubroutineType(types: !3308)
!3308 = !{!7, !5}
!3309 = !DILocalVariable(name: "mode", arg: 1, scope: !3306, file: !3, line: 482, type: !5)
!3310 = !DILocation(line: 482, column: 39, scope: !3306)
!3311 = !DILocation(line: 484, column: 10, scope: !3306)
!3312 = !DILocation(line: 484, column: 3, scope: !3306)
!3313 = distinct !DISubprogram(name: "layout_decl", scope: !3, file: !3, line: 516, type: !3314, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3314 = !DISubroutineType(types: !3315)
!3315 = !{null, !1494, !7}
!3316 = !DILocalVariable(name: "decl", arg: 1, scope: !3313, file: !3, line: 516, type: !1494)
!3317 = !DILocation(line: 516, column: 19, scope: !3313)
!3318 = !DILocalVariable(name: "known_align", arg: 2, scope: !3313, file: !3, line: 516, type: !7)
!3319 = !DILocation(line: 516, column: 38, scope: !3313)
!3320 = !DILocalVariable(name: "type", scope: !3313, file: !3, line: 518, type: !1494)
!3321 = !DILocation(line: 518, column: 8, scope: !3313)
!3322 = !DILocation(line: 518, column: 15, scope: !3313)
!3323 = !DILocalVariable(name: "code", scope: !3313, file: !3, line: 519, type: !134)
!3324 = !DILocation(line: 519, column: 18, scope: !3313)
!3325 = !DILocation(line: 519, column: 25, scope: !3313)
!3326 = !DILocalVariable(name: "rtl", scope: !3313, file: !3, line: 520, type: !1672)
!3327 = !DILocation(line: 520, column: 7, scope: !3313)
!3328 = !DILocalVariable(name: "loc", scope: !3313, file: !3, line: 521, type: !1622)
!3329 = !DILocation(line: 521, column: 14, scope: !3313)
!3330 = !DILocation(line: 521, column: 20, scope: !3313)
!3331 = !DILocation(line: 523, column: 7, scope: !3332)
!3332 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 523, column: 7)
!3333 = !DILocation(line: 523, column: 12, scope: !3332)
!3334 = !DILocation(line: 523, column: 7, scope: !3313)
!3335 = !DILocation(line: 524, column: 5, scope: !3332)
!3336 = !DILocation(line: 526, column: 3, scope: !3313)
!3337 = !DILocation(line: 529, column: 9, scope: !3313)
!3338 = !DILocation(line: 529, column: 7, scope: !3313)
!3339 = !DILocation(line: 531, column: 7, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 531, column: 7)
!3341 = !DILocation(line: 531, column: 15, scope: !3340)
!3342 = !DILocation(line: 531, column: 12, scope: !3340)
!3343 = !DILocation(line: 531, column: 7, scope: !3313)
!3344 = !DILocation(line: 532, column: 12, scope: !3340)
!3345 = !DILocation(line: 532, column: 10, scope: !3340)
!3346 = !DILocation(line: 532, column: 5, scope: !3340)
!3347 = !DILocation(line: 544, column: 26, scope: !3313)
!3348 = !DILocation(line: 544, column: 3, scope: !3313)
!3349 = !DILocation(line: 544, column: 24, scope: !3313)
!3350 = !DILocation(line: 545, column: 7, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 545, column: 7)
!3352 = !DILocation(line: 545, column: 24, scope: !3351)
!3353 = !DILocation(line: 545, column: 7, scope: !3313)
!3354 = !DILocation(line: 546, column: 24, scope: !3351)
!3355 = !DILocation(line: 546, column: 5, scope: !3351)
!3356 = !DILocation(line: 546, column: 22, scope: !3351)
!3357 = !DILocation(line: 548, column: 7, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 548, column: 7)
!3359 = !DILocation(line: 548, column: 24, scope: !3358)
!3360 = !DILocation(line: 548, column: 7, scope: !3313)
!3361 = !DILocation(line: 550, column: 26, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3358, file: !3, line: 549, column: 5)
!3363 = !DILocation(line: 550, column: 7, scope: !3362)
!3364 = !DILocation(line: 550, column: 24, scope: !3362)
!3365 = !DILocation(line: 551, column: 31, scope: !3362)
!3366 = !DILocation(line: 551, column: 7, scope: !3362)
!3367 = !DILocation(line: 551, column: 29, scope: !3362)
!3368 = !DILocation(line: 552, column: 5, scope: !3362)
!3369 = !DILocation(line: 553, column: 12, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3358, file: !3, line: 553, column: 12)
!3371 = !DILocation(line: 553, column: 34, scope: !3370)
!3372 = !DILocation(line: 553, column: 12, scope: !3358)
!3373 = !DILocation(line: 555, column: 27, scope: !3370)
!3374 = !DILocation(line: 555, column: 32, scope: !3370)
!3375 = !DILocation(line: 556, column: 22, scope: !3370)
!3376 = !DILocation(line: 556, column: 42, scope: !3370)
!3377 = !DILocation(line: 557, column: 8, scope: !3370)
!3378 = !DILocation(line: 556, column: 6, scope: !3370)
!3379 = !DILocation(line: 555, column: 9, scope: !3370)
!3380 = !DILocation(line: 554, column: 5, scope: !3370)
!3381 = !DILocation(line: 555, column: 7, scope: !3370)
!3382 = !DILocation(line: 559, column: 7, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 559, column: 7)
!3384 = !DILocation(line: 559, column: 12, scope: !3383)
!3385 = !DILocation(line: 559, column: 7, scope: !3313)
!3386 = !DILocation(line: 561, column: 20, scope: !3383)
!3387 = !DILocation(line: 561, column: 26, scope: !3383)
!3388 = !DILocation(line: 561, column: 5, scope: !3383)
!3389 = !DILocalVariable(name: "old_user_align", scope: !3390, file: !3, line: 565, type: !1614)
!3390 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 564, column: 5)
!3391 = !DILocation(line: 565, column: 12, scope: !3390)
!3392 = !DILocation(line: 565, column: 29, scope: !3390)
!3393 = !DILocalVariable(name: "zero_bitfield", scope: !3390, file: !3, line: 566, type: !1614)
!3394 = !DILocation(line: 566, column: 12, scope: !3390)
!3395 = !DILocalVariable(name: "packed_p", scope: !3390, file: !3, line: 567, type: !1614)
!3396 = !DILocation(line: 567, column: 12, scope: !3390)
!3397 = !DILocation(line: 567, column: 23, scope: !3390)
!3398 = !DILocalVariable(name: "mfa", scope: !3390, file: !3, line: 568, type: !7)
!3399 = !DILocation(line: 568, column: 20, scope: !3390)
!3400 = !DILocation(line: 570, column: 11, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 570, column: 11)
!3402 = !DILocation(line: 570, column: 11, scope: !3390)
!3403 = !DILocation(line: 572, column: 33, scope: !3404)
!3404 = distinct !DILexicalBlock(scope: !3401, file: !3, line: 571, column: 2)
!3405 = !DILocation(line: 572, column: 4, scope: !3404)
!3406 = !DILocation(line: 572, column: 31, scope: !3404)
!3407 = !DILocation(line: 577, column: 23, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 577, column: 8)
!3409 = !DILocation(line: 577, column: 8, scope: !3408)
!3410 = !DILocation(line: 578, column: 8, scope: !3408)
!3411 = !DILocation(line: 578, column: 21, scope: !3408)
!3412 = !DILocation(line: 578, column: 43, scope: !3408)
!3413 = !DILocation(line: 578, column: 13, scope: !3408)
!3414 = !DILocation(line: 577, column: 8, scope: !3404)
!3415 = !DILocation(line: 580, column: 22, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 579, column: 6)
!3417 = !DILocation(line: 581, column: 17, scope: !3416)
!3418 = !DILocation(line: 584, column: 18, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 583, column: 12)
!3420 = !DILocation(line: 584, column: 24, scope: !3419)
!3421 = !DILocation(line: 584, column: 3, scope: !3419)
!3422 = !DILocation(line: 596, column: 6, scope: !3416)
!3423 = !DILocation(line: 601, column: 8, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 601, column: 8)
!3425 = !DILocation(line: 601, column: 25, scope: !3424)
!3426 = !DILocation(line: 602, column: 8, scope: !3424)
!3427 = !DILocation(line: 602, column: 11, scope: !3424)
!3428 = !DILocation(line: 602, column: 40, scope: !3424)
!3429 = !DILocation(line: 603, column: 8, scope: !3424)
!3430 = !DILocation(line: 603, column: 11, scope: !3424)
!3431 = !DILocation(line: 603, column: 45, scope: !3424)
!3432 = !DILocation(line: 601, column: 8, scope: !3404)
!3433 = !DILocalVariable(name: "xmode", scope: !3434, file: !3, line: 605, type: !5)
!3434 = distinct !DILexicalBlock(scope: !3424, file: !3, line: 604, column: 6)
!3435 = !DILocation(line: 605, column: 26, scope: !3434)
!3436 = !DILocation(line: 606, column: 25, scope: !3434)
!3437 = !DILocation(line: 606, column: 5, scope: !3434)
!3438 = !DILocalVariable(name: "xalign", scope: !3434, file: !3, line: 607, type: !7)
!3439 = !DILocation(line: 607, column: 21, scope: !3434)
!3440 = !DILocation(line: 607, column: 30, scope: !3434)
!3441 = !DILocation(line: 609, column: 12, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3434, file: !3, line: 609, column: 12)
!3443 = !DILocation(line: 609, column: 18, scope: !3442)
!3444 = !DILocation(line: 610, column: 5, scope: !3442)
!3445 = !DILocation(line: 610, column: 10, scope: !3442)
!3446 = !DILocation(line: 610, column: 17, scope: !3442)
!3447 = !DILocation(line: 610, column: 33, scope: !3442)
!3448 = !DILocation(line: 610, column: 36, scope: !3442)
!3449 = !DILocation(line: 611, column: 5, scope: !3442)
!3450 = !DILocation(line: 611, column: 9, scope: !3442)
!3451 = !DILocation(line: 611, column: 21, scope: !3442)
!3452 = !DILocation(line: 611, column: 26, scope: !3442)
!3453 = !DILocation(line: 611, column: 29, scope: !3442)
!3454 = !DILocation(line: 611, column: 44, scope: !3442)
!3455 = !DILocation(line: 611, column: 41, scope: !3442)
!3456 = !DILocation(line: 609, column: 12, scope: !3434)
!3457 = !DILocation(line: 613, column: 25, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !3442, file: !3, line: 612, column: 3)
!3459 = !DILocation(line: 613, column: 5, scope: !3458)
!3460 = !DILocation(line: 613, column: 23, scope: !3458)
!3461 = !DILocation(line: 614, column: 24, scope: !3458)
!3462 = !DILocation(line: 614, column: 5, scope: !3458)
!3463 = !DILocation(line: 614, column: 22, scope: !3458)
!3464 = !DILocation(line: 615, column: 5, scope: !3458)
!3465 = !DILocation(line: 615, column: 27, scope: !3458)
!3466 = !DILocation(line: 616, column: 3, scope: !3458)
!3467 = !DILocation(line: 617, column: 6, scope: !3434)
!3468 = !DILocation(line: 620, column: 8, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3404, file: !3, line: 620, column: 8)
!3470 = !DILocation(line: 620, column: 25, scope: !3469)
!3471 = !DILocation(line: 620, column: 36, scope: !3469)
!3472 = !DILocation(line: 620, column: 39, scope: !3469)
!3473 = !DILocation(line: 620, column: 56, scope: !3469)
!3474 = !DILocation(line: 621, column: 8, scope: !3469)
!3475 = !DILocation(line: 621, column: 11, scope: !3469)
!3476 = !DILocation(line: 621, column: 26, scope: !3469)
!3477 = !DILocation(line: 621, column: 23, scope: !3469)
!3478 = !DILocation(line: 622, column: 8, scope: !3469)
!3479 = !DILocation(line: 622, column: 11, scope: !3469)
!3480 = !DILocation(line: 622, column: 32, scope: !3469)
!3481 = !DILocation(line: 622, column: 29, scope: !3469)
!3482 = !DILocation(line: 620, column: 8, scope: !3404)
!3483 = !DILocation(line: 623, column: 6, scope: !3469)
!3484 = !DILocation(line: 623, column: 28, scope: !3469)
!3485 = !DILocation(line: 624, column: 2, scope: !3404)
!3486 = !DILocation(line: 625, column: 16, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3401, file: !3, line: 625, column: 16)
!3488 = !DILocation(line: 625, column: 25, scope: !3487)
!3489 = !DILocation(line: 625, column: 28, scope: !3487)
!3490 = !DILocation(line: 625, column: 16, scope: !3401)
!3491 = !DILocation(line: 631, column: 17, scope: !3487)
!3492 = !DILocation(line: 631, column: 23, scope: !3487)
!3493 = !DILocation(line: 631, column: 2, scope: !3487)
!3494 = !DILocation(line: 636, column: 11, scope: !3495)
!3495 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 636, column: 11)
!3496 = !DILocation(line: 637, column: 4, scope: !3495)
!3497 = !DILocation(line: 637, column: 8, scope: !3495)
!3498 = !DILocation(line: 636, column: 11, scope: !3390)
!3499 = !DILocation(line: 638, column: 22, scope: !3495)
!3500 = !DILocation(line: 638, column: 2, scope: !3495)
!3501 = !DILocation(line: 638, column: 20, scope: !3495)
!3502 = !DILocation(line: 640, column: 13, scope: !3503)
!3503 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 640, column: 11)
!3504 = !DILocation(line: 640, column: 22, scope: !3503)
!3505 = !DILocation(line: 640, column: 27, scope: !3503)
!3506 = !DILocation(line: 640, column: 11, scope: !3390)
!3507 = !DILocation(line: 650, column: 24, scope: !3508)
!3508 = distinct !DILexicalBlock(scope: !3503, file: !3, line: 641, column: 2)
!3509 = !DILocation(line: 650, column: 4, scope: !3508)
!3510 = !DILocation(line: 650, column: 22, scope: !3508)
!3511 = !DILocation(line: 652, column: 2, scope: !3508)
!3512 = !DILocation(line: 654, column: 11, scope: !3513)
!3513 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 654, column: 11)
!3514 = !DILocation(line: 654, column: 11, scope: !3390)
!3515 = !DILocation(line: 655, column: 15, scope: !3513)
!3516 = !DILocation(line: 655, column: 37, scope: !3513)
!3517 = !DILocation(line: 655, column: 13, scope: !3513)
!3518 = !DILocation(line: 655, column: 9, scope: !3513)
!3519 = !DILocation(line: 657, column: 8, scope: !3513)
!3520 = !DILocation(line: 657, column: 6, scope: !3513)
!3521 = !DILocation(line: 659, column: 11, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 659, column: 11)
!3523 = !DILocation(line: 659, column: 15, scope: !3522)
!3524 = !DILocation(line: 659, column: 11, scope: !3390)
!3525 = !DILocation(line: 660, column: 22, scope: !3522)
!3526 = !DILocation(line: 660, column: 2, scope: !3522)
!3527 = !DILocation(line: 660, column: 20, scope: !3522)
!3528 = !DILocation(line: 664, column: 7, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 664, column: 7)
!3530 = !DILocation(line: 664, column: 24, scope: !3529)
!3531 = !DILocation(line: 664, column: 29, scope: !3529)
!3532 = !DILocation(line: 664, column: 32, scope: !3529)
!3533 = !DILocation(line: 664, column: 61, scope: !3529)
!3534 = !DILocation(line: 664, column: 7, scope: !3313)
!3535 = !DILocation(line: 665, column: 39, scope: !3529)
!3536 = !DILocation(line: 665, column: 24, scope: !3529)
!3537 = !DILocation(line: 665, column: 5, scope: !3529)
!3538 = !DILocation(line: 665, column: 22, scope: !3529)
!3539 = !DILocation(line: 666, column: 7, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 666, column: 7)
!3541 = !DILocation(line: 666, column: 29, scope: !3540)
!3542 = !DILocation(line: 667, column: 7, scope: !3540)
!3543 = !DILocation(line: 667, column: 10, scope: !3540)
!3544 = !DILocation(line: 667, column: 44, scope: !3540)
!3545 = !DILocation(line: 666, column: 7, scope: !3313)
!3546 = !DILocation(line: 668, column: 44, scope: !3540)
!3547 = !DILocation(line: 668, column: 29, scope: !3540)
!3548 = !DILocation(line: 668, column: 5, scope: !3540)
!3549 = !DILocation(line: 668, column: 27, scope: !3540)
!3550 = !DILocation(line: 671, column: 7, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 671, column: 7)
!3552 = !DILocation(line: 672, column: 7, scope: !3551)
!3553 = !DILocation(line: 672, column: 11, scope: !3551)
!3554 = !DILocation(line: 672, column: 16, scope: !3551)
!3555 = !DILocation(line: 672, column: 28, scope: !3551)
!3556 = !DILocation(line: 672, column: 31, scope: !3551)
!3557 = !DILocation(line: 672, column: 36, scope: !3551)
!3558 = !DILocation(line: 673, column: 7, scope: !3551)
!3559 = !DILocation(line: 673, column: 12, scope: !3551)
!3560 = !DILocation(line: 671, column: 7, scope: !3313)
!3561 = !DILocalVariable(name: "size", scope: !3562, file: !3, line: 675, type: !1494)
!3562 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 674, column: 5)
!3563 = !DILocation(line: 675, column: 12, scope: !3562)
!3564 = !DILocation(line: 675, column: 19, scope: !3562)
!3565 = !DILocation(line: 677, column: 11, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3562, file: !3, line: 677, column: 11)
!3567 = !DILocation(line: 677, column: 16, scope: !3566)
!3568 = !DILocation(line: 677, column: 21, scope: !3566)
!3569 = !DILocation(line: 677, column: 24, scope: !3566)
!3570 = !DILocation(line: 677, column: 41, scope: !3566)
!3571 = !DILocation(line: 678, column: 4, scope: !3566)
!3572 = !DILocation(line: 678, column: 25, scope: !3566)
!3573 = !DILocation(line: 678, column: 31, scope: !3566)
!3574 = !DILocation(line: 678, column: 7, scope: !3566)
!3575 = !DILocation(line: 678, column: 49, scope: !3566)
!3576 = !DILocation(line: 677, column: 11, scope: !3562)
!3577 = !DILocalVariable(name: "size_as_int", scope: !3578, file: !3, line: 680, type: !1591)
!3578 = distinct !DILexicalBlock(scope: !3566, file: !3, line: 679, column: 2)
!3579 = !DILocation(line: 680, column: 8, scope: !3578)
!3580 = !DILocation(line: 680, column: 22, scope: !3578)
!3581 = !DILocation(line: 682, column: 26, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3578, file: !3, line: 682, column: 8)
!3583 = !DILocation(line: 682, column: 32, scope: !3582)
!3584 = !DILocation(line: 682, column: 8, scope: !3582)
!3585 = !DILocation(line: 682, column: 45, scope: !3582)
!3586 = !DILocation(line: 682, column: 8, scope: !3578)
!3587 = !DILocation(line: 683, column: 64, scope: !3582)
!3588 = !DILocation(line: 683, column: 70, scope: !3582)
!3589 = !DILocation(line: 683, column: 6, scope: !3582)
!3590 = !DILocation(line: 686, column: 22, scope: !3582)
!3591 = !DILocation(line: 686, column: 28, scope: !3582)
!3592 = !DILocation(line: 685, column: 6, scope: !3582)
!3593 = !DILocation(line: 687, column: 2, scope: !3578)
!3594 = !DILocation(line: 688, column: 5, scope: !3562)
!3595 = !DILocation(line: 691, column: 7, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 691, column: 7)
!3597 = !DILocation(line: 691, column: 7, scope: !3313)
!3598 = !DILocation(line: 693, column: 7, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 692, column: 5)
!3600 = !DILocation(line: 694, column: 7, scope: !3599)
!3601 = !DILocation(line: 695, column: 27, scope: !3599)
!3602 = !DILocation(line: 695, column: 32, scope: !3599)
!3603 = !DILocation(line: 695, column: 7, scope: !3599)
!3604 = !DILocation(line: 696, column: 7, scope: !3599)
!3605 = !DILocation(line: 697, column: 5, scope: !3599)
!3606 = !DILocation(line: 698, column: 1, scope: !3313)
!3607 = distinct !DISubprogram(name: "vector_type_mode", scope: !3, file: !3, line: 2111, type: !3608, scopeLine: 2112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3608 = !DISubroutineType(types: !3609)
!3609 = !{!5, !3216}
!3610 = !DILocalVariable(name: "t", arg: 1, scope: !3607, file: !3, line: 2111, type: !3216)
!3611 = !DILocation(line: 2111, column: 30, scope: !3607)
!3612 = !DILocalVariable(name: "mode", scope: !3607, file: !3, line: 2113, type: !5)
!3613 = !DILocation(line: 2113, column: 21, scope: !3607)
!3614 = !DILocation(line: 2115, column: 3, scope: !3607)
!3615 = !DILocation(line: 2117, column: 10, scope: !3607)
!3616 = !DILocation(line: 2117, column: 13, scope: !3607)
!3617 = !DILocation(line: 2117, column: 18, scope: !3607)
!3618 = !DILocation(line: 2117, column: 8, scope: !3607)
!3619 = !DILocation(line: 2118, column: 7, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 2118, column: 7)
!3621 = !DILocation(line: 2119, column: 7, scope: !3620)
!3622 = !DILocation(line: 2119, column: 20, scope: !3620)
!3623 = !DILocation(line: 2119, column: 45, scope: !3620)
!3624 = !DILocation(line: 2119, column: 12, scope: !3620)
!3625 = !DILocation(line: 2120, column: 4, scope: !3620)
!3626 = !DILocation(line: 2120, column: 26, scope: !3620)
!3627 = !DILocation(line: 2120, column: 8, scope: !3620)
!3628 = !DILocation(line: 2118, column: 7, scope: !3607)
!3629 = !DILocalVariable(name: "innermode", scope: !3630, file: !3, line: 2122, type: !5)
!3630 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 2121, column: 5)
!3631 = !DILocation(line: 2122, column: 25, scope: !3630)
!3632 = !DILocation(line: 2122, column: 37, scope: !3630)
!3633 = !DILocation(line: 2122, column: 52, scope: !3630)
!3634 = !DILocation(line: 2122, column: 57, scope: !3630)
!3635 = !DILocation(line: 2125, column: 11, scope: !3636)
!3636 = distinct !DILexicalBlock(scope: !3630, file: !3, line: 2125, column: 11)
!3637 = !DILocation(line: 2125, column: 38, scope: !3636)
!3638 = !DILocation(line: 2125, column: 11, scope: !3630)
!3639 = !DILocation(line: 2127, column: 26, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 2126, column: 2)
!3641 = !DILocation(line: 2128, column: 7, scope: !3640)
!3642 = !DILocation(line: 2128, column: 5, scope: !3640)
!3643 = !DILocation(line: 2127, column: 11, scope: !3640)
!3644 = !DILocation(line: 2127, column: 9, scope: !3640)
!3645 = !DILocation(line: 2130, column: 8, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3640, file: !3, line: 2130, column: 8)
!3647 = !DILocation(line: 2130, column: 13, scope: !3646)
!3648 = !DILocation(line: 2130, column: 25, scope: !3646)
!3649 = !DILocation(line: 2130, column: 46, scope: !3646)
!3650 = !DILocation(line: 2130, column: 28, scope: !3646)
!3651 = !DILocation(line: 2130, column: 8, scope: !3640)
!3652 = !DILocation(line: 2131, column: 13, scope: !3646)
!3653 = !DILocation(line: 2131, column: 6, scope: !3646)
!3654 = !DILocation(line: 2132, column: 2, scope: !3640)
!3655 = !DILocation(line: 2134, column: 7, scope: !3630)
!3656 = !DILocation(line: 2137, column: 10, scope: !3607)
!3657 = !DILocation(line: 2137, column: 3, scope: !3607)
!3658 = !DILocation(line: 2138, column: 1, scope: !3607)
!3659 = distinct !DISubprogram(name: "do_type_align", scope: !3, file: !3, line: 492, type: !3660, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3660 = !DISubroutineType(types: !3661)
!3661 = !{null, !1494, !1494}
!3662 = !DILocalVariable(name: "type", arg: 1, scope: !3659, file: !3, line: 492, type: !1494)
!3663 = !DILocation(line: 492, column: 21, scope: !3659)
!3664 = !DILocalVariable(name: "decl", arg: 2, scope: !3659, file: !3, line: 492, type: !1494)
!3665 = !DILocation(line: 492, column: 32, scope: !3659)
!3666 = !DILocation(line: 494, column: 7, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3659, file: !3, line: 494, column: 7)
!3668 = !DILocation(line: 494, column: 27, scope: !3667)
!3669 = !DILocation(line: 494, column: 25, scope: !3667)
!3670 = !DILocation(line: 494, column: 7, scope: !3659)
!3671 = !DILocation(line: 496, column: 27, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 495, column: 5)
!3673 = !DILocation(line: 496, column: 7, scope: !3672)
!3674 = !DILocation(line: 496, column: 25, scope: !3672)
!3675 = !DILocation(line: 497, column: 11, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 497, column: 11)
!3677 = !DILocation(line: 497, column: 28, scope: !3676)
!3678 = !DILocation(line: 497, column: 11, scope: !3672)
!3679 = !DILocation(line: 498, column: 27, scope: !3676)
!3680 = !DILocation(line: 498, column: 2, scope: !3676)
!3681 = !DILocation(line: 498, column: 25, scope: !3676)
!3682 = !DILocation(line: 499, column: 5, scope: !3672)
!3683 = !DILocation(line: 500, column: 1, scope: !3659)
!3684 = distinct !DISubprogram(name: "relayout_decl", scope: !3, file: !3, line: 704, type: !2830, scopeLine: 705, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3685 = !DILocalVariable(name: "decl", arg: 1, scope: !3684, file: !3, line: 704, type: !1494)
!3686 = !DILocation(line: 704, column: 21, scope: !3684)
!3687 = !DILocation(line: 706, column: 22, scope: !3684)
!3688 = !DILocation(line: 706, column: 44, scope: !3684)
!3689 = !DILocation(line: 706, column: 3, scope: !3684)
!3690 = !DILocation(line: 706, column: 20, scope: !3684)
!3691 = !DILocation(line: 707, column: 3, scope: !3684)
!3692 = !DILocation(line: 707, column: 20, scope: !3684)
!3693 = !DILocation(line: 708, column: 8, scope: !3694)
!3694 = distinct !DILexicalBlock(scope: !3684, file: !3, line: 708, column: 7)
!3695 = !DILocation(line: 708, column: 7, scope: !3684)
!3696 = !DILocation(line: 709, column: 5, scope: !3694)
!3697 = !DILocation(line: 709, column: 23, scope: !3694)
!3698 = !DILocation(line: 710, column: 3, scope: !3684)
!3699 = !DILocation(line: 712, column: 16, scope: !3684)
!3700 = !DILocation(line: 712, column: 3, scope: !3684)
!3701 = !DILocation(line: 713, column: 1, scope: !3684)
!3702 = distinct !DISubprogram(name: "start_record_layout", scope: !3, file: !3, line: 723, type: !3703, scopeLine: 724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3703 = !DISubroutineType(types: !3704)
!3704 = !{!3705, !1494}
!3705 = !DIDerivedType(tag: DW_TAG_typedef, name: "record_layout_info", file: !135, line: 4224, baseType: !2766)
!3706 = !DILocalVariable(name: "t", arg: 1, scope: !3702, file: !3, line: 723, type: !1494)
!3707 = !DILocation(line: 723, column: 27, scope: !3702)
!3708 = !DILocalVariable(name: "rli", scope: !3702, file: !3, line: 725, type: !3705)
!3709 = !DILocation(line: 725, column: 22, scope: !3702)
!3710 = !DILocation(line: 725, column: 28, scope: !3702)
!3711 = !DILocation(line: 727, column: 12, scope: !3702)
!3712 = !DILocation(line: 727, column: 3, scope: !3702)
!3713 = !DILocation(line: 727, column: 8, scope: !3702)
!3714 = !DILocation(line: 727, column: 10, scope: !3702)
!3715 = !DILocation(line: 732, column: 23, scope: !3702)
!3716 = !DILocation(line: 732, column: 3, scope: !3702)
!3717 = !DILocation(line: 732, column: 8, scope: !3702)
!3718 = !DILocation(line: 732, column: 21, scope: !3702)
!3719 = !DILocation(line: 733, column: 25, scope: !3702)
!3720 = !DILocation(line: 733, column: 30, scope: !3702)
!3721 = !DILocation(line: 733, column: 3, scope: !3702)
!3722 = !DILocation(line: 733, column: 8, scope: !3702)
!3723 = !DILocation(line: 733, column: 23, scope: !3702)
!3724 = !DILocation(line: 734, column: 23, scope: !3702)
!3725 = !DILocation(line: 734, column: 3, scope: !3702)
!3726 = !DILocation(line: 734, column: 8, scope: !3702)
!3727 = !DILocation(line: 734, column: 21, scope: !3702)
!3728 = !DILocation(line: 750, column: 17, scope: !3702)
!3729 = !DILocation(line: 750, column: 3, scope: !3702)
!3730 = !DILocation(line: 750, column: 8, scope: !3702)
!3731 = !DILocation(line: 750, column: 15, scope: !3702)
!3732 = !DILocation(line: 751, column: 17, scope: !3702)
!3733 = !DILocation(line: 751, column: 3, scope: !3702)
!3734 = !DILocation(line: 751, column: 8, scope: !3702)
!3735 = !DILocation(line: 751, column: 15, scope: !3702)
!3736 = !DILocation(line: 752, column: 3, scope: !3702)
!3737 = !DILocation(line: 752, column: 8, scope: !3702)
!3738 = !DILocation(line: 752, column: 19, scope: !3702)
!3739 = !DILocation(line: 753, column: 3, scope: !3702)
!3740 = !DILocation(line: 753, column: 8, scope: !3702)
!3741 = !DILocation(line: 753, column: 24, scope: !3702)
!3742 = !DILocation(line: 754, column: 3, scope: !3702)
!3743 = !DILocation(line: 754, column: 8, scope: !3702)
!3744 = !DILocation(line: 754, column: 31, scope: !3702)
!3745 = !DILocation(line: 755, column: 3, scope: !3702)
!3746 = !DILocation(line: 755, column: 8, scope: !3702)
!3747 = !DILocation(line: 755, column: 31, scope: !3702)
!3748 = !DILocation(line: 757, column: 10, scope: !3702)
!3749 = !DILocation(line: 757, column: 3, scope: !3702)
!3750 = distinct !DISubprogram(name: "bit_from_pos", scope: !3, file: !3, line: 764, type: !3751, scopeLine: 765, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3751 = !DISubroutineType(types: !3752)
!3752 = !{!1494, !1494, !1494}
!3753 = !DILocalVariable(name: "offset", arg: 1, scope: !3750, file: !3, line: 764, type: !1494)
!3754 = !DILocation(line: 764, column: 20, scope: !3750)
!3755 = !DILocalVariable(name: "bitpos", arg: 2, scope: !3750, file: !3, line: 764, type: !1494)
!3756 = !DILocation(line: 764, column: 33, scope: !3750)
!3757 = !DILocation(line: 766, column: 10, scope: !3750)
!3758 = !DILocation(line: 766, column: 3, scope: !3750)
!3759 = distinct !DISubprogram(name: "byte_from_pos", scope: !3, file: !3, line: 773, type: !3751, scopeLine: 774, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3760 = !DILocalVariable(name: "offset", arg: 1, scope: !3759, file: !3, line: 773, type: !1494)
!3761 = !DILocation(line: 773, column: 21, scope: !3759)
!3762 = !DILocalVariable(name: "bitpos", arg: 2, scope: !3759, file: !3, line: 773, type: !1494)
!3763 = !DILocation(line: 773, column: 34, scope: !3759)
!3764 = !DILocation(line: 775, column: 10, scope: !3759)
!3765 = !DILocation(line: 775, column: 3, scope: !3759)
!3766 = distinct !DISubprogram(name: "pos_from_bit", scope: !3, file: !3, line: 782, type: !3767, scopeLine: 784, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3767 = !DISubroutineType(types: !3768)
!3768 = !{null, !1861, !1861, !7, !1494}
!3769 = !DILocalVariable(name: "poffset", arg: 1, scope: !3766, file: !3, line: 782, type: !1861)
!3770 = !DILocation(line: 782, column: 21, scope: !3766)
!3771 = !DILocalVariable(name: "pbitpos", arg: 2, scope: !3766, file: !3, line: 782, type: !1861)
!3772 = !DILocation(line: 782, column: 36, scope: !3766)
!3773 = !DILocalVariable(name: "off_align", arg: 3, scope: !3766, file: !3, line: 782, type: !7)
!3774 = !DILocation(line: 782, column: 58, scope: !3766)
!3775 = !DILocalVariable(name: "pos", arg: 4, scope: !3766, file: !3, line: 783, type: !1494)
!3776 = !DILocation(line: 783, column: 13, scope: !3766)
!3777 = !DILocation(line: 785, column: 14, scope: !3766)
!3778 = !DILocation(line: 785, column: 4, scope: !3766)
!3779 = !DILocation(line: 785, column: 12, scope: !3766)
!3780 = !DILocation(line: 790, column: 14, scope: !3766)
!3781 = !DILocation(line: 790, column: 4, scope: !3766)
!3782 = !DILocation(line: 790, column: 12, scope: !3766)
!3783 = !DILocation(line: 791, column: 1, scope: !3766)
!3784 = distinct !DISubprogram(name: "normalize_offset", scope: !3, file: !3, line: 797, type: !3785, scopeLine: 798, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3785 = !DISubroutineType(types: !3786)
!3786 = !{null, !1861, !1861, !7}
!3787 = !DILocalVariable(name: "poffset", arg: 1, scope: !3784, file: !3, line: 797, type: !1861)
!3788 = !DILocation(line: 797, column: 25, scope: !3784)
!3789 = !DILocalVariable(name: "pbitpos", arg: 2, scope: !3784, file: !3, line: 797, type: !1861)
!3790 = !DILocation(line: 797, column: 40, scope: !3784)
!3791 = !DILocalVariable(name: "off_align", arg: 3, scope: !3784, file: !3, line: 797, type: !7)
!3792 = !DILocation(line: 797, column: 62, scope: !3784)
!3793 = !DILocation(line: 801, column: 26, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 801, column: 7)
!3795 = !DILocation(line: 801, column: 25, scope: !3794)
!3796 = !DILocation(line: 801, column: 35, scope: !3794)
!3797 = !DILocation(line: 801, column: 7, scope: !3794)
!3798 = !DILocation(line: 801, column: 46, scope: !3794)
!3799 = !DILocation(line: 801, column: 7, scope: !3784)
!3800 = !DILocalVariable(name: "extra_aligns", scope: !3801, file: !3, line: 803, type: !1494)
!3801 = distinct !DILexicalBlock(scope: !3794, file: !3, line: 802, column: 5)
!3802 = !DILocation(line: 803, column: 12, scope: !3801)
!3803 = !DILocation(line: 803, column: 27, scope: !3801)
!3804 = !DILocation(line: 807, column: 4, scope: !3801)
!3805 = !DILocation(line: 806, column: 8, scope: !3801)
!3806 = !DILocation(line: 807, column: 2, scope: !3801)
!3807 = !DILocation(line: 813, column: 4, scope: !3801)
!3808 = !DILocation(line: 812, column: 8, scope: !3801)
!3809 = !DILocation(line: 813, column: 2, scope: !3801)
!3810 = !DILocation(line: 814, column: 5, scope: !3801)
!3811 = !DILocation(line: 815, column: 1, scope: !3784)
!3812 = distinct !DISubprogram(name: "debug_rli", scope: !3, file: !3, line: 820, type: !3813, scopeLine: 821, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3813 = !DISubroutineType(types: !3814)
!3814 = !{null, !3705}
!3815 = !DILocalVariable(name: "rli", arg: 1, scope: !3812, file: !3, line: 820, type: !3705)
!3816 = !DILocation(line: 820, column: 31, scope: !3812)
!3817 = !DILocation(line: 822, column: 21, scope: !3812)
!3818 = !DILocation(line: 822, column: 37, scope: !3812)
!3819 = !DILocation(line: 822, column: 42, scope: !3812)
!3820 = !DILocation(line: 822, column: 3, scope: !3812)
!3821 = !DILocation(line: 823, column: 21, scope: !3812)
!3822 = !DILocation(line: 823, column: 41, scope: !3812)
!3823 = !DILocation(line: 823, column: 46, scope: !3812)
!3824 = !DILocation(line: 823, column: 3, scope: !3812)
!3825 = !DILocation(line: 824, column: 21, scope: !3812)
!3826 = !DILocation(line: 824, column: 40, scope: !3812)
!3827 = !DILocation(line: 824, column: 45, scope: !3812)
!3828 = !DILocation(line: 824, column: 3, scope: !3812)
!3829 = !DILocation(line: 826, column: 12, scope: !3812)
!3830 = !DILocation(line: 827, column: 5, scope: !3812)
!3831 = !DILocation(line: 827, column: 10, scope: !3812)
!3832 = !DILocation(line: 827, column: 24, scope: !3812)
!3833 = !DILocation(line: 827, column: 29, scope: !3812)
!3834 = !DILocation(line: 828, column: 5, scope: !3812)
!3835 = !DILocation(line: 828, column: 10, scope: !3812)
!3836 = !DILocation(line: 826, column: 3, scope: !3812)
!3837 = !DILocation(line: 831, column: 15, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 831, column: 7)
!3839 = !DILocation(line: 831, column: 37, scope: !3838)
!3840 = !DILocation(line: 831, column: 42, scope: !3838)
!3841 = !DILocation(line: 831, column: 7, scope: !3838)
!3842 = !DILocation(line: 831, column: 7, scope: !3812)
!3843 = !DILocation(line: 832, column: 14, scope: !3838)
!3844 = !DILocation(line: 832, column: 55, scope: !3838)
!3845 = !DILocation(line: 832, column: 60, scope: !3838)
!3846 = !DILocation(line: 832, column: 5, scope: !3838)
!3847 = !DILocation(line: 834, column: 7, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 834, column: 7)
!3849 = !DILocation(line: 834, column: 12, scope: !3848)
!3850 = !DILocation(line: 834, column: 7, scope: !3812)
!3851 = !DILocation(line: 835, column: 14, scope: !3848)
!3852 = !DILocation(line: 835, column: 5, scope: !3848)
!3853 = !DILocation(line: 837, column: 7, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 837, column: 7)
!3855 = !DILocation(line: 837, column: 12, scope: !3854)
!3856 = !DILocation(line: 837, column: 7, scope: !3812)
!3857 = !DILocation(line: 839, column: 16, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 838, column: 5)
!3859 = !DILocation(line: 839, column: 7, scope: !3858)
!3860 = !DILocation(line: 840, column: 19, scope: !3858)
!3861 = !DILocation(line: 840, column: 24, scope: !3858)
!3862 = !DILocation(line: 840, column: 7, scope: !3858)
!3863 = !DILocation(line: 841, column: 5, scope: !3858)
!3864 = !DILocation(line: 842, column: 1, scope: !3812)
!3865 = distinct !DISubprogram(name: "normalize_rli", scope: !3, file: !3, line: 848, type: !3813, scopeLine: 849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3866 = !DILocalVariable(name: "rli", arg: 1, scope: !3865, file: !3, line: 848, type: !3705)
!3867 = !DILocation(line: 848, column: 35, scope: !3865)
!3868 = !DILocation(line: 850, column: 22, scope: !3865)
!3869 = !DILocation(line: 850, column: 27, scope: !3865)
!3870 = !DILocation(line: 850, column: 36, scope: !3865)
!3871 = !DILocation(line: 850, column: 41, scope: !3865)
!3872 = !DILocation(line: 850, column: 49, scope: !3865)
!3873 = !DILocation(line: 850, column: 54, scope: !3865)
!3874 = !DILocation(line: 850, column: 3, scope: !3865)
!3875 = !DILocation(line: 851, column: 1, scope: !3865)
!3876 = distinct !DISubprogram(name: "rli_size_unit_so_far", scope: !3, file: !3, line: 856, type: !3877, scopeLine: 857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3877 = !DISubroutineType(types: !3878)
!3878 = !{!1494, !3705}
!3879 = !DILocalVariable(name: "rli", arg: 1, scope: !3876, file: !3, line: 856, type: !3705)
!3880 = !DILocation(line: 856, column: 42, scope: !3876)
!3881 = !DILocation(line: 858, column: 25, scope: !3876)
!3882 = !DILocation(line: 858, column: 30, scope: !3876)
!3883 = !DILocation(line: 858, column: 38, scope: !3876)
!3884 = !DILocation(line: 858, column: 43, scope: !3876)
!3885 = !DILocation(line: 858, column: 10, scope: !3876)
!3886 = !DILocation(line: 858, column: 3, scope: !3876)
!3887 = distinct !DISubprogram(name: "rli_size_so_far", scope: !3, file: !3, line: 864, type: !3877, scopeLine: 865, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3888 = !DILocalVariable(name: "rli", arg: 1, scope: !3887, file: !3, line: 864, type: !3705)
!3889 = !DILocation(line: 864, column: 37, scope: !3887)
!3890 = !DILocation(line: 866, column: 24, scope: !3887)
!3891 = !DILocation(line: 866, column: 29, scope: !3887)
!3892 = !DILocation(line: 866, column: 37, scope: !3887)
!3893 = !DILocation(line: 866, column: 42, scope: !3887)
!3894 = !DILocation(line: 866, column: 10, scope: !3887)
!3895 = !DILocation(line: 866, column: 3, scope: !3887)
!3896 = distinct !DISubprogram(name: "update_alignment_for_field", scope: !3, file: !3, line: 875, type: !3897, scopeLine: 877, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!3897 = !DISubroutineType(types: !3898)
!3898 = !{!7, !3705, !1494, !7}
!3899 = !DILocalVariable(name: "rli", arg: 1, scope: !3896, file: !3, line: 875, type: !3705)
!3900 = !DILocation(line: 875, column: 48, scope: !3896)
!3901 = !DILocalVariable(name: "field", arg: 2, scope: !3896, file: !3, line: 875, type: !1494)
!3902 = !DILocation(line: 875, column: 58, scope: !3896)
!3903 = !DILocalVariable(name: "known_align", arg: 3, scope: !3896, file: !3, line: 876, type: !7)
!3904 = !DILocation(line: 876, column: 21, scope: !3896)
!3905 = !DILocalVariable(name: "desired_align", scope: !3896, file: !3, line: 879, type: !7)
!3906 = !DILocation(line: 879, column: 16, scope: !3896)
!3907 = !DILocalVariable(name: "type", scope: !3896, file: !3, line: 881, type: !1494)
!3908 = !DILocation(line: 881, column: 8, scope: !3896)
!3909 = !DILocation(line: 881, column: 15, scope: !3896)
!3910 = !DILocalVariable(name: "user_align", scope: !3896, file: !3, line: 883, type: !1614)
!3911 = !DILocation(line: 883, column: 8, scope: !3896)
!3912 = !DILocalVariable(name: "is_bitfield", scope: !3896, file: !3, line: 884, type: !1614)
!3913 = !DILocation(line: 884, column: 8, scope: !3896)
!3914 = !DILocation(line: 887, column: 7, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3896, file: !3, line: 887, column: 7)
!3916 = !DILocation(line: 887, column: 24, scope: !3915)
!3917 = !DILocation(line: 887, column: 7, scope: !3896)
!3918 = !DILocation(line: 888, column: 5, scope: !3915)
!3919 = !DILocation(line: 891, column: 16, scope: !3896)
!3920 = !DILocation(line: 891, column: 23, scope: !3896)
!3921 = !DILocation(line: 891, column: 3, scope: !3896)
!3922 = !DILocation(line: 892, column: 19, scope: !3896)
!3923 = !DILocation(line: 892, column: 17, scope: !3896)
!3924 = !DILocation(line: 893, column: 16, scope: !3896)
!3925 = !DILocation(line: 893, column: 14, scope: !3896)
!3926 = !DILocation(line: 895, column: 18, scope: !3896)
!3927 = !DILocation(line: 895, column: 26, scope: !3896)
!3928 = !DILocation(line: 895, column: 23, scope: !3896)
!3929 = !DILocation(line: 896, column: 4, scope: !3896)
!3930 = !DILocation(line: 896, column: 7, scope: !3896)
!3931 = !DILocation(line: 897, column: 4, scope: !3896)
!3932 = !DILocation(line: 897, column: 24, scope: !3896)
!3933 = !DILocation(line: 897, column: 9, scope: !3896)
!3934 = !DILocation(line: 897, column: 7, scope: !3896)
!3935 = !DILocation(line: 0, scope: !3896)
!3936 = !DILocation(line: 895, column: 17, scope: !3896)
!3937 = !DILocation(line: 895, column: 15, scope: !3896)
!3938 = !DILocation(line: 902, column: 15, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3896, file: !3, line: 902, column: 7)
!3940 = !DILocation(line: 902, column: 37, scope: !3939)
!3941 = !DILocation(line: 902, column: 42, scope: !3939)
!3942 = !DILocation(line: 902, column: 7, scope: !3939)
!3943 = !DILocation(line: 902, column: 7, scope: !3896)
!3944 = !DILocation(line: 910, column: 13, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 910, column: 11)
!3946 = distinct !DILexicalBlock(scope: !3939, file: !3, line: 903, column: 5)
!3947 = !DILocation(line: 910, column: 25, scope: !3945)
!3948 = !DILocation(line: 910, column: 29, scope: !3945)
!3949 = !DILocation(line: 911, column: 4, scope: !3945)
!3950 = !DILocation(line: 911, column: 24, scope: !3945)
!3951 = !DILocation(line: 911, column: 9, scope: !3945)
!3952 = !DILocation(line: 910, column: 11, scope: !3946)
!3953 = !DILocation(line: 912, column: 11, scope: !3945)
!3954 = !DILocation(line: 911, column: 8, scope: !3945)
!3955 = !DILocation(line: 913, column: 11, scope: !3945)
!3956 = !DILocation(line: 913, column: 16, scope: !3945)
!3957 = !DILocation(line: 914, column: 4, scope: !3945)
!3958 = !DILocation(line: 914, column: 7, scope: !3945)
!3959 = !DILocation(line: 915, column: 4, scope: !3945)
!3960 = !DILocation(line: 915, column: 24, scope: !3945)
!3961 = !DILocation(line: 915, column: 9, scope: !3945)
!3962 = !DILocalVariable(name: "type_align", scope: !3963, file: !3, line: 917, type: !7)
!3963 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 916, column: 2)
!3964 = !DILocation(line: 917, column: 17, scope: !3963)
!3965 = !DILocation(line: 917, column: 30, scope: !3963)
!3966 = !DILocation(line: 918, column: 17, scope: !3963)
!3967 = !DILocation(line: 918, column: 15, scope: !3963)
!3968 = !DILocation(line: 919, column: 8, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 919, column: 8)
!3970 = !DILocation(line: 919, column: 32, scope: !3969)
!3971 = !DILocation(line: 919, column: 8, scope: !3963)
!3972 = !DILocation(line: 920, column: 19, scope: !3969)
!3973 = !DILocation(line: 920, column: 17, scope: !3969)
!3974 = !DILocation(line: 920, column: 6, scope: !3969)
!3975 = !DILocation(line: 921, column: 24, scope: !3963)
!3976 = !DILocation(line: 921, column: 4, scope: !3963)
!3977 = !DILocation(line: 921, column: 9, scope: !3963)
!3978 = !DILocation(line: 921, column: 22, scope: !3963)
!3979 = !DILocation(line: 922, column: 26, scope: !3963)
!3980 = !DILocation(line: 922, column: 4, scope: !3963)
!3981 = !DILocation(line: 922, column: 9, scope: !3963)
!3982 = !DILocation(line: 922, column: 24, scope: !3963)
!3983 = !DILocation(line: 923, column: 2, scope: !3963)
!3984 = !DILocation(line: 924, column: 5, scope: !3946)
!3985 = !DILocation(line: 926, column: 12, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3939, file: !3, line: 926, column: 12)
!3987 = !DILocation(line: 926, column: 12, scope: !3939)
!3988 = !DILocation(line: 931, column: 11, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 931, column: 11)
!3990 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 927, column: 5)
!3991 = !DILocation(line: 931, column: 29, scope: !3989)
!3992 = !DILocation(line: 932, column: 4, scope: !3989)
!3993 = !DILocation(line: 932, column: 15, scope: !3989)
!3994 = !DILocation(line: 932, column: 7, scope: !3989)
!3995 = !DILocation(line: 931, column: 11, scope: !3990)
!3996 = !DILocalVariable(name: "type_align", scope: !3997, file: !3, line: 934, type: !7)
!3997 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 933, column: 2)
!3998 = !DILocation(line: 934, column: 17, scope: !3997)
!3999 = !DILocation(line: 934, column: 30, scope: !3997)
!4000 = !DILocation(line: 937, column: 10, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 937, column: 8)
!4002 = !DILocation(line: 937, column: 8, scope: !3997)
!4003 = !DILocation(line: 938, column: 19, scope: !4001)
!4004 = !DILocation(line: 938, column: 17, scope: !4001)
!4005 = !DILocation(line: 938, column: 6, scope: !4001)
!4006 = !DILocation(line: 944, column: 23, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 944, column: 8)
!4008 = !DILocation(line: 944, column: 8, scope: !4007)
!4009 = !DILocation(line: 944, column: 8, scope: !3997)
!4010 = !DILocation(line: 946, column: 12, scope: !4011)
!4011 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 946, column: 12)
!4012 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 945, column: 6)
!4013 = !DILocation(line: 946, column: 12, scope: !4012)
!4014 = !DILocation(line: 947, column: 23, scope: !4011)
!4015 = !DILocation(line: 947, column: 21, scope: !4011)
!4016 = !DILocation(line: 947, column: 10, scope: !4011)
!4017 = !DILocation(line: 949, column: 6, scope: !4012)
!4018 = !DILocation(line: 950, column: 13, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 950, column: 13)
!4020 = !DILocation(line: 950, column: 37, scope: !4019)
!4021 = !DILocation(line: 950, column: 13, scope: !4007)
!4022 = !DILocation(line: 951, column: 19, scope: !4019)
!4023 = !DILocation(line: 951, column: 17, scope: !4019)
!4024 = !DILocation(line: 951, column: 6, scope: !4019)
!4025 = !DILocation(line: 952, column: 13, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4019, file: !3, line: 952, column: 13)
!4027 = !DILocation(line: 952, column: 13, scope: !4019)
!4028 = !DILocation(line: 953, column: 19, scope: !4026)
!4029 = !DILocation(line: 953, column: 17, scope: !4026)
!4030 = !DILocation(line: 953, column: 6, scope: !4026)
!4031 = !DILocation(line: 960, column: 24, scope: !3997)
!4032 = !DILocation(line: 960, column: 4, scope: !3997)
!4033 = !DILocation(line: 960, column: 9, scope: !3997)
!4034 = !DILocation(line: 960, column: 22, scope: !3997)
!4035 = !DILocation(line: 961, column: 24, scope: !3997)
!4036 = !DILocation(line: 961, column: 4, scope: !3997)
!4037 = !DILocation(line: 961, column: 9, scope: !3997)
!4038 = !DILocation(line: 961, column: 22, scope: !3997)
!4039 = !DILocation(line: 963, column: 8, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 963, column: 8)
!4041 = !DILocation(line: 963, column: 8, scope: !3997)
!4042 = !DILocation(line: 964, column: 28, scope: !4040)
!4043 = !DILocation(line: 964, column: 6, scope: !4040)
!4044 = !DILocation(line: 964, column: 11, scope: !4040)
!4045 = !DILocation(line: 964, column: 26, scope: !4040)
!4046 = !DILocation(line: 965, column: 18, scope: !3997)
!4047 = !DILocation(line: 965, column: 15, scope: !3997)
!4048 = !DILocation(line: 966, column: 2, scope: !3997)
!4049 = !DILocation(line: 967, column: 5, scope: !3990)
!4050 = !DILocation(line: 971, column: 27, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 970, column: 5)
!4052 = !DILocation(line: 971, column: 7, scope: !4051)
!4053 = !DILocation(line: 971, column: 12, scope: !4051)
!4054 = !DILocation(line: 971, column: 25, scope: !4051)
!4055 = !DILocation(line: 972, column: 29, scope: !4051)
!4056 = !DILocation(line: 972, column: 7, scope: !4051)
!4057 = !DILocation(line: 972, column: 12, scope: !4051)
!4058 = !DILocation(line: 972, column: 27, scope: !4051)
!4059 = !DILocation(line: 975, column: 31, scope: !3896)
!4060 = !DILocation(line: 975, column: 3, scope: !3896)
!4061 = !DILocation(line: 975, column: 28, scope: !3896)
!4062 = !DILocation(line: 977, column: 10, scope: !3896)
!4063 = !DILocation(line: 977, column: 3, scope: !3896)
!4064 = !DILocation(line: 978, column: 1, scope: !3896)
!4065 = distinct !DISubprogram(name: "place_field", scope: !3, file: !3, line: 1032, type: !4066, scopeLine: 1033, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!4066 = !DISubroutineType(types: !4067)
!4067 = !{null, !3705, !1494}
!4068 = !DILocalVariable(name: "rli", arg: 1, scope: !4065, file: !3, line: 1032, type: !3705)
!4069 = !DILocation(line: 1032, column: 33, scope: !4065)
!4070 = !DILocalVariable(name: "field", arg: 2, scope: !4065, file: !3, line: 1032, type: !1494)
!4071 = !DILocation(line: 1032, column: 43, scope: !4065)
!4072 = !DILocalVariable(name: "desired_align", scope: !4065, file: !3, line: 1035, type: !7)
!4073 = !DILocation(line: 1035, column: 16, scope: !4065)
!4074 = !DILocalVariable(name: "known_align", scope: !4065, file: !3, line: 1038, type: !7)
!4075 = !DILocation(line: 1038, column: 16, scope: !4065)
!4076 = !DILocalVariable(name: "actual_align", scope: !4065, file: !3, line: 1039, type: !7)
!4077 = !DILocation(line: 1039, column: 16, scope: !4065)
!4078 = !DILocalVariable(name: "type", scope: !4065, file: !3, line: 1041, type: !1494)
!4079 = !DILocation(line: 1041, column: 8, scope: !4065)
!4080 = !DILocation(line: 1041, column: 15, scope: !4065)
!4081 = !DILocation(line: 1043, column: 3, scope: !4065)
!4082 = !DILocation(line: 1049, column: 7, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1049, column: 7)
!4084 = !DILocation(line: 1049, column: 25, scope: !4083)
!4085 = !DILocation(line: 1049, column: 7, scope: !4065)
!4086 = !DILocation(line: 1051, column: 30, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 1050, column: 5)
!4088 = !DILocation(line: 1051, column: 7, scope: !4087)
!4089 = !DILocation(line: 1051, column: 12, scope: !4087)
!4090 = !DILocation(line: 1051, column: 28, scope: !4087)
!4091 = !DILocation(line: 1053, column: 7, scope: !4087)
!4092 = !DILocation(line: 1058, column: 12, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 1058, column: 12)
!4094 = !DILocation(line: 1058, column: 30, scope: !4093)
!4095 = !DILocation(line: 1058, column: 12, scope: !4083)
!4096 = !DILocation(line: 1059, column: 5, scope: !4093)
!4097 = !DILocation(line: 1063, column: 12, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4093, file: !3, line: 1063, column: 12)
!4099 = !DILocation(line: 1063, column: 31, scope: !4098)
!4100 = !DILocation(line: 1063, column: 12, scope: !4093)
!4101 = !DILocation(line: 1065, column: 26, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 1064, column: 5)
!4103 = !DILocation(line: 1065, column: 31, scope: !4102)
!4104 = !DILocation(line: 1065, column: 7, scope: !4102)
!4105 = !DILocation(line: 1066, column: 7, scope: !4102)
!4106 = !DILocation(line: 1069, column: 12, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 1069, column: 12)
!4108 = !DILocation(line: 1069, column: 29, scope: !4107)
!4109 = !DILocation(line: 1069, column: 12, scope: !4098)
!4110 = !DILocation(line: 1073, column: 35, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !4107, file: !3, line: 1070, column: 5)
!4112 = !DILocation(line: 1073, column: 40, scope: !4111)
!4113 = !DILocation(line: 1073, column: 7, scope: !4111)
!4114 = !DILocation(line: 1073, column: 33, scope: !4111)
!4115 = !DILocation(line: 1074, column: 39, scope: !4111)
!4116 = !DILocation(line: 1074, column: 44, scope: !4111)
!4117 = !DILocation(line: 1074, column: 7, scope: !4111)
!4118 = !DILocation(line: 1074, column: 37, scope: !4111)
!4119 = !DILocation(line: 1075, column: 7, scope: !4111)
!4120 = !DILocation(line: 1076, column: 7, scope: !4111)
!4121 = !DILocation(line: 1081, column: 24, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1081, column: 7)
!4123 = !DILocation(line: 1081, column: 29, scope: !4122)
!4124 = !DILocation(line: 1081, column: 9, scope: !4122)
!4125 = !DILocation(line: 1081, column: 7, scope: !4065)
!4126 = !DILocation(line: 1082, column: 34, scope: !4122)
!4127 = !DILocation(line: 1082, column: 39, scope: !4122)
!4128 = !DILocation(line: 1082, column: 20, scope: !4122)
!4129 = !DILocation(line: 1083, column: 24, scope: !4122)
!4130 = !DILocation(line: 1083, column: 29, scope: !4122)
!4131 = !DILocation(line: 1083, column: 10, scope: !4122)
!4132 = !DILocation(line: 1083, column: 8, scope: !4122)
!4133 = !DILocation(line: 1083, column: 6, scope: !4122)
!4134 = !DILocation(line: 1082, column: 19, scope: !4122)
!4135 = !DILocation(line: 1082, column: 17, scope: !4122)
!4136 = !DILocation(line: 1082, column: 5, scope: !4122)
!4137 = !DILocation(line: 1084, column: 27, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 1084, column: 12)
!4139 = !DILocation(line: 1084, column: 32, scope: !4138)
!4140 = !DILocation(line: 1084, column: 12, scope: !4138)
!4141 = !DILocation(line: 1084, column: 12, scope: !4122)
!4142 = !DILocation(line: 1085, column: 17, scope: !4138)
!4143 = !DILocation(line: 1085, column: 5, scope: !4138)
!4144 = !DILocation(line: 1086, column: 27, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 1086, column: 12)
!4146 = !DILocation(line: 1086, column: 32, scope: !4145)
!4147 = !DILocation(line: 1086, column: 12, scope: !4145)
!4148 = !DILocation(line: 1086, column: 12, scope: !4138)
!4149 = !DILocation(line: 1088, column: 23, scope: !4145)
!4150 = !DILocation(line: 1088, column: 28, scope: !4145)
!4151 = !DILocation(line: 1088, column: 9, scope: !4145)
!4152 = !DILocation(line: 1089, column: 27, scope: !4145)
!4153 = !DILocation(line: 1089, column: 32, scope: !4145)
!4154 = !DILocation(line: 1089, column: 13, scope: !4145)
!4155 = !DILocation(line: 1089, column: 11, scope: !4145)
!4156 = !DILocation(line: 1089, column: 9, scope: !4145)
!4157 = !DILocation(line: 1088, column: 6, scope: !4145)
!4158 = !DILocation(line: 1087, column: 19, scope: !4145)
!4159 = !DILocation(line: 1087, column: 17, scope: !4145)
!4160 = !DILocation(line: 1087, column: 5, scope: !4145)
!4161 = !DILocation(line: 1091, column: 19, scope: !4145)
!4162 = !DILocation(line: 1091, column: 24, scope: !4145)
!4163 = !DILocation(line: 1091, column: 17, scope: !4145)
!4164 = !DILocation(line: 1093, column: 47, scope: !4065)
!4165 = !DILocation(line: 1093, column: 52, scope: !4065)
!4166 = !DILocation(line: 1093, column: 59, scope: !4065)
!4167 = !DILocation(line: 1093, column: 19, scope: !4065)
!4168 = !DILocation(line: 1093, column: 17, scope: !4065)
!4169 = !DILocation(line: 1094, column: 7, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1094, column: 7)
!4171 = !DILocation(line: 1094, column: 19, scope: !4170)
!4172 = !DILocation(line: 1094, column: 7, scope: !4065)
!4173 = !DILocation(line: 1095, column: 19, scope: !4170)
!4174 = !DILocation(line: 1095, column: 17, scope: !4170)
!4175 = !DILocation(line: 1095, column: 5, scope: !4170)
!4176 = !DILocation(line: 1097, column: 7, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1097, column: 7)
!4178 = !DILocation(line: 1097, column: 19, scope: !4177)
!4179 = !DILocation(line: 1097, column: 22, scope: !4177)
!4180 = !DILocation(line: 1097, column: 7, scope: !4065)
!4181 = !DILocation(line: 1099, column: 11, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4183, file: !3, line: 1099, column: 11)
!4183 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 1098, column: 5)
!4184 = !DILocation(line: 1099, column: 26, scope: !4182)
!4185 = !DILocation(line: 1099, column: 23, scope: !4182)
!4186 = !DILocation(line: 1099, column: 11, scope: !4183)
!4187 = !DILocation(line: 1101, column: 8, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4189, file: !3, line: 1101, column: 8)
!4189 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 1100, column: 2)
!4190 = !DILocation(line: 1101, column: 28, scope: !4188)
!4191 = !DILocation(line: 1101, column: 26, scope: !4188)
!4192 = !DILocation(line: 1101, column: 8, scope: !4189)
!4193 = !DILocation(line: 1107, column: 18, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4195, file: !3, line: 1107, column: 17)
!4195 = distinct !DILexicalBlock(scope: !4196, file: !3, line: 1103, column: 12)
!4196 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 1102, column: 6)
!4197 = !DILocation(line: 1107, column: 17, scope: !4195)
!4198 = !DILocation(line: 1109, column: 29, scope: !4194)
!4199 = !DILocation(line: 1108, column: 3, scope: !4194)
!4200 = !DILocation(line: 1110, column: 6, scope: !4196)
!4201 = !DILocation(line: 1111, column: 2, scope: !4189)
!4202 = !DILocation(line: 1113, column: 2, scope: !4182)
!4203 = !DILocation(line: 1113, column: 7, scope: !4182)
!4204 = !DILocation(line: 1113, column: 30, scope: !4182)
!4205 = !DILocation(line: 1114, column: 5, scope: !4183)
!4206 = !DILocation(line: 1119, column: 7, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1119, column: 7)
!4208 = !DILocation(line: 1119, column: 21, scope: !4207)
!4209 = !DILocation(line: 1119, column: 19, scope: !4207)
!4210 = !DILocation(line: 1120, column: 7, scope: !4207)
!4211 = !DILocation(line: 1120, column: 19, scope: !4207)
!4212 = !DILocation(line: 1120, column: 41, scope: !4207)
!4213 = !DILocation(line: 1120, column: 46, scope: !4207)
!4214 = !DILocation(line: 1120, column: 11, scope: !4207)
!4215 = !DILocation(line: 1119, column: 7, scope: !4065)
!4216 = !DILocation(line: 1125, column: 11, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1125, column: 11)
!4218 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 1121, column: 5)
!4219 = !DILocation(line: 1125, column: 40, scope: !4217)
!4220 = !DILocation(line: 1125, column: 11, scope: !4218)
!4221 = !DILocation(line: 1126, column: 56, scope: !4217)
!4222 = !DILocation(line: 1126, column: 2, scope: !4217)
!4223 = !DILocation(line: 1130, column: 11, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1130, column: 11)
!4225 = !DILocation(line: 1130, column: 27, scope: !4224)
!4226 = !DILocation(line: 1130, column: 32, scope: !4224)
!4227 = !DILocation(line: 1130, column: 25, scope: !4224)
!4228 = !DILocation(line: 1130, column: 11, scope: !4218)
!4229 = !DILocation(line: 1131, column: 16, scope: !4224)
!4230 = !DILocation(line: 1131, column: 2, scope: !4224)
!4231 = !DILocation(line: 1131, column: 7, scope: !4224)
!4232 = !DILocation(line: 1131, column: 14, scope: !4224)
!4233 = !DILocation(line: 1136, column: 8, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4224, file: !3, line: 1133, column: 2)
!4235 = !DILocation(line: 1135, column: 4, scope: !4234)
!4236 = !DILocation(line: 1135, column: 9, scope: !4234)
!4237 = !DILocation(line: 1136, column: 6, scope: !4234)
!4238 = !DILocation(line: 1140, column: 18, scope: !4234)
!4239 = !DILocation(line: 1140, column: 4, scope: !4234)
!4240 = !DILocation(line: 1140, column: 9, scope: !4234)
!4241 = !DILocation(line: 1140, column: 16, scope: !4234)
!4242 = !DILocation(line: 1142, column: 18, scope: !4234)
!4243 = !DILocation(line: 1142, column: 4, scope: !4234)
!4244 = !DILocation(line: 1142, column: 9, scope: !4234)
!4245 = !DILocation(line: 1142, column: 16, scope: !4234)
!4246 = !DILocation(line: 1145, column: 13, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1145, column: 11)
!4248 = !DILocation(line: 1145, column: 11, scope: !4218)
!4249 = !DILocation(line: 1146, column: 22, scope: !4247)
!4250 = !DILocation(line: 1146, column: 2, scope: !4247)
!4251 = !DILocation(line: 1146, column: 7, scope: !4247)
!4252 = !DILocation(line: 1146, column: 20, scope: !4247)
!4253 = !DILocation(line: 1148, column: 5, scope: !4218)
!4254 = !DILocation(line: 1154, column: 20, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1153, column: 7)
!4256 = !DILocation(line: 1154, column: 42, scope: !4255)
!4257 = !DILocation(line: 1154, column: 47, scope: !4255)
!4258 = !DILocation(line: 1154, column: 12, scope: !4255)
!4259 = !DILocation(line: 1155, column: 7, scope: !4255)
!4260 = !DILocation(line: 1155, column: 10, scope: !4255)
!4261 = !DILocation(line: 1155, column: 28, scope: !4255)
!4262 = !DILocation(line: 1156, column: 7, scope: !4255)
!4263 = !DILocation(line: 1156, column: 10, scope: !4255)
!4264 = !DILocation(line: 1156, column: 18, scope: !4255)
!4265 = !DILocation(line: 1156, column: 15, scope: !4255)
!4266 = !DILocation(line: 1157, column: 7, scope: !4255)
!4267 = !DILocation(line: 1157, column: 10, scope: !4255)
!4268 = !DILocation(line: 1158, column: 7, scope: !4255)
!4269 = !DILocation(line: 1158, column: 13, scope: !4255)
!4270 = !DILocation(line: 1160, column: 4, scope: !4255)
!4271 = !DILocation(line: 1160, column: 7, scope: !4255)
!4272 = !DILocation(line: 1160, column: 25, scope: !4255)
!4273 = !DILocation(line: 1161, column: 7, scope: !4255)
!4274 = !DILocation(line: 1161, column: 10, scope: !4255)
!4275 = !DILocation(line: 1161, column: 34, scope: !4255)
!4276 = !DILocation(line: 1162, column: 7, scope: !4255)
!4277 = !DILocation(line: 1162, column: 27, scope: !4255)
!4278 = !DILocation(line: 1162, column: 12, scope: !4255)
!4279 = !DILocation(line: 1163, column: 7, scope: !4255)
!4280 = !DILocation(line: 1163, column: 25, scope: !4255)
!4281 = !DILocation(line: 1163, column: 10, scope: !4255)
!4282 = !DILocation(line: 1164, column: 7, scope: !4255)
!4283 = !DILocation(line: 1164, column: 25, scope: !4255)
!4284 = !DILocation(line: 1164, column: 30, scope: !4255)
!4285 = !DILocation(line: 1164, column: 10, scope: !4255)
!4286 = !DILocation(line: 1165, column: 7, scope: !4255)
!4287 = !DILocation(line: 1165, column: 25, scope: !4255)
!4288 = !DILocation(line: 1165, column: 10, scope: !4255)
!4289 = !DILocation(line: 1153, column: 7, scope: !4065)
!4290 = !DILocalVariable(name: "type_align", scope: !4291, file: !3, line: 1167, type: !7)
!4291 = distinct !DILexicalBlock(scope: !4255, file: !3, line: 1166, column: 5)
!4292 = !DILocation(line: 1167, column: 20, scope: !4291)
!4293 = !DILocation(line: 1167, column: 33, scope: !4291)
!4294 = !DILocalVariable(name: "dsize", scope: !4291, file: !3, line: 1168, type: !1494)
!4295 = !DILocation(line: 1168, column: 12, scope: !4291)
!4296 = !DILocation(line: 1168, column: 20, scope: !4291)
!4297 = !DILocalVariable(name: "field_size", scope: !4291, file: !3, line: 1169, type: !1550)
!4298 = !DILocation(line: 1169, column: 21, scope: !4291)
!4299 = !DILocation(line: 1169, column: 48, scope: !4291)
!4300 = !DILocation(line: 1169, column: 34, scope: !4291)
!4301 = !DILocalVariable(name: "offset", scope: !4291, file: !3, line: 1170, type: !1550)
!4302 = !DILocation(line: 1170, column: 21, scope: !4291)
!4303 = !DILocation(line: 1170, column: 44, scope: !4291)
!4304 = !DILocation(line: 1170, column: 49, scope: !4291)
!4305 = !DILocation(line: 1170, column: 30, scope: !4291)
!4306 = !DILocalVariable(name: "bit_offset", scope: !4291, file: !3, line: 1171, type: !1550)
!4307 = !DILocation(line: 1171, column: 21, scope: !4291)
!4308 = !DILocation(line: 1171, column: 48, scope: !4291)
!4309 = !DILocation(line: 1171, column: 53, scope: !4291)
!4310 = !DILocation(line: 1171, column: 34, scope: !4291)
!4311 = !DILocation(line: 1174, column: 13, scope: !4312)
!4312 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 1174, column: 11)
!4313 = !DILocation(line: 1174, column: 11, scope: !4291)
!4314 = !DILocation(line: 1175, column: 15, scope: !4312)
!4315 = !DILocation(line: 1175, column: 13, scope: !4312)
!4316 = !DILocation(line: 1175, column: 2, scope: !4312)
!4317 = !DILocation(line: 1180, column: 29, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 1180, column: 11)
!4319 = !DILocation(line: 1180, column: 37, scope: !4318)
!4320 = !DILocation(line: 1180, column: 49, scope: !4318)
!4321 = !DILocation(line: 1180, column: 61, scope: !4318)
!4322 = !DILocation(line: 1180, column: 73, scope: !4318)
!4323 = !DILocation(line: 1180, column: 11, scope: !4318)
!4324 = !DILocation(line: 1180, column: 11, scope: !4291)
!4325 = !DILocation(line: 1182, column: 8, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 1182, column: 8)
!4327 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 1181, column: 2)
!4328 = !DILocation(line: 1182, column: 8, scope: !4327)
!4329 = !DILocation(line: 1184, column: 12, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !4331, file: !3, line: 1184, column: 12)
!4331 = distinct !DILexicalBlock(scope: !4326, file: !3, line: 1183, column: 6)
!4332 = !DILocation(line: 1184, column: 40, scope: !4330)
!4333 = !DILocation(line: 1184, column: 12, scope: !4331)
!4334 = !DILocation(line: 1186, column: 6, scope: !4330)
!4335 = !DILocation(line: 1188, column: 6, scope: !4330)
!4336 = !DILocation(line: 1185, column: 3, scope: !4330)
!4337 = !DILocation(line: 1189, column: 6, scope: !4331)
!4338 = !DILocation(line: 1191, column: 34, scope: !4326)
!4339 = !DILocation(line: 1191, column: 50, scope: !4326)
!4340 = !DILocation(line: 1191, column: 55, scope: !4326)
!4341 = !DILocation(line: 1191, column: 63, scope: !4326)
!4342 = !DILocation(line: 1191, column: 20, scope: !4326)
!4343 = !DILocation(line: 1191, column: 6, scope: !4326)
!4344 = !DILocation(line: 1191, column: 11, scope: !4326)
!4345 = !DILocation(line: 1191, column: 18, scope: !4326)
!4346 = !DILocation(line: 1192, column: 2, scope: !4327)
!4347 = !DILocation(line: 1194, column: 13, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 1194, column: 11)
!4349 = !DILocation(line: 1194, column: 11, scope: !4291)
!4350 = !DILocation(line: 1195, column: 30, scope: !4348)
!4351 = !DILocation(line: 1195, column: 2, scope: !4348)
!4352 = !DILocation(line: 1195, column: 27, scope: !4348)
!4353 = !DILocation(line: 1196, column: 5, scope: !4291)
!4354 = !DILocation(line: 1252, column: 15, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1252, column: 7)
!4356 = !DILocation(line: 1252, column: 37, scope: !4355)
!4357 = !DILocation(line: 1252, column: 42, scope: !4355)
!4358 = !DILocation(line: 1252, column: 7, scope: !4355)
!4359 = !DILocation(line: 1252, column: 7, scope: !4065)
!4360 = !DILocalVariable(name: "prev_saved", scope: !4361, file: !3, line: 1254, type: !1494)
!4361 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 1253, column: 5)
!4362 = !DILocation(line: 1254, column: 12, scope: !4361)
!4363 = !DILocation(line: 1254, column: 25, scope: !4361)
!4364 = !DILocation(line: 1254, column: 30, scope: !4361)
!4365 = !DILocalVariable(name: "prev_type", scope: !4361, file: !3, line: 1255, type: !1494)
!4366 = !DILocation(line: 1255, column: 12, scope: !4361)
!4367 = !DILocation(line: 1255, column: 24, scope: !4361)
!4368 = !DILocation(line: 1255, column: 37, scope: !4361)
!4369 = !DILocation(line: 1258, column: 11, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1258, column: 11)
!4371 = !DILocation(line: 1258, column: 16, scope: !4370)
!4372 = !DILocation(line: 1258, column: 11, scope: !4361)
!4373 = !DILocation(line: 1266, column: 8, scope: !4374)
!4374 = distinct !DILexicalBlock(scope: !4375, file: !3, line: 1266, column: 8)
!4375 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 1259, column: 2)
!4376 = !DILocation(line: 1267, column: 8, scope: !4374)
!4377 = !DILocation(line: 1267, column: 27, scope: !4374)
!4378 = !DILocation(line: 1267, column: 12, scope: !4374)
!4379 = !DILocation(line: 1268, column: 8, scope: !4374)
!4380 = !DILocation(line: 1268, column: 27, scope: !4374)
!4381 = !DILocation(line: 1268, column: 12, scope: !4374)
!4382 = !DILocation(line: 1269, column: 8, scope: !4374)
!4383 = !DILocation(line: 1269, column: 26, scope: !4374)
!4384 = !DILocation(line: 1269, column: 11, scope: !4374)
!4385 = !DILocation(line: 1270, column: 8, scope: !4374)
!4386 = !DILocation(line: 1270, column: 26, scope: !4374)
!4387 = !DILocation(line: 1270, column: 11, scope: !4374)
!4388 = !DILocation(line: 1271, column: 8, scope: !4374)
!4389 = !DILocation(line: 1271, column: 29, scope: !4374)
!4390 = !DILocation(line: 1271, column: 47, scope: !4374)
!4391 = !DILocation(line: 1271, column: 11, scope: !4374)
!4392 = !DILocation(line: 1266, column: 8, scope: !4375)
!4393 = !DILocalVariable(name: "bitsize", scope: !4394, file: !3, line: 1276, type: !1550)
!4394 = distinct !DILexicalBlock(scope: !4374, file: !3, line: 1272, column: 6)
!4395 = !DILocation(line: 1276, column: 22, scope: !4394)
!4396 = !DILocation(line: 1276, column: 46, scope: !4394)
!4397 = !DILocation(line: 1276, column: 32, scope: !4394)
!4398 = !DILocation(line: 1278, column: 12, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 1278, column: 12)
!4400 = !DILocation(line: 1278, column: 17, scope: !4399)
!4401 = !DILocation(line: 1278, column: 42, scope: !4399)
!4402 = !DILocation(line: 1278, column: 40, scope: !4399)
!4403 = !DILocation(line: 1278, column: 12, scope: !4394)
!4404 = !DILocalVariable(name: "typesize", scope: !4405, file: !3, line: 1280, type: !1550)
!4405 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 1279, column: 3)
!4406 = !DILocation(line: 1280, column: 19, scope: !4405)
!4407 = !DILocation(line: 1280, column: 44, scope: !4405)
!4408 = !DILocation(line: 1280, column: 30, scope: !4405)
!4409 = !DILocation(line: 1284, column: 9, scope: !4405)
!4410 = !DILocation(line: 1283, column: 5, scope: !4405)
!4411 = !DILocation(line: 1283, column: 10, scope: !4405)
!4412 = !DILocation(line: 1284, column: 7, scope: !4405)
!4413 = !DILocation(line: 1286, column: 23, scope: !4405)
!4414 = !DILocation(line: 1286, column: 5, scope: !4405)
!4415 = !DILocation(line: 1286, column: 10, scope: !4405)
!4416 = !DILocation(line: 1286, column: 21, scope: !4405)
!4417 = !DILocation(line: 1287, column: 9, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4405, file: !3, line: 1287, column: 9)
!4419 = !DILocation(line: 1287, column: 20, scope: !4418)
!4420 = !DILocation(line: 1287, column: 18, scope: !4418)
!4421 = !DILocation(line: 1287, column: 9, scope: !4405)
!4422 = !DILocation(line: 1288, column: 7, scope: !4418)
!4423 = !DILocation(line: 1288, column: 12, scope: !4418)
!4424 = !DILocation(line: 1288, column: 35, scope: !4418)
!4425 = !DILocation(line: 1290, column: 37, scope: !4418)
!4426 = !DILocation(line: 1290, column: 48, scope: !4418)
!4427 = !DILocation(line: 1290, column: 46, scope: !4418)
!4428 = !DILocation(line: 1290, column: 7, scope: !4418)
!4429 = !DILocation(line: 1290, column: 12, scope: !4418)
!4430 = !DILocation(line: 1290, column: 35, scope: !4418)
!4431 = !DILocation(line: 1291, column: 3, scope: !4405)
!4432 = !DILocation(line: 1293, column: 34, scope: !4399)
!4433 = !DILocation(line: 1293, column: 3, scope: !4399)
!4434 = !DILocation(line: 1293, column: 8, scope: !4399)
!4435 = !DILocation(line: 1293, column: 31, scope: !4399)
!4436 = !DILocation(line: 1294, column: 6, scope: !4394)
!4437 = !DILocation(line: 1306, column: 28, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 1306, column: 12)
!4439 = distinct !DILexicalBlock(scope: !4374, file: !3, line: 1296, column: 6)
!4440 = !DILocation(line: 1306, column: 13, scope: !4438)
!4441 = !DILocation(line: 1306, column: 12, scope: !4439)
!4442 = !DILocation(line: 1309, column: 9, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 1307, column: 3)
!4444 = !DILocation(line: 1308, column: 5, scope: !4443)
!4445 = !DILocation(line: 1308, column: 10, scope: !4443)
!4446 = !DILocation(line: 1309, column: 7, scope: !4443)
!4447 = !DILocation(line: 1311, column: 3, scope: !4443)
!4448 = !DILocation(line: 1315, column: 14, scope: !4438)
!4449 = !DILocation(line: 1319, column: 13, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 1319, column: 12)
!4451 = !DILocation(line: 1320, column: 5, scope: !4450)
!4452 = !DILocation(line: 1320, column: 23, scope: !4450)
!4453 = !DILocation(line: 1320, column: 8, scope: !4450)
!4454 = !DILocation(line: 1319, column: 12, scope: !4439)
!4455 = !DILocation(line: 1321, column: 3, scope: !4450)
!4456 = !DILocation(line: 1321, column: 8, scope: !4450)
!4457 = !DILocation(line: 1321, column: 19, scope: !4450)
!4458 = !DILocation(line: 1324, column: 19, scope: !4375)
!4459 = !DILocation(line: 1324, column: 4, scope: !4375)
!4460 = !DILocation(line: 1325, column: 9, scope: !4375)
!4461 = !DILocation(line: 1339, column: 12, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 1339, column: 11)
!4463 = !DILocation(line: 1340, column: 4, scope: !4462)
!4464 = !DILocation(line: 1340, column: 8, scope: !4462)
!4465 = !DILocation(line: 1340, column: 19, scope: !4462)
!4466 = !DILocation(line: 1339, column: 11, scope: !4361)
!4467 = !DILocation(line: 1341, column: 29, scope: !4462)
!4468 = !DILocation(line: 1341, column: 47, scope: !4462)
!4469 = !DILocation(line: 1341, column: 11, scope: !4462)
!4470 = !DILocation(line: 1342, column: 26, scope: !4462)
!4471 = !DILocation(line: 1342, column: 11, scope: !4462)
!4472 = !DILocalVariable(name: "type_align", scope: !4473, file: !3, line: 1345, type: !7)
!4473 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 1343, column: 2)
!4474 = !DILocation(line: 1345, column: 17, scope: !4473)
!4475 = !DILocation(line: 1351, column: 8, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1351, column: 8)
!4477 = !DILocation(line: 1351, column: 26, scope: !4476)
!4478 = !DILocation(line: 1352, column: 8, scope: !4476)
!4479 = !DILocation(line: 1352, column: 26, scope: !4476)
!4480 = !DILocation(line: 1352, column: 11, scope: !4476)
!4481 = !DILocation(line: 1353, column: 8, scope: !4476)
!4482 = !DILocation(line: 1353, column: 26, scope: !4476)
!4483 = !DILocation(line: 1353, column: 11, scope: !4476)
!4484 = !DILocation(line: 1351, column: 8, scope: !4473)
!4485 = !DILocalVariable(name: "bitsize", scope: !4486, file: !3, line: 1355, type: !1548)
!4486 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 1354, column: 6)
!4487 = !DILocation(line: 1355, column: 31, scope: !4486)
!4488 = !DILocation(line: 1356, column: 19, scope: !4486)
!4489 = !DILocation(line: 1356, column: 5, scope: !4486)
!4490 = !DILocalVariable(name: "typesize", scope: !4486, file: !3, line: 1357, type: !1548)
!4491 = !DILocation(line: 1357, column: 31, scope: !4486)
!4492 = !DILocation(line: 1358, column: 19, scope: !4486)
!4493 = !DILocation(line: 1358, column: 5, scope: !4486)
!4494 = !DILocation(line: 1360, column: 12, scope: !4495)
!4495 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 1360, column: 12)
!4496 = !DILocation(line: 1360, column: 23, scope: !4495)
!4497 = !DILocation(line: 1360, column: 21, scope: !4495)
!4498 = !DILocation(line: 1360, column: 12, scope: !4486)
!4499 = !DILocation(line: 1361, column: 3, scope: !4495)
!4500 = !DILocation(line: 1361, column: 8, scope: !4495)
!4501 = !DILocation(line: 1361, column: 31, scope: !4495)
!4502 = !DILocation(line: 1363, column: 33, scope: !4495)
!4503 = !DILocation(line: 1363, column: 44, scope: !4495)
!4504 = !DILocation(line: 1363, column: 42, scope: !4495)
!4505 = !DILocation(line: 1363, column: 3, scope: !4495)
!4506 = !DILocation(line: 1363, column: 8, scope: !4495)
!4507 = !DILocation(line: 1363, column: 31, scope: !4495)
!4508 = !DILocation(line: 1364, column: 6, scope: !4486)
!4509 = !DILocation(line: 1367, column: 17, scope: !4473)
!4510 = !DILocation(line: 1367, column: 15, scope: !4473)
!4511 = !DILocation(line: 1369, column: 8, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1369, column: 8)
!4513 = !DILocation(line: 1369, column: 32, scope: !4512)
!4514 = !DILocation(line: 1369, column: 8, scope: !4473)
!4515 = !DILocation(line: 1370, column: 19, scope: !4512)
!4516 = !DILocation(line: 1370, column: 17, scope: !4512)
!4517 = !DILocation(line: 1370, column: 6, scope: !4512)
!4518 = !DILocation(line: 1372, column: 32, scope: !4473)
!4519 = !DILocation(line: 1372, column: 48, scope: !4473)
!4520 = !DILocation(line: 1372, column: 53, scope: !4473)
!4521 = !DILocation(line: 1372, column: 61, scope: !4473)
!4522 = !DILocation(line: 1372, column: 18, scope: !4473)
!4523 = !DILocation(line: 1372, column: 4, scope: !4473)
!4524 = !DILocation(line: 1372, column: 9, scope: !4473)
!4525 = !DILocation(line: 1372, column: 16, scope: !4473)
!4526 = !DILocation(line: 1376, column: 4, scope: !4473)
!4527 = !DILocation(line: 1376, column: 9, scope: !4473)
!4528 = !DILocation(line: 1376, column: 20, scope: !4473)
!4529 = !DILocation(line: 1377, column: 2, scope: !4473)
!4530 = !DILocation(line: 1378, column: 5, scope: !4361)
!4531 = !DILocation(line: 1381, column: 18, scope: !4065)
!4532 = !DILocation(line: 1381, column: 3, scope: !4065)
!4533 = !DILocation(line: 1382, column: 31, scope: !4065)
!4534 = !DILocation(line: 1382, column: 36, scope: !4065)
!4535 = !DILocation(line: 1382, column: 3, scope: !4065)
!4536 = !DILocation(line: 1382, column: 29, scope: !4065)
!4537 = !DILocation(line: 1383, column: 35, scope: !4065)
!4538 = !DILocation(line: 1383, column: 40, scope: !4065)
!4539 = !DILocation(line: 1383, column: 3, scope: !4065)
!4540 = !DILocation(line: 1383, column: 33, scope: !4065)
!4541 = !DILocation(line: 1384, column: 3, scope: !4065)
!4542 = !DILocation(line: 1389, column: 24, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1389, column: 7)
!4544 = !DILocation(line: 1389, column: 9, scope: !4543)
!4545 = !DILocation(line: 1389, column: 7, scope: !4065)
!4546 = !DILocation(line: 1390, column: 35, scope: !4543)
!4547 = !DILocation(line: 1390, column: 21, scope: !4543)
!4548 = !DILocation(line: 1391, column: 25, scope: !4543)
!4549 = !DILocation(line: 1391, column: 11, scope: !4543)
!4550 = !DILocation(line: 1391, column: 9, scope: !4543)
!4551 = !DILocation(line: 1391, column: 7, scope: !4543)
!4552 = !DILocation(line: 1390, column: 20, scope: !4543)
!4553 = !DILocation(line: 1390, column: 18, scope: !4543)
!4554 = !DILocation(line: 1390, column: 5, scope: !4543)
!4555 = !DILocation(line: 1392, column: 27, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4543, file: !3, line: 1392, column: 12)
!4557 = !DILocation(line: 1392, column: 12, scope: !4556)
!4558 = !DILocation(line: 1392, column: 12, scope: !4543)
!4559 = !DILocation(line: 1393, column: 20, scope: !4556)
!4560 = !DILocation(line: 1393, column: 18, scope: !4556)
!4561 = !DILocation(line: 1393, column: 5, scope: !4556)
!4562 = !DILocation(line: 1394, column: 27, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4556, file: !3, line: 1394, column: 12)
!4564 = !DILocation(line: 1394, column: 12, scope: !4563)
!4565 = !DILocation(line: 1394, column: 12, scope: !4556)
!4566 = !DILocation(line: 1396, column: 23, scope: !4563)
!4567 = !DILocation(line: 1396, column: 9, scope: !4563)
!4568 = !DILocation(line: 1397, column: 27, scope: !4563)
!4569 = !DILocation(line: 1397, column: 13, scope: !4563)
!4570 = !DILocation(line: 1397, column: 11, scope: !4563)
!4571 = !DILocation(line: 1397, column: 9, scope: !4563)
!4572 = !DILocation(line: 1396, column: 6, scope: !4563)
!4573 = !DILocation(line: 1395, column: 20, scope: !4563)
!4574 = !DILocation(line: 1395, column: 18, scope: !4563)
!4575 = !DILocation(line: 1395, column: 5, scope: !4563)
!4576 = !DILocation(line: 1399, column: 20, scope: !4563)
!4577 = !DILocation(line: 1399, column: 18, scope: !4563)
!4578 = !DILocation(line: 1404, column: 7, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1404, column: 7)
!4580 = !DILocation(line: 1404, column: 22, scope: !4579)
!4581 = !DILocation(line: 1404, column: 19, scope: !4579)
!4582 = !DILocation(line: 1404, column: 7, scope: !4065)
!4583 = !DILocation(line: 1405, column: 18, scope: !4579)
!4584 = !DILocation(line: 1405, column: 25, scope: !4579)
!4585 = !DILocation(line: 1405, column: 5, scope: !4579)
!4586 = !DILocation(line: 1407, column: 7, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1407, column: 7)
!4588 = !DILocation(line: 1407, column: 12, scope: !4587)
!4589 = !DILocation(line: 1407, column: 23, scope: !4587)
!4590 = !DILocation(line: 1407, column: 31, scope: !4587)
!4591 = !DILocation(line: 1407, column: 34, scope: !4587)
!4592 = !DILocation(line: 1407, column: 7, scope: !4065)
!4593 = !DILocation(line: 1408, column: 23, scope: !4587)
!4594 = !DILocation(line: 1408, column: 5, scope: !4587)
!4595 = !DILocation(line: 1408, column: 10, scope: !4587)
!4596 = !DILocation(line: 1408, column: 21, scope: !4587)
!4597 = !DILocation(line: 1417, column: 7, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 1417, column: 7)
!4599 = !DILocation(line: 1417, column: 25, scope: !4598)
!4600 = !DILocation(line: 1417, column: 7, scope: !4065)
!4601 = !DILocation(line: 1419, column: 12, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 1419, column: 12)
!4603 = !DILocation(line: 1419, column: 42, scope: !4602)
!4604 = !DILocation(line: 1420, column: 5, scope: !4602)
!4605 = !DILocation(line: 1420, column: 8, scope: !4602)
!4606 = !DILocation(line: 1419, column: 12, scope: !4598)
!4607 = !DILocation(line: 1423, column: 4, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 1421, column: 5)
!4609 = !DILocation(line: 1422, column: 7, scope: !4608)
!4610 = !DILocation(line: 1422, column: 12, scope: !4608)
!4611 = !DILocation(line: 1423, column: 2, scope: !4608)
!4612 = !DILocation(line: 1428, column: 4, scope: !4608)
!4613 = !DILocation(line: 1427, column: 7, scope: !4608)
!4614 = !DILocation(line: 1427, column: 12, scope: !4608)
!4615 = !DILocation(line: 1428, column: 2, scope: !4608)
!4616 = !DILocation(line: 1429, column: 21, scope: !4608)
!4617 = !DILocation(line: 1429, column: 7, scope: !4608)
!4618 = !DILocation(line: 1429, column: 12, scope: !4608)
!4619 = !DILocation(line: 1429, column: 19, scope: !4608)
!4620 = !DILocation(line: 1430, column: 27, scope: !4608)
!4621 = !DILocation(line: 1430, column: 7, scope: !4608)
!4622 = !DILocation(line: 1430, column: 12, scope: !4608)
!4623 = !DILocation(line: 1430, column: 25, scope: !4608)
!4624 = !DILocation(line: 1431, column: 5, scope: !4608)
!4625 = !DILocation(line: 1432, column: 20, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 1432, column: 12)
!4627 = !DILocation(line: 1432, column: 42, scope: !4626)
!4628 = !DILocation(line: 1432, column: 47, scope: !4626)
!4629 = !DILocation(line: 1432, column: 12, scope: !4626)
!4630 = !DILocation(line: 1432, column: 12, scope: !4602)
!4631 = !DILocation(line: 1434, column: 21, scope: !4632)
!4632 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 1433, column: 5)
!4633 = !DILocation(line: 1434, column: 7, scope: !4632)
!4634 = !DILocation(line: 1434, column: 12, scope: !4632)
!4635 = !DILocation(line: 1434, column: 19, scope: !4632)
!4636 = !DILocation(line: 1438, column: 12, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 1438, column: 11)
!4638 = !DILocation(line: 1438, column: 31, scope: !4637)
!4639 = !DILocation(line: 1439, column: 5, scope: !4637)
!4640 = !DILocation(line: 1439, column: 8, scope: !4637)
!4641 = !DILocation(line: 1439, column: 39, scope: !4637)
!4642 = !DILocation(line: 1440, column: 4, scope: !4637)
!4643 = !DILocation(line: 1440, column: 7, scope: !4637)
!4644 = !DILocation(line: 1441, column: 4, scope: !4637)
!4645 = !DILocation(line: 1441, column: 23, scope: !4637)
!4646 = !DILocation(line: 1441, column: 8, scope: !4637)
!4647 = !DILocation(line: 1438, column: 11, scope: !4632)
!4648 = !DILocation(line: 1442, column: 16, scope: !4637)
!4649 = !DILocation(line: 1442, column: 2, scope: !4637)
!4650 = !DILocation(line: 1442, column: 7, scope: !4637)
!4651 = !DILocation(line: 1442, column: 14, scope: !4637)
!4652 = !DILocation(line: 1445, column: 22, scope: !4632)
!4653 = !DILocation(line: 1445, column: 7, scope: !4632)
!4654 = !DILocation(line: 1446, column: 5, scope: !4632)
!4655 = !DILocation(line: 1449, column: 21, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 1448, column: 5)
!4657 = !DILocation(line: 1449, column: 7, scope: !4656)
!4658 = !DILocation(line: 1449, column: 12, scope: !4656)
!4659 = !DILocation(line: 1449, column: 19, scope: !4656)
!4660 = !DILocation(line: 1450, column: 22, scope: !4656)
!4661 = !DILocation(line: 1450, column: 7, scope: !4656)
!4662 = !DILocation(line: 1452, column: 1, scope: !4065)
!4663 = distinct !DISubprogram(name: "place_union_field", scope: !3, file: !3, line: 983, type: !4066, scopeLine: 984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!4664 = !DILocalVariable(name: "rli", arg: 1, scope: !4663, file: !3, line: 983, type: !3705)
!4665 = !DILocation(line: 983, column: 39, scope: !4663)
!4666 = !DILocalVariable(name: "field", arg: 2, scope: !4663, file: !3, line: 983, type: !1494)
!4667 = !DILocation(line: 983, column: 49, scope: !4663)
!4668 = !DILocation(line: 985, column: 31, scope: !4663)
!4669 = !DILocation(line: 985, column: 36, scope: !4663)
!4670 = !DILocation(line: 985, column: 3, scope: !4663)
!4671 = !DILocation(line: 987, column: 31, scope: !4663)
!4672 = !DILocation(line: 987, column: 3, scope: !4663)
!4673 = !DILocation(line: 987, column: 29, scope: !4663)
!4674 = !DILocation(line: 988, column: 35, scope: !4663)
!4675 = !DILocation(line: 988, column: 3, scope: !4663)
!4676 = !DILocation(line: 988, column: 33, scope: !4663)
!4677 = !DILocation(line: 989, column: 3, scope: !4663)
!4678 = !DILocation(line: 994, column: 7, scope: !4679)
!4679 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 994, column: 7)
!4680 = !DILocation(line: 994, column: 37, scope: !4679)
!4681 = !DILocation(line: 994, column: 7, scope: !4663)
!4682 = !DILocation(line: 995, column: 5, scope: !4679)
!4683 = !DILocation(line: 999, column: 7, scope: !4684)
!4684 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 999, column: 7)
!4685 = !DILocation(line: 999, column: 26, scope: !4684)
!4686 = !DILocation(line: 999, column: 7, scope: !4663)
!4687 = !DILocation(line: 1000, column: 19, scope: !4684)
!4688 = !DILocation(line: 1000, column: 5, scope: !4684)
!4689 = !DILocation(line: 1000, column: 10, scope: !4684)
!4690 = !DILocation(line: 1000, column: 17, scope: !4684)
!4691 = !DILocation(line: 1001, column: 12, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 1001, column: 12)
!4693 = !DILocation(line: 1001, column: 31, scope: !4692)
!4694 = !DILocation(line: 1001, column: 12, scope: !4684)
!4695 = !DILocation(line: 1002, column: 19, scope: !4692)
!4696 = !DILocation(line: 1002, column: 5, scope: !4692)
!4697 = !DILocation(line: 1002, column: 10, scope: !4692)
!4698 = !DILocation(line: 1002, column: 17, scope: !4692)
!4699 = !DILocation(line: 1005, column: 1, scope: !4663)
!4700 = distinct !DISubprogram(name: "excess_unit_span", scope: !3, file: !3, line: 1012, type: !4701, scopeLine: 1014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!4701 = !DISubroutineType(types: !4702)
!4702 = !{!1591, !1550, !1550, !1550, !1550, !1494}
!4703 = !DILocalVariable(name: "byte_offset", arg: 1, scope: !4700, file: !3, line: 1012, type: !1550)
!4704 = !DILocation(line: 1012, column: 33, scope: !4700)
!4705 = !DILocalVariable(name: "bit_offset", arg: 2, scope: !4700, file: !3, line: 1012, type: !1550)
!4706 = !DILocation(line: 1012, column: 60, scope: !4700)
!4707 = !DILocalVariable(name: "size", arg: 3, scope: !4700, file: !3, line: 1013, type: !1550)
!4708 = !DILocation(line: 1013, column: 19, scope: !4700)
!4709 = !DILocalVariable(name: "align", arg: 4, scope: !4700, file: !3, line: 1013, type: !1550)
!4710 = !DILocation(line: 1013, column: 39, scope: !4700)
!4711 = !DILocalVariable(name: "type", arg: 5, scope: !4700, file: !3, line: 1013, type: !1494)
!4712 = !DILocation(line: 1013, column: 51, scope: !4700)
!4713 = !DILocalVariable(name: "offset", scope: !4700, file: !3, line: 1017, type: !1548)
!4714 = !DILocation(line: 1017, column: 26, scope: !4700)
!4715 = !DILocation(line: 1017, column: 35, scope: !4700)
!4716 = !DILocation(line: 1017, column: 47, scope: !4700)
!4717 = !DILocation(line: 1017, column: 65, scope: !4700)
!4718 = !DILocation(line: 1017, column: 63, scope: !4700)
!4719 = !DILocation(line: 1019, column: 12, scope: !4700)
!4720 = !DILocation(line: 1019, column: 21, scope: !4700)
!4721 = !DILocation(line: 1019, column: 19, scope: !4700)
!4722 = !DILocation(line: 1019, column: 10, scope: !4700)
!4723 = !DILocation(line: 1020, column: 12, scope: !4700)
!4724 = !DILocation(line: 1020, column: 21, scope: !4700)
!4725 = !DILocation(line: 1020, column: 19, scope: !4700)
!4726 = !DILocation(line: 1020, column: 28, scope: !4700)
!4727 = !DILocation(line: 1020, column: 26, scope: !4700)
!4728 = !DILocation(line: 1020, column: 34, scope: !4700)
!4729 = !DILocation(line: 1020, column: 41, scope: !4700)
!4730 = !DILocation(line: 1020, column: 39, scope: !4700)
!4731 = !DILocation(line: 1021, column: 46, scope: !4700)
!4732 = !DILocation(line: 1021, column: 32, scope: !4700)
!4733 = !DILocation(line: 1022, column: 9, scope: !4700)
!4734 = !DILocation(line: 1022, column: 7, scope: !4700)
!4735 = !DILocation(line: 1021, column: 4, scope: !4700)
!4736 = !DILocation(line: 1020, column: 3, scope: !4700)
!4737 = distinct !DISubprogram(name: "compute_record_mode", scope: !3, file: !3, line: 1545, type: !2830, scopeLine: 1546, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!4738 = !DILocalVariable(name: "type", arg: 1, scope: !4737, file: !3, line: 1545, type: !1494)
!4739 = !DILocation(line: 1545, column: 27, scope: !4737)
!4740 = !DILocalVariable(name: "field", scope: !4737, file: !3, line: 1547, type: !1494)
!4741 = !DILocation(line: 1547, column: 8, scope: !4737)
!4742 = !DILocalVariable(name: "mode", scope: !4737, file: !3, line: 1548, type: !5)
!4743 = !DILocation(line: 1548, column: 21, scope: !4737)
!4744 = !DILocation(line: 1554, column: 3, scope: !4737)
!4745 = !DILocation(line: 1556, column: 24, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1556, column: 7)
!4747 = !DILocation(line: 1556, column: 9, scope: !4746)
!4748 = !DILocation(line: 1556, column: 7, scope: !4737)
!4749 = !DILocation(line: 1557, column: 5, scope: !4746)
!4750 = !DILocation(line: 1562, column: 16, scope: !4751)
!4751 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1562, column: 3)
!4752 = !DILocation(line: 1562, column: 14, scope: !4751)
!4753 = !DILocation(line: 1562, column: 8, scope: !4751)
!4754 = !DILocation(line: 1562, column: 36, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 1562, column: 3)
!4756 = !DILocation(line: 1562, column: 3, scope: !4751)
!4757 = !DILocation(line: 1564, column: 11, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 1564, column: 11)
!4759 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 1563, column: 5)
!4760 = !DILocation(line: 1564, column: 29, scope: !4758)
!4761 = !DILocation(line: 1564, column: 11, scope: !4759)
!4762 = !DILocation(line: 1565, column: 2, scope: !4758)
!4763 = !DILocation(line: 1567, column: 11, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 1567, column: 11)
!4765 = !DILocation(line: 1567, column: 41, scope: !4764)
!4766 = !DILocation(line: 1568, column: 4, scope: !4764)
!4767 = !DILocation(line: 1568, column: 8, scope: !4764)
!4768 = !DILocation(line: 1568, column: 38, scope: !4764)
!4769 = !DILocation(line: 1569, column: 8, scope: !4764)
!4770 = !DILocation(line: 1569, column: 13, scope: !4764)
!4771 = !DILocation(line: 1570, column: 8, scope: !4764)
!4772 = !DILocation(line: 1570, column: 13, scope: !4764)
!4773 = !DILocation(line: 1570, column: 43, scope: !4764)
!4774 = !DILocation(line: 1571, column: 6, scope: !4764)
!4775 = !DILocation(line: 1571, column: 24, scope: !4764)
!4776 = !DILocation(line: 1571, column: 9, scope: !4764)
!4777 = !DILocation(line: 1572, column: 4, scope: !4764)
!4778 = !DILocation(line: 1572, column: 38, scope: !4764)
!4779 = !DILocation(line: 1572, column: 24, scope: !4764)
!4780 = !DILocation(line: 1572, column: 9, scope: !4764)
!4781 = !DILocation(line: 1573, column: 4, scope: !4764)
!4782 = !DILocation(line: 1573, column: 7, scope: !4764)
!4783 = !DILocation(line: 1573, column: 25, scope: !4764)
!4784 = !DILocation(line: 1574, column: 4, scope: !4764)
!4785 = !DILocation(line: 1574, column: 24, scope: !4764)
!4786 = !DILocation(line: 1574, column: 9, scope: !4764)
!4787 = !DILocation(line: 1567, column: 11, scope: !4759)
!4788 = !DILocation(line: 1575, column: 2, scope: !4764)
!4789 = !DILocation(line: 1580, column: 29, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 1580, column: 11)
!4791 = !DILocation(line: 1580, column: 47, scope: !4790)
!4792 = !DILocation(line: 1580, column: 11, scope: !4790)
!4793 = !DILocation(line: 1580, column: 11, scope: !4759)
!4794 = !DILocation(line: 1581, column: 9, scope: !4790)
!4795 = !DILocation(line: 1581, column: 7, scope: !4790)
!4796 = !DILocation(line: 1581, column: 2, scope: !4790)
!4797 = !DILocation(line: 1590, column: 5, scope: !4759)
!4798 = !DILocation(line: 1562, column: 51, scope: !4755)
!4799 = !DILocation(line: 1562, column: 49, scope: !4755)
!4800 = !DILocation(line: 1562, column: 3, scope: !4755)
!4801 = distinct !{!4801, !4756, !4802}
!4802 = !DILocation(line: 1590, column: 5, scope: !4751)
!4803 = !DILocation(line: 1595, column: 7, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1595, column: 7)
!4805 = !DILocation(line: 1595, column: 24, scope: !4804)
!4806 = !DILocation(line: 1595, column: 39, scope: !4804)
!4807 = !DILocation(line: 1595, column: 42, scope: !4804)
!4808 = !DILocation(line: 1595, column: 47, scope: !4804)
!4809 = !DILocation(line: 1596, column: 7, scope: !4804)
!4810 = !DILocation(line: 1596, column: 25, scope: !4804)
!4811 = !DILocation(line: 1596, column: 10, scope: !4804)
!4812 = !DILocation(line: 1597, column: 7, scope: !4804)
!4813 = !DILocation(line: 1597, column: 10, scope: !4804)
!4814 = !DILocation(line: 1597, column: 37, scope: !4804)
!4815 = !DILocation(line: 1597, column: 34, scope: !4804)
!4816 = !DILocation(line: 1595, column: 7, scope: !4737)
!4817 = !DILocation(line: 1598, column: 5, scope: !4804)
!4818 = !DILocation(line: 1600, column: 5, scope: !4804)
!4819 = !DILocation(line: 1604, column: 7, scope: !4820)
!4820 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1604, column: 7)
!4821 = !DILocation(line: 1604, column: 24, scope: !4820)
!4822 = !DILocation(line: 1605, column: 7, scope: !4820)
!4823 = !DILocation(line: 1606, column: 7, scope: !4820)
!4824 = !DILocation(line: 1606, column: 13, scope: !4820)
!4825 = !DILocation(line: 1606, column: 34, scope: !4820)
!4826 = !DILocation(line: 1606, column: 31, scope: !4820)
!4827 = !DILocation(line: 1607, column: 6, scope: !4820)
!4828 = !DILocation(line: 1607, column: 9, scope: !4820)
!4829 = !DILocation(line: 1607, column: 30, scope: !4820)
!4830 = !DILocation(line: 1607, column: 27, scope: !4820)
!4831 = !DILocation(line: 1604, column: 7, scope: !4737)
!4832 = !DILocation(line: 1611, column: 7, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4820, file: !3, line: 1608, column: 5)
!4834 = !DILocation(line: 1611, column: 32, scope: !4833)
!4835 = !DILocation(line: 1612, column: 7, scope: !4833)
!4836 = !DILocation(line: 1613, column: 5, scope: !4833)
!4837 = !DILocation(line: 1614, column: 1, scope: !4737)
!4838 = distinct !DISubprogram(name: "finish_record_layout", scope: !3, file: !3, line: 1709, type: !4839, scopeLine: 1710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!4839 = !DISubroutineType(types: !4840)
!4840 = !{null, !3705, !1591}
!4841 = !DILocalVariable(name: "rli", arg: 1, scope: !4838, file: !3, line: 1709, type: !3705)
!4842 = !DILocation(line: 1709, column: 42, scope: !4838)
!4843 = !DILocalVariable(name: "free_p", arg: 2, scope: !4838, file: !3, line: 1709, type: !1591)
!4844 = !DILocation(line: 1709, column: 51, scope: !4838)
!4845 = !DILocalVariable(name: "variant", scope: !4838, file: !3, line: 1711, type: !1494)
!4846 = !DILocation(line: 1711, column: 8, scope: !4838)
!4847 = !DILocation(line: 1714, column: 25, scope: !4838)
!4848 = !DILocation(line: 1714, column: 3, scope: !4838)
!4849 = !DILocation(line: 1717, column: 24, scope: !4838)
!4850 = !DILocation(line: 1717, column: 29, scope: !4838)
!4851 = !DILocation(line: 1717, column: 3, scope: !4838)
!4852 = !DILocation(line: 1720, column: 23, scope: !4838)
!4853 = !DILocation(line: 1720, column: 28, scope: !4838)
!4854 = !DILocation(line: 1720, column: 3, scope: !4838)
!4855 = !DILocation(line: 1724, column: 18, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 1724, column: 3)
!4857 = !DILocation(line: 1724, column: 16, scope: !4856)
!4858 = !DILocation(line: 1724, column: 8, scope: !4856)
!4859 = !DILocation(line: 1724, column: 46, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1724, column: 3)
!4861 = !DILocation(line: 1724, column: 3, scope: !4856)
!4862 = !DILocation(line: 1726, column: 29, scope: !4860)
!4863 = !DILocation(line: 1726, column: 5, scope: !4860)
!4864 = !DILocation(line: 1726, column: 27, scope: !4860)
!4865 = !DILocation(line: 1725, column: 18, scope: !4860)
!4866 = !DILocation(line: 1725, column: 16, scope: !4860)
!4867 = !DILocation(line: 1724, column: 3, scope: !4860)
!4868 = distinct !{!4868, !4861, !4869}
!4869 = !DILocation(line: 1726, column: 29, scope: !4856)
!4870 = !DILocation(line: 1730, column: 3, scope: !4838)
!4871 = !DILocation(line: 1730, column: 10, scope: !4838)
!4872 = !DILocation(line: 1730, column: 15, scope: !4838)
!4873 = !DILocation(line: 1732, column: 20, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 1731, column: 5)
!4875 = !DILocation(line: 1732, column: 7, scope: !4874)
!4876 = !DILocation(line: 1733, column: 30, scope: !4874)
!4877 = !DILocation(line: 1733, column: 7, scope: !4874)
!4878 = !DILocation(line: 1733, column: 12, scope: !4874)
!4879 = !DILocation(line: 1733, column: 28, scope: !4874)
!4880 = distinct !{!4880, !4870, !4881}
!4881 = !DILocation(line: 1734, column: 5, scope: !4838)
!4882 = !DILocation(line: 1737, column: 7, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 1737, column: 7)
!4884 = !DILocation(line: 1737, column: 7, scope: !4838)
!4885 = !DILocation(line: 1738, column: 11, scope: !4883)
!4886 = !DILocation(line: 1738, column: 5, scope: !4883)
!4887 = !DILocation(line: 1739, column: 1, scope: !4838)
!4888 = distinct !DISubprogram(name: "finalize_record_size", scope: !3, file: !3, line: 1459, type: !3813, scopeLine: 1460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!4889 = !DILocalVariable(name: "rli", arg: 1, scope: !4888, file: !3, line: 1459, type: !3705)
!4890 = !DILocation(line: 1459, column: 42, scope: !4888)
!4891 = !DILocalVariable(name: "unpadded_size", scope: !4888, file: !3, line: 1461, type: !1494)
!4892 = !DILocation(line: 1461, column: 8, scope: !4888)
!4893 = !DILocalVariable(name: "unpadded_size_unit", scope: !4888, file: !3, line: 1461, type: !1494)
!4894 = !DILocation(line: 1461, column: 23, scope: !4888)
!4895 = !DILocation(line: 1465, column: 3, scope: !4888)
!4896 = !DILocation(line: 1465, column: 8, scope: !4888)
!4897 = !DILocation(line: 1465, column: 21, scope: !4888)
!4898 = !DILocation(line: 1466, column: 18, scope: !4888)
!4899 = !DILocation(line: 1466, column: 3, scope: !4888)
!4900 = !DILocation(line: 1473, column: 25, scope: !4888)
!4901 = !DILocation(line: 1473, column: 3, scope: !4888)
!4902 = !DILocation(line: 1473, column: 23, scope: !4888)
!4903 = !DILocation(line: 1479, column: 36, scope: !4888)
!4904 = !DILocation(line: 1479, column: 19, scope: !4888)
!4905 = !DILocation(line: 1479, column: 17, scope: !4888)
!4906 = !DILocation(line: 1480, column: 46, scope: !4888)
!4907 = !DILocation(line: 1480, column: 24, scope: !4888)
!4908 = !DILocation(line: 1480, column: 22, scope: !4888)
!4909 = !DILocation(line: 1481, column: 24, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1481, column: 7)
!4911 = !DILocation(line: 1481, column: 29, scope: !4910)
!4912 = !DILocation(line: 1481, column: 9, scope: !4910)
!4913 = !DILocation(line: 1481, column: 7, scope: !4888)
!4914 = !DILocation(line: 1483, column: 9, scope: !4910)
!4915 = !DILocation(line: 1483, column: 7, scope: !4910)
!4916 = !DILocation(line: 1482, column: 5, scope: !4910)
!4917 = !DILocation(line: 1486, column: 38, scope: !4888)
!4918 = !DILocation(line: 1486, column: 54, scope: !4888)
!4919 = !DILocation(line: 1487, column: 6, scope: !4888)
!4920 = !DILocation(line: 1486, column: 24, scope: !4888)
!4921 = !DILocation(line: 1486, column: 3, scope: !4888)
!4922 = !DILocation(line: 1486, column: 22, scope: !4888)
!4923 = !DILocation(line: 1489, column: 21, scope: !4888)
!4924 = !DILocation(line: 1489, column: 37, scope: !4888)
!4925 = !DILocation(line: 1489, column: 57, scope: !4888)
!4926 = !DILocation(line: 1489, column: 7, scope: !4888)
!4927 = !DILocation(line: 1488, column: 3, scope: !4888)
!4928 = !DILocation(line: 1489, column: 5, scope: !4888)
!4929 = !DILocation(line: 1491, column: 7, scope: !4930)
!4930 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1491, column: 7)
!4931 = !DILocation(line: 1492, column: 7, scope: !4930)
!4932 = !DILocation(line: 1492, column: 28, scope: !4930)
!4933 = !DILocation(line: 1492, column: 43, scope: !4930)
!4934 = !DILocation(line: 1492, column: 10, scope: !4930)
!4935 = !DILocation(line: 1492, column: 63, scope: !4930)
!4936 = !DILocation(line: 1493, column: 7, scope: !4930)
!4937 = !DILocation(line: 1493, column: 10, scope: !4930)
!4938 = !DILocation(line: 1493, column: 25, scope: !4930)
!4939 = !DILocation(line: 1491, column: 7, scope: !4888)
!4940 = !DILocation(line: 1494, column: 5, scope: !4930)
!4941 = !DILocation(line: 1496, column: 7, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1496, column: 7)
!4943 = !DILocation(line: 1496, column: 19, scope: !4942)
!4944 = !DILocation(line: 1496, column: 22, scope: !4942)
!4945 = !DILocation(line: 1496, column: 41, scope: !4942)
!4946 = !DILocation(line: 1497, column: 7, scope: !4942)
!4947 = !DILocation(line: 1497, column: 10, scope: !4942)
!4948 = !DILocation(line: 1497, column: 31, scope: !4942)
!4949 = !DILocation(line: 1497, column: 36, scope: !4942)
!4950 = !DILocation(line: 1497, column: 41, scope: !4942)
!4951 = !DILocation(line: 1498, column: 7, scope: !4942)
!4952 = !DILocation(line: 1498, column: 10, scope: !4942)
!4953 = !DILocation(line: 1496, column: 7, scope: !4888)
!4954 = !DILocalVariable(name: "unpacked_size", scope: !4955, file: !3, line: 1500, type: !1494)
!4955 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 1499, column: 5)
!4956 = !DILocation(line: 1500, column: 12, scope: !4955)
!4957 = !DILocation(line: 1506, column: 29, scope: !4955)
!4958 = !DILocation(line: 1506, column: 7, scope: !4955)
!4959 = !DILocation(line: 1506, column: 12, scope: !4955)
!4960 = !DILocation(line: 1506, column: 27, scope: !4955)
!4961 = !DILocation(line: 1509, column: 37, scope: !4955)
!4962 = !DILocation(line: 1509, column: 53, scope: !4955)
!4963 = !DILocation(line: 1509, column: 73, scope: !4955)
!4964 = !DILocation(line: 1509, column: 78, scope: !4955)
!4965 = !DILocation(line: 1509, column: 23, scope: !4955)
!4966 = !DILocation(line: 1509, column: 21, scope: !4955)
!4967 = !DILocation(line: 1510, column: 29, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4955, file: !3, line: 1510, column: 11)
!4969 = !DILocation(line: 1510, column: 44, scope: !4968)
!4970 = !DILocation(line: 1510, column: 11, scope: !4968)
!4971 = !DILocation(line: 1510, column: 11, scope: !4955)
!4972 = !DILocation(line: 1512, column: 4, scope: !4973)
!4973 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 1511, column: 2)
!4974 = !DILocation(line: 1512, column: 25, scope: !4973)
!4975 = !DILocation(line: 1514, column: 8, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4973, file: !3, line: 1514, column: 8)
!4977 = !DILocation(line: 1514, column: 8, scope: !4973)
!4978 = !DILocalVariable(name: "name", scope: !4979, file: !3, line: 1516, type: !1494)
!4979 = distinct !DILexicalBlock(scope: !4976, file: !3, line: 1515, column: 6)
!4980 = !DILocation(line: 1516, column: 13, scope: !4979)
!4981 = !DILocation(line: 1518, column: 12, scope: !4982)
!4982 = distinct !DILexicalBlock(scope: !4979, file: !3, line: 1518, column: 12)
!4983 = !DILocation(line: 1518, column: 43, scope: !4982)
!4984 = !DILocation(line: 1518, column: 12, scope: !4979)
!4985 = !DILocation(line: 1519, column: 10, scope: !4982)
!4986 = !DILocation(line: 1519, column: 8, scope: !4982)
!4987 = !DILocation(line: 1519, column: 3, scope: !4982)
!4988 = !DILocation(line: 1521, column: 10, scope: !4982)
!4989 = !DILocation(line: 1521, column: 8, scope: !4982)
!4990 = !DILocation(line: 1528, column: 48, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4979, file: !3, line: 1523, column: 12)
!4992 = !DILocation(line: 1527, column: 3, scope: !4991)
!4993 = !DILocation(line: 1529, column: 6, scope: !4979)
!4994 = !DILocation(line: 1536, column: 3, scope: !4995)
!4995 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 1532, column: 12)
!4996 = distinct !DILexicalBlock(scope: !4976, file: !3, line: 1531, column: 6)
!4997 = !DILocation(line: 1538, column: 2, scope: !4973)
!4998 = !DILocation(line: 1539, column: 5, scope: !4955)
!4999 = !DILocation(line: 1540, column: 1, scope: !4888)
!5000 = distinct !DISubprogram(name: "finalize_type_size", scope: !3, file: !3, line: 1620, type: !2830, scopeLine: 1621, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5001 = !DILocalVariable(name: "type", arg: 1, scope: !5000, file: !3, line: 1620, type: !1494)
!5002 = !DILocation(line: 1620, column: 26, scope: !5000)
!5003 = !DILocation(line: 1627, column: 7, scope: !5004)
!5004 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1627, column: 7)
!5005 = !DILocation(line: 1627, column: 24, scope: !5004)
!5006 = !DILocation(line: 1627, column: 35, scope: !5004)
!5007 = !DILocation(line: 1627, column: 38, scope: !5004)
!5008 = !DILocation(line: 1627, column: 55, scope: !5004)
!5009 = !DILocation(line: 1628, column: 7, scope: !5004)
!5010 = !DILocation(line: 1629, column: 8, scope: !5004)
!5011 = !DILocation(line: 1629, column: 25, scope: !5004)
!5012 = !DILocation(line: 1629, column: 40, scope: !5004)
!5013 = !DILocation(line: 1629, column: 43, scope: !5004)
!5014 = !DILocation(line: 1629, column: 60, scope: !5004)
!5015 = !DILocation(line: 1630, column: 8, scope: !5004)
!5016 = !DILocation(line: 1630, column: 11, scope: !5004)
!5017 = !DILocation(line: 1630, column: 28, scope: !5004)
!5018 = !DILocation(line: 1631, column: 8, scope: !5004)
!5019 = !DILocation(line: 1631, column: 11, scope: !5004)
!5020 = !DILocation(line: 1631, column: 28, scope: !5004)
!5021 = !DILocation(line: 1627, column: 7, scope: !5000)
!5022 = !DILocalVariable(name: "mode_align", scope: !5023, file: !3, line: 1633, type: !7)
!5023 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 1632, column: 5)
!5024 = !DILocation(line: 1633, column: 16, scope: !5023)
!5025 = !DILocation(line: 1633, column: 29, scope: !5023)
!5026 = !DILocation(line: 1637, column: 11, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 1637, column: 11)
!5028 = !DILocation(line: 1637, column: 25, scope: !5027)
!5029 = !DILocation(line: 1637, column: 22, scope: !5027)
!5030 = !DILocation(line: 1637, column: 11, scope: !5023)
!5031 = !DILocation(line: 1639, column: 24, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5027, file: !3, line: 1638, column: 2)
!5033 = !DILocation(line: 1639, column: 4, scope: !5032)
!5034 = !DILocation(line: 1639, column: 22, scope: !5032)
!5035 = !DILocation(line: 1640, column: 4, scope: !5032)
!5036 = !DILocation(line: 1640, column: 27, scope: !5032)
!5037 = !DILocation(line: 1641, column: 2, scope: !5032)
!5038 = !DILocation(line: 1642, column: 5, scope: !5023)
!5039 = !DILocation(line: 1652, column: 7, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1652, column: 7)
!5041 = !DILocation(line: 1652, column: 29, scope: !5040)
!5042 = !DILocation(line: 1652, column: 34, scope: !5040)
!5043 = !DILocation(line: 1652, column: 37, scope: !5040)
!5044 = !DILocation(line: 1652, column: 54, scope: !5040)
!5045 = !DILocation(line: 1652, column: 7, scope: !5000)
!5046 = !DILocation(line: 1657, column: 9, scope: !5040)
!5047 = !DILocation(line: 1656, column: 5, scope: !5040)
!5048 = !DILocation(line: 1657, column: 7, scope: !5040)
!5049 = !DILocation(line: 1661, column: 7, scope: !5050)
!5050 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1661, column: 7)
!5051 = !DILocation(line: 1661, column: 24, scope: !5050)
!5052 = !DILocation(line: 1661, column: 7, scope: !5000)
!5053 = !DILocation(line: 1663, column: 40, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !5050, file: !3, line: 1662, column: 5)
!5055 = !DILocation(line: 1664, column: 8, scope: !5054)
!5056 = !DILocation(line: 1664, column: 26, scope: !5054)
!5057 = !DILocation(line: 1663, column: 26, scope: !5054)
!5058 = !DILocation(line: 1663, column: 7, scope: !5054)
!5059 = !DILocation(line: 1663, column: 24, scope: !5054)
!5060 = !DILocation(line: 1665, column: 45, scope: !5054)
!5061 = !DILocation(line: 1665, column: 61, scope: !5054)
!5062 = !DILocation(line: 1666, column: 6, scope: !5054)
!5063 = !DILocation(line: 1665, column: 31, scope: !5054)
!5064 = !DILocation(line: 1665, column: 7, scope: !5054)
!5065 = !DILocation(line: 1665, column: 29, scope: !5054)
!5066 = !DILocation(line: 1667, column: 5, scope: !5054)
!5067 = !DILocation(line: 1670, column: 7, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1670, column: 7)
!5069 = !DILocation(line: 1670, column: 24, scope: !5068)
!5070 = !DILocation(line: 1670, column: 29, scope: !5068)
!5071 = !DILocation(line: 1670, column: 32, scope: !5068)
!5072 = !DILocation(line: 1670, column: 61, scope: !5068)
!5073 = !DILocation(line: 1670, column: 7, scope: !5000)
!5074 = !DILocation(line: 1671, column: 39, scope: !5068)
!5075 = !DILocation(line: 1671, column: 24, scope: !5068)
!5076 = !DILocation(line: 1671, column: 5, scope: !5068)
!5077 = !DILocation(line: 1671, column: 22, scope: !5068)
!5078 = !DILocation(line: 1672, column: 7, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1672, column: 7)
!5080 = !DILocation(line: 1672, column: 29, scope: !5079)
!5081 = !DILocation(line: 1673, column: 7, scope: !5079)
!5082 = !DILocation(line: 1673, column: 10, scope: !5079)
!5083 = !DILocation(line: 1673, column: 44, scope: !5079)
!5084 = !DILocation(line: 1672, column: 7, scope: !5000)
!5085 = !DILocation(line: 1674, column: 44, scope: !5079)
!5086 = !DILocation(line: 1674, column: 29, scope: !5079)
!5087 = !DILocation(line: 1674, column: 5, scope: !5079)
!5088 = !DILocation(line: 1674, column: 27, scope: !5079)
!5089 = !DILocation(line: 1677, column: 7, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1677, column: 7)
!5091 = !DILocation(line: 1678, column: 7, scope: !5090)
!5092 = !DILocation(line: 1678, column: 10, scope: !5090)
!5093 = !DILocation(line: 1678, column: 18, scope: !5090)
!5094 = !DILocation(line: 1678, column: 15, scope: !5090)
!5095 = !DILocation(line: 1677, column: 7, scope: !5000)
!5096 = !DILocalVariable(name: "variant", scope: !5097, file: !3, line: 1680, type: !1494)
!5097 = distinct !DILexicalBlock(scope: !5090, file: !3, line: 1679, column: 5)
!5098 = !DILocation(line: 1680, column: 12, scope: !5097)
!5099 = !DILocalVariable(name: "size", scope: !5097, file: !3, line: 1682, type: !1494)
!5100 = !DILocation(line: 1682, column: 12, scope: !5097)
!5101 = !DILocation(line: 1682, column: 19, scope: !5097)
!5102 = !DILocalVariable(name: "size_unit", scope: !5097, file: !3, line: 1683, type: !1494)
!5103 = !DILocation(line: 1683, column: 12, scope: !5097)
!5104 = !DILocation(line: 1683, column: 24, scope: !5097)
!5105 = !DILocalVariable(name: "align", scope: !5097, file: !3, line: 1684, type: !7)
!5106 = !DILocation(line: 1684, column: 20, scope: !5097)
!5107 = !DILocation(line: 1684, column: 28, scope: !5097)
!5108 = !DILocalVariable(name: "user_align", scope: !5097, file: !3, line: 1685, type: !7)
!5109 = !DILocation(line: 1685, column: 20, scope: !5097)
!5110 = !DILocation(line: 1685, column: 33, scope: !5097)
!5111 = !DILocalVariable(name: "mode", scope: !5097, file: !3, line: 1686, type: !5)
!5112 = !DILocation(line: 1686, column: 25, scope: !5097)
!5113 = !DILocation(line: 1686, column: 32, scope: !5097)
!5114 = !DILocation(line: 1689, column: 22, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 1689, column: 7)
!5116 = !DILocation(line: 1689, column: 20, scope: !5115)
!5117 = !DILocation(line: 1689, column: 12, scope: !5115)
!5118 = !DILocation(line: 1690, column: 5, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 1689, column: 7)
!5120 = !DILocation(line: 1690, column: 13, scope: !5119)
!5121 = !DILocation(line: 1689, column: 7, scope: !5115)
!5122 = !DILocation(line: 1693, column: 26, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5119, file: !3, line: 1692, column: 2)
!5124 = !DILocation(line: 1693, column: 4, scope: !5123)
!5125 = !DILocation(line: 1693, column: 24, scope: !5123)
!5126 = !DILocation(line: 1694, column: 31, scope: !5123)
!5127 = !DILocation(line: 1694, column: 4, scope: !5123)
!5128 = !DILocation(line: 1694, column: 29, scope: !5123)
!5129 = !DILocation(line: 1695, column: 27, scope: !5123)
!5130 = !DILocation(line: 1695, column: 4, scope: !5123)
!5131 = !DILocation(line: 1695, column: 25, scope: !5123)
!5132 = !DILocation(line: 1696, column: 32, scope: !5123)
!5133 = !DILocation(line: 1696, column: 4, scope: !5123)
!5134 = !DILocation(line: 1696, column: 30, scope: !5123)
!5135 = !DILocation(line: 1697, column: 4, scope: !5123)
!5136 = !DILocation(line: 1698, column: 2, scope: !5123)
!5137 = !DILocation(line: 1691, column: 15, scope: !5119)
!5138 = !DILocation(line: 1691, column: 13, scope: !5119)
!5139 = !DILocation(line: 1689, column: 7, scope: !5119)
!5140 = distinct !{!5140, !5121, !5141}
!5141 = !DILocation(line: 1698, column: 2, scope: !5115)
!5142 = !DILocation(line: 1699, column: 5, scope: !5097)
!5143 = !DILocation(line: 1700, column: 1, scope: !5000)
!5144 = distinct !DISubprogram(name: "finish_builtin_struct", scope: !3, file: !3, line: 1749, type: !5145, scopeLine: 1751, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5145 = !DISubroutineType(types: !5146)
!5146 = !{null, !1494, !1698, !1494, !1494}
!5147 = !DILocalVariable(name: "type", arg: 1, scope: !5144, file: !3, line: 1749, type: !1494)
!5148 = !DILocation(line: 1749, column: 29, scope: !5144)
!5149 = !DILocalVariable(name: "name", arg: 2, scope: !5144, file: !3, line: 1749, type: !1698)
!5150 = !DILocation(line: 1749, column: 47, scope: !5144)
!5151 = !DILocalVariable(name: "fields", arg: 3, scope: !5144, file: !3, line: 1749, type: !1494)
!5152 = !DILocation(line: 1749, column: 58, scope: !5144)
!5153 = !DILocalVariable(name: "align_type", arg: 4, scope: !5144, file: !3, line: 1750, type: !1494)
!5154 = !DILocation(line: 1750, column: 15, scope: !5144)
!5155 = !DILocalVariable(name: "tail", scope: !5144, file: !3, line: 1752, type: !1494)
!5156 = !DILocation(line: 1752, column: 8, scope: !5144)
!5157 = !DILocalVariable(name: "next", scope: !5144, file: !3, line: 1752, type: !1494)
!5158 = !DILocation(line: 1752, column: 14, scope: !5144)
!5159 = !DILocation(line: 1754, column: 13, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 1754, column: 3)
!5161 = !DILocation(line: 1754, column: 8, scope: !5160)
!5162 = !DILocation(line: 1754, column: 26, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 1754, column: 3)
!5164 = !DILocation(line: 1754, column: 3, scope: !5160)
!5165 = !DILocation(line: 1756, column: 37, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 1755, column: 5)
!5167 = !DILocation(line: 1756, column: 7, scope: !5166)
!5168 = !DILocation(line: 1756, column: 35, scope: !5166)
!5169 = !DILocation(line: 1757, column: 14, scope: !5166)
!5170 = !DILocation(line: 1757, column: 12, scope: !5166)
!5171 = !DILocation(line: 1758, column: 29, scope: !5166)
!5172 = !DILocation(line: 1758, column: 7, scope: !5166)
!5173 = !DILocation(line: 1758, column: 27, scope: !5166)
!5174 = !DILocation(line: 1759, column: 5, scope: !5166)
!5175 = !DILocation(line: 1754, column: 41, scope: !5163)
!5176 = !DILocation(line: 1754, column: 39, scope: !5163)
!5177 = !DILocation(line: 1754, column: 58, scope: !5163)
!5178 = !DILocation(line: 1754, column: 56, scope: !5163)
!5179 = !DILocation(line: 1754, column: 3, scope: !5163)
!5180 = distinct !{!5180, !5164, !5181}
!5181 = !DILocation(line: 1759, column: 5, scope: !5160)
!5182 = !DILocation(line: 1760, column: 24, scope: !5144)
!5183 = !DILocation(line: 1760, column: 3, scope: !5144)
!5184 = !DILocation(line: 1760, column: 22, scope: !5144)
!5185 = !DILocation(line: 1762, column: 7, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 1762, column: 7)
!5187 = !DILocation(line: 1762, column: 7, scope: !5144)
!5188 = !DILocation(line: 1764, column: 27, scope: !5189)
!5189 = distinct !DILexicalBlock(scope: !5186, file: !3, line: 1763, column: 5)
!5190 = !DILocation(line: 1764, column: 7, scope: !5189)
!5191 = !DILocation(line: 1764, column: 25, scope: !5189)
!5192 = !DILocation(line: 1765, column: 32, scope: !5189)
!5193 = !DILocation(line: 1765, column: 7, scope: !5189)
!5194 = !DILocation(line: 1765, column: 30, scope: !5189)
!5195 = !DILocation(line: 1766, column: 5, scope: !5189)
!5196 = !DILocation(line: 1768, column: 16, scope: !5144)
!5197 = !DILocation(line: 1768, column: 3, scope: !5144)
!5198 = !DILocation(line: 1772, column: 22, scope: !5144)
!5199 = !DILocation(line: 1772, column: 3, scope: !5144)
!5200 = !DILocation(line: 1772, column: 20, scope: !5144)
!5201 = !DILocation(line: 1775, column: 27, scope: !5144)
!5202 = !DILocation(line: 1775, column: 3, scope: !5144)
!5203 = !DILocation(line: 1775, column: 25, scope: !5144)
!5204 = !DILocation(line: 1776, column: 16, scope: !5144)
!5205 = !DILocation(line: 1776, column: 3, scope: !5144)
!5206 = !DILocation(line: 1777, column: 1, scope: !5144)
!5207 = distinct !DISubprogram(name: "layout_type", scope: !3, file: !3, line: 1790, type: !2830, scopeLine: 1791, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5208 = !DILocalVariable(name: "type", arg: 1, scope: !5207, file: !3, line: 1790, type: !1494)
!5209 = !DILocation(line: 1790, column: 19, scope: !5207)
!5210 = !DILocation(line: 1792, column: 3, scope: !5207)
!5211 = !DILocation(line: 1794, column: 7, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 1794, column: 7)
!5213 = !DILocation(line: 1794, column: 15, scope: !5212)
!5214 = !DILocation(line: 1794, column: 12, scope: !5212)
!5215 = !DILocation(line: 1794, column: 7, scope: !5207)
!5216 = !DILocation(line: 1795, column: 5, scope: !5212)
!5217 = !DILocation(line: 1798, column: 7, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 1798, column: 7)
!5219 = !DILocation(line: 1798, column: 7, scope: !5207)
!5220 = !DILocation(line: 1799, column: 5, scope: !5218)
!5221 = !DILocation(line: 1801, column: 11, scope: !5207)
!5222 = !DILocation(line: 1801, column: 3, scope: !5207)
!5223 = !DILocation(line: 1806, column: 7, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 1802, column: 5)
!5225 = !DILocation(line: 1809, column: 11, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 1809, column: 11)
!5227 = !DILocation(line: 1809, column: 33, scope: !5226)
!5228 = !DILocation(line: 1809, column: 11, scope: !5224)
!5229 = !DILocation(line: 1810, column: 2, scope: !5226)
!5230 = !DILocation(line: 1810, column: 24, scope: !5226)
!5231 = !DILocation(line: 1809, column: 36, scope: !5226)
!5232 = !DILocation(line: 1816, column: 11, scope: !5233)
!5233 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 1816, column: 11)
!5234 = !DILocation(line: 1816, column: 45, scope: !5233)
!5235 = !DILocation(line: 1817, column: 4, scope: !5233)
!5236 = !DILocation(line: 1817, column: 25, scope: !5233)
!5237 = !DILocation(line: 1817, column: 7, scope: !5233)
!5238 = !DILocation(line: 1817, column: 48, scope: !5233)
!5239 = !DILocation(line: 1816, column: 11, scope: !5224)
!5240 = !DILocation(line: 1818, column: 2, scope: !5233)
!5241 = !DILocation(line: 1818, column: 23, scope: !5233)
!5242 = !DILocation(line: 1820, column: 7, scope: !5224)
!5243 = !DILocation(line: 1822, column: 26, scope: !5224)
!5244 = !DILocation(line: 1822, column: 7, scope: !5224)
!5245 = !DILocation(line: 1822, column: 24, scope: !5224)
!5246 = !DILocation(line: 1823, column: 31, scope: !5224)
!5247 = !DILocation(line: 1823, column: 7, scope: !5224)
!5248 = !DILocation(line: 1823, column: 29, scope: !5224)
!5249 = !DILocation(line: 1824, column: 7, scope: !5224)
!5250 = !DILocation(line: 1827, column: 7, scope: !5224)
!5251 = !DILocation(line: 1829, column: 26, scope: !5224)
!5252 = !DILocation(line: 1829, column: 7, scope: !5224)
!5253 = !DILocation(line: 1829, column: 24, scope: !5224)
!5254 = !DILocation(line: 1830, column: 31, scope: !5224)
!5255 = !DILocation(line: 1830, column: 7, scope: !5224)
!5256 = !DILocation(line: 1830, column: 29, scope: !5224)
!5257 = !DILocation(line: 1831, column: 7, scope: !5224)
!5258 = !DILocation(line: 1835, column: 25, scope: !5224)
!5259 = !DILocation(line: 1835, column: 6, scope: !5224)
!5260 = !DILocation(line: 1835, column: 23, scope: !5224)
!5261 = !DILocation(line: 1836, column: 30, scope: !5224)
!5262 = !DILocation(line: 1836, column: 6, scope: !5224)
!5263 = !DILocation(line: 1836, column: 28, scope: !5224)
!5264 = !DILocation(line: 1837, column: 6, scope: !5224)
!5265 = !DILocation(line: 1840, column: 30, scope: !5224)
!5266 = !DILocation(line: 1840, column: 7, scope: !5224)
!5267 = !DILocation(line: 1840, column: 28, scope: !5224)
!5268 = !DILocation(line: 1841, column: 7, scope: !5224)
!5269 = !DILocation(line: 1846, column: 26, scope: !5224)
!5270 = !DILocation(line: 1846, column: 7, scope: !5224)
!5271 = !DILocation(line: 1846, column: 24, scope: !5224)
!5272 = !DILocation(line: 1847, column: 31, scope: !5224)
!5273 = !DILocation(line: 1847, column: 7, scope: !5224)
!5274 = !DILocation(line: 1847, column: 29, scope: !5224)
!5275 = !DILocation(line: 1848, column: 7, scope: !5224)
!5276 = !DILocalVariable(name: "nunits", scope: !5277, file: !3, line: 1852, type: !1591)
!5277 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 1851, column: 7)
!5278 = !DILocation(line: 1852, column: 6, scope: !5277)
!5279 = !DILocation(line: 1852, column: 15, scope: !5277)
!5280 = !DILocalVariable(name: "innertype", scope: !5277, file: !3, line: 1853, type: !1494)
!5281 = !DILocation(line: 1853, column: 7, scope: !5277)
!5282 = !DILocation(line: 1853, column: 19, scope: !5277)
!5283 = !DILocation(line: 1855, column: 2, scope: !5277)
!5284 = !DILocation(line: 1858, column: 6, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5277, file: !3, line: 1858, column: 6)
!5286 = !DILocation(line: 1858, column: 23, scope: !5285)
!5287 = !DILocation(line: 1858, column: 6, scope: !5277)
!5288 = !DILocalVariable(name: "innermode", scope: !5289, file: !3, line: 1860, type: !5)
!5289 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 1859, column: 4)
!5290 = !DILocation(line: 1860, column: 24, scope: !5289)
!5291 = !DILocation(line: 1860, column: 36, scope: !5289)
!5292 = !DILocalVariable(name: "mode", scope: !5289, file: !3, line: 1861, type: !5)
!5293 = !DILocation(line: 1861, column: 24, scope: !5289)
!5294 = !DILocation(line: 1864, column: 10, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 1864, column: 10)
!5296 = !DILocation(line: 1864, column: 10, scope: !5289)
!5297 = !DILocation(line: 1865, column: 13, scope: !5295)
!5298 = !DILocation(line: 1865, column: 8, scope: !5295)
!5299 = !DILocation(line: 1866, column: 15, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5295, file: !3, line: 1866, column: 15)
!5301 = !DILocation(line: 1866, column: 15, scope: !5295)
!5302 = !DILocation(line: 1867, column: 13, scope: !5300)
!5303 = !DILocation(line: 1867, column: 8, scope: !5300)
!5304 = !DILocation(line: 1868, column: 15, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5300, file: !3, line: 1868, column: 15)
!5306 = !DILocation(line: 1868, column: 15, scope: !5300)
!5307 = !DILocation(line: 1869, column: 13, scope: !5305)
!5308 = !DILocation(line: 1869, column: 8, scope: !5305)
!5309 = !DILocation(line: 1870, column: 15, scope: !5310)
!5310 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1870, column: 15)
!5311 = !DILocation(line: 1870, column: 15, scope: !5305)
!5312 = !DILocation(line: 1871, column: 13, scope: !5310)
!5313 = !DILocation(line: 1871, column: 8, scope: !5310)
!5314 = !DILocation(line: 1872, column: 15, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5310, file: !3, line: 1872, column: 15)
!5316 = !DILocation(line: 1872, column: 15, scope: !5310)
!5317 = !DILocation(line: 1873, column: 13, scope: !5315)
!5318 = !DILocation(line: 1873, column: 8, scope: !5315)
!5319 = !DILocation(line: 1875, column: 13, scope: !5315)
!5320 = !DILocation(line: 1879, column: 6, scope: !5289)
!5321 = !DILocation(line: 1879, column: 13, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1879, column: 6)
!5323 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 1879, column: 6)
!5324 = !DILocation(line: 1879, column: 18, scope: !5322)
!5325 = !DILocation(line: 1879, column: 6, scope: !5323)
!5326 = !DILocation(line: 1880, column: 12, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 1880, column: 12)
!5328 = !DILocation(line: 1880, column: 38, scope: !5327)
!5329 = !DILocation(line: 1880, column: 35, scope: !5327)
!5330 = !DILocation(line: 1881, column: 7, scope: !5327)
!5331 = !DILocation(line: 1881, column: 10, scope: !5327)
!5332 = !DILocation(line: 1881, column: 35, scope: !5327)
!5333 = !DILocation(line: 1881, column: 32, scope: !5327)
!5334 = !DILocation(line: 1880, column: 12, scope: !5322)
!5335 = !DILocation(line: 1882, column: 10, scope: !5327)
!5336 = !DILocation(line: 1879, column: 39, scope: !5322)
!5337 = !DILocation(line: 1879, column: 37, scope: !5322)
!5338 = !DILocation(line: 1879, column: 6, scope: !5322)
!5339 = distinct !{!5339, !5325, !5340}
!5340 = !DILocation(line: 1882, column: 10, scope: !5323)
!5341 = !DILocation(line: 1885, column: 10, scope: !5342)
!5342 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 1885, column: 10)
!5343 = !DILocation(line: 1885, column: 15, scope: !5342)
!5344 = !DILocation(line: 1886, column: 10, scope: !5342)
!5345 = !DILocation(line: 1886, column: 13, scope: !5342)
!5346 = !DILocation(line: 1886, column: 40, scope: !5342)
!5347 = !DILocation(line: 1885, column: 10, scope: !5289)
!5348 = !DILocation(line: 1887, column: 30, scope: !5342)
!5349 = !DILocation(line: 1887, column: 39, scope: !5342)
!5350 = !DILocation(line: 1887, column: 37, scope: !5342)
!5351 = !DILocation(line: 1887, column: 15, scope: !5342)
!5352 = !DILocation(line: 1887, column: 13, scope: !5342)
!5353 = !DILocation(line: 1887, column: 8, scope: !5342)
!5354 = !DILocation(line: 1890, column: 10, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5289, file: !3, line: 1890, column: 10)
!5356 = !DILocation(line: 1890, column: 15, scope: !5355)
!5357 = !DILocation(line: 1890, column: 27, scope: !5355)
!5358 = !DILocation(line: 1891, column: 4, scope: !5355)
!5359 = !DILocation(line: 1891, column: 26, scope: !5355)
!5360 = !DILocation(line: 1892, column: 4, scope: !5355)
!5361 = !DILocation(line: 1892, column: 26, scope: !5355)
!5362 = !DILocation(line: 1892, column: 8, scope: !5355)
!5363 = !DILocation(line: 1890, column: 10, scope: !5289)
!5364 = !DILocation(line: 1893, column: 8, scope: !5355)
!5365 = !DILocation(line: 1895, column: 8, scope: !5355)
!5366 = !DILocation(line: 1896, column: 4, scope: !5289)
!5367 = !DILocation(line: 1898, column: 27, scope: !5277)
!5368 = !DILocation(line: 1898, column: 2, scope: !5277)
!5369 = !DILocation(line: 1898, column: 25, scope: !5277)
!5370 = !DILocation(line: 1899, column: 32, scope: !5277)
!5371 = !DILocation(line: 1899, column: 9, scope: !5277)
!5372 = !DILocation(line: 1899, column: 30, scope: !5277)
!5373 = !DILocation(line: 1901, column: 15, scope: !5277)
!5374 = !DILocation(line: 1902, column: 15, scope: !5277)
!5375 = !DILocation(line: 1900, column: 26, scope: !5277)
!5376 = !DILocation(line: 1900, column: 2, scope: !5277)
!5377 = !DILocation(line: 1900, column: 24, scope: !5277)
!5378 = !DILocation(line: 1903, column: 49, scope: !5277)
!5379 = !DILocation(line: 1904, column: 10, scope: !5277)
!5380 = !DILocation(line: 1903, column: 21, scope: !5277)
!5381 = !DILocation(line: 1903, column: 2, scope: !5277)
!5382 = !DILocation(line: 1903, column: 19, scope: !5277)
!5383 = !DILocation(line: 1908, column: 36, scope: !5277)
!5384 = !DILocation(line: 1908, column: 22, scope: !5277)
!5385 = !DILocation(line: 1908, column: 2, scope: !5277)
!5386 = !DILocation(line: 1908, column: 20, scope: !5277)
!5387 = !DILocation(line: 1909, column: 9, scope: !5277)
!5388 = !DILocation(line: 1914, column: 7, scope: !5224)
!5389 = !DILocation(line: 1914, column: 25, scope: !5224)
!5390 = !DILocation(line: 1915, column: 7, scope: !5224)
!5391 = !DILocation(line: 1915, column: 30, scope: !5224)
!5392 = !DILocation(line: 1916, column: 7, scope: !5224)
!5393 = !DILocation(line: 1917, column: 7, scope: !5224)
!5394 = !DILocation(line: 1920, column: 26, scope: !5224)
!5395 = !DILocation(line: 1920, column: 7, scope: !5224)
!5396 = !DILocation(line: 1920, column: 24, scope: !5224)
!5397 = !DILocation(line: 1921, column: 31, scope: !5224)
!5398 = !DILocation(line: 1921, column: 7, scope: !5224)
!5399 = !DILocation(line: 1921, column: 29, scope: !5224)
!5400 = !DILocation(line: 1924, column: 7, scope: !5224)
!5401 = !DILocation(line: 1925, column: 7, scope: !5224)
!5402 = !DILocation(line: 1925, column: 29, scope: !5224)
!5403 = !DILocation(line: 1926, column: 7, scope: !5224)
!5404 = !DILocation(line: 1933, column: 7, scope: !5224)
!5405 = !DILocation(line: 1934, column: 26, scope: !5224)
!5406 = !DILocation(line: 1934, column: 7, scope: !5224)
!5407 = !DILocation(line: 1934, column: 24, scope: !5224)
!5408 = !DILocation(line: 1935, column: 31, scope: !5224)
!5409 = !DILocation(line: 1935, column: 7, scope: !5224)
!5410 = !DILocation(line: 1935, column: 29, scope: !5224)
!5411 = !DILocation(line: 1936, column: 7, scope: !5224)
!5412 = !DILocalVariable(name: "mode", scope: !5413, file: !3, line: 1941, type: !5)
!5413 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 1940, column: 7)
!5414 = !DILocation(line: 1941, column: 20, scope: !5413)
!5415 = !DILocation(line: 1941, column: 27, scope: !5413)
!5416 = !DILocation(line: 1942, column: 6, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5413, file: !3, line: 1942, column: 6)
!5418 = !DILocation(line: 1942, column: 23, scope: !5417)
!5419 = !DILocation(line: 1942, column: 41, scope: !5417)
!5420 = !DILocation(line: 1942, column: 44, scope: !5417)
!5421 = !DILocation(line: 1942, column: 6, scope: !5413)
!5422 = !DILocalVariable(name: "as", scope: !5423, file: !3, line: 1944, type: !5424)
!5423 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 1943, column: 4)
!5424 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_space_t", file: !1495, line: 73, baseType: !1614)
!5425 = !DILocation(line: 1944, column: 19, scope: !5423)
!5426 = !DILocation(line: 1944, column: 24, scope: !5423)
!5427 = !DILocation(line: 1945, column: 32, scope: !5423)
!5428 = !DILocation(line: 1945, column: 46, scope: !5423)
!5429 = !DILocation(line: 1945, column: 13, scope: !5423)
!5430 = !DILocation(line: 1945, column: 11, scope: !5423)
!5431 = !DILocation(line: 1946, column: 4, scope: !5423)
!5432 = !DILocation(line: 1948, column: 21, scope: !5413)
!5433 = !DILocation(line: 1948, column: 2, scope: !5413)
!5434 = !DILocation(line: 1948, column: 19, scope: !5413)
!5435 = !DILocation(line: 1949, column: 26, scope: !5413)
!5436 = !DILocation(line: 1949, column: 2, scope: !5413)
!5437 = !DILocation(line: 1949, column: 24, scope: !5413)
!5438 = !DILocation(line: 1950, column: 2, scope: !5413)
!5439 = !DILocation(line: 1950, column: 23, scope: !5413)
!5440 = !DILocation(line: 1951, column: 26, scope: !5413)
!5441 = !DILocation(line: 1951, column: 2, scope: !5413)
!5442 = !DILocation(line: 1951, column: 24, scope: !5413)
!5443 = !DILocation(line: 1953, column: 7, scope: !5224)
!5444 = !DILocalVariable(name: "index", scope: !5445, file: !3, line: 1957, type: !1494)
!5445 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 1956, column: 7)
!5446 = !DILocation(line: 1957, column: 7, scope: !5445)
!5447 = !DILocation(line: 1957, column: 15, scope: !5445)
!5448 = !DILocalVariable(name: "element", scope: !5445, file: !3, line: 1958, type: !1494)
!5449 = !DILocation(line: 1958, column: 7, scope: !5445)
!5450 = !DILocation(line: 1958, column: 17, scope: !5445)
!5451 = !DILocation(line: 1960, column: 22, scope: !5445)
!5452 = !DILocation(line: 1960, column: 2, scope: !5445)
!5453 = !DILocation(line: 1963, column: 6, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 1963, column: 6)
!5455 = !DILocation(line: 1963, column: 12, scope: !5454)
!5456 = !DILocation(line: 1963, column: 15, scope: !5454)
!5457 = !DILocation(line: 1963, column: 38, scope: !5454)
!5458 = !DILocation(line: 1963, column: 41, scope: !5454)
!5459 = !DILocation(line: 1964, column: 6, scope: !5454)
!5460 = !DILocation(line: 1964, column: 9, scope: !5454)
!5461 = !DILocation(line: 1963, column: 6, scope: !5445)
!5462 = !DILocalVariable(name: "ub", scope: !5463, file: !3, line: 1966, type: !1494)
!5463 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 1965, column: 4)
!5464 = !DILocation(line: 1966, column: 11, scope: !5463)
!5465 = !DILocation(line: 1966, column: 16, scope: !5463)
!5466 = !DILocalVariable(name: "lb", scope: !5463, file: !3, line: 1967, type: !1494)
!5467 = !DILocation(line: 1967, column: 11, scope: !5463)
!5468 = !DILocation(line: 1967, column: 16, scope: !5463)
!5469 = !DILocalVariable(name: "element_size", scope: !5463, file: !3, line: 1968, type: !1494)
!5470 = !DILocation(line: 1968, column: 11, scope: !5463)
!5471 = !DILocation(line: 1968, column: 26, scope: !5463)
!5472 = !DILocalVariable(name: "length", scope: !5463, file: !3, line: 1969, type: !1494)
!5473 = !DILocation(line: 1969, column: 11, scope: !5463)
!5474 = !DILocation(line: 1973, column: 25, scope: !5475)
!5475 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 1973, column: 10)
!5476 = !DILocation(line: 1973, column: 10, scope: !5475)
!5477 = !DILocation(line: 1973, column: 10, scope: !5463)
!5478 = !DILocation(line: 1974, column: 17, scope: !5475)
!5479 = !DILocation(line: 1974, column: 15, scope: !5475)
!5480 = !DILocation(line: 1974, column: 8, scope: !5475)
!5481 = !DILocation(line: 1980, column: 5, scope: !5475)
!5482 = !DILocation(line: 1980, column: 3, scope: !5475)
!5483 = !DILocation(line: 1987, column: 25, scope: !5463)
!5484 = !DILocation(line: 1987, column: 6, scope: !5463)
!5485 = !DILocation(line: 1987, column: 23, scope: !5463)
!5486 = !DILocation(line: 1995, column: 10, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 1995, column: 10)
!5488 = !DILocation(line: 1995, column: 10, scope: !5463)
!5489 = !DILocation(line: 1997, column: 5, scope: !5487)
!5490 = !DILocation(line: 1996, column: 8, scope: !5487)
!5491 = !DILocation(line: 1997, column: 3, scope: !5487)
!5492 = !DILocation(line: 1998, column: 4, scope: !5463)
!5493 = !DILocation(line: 2007, column: 22, scope: !5445)
!5494 = !DILocation(line: 2007, column: 2, scope: !5445)
!5495 = !DILocation(line: 2007, column: 20, scope: !5445)
!5496 = !DILocation(line: 2009, column: 7, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 2009, column: 6)
!5498 = !DILocation(line: 2009, column: 6, scope: !5445)
!5499 = !DILocation(line: 2013, column: 4, scope: !5497)
!5500 = !DILocation(line: 2014, column: 27, scope: !5445)
!5501 = !DILocation(line: 2014, column: 2, scope: !5445)
!5502 = !DILocation(line: 2014, column: 25, scope: !5445)
!5503 = !DILocation(line: 2015, column: 2, scope: !5445)
!5504 = !DILocation(line: 2016, column: 6, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 2016, column: 6)
!5506 = !DILocation(line: 2016, column: 23, scope: !5505)
!5507 = !DILocation(line: 2022, column: 6, scope: !5505)
!5508 = !DILocation(line: 2022, column: 10, scope: !5505)
!5509 = !DILocation(line: 2022, column: 39, scope: !5505)
!5510 = !DILocation(line: 2023, column: 3, scope: !5505)
!5511 = !DILocation(line: 2023, column: 6, scope: !5505)
!5512 = !DILocation(line: 2016, column: 6, scope: !5445)
!5513 = !DILocation(line: 2026, column: 28, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 2026, column: 10)
!5515 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 2024, column: 4)
!5516 = !DILocation(line: 2027, column: 7, scope: !5514)
!5517 = !DILocation(line: 2026, column: 10, scope: !5514)
!5518 = !DILocation(line: 2026, column: 10, scope: !5515)
!5519 = !DILocation(line: 2028, column: 8, scope: !5514)
!5520 = !DILocation(line: 2030, column: 8, scope: !5514)
!5521 = !DILocation(line: 2033, column: 10, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 2033, column: 10)
!5523 = !DILocation(line: 2033, column: 27, scope: !5522)
!5524 = !DILocation(line: 2034, column: 3, scope: !5522)
!5525 = !DILocation(line: 2034, column: 23, scope: !5522)
!5526 = !DILocation(line: 2034, column: 26, scope: !5522)
!5527 = !DILocation(line: 2034, column: 46, scope: !5522)
!5528 = !DILocation(line: 2034, column: 44, scope: !5522)
!5529 = !DILocation(line: 2035, column: 3, scope: !5522)
!5530 = !DILocation(line: 2035, column: 6, scope: !5522)
!5531 = !DILocation(line: 2035, column: 26, scope: !5522)
!5532 = !DILocation(line: 2035, column: 24, scope: !5522)
!5533 = !DILocation(line: 2033, column: 10, scope: !5515)
!5534 = !DILocation(line: 2037, column: 3, scope: !5535)
!5535 = distinct !DILexicalBlock(scope: !5522, file: !3, line: 2036, column: 8)
!5536 = !DILocation(line: 2037, column: 28, scope: !5535)
!5537 = !DILocation(line: 2038, column: 3, scope: !5535)
!5538 = !DILocation(line: 2039, column: 8, scope: !5535)
!5539 = !DILocation(line: 2040, column: 4, scope: !5515)
!5540 = !DILocation(line: 2043, column: 6, scope: !5541)
!5541 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 2043, column: 6)
!5542 = !DILocation(line: 2044, column: 6, scope: !5541)
!5543 = !DILocation(line: 2044, column: 9, scope: !5541)
!5544 = !DILocation(line: 2044, column: 46, scope: !5541)
!5545 = !DILocation(line: 2047, column: 6, scope: !5541)
!5546 = !DILocation(line: 2047, column: 10, scope: !5541)
!5547 = !DILocation(line: 2048, column: 6, scope: !5541)
!5548 = !DILocation(line: 2048, column: 25, scope: !5541)
!5549 = !DILocation(line: 2048, column: 10, scope: !5541)
!5550 = !DILocation(line: 2049, column: 6, scope: !5541)
!5551 = !DILocation(line: 2049, column: 27, scope: !5541)
!5552 = !DILocation(line: 2050, column: 8, scope: !5541)
!5553 = !DILocation(line: 2049, column: 9, scope: !5541)
!5554 = !DILocation(line: 2050, column: 35, scope: !5541)
!5555 = !DILocation(line: 2043, column: 6, scope: !5445)
!5556 = !DILocation(line: 2051, column: 4, scope: !5541)
!5557 = !DILocation(line: 2052, column: 2, scope: !5445)
!5558 = !DILocalVariable(name: "field", scope: !5559, file: !3, line: 2059, type: !1494)
!5559 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 2058, column: 7)
!5560 = !DILocation(line: 2059, column: 7, scope: !5559)
!5561 = !DILocalVariable(name: "rli", scope: !5559, file: !3, line: 2060, type: !3705)
!5562 = !DILocation(line: 2060, column: 21, scope: !5559)
!5563 = !DILocation(line: 2063, column: 29, scope: !5559)
!5564 = !DILocation(line: 2063, column: 8, scope: !5559)
!5565 = !DILocation(line: 2063, column: 6, scope: !5559)
!5566 = !DILocation(line: 2068, column: 6, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 2068, column: 6)
!5568 = !DILocation(line: 2068, column: 23, scope: !5567)
!5569 = !DILocation(line: 2068, column: 6, scope: !5559)
!5570 = !DILocation(line: 2069, column: 35, scope: !5567)
!5571 = !DILocation(line: 2069, column: 25, scope: !5567)
!5572 = !DILocation(line: 2069, column: 4, scope: !5567)
!5573 = !DILocation(line: 2069, column: 23, scope: !5567)
!5574 = !DILocation(line: 2072, column: 15, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 2072, column: 2)
!5576 = !DILocation(line: 2072, column: 13, scope: !5575)
!5577 = !DILocation(line: 2072, column: 7, scope: !5575)
!5578 = !DILocation(line: 2072, column: 35, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 2072, column: 2)
!5580 = !DILocation(line: 2072, column: 2, scope: !5575)
!5581 = !DILocation(line: 2073, column: 17, scope: !5579)
!5582 = !DILocation(line: 2073, column: 22, scope: !5579)
!5583 = !DILocation(line: 2073, column: 4, scope: !5579)
!5584 = !DILocation(line: 2072, column: 50, scope: !5579)
!5585 = !DILocation(line: 2072, column: 48, scope: !5579)
!5586 = !DILocation(line: 2072, column: 2, scope: !5579)
!5587 = distinct !{!5587, !5580, !5588}
!5588 = !DILocation(line: 2073, column: 27, scope: !5575)
!5589 = !DILocation(line: 2075, column: 6, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5559, file: !3, line: 2075, column: 6)
!5591 = !DILocation(line: 2075, column: 23, scope: !5590)
!5592 = !DILocation(line: 2075, column: 6, scope: !5559)
!5593 = !DILocation(line: 2076, column: 35, scope: !5590)
!5594 = !DILocation(line: 2076, column: 25, scope: !5590)
!5595 = !DILocation(line: 2076, column: 4, scope: !5590)
!5596 = !DILocation(line: 2076, column: 23, scope: !5590)
!5597 = !DILocation(line: 2079, column: 24, scope: !5559)
!5598 = !DILocation(line: 2079, column: 2, scope: !5559)
!5599 = !DILocation(line: 2081, column: 7, scope: !5224)
!5600 = !DILocation(line: 2084, column: 7, scope: !5224)
!5601 = !DILocation(line: 2085, column: 5, scope: !5224)
!5602 = !DILocation(line: 2090, column: 7, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 2090, column: 7)
!5604 = !DILocation(line: 2090, column: 24, scope: !5603)
!5605 = !DILocation(line: 2091, column: 7, scope: !5603)
!5606 = !DILocation(line: 2091, column: 10, scope: !5603)
!5607 = !DILocation(line: 2091, column: 27, scope: !5603)
!5608 = !DILocation(line: 2092, column: 7, scope: !5603)
!5609 = !DILocation(line: 2092, column: 10, scope: !5603)
!5610 = !DILocation(line: 2092, column: 27, scope: !5603)
!5611 = !DILocation(line: 2090, column: 7, scope: !5207)
!5612 = !DILocation(line: 2093, column: 25, scope: !5603)
!5613 = !DILocation(line: 2093, column: 5, scope: !5603)
!5614 = !DILocation(line: 2097, column: 7, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 2097, column: 7)
!5616 = !DILocation(line: 2097, column: 7, scope: !5207)
!5617 = !DILocation(line: 2098, column: 5, scope: !5615)
!5618 = !DILocation(line: 2099, column: 1, scope: !5207)
!5619 = distinct !DISubprogram(name: "make_signed_type", scope: !3, file: !3, line: 2143, type: !5620, scopeLine: 2144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5620 = !DISubroutineType(types: !5621)
!5621 = !{!1494, !1591}
!5622 = !DILocalVariable(name: "precision", arg: 1, scope: !5619, file: !3, line: 2143, type: !1591)
!5623 = !DILocation(line: 2143, column: 23, scope: !5619)
!5624 = !DILocalVariable(name: "type", scope: !5619, file: !3, line: 2145, type: !1494)
!5625 = !DILocation(line: 2145, column: 8, scope: !5619)
!5626 = !DILocation(line: 2145, column: 15, scope: !5619)
!5627 = !DILocation(line: 2147, column: 27, scope: !5619)
!5628 = !DILocation(line: 2147, column: 3, scope: !5619)
!5629 = !DILocation(line: 2147, column: 25, scope: !5619)
!5630 = !DILocation(line: 2149, column: 22, scope: !5619)
!5631 = !DILocation(line: 2149, column: 3, scope: !5619)
!5632 = !DILocation(line: 2150, column: 10, scope: !5619)
!5633 = !DILocation(line: 2150, column: 3, scope: !5619)
!5634 = distinct !DISubprogram(name: "fixup_signed_type", scope: !3, file: !3, line: 2389, type: !2830, scopeLine: 2390, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5635 = !DILocalVariable(name: "type", arg: 1, scope: !5634, file: !3, line: 2389, type: !1494)
!5636 = !DILocation(line: 2389, column: 25, scope: !5634)
!5637 = !DILocalVariable(name: "precision", scope: !5634, file: !3, line: 2391, type: !1591)
!5638 = !DILocation(line: 2391, column: 7, scope: !5634)
!5639 = !DILocation(line: 2391, column: 19, scope: !5634)
!5640 = !DILocation(line: 2396, column: 7, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5634, file: !3, line: 2396, column: 7)
!5642 = !DILocation(line: 2396, column: 17, scope: !5641)
!5643 = !DILocation(line: 2396, column: 7, scope: !5634)
!5644 = !DILocation(line: 2397, column: 15, scope: !5641)
!5645 = !DILocation(line: 2397, column: 5, scope: !5641)
!5646 = !DILocation(line: 2399, column: 45, scope: !5634)
!5647 = !DILocation(line: 2399, column: 51, scope: !5634)
!5648 = !DILocation(line: 2399, column: 3, scope: !5634)
!5649 = !DILocation(line: 2403, column: 16, scope: !5634)
!5650 = !DILocation(line: 2403, column: 3, scope: !5634)
!5651 = !DILocation(line: 2404, column: 1, scope: !5634)
!5652 = distinct !DISubprogram(name: "make_unsigned_type", scope: !3, file: !3, line: 2156, type: !5620, scopeLine: 2157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5653 = !DILocalVariable(name: "precision", arg: 1, scope: !5652, file: !3, line: 2156, type: !1591)
!5654 = !DILocation(line: 2156, column: 25, scope: !5652)
!5655 = !DILocalVariable(name: "type", scope: !5652, file: !3, line: 2158, type: !1494)
!5656 = !DILocation(line: 2158, column: 8, scope: !5652)
!5657 = !DILocation(line: 2158, column: 15, scope: !5652)
!5658 = !DILocation(line: 2160, column: 27, scope: !5652)
!5659 = !DILocation(line: 2160, column: 3, scope: !5652)
!5660 = !DILocation(line: 2160, column: 25, scope: !5652)
!5661 = !DILocation(line: 2162, column: 24, scope: !5652)
!5662 = !DILocation(line: 2162, column: 3, scope: !5652)
!5663 = !DILocation(line: 2163, column: 10, scope: !5652)
!5664 = !DILocation(line: 2163, column: 3, scope: !5652)
!5665 = distinct !DISubprogram(name: "fixup_unsigned_type", scope: !3, file: !3, line: 2411, type: !2830, scopeLine: 2412, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5666 = !DILocalVariable(name: "type", arg: 1, scope: !5665, file: !3, line: 2411, type: !1494)
!5667 = !DILocation(line: 2411, column: 27, scope: !5665)
!5668 = !DILocalVariable(name: "precision", scope: !5665, file: !3, line: 2413, type: !1591)
!5669 = !DILocation(line: 2413, column: 7, scope: !5665)
!5670 = !DILocation(line: 2413, column: 19, scope: !5665)
!5671 = !DILocation(line: 2418, column: 7, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 2418, column: 7)
!5673 = !DILocation(line: 2418, column: 17, scope: !5672)
!5674 = !DILocation(line: 2418, column: 7, scope: !5665)
!5675 = !DILocation(line: 2419, column: 15, scope: !5672)
!5676 = !DILocation(line: 2419, column: 5, scope: !5672)
!5677 = !DILocation(line: 2421, column: 3, scope: !5665)
!5678 = !DILocation(line: 2421, column: 24, scope: !5665)
!5679 = !DILocation(line: 2423, column: 45, scope: !5665)
!5680 = !DILocation(line: 2423, column: 51, scope: !5665)
!5681 = !DILocation(line: 2423, column: 3, scope: !5665)
!5682 = !DILocation(line: 2427, column: 16, scope: !5665)
!5683 = !DILocation(line: 2427, column: 3, scope: !5665)
!5684 = !DILocation(line: 2428, column: 1, scope: !5665)
!5685 = distinct !DISubprogram(name: "make_fract_type", scope: !3, file: !3, line: 2170, type: !5686, scopeLine: 2171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5686 = !DISubroutineType(types: !5687)
!5687 = !{!1494, !1591, !1591, !1591}
!5688 = !DILocalVariable(name: "precision", arg: 1, scope: !5685, file: !3, line: 2170, type: !1591)
!5689 = !DILocation(line: 2170, column: 22, scope: !5685)
!5690 = !DILocalVariable(name: "unsignedp", arg: 2, scope: !5685, file: !3, line: 2170, type: !1591)
!5691 = !DILocation(line: 2170, column: 37, scope: !5685)
!5692 = !DILocalVariable(name: "satp", arg: 3, scope: !5685, file: !3, line: 2170, type: !1591)
!5693 = !DILocation(line: 2170, column: 52, scope: !5685)
!5694 = !DILocalVariable(name: "type", scope: !5685, file: !3, line: 2172, type: !1494)
!5695 = !DILocation(line: 2172, column: 8, scope: !5685)
!5696 = !DILocation(line: 2172, column: 15, scope: !5685)
!5697 = !DILocation(line: 2174, column: 27, scope: !5685)
!5698 = !DILocation(line: 2174, column: 3, scope: !5685)
!5699 = !DILocation(line: 2174, column: 25, scope: !5685)
!5700 = !DILocation(line: 2176, column: 7, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 2176, column: 7)
!5702 = !DILocation(line: 2176, column: 7, scope: !5685)
!5703 = !DILocation(line: 2177, column: 5, scope: !5701)
!5704 = !DILocation(line: 2177, column: 28, scope: !5701)
!5705 = !DILocation(line: 2180, column: 7, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5685, file: !3, line: 2180, column: 7)
!5707 = !DILocation(line: 2180, column: 7, scope: !5685)
!5708 = !DILocation(line: 2182, column: 7, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5706, file: !3, line: 2181, column: 5)
!5710 = !DILocation(line: 2182, column: 28, scope: !5709)
!5711 = !DILocation(line: 2183, column: 7, scope: !5709)
!5712 = !DILocation(line: 2184, column: 5, scope: !5709)
!5713 = !DILocation(line: 2186, column: 5, scope: !5706)
!5714 = !DILocation(line: 2187, column: 16, scope: !5685)
!5715 = !DILocation(line: 2187, column: 3, scope: !5685)
!5716 = !DILocation(line: 2189, column: 10, scope: !5685)
!5717 = !DILocation(line: 2189, column: 3, scope: !5685)
!5718 = distinct !DISubprogram(name: "make_accum_type", scope: !3, file: !3, line: 2196, type: !5686, scopeLine: 2197, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5719 = !DILocalVariable(name: "precision", arg: 1, scope: !5718, file: !3, line: 2196, type: !1591)
!5720 = !DILocation(line: 2196, column: 22, scope: !5718)
!5721 = !DILocalVariable(name: "unsignedp", arg: 2, scope: !5718, file: !3, line: 2196, type: !1591)
!5722 = !DILocation(line: 2196, column: 37, scope: !5718)
!5723 = !DILocalVariable(name: "satp", arg: 3, scope: !5718, file: !3, line: 2196, type: !1591)
!5724 = !DILocation(line: 2196, column: 52, scope: !5718)
!5725 = !DILocalVariable(name: "type", scope: !5718, file: !3, line: 2198, type: !1494)
!5726 = !DILocation(line: 2198, column: 8, scope: !5718)
!5727 = !DILocation(line: 2198, column: 15, scope: !5718)
!5728 = !DILocation(line: 2200, column: 27, scope: !5718)
!5729 = !DILocation(line: 2200, column: 3, scope: !5718)
!5730 = !DILocation(line: 2200, column: 25, scope: !5718)
!5731 = !DILocation(line: 2202, column: 7, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5718, file: !3, line: 2202, column: 7)
!5733 = !DILocation(line: 2202, column: 7, scope: !5718)
!5734 = !DILocation(line: 2203, column: 5, scope: !5732)
!5735 = !DILocation(line: 2203, column: 28, scope: !5732)
!5736 = !DILocation(line: 2206, column: 7, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5718, file: !3, line: 2206, column: 7)
!5738 = !DILocation(line: 2206, column: 7, scope: !5718)
!5739 = !DILocation(line: 2208, column: 7, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5737, file: !3, line: 2207, column: 5)
!5741 = !DILocation(line: 2208, column: 28, scope: !5740)
!5742 = !DILocation(line: 2209, column: 7, scope: !5740)
!5743 = !DILocation(line: 2210, column: 5, scope: !5740)
!5744 = !DILocation(line: 2212, column: 5, scope: !5737)
!5745 = !DILocation(line: 2213, column: 16, scope: !5718)
!5746 = !DILocation(line: 2213, column: 3, scope: !5718)
!5747 = !DILocation(line: 2215, column: 10, scope: !5718)
!5748 = !DILocation(line: 2215, column: 3, scope: !5718)
!5749 = distinct !DISubprogram(name: "initialize_sizetypes", scope: !3, file: !3, line: 2222, type: !5750, scopeLine: 2223, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5750 = !DISubroutineType(types: !5751)
!5751 = !{null, !1614}
!5752 = !DILocalVariable(name: "signed_p", arg: 1, scope: !5749, file: !3, line: 2222, type: !1614)
!5753 = !DILocation(line: 2222, column: 28, scope: !5749)
!5754 = !DILocalVariable(name: "t", scope: !5749, file: !3, line: 2224, type: !1494)
!5755 = !DILocation(line: 2224, column: 8, scope: !5749)
!5756 = !DILocation(line: 2224, column: 12, scope: !5749)
!5757 = !DILocalVariable(name: "precision", scope: !5749, file: !3, line: 2225, type: !1591)
!5758 = !DILocation(line: 2225, column: 7, scope: !5749)
!5759 = !DILocation(line: 2225, column: 19, scope: !5749)
!5760 = !DILocation(line: 2227, column: 3, scope: !5749)
!5761 = !DILocation(line: 2228, column: 20, scope: !5749)
!5762 = !DILocation(line: 2228, column: 3, scope: !5749)
!5763 = !DILocation(line: 2228, column: 18, scope: !5749)
!5764 = !DILocation(line: 2229, column: 3, scope: !5749)
!5765 = !DILocation(line: 2229, column: 23, scope: !5749)
!5766 = !DILocation(line: 2230, column: 3, scope: !5749)
!5767 = !DILocation(line: 2230, column: 24, scope: !5749)
!5768 = !DILocation(line: 2231, column: 24, scope: !5749)
!5769 = !DILocation(line: 2231, column: 23, scope: !5749)
!5770 = !DILocation(line: 2231, column: 3, scope: !5749)
!5771 = !DILocation(line: 2231, column: 21, scope: !5749)
!5772 = !DILocation(line: 2232, column: 34, scope: !5749)
!5773 = !DILocation(line: 2232, column: 37, scope: !5749)
!5774 = !DILocation(line: 2232, column: 19, scope: !5749)
!5775 = !DILocation(line: 2232, column: 3, scope: !5749)
!5776 = !DILocation(line: 2232, column: 17, scope: !5749)
!5777 = !DILocation(line: 2233, column: 39, scope: !5749)
!5778 = !DILocation(line: 2233, column: 42, scope: !5749)
!5779 = !DILocation(line: 2233, column: 24, scope: !5749)
!5780 = !DILocation(line: 2233, column: 3, scope: !5749)
!5781 = !DILocation(line: 2233, column: 22, scope: !5749)
!5782 = !DILocation(line: 2234, column: 24, scope: !5749)
!5783 = !DILocation(line: 2234, column: 3, scope: !5749)
!5784 = !DILocation(line: 2234, column: 22, scope: !5749)
!5785 = !DILocation(line: 2237, column: 45, scope: !5749)
!5786 = !DILocation(line: 2237, column: 48, scope: !5749)
!5787 = !DILocation(line: 2237, column: 60, scope: !5749)
!5788 = !DILocation(line: 2237, column: 59, scope: !5749)
!5789 = !DILocation(line: 2237, column: 3, scope: !5749)
!5790 = !DILocation(line: 2239, column: 14, scope: !5749)
!5791 = !DILocation(line: 2239, column: 12, scope: !5749)
!5792 = !DILocation(line: 2240, column: 43, scope: !5749)
!5793 = !DILocation(line: 2240, column: 17, scope: !5749)
!5794 = !DILocation(line: 2240, column: 15, scope: !5749)
!5795 = !DILocation(line: 2241, column: 1, scope: !5749)
!5796 = distinct !DISubprogram(name: "set_min_and_max_values_for_integral_type", scope: !3, file: !3, line: 2337, type: !5797, scopeLine: 2340, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5797 = !DISubroutineType(types: !5798)
!5798 = !{null, !1494, !1591, !1614}
!5799 = !DILocalVariable(name: "type", arg: 1, scope: !5796, file: !3, line: 2337, type: !1494)
!5800 = !DILocation(line: 2337, column: 48, scope: !5796)
!5801 = !DILocalVariable(name: "precision", arg: 2, scope: !5796, file: !3, line: 2338, type: !1591)
!5802 = !DILocation(line: 2338, column: 12, scope: !5796)
!5803 = !DILocalVariable(name: "is_unsigned", arg: 3, scope: !5796, file: !3, line: 2339, type: !1614)
!5804 = !DILocation(line: 2339, column: 13, scope: !5796)
!5805 = !DILocalVariable(name: "min_value", scope: !5796, file: !3, line: 2341, type: !1494)
!5806 = !DILocation(line: 2341, column: 8, scope: !5796)
!5807 = !DILocalVariable(name: "max_value", scope: !5796, file: !3, line: 2342, type: !1494)
!5808 = !DILocation(line: 2342, column: 8, scope: !5796)
!5809 = !DILocation(line: 2344, column: 7, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5796, file: !3, line: 2344, column: 7)
!5811 = !DILocation(line: 2344, column: 7, scope: !5796)
!5812 = !DILocation(line: 2346, column: 34, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5810, file: !3, line: 2345, column: 5)
!5814 = !DILocation(line: 2346, column: 19, scope: !5813)
!5815 = !DILocation(line: 2346, column: 17, scope: !5813)
!5816 = !DILocation(line: 2348, column: 24, scope: !5813)
!5817 = !DILocation(line: 2348, column: 30, scope: !5813)
!5818 = !DILocation(line: 2348, column: 40, scope: !5813)
!5819 = !DILocation(line: 2348, column: 65, scope: !5813)
!5820 = !DILocation(line: 2350, column: 34, scope: !5813)
!5821 = !DILocation(line: 2350, column: 31, scope: !5813)
!5822 = !DILocation(line: 2350, column: 45, scope: !5813)
!5823 = !DILocation(line: 2351, column: 10, scope: !5813)
!5824 = !DILocation(line: 2351, column: 20, scope: !5813)
!5825 = !DILocation(line: 2351, column: 45, scope: !5813)
!5826 = !DILocation(line: 2354, column: 13, scope: !5813)
!5827 = !DILocation(line: 2354, column: 23, scope: !5813)
!5828 = !DILocation(line: 2354, column: 10, scope: !5813)
!5829 = !DILocation(line: 2353, column: 6, scope: !5813)
!5830 = !DILocation(line: 2348, column: 4, scope: !5813)
!5831 = !DILocation(line: 2348, column: 2, scope: !5813)
!5832 = !DILocation(line: 2356, column: 5, scope: !5813)
!5833 = !DILocation(line: 2360, column: 24, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5810, file: !3, line: 2358, column: 5)
!5835 = !DILocation(line: 2361, column: 11, scope: !5834)
!5836 = !DILocation(line: 2361, column: 21, scope: !5834)
!5837 = !DILocation(line: 2361, column: 46, scope: !5834)
!5838 = !DILocation(line: 2363, column: 38, scope: !5834)
!5839 = !DILocation(line: 2363, column: 48, scope: !5834)
!5840 = !DILocation(line: 2363, column: 34, scope: !5834)
!5841 = !DILocation(line: 2365, column: 9, scope: !5834)
!5842 = !DILocation(line: 2365, column: 19, scope: !5834)
!5843 = !DILocation(line: 2365, column: 44, scope: !5834)
!5844 = !DILocation(line: 2365, column: 48, scope: !5834)
!5845 = !DILocation(line: 2366, column: 11, scope: !5834)
!5846 = !DILocation(line: 2366, column: 21, scope: !5834)
!5847 = !DILocation(line: 2366, column: 46, scope: !5834)
!5848 = !DILocation(line: 2365, column: 5, scope: !5834)
!5849 = !DILocation(line: 2360, column: 4, scope: !5834)
!5850 = !DILocation(line: 2360, column: 2, scope: !5834)
!5851 = !DILocation(line: 2369, column: 24, scope: !5834)
!5852 = !DILocation(line: 2370, column: 11, scope: !5834)
!5853 = !DILocation(line: 2370, column: 21, scope: !5834)
!5854 = !DILocation(line: 2370, column: 46, scope: !5834)
!5855 = !DILocation(line: 2372, column: 36, scope: !5834)
!5856 = !DILocation(line: 2372, column: 46, scope: !5834)
!5857 = !DILocation(line: 2372, column: 32, scope: !5834)
!5858 = !DILocation(line: 2372, column: 52, scope: !5834)
!5859 = !DILocation(line: 2373, column: 11, scope: !5834)
!5860 = !DILocation(line: 2373, column: 21, scope: !5834)
!5861 = !DILocation(line: 2373, column: 46, scope: !5834)
!5862 = !DILocation(line: 2373, column: 50, scope: !5834)
!5863 = !DILocation(line: 2375, column: 12, scope: !5834)
!5864 = !DILocation(line: 2375, column: 22, scope: !5834)
!5865 = !DILocation(line: 2375, column: 47, scope: !5834)
!5866 = !DILocation(line: 2375, column: 8, scope: !5834)
!5867 = !DILocation(line: 2375, column: 54, scope: !5834)
!5868 = !DILocation(line: 2369, column: 4, scope: !5834)
!5869 = !DILocation(line: 2369, column: 2, scope: !5834)
!5870 = !DILocation(line: 2379, column: 27, scope: !5796)
!5871 = !DILocation(line: 2379, column: 3, scope: !5796)
!5872 = !DILocation(line: 2379, column: 25, scope: !5796)
!5873 = !DILocation(line: 2380, column: 27, scope: !5796)
!5874 = !DILocation(line: 2380, column: 3, scope: !5796)
!5875 = !DILocation(line: 2380, column: 25, scope: !5796)
!5876 = !DILocation(line: 2381, column: 1, scope: !5796)
!5877 = distinct !DISubprogram(name: "set_sizetype", scope: !3, file: !3, line: 2250, type: !2830, scopeLine: 2251, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!5878 = !DILocalVariable(name: "type", arg: 1, scope: !5877, file: !3, line: 2250, type: !1494)
!5879 = !DILocation(line: 2250, column: 20, scope: !5877)
!5880 = !DILocalVariable(name: "t", scope: !5877, file: !3, line: 2252, type: !1494)
!5881 = !DILocation(line: 2252, column: 8, scope: !5877)
!5882 = !DILocalVariable(name: "oprecision", scope: !5877, file: !3, line: 2253, type: !1591)
!5883 = !DILocation(line: 2253, column: 7, scope: !5877)
!5884 = !DILocation(line: 2253, column: 20, scope: !5877)
!5885 = !DILocalVariable(name: "precision", scope: !5877, file: !3, line: 2258, type: !1591)
!5886 = !DILocation(line: 2258, column: 7, scope: !5877)
!5887 = !DILocation(line: 2259, column: 7, scope: !5877)
!5888 = !DILocation(line: 2261, column: 7, scope: !5877)
!5889 = !DILocation(line: 2261, column: 5, scope: !5877)
!5890 = !DILocation(line: 2262, column: 7, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 2262, column: 7)
!5892 = !DILocation(line: 2262, column: 17, scope: !5891)
!5893 = !DILocation(line: 2262, column: 7, scope: !5877)
!5894 = !DILocation(line: 2263, column: 15, scope: !5891)
!5895 = !DILocation(line: 2263, column: 5, scope: !5891)
!5896 = !DILocation(line: 2265, column: 3, scope: !5877)
!5897 = !DILocation(line: 2267, column: 33, scope: !5877)
!5898 = !DILocation(line: 2267, column: 7, scope: !5877)
!5899 = !DILocation(line: 2267, column: 5, scope: !5877)
!5900 = !DILocation(line: 2270, column: 28, scope: !5877)
!5901 = !DILocation(line: 2270, column: 3, scope: !5877)
!5902 = !DILocation(line: 2270, column: 26, scope: !5877)
!5903 = !DILocation(line: 2271, column: 30, scope: !5877)
!5904 = !DILocation(line: 2271, column: 3, scope: !5877)
!5905 = !DILocation(line: 2271, column: 28, scope: !5877)
!5906 = !DILocation(line: 2272, column: 40, scope: !5877)
!5907 = !DILocation(line: 2272, column: 3, scope: !5877)
!5908 = !DILocation(line: 2272, column: 38, scope: !5877)
!5909 = !DILocation(line: 2273, column: 18, scope: !5877)
!5910 = !DILocation(line: 2273, column: 3, scope: !5877)
!5911 = !DILocation(line: 2273, column: 16, scope: !5877)
!5912 = !DILocation(line: 2274, column: 3, scope: !5877)
!5913 = !DILocation(line: 2274, column: 24, scope: !5877)
!5914 = !DILocation(line: 2277, column: 11, scope: !5877)
!5915 = !DILocation(line: 2277, column: 3, scope: !5877)
!5916 = !DILocation(line: 2277, column: 21, scope: !5877)
!5917 = !DILocation(line: 2277, column: 35, scope: !5877)
!5918 = !DILocation(line: 2277, column: 24, scope: !5877)
!5919 = !DILocation(line: 2278, column: 34, scope: !5877)
!5920 = !DILocation(line: 2278, column: 3, scope: !5877)
!5921 = !DILocation(line: 2278, column: 32, scope: !5877)
!5922 = !DILocation(line: 2279, column: 31, scope: !5877)
!5923 = !DILocation(line: 2279, column: 3, scope: !5877)
!5924 = !DILocation(line: 2279, column: 29, scope: !5877)
!5925 = !DILocation(line: 2281, column: 7, scope: !5877)
!5926 = !DILocation(line: 2281, column: 5, scope: !5877)
!5927 = !DILocation(line: 2282, column: 19, scope: !5877)
!5928 = !DILocation(line: 2282, column: 3, scope: !5877)
!5929 = !DILocation(line: 2282, column: 17, scope: !5877)
!5930 = !DILocation(line: 2285, column: 28, scope: !5877)
!5931 = !DILocation(line: 2285, column: 3, scope: !5877)
!5932 = !DILocation(line: 2285, column: 26, scope: !5877)
!5933 = !DILocation(line: 2286, column: 30, scope: !5877)
!5934 = !DILocation(line: 2286, column: 3, scope: !5877)
!5935 = !DILocation(line: 2286, column: 28, scope: !5877)
!5936 = !DILocation(line: 2287, column: 24, scope: !5877)
!5937 = !DILocation(line: 2287, column: 3, scope: !5877)
!5938 = !DILocation(line: 2287, column: 22, scope: !5877)
!5939 = !DILocation(line: 2288, column: 18, scope: !5877)
!5940 = !DILocation(line: 2288, column: 3, scope: !5877)
!5941 = !DILocation(line: 2288, column: 16, scope: !5877)
!5942 = !DILocation(line: 2289, column: 3, scope: !5877)
!5943 = !DILocation(line: 2289, column: 24, scope: !5877)
!5944 = !DILocation(line: 2292, column: 11, scope: !5877)
!5945 = !DILocation(line: 2292, column: 3, scope: !5877)
!5946 = !DILocation(line: 2292, column: 24, scope: !5877)
!5947 = !DILocation(line: 2292, column: 38, scope: !5877)
!5948 = !DILocation(line: 2292, column: 27, scope: !5877)
!5949 = !DILocation(line: 2293, column: 37, scope: !5877)
!5950 = !DILocation(line: 2293, column: 3, scope: !5877)
!5951 = !DILocation(line: 2293, column: 35, scope: !5877)
!5952 = !DILocation(line: 2294, column: 34, scope: !5877)
!5953 = !DILocation(line: 2294, column: 3, scope: !5877)
!5954 = !DILocation(line: 2294, column: 32, scope: !5877)
!5955 = !DILocation(line: 2296, column: 7, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 2296, column: 7)
!5957 = !DILocation(line: 2296, column: 7, scope: !5877)
!5958 = !DILocation(line: 2298, column: 28, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 2297, column: 5)
!5960 = !DILocation(line: 2298, column: 7, scope: !5959)
!5961 = !DILocation(line: 2299, column: 37, scope: !5959)
!5962 = !DILocation(line: 2299, column: 19, scope: !5959)
!5963 = !DILocation(line: 2299, column: 17, scope: !5959)
!5964 = !DILocation(line: 2300, column: 7, scope: !5959)
!5965 = !DILocation(line: 2300, column: 36, scope: !5959)
!5966 = !DILocation(line: 2301, column: 40, scope: !5959)
!5967 = !DILocation(line: 2301, column: 22, scope: !5959)
!5968 = !DILocation(line: 2301, column: 20, scope: !5959)
!5969 = !DILocation(line: 2302, column: 7, scope: !5959)
!5970 = !DILocation(line: 2302, column: 39, scope: !5959)
!5971 = !DILocation(line: 2303, column: 5, scope: !5959)
!5972 = !DILocation(line: 2306, column: 26, scope: !5973)
!5973 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 2305, column: 5)
!5974 = !DILocation(line: 2306, column: 7, scope: !5973)
!5975 = !DILocation(line: 2307, column: 19, scope: !5973)
!5976 = !DILocation(line: 2307, column: 17, scope: !5973)
!5977 = !DILocation(line: 2308, column: 22, scope: !5973)
!5978 = !DILocation(line: 2308, column: 20, scope: !5973)
!5979 = !DILocation(line: 2313, column: 7, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 2313, column: 7)
!5981 = !DILocation(line: 2313, column: 7, scope: !5877)
!5982 = !DILocalVariable(name: "orig_max", scope: !5983, file: !3, line: 2315, type: !1494)
!5983 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 2314, column: 5)
!5984 = !DILocation(line: 2315, column: 12, scope: !5983)
!5985 = !DILocalVariable(name: "new_max", scope: !5983, file: !3, line: 2315, type: !1494)
!5986 = !DILocation(line: 2315, column: 22, scope: !5983)
!5987 = !DILocation(line: 2317, column: 18, scope: !5983)
!5988 = !DILocation(line: 2317, column: 16, scope: !5983)
!5989 = !DILocation(line: 2321, column: 42, scope: !5983)
!5990 = !DILocation(line: 2322, column: 7, scope: !5983)
!5991 = !DILocation(line: 2323, column: 7, scope: !5983)
!5992 = !DILocation(line: 2321, column: 17, scope: !5983)
!5993 = !DILocation(line: 2321, column: 15, scope: !5983)
!5994 = !DILocation(line: 2324, column: 35, scope: !5983)
!5995 = !DILocation(line: 2324, column: 7, scope: !5983)
!5996 = !DILocation(line: 2324, column: 33, scope: !5983)
!5997 = !DILocation(line: 2325, column: 5, scope: !5983)
!5998 = !DILocation(line: 2326, column: 1, scope: !5877)
!5999 = distinct !DISubprogram(name: "get_best_mode", scope: !3, file: !3, line: 2450, type: !6000, scopeLine: 2452, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6000 = !DISubroutineType(types: !6001)
!6001 = !{!5, !1591, !1591, !7, !5, !1591}
!6002 = !DILocalVariable(name: "bitsize", arg: 1, scope: !5999, file: !3, line: 2450, type: !1591)
!6003 = !DILocation(line: 2450, column: 20, scope: !5999)
!6004 = !DILocalVariable(name: "bitpos", arg: 2, scope: !5999, file: !3, line: 2450, type: !1591)
!6005 = !DILocation(line: 2450, column: 33, scope: !5999)
!6006 = !DILocalVariable(name: "align", arg: 3, scope: !5999, file: !3, line: 2450, type: !7)
!6007 = !DILocation(line: 2450, column: 54, scope: !5999)
!6008 = !DILocalVariable(name: "largest_mode", arg: 4, scope: !5999, file: !3, line: 2451, type: !5)
!6009 = !DILocation(line: 2451, column: 27, scope: !5999)
!6010 = !DILocalVariable(name: "volatilep", arg: 5, scope: !5999, file: !3, line: 2451, type: !1591)
!6011 = !DILocation(line: 2451, column: 45, scope: !5999)
!6012 = !DILocalVariable(name: "mode", scope: !5999, file: !3, line: 2453, type: !5)
!6013 = !DILocation(line: 2453, column: 21, scope: !5999)
!6014 = !DILocalVariable(name: "unit", scope: !5999, file: !3, line: 2454, type: !7)
!6015 = !DILocation(line: 2454, column: 16, scope: !5999)
!6016 = !DILocation(line: 2457, column: 15, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2457, column: 3)
!6018 = !DILocation(line: 2457, column: 13, scope: !6017)
!6019 = !DILocation(line: 2457, column: 8, scope: !6017)
!6020 = !DILocation(line: 2457, column: 52, scope: !6021)
!6021 = distinct !DILexicalBlock(scope: !6017, file: !3, line: 2457, column: 3)
!6022 = !DILocation(line: 2457, column: 57, scope: !6021)
!6023 = !DILocation(line: 2457, column: 3, scope: !6017)
!6024 = !DILocation(line: 2460, column: 14, scope: !6025)
!6025 = distinct !DILexicalBlock(scope: !6021, file: !3, line: 2459, column: 5)
!6026 = !DILocation(line: 2460, column: 12, scope: !6025)
!6027 = !DILocation(line: 2461, column: 12, scope: !6028)
!6028 = distinct !DILexicalBlock(scope: !6025, file: !3, line: 2461, column: 11)
!6029 = !DILocation(line: 2461, column: 21, scope: !6028)
!6030 = !DILocation(line: 2461, column: 19, scope: !6028)
!6031 = !DILocation(line: 2461, column: 29, scope: !6028)
!6032 = !DILocation(line: 2461, column: 27, scope: !6028)
!6033 = !DILocation(line: 2461, column: 40, scope: !6028)
!6034 = !DILocation(line: 2461, column: 37, scope: !6028)
!6035 = !DILocation(line: 2461, column: 11, scope: !6025)
!6036 = !DILocation(line: 2462, column: 2, scope: !6028)
!6037 = !DILocation(line: 2463, column: 5, scope: !6025)
!6038 = !DILocation(line: 2458, column: 15, scope: !6021)
!6039 = !DILocation(line: 2458, column: 13, scope: !6021)
!6040 = !DILocation(line: 2457, column: 3, scope: !6021)
!6041 = distinct !{!6041, !6023, !6042}
!6042 = !DILocation(line: 2463, column: 5, scope: !6017)
!6043 = !DILocation(line: 2465, column: 7, scope: !6044)
!6044 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2465, column: 7)
!6045 = !DILocation(line: 2465, column: 12, scope: !6044)
!6046 = !DILocation(line: 2473, column: 7, scope: !6044)
!6047 = !DILocation(line: 2473, column: 10, scope: !6044)
!6048 = !DILocation(line: 2473, column: 42, scope: !6044)
!6049 = !DILocation(line: 2473, column: 40, scope: !6044)
!6050 = !DILocation(line: 2474, column: 7, scope: !6044)
!6051 = !DILocation(line: 2474, column: 11, scope: !6044)
!6052 = !DILocation(line: 2474, column: 24, scope: !6044)
!6053 = !DILocation(line: 2474, column: 36, scope: !6044)
!6054 = !DILocation(line: 2474, column: 39, scope: !6044)
!6055 = !DILocation(line: 2474, column: 46, scope: !6044)
!6056 = !DILocation(line: 2474, column: 44, scope: !6044)
!6057 = !DILocation(line: 2465, column: 7, scope: !5999)
!6058 = !DILocation(line: 2475, column: 5, scope: !6044)
!6059 = !DILocation(line: 2478, column: 11, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2477, column: 7)
!6061 = !DILocation(line: 2478, column: 21, scope: !6060)
!6062 = !DILocation(line: 2478, column: 33, scope: !6060)
!6063 = !DILocation(line: 2478, column: 25, scope: !6060)
!6064 = !DILocation(line: 2477, column: 7, scope: !5999)
!6065 = !DILocalVariable(name: "wide_mode", scope: !6066, file: !3, line: 2480, type: !5)
!6066 = distinct !DILexicalBlock(scope: !6060, file: !3, line: 2479, column: 5)
!6067 = !DILocation(line: 2480, column: 25, scope: !6066)
!6068 = !DILocalVariable(name: "tmode", scope: !6066, file: !3, line: 2480, type: !5)
!6069 = !DILocation(line: 2480, column: 47, scope: !6066)
!6070 = !DILocation(line: 2482, column: 20, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 2482, column: 7)
!6072 = !DILocation(line: 2482, column: 18, scope: !6071)
!6073 = !DILocation(line: 2482, column: 12, scope: !6071)
!6074 = !DILocation(line: 2482, column: 57, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6071, file: !3, line: 2482, column: 7)
!6076 = !DILocation(line: 2482, column: 63, scope: !6075)
!6077 = !DILocation(line: 2482, column: 7, scope: !6071)
!6078 = !DILocation(line: 2485, column: 11, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !6075, file: !3, line: 2484, column: 2)
!6080 = !DILocation(line: 2485, column: 9, scope: !6079)
!6081 = !DILocation(line: 2486, column: 8, scope: !6082)
!6082 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2486, column: 8)
!6083 = !DILocation(line: 2486, column: 17, scope: !6082)
!6084 = !DILocation(line: 2486, column: 15, scope: !6082)
!6085 = !DILocation(line: 2486, column: 26, scope: !6082)
!6086 = !DILocation(line: 2486, column: 35, scope: !6082)
!6087 = !DILocation(line: 2486, column: 33, scope: !6082)
!6088 = !DILocation(line: 2486, column: 43, scope: !6082)
!6089 = !DILocation(line: 2486, column: 50, scope: !6082)
!6090 = !DILocation(line: 2486, column: 48, scope: !6082)
!6091 = !DILocation(line: 2486, column: 22, scope: !6082)
!6092 = !DILocation(line: 2487, column: 8, scope: !6082)
!6093 = !DILocation(line: 2487, column: 11, scope: !6082)
!6094 = !DILocation(line: 2487, column: 16, scope: !6082)
!6095 = !DILocation(line: 2488, column: 8, scope: !6082)
!6096 = !DILocation(line: 2488, column: 11, scope: !6082)
!6097 = !DILocation(line: 2488, column: 19, scope: !6082)
!6098 = !DILocation(line: 2488, column: 16, scope: !6082)
!6099 = !DILocation(line: 2489, column: 8, scope: !6082)
!6100 = !DILocation(line: 2489, column: 12, scope: !6082)
!6101 = !DILocation(line: 2489, column: 25, scope: !6082)
!6102 = !DILocation(line: 2490, column: 5, scope: !6082)
!6103 = !DILocation(line: 2490, column: 8, scope: !6082)
!6104 = !DILocation(line: 2490, column: 16, scope: !6082)
!6105 = !DILocation(line: 2490, column: 13, scope: !6082)
!6106 = !DILocation(line: 2486, column: 8, scope: !6079)
!6107 = !DILocation(line: 2491, column: 18, scope: !6082)
!6108 = !DILocation(line: 2491, column: 16, scope: !6082)
!6109 = !DILocation(line: 2491, column: 6, scope: !6082)
!6110 = !DILocation(line: 2492, column: 2, scope: !6079)
!6111 = !DILocation(line: 2483, column: 13, scope: !6075)
!6112 = !DILocation(line: 2483, column: 11, scope: !6075)
!6113 = !DILocation(line: 2482, column: 7, scope: !6075)
!6114 = distinct !{!6114, !6077, !6115}
!6115 = !DILocation(line: 2492, column: 2, scope: !6071)
!6116 = !DILocation(line: 2494, column: 11, scope: !6117)
!6117 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 2494, column: 11)
!6118 = !DILocation(line: 2494, column: 21, scope: !6117)
!6119 = !DILocation(line: 2494, column: 11, scope: !6066)
!6120 = !DILocation(line: 2495, column: 9, scope: !6117)
!6121 = !DILocation(line: 2495, column: 2, scope: !6117)
!6122 = !DILocation(line: 2496, column: 5, scope: !6066)
!6123 = !DILocation(line: 2498, column: 10, scope: !5999)
!6124 = !DILocation(line: 2498, column: 3, scope: !5999)
!6125 = !DILocation(line: 2499, column: 1, scope: !5999)
!6126 = distinct !DISubprogram(name: "get_mode_bounds", scope: !3, file: !3, line: 2505, type: !6127, scopeLine: 2508, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6127 = !DISubroutineType(types: !6128)
!6128 = !{null, !5, !1591, !5, !6129, !6129}
!6129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1672, size: 64)
!6130 = !DILocalVariable(name: "mode", arg: 1, scope: !6126, file: !3, line: 2505, type: !5)
!6131 = !DILocation(line: 2505, column: 36, scope: !6126)
!6132 = !DILocalVariable(name: "sign", arg: 2, scope: !6126, file: !3, line: 2505, type: !1591)
!6133 = !DILocation(line: 2505, column: 46, scope: !6126)
!6134 = !DILocalVariable(name: "target_mode", arg: 3, scope: !6126, file: !3, line: 2506, type: !5)
!6135 = !DILocation(line: 2506, column: 22, scope: !6126)
!6136 = !DILocalVariable(name: "mmin", arg: 4, scope: !6126, file: !3, line: 2507, type: !6129)
!6137 = !DILocation(line: 2507, column: 9, scope: !6126)
!6138 = !DILocalVariable(name: "mmax", arg: 5, scope: !6126, file: !3, line: 2507, type: !6129)
!6139 = !DILocation(line: 2507, column: 20, scope: !6126)
!6140 = !DILocalVariable(name: "size", scope: !6126, file: !3, line: 2509, type: !7)
!6141 = !DILocation(line: 2509, column: 12, scope: !6126)
!6142 = !DILocation(line: 2509, column: 19, scope: !6126)
!6143 = !DILocalVariable(name: "min_val", scope: !6126, file: !3, line: 2510, type: !1548)
!6144 = !DILocation(line: 2510, column: 26, scope: !6126)
!6145 = !DILocalVariable(name: "max_val", scope: !6126, file: !3, line: 2510, type: !1548)
!6146 = !DILocation(line: 2510, column: 35, scope: !6126)
!6147 = !DILocation(line: 2512, column: 3, scope: !6126)
!6148 = !DILocation(line: 2514, column: 7, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 2514, column: 7)
!6150 = !DILocation(line: 2514, column: 7, scope: !6126)
!6151 = !DILocation(line: 2516, column: 50, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2515, column: 5)
!6153 = !DILocation(line: 2516, column: 55, scope: !6152)
!6154 = !DILocation(line: 2516, column: 46, scope: !6152)
!6155 = !DILocation(line: 2516, column: 17, scope: !6152)
!6156 = !DILocation(line: 2516, column: 15, scope: !6152)
!6157 = !DILocation(line: 2517, column: 49, scope: !6152)
!6158 = !DILocation(line: 2517, column: 54, scope: !6152)
!6159 = !DILocation(line: 2517, column: 45, scope: !6152)
!6160 = !DILocation(line: 2517, column: 60, scope: !6152)
!6161 = !DILocation(line: 2517, column: 15, scope: !6152)
!6162 = !DILocation(line: 2518, column: 5, scope: !6152)
!6163 = !DILocation(line: 2521, column: 15, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2520, column: 5)
!6165 = !DILocation(line: 2522, column: 49, scope: !6164)
!6166 = !DILocation(line: 2522, column: 54, scope: !6164)
!6167 = !DILocation(line: 2522, column: 45, scope: !6164)
!6168 = !DILocation(line: 2522, column: 59, scope: !6164)
!6169 = !DILocation(line: 2522, column: 65, scope: !6164)
!6170 = !DILocation(line: 2522, column: 15, scope: !6164)
!6171 = !DILocation(line: 2525, column: 25, scope: !6126)
!6172 = !DILocation(line: 2525, column: 34, scope: !6126)
!6173 = !DILocation(line: 2525, column: 11, scope: !6126)
!6174 = !DILocation(line: 2525, column: 4, scope: !6126)
!6175 = !DILocation(line: 2525, column: 9, scope: !6126)
!6176 = !DILocation(line: 2526, column: 25, scope: !6126)
!6177 = !DILocation(line: 2526, column: 34, scope: !6126)
!6178 = !DILocation(line: 2526, column: 11, scope: !6126)
!6179 = !DILocation(line: 2526, column: 4, scope: !6126)
!6180 = !DILocation(line: 2526, column: 9, scope: !6126)
!6181 = !DILocation(line: 2527, column: 1, scope: !6126)
!6182 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !6183, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6183 = !DISubroutineType(types: !6184)
!6184 = !{!7, !3152}
!6185 = !DILocalVariable(name: "vec_", arg: 1, scope: !6182, file: !135, line: 182, type: !3152)
!6186 = !DILocation(line: 182, column: 1, scope: !6182)
!6187 = distinct !DISubprogram(name: "copy_self_referential_tree_r", scope: !3, file: !3, line: 180, type: !6188, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6188 = !DISubroutineType(types: !6189)
!6189 = !{!1494, !1861, !6190, !1778}
!6190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1591, size: 64)
!6191 = !DILocalVariable(name: "tp", arg: 1, scope: !6187, file: !3, line: 180, type: !1861)
!6192 = !DILocation(line: 180, column: 37, scope: !6187)
!6193 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !6187, file: !3, line: 180, type: !6190)
!6194 = !DILocation(line: 180, column: 46, scope: !6187)
!6195 = !DILocalVariable(name: "data", arg: 3, scope: !6187, file: !3, line: 180, type: !1778)
!6196 = !DILocation(line: 180, column: 67, scope: !6187)
!6197 = !DILocalVariable(name: "code", scope: !6187, file: !3, line: 182, type: !134)
!6198 = !DILocation(line: 182, column: 18, scope: !6187)
!6199 = !DILocation(line: 182, column: 25, scope: !6187)
!6200 = !DILocation(line: 185, column: 7, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 185, column: 7)
!6202 = !DILocation(line: 185, column: 30, scope: !6201)
!6203 = !DILocation(line: 186, column: 7, scope: !6201)
!6204 = !DILocation(line: 186, column: 10, scope: !6201)
!6205 = !DILocation(line: 186, column: 33, scope: !6201)
!6206 = !DILocation(line: 187, column: 7, scope: !6201)
!6207 = !DILocation(line: 187, column: 10, scope: !6201)
!6208 = !DILocation(line: 187, column: 33, scope: !6201)
!6209 = !DILocation(line: 185, column: 7, scope: !6187)
!6210 = !DILocation(line: 189, column: 8, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 188, column: 5)
!6212 = !DILocation(line: 189, column: 22, scope: !6211)
!6213 = !DILocation(line: 190, column: 7, scope: !6211)
!6214 = !DILocation(line: 194, column: 12, scope: !6215)
!6215 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 194, column: 12)
!6216 = !DILocation(line: 194, column: 17, scope: !6215)
!6217 = !DILocation(line: 195, column: 5, scope: !6215)
!6218 = !DILocation(line: 195, column: 8, scope: !6215)
!6219 = !DILocation(line: 195, column: 42, scope: !6215)
!6220 = !DILocation(line: 194, column: 12, scope: !6201)
!6221 = !DILocation(line: 197, column: 8, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6215, file: !3, line: 196, column: 5)
!6223 = !DILocation(line: 197, column: 22, scope: !6222)
!6224 = !DILocation(line: 198, column: 7, scope: !6222)
!6225 = !DILocation(line: 202, column: 12, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6215, file: !3, line: 202, column: 12)
!6227 = !DILocation(line: 202, column: 17, scope: !6226)
!6228 = !DILocation(line: 202, column: 12, scope: !6215)
!6229 = !DILocalVariable(name: "inner", scope: !6230, file: !3, line: 204, type: !1494)
!6230 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 203, column: 5)
!6231 = !DILocation(line: 204, column: 12, scope: !6230)
!6232 = !DILocation(line: 205, column: 20, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 205, column: 7)
!6234 = !DILocation(line: 205, column: 18, scope: !6233)
!6235 = !DILocation(line: 205, column: 12, scope: !6233)
!6236 = !DILocation(line: 206, column: 5, scope: !6237)
!6237 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 205, column: 7)
!6238 = !DILocation(line: 205, column: 7, scope: !6233)
!6239 = !DILocation(line: 207, column: 13, scope: !6237)
!6240 = !DILocation(line: 207, column: 11, scope: !6237)
!6241 = !DILocation(line: 205, column: 7, scope: !6237)
!6242 = distinct !{!6242, !6238, !6243}
!6243 = !DILocation(line: 208, column: 2, scope: !6233)
!6244 = !DILocation(line: 210, column: 11, scope: !6245)
!6245 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 210, column: 11)
!6246 = !DILocation(line: 210, column: 29, scope: !6245)
!6247 = !DILocation(line: 210, column: 11, scope: !6230)
!6248 = !DILocation(line: 212, column: 5, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6245, file: !3, line: 211, column: 2)
!6250 = !DILocation(line: 212, column: 19, scope: !6249)
!6251 = !DILocation(line: 213, column: 4, scope: !6249)
!6252 = !DILocation(line: 215, column: 5, scope: !6230)
!6253 = !DILocation(line: 222, column: 12, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 222, column: 12)
!6255 = !DILocation(line: 222, column: 17, scope: !6254)
!6256 = !DILocation(line: 222, column: 12, scope: !6226)
!6257 = !DILocation(line: 223, column: 12, scope: !6254)
!6258 = !DILocation(line: 223, column: 5, scope: !6254)
!6259 = !DILocation(line: 225, column: 23, scope: !6187)
!6260 = !DILocation(line: 225, column: 27, scope: !6187)
!6261 = !DILocation(line: 225, column: 42, scope: !6187)
!6262 = !DILocation(line: 225, column: 10, scope: !6187)
!6263 = !DILocation(line: 225, column: 3, scope: !6187)
!6264 = !DILocation(line: 226, column: 1, scope: !6187)
!6265 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !6266, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6266 = !DISubroutineType(types: !6267)
!6267 = !{null, !6268}
!6268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2909, size: 64)
!6269 = !DILocalVariable(name: "vec_", arg: 1, scope: !6265, file: !135, line: 184, type: !6268)
!6270 = !DILocation(line: 184, column: 1, scope: !6265)
!6271 = !DILocation(line: 184, column: 1, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6265, file: !135, line: 184, column: 1)
!6273 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !135, file: !135, line: 183, type: !6274, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6274 = !DISubroutineType(types: !6275)
!6275 = !{!1861, !3167, !1494}
!6276 = !DILocalVariable(name: "vec_", arg: 1, scope: !6273, file: !135, line: 183, type: !3167)
!6277 = !DILocation(line: 183, column: 1, scope: !6273)
!6278 = !DILocalVariable(name: "obj_", arg: 2, scope: !6273, file: !135, line: 183, type: !1494)
!6279 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !135, file: !135, line: 183, type: !6280, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6280 = !DISubroutineType(types: !6281)
!6281 = !{!1591, !3167, !1591}
!6282 = !DILocalVariable(name: "vec_", arg: 1, scope: !6279, file: !135, line: 183, type: !3167)
!6283 = !DILocation(line: 183, column: 1, scope: !6279)
!6284 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6279, file: !135, line: 183, type: !1591)
!6285 = !DILocalVariable(name: "extend", scope: !6279, file: !135, line: 183, type: !1591)
!6286 = !DILocation(line: 183, column: 1, scope: !6287)
!6287 = distinct !DILexicalBlock(scope: !6279, file: !135, line: 183, column: 1)
!6288 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !6289, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6289 = !DISubroutineType(types: !6290)
!6290 = !{!1861, !6291, !1494}
!6291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2499, size: 64)
!6292 = !DILocalVariable(name: "vec_", arg: 1, scope: !6288, file: !135, line: 182, type: !6291)
!6293 = !DILocation(line: 182, column: 1, scope: !6288)
!6294 = !DILocalVariable(name: "obj_", arg: 2, scope: !6288, file: !135, line: 182, type: !1494)
!6295 = !DILocalVariable(name: "slot_", scope: !6288, file: !135, line: 182, type: !1861)
!6296 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !6297, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2810)
!6297 = !DISubroutineType(types: !6298)
!6298 = !{!1591, !6291, !1591}
!6299 = !DILocalVariable(name: "vec_", arg: 1, scope: !6296, file: !135, line: 182, type: !6291)
!6300 = !DILocation(line: 182, column: 1, scope: !6296)
!6301 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6296, file: !135, line: 182, type: !1591)
