; ModuleID = 'tree-ssa-dce.c'
source_filename = "tree-ssa-dce.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.stmt_stats = type { i32, i32, i32, i32 }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.edge_list = type { i32, i32, %struct.edge_def** }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.ao_ref_s = type { %union.tree_node*, %union.tree_node*, i64, i64, i64, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque

@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str = private unnamed_addr constant [31 x i8] c"Marking result for renaming : \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"dce\00", align 1
@pass_dce = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8 ()* @gate_dce, i32 ()* @tree_ssa_dce, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 76, i32 40, i32 0, i32 0, i32 0, i32 5 } }, align 8, !dbg !0
@.str.3 = private unnamed_addr constant [8 x i8] c"dceloop\00", align 1
@pass_dce_loop = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8 ()* @gate_dce, i32 ()* @tree_ssa_dce_loop, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 76, i32 40, i32 0, i32 0, i32 0, i32 5 } }, align 8, !dbg !2807
@.str.4 = private unnamed_addr constant [6 x i8] c"cddce\00", align 1
@pass_cd_dce = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8 ()* @gate_dce, i32 ()* @tree_ssa_cd_dce, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 77, i32 40, i32 0, i32 0, i32 0, i32 13 } }, align 8, !dbg !2835
@.str.5 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@flag_tree_dce = external dso_local global i32, align 4
@timevar_enable = external dso_local global i8, align 1
@cfun = external dso_local global %struct.function*, align 8
@visited_control_parents = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2858
@longest_chain = internal global i32 0, align 4, !dbg !2860
@total_chain = internal global i32 0, align 4, !dbg !2862
@nr_walks = internal global i32 0, align 4, !dbg !2864
@chain_ovfl = internal global i8 0, align 1, !dbg !2866
@visited = internal global %struct.bitmap_head_def* null, align 8, !dbg !2868
@cfg_altered = internal global i8 0, align 1, !dbg !2870
@.str.8 = private unnamed_addr constant [19 x i8] c"Statements deleted\00", align 1
@stats = internal global %struct.stmt_stats zeroinitializer, align 4, !dbg !2872
@.str.9 = private unnamed_addr constant [18 x i8] c"PHI nodes deleted\00", align 1
@control_dependence_map = internal global %struct.bitmap_head_def** null, align 8, !dbg !2837
@last_stmt_necessary = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2839
@bb_contains_live_stmts = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2852
@processed = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2854
@worklist = internal global %struct.VEC_gimple_heap* null, align 8, !dbg !2856
@.str.10 = private unnamed_addr constant [15 x i8] c"tree-ssa-dce.c\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.12 = private unnamed_addr constant [46 x i8] c"Marking back edge of irreducible loop %i->%i\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c"can not prove finiteness of loop %i\0A\00", align 1
@flag_non_call_exceptions = external dso_local global i32, align 4
@.str.14 = private unnamed_addr constant [22 x i8] c"Marking useful stmt: \00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.15 = private unnamed_addr constant [23 x i8] c"\0AProcessing worklist:\0A\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"processing: \00", align 1
@.str.17 = private unnamed_addr constant [27 x i8] c"marking necessary through \00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c" stmt \00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.19 = private unnamed_addr constant [38 x i8] c"\0AEliminating unnecessary statements:\0A\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"Deleting LHS of call: \00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.21 = private unnamed_addr constant [12 x i8] c"Deleting : \00", align 1
@.str.22 = private unnamed_addr constant [31 x i8] c"Redirecting edge %i->%i to %i\0A\00", align 1
@.str.23 = private unnamed_addr constant [36 x i8] c"Removed %d of %d statements (%d%%)\0A\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"Removed %d of %d PHI nodes (%d%%)\0A\00", align 1
@optimize = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_virtual_phi_result_for_renaming(%union.gimple_statement_d* %phi) #0 !dbg !2884 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %used = alloca i8, align 1
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %result_ssa = alloca %union.tree_node*, align 8
  %result_var = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !2888, metadata !DIExpression()), !dbg !2889
  call void @llvm.dbg.declare(metadata i8* %used, metadata !2890, metadata !DIExpression()), !dbg !2891
  store i8 0, i8* %used, align 1, !dbg !2891
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !2892, metadata !DIExpression()), !dbg !2900
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !2901, metadata !DIExpression()), !dbg !2902
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2903, metadata !DIExpression()), !dbg !2904
  call void @llvm.dbg.declare(metadata %union.tree_node** %result_ssa, metadata !2905, metadata !DIExpression()), !dbg !2906
  call void @llvm.dbg.declare(metadata %union.tree_node** %result_var, metadata !2907, metadata !DIExpression()), !dbg !2908
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2909
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !2909
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2911

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !2912
  %and = and i32 %1, 8, !dbg !2913
  %tobool1 = icmp ne i32 %and, 0, !dbg !2913
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2914

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2915
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)), !dbg !2917
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2918
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !2919
  call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %4, i32 0, i32 2), !dbg !2920
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2921
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2922
  br label %if.end, !dbg !2923

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !2924
  %call3 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %6), !dbg !2925
  store %union.tree_node* %call3, %union.tree_node** %result_ssa, align 8, !dbg !2926
  %7 = load %union.tree_node*, %union.tree_node** %result_ssa, align 8, !dbg !2927
  %ssa_name = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !2927
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !2927
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2927
  store %union.tree_node* %8, %union.tree_node** %result_var, align 8, !dbg !2928
  %9 = load %union.tree_node*, %union.tree_node** %result_ssa, align 8, !dbg !2929
  %call4 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %9), !dbg !2929
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %stmt, align 8, !dbg !2929
  br label %for.cond, !dbg !2929

for.cond:                                         ; preds = %for.inc14, %if.end
  %call5 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !2931
  %tobool6 = icmp ne i8 %call5, 0, !dbg !2931
  %lnot = xor i1 %tobool6, true, !dbg !2931
  br i1 %lnot, label %for.body, label %for.end16, !dbg !2929

for.body:                                         ; preds = %for.cond
  %call7 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !2933
  store %struct.ssa_use_operand_d* %call7, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2933
  br label %for.cond8, !dbg !2933

for.cond8:                                        ; preds = %for.inc, %for.body
  %call9 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !2936
  %tobool10 = icmp ne i8 %call9, 0, !dbg !2936
  %lnot11 = xor i1 %tobool10, true, !dbg !2936
  br i1 %lnot11, label %for.body12, label %for.end, !dbg !2933

for.body12:                                       ; preds = %for.cond8
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2938
  %11 = load %union.tree_node*, %union.tree_node** %result_var, align 8, !dbg !2938
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %10, %union.tree_node* %11), !dbg !2938
  br label %for.inc, !dbg !2938

for.inc:                                          ; preds = %for.body12
  %call13 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !2936
  store %struct.ssa_use_operand_d* %call13, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2936
  br label %for.cond8, !dbg !2936, !llvm.loop !2939

for.end:                                          ; preds = %for.cond8
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2941
  call void @update_stmt(%union.gimple_statement_d* %12), !dbg !2942
  store i8 1, i8* %used, align 1, !dbg !2943
  br label %for.inc14, !dbg !2944

for.inc14:                                        ; preds = %for.end
  %call15 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !2931
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %stmt, align 8, !dbg !2931
  br label %for.cond, !dbg !2931, !llvm.loop !2945

for.end16:                                        ; preds = %for.cond
  %13 = load i8, i8* %used, align 1, !dbg !2947
  %tobool17 = icmp ne i8 %13, 0, !dbg !2947
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !2949

if.then18:                                        ; preds = %for.end16
  %14 = load %union.tree_node*, %union.tree_node** %result_var, align 8, !dbg !2950
  call void @mark_sym_for_renaming(%union.tree_node* %14), !dbg !2951
  br label %if.end19, !dbg !2951

if.end19:                                         ; preds = %if.then18, %for.end16
  ret void, !dbg !2952
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !2953 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2957, metadata !DIExpression()), !dbg !2958
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2959
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !2960
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !2961
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !2961
  ret %union.tree_node* %1, !dbg !2962
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !2963 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !2968, metadata !DIExpression()), !dbg !2969
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !2970, metadata !DIExpression()), !dbg !2971
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2972
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !2972
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !2972
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2973
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !2974
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !2975
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2976
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !2977
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !2977
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !2978
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !2978
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2979
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !2980
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !2981
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2982
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !2983
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !2984
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2985
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !2986
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !2987
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !2988
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2989
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !2990
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !2991
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !2992
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2993
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !2994
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !2995
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !2996
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !2997
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !2998
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !2999
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !3000
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !3001
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3002
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !3004
  %tobool = icmp ne i8 %call, 0, !dbg !3004
  br i1 %tobool, label %if.then, label %if.end, !dbg !3005

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !3006
  br label %return, !dbg !3006

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3007
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !3008
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !3008
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3009
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !3010
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3011
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !3011
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !3011
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !3011
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !3011
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !3011
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !3012
  br label %return, !dbg !3012

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !3013
  ret %union.gimple_statement_d* %18, !dbg !3013
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3014 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3019, metadata !DIExpression()), !dbg !3020
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3021
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3022
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3022
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3023
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3024
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3024
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3025
  %conv = zext i1 %cmp to i32, !dbg !3025
  %conv1 = trunc i32 %conv to i8, !dbg !3026
  ret i8 %conv1, !dbg !3027
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3028 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3031, metadata !DIExpression()), !dbg !3032
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3033
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3034
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3034
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !3035
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3035
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3036
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !3037
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !3038
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3039
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !3040
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !3040
  ret %struct.ssa_use_operand_d* %5, !dbg !3041
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3042 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3043, metadata !DIExpression()), !dbg !3044
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3045
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3046
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3046
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3047
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !3048
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !3049
  %conv = zext i1 %cmp to i32, !dbg !3049
  %conv1 = trunc i32 %conv to i8, !dbg !3050
  ret i8 %conv1, !dbg !3051
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !3052 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3055, metadata !DIExpression()), !dbg !3056
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !3057, metadata !DIExpression()), !dbg !3058
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3059
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !3060
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3061
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3062
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !3063
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3063
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !3064
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3065
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !3066
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !3067
  ret void, !dbg !3068
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3069 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3070, metadata !DIExpression()), !dbg !3071
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3072
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !3073
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !3073
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3074
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !3075
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3076
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3077
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !3079
  %tobool = icmp ne i8 %call, 0, !dbg !3079
  br i1 %tobool, label %if.then, label %if.else, !dbg !3080

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3081
  br label %return, !dbg !3081

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3082
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !3084
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !3084
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !3085
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3085
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3086
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !3087
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !3088
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3089
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !3090
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !3090
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3091
  br label %return, !dbg !3091

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3092
  ret %struct.ssa_use_operand_d* %10, !dbg !3092
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !3093 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3094, metadata !DIExpression()), !dbg !3095
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3096
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3098
  %tobool = icmp ne i8 %call, 0, !dbg !3098
  br i1 %tobool, label %if.then, label %if.end, !dbg !3099

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3100
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !3102
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3103
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !3104
  br label %if.end, !dbg !3105

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3106
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3107 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3110, metadata !DIExpression()), !dbg !3111
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3112
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !3113
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !3114
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3114
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3115
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !3116
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3117
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3118
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !3120
  %tobool = icmp ne i8 %call, 0, !dbg !3120
  br i1 %tobool, label %if.then, label %if.end4, !dbg !3121

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3122
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !3125
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !3126
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3126
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !3127
  br i1 %cmp, label %if.then2, label %if.end, !dbg !3128

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3129
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !3130
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !3131
  br label %if.end, !dbg !3131

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !3132
  br label %return, !dbg !3132

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3133
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !3134
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !3134
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3135
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !3136
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3137
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !3137
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !3137
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !3137
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !3137
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3137
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !3138
  br label %return, !dbg !3138

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !3139
  ret %union.gimple_statement_d* %13, !dbg !3139
}

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_dce() #0 !dbg !3140 {
entry:
  %0 = load i32, i32* @flag_tree_dce, align 4, !dbg !3141
  %cmp = icmp ne i32 %0, 0, !dbg !3142
  %conv = zext i1 %cmp to i32, !dbg !3142
  %conv1 = trunc i32 %conv to i8, !dbg !3141
  ret i8 %conv1, !dbg !3143
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_ssa_dce() #0 !dbg !3144 {
entry:
  %call = call i32 @perform_tree_ssa_dce(i8 zeroext 0), !dbg !3145
  ret i32 %call, !dbg !3146
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_ssa_dce_loop() #0 !dbg !3147 {
entry:
  %todo = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %todo, metadata !3148, metadata !DIExpression()), !dbg !3149
  %call = call i32 @perform_tree_ssa_dce(i8 zeroext 0), !dbg !3150
  store i32 %call, i32* %todo, align 4, !dbg !3151
  %0 = load i32, i32* %todo, align 4, !dbg !3152
  %tobool = icmp ne i32 %0, 0, !dbg !3152
  br i1 %tobool, label %if.then, label %if.end, !dbg !3154

if.then:                                          ; preds = %entry
  call void @free_numbers_of_iterations_estimates(), !dbg !3155
  call void @scev_reset(), !dbg !3157
  br label %if.end, !dbg !3158

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %todo, align 4, !dbg !3159
  ret i32 %1, !dbg !3160
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_ssa_cd_dce() #0 !dbg !3161 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3162
  %cmp = icmp sge i32 %0, 2, !dbg !3163
  %conv = zext i1 %cmp to i32, !dbg !3163
  %conv1 = trunc i32 %conv to i8, !dbg !3162
  %call = call i32 @perform_tree_ssa_dce(i8 zeroext %conv1), !dbg !3164
  ret i32 %call, !dbg !3165
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !3166 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !3169, metadata !DIExpression()), !dbg !3170
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3171, metadata !DIExpression()), !dbg !3172
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !3173, metadata !DIExpression()), !dbg !3174
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !3175, metadata !DIExpression()), !dbg !3176
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3177
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3176
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !3178, metadata !DIExpression()), !dbg !3179
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3180
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !3180
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !3180
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3180
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !3179
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !3181, metadata !DIExpression()), !dbg !3182
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3183
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !3183
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !3182
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !3184, metadata !DIExpression()), !dbg !3197
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !3198, metadata !DIExpression()), !dbg !3199
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !3200
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !3201
  %conv = zext i8 %call1 to i32, !dbg !3201
  %tobool = icmp ne i32 %conv, 0, !dbg !3201
  %5 = zext i1 %tobool to i64, !dbg !3201
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !3201
  store i32 %cond, i32* %flag, align 4, !dbg !3202
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !3203
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !3205
  %cmp = icmp eq i32 %call2, 16, !dbg !3206
  br i1 %cmp, label %if.then, label %if.else, !dbg !3207

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !3208
  %8 = load i32, i32* %flag, align 4, !dbg !3208
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !3208
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3208
  br label %for.cond, !dbg !3208

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !3211
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3211
  %lnot = xor i1 %tobool6, true, !dbg !3211
  br i1 %lnot, label %for.body, label %for.end, !dbg !3208

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3213
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !3213
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !3215
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !3216
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !3217

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3218
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3219
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3220
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !3221
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3222
  br label %if.end, !dbg !3223

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !3215

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !3211
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3211
  br label %for.cond, !dbg !3211, !llvm.loop !3224

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !3226

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !3227
  %cmp13 = icmp eq i32 %14, 1, !dbg !3230
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !3231

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !3232
  %16 = load i32, i32* %flag, align 4, !dbg !3232
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !3232
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3232
  br label %for.cond17, !dbg !3232

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !3235
  %tobool19 = icmp ne i8 %call18, 0, !dbg !3235
  %lnot20 = xor i1 %tobool19, true, !dbg !3235
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !3232

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3237
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !3237
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !3239
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !3240
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !3241

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3242
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3243
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3244
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !3245
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3246
  br label %if.end27, !dbg !3247

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !3239

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !3235
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3235
  br label %for.cond17, !dbg !3235, !llvm.loop !3248

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !3250

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !3251
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !3253
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3254
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !3255
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !3256

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3257
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !3257
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !3260
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !3261
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !3262

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3263
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3264
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3265
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !3266
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3267
  br label %if.end41, !dbg !3268

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !3269

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3270
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !3272
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !3273
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3273
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !3274
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !3275

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3276
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !3277
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !3278
  br label %if.end49, !dbg !3278

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3279
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !3280
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !3281
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !3282
  ret void, !dbg !3283
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !3284 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3287, metadata !DIExpression()), !dbg !3288
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3289
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !3290
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3290
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3291
  ret %union.tree_node* %2, !dbg !3292
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3293 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3296, metadata !DIExpression()), !dbg !3297
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3298
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3299
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3300
  %bf.load = load i32, i32* %1, align 8, !dbg !3300
  %bf.clear = and i32 %bf.load, 255, !dbg !3300
  ret i32 %bf.clear, !dbg !3301
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !3302 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3306, metadata !DIExpression()), !dbg !3307
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !3308, metadata !DIExpression()), !dbg !3309
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3310, metadata !DIExpression()), !dbg !3311
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !3312, metadata !DIExpression()), !dbg !3313
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3314
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !3315
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !3313
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !3316, metadata !DIExpression()), !dbg !3317
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3318
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !3319
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3320
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !3321
  store i8 0, i8* %done, align 8, !dbg !3322
  %3 = load i32, i32* %flags.addr, align 4, !dbg !3323
  %and = and i32 %3, 5, !dbg !3323
  %cmp = icmp ne i32 %and, 0, !dbg !3323
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3323

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !3323
  br label %cond.end, !dbg !3323

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3323

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3323
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !3324
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !3325
  %conv = zext i8 %call1 to i32, !dbg !3325
  %tobool = icmp ne i32 %conv, 0, !dbg !3325
  %5 = zext i1 %tobool to i64, !dbg !3325
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !3325
  store i32 %cond2, i32* %comp, align 4, !dbg !3326
  %6 = load i32, i32* %flags.addr, align 4, !dbg !3327
  %7 = load i32, i32* %comp, align 4, !dbg !3329
  %and3 = and i32 %6, %7, !dbg !3330
  %cmp4 = icmp eq i32 %and3, 0, !dbg !3331
  br i1 %cmp4, label %if.then, label %if.end, !dbg !3332

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3333
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !3335
  store i8 1, i8* %done6, align 8, !dbg !3336
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3337
  br label %return, !dbg !3337

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3338
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3339
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !3340
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !3341
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3342
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !3343
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3344
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !3345
  store i32 %call7, i32* %num_phi, align 4, !dbg !3346
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3347
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !3348
  store i32 2, i32* %iter_type, align 4, !dbg !3349
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3350
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !3351
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3352
  br label %return, !dbg !3352

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3353
  ret %struct.ssa_use_operand_d* %15, !dbg !3353
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !3354 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3359, metadata !DIExpression()), !dbg !3360
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3361
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !3362
  %1 = load i8, i8* %done, align 8, !dbg !3362
  ret i8 %1, !dbg !3363
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !3364 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !3367, metadata !DIExpression()), !dbg !3368
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !3369, metadata !DIExpression()), !dbg !3370
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !3371, metadata !DIExpression()), !dbg !3372
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !3373
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !3375
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !3376
  br i1 %cmp, label %if.then, label %if.end3, !dbg !3377

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !3378
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3381
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3381
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !3382
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !3383
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !3384

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !3385
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !3386
  br label %if.end, !dbg !3387

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !3388
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !3390
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !3391
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !3392
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !3393
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !3394
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !3395
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !3396

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !3397
  ret %struct.ssa_use_operand_d* %10, !dbg !3398
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !3399 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3402, metadata !DIExpression()), !dbg !3403
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !3404, metadata !DIExpression()), !dbg !3405
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3406
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !3408
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !3408
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !3406
  br i1 %tobool, label %if.then, label %if.end, !dbg !3409

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3410
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !3410
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !3410
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !3410
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3412
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3413
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !3414
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !3414
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !3415
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !3415
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3416
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !3417
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !3418
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3419
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3420
  br label %return, !dbg !3420

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3421
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !3423
  %10 = load i32, i32* %phi_i, align 8, !dbg !3423
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3424
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !3425
  %12 = load i32, i32* %num_phi, align 4, !dbg !3425
  %cmp = icmp slt i32 %10, %12, !dbg !3426
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !3427

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3428
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !3428
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !3428
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3428
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !3428
  %16 = load i32, i32* %phi_i5, align 8, !dbg !3428
  %inc = add nsw i32 %16, 1, !dbg !3428
  store i32 %inc, i32* %phi_i5, align 8, !dbg !3428
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !3428
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3430
  br label %return, !dbg !3430

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3431
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !3432
  store i8 1, i8* %done, align 8, !dbg !3433
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3434
  br label %return, !dbg !3434

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3435
  ret %struct.ssa_use_operand_d* %18, !dbg !3435
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !3436 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3437, metadata !DIExpression()), !dbg !3438
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3439, metadata !DIExpression()), !dbg !3440
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3441, metadata !DIExpression()), !dbg !3442
  %0 = load i32, i32* %flags.addr, align 4, !dbg !3443
  %and = and i32 %0, 10, !dbg !3443
  %cmp = icmp eq i32 %and, 0, !dbg !3443
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !3443

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !3443
  %and1 = and i32 %1, 1, !dbg !3443
  %tobool = icmp ne i32 %and1, 0, !dbg !3443
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3443

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !3443
  br label %cond.end, !dbg !3443

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3443

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3443
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3444
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3445
  %4 = load i32, i32* %flags.addr, align 4, !dbg !3446
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !3447
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3448
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !3449
  store i32 2, i32* %iter_type, align 4, !dbg !3450
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3451
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !3452
  ret %struct.ssa_use_operand_d* %call, !dbg !3453
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !3454 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3457, metadata !DIExpression()), !dbg !3458
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !3459, metadata !DIExpression()), !dbg !3460
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3461
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !3463
  %tobool = icmp ne i8 %call, 0, !dbg !3463
  br i1 %tobool, label %if.end, label %if.then, !dbg !3464

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3465
  br label %return, !dbg !3465

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3466
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !3467
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !3468
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !3469
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !3469
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !3470
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !3471
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !3471
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !3473

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !3474
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !3474
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !3475
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !3475
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3476
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !3477
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !3478
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !3479
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !3480

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !3481
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !3481
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3482
  br label %return, !dbg !3482

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3483
  br label %return, !dbg !3483

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3484
  ret %struct.ssa_use_operand_d* %8, !dbg !3484
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !3485 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !3488, metadata !DIExpression()), !dbg !3489
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3490
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !3492
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3492
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !3493
  br i1 %cmp, label %if.then, label %if.end, !dbg !3494

if.then:                                          ; preds = %entry
  br label %return, !dbg !3495

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3496
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3497
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3497
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3498
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !3499
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !3499
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !3500
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !3501
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3502
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !3503
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !3503
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3504
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !3505
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !3505
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !3506
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !3507
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3508
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !3509
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !3510
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3511
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !3512
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !3513
  br label %return, !dbg !3514

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3514
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !3515 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !3518, metadata !DIExpression()), !dbg !3519
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !3520, metadata !DIExpression()), !dbg !3521
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !3522
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3523
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !3524
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3525
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !3526
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3527
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3527
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3528
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !3529
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !3530
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3531
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !3532
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !3533
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !3533
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !3534
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !3535
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3536
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !3537
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !3538
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !3539
  ret void, !dbg !3540
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !3541 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3544, metadata !DIExpression()), !dbg !3545
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3546
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !3547
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !3548
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3549
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !3550
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !3551
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3552
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !3553
  store i32 0, i32* %iter_type, align 4, !dbg !3554
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3555
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !3556
  store i32 0, i32* %phi_i, align 8, !dbg !3557
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3558
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !3559
  store i32 0, i32* %num_phi, align 4, !dbg !3560
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3561
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !3562
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !3563
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3564
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !3565
  store i8 1, i8* %done, align 8, !dbg !3566
  ret void, !dbg !3567
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !3568 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3571, metadata !DIExpression()), !dbg !3572
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3573
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3574
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !3575
  %1 = load i32, i32* %nargs, align 4, !dbg !3575
  ret i32 %1, !dbg !3576
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3577 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3580, metadata !DIExpression()), !dbg !3581
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3582, metadata !DIExpression()), !dbg !3583
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3584
  %1 = load i32, i32* %i.addr, align 4, !dbg !3585
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !3586
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !3587
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !3588
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !3589 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3593, metadata !DIExpression()), !dbg !3594
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3595, metadata !DIExpression()), !dbg !3596
  %0 = load i32, i32* %index.addr, align 4, !dbg !3597
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3597
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !3597
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !3597
  %2 = load i32, i32* %capacity, align 8, !dbg !3597
  %cmp = icmp ule i32 %0, %2, !dbg !3597
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3597

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !3597
  br label %cond.end, !dbg !3597

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3597

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3597
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3598
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !3599
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !3600
  %4 = load i32, i32* %index.addr, align 4, !dbg !3601
  %idxprom = zext i32 %4 to i64, !dbg !3598
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !3598
  ret %struct.phi_arg_d* %arrayidx, !dbg !3602
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !3603 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !3606, metadata !DIExpression()), !dbg !3607
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3608, metadata !DIExpression()), !dbg !3609
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3610, metadata !DIExpression()), !dbg !3611
  %0 = load i32, i32* %flags.addr, align 4, !dbg !3612
  %and = and i32 %0, 8, !dbg !3612
  %tobool = icmp ne i32 %and, 0, !dbg !3612
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !3612

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !3612
  %and1 = and i32 %1, 2, !dbg !3612
  %tobool2 = icmp ne i32 %and1, 0, !dbg !3612
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !3612

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !3612
  %and3 = and i32 %2, 4, !dbg !3612
  %tobool4 = icmp ne i32 %and3, 0, !dbg !3612
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !3612

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !3612
  %and6 = and i32 %3, 1, !dbg !3612
  %tobool7 = icmp ne i32 %and6, 0, !dbg !3612
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !3612

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !3612
  br label %cond.end, !dbg !3612

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !3612

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3612
  %4 = load i32, i32* %flags.addr, align 4, !dbg !3613
  %and8 = and i32 %4, 10, !dbg !3614
  %tobool9 = icmp ne i32 %and8, 0, !dbg !3614
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !3615

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3616
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !3617
  br label %cond.end12, !dbg !3615

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !3615

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !3615
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3618
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !3619
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !3620
  %7 = load i32, i32* %flags.addr, align 4, !dbg !3621
  %and14 = and i32 %7, 8, !dbg !3623
  %tobool15 = icmp ne i32 %and14, 0, !dbg !3623
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !3624

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3625
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !3626
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !3626
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !3625
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !3627

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3628
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !3629
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !3630
  br i1 %cmp, label %if.then, label %if.end, !dbg !3631

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3632
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !3633
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !3633
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !3634
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !3634
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3635
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !3636
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !3637
  br label %if.end, !dbg !3635

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !3638
  %and23 = and i32 %15, 5, !dbg !3639
  %tobool24 = icmp ne i32 %and23, 0, !dbg !3639
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !3640

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3641
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !3642
  br label %cond.end28, !dbg !3640

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !3640

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !3640
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3643
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !3644
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !3645
  %18 = load i32, i32* %flags.addr, align 4, !dbg !3646
  %and30 = and i32 %18, 4, !dbg !3648
  %tobool31 = icmp ne i32 %and30, 0, !dbg !3648
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !3649

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3650
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !3651
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !3651
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !3650
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !3652

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3653
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !3654
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !3655
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !3656

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3657
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !3658
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !3658
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !3659
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !3659
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3660
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !3661
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !3662
  br label %if.end42, !dbg !3660

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3663
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !3664
  store i8 0, i8* %done, align 8, !dbg !3665
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3666
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !3667
  store i32 0, i32* %phi_i, align 8, !dbg !3668
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3669
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !3670
  store i32 0, i32* %num_phi, align 4, !dbg !3671
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !3672
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !3673
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !3674
  ret void, !dbg !3675
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !3676 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3681
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3683
  %tobool = icmp ne i8 %call, 0, !dbg !3683
  br i1 %tobool, label %if.end, label %if.then, !dbg !3684

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !3685
  br label %return, !dbg !3685

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3686
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !3687
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !3688
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !3689
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !3689
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !3690
  br label %return, !dbg !3690

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !3691
  ret %struct.def_optype_d* %3, !dbg !3691
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !3692 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3693, metadata !DIExpression()), !dbg !3694
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3695
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !3697
  %tobool = icmp ne i8 %call, 0, !dbg !3697
  br i1 %tobool, label %if.end, label %if.then, !dbg !3698

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3699
  br label %return, !dbg !3699

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3700
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !3701
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !3702
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !3702
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !3703
  br label %return, !dbg !3703

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3704
  ret %union.tree_node* %3, !dbg !3704
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !3705 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3710
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3712
  %tobool = icmp ne i8 %call, 0, !dbg !3712
  br i1 %tobool, label %if.end, label %if.then, !dbg !3713

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !3714
  br label %return, !dbg !3714

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3715
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !3716
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !3717
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !3718
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !3718
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !3719
  br label %return, !dbg !3719

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !3720
  ret %struct.use_optype_d* %3, !dbg !3720
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !3721 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3722, metadata !DIExpression()), !dbg !3723
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3724
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !3726
  %tobool = icmp ne i8 %call, 0, !dbg !3726
  br i1 %tobool, label %if.end, label %if.then, !dbg !3727

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3728
  br label %return, !dbg !3728

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3729
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !3730
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !3731
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !3731
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !3732
  br label %return, !dbg !3732

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3733
  ret %union.tree_node* %3, !dbg !3733
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !3734 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3737, metadata !DIExpression()), !dbg !3738
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3739
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3740
  %cmp = icmp uge i32 %call, 1, !dbg !3741
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3742

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3743
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3744
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3745
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3746
  %land.ext = zext i1 %2 to i32, !dbg !3742
  %conv = trunc i32 %land.ext to i8, !dbg !3740
  ret i8 %conv, !dbg !3747
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !3748 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3749, metadata !DIExpression()), !dbg !3750
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3751
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3752
  %cmp = icmp uge i32 %call, 6, !dbg !3753
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3754

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3755
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3756
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3757
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3758
  %land.ext = zext i1 %2 to i32, !dbg !3754
  %conv = trunc i32 %land.ext to i8, !dbg !3752
  ret i8 %conv, !dbg !3759
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !3760 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !3763, metadata !DIExpression()), !dbg !3764
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !3765, metadata !DIExpression()), !dbg !3766
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !3767, metadata !DIExpression()), !dbg !3768
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !3769
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3769
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3771

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !3772
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3772
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3772
  %bf.load = load i64, i64* %2, align 8, !dbg !3772
  %bf.clear = and i64 %bf.load, 65535, !dbg !3772
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3772
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !3773
  br i1 %cmp, label %if.then, label %if.else, !dbg !3774

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3775
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !3776
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !3777
  br label %if.end, !dbg !3775

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !3778
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !3778
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3778
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !3780
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !3781
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !3782
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !3783
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3784
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @perform_tree_ssa_dce(i8 zeroext %aggressive) #0 !dbg !3785 {
entry:
  %retval = alloca i32, align 4
  %aggressive.addr = alloca i8, align 1
  %el = alloca %struct.edge_list*, align 8
  %something_changed = alloca i8, align 1
  store i8 %aggressive, i8* %aggressive.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %aggressive.addr, metadata !3788, metadata !DIExpression()), !dbg !3789
  call void @llvm.dbg.declare(metadata %struct.edge_list** %el, metadata !3790, metadata !DIExpression()), !dbg !3798
  store %struct.edge_list* null, %struct.edge_list** %el, align 8, !dbg !3798
  call void @llvm.dbg.declare(metadata i8* %something_changed, metadata !3799, metadata !DIExpression()), !dbg !3800
  store i8 0, i8* %something_changed, align 1, !dbg !3800
  %0 = load i8, i8* %aggressive.addr, align 1, !dbg !3801
  %tobool = icmp ne i8 %0, 0, !dbg !3801
  br i1 %tobool, label %if.then, label %if.end, !dbg !3803

if.then:                                          ; preds = %entry
  call void @loop_optimizer_init(i32 15), !dbg !3804
  br label %if.end, !dbg !3804

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8, i8* %aggressive.addr, align 1, !dbg !3805
  call void @tree_dce_init(i8 zeroext %1), !dbg !3806
  %2 = load i8, i8* %aggressive.addr, align 1, !dbg !3807
  %tobool1 = icmp ne i8 %2, 0, !dbg !3807
  br i1 %tobool1, label %if.then2, label %if.end13, !dbg !3809

if.then2:                                         ; preds = %if.end
  br label %do.body, !dbg !3810

do.body:                                          ; preds = %if.then2
  %3 = load i8, i8* @timevar_enable, align 1, !dbg !3812
  %tobool3 = icmp ne i8 %3, 0, !dbg !3812
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !3815

if.then4:                                         ; preds = %do.body
  call void @timevar_push_1(i32 113), !dbg !3812
  br label %if.end5, !dbg !3812

if.end5:                                          ; preds = %if.then4, %do.body
  br label %do.end, !dbg !3815

do.end:                                           ; preds = %if.end5
  call void @calculate_dominance_info(i32 2), !dbg !3816
  %call = call %struct.edge_list* @create_edge_list(), !dbg !3817
  store %struct.edge_list* %call, %struct.edge_list** %el, align 8, !dbg !3818
  %4 = load %struct.edge_list*, %struct.edge_list** %el, align 8, !dbg !3819
  call void @find_all_control_dependences(%struct.edge_list* %4), !dbg !3820
  br label %do.body6, !dbg !3821

do.body6:                                         ; preds = %do.end
  %5 = load i8, i8* @timevar_enable, align 1, !dbg !3822
  %tobool7 = icmp ne i8 %5, 0, !dbg !3822
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !3825

if.then8:                                         ; preds = %do.body6
  call void @timevar_pop_1(i32 113), !dbg !3822
  br label %if.end9, !dbg !3822

if.end9:                                          ; preds = %if.then8, %do.body6
  br label %do.end10, !dbg !3825

do.end10:                                         ; preds = %if.end9
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3826
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3826
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3826
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3826
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 5, !dbg !3826
  %8 = load i32, i32* %x_last_basic_block, align 8, !dbg !3826
  %call11 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %8), !dbg !3827
  store %struct.simple_bitmap_def* %call11, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !3828
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !3829
  call void @sbitmap_zero(%struct.simple_bitmap_def* %9), !dbg !3830
  %call12 = call zeroext i8 @mark_dfs_back_edges(), !dbg !3831
  br label %if.end13, !dbg !3832

if.end13:                                         ; preds = %do.end10, %if.end
  %10 = load %struct.edge_list*, %struct.edge_list** %el, align 8, !dbg !3833
  call void @find_obviously_necessary_stmts(%struct.edge_list* %10), !dbg !3834
  %11 = load i8, i8* %aggressive.addr, align 1, !dbg !3835
  %tobool14 = icmp ne i8 %11, 0, !dbg !3835
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3837

if.then15:                                        ; preds = %if.end13
  call void @loop_optimizer_finalize(), !dbg !3838
  br label %if.end16, !dbg !3838

if.end16:                                         ; preds = %if.then15, %if.end13
  store i32 0, i32* @longest_chain, align 4, !dbg !3839
  store i32 0, i32* @total_chain, align 4, !dbg !3840
  store i32 0, i32* @nr_walks, align 4, !dbg !3841
  store i8 0, i8* @chain_ovfl, align 1, !dbg !3842
  %call17 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3843
  store %struct.bitmap_head_def* %call17, %struct.bitmap_head_def** @visited, align 8, !dbg !3844
  %12 = load %struct.edge_list*, %struct.edge_list** %el, align 8, !dbg !3845
  call void @propagate_necessity(%struct.edge_list* %12), !dbg !3846
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @visited, align 8, !dbg !3847
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %13), !dbg !3847
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @visited, align 8, !dbg !3847
  %call18 = call zeroext i8 @eliminate_unnecessary_stmts(), !dbg !3848
  %conv = zext i8 %call18 to i32, !dbg !3848
  %14 = load i8, i8* %something_changed, align 1, !dbg !3849
  %conv19 = zext i8 %14 to i32, !dbg !3849
  %or = or i32 %conv19, %conv, !dbg !3849
  %conv20 = trunc i32 %or to i8, !dbg !3849
  store i8 %conv20, i8* %something_changed, align 1, !dbg !3849
  %15 = load i8, i8* @cfg_altered, align 1, !dbg !3850
  %conv21 = zext i8 %15 to i32, !dbg !3850
  %16 = load i8, i8* %something_changed, align 1, !dbg !3851
  %conv22 = zext i8 %16 to i32, !dbg !3851
  %or23 = or i32 %conv22, %conv21, !dbg !3851
  %conv24 = trunc i32 %or23 to i8, !dbg !3851
  store i8 %conv24, i8* %something_changed, align 1, !dbg !3851
  call void @free_dominance_info(i32 2), !dbg !3852
  %17 = load i8, i8* @cfg_altered, align 1, !dbg !3853
  %tobool25 = icmp ne i8 %17, 0, !dbg !3853
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !3855

if.then26:                                        ; preds = %if.end16
  call void @free_dominance_info(i32 1), !dbg !3856
  br label %if.end27, !dbg !3856

if.end27:                                         ; preds = %if.then26, %if.end16
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3857
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !3857
  %19 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 2), align 4, !dbg !3858
  call void @statistics_counter_event(%struct.function* %add.ptr28, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i32 %19), !dbg !3859
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3860
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3860
  %21 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 3), align 4, !dbg !3861
  call void @statistics_counter_event(%struct.function* %add.ptr29, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), i32 %21), !dbg !3862
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3863
  %tobool30 = icmp ne %struct._IO_FILE* %22, null, !dbg !3863
  br i1 %tobool30, label %land.lhs.true, label %if.end33, !dbg !3865

land.lhs.true:                                    ; preds = %if.end27
  %23 = load i32, i32* @dump_flags, align 4, !dbg !3866
  %and = and i32 %23, 24, !dbg !3867
  %tobool31 = icmp ne i32 %and, 0, !dbg !3867
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !3868

if.then32:                                        ; preds = %land.lhs.true
  call void @print_stats(), !dbg !3869
  br label %if.end33, !dbg !3869

if.end33:                                         ; preds = %if.then32, %land.lhs.true, %if.end27
  %24 = load i8, i8* %aggressive.addr, align 1, !dbg !3870
  call void @tree_dce_done(i8 zeroext %24), !dbg !3871
  %25 = load %struct.edge_list*, %struct.edge_list** %el, align 8, !dbg !3872
  call void @free_edge_list(%struct.edge_list* %25), !dbg !3873
  %26 = load i8, i8* %something_changed, align 1, !dbg !3874
  %tobool34 = icmp ne i8 %26, 0, !dbg !3874
  br i1 %tobool34, label %if.then35, label %if.else, !dbg !3876

if.then35:                                        ; preds = %if.end33
  store i32 34850, i32* %retval, align 4, !dbg !3877
  br label %return, !dbg !3877

if.else:                                          ; preds = %if.end33
  store i32 0, i32* %retval, align 4, !dbg !3878
  br label %return, !dbg !3878

return:                                           ; preds = %if.else, %if.then35
  %27 = load i32, i32* %retval, align 4, !dbg !3879
  ret i32 %27, !dbg !3879
}

declare dso_local void @loop_optimizer_init(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @tree_dce_init(i8 zeroext %aggressive) #0 !dbg !3880 {
entry:
  %aggressive.addr = alloca i8, align 1
  %i = alloca i32, align 4
  store i8 %aggressive, i8* %aggressive.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %aggressive.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  call void @llvm.memset.p0i8.i64(i8* align 4 bitcast (%struct.stmt_stats* @stats to i8*), i8 0, i64 16, i1 false), !dbg !3885
  %0 = load i8, i8* %aggressive.addr, align 1, !dbg !3886
  %tobool = icmp ne i8 %0, 0, !dbg !3886
  br i1 %tobool, label %if.then, label %if.end, !dbg !3888

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3889, metadata !DIExpression()), !dbg !3891
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3892
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3892
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3892
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3892
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !3892
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !3892
  %conv = sext i32 %3 to i64, !dbg !3892
  %mul = mul i64 8, %conv, !dbg !3892
  %call = call i8* @xmalloc(i64 %mul), !dbg !3892
  %4 = bitcast i8* %call to %struct.bitmap_head_def**, !dbg !3892
  store %struct.bitmap_head_def** %4, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !3893
  store i32 0, i32* %i, align 4, !dbg !3894
  br label %for.cond, !dbg !3896

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %i, align 4, !dbg !3897
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3899
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3899
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3899
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3899
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 5, !dbg !3899
  %8 = load i32, i32* %x_last_basic_block3, align 8, !dbg !3899
  %cmp = icmp slt i32 %5, %8, !dbg !3900
  br i1 %cmp, label %for.body, label %for.end, !dbg !3901

for.body:                                         ; preds = %for.cond
  %call5 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3902
  %9 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !3903
  %10 = load i32, i32* %i, align 4, !dbg !3904
  %idxprom = sext i32 %10 to i64, !dbg !3903
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %9, i64 %idxprom, !dbg !3903
  store %struct.bitmap_head_def* %call5, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !3905
  br label %for.inc, !dbg !3903

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !3906
  %inc = add nsw i32 %11, 1, !dbg !3906
  store i32 %inc, i32* %i, align 4, !dbg !3906
  br label %for.cond, !dbg !3907, !llvm.loop !3908

for.end:                                          ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3910
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3910
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !3910
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !3910
  %x_last_basic_block8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 5, !dbg !3910
  %14 = load i32, i32* %x_last_basic_block8, align 8, !dbg !3910
  %call9 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %14), !dbg !3911
  store %struct.simple_bitmap_def* %call9, %struct.simple_bitmap_def** @last_stmt_necessary, align 8, !dbg !3912
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @last_stmt_necessary, align 8, !dbg !3913
  call void @sbitmap_zero(%struct.simple_bitmap_def* %15), !dbg !3914
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3915
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !3915
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !3915
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !3915
  %x_last_basic_block12 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 5, !dbg !3915
  %18 = load i32, i32* %x_last_basic_block12, align 8, !dbg !3915
  %call13 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %18), !dbg !3916
  store %struct.simple_bitmap_def* %call13, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !3917
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !3918
  call void @sbitmap_zero(%struct.simple_bitmap_def* %19), !dbg !3919
  br label %if.end, !dbg !3920

if.end:                                           ; preds = %for.end, %entry
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3921
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3921
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 3, !dbg !3921
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3921
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 2, !dbg !3921
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3921
  %tobool15 = icmp ne %struct.VEC_tree_gc* %22, null, !dbg !3921
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !3921

cond.true:                                        ; preds = %if.end
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3921
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !3921
  %gimple_df17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 3, !dbg !3921
  %24 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df17, align 8, !dbg !3921
  %ssa_names18 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %24, i32 0, i32 2, !dbg !3921
  %25 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names18, align 8, !dbg !3921
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %25, i32 0, i32 0, !dbg !3921
  br label %cond.end, !dbg !3921

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3921

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3921
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3921
  %add = add i32 %call19, 1, !dbg !3922
  %call20 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add), !dbg !3923
  store %struct.simple_bitmap_def* %call20, %struct.simple_bitmap_def** @processed, align 8, !dbg !3924
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !3925
  call void @sbitmap_zero(%struct.simple_bitmap_def* %26), !dbg !3926
  %call21 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 64), !dbg !3927
  store %struct.VEC_gimple_heap* %call21, %struct.VEC_gimple_heap** @worklist, align 8, !dbg !3928
  store i8 0, i8* @cfg_altered, align 1, !dbg !3929
  ret void, !dbg !3930
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local %struct.edge_list* @create_edge_list() #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_all_control_dependences(%struct.edge_list* %el) #0 !dbg !3931 {
entry:
  %el.addr = alloca %struct.edge_list*, align 8
  %i = alloca i32, align 4
  store %struct.edge_list* %el, %struct.edge_list** %el.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_list** %el.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3936, metadata !DIExpression()), !dbg !3937
  store i32 0, i32* %i, align 4, !dbg !3938
  br label %for.cond, !dbg !3940

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3941
  %1 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !3943
  %num_edges = getelementptr inbounds %struct.edge_list, %struct.edge_list* %1, i32 0, i32 1, !dbg !3943
  %2 = load i32, i32* %num_edges, align 4, !dbg !3943
  %cmp = icmp slt i32 %0, %2, !dbg !3944
  br i1 %cmp, label %for.body, label %for.end, !dbg !3945

for.body:                                         ; preds = %for.cond
  %3 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !3946
  %4 = load i32, i32* %i, align 4, !dbg !3947
  call void @find_control_dependence(%struct.edge_list* %3, i32 %4), !dbg !3948
  br label %for.inc, !dbg !3948

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3949
  %inc = add nsw i32 %5, 1, !dbg !3949
  store i32 %inc, i32* %i, align 4, !dbg !3949
  br label %for.cond, !dbg !3950, !llvm.loop !3951

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3953
}

declare dso_local void @timevar_pop_1(i32) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local zeroext i8 @mark_dfs_back_edges() #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_obviously_necessary_stmts(%struct.edge_list* %el) #0 !dbg !3954 {
entry:
  %el.addr = alloca %struct.edge_list*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp6 = alloca %struct.gimple_stmt_iterator, align 8
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp46 = alloca %struct.edge_iterator, align 8
  store %struct.edge_list* %el, %struct.edge_list** %el.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_list** %el.addr, metadata !3955, metadata !DIExpression()), !dbg !3956
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3957, metadata !DIExpression()), !dbg !3958
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3959, metadata !DIExpression()), !dbg !3966
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3967, metadata !DIExpression()), !dbg !3968
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3969, metadata !DIExpression()), !dbg !3970
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3971, metadata !DIExpression()), !dbg !3972
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3973
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3973
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3973
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3973
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3973
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3973
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !3973
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3973
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3973
  br label %for.cond, !dbg !3973

for.cond:                                         ; preds = %for.inc17, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3975
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3975
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3975
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3975
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3975
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !3975
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3975
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !3975
  br i1 %cmp, label %for.body, label %for.end19, !dbg !3973

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3977
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !3980
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3980
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3980
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !3980
  br label %for.cond3, !dbg !3981

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3982
  %tobool = icmp ne i8 %call, 0, !dbg !3984
  %lnot = xor i1 %tobool, true, !dbg !3984
  br i1 %lnot, label %for.body4, label %for.end, !dbg !3985

for.body4:                                        ; preds = %for.cond3
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3986
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %phi, align 8, !dbg !3988
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3989
  call void @gimple_set_plf(%union.gimple_statement_d* %11, i32 1, i8 zeroext 0), !dbg !3990
  br label %for.inc, !dbg !3991

for.inc:                                          ; preds = %for.body4
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3992
  br label %for.cond3, !dbg !3993, !llvm.loop !3994

for.end:                                          ; preds = %for.cond3
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3996
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp6, %struct.basic_block_def* %12), !dbg !3998
  %13 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3998
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp6 to i8*, !dbg !3998
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !3998
  br label %for.cond7, !dbg !3999

for.cond7:                                        ; preds = %for.inc15, %for.end
  %call8 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4000
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4002
  %lnot10 = xor i1 %tobool9, true, !dbg !4002
  br i1 %lnot10, label %for.body11, label %for.end16, !dbg !4003

for.body11:                                       ; preds = %for.cond7
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4004
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !4006
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4007
  call void @gimple_set_plf(%union.gimple_statement_d* %15, i32 1, i8 zeroext 0), !dbg !4008
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4009
  %17 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4010
  %cmp13 = icmp ne %struct.edge_list* %17, null, !dbg !4011
  %conv = zext i1 %cmp13 to i32, !dbg !4011
  %conv14 = trunc i32 %conv to i8, !dbg !4010
  call void @mark_stmt_if_obviously_necessary(%union.gimple_statement_d* %16, i8 zeroext %conv14), !dbg !4012
  br label %for.inc15, !dbg !4013

for.inc15:                                        ; preds = %for.body11
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4014
  br label %for.cond7, !dbg !4015, !llvm.loop !4016

for.end16:                                        ; preds = %for.cond7
  br label %for.inc17, !dbg !4018

for.inc17:                                        ; preds = %for.end16
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3975
  %next_bb18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !3975
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb18, align 8, !dbg !3975
  store %struct.basic_block_def* %19, %struct.basic_block_def** %bb, align 8, !dbg !3975
  br label %for.cond, !dbg !3975, !llvm.loop !4019

for.end19:                                        ; preds = %for.cond
  %20 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4021
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4021
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !4021
  %bf.load = load i64, i64* %21, align 8, !dbg !4021
  %bf.lshr = lshr i64 %bf.load, 20, !dbg !4021
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4021
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4021
  %tobool20 = icmp ne i32 %bf.cast, 0, !dbg !4021
  br i1 %tobool20, label %land.lhs.true, label %lor.lhs.false, !dbg !4023

lor.lhs.false:                                    ; preds = %for.end19
  %22 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4024
  %function_decl = bitcast %union.tree_node* %22 to %struct.tree_function_decl*, !dbg !4024
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4024
  %bf.load21 = load i32, i32* %pure_flag, align 8, !dbg !4024
  %bf.lshr22 = lshr i32 %bf.load21, 27, !dbg !4024
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !4024
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !4024
  br i1 %tobool24, label %land.lhs.true, label %if.end, !dbg !4025

land.lhs.true:                                    ; preds = %lor.lhs.false, %for.end19
  %23 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4026
  %function_decl25 = bitcast %union.tree_node* %23 to %struct.tree_function_decl*, !dbg !4026
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl25, i32 0, i32 5, !dbg !4026
  %bf.load26 = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !4026
  %bf.lshr27 = lshr i32 %bf.load26, 28, !dbg !4026
  %bf.clear28 = and i32 %bf.lshr27, 1, !dbg !4026
  %tobool29 = icmp ne i32 %bf.clear28, 0, !dbg !4026
  br i1 %tobool29, label %if.end, label %if.then, !dbg !4027

if.then:                                          ; preds = %land.lhs.true
  br label %if.end84, !dbg !4028

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4029
  %tobool30 = icmp ne %struct.edge_list* %24, null, !dbg !4029
  br i1 %tobool30, label %if.then31, label %if.end84, !dbg !4031

if.then31:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !4032, metadata !DIExpression()), !dbg !4039
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4040, metadata !DIExpression()), !dbg !4041
  call void @scev_initialize(), !dbg !4042
  %call32 = call zeroext i8 @mark_irreducible_loops(), !dbg !4043
  %tobool33 = icmp ne i8 %call32, 0, !dbg !4043
  br i1 %tobool33, label %if.then34, label %if.end70, !dbg !4045

if.then34:                                        ; preds = %if.then31
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4046
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !4046
  %cfg36 = getelementptr inbounds %struct.function, %struct.function* %add.ptr35, i32 0, i32 1, !dbg !4046
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg36, align 8, !dbg !4046
  %x_entry_block_ptr37 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i32 0, i32 0, !dbg !4046
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr37, align 8, !dbg !4046
  %next_bb38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 6, !dbg !4046
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb38, align 8, !dbg !4046
  store %struct.basic_block_def* %28, %struct.basic_block_def** %bb, align 8, !dbg !4046
  br label %for.cond39, !dbg !4046

for.cond39:                                       ; preds = %for.inc67, %if.then34
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4048
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4048
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !4048
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !4048
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !4048
  %x_exit_block_ptr42 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 1, !dbg !4048
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr42, align 8, !dbg !4048
  %cmp43 = icmp ne %struct.basic_block_def* %29, %32, !dbg !4048
  br i1 %cmp43, label %for.body45, label %for.end69, !dbg !4046

for.body45:                                       ; preds = %for.cond39
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4050, metadata !DIExpression()), !dbg !4058
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4059
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 1, !dbg !4059
  %call47 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4059
  %34 = bitcast %struct.edge_iterator* %tmp46 to { i32, %struct.VEC_edge_gc** }*, !dbg !4059
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 0, !dbg !4059
  %36 = extractvalue { i32, %struct.VEC_edge_gc** } %call47, 0, !dbg !4059
  store i32 %36, i32* %35, align 8, !dbg !4059
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 1, !dbg !4059
  %38 = extractvalue { i32, %struct.VEC_edge_gc** } %call47, 1, !dbg !4059
  store %struct.VEC_edge_gc** %38, %struct.VEC_edge_gc*** %37, align 8, !dbg !4059
  %39 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4059
  %40 = bitcast %struct.edge_iterator* %tmp46 to i8*, !dbg !4059
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false), !dbg !4059
  br label %for.cond48, !dbg !4059

for.cond48:                                       ; preds = %for.inc65, %for.body45
  %41 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4061
  %42 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %41, i32 0, i32 0, !dbg !4061
  %43 = load i32, i32* %42, align 8, !dbg !4061
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %41, i32 0, i32 1, !dbg !4061
  %45 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %44, align 8, !dbg !4061
  %call49 = call zeroext i8 @ei_cond(i32 %43, %struct.VEC_edge_gc** %45, %struct.edge_def** %e), !dbg !4061
  %tobool50 = icmp ne i8 %call49, 0, !dbg !4059
  br i1 %tobool50, label %for.body51, label %for.end66, !dbg !4059

for.body51:                                       ; preds = %for.cond48
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4063
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 7, !dbg !4065
  %47 = load i32, i32* %flags, align 8, !dbg !4065
  %and = and i32 %47, 32, !dbg !4066
  %tobool52 = icmp ne i32 %and, 0, !dbg !4066
  br i1 %tobool52, label %land.lhs.true53, label %if.end64, !dbg !4067

land.lhs.true53:                                  ; preds = %for.body51
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4068
  %flags54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 7, !dbg !4069
  %49 = load i32, i32* %flags54, align 8, !dbg !4069
  %and55 = and i32 %49, 128, !dbg !4070
  %tobool56 = icmp ne i32 %and55, 0, !dbg !4070
  br i1 %tobool56, label %if.then57, label %if.end64, !dbg !4071

if.then57:                                        ; preds = %land.lhs.true53
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4072
  %tobool58 = icmp ne %struct._IO_FILE* %50, null, !dbg !4072
  br i1 %tobool58, label %if.then59, label %if.end62, !dbg !4075

if.then59:                                        ; preds = %if.then57
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4076
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4077
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 0, !dbg !4078
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4078
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 9, !dbg !4079
  %54 = load i32, i32* %index, align 8, !dbg !4079
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4080
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 1, !dbg !4081
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4081
  %index60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 9, !dbg !4082
  %57 = load i32, i32* %index60, align 8, !dbg !4082
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 %54, i32 %57), !dbg !4083
  br label %if.end62, !dbg !4083

if.end62:                                         ; preds = %if.then59, %if.then57
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4084
  %dest63 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 1, !dbg !4085
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %dest63, align 8, !dbg !4085
  %60 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4086
  call void @mark_control_dependent_edges_necessary(%struct.basic_block_def* %59, %struct.edge_list* %60), !dbg !4087
  br label %if.end64, !dbg !4088

if.end64:                                         ; preds = %if.end62, %land.lhs.true53, %for.body51
  br label %for.inc65, !dbg !4089

for.inc65:                                        ; preds = %if.end64
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4061
  br label %for.cond48, !dbg !4061, !llvm.loop !4090

for.end66:                                        ; preds = %for.cond48
  br label %for.inc67, !dbg !4092

for.inc67:                                        ; preds = %for.end66
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4048
  %next_bb68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 6, !dbg !4048
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb68, align 8, !dbg !4048
  store %struct.basic_block_def* %62, %struct.basic_block_def** %bb, align 8, !dbg !4048
  br label %for.cond39, !dbg !4048, !llvm.loop !4093

for.end69:                                        ; preds = %for.cond39
  br label %if.end70, !dbg !4094

if.end70:                                         ; preds = %for.end69, %if.then31
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !4095
  br label %for.cond71, !dbg !4095

for.cond71:                                       ; preds = %for.inc82, %if.end70
  %63 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4097
  %tobool72 = icmp ne %struct.loop* %63, null, !dbg !4095
  br i1 %tobool72, label %for.body73, label %for.end83, !dbg !4095

for.body73:                                       ; preds = %for.cond71
  %64 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4099
  %call74 = call zeroext i8 @finite_loop_p(%struct.loop* %64), !dbg !4101
  %tobool75 = icmp ne i8 %call74, 0, !dbg !4101
  br i1 %tobool75, label %if.end81, label %if.then76, !dbg !4102

if.then76:                                        ; preds = %for.body73
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4103
  %tobool77 = icmp ne %struct._IO_FILE* %65, null, !dbg !4103
  br i1 %tobool77, label %if.then78, label %if.end80, !dbg !4106

if.then78:                                        ; preds = %if.then76
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4107
  %67 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4108
  %num = getelementptr inbounds %struct.loop, %struct.loop* %67, i32 0, i32 0, !dbg !4109
  %68 = load i32, i32* %num, align 8, !dbg !4109
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0), i32 %68), !dbg !4110
  br label %if.end80, !dbg !4110

if.end80:                                         ; preds = %if.then78, %if.then76
  %69 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4111
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %69, i32 0, i32 3, !dbg !4112
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4112
  %71 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4113
  call void @mark_control_dependent_edges_necessary(%struct.basic_block_def* %70, %struct.edge_list* %71), !dbg !4114
  br label %if.end81, !dbg !4115

if.end81:                                         ; preds = %if.end80, %for.body73
  br label %for.inc82, !dbg !4116

for.inc82:                                        ; preds = %if.end81
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !4097
  br label %for.cond71, !dbg !4097, !llvm.loop !4117

for.end83:                                        ; preds = %for.cond71
  call void @scev_finalize(), !dbg !4119
  br label %if.end84, !dbg !4120

if.end84:                                         ; preds = %if.then, %for.end83, %if.end
  ret void, !dbg !4121
}

declare dso_local void @loop_optimizer_finalize() #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_necessity(%struct.edge_list* %el) #0 !dbg !4122 {
entry:
  %el.addr = alloca %struct.edge_list*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %aggressive = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %k = alloca i64, align 8
  %arg = alloca %union.tree_node*, align 8
  %arg_bb = alloca %struct.basic_block_def*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use = alloca %union.tree_node*, align 8
  %callee = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %arg145 = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %rhs_aliased = alloca i8, align 1
  %rhs195 = alloca %union.tree_node*, align 8
  %i218 = alloca i32, align 4
  %op = alloca %union.tree_node*, align 8
  store %struct.edge_list* %el, %struct.edge_list** %el.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_list** %el.addr, metadata !4123, metadata !DIExpression()), !dbg !4124
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4125, metadata !DIExpression()), !dbg !4126
  call void @llvm.dbg.declare(metadata i8* %aggressive, metadata !4127, metadata !DIExpression()), !dbg !4128
  %0 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4129
  %tobool = icmp ne %struct.edge_list* %0, null, !dbg !4129
  %1 = zext i1 %tobool to i64, !dbg !4129
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !4129
  %conv = trunc i32 %cond to i8, !dbg !4130
  store i8 %conv, i8* %aggressive, align 1, !dbg !4128
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4131
  %tobool1 = icmp ne %struct._IO_FILE* %2, null, !dbg !4131
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !4133

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !4134
  %and = and i32 %3, 8, !dbg !4135
  %tobool2 = icmp ne i32 %and, 0, !dbg !4135
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4136

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4137
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0)), !dbg !4138
  br label %if.end, !dbg !4138

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %while.cond, !dbg !4139

while.cond:                                       ; preds = %if.end261, %if.then138, %if.then106, %if.then103, %if.end
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @worklist, align 8, !dbg !4140
  %tobool3 = icmp ne %struct.VEC_gimple_heap* %5, null, !dbg !4140
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4140

cond.true:                                        ; preds = %while.cond
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @worklist, align 8, !dbg !4140
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %6, i32 0, i32 0, !dbg !4140
  br label %cond.end, !dbg !4140

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !4140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4140
  %call5 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond4), !dbg !4140
  %cmp = icmp ugt i32 %call5, 0, !dbg !4141
  br i1 %cmp, label %while.body, label %while.end, !dbg !4139

while.body:                                       ; preds = %cond.end
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @worklist, align 8, !dbg !4142
  %tobool7 = icmp ne %struct.VEC_gimple_heap* %7, null, !dbg !4142
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !4142

cond.true8:                                       ; preds = %while.body
  %8 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @worklist, align 8, !dbg !4142
  %base9 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %8, i32 0, i32 0, !dbg !4142
  br label %cond.end11, !dbg !4142

cond.false10:                                     ; preds = %while.body
  br label %cond.end11, !dbg !4142

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_gimple_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !4142
  %call13 = call %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %cond12), !dbg !4142
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !4144
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4145
  %tobool14 = icmp ne %struct._IO_FILE* %9, null, !dbg !4145
  br i1 %tobool14, label %land.lhs.true15, label %if.end21, !dbg !4147

land.lhs.true15:                                  ; preds = %cond.end11
  %10 = load i32, i32* @dump_flags, align 4, !dbg !4148
  %and16 = and i32 %10, 8, !dbg !4149
  %tobool17 = icmp ne i32 %and16, 0, !dbg !4149
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !4150

if.then18:                                        ; preds = %land.lhs.true15
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4151
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0)), !dbg !4153
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4154
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4155
  call void @print_gimple_stmt(%struct._IO_FILE* %12, %union.gimple_statement_d* %13, i32 0, i32 2), !dbg !4156
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4157
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4158
  br label %if.end21, !dbg !4159

if.end21:                                         ; preds = %if.then18, %land.lhs.true15, %cond.end11
  %15 = load i8, i8* %aggressive, align 1, !dbg !4160
  %tobool22 = icmp ne i8 %15, 0, !dbg !4160
  br i1 %tobool22, label %if.then23, label %if.end34, !dbg !4162

if.then23:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4163, metadata !DIExpression()), !dbg !4165
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4166
  %call24 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %16), !dbg !4167
  store %struct.basic_block_def* %call24, %struct.basic_block_def** %bb, align 8, !dbg !4165
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4168
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4170
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4170
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4170
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4170
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 0, !dbg !4170
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4170
  %cmp25 = icmp ne %struct.basic_block_def* %17, %20, !dbg !4171
  br i1 %cmp25, label %land.lhs.true27, label %if.end33, !dbg !4172

land.lhs.true27:                                  ; preds = %if.then23
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !4173
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %21, i32 0, i32 3, !dbg !4173
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4173
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !4173
  %23 = load i32, i32* %index, align 8, !dbg !4173
  %div = udiv i32 %23, 64, !dbg !4173
  %idxprom = zext i32 %div to i64, !dbg !4173
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4173
  %24 = load i64, i64* %arrayidx, align 8, !dbg !4173
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4173
  %index28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !4173
  %26 = load i32, i32* %index28, align 8, !dbg !4173
  %rem = urem i32 %26, 64, !dbg !4173
  %sh_prom = zext i32 %rem to i64, !dbg !4173
  %shr = lshr i64 %24, %sh_prom, !dbg !4173
  %and29 = and i64 %shr, 1, !dbg !4173
  %tobool30 = icmp ne i64 %and29, 0, !dbg !4173
  br i1 %tobool30, label %if.end33, label %if.then31, !dbg !4174

if.then31:                                        ; preds = %land.lhs.true27
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !4175
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4177
  %index32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !4178
  %29 = load i32, i32* %index32, align 8, !dbg !4178
  call void @SET_BIT(%struct.simple_bitmap_def* %27, i32 %29), !dbg !4179
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4180
  %31 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4181
  call void @mark_control_dependent_edges_necessary(%struct.basic_block_def* %30, %struct.edge_list* %31), !dbg !4182
  br label %if.end33, !dbg !4183

if.end33:                                         ; preds = %if.then31, %land.lhs.true27, %if.then23
  br label %if.end34, !dbg !4184

if.end34:                                         ; preds = %if.end33, %if.end21
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4185
  %call35 = call i32 @gimple_code(%union.gimple_statement_d* %32), !dbg !4187
  %cmp36 = icmp eq i32 %call35, 16, !dbg !4188
  br i1 %cmp36, label %land.lhs.true38, label %if.else, !dbg !4189

land.lhs.true38:                                  ; preds = %if.end34
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4190
  %call39 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %33), !dbg !4191
  %call40 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call39), !dbg !4192
  %conv41 = zext i8 %call40 to i32, !dbg !4192
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !4192
  br i1 %tobool42, label %if.then43, label %if.else, !dbg !4193

if.then43:                                        ; preds = %land.lhs.true38
  call void @llvm.dbg.declare(metadata i64* %k, metadata !4194, metadata !DIExpression()), !dbg !4196
  store i64 0, i64* %k, align 8, !dbg !4197
  br label %for.cond, !dbg !4199

for.cond:                                         ; preds = %for.inc, %if.then43
  %34 = load i64, i64* %k, align 8, !dbg !4200
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4202
  %call44 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %35), !dbg !4203
  %conv45 = zext i32 %call44 to i64, !dbg !4203
  %cmp46 = icmp ult i64 %34, %conv45, !dbg !4204
  br i1 %cmp46, label %for.body, label %for.end, !dbg !4205

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4206, metadata !DIExpression()), !dbg !4208
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4209
  %37 = load i64, i64* %k, align 8, !dbg !4209
  %conv48 = trunc i64 %37 to i32, !dbg !4209
  %call49 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %36, i32 %conv48), !dbg !4209
  %call50 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call49), !dbg !4209
  store %union.tree_node* %call50, %union.tree_node** %arg, align 8, !dbg !4208
  %38 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4210
  %base51 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !4210
  %39 = bitcast %struct.tree_base* %base51 to i64*, !dbg !4210
  %bf.load = load i64, i64* %39, align 8, !dbg !4210
  %bf.clear = and i64 %bf.load, 65535, !dbg !4210
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4210
  %cmp52 = icmp eq i32 %bf.cast, 141, !dbg !4212
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !4213

if.then54:                                        ; preds = %for.body
  %40 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4214
  call void @mark_operand_necessary(%union.tree_node* %40), !dbg !4215
  br label %if.end55, !dbg !4215

if.end55:                                         ; preds = %if.then54, %for.body
  br label %for.inc, !dbg !4216

for.inc:                                          ; preds = %if.end55
  %41 = load i64, i64* %k, align 8, !dbg !4217
  %inc = add i64 %41, 1, !dbg !4217
  store i64 %inc, i64* %k, align 8, !dbg !4217
  br label %for.cond, !dbg !4218, !llvm.loop !4219

for.end:                                          ; preds = %for.cond
  %42 = load i8, i8* %aggressive, align 1, !dbg !4221
  %conv56 = zext i8 %42 to i32, !dbg !4221
  %tobool57 = icmp ne i32 %conv56, 0, !dbg !4221
  br i1 %tobool57, label %land.lhs.true58, label %if.end92, !dbg !4223

land.lhs.true58:                                  ; preds = %for.end
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4224
  %call59 = call zeroext i8 @degenerate_phi_p(%union.gimple_statement_d* %43), !dbg !4225
  %tobool60 = icmp ne i8 %call59, 0, !dbg !4225
  br i1 %tobool60, label %if.end92, label %if.then61, !dbg !4226

if.then61:                                        ; preds = %land.lhs.true58
  store i64 0, i64* %k, align 8, !dbg !4227
  br label %for.cond62, !dbg !4230

for.cond62:                                       ; preds = %for.inc89, %if.then61
  %44 = load i64, i64* %k, align 8, !dbg !4231
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4233
  %call63 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %45), !dbg !4234
  %conv64 = zext i32 %call63 to i64, !dbg !4234
  %cmp65 = icmp ult i64 %44, %conv64, !dbg !4235
  br i1 %cmp65, label %for.body67, label %for.end91, !dbg !4236

for.body67:                                       ; preds = %for.cond62
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %arg_bb, metadata !4237, metadata !DIExpression()), !dbg !4239
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4240
  %47 = load i64, i64* %k, align 8, !dbg !4241
  %call68 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %46, i64 %47), !dbg !4242
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call68, i32 0, i32 0, !dbg !4243
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4243
  store %struct.basic_block_def* %48, %struct.basic_block_def** %arg_bb, align 8, !dbg !4239
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %arg_bb, align 8, !dbg !4244
  %50 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4246
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %50, i64 0, !dbg !4246
  %cfg70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 1, !dbg !4246
  %51 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg70, align 8, !dbg !4246
  %x_entry_block_ptr71 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %51, i32 0, i32 0, !dbg !4246
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr71, align 8, !dbg !4246
  %cmp72 = icmp ne %struct.basic_block_def* %49, %52, !dbg !4247
  br i1 %cmp72, label %land.lhs.true74, label %if.end88, !dbg !4248

land.lhs.true74:                                  ; preds = %for.body67
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !4249
  %elms75 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %53, i32 0, i32 3, !dbg !4249
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %arg_bb, align 8, !dbg !4249
  %index76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 9, !dbg !4249
  %55 = load i32, i32* %index76, align 8, !dbg !4249
  %div77 = udiv i32 %55, 64, !dbg !4249
  %idxprom78 = zext i32 %div77 to i64, !dbg !4249
  %arrayidx79 = getelementptr inbounds [1 x i64], [1 x i64]* %elms75, i64 0, i64 %idxprom78, !dbg !4249
  %56 = load i64, i64* %arrayidx79, align 8, !dbg !4249
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %arg_bb, align 8, !dbg !4249
  %index80 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 9, !dbg !4249
  %58 = load i32, i32* %index80, align 8, !dbg !4249
  %rem81 = urem i32 %58, 64, !dbg !4249
  %sh_prom82 = zext i32 %rem81 to i64, !dbg !4249
  %shr83 = lshr i64 %56, %sh_prom82, !dbg !4249
  %and84 = and i64 %shr83, 1, !dbg !4249
  %tobool85 = icmp ne i64 %and84, 0, !dbg !4249
  br i1 %tobool85, label %if.end88, label %if.then86, !dbg !4250

if.then86:                                        ; preds = %land.lhs.true74
  %59 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !4251
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %arg_bb, align 8, !dbg !4253
  %index87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 9, !dbg !4254
  %61 = load i32, i32* %index87, align 8, !dbg !4254
  call void @SET_BIT(%struct.simple_bitmap_def* %59, i32 %61), !dbg !4255
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %arg_bb, align 8, !dbg !4256
  %63 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4257
  call void @mark_control_dependent_edges_necessary(%struct.basic_block_def* %62, %struct.edge_list* %63), !dbg !4258
  br label %if.end88, !dbg !4259

if.end88:                                         ; preds = %if.then86, %land.lhs.true74, %for.body67
  br label %for.inc89, !dbg !4260

for.inc89:                                        ; preds = %if.end88
  %64 = load i64, i64* %k, align 8, !dbg !4261
  %inc90 = add i64 %64, 1, !dbg !4261
  store i64 %inc90, i64* %k, align 8, !dbg !4261
  br label %for.cond62, !dbg !4262, !llvm.loop !4263

for.end91:                                        ; preds = %for.cond62
  br label %if.end92, !dbg !4265

if.end92:                                         ; preds = %for.end91, %land.lhs.true58, %for.end
  br label %if.end261, !dbg !4266

if.else:                                          ; preds = %land.lhs.true38, %if.end34
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4267, metadata !DIExpression()), !dbg !4269
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !4270, metadata !DIExpression()), !dbg !4271
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4272
  %call93 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %65, i32 1), !dbg !4272
  store %union.tree_node* %call93, %union.tree_node** %use, align 8, !dbg !4272
  br label %for.cond94, !dbg !4272

for.cond94:                                       ; preds = %for.inc98, %if.else
  %call95 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4274
  %tobool96 = icmp ne i8 %call95, 0, !dbg !4274
  %lnot = xor i1 %tobool96, true, !dbg !4274
  br i1 %lnot, label %for.body97, label %for.end100, !dbg !4272

for.body97:                                       ; preds = %for.cond94
  %66 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4276
  call void @mark_operand_necessary(%union.tree_node* %66), !dbg !4277
  br label %for.inc98, !dbg !4277

for.inc98:                                        ; preds = %for.body97
  %call99 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4274
  store %union.tree_node* %call99, %union.tree_node** %use, align 8, !dbg !4274
  br label %for.cond94, !dbg !4274, !llvm.loop !4278

for.end100:                                       ; preds = %for.cond94
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4280
  %call101 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %67), !dbg !4281
  store %union.tree_node* %call101, %union.tree_node** %use, align 8, !dbg !4282
  %68 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4283
  %tobool102 = icmp ne %union.tree_node* %68, null, !dbg !4283
  br i1 %tobool102, label %if.end104, label %if.then103, !dbg !4285

if.then103:                                       ; preds = %for.end100
  br label %while.cond, !dbg !4286, !llvm.loop !4287

if.end104:                                        ; preds = %for.end100
  %69 = load i8, i8* @chain_ovfl, align 1, !dbg !4289
  %tobool105 = icmp ne i8 %69, 0, !dbg !4289
  br i1 %tobool105, label %if.then106, label %if.end107, !dbg !4291

if.then106:                                       ; preds = %if.end104
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4292
  call void @mark_all_reaching_defs_necessary(%union.gimple_statement_d* %70), !dbg !4294
  br label %while.cond, !dbg !4295, !llvm.loop !4287

if.end107:                                        ; preds = %if.end104
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4296
  %call108 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %71), !dbg !4298
  %tobool109 = icmp ne i8 %call108, 0, !dbg !4298
  br i1 %tobool109, label %if.then110, label %if.else166, !dbg !4299

if.then110:                                       ; preds = %if.end107
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !4300, metadata !DIExpression()), !dbg !4302
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4303
  %call111 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %72), !dbg !4304
  store %union.tree_node* %call111, %union.tree_node** %callee, align 8, !dbg !4302
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4305, metadata !DIExpression()), !dbg !4306
  %73 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4307
  %cmp112 = icmp ne %union.tree_node* %73, null, !dbg !4309
  br i1 %cmp112, label %land.lhs.true114, label %if.end139, !dbg !4310

land.lhs.true114:                                 ; preds = %if.then110
  %74 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4311
  %function_decl = bitcast %union.tree_node* %74 to %struct.tree_function_decl*, !dbg !4311
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4311
  %bf.load115 = load i32, i32* %built_in_class, align 8, !dbg !4311
  %bf.lshr = lshr i32 %bf.load115, 11, !dbg !4311
  %bf.clear116 = and i32 %bf.lshr, 3, !dbg !4311
  %cmp117 = icmp eq i32 %bf.clear116, 3, !dbg !4312
  br i1 %cmp117, label %land.lhs.true119, label %if.end139, !dbg !4313

land.lhs.true119:                                 ; preds = %land.lhs.true114
  %75 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4314
  %function_decl120 = bitcast %union.tree_node* %75 to %struct.tree_function_decl*, !dbg !4314
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl120, i32 0, i32 5, !dbg !4314
  %bf.load121 = load i32, i32* %function_code, align 8, !dbg !4314
  %bf.clear122 = and i32 %bf.load121, 2047, !dbg !4314
  %cmp123 = icmp eq i32 %bf.clear122, 333, !dbg !4315
  br i1 %cmp123, label %if.then138, label %lor.lhs.false, !dbg !4316

lor.lhs.false:                                    ; preds = %land.lhs.true119
  %76 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4317
  %function_decl125 = bitcast %union.tree_node* %76 to %struct.tree_function_decl*, !dbg !4317
  %function_code126 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl125, i32 0, i32 5, !dbg !4317
  %bf.load127 = load i32, i32* %function_code126, align 8, !dbg !4317
  %bf.clear128 = and i32 %bf.load127, 2047, !dbg !4317
  %cmp129 = icmp eq i32 %bf.clear128, 491, !dbg !4318
  br i1 %cmp129, label %if.then138, label %lor.lhs.false131, !dbg !4319

lor.lhs.false131:                                 ; preds = %lor.lhs.false
  %77 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4320
  %function_decl132 = bitcast %union.tree_node* %77 to %struct.tree_function_decl*, !dbg !4320
  %function_code133 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl132, i32 0, i32 5, !dbg !4320
  %bf.load134 = load i32, i32* %function_code133, align 8, !dbg !4320
  %bf.clear135 = and i32 %bf.load134, 2047, !dbg !4320
  %cmp136 = icmp eq i32 %bf.clear135, 455, !dbg !4321
  br i1 %cmp136, label %if.then138, label %if.end139, !dbg !4322

if.then138:                                       ; preds = %lor.lhs.false131, %lor.lhs.false, %land.lhs.true119
  br label %while.cond, !dbg !4323, !llvm.loop !4287

if.end139:                                        ; preds = %lor.lhs.false131, %land.lhs.true114, %if.then110
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4324
  call void @mark_all_reaching_defs_necessary(%union.gimple_statement_d* %78), !dbg !4325
  store i32 0, i32* %i, align 4, !dbg !4326
  br label %for.cond140, !dbg !4328

for.cond140:                                      ; preds = %for.inc163, %if.end139
  %79 = load i32, i32* %i, align 4, !dbg !4329
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4331
  %call141 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %80), !dbg !4332
  %cmp142 = icmp ult i32 %79, %call141, !dbg !4333
  br i1 %cmp142, label %for.body144, label %for.end165, !dbg !4334

for.body144:                                      ; preds = %for.cond140
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg145, metadata !4335, metadata !DIExpression()), !dbg !4337
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4338
  %82 = load i32, i32* %i, align 4, !dbg !4339
  %call146 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %81, i32 %82), !dbg !4340
  store %union.tree_node* %call146, %union.tree_node** %arg145, align 8, !dbg !4337
  %83 = load %union.tree_node*, %union.tree_node** %arg145, align 8, !dbg !4341
  %base147 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !4341
  %84 = bitcast %struct.tree_base* %base147 to i64*, !dbg !4341
  %bf.load148 = load i64, i64* %84, align 8, !dbg !4341
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !4341
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !4341
  %cmp151 = icmp eq i32 %bf.cast150, 141, !dbg !4343
  br i1 %cmp151, label %if.then157, label %lor.lhs.false153, !dbg !4344

lor.lhs.false153:                                 ; preds = %for.body144
  %85 = load %union.tree_node*, %union.tree_node** %arg145, align 8, !dbg !4345
  %call154 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %85), !dbg !4346
  %conv155 = zext i8 %call154 to i32, !dbg !4346
  %tobool156 = icmp ne i32 %conv155, 0, !dbg !4346
  br i1 %tobool156, label %if.then157, label %if.end158, !dbg !4347

if.then157:                                       ; preds = %lor.lhs.false153, %for.body144
  br label %for.inc163, !dbg !4348

if.end158:                                        ; preds = %lor.lhs.false153
  %86 = load %union.tree_node*, %union.tree_node** %arg145, align 8, !dbg !4349
  %call159 = call zeroext i8 @ref_may_be_aliased(%union.tree_node* %86), !dbg !4351
  %tobool160 = icmp ne i8 %call159, 0, !dbg !4351
  br i1 %tobool160, label %if.end162, label %if.then161, !dbg !4352

if.then161:                                       ; preds = %if.end158
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4353
  %88 = load %union.tree_node*, %union.tree_node** %arg145, align 8, !dbg !4354
  call void @mark_aliased_reaching_defs_necessary(%union.gimple_statement_d* %87, %union.tree_node* %88), !dbg !4355
  br label %if.end162, !dbg !4355

if.end162:                                        ; preds = %if.then161, %if.end158
  br label %for.inc163, !dbg !4356

for.inc163:                                       ; preds = %if.end162, %if.then157
  %89 = load i32, i32* %i, align 4, !dbg !4357
  %inc164 = add i32 %89, 1, !dbg !4357
  store i32 %inc164, i32* %i, align 4, !dbg !4357
  br label %for.cond140, !dbg !4358, !llvm.loop !4359

for.end165:                                       ; preds = %for.cond140
  br label %if.end246, !dbg !4361

if.else166:                                       ; preds = %if.end107
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4362
  %call167 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %90), !dbg !4364
  %tobool168 = icmp ne i8 %call167, 0, !dbg !4364
  br i1 %tobool168, label %if.then169, label %if.else190, !dbg !4365

if.then169:                                       ; preds = %if.else166
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4366, metadata !DIExpression()), !dbg !4368
  call void @llvm.dbg.declare(metadata i8* %rhs_aliased, metadata !4369, metadata !DIExpression()), !dbg !4370
  store i8 0, i8* %rhs_aliased, align 1, !dbg !4370
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4371
  %call170 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %91), !dbg !4372
  store %union.tree_node* %call170, %union.tree_node** %rhs, align 8, !dbg !4373
  %92 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4374
  %base171 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !4374
  %93 = bitcast %struct.tree_base* %base171 to i64*, !dbg !4374
  %bf.load172 = load i64, i64* %93, align 8, !dbg !4374
  %bf.clear173 = and i64 %bf.load172, 65535, !dbg !4374
  %bf.cast174 = trunc i64 %bf.clear173 to i32, !dbg !4374
  %cmp175 = icmp ne i32 %bf.cast174, 141, !dbg !4376
  br i1 %cmp175, label %land.lhs.true177, label %if.end186, !dbg !4377

land.lhs.true177:                                 ; preds = %if.then169
  %94 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4378
  %call178 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %94), !dbg !4379
  %tobool179 = icmp ne i8 %call178, 0, !dbg !4379
  br i1 %tobool179, label %if.end186, label %if.then180, !dbg !4380

if.then180:                                       ; preds = %land.lhs.true177
  %95 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4381
  %call181 = call zeroext i8 @ref_may_be_aliased(%union.tree_node* %95), !dbg !4384
  %tobool182 = icmp ne i8 %call181, 0, !dbg !4384
  br i1 %tobool182, label %if.else184, label %if.then183, !dbg !4385

if.then183:                                       ; preds = %if.then180
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4386
  %97 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4387
  call void @mark_aliased_reaching_defs_necessary(%union.gimple_statement_d* %96, %union.tree_node* %97), !dbg !4388
  br label %if.end185, !dbg !4388

if.else184:                                       ; preds = %if.then180
  store i8 1, i8* %rhs_aliased, align 1, !dbg !4389
  br label %if.end185

if.end185:                                        ; preds = %if.else184, %if.then183
  br label %if.end186, !dbg !4390

if.end186:                                        ; preds = %if.end185, %land.lhs.true177, %if.then169
  %98 = load i8, i8* %rhs_aliased, align 1, !dbg !4391
  %tobool187 = icmp ne i8 %98, 0, !dbg !4391
  br i1 %tobool187, label %if.then188, label %if.end189, !dbg !4393

if.then188:                                       ; preds = %if.end186
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4394
  call void @mark_all_reaching_defs_necessary(%union.gimple_statement_d* %99), !dbg !4395
  br label %if.end189, !dbg !4395

if.end189:                                        ; preds = %if.then188, %if.end186
  br label %if.end245, !dbg !4396

if.else190:                                       ; preds = %if.else166
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4397
  %call191 = call i32 @gimple_code(%union.gimple_statement_d* %100), !dbg !4399
  %cmp192 = icmp eq i32 %call191, 9, !dbg !4400
  br i1 %cmp192, label %if.then194, label %if.else213, !dbg !4401

if.then194:                                       ; preds = %if.else190
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs195, metadata !4402, metadata !DIExpression()), !dbg !4404
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4405
  %call196 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %101), !dbg !4406
  store %union.tree_node* %call196, %union.tree_node** %rhs195, align 8, !dbg !4404
  %102 = load %union.tree_node*, %union.tree_node** %rhs195, align 8, !dbg !4407
  %base197 = bitcast %union.tree_node* %102 to %struct.tree_base*, !dbg !4407
  %103 = bitcast %struct.tree_base* %base197 to i64*, !dbg !4407
  %bf.load198 = load i64, i64* %103, align 8, !dbg !4407
  %bf.clear199 = and i64 %bf.load198, 65535, !dbg !4407
  %bf.cast200 = trunc i64 %bf.clear199 to i32, !dbg !4407
  %cmp201 = icmp ne i32 %bf.cast200, 141, !dbg !4409
  br i1 %cmp201, label %land.lhs.true203, label %if.end212, !dbg !4410

land.lhs.true203:                                 ; preds = %if.then194
  %104 = load %union.tree_node*, %union.tree_node** %rhs195, align 8, !dbg !4411
  %call204 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %104), !dbg !4412
  %tobool205 = icmp ne i8 %call204, 0, !dbg !4412
  br i1 %tobool205, label %if.end212, label %if.then206, !dbg !4413

if.then206:                                       ; preds = %land.lhs.true203
  %105 = load %union.tree_node*, %union.tree_node** %rhs195, align 8, !dbg !4414
  %call207 = call zeroext i8 @ref_may_be_aliased(%union.tree_node* %105), !dbg !4417
  %tobool208 = icmp ne i8 %call207, 0, !dbg !4417
  br i1 %tobool208, label %if.else210, label %if.then209, !dbg !4418

if.then209:                                       ; preds = %if.then206
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4419
  %107 = load %union.tree_node*, %union.tree_node** %rhs195, align 8, !dbg !4420
  call void @mark_aliased_reaching_defs_necessary(%union.gimple_statement_d* %106, %union.tree_node* %107), !dbg !4421
  br label %if.end211, !dbg !4421

if.else210:                                       ; preds = %if.then206
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4422
  call void @mark_all_reaching_defs_necessary(%union.gimple_statement_d* %108), !dbg !4423
  br label %if.end211

if.end211:                                        ; preds = %if.else210, %if.then209
  br label %if.end212, !dbg !4424

if.end212:                                        ; preds = %if.end211, %land.lhs.true203, %if.then194
  br label %if.end244, !dbg !4425

if.else213:                                       ; preds = %if.else190
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4426
  %call214 = call i32 @gimple_code(%union.gimple_statement_d* %109), !dbg !4428
  %cmp215 = icmp eq i32 %call214, 7, !dbg !4429
  br i1 %cmp215, label %if.then217, label %if.else242, !dbg !4430

if.then217:                                       ; preds = %if.else213
  call void @llvm.dbg.declare(metadata i32* %i218, metadata !4431, metadata !DIExpression()), !dbg !4433
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4434
  call void @mark_all_reaching_defs_necessary(%union.gimple_statement_d* %110), !dbg !4435
  store i32 0, i32* %i218, align 4, !dbg !4436
  br label %for.cond219, !dbg !4438

for.cond219:                                      ; preds = %for.inc239, %if.then217
  %111 = load i32, i32* %i218, align 4, !dbg !4439
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4441
  %call220 = call i32 @gimple_asm_ninputs(%union.gimple_statement_d* %112), !dbg !4442
  %cmp221 = icmp ult i32 %111, %call220, !dbg !4443
  br i1 %cmp221, label %for.body223, label %for.end241, !dbg !4444

for.body223:                                      ; preds = %for.cond219
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4445, metadata !DIExpression()), !dbg !4447
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4448
  %114 = load i32, i32* %i218, align 4, !dbg !4448
  %call224 = call %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %113, i32 %114), !dbg !4448
  %list = bitcast %union.tree_node* %call224 to %struct.tree_list*, !dbg !4448
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4448
  %115 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4448
  store %union.tree_node* %115, %union.tree_node** %op, align 8, !dbg !4447
  %116 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4449
  %base225 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !4449
  %117 = bitcast %struct.tree_base* %base225 to i64*, !dbg !4449
  %bf.load226 = load i64, i64* %117, align 8, !dbg !4449
  %bf.clear227 = and i64 %bf.load226, 65535, !dbg !4449
  %bf.cast228 = trunc i64 %bf.clear227 to i32, !dbg !4449
  %cmp229 = icmp ne i32 %bf.cast228, 141, !dbg !4451
  br i1 %cmp229, label %land.lhs.true231, label %if.end238, !dbg !4452

land.lhs.true231:                                 ; preds = %for.body223
  %118 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4453
  %call232 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %118), !dbg !4454
  %tobool233 = icmp ne i8 %call232, 0, !dbg !4454
  br i1 %tobool233, label %if.end238, label %land.lhs.true234, !dbg !4455

land.lhs.true234:                                 ; preds = %land.lhs.true231
  %119 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4456
  %call235 = call zeroext i8 @ref_may_be_aliased(%union.tree_node* %119), !dbg !4457
  %tobool236 = icmp ne i8 %call235, 0, !dbg !4457
  br i1 %tobool236, label %if.end238, label %if.then237, !dbg !4458

if.then237:                                       ; preds = %land.lhs.true234
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4459
  %121 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4460
  call void @mark_aliased_reaching_defs_necessary(%union.gimple_statement_d* %120, %union.tree_node* %121), !dbg !4461
  br label %if.end238, !dbg !4461

if.end238:                                        ; preds = %if.then237, %land.lhs.true234, %land.lhs.true231, %for.body223
  br label %for.inc239, !dbg !4462

for.inc239:                                       ; preds = %if.end238
  %122 = load i32, i32* %i218, align 4, !dbg !4463
  %inc240 = add i32 %122, 1, !dbg !4463
  store i32 %inc240, i32* %i218, align 4, !dbg !4463
  br label %for.cond219, !dbg !4464, !llvm.loop !4465

for.end241:                                       ; preds = %for.cond219
  br label %if.end243, !dbg !4467

if.else242:                                       ; preds = %if.else213
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 805, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4468
  br label %if.end243

if.end243:                                        ; preds = %if.else242, %for.end241
  br label %if.end244

if.end244:                                        ; preds = %if.end243, %if.end212
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %if.end189
  br label %if.end246

if.end246:                                        ; preds = %if.end245, %for.end165
  %123 = load i32, i32* @total_chain, align 4, !dbg !4469
  %cmp247 = icmp ugt i32 %123, 16384, !dbg !4471
  br i1 %cmp247, label %land.lhs.true249, label %if.end260, !dbg !4472

land.lhs.true249:                                 ; preds = %if.end246
  %124 = load i32, i32* @total_chain, align 4, !dbg !4473
  %125 = load i32, i32* @longest_chain, align 4, !dbg !4474
  %mul = mul i32 32, %125, !dbg !4475
  %cmp250 = icmp ugt i32 %124, %mul, !dbg !4476
  br i1 %cmp250, label %land.lhs.true252, label %if.end260, !dbg !4477

land.lhs.true252:                                 ; preds = %land.lhs.true249
  %126 = load i32, i32* @total_chain, align 4, !dbg !4478
  %127 = load i32, i32* @nr_walks, align 4, !dbg !4479
  %mul253 = mul i32 %127, 32, !dbg !4480
  %cmp254 = icmp ugt i32 %126, %mul253, !dbg !4481
  br i1 %cmp254, label %if.then256, label %if.end260, !dbg !4482

if.then256:                                       ; preds = %land.lhs.true252
  store i8 1, i8* @chain_ovfl, align 1, !dbg !4483
  %128 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @visited, align 8, !dbg !4485
  %tobool257 = icmp ne %struct.bitmap_head_def* %128, null, !dbg !4485
  br i1 %tobool257, label %if.then258, label %if.end259, !dbg !4487

if.then258:                                       ; preds = %if.then256
  %129 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @visited, align 8, !dbg !4488
  call void @bitmap_clear(%struct.bitmap_head_def* %129), !dbg !4489
  br label %if.end259, !dbg !4489

if.end259:                                        ; preds = %if.then258, %if.then256
  br label %if.end260, !dbg !4490

if.end260:                                        ; preds = %if.end259, %land.lhs.true252, %land.lhs.true249, %if.end246
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %if.end92
  br label %while.cond, !dbg !4139, !llvm.loop !4287

while.end:                                        ; preds = %cond.end
  ret void, !dbg !4491
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @eliminate_unnecessary_stmts() #0 !dbg !4492 {
entry:
  %something_changed = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %call = alloca %union.tree_node*, align 8
  %h = alloca %struct.VEC_basic_block_heap*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %name = alloca %union.tree_node*, align 8
  %prev_bb = alloca %struct.basic_block_def*, align 8
  %tmp85 = alloca %struct.gimple_stmt_iterator, align 8
  %found = alloca i8, align 1
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  call void @llvm.dbg.declare(metadata i8* %something_changed, metadata !4493, metadata !DIExpression()), !dbg !4494
  store i8 0, i8* %something_changed, align 1, !dbg !4494
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4495, metadata !DIExpression()), !dbg !4496
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4497, metadata !DIExpression()), !dbg !4498
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !4499, metadata !DIExpression()), !dbg !4500
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4501, metadata !DIExpression()), !dbg !4502
  call void @llvm.dbg.declare(metadata %union.tree_node** %call, metadata !4503, metadata !DIExpression()), !dbg !4504
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %h, metadata !4505, metadata !DIExpression()), !dbg !4511
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4512
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4512
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4514

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !4515
  %and = and i32 %1, 8, !dbg !4516
  %tobool1 = icmp ne i32 %and, 0, !dbg !4516
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4517

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4518
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.19, i64 0, i64 0)), !dbg !4519
  br label %if.end, !dbg !4519

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  call void @clear_special_calls(), !dbg !4520
  %call3 = call zeroext i8 @dom_info_available_p(i32 1), !dbg !4521
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4521
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !4521

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 1090, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4521
  br label %cond.end, !dbg !4521

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4521

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4521
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4522
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4522
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4522
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4522
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 0, !dbg !4522
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4522
  %call5 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %5), !dbg !4523
  %call6 = call %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32 1, %struct.basic_block_def* %call5), !dbg !4524
  store %struct.VEC_basic_block_heap* %call6, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4525
  br label %while.cond, !dbg !4526

while.cond:                                       ; preds = %for.end, %cond.end
  %6 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4527
  %tobool7 = icmp ne %struct.VEC_basic_block_heap* %6, null, !dbg !4527
  br i1 %tobool7, label %cond.true8, label %cond.false9, !dbg !4527

cond.true8:                                       ; preds = %while.cond
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4527
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %7, i32 0, i32 0, !dbg !4527
  br label %cond.end10, !dbg !4527

cond.false9:                                      ; preds = %while.cond
  br label %cond.end10, !dbg !4527

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi %struct.VEC_basic_block_base* [ %base, %cond.true8 ], [ null, %cond.false9 ], !dbg !4527
  %call12 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond11), !dbg !4527
  %tobool13 = icmp ne i32 %call12, 0, !dbg !4526
  br i1 %tobool13, label %while.body, label %while.end, !dbg !4526

while.body:                                       ; preds = %cond.end10
  %8 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4528
  %tobool14 = icmp ne %struct.VEC_basic_block_heap* %8, null, !dbg !4528
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4528

cond.true15:                                      ; preds = %while.body
  %9 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4528
  %base16 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %9, i32 0, i32 0, !dbg !4528
  br label %cond.end18, !dbg !4528

cond.false17:                                     ; preds = %while.body
  br label %cond.end18, !dbg !4528

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4528
  %call20 = call %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %cond19), !dbg !4528
  store %struct.basic_block_def* %call20, %struct.basic_block_def** %bb, align 8, !dbg !4530
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4531
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %10), !dbg !4533
  %11 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4533
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4533
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !4533
  br label %for.cond, !dbg !4534

for.cond:                                         ; preds = %for.inc, %cond.end18
  %call21 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4535
  %tobool22 = icmp ne i8 %call21, 0, !dbg !4537
  %lnot = xor i1 %tobool22, true, !dbg !4537
  br i1 %lnot, label %for.body, label %for.end, !dbg !4538

for.body:                                         ; preds = %for.cond
  %call23 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4539
  store %union.gimple_statement_d* %call23, %union.gimple_statement_d** %stmt, align 8, !dbg !4541
  %13 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !4542
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4542
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !4542
  call void @gsi_prev(%struct.gimple_stmt_iterator* %psi), !dbg !4543
  %15 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 0), align 4, !dbg !4544
  %inc = add nsw i32 %15, 1, !dbg !4544
  store i32 %inc, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 0), align 4, !dbg !4544
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4545
  %call24 = call i32 @gimple_plf(%union.gimple_statement_d* %16, i32 1), !dbg !4547
  %tobool25 = icmp ne i32 %call24, 0, !dbg !4547
  br i1 %tobool25, label %if.else, label %if.then26, !dbg !4548

if.then26:                                        ; preds = %for.body
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4549
  %call27 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %17), !dbg !4552
  %tobool28 = icmp ne i8 %call27, 0, !dbg !4552
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !4553

if.then29:                                        ; preds = %if.then26
  store i8 1, i8* %something_changed, align 1, !dbg !4554
  br label %if.end30, !dbg !4555

if.end30:                                         ; preds = %if.then29, %if.then26
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4556
  call void @remove_dead_stmt(%struct.gimple_stmt_iterator* %gsi, %struct.basic_block_def* %18), !dbg !4557
  br label %if.end59, !dbg !4558

if.else:                                          ; preds = %for.body
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4559
  %call31 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %19), !dbg !4561
  %tobool32 = icmp ne i8 %call31, 0, !dbg !4561
  br i1 %tobool32, label %if.then33, label %if.end58, !dbg !4562

if.then33:                                        ; preds = %if.else
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4563
  %call34 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %20), !dbg !4565
  store %union.tree_node* %call34, %union.tree_node** %call, align 8, !dbg !4566
  %21 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !4567
  %tobool35 = icmp ne %union.tree_node* %21, null, !dbg !4567
  br i1 %tobool35, label %if.then36, label %if.end57, !dbg !4569

if.then36:                                        ; preds = %if.then33
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4570, metadata !DIExpression()), !dbg !4572
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4573
  %call37 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %22), !dbg !4574
  store %union.tree_node* %call37, %union.tree_node** %name, align 8, !dbg !4575
  %23 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4576
  %tobool38 = icmp ne %union.tree_node* %23, null, !dbg !4576
  br i1 %tobool38, label %land.lhs.true39, label %if.end56, !dbg !4578

land.lhs.true39:                                  ; preds = %if.then36
  %24 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4579
  %base40 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4579
  %25 = bitcast %struct.tree_base* %base40 to i64*, !dbg !4579
  %bf.load = load i64, i64* %25, align 8, !dbg !4579
  %bf.clear = and i64 %bf.load, 65535, !dbg !4579
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4579
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4580
  br i1 %cmp, label %land.lhs.true41, label %if.end56, !dbg !4581

land.lhs.true41:                                  ; preds = %land.lhs.true39
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !4582
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %26, i32 0, i32 3, !dbg !4582
  %27 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4582
  %ssa_name = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !4582
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4582
  %28 = load i32, i32* %version, align 8, !dbg !4582
  %div = udiv i32 %28, 64, !dbg !4582
  %idxprom = zext i32 %div to i64, !dbg !4582
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4582
  %29 = load i64, i64* %arrayidx, align 8, !dbg !4582
  %30 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4582
  %ssa_name42 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !4582
  %version43 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name42, i32 0, i32 3, !dbg !4582
  %31 = load i32, i32* %version43, align 8, !dbg !4582
  %rem = urem i32 %31, 64, !dbg !4582
  %sh_prom = zext i32 %rem to i64, !dbg !4582
  %shr = lshr i64 %29, %sh_prom, !dbg !4582
  %and44 = and i64 %shr, 1, !dbg !4582
  %tobool45 = icmp ne i64 %and44, 0, !dbg !4582
  br i1 %tobool45, label %if.end56, label %if.then46, !dbg !4583

if.then46:                                        ; preds = %land.lhs.true41
  store i8 1, i8* %something_changed, align 1, !dbg !4584
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4586
  %tobool47 = icmp ne %struct._IO_FILE* %32, null, !dbg !4586
  br i1 %tobool47, label %land.lhs.true48, label %if.end54, !dbg !4588

land.lhs.true48:                                  ; preds = %if.then46
  %33 = load i32, i32* @dump_flags, align 4, !dbg !4589
  %and49 = and i32 %33, 8, !dbg !4590
  %tobool50 = icmp ne i32 %and49, 0, !dbg !4590
  br i1 %tobool50, label %if.then51, label %if.end54, !dbg !4591

if.then51:                                        ; preds = %land.lhs.true48
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4592
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)), !dbg !4594
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4595
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4596
  call void @print_gimple_stmt(%struct._IO_FILE* %35, %union.gimple_statement_d* %36, i32 0, i32 2), !dbg !4597
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4598
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4599
  br label %if.end54, !dbg !4600

if.end54:                                         ; preds = %if.then51, %land.lhs.true48, %if.then46
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4601
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %38, %union.tree_node* null), !dbg !4602
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4603
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4604
  %call55 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %39, %union.gimple_statement_d* %40), !dbg !4605
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4606
  call void @update_stmt(%union.gimple_statement_d* %41), !dbg !4607
  %42 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4608
  call void @release_ssa_name(%union.tree_node* %42), !dbg !4609
  br label %if.end56, !dbg !4610

if.end56:                                         ; preds = %if.end54, %land.lhs.true41, %land.lhs.true39, %if.then36
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4611
  call void @notice_special_calls(%union.gimple_statement_d* %43), !dbg !4612
  br label %if.end57, !dbg !4613

if.end57:                                         ; preds = %if.end56, %if.then33
  br label %if.end58, !dbg !4614

if.end58:                                         ; preds = %if.end57, %if.else
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end30
  br label %for.inc, !dbg !4615

for.inc:                                          ; preds = %if.end59
  %44 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4616
  %45 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !4616
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false), !dbg !4616
  br label %for.cond, !dbg !4617, !llvm.loop !4618

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !4526, !llvm.loop !4620

while.end:                                        ; preds = %cond.end10
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %h), !dbg !4622
  %46 = load i8, i8* @cfg_altered, align 1, !dbg !4623
  %tobool60 = icmp ne i8 %46, 0, !dbg !4623
  br i1 %tobool60, label %if.then61, label %if.end167, !dbg !4625

if.then61:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %prev_bb, metadata !4626, metadata !DIExpression()), !dbg !4628
  call void @find_unreachable_blocks(), !dbg !4629
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4630
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !4630
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !4630
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !4630
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 1, !dbg !4630
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4630
  %prev_bb64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 5, !dbg !4632
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb64, align 8, !dbg !4632
  store %struct.basic_block_def* %50, %struct.basic_block_def** %bb, align 8, !dbg !4633
  br label %for.cond65, !dbg !4634

for.cond65:                                       ; preds = %for.inc165, %if.then61
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4635
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4637
  %add.ptr66 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !4637
  %cfg67 = getelementptr inbounds %struct.function, %struct.function* %add.ptr66, i32 0, i32 1, !dbg !4637
  %53 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg67, align 8, !dbg !4637
  %x_entry_block_ptr68 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %53, i32 0, i32 0, !dbg !4637
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr68, align 8, !dbg !4637
  %cmp69 = icmp ne %struct.basic_block_def* %51, %54, !dbg !4638
  br i1 %cmp69, label %for.body70, label %for.end166, !dbg !4639

for.body70:                                       ; preds = %for.cond65
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4640
  %prev_bb71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 5, !dbg !4642
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb71, align 8, !dbg !4642
  store %struct.basic_block_def* %56, %struct.basic_block_def** %prev_bb, align 8, !dbg !4643
  %57 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !4644
  %elms72 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %57, i32 0, i32 3, !dbg !4644
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4644
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 9, !dbg !4644
  %59 = load i32, i32* %index, align 8, !dbg !4644
  %div73 = udiv i32 %59, 64, !dbg !4644
  %idxprom74 = zext i32 %div73 to i64, !dbg !4644
  %arrayidx75 = getelementptr inbounds [1 x i64], [1 x i64]* %elms72, i64 0, i64 %idxprom74, !dbg !4644
  %60 = load i64, i64* %arrayidx75, align 8, !dbg !4644
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4644
  %index76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !4644
  %62 = load i32, i32* %index76, align 8, !dbg !4644
  %rem77 = urem i32 %62, 64, !dbg !4644
  %sh_prom78 = zext i32 %rem77 to i64, !dbg !4644
  %shr79 = lshr i64 %60, %sh_prom78, !dbg !4644
  %and80 = and i64 %shr79, 1, !dbg !4644
  %tobool81 = icmp ne i64 %and80, 0, !dbg !4644
  br i1 %tobool81, label %lor.lhs.false, label %if.then84, !dbg !4646

lor.lhs.false:                                    ; preds = %for.body70
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4647
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 13, !dbg !4648
  %64 = load i32, i32* %flags, align 8, !dbg !4648
  %and82 = and i32 %64, 2, !dbg !4649
  %tobool83 = icmp ne i32 %and82, 0, !dbg !4649
  br i1 %tobool83, label %if.end164, label %if.then84, !dbg !4650

if.then84:                                        ; preds = %lor.lhs.false, %for.body70
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4651
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp85, %struct.basic_block_def* %65), !dbg !4654
  %66 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4654
  %67 = bitcast %struct.gimple_stmt_iterator* %tmp85 to i8*, !dbg !4654
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false), !dbg !4654
  br label %for.cond86, !dbg !4655

for.cond86:                                       ; preds = %for.inc125, %if.then84
  %call87 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4656
  %tobool88 = icmp ne i8 %call87, 0, !dbg !4658
  %lnot89 = xor i1 %tobool88, true, !dbg !4658
  br i1 %lnot89, label %for.body90, label %for.end126, !dbg !4659

for.body90:                                       ; preds = %for.cond86
  %call91 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4660
  %call92 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %call91), !dbg !4662
  %call93 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call92), !dbg !4663
  %tobool94 = icmp ne i8 %call93, 0, !dbg !4663
  br i1 %tobool94, label %if.end124, label %if.then95, !dbg !4664

if.then95:                                        ; preds = %for.body90
  call void @llvm.dbg.declare(metadata i8* %found, metadata !4665, metadata !DIExpression()), !dbg !4667
  store i8 0, i8* %found, align 1, !dbg !4667
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !4668, metadata !DIExpression()), !dbg !4669
  %call96 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4670
  %call97 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %call96), !dbg !4670
  %call98 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %call97), !dbg !4670
  store %union.gimple_statement_d* %call98, %union.gimple_statement_d** %stmt, align 8, !dbg !4670
  br label %for.cond99, !dbg !4670

for.cond99:                                       ; preds = %for.inc117, %if.then95
  %call100 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !4672
  %tobool101 = icmp ne i8 %call100, 0, !dbg !4672
  %lnot102 = xor i1 %tobool101, true, !dbg !4672
  br i1 %lnot102, label %for.body103, label %for.end119, !dbg !4670

for.body103:                                      ; preds = %for.cond99
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4674
  %call104 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %68), !dbg !4677
  %flags105 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call104, i32 0, i32 13, !dbg !4678
  %69 = load i32, i32* %flags105, align 8, !dbg !4678
  %and106 = and i32 %69, 2, !dbg !4679
  %tobool107 = icmp ne i32 %and106, 0, !dbg !4679
  br i1 %tobool107, label %if.end109, label %if.then108, !dbg !4680

if.then108:                                       ; preds = %for.body103
  br label %for.inc117, !dbg !4681

if.end109:                                        ; preds = %for.body103
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4682
  %call110 = call i32 @gimple_code(%union.gimple_statement_d* %70), !dbg !4684
  %cmp111 = icmp eq i32 %call110, 16, !dbg !4685
  br i1 %cmp111, label %if.then115, label %lor.lhs.false112, !dbg !4686

lor.lhs.false112:                                 ; preds = %if.end109
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4687
  %call113 = call i32 @gimple_plf(%union.gimple_statement_d* %71, i32 1), !dbg !4688
  %tobool114 = icmp ne i32 %call113, 0, !dbg !4688
  br i1 %tobool114, label %if.then115, label %if.end116, !dbg !4689

if.then115:                                       ; preds = %lor.lhs.false112, %if.end109
  store i8 1, i8* %found, align 1, !dbg !4690
  call void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %iter), !dbg !4692
  br label %for.end119, !dbg !4692

if.end116:                                        ; preds = %lor.lhs.false112
  br label %for.inc117, !dbg !4694

for.inc117:                                       ; preds = %if.end116, %if.then108
  %call118 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !4672
  store %union.gimple_statement_d* %call118, %union.gimple_statement_d** %stmt, align 8, !dbg !4672
  br label %for.cond99, !dbg !4672, !llvm.loop !4695

for.end119:                                       ; preds = %if.then115, %for.cond99
  %72 = load i8, i8* %found, align 1, !dbg !4697
  %tobool120 = icmp ne i8 %72, 0, !dbg !4697
  br i1 %tobool120, label %if.then121, label %if.end123, !dbg !4699

if.then121:                                       ; preds = %for.end119
  %call122 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4700
  call void @mark_virtual_phi_result_for_renaming(%union.gimple_statement_d* %call122), !dbg !4701
  br label %if.end123, !dbg !4701

if.end123:                                        ; preds = %if.then121, %for.end119
  br label %if.end124, !dbg !4702

if.end124:                                        ; preds = %if.end123, %for.body90
  br label %for.inc125, !dbg !4703

for.inc125:                                       ; preds = %if.end124
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4704
  br label %for.cond86, !dbg !4705, !llvm.loop !4706

for.end126:                                       ; preds = %for.cond86
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4708
  %flags127 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 13, !dbg !4710
  %74 = load i32, i32* %flags127, align 8, !dbg !4710
  %and128 = and i32 %74, 2, !dbg !4711
  %tobool129 = icmp ne i32 %and128, 0, !dbg !4711
  br i1 %tobool129, label %if.end163, label %if.then130, !dbg !4712

if.then130:                                       ; preds = %for.end126
  %75 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !4713
  %tobool131 = icmp ne i32 %75, 0, !dbg !4713
  br i1 %tobool131, label %lor.lhs.false132, label %if.then135, !dbg !4716

lor.lhs.false132:                                 ; preds = %if.then130
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4717
  %call133 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %76), !dbg !4718
  %tobool134 = icmp ne %struct.basic_block_def* %call133, null, !dbg !4718
  br i1 %tobool134, label %if.else136, label %if.then135, !dbg !4719

if.then135:                                       ; preds = %lor.lhs.false132, %if.then130
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4720
  call void @delete_basic_block(%struct.basic_block_def* %77), !dbg !4721
  br label %if.end162, !dbg !4721

if.else136:                                       ; preds = %lor.lhs.false132
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4722
  %call137 = call %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32 1, %struct.basic_block_def* %78), !dbg !4724
  store %struct.VEC_basic_block_heap* %call137, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4725
  br label %while.cond138, !dbg !4726

while.cond138:                                    ; preds = %if.end160, %if.then159, %if.else136
  %79 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4727
  %tobool139 = icmp ne %struct.VEC_basic_block_heap* %79, null, !dbg !4727
  br i1 %tobool139, label %cond.true140, label %cond.false142, !dbg !4727

cond.true140:                                     ; preds = %while.cond138
  %80 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4727
  %base141 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %80, i32 0, i32 0, !dbg !4727
  br label %cond.end143, !dbg !4727

cond.false142:                                    ; preds = %while.cond138
  br label %cond.end143, !dbg !4727

cond.end143:                                      ; preds = %cond.false142, %cond.true140
  %cond144 = phi %struct.VEC_basic_block_base* [ %base141, %cond.true140 ], [ null, %cond.false142 ], !dbg !4727
  %call145 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond144), !dbg !4727
  %tobool146 = icmp ne i32 %call145, 0, !dbg !4726
  br i1 %tobool146, label %while.body147, label %while.end161, !dbg !4726

while.body147:                                    ; preds = %cond.end143
  %81 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4728
  %tobool148 = icmp ne %struct.VEC_basic_block_heap* %81, null, !dbg !4728
  br i1 %tobool148, label %cond.true149, label %cond.false151, !dbg !4728

cond.true149:                                     ; preds = %while.body147
  %82 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !4728
  %base150 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %82, i32 0, i32 0, !dbg !4728
  br label %cond.end152, !dbg !4728

cond.false151:                                    ; preds = %while.body147
  br label %cond.end152, !dbg !4728

cond.end152:                                      ; preds = %cond.false151, %cond.true149
  %cond153 = phi %struct.VEC_basic_block_base* [ %base150, %cond.true149 ], [ null, %cond.false151 ], !dbg !4728
  %call154 = call %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %cond153), !dbg !4728
  store %struct.basic_block_def* %call154, %struct.basic_block_def** %bb, align 8, !dbg !4730
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4731
  %prev_bb155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 5, !dbg !4732
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb155, align 8, !dbg !4732
  store %struct.basic_block_def* %84, %struct.basic_block_def** %prev_bb, align 8, !dbg !4733
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4734
  %flags156 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 13, !dbg !4736
  %86 = load i32, i32* %flags156, align 8, !dbg !4736
  %and157 = and i32 %86, 2, !dbg !4737
  %tobool158 = icmp ne i32 %and157, 0, !dbg !4737
  br i1 %tobool158, label %if.then159, label %if.end160, !dbg !4738

if.then159:                                       ; preds = %cond.end152
  br label %while.cond138, !dbg !4739, !llvm.loop !4740

if.end160:                                        ; preds = %cond.end152
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4742
  call void @delete_basic_block(%struct.basic_block_def* %87), !dbg !4743
  br label %while.cond138, !dbg !4726, !llvm.loop !4740

while.end161:                                     ; preds = %cond.end143
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %h), !dbg !4744
  br label %if.end162

if.end162:                                        ; preds = %while.end161, %if.then135
  br label %if.end163, !dbg !4745

if.end163:                                        ; preds = %if.end162, %for.end126
  br label %if.end164, !dbg !4746

if.end164:                                        ; preds = %if.end163, %lor.lhs.false
  br label %for.inc165, !dbg !4747

for.inc165:                                       ; preds = %if.end164
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !4748
  store %struct.basic_block_def* %88, %struct.basic_block_def** %bb, align 8, !dbg !4749
  br label %for.cond65, !dbg !4750, !llvm.loop !4751

for.end166:                                       ; preds = %for.cond65
  br label %if.end167, !dbg !4753

if.end167:                                        ; preds = %for.end166, %while.end
  %89 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4754
  %add.ptr168 = getelementptr inbounds %struct.function, %struct.function* %89, i64 0, !dbg !4754
  %cfg169 = getelementptr inbounds %struct.function, %struct.function* %add.ptr168, i32 0, i32 1, !dbg !4754
  %90 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg169, align 8, !dbg !4754
  %x_entry_block_ptr170 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %90, i32 0, i32 0, !dbg !4754
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr170, align 8, !dbg !4754
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 6, !dbg !4754
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4754
  store %struct.basic_block_def* %92, %struct.basic_block_def** %bb, align 8, !dbg !4754
  br label %for.cond171, !dbg !4754

for.cond171:                                      ; preds = %for.inc180, %if.end167
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4756
  %94 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4756
  %add.ptr172 = getelementptr inbounds %struct.function, %struct.function* %94, i64 0, !dbg !4756
  %cfg173 = getelementptr inbounds %struct.function, %struct.function* %add.ptr172, i32 0, i32 1, !dbg !4756
  %95 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg173, align 8, !dbg !4756
  %x_exit_block_ptr174 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %95, i32 0, i32 1, !dbg !4756
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr174, align 8, !dbg !4756
  %cmp175 = icmp ne %struct.basic_block_def* %93, %96, !dbg !4756
  br i1 %cmp175, label %for.body176, label %for.end182, !dbg !4754

for.body176:                                      ; preds = %for.cond171
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4758
  %call177 = call zeroext i8 @remove_dead_phis(%struct.basic_block_def* %97), !dbg !4760
  %conv = zext i8 %call177 to i32, !dbg !4760
  %98 = load i8, i8* %something_changed, align 1, !dbg !4761
  %conv178 = zext i8 %98 to i32, !dbg !4761
  %or = or i32 %conv178, %conv, !dbg !4761
  %conv179 = trunc i32 %or to i8, !dbg !4761
  store i8 %conv179, i8* %something_changed, align 1, !dbg !4761
  br label %for.inc180, !dbg !4762

for.inc180:                                       ; preds = %for.body176
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4756
  %next_bb181 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 6, !dbg !4756
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb181, align 8, !dbg !4756
  store %struct.basic_block_def* %100, %struct.basic_block_def** %bb, align 8, !dbg !4756
  br label %for.cond171, !dbg !4756, !llvm.loop !4763

for.end182:                                       ; preds = %for.cond171
  %101 = load i8, i8* %something_changed, align 1, !dbg !4765
  ret i8 %101, !dbg !4766
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @print_stats() #0 !dbg !4767 {
entry:
  %percg = alloca float, align 4
  call void @llvm.dbg.declare(metadata float* %percg, metadata !4770, metadata !DIExpression()), !dbg !4771
  %0 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 2), align 4, !dbg !4772
  %conv = sitofp i32 %0 to float, !dbg !4773
  %1 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 0), align 4, !dbg !4774
  %conv1 = sitofp i32 %1 to float, !dbg !4775
  %div = fdiv float %conv, %conv1, !dbg !4776
  %mul = fmul float %div, 1.000000e+02, !dbg !4777
  store float %mul, float* %percg, align 4, !dbg !4778
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4779
  %3 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 2), align 4, !dbg !4780
  %4 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 0), align 4, !dbg !4781
  %5 = load float, float* %percg, align 4, !dbg !4782
  %conv2 = fptosi float %5 to i32, !dbg !4783
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.23, i64 0, i64 0), i32 %3, i32 %4, i32 %conv2), !dbg !4784
  %6 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 1), align 4, !dbg !4785
  %cmp = icmp eq i32 %6, 0, !dbg !4787
  br i1 %cmp, label %if.then, label %if.else, !dbg !4788

if.then:                                          ; preds = %entry
  store float 0.000000e+00, float* %percg, align 4, !dbg !4789
  br label %if.end, !dbg !4790

if.else:                                          ; preds = %entry
  %7 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 3), align 4, !dbg !4791
  %conv4 = sitofp i32 %7 to float, !dbg !4792
  %8 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 1), align 4, !dbg !4793
  %conv5 = sitofp i32 %8 to float, !dbg !4794
  %div6 = fdiv float %conv4, %conv5, !dbg !4795
  %mul7 = fmul float %div6, 1.000000e+02, !dbg !4796
  store float %mul7, float* %percg, align 4, !dbg !4797
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4798
  %10 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 3), align 4, !dbg !4799
  %11 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 1), align 4, !dbg !4800
  %12 = load float, float* %percg, align 4, !dbg !4801
  %conv8 = fptosi float %12 to i32, !dbg !4802
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.24, i64 0, i64 0), i32 %10, i32 %11, i32 %conv8), !dbg !4803
  ret void, !dbg !4804
}

; Function Attrs: noinline nounwind uwtable
define internal void @tree_dce_done(i8 zeroext %aggressive) #0 !dbg !4805 {
entry:
  %aggressive.addr = alloca i8, align 1
  %i = alloca i32, align 4
  store i8 %aggressive, i8* %aggressive.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %aggressive.addr, metadata !4806, metadata !DIExpression()), !dbg !4807
  %0 = load i8, i8* %aggressive.addr, align 1, !dbg !4808
  %tobool = icmp ne i8 %0, 0, !dbg !4808
  br i1 %tobool, label %if.then, label %if.end, !dbg !4810

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4811, metadata !DIExpression()), !dbg !4813
  store i32 0, i32* %i, align 4, !dbg !4814
  br label %for.cond, !dbg !4816

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !4817
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4819
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4819
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4819
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4819
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 5, !dbg !4819
  %4 = load i32, i32* %x_last_basic_block, align 8, !dbg !4819
  %cmp = icmp slt i32 %1, %4, !dbg !4820
  br i1 %cmp, label %for.body, label %for.end, !dbg !4821

for.body:                                         ; preds = %for.cond
  %5 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !4822
  %6 = load i32, i32* %i, align 4, !dbg !4822
  %idxprom = sext i32 %6 to i64, !dbg !4822
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %5, i64 %idxprom, !dbg !4822
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4822
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %7), !dbg !4822
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !4822
  %9 = load i32, i32* %i, align 4, !dbg !4822
  %idxprom1 = sext i32 %9 to i64, !dbg !4822
  %arrayidx2 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom1, !dbg !4822
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx2, align 8, !dbg !4822
  br label %for.inc, !dbg !4822

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !4823
  %inc = add nsw i32 %10, 1, !dbg !4823
  store i32 %inc, i32* %i, align 4, !dbg !4823
  br label %for.cond, !dbg !4824, !llvm.loop !4825

for.end:                                          ; preds = %for.cond
  %11 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !4827
  %12 = bitcast %struct.bitmap_head_def** %11 to i8*, !dbg !4827
  call void @free(i8* %12), !dbg !4828
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !4829
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %13, i32 0, i32 0, !dbg !4829
  %14 = load i8*, i8** %popcount, align 8, !dbg !4829
  call void @free(i8* %14), !dbg !4829
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @visited_control_parents, align 8, !dbg !4829
  %16 = bitcast %struct.simple_bitmap_def* %15 to i8*, !dbg !4829
  call void @free(i8* %16), !dbg !4829
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @last_stmt_necessary, align 8, !dbg !4830
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %17, i32 0, i32 0, !dbg !4830
  %18 = load i8*, i8** %popcount3, align 8, !dbg !4830
  call void @free(i8* %18), !dbg !4830
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @last_stmt_necessary, align 8, !dbg !4830
  %20 = bitcast %struct.simple_bitmap_def* %19 to i8*, !dbg !4830
  call void @free(i8* %20), !dbg !4830
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !4831
  %popcount4 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %21, i32 0, i32 0, !dbg !4831
  %22 = load i8*, i8** %popcount4, align 8, !dbg !4831
  call void @free(i8* %22), !dbg !4831
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !4831
  %24 = bitcast %struct.simple_bitmap_def* %23 to i8*, !dbg !4831
  call void @free(i8* %24), !dbg !4831
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !4832
  br label %if.end, !dbg !4833

if.end:                                           ; preds = %for.end, %entry
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !4834
  %popcount5 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %25, i32 0, i32 0, !dbg !4834
  %26 = load i8*, i8** %popcount5, align 8, !dbg !4834
  call void @free(i8* %26), !dbg !4834
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !4834
  %28 = bitcast %struct.simple_bitmap_def* %27 to i8*, !dbg !4834
  call void @free(i8* %28), !dbg !4834
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** @worklist), !dbg !4835
  ret void, !dbg !4836
}

declare dso_local void @free_edge_list(%struct.edge_list*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4837 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4842, metadata !DIExpression()), !dbg !4843
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4843
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4843
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4843

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4843
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4843
  %2 = load i32, i32* %num, align 8, !dbg !4843
  br label %cond.end, !dbg !4843

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4843

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4843
  ret i32 %cond, !dbg !4843
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !4844 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4847, metadata !DIExpression()), !dbg !4848
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4848
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4848
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !4848
  ret %struct.VEC_gimple_heap* %1, !dbg !4848
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_control_dependence(%struct.edge_list* %el, i32 %edge_index) #0 !dbg !4849 {
entry:
  %el.addr = alloca %struct.edge_list*, align 8
  %edge_index.addr = alloca i32, align 4
  %current_block = alloca %struct.basic_block_def*, align 8
  %ending_block = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.edge_list* %el, %struct.edge_list** %el.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_list** %el.addr, metadata !4852, metadata !DIExpression()), !dbg !4853
  store i32 %edge_index, i32* %edge_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %edge_index.addr, metadata !4854, metadata !DIExpression()), !dbg !4855
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %current_block, metadata !4856, metadata !DIExpression()), !dbg !4857
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ending_block, metadata !4858, metadata !DIExpression()), !dbg !4859
  %0 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4860
  %index_to_edge = getelementptr inbounds %struct.edge_list, %struct.edge_list* %0, i32 0, i32 2, !dbg !4860
  %1 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge, align 8, !dbg !4860
  %2 = load i32, i32* %edge_index.addr, align 4, !dbg !4860
  %idxprom = sext i32 %2 to i64, !dbg !4860
  %arrayidx = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %1, i64 %idxprom, !dbg !4860
  %3 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4860
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !4860
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4860
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4860
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4860
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4860
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4860
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4860
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4860
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4860
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4860

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 168, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4860
  br label %cond.end, !dbg !4860

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4860
  %8 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4861
  %index_to_edge1 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %8, i32 0, i32 2, !dbg !4861
  %9 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge1, align 8, !dbg !4861
  %10 = load i32, i32* %edge_index.addr, align 4, !dbg !4861
  %idxprom2 = sext i32 %10 to i64, !dbg !4861
  %arrayidx3 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %9, i64 %idxprom2, !dbg !4861
  %11 = load %struct.edge_def*, %struct.edge_def** %arrayidx3, align 8, !dbg !4861
  %src4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 0, !dbg !4861
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src4, align 8, !dbg !4861
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4863
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4863
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !4863
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !4863
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !4863
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4863
  %cmp7 = icmp eq %struct.basic_block_def* %12, %15, !dbg !4864
  br i1 %cmp7, label %if.then, label %if.else, !dbg !4865

if.then:                                          ; preds = %cond.end
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4866
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4866
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !4866
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !4866
  %x_entry_block_ptr10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 0, !dbg !4866
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr10, align 8, !dbg !4866
  %call = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %18), !dbg !4867
  store %struct.basic_block_def* %call, %struct.basic_block_def** %ending_block, align 8, !dbg !4868
  br label %if.end, !dbg !4869

if.else:                                          ; preds = %cond.end
  %19 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4870
  %index_to_edge11 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %19, i32 0, i32 2, !dbg !4870
  %20 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge11, align 8, !dbg !4870
  %21 = load i32, i32* %edge_index.addr, align 4, !dbg !4870
  %idxprom12 = sext i32 %21 to i64, !dbg !4870
  %arrayidx13 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %20, i64 %idxprom12, !dbg !4870
  %22 = load %struct.edge_def*, %struct.edge_def** %arrayidx13, align 8, !dbg !4870
  %src14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !4870
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src14, align 8, !dbg !4870
  %call15 = call %struct.basic_block_def* @find_pdom(%struct.basic_block_def* %23), !dbg !4871
  store %struct.basic_block_def* %call15, %struct.basic_block_def** %ending_block, align 8, !dbg !4872
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %24 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4873
  %index_to_edge16 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %24, i32 0, i32 2, !dbg !4873
  %25 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge16, align 8, !dbg !4873
  %26 = load i32, i32* %edge_index.addr, align 4, !dbg !4873
  %idxprom17 = sext i32 %26 to i64, !dbg !4873
  %arrayidx18 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %25, i64 %idxprom17, !dbg !4873
  %27 = load %struct.edge_def*, %struct.edge_def** %arrayidx18, align 8, !dbg !4873
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 1, !dbg !4873
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4873
  store %struct.basic_block_def* %28, %struct.basic_block_def** %current_block, align 8, !dbg !4875
  br label %for.cond, !dbg !4876

for.cond:                                         ; preds = %for.inc, %if.end
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %current_block, align 8, !dbg !4877
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %ending_block, align 8, !dbg !4879
  %cmp19 = icmp ne %struct.basic_block_def* %29, %30, !dbg !4880
  br i1 %cmp19, label %land.rhs, label %land.end, !dbg !4881

land.rhs:                                         ; preds = %for.cond
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %current_block, align 8, !dbg !4882
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4883
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !4883
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !4883
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !4883
  %x_exit_block_ptr22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 1, !dbg !4883
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr22, align 8, !dbg !4883
  %cmp23 = icmp ne %struct.basic_block_def* %31, %34, !dbg !4884
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %35 = phi i1 [ false, %for.cond ], [ %cmp23, %land.rhs ], !dbg !4885
  br i1 %35, label %for.body, label %for.end, !dbg !4886

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4887, metadata !DIExpression()), !dbg !4889
  %36 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !4890
  %index_to_edge24 = getelementptr inbounds %struct.edge_list, %struct.edge_list* %36, i32 0, i32 2, !dbg !4890
  %37 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge24, align 8, !dbg !4890
  %38 = load i32, i32* %edge_index.addr, align 4, !dbg !4890
  %idxprom25 = sext i32 %38 to i64, !dbg !4890
  %arrayidx26 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %37, i64 %idxprom25, !dbg !4890
  %39 = load %struct.edge_def*, %struct.edge_def** %arrayidx26, align 8, !dbg !4890
  store %struct.edge_def* %39, %struct.edge_def** %e, align 8, !dbg !4889
  %40 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4891
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 7, !dbg !4893
  %41 = load i32, i32* %flags, align 8, !dbg !4893
  %and = and i32 %41, 2, !dbg !4894
  %tobool = icmp ne i32 %and, 0, !dbg !4894
  br i1 %tobool, label %if.then27, label %if.end28, !dbg !4895

if.then27:                                        ; preds = %for.body
  br label %for.inc, !dbg !4896

if.end28:                                         ; preds = %for.body
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %current_block, align 8, !dbg !4897
  %43 = load i32, i32* %edge_index.addr, align 4, !dbg !4898
  call void @set_control_dependence_map_bit(%struct.basic_block_def* %42, i32 %43), !dbg !4899
  br label %for.inc, !dbg !4900

for.inc:                                          ; preds = %if.end28, %if.then27
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %current_block, align 8, !dbg !4901
  %call29 = call %struct.basic_block_def* @find_pdom(%struct.basic_block_def* %44), !dbg !4902
  store %struct.basic_block_def* %call29, %struct.basic_block_def** %current_block, align 8, !dbg !4903
  br label %for.cond, !dbg !4904, !llvm.loop !4905

for.end:                                          ; preds = %land.end
  ret void, !dbg !4907
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !4908 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4914, metadata !DIExpression()), !dbg !4915
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4916
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !4917
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4918
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4918
  ret %struct.basic_block_def* %1, !dbg !4919
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @find_pdom(%struct.basic_block_def* %block) #0 !dbg !4920 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !4923, metadata !DIExpression()), !dbg !4924
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !4925
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4925
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4925
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4925
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4925
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !4925
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4925
  %cmp = icmp ne %struct.basic_block_def* %0, %3, !dbg !4925
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4925

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 145, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4925
  br label %cond.end, !dbg !4925

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4925
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !4926
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4928
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4928
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4928
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4928
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4928
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4928
  %cmp3 = icmp eq %struct.basic_block_def* %4, %7, !dbg !4929
  br i1 %cmp3, label %if.then, label %if.else, !dbg !4930

if.then:                                          ; preds = %cond.end
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4931
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4931
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !4931
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !4931
  %x_exit_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !4931
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr6, align 8, !dbg !4931
  store %struct.basic_block_def* %10, %struct.basic_block_def** %retval, align 8, !dbg !4932
  br label %return, !dbg !4932

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4933, metadata !DIExpression()), !dbg !4935
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !4936
  %call = call %struct.basic_block_def* @get_immediate_dominator(i32 2, %struct.basic_block_def* %11), !dbg !4937
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !4935
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4938
  %tobool = icmp ne %struct.basic_block_def* %12, null, !dbg !4938
  br i1 %tobool, label %if.end, label %if.then7, !dbg !4940

if.then7:                                         ; preds = %if.else
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4941
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4941
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !4941
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !4941
  %x_exit_block_ptr10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 1, !dbg !4941
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr10, align 8, !dbg !4941
  store %struct.basic_block_def* %15, %struct.basic_block_def** %retval, align 8, !dbg !4942
  br label %return, !dbg !4942

if.end:                                           ; preds = %if.else
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4943
  store %struct.basic_block_def* %16, %struct.basic_block_def** %retval, align 8, !dbg !4944
  br label %return, !dbg !4944

return:                                           ; preds = %if.end, %if.then7, %if.then
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !4945
  ret %struct.basic_block_def* %17, !dbg !4945
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_control_dependence_map_bit(%struct.basic_block_def* %bb, i32 %edge_index) #0 !dbg !4946 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %edge_index.addr = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4949, metadata !DIExpression()), !dbg !4950
  store i32 %edge_index, i32* %edge_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %edge_index.addr, metadata !4951, metadata !DIExpression()), !dbg !4952
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4953
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4955
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !4955
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4955
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4955
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !4955
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4955
  %cmp = icmp eq %struct.basic_block_def* %0, %3, !dbg !4956
  br i1 %cmp, label %if.then, label %if.end, !dbg !4957

if.then:                                          ; preds = %entry
  br label %return, !dbg !4958

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4959
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4959
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4959
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4959
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4959
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4959
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4959
  %cmp3 = icmp ne %struct.basic_block_def* %4, %7, !dbg !4959
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !4959

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4959
  br label %cond.end, !dbg !4959

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4959
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !4960
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4961
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !4962
  %10 = load i32, i32* %index, align 8, !dbg !4962
  %idxprom = sext i32 %10 to i64, !dbg !4960
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom, !dbg !4960
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4960
  %12 = load i32, i32* %edge_index.addr, align 4, !dbg !4963
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !4964
  br label %return, !dbg !4965

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !4965
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !4966 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4969, metadata !DIExpression()), !dbg !4970
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4971
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !4971
  %tobool = icmp ne i8 %call, 0, !dbg !4971
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4971

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4971
  br label %cond.end, !dbg !4971

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4971

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4971
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4972
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !4972
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4972
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !4972
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4972

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4972
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !4972
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !4972
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !4972
  br label %cond.end5, !dbg !4972

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4972

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !4972
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !4972
  ret %struct.edge_def* %call7, !dbg !4973
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !4974 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4977, metadata !DIExpression()), !dbg !4978
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4979
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4979
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4979
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4979
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4979

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4979
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4979
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4979
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4979
  br label %cond.end, !dbg !4979

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4979
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4979
  %cmp = icmp eq i32 %call, 1, !dbg !4980
  %conv = zext i1 %cmp to i32, !dbg !4980
  %conv2 = trunc i32 %conv to i8, !dbg !4979
  ret i8 %conv2, !dbg !4981
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4982 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4987, metadata !DIExpression()), !dbg !4988
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4989, metadata !DIExpression()), !dbg !4988
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4988
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4988
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4988

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4988
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4988
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4988
  %3 = load i32, i32* %num, align 8, !dbg !4988
  %cmp = icmp ult i32 %1, %3, !dbg !4988
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4990
  %land.ext = zext i1 %4 to i32, !dbg !4988
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4988
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4988
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4988
  %idxprom = zext i32 %6 to i64, !dbg !4988
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4988
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4988
  ret %struct.edge_def* %7, !dbg !4988
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4991 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4994, metadata !DIExpression()), !dbg !4995
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4995
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4995
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4995

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4995
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4995
  %2 = load i32, i32* %num, align 8, !dbg !4995
  br label %cond.end, !dbg !4995

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4995

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4995
  ret i32 %cond, !dbg !4995
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4996 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4999, metadata !DIExpression()), !dbg !5000
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5001
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5001
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5002
  %conv = zext i1 %cmp to i32, !dbg !5002
  %conv1 = trunc i32 %conv to i8, !dbg !5003
  ret i8 %conv1, !dbg !5004
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5005 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5008, metadata !DIExpression()), !dbg !5009
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5010
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5010
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5011
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5011
  ret %union.gimple_statement_d* %1, !dbg !5012
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_plf(%union.gimple_statement_d* %stmt, i32 %plf, i8 zeroext %val_p) #0 !dbg !5013 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  %val_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5016, metadata !DIExpression()), !dbg !5017
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !5018, metadata !DIExpression()), !dbg !5019
  store i8 %val_p, i8* %val_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %val_p.addr, metadata !5020, metadata !DIExpression()), !dbg !5021
  %0 = load i8, i8* %val_p.addr, align 1, !dbg !5022
  %tobool = icmp ne i8 %0, 0, !dbg !5022
  br i1 %tobool, label %if.then, label %if.else, !dbg !5024

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %plf.addr, align 4, !dbg !5025
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5026
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !5027
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5028
  %bf.load = load i32, i32* %3, align 8, !dbg !5029
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5029
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5029
  %or = or i32 %bf.clear, %1, !dbg !5029
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5029
  %bf.value = and i32 %or, 3, !dbg !5029
  %bf.shl = shl i32 %bf.value, 11, !dbg !5029
  %bf.clear2 = and i32 %bf.load1, -6145, !dbg !5029
  %bf.set = or i32 %bf.clear2, %bf.shl, !dbg !5029
  store i32 %bf.set, i32* %3, align 8, !dbg !5029
  br label %if.end, !dbg !5026

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %plf.addr, align 4, !dbg !5030
  %neg = xor i32 %4, -1, !dbg !5031
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5032
  %gsbase3 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_base*, !dbg !5033
  %6 = bitcast %struct.gimple_statement_base* %gsbase3 to i32*, !dbg !5034
  %bf.load4 = load i32, i32* %6, align 8, !dbg !5035
  %bf.lshr5 = lshr i32 %bf.load4, 11, !dbg !5035
  %bf.clear6 = and i32 %bf.lshr5, 3, !dbg !5035
  %and = and i32 %bf.clear6, %neg, !dbg !5035
  %bf.load7 = load i32, i32* %6, align 8, !dbg !5035
  %bf.value8 = and i32 %and, 3, !dbg !5035
  %bf.shl9 = shl i32 %bf.value8, 11, !dbg !5035
  %bf.clear10 = and i32 %bf.load7, -6145, !dbg !5035
  %bf.set11 = or i32 %bf.clear10, %bf.shl9, !dbg !5035
  store i32 %bf.set11, i32* %6, align 8, !dbg !5035
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5036
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5037 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5041, metadata !DIExpression()), !dbg !5042
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5043
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5044
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5044
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5045
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5045
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5046
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5047
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5048
  ret void, !dbg !5049
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5050 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5053, metadata !DIExpression()), !dbg !5054
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5055, metadata !DIExpression()), !dbg !5056
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5057, metadata !DIExpression()), !dbg !5058
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5059
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5060
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5061
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5062
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5063
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5064
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5065
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5066
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5067
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5068
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5069
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5070
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5071
  ret void, !dbg !5072
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_stmt_if_obviously_necessary(%union.gimple_statement_d* %stmt, i8 zeroext %aggressive) #0 !dbg !5073 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %aggressive.addr = alloca i8, align 1
  %lhs = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5076, metadata !DIExpression()), !dbg !5077
  store i8 %aggressive, i8* %aggressive.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %aggressive.addr, metadata !5078, metadata !DIExpression()), !dbg !5079
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5080, metadata !DIExpression()), !dbg !5081
  store %union.tree_node* null, %union.tree_node** %lhs, align 8, !dbg !5081
  %0 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !5082
  %tobool = icmp ne i32 %0, 0, !dbg !5082
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5084

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5085
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %1), !dbg !5086
  %conv = zext i8 %call to i32, !dbg !5086
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5086
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5087

if.then:                                          ; preds = %land.lhs.true
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5088
  call void @mark_stmt_necessary(%union.gimple_statement_d* %2, i8 zeroext 1), !dbg !5090
  br label %return, !dbg !5091

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5092
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !5093
  switch i32 %call2, label %sw.default [
    i32 33, label %sw.bb
    i32 4, label %sw.bb
    i32 7, label %sw.bb3
    i32 14, label %sw.bb3
    i32 9, label %sw.bb3
    i32 8, label %sw.bb4
    i32 6, label %sw.bb14
    i32 2, label %sw.bb19
    i32 3, label %sw.bb27
    i32 1, label %sw.bb30
    i32 5, label %sw.bb47
  ], !dbg !5094

sw.bb:                                            ; preds = %if.end, %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5095
  call void @mark_stmt_necessary(%union.gimple_statement_d* %4, i8 zeroext 0), !dbg !5097
  br label %return, !dbg !5098

sw.bb3:                                           ; preds = %if.end, %if.end, %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5099
  call void @mark_stmt_necessary(%union.gimple_statement_d* %5, i8 zeroext 1), !dbg !5100
  br label %return, !dbg !5101

sw.bb4:                                           ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5102
  %call5 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %6), !dbg !5104
  %tobool6 = icmp ne i8 %call5, 0, !dbg !5104
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !5105

if.then7:                                         ; preds = %sw.bb4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5106
  call void @mark_stmt_necessary(%union.gimple_statement_d* %7, i8 zeroext 1), !dbg !5108
  br label %return, !dbg !5109

if.end8:                                          ; preds = %sw.bb4
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5110
  %call9 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %8), !dbg !5112
  %tobool10 = icmp ne %union.tree_node* %call9, null, !dbg !5112
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !5113

if.then11:                                        ; preds = %if.end8
  br label %return, !dbg !5114

if.end12:                                         ; preds = %if.end8
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5115
  %call13 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %9), !dbg !5116
  store %union.tree_node* %call13, %union.tree_node** %lhs, align 8, !dbg !5117
  br label %sw.bb14, !dbg !5118

sw.bb14:                                          ; preds = %if.end, %if.end12
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5119
  %tobool15 = icmp ne %union.tree_node* %10, null, !dbg !5119
  br i1 %tobool15, label %if.end18, label %if.then16, !dbg !5121

if.then16:                                        ; preds = %sw.bb14
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5122
  %call17 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %11), !dbg !5123
  store %union.tree_node* %call17, %union.tree_node** %lhs, align 8, !dbg !5124
  br label %if.end18, !dbg !5125

if.end18:                                         ; preds = %if.then16, %sw.bb14
  br label %sw.epilog, !dbg !5126

sw.bb19:                                          ; preds = %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5127
  %call20 = call zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %12), !dbg !5129
  %conv21 = zext i8 %call20 to i32, !dbg !5129
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !5129
  br i1 %tobool22, label %if.then25, label %lor.lhs.false, !dbg !5130

lor.lhs.false:                                    ; preds = %sw.bb19
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5131
  %call23 = call %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %13), !dbg !5131
  %base = bitcast %union.tree_node* %call23 to %struct.tree_base*, !dbg !5131
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !5131
  %bf.load = load i64, i64* %14, align 8, !dbg !5131
  %bf.clear = and i64 %bf.load, 65535, !dbg !5131
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5131
  %cmp = icmp ne i32 %bf.cast, 37, !dbg !5132
  br i1 %cmp, label %if.then25, label %if.end26, !dbg !5133

if.then25:                                        ; preds = %lor.lhs.false, %sw.bb19
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5134
  call void @mark_stmt_necessary(%union.gimple_statement_d* %15, i8 zeroext 0), !dbg !5135
  br label %if.end26, !dbg !5135

if.end26:                                         ; preds = %if.then25, %lor.lhs.false
  br label %return, !dbg !5136

sw.bb27:                                          ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5137
  %call28 = call zeroext i8 @simple_goto_p(%union.gimple_statement_d* %16), !dbg !5137
  %tobool29 = icmp ne i8 %call28, 0, !dbg !5137
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !5137

cond.true:                                        ; preds = %sw.bb27
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 338, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5137
  br label %cond.end, !dbg !5137

cond.false:                                       ; preds = %sw.bb27
  br label %cond.end, !dbg !5137

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5137
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5138
  call void @mark_stmt_necessary(%union.gimple_statement_d* %17, i8 zeroext 1), !dbg !5139
  br label %return, !dbg !5140

sw.bb30:                                          ; preds = %if.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5141
  %call31 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %18), !dbg !5141
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call31, i32 0, i32 1, !dbg !5141
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5141
  %tobool32 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !5141
  br i1 %tobool32, label %cond.true33, label %cond.false37, !dbg !5141

cond.true33:                                      ; preds = %sw.bb30
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5141
  %call34 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %20), !dbg !5141
  %succs35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call34, i32 0, i32 1, !dbg !5141
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs35, align 8, !dbg !5141
  %base36 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !5141
  br label %cond.end38, !dbg !5141

cond.false37:                                     ; preds = %sw.bb30
  br label %cond.end38, !dbg !5141

cond.end38:                                       ; preds = %cond.false37, %cond.true33
  %cond39 = phi %struct.VEC_edge_base* [ %base36, %cond.true33 ], [ null, %cond.false37 ], !dbg !5141
  %call40 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond39), !dbg !5141
  %cmp41 = icmp eq i32 %call40, 2, !dbg !5141
  br i1 %cmp41, label %cond.false44, label %cond.true43, !dbg !5141

cond.true43:                                      ; preds = %cond.end38
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 343, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5141
  br label %cond.end45, !dbg !5141

cond.false44:                                     ; preds = %cond.end38
  br label %cond.end45, !dbg !5141

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !5141
  br label %sw.bb47, !dbg !5141

sw.bb47:                                          ; preds = %if.end, %cond.end45
  %22 = load i8, i8* %aggressive.addr, align 1, !dbg !5142
  %tobool48 = icmp ne i8 %22, 0, !dbg !5142
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !5144

if.then49:                                        ; preds = %sw.bb47
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5145
  call void @mark_stmt_necessary(%union.gimple_statement_d* %23, i8 zeroext 1), !dbg !5146
  br label %if.end50, !dbg !5146

if.end50:                                         ; preds = %if.then49, %sw.bb47
  br label %sw.epilog, !dbg !5147

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !5148

sw.epilog:                                        ; preds = %sw.default, %if.end50, %if.end18
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5149
  %call51 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %24), !dbg !5151
  %conv52 = zext i8 %call51 to i32, !dbg !5151
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !5151
  br i1 %tobool53, label %if.then58, label %lor.lhs.false54, !dbg !5152

lor.lhs.false54:                                  ; preds = %sw.epilog
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5153
  %call55 = call zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d* %25), !dbg !5154
  %conv56 = zext i8 %call55 to i32, !dbg !5154
  %tobool57 = icmp ne i32 %conv56, 0, !dbg !5154
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !5155

if.then58:                                        ; preds = %lor.lhs.false54, %sw.epilog
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5156
  call void @mark_stmt_necessary(%union.gimple_statement_d* %26, i8 zeroext 1), !dbg !5158
  br label %return, !dbg !5159

if.end59:                                         ; preds = %lor.lhs.false54
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5160
  %call60 = call zeroext i8 @is_hidden_global_store(%union.gimple_statement_d* %27), !dbg !5162
  %tobool61 = icmp ne i8 %call60, 0, !dbg !5162
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !5163

if.then62:                                        ; preds = %if.end59
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5164
  call void @mark_stmt_necessary(%union.gimple_statement_d* %28, i8 zeroext 1), !dbg !5166
  br label %return, !dbg !5167

if.end63:                                         ; preds = %if.end59
  br label %return, !dbg !5168

return:                                           ; preds = %if.end63, %if.then62, %if.then58, %cond.end, %if.end26, %if.then11, %if.then7, %sw.bb3, %sw.bb, %if.then
  ret void, !dbg !5169
}

declare dso_local void @scev_initialize() #2

declare dso_local zeroext i8 @mark_irreducible_loops() #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !5170 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !5175, metadata !DIExpression()), !dbg !5176
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !5177
  store i32 0, i32* %index, align 8, !dbg !5178
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !5179
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !5180
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !5181
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !5182
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !5182
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !5182
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !5183 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5186, metadata !DIExpression()), !dbg !5187
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !5188, metadata !DIExpression()), !dbg !5189
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5190
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5190
  %5 = load i32, i32* %4, align 8, !dbg !5190
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5190
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5190
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5190
  %tobool = icmp ne i8 %call, 0, !dbg !5190
  br i1 %tobool, label %if.else, label %if.then, !dbg !5192

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5193
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5193
  %10 = load i32, i32* %9, align 8, !dbg !5193
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5193
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5193
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5193
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5195
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !5196
  store i8 1, i8* %retval, align 1, !dbg !5197
  br label %return, !dbg !5197

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5198
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !5200
  store i8 0, i8* %retval, align 1, !dbg !5201
  br label %return, !dbg !5201

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !5202
  ret i8 %15, !dbg !5202
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_control_dependent_edges_necessary(%struct.basic_block_def* %bb, %struct.edge_list* %el) #0 !dbg !5203 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %el.addr = alloca %struct.edge_list*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %edge_number = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %cd_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5206, metadata !DIExpression()), !dbg !5207
  store %struct.edge_list* %el, %struct.edge_list** %el.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_list** %el.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5210, metadata !DIExpression()), !dbg !5218
  call void @llvm.dbg.declare(metadata i32* %edge_number, metadata !5219, metadata !DIExpression()), !dbg !5220
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5221
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5221
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5221
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5221
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5221
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 1, !dbg !5221
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5221
  %cmp = icmp ne %struct.basic_block_def* %0, %3, !dbg !5221
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5221

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 383, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5221
  br label %cond.end, !dbg !5221

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5221

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5221
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5222
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5224
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5224
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5224
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5224
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !5224
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5224
  %cmp3 = icmp eq %struct.basic_block_def* %4, %7, !dbg !5225
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5226

if.then:                                          ; preds = %cond.end
  br label %for.end, !dbg !5227

if.end:                                           ; preds = %cond.end
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** @control_dependence_map, align 8, !dbg !5228
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5228
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !5228
  %10 = load i32, i32* %index, align 8, !dbg !5228
  %idxprom = sext i32 %10 to i64, !dbg !5228
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom, !dbg !5228
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !5228
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %11, i32 0, i32* %edge_number), !dbg !5228
  br label %for.cond, !dbg !5228

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %edge_number), !dbg !5230
  %tobool = icmp ne i8 %call, 0, !dbg !5228
  br i1 %tobool, label %for.body, label %for.end, !dbg !5228

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5232, metadata !DIExpression()), !dbg !5234
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cd_bb, metadata !5235, metadata !DIExpression()), !dbg !5236
  %12 = load %struct.edge_list*, %struct.edge_list** %el.addr, align 8, !dbg !5237
  %index_to_edge = getelementptr inbounds %struct.edge_list, %struct.edge_list* %12, i32 0, i32 2, !dbg !5237
  %13 = load %struct.edge_def**, %struct.edge_def*** %index_to_edge, align 8, !dbg !5237
  %14 = load i32, i32* %edge_number, align 4, !dbg !5237
  %idxprom4 = zext i32 %14 to i64, !dbg !5237
  %arrayidx5 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %13, i64 %idxprom4, !dbg !5237
  %15 = load %struct.edge_def*, %struct.edge_def** %arrayidx5, align 8, !dbg !5237
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 0, !dbg !5237
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5237
  store %struct.basic_block_def* %16, %struct.basic_block_def** %cd_bb, align 8, !dbg !5236
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @last_stmt_necessary, align 8, !dbg !5238
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %17, i32 0, i32 3, !dbg !5238
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %cd_bb, align 8, !dbg !5238
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !5238
  %19 = load i32, i32* %index6, align 8, !dbg !5238
  %div = udiv i32 %19, 64, !dbg !5238
  %idxprom7 = zext i32 %div to i64, !dbg !5238
  %arrayidx8 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom7, !dbg !5238
  %20 = load i64, i64* %arrayidx8, align 8, !dbg !5238
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %cd_bb, align 8, !dbg !5238
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !5238
  %22 = load i32, i32* %index9, align 8, !dbg !5238
  %rem = urem i32 %22, 64, !dbg !5238
  %sh_prom = zext i32 %rem to i64, !dbg !5238
  %shr = lshr i64 %20, %sh_prom, !dbg !5238
  %and = and i64 %shr, 1, !dbg !5238
  %tobool10 = icmp ne i64 %and, 0, !dbg !5238
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !5240

if.then11:                                        ; preds = %for.body
  br label %for.inc, !dbg !5241

if.end12:                                         ; preds = %for.body
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @last_stmt_necessary, align 8, !dbg !5242
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %cd_bb, align 8, !dbg !5243
  %index13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 9, !dbg !5244
  %25 = load i32, i32* %index13, align 8, !dbg !5244
  call void @SET_BIT(%struct.simple_bitmap_def* %23, i32 %25), !dbg !5245
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !5246
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %cd_bb, align 8, !dbg !5247
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !5248
  %28 = load i32, i32* %index14, align 8, !dbg !5248
  call void @SET_BIT(%struct.simple_bitmap_def* %26, i32 %28), !dbg !5249
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %cd_bb, align 8, !dbg !5250
  %call15 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %29), !dbg !5251
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %stmt, align 8, !dbg !5252
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5253
  %tobool16 = icmp ne %union.gimple_statement_d* %30, null, !dbg !5253
  br i1 %tobool16, label %land.lhs.true, label %if.end20, !dbg !5255

land.lhs.true:                                    ; preds = %if.end12
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5256
  %call17 = call zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d* %31), !dbg !5257
  %conv = zext i8 %call17 to i32, !dbg !5257
  %tobool18 = icmp ne i32 %conv, 0, !dbg !5257
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !5258

if.then19:                                        ; preds = %land.lhs.true
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5259
  call void @mark_stmt_necessary(%union.gimple_statement_d* %32, i8 zeroext 1), !dbg !5260
  br label %if.end20, !dbg !5260

if.end20:                                         ; preds = %if.then19, %land.lhs.true, %if.end12
  br label %for.inc, !dbg !5261

for.inc:                                          ; preds = %if.end20, %if.then11
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %edge_number), !dbg !5230
  br label %for.cond, !dbg !5230, !llvm.loop !5262

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5264
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !5265 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !5269, metadata !DIExpression()), !dbg !5270
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5271
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !5271
  %1 = load i32, i32* %index, align 8, !dbg !5271
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5271
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !5271
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5271
  %5 = load i32, i32* %4, align 8, !dbg !5271
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5271
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5271
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5271
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5271
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5271

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5271
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !5271
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5271
  %11 = load i32, i32* %10, align 8, !dbg !5271
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5271
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5271
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5271
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5271
  br label %cond.end, !dbg !5271

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5271

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5271
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5271
  %cmp = icmp ult i32 %1, %call2, !dbg !5271
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !5271

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5271
  br label %cond.end5, !dbg !5271

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5271

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5271
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5272
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !5273
  %15 = load i32, i32* %index7, align 8, !dbg !5274
  %inc = add i32 %15, 1, !dbg !5274
  store i32 %inc, i32* %index7, align 8, !dbg !5274
  ret void, !dbg !5275
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !5276 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5281, metadata !DIExpression()), !dbg !5282
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5283, metadata !DIExpression()), !dbg !5284
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5285, metadata !DIExpression()), !dbg !5286
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !5287, metadata !DIExpression()), !dbg !5288
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5289, metadata !DIExpression()), !dbg !5290
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !5291, metadata !DIExpression()), !dbg !5292
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5293
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !5294
  store i32 0, i32* %idx, align 8, !dbg !5295
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5296
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5296
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5296
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5296
  %tobool = icmp ne %struct.loops* %2, null, !dbg !5296
  br i1 %tobool, label %if.end, label %if.then, !dbg !5298

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5299
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !5301
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5302
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5303
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !5304
  br label %return, !dbg !5305

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !5306
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !5306
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5307
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !5308
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !5309
  %6 = load i32, i32* %flags.addr, align 4, !dbg !5310
  %and = and i32 %6, 1, !dbg !5311
  %tobool3 = icmp ne i32 %and, 0, !dbg !5312
  %7 = zext i1 %tobool3 to i64, !dbg !5312
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !5312
  store i32 %cond, i32* %mn, align 4, !dbg !5313
  %8 = load i32, i32* %flags.addr, align 4, !dbg !5314
  %and4 = and i32 %8, 4, !dbg !5316
  %tobool5 = icmp ne i32 %and4, 0, !dbg !5316
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !5317

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !5318
  br label %for.cond, !dbg !5321

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5322
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !5322
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !5322
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !5322
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !5322
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5322
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !5322
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5322

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5322
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5322
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !5322
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !5322
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !5322
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !5322
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !5322
  br label %cond.end, !dbg !5322

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5322

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5322
  %15 = load i32, i32* %i, align 4, !dbg !5322
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !5322
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5324
  br i1 %tobool15, label %for.body, label %for.end, !dbg !5324

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5325
  %cmp = icmp ne %struct.loop* %16, null, !dbg !5327
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !5328

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5329
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !5330
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5330
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !5331
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !5332

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5333
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !5334
  %20 = load i32, i32* %num, align 8, !dbg !5334
  %21 = load i32, i32* %mn, align 4, !dbg !5335
  %cmp18 = icmp sge i32 %20, %21, !dbg !5336
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !5337

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5338
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !5338
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !5338
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !5338
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !5338

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5338
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !5338
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !5338
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !5338
  br label %cond.end26, !dbg !5338

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !5338

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !5338
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5338
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !5338
  %27 = load i32, i32* %num28, align 8, !dbg !5338
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !5338
  br label %if.end30, !dbg !5338

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5335

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !5339
  %inc = add i32 %28, 1, !dbg !5339
  store i32 %inc, i32* %i, align 4, !dbg !5339
  br label %for.cond, !dbg !5340, !llvm.loop !5341

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !5343

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !5344
  %and31 = and i32 %29, 2, !dbg !5346
  %tobool32 = icmp ne i32 %and31, 0, !dbg !5346
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !5347

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5348
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !5348
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !5348
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !5348
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !5351
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5351
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !5352
  br label %for.cond36, !dbg !5353

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5354
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !5356
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !5356
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !5357
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !5358

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !5359

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5360
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !5361
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !5361
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !5362
  br label %for.cond36, !dbg !5363, !llvm.loop !5364

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !5366

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5367
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !5370
  %38 = load i32, i32* %num43, align 8, !dbg !5370
  %39 = load i32, i32* %mn, align 4, !dbg !5371
  %cmp44 = icmp sge i32 %38, %39, !dbg !5372
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !5373

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5374
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !5374
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !5374
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !5374
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !5374

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5374
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !5374
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !5374
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !5374
  br label %cond.end52, !dbg !5374

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !5374

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !5374
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5374
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !5374
  %45 = load i32, i32* %num54, align 8, !dbg !5374
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !5374
  br label %if.end56, !dbg !5374

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5375
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !5377
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !5377
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !5375
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !5378

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5379
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !5382
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !5382
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !5383
  br label %for.cond60, !dbg !5384

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5385
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !5387
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !5387
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !5388
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !5389

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !5390

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5391
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !5392
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !5392
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !5393
  br label %for.cond60, !dbg !5394, !llvm.loop !5395

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !5397

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5398
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !5400
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !5400
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !5401

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !5402

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5403
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !5404
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !5405
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !5366, !llvm.loop !5406

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !5408

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5409
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !5409
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !5409
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !5409
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !5411
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !5411
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !5412
  br label %while.body79, !dbg !5413

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5414
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !5417
  %60 = load i32, i32* %num80, align 8, !dbg !5417
  %61 = load i32, i32* %mn, align 4, !dbg !5418
  %cmp81 = icmp sge i32 %60, %61, !dbg !5419
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !5420

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5421
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !5421
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !5421
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !5421
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !5421

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5421
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !5421
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !5421
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !5421
  br label %cond.end89, !dbg !5421

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !5421

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !5421
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5421
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !5421
  %67 = load i32, i32* %num91, align 8, !dbg !5421
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !5421
  br label %if.end93, !dbg !5421

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5422
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !5424
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !5424
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !5425
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !5426

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5427
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !5428
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !5428
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !5429
  br label %if.end110, !dbg !5430

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !5431

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5433
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !5434
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !5435

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5436
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !5437
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !5437
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !5438
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !5439
  br i1 %75, label %while.body103, label %while.end105, !dbg !5431

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5440
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !5441
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !5442
  br label %while.cond99, !dbg !5431, !llvm.loop !5443

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5445
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !5447
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !5448

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !5449

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5450
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !5451
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !5451
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !5452
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !5413, !llvm.loop !5453

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5455
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5456
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !5457
  br label %return, !dbg !5458

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !5458
}

declare dso_local zeroext i8 @finite_loop_p(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !5459 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5462, metadata !DIExpression()), !dbg !5463
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5464, metadata !DIExpression()), !dbg !5465
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !5466, metadata !DIExpression()), !dbg !5467
  br label %while.cond, !dbg !5468

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5469
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !5469
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5469
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5469
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5469

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5469
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !5469
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !5469
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !5469
  br label %cond.end, !dbg !5469

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !5469

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5469
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5469
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !5469
  %5 = load i32, i32* %idx, align 8, !dbg !5469
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !5469
  %tobool2 = icmp ne i32 %call, 0, !dbg !5468
  br i1 %tobool2, label %while.body, label %while.end, !dbg !5468

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5470
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !5472
  %7 = load i32, i32* %idx3, align 8, !dbg !5473
  %inc = add i32 %7, 1, !dbg !5473
  store i32 %inc, i32* %idx3, align 8, !dbg !5473
  %8 = load i32, i32* %anum, align 4, !dbg !5474
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !5475
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5476
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !5477
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5478
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !5480
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !5480
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5481

if.then:                                          ; preds = %while.body
  br label %return, !dbg !5482

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !5468, !llvm.loop !5483

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5485
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !5485
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !5485
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5486
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !5487
  br label %return, !dbg !5488

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5488
}

declare dso_local void @scev_finalize() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5489 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5492, metadata !DIExpression()), !dbg !5493
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5494
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5495
  %1 = load i32, i32* %flags, align 8, !dbg !5495
  %and = and i32 %1, 512, !dbg !5496
  %tobool = icmp ne i32 %and, 0, !dbg !5496
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5497

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5498
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5499
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5500
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5500
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5498
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5501

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5502
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5503
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5504
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5504
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5505
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5505
  br label %cond.end, !dbg !5501

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5501

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5501
  ret %struct.gimple_seq_d* %cond, !dbg !5506
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5507 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5513, metadata !DIExpression()), !dbg !5514
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5515
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5515
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5515

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5516
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5517
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5517
  br label %cond.end, !dbg !5515

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5515

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5515
  ret %struct.gimple_seq_node_d* %cond, !dbg !5518
}

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_stmt_necessary(%union.gimple_statement_d* %stmt, i8 zeroext %add_to_worklist) #0 !dbg !5519 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %add_to_worklist.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5520, metadata !DIExpression()), !dbg !5521
  store i8 %add_to_worklist, i8* %add_to_worklist.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %add_to_worklist.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5524
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !5524
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5524

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 209, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5524
  br label %cond.end, !dbg !5524

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5524

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5524
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5525
  %call = call i32 @gimple_plf(%union.gimple_statement_d* %1, i32 1), !dbg !5527
  %tobool1 = icmp ne i32 %call, 0, !dbg !5527
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5528

if.then:                                          ; preds = %cond.end
  br label %if.end18, !dbg !5529

if.end:                                           ; preds = %cond.end
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5530
  %tobool2 = icmp ne %struct._IO_FILE* %2, null, !dbg !5530
  br i1 %tobool2, label %land.lhs.true, label %if.end7, !dbg !5532

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* @dump_flags, align 4, !dbg !5533
  %and = and i32 %3, 8, !dbg !5534
  %tobool3 = icmp ne i32 %and, 0, !dbg !5534
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !5535

if.then4:                                         ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5536
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)), !dbg !5538
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5539
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5540
  call void @print_gimple_stmt(%struct._IO_FILE* %5, %union.gimple_statement_d* %6, i32 0, i32 2), !dbg !5541
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5542
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5543
  br label %if.end7, !dbg !5544

if.end7:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5545
  call void @gimple_set_plf(%union.gimple_statement_d* %8, i32 1, i8 zeroext 1), !dbg !5546
  %9 = load i8, i8* %add_to_worklist.addr, align 1, !dbg !5547
  %tobool8 = icmp ne i8 %9, 0, !dbg !5547
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !5549

if.then9:                                         ; preds = %if.end7
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5550
  %call10 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @worklist, %union.gimple_statement_d* %10), !dbg !5550
  br label %if.end11, !dbg !5550

if.end11:                                         ; preds = %if.then9, %if.end7
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !5551
  %tobool12 = icmp ne %struct.simple_bitmap_def* %11, null, !dbg !5551
  br i1 %tobool12, label %land.lhs.true13, label %if.end18, !dbg !5553

land.lhs.true13:                                  ; preds = %if.end11
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5554
  %call14 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %12), !dbg !5555
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5555
  br i1 %tobool15, label %if.end18, label %if.then16, !dbg !5556

if.then16:                                        ; preds = %land.lhs.true13
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !5557
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5558
  %call17 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %14), !dbg !5559
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call17, i32 0, i32 9, !dbg !5560
  %15 = load i32, i32* %index, align 8, !dbg !5560
  call void @SET_BIT(%struct.simple_bitmap_def* %13, i32 %15), !dbg !5561
  br label %if.end18, !dbg !5561

if.end18:                                         ; preds = %if.then, %if.then16, %land.lhs.true13, %if.end11
  ret void, !dbg !5562
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5563 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5564, metadata !DIExpression()), !dbg !5565
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5566
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5567
  ret %union.tree_node* %call, !dbg !5568
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5569 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5570, metadata !DIExpression()), !dbg !5571
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5572
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5573
  ret %union.tree_node* %call, !dbg !5574
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %dbg) #0 !dbg !5575 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !5580
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5581
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !5582
  %conv = zext i1 %cmp to i32, !dbg !5582
  %conv1 = trunc i32 %conv to i8, !dbg !5581
  ret i8 %conv1, !dbg !5583
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %dbg) #0 !dbg !5584 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !5587, metadata !DIExpression()), !dbg !5588
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !5589
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5590
  ret %union.tree_node* %call, !dbg !5591
}

declare dso_local zeroext i8 @simple_goto_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5592 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5595, metadata !DIExpression()), !dbg !5596
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5597
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5598
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5599
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5599
  ret %struct.basic_block_def* %1, !dbg !5600
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !5601 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5602, metadata !DIExpression()), !dbg !5603
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5604
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5606
  %tobool = icmp ne i8 %call, 0, !dbg !5606
  br i1 %tobool, label %if.then, label %if.else, !dbg !5607

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5608
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5609
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5610
  %bf.load = load i32, i32* %2, align 8, !dbg !5610
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !5610
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5610
  %conv = trunc i32 %bf.clear to i8, !dbg !5608
  store i8 %conv, i8* %retval, align 1, !dbg !5611
  br label %return, !dbg !5611

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5612
  br label %return, !dbg !5612

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !5613
  ret i8 %3, !dbg !5613
}

declare dso_local zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @is_hidden_global_store(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_plf(%union.gimple_statement_d* %stmt, i32 %plf) #0 !dbg !5614 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5617, metadata !DIExpression()), !dbg !5618
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !5619, metadata !DIExpression()), !dbg !5620
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5621
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5622
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5623
  %bf.load = load i32, i32* %1, align 8, !dbg !5623
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5623
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5623
  %2 = load i32, i32* %plf.addr, align 4, !dbg !5624
  %and = and i32 %bf.clear, %2, !dbg !5625
  ret i32 %and, !dbg !5626
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !5627 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5632, metadata !DIExpression()), !dbg !5633
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !5634, metadata !DIExpression()), !dbg !5633
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5633
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !5633
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5633
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !5633
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !5633
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5633

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5633
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !5633
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !5633
  br label %cond.end, !dbg !5633

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5633

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5633
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !5633
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !5633
  ret %union.gimple_statement_d** %call1, !dbg !5633
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5635 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5636, metadata !DIExpression()), !dbg !5637
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5638
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5639
  %cmp = icmp eq i32 %call, 2, !dbg !5640
  %conv = zext i1 %cmp to i32, !dbg !5640
  %conv1 = trunc i32 %conv to i8, !dbg !5639
  ret i8 %conv1, !dbg !5641
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !5642 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !5645, metadata !DIExpression()), !dbg !5646
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !5647, metadata !DIExpression()), !dbg !5648
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5649
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !5651
  %1 = load i8*, i8** %popcount, align 8, !dbg !5651
  %tobool = icmp ne i8* %1, null, !dbg !5649
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5652

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !5653, metadata !DIExpression()), !dbg !5655
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5656
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !5656
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !5656
  %div = udiv i32 %3, 64, !dbg !5656
  %idxprom = zext i32 %div to i64, !dbg !5656
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5656
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5656
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !5656
  %rem = urem i32 %5, 64, !dbg !5656
  %sh_prom = zext i32 %rem to i64, !dbg !5656
  %shr = lshr i64 %4, %sh_prom, !dbg !5656
  %and = and i64 %shr, 1, !dbg !5656
  %conv = trunc i64 %and to i8, !dbg !5656
  store i8 %conv, i8* %oldbit, align 1, !dbg !5657
  %6 = load i8, i8* %oldbit, align 1, !dbg !5658
  %tobool1 = icmp ne i8 %6, 0, !dbg !5658
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !5660

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5661
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !5662
  %8 = load i8*, i8** %popcount3, align 8, !dbg !5662
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !5663
  %div4 = udiv i32 %9, 64, !dbg !5664
  %idxprom5 = zext i32 %div4 to i64, !dbg !5661
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !5661
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !5665
  %inc = add i8 %10, 1, !dbg !5665
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !5665
  br label %if.end, !dbg !5661

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5666

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5667
  %rem8 = urem i32 %11, 64, !dbg !5668
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5669
  %shl = shl i64 1, %sh_prom9, !dbg !5669
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5670
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5671
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5672
  %div11 = udiv i32 %13, 64, !dbg !5673
  %idxprom12 = zext i32 %div11 to i64, !dbg !5670
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5670
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5674
  %or = or i64 %14, %shl, !dbg !5674
  store i64 %or, i64* %arrayidx13, align 8, !dbg !5674
  ret void, !dbg !5675
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !5676 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5679, metadata !DIExpression()), !dbg !5680
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5681, metadata !DIExpression()), !dbg !5680
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5682, metadata !DIExpression()), !dbg !5680
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5680
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !5680
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !5680
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5680

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5680
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !5680
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !5680
  br label %cond.end, !dbg !5680

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5680

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5680
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5680
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !5680
  %tobool1 = icmp ne i32 %call, 0, !dbg !5680
  %lnot = xor i1 %tobool1, true, !dbg !5680
  %lnot.ext = zext i1 %lnot to i32, !dbg !5680
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5680
  %5 = load i32, i32* %extend, align 4, !dbg !5683
  %tobool2 = icmp ne i32 %5, 0, !dbg !5683
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5680

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5683
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !5683
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !5683
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5683
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5683
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !5683
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5683
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !5683
  br label %if.end, !dbg !5683

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5680
  ret i32 %12, !dbg !5680
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !5685 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5689, metadata !DIExpression()), !dbg !5690
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !5691, metadata !DIExpression()), !dbg !5690
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !5692, metadata !DIExpression()), !dbg !5690
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5690
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !5690
  %1 = load i32, i32* %num, align 8, !dbg !5690
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5690
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !5690
  %3 = load i32, i32* %alloc, align 4, !dbg !5690
  %cmp = icmp ult i32 %1, %3, !dbg !5690
  %conv = zext i1 %cmp to i32, !dbg !5690
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5690
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !5690
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5690
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !5690
  %6 = load i32, i32* %num1, align 8, !dbg !5690
  %inc = add i32 %6, 1, !dbg !5690
  store i32 %inc, i32* %num1, align 8, !dbg !5690
  %idxprom = zext i32 %6 to i64, !dbg !5690
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5690
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !5690
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !5690
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !5690
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !5690
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !5690
  ret %union.gimple_statement_d** %9, !dbg !5690
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !5693 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5696, metadata !DIExpression()), !dbg !5697
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5698, metadata !DIExpression()), !dbg !5697
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5697
  %cmp = icmp sge i32 %0, 0, !dbg !5697
  %conv = zext i1 %cmp to i32, !dbg !5697
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5697
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !5697
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5697

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5697
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !5697
  %3 = load i32, i32* %alloc, align 4, !dbg !5697
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5697
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !5697
  %5 = load i32, i32* %num, align 8, !dbg !5697
  %sub = sub i32 %3, %5, !dbg !5697
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5697
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5697
  %conv2 = zext i1 %cmp1 to i32, !dbg !5697
  br label %cond.end, !dbg !5697

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5697
  %tobool3 = icmp ne i32 %7, 0, !dbg !5697
  %lnot = xor i1 %tobool3, true, !dbg !5697
  %lnot.ext = zext i1 %lnot to i32, !dbg !5697
  br label %cond.end, !dbg !5697

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5697
  ret i32 %cond, !dbg !5697
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5699 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5702, metadata !DIExpression()), !dbg !5703
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5704, metadata !DIExpression()), !dbg !5705
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5706
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5708
  %tobool = icmp ne i8 %call, 0, !dbg !5708
  br i1 %tobool, label %if.then, label %if.else, !dbg !5709

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5710
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5712
  %2 = load i32, i32* %i.addr, align 4, !dbg !5713
  %idxprom = zext i32 %2 to i64, !dbg !5712
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5712
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5712
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5714
  br label %return, !dbg !5714

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5715
  br label %return, !dbg !5715

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5716
  ret %union.tree_node* %4, !dbg !5716
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5717 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5720, metadata !DIExpression()), !dbg !5721
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5722, metadata !DIExpression()), !dbg !5723
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5724
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5725
  %idxprom = zext i32 %call to i64, !dbg !5726
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5726
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5726
  store i64 %1, i64* %off, align 8, !dbg !5727
  %2 = load i64, i64* %off, align 8, !dbg !5728
  %cmp = icmp ne i64 %2, 0, !dbg !5728
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5728

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5728
  br label %cond.end, !dbg !5728

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5728

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5728
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5729
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5730
  %5 = load i64, i64* %off, align 8, !dbg !5731
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5732
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5733
  ret %union.tree_node** %6, !dbg !5734
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5735 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5738, metadata !DIExpression()), !dbg !5739
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5740
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5741
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5742
  ret i32 %call1, !dbg !5743
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5744 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5747, metadata !DIExpression()), !dbg !5748
  %0 = load i32, i32* %code.addr, align 4, !dbg !5749
  %idxprom = zext i32 %0 to i64, !dbg !5750
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5750
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5750
  ret i32 %1, !dbg !5751
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5752 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5755, metadata !DIExpression()), !dbg !5756
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5757
  %3 = load i32, i32* %index, align 8, !dbg !5757
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5758
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5758
  %6 = load i32, i32* %5, align 8, !dbg !5758
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5758
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5758
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5758
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5758
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5758

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5758
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5758
  %11 = load i32, i32* %10, align 8, !dbg !5758
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5758
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5758
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5758
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5758
  br label %cond.end, !dbg !5758

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5758

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5758
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5758
  %cmp = icmp eq i32 %3, %call2, !dbg !5759
  %conv = zext i1 %cmp to i32, !dbg !5759
  %conv3 = trunc i32 %conv to i8, !dbg !5760
  ret i8 %conv3, !dbg !5761
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5762 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5765, metadata !DIExpression()), !dbg !5766
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5767
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5767
  %5 = load i32, i32* %4, align 8, !dbg !5767
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5767
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5767
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5767
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5767
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5767

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5767
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5767
  %10 = load i32, i32* %9, align 8, !dbg !5767
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5767
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5767
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5767
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5767
  br label %cond.end, !dbg !5767

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5767

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5767
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5767
  %13 = load i32, i32* %index, align 8, !dbg !5767
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5767
  ret %struct.edge_def* %call2, !dbg !5768
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5769 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5772, metadata !DIExpression()), !dbg !5773
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5774
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5774
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5774
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5774

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !5774
  br label %cond.end, !dbg !5774

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5774

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5774
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5775
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5775
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5776
  ret %struct.VEC_edge_gc* %5, !dbg !5777
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5778 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5786, metadata !DIExpression()), !dbg !5787
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5788, metadata !DIExpression()), !dbg !5789
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5790, metadata !DIExpression()), !dbg !5791
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5792, metadata !DIExpression()), !dbg !5793
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5794
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5795
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5795
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5796
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5797
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5798
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5799
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5800
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5801
  br label %while.body, !dbg !5802

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5803
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5806
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5806
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5803
  br i1 %tobool, label %if.end, label %if.then, !dbg !5807

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5808
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5810
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5811
  br label %while.end, !dbg !5812

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5813
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5815
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5815
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5816
  %9 = load i32, i32* %indx, align 8, !dbg !5816
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5817
  %div = udiv i32 %10, 128, !dbg !5818
  %cmp = icmp uge i32 %9, %div, !dbg !5819
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5820

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5821

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5822
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5823
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5823
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5824
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5824
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5825
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5826
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5827
  br label %while.body, !dbg !5802, !llvm.loop !5828

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5830
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5832
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5832
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5833
  %17 = load i32, i32* %indx9, align 8, !dbg !5833
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5834
  %div10 = udiv i32 %18, 128, !dbg !5835
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5836
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5837

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5838
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5839
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5839
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5840
  %21 = load i32, i32* %indx14, align 8, !dbg !5840
  %mul = mul i32 %21, 128, !dbg !5841
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5842
  br label %if.end15, !dbg !5843

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5844
  %div16 = udiv i32 %22, 64, !dbg !5845
  %rem = urem i32 %div16, 2, !dbg !5846
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5847
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5848
  store i32 %rem, i32* %word_no, align 8, !dbg !5849
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5850
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5851
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5851
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5852
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5853
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5854
  %27 = load i32, i32* %word_no18, align 8, !dbg !5854
  %idxprom = zext i32 %27 to i64, !dbg !5850
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5850
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5850
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5855
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5856
  store i64 %28, i64* %bits19, align 8, !dbg !5857
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5858
  %rem20 = urem i32 %30, 64, !dbg !5859
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5860
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5861
  %32 = load i64, i64* %bits21, align 8, !dbg !5862
  %sh_prom = zext i32 %rem20 to i64, !dbg !5862
  %shr = lshr i64 %32, %sh_prom, !dbg !5862
  store i64 %shr, i64* %bits21, align 8, !dbg !5862
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5863
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5864
  %34 = load i64, i64* %bits22, align 8, !dbg !5864
  %tobool23 = icmp ne i64 %34, 0, !dbg !5865
  %lnot = xor i1 %tobool23, true, !dbg !5865
  %lnot.ext = zext i1 %lnot to i32, !dbg !5865
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5866
  %add = add i32 %35, %lnot.ext, !dbg !5866
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5866
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5867
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5868
  store i32 %36, i32* %37, align 4, !dbg !5869
  ret void, !dbg !5870
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5871 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5874, metadata !DIExpression()), !dbg !5875
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5876, metadata !DIExpression()), !dbg !5877
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5878
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5880
  %1 = load i64, i64* %bits, align 8, !dbg !5880
  %tobool = icmp ne i64 %1, 0, !dbg !5878
  br i1 %tobool, label %if.then, label %if.end, !dbg !5881

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5882

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5883), !dbg !5885
  br label %while.cond, !dbg !5886

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5887
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5888
  %3 = load i64, i64* %bits1, align 8, !dbg !5888
  %and = and i64 %3, 1, !dbg !5889
  %tobool2 = icmp ne i64 %and, 0, !dbg !5890
  %lnot = xor i1 %tobool2, true, !dbg !5890
  br i1 %lnot, label %while.body, label %while.end, !dbg !5886

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5891
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5893
  %5 = load i64, i64* %bits3, align 8, !dbg !5894
  %shr = lshr i64 %5, 1, !dbg !5894
  store i64 %shr, i64* %bits3, align 8, !dbg !5894
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5895
  %7 = load i32, i32* %6, align 4, !dbg !5896
  %add = add i32 %7, 1, !dbg !5896
  store i32 %add, i32* %6, align 4, !dbg !5896
  br label %while.cond, !dbg !5886, !llvm.loop !5897

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5899
  br label %return, !dbg !5899

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5900
  %9 = load i32, i32* %8, align 4, !dbg !5901
  %add4 = add i32 %9, 64, !dbg !5902
  %sub = sub i32 %add4, 1, !dbg !5903
  %div = udiv i32 %sub, 64, !dbg !5904
  %mul = mul i32 %div, 64, !dbg !5905
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5906
  store i32 %mul, i32* %10, align 4, !dbg !5907
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5908
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5909
  %12 = load i32, i32* %word_no, align 8, !dbg !5910
  %inc = add i32 %12, 1, !dbg !5910
  store i32 %inc, i32* %word_no, align 8, !dbg !5910
  br label %while.body6, !dbg !5911

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5912

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5914
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5915
  %14 = load i32, i32* %word_no8, align 8, !dbg !5915
  %cmp = icmp ne i32 %14, 2, !dbg !5916
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5912

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5917
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5919
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5919
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5920
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5921
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5922
  %18 = load i32, i32* %word_no11, align 8, !dbg !5922
  %idxprom = zext i32 %18 to i64, !dbg !5917
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5917
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5917
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5923
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5924
  store i64 %19, i64* %bits12, align 8, !dbg !5925
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5926
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5928
  %22 = load i64, i64* %bits13, align 8, !dbg !5928
  %tobool14 = icmp ne i64 %22, 0, !dbg !5926
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5929

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5930

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5931
  %24 = load i32, i32* %23, align 4, !dbg !5932
  %add17 = add i32 %24, 64, !dbg !5932
  store i32 %add17, i32* %23, align 4, !dbg !5932
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5933
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5934
  %26 = load i32, i32* %word_no18, align 8, !dbg !5935
  %inc19 = add i32 %26, 1, !dbg !5935
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5935
  br label %while.cond7, !dbg !5912, !llvm.loop !5936

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5938
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5939
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5939
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5940
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5940
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5941
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5942
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5943
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5944
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5946
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5946
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5944
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5947

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5948
  br label %return, !dbg !5948

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5949
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5950
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5950
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5951
  %35 = load i32, i32* %indx, align 8, !dbg !5951
  %mul28 = mul i32 %35, 128, !dbg !5952
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5953
  store i32 %mul28, i32* %36, align 4, !dbg !5954
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5955
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5956
  store i32 0, i32* %word_no29, align 8, !dbg !5957
  br label %while.body6, !dbg !5911, !llvm.loop !5958

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5960
  ret i8 %38, !dbg !5960
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

declare dso_local zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5961 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5964, metadata !DIExpression()), !dbg !5965
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5966, metadata !DIExpression()), !dbg !5967
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5968
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5969
  %1 = load i64, i64* %bits, align 8, !dbg !5970
  %shr = lshr i64 %1, 1, !dbg !5970
  store i64 %shr, i64* %bits, align 8, !dbg !5970
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !5971
  %3 = load i32, i32* %2, align 4, !dbg !5972
  %add = add i32 %3, 1, !dbg !5972
  store i32 %add, i32* %2, align 4, !dbg !5972
  ret void, !dbg !5973
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !5974 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5977, metadata !DIExpression()), !dbg !5978
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5978
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !5978
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !5978
  ret %struct.VEC_int_heap* %1, !dbg !5978
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !5979 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5980
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5980
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5980
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5980
  %tobool = icmp ne %struct.loops* %1, null, !dbg !5980
  br i1 %tobool, label %if.end, label %if.then, !dbg !5982

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5983
  br label %return, !dbg !5983

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5984
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !5984
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5984
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5984
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !5984
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5984
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !5984
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5984

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5984
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5984
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !5984
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !5984
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !5984
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !5984
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !5984
  br label %cond.end, !dbg !5984

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5984

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5984
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5984
  store i32 %call, i32* %retval, align 4, !dbg !5985
  br label %return, !dbg !5985

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5986
  ret i32 %8, !dbg !5986
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !5987 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5992, metadata !DIExpression()), !dbg !5993
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5994, metadata !DIExpression()), !dbg !5993
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !5995, metadata !DIExpression()), !dbg !5993
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5996
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5996
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5996

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5996
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5996
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5996
  %3 = load i32, i32* %num, align 8, !dbg !5996
  %cmp = icmp ult i32 %1, %3, !dbg !5996
  br i1 %cmp, label %if.then, label %if.else, !dbg !5993

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5998
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !5998
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5998
  %idxprom = zext i32 %5 to i64, !dbg !5998
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5998
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5998
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !5998
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !5998
  store i32 1, i32* %retval, align 4, !dbg !5998
  br label %return, !dbg !5998

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !6000
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !6000
  store i32 0, i32* %retval, align 4, !dbg !6000
  br label %return, !dbg !6000

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5993
  ret i32 %9, !dbg !5993
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !6002 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6007, metadata !DIExpression()), !dbg !6008
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !6009, metadata !DIExpression()), !dbg !6008
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !6010, metadata !DIExpression()), !dbg !6008
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6008
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !6008
  %1 = load i32, i32* %num, align 4, !dbg !6008
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6008
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !6008
  %3 = load i32, i32* %alloc, align 4, !dbg !6008
  %cmp = icmp ult i32 %1, %3, !dbg !6008
  %conv = zext i1 %cmp to i32, !dbg !6008
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6008
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !6008
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6008
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !6008
  %6 = load i32, i32* %num1, align 4, !dbg !6008
  %inc = add i32 %6, 1, !dbg !6008
  store i32 %inc, i32* %num1, align 4, !dbg !6008
  %idxprom = zext i32 %6 to i64, !dbg !6008
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6008
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !6008
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !6008
  %8 = load i32*, i32** %slot_, align 8, !dbg !6008
  store i32 %7, i32* %8, align 4, !dbg !6008
  %9 = load i32*, i32** %slot_, align 8, !dbg !6008
  ret i32* %9, !dbg !6008
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !6011 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6016, metadata !DIExpression()), !dbg !6017
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6018, metadata !DIExpression()), !dbg !6019
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6020
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !6020
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !6020
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !6020
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6020

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6020
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !6020
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !6020
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !6020
  br label %cond.end, !dbg !6020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6020
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !6020
  store i32 %call, i32* %n, align 4, !dbg !6019
  %4 = load i32, i32* %n, align 4, !dbg !6021
  %cmp = icmp eq i32 %4, 0, !dbg !6023
  br i1 %cmp, label %if.then, label %if.end, !dbg !6024

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !6025
  br label %return, !dbg !6025

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6026
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !6026
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !6026
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !6026
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !6026

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6026
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !6026
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !6026
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !6026
  br label %cond.end8, !dbg !6026

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !6026

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !6026
  %9 = load i32, i32* %n, align 4, !dbg !6026
  %sub = sub i32 %9, 1, !dbg !6026
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !6026
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !6027
  br label %return, !dbg !6027

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !6028
  ret %struct.loop* %10, !dbg !6028
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !6029 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6033
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6033
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6033

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6033
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !6033
  %2 = load i32, i32* %num, align 8, !dbg !6033
  br label %cond.end, !dbg !6033

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6033

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6033
  ret i32 %cond, !dbg !6033
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !6034 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6037, metadata !DIExpression()), !dbg !6038
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6039, metadata !DIExpression()), !dbg !6038
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6038
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6038
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6038

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6038
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6038
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !6038
  %3 = load i32, i32* %num, align 8, !dbg !6038
  %cmp = icmp ult i32 %1, %3, !dbg !6038
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6040
  %land.ext = zext i1 %4 to i32, !dbg !6038
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6038
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !6038
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6038
  %idxprom = zext i32 %6 to i64, !dbg !6038
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !6038
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !6038
  ret %struct.loop* %7, !dbg !6038
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !6041 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6046, metadata !DIExpression()), !dbg !6047
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6048, metadata !DIExpression()), !dbg !6047
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !6049, metadata !DIExpression()), !dbg !6047
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6050
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !6050
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6050

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6050
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6050
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !6050
  %3 = load i32, i32* %num, align 4, !dbg !6050
  %cmp = icmp ult i32 %1, %3, !dbg !6050
  br i1 %cmp, label %if.then, label %if.else, !dbg !6047

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6052
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !6052
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6052
  %idxprom = zext i32 %5 to i64, !dbg !6052
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6052
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6052
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !6052
  store i32 %6, i32* %7, align 4, !dbg !6052
  store i32 1, i32* %retval, align 4, !dbg !6052
  br label %return, !dbg !6052

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !6054
  store i32 0, i32* %8, align 4, !dbg !6054
  store i32 0, i32* %retval, align 4, !dbg !6054
  br label %return, !dbg !6054

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6047
  ret i32 %9, !dbg !6047
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !6056 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6061
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6061
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !6061
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6061
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !6061
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !6061
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !6061
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6061

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6061
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6061
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !6061
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !6061
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !6061
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !6061
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !6061
  br label %cond.end, !dbg !6061

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6061
  %6 = load i32, i32* %num.addr, align 4, !dbg !6061
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !6061
  ret %struct.loop* %call, !dbg !6062
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !6063 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !6067, metadata !DIExpression()), !dbg !6068
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6069
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !6069
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !6069
  br i1 %tobool, label %if.then, label %if.end, !dbg !6068

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6069
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !6069
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !6069
  call void @free(i8* %4), !dbg !6069
  br label %if.end, !dbg !6069

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6068
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !6068
  ret void, !dbg !6068
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !6071 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6076, metadata !DIExpression()), !dbg !6077
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6077
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !6077
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6077

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6077
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !6077
  %2 = load i32, i32* %num, align 8, !dbg !6077
  br label %cond.end, !dbg !6077

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6077

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6077
  ret i32 %cond, !dbg !6077
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %vec_) #0 !dbg !6078 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6081, metadata !DIExpression()), !dbg !6082
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_, metadata !6083, metadata !DIExpression()), !dbg !6082
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6082
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !6082
  %1 = load i32, i32* %num, align 8, !dbg !6082
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6082
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 2, !dbg !6082
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6082
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 0, !dbg !6082
  %4 = load i32, i32* %num1, align 8, !dbg !6082
  %dec = add i32 %4, -1, !dbg !6082
  store i32 %dec, i32* %num1, align 8, !dbg !6082
  %idxprom = zext i32 %dec to i64, !dbg !6082
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !6082
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !6082
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %obj_, align 8, !dbg !6082
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_, align 8, !dbg !6082
  ret %union.gimple_statement_d* %6, !dbg !6082
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_operand_necessary(%union.tree_node* %op) #0 !dbg !6084 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ver = alloca i32, align 4
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !6091, metadata !DIExpression()), !dbg !6092
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6093
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6093
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6093

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 237, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6093
  br label %cond.end, !dbg !6093

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6093

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6093
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6094
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !6094
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6094
  %2 = load i32, i32* %version, align 8, !dbg !6094
  store i32 %2, i32* %ver, align 4, !dbg !6095
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !6096
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %3, i32 0, i32 3, !dbg !6096
  %4 = load i32, i32* %ver, align 4, !dbg !6096
  %div = udiv i32 %4, 64, !dbg !6096
  %idxprom = zext i32 %div to i64, !dbg !6096
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6096
  %5 = load i64, i64* %arrayidx, align 8, !dbg !6096
  %6 = load i32, i32* %ver, align 4, !dbg !6096
  %rem = urem i32 %6, 64, !dbg !6096
  %sh_prom = zext i32 %rem to i64, !dbg !6096
  %shr = lshr i64 %5, %sh_prom, !dbg !6096
  %and = and i64 %shr, 1, !dbg !6096
  %tobool1 = icmp ne i64 %and, 0, !dbg !6096
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6098

if.then:                                          ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6099
  %ssa_name2 = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !6099
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name2, i32 0, i32 2, !dbg !6099
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6099
  store %union.gimple_statement_d* %8, %union.gimple_statement_d** %stmt, align 8, !dbg !6101
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6102
  %call = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %9), !dbg !6102
  %conv = zext i8 %call to i32, !dbg !6102
  %tobool3 = icmp ne i32 %conv, 0, !dbg !6102
  br i1 %tobool3, label %cond.false7, label %lor.lhs.false, !dbg !6102

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6102
  %call4 = call i32 @gimple_plf(%union.gimple_statement_d* %10, i32 1), !dbg !6102
  %tobool5 = icmp ne i32 %call4, 0, !dbg !6102
  br i1 %tobool5, label %cond.false7, label %cond.true6, !dbg !6102

cond.true6:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 244, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6102
  br label %cond.end8, !dbg !6102

cond.false7:                                      ; preds = %lor.lhs.false, %if.then
  br label %cond.end8, !dbg !6102

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !6102
  br label %return, !dbg !6103

if.end:                                           ; preds = %cond.end
  %11 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !6104
  %12 = load i32, i32* %ver, align 4, !dbg !6105
  call void @SET_BIT(%struct.simple_bitmap_def* %11, i32 %12), !dbg !6106
  %13 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6107
  %ssa_name10 = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !6107
  %def_stmt11 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 2, !dbg !6107
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt11, align 8, !dbg !6107
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %stmt, align 8, !dbg !6108
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6109
  %tobool12 = icmp ne %union.gimple_statement_d* %15, null, !dbg !6109
  br i1 %tobool12, label %cond.false14, label %cond.true13, !dbg !6109

cond.true13:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6109
  br label %cond.end15, !dbg !6109

cond.false14:                                     ; preds = %if.end
  br label %cond.end15, !dbg !6109

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !6109
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6110
  %call17 = call i32 @gimple_plf(%union.gimple_statement_d* %16, i32 1), !dbg !6112
  %tobool18 = icmp ne i32 %call17, 0, !dbg !6112
  br i1 %tobool18, label %if.then23, label %lor.lhs.false19, !dbg !6113

lor.lhs.false19:                                  ; preds = %cond.end15
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6114
  %call20 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %17), !dbg !6115
  %conv21 = zext i8 %call20 to i32, !dbg !6115
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !6115
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !6116

if.then23:                                        ; preds = %lor.lhs.false19, %cond.end15
  br label %return, !dbg !6117

if.end24:                                         ; preds = %lor.lhs.false19
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6118
  %tobool25 = icmp ne %struct._IO_FILE* %18, null, !dbg !6118
  br i1 %tobool25, label %land.lhs.true, label %if.end31, !dbg !6120

land.lhs.true:                                    ; preds = %if.end24
  %19 = load i32, i32* @dump_flags, align 4, !dbg !6121
  %and26 = and i32 %19, 8, !dbg !6122
  %tobool27 = icmp ne i32 %and26, 0, !dbg !6122
  br i1 %tobool27, label %if.then28, label %if.end31, !dbg !6123

if.then28:                                        ; preds = %land.lhs.true
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6124
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.17, i64 0, i64 0)), !dbg !6126
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6127
  %22 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6128
  call void @print_generic_expr(%struct._IO_FILE* %21, %union.tree_node* %22, i32 0), !dbg !6129
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6130
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0)), !dbg !6131
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6132
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6133
  call void @print_gimple_stmt(%struct._IO_FILE* %24, %union.gimple_statement_d* %25, i32 0, i32 0), !dbg !6134
  br label %if.end31, !dbg !6135

if.end31:                                         ; preds = %if.then28, %land.lhs.true, %if.end24
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6136
  call void @gimple_set_plf(%union.gimple_statement_d* %26, i32 1, i8 zeroext 1), !dbg !6137
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !6138
  %tobool32 = icmp ne %struct.simple_bitmap_def* %27, null, !dbg !6138
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !6140

if.then33:                                        ; preds = %if.end31
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bb_contains_live_stmts, align 8, !dbg !6141
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6142
  %call34 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %29), !dbg !6143
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call34, i32 0, i32 9, !dbg !6144
  %30 = load i32, i32* %index, align 8, !dbg !6144
  call void @SET_BIT(%struct.simple_bitmap_def* %28, i32 %30), !dbg !6145
  br label %if.end35, !dbg !6145

if.end35:                                         ; preds = %if.then33, %if.end31
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6146
  %call36 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @worklist, %union.gimple_statement_d* %31), !dbg !6146
  br label %return, !dbg !6147

return:                                           ; preds = %if.end35, %if.then23, %cond.end8
  ret void, !dbg !6147
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @degenerate_phi_p(%union.gimple_statement_d* %phi) #0 !dbg !6148 {
entry:
  %retval = alloca i8, align 1
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %op = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6149, metadata !DIExpression()), !dbg !6150
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6151, metadata !DIExpression()), !dbg !6152
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6153, metadata !DIExpression()), !dbg !6154
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6155
  %call = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %0, i64 0), !dbg !6156
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !6154
  store i32 1, i32* %i, align 4, !dbg !6157
  br label %for.cond, !dbg !6159

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6160
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6162
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %2), !dbg !6163
  %cmp = icmp ult i32 %1, %call1, !dbg !6164
  br i1 %cmp, label %for.body, label %for.end, !dbg !6165

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6166
  %4 = load i32, i32* %i, align 4, !dbg !6168
  %conv = zext i32 %4 to i64, !dbg !6168
  %call2 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %3, i64 %conv), !dbg !6169
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6170
  %cmp3 = icmp ne %union.tree_node* %call2, %5, !dbg !6171
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6172

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6173
  br label %return, !dbg !6173

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6170

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !6174
  %inc = add i32 %6, 1, !dbg !6174
  store i32 %inc, i32* %i, align 4, !dbg !6174
  br label %for.cond, !dbg !6175, !llvm.loop !6176

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !6178
  br label %return, !dbg !6178

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !6179
  ret i8 %7, !dbg !6179
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6180 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6183, metadata !DIExpression()), !dbg !6184
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6185, metadata !DIExpression()), !dbg !6186
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6187
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6187
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !6187
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6187
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6187
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6187

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6187
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !6187
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !6187
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !6187
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6187
  br label %cond.end, !dbg !6187

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6187

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6187
  %4 = load i64, i64* %i.addr, align 8, !dbg !6187
  %conv = trunc i64 %4 to i32, !dbg !6187
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !6187
  ret %struct.edge_def* %call3, !dbg !6188
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6189 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6192, metadata !DIExpression()), !dbg !6193
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6194, metadata !DIExpression()), !dbg !6195
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6196, metadata !DIExpression()), !dbg !6197
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6198
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6199
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6200
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !6201
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6202
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !6203
  store i32 1, i32* %iter_type, align 4, !dbg !6204
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6205
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !6206
  ret %union.tree_node* %call, !dbg !6207
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6208 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6213, metadata !DIExpression()), !dbg !6214
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6215
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6217
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6217
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6215
  br i1 %tobool, label %if.then, label %if.end, !dbg !6218

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6219
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6219
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6219
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6219
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !6219
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !6221
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6222
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6223
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6223
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6224
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6224
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6225
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6226
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6227
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6228
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !6229
  br label %return, !dbg !6229

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6230
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !6232
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6232
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !6230
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !6233

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6234
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6234
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !6234
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !6234
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6234
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !6234
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !6236
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6237
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6238
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !6238
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !6239
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !6239
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6240
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !6241
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !6242
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6243
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !6244
  br label %return, !dbg !6244

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6245
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !6246
  store i8 1, i8* %done, align 8, !dbg !6247
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6248
  br label %return, !dbg !6248

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6249
  ret %union.tree_node* %20, !dbg !6249
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_all_reaching_defs_necessary(%union.gimple_statement_d* %stmt) #0 !dbg !6250 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6251, metadata !DIExpression()), !dbg !6252
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6253
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %0), !dbg !6254
  %call1 = call i32 @walk_aliased_vdefs(%struct.ao_ref_s* null, %union.tree_node* %call, i8 (%struct.ao_ref_s*, %union.tree_node*, i8*)* @mark_all_reaching_defs_necessary_1, i8* null, %struct.bitmap_head_def** @visited), !dbg !6255
  ret void, !dbg !6256
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !6257 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6258, metadata !DIExpression()), !dbg !6259
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6260
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6261
  %cmp = icmp eq i32 %call, 8, !dbg !6262
  %conv = zext i1 %cmp to i32, !dbg !6262
  %conv1 = trunc i32 %conv to i8, !dbg !6261
  ret i8 %conv1, !dbg !6263
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6264 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6265, metadata !DIExpression()), !dbg !6266
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6267, metadata !DIExpression()), !dbg !6268
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6269
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6270
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6268
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6271
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6271
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6271
  %bf.load = load i64, i64* %2, align 8, !dbg !6271
  %bf.clear = and i64 %bf.load, 65535, !dbg !6271
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6271
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6273
  br i1 %cmp, label %if.then, label %if.end, !dbg !6274

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6275
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6275
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6275
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6275
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6275
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6276
  br label %return, !dbg !6276

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6277
  br label %return, !dbg !6277

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6278
  ret %union.tree_node* %5, !dbg !6278
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6279 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6280, metadata !DIExpression()), !dbg !6281
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6282, metadata !DIExpression()), !dbg !6283
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6284
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6285
  store i32 %call, i32* %num_ops, align 4, !dbg !6286
  %1 = load i32, i32* %num_ops, align 4, !dbg !6287
  %sub = sub i32 %1, 3, !dbg !6288
  ret i32 %sub, !dbg !6289
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6290 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6291, metadata !DIExpression()), !dbg !6292
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6293, metadata !DIExpression()), !dbg !6294
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6295
  %1 = load i32, i32* %index.addr, align 4, !dbg !6296
  %add = add i32 %1, 3, !dbg !6297
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !6298
  ret %union.tree_node* %call, !dbg !6299
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ref_may_be_aliased(%union.tree_node* %ref) #0 !dbg !6300 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !6303, metadata !DIExpression()), !dbg !6304
  br label %while.cond, !dbg !6305

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6306
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !6307
  %tobool = icmp ne i8 %call, 0, !dbg !6305
  br i1 %tobool, label %while.body, label %while.end, !dbg !6305

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6308
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !6308
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6308
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6308
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6308
  store %union.tree_node* %2, %union.tree_node** %ref.addr, align 8, !dbg !6309
  br label %while.cond, !dbg !6305, !llvm.loop !6310

while.end:                                        ; preds = %while.cond
  %3 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6311
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6311
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6311
  %bf.load = load i64, i64* %4, align 8, !dbg !6311
  %bf.clear = and i64 %bf.load, 65535, !dbg !6311
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6311
  %idxprom = sext i32 %bf.cast to i64, !dbg !6311
  %arrayidx1 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6311
  %5 = load i32, i32* %arrayidx1, align 4, !dbg !6311
  %cmp = icmp eq i32 %5, 3, !dbg !6311
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6312

land.rhs:                                         ; preds = %while.end
  %6 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6313
  %call2 = call zeroext i8 @may_be_aliased(%union.tree_node* %6), !dbg !6314
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6315
  %lnot = xor i1 %tobool3, true, !dbg !6315
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.end
  %7 = phi i1 [ false, %while.end ], [ %lnot, %land.rhs ], !dbg !6316
  %lnot4 = xor i1 %7, true, !dbg !6317
  %lnot.ext = zext i1 %lnot4 to i32, !dbg !6317
  %conv = trunc i32 %lnot.ext to i8, !dbg !6317
  ret i8 %conv, !dbg !6318
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_aliased_reaching_defs_necessary(%union.gimple_statement_d* %stmt, %union.tree_node* %ref) #0 !dbg !6319 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ref.addr = alloca %union.tree_node*, align 8
  %chain = alloca i32, align 4
  %refd = alloca %struct.ao_ref_s, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6322, metadata !DIExpression()), !dbg !6323
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !6324, metadata !DIExpression()), !dbg !6325
  call void @llvm.dbg.declare(metadata i32* %chain, metadata !6326, metadata !DIExpression()), !dbg !6327
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %refd, metadata !6328, metadata !DIExpression()), !dbg !6339
  %0 = load i8, i8* @chain_ovfl, align 1, !dbg !6340
  %tobool = icmp ne i8 %0, 0, !dbg !6340
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6340

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 553, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6340
  br label %cond.end, !dbg !6340

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6340
  %1 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !6341
  call void @ao_ref_init(%struct.ao_ref_s* %refd, %union.tree_node* %1), !dbg !6342
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6343
  %call = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %2), !dbg !6344
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6345
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %3), !dbg !6346
  %4 = bitcast %struct.basic_block_def* %call1 to i8*, !dbg !6346
  %call2 = call i32 @walk_aliased_vdefs(%struct.ao_ref_s* %refd, %union.tree_node* %call, i8 (%struct.ao_ref_s*, %union.tree_node*, i8*)* @mark_aliased_reaching_defs_necessary_1, i8* %4, %struct.bitmap_head_def** null), !dbg !6347
  store i32 %call2, i32* %chain, align 4, !dbg !6348
  %5 = load i32, i32* %chain, align 4, !dbg !6349
  %6 = load i32, i32* @longest_chain, align 4, !dbg !6351
  %cmp = icmp ugt i32 %5, %6, !dbg !6352
  br i1 %cmp, label %if.then, label %if.end, !dbg !6353

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %chain, align 4, !dbg !6354
  store i32 %7, i32* @longest_chain, align 4, !dbg !6355
  br label %if.end, !dbg !6356

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load i32, i32* %chain, align 4, !dbg !6357
  %9 = load i32, i32* @total_chain, align 4, !dbg !6358
  %add = add i32 %9, %8, !dbg !6358
  store i32 %add, i32* @total_chain, align 4, !dbg !6358
  %10 = load i32, i32* @nr_walks, align 4, !dbg !6359
  %inc = add i32 %10, 1, !dbg !6359
  store i32 %inc, i32* @nr_walks, align 4, !dbg !6359
  ret void, !dbg !6360
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6361 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6362, metadata !DIExpression()), !dbg !6363
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6364
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6365
  ret %union.tree_node* %call, !dbg !6366
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !6367 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6368, metadata !DIExpression()), !dbg !6369
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6370
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6371
  ret %union.tree_node* %call, !dbg !6372
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) #0 !dbg !6373 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6374, metadata !DIExpression()), !dbg !6375
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6376
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6377
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !6378
  %1 = load i8, i8* %ni, align 8, !dbg !6378
  %conv = zext i8 %1 to i32, !dbg !6376
  ret i32 %conv, !dbg !6379
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6380 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6381, metadata !DIExpression()), !dbg !6382
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6383, metadata !DIExpression()), !dbg !6384
  %0 = load i32, i32* %index.addr, align 4, !dbg !6385
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6385
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !6385
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !6385
  %2 = load i8, i8* %ni, align 8, !dbg !6385
  %conv = zext i8 %2 to i32, !dbg !6385
  %cmp = icmp ule i32 %0, %conv, !dbg !6385
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6385

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6385
  br label %cond.end, !dbg !6385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6385
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6386
  %4 = load i32, i32* %index.addr, align 4, !dbg !6387
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %4), !dbg !6388
  ret %union.tree_node* %call, !dbg !6389
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !6390 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6391, metadata !DIExpression()), !dbg !6392
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6393
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6394
  %cmp = icmp eq i32 %call, 18, !dbg !6395
  %conv = zext i1 %cmp to i32, !dbg !6395
  %conv1 = trunc i32 %conv to i8, !dbg !6394
  ret i8 %conv1, !dbg !6396
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !6397 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6400, metadata !DIExpression()), !dbg !6401
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !6402, metadata !DIExpression()), !dbg !6403
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !6404, metadata !DIExpression()), !dbg !6405
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6406
  %1 = load i64, i64* %index.addr, align 8, !dbg !6407
  %conv = trunc i64 %1 to i32, !dbg !6407
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !6408
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !6405
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !6409
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !6410
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !6411
  ret %union.tree_node* %call1, !dbg !6412
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6413 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6417, metadata !DIExpression()), !dbg !6418
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6419
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6420
  ret %union.tree_node* %1, !dbg !6421
}

declare dso_local i32 @walk_aliased_vdefs(%struct.ao_ref_s*, %union.tree_node*, i8 (%struct.ao_ref_s*, %union.tree_node*, i8*)*, i8*, %struct.bitmap_head_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mark_all_reaching_defs_necessary_1(%struct.ao_ref_s* %ref, %union.tree_node* %vdef, i8* %data) #0 !dbg !6422 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %struct.ao_ref_s*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  store %struct.ao_ref_s* %ref, %struct.ao_ref_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %ref.addr, metadata !6426, metadata !DIExpression()), !dbg !6427
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !6428, metadata !DIExpression()), !dbg !6429
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6430, metadata !DIExpression()), !dbg !6431
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6432, metadata !DIExpression()), !dbg !6433
  %0 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6434
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6434
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6434
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !6434
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6433
  %2 = load i8, i8* @chain_ovfl, align 1, !dbg !6435
  %conv = zext i8 %2 to i32, !dbg !6435
  %tobool = icmp ne i32 %conv, 0, !dbg !6435
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6437

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @processed, align 8, !dbg !6438
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %3, i32 0, i32 3, !dbg !6438
  %4 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6438
  %ssa_name2 = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !6438
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name2, i32 0, i32 3, !dbg !6438
  %5 = load i32, i32* %version, align 8, !dbg !6438
  %div = udiv i32 %5, 64, !dbg !6438
  %idxprom = zext i32 %div to i64, !dbg !6438
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6438
  %6 = load i64, i64* %arrayidx, align 8, !dbg !6438
  %7 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6438
  %ssa_name3 = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !6438
  %version4 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name3, i32 0, i32 3, !dbg !6438
  %8 = load i32, i32* %version4, align 8, !dbg !6438
  %rem = urem i32 %8, 64, !dbg !6438
  %sh_prom = zext i32 %rem to i64, !dbg !6438
  %shr = lshr i64 %6, %sh_prom, !dbg !6438
  %and = and i64 %shr, 1, !dbg !6438
  %tobool5 = icmp ne i64 %and, 0, !dbg !6438
  br i1 %tobool5, label %if.then, label %if.end, !dbg !6439

if.then:                                          ; preds = %land.lhs.true
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6440
  %call = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %9), !dbg !6440
  %conv6 = zext i8 %call to i32, !dbg !6440
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !6440
  br i1 %tobool7, label %cond.false, label %lor.lhs.false, !dbg !6440

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6440
  %call8 = call i32 @gimple_plf(%union.gimple_statement_d* %10, i32 1), !dbg !6440
  %tobool9 = icmp ne i32 %call8, 0, !dbg !6440
  br i1 %tobool9, label %cond.false, label %cond.true, !dbg !6440

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 582, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6440
  br label %cond.end, !dbg !6440

cond.false:                                       ; preds = %lor.lhs.false, %if.then
  br label %cond.end, !dbg !6440

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6440
  store i8 0, i8* %retval, align 1, !dbg !6442
  br label %return, !dbg !6442

if.end:                                           ; preds = %land.lhs.true, %entry
  %11 = load i8, i8* @chain_ovfl, align 1, !dbg !6443
  %tobool10 = icmp ne i8 %11, 0, !dbg !6443
  br i1 %tobool10, label %if.end21, label %land.lhs.true11, !dbg !6445

land.lhs.true11:                                  ; preds = %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6446
  %call12 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %12), !dbg !6447
  %conv13 = zext i8 %call12 to i32, !dbg !6447
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !6447
  br i1 %tobool14, label %if.then15, label %if.end21, !dbg !6448

if.then15:                                        ; preds = %land.lhs.true11
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6449, metadata !DIExpression()), !dbg !6451
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6452
  %call16 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %13), !dbg !6453
  store %union.tree_node* %call16, %union.tree_node** %lhs, align 8, !dbg !6451
  %14 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6454
  %call17 = call zeroext i8 @ref_may_be_aliased(%union.tree_node* %14), !dbg !6456
  %tobool18 = icmp ne i8 %call17, 0, !dbg !6456
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !6457

if.then19:                                        ; preds = %if.then15
  store i8 0, i8* %retval, align 1, !dbg !6458
  br label %return, !dbg !6458

if.end20:                                         ; preds = %if.then15
  br label %if.end21, !dbg !6459

if.end21:                                         ; preds = %if.end20, %land.lhs.true11, %if.end
  %15 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6460
  call void @mark_operand_necessary(%union.tree_node* %15), !dbg !6461
  store i8 0, i8* %retval, align 1, !dbg !6462
  br label %return, !dbg !6462

return:                                           ; preds = %if.end21, %if.then19, %cond.end
  %16 = load i8, i8* %retval, align 1, !dbg !6463
  ret i8 %16, !dbg !6463
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6464 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6465, metadata !DIExpression()), !dbg !6466
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6467
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6468
  ret %union.tree_node* %call, !dbg !6469
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6470 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6471, metadata !DIExpression()), !dbg !6472
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6473
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6474
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6475
  %1 = load i32, i32* %num_ops, align 4, !dbg !6475
  ret i32 %1, !dbg !6476
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !6477 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6483, metadata !DIExpression()), !dbg !6484
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6485
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6485
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6485
  %bf.load = load i64, i64* %1, align 8, !dbg !6485
  %bf.clear = and i64 %bf.load, 65535, !dbg !6485
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6485
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !6486

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !6487
  br label %return, !dbg !6487

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6489
  br label %return, !dbg !6489

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !6490
  ret i8 %2, !dbg !6490
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_be_aliased(%union.tree_node* %var) #0 !dbg !6491 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6492, metadata !DIExpression()), !dbg !6493
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6494
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6494
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6494
  %bf.load = load i64, i64* %1, align 8, !dbg !6494
  %bf.clear = and i64 %bf.load, 65535, !dbg !6494
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6494
  %cmp = icmp ne i32 %bf.cast, 33, !dbg !6495
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6496

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6497
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6497
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6497
  %bf.load2 = load i64, i64* %3, align 8, !dbg !6497
  %bf.lshr = lshr i64 %bf.load2, 26, !dbg !6497
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !6497
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6497
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !6497
  br i1 %tobool, label %land.lhs.true17, label %lor.lhs.false, !dbg !6498

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6499
  %base5 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6499
  %5 = bitcast %struct.tree_base* %base5 to i64*, !dbg !6499
  %bf.load6 = load i64, i64* %5, align 8, !dbg !6499
  %bf.lshr7 = lshr i64 %bf.load6, 27, !dbg !6499
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !6499
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !6499
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !6499
  br i1 %tobool10, label %land.lhs.true17, label %lor.lhs.false11, !dbg !6500

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6501
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !6501
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6501
  %7 = bitcast i40* %decl_flag_1 to i64*, !dbg !6501
  %bf.load12 = load i64, i64* %7, align 8, !dbg !6501
  %bf.lshr13 = lshr i64 %bf.load12, 25, !dbg !6501
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !6501
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !6501
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !6501
  br i1 %tobool16, label %land.lhs.true17, label %land.rhs, !dbg !6502

land.lhs.true17:                                  ; preds = %lor.lhs.false11, %lor.lhs.false, %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6503
  %base18 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6503
  %9 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6503
  %bf.load19 = load i64, i64* %9, align 8, !dbg !6503
  %bf.lshr20 = lshr i64 %bf.load19, 20, !dbg !6503
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !6503
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !6503
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !6503
  br i1 %tobool23, label %land.lhs.true24, label %land.rhs, !dbg !6504

land.lhs.true24:                                  ; preds = %land.lhs.true17
  %10 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6505
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6505
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6505
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6505
  %type25 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !6505
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 6, !dbg !6505
  %bf.load26 = load i32, i32* %needs_constructing_flag, align 4, !dbg !6505
  %bf.lshr27 = lshr i32 %bf.load26, 11, !dbg !6505
  %bf.clear28 = and i32 %bf.lshr27, 1, !dbg !6505
  %tobool29 = icmp ne i32 %bf.clear28, 0, !dbg !6505
  br i1 %tobool29, label %land.rhs, label %land.end, !dbg !6506

land.rhs:                                         ; preds = %land.lhs.true24, %land.lhs.true17, %lor.lhs.false11
  %12 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6507
  %base30 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6507
  %13 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6507
  %bf.load31 = load i64, i64* %13, align 8, !dbg !6507
  %bf.lshr32 = lshr i64 %bf.load31, 27, !dbg !6507
  %bf.clear33 = and i64 %bf.lshr32, 1, !dbg !6507
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !6507
  %tobool35 = icmp ne i32 %bf.cast34, 0, !dbg !6507
  br i1 %tobool35, label %lor.end, label %lor.lhs.false36, !dbg !6508

lor.lhs.false36:                                  ; preds = %land.rhs
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6509
  %decl_common37 = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !6509
  %decl_flag_138 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common37, i32 0, i32 2, !dbg !6509
  %15 = bitcast i40* %decl_flag_138 to i64*, !dbg !6509
  %bf.load39 = load i64, i64* %15, align 8, !dbg !6509
  %bf.lshr40 = lshr i64 %bf.load39, 25, !dbg !6509
  %bf.clear41 = and i64 %bf.lshr40, 1, !dbg !6509
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !6509
  %tobool43 = icmp ne i32 %bf.cast42, 0, !dbg !6509
  br i1 %tobool43, label %lor.end, label %lor.rhs, !dbg !6510

lor.rhs:                                          ; preds = %lor.lhs.false36
  %16 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6511
  %base44 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6511
  %17 = bitcast %struct.tree_base* %base44 to i64*, !dbg !6511
  %bf.load45 = load i64, i64* %17, align 8, !dbg !6511
  %bf.lshr46 = lshr i64 %bf.load45, 18, !dbg !6511
  %bf.clear47 = and i64 %bf.lshr46, 1, !dbg !6511
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !6511
  %tobool49 = icmp ne i32 %bf.cast48, 0, !dbg !6510
  br label %lor.end, !dbg !6510

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false36, %land.rhs
  %18 = phi i1 [ true, %lor.lhs.false36 ], [ true, %land.rhs ], [ %tobool49, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true24, %entry
  %19 = phi i1 [ false, %land.lhs.true24 ], [ false, %entry ], [ %18, %lor.end ], !dbg !6512
  %land.ext = zext i1 %19 to i32, !dbg !6506
  %conv = trunc i32 %land.ext to i8, !dbg !6513
  ret i8 %conv, !dbg !6514
}

declare dso_local void @ao_ref_init(%struct.ao_ref_s*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mark_aliased_reaching_defs_necessary_1(%struct.ao_ref_s* %ref, %union.tree_node* %vdef, i8* %data) #0 !dbg !6515 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %struct.ao_ref_s*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %base4 = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  %offset = alloca i64, align 8
  %max_size = alloca i64, align 8
  store %struct.ao_ref_s* %ref, %struct.ao_ref_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s** %ref.addr, metadata !6516, metadata !DIExpression()), !dbg !6517
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6520, metadata !DIExpression()), !dbg !6521
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6522, metadata !DIExpression()), !dbg !6523
  %0 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6524
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6524
  %def_stmt1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6524
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt1, align 8, !dbg !6524
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6523
  %2 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !6525
  call void @mark_operand_necessary(%union.tree_node* %2), !dbg !6526
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6527
  %call = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %3), !dbg !6529
  %conv = zext i8 %call to i32, !dbg !6529
  %tobool = icmp ne i32 %conv, 0, !dbg !6529
  br i1 %tobool, label %land.lhs.true, label %if.end47, !dbg !6530

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6531
  %call2 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %4), !dbg !6531
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6531
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !6531
  %bf.load = load i64, i64* %5, align 8, !dbg !6531
  %bf.clear = and i64 %bf.load, 65535, !dbg !6531
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6531
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6532
  br i1 %cmp, label %if.then, label %if.end47, !dbg !6533

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %base4, metadata !6534, metadata !DIExpression()), !dbg !6536
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6537, metadata !DIExpression()), !dbg !6538
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6539
  %call5 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %6), !dbg !6540
  store %union.tree_node* %call5, %union.tree_node** %lhs, align 8, !dbg !6538
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6541, metadata !DIExpression()), !dbg !6542
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !6543, metadata !DIExpression()), !dbg !6544
  call void @llvm.dbg.declare(metadata i64* %max_size, metadata !6545, metadata !DIExpression()), !dbg !6546
  %7 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6547
  %call6 = call %union.tree_node* @ao_ref_base(%struct.ao_ref_s* %7), !dbg !6548
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6549
  %call7 = call %union.tree_node* @get_ref_base_and_extent(%union.tree_node* %8, i64* %offset, i64* %size, i64* %max_size), !dbg !6550
  store %union.tree_node* %call7, %union.tree_node** %base4, align 8, !dbg !6551
  %9 = load %union.tree_node*, %union.tree_node** %base4, align 8, !dbg !6552
  %10 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6554
  %base8 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %10, i32 0, i32 1, !dbg !6555
  %11 = load %union.tree_node*, %union.tree_node** %base8, align 8, !dbg !6555
  %cmp9 = icmp eq %union.tree_node* %9, %11, !dbg !6556
  br i1 %cmp9, label %if.then11, label %if.end46, !dbg !6557

if.then11:                                        ; preds = %if.then
  %12 = load i64, i64* %size, align 8, !dbg !6558
  %cmp12 = icmp ne i64 %12, -1, !dbg !6561
  br i1 %cmp12, label %land.lhs.true14, label %if.else, !dbg !6562

land.lhs.true14:                                  ; preds = %if.then11
  %13 = load i64, i64* %size, align 8, !dbg !6563
  %14 = load i64, i64* %max_size, align 8, !dbg !6564
  %cmp15 = icmp eq i64 %13, %14, !dbg !6565
  br i1 %cmp15, label %land.lhs.true17, label %if.else, !dbg !6566

land.lhs.true17:                                  ; preds = %land.lhs.true14
  %15 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6567
  %max_size18 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %15, i32 0, i32 4, !dbg !6568
  %16 = load i64, i64* %max_size18, align 8, !dbg !6568
  %cmp19 = icmp ne i64 %16, -1, !dbg !6569
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !6570

if.then21:                                        ; preds = %land.lhs.true17
  %17 = load i64, i64* %offset, align 8, !dbg !6571
  %18 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6574
  %offset22 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %18, i32 0, i32 2, !dbg !6575
  %19 = load i64, i64* %offset22, align 8, !dbg !6575
  %cmp23 = icmp sle i64 %17, %19, !dbg !6576
  br i1 %cmp23, label %land.lhs.true25, label %if.end, !dbg !6577

land.lhs.true25:                                  ; preds = %if.then21
  %20 = load i64, i64* %offset, align 8, !dbg !6578
  %21 = load i64, i64* %size, align 8, !dbg !6579
  %add = add nsw i64 %20, %21, !dbg !6580
  %22 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6581
  %offset26 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %22, i32 0, i32 2, !dbg !6582
  %23 = load i64, i64* %offset26, align 8, !dbg !6582
  %24 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6583
  %max_size27 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %24, i32 0, i32 4, !dbg !6584
  %25 = load i64, i64* %max_size27, align 8, !dbg !6584
  %add28 = add nsw i64 %23, %25, !dbg !6585
  %cmp29 = icmp sge i64 %add, %add28, !dbg !6586
  br i1 %cmp29, label %if.then31, label %if.end, !dbg !6587

if.then31:                                        ; preds = %land.lhs.true25
  store i8 1, i8* %retval, align 1, !dbg !6588
  br label %return, !dbg !6588

if.end:                                           ; preds = %land.lhs.true25, %if.then21
  br label %if.end45, !dbg !6589

if.else:                                          ; preds = %land.lhs.true17, %land.lhs.true14, %if.then11
  %26 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6590
  %ref32 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %26, i32 0, i32 0, !dbg !6592
  %27 = load %union.tree_node*, %union.tree_node** %ref32, align 8, !dbg !6592
  %tobool33 = icmp ne %union.tree_node* %27, null, !dbg !6590
  br i1 %tobool33, label %land.lhs.true34, label %if.end44, !dbg !6593

land.lhs.true34:                                  ; preds = %if.else
  %28 = load i8*, i8** %data.addr, align 8, !dbg !6594
  %29 = bitcast i8* %28 to %struct.basic_block_def*, !dbg !6595
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6596
  %call35 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %30), !dbg !6597
  %call36 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %29, %struct.basic_block_def* %call35), !dbg !6598
  %conv37 = zext i8 %call36 to i32, !dbg !6598
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !6598
  br i1 %tobool38, label %land.lhs.true39, label %if.end44, !dbg !6599

land.lhs.true39:                                  ; preds = %land.lhs.true34
  %31 = load %struct.ao_ref_s*, %struct.ao_ref_s** %ref.addr, align 8, !dbg !6600
  %ref40 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %31, i32 0, i32 0, !dbg !6601
  %32 = load %union.tree_node*, %union.tree_node** %ref40, align 8, !dbg !6601
  %33 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6602
  %call41 = call i32 @operand_equal_p(%union.tree_node* %32, %union.tree_node* %33, i32 0), !dbg !6603
  %tobool42 = icmp ne i32 %call41, 0, !dbg !6603
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !6604

if.then43:                                        ; preds = %land.lhs.true39
  store i8 1, i8* %retval, align 1, !dbg !6605
  br label %return, !dbg !6605

if.end44:                                         ; preds = %land.lhs.true39, %land.lhs.true34, %if.else
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end
  br label %if.end46, !dbg !6606

if.end46:                                         ; preds = %if.end45, %if.then
  br label %if.end47, !dbg !6607

if.end47:                                         ; preds = %if.end46, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !6608
  br label %return, !dbg !6608

return:                                           ; preds = %if.end47, %if.then43, %if.then31
  %34 = load i8, i8* %retval, align 1, !dbg !6609
  ret i8 %34, !dbg !6609
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !6610 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6611, metadata !DIExpression()), !dbg !6612
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6613
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6614
  %conv = zext i8 %call to i32, !dbg !6614
  %tobool = icmp ne i32 %conv, 0, !dbg !6614
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !6615

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6616
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !6617
  %conv2 = zext i8 %call1 to i32, !dbg !6617
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !6617
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !6618

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6619
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !6620
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !6621
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !6622
  br label %lor.end, !dbg !6615

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !6615
  %conv6 = trunc i32 %lor.ext to i8, !dbg !6623
  ret i8 %conv6, !dbg !6624
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @ao_ref_base(%struct.ao_ref_s*) #2

declare dso_local %union.tree_node* @get_ref_base_and_extent(%union.tree_node*, i64*, i64*, i64*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6625 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6626, metadata !DIExpression()), !dbg !6627
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6628
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6629
  %cmp = icmp eq i32 %call, 6, !dbg !6630
  %conv = zext i1 %cmp to i32, !dbg !6630
  %conv1 = trunc i32 %conv to i8, !dbg !6629
  ret i8 %conv1, !dbg !6631
}

declare dso_local void @clear_special_calls() #2

declare dso_local zeroext i8 @dom_info_available_p(i32) #2

declare dso_local %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !6632 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6637, metadata !DIExpression()), !dbg !6638
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6638
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !6638
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6638

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6638
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !6638
  %2 = load i32, i32* %num, align 8, !dbg !6638
  br label %cond.end, !dbg !6638

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6638

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6638
  ret i32 %cond, !dbg !6638
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %vec_) #0 !dbg !6639 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6643, metadata !DIExpression()), !dbg !6644
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_, metadata !6645, metadata !DIExpression()), !dbg !6644
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6644
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !6644
  %1 = load i32, i32* %num, align 8, !dbg !6644
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6644
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 2, !dbg !6644
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6644
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 0, !dbg !6644
  %4 = load i32, i32* %num1, align 8, !dbg !6644
  %dec = add i32 %4, -1, !dbg !6644
  store i32 %dec, i32* %num1, align 8, !dbg !6644
  %idxprom = zext i32 %dec to i64, !dbg !6644
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !6644
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6644
  store %struct.basic_block_def* %5, %struct.basic_block_def** %obj_, align 8, !dbg !6644
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_, align 8, !dbg !6644
  ret %struct.basic_block_def* %6, !dbg !6644
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6646 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6647, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6649, metadata !DIExpression()), !dbg !6650
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6651, metadata !DIExpression()), !dbg !6652
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6653
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6654
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6655
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6656
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !6657
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6658
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6659
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6660
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6661
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6662
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6663
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6664
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6665
  ret void, !dbg !6666
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev(%struct.gimple_stmt_iterator* %i) #0 !dbg !6667 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6668, metadata !DIExpression()), !dbg !6669
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6670
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6671
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6671
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 1, !dbg !6672
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %prev, align 8, !dbg !6672
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6673
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6674
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6675
  ret void, !dbg !6676
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_dead_stmt(%struct.gimple_stmt_iterator* %i, %struct.basic_block_def* %bb) #0 !dbg !6677 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %post_dom_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6680, metadata !DIExpression()), !dbg !6681
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6682, metadata !DIExpression()), !dbg !6683
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6684, metadata !DIExpression()), !dbg !6685
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6686
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !6687
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6685
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6688
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !6688
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6690

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !6691
  %and = and i32 %2, 8, !dbg !6692
  %tobool1 = icmp ne i32 %and, 0, !dbg !6692
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6693

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6694
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)), !dbg !6696
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6697
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6698
  call void @print_gimple_stmt(%struct._IO_FILE* %4, %union.gimple_statement_d* %5, i32 0, i32 2), !dbg !6699
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6700
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6701
  br label %if.end, !dbg !6702

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 2), align 4, !dbg !6703
  %inc = add nsw i32 %7, 1, !dbg !6703
  store i32 %inc, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 2), align 4, !dbg !6703
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6704
  %call4 = call zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d* %8), !dbg !6706
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6706
  br i1 %tobool5, label %if.then6, label %if.end45, !dbg !6707

if.then6:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %post_dom_bb, metadata !6708, metadata !DIExpression()), !dbg !6710
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6711, metadata !DIExpression()), !dbg !6712
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !6713, metadata !DIExpression()), !dbg !6714
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6715, metadata !DIExpression()), !dbg !6716
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6717
  %call7 = call %struct.basic_block_def* @get_immediate_dominator(i32 2, %struct.basic_block_def* %9), !dbg !6718
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %post_dom_bb, align 8, !dbg !6719
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6720
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb, align 8, !dbg !6721
  %call8 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %10, %struct.basic_block_def* %11), !dbg !6722
  store %struct.edge_def* %call8, %struct.edge_def** %e, align 8, !dbg !6723
  %12 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6724
  %tobool9 = icmp ne %struct.edge_def* %12, null, !dbg !6724
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !6726

if.then10:                                        ; preds = %if.then6
  br label %if.end28, !dbg !6726

if.else:                                          ; preds = %if.then6
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb, align 8, !dbg !6727
  %tobool11 = icmp ne %struct.basic_block_def* %13, null, !dbg !6727
  br i1 %tobool11, label %lor.lhs.false, label %if.then12, !dbg !6729

lor.lhs.false:                                    ; preds = %if.else
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb, align 8, !dbg !6730
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6731
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !6731
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6731
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6731
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !6731
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6731
  %cmp = icmp eq %struct.basic_block_def* %14, %17, !dbg !6732
  br i1 %cmp, label %if.then12, label %if.else16, !dbg !6733

if.then12:                                        ; preds = %lor.lhs.false, %if.else
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6734
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !6734
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6734
  %tobool13 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !6734
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !6734

cond.true:                                        ; preds = %if.then12
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6734
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !6734
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !6734
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !6734
  br label %cond.end, !dbg !6734

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !6734

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6734
  %call15 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !6734
  store %struct.edge_def* %call15, %struct.edge_def** %e, align 8, !dbg !6735
  br label %if.end27, !dbg !6736

if.else16:                                        ; preds = %lor.lhs.false
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6737
  %succs17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !6737
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs17, align 8, !dbg !6737
  %tobool18 = icmp ne %struct.VEC_edge_gc* %23, null, !dbg !6737
  br i1 %tobool18, label %cond.true19, label %cond.false22, !dbg !6737

cond.true19:                                      ; preds = %if.else16
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6737
  %succs20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 1, !dbg !6737
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs20, align 8, !dbg !6737
  %base21 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %25, i32 0, i32 0, !dbg !6737
  br label %cond.end23, !dbg !6737

cond.false22:                                     ; preds = %if.else16
  br label %cond.end23, !dbg !6737

cond.end23:                                       ; preds = %cond.false22, %cond.true19
  %cond24 = phi %struct.VEC_edge_base* [ %base21, %cond.true19 ], [ null, %cond.false22 ], !dbg !6737
  %call25 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond24, i32 0), !dbg !6737
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb, align 8, !dbg !6738
  %call26 = call %struct.edge_def* @forward_edge_to_pdom(%struct.edge_def* %call25, %struct.basic_block_def* %26), !dbg !6739
  store %struct.edge_def* %call26, %struct.edge_def** %e, align 8, !dbg !6740
  br label %if.end27

if.end27:                                         ; preds = %cond.end23, %cond.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then10
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6741
  %tobool29 = icmp ne %struct.edge_def* %27, null, !dbg !6741
  br i1 %tobool29, label %cond.false31, label %cond.true30, !dbg !6741

cond.true30:                                      ; preds = %if.end28
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 1023, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !6741
  br label %cond.end32, !dbg !6741

cond.false31:                                     ; preds = %if.end28
  br label %cond.end32, !dbg !6741

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !6741
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6742
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 8, !dbg !6743
  store i32 10000, i32* %probability, align 4, !dbg !6744
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6745
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 8, !dbg !6746
  %30 = load i64, i64* %count, align 8, !dbg !6746
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6747
  %count34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 9, !dbg !6748
  store i64 %30, i64* %count34, align 8, !dbg !6749
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6750
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 7, !dbg !6751
  %33 = load i32, i32* %flags, align 8, !dbg !6752
  %and35 = and i32 %33, -3073, !dbg !6752
  store i32 %and35, i32* %flags, align 8, !dbg !6752
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6753
  %flags36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 7, !dbg !6754
  %35 = load i32, i32* %flags36, align 8, !dbg !6755
  %or = or i32 %35, 1, !dbg !6755
  store i32 %or, i32* %flags36, align 8, !dbg !6755
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6756
  %succs37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 1, !dbg !6756
  %call38 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs37), !dbg !6756
  %37 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6756
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %37, i32 0, i32 0, !dbg !6756
  %39 = extractvalue { i32, %struct.VEC_edge_gc** } %call38, 0, !dbg !6756
  store i32 %39, i32* %38, align 8, !dbg !6756
  %40 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %37, i32 0, i32 1, !dbg !6756
  %41 = extractvalue { i32, %struct.VEC_edge_gc** } %call38, 1, !dbg !6756
  store %struct.VEC_edge_gc** %41, %struct.VEC_edge_gc*** %40, align 8, !dbg !6756
  %42 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6756
  %43 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6756
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false), !dbg !6756
  br label %for.cond, !dbg !6758

for.cond:                                         ; preds = %if.end44, %cond.end32
  %44 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6759
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 0, !dbg !6759
  %46 = load i32, i32* %45, align 8, !dbg !6759
  %47 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 1, !dbg !6759
  %48 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %47, align 8, !dbg !6759
  %call39 = call %struct.edge_def* @ei_safe_edge(i32 %46, %struct.VEC_edge_gc** %48), !dbg !6759
  store %struct.edge_def* %call39, %struct.edge_def** %e2, align 8, !dbg !6761
  %tobool40 = icmp ne %struct.edge_def* %call39, null, !dbg !6762
  br i1 %tobool40, label %for.body, label %for.end, !dbg !6762

for.body:                                         ; preds = %for.cond
  %49 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6763
  %50 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6765
  %cmp41 = icmp ne %struct.edge_def* %49, %50, !dbg !6766
  br i1 %cmp41, label %if.then42, label %if.else43, !dbg !6767

if.then42:                                        ; preds = %for.body
  store i8 1, i8* @cfg_altered, align 1, !dbg !6768
  %51 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6770
  call void @remove_edge(%struct.edge_def* %51), !dbg !6771
  br label %if.end44, !dbg !6772

if.else43:                                        ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6773
  br label %if.end44

if.end44:                                         ; preds = %if.else43, %if.then42
  br label %for.cond, !dbg !6774, !llvm.loop !6775

for.end:                                          ; preds = %for.cond
  br label %if.end45, !dbg !6777

if.end45:                                         ; preds = %for.end, %if.end
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6778
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %52), !dbg !6779
  %53 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6780
  call void @gsi_remove(%struct.gimple_stmt_iterator* %53, i8 zeroext 1), !dbg !6781
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6782
  call void @release_defs(%union.gimple_statement_d* %54), !dbg !6783
  ret void, !dbg !6784
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6785 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6786, metadata !DIExpression()), !dbg !6787
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6788, metadata !DIExpression()), !dbg !6789
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6790
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6791
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6792
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6793
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6793
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6795

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6796
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6796
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6796
  %bf.load = load i64, i64* %4, align 8, !dbg !6796
  %bf.clear = and i64 %bf.load, 65535, !dbg !6796
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6796
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6797
  br i1 %cmp, label %if.then, label %if.end, !dbg !6798

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6799
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6800
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6800
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6800
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6801
  br label %if.end, !dbg !6800

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !6802
}

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local void @release_ssa_name(%union.tree_node*) #2

declare dso_local void @notice_special_calls(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !6803 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !6807, metadata !DIExpression()), !dbg !6808
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6809
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !6809
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !6809
  br i1 %tobool, label %if.then, label %if.end, !dbg !6808

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6809
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !6809
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !6809
  call void @free(i8* %4), !dbg !6809
  br label %if.end, !dbg !6809

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !6808
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !6808
  ret void, !dbg !6808
}

declare dso_local void @find_unreachable_blocks() #2

; Function Attrs: noinline nounwind uwtable
define internal void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6811 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6814, metadata !DIExpression()), !dbg !6815
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6816
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !6817
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node), !dbg !6818
  ret void, !dbg !6819
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @remove_dead_phis(%struct.basic_block_def* %bb) #0 !dbg !6820 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %something_changed = alloca i8, align 1
  %phis = alloca %struct.gimple_seq_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %vdef = alloca %union.tree_node*, align 8
  %vuse = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6823, metadata !DIExpression()), !dbg !6824
  call void @llvm.dbg.declare(metadata i8* %something_changed, metadata !6825, metadata !DIExpression()), !dbg !6826
  store i8 0, i8* %something_changed, align 1, !dbg !6826
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %phis, metadata !6827, metadata !DIExpression()), !dbg !6828
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6829, metadata !DIExpression()), !dbg !6830
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6831, metadata !DIExpression()), !dbg !6832
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6833
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %0), !dbg !6834
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %phis, align 8, !dbg !6835
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phis, align 8, !dbg !6836
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %1), !dbg !6838
  %2 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6838
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !6838
  br label %for.cond, !dbg !6839

for.cond:                                         ; preds = %if.end49, %if.end47, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6840
  %tobool = icmp ne i8 %call1, 0, !dbg !6842
  %lnot = xor i1 %tobool, true, !dbg !6842
  br i1 %lnot, label %for.body, label %for.end50, !dbg !6843

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 1), align 4, !dbg !6844
  %inc = add nsw i32 %4, 1, !dbg !6844
  store i32 %inc, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 1), align 4, !dbg !6844
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6846
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %phi, align 8, !dbg !6847
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6848
  %call3 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %5), !dbg !6850
  %call4 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call3), !dbg !6851
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6851
  br i1 %tobool5, label %if.end37, label %if.then, !dbg !6852

if.then:                                          ; preds = %for.body
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6853
  %call6 = call zeroext i8 @degenerate_phi_p(%union.gimple_statement_d* %6), !dbg !6856
  %tobool7 = icmp ne i8 %call6, 0, !dbg !6856
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !6857

if.then8:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef, metadata !6858, metadata !DIExpression()), !dbg !6860
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6861
  %call9 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %7), !dbg !6862
  store %union.tree_node* %call9, %union.tree_node** %vdef, align 8, !dbg !6860
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse, metadata !6863, metadata !DIExpression()), !dbg !6864
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6865
  %call10 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %8, i64 0), !dbg !6866
  store %union.tree_node* %call10, %union.tree_node** %vuse, align 8, !dbg !6864
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6867, metadata !DIExpression()), !dbg !6868
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !6869, metadata !DIExpression()), !dbg !6870
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !6871, metadata !DIExpression()), !dbg !6872
  %9 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6873
  %call11 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %9), !dbg !6873
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6873
  br label %for.cond12, !dbg !6873

for.cond12:                                       ; preds = %for.inc24, %if.then8
  %call13 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !6875
  %tobool14 = icmp ne i8 %call13, 0, !dbg !6875
  %lnot15 = xor i1 %tobool14, true, !dbg !6875
  br i1 %lnot15, label %for.body16, label %for.end26, !dbg !6873

for.body16:                                       ; preds = %for.cond12
  %call17 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6877
  store %struct.ssa_use_operand_d* %call17, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6877
  br label %for.cond18, !dbg !6877

for.cond18:                                       ; preds = %for.inc, %for.body16
  %call19 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !6879
  %tobool20 = icmp ne i8 %call19, 0, !dbg !6879
  %lnot21 = xor i1 %tobool20, true, !dbg !6879
  br i1 %lnot21, label %for.body22, label %for.end, !dbg !6877

for.body22:                                       ; preds = %for.cond18
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6881
  %11 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6881
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %10, %union.tree_node* %11), !dbg !6881
  br label %for.inc, !dbg !6881

for.inc:                                          ; preds = %for.body22
  %call23 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6879
  store %struct.ssa_use_operand_d* %call23, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6879
  br label %for.cond18, !dbg !6879, !llvm.loop !6882

for.end:                                          ; preds = %for.cond18
  br label %for.inc24, !dbg !6883

for.inc24:                                        ; preds = %for.end
  %call25 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6875
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %use_stmt, align 8, !dbg !6875
  br label %for.cond12, !dbg !6875, !llvm.loop !6884

for.end26:                                        ; preds = %for.cond12
  %12 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6886
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6886
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !6886
  %bf.load = load i64, i64* %13, align 8, !dbg !6886
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !6886
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6886
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6886
  %tobool27 = icmp ne i32 %bf.cast, 0, !dbg !6886
  br i1 %tobool27, label %land.lhs.true, label %if.end, !dbg !6888

land.lhs.true:                                    ; preds = %for.end26
  %14 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6889
  %base28 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6889
  %15 = bitcast %struct.tree_base* %base28 to i64*, !dbg !6889
  %bf.load29 = load i64, i64* %15, align 8, !dbg !6889
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !6889
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !6889
  %cmp = icmp eq i32 %bf.cast31, 141, !dbg !6890
  br i1 %cmp, label %if.then32, label %if.end, !dbg !6891

if.then32:                                        ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6892
  %base33 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6892
  %17 = bitcast %struct.tree_base* %base33 to i64*, !dbg !6892
  %bf.load34 = load i64, i64* %17, align 8, !dbg !6893
  %bf.clear35 = and i64 %bf.load34, -4194305, !dbg !6893
  %bf.set = or i64 %bf.clear35, 4194304, !dbg !6893
  store i64 %bf.set, i64* %17, align 8, !dbg !6893
  br label %if.end, !dbg !6892

if.end:                                           ; preds = %if.then32, %land.lhs.true, %for.end26
  br label %if.end36, !dbg !6894

if.else:                                          ; preds = %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6895
  call void @gimple_set_plf(%union.gimple_statement_d* %18, i32 1, i8 zeroext 1), !dbg !6896
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.end
  br label %if.end37, !dbg !6897

if.end37:                                         ; preds = %if.end36, %for.body
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6898
  %call38 = call i32 @gimple_plf(%union.gimple_statement_d* %19, i32 1), !dbg !6900
  %tobool39 = icmp ne i32 %call38, 0, !dbg !6900
  br i1 %tobool39, label %if.end49, label %if.then40, !dbg !6901

if.then40:                                        ; preds = %if.end37
  store i8 1, i8* %something_changed, align 1, !dbg !6902
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6904
  %tobool41 = icmp ne %struct._IO_FILE* %20, null, !dbg !6904
  br i1 %tobool41, label %land.lhs.true42, label %if.end47, !dbg !6906

land.lhs.true42:                                  ; preds = %if.then40
  %21 = load i32, i32* @dump_flags, align 4, !dbg !6907
  %and = and i32 %21, 8, !dbg !6908
  %tobool43 = icmp ne i32 %and, 0, !dbg !6908
  br i1 %tobool43, label %if.then44, label %if.end47, !dbg !6909

if.then44:                                        ; preds = %land.lhs.true42
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6910
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)), !dbg !6912
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6913
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6914
  call void @print_gimple_stmt(%struct._IO_FILE* %23, %union.gimple_statement_d* %24, i32 0, i32 2), !dbg !6915
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6916
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6917
  br label %if.end47, !dbg !6918

if.end47:                                         ; preds = %if.then44, %land.lhs.true42, %if.then40
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !6919
  %26 = load i32, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 3), align 4, !dbg !6920
  %inc48 = add nsw i32 %26, 1, !dbg !6920
  store i32 %inc48, i32* getelementptr inbounds (%struct.stmt_stats, %struct.stmt_stats* @stats, i32 0, i32 3), align 4, !dbg !6920
  br label %for.cond, !dbg !6921, !llvm.loop !6922

if.end49:                                         ; preds = %if.end37
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6924
  br label %for.cond, !dbg !6925, !llvm.loop !6922

for.end50:                                        ; preds = %for.cond
  %27 = load i8, i8* %something_changed, align 1, !dbg !6926
  ret i8 %27, !dbg !6927
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !6928 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6929, metadata !DIExpression()), !dbg !6930
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6931
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6931
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6931

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6932
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !6933
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !6933
  br label %cond.end, !dbg !6931

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6931

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6931
  ret %struct.gimple_seq_node_d* %cond, !dbg !6934
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @forward_edge_to_pdom(%struct.edge_def* %e, %struct.basic_block_def* %post_dom_bb) #0 !dbg !6935 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %post_dom_bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp17 = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %locus = alloca i32, align 4
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  store %struct.basic_block_def* %post_dom_bb, %struct.basic_block_def** %post_dom_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %post_dom_bb.addr, metadata !6940, metadata !DIExpression()), !dbg !6941
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6942, metadata !DIExpression()), !dbg !6943
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !6944, metadata !DIExpression()), !dbg !6945
  store %struct.edge_def* null, %struct.edge_def** %e2, align 8, !dbg !6945
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6946, metadata !DIExpression()), !dbg !6947
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6948
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !6948
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6950

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !6951
  %and = and i32 %1, 8, !dbg !6952
  %tobool1 = icmp ne i32 %and, 0, !dbg !6952
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6953

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6954
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6955
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !6956
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6956
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !6957
  %5 = load i32, i32* %index, align 8, !dbg !6957
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6958
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 1, !dbg !6959
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6959
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !6960
  %8 = load i32, i32* %index2, align 8, !dbg !6960
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb.addr, align 8, !dbg !6961
  %index3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !6962
  %10 = load i32, i32* %index3, align 8, !dbg !6962
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.22, i64 0, i64 0), i32 %5, i32 %8, i32 %10), !dbg !6963
  br label %if.end, !dbg !6963

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6964
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb.addr, align 8, !dbg !6965
  %call4 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %11, %struct.basic_block_def* %12), !dbg !6966
  store %struct.edge_def* %call4, %struct.edge_def** %e2, align 8, !dbg !6967
  store i8 1, i8* @cfg_altered, align 1, !dbg !6968
  %13 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6969
  %14 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6971
  %cmp = icmp ne %struct.edge_def* %13, %14, !dbg !6972
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !6973

if.then5:                                         ; preds = %if.end
  %15 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6974
  store %struct.edge_def* %15, %struct.edge_def** %retval, align 8, !dbg !6975
  br label %return, !dbg !6975

if.end6:                                          ; preds = %if.end
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb.addr, align 8, !dbg !6976
  %call7 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %16), !dbg !6978
  %call8 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call7), !dbg !6979
  %tobool9 = icmp ne i8 %call8, 0, !dbg !6979
  br i1 %tobool9, label %if.end39, label %if.then10, !dbg !6980

if.then10:                                        ; preds = %if.end6
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb.addr, align 8, !dbg !6981
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 0, !dbg !6981
  %call11 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !6981
  %18 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6981
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 0, !dbg !6981
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call11, 0, !dbg !6981
  store i32 %20, i32* %19, align 8, !dbg !6981
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 1, !dbg !6981
  %22 = extractvalue { i32, %struct.VEC_edge_gc** } %call11, 1, !dbg !6981
  store %struct.VEC_edge_gc** %22, %struct.VEC_edge_gc*** %21, align 8, !dbg !6981
  %23 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6981
  %24 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6981
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !6981
  br label %for.cond, !dbg !6981

for.cond:                                         ; preds = %for.inc, %if.then10
  %25 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6984
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 0, !dbg !6984
  %27 = load i32, i32* %26, align 8, !dbg !6984
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 1, !dbg !6984
  %29 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %28, align 8, !dbg !6984
  %call12 = call zeroext i8 @ei_cond(i32 %27, %struct.VEC_edge_gc** %29, %struct.edge_def** %e2), !dbg !6984
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6981
  br i1 %tobool13, label %for.body, label %for.end, !dbg !6981

for.body:                                         ; preds = %for.cond
  %30 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6986
  %31 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6988
  %cmp14 = icmp ne %struct.edge_def* %30, %31, !dbg !6989
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6990

if.then15:                                        ; preds = %for.body
  br label %for.end, !dbg !6991

if.end16:                                         ; preds = %for.body
  br label %for.inc, !dbg !6988

for.inc:                                          ; preds = %if.end16
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6984
  br label %for.cond, !dbg !6984, !llvm.loop !6992

for.end:                                          ; preds = %if.then15, %for.cond
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %post_dom_bb.addr, align 8, !dbg !6994
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp17, %struct.basic_block_def* %32), !dbg !6996
  %33 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6996
  %34 = bitcast %struct.gimple_stmt_iterator* %tmp17 to i8*, !dbg !6996
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 24, i1 false), !dbg !6996
  br label %for.cond18, !dbg !6997

for.cond18:                                       ; preds = %cond.end, %if.then30, %if.then26, %for.end
  %call19 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6998
  %tobool20 = icmp ne i8 %call19, 0, !dbg !7000
  %lnot = xor i1 %tobool20, true, !dbg !7000
  br i1 %lnot, label %for.body21, label %for.end38, !dbg !7001

for.body21:                                       ; preds = %for.cond18
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7002, metadata !DIExpression()), !dbg !7004
  %call22 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7005
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %phi, align 8, !dbg !7004
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !7006, metadata !DIExpression()), !dbg !7007
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !7008, metadata !DIExpression()), !dbg !7009
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7010
  %call23 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %35), !dbg !7012
  %call24 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call23), !dbg !7013
  %tobool25 = icmp ne i8 %call24, 0, !dbg !7013
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !7014

if.then26:                                        ; preds = %for.body21
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7015
  call void @mark_virtual_phi_result_for_renaming(%union.gimple_statement_d* %36), !dbg !7017
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !7018
  br label %for.cond18, !dbg !7019, !llvm.loop !7020

if.end27:                                         ; preds = %for.body21
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7022
  %call28 = call i32 @gimple_plf(%union.gimple_statement_d* %37, i32 1), !dbg !7024
  %tobool29 = icmp ne i32 %call28, 0, !dbg !7024
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !7025

if.then30:                                        ; preds = %if.end27
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7026
  br label %for.cond18, !dbg !7028, !llvm.loop !7020

if.end31:                                         ; preds = %if.end27
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7029
  %39 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !7030
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 6, !dbg !7031
  %40 = load i32, i32* %dest_idx, align 4, !dbg !7031
  %conv = zext i32 %40 to i64, !dbg !7030
  %call32 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %38, i64 %conv), !dbg !7032
  store %union.tree_node* %call32, %union.tree_node** %op, align 8, !dbg !7033
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7034
  %42 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !7035
  %dest_idx33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 6, !dbg !7036
  %43 = load i32, i32* %dest_idx33, align 4, !dbg !7036
  %conv34 = zext i32 %43 to i64, !dbg !7035
  %call35 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %41, i64 %conv34), !dbg !7037
  store i32 %call35, i32* %locus, align 4, !dbg !7038
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7039
  %45 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !7040
  %46 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7041
  %47 = load i32, i32* %locus, align 4, !dbg !7042
  call void @add_phi_arg(%union.gimple_statement_d* %44, %union.tree_node* %45, %struct.edge_def* %46, i32 %47), !dbg !7043
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7044
  %call36 = call zeroext i8 @degenerate_phi_p(%union.gimple_statement_d* %48), !dbg !7044
  %tobool37 = icmp ne i8 %call36, 0, !dbg !7044
  br i1 %tobool37, label %cond.false, label %cond.true, !dbg !7044

cond.true:                                        ; preds = %if.end31
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 973, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !7044
  br label %cond.end, !dbg !7044

cond.false:                                       ; preds = %if.end31
  br label %cond.end, !dbg !7044

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7044
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7045
  br label %for.cond18, !dbg !7046, !llvm.loop !7020

for.end38:                                        ; preds = %for.cond18
  br label %if.end39, !dbg !7047

if.end39:                                         ; preds = %for.end38, %if.end6
  %49 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7048
  store %struct.edge_def* %49, %struct.edge_def** %retval, align 8, !dbg !7049
  br label %return, !dbg !7049

return:                                           ; preds = %if.end39, %if.then5
  %50 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !7050
  ret %struct.edge_def* %50, !dbg !7050
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7051 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7052, metadata !DIExpression()), !dbg !7053
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7054
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7054
  %5 = load i32, i32* %4, align 8, !dbg !7054
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7054
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7054
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7054
  %tobool = icmp ne i8 %call, 0, !dbg !7054
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7055

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7056
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7056
  %10 = load i32, i32* %9, align 8, !dbg !7056
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7056
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7056
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7056
  br label %cond.end, !dbg !7055

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !7055
  ret %struct.edge_def* %cond, !dbg !7057
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

declare dso_local void @unlink_stmt_vdef(%union.gimple_statement_d*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !7058 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7061, metadata !DIExpression()), !dbg !7062
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7063
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !7064
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7065

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7066
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !7067
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7067
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !7068
  br label %lor.end, !dbg !7065

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !7065
  %conv = trunc i32 %lor.ext to i8, !dbg !7063
  ret i8 %conv, !dbg !7069
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !7070 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7071, metadata !DIExpression()), !dbg !7072
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7073
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7073
  %1 = load i32, i32* %flags, align 8, !dbg !7073
  %and = and i32 %1, 512, !dbg !7073
  %tobool = icmp ne i32 %and, 0, !dbg !7073
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7073

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !7073
  br label %cond.end, !dbg !7073

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7073

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7073
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7074
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !7076
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !7077
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !7077
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !7074
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7078

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !7079
  br label %return, !dbg !7079

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7080
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !7081
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !7082
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !7082
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !7083
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !7083
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !7084
  br label %return, !dbg !7084

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !7085
  ret %struct.gimple_seq_d* %7, !dbg !7085
}

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !7086 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7089, metadata !DIExpression()), !dbg !7090
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !7091, metadata !DIExpression()), !dbg !7092
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7093
  %1 = load i64, i64* %i.addr, align 8, !dbg !7094
  %conv = trunc i64 %1 to i32, !dbg !7094
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !7095
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !7096
  %2 = load i32, i32* %locus, align 8, !dbg !7096
  ret i32 %2, !dbg !7097
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !7098 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7101, metadata !DIExpression()), !dbg !7102
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7103, metadata !DIExpression()), !dbg !7104
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7105, metadata !DIExpression()), !dbg !7106
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7107
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7107
  %conv = zext i8 %call to i32, !dbg !7107
  %tobool = icmp ne i32 %conv, 0, !dbg !7107
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7107

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !7107
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7107
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !7107
  %cmp = icmp ult i32 %1, %call1, !dbg !7107
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7107

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !7107
  br label %cond.end, !dbg !7107

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7107

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7107
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7108
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7109
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !7110
  %5 = load i32, i32* %i.addr, align 4, !dbg !7111
  %idxprom = zext i32 %5 to i64, !dbg !7110
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7110
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !7112
  ret void, !dbg !7113
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !7114 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !7117, metadata !DIExpression()), !dbg !7118
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7119, metadata !DIExpression()), !dbg !7120
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7121
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !7122
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7123
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7124
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7125
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !7126
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !7127
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7128
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !7128
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !7129
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !7130

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7131
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !7131
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !7132
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7132
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !7133
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !7134

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7135
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !7135
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !7136
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !7136
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !7137
  br label %cond.end, !dbg !7134

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !7134
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !7138
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !7139
  ret void, !dbg !7140
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !7141 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !7144, metadata !DIExpression()), !dbg !7145
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7146
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !7146
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !7146
  br i1 %tobool, label %if.then, label %if.end, !dbg !7145

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7146
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !7146
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !7146
  call void @free(i8* %4), !dbg !7146
  br label %if.end, !dbg !7146

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !7145
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !7145
  ret void, !dbg !7145
}

declare dso_local void @free_numbers_of_iterations_estimates() #2

declare dso_local void @scev_reset() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2880, !2881, !2882}
!llvm.ident = !{!2883}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_dce", scope: !2, file: !3, line: 1419, type: !2809, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1421, globals: !2806, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-dce.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !154, !158, !163, !182, !189, !196, !390, !397, !573, !580, !619, !629, !633, !637, !651, !677, !682, !688, !1408}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !146, line: 31, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153}
!148 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !146, line: 91, baseType: !7, size: 32, elements: !155)
!155 = !{!156, !157}
!156 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !391, line: 104, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !398, line: 74, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572}
!400 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!572 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !574, line: 119, baseType: !7, size: 32, elements: !575)
!574 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!575 = !{!576, !577, !578, !579}
!576 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!577 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!578 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!579 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!580 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !581, line: 51, baseType: !7, size: 32, elements: !582)
!581 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!582 = !{!583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618}
!583 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!618 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!619 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !146, line: 170, baseType: !7, size: 32, elements: !620)
!620 = !{!621, !622, !623, !624, !625, !626, !627, !628}
!621 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!622 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!623 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!624 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!625 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!626 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!627 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!628 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!629 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !630)
!630 = !{!631, !632}
!631 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!632 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!633 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "plf_mask", file: !581, line: 130, baseType: !7, size: 32, elements: !634)
!634 = !{!635, !636}
!635 = !DIEnumerator(name: "GF_PLF_1", value: 1, isUnsigned: true)
!636 = !DIEnumerator(name: "GF_PLF_2", value: 2, isUnsigned: true)
!637 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !638)
!638 = !{!639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650}
!639 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!640 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!641 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!642 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!643 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!644 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!645 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!646 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!647 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!648 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!649 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!650 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!651 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !581, line: 727, baseType: !7, size: 32, elements: !652)
!652 = !{!653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676}
!653 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!654 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!655 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!656 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!657 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!658 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!659 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!660 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!661 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!662 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!663 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!664 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!665 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!666 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!667 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!668 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!669 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!670 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!671 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!672 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!673 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!674 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!675 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!676 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!677 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !146, line: 498, baseType: !7, size: 32, elements: !678)
!678 = !{!679, !680, !681}
!679 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!680 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!681 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!682 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !164, line: 205, baseType: !7, size: 32, elements: !683)
!683 = !{!684, !685, !686, !687}
!684 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!688 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !164, line: 220, baseType: !7, size: 32, elements: !689)
!689 = !{!690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407}
!690 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1407 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1408 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !164, line: 58, baseType: !7, size: 32, elements: !1409)
!1409 = !{!1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420}
!1410 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1411 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1412 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1413 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1414 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1415 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1416 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1417 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1418 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1419 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1420 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1421 = !{!1422, !1612, !1622, !196, !2006, !2784, !2785, !7, !1574, !1436, !2790, !2034, !1597, !2792, !2059, !1524, !1885, !2805}
!1422 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !574, line: 30, baseType: !1423)
!1423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1424, size: 64)
!1424 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !164, line: 1893, baseType: !1425)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1426)
!1426 = !{!1427, !1429, !1430, !2783}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1425, file: !164, line: 1884, baseType: !1428, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1425, size: 64)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1425, file: !164, line: 1885, baseType: !1428, size: 64, offset: 64)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1425, file: !164, line: 1891, baseType: !1431, size: 64, offset: 128)
!1431 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1425, file: !164, line: 1891, size: 64, elements: !1432)
!1432 = !{!1433, !2782}
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1431, file: !164, line: 1891, baseType: !1434, size: 64)
!1434 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1435, line: 58, baseType: !1436)
!1435 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1437, size: 64)
!1437 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !581, line: 737, size: 768, elements: !1438)
!1438 = !{!1439, !2629, !2639, !2645, !2650, !2655, !2662, !2668, !2674, !2679, !2693, !2698, !2704, !2709, !2719, !2724, !2740, !2747, !2754, !2760, !2765, !2771, !2777}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1437, file: !581, line: 738, baseType: !1440, size: 256)
!1440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !581, line: 271, size: 256, elements: !1441)
!1441 = !{!1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1457, !1458, !2628}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1440, file: !581, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1440, file: !581, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1440, file: !581, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1440, file: !581, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1440, file: !581, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1440, file: !581, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1440, file: !581, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1440, file: !581, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1440, file: !581, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1440, file: !581, line: 312, baseType: !7, size: 32, offset: 32)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1440, file: !581, line: 316, baseType: !1453, size: 32, offset: 64)
!1453 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1454, line: 58, baseType: !1455)
!1454 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1455 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1456, line: 44, baseType: !7)
!1456 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1440, file: !581, line: 319, baseType: !7, size: 32, offset: 96)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1440, file: !581, line: 323, baseType: !1459, size: 64, offset: 128)
!1459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1460, size: 64)
!1460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1461)
!1461 = !{!1462, !2595, !2596, !2597, !2598, !2602, !2603, !2604, !2622, !2623, !2624, !2625, !2626, !2627}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1460, file: !135, line: 219, baseType: !1463, size: 64)
!1463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1464, size: 64)
!1464 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1465)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1466)
!1466 = !{!1467}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1465, file: !135, line: 151, baseType: !1468, size: 128)
!1468 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1469)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1470)
!1470 = !{!1471, !1472, !1473}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1469, file: !135, line: 150, baseType: !7, size: 32)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1469, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1469, file: !135, line: 150, baseType: !1474, size: 64, offset: 64)
!1474 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1475, size: 64, elements: !1539)
!1475 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1435, line: 108, baseType: !1476)
!1476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1478)
!1478 = !{!1479, !1480, !1481, !2587, !2588, !2589, !2590, !2591, !2592, !2593}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1477, file: !135, line: 124, baseType: !1459, size: 64)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1477, file: !135, line: 125, baseType: !1459, size: 64, offset: 64)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1477, file: !135, line: 131, baseType: !1482, size: 64, offset: 128)
!1482 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1483)
!1483 = !{!1484, !1499}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1482, file: !135, line: 129, baseType: !1485, size: 64)
!1485 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1435, line: 66, baseType: !1486)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !581, line: 143, size: 192, elements: !1488)
!1488 = !{!1489, !1497, !1498}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1487, file: !581, line: 145, baseType: !1490, size: 64)
!1490 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1435, line: 69, baseType: !1491)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !581, line: 136, size: 192, elements: !1493)
!1493 = !{!1494, !1495, !1496}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1492, file: !581, line: 137, baseType: !1434, size: 64)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1492, file: !581, line: 138, baseType: !1491, size: 64, offset: 64)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1492, file: !581, line: 139, baseType: !1491, size: 64, offset: 128)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1487, file: !581, line: 146, baseType: !1490, size: 64, offset: 64)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1487, file: !581, line: 152, baseType: !1485, size: 64, offset: 128)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1482, file: !135, line: 130, baseType: !1500, size: 64)
!1500 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1435, line: 50, baseType: !1501)
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1502, size: 64)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1503, line: 240, size: 384, elements: !1504)
!1503 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1504 = !{!1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515}
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1502, file: !1503, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1502, file: !1503, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1502, file: !1503, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1502, file: !1503, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1502, file: !1503, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1502, file: !1503, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1502, file: !1503, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1502, file: !1503, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1502, file: !1503, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1502, file: !1503, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1502, file: !1503, line: 321, baseType: !1516, size: 320, offset: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1503, line: 315, size: 320, elements: !1517)
!1517 = !{!1518, !2554, !2556, !2585, !2586}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1516, file: !1503, line: 316, baseType: !1519, size: 64)
!1519 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1520, size: 64, elements: !1539)
!1520 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1503, line: 183, baseType: !1521)
!1521 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1503, line: 166, size: 64, elements: !1522)
!1522 = !{!1523, !1525, !1526, !1530, !1531, !1541, !1542, !1554, !1557, !1621, !2532, !2533, !2544, !2551}
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1521, file: !1503, line: 168, baseType: !1524, size: 32)
!1524 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1521, file: !1503, line: 169, baseType: !7, size: 32)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1521, file: !1503, line: 170, baseType: !1527, size: 64)
!1527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1528, size: 64)
!1528 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1529)
!1529 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1521, file: !1503, line: 171, baseType: !1500, size: 64)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1521, file: !1503, line: 172, baseType: !1532, size: 64)
!1532 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1435, line: 53, baseType: !1533)
!1533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1534, size: 64)
!1534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1503, line: 359, size: 128, elements: !1535)
!1535 = !{!1536, !1537}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1534, file: !1503, line: 360, baseType: !1524, size: 32)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1534, file: !1503, line: 361, baseType: !1538, size: 64, offset: 64)
!1538 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1500, size: 64, elements: !1539)
!1539 = !{!1540}
!1540 = !DISubrange(count: 1)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1521, file: !1503, line: 173, baseType: !5, size: 32)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1521, file: !1503, line: 174, baseType: !1543, size: 32)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1503, line: 133, baseType: !1544)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1503, line: 115, size: 32, elements: !1545)
!1545 = !{!1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1544, file: !1503, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1544, file: !1503, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1544, file: !1503, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1544, file: !1503, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1544, file: !1503, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1544, file: !1503, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1544, file: !1503, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1544, file: !1503, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1521, file: !1503, line: 175, baseType: !1555, size: 64)
!1555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1556, size: 64)
!1556 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1503, line: 175, flags: DIFlagFwdDecl)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1521, file: !1503, line: 176, baseType: !1558, size: 64)
!1558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1559, size: 64)
!1559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1560, line: 75, size: 256, elements: !1561)
!1560 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1561 = !{!1562, !1577, !1578, !1579}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1559, file: !1560, line: 76, baseType: !1563, size: 64)
!1563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1564, size: 64)
!1564 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1560, line: 68, baseType: !1565)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1560, line: 63, size: 320, elements: !1566)
!1566 = !{!1567, !1569, !1570, !1571}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1565, file: !1560, line: 64, baseType: !1568, size: 64)
!1568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1565, file: !1560, line: 65, baseType: !1568, size: 64, offset: 64)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1565, file: !1560, line: 66, baseType: !7, size: 32, offset: 128)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1565, file: !1560, line: 67, baseType: !1572, size: 128, offset: 192)
!1572 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1573, size: 128, elements: !1575)
!1573 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1560, line: 29, baseType: !1574)
!1574 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1575 = !{!1576}
!1576 = !DISubrange(count: 2)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1559, file: !1560, line: 77, baseType: !1563, size: 64, offset: 64)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1559, file: !1560, line: 78, baseType: !7, size: 32, offset: 128)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1559, file: !1560, line: 79, baseType: !1580, size: 64, offset: 192)
!1580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1581, size: 64)
!1581 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1560, line: 49, baseType: !1582)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1560, line: 45, size: 832, elements: !1583)
!1583 = !{!1584, !1585, !1586}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1582, file: !1560, line: 46, baseType: !1568, size: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1582, file: !1560, line: 47, baseType: !1558, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1582, file: !1560, line: 48, baseType: !1587, size: 704, offset: 128)
!1587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1588, line: 164, size: 704, elements: !1589)
!1588 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1589 = !{!1590, !1592, !1603, !1604, !1605, !1606, !1607, !1608, !1613, !1617, !1618, !1619, !1620}
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1587, file: !1588, line: 166, baseType: !1591, size: 64)
!1591 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1587, file: !1588, line: 167, baseType: !1593, size: 64, offset: 64)
!1593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1594, size: 64)
!1594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1588, line: 157, size: 192, elements: !1595)
!1595 = !{!1596, !1598, !1599}
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1594, file: !1588, line: 159, baseType: !1597, size: 64)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1529, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1594, file: !1588, line: 160, baseType: !1593, size: 64, offset: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1594, file: !1588, line: 161, baseType: !1600, size: 32, offset: 128)
!1600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1529, size: 32, elements: !1601)
!1601 = !{!1602}
!1602 = !DISubrange(count: 4)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1587, file: !1588, line: 168, baseType: !1597, size: 64, offset: 128)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1587, file: !1588, line: 169, baseType: !1597, size: 64, offset: 192)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1587, file: !1588, line: 170, baseType: !1597, size: 64, offset: 256)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1587, file: !1588, line: 171, baseType: !1591, size: 64, offset: 320)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1587, file: !1588, line: 172, baseType: !1524, size: 32, offset: 384)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1587, file: !1588, line: 176, baseType: !1609, size: 64, offset: 448)
!1609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1610, size: 64)
!1610 = !DISubroutineType(types: !1611)
!1611 = !{!1593, !1612, !1591}
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1587, file: !1588, line: 177, baseType: !1614, size: 64, offset: 512)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = !DISubroutineType(types: !1616)
!1616 = !{null, !1612, !1593}
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1587, file: !1588, line: 178, baseType: !1612, size: 64, offset: 576)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1587, file: !1588, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1587, file: !1588, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1587, file: !1588, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1521, file: !1503, line: 177, baseType: !1622, size: 64)
!1622 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1435, line: 56, baseType: !1623)
!1623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1624, size: 64)
!1624 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !1625)
!1625 = !{!1626, !1659, !1665, !1676, !1695, !1706, !1711, !1718, !1724, !1738, !1746, !1784, !1789, !1817, !1834, !1835, !1840, !1849, !1855, !1860, !1864, !1868, !2181, !2230, !2236, !2242, !2249, !2262, !2276, !2293, !2305, !2327, !2342, !2514}
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1624, file: !164, line: 3372, baseType: !1627, size: 64)
!1627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !1628)
!1628 = !{!1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658}
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1627, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1627, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1627, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1627, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1627, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1627, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1627, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1627, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1627, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1627, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1627, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1627, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1627, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1627, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1627, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1627, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1627, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1627, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1627, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1627, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1627, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1627, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1627, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1627, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1627, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1627, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1627, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1627, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1627, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1627, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1624, file: !164, line: 3373, baseType: !1660, size: 192)
!1660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !1661)
!1661 = !{!1662, !1663, !1664}
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1660, file: !164, line: 403, baseType: !1627, size: 64)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1660, file: !164, line: 404, baseType: !1622, size: 64, offset: 64)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1660, file: !164, line: 405, baseType: !1622, size: 64, offset: 128)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1624, file: !164, line: 3374, baseType: !1666, size: 320)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !1667)
!1667 = !{!1668, !1669}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1666, file: !164, line: 1385, baseType: !1660, size: 192)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1666, file: !164, line: 1386, baseType: !1670, size: 128, offset: 192)
!1670 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1671, line: 58, baseType: !1672)
!1671 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1672 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1671, line: 54, size: 128, elements: !1673)
!1673 = !{!1674, !1675}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1672, file: !1671, line: 56, baseType: !1574, size: 64)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1672, file: !1671, line: 57, baseType: !1591, size: 64, offset: 64)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1624, file: !164, line: 3375, baseType: !1677, size: 256)
!1677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !1678)
!1678 = !{!1679, !1680}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1677, file: !164, line: 1398, baseType: !1660, size: 192)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1677, file: !164, line: 1399, baseType: !1681, size: 64, offset: 192)
!1681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1682, size: 64)
!1682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1683, line: 52, size: 256, elements: !1684)
!1683 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1684 = !{!1685, !1686, !1687, !1688, !1689, !1690, !1691}
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1682, file: !1683, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1682, file: !1683, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1682, file: !1683, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1682, file: !1683, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1682, file: !1683, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1682, file: !1683, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1682, file: !1683, line: 62, baseType: !1692, size: 192, offset: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1574, size: 192, elements: !1693)
!1693 = !{!1694}
!1694 = !DISubrange(count: 3)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1624, file: !164, line: 3376, baseType: !1696, size: 256)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !1697)
!1697 = !{!1698, !1699}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1696, file: !164, line: 1409, baseType: !1660, size: 192)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1696, file: !164, line: 1410, baseType: !1700, size: 64, offset: 192)
!1700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1701, size: 64)
!1701 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1702, line: 27, size: 192, elements: !1703)
!1702 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1703 = !{!1704, !1705}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1701, file: !1702, line: 29, baseType: !1670, size: 128)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1701, file: !1702, line: 30, baseType: !5, size: 32, offset: 128)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1624, file: !164, line: 3377, baseType: !1707, size: 256)
!1707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !1708)
!1708 = !{!1709, !1710}
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1707, file: !164, line: 1438, baseType: !1660, size: 192)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1707, file: !164, line: 1439, baseType: !1622, size: 64, offset: 192)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1624, file: !164, line: 3378, baseType: !1712, size: 256)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !1713)
!1713 = !{!1714, !1715, !1716}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1712, file: !164, line: 1419, baseType: !1660, size: 192)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1712, file: !164, line: 1420, baseType: !1524, size: 32, offset: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1712, file: !164, line: 1421, baseType: !1717, size: 8, offset: 224)
!1717 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1529, size: 8, elements: !1539)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1624, file: !164, line: 3379, baseType: !1719, size: 320)
!1719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !1720)
!1720 = !{!1721, !1722, !1723}
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1719, file: !164, line: 1429, baseType: !1660, size: 192)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1719, file: !164, line: 1430, baseType: !1622, size: 64, offset: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1719, file: !164, line: 1431, baseType: !1622, size: 64, offset: 256)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1624, file: !164, line: 3380, baseType: !1725, size: 320)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !1726)
!1726 = !{!1727, !1728}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1725, file: !164, line: 1461, baseType: !1660, size: 192)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1725, file: !164, line: 1462, baseType: !1729, size: 128, offset: 192)
!1729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1730, line: 31, size: 128, elements: !1731)
!1730 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1731 = !{!1732, !1736, !1737}
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1729, file: !1730, line: 32, baseType: !1733, size: 64)
!1733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1734, size: 64)
!1734 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1735)
!1735 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1729, file: !1730, line: 33, baseType: !7, size: 32, offset: 64)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1729, file: !1730, line: 34, baseType: !7, size: 32, offset: 96)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1624, file: !164, line: 3381, baseType: !1739, size: 384)
!1739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !1740)
!1740 = !{!1741, !1742, !1743, !1744, !1745}
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1739, file: !164, line: 2508, baseType: !1660, size: 192)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1739, file: !164, line: 2509, baseType: !1453, size: 32, offset: 192)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1739, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1739, file: !164, line: 2511, baseType: !1622, size: 64, offset: 256)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1739, file: !164, line: 2512, baseType: !1622, size: 64, offset: 320)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1624, file: !164, line: 3382, baseType: !1747, size: 896)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !1748)
!1748 = !{!1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1747, file: !164, line: 2653, baseType: !1739, size: 384)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1747, file: !164, line: 2654, baseType: !1622, size: 64, offset: 384)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1747, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1747, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1747, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1747, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1747, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1747, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1747, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1747, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1747, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1747, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1747, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1747, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1747, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1747, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1747, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1747, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1747, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1747, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1747, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1747, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1747, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1747, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1747, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1747, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1747, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1747, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1747, file: !164, line: 2705, baseType: !1622, size: 64, offset: 576)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1747, file: !164, line: 2706, baseType: !1622, size: 64, offset: 640)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1747, file: !164, line: 2707, baseType: !1622, size: 64, offset: 704)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1747, file: !164, line: 2708, baseType: !1622, size: 64, offset: 768)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1747, file: !164, line: 2711, baseType: !1782, size: 64, offset: 832)
!1782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1783, size: 64)
!1783 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1624, file: !164, line: 3383, baseType: !1785, size: 960)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !1786)
!1786 = !{!1787, !1788}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1785, file: !164, line: 2757, baseType: !1747, size: 896)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1785, file: !164, line: 2758, baseType: !1500, size: 64, offset: 896)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1624, file: !164, line: 3384, baseType: !1790, size: 1472)
!1790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !1791)
!1791 = !{!1792, !1813, !1814, !1815, !1816}
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1790, file: !164, line: 3115, baseType: !1793, size: 1216)
!1793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !1794)
!1794 = !{!1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812}
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1793, file: !164, line: 2985, baseType: !1785, size: 960)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1793, file: !164, line: 2986, baseType: !1622, size: 64, offset: 960)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1793, file: !164, line: 2987, baseType: !1622, size: 64, offset: 1024)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1793, file: !164, line: 2988, baseType: !1622, size: 64, offset: 1088)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1793, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1793, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1793, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1793, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1793, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1793, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1793, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1793, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1793, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1793, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1793, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1793, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1793, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1793, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1790, file: !164, line: 3117, baseType: !1622, size: 64, offset: 1216)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1790, file: !164, line: 3119, baseType: !1622, size: 64, offset: 1280)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1790, file: !164, line: 3121, baseType: !1622, size: 64, offset: 1344)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1790, file: !164, line: 3123, baseType: !1622, size: 64, offset: 1408)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1624, file: !164, line: 3385, baseType: !1818, size: 1088)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !1819)
!1819 = !{!1820, !1821, !1822}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1818, file: !164, line: 2875, baseType: !1785, size: 960)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1818, file: !164, line: 2876, baseType: !1500, size: 64, offset: 960)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1818, file: !164, line: 2877, baseType: !1823, size: 64, offset: 1024)
!1823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1824, size: 64)
!1824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1825, line: 172, size: 128, elements: !1826)
!1825 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1826 = !{!1827, !1828, !1829, !1830, !1831, !1832, !1833}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1824, file: !1825, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1824, file: !1825, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1824, file: !1825, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1824, file: !1825, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1824, file: !1825, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1824, file: !1825, line: 195, baseType: !7, size: 32, offset: 32)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1824, file: !1825, line: 199, baseType: !1622, size: 64, offset: 64)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1624, file: !164, line: 3386, baseType: !1793, size: 1216)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1624, file: !164, line: 3387, baseType: !1836, size: 1280)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !1837)
!1837 = !{!1838, !1839}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1836, file: !164, line: 3094, baseType: !1793, size: 1216)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1836, file: !164, line: 3095, baseType: !1823, size: 64, offset: 1216)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1624, file: !164, line: 3388, baseType: !1841, size: 1216)
!1841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !1842)
!1842 = !{!1843, !1844, !1845, !1846, !1847, !1848}
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1841, file: !164, line: 2825, baseType: !1747, size: 896)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1841, file: !164, line: 2827, baseType: !1622, size: 64, offset: 896)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1841, file: !164, line: 2828, baseType: !1622, size: 64, offset: 960)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1841, file: !164, line: 2829, baseType: !1622, size: 64, offset: 1024)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1841, file: !164, line: 2830, baseType: !1622, size: 64, offset: 1088)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1841, file: !164, line: 2831, baseType: !1622, size: 64, offset: 1152)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1624, file: !164, line: 3389, baseType: !1850, size: 1024)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !1851)
!1851 = !{!1852, !1853, !1854}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1850, file: !164, line: 2851, baseType: !1785, size: 960)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1850, file: !164, line: 2852, baseType: !1524, size: 32, offset: 960)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1850, file: !164, line: 2853, baseType: !1524, size: 32, offset: 992)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1624, file: !164, line: 3390, baseType: !1856, size: 1024)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !1857)
!1857 = !{!1858, !1859}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1856, file: !164, line: 2858, baseType: !1785, size: 960)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1856, file: !164, line: 2859, baseType: !1823, size: 64, offset: 960)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1624, file: !164, line: 3391, baseType: !1861, size: 960)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !1862)
!1862 = !{!1863}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1861, file: !164, line: 2863, baseType: !1785, size: 960)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1624, file: !164, line: 3392, baseType: !1865, size: 1472)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !1866)
!1866 = !{!1867}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1865, file: !164, line: 3305, baseType: !1790, size: 1472)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1624, file: !164, line: 3393, baseType: !1869, size: 1792)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !1870)
!1870 = !{!1871, !1872, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1869, file: !164, line: 3249, baseType: !1790, size: 1472)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1869, file: !164, line: 3251, baseType: !1873, size: 64, offset: 1472)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1875, line: 463, size: 1152, elements: !1876)
!1875 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1876 = !{!1877, !1880, !1911, !1912, !2041, !2104, !2105, !2106, !2107, !2108, !2109, !2133, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1874, file: !1875, line: 464, baseType: !1878, size: 64)
!1878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1879, size: 64)
!1879 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1875, line: 464, flags: DIFlagFwdDecl)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1874, file: !1875, line: 467, baseType: !1881, size: 64, offset: 64)
!1881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1882, size: 64)
!1882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1883)
!1883 = !{!1884, !1886, !1887, !1900, !1901, !1902, !1903, !1904, !1905, !1907, !1909, !1910}
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1882, file: !135, line: 377, baseType: !1885, size: 64)
!1885 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1435, line: 111, baseType: !1459)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1882, file: !135, line: 378, baseType: !1885, size: 64, offset: 64)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1882, file: !135, line: 381, baseType: !1888, size: 64, offset: 128)
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1889, size: 64)
!1889 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1890)
!1890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1891)
!1891 = !{!1892}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1890, file: !135, line: 282, baseType: !1893, size: 128)
!1893 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1894)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1895)
!1895 = !{!1896, !1897, !1898}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1894, file: !135, line: 281, baseType: !7, size: 32)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1894, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1894, file: !135, line: 281, baseType: !1899, size: 64, offset: 64)
!1899 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1885, size: 64, elements: !1539)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1882, file: !135, line: 384, baseType: !1524, size: 32, offset: 192)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1882, file: !135, line: 387, baseType: !1524, size: 32, offset: 224)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1882, file: !135, line: 390, baseType: !1524, size: 32, offset: 256)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1882, file: !135, line: 394, baseType: !1888, size: 64, offset: 320)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1882, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1882, file: !135, line: 399, baseType: !1906, size: 64, offset: 416)
!1906 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1575)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1882, file: !135, line: 402, baseType: !1908, size: 64, offset: 480)
!1908 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1575)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1882, file: !135, line: 406, baseType: !1524, size: 32, offset: 544)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1882, file: !135, line: 409, baseType: !1524, size: 32, offset: 576)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1874, file: !1875, line: 470, baseType: !1486, size: 64, offset: 128)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1874, file: !1875, line: 473, baseType: !1913, size: 64, offset: 192)
!1913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1914, size: 64)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1825, line: 39, size: 1152, elements: !1915)
!1915 = !{!1916, !1968, !1981, !1994, !1995, !2007, !2008, !2012, !2013, !2014, !2015, !2016}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1914, file: !1825, line: 41, baseType: !1917, size: 64)
!1917 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1918, line: 144, baseType: !1919)
!1918 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1920, size: 64)
!1920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1918, line: 100, size: 896, elements: !1921)
!1921 = !{!1922, !1930, !1935, !1940, !1942, !1945, !1946, !1947, !1948, !1949, !1954, !1956, !1957, !1962, !1967}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1920, file: !1918, line: 102, baseType: !1923, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1918, line: 52, baseType: !1924)
!1924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1925 = !DISubroutineType(types: !1926)
!1926 = !{!1927, !1928}
!1927 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1918, line: 47, baseType: !7)
!1928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1929, size: 64)
!1929 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1920, file: !1918, line: 105, baseType: !1931, size: 64, offset: 64)
!1931 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1918, line: 59, baseType: !1932)
!1932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1933, size: 64)
!1933 = !DISubroutineType(types: !1934)
!1934 = !{!1524, !1928, !1928}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1920, file: !1918, line: 108, baseType: !1936, size: 64, offset: 128)
!1936 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1918, line: 63, baseType: !1937)
!1937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1938, size: 64)
!1938 = !DISubroutineType(types: !1939)
!1939 = !{null, !1612}
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1920, file: !1918, line: 111, baseType: !1941, size: 64, offset: 192)
!1941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1612, size: 64)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1920, file: !1918, line: 114, baseType: !1943, size: 64, offset: 256)
!1943 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1944, line: 46, baseType: !1574)
!1944 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1920, file: !1918, line: 117, baseType: !1943, size: 64, offset: 320)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1920, file: !1918, line: 120, baseType: !1943, size: 64, offset: 384)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1920, file: !1918, line: 124, baseType: !7, size: 32, offset: 448)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1920, file: !1918, line: 128, baseType: !7, size: 32, offset: 480)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1920, file: !1918, line: 131, baseType: !1950, size: 64, offset: 512)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1918, line: 75, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1952, size: 64)
!1952 = !DISubroutineType(types: !1953)
!1953 = !{!1612, !1943, !1943}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1920, file: !1918, line: 132, baseType: !1955, size: 64, offset: 576)
!1955 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1918, line: 78, baseType: !1937)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1920, file: !1918, line: 135, baseType: !1612, size: 64, offset: 640)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1920, file: !1918, line: 136, baseType: !1958, size: 64, offset: 704)
!1958 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1918, line: 82, baseType: !1959)
!1959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1960, size: 64)
!1960 = !DISubroutineType(types: !1961)
!1961 = !{!1612, !1612, !1943, !1943}
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1920, file: !1918, line: 137, baseType: !1963, size: 64, offset: 768)
!1963 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1918, line: 83, baseType: !1964)
!1964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1965, size: 64)
!1965 = !DISubroutineType(types: !1966)
!1966 = !{null, !1612, !1612}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1920, file: !1918, line: 141, baseType: !7, size: 32, offset: 832)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1914, file: !1825, line: 48, baseType: !1969, size: 64, offset: 64)
!1969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1970, size: 64)
!1970 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !581, line: 35, baseType: !1971)
!1971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !581, line: 35, size: 128, elements: !1972)
!1972 = !{!1973}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1971, file: !581, line: 35, baseType: !1974, size: 128)
!1974 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !581, line: 33, baseType: !1975)
!1975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !581, line: 33, size: 128, elements: !1976)
!1976 = !{!1977, !1978, !1979}
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1975, file: !581, line: 33, baseType: !7, size: 32)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1975, file: !581, line: 33, baseType: !7, size: 32, offset: 32)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1975, file: !581, line: 33, baseType: !1980, size: 64, offset: 64)
!1980 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1434, size: 64, elements: !1539)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1914, file: !1825, line: 51, baseType: !1982, size: 64, offset: 128)
!1982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1983, size: 64)
!1983 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1984)
!1984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1985)
!1985 = !{!1986}
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1984, file: !164, line: 183, baseType: !1987, size: 128)
!1987 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1988)
!1988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1989)
!1989 = !{!1990, !1991, !1992}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1988, file: !164, line: 182, baseType: !7, size: 32)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1988, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1988, file: !164, line: 182, baseType: !1993, size: 64, offset: 64)
!1993 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1622, size: 64, elements: !1539)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1914, file: !1825, line: 54, baseType: !1622, size: 64, offset: 192)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1914, file: !1825, line: 57, baseType: !1996, size: 128, offset: 256)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1997, line: 31, size: 128, elements: !1998)
!1997 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1998 = !{!1999, !2000, !2001, !2002, !2003, !2004, !2005}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1996, file: !1997, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1996, file: !1997, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1996, file: !1997, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1996, file: !1997, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1996, file: !1997, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1996, file: !1997, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1996, file: !1997, line: 56, baseType: !2006, size: 64, offset: 64)
!2006 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1435, line: 47, baseType: !1558)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1914, file: !1825, line: 60, baseType: !1996, size: 128, offset: 384)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1914, file: !1825, line: 64, baseType: !2009, size: 64, offset: 512)
!2009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2010 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2011, line: 33, flags: DIFlagFwdDecl)
!2011 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1914, file: !1825, line: 67, baseType: !1622, size: 64, offset: 576)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1914, file: !1825, line: 73, baseType: !1917, size: 64, offset: 640)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1914, file: !1825, line: 77, baseType: !2006, size: 64, offset: 704)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1914, file: !1825, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1914, file: !1825, line: 82, baseType: !2017, size: 320, offset: 832)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !574, line: 62, size: 320, elements: !2018)
!2018 = !{!2019, !2025, !2026, !2027, !2028, !2035}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2017, file: !574, line: 63, baseType: !2020, size: 64)
!2020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2021, size: 64)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !574, line: 56, size: 128, elements: !2022)
!2022 = !{!2023, !2024}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2021, file: !574, line: 57, baseType: !2020, size: 64)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2021, file: !574, line: 58, baseType: !1717, size: 8, offset: 64)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2017, file: !574, line: 64, baseType: !7, size: 32, offset: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2017, file: !574, line: 66, baseType: !7, size: 32, offset: 96)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2017, file: !574, line: 68, baseType: !1735, size: 8, offset: 128)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2017, file: !574, line: 70, baseType: !2029, size: 64, offset: 192)
!2029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2030, size: 64)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !574, line: 37, size: 128, elements: !2031)
!2031 = !{!2032, !2033}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2030, file: !574, line: 39, baseType: !2029, size: 64)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2030, file: !574, line: 40, baseType: !2034, size: 64, offset: 64)
!2034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1622, size: 64)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2017, file: !574, line: 71, baseType: !2036, size: 64, offset: 256)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !574, line: 45, size: 320, elements: !2038)
!2038 = !{!2039, !2040}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2037, file: !574, line: 47, baseType: !2036, size: 64)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2037, file: !574, line: 48, baseType: !1425, size: 256, offset: 64)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1874, file: !1875, line: 476, baseType: !2042, size: 64, offset: 256)
!2042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2043, size: 64)
!2043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !146, line: 187, size: 256, elements: !2044)
!2044 = !{!2045, !2046, !2102, !2103}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2043, file: !146, line: 189, baseType: !1524, size: 32)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2043, file: !146, line: 192, baseType: !2047, size: 64, offset: 64)
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64)
!2048 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !146, line: 87, baseType: !2049)
!2049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !146, line: 87, size: 128, elements: !2050)
!2050 = !{!2051}
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2049, file: !146, line: 87, baseType: !2052, size: 128)
!2052 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !146, line: 85, baseType: !2053)
!2053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !146, line: 85, size: 128, elements: !2054)
!2054 = !{!2055, !2056, !2057}
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2053, file: !146, line: 85, baseType: !7, size: 32)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2053, file: !146, line: 85, baseType: !7, size: 32, offset: 32)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2053, file: !146, line: 85, baseType: !2058, size: 64, offset: 64)
!2058 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2059, size: 64, elements: !1539)
!2059 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !146, line: 84, baseType: !2060)
!2060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2061, size: 64)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 100, size: 1216, elements: !2062)
!2062 = !{!2063, !2064, !2065, !2066, !2067, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2092, !2100, !2101}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2061, file: !146, line: 102, baseType: !1524, size: 32)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !2061, file: !146, line: 105, baseType: !7, size: 32, offset: 32)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2061, file: !146, line: 108, baseType: !1459, size: 64, offset: 64)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !2061, file: !146, line: 111, baseType: !1459, size: 64, offset: 128)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !2061, file: !146, line: 114, baseType: !2068, size: 64, offset: 192)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !146, line: 41, size: 64, elements: !2069)
!2069 = !{!2070, !2071}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2068, file: !146, line: 42, baseType: !145, size: 32)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2068, file: !146, line: 43, baseType: !7, size: 32, offset: 32)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !2061, file: !146, line: 117, baseType: !7, size: 32, offset: 256)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !2061, file: !146, line: 120, baseType: !7, size: 32, offset: 288)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !2061, file: !146, line: 123, baseType: !2047, size: 64, offset: 320)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2061, file: !146, line: 126, baseType: !2060, size: 64, offset: 384)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2061, file: !146, line: 129, baseType: !2060, size: 64, offset: 448)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2061, file: !146, line: 132, baseType: !1612, size: 64, offset: 512)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !2061, file: !146, line: 139, baseType: !1622, size: 64, offset: 576)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !2061, file: !146, line: 143, baseType: !1670, size: 128, offset: 640)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !2061, file: !146, line: 146, baseType: !1670, size: 128, offset: 768)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !2061, file: !146, line: 148, baseType: !1735, size: 8, offset: 896)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !2061, file: !146, line: 149, baseType: !1735, size: 8, offset: 904)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !2061, file: !146, line: 153, baseType: !154, size: 32, offset: 928)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !2061, file: !146, line: 156, baseType: !2085, size: 64, offset: 960)
!2085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !146, line: 48, size: 320, elements: !2087)
!2087 = !{!2088, !2089, !2090, !2091}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2086, file: !146, line: 50, baseType: !1434, size: 64)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2086, file: !146, line: 59, baseType: !1670, size: 128, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2086, file: !146, line: 64, baseType: !1735, size: 8, offset: 192)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2086, file: !146, line: 67, baseType: !2085, size: 64, offset: 256)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2061, file: !146, line: 159, baseType: !2093, size: 64, offset: 1024)
!2093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2094, size: 64)
!2094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !146, line: 72, size: 256, elements: !2095)
!2095 = !{!2096, !2097, !2098, !2099}
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2094, file: !146, line: 74, baseType: !1476, size: 64)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2094, file: !146, line: 77, baseType: !2093, size: 64, offset: 64)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2094, file: !146, line: 78, baseType: !2093, size: 64, offset: 128)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2094, file: !146, line: 81, baseType: !2093, size: 64, offset: 192)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !2061, file: !146, line: 162, baseType: !1735, size: 8, offset: 1088)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !2061, file: !146, line: 166, baseType: !1622, size: 64, offset: 1152)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2043, file: !146, line: 197, baseType: !1917, size: 64, offset: 128)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2043, file: !146, line: 200, baseType: !2060, size: 64, offset: 192)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1874, file: !1875, line: 479, baseType: !1917, size: 64, offset: 320)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1874, file: !1875, line: 484, baseType: !1622, size: 64, offset: 384)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1874, file: !1875, line: 488, baseType: !1622, size: 64, offset: 448)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1874, file: !1875, line: 493, baseType: !1622, size: 64, offset: 512)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1874, file: !1875, line: 496, baseType: !1622, size: 64, offset: 576)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1874, file: !1875, line: 501, baseType: !2110, size: 64, offset: 640)
!2110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2111, size: 64)
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !2112)
!2112 = !{!2113, !2116, !2117, !2118, !2119, !2121, !2122, !2127, !2128, !2129, !2130, !2131, !2132}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2111, file: !159, line: 2356, baseType: !2114, size: 64)
!2114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2115, size: 64)
!2115 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2111, file: !159, line: 2357, baseType: !1527, size: 64, offset: 64)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2111, file: !159, line: 2358, baseType: !1524, size: 32, offset: 128)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2111, file: !159, line: 2359, baseType: !1524, size: 32, offset: 160)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2111, file: !159, line: 2360, baseType: !2120, size: 128, offset: 192)
!2120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1524, size: 128, elements: !1601)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2111, file: !159, line: 2364, baseType: !1524, size: 32, offset: 320)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2111, file: !159, line: 2367, baseType: !2123, size: 128, offset: 384)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !2124)
!2124 = !{!2125, !2126}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2123, file: !159, line: 2351, baseType: !1500, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2123, file: !159, line: 2352, baseType: !1591, size: 64, offset: 64)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2111, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2111, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2111, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2111, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2111, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2111, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1874, file: !1875, line: 504, baseType: !2134, size: 64, offset: 704)
!2134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2135 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1875, line: 504, flags: DIFlagFwdDecl)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1874, file: !1875, line: 507, baseType: !1917, size: 64, offset: 768)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1874, file: !1875, line: 510, baseType: !1524, size: 32, offset: 832)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1874, file: !1875, line: 513, baseType: !1524, size: 32, offset: 864)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1874, file: !1875, line: 516, baseType: !1453, size: 32, offset: 896)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1874, file: !1875, line: 519, baseType: !1453, size: 32, offset: 928)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1874, file: !1875, line: 522, baseType: !7, size: 32, offset: 960)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1874, file: !1875, line: 523, baseType: !7, size: 32, offset: 992)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1874, file: !1875, line: 528, baseType: !1527, size: 64, offset: 1024)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1874, file: !1875, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1874, file: !1875, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1874, file: !1875, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1874, file: !1875, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1874, file: !1875, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1874, file: !1875, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1874, file: !1875, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1874, file: !1875, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1874, file: !1875, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1874, file: !1875, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1874, file: !1875, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1874, file: !1875, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1874, file: !1875, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1874, file: !1875, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1874, file: !1875, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1874, file: !1875, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1869, file: !164, line: 3254, baseType: !1622, size: 64, offset: 1536)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1869, file: !164, line: 3257, baseType: !1622, size: 64, offset: 1600)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1869, file: !164, line: 3258, baseType: !1622, size: 64, offset: 1664)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1869, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1869, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1869, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1869, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1869, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1869, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1869, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1869, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1869, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1869, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1869, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1869, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1869, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1869, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1869, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1869, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1869, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1869, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1624, file: !164, line: 3394, baseType: !2182, size: 1344)
!2182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !2183)
!2183 = !{!2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2209, !2210, !2211, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227}
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2182, file: !164, line: 2280, baseType: !1660, size: 192)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2182, file: !164, line: 2281, baseType: !1622, size: 64, offset: 192)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2182, file: !164, line: 2282, baseType: !1622, size: 64, offset: 256)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2182, file: !164, line: 2283, baseType: !1622, size: 64, offset: 320)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2182, file: !164, line: 2284, baseType: !1622, size: 64, offset: 384)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2182, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2182, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2182, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2182, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2182, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2182, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2182, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2182, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2182, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2182, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2182, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2182, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2182, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2182, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2182, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2182, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2182, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2182, file: !164, line: 2306, baseType: !2207, size: 32, offset: 544)
!2207 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2208, line: 31, baseType: !1524)
!2208 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2182, file: !164, line: 2307, baseType: !1622, size: 64, offset: 576)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2182, file: !164, line: 2308, baseType: !1622, size: 64, offset: 640)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2182, file: !164, line: 2314, baseType: !2212, size: 64, offset: 704)
!2212 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !2213)
!2213 = !{!2214, !2215, !2216}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2212, file: !164, line: 2310, baseType: !1524, size: 32)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2212, file: !164, line: 2311, baseType: !1527, size: 64)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2212, file: !164, line: 2312, baseType: !2217, size: 64)
!2217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2218, size: 64)
!2218 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2182, file: !164, line: 2315, baseType: !1622, size: 64, offset: 768)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2182, file: !164, line: 2316, baseType: !1622, size: 64, offset: 832)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2182, file: !164, line: 2317, baseType: !1622, size: 64, offset: 896)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2182, file: !164, line: 2318, baseType: !1622, size: 64, offset: 960)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2182, file: !164, line: 2319, baseType: !1622, size: 64, offset: 1024)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2182, file: !164, line: 2320, baseType: !1622, size: 64, offset: 1088)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2182, file: !164, line: 2321, baseType: !1622, size: 64, offset: 1152)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2182, file: !164, line: 2322, baseType: !1622, size: 64, offset: 1216)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2182, file: !164, line: 2324, baseType: !2228, size: 64, offset: 1280)
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!2229 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1624, file: !164, line: 3395, baseType: !2231, size: 320)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !2232)
!2232 = !{!2233, !2234, !2235}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2231, file: !164, line: 1470, baseType: !1660, size: 192)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2231, file: !164, line: 1471, baseType: !1622, size: 64, offset: 192)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2231, file: !164, line: 1472, baseType: !1622, size: 64, offset: 256)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1624, file: !164, line: 3396, baseType: !2237, size: 320)
!2237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !2238)
!2238 = !{!2239, !2240, !2241}
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2237, file: !164, line: 1483, baseType: !1660, size: 192)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2237, file: !164, line: 1484, baseType: !1524, size: 32, offset: 192)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2237, file: !164, line: 1485, baseType: !1993, size: 64, offset: 256)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1624, file: !164, line: 3397, baseType: !2243, size: 384)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !2244)
!2244 = !{!2245, !2246, !2247, !2248}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2243, file: !164, line: 1830, baseType: !1660, size: 192)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2243, file: !164, line: 1831, baseType: !1453, size: 32, offset: 192)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2243, file: !164, line: 1832, baseType: !1622, size: 64, offset: 256)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2243, file: !164, line: 1835, baseType: !1993, size: 64, offset: 320)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1624, file: !164, line: 3398, baseType: !2250, size: 704)
!2250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !2251)
!2251 = !{!2252, !2253, !2254, !2255, !2256, !2261}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2250, file: !164, line: 1899, baseType: !1660, size: 192)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2250, file: !164, line: 1902, baseType: !1622, size: 64, offset: 192)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2250, file: !164, line: 1905, baseType: !1434, size: 64, offset: 256)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2250, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2250, file: !164, line: 1911, baseType: !2257, size: 64, offset: 384)
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1825, line: 117, size: 128, elements: !2259)
!2259 = !{!2260}
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2258, file: !1825, line: 120, baseType: !1996, size: 128)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2250, file: !164, line: 1914, baseType: !1425, size: 256, offset: 448)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1624, file: !164, line: 3399, baseType: !2263, size: 704)
!2263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !2264)
!2264 = !{!2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275}
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2263, file: !164, line: 2009, baseType: !1660, size: 192)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2263, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2263, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2263, file: !164, line: 2014, baseType: !1453, size: 32, offset: 224)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2263, file: !164, line: 2016, baseType: !1622, size: 64, offset: 256)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2263, file: !164, line: 2017, baseType: !1982, size: 64, offset: 320)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2263, file: !164, line: 2019, baseType: !1622, size: 64, offset: 384)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2263, file: !164, line: 2020, baseType: !1622, size: 64, offset: 448)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2263, file: !164, line: 2021, baseType: !1622, size: 64, offset: 512)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2263, file: !164, line: 2022, baseType: !1622, size: 64, offset: 576)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2263, file: !164, line: 2023, baseType: !1622, size: 64, offset: 640)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1624, file: !164, line: 3400, baseType: !2277, size: 832)
!2277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !2278)
!2278 = !{!2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2277, file: !164, line: 2431, baseType: !1660, size: 192)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2277, file: !164, line: 2433, baseType: !1622, size: 64, offset: 192)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2277, file: !164, line: 2434, baseType: !1622, size: 64, offset: 256)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2277, file: !164, line: 2435, baseType: !1622, size: 64, offset: 320)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2277, file: !164, line: 2436, baseType: !1622, size: 64, offset: 384)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2277, file: !164, line: 2437, baseType: !1982, size: 64, offset: 448)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2277, file: !164, line: 2438, baseType: !1622, size: 64, offset: 512)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2277, file: !164, line: 2440, baseType: !1622, size: 64, offset: 576)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2277, file: !164, line: 2441, baseType: !1622, size: 64, offset: 640)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2277, file: !164, line: 2443, baseType: !2289, size: 128, offset: 704)
!2289 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !2290)
!2290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !2291)
!2291 = !{!2292}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2290, file: !164, line: 182, baseType: !1987, size: 128)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1624, file: !164, line: 3401, baseType: !2294, size: 320)
!2294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !2295)
!2295 = !{!2296, !2297, !2304}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2294, file: !164, line: 3329, baseType: !1660, size: 192)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2294, file: !164, line: 3330, baseType: !2298, size: 64, offset: 192)
!2298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2299, size: 64)
!2299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !2300)
!2300 = !{!2301, !2302, !2303}
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2299, file: !164, line: 3322, baseType: !2298, size: 64)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2299, file: !164, line: 3323, baseType: !2298, size: 64, offset: 64)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2299, file: !164, line: 3324, baseType: !1622, size: 64, offset: 128)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2294, file: !164, line: 3331, baseType: !2298, size: 64, offset: 256)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1624, file: !164, line: 3402, baseType: !2306, size: 256)
!2306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !2307)
!2307 = !{!2308, !2309}
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2306, file: !164, line: 1541, baseType: !1660, size: 192)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2306, file: !164, line: 1542, baseType: !2310, size: 64, offset: 192)
!2310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2311, size: 64)
!2311 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !2312)
!2312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !2313)
!2313 = !{!2314}
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2312, file: !164, line: 1538, baseType: !2315, size: 192)
!2315 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !2316)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !2317)
!2317 = !{!2318, !2319, !2320}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2316, file: !164, line: 1537, baseType: !7, size: 32)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2316, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2316, file: !164, line: 1537, baseType: !2321, size: 128, offset: 64)
!2321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2322, size: 128, elements: !1539)
!2322 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !2323)
!2323 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !2324)
!2324 = !{!2325, !2326}
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2323, file: !164, line: 1533, baseType: !1622, size: 64)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2323, file: !164, line: 1534, baseType: !1622, size: 64, offset: 64)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1624, file: !164, line: 3403, baseType: !2328, size: 512)
!2328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !2329)
!2329 = !{!2330, !2331, !2332, !2333, !2339, !2340, !2341}
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2328, file: !164, line: 1939, baseType: !1660, size: 192)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2328, file: !164, line: 1940, baseType: !1453, size: 32, offset: 192)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2328, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2328, file: !164, line: 1946, baseType: !2334, size: 32, offset: 256)
!2334 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !2335)
!2335 = !{!2336, !2337, !2338}
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2334, file: !164, line: 1943, baseType: !182, size: 32)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2334, file: !164, line: 1944, baseType: !189, size: 32)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2334, file: !164, line: 1945, baseType: !196, size: 32)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2328, file: !164, line: 1950, baseType: !1485, size: 64, offset: 320)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2328, file: !164, line: 1951, baseType: !1485, size: 64, offset: 384)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2328, file: !164, line: 1953, baseType: !1993, size: 64, offset: 448)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1624, file: !164, line: 3404, baseType: !2343, size: 1664)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !2344)
!2344 = !{!2345, !2346}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2343, file: !164, line: 3338, baseType: !1660, size: 192)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2343, file: !164, line: 3341, baseType: !2347, size: 1472, offset: 192)
!2347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2348, line: 410, size: 1472, elements: !2349)
!2348 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2349 = !{!2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2347, file: !2348, line: 412, baseType: !1524, size: 32)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2347, file: !2348, line: 413, baseType: !1524, size: 32, offset: 32)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2347, file: !2348, line: 414, baseType: !1524, size: 32, offset: 64)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2347, file: !2348, line: 415, baseType: !1524, size: 32, offset: 96)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2347, file: !2348, line: 416, baseType: !1524, size: 32, offset: 128)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2347, file: !2348, line: 417, baseType: !1524, size: 32, offset: 160)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2347, file: !2348, line: 418, baseType: !1735, size: 8, offset: 192)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2347, file: !2348, line: 419, baseType: !1735, size: 8, offset: 200)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2347, file: !2348, line: 420, baseType: !2359, size: 8, offset: 208)
!2359 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2347, file: !2348, line: 421, baseType: !2359, size: 8, offset: 216)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2347, file: !2348, line: 422, baseType: !2359, size: 8, offset: 224)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2347, file: !2348, line: 423, baseType: !2359, size: 8, offset: 232)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2347, file: !2348, line: 424, baseType: !2359, size: 8, offset: 240)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2347, file: !2348, line: 425, baseType: !2359, size: 8, offset: 248)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2347, file: !2348, line: 426, baseType: !2359, size: 8, offset: 256)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2347, file: !2348, line: 427, baseType: !2359, size: 8, offset: 264)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2347, file: !2348, line: 428, baseType: !2359, size: 8, offset: 272)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2347, file: !2348, line: 429, baseType: !2359, size: 8, offset: 280)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2347, file: !2348, line: 430, baseType: !2359, size: 8, offset: 288)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2347, file: !2348, line: 431, baseType: !2359, size: 8, offset: 296)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2347, file: !2348, line: 432, baseType: !2359, size: 8, offset: 304)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2347, file: !2348, line: 433, baseType: !2359, size: 8, offset: 312)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2347, file: !2348, line: 434, baseType: !2359, size: 8, offset: 320)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2347, file: !2348, line: 435, baseType: !2359, size: 8, offset: 328)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2347, file: !2348, line: 436, baseType: !2359, size: 8, offset: 336)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2347, file: !2348, line: 437, baseType: !2359, size: 8, offset: 344)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2347, file: !2348, line: 438, baseType: !2359, size: 8, offset: 352)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2347, file: !2348, line: 439, baseType: !2359, size: 8, offset: 360)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2347, file: !2348, line: 440, baseType: !2359, size: 8, offset: 368)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2347, file: !2348, line: 441, baseType: !2359, size: 8, offset: 376)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2347, file: !2348, line: 442, baseType: !2359, size: 8, offset: 384)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2347, file: !2348, line: 443, baseType: !2359, size: 8, offset: 392)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2347, file: !2348, line: 444, baseType: !2359, size: 8, offset: 400)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2347, file: !2348, line: 445, baseType: !2359, size: 8, offset: 408)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2347, file: !2348, line: 446, baseType: !2359, size: 8, offset: 416)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2347, file: !2348, line: 447, baseType: !2359, size: 8, offset: 424)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2347, file: !2348, line: 448, baseType: !2359, size: 8, offset: 432)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2347, file: !2348, line: 449, baseType: !2359, size: 8, offset: 440)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2347, file: !2348, line: 450, baseType: !2359, size: 8, offset: 448)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2347, file: !2348, line: 451, baseType: !2359, size: 8, offset: 456)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2347, file: !2348, line: 452, baseType: !2359, size: 8, offset: 464)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2347, file: !2348, line: 453, baseType: !2359, size: 8, offset: 472)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2347, file: !2348, line: 454, baseType: !2359, size: 8, offset: 480)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2347, file: !2348, line: 455, baseType: !2359, size: 8, offset: 488)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2347, file: !2348, line: 456, baseType: !2359, size: 8, offset: 496)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2347, file: !2348, line: 457, baseType: !2359, size: 8, offset: 504)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2347, file: !2348, line: 458, baseType: !2359, size: 8, offset: 512)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2347, file: !2348, line: 459, baseType: !2359, size: 8, offset: 520)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2347, file: !2348, line: 460, baseType: !2359, size: 8, offset: 528)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2347, file: !2348, line: 461, baseType: !2359, size: 8, offset: 536)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2347, file: !2348, line: 462, baseType: !2359, size: 8, offset: 544)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2347, file: !2348, line: 463, baseType: !2359, size: 8, offset: 552)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2347, file: !2348, line: 464, baseType: !2359, size: 8, offset: 560)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2347, file: !2348, line: 465, baseType: !2359, size: 8, offset: 568)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2347, file: !2348, line: 466, baseType: !2359, size: 8, offset: 576)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2347, file: !2348, line: 467, baseType: !2359, size: 8, offset: 584)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2347, file: !2348, line: 468, baseType: !2359, size: 8, offset: 592)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2347, file: !2348, line: 469, baseType: !2359, size: 8, offset: 600)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2347, file: !2348, line: 470, baseType: !2359, size: 8, offset: 608)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2347, file: !2348, line: 471, baseType: !2359, size: 8, offset: 616)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2347, file: !2348, line: 472, baseType: !2359, size: 8, offset: 624)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2347, file: !2348, line: 473, baseType: !2359, size: 8, offset: 632)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2347, file: !2348, line: 474, baseType: !2359, size: 8, offset: 640)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2347, file: !2348, line: 475, baseType: !2359, size: 8, offset: 648)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2347, file: !2348, line: 476, baseType: !2359, size: 8, offset: 656)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2347, file: !2348, line: 477, baseType: !2359, size: 8, offset: 664)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2347, file: !2348, line: 478, baseType: !2359, size: 8, offset: 672)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2347, file: !2348, line: 479, baseType: !2359, size: 8, offset: 680)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2347, file: !2348, line: 480, baseType: !2359, size: 8, offset: 688)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2347, file: !2348, line: 481, baseType: !2359, size: 8, offset: 696)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2347, file: !2348, line: 482, baseType: !2359, size: 8, offset: 704)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2347, file: !2348, line: 483, baseType: !2359, size: 8, offset: 712)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2347, file: !2348, line: 484, baseType: !2359, size: 8, offset: 720)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2347, file: !2348, line: 485, baseType: !2359, size: 8, offset: 728)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2347, file: !2348, line: 486, baseType: !2359, size: 8, offset: 736)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2347, file: !2348, line: 487, baseType: !2359, size: 8, offset: 744)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2347, file: !2348, line: 488, baseType: !2359, size: 8, offset: 752)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2347, file: !2348, line: 489, baseType: !2359, size: 8, offset: 760)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2347, file: !2348, line: 490, baseType: !2359, size: 8, offset: 768)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2347, file: !2348, line: 491, baseType: !2359, size: 8, offset: 776)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2347, file: !2348, line: 492, baseType: !2359, size: 8, offset: 784)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2347, file: !2348, line: 493, baseType: !2359, size: 8, offset: 792)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2347, file: !2348, line: 494, baseType: !2359, size: 8, offset: 800)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2347, file: !2348, line: 495, baseType: !2359, size: 8, offset: 808)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2347, file: !2348, line: 496, baseType: !2359, size: 8, offset: 816)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2347, file: !2348, line: 497, baseType: !2359, size: 8, offset: 824)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2347, file: !2348, line: 498, baseType: !2359, size: 8, offset: 832)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2347, file: !2348, line: 499, baseType: !2359, size: 8, offset: 840)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2347, file: !2348, line: 500, baseType: !2359, size: 8, offset: 848)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2347, file: !2348, line: 501, baseType: !2359, size: 8, offset: 856)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2347, file: !2348, line: 502, baseType: !2359, size: 8, offset: 864)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2347, file: !2348, line: 503, baseType: !2359, size: 8, offset: 872)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2347, file: !2348, line: 504, baseType: !2359, size: 8, offset: 880)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2347, file: !2348, line: 505, baseType: !2359, size: 8, offset: 888)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2347, file: !2348, line: 506, baseType: !2359, size: 8, offset: 896)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2347, file: !2348, line: 507, baseType: !2359, size: 8, offset: 904)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2347, file: !2348, line: 508, baseType: !2359, size: 8, offset: 912)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2347, file: !2348, line: 509, baseType: !2359, size: 8, offset: 920)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2347, file: !2348, line: 510, baseType: !2359, size: 8, offset: 928)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2347, file: !2348, line: 511, baseType: !2359, size: 8, offset: 936)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2347, file: !2348, line: 512, baseType: !2359, size: 8, offset: 944)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2347, file: !2348, line: 513, baseType: !2359, size: 8, offset: 952)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2347, file: !2348, line: 514, baseType: !2359, size: 8, offset: 960)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2347, file: !2348, line: 515, baseType: !2359, size: 8, offset: 968)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2347, file: !2348, line: 516, baseType: !2359, size: 8, offset: 976)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2347, file: !2348, line: 517, baseType: !2359, size: 8, offset: 984)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2347, file: !2348, line: 518, baseType: !2359, size: 8, offset: 992)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2347, file: !2348, line: 519, baseType: !2359, size: 8, offset: 1000)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2347, file: !2348, line: 520, baseType: !2359, size: 8, offset: 1008)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2347, file: !2348, line: 521, baseType: !2359, size: 8, offset: 1016)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2347, file: !2348, line: 522, baseType: !2359, size: 8, offset: 1024)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2347, file: !2348, line: 523, baseType: !2359, size: 8, offset: 1032)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2347, file: !2348, line: 524, baseType: !2359, size: 8, offset: 1040)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2347, file: !2348, line: 525, baseType: !2359, size: 8, offset: 1048)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2347, file: !2348, line: 526, baseType: !2359, size: 8, offset: 1056)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2347, file: !2348, line: 527, baseType: !2359, size: 8, offset: 1064)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2347, file: !2348, line: 528, baseType: !2359, size: 8, offset: 1072)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2347, file: !2348, line: 529, baseType: !2359, size: 8, offset: 1080)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2347, file: !2348, line: 530, baseType: !2359, size: 8, offset: 1088)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2347, file: !2348, line: 531, baseType: !2359, size: 8, offset: 1096)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2347, file: !2348, line: 532, baseType: !2359, size: 8, offset: 1104)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2347, file: !2348, line: 533, baseType: !2359, size: 8, offset: 1112)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2347, file: !2348, line: 534, baseType: !2359, size: 8, offset: 1120)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2347, file: !2348, line: 535, baseType: !2359, size: 8, offset: 1128)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2347, file: !2348, line: 536, baseType: !2359, size: 8, offset: 1136)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2347, file: !2348, line: 537, baseType: !2359, size: 8, offset: 1144)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2347, file: !2348, line: 538, baseType: !2359, size: 8, offset: 1152)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2347, file: !2348, line: 539, baseType: !2359, size: 8, offset: 1160)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2347, file: !2348, line: 540, baseType: !2359, size: 8, offset: 1168)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2347, file: !2348, line: 541, baseType: !2359, size: 8, offset: 1176)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2347, file: !2348, line: 542, baseType: !2359, size: 8, offset: 1184)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2347, file: !2348, line: 543, baseType: !2359, size: 8, offset: 1192)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2347, file: !2348, line: 544, baseType: !2359, size: 8, offset: 1200)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2347, file: !2348, line: 545, baseType: !2359, size: 8, offset: 1208)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2347, file: !2348, line: 546, baseType: !2359, size: 8, offset: 1216)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2347, file: !2348, line: 547, baseType: !2359, size: 8, offset: 1224)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2347, file: !2348, line: 548, baseType: !2359, size: 8, offset: 1232)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2347, file: !2348, line: 549, baseType: !2359, size: 8, offset: 1240)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2347, file: !2348, line: 550, baseType: !2359, size: 8, offset: 1248)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2347, file: !2348, line: 551, baseType: !2359, size: 8, offset: 1256)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2347, file: !2348, line: 552, baseType: !2359, size: 8, offset: 1264)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2347, file: !2348, line: 553, baseType: !2359, size: 8, offset: 1272)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2347, file: !2348, line: 554, baseType: !2359, size: 8, offset: 1280)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2347, file: !2348, line: 555, baseType: !2359, size: 8, offset: 1288)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2347, file: !2348, line: 556, baseType: !2359, size: 8, offset: 1296)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2347, file: !2348, line: 557, baseType: !2359, size: 8, offset: 1304)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2347, file: !2348, line: 558, baseType: !2359, size: 8, offset: 1312)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2347, file: !2348, line: 559, baseType: !2359, size: 8, offset: 1320)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2347, file: !2348, line: 560, baseType: !2359, size: 8, offset: 1328)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2347, file: !2348, line: 561, baseType: !2359, size: 8, offset: 1336)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2347, file: !2348, line: 562, baseType: !2359, size: 8, offset: 1344)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2347, file: !2348, line: 563, baseType: !2359, size: 8, offset: 1352)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2347, file: !2348, line: 564, baseType: !2359, size: 8, offset: 1360)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2347, file: !2348, line: 565, baseType: !2359, size: 8, offset: 1368)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2347, file: !2348, line: 566, baseType: !2359, size: 8, offset: 1376)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2347, file: !2348, line: 567, baseType: !2359, size: 8, offset: 1384)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2347, file: !2348, line: 568, baseType: !2359, size: 8, offset: 1392)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2347, file: !2348, line: 569, baseType: !2359, size: 8, offset: 1400)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2347, file: !2348, line: 570, baseType: !2359, size: 8, offset: 1408)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2347, file: !2348, line: 571, baseType: !2359, size: 8, offset: 1416)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2347, file: !2348, line: 572, baseType: !2359, size: 8, offset: 1424)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2347, file: !2348, line: 573, baseType: !2359, size: 8, offset: 1432)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2347, file: !2348, line: 574, baseType: !2359, size: 8, offset: 1440)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1624, file: !164, line: 3405, baseType: !2515, size: 384)
!2515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !2516)
!2516 = !{!2517, !2518}
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2515, file: !164, line: 3353, baseType: !1660, size: 192)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2515, file: !164, line: 3356, baseType: !2519, size: 192, offset: 192)
!2519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2348, line: 578, size: 192, elements: !2520)
!2520 = !{!2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531}
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2519, file: !2348, line: 580, baseType: !1524, size: 32)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2519, file: !2348, line: 581, baseType: !1524, size: 32, offset: 32)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2519, file: !2348, line: 582, baseType: !1524, size: 32, offset: 64)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2519, file: !2348, line: 583, baseType: !1524, size: 32, offset: 96)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2519, file: !2348, line: 584, baseType: !1735, size: 8, offset: 128)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2519, file: !2348, line: 585, baseType: !1735, size: 8, offset: 136)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2519, file: !2348, line: 586, baseType: !1735, size: 8, offset: 144)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2519, file: !2348, line: 587, baseType: !1735, size: 8, offset: 152)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2519, file: !2348, line: 588, baseType: !1735, size: 8, offset: 160)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2519, file: !2348, line: 589, baseType: !1735, size: 8, offset: 168)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2519, file: !2348, line: 590, baseType: !1735, size: 8, offset: 176)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1521, file: !1503, line: 178, baseType: !1459, size: 64)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1521, file: !1503, line: 179, baseType: !2534, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2535, size: 64)
!2535 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1503, line: 150, baseType: !2536)
!2536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1503, line: 142, size: 320, elements: !2537)
!2537 = !{!2538, !2539, !2540, !2541, !2542, !2543}
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2536, file: !1503, line: 144, baseType: !1622, size: 64)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2536, file: !1503, line: 145, baseType: !1500, size: 64, offset: 64)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2536, file: !1503, line: 146, baseType: !1500, size: 64, offset: 128)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2536, file: !1503, line: 147, baseType: !2207, size: 32, offset: 192)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2536, file: !1503, line: 148, baseType: !7, size: 32, offset: 224)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2536, file: !1503, line: 149, baseType: !1735, size: 8, offset: 256)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1521, file: !1503, line: 180, baseType: !2545, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2546, size: 64)
!2546 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1503, line: 162, baseType: !2547)
!2547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1503, line: 159, size: 128, elements: !2548)
!2548 = !{!2549, !2550}
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2547, file: !1503, line: 160, baseType: !1622, size: 64)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2547, file: !1503, line: 161, baseType: !1591, size: 64, offset: 64)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1521, file: !1503, line: 181, baseType: !2552, size: 64)
!2552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!2553 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1503, line: 181, flags: DIFlagFwdDecl)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1516, file: !1503, line: 317, baseType: !2555, size: 64)
!2555 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1591, size: 64, elements: !1539)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1516, file: !1503, line: 318, baseType: !2557, size: 320)
!2557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1503, line: 188, size: 320, elements: !2558)
!2558 = !{!2559, !2561, !2584}
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2557, file: !1503, line: 190, baseType: !2560, size: 192)
!2560 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1520, size: 192, elements: !1693)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2557, file: !1503, line: 193, baseType: !2562, size: 64, offset: 192)
!2562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2563, size: 64)
!2563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1503, line: 206, size: 320, elements: !2564)
!2564 = !{!2565, !2569, !2570, !2571, !2583}
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2563, file: !1503, line: 208, baseType: !2566, size: 64)
!2566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2567, size: 64)
!2567 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1435, line: 62, baseType: !2568)
!2568 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1435, line: 61, flags: DIFlagFwdDecl)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2563, file: !1503, line: 211, baseType: !7, size: 32, offset: 64)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2563, file: !1503, line: 214, baseType: !1591, size: 64, offset: 128)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2563, file: !1503, line: 224, baseType: !2572, size: 64, offset: 192)
!2572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2573, size: 64)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1503, line: 202, baseType: !2574)
!2574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1503, line: 202, size: 128, elements: !2575)
!2575 = !{!2576}
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2574, file: !1503, line: 202, baseType: !2577, size: 128)
!2577 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1503, line: 200, baseType: !2578)
!2578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1503, line: 200, size: 128, elements: !2579)
!2579 = !{!2580, !2581, !2582}
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2578, file: !1503, line: 200, baseType: !7, size: 32)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2578, file: !1503, line: 200, baseType: !7, size: 32, offset: 32)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2578, file: !1503, line: 200, baseType: !1538, size: 64, offset: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2563, file: !1503, line: 234, baseType: !2572, size: 64, offset: 256)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2557, file: !1503, line: 197, baseType: !1591, size: 64, offset: 256)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1516, file: !1503, line: 319, baseType: !1682, size: 256)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1516, file: !1503, line: 320, baseType: !1701, size: 192)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1477, file: !135, line: 134, baseType: !1612, size: 64, offset: 192)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1477, file: !135, line: 137, baseType: !1622, size: 64, offset: 256)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1477, file: !135, line: 138, baseType: !1453, size: 32, offset: 320)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1477, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1477, file: !135, line: 144, baseType: !1524, size: 32, offset: 384)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1477, file: !135, line: 145, baseType: !1524, size: 32, offset: 416)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1477, file: !135, line: 146, baseType: !2594, size: 64, offset: 448)
!2594 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !1591)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1460, file: !135, line: 220, baseType: !1463, size: 64, offset: 64)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1460, file: !135, line: 223, baseType: !1612, size: 64, offset: 128)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1460, file: !135, line: 226, baseType: !2060, size: 64, offset: 192)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1460, file: !135, line: 229, baseType: !2599, size: 128, offset: 256)
!2599 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2600, size: 128, elements: !1575)
!2600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2601, size: 64)
!2601 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1460, file: !135, line: 232, baseType: !1459, size: 64, offset: 384)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1460, file: !135, line: 233, baseType: !1459, size: 64, offset: 448)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1460, file: !135, line: 238, baseType: !2605, size: 64, offset: 512)
!2605 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !2606)
!2606 = !{!2607, !2613}
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2605, file: !135, line: 236, baseType: !2608, size: 64)
!2608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2609, size: 64)
!2609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !2610)
!2610 = !{!2611, !2612}
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2609, file: !135, line: 275, baseType: !1485, size: 64)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2609, file: !135, line: 278, baseType: !1485, size: 64, offset: 64)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2605, file: !135, line: 237, baseType: !2614, size: 64)
!2614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2615, size: 64)
!2615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !2616)
!2616 = !{!2617, !2618, !2619, !2620, !2621}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2615, file: !135, line: 261, baseType: !1500, size: 64)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2615, file: !135, line: 262, baseType: !1500, size: 64, offset: 64)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2615, file: !135, line: 266, baseType: !1500, size: 64, offset: 128)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2615, file: !135, line: 267, baseType: !1500, size: 64, offset: 192)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2615, file: !135, line: 270, baseType: !1524, size: 32, offset: 256)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1460, file: !135, line: 241, baseType: !2594, size: 64, offset: 576)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1460, file: !135, line: 244, baseType: !1524, size: 32, offset: 640)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1460, file: !135, line: 247, baseType: !1524, size: 32, offset: 672)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1460, file: !135, line: 250, baseType: !1524, size: 32, offset: 704)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1460, file: !135, line: 253, baseType: !1524, size: 32, offset: 736)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1460, file: !135, line: 256, baseType: !1524, size: 32, offset: 768)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1440, file: !581, line: 327, baseType: !1622, size: 64, offset: 192)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1437, file: !581, line: 739, baseType: !2630, size: 448)
!2630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !581, line: 350, size: 448, elements: !2631)
!2631 = !{!2632, !2638}
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2630, file: !581, line: 353, baseType: !2633, size: 384)
!2633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !581, line: 333, size: 384, elements: !2634)
!2634 = !{!2635, !2636, !2637}
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2633, file: !581, line: 336, baseType: !1440, size: 256)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2633, file: !581, line: 343, baseType: !2029, size: 64, offset: 256)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2633, file: !581, line: 344, baseType: !2036, size: 64, offset: 320)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2630, file: !581, line: 359, baseType: !1993, size: 64, offset: 384)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1437, file: !581, line: 740, baseType: !2640, size: 512)
!2640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !581, line: 365, size: 512, elements: !2641)
!2641 = !{!2642, !2643, !2644}
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2640, file: !581, line: 368, baseType: !2633, size: 384)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2640, file: !581, line: 373, baseType: !1622, size: 64, offset: 384)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2640, file: !581, line: 374, baseType: !1622, size: 64, offset: 448)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1437, file: !581, line: 741, baseType: !2646, size: 576)
!2646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !581, line: 380, size: 576, elements: !2647)
!2647 = !{!2648, !2649}
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2646, file: !581, line: 383, baseType: !2640, size: 512)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2646, file: !581, line: 389, baseType: !1993, size: 64, offset: 512)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1437, file: !581, line: 742, baseType: !2651, size: 320)
!2651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !581, line: 395, size: 320, elements: !2652)
!2652 = !{!2653, !2654}
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2651, file: !581, line: 397, baseType: !1440, size: 256)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2651, file: !581, line: 400, baseType: !1485, size: 64, offset: 256)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1437, file: !581, line: 743, baseType: !2656, size: 448)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !581, line: 406, size: 448, elements: !2657)
!2657 = !{!2658, !2659, !2660, !2661}
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2656, file: !581, line: 408, baseType: !1440, size: 256)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2656, file: !581, line: 412, baseType: !1622, size: 64, offset: 256)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2656, file: !581, line: 420, baseType: !1622, size: 64, offset: 320)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2656, file: !581, line: 423, baseType: !1485, size: 64, offset: 384)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1437, file: !581, line: 744, baseType: !2663, size: 384)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !581, line: 429, size: 384, elements: !2664)
!2664 = !{!2665, !2666, !2667}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2663, file: !581, line: 431, baseType: !1440, size: 256)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2663, file: !581, line: 434, baseType: !1622, size: 64, offset: 256)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2663, file: !581, line: 437, baseType: !1485, size: 64, offset: 320)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1437, file: !581, line: 745, baseType: !2669, size: 384)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !581, line: 443, size: 384, elements: !2670)
!2670 = !{!2671, !2672, !2673}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2669, file: !581, line: 445, baseType: !1440, size: 256)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2669, file: !581, line: 449, baseType: !1622, size: 64, offset: 256)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2669, file: !581, line: 453, baseType: !1485, size: 64, offset: 320)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1437, file: !581, line: 746, baseType: !2675, size: 320)
!2675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !581, line: 459, size: 320, elements: !2676)
!2676 = !{!2677, !2678}
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2675, file: !581, line: 461, baseType: !1440, size: 256)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2675, file: !581, line: 464, baseType: !1622, size: 64, offset: 256)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1437, file: !581, line: 747, baseType: !2680, size: 768)
!2680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !581, line: 469, size: 768, elements: !2681)
!2681 = !{!2682, !2683, !2684, !2685, !2686}
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2680, file: !581, line: 471, baseType: !1440, size: 256)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2680, file: !581, line: 474, baseType: !7, size: 32, offset: 256)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2680, file: !581, line: 475, baseType: !7, size: 32, offset: 288)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2680, file: !581, line: 478, baseType: !1622, size: 64, offset: 320)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2680, file: !581, line: 481, baseType: !2687, size: 384, offset: 384)
!2687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2688, size: 384, elements: !1539)
!2688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !164, line: 1917, size: 384, elements: !2689)
!2689 = !{!2690, !2691, !2692}
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2688, file: !164, line: 1920, baseType: !1425, size: 256)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2688, file: !164, line: 1921, baseType: !1622, size: 64, offset: 256)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2688, file: !164, line: 1922, baseType: !1453, size: 32, offset: 320)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1437, file: !581, line: 748, baseType: !2694, size: 320)
!2694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !581, line: 487, size: 320, elements: !2695)
!2695 = !{!2696, !2697}
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2694, file: !581, line: 490, baseType: !1440, size: 256)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2694, file: !581, line: 494, baseType: !1524, size: 32, offset: 256)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1437, file: !581, line: 749, baseType: !2699, size: 384)
!2699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !581, line: 500, size: 384, elements: !2700)
!2700 = !{!2701, !2702, !2703}
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2699, file: !581, line: 502, baseType: !1440, size: 256)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2699, file: !581, line: 506, baseType: !1485, size: 64, offset: 256)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2699, file: !581, line: 510, baseType: !1485, size: 64, offset: 320)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1437, file: !581, line: 750, baseType: !2705, size: 320)
!2705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !581, line: 529, size: 320, elements: !2706)
!2706 = !{!2707, !2708}
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2705, file: !581, line: 531, baseType: !1440, size: 256)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2705, file: !581, line: 540, baseType: !1485, size: 64, offset: 256)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1437, file: !581, line: 751, baseType: !2710, size: 704)
!2710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !581, line: 546, size: 704, elements: !2711)
!2711 = !{!2712, !2713, !2714, !2715, !2716, !2717, !2718}
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2710, file: !581, line: 549, baseType: !2640, size: 512)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2710, file: !581, line: 553, baseType: !1527, size: 64, offset: 512)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2710, file: !581, line: 557, baseType: !1735, size: 8, offset: 576)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2710, file: !581, line: 558, baseType: !1735, size: 8, offset: 584)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2710, file: !581, line: 559, baseType: !1735, size: 8, offset: 592)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2710, file: !581, line: 560, baseType: !1735, size: 8, offset: 600)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2710, file: !581, line: 566, baseType: !1993, size: 64, offset: 640)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1437, file: !581, line: 752, baseType: !2720, size: 384)
!2720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !581, line: 571, size: 384, elements: !2721)
!2721 = !{!2722, !2723}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2720, file: !581, line: 573, baseType: !2651, size: 320)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2720, file: !581, line: 577, baseType: !1622, size: 64, offset: 320)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1437, file: !581, line: 753, baseType: !2725, size: 576)
!2725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !581, line: 600, size: 576, elements: !2726)
!2726 = !{!2727, !2728, !2729, !2730, !2739}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2725, file: !581, line: 602, baseType: !2651, size: 320)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2725, file: !581, line: 605, baseType: !1622, size: 64, offset: 320)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2725, file: !581, line: 609, baseType: !1943, size: 64, offset: 384)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2725, file: !581, line: 612, baseType: !2731, size: 64, offset: 448)
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2732, size: 64)
!2732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !581, line: 581, size: 320, elements: !2733)
!2733 = !{!2734, !2735, !2736, !2737, !2738}
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2732, file: !581, line: 583, baseType: !196, size: 32)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2732, file: !581, line: 586, baseType: !1622, size: 64, offset: 64)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2732, file: !581, line: 589, baseType: !1622, size: 64, offset: 128)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2732, file: !581, line: 592, baseType: !1622, size: 64, offset: 192)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2732, file: !581, line: 595, baseType: !1622, size: 64, offset: 256)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2725, file: !581, line: 616, baseType: !1485, size: 64, offset: 512)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1437, file: !581, line: 754, baseType: !2741, size: 512)
!2741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !581, line: 622, size: 512, elements: !2742)
!2742 = !{!2743, !2744, !2745, !2746}
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2741, file: !581, line: 624, baseType: !2651, size: 320)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2741, file: !581, line: 628, baseType: !1622, size: 64, offset: 320)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2741, file: !581, line: 632, baseType: !1622, size: 64, offset: 384)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2741, file: !581, line: 636, baseType: !1622, size: 64, offset: 448)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1437, file: !581, line: 755, baseType: !2748, size: 704)
!2748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !581, line: 642, size: 704, elements: !2749)
!2749 = !{!2750, !2751, !2752, !2753}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2748, file: !581, line: 644, baseType: !2741, size: 512)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2748, file: !581, line: 648, baseType: !1622, size: 64, offset: 512)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2748, file: !581, line: 652, baseType: !1622, size: 64, offset: 576)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2748, file: !581, line: 653, baseType: !1622, size: 64, offset: 640)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1437, file: !581, line: 756, baseType: !2755, size: 448)
!2755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !581, line: 663, size: 448, elements: !2756)
!2756 = !{!2757, !2758, !2759}
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2755, file: !581, line: 665, baseType: !2651, size: 320)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2755, file: !581, line: 668, baseType: !1622, size: 64, offset: 320)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2755, file: !581, line: 673, baseType: !1622, size: 64, offset: 384)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1437, file: !581, line: 757, baseType: !2761, size: 384)
!2761 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !581, line: 694, size: 384, elements: !2762)
!2762 = !{!2763, !2764}
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2761, file: !581, line: 696, baseType: !2651, size: 320)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2761, file: !581, line: 699, baseType: !1622, size: 64, offset: 320)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1437, file: !581, line: 758, baseType: !2766, size: 384)
!2766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !581, line: 681, size: 384, elements: !2767)
!2767 = !{!2768, !2769, !2770}
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2766, file: !581, line: 683, baseType: !1440, size: 256)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2766, file: !581, line: 686, baseType: !1622, size: 64, offset: 256)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2766, file: !581, line: 689, baseType: !1622, size: 64, offset: 320)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1437, file: !581, line: 759, baseType: !2772, size: 384)
!2772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !581, line: 707, size: 384, elements: !2773)
!2773 = !{!2774, !2775, !2776}
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2772, file: !581, line: 709, baseType: !1440, size: 256)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2772, file: !581, line: 712, baseType: !1622, size: 64, offset: 256)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2772, file: !581, line: 712, baseType: !1622, size: 64, offset: 320)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1437, file: !581, line: 760, baseType: !2778, size: 320)
!2778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !581, line: 718, size: 320, elements: !2779)
!2779 = !{!2780, !2781}
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2778, file: !581, line: 720, baseType: !1440, size: 256)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2778, file: !581, line: 723, baseType: !1622, size: 64, offset: 256)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1431, file: !164, line: 1891, baseType: !1622, size: 64)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1425, file: !164, line: 1892, baseType: !2034, size: 64, offset: 192)
!2784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2006, size: 64)
!2785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2786, size: 64)
!2786 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !581, line: 34, baseType: !2787)
!2787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !581, line: 34, size: 128, elements: !2788)
!2788 = !{!2789}
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2787, file: !581, line: 34, baseType: !1974, size: 128)
!2790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2791, size: 64)
!2791 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1437)
!2792 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2793, size: 64)
!2793 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2794, line: 32, baseType: !2795)
!2794 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2794, line: 32, size: 96, elements: !2796)
!2796 = !{!2797}
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2795, file: !2794, line: 32, baseType: !2798, size: 96)
!2798 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2794, line: 31, baseType: !2799)
!2799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2794, line: 31, size: 96, elements: !2800)
!2800 = !{!2801, !2802, !2803}
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2799, file: !2794, line: 31, baseType: !7, size: 32)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2799, file: !2794, line: 31, baseType: !7, size: 32, offset: 32)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2799, file: !2794, line: 31, baseType: !2804, size: 32, offset: 64)
!2804 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1524, size: 32, elements: !1539)
!2805 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!2806 = !{!0, !2807, !2835, !2837, !2839, !2852, !2854, !2856, !2858, !2860, !2862, !2864, !2866, !2868, !2870, !2872}
!2807 = !DIGlobalVariableExpression(var: !2808, expr: !DIExpression())
!2808 = distinct !DIGlobalVariable(name: "pass_dce_loop", scope: !2, file: !3, line: 1438, type: !2809, isLocal: false, isDefinition: true)
!2809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !391, line: 156, size: 640, elements: !2810)
!2810 = !{!2811}
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2809, file: !391, line: 158, baseType: !2812, size: 640)
!2812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !391, line: 114, size: 640, elements: !2813)
!2813 = !{!2814, !2815, !2816, !2820, !2824, !2826, !2827, !2828, !2830, !2831, !2832, !2833, !2834}
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2812, file: !391, line: 117, baseType: !390, size: 32)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2812, file: !391, line: 121, baseType: !1527, size: 64, offset: 64)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2812, file: !391, line: 125, baseType: !2817, size: 64, offset: 128)
!2817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2818, size: 64)
!2818 = !DISubroutineType(types: !2819)
!2819 = !{!1735}
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2812, file: !391, line: 130, baseType: !2821, size: 64, offset: 192)
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2822, size: 64)
!2822 = !DISubroutineType(types: !2823)
!2823 = !{!7}
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2812, file: !391, line: 133, baseType: !2825, size: 64, offset: 256)
!2825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2812, size: 64)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2812, file: !391, line: 136, baseType: !2825, size: 64, offset: 320)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2812, file: !391, line: 139, baseType: !1524, size: 32, offset: 384)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2812, file: !391, line: 143, baseType: !2829, size: 32, offset: 416)
!2829 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !398, line: 80, baseType: !397)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2812, file: !391, line: 146, baseType: !7, size: 32, offset: 448)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2812, file: !391, line: 147, baseType: !7, size: 32, offset: 480)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2812, file: !391, line: 148, baseType: !7, size: 32, offset: 512)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2812, file: !391, line: 151, baseType: !7, size: 32, offset: 544)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2812, file: !391, line: 152, baseType: !7, size: 32, offset: 576)
!2835 = !DIGlobalVariableExpression(var: !2836, expr: !DIExpression())
!2836 = distinct !DIGlobalVariable(name: "pass_cd_dce", scope: !2, file: !3, line: 1457, type: !2809, isLocal: false, isDefinition: true)
!2837 = !DIGlobalVariableExpression(var: !2838, expr: !DIExpression())
!2838 = distinct !DIGlobalVariable(name: "control_dependence_map", scope: !2, file: !3, line: 100, type: !2784, isLocal: true, isDefinition: true)
!2839 = !DIGlobalVariableExpression(var: !2840, expr: !DIExpression())
!2840 = distinct !DIGlobalVariable(name: "last_stmt_necessary", scope: !2, file: !3, line: 88, type: !2841, isLocal: true, isDefinition: true)
!2841 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2842, line: 45, baseType: !2843)
!2842 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2844, size: 64)
!2844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2842, line: 39, size: 192, elements: !2845)
!2845 = !{!2846, !2848, !2849, !2850}
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2844, file: !2842, line: 41, baseType: !2847, size: 64)
!2847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1735, size: 64)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2844, file: !2842, line: 42, baseType: !7, size: 32, offset: 64)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2844, file: !2842, line: 43, baseType: !7, size: 32, offset: 96)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2844, file: !2842, line: 44, baseType: !2851, size: 64, offset: 128)
!2851 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1574, size: 64, elements: !1539)
!2852 = !DIGlobalVariableExpression(var: !2853, expr: !DIExpression())
!2853 = distinct !DIGlobalVariable(name: "bb_contains_live_stmts", scope: !2, file: !3, line: 91, type: !2841, isLocal: true, isDefinition: true)
!2854 = !DIGlobalVariableExpression(var: !2855, expr: !DIExpression())
!2855 = distinct !DIGlobalVariable(name: "processed", scope: !2, file: !3, line: 84, type: !2841, isLocal: true, isDefinition: true)
!2856 = !DIGlobalVariableExpression(var: !2857, expr: !DIExpression())
!2857 = distinct !DIGlobalVariable(name: "worklist", scope: !2, file: !3, line: 80, type: !2785, isLocal: true, isDefinition: true)
!2858 = !DIGlobalVariableExpression(var: !2859, expr: !DIExpression())
!2859 = distinct !DIGlobalVariable(name: "visited_control_parents", scope: !2, file: !3, line: 104, type: !2841, isLocal: true, isDefinition: true)
!2860 = !DIGlobalVariableExpression(var: !2861, expr: !DIExpression())
!2861 = distinct !DIGlobalVariable(name: "longest_chain", scope: !2, file: !3, line: 490, type: !7, isLocal: true, isDefinition: true)
!2862 = !DIGlobalVariableExpression(var: !2863, expr: !DIExpression())
!2863 = distinct !DIGlobalVariable(name: "total_chain", scope: !2, file: !3, line: 491, type: !7, isLocal: true, isDefinition: true)
!2864 = !DIGlobalVariableExpression(var: !2865, expr: !DIExpression())
!2865 = distinct !DIGlobalVariable(name: "nr_walks", scope: !2, file: !3, line: 492, type: !7, isLocal: true, isDefinition: true)
!2866 = !DIGlobalVariableExpression(var: !2867, expr: !DIExpression())
!2867 = distinct !DIGlobalVariable(name: "chain_ovfl", scope: !2, file: !3, line: 493, type: !1735, isLocal: true, isDefinition: true)
!2868 = !DIGlobalVariableExpression(var: !2869, expr: !DIExpression())
!2869 = distinct !DIGlobalVariable(name: "visited", scope: !2, file: !3, line: 489, type: !2006, isLocal: true, isDefinition: true)
!2870 = !DIGlobalVariableExpression(var: !2871, expr: !DIExpression())
!2871 = distinct !DIGlobalVariable(name: "cfg_altered", scope: !2, file: !3, line: 111, type: !1735, isLocal: true, isDefinition: true)
!2872 = !DIGlobalVariableExpression(var: !2873, expr: !DIExpression())
!2873 = distinct !DIGlobalVariable(name: "stats", scope: !2, file: !3, line: 76, type: !2874, isLocal: true, isDefinition: true)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stmt_stats", file: !3, line: 70, size: 128, elements: !2875)
!2875 = !{!2876, !2877, !2878, !2879}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !2874, file: !3, line: 72, baseType: !1524, size: 32)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "total_phis", scope: !2874, file: !3, line: 73, baseType: !1524, size: 32, offset: 32)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "removed", scope: !2874, file: !3, line: 74, baseType: !1524, size: 32, offset: 64)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "removed_phis", scope: !2874, file: !3, line: 75, baseType: !1524, size: 32, offset: 96)
!2880 = !{i32 7, !"Dwarf Version", i32 4}
!2881 = !{i32 2, !"Debug Info Version", i32 3}
!2882 = !{i32 1, !"wchar_size", i32 4}
!2883 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2884 = distinct !DISubprogram(name: "mark_virtual_phi_result_for_renaming", scope: !3, file: !3, line: 831, type: !2885, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!2885 = !DISubroutineType(types: !2886)
!2886 = !{null, !1434}
!2887 = !{}
!2888 = !DILocalVariable(name: "phi", arg: 1, scope: !2884, file: !3, line: 831, type: !1434)
!2889 = !DILocation(line: 831, column: 46, scope: !2884)
!2890 = !DILocalVariable(name: "used", scope: !2884, file: !3, line: 833, type: !1735)
!2891 = !DILocation(line: 833, column: 8, scope: !2884)
!2892 = !DILocalVariable(name: "iter", scope: !2884, file: !3, line: 834, type: !2893)
!2893 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1825, line: 249, baseType: !2894)
!2894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1825, line: 238, size: 448, elements: !2895)
!2895 = !{!2896, !2897, !2898, !2899}
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2894, file: !1825, line: 241, baseType: !1423, size: 64)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !2894, file: !1825, line: 243, baseType: !1423, size: 64, offset: 64)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !2894, file: !1825, line: 245, baseType: !1424, size: 256, offset: 128)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !2894, file: !1825, line: 248, baseType: !1423, size: 64, offset: 384)
!2900 = !DILocation(line: 834, column: 20, scope: !2884)
!2901 = !DILocalVariable(name: "use_p", scope: !2884, file: !3, line: 835, type: !1422)
!2902 = !DILocation(line: 835, column: 17, scope: !2884)
!2903 = !DILocalVariable(name: "stmt", scope: !2884, file: !3, line: 836, type: !1434)
!2904 = !DILocation(line: 836, column: 10, scope: !2884)
!2905 = !DILocalVariable(name: "result_ssa", scope: !2884, file: !3, line: 837, type: !1622)
!2906 = !DILocation(line: 837, column: 8, scope: !2884)
!2907 = !DILocalVariable(name: "result_var", scope: !2884, file: !3, line: 837, type: !1622)
!2908 = !DILocation(line: 837, column: 20, scope: !2884)
!2909 = !DILocation(line: 839, column: 7, scope: !2910)
!2910 = distinct !DILexicalBlock(scope: !2884, file: !3, line: 839, column: 7)
!2911 = !DILocation(line: 839, column: 17, scope: !2910)
!2912 = !DILocation(line: 839, column: 21, scope: !2910)
!2913 = !DILocation(line: 839, column: 32, scope: !2910)
!2914 = !DILocation(line: 839, column: 7, scope: !2884)
!2915 = !DILocation(line: 841, column: 16, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 840, column: 5)
!2917 = !DILocation(line: 841, column: 7, scope: !2916)
!2918 = !DILocation(line: 842, column: 26, scope: !2916)
!2919 = !DILocation(line: 842, column: 37, scope: !2916)
!2920 = !DILocation(line: 842, column: 7, scope: !2916)
!2921 = !DILocation(line: 843, column: 16, scope: !2916)
!2922 = !DILocation(line: 843, column: 7, scope: !2916)
!2923 = !DILocation(line: 844, column: 5, scope: !2916)
!2924 = !DILocation(line: 846, column: 35, scope: !2884)
!2925 = !DILocation(line: 846, column: 16, scope: !2884)
!2926 = !DILocation(line: 846, column: 14, scope: !2884)
!2927 = !DILocation(line: 847, column: 16, scope: !2884)
!2928 = !DILocation(line: 847, column: 14, scope: !2884)
!2929 = !DILocation(line: 848, column: 3, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2884, file: !3, line: 848, column: 3)
!2931 = !DILocation(line: 848, column: 3, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2930, file: !3, line: 848, column: 3)
!2933 = !DILocation(line: 850, column: 7, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2935, file: !3, line: 850, column: 7)
!2935 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 849, column: 5)
!2936 = !DILocation(line: 850, column: 7, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2934, file: !3, line: 850, column: 7)
!2938 = !DILocation(line: 851, column: 9, scope: !2937)
!2939 = distinct !{!2939, !2933, !2940}
!2940 = !DILocation(line: 851, column: 9, scope: !2934)
!2941 = !DILocation(line: 852, column: 20, scope: !2935)
!2942 = !DILocation(line: 852, column: 7, scope: !2935)
!2943 = !DILocation(line: 853, column: 12, scope: !2935)
!2944 = !DILocation(line: 854, column: 5, scope: !2935)
!2945 = distinct !{!2945, !2929, !2946}
!2946 = !DILocation(line: 854, column: 5, scope: !2930)
!2947 = !DILocation(line: 855, column: 7, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2884, file: !3, line: 855, column: 7)
!2949 = !DILocation(line: 855, column: 7, scope: !2884)
!2950 = !DILocation(line: 856, column: 28, scope: !2948)
!2951 = !DILocation(line: 856, column: 5, scope: !2948)
!2952 = !DILocation(line: 857, column: 1, scope: !2884)
!2953 = distinct !DISubprogram(name: "gimple_phi_result", scope: !581, file: !581, line: 3071, type: !2954, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!2954 = !DISubroutineType(types: !2955)
!2955 = !{!1622, !2956}
!2956 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1435, line: 60, baseType: !2790)
!2957 = !DILocalVariable(name: "gs", arg: 1, scope: !2953, file: !581, line: 3071, type: !2956)
!2958 = !DILocation(line: 3071, column: 33, scope: !2953)
!2959 = !DILocation(line: 3074, column: 10, scope: !2953)
!2960 = !DILocation(line: 3074, column: 14, scope: !2953)
!2961 = !DILocation(line: 3074, column: 25, scope: !2953)
!2962 = !DILocation(line: 3074, column: 3, scope: !2953)
!2963 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !2964, file: !2964, line: 1058, type: !2965, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!2964 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2965 = !DISubroutineType(types: !2966)
!2966 = !{!1434, !2967, !1622}
!2967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2968 = !DILocalVariable(name: "imm", arg: 1, scope: !2963, file: !2964, line: 1058, type: !2967)
!2969 = !DILocation(line: 1058, column: 39, scope: !2963)
!2970 = !DILocalVariable(name: "var", arg: 2, scope: !2963, file: !2964, line: 1058, type: !1622)
!2971 = !DILocation(line: 1058, column: 49, scope: !2963)
!2972 = !DILocation(line: 1060, column: 18, scope: !2963)
!2973 = !DILocation(line: 1060, column: 3, scope: !2963)
!2974 = !DILocation(line: 1060, column: 8, scope: !2963)
!2975 = !DILocation(line: 1060, column: 14, scope: !2963)
!2976 = !DILocation(line: 1061, column: 18, scope: !2963)
!2977 = !DILocation(line: 1061, column: 23, scope: !2963)
!2978 = !DILocation(line: 1061, column: 30, scope: !2963)
!2979 = !DILocation(line: 1061, column: 3, scope: !2963)
!2980 = !DILocation(line: 1061, column: 8, scope: !2963)
!2981 = !DILocation(line: 1061, column: 16, scope: !2963)
!2982 = !DILocation(line: 1062, column: 3, scope: !2963)
!2983 = !DILocation(line: 1062, column: 8, scope: !2963)
!2984 = !DILocation(line: 1062, column: 22, scope: !2963)
!2985 = !DILocation(line: 1067, column: 3, scope: !2963)
!2986 = !DILocation(line: 1067, column: 8, scope: !2963)
!2987 = !DILocation(line: 1067, column: 18, scope: !2963)
!2988 = !DILocation(line: 1067, column: 23, scope: !2963)
!2989 = !DILocation(line: 1068, column: 3, scope: !2963)
!2990 = !DILocation(line: 1068, column: 8, scope: !2963)
!2991 = !DILocation(line: 1068, column: 18, scope: !2963)
!2992 = !DILocation(line: 1068, column: 23, scope: !2963)
!2993 = !DILocation(line: 1069, column: 3, scope: !2963)
!2994 = !DILocation(line: 1069, column: 8, scope: !2963)
!2995 = !DILocation(line: 1069, column: 18, scope: !2963)
!2996 = !DILocation(line: 1069, column: 22, scope: !2963)
!2997 = !DILocation(line: 1069, column: 27, scope: !2963)
!2998 = !DILocation(line: 1070, column: 3, scope: !2963)
!2999 = !DILocation(line: 1070, column: 8, scope: !2963)
!3000 = !DILocation(line: 1070, column: 18, scope: !2963)
!3001 = !DILocation(line: 1070, column: 22, scope: !2963)
!3002 = !DILocation(line: 1072, column: 27, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !2963, file: !2964, line: 1072, column: 7)
!3004 = !DILocation(line: 1072, column: 7, scope: !3003)
!3005 = !DILocation(line: 1072, column: 7, scope: !2963)
!3006 = !DILocation(line: 1073, column: 5, scope: !3003)
!3007 = !DILocation(line: 1075, column: 25, scope: !2963)
!3008 = !DILocation(line: 1075, column: 30, scope: !2963)
!3009 = !DILocation(line: 1075, column: 39, scope: !2963)
!3010 = !DILocation(line: 1075, column: 3, scope: !2963)
!3011 = !DILocation(line: 1077, column: 10, scope: !2963)
!3012 = !DILocation(line: 1077, column: 3, scope: !2963)
!3013 = !DILocation(line: 1078, column: 1, scope: !2963)
!3014 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !2964, file: !2964, line: 969, type: !3015, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3015 = !DISubroutineType(types: !3016)
!3016 = !{!1735, !3017}
!3017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3018, size: 64)
!3018 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2893)
!3019 = !DILocalVariable(name: "imm", arg: 1, scope: !3014, file: !2964, line: 969, type: !3017)
!3020 = !DILocation(line: 969, column: 45, scope: !3014)
!3021 = !DILocation(line: 971, column: 11, scope: !3014)
!3022 = !DILocation(line: 971, column: 16, scope: !3014)
!3023 = !DILocation(line: 971, column: 27, scope: !3014)
!3024 = !DILocation(line: 971, column: 32, scope: !3014)
!3025 = !DILocation(line: 971, column: 24, scope: !3014)
!3026 = !DILocation(line: 971, column: 10, scope: !3014)
!3027 = !DILocation(line: 971, column: 3, scope: !3014)
!3028 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !2964, file: !2964, line: 1101, type: !3029, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3029 = !DISubroutineType(types: !3030)
!3030 = !{!1422, !2967}
!3031 = !DILocalVariable(name: "imm", arg: 1, scope: !3028, file: !2964, line: 1101, type: !2967)
!3032 = !DILocation(line: 1101, column: 42, scope: !3028)
!3033 = !DILocation(line: 1103, column: 24, scope: !3028)
!3034 = !DILocation(line: 1103, column: 29, scope: !3028)
!3035 = !DILocation(line: 1103, column: 38, scope: !3028)
!3036 = !DILocation(line: 1103, column: 3, scope: !3028)
!3037 = !DILocation(line: 1103, column: 8, scope: !3028)
!3038 = !DILocation(line: 1103, column: 22, scope: !3028)
!3039 = !DILocation(line: 1104, column: 10, scope: !3028)
!3040 = !DILocation(line: 1104, column: 15, scope: !3028)
!3041 = !DILocation(line: 1104, column: 3, scope: !3028)
!3042 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !2964, file: !2964, line: 1110, type: !3015, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3043 = !DILocalVariable(name: "imm", arg: 1, scope: !3042, file: !2964, line: 1110, type: !3017)
!3044 = !DILocation(line: 1110, column: 48, scope: !3042)
!3045 = !DILocation(line: 1112, column: 11, scope: !3042)
!3046 = !DILocation(line: 1112, column: 16, scope: !3042)
!3047 = !DILocation(line: 1112, column: 29, scope: !3042)
!3048 = !DILocation(line: 1112, column: 34, scope: !3042)
!3049 = !DILocation(line: 1112, column: 24, scope: !3042)
!3050 = !DILocation(line: 1112, column: 10, scope: !3042)
!3051 = !DILocation(line: 1112, column: 3, scope: !3042)
!3052 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !2964, file: !2964, line: 233, type: !3053, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3053 = !DISubroutineType(types: !3054)
!3054 = !{null, !1422, !1622}
!3055 = !DILocalVariable(name: "use", arg: 1, scope: !3052, file: !2964, line: 233, type: !1422)
!3056 = !DILocation(line: 233, column: 37, scope: !3052)
!3057 = !DILocalVariable(name: "val", arg: 2, scope: !3052, file: !2964, line: 233, type: !1622)
!3058 = !DILocation(line: 233, column: 47, scope: !3052)
!3059 = !DILocation(line: 235, column: 19, scope: !3052)
!3060 = !DILocation(line: 235, column: 3, scope: !3052)
!3061 = !DILocation(line: 236, column: 17, scope: !3052)
!3062 = !DILocation(line: 236, column: 5, scope: !3052)
!3063 = !DILocation(line: 236, column: 10, scope: !3052)
!3064 = !DILocation(line: 236, column: 15, scope: !3052)
!3065 = !DILocation(line: 237, column: 17, scope: !3052)
!3066 = !DILocation(line: 237, column: 22, scope: !3052)
!3067 = !DILocation(line: 237, column: 3, scope: !3052)
!3068 = !DILocation(line: 238, column: 1, scope: !3052)
!3069 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !2964, file: !2964, line: 1118, type: !3029, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3070 = !DILocalVariable(name: "imm", arg: 1, scope: !3069, file: !2964, line: 1118, type: !2967)
!3071 = !DILocation(line: 1118, column: 41, scope: !3069)
!3072 = !DILocation(line: 1120, column: 18, scope: !3069)
!3073 = !DILocation(line: 1120, column: 23, scope: !3069)
!3074 = !DILocation(line: 1120, column: 3, scope: !3069)
!3075 = !DILocation(line: 1120, column: 8, scope: !3069)
!3076 = !DILocation(line: 1120, column: 16, scope: !3069)
!3077 = !DILocation(line: 1121, column: 30, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !3069, file: !2964, line: 1121, column: 7)
!3079 = !DILocation(line: 1121, column: 7, scope: !3078)
!3080 = !DILocation(line: 1121, column: 7, scope: !3069)
!3081 = !DILocation(line: 1122, column: 5, scope: !3078)
!3082 = !DILocation(line: 1125, column: 28, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3078, file: !2964, line: 1124, column: 5)
!3084 = !DILocation(line: 1125, column: 33, scope: !3083)
!3085 = !DILocation(line: 1125, column: 42, scope: !3083)
!3086 = !DILocation(line: 1125, column: 7, scope: !3083)
!3087 = !DILocation(line: 1125, column: 12, scope: !3083)
!3088 = !DILocation(line: 1125, column: 26, scope: !3083)
!3089 = !DILocation(line: 1126, column: 14, scope: !3083)
!3090 = !DILocation(line: 1126, column: 19, scope: !3083)
!3091 = !DILocation(line: 1126, column: 7, scope: !3083)
!3092 = !DILocation(line: 1128, column: 1, scope: !3069)
!3093 = distinct !DISubprogram(name: "update_stmt", scope: !581, file: !581, line: 1456, type: !2885, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3094 = !DILocalVariable(name: "s", arg: 1, scope: !3093, file: !581, line: 1456, type: !1434)
!3095 = !DILocation(line: 1456, column: 21, scope: !3093)
!3096 = !DILocation(line: 1458, column: 23, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3093, file: !581, line: 1458, column: 7)
!3098 = !DILocation(line: 1458, column: 7, scope: !3097)
!3099 = !DILocation(line: 1458, column: 7, scope: !3093)
!3100 = !DILocation(line: 1460, column: 28, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !3097, file: !581, line: 1459, column: 5)
!3102 = !DILocation(line: 1460, column: 7, scope: !3101)
!3103 = !DILocation(line: 1461, column: 29, scope: !3101)
!3104 = !DILocation(line: 1461, column: 7, scope: !3101)
!3105 = !DILocation(line: 1462, column: 5, scope: !3101)
!3106 = !DILocation(line: 1463, column: 1, scope: !3093)
!3107 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !2964, file: !2964, line: 1083, type: !3108, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3108 = !DISubroutineType(types: !3109)
!3109 = !{!1434, !2967}
!3110 = !DILocalVariable(name: "imm", arg: 1, scope: !3107, file: !2964, line: 1083, type: !2967)
!3111 = !DILocation(line: 1083, column: 38, scope: !3107)
!3112 = !DILocation(line: 1085, column: 18, scope: !3107)
!3113 = !DILocation(line: 1085, column: 23, scope: !3107)
!3114 = !DILocation(line: 1085, column: 33, scope: !3107)
!3115 = !DILocation(line: 1085, column: 3, scope: !3107)
!3116 = !DILocation(line: 1085, column: 8, scope: !3107)
!3117 = !DILocation(line: 1085, column: 16, scope: !3107)
!3118 = !DILocation(line: 1086, column: 27, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3107, file: !2964, line: 1086, column: 7)
!3120 = !DILocation(line: 1086, column: 7, scope: !3119)
!3121 = !DILocation(line: 1086, column: 7, scope: !3107)
!3122 = !DILocation(line: 1088, column: 11, scope: !3123)
!3123 = distinct !DILexicalBlock(scope: !3124, file: !2964, line: 1088, column: 11)
!3124 = distinct !DILexicalBlock(scope: !3119, file: !2964, line: 1087, column: 5)
!3125 = !DILocation(line: 1088, column: 16, scope: !3123)
!3126 = !DILocation(line: 1088, column: 26, scope: !3123)
!3127 = !DILocation(line: 1088, column: 31, scope: !3123)
!3128 = !DILocation(line: 1088, column: 11, scope: !3124)
!3129 = !DILocation(line: 1089, column: 19, scope: !3123)
!3130 = !DILocation(line: 1089, column: 24, scope: !3123)
!3131 = !DILocation(line: 1089, column: 2, scope: !3123)
!3132 = !DILocation(line: 1090, column: 7, scope: !3124)
!3133 = !DILocation(line: 1093, column: 25, scope: !3107)
!3134 = !DILocation(line: 1093, column: 30, scope: !3107)
!3135 = !DILocation(line: 1093, column: 39, scope: !3107)
!3136 = !DILocation(line: 1093, column: 3, scope: !3107)
!3137 = !DILocation(line: 1094, column: 10, scope: !3107)
!3138 = !DILocation(line: 1094, column: 3, scope: !3107)
!3139 = !DILocation(line: 1095, column: 1, scope: !3107)
!3140 = distinct !DISubprogram(name: "gate_dce", scope: !3, file: !3, line: 1414, type: !2818, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3141 = !DILocation(line: 1416, column: 10, scope: !3140)
!3142 = !DILocation(line: 1416, column: 24, scope: !3140)
!3143 = !DILocation(line: 1416, column: 3, scope: !3140)
!3144 = distinct !DISubprogram(name: "tree_ssa_dce", scope: !3, file: !3, line: 1389, type: !2822, scopeLine: 1390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3145 = !DILocation(line: 1391, column: 10, scope: !3144)
!3146 = !DILocation(line: 1391, column: 3, scope: !3144)
!3147 = distinct !DISubprogram(name: "tree_ssa_dce_loop", scope: !3, file: !3, line: 1395, type: !2822, scopeLine: 1396, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3148 = !DILocalVariable(name: "todo", scope: !3147, file: !3, line: 1397, type: !7)
!3149 = !DILocation(line: 1397, column: 16, scope: !3147)
!3150 = !DILocation(line: 1398, column: 10, scope: !3147)
!3151 = !DILocation(line: 1398, column: 8, scope: !3147)
!3152 = !DILocation(line: 1399, column: 7, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3147, file: !3, line: 1399, column: 7)
!3154 = !DILocation(line: 1399, column: 7, scope: !3147)
!3155 = !DILocation(line: 1401, column: 7, scope: !3156)
!3156 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 1400, column: 5)
!3157 = !DILocation(line: 1402, column: 7, scope: !3156)
!3158 = !DILocation(line: 1403, column: 5, scope: !3156)
!3159 = !DILocation(line: 1404, column: 10, scope: !3147)
!3160 = !DILocation(line: 1404, column: 3, scope: !3147)
!3161 = distinct !DISubprogram(name: "tree_ssa_cd_dce", scope: !3, file: !3, line: 1408, type: !2822, scopeLine: 1409, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3162 = !DILocation(line: 1410, column: 47, scope: !3161)
!3163 = !DILocation(line: 1410, column: 56, scope: !3161)
!3164 = !DILocation(line: 1410, column: 10, scope: !3161)
!3165 = !DILocation(line: 1410, column: 3, scope: !3161)
!3166 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !2964, file: !2964, line: 1018, type: !3167, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3167 = !DISubroutineType(types: !3168)
!3168 = !{null, !1422, !2967}
!3169 = !DILocalVariable(name: "head", arg: 1, scope: !3166, file: !2964, line: 1018, type: !1422)
!3170 = !DILocation(line: 1018, column: 37, scope: !3166)
!3171 = !DILocalVariable(name: "imm", arg: 2, scope: !3166, file: !2964, line: 1018, type: !2967)
!3172 = !DILocation(line: 1018, column: 61, scope: !3166)
!3173 = !DILocalVariable(name: "use_p", scope: !3166, file: !2964, line: 1020, type: !1422)
!3174 = !DILocation(line: 1020, column: 17, scope: !3166)
!3175 = !DILocalVariable(name: "last_p", scope: !3166, file: !2964, line: 1021, type: !1422)
!3176 = !DILocation(line: 1021, column: 17, scope: !3166)
!3177 = !DILocation(line: 1021, column: 26, scope: !3166)
!3178 = !DILocalVariable(name: "head_stmt", scope: !3166, file: !2964, line: 1022, type: !1434)
!3179 = !DILocation(line: 1022, column: 10, scope: !3166)
!3180 = !DILocation(line: 1022, column: 22, scope: !3166)
!3181 = !DILocalVariable(name: "use", scope: !3166, file: !2964, line: 1023, type: !1622)
!3182 = !DILocation(line: 1023, column: 8, scope: !3166)
!3183 = !DILocation(line: 1023, column: 14, scope: !3166)
!3184 = !DILocalVariable(name: "op_iter", scope: !3166, file: !2964, line: 1024, type: !3185)
!3185 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !574, line: 140, baseType: !3186)
!3186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !574, line: 131, size: 320, elements: !3187)
!3187 = !{!3188, !3189, !3190, !3192, !3194, !3195, !3196}
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !3186, file: !574, line: 133, baseType: !1735, size: 8)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !3186, file: !574, line: 134, baseType: !573, size: 32, offset: 32)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !3186, file: !574, line: 135, baseType: !3191, size: 64, offset: 64)
!3191 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !574, line: 42, baseType: !2029)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !3186, file: !574, line: 136, baseType: !3193, size: 64, offset: 128)
!3193 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !574, line: 50, baseType: !2036)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !3186, file: !574, line: 137, baseType: !1524, size: 32, offset: 192)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !3186, file: !574, line: 138, baseType: !1524, size: 32, offset: 224)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !3186, file: !574, line: 139, baseType: !1434, size: 64, offset: 256)
!3197 = !DILocation(line: 1024, column: 15, scope: !3166)
!3198 = !DILocalVariable(name: "flag", scope: !3166, file: !2964, line: 1025, type: !1524)
!3199 = !DILocation(line: 1025, column: 7, scope: !3166)
!3200 = !DILocation(line: 1028, column: 26, scope: !3166)
!3201 = !DILocation(line: 1028, column: 11, scope: !3166)
!3202 = !DILocation(line: 1028, column: 8, scope: !3166)
!3203 = !DILocation(line: 1030, column: 20, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3166, file: !2964, line: 1030, column: 7)
!3205 = !DILocation(line: 1030, column: 7, scope: !3204)
!3206 = !DILocation(line: 1030, column: 31, scope: !3204)
!3207 = !DILocation(line: 1030, column: 7, scope: !3166)
!3208 = !DILocation(line: 1032, column: 7, scope: !3209)
!3209 = distinct !DILexicalBlock(scope: !3210, file: !2964, line: 1032, column: 7)
!3210 = distinct !DILexicalBlock(scope: !3204, file: !2964, line: 1031, column: 5)
!3211 = !DILocation(line: 1032, column: 7, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3209, file: !2964, line: 1032, column: 7)
!3213 = !DILocation(line: 1033, column: 6, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3212, file: !2964, line: 1033, column: 6)
!3215 = !DILocation(line: 1033, column: 30, scope: !3214)
!3216 = !DILocation(line: 1033, column: 27, scope: !3214)
!3217 = !DILocation(line: 1033, column: 6, scope: !3212)
!3218 = !DILocation(line: 1034, column: 34, scope: !3214)
!3219 = !DILocation(line: 1034, column: 41, scope: !3214)
!3220 = !DILocation(line: 1034, column: 47, scope: !3214)
!3221 = !DILocation(line: 1034, column: 13, scope: !3214)
!3222 = !DILocation(line: 1034, column: 11, scope: !3214)
!3223 = !DILocation(line: 1034, column: 4, scope: !3214)
!3224 = distinct !{!3224, !3208, !3225}
!3225 = !DILocation(line: 1034, column: 53, scope: !3209)
!3226 = !DILocation(line: 1035, column: 5, scope: !3210)
!3227 = !DILocation(line: 1038, column: 11, scope: !3228)
!3228 = distinct !DILexicalBlock(scope: !3229, file: !2964, line: 1038, column: 11)
!3229 = distinct !DILexicalBlock(scope: !3204, file: !2964, line: 1037, column: 5)
!3230 = !DILocation(line: 1038, column: 16, scope: !3228)
!3231 = !DILocation(line: 1038, column: 11, scope: !3229)
!3232 = !DILocation(line: 1040, column: 4, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3234, file: !2964, line: 1040, column: 4)
!3234 = distinct !DILexicalBlock(scope: !3228, file: !2964, line: 1039, column: 2)
!3235 = !DILocation(line: 1040, column: 4, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3233, file: !2964, line: 1040, column: 4)
!3237 = !DILocation(line: 1041, column: 10, scope: !3238)
!3238 = distinct !DILexicalBlock(scope: !3236, file: !2964, line: 1041, column: 10)
!3239 = !DILocation(line: 1041, column: 34, scope: !3238)
!3240 = !DILocation(line: 1041, column: 31, scope: !3238)
!3241 = !DILocation(line: 1041, column: 10, scope: !3236)
!3242 = !DILocation(line: 1042, column: 38, scope: !3238)
!3243 = !DILocation(line: 1042, column: 45, scope: !3238)
!3244 = !DILocation(line: 1042, column: 51, scope: !3238)
!3245 = !DILocation(line: 1042, column: 17, scope: !3238)
!3246 = !DILocation(line: 1042, column: 15, scope: !3238)
!3247 = !DILocation(line: 1042, column: 8, scope: !3238)
!3248 = distinct !{!3248, !3232, !3249}
!3249 = !DILocation(line: 1042, column: 57, scope: !3233)
!3250 = !DILocation(line: 1043, column: 2, scope: !3234)
!3251 = !DILocation(line: 1044, column: 41, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3228, file: !2964, line: 1044, column: 16)
!3253 = !DILocation(line: 1044, column: 25, scope: !3252)
!3254 = !DILocation(line: 1044, column: 23, scope: !3252)
!3255 = !DILocation(line: 1044, column: 53, scope: !3252)
!3256 = !DILocation(line: 1044, column: 16, scope: !3228)
!3257 = !DILocation(line: 1046, column: 8, scope: !3258)
!3258 = distinct !DILexicalBlock(scope: !3259, file: !2964, line: 1046, column: 8)
!3259 = distinct !DILexicalBlock(scope: !3252, file: !2964, line: 1045, column: 2)
!3260 = !DILocation(line: 1046, column: 32, scope: !3258)
!3261 = !DILocation(line: 1046, column: 29, scope: !3258)
!3262 = !DILocation(line: 1046, column: 8, scope: !3259)
!3263 = !DILocation(line: 1047, column: 36, scope: !3258)
!3264 = !DILocation(line: 1047, column: 43, scope: !3258)
!3265 = !DILocation(line: 1047, column: 49, scope: !3258)
!3266 = !DILocation(line: 1047, column: 15, scope: !3258)
!3267 = !DILocation(line: 1047, column: 13, scope: !3258)
!3268 = !DILocation(line: 1047, column: 6, scope: !3258)
!3269 = !DILocation(line: 1048, column: 2, scope: !3259)
!3270 = !DILocation(line: 1051, column: 7, scope: !3271)
!3271 = distinct !DILexicalBlock(scope: !3166, file: !2964, line: 1051, column: 7)
!3272 = !DILocation(line: 1051, column: 12, scope: !3271)
!3273 = !DILocation(line: 1051, column: 22, scope: !3271)
!3274 = !DILocation(line: 1051, column: 27, scope: !3271)
!3275 = !DILocation(line: 1051, column: 7, scope: !3166)
!3276 = !DILocation(line: 1052, column: 22, scope: !3271)
!3277 = !DILocation(line: 1052, column: 27, scope: !3271)
!3278 = !DILocation(line: 1052, column: 5, scope: !3271)
!3279 = !DILocation(line: 1053, column: 27, scope: !3166)
!3280 = !DILocation(line: 1053, column: 32, scope: !3166)
!3281 = !DILocation(line: 1053, column: 44, scope: !3166)
!3282 = !DILocation(line: 1053, column: 3, scope: !3166)
!3283 = !DILocation(line: 1054, column: 1, scope: !3166)
!3284 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2964, file: !2964, line: 427, type: !3285, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3285 = !DISubroutineType(types: !3286)
!3286 = !{!1622, !1422}
!3287 = !DILocalVariable(name: "use", arg: 1, scope: !3284, file: !2964, line: 427, type: !1422)
!3288 = !DILocation(line: 427, column: 33, scope: !3284)
!3289 = !DILocation(line: 429, column: 12, scope: !3284)
!3290 = !DILocation(line: 429, column: 17, scope: !3284)
!3291 = !DILocation(line: 429, column: 10, scope: !3284)
!3292 = !DILocation(line: 429, column: 3, scope: !3284)
!3293 = distinct !DISubprogram(name: "gimple_code", scope: !581, file: !581, line: 1052, type: !3294, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3294 = !DISubroutineType(types: !3295)
!3295 = !{!580, !2956}
!3296 = !DILocalVariable(name: "g", arg: 1, scope: !3293, file: !581, line: 1052, type: !2956)
!3297 = !DILocation(line: 1052, column: 27, scope: !3293)
!3298 = !DILocation(line: 1054, column: 10, scope: !3293)
!3299 = !DILocation(line: 1054, column: 13, scope: !3293)
!3300 = !DILocation(line: 1054, column: 20, scope: !3293)
!3301 = !DILocation(line: 1054, column: 3, scope: !3293)
!3302 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !2964, file: !2964, line: 910, type: !3303, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3303 = !DISubroutineType(types: !3304)
!3304 = !{!1422, !3305, !1434, !1524}
!3305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3185, size: 64)
!3306 = !DILocalVariable(name: "ptr", arg: 1, scope: !3302, file: !2964, line: 910, type: !3305)
!3307 = !DILocation(line: 910, column: 35, scope: !3302)
!3308 = !DILocalVariable(name: "phi", arg: 2, scope: !3302, file: !2964, line: 910, type: !1434)
!3309 = !DILocation(line: 910, column: 47, scope: !3302)
!3310 = !DILocalVariable(name: "flags", arg: 3, scope: !3302, file: !2964, line: 910, type: !1524)
!3311 = !DILocation(line: 910, column: 56, scope: !3302)
!3312 = !DILocalVariable(name: "phi_def", scope: !3302, file: !2964, line: 912, type: !1622)
!3313 = !DILocation(line: 912, column: 8, scope: !3302)
!3314 = !DILocation(line: 912, column: 37, scope: !3302)
!3315 = !DILocation(line: 912, column: 18, scope: !3302)
!3316 = !DILocalVariable(name: "comp", scope: !3302, file: !2964, line: 913, type: !1524)
!3317 = !DILocation(line: 913, column: 7, scope: !3302)
!3318 = !DILocation(line: 915, column: 28, scope: !3302)
!3319 = !DILocation(line: 915, column: 3, scope: !3302)
!3320 = !DILocation(line: 916, column: 3, scope: !3302)
!3321 = !DILocation(line: 916, column: 8, scope: !3302)
!3322 = !DILocation(line: 916, column: 13, scope: !3302)
!3323 = !DILocation(line: 918, column: 3, scope: !3302)
!3324 = !DILocation(line: 920, column: 26, scope: !3302)
!3325 = !DILocation(line: 920, column: 11, scope: !3302)
!3326 = !DILocation(line: 920, column: 8, scope: !3302)
!3327 = !DILocation(line: 923, column: 8, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3302, file: !2964, line: 923, column: 7)
!3329 = !DILocation(line: 923, column: 16, scope: !3328)
!3330 = !DILocation(line: 923, column: 14, scope: !3328)
!3331 = !DILocation(line: 923, column: 22, scope: !3328)
!3332 = !DILocation(line: 923, column: 7, scope: !3302)
!3333 = !DILocation(line: 925, column: 7, scope: !3334)
!3334 = distinct !DILexicalBlock(scope: !3328, file: !2964, line: 924, column: 5)
!3335 = !DILocation(line: 925, column: 12, scope: !3334)
!3336 = !DILocation(line: 925, column: 17, scope: !3334)
!3337 = !DILocation(line: 926, column: 7, scope: !3334)
!3338 = !DILocation(line: 929, column: 19, scope: !3302)
!3339 = !DILocation(line: 929, column: 3, scope: !3302)
!3340 = !DILocation(line: 929, column: 8, scope: !3302)
!3341 = !DILocation(line: 929, column: 17, scope: !3302)
!3342 = !DILocation(line: 930, column: 39, scope: !3302)
!3343 = !DILocation(line: 930, column: 18, scope: !3302)
!3344 = !DILocation(line: 930, column: 3, scope: !3302)
!3345 = !DILocation(line: 930, column: 8, scope: !3302)
!3346 = !DILocation(line: 930, column: 16, scope: !3302)
!3347 = !DILocation(line: 931, column: 3, scope: !3302)
!3348 = !DILocation(line: 931, column: 8, scope: !3302)
!3349 = !DILocation(line: 931, column: 18, scope: !3302)
!3350 = !DILocation(line: 932, column: 28, scope: !3302)
!3351 = !DILocation(line: 932, column: 10, scope: !3302)
!3352 = !DILocation(line: 932, column: 3, scope: !3302)
!3353 = !DILocation(line: 933, column: 1, scope: !3302)
!3354 = distinct !DISubprogram(name: "op_iter_done", scope: !2964, file: !2964, line: 652, type: !3355, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3355 = !DISubroutineType(types: !3356)
!3356 = !{!1735, !3357}
!3357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3358, size: 64)
!3358 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3185)
!3359 = !DILocalVariable(name: "ptr", arg: 1, scope: !3354, file: !2964, line: 652, type: !3357)
!3360 = !DILocation(line: 652, column: 34, scope: !3354)
!3361 = !DILocation(line: 654, column: 10, scope: !3354)
!3362 = !DILocation(line: 654, column: 15, scope: !3354)
!3363 = !DILocation(line: 654, column: 3, scope: !3354)
!3364 = distinct !DISubprogram(name: "move_use_after_head", scope: !2964, file: !2964, line: 990, type: !3365, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3365 = !DISubroutineType(types: !3366)
!3366 = !{!1422, !1422, !1422, !1422}
!3367 = !DILocalVariable(name: "use_p", arg: 1, scope: !3364, file: !2964, line: 990, type: !1422)
!3368 = !DILocation(line: 990, column: 36, scope: !3364)
!3369 = !DILocalVariable(name: "head", arg: 2, scope: !3364, file: !2964, line: 990, type: !1422)
!3370 = !DILocation(line: 990, column: 57, scope: !3364)
!3371 = !DILocalVariable(name: "last_p", arg: 3, scope: !3364, file: !2964, line: 991, type: !1422)
!3372 = !DILocation(line: 991, column: 23, scope: !3364)
!3373 = !DILocation(line: 997, column: 7, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3364, file: !2964, line: 997, column: 7)
!3375 = !DILocation(line: 997, column: 16, scope: !3374)
!3376 = !DILocation(line: 997, column: 13, scope: !3374)
!3377 = !DILocation(line: 997, column: 7, scope: !3364)
!3378 = !DILocation(line: 1000, column: 11, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3380, file: !2964, line: 1000, column: 11)
!3380 = distinct !DILexicalBlock(scope: !3374, file: !2964, line: 998, column: 5)
!3381 = !DILocation(line: 1000, column: 19, scope: !3379)
!3382 = !DILocation(line: 1000, column: 27, scope: !3379)
!3383 = !DILocation(line: 1000, column: 24, scope: !3379)
!3384 = !DILocation(line: 1000, column: 11, scope: !3380)
!3385 = !DILocation(line: 1001, column: 11, scope: !3379)
!3386 = !DILocation(line: 1001, column: 9, scope: !3379)
!3387 = !DILocation(line: 1001, column: 2, scope: !3379)
!3388 = !DILocation(line: 1005, column: 20, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3379, file: !2964, line: 1003, column: 2)
!3390 = !DILocation(line: 1005, column: 4, scope: !3389)
!3391 = !DILocation(line: 1006, column: 26, scope: !3389)
!3392 = !DILocation(line: 1006, column: 33, scope: !3389)
!3393 = !DILocation(line: 1006, column: 4, scope: !3389)
!3394 = !DILocation(line: 1007, column: 13, scope: !3389)
!3395 = !DILocation(line: 1007, column: 11, scope: !3389)
!3396 = !DILocation(line: 1009, column: 5, scope: !3380)
!3397 = !DILocation(line: 1010, column: 10, scope: !3364)
!3398 = !DILocation(line: 1010, column: 3, scope: !3364)
!3399 = distinct !DISubprogram(name: "op_iter_next_use", scope: !2964, file: !2964, line: 659, type: !3400, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3400 = !DISubroutineType(types: !3401)
!3401 = !{!1422, !3305}
!3402 = !DILocalVariable(name: "ptr", arg: 1, scope: !3399, file: !2964, line: 659, type: !3305)
!3403 = !DILocation(line: 659, column: 32, scope: !3399)
!3404 = !DILocalVariable(name: "use_p", scope: !3399, file: !2964, line: 661, type: !1422)
!3405 = !DILocation(line: 661, column: 17, scope: !3399)
!3406 = !DILocation(line: 665, column: 7, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !3399, file: !2964, line: 665, column: 7)
!3408 = !DILocation(line: 665, column: 12, scope: !3407)
!3409 = !DILocation(line: 665, column: 7, scope: !3399)
!3410 = !DILocation(line: 667, column: 15, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3407, file: !2964, line: 666, column: 5)
!3412 = !DILocation(line: 667, column: 13, scope: !3411)
!3413 = !DILocation(line: 668, column: 19, scope: !3411)
!3414 = !DILocation(line: 668, column: 24, scope: !3411)
!3415 = !DILocation(line: 668, column: 30, scope: !3411)
!3416 = !DILocation(line: 668, column: 7, scope: !3411)
!3417 = !DILocation(line: 668, column: 12, scope: !3411)
!3418 = !DILocation(line: 668, column: 17, scope: !3411)
!3419 = !DILocation(line: 669, column: 14, scope: !3411)
!3420 = !DILocation(line: 669, column: 7, scope: !3411)
!3421 = !DILocation(line: 671, column: 7, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3399, file: !2964, line: 671, column: 7)
!3423 = !DILocation(line: 671, column: 12, scope: !3422)
!3424 = !DILocation(line: 671, column: 20, scope: !3422)
!3425 = !DILocation(line: 671, column: 25, scope: !3422)
!3426 = !DILocation(line: 671, column: 18, scope: !3422)
!3427 = !DILocation(line: 671, column: 7, scope: !3399)
!3428 = !DILocation(line: 673, column: 14, scope: !3429)
!3429 = distinct !DILexicalBlock(scope: !3422, file: !2964, line: 672, column: 5)
!3430 = !DILocation(line: 673, column: 7, scope: !3429)
!3431 = !DILocation(line: 675, column: 3, scope: !3399)
!3432 = !DILocation(line: 675, column: 8, scope: !3399)
!3433 = !DILocation(line: 675, column: 13, scope: !3399)
!3434 = !DILocation(line: 676, column: 3, scope: !3399)
!3435 = !DILocation(line: 677, column: 1, scope: !3399)
!3436 = distinct !DISubprogram(name: "op_iter_init_use", scope: !2964, file: !2964, line: 768, type: !3303, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3437 = !DILocalVariable(name: "ptr", arg: 1, scope: !3436, file: !2964, line: 768, type: !3305)
!3438 = !DILocation(line: 768, column: 32, scope: !3436)
!3439 = !DILocalVariable(name: "stmt", arg: 2, scope: !3436, file: !2964, line: 768, type: !1434)
!3440 = !DILocation(line: 768, column: 44, scope: !3436)
!3441 = !DILocalVariable(name: "flags", arg: 3, scope: !3436, file: !2964, line: 768, type: !1524)
!3442 = !DILocation(line: 768, column: 54, scope: !3436)
!3443 = !DILocation(line: 770, column: 3, scope: !3436)
!3444 = !DILocation(line: 772, column: 17, scope: !3436)
!3445 = !DILocation(line: 772, column: 22, scope: !3436)
!3446 = !DILocation(line: 772, column: 28, scope: !3436)
!3447 = !DILocation(line: 772, column: 3, scope: !3436)
!3448 = !DILocation(line: 773, column: 3, scope: !3436)
!3449 = !DILocation(line: 773, column: 8, scope: !3436)
!3450 = !DILocation(line: 773, column: 18, scope: !3436)
!3451 = !DILocation(line: 774, column: 28, scope: !3436)
!3452 = !DILocation(line: 774, column: 10, scope: !3436)
!3453 = !DILocation(line: 774, column: 3, scope: !3436)
!3454 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !581, file: !581, line: 1334, type: !3455, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3455 = !DISubroutineType(types: !3456)
!3456 = !{!1422, !2956}
!3457 = !DILocalVariable(name: "g", arg: 1, scope: !3454, file: !581, line: 1334, type: !2956)
!3458 = !DILocation(line: 1334, column: 30, scope: !3454)
!3459 = !DILocalVariable(name: "ops", scope: !3454, file: !581, line: 1336, type: !2036)
!3460 = !DILocation(line: 1336, column: 24, scope: !3454)
!3461 = !DILocation(line: 1337, column: 28, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3454, file: !581, line: 1337, column: 7)
!3463 = !DILocation(line: 1337, column: 8, scope: !3462)
!3464 = !DILocation(line: 1337, column: 7, scope: !3454)
!3465 = !DILocation(line: 1338, column: 5, scope: !3462)
!3466 = !DILocation(line: 1339, column: 9, scope: !3454)
!3467 = !DILocation(line: 1339, column: 12, scope: !3454)
!3468 = !DILocation(line: 1339, column: 18, scope: !3454)
!3469 = !DILocation(line: 1339, column: 25, scope: !3454)
!3470 = !DILocation(line: 1339, column: 7, scope: !3454)
!3471 = !DILocation(line: 1340, column: 7, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3454, file: !581, line: 1340, column: 7)
!3473 = !DILocation(line: 1341, column: 7, scope: !3472)
!3474 = !DILocation(line: 1341, column: 10, scope: !3472)
!3475 = !DILocation(line: 1341, column: 28, scope: !3472)
!3476 = !DILocation(line: 1341, column: 36, scope: !3472)
!3477 = !DILocation(line: 1341, column: 39, scope: !3472)
!3478 = !DILocation(line: 1341, column: 49, scope: !3472)
!3479 = !DILocation(line: 1341, column: 32, scope: !3472)
!3480 = !DILocation(line: 1340, column: 7, scope: !3454)
!3481 = !DILocation(line: 1342, column: 12, scope: !3472)
!3482 = !DILocation(line: 1342, column: 5, scope: !3472)
!3483 = !DILocation(line: 1343, column: 3, scope: !3454)
!3484 = !DILocation(line: 1344, column: 1, scope: !3454)
!3485 = distinct !DISubprogram(name: "delink_imm_use", scope: !2964, file: !2964, line: 188, type: !3486, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3486 = !DISubroutineType(types: !3487)
!3487 = !{null, !1423}
!3488 = !DILocalVariable(name: "linknode", arg: 1, scope: !3485, file: !2964, line: 188, type: !1423)
!3489 = !DILocation(line: 188, column: 36, scope: !3485)
!3490 = !DILocation(line: 191, column: 7, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3485, file: !2964, line: 191, column: 7)
!3492 = !DILocation(line: 191, column: 17, scope: !3491)
!3493 = !DILocation(line: 191, column: 22, scope: !3491)
!3494 = !DILocation(line: 191, column: 7, scope: !3485)
!3495 = !DILocation(line: 192, column: 5, scope: !3491)
!3496 = !DILocation(line: 194, column: 26, scope: !3485)
!3497 = !DILocation(line: 194, column: 36, scope: !3485)
!3498 = !DILocation(line: 194, column: 3, scope: !3485)
!3499 = !DILocation(line: 194, column: 13, scope: !3485)
!3500 = !DILocation(line: 194, column: 19, scope: !3485)
!3501 = !DILocation(line: 194, column: 24, scope: !3485)
!3502 = !DILocation(line: 195, column: 26, scope: !3485)
!3503 = !DILocation(line: 195, column: 36, scope: !3485)
!3504 = !DILocation(line: 195, column: 3, scope: !3485)
!3505 = !DILocation(line: 195, column: 13, scope: !3485)
!3506 = !DILocation(line: 195, column: 19, scope: !3485)
!3507 = !DILocation(line: 195, column: 24, scope: !3485)
!3508 = !DILocation(line: 196, column: 3, scope: !3485)
!3509 = !DILocation(line: 196, column: 13, scope: !3485)
!3510 = !DILocation(line: 196, column: 18, scope: !3485)
!3511 = !DILocation(line: 197, column: 3, scope: !3485)
!3512 = !DILocation(line: 197, column: 13, scope: !3485)
!3513 = !DILocation(line: 197, column: 18, scope: !3485)
!3514 = !DILocation(line: 198, column: 1, scope: !3485)
!3515 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !2964, file: !2964, line: 202, type: !3516, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3516 = !DISubroutineType(types: !3517)
!3517 = !{null, !1423, !1423}
!3518 = !DILocalVariable(name: "linknode", arg: 1, scope: !3515, file: !2964, line: 202, type: !1423)
!3519 = !DILocation(line: 202, column: 42, scope: !3515)
!3520 = !DILocalVariable(name: "list", arg: 2, scope: !3515, file: !2964, line: 202, type: !1423)
!3521 = !DILocation(line: 202, column: 71, scope: !3515)
!3522 = !DILocation(line: 206, column: 20, scope: !3515)
!3523 = !DILocation(line: 206, column: 3, scope: !3515)
!3524 = !DILocation(line: 206, column: 13, scope: !3515)
!3525 = !DILocation(line: 206, column: 18, scope: !3515)
!3526 = !DILocation(line: 207, column: 20, scope: !3515)
!3527 = !DILocation(line: 207, column: 26, scope: !3515)
!3528 = !DILocation(line: 207, column: 3, scope: !3515)
!3529 = !DILocation(line: 207, column: 13, scope: !3515)
!3530 = !DILocation(line: 207, column: 18, scope: !3515)
!3531 = !DILocation(line: 208, column: 22, scope: !3515)
!3532 = !DILocation(line: 208, column: 3, scope: !3515)
!3533 = !DILocation(line: 208, column: 9, scope: !3515)
!3534 = !DILocation(line: 208, column: 15, scope: !3515)
!3535 = !DILocation(line: 208, column: 20, scope: !3515)
!3536 = !DILocation(line: 209, column: 16, scope: !3515)
!3537 = !DILocation(line: 209, column: 3, scope: !3515)
!3538 = !DILocation(line: 209, column: 9, scope: !3515)
!3539 = !DILocation(line: 209, column: 14, scope: !3515)
!3540 = !DILocation(line: 210, column: 1, scope: !3515)
!3541 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !2964, file: !2964, line: 729, type: !3542, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3542 = !DISubroutineType(types: !3543)
!3543 = !{null, !3305}
!3544 = !DILocalVariable(name: "ptr", arg: 1, scope: !3541, file: !2964, line: 729, type: !3305)
!3545 = !DILocation(line: 729, column: 39, scope: !3541)
!3546 = !DILocation(line: 731, column: 3, scope: !3541)
!3547 = !DILocation(line: 731, column: 8, scope: !3541)
!3548 = !DILocation(line: 731, column: 13, scope: !3541)
!3549 = !DILocation(line: 732, column: 3, scope: !3541)
!3550 = !DILocation(line: 732, column: 8, scope: !3541)
!3551 = !DILocation(line: 732, column: 13, scope: !3541)
!3552 = !DILocation(line: 733, column: 3, scope: !3541)
!3553 = !DILocation(line: 733, column: 8, scope: !3541)
!3554 = !DILocation(line: 733, column: 18, scope: !3541)
!3555 = !DILocation(line: 734, column: 3, scope: !3541)
!3556 = !DILocation(line: 734, column: 8, scope: !3541)
!3557 = !DILocation(line: 734, column: 14, scope: !3541)
!3558 = !DILocation(line: 735, column: 3, scope: !3541)
!3559 = !DILocation(line: 735, column: 8, scope: !3541)
!3560 = !DILocation(line: 735, column: 16, scope: !3541)
!3561 = !DILocation(line: 736, column: 3, scope: !3541)
!3562 = !DILocation(line: 736, column: 8, scope: !3541)
!3563 = !DILocation(line: 736, column: 17, scope: !3541)
!3564 = !DILocation(line: 737, column: 3, scope: !3541)
!3565 = !DILocation(line: 737, column: 8, scope: !3541)
!3566 = !DILocation(line: 737, column: 13, scope: !3541)
!3567 = !DILocation(line: 738, column: 1, scope: !3541)
!3568 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !581, file: !581, line: 3061, type: !3569, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3569 = !DISubroutineType(types: !3570)
!3570 = !{!7, !2956}
!3571 = !DILocalVariable(name: "gs", arg: 1, scope: !3568, file: !581, line: 3061, type: !2956)
!3572 = !DILocation(line: 3061, column: 35, scope: !3568)
!3573 = !DILocation(line: 3064, column: 10, scope: !3568)
!3574 = !DILocation(line: 3064, column: 14, scope: !3568)
!3575 = !DILocation(line: 3064, column: 25, scope: !3568)
!3576 = !DILocation(line: 3064, column: 3, scope: !3568)
!3577 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2964, file: !2964, line: 442, type: !3578, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3578 = !DISubroutineType(types: !3579)
!3579 = !{!1422, !1434, !1524}
!3580 = !DILocalVariable(name: "gs", arg: 1, scope: !3577, file: !2964, line: 442, type: !1434)
!3581 = !DILocation(line: 442, column: 36, scope: !3577)
!3582 = !DILocalVariable(name: "i", arg: 2, scope: !3577, file: !2964, line: 442, type: !1524)
!3583 = !DILocation(line: 442, column: 44, scope: !3577)
!3584 = !DILocation(line: 444, column: 27, scope: !3577)
!3585 = !DILocation(line: 444, column: 31, scope: !3577)
!3586 = !DILocation(line: 444, column: 11, scope: !3577)
!3587 = !DILocation(line: 444, column: 35, scope: !3577)
!3588 = !DILocation(line: 444, column: 3, scope: !3577)
!3589 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !581, file: !581, line: 3100, type: !3590, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3590 = !DISubroutineType(types: !3591)
!3591 = !{!3592, !1434, !7}
!3592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2688, size: 64)
!3593 = !DILocalVariable(name: "gs", arg: 1, scope: !3589, file: !581, line: 3100, type: !1434)
!3594 = !DILocation(line: 3100, column: 24, scope: !3589)
!3595 = !DILocalVariable(name: "index", arg: 2, scope: !3589, file: !581, line: 3100, type: !7)
!3596 = !DILocation(line: 3100, column: 37, scope: !3589)
!3597 = !DILocation(line: 3103, column: 3, scope: !3589)
!3598 = !DILocation(line: 3104, column: 12, scope: !3589)
!3599 = !DILocation(line: 3104, column: 16, scope: !3589)
!3600 = !DILocation(line: 3104, column: 27, scope: !3589)
!3601 = !DILocation(line: 3104, column: 32, scope: !3589)
!3602 = !DILocation(line: 3104, column: 3, scope: !3589)
!3603 = distinct !DISubprogram(name: "op_iter_init", scope: !2964, file: !2964, line: 742, type: !3604, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3604 = !DISubroutineType(types: !3605)
!3605 = !{null, !3305, !1434, !1524}
!3606 = !DILocalVariable(name: "ptr", arg: 1, scope: !3603, file: !2964, line: 742, type: !3305)
!3607 = !DILocation(line: 742, column: 28, scope: !3603)
!3608 = !DILocalVariable(name: "stmt", arg: 2, scope: !3603, file: !2964, line: 742, type: !1434)
!3609 = !DILocation(line: 742, column: 40, scope: !3603)
!3610 = !DILocalVariable(name: "flags", arg: 3, scope: !3603, file: !2964, line: 742, type: !1524)
!3611 = !DILocation(line: 742, column: 50, scope: !3603)
!3612 = !DILocation(line: 746, column: 3, scope: !3603)
!3613 = !DILocation(line: 748, column: 16, scope: !3603)
!3614 = !DILocation(line: 748, column: 22, scope: !3603)
!3615 = !DILocation(line: 748, column: 15, scope: !3603)
!3616 = !DILocation(line: 748, column: 68, scope: !3603)
!3617 = !DILocation(line: 748, column: 52, scope: !3603)
!3618 = !DILocation(line: 748, column: 3, scope: !3603)
!3619 = !DILocation(line: 748, column: 8, scope: !3603)
!3620 = !DILocation(line: 748, column: 13, scope: !3603)
!3621 = !DILocation(line: 749, column: 9, scope: !3622)
!3622 = distinct !DILexicalBlock(scope: !3603, file: !2964, line: 749, column: 7)
!3623 = !DILocation(line: 749, column: 15, scope: !3622)
!3624 = !DILocation(line: 750, column: 7, scope: !3622)
!3625 = !DILocation(line: 750, column: 10, scope: !3622)
!3626 = !DILocation(line: 750, column: 15, scope: !3622)
!3627 = !DILocation(line: 751, column: 7, scope: !3622)
!3628 = !DILocation(line: 751, column: 23, scope: !3622)
!3629 = !DILocation(line: 751, column: 10, scope: !3622)
!3630 = !DILocation(line: 751, column: 29, scope: !3622)
!3631 = !DILocation(line: 749, column: 7, scope: !3603)
!3632 = !DILocation(line: 752, column: 17, scope: !3622)
!3633 = !DILocation(line: 752, column: 22, scope: !3622)
!3634 = !DILocation(line: 752, column: 28, scope: !3622)
!3635 = !DILocation(line: 752, column: 5, scope: !3622)
!3636 = !DILocation(line: 752, column: 10, scope: !3622)
!3637 = !DILocation(line: 752, column: 15, scope: !3622)
!3638 = !DILocation(line: 753, column: 16, scope: !3603)
!3639 = !DILocation(line: 753, column: 22, scope: !3603)
!3640 = !DILocation(line: 753, column: 15, scope: !3603)
!3641 = !DILocation(line: 753, column: 68, scope: !3603)
!3642 = !DILocation(line: 753, column: 52, scope: !3603)
!3643 = !DILocation(line: 753, column: 3, scope: !3603)
!3644 = !DILocation(line: 753, column: 8, scope: !3603)
!3645 = !DILocation(line: 753, column: 13, scope: !3603)
!3646 = !DILocation(line: 754, column: 9, scope: !3647)
!3647 = distinct !DILexicalBlock(scope: !3603, file: !2964, line: 754, column: 7)
!3648 = !DILocation(line: 754, column: 15, scope: !3647)
!3649 = !DILocation(line: 755, column: 7, scope: !3647)
!3650 = !DILocation(line: 755, column: 10, scope: !3647)
!3651 = !DILocation(line: 755, column: 15, scope: !3647)
!3652 = !DILocation(line: 756, column: 7, scope: !3647)
!3653 = !DILocation(line: 756, column: 23, scope: !3647)
!3654 = !DILocation(line: 756, column: 10, scope: !3647)
!3655 = !DILocation(line: 756, column: 29, scope: !3647)
!3656 = !DILocation(line: 754, column: 7, scope: !3603)
!3657 = !DILocation(line: 757, column: 17, scope: !3647)
!3658 = !DILocation(line: 757, column: 22, scope: !3647)
!3659 = !DILocation(line: 757, column: 28, scope: !3647)
!3660 = !DILocation(line: 757, column: 5, scope: !3647)
!3661 = !DILocation(line: 757, column: 10, scope: !3647)
!3662 = !DILocation(line: 757, column: 15, scope: !3647)
!3663 = !DILocation(line: 758, column: 3, scope: !3603)
!3664 = !DILocation(line: 758, column: 8, scope: !3603)
!3665 = !DILocation(line: 758, column: 13, scope: !3603)
!3666 = !DILocation(line: 760, column: 3, scope: !3603)
!3667 = !DILocation(line: 760, column: 8, scope: !3603)
!3668 = !DILocation(line: 760, column: 14, scope: !3603)
!3669 = !DILocation(line: 761, column: 3, scope: !3603)
!3670 = !DILocation(line: 761, column: 8, scope: !3603)
!3671 = !DILocation(line: 761, column: 16, scope: !3603)
!3672 = !DILocation(line: 762, column: 3, scope: !3603)
!3673 = !DILocation(line: 762, column: 8, scope: !3603)
!3674 = !DILocation(line: 762, column: 17, scope: !3603)
!3675 = !DILocation(line: 763, column: 1, scope: !3603)
!3676 = distinct !DISubprogram(name: "gimple_def_ops", scope: !581, file: !581, line: 1292, type: !3677, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3677 = !DISubroutineType(types: !3678)
!3678 = !{!2029, !2956}
!3679 = !DILocalVariable(name: "g", arg: 1, scope: !3676, file: !581, line: 1292, type: !2956)
!3680 = !DILocation(line: 1292, column: 30, scope: !3676)
!3681 = !DILocation(line: 1294, column: 24, scope: !3682)
!3682 = distinct !DILexicalBlock(scope: !3676, file: !581, line: 1294, column: 7)
!3683 = !DILocation(line: 1294, column: 8, scope: !3682)
!3684 = !DILocation(line: 1294, column: 7, scope: !3676)
!3685 = !DILocation(line: 1295, column: 5, scope: !3682)
!3686 = !DILocation(line: 1296, column: 10, scope: !3676)
!3687 = !DILocation(line: 1296, column: 13, scope: !3676)
!3688 = !DILocation(line: 1296, column: 19, scope: !3676)
!3689 = !DILocation(line: 1296, column: 26, scope: !3676)
!3690 = !DILocation(line: 1296, column: 3, scope: !3676)
!3691 = !DILocation(line: 1297, column: 1, scope: !3676)
!3692 = distinct !DISubprogram(name: "gimple_vdef", scope: !581, file: !581, line: 1375, type: !2954, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3693 = !DILocalVariable(name: "g", arg: 1, scope: !3692, file: !581, line: 1375, type: !2956)
!3694 = !DILocation(line: 1375, column: 27, scope: !3692)
!3695 = !DILocation(line: 1377, column: 28, scope: !3696)
!3696 = distinct !DILexicalBlock(scope: !3692, file: !581, line: 1377, column: 7)
!3697 = !DILocation(line: 1377, column: 8, scope: !3696)
!3698 = !DILocation(line: 1377, column: 7, scope: !3692)
!3699 = !DILocation(line: 1378, column: 5, scope: !3696)
!3700 = !DILocation(line: 1379, column: 10, scope: !3692)
!3701 = !DILocation(line: 1379, column: 13, scope: !3692)
!3702 = !DILocation(line: 1379, column: 23, scope: !3692)
!3703 = !DILocation(line: 1379, column: 3, scope: !3692)
!3704 = !DILocation(line: 1380, column: 1, scope: !3692)
!3705 = distinct !DISubprogram(name: "gimple_use_ops", scope: !581, file: !581, line: 1313, type: !3706, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3706 = !DISubroutineType(types: !3707)
!3707 = !{!2036, !2956}
!3708 = !DILocalVariable(name: "g", arg: 1, scope: !3705, file: !581, line: 1313, type: !2956)
!3709 = !DILocation(line: 1313, column: 30, scope: !3705)
!3710 = !DILocation(line: 1315, column: 24, scope: !3711)
!3711 = distinct !DILexicalBlock(scope: !3705, file: !581, line: 1315, column: 7)
!3712 = !DILocation(line: 1315, column: 8, scope: !3711)
!3713 = !DILocation(line: 1315, column: 7, scope: !3705)
!3714 = !DILocation(line: 1316, column: 5, scope: !3711)
!3715 = !DILocation(line: 1317, column: 10, scope: !3705)
!3716 = !DILocation(line: 1317, column: 13, scope: !3705)
!3717 = !DILocation(line: 1317, column: 19, scope: !3705)
!3718 = !DILocation(line: 1317, column: 26, scope: !3705)
!3719 = !DILocation(line: 1317, column: 3, scope: !3705)
!3720 = !DILocation(line: 1318, column: 1, scope: !3705)
!3721 = distinct !DISubprogram(name: "gimple_vuse", scope: !581, file: !581, line: 1365, type: !2954, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3722 = !DILocalVariable(name: "g", arg: 1, scope: !3721, file: !581, line: 1365, type: !2956)
!3723 = !DILocation(line: 1365, column: 27, scope: !3721)
!3724 = !DILocation(line: 1367, column: 28, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3721, file: !581, line: 1367, column: 7)
!3726 = !DILocation(line: 1367, column: 8, scope: !3725)
!3727 = !DILocation(line: 1367, column: 7, scope: !3721)
!3728 = !DILocation(line: 1368, column: 5, scope: !3725)
!3729 = !DILocation(line: 1369, column: 10, scope: !3721)
!3730 = !DILocation(line: 1369, column: 13, scope: !3721)
!3731 = !DILocation(line: 1369, column: 23, scope: !3721)
!3732 = !DILocation(line: 1369, column: 3, scope: !3721)
!3733 = !DILocation(line: 1370, column: 1, scope: !3721)
!3734 = distinct !DISubprogram(name: "gimple_has_ops", scope: !581, file: !581, line: 1274, type: !3735, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3735 = !DISubroutineType(types: !3736)
!3736 = !{!1735, !2956}
!3737 = !DILocalVariable(name: "g", arg: 1, scope: !3734, file: !581, line: 1274, type: !2956)
!3738 = !DILocation(line: 1274, column: 30, scope: !3734)
!3739 = !DILocation(line: 1276, column: 23, scope: !3734)
!3740 = !DILocation(line: 1276, column: 10, scope: !3734)
!3741 = !DILocation(line: 1276, column: 26, scope: !3734)
!3742 = !DILocation(line: 1276, column: 41, scope: !3734)
!3743 = !DILocation(line: 1276, column: 57, scope: !3734)
!3744 = !DILocation(line: 1276, column: 44, scope: !3734)
!3745 = !DILocation(line: 1276, column: 60, scope: !3734)
!3746 = !DILocation(line: 0, scope: !3734)
!3747 = !DILocation(line: 1276, column: 3, scope: !3734)
!3748 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !581, file: !581, line: 1283, type: !3735, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3749 = !DILocalVariable(name: "g", arg: 1, scope: !3748, file: !581, line: 1283, type: !2956)
!3750 = !DILocation(line: 1283, column: 34, scope: !3748)
!3751 = !DILocation(line: 1285, column: 23, scope: !3748)
!3752 = !DILocation(line: 1285, column: 10, scope: !3748)
!3753 = !DILocation(line: 1285, column: 26, scope: !3748)
!3754 = !DILocation(line: 1285, column: 43, scope: !3748)
!3755 = !DILocation(line: 1285, column: 59, scope: !3748)
!3756 = !DILocation(line: 1285, column: 46, scope: !3748)
!3757 = !DILocation(line: 1285, column: 62, scope: !3748)
!3758 = !DILocation(line: 0, scope: !3748)
!3759 = !DILocation(line: 1285, column: 3, scope: !3748)
!3760 = distinct !DISubprogram(name: "link_imm_use", scope: !2964, file: !2964, line: 214, type: !3761, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3761 = !DISubroutineType(types: !3762)
!3762 = !{null, !1423, !1622}
!3763 = !DILocalVariable(name: "linknode", arg: 1, scope: !3760, file: !2964, line: 214, type: !1423)
!3764 = !DILocation(line: 214, column: 34, scope: !3760)
!3765 = !DILocalVariable(name: "def", arg: 2, scope: !3760, file: !2964, line: 214, type: !1622)
!3766 = !DILocation(line: 214, column: 49, scope: !3760)
!3767 = !DILocalVariable(name: "root", scope: !3760, file: !2964, line: 216, type: !1423)
!3768 = !DILocation(line: 216, column: 22, scope: !3760)
!3769 = !DILocation(line: 218, column: 8, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3760, file: !2964, line: 218, column: 7)
!3771 = !DILocation(line: 218, column: 12, scope: !3770)
!3772 = !DILocation(line: 218, column: 15, scope: !3770)
!3773 = !DILocation(line: 218, column: 31, scope: !3770)
!3774 = !DILocation(line: 218, column: 7, scope: !3760)
!3775 = !DILocation(line: 219, column: 5, scope: !3770)
!3776 = !DILocation(line: 219, column: 15, scope: !3770)
!3777 = !DILocation(line: 219, column: 20, scope: !3770)
!3778 = !DILocation(line: 222, column: 16, scope: !3779)
!3779 = distinct !DILexicalBlock(scope: !3770, file: !2964, line: 221, column: 5)
!3780 = !DILocation(line: 222, column: 12, scope: !3779)
!3781 = !DILocation(line: 227, column: 29, scope: !3779)
!3782 = !DILocation(line: 227, column: 39, scope: !3779)
!3783 = !DILocation(line: 227, column: 7, scope: !3779)
!3784 = !DILocation(line: 229, column: 1, scope: !3760)
!3785 = distinct !DISubprogram(name: "perform_tree_ssa_dce", scope: !3, file: !3, line: 1315, type: !3786, scopeLine: 1316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3786 = !DISubroutineType(types: !3787)
!3787 = !{!7, !1735}
!3788 = !DILocalVariable(name: "aggressive", arg: 1, scope: !3785, file: !3, line: 1315, type: !1735)
!3789 = !DILocation(line: 1315, column: 28, scope: !3785)
!3790 = !DILocalVariable(name: "el", scope: !3785, file: !3, line: 1317, type: !3791)
!3791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3792, size: 64)
!3792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_list", file: !135, line: 572, size: 128, elements: !3793)
!3793 = !{!3794, !3795, !3796}
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "num_blocks", scope: !3792, file: !135, line: 574, baseType: !1524, size: 32)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "num_edges", scope: !3792, file: !135, line: 575, baseType: !1524, size: 32, offset: 32)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "index_to_edge", scope: !3792, file: !135, line: 576, baseType: !3797, size: 64, offset: 64)
!3797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1475, size: 64)
!3798 = !DILocation(line: 1317, column: 21, scope: !3785)
!3799 = !DILocalVariable(name: "something_changed", scope: !3785, file: !3, line: 1318, type: !1735)
!3800 = !DILocation(line: 1318, column: 8, scope: !3785)
!3801 = !DILocation(line: 1323, column: 7, scope: !3802)
!3802 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1323, column: 7)
!3803 = !DILocation(line: 1323, column: 7, scope: !3785)
!3804 = !DILocation(line: 1324, column: 5, scope: !3802)
!3805 = !DILocation(line: 1327, column: 18, scope: !3785)
!3806 = !DILocation(line: 1327, column: 3, scope: !3785)
!3807 = !DILocation(line: 1329, column: 7, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1329, column: 7)
!3809 = !DILocation(line: 1329, column: 7, scope: !3785)
!3810 = !DILocation(line: 1332, column: 7, scope: !3811)
!3811 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 1330, column: 5)
!3812 = !DILocation(line: 1332, column: 7, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3814, file: !3, line: 1332, column: 7)
!3814 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 1332, column: 7)
!3815 = !DILocation(line: 1332, column: 7, scope: !3814)
!3816 = !DILocation(line: 1333, column: 7, scope: !3811)
!3817 = !DILocation(line: 1334, column: 12, scope: !3811)
!3818 = !DILocation(line: 1334, column: 10, scope: !3811)
!3819 = !DILocation(line: 1335, column: 37, scope: !3811)
!3820 = !DILocation(line: 1335, column: 7, scope: !3811)
!3821 = !DILocation(line: 1336, column: 7, scope: !3811)
!3822 = !DILocation(line: 1336, column: 7, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 1336, column: 7)
!3824 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 1336, column: 7)
!3825 = !DILocation(line: 1336, column: 7, scope: !3824)
!3826 = !DILocation(line: 1338, column: 48, scope: !3811)
!3827 = !DILocation(line: 1338, column: 33, scope: !3811)
!3828 = !DILocation(line: 1338, column: 31, scope: !3811)
!3829 = !DILocation(line: 1339, column: 21, scope: !3811)
!3830 = !DILocation(line: 1339, column: 7, scope: !3811)
!3831 = !DILocation(line: 1341, column: 7, scope: !3811)
!3832 = !DILocation(line: 1342, column: 5, scope: !3811)
!3833 = !DILocation(line: 1344, column: 35, scope: !3785)
!3834 = !DILocation(line: 1344, column: 3, scope: !3785)
!3835 = !DILocation(line: 1346, column: 7, scope: !3836)
!3836 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1346, column: 7)
!3837 = !DILocation(line: 1346, column: 7, scope: !3785)
!3838 = !DILocation(line: 1347, column: 5, scope: !3836)
!3839 = !DILocation(line: 1349, column: 17, scope: !3785)
!3840 = !DILocation(line: 1350, column: 15, scope: !3785)
!3841 = !DILocation(line: 1351, column: 12, scope: !3785)
!3842 = !DILocation(line: 1352, column: 14, scope: !3785)
!3843 = !DILocation(line: 1353, column: 13, scope: !3785)
!3844 = !DILocation(line: 1353, column: 11, scope: !3785)
!3845 = !DILocation(line: 1354, column: 24, scope: !3785)
!3846 = !DILocation(line: 1354, column: 3, scope: !3785)
!3847 = !DILocation(line: 1355, column: 3, scope: !3785)
!3848 = !DILocation(line: 1357, column: 24, scope: !3785)
!3849 = !DILocation(line: 1357, column: 21, scope: !3785)
!3850 = !DILocation(line: 1358, column: 24, scope: !3785)
!3851 = !DILocation(line: 1358, column: 21, scope: !3785)
!3852 = !DILocation(line: 1361, column: 3, scope: !3785)
!3853 = !DILocation(line: 1366, column: 7, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1366, column: 7)
!3855 = !DILocation(line: 1366, column: 7, scope: !3785)
!3856 = !DILocation(line: 1367, column: 5, scope: !3854)
!3857 = !DILocation(line: 1369, column: 29, scope: !3785)
!3858 = !DILocation(line: 1369, column: 63, scope: !3785)
!3859 = !DILocation(line: 1369, column: 3, scope: !3785)
!3860 = !DILocation(line: 1370, column: 29, scope: !3785)
!3861 = !DILocation(line: 1370, column: 62, scope: !3785)
!3862 = !DILocation(line: 1370, column: 3, scope: !3785)
!3863 = !DILocation(line: 1373, column: 7, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1373, column: 7)
!3865 = !DILocation(line: 1373, column: 17, scope: !3864)
!3866 = !DILocation(line: 1373, column: 21, scope: !3864)
!3867 = !DILocation(line: 1373, column: 32, scope: !3864)
!3868 = !DILocation(line: 1373, column: 7, scope: !3785)
!3869 = !DILocation(line: 1374, column: 5, scope: !3864)
!3870 = !DILocation(line: 1376, column: 18, scope: !3785)
!3871 = !DILocation(line: 1376, column: 3, scope: !3785)
!3872 = !DILocation(line: 1378, column: 19, scope: !3785)
!3873 = !DILocation(line: 1378, column: 3, scope: !3785)
!3874 = !DILocation(line: 1380, column: 7, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3785, file: !3, line: 1380, column: 7)
!3876 = !DILocation(line: 1380, column: 7, scope: !3785)
!3877 = !DILocation(line: 1381, column: 5, scope: !3875)
!3878 = !DILocation(line: 1384, column: 5, scope: !3875)
!3879 = !DILocation(line: 1385, column: 1, scope: !3785)
!3880 = distinct !DISubprogram(name: "tree_dce_init", scope: !3, file: !3, line: 1251, type: !3881, scopeLine: 1252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3881 = !DISubroutineType(types: !3882)
!3882 = !{null, !1735}
!3883 = !DILocalVariable(name: "aggressive", arg: 1, scope: !3880, file: !3, line: 1251, type: !1735)
!3884 = !DILocation(line: 1251, column: 21, scope: !3880)
!3885 = !DILocation(line: 1253, column: 3, scope: !3880)
!3886 = !DILocation(line: 1255, column: 7, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 1255, column: 7)
!3888 = !DILocation(line: 1255, column: 7, scope: !3880)
!3889 = !DILocalVariable(name: "i", scope: !3890, file: !3, line: 1257, type: !1524)
!3890 = distinct !DILexicalBlock(scope: !3887, file: !3, line: 1256, column: 5)
!3891 = !DILocation(line: 1257, column: 11, scope: !3890)
!3892 = !DILocation(line: 1259, column: 32, scope: !3890)
!3893 = !DILocation(line: 1259, column: 30, scope: !3890)
!3894 = !DILocation(line: 1260, column: 14, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1260, column: 7)
!3896 = !DILocation(line: 1260, column: 12, scope: !3895)
!3897 = !DILocation(line: 1260, column: 19, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1260, column: 7)
!3899 = !DILocation(line: 1260, column: 23, scope: !3898)
!3900 = !DILocation(line: 1260, column: 21, scope: !3898)
!3901 = !DILocation(line: 1260, column: 7, scope: !3895)
!3902 = !DILocation(line: 1261, column: 30, scope: !3898)
!3903 = !DILocation(line: 1261, column: 2, scope: !3898)
!3904 = !DILocation(line: 1261, column: 25, scope: !3898)
!3905 = !DILocation(line: 1261, column: 28, scope: !3898)
!3906 = !DILocation(line: 1260, column: 41, scope: !3898)
!3907 = !DILocation(line: 1260, column: 7, scope: !3898)
!3908 = distinct !{!3908, !3901, !3909}
!3909 = !DILocation(line: 1261, column: 30, scope: !3895)
!3910 = !DILocation(line: 1263, column: 44, scope: !3890)
!3911 = !DILocation(line: 1263, column: 29, scope: !3890)
!3912 = !DILocation(line: 1263, column: 27, scope: !3890)
!3913 = !DILocation(line: 1264, column: 21, scope: !3890)
!3914 = !DILocation(line: 1264, column: 7, scope: !3890)
!3915 = !DILocation(line: 1265, column: 47, scope: !3890)
!3916 = !DILocation(line: 1265, column: 32, scope: !3890)
!3917 = !DILocation(line: 1265, column: 30, scope: !3890)
!3918 = !DILocation(line: 1266, column: 21, scope: !3890)
!3919 = !DILocation(line: 1266, column: 7, scope: !3890)
!3920 = !DILocation(line: 1267, column: 5, scope: !3890)
!3921 = !DILocation(line: 1269, column: 30, scope: !3880)
!3922 = !DILocation(line: 1269, column: 44, scope: !3880)
!3923 = !DILocation(line: 1269, column: 15, scope: !3880)
!3924 = !DILocation(line: 1269, column: 13, scope: !3880)
!3925 = !DILocation(line: 1270, column: 17, scope: !3880)
!3926 = !DILocation(line: 1270, column: 3, scope: !3880)
!3927 = !DILocation(line: 1272, column: 14, scope: !3880)
!3928 = !DILocation(line: 1272, column: 12, scope: !3880)
!3929 = !DILocation(line: 1273, column: 15, scope: !3880)
!3930 = !DILocation(line: 1274, column: 1, scope: !3880)
!3931 = distinct !DISubprogram(name: "find_all_control_dependences", scope: !3, file: !3, line: 196, type: !3932, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3932 = !DISubroutineType(types: !3933)
!3933 = !{null, !3791}
!3934 = !DILocalVariable(name: "el", arg: 1, scope: !3931, file: !3, line: 196, type: !3791)
!3935 = !DILocation(line: 196, column: 49, scope: !3931)
!3936 = !DILocalVariable(name: "i", scope: !3931, file: !3, line: 198, type: !1524)
!3937 = !DILocation(line: 198, column: 7, scope: !3931)
!3938 = !DILocation(line: 200, column: 10, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 200, column: 3)
!3940 = !DILocation(line: 200, column: 8, scope: !3939)
!3941 = !DILocation(line: 200, column: 15, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3939, file: !3, line: 200, column: 3)
!3943 = !DILocation(line: 200, column: 19, scope: !3942)
!3944 = !DILocation(line: 200, column: 17, scope: !3942)
!3945 = !DILocation(line: 200, column: 3, scope: !3939)
!3946 = !DILocation(line: 201, column: 30, scope: !3942)
!3947 = !DILocation(line: 201, column: 34, scope: !3942)
!3948 = !DILocation(line: 201, column: 5, scope: !3942)
!3949 = !DILocation(line: 200, column: 35, scope: !3942)
!3950 = !DILocation(line: 200, column: 3, scope: !3942)
!3951 = distinct !{!3951, !3945, !3952}
!3952 = !DILocation(line: 201, column: 35, scope: !3939)
!3953 = !DILocation(line: 202, column: 1, scope: !3931)
!3954 = distinct !DISubprogram(name: "find_obviously_necessary_stmts", scope: !3, file: !3, line: 413, type: !3932, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!3955 = !DILocalVariable(name: "el", arg: 1, scope: !3954, file: !3, line: 413, type: !3791)
!3956 = !DILocation(line: 413, column: 51, scope: !3954)
!3957 = !DILocalVariable(name: "bb", scope: !3954, file: !3, line: 415, type: !1885)
!3958 = !DILocation(line: 415, column: 15, scope: !3954)
!3959 = !DILocalVariable(name: "gsi", scope: !3954, file: !3, line: 416, type: !3960)
!3960 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !581, line: 265, baseType: !3961)
!3961 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !581, line: 254, size: 192, elements: !3962)
!3962 = !{!3963, !3964, !3965}
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3961, file: !581, line: 257, baseType: !1490, size: 64)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3961, file: !581, line: 263, baseType: !1485, size: 64, offset: 64)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3961, file: !581, line: 264, baseType: !1885, size: 64, offset: 128)
!3966 = !DILocation(line: 416, column: 24, scope: !3954)
!3967 = !DILocalVariable(name: "e", scope: !3954, file: !3, line: 417, type: !1475)
!3968 = !DILocation(line: 417, column: 8, scope: !3954)
!3969 = !DILocalVariable(name: "phi", scope: !3954, file: !3, line: 418, type: !1434)
!3970 = !DILocation(line: 418, column: 10, scope: !3954)
!3971 = !DILocalVariable(name: "stmt", scope: !3954, file: !3, line: 418, type: !1434)
!3972 = !DILocation(line: 418, column: 15, scope: !3954)
!3973 = !DILocation(line: 420, column: 3, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 420, column: 3)
!3975 = !DILocation(line: 420, column: 3, scope: !3976)
!3976 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 420, column: 3)
!3977 = !DILocation(line: 423, column: 34, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3979, file: !3, line: 423, column: 7)
!3979 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 421, column: 5)
!3980 = !DILocation(line: 423, column: 18, scope: !3978)
!3981 = !DILocation(line: 423, column: 12, scope: !3978)
!3982 = !DILocation(line: 423, column: 40, scope: !3983)
!3983 = distinct !DILexicalBlock(scope: !3978, file: !3, line: 423, column: 7)
!3984 = !DILocation(line: 423, column: 39, scope: !3983)
!3985 = !DILocation(line: 423, column: 7, scope: !3978)
!3986 = !DILocation(line: 425, column: 10, scope: !3987)
!3987 = distinct !DILexicalBlock(scope: !3983, file: !3, line: 424, column: 2)
!3988 = !DILocation(line: 425, column: 8, scope: !3987)
!3989 = !DILocation(line: 426, column: 20, scope: !3987)
!3990 = !DILocation(line: 426, column: 4, scope: !3987)
!3991 = !DILocation(line: 427, column: 2, scope: !3987)
!3992 = !DILocation(line: 423, column: 57, scope: !3983)
!3993 = !DILocation(line: 423, column: 7, scope: !3983)
!3994 = distinct !{!3994, !3985, !3995}
!3995 = !DILocation(line: 427, column: 2, scope: !3978)
!3996 = !DILocation(line: 430, column: 32, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3979, file: !3, line: 430, column: 7)
!3998 = !DILocation(line: 430, column: 18, scope: !3997)
!3999 = !DILocation(line: 430, column: 12, scope: !3997)
!4000 = !DILocation(line: 430, column: 38, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 430, column: 7)
!4002 = !DILocation(line: 430, column: 37, scope: !4001)
!4003 = !DILocation(line: 430, column: 7, scope: !3997)
!4004 = !DILocation(line: 432, column: 11, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 431, column: 2)
!4006 = !DILocation(line: 432, column: 9, scope: !4005)
!4007 = !DILocation(line: 433, column: 20, scope: !4005)
!4008 = !DILocation(line: 433, column: 4, scope: !4005)
!4009 = !DILocation(line: 434, column: 38, scope: !4005)
!4010 = !DILocation(line: 434, column: 44, scope: !4005)
!4011 = !DILocation(line: 434, column: 47, scope: !4005)
!4012 = !DILocation(line: 434, column: 4, scope: !4005)
!4013 = !DILocation(line: 435, column: 2, scope: !4005)
!4014 = !DILocation(line: 430, column: 55, scope: !4001)
!4015 = !DILocation(line: 430, column: 7, scope: !4001)
!4016 = distinct !{!4016, !4003, !4017}
!4017 = !DILocation(line: 435, column: 2, scope: !3997)
!4018 = !DILocation(line: 436, column: 5, scope: !3979)
!4019 = distinct !{!4019, !3973, !4020}
!4020 = !DILocation(line: 436, column: 5, scope: !3974)
!4021 = !DILocation(line: 440, column: 8, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 440, column: 7)
!4023 = !DILocation(line: 441, column: 8, scope: !4022)
!4024 = !DILocation(line: 441, column: 11, scope: !4022)
!4025 = !DILocation(line: 442, column: 7, scope: !4022)
!4026 = !DILocation(line: 442, column: 11, scope: !4022)
!4027 = !DILocation(line: 440, column: 7, scope: !3954)
!4028 = !DILocation(line: 443, column: 5, scope: !4022)
!4029 = !DILocation(line: 446, column: 7, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 446, column: 7)
!4031 = !DILocation(line: 446, column: 7, scope: !3954)
!4032 = !DILocalVariable(name: "li", scope: !4033, file: !3, line: 448, type: !4034)
!4033 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 447, column: 5)
!4034 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !146, line: 515, baseType: !4035)
!4035 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !146, line: 508, size: 128, elements: !4036)
!4036 = !{!4037, !4038}
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !4035, file: !146, line: 511, baseType: !2792, size: 64)
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !4035, file: !146, line: 514, baseType: !7, size: 32, offset: 64)
!4039 = !DILocation(line: 448, column: 21, scope: !4033)
!4040 = !DILocalVariable(name: "loop", scope: !4033, file: !3, line: 449, type: !2060)
!4041 = !DILocation(line: 449, column: 20, scope: !4033)
!4042 = !DILocation(line: 450, column: 7, scope: !4033)
!4043 = !DILocation(line: 451, column: 11, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4033, file: !3, line: 451, column: 11)
!4045 = !DILocation(line: 451, column: 11, scope: !4033)
!4046 = !DILocation(line: 452, column: 2, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 452, column: 2)
!4048 = !DILocation(line: 452, column: 2, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4047, file: !3, line: 452, column: 2)
!4050 = !DILocalVariable(name: "ei", scope: !4051, file: !3, line: 454, type: !4052)
!4051 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 453, column: 4)
!4052 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !4053)
!4053 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !4054)
!4054 = !{!4055, !4056}
!4055 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4053, file: !135, line: 680, baseType: !7, size: 32)
!4056 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4053, file: !135, line: 681, baseType: !4057, size: 64, offset: 64)
!4057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1463, size: 64)
!4058 = !DILocation(line: 454, column: 20, scope: !4051)
!4059 = !DILocation(line: 455, column: 6, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 455, column: 6)
!4061 = !DILocation(line: 455, column: 6, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 455, column: 6)
!4063 = !DILocation(line: 456, column: 13, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4062, file: !3, line: 456, column: 12)
!4065 = !DILocation(line: 456, column: 16, scope: !4064)
!4066 = !DILocation(line: 456, column: 22, scope: !4064)
!4067 = !DILocation(line: 457, column: 5, scope: !4064)
!4068 = !DILocation(line: 457, column: 9, scope: !4064)
!4069 = !DILocation(line: 457, column: 12, scope: !4064)
!4070 = !DILocation(line: 457, column: 18, scope: !4064)
!4071 = !DILocation(line: 456, column: 12, scope: !4062)
!4072 = !DILocation(line: 459, column: 16, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 459, column: 16)
!4074 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 458, column: 3)
!4075 = !DILocation(line: 459, column: 16, scope: !4074)
!4076 = !DILocation(line: 460, column: 23, scope: !4073)
!4077 = !DILocation(line: 461, column: 13, scope: !4073)
!4078 = !DILocation(line: 461, column: 16, scope: !4073)
!4079 = !DILocation(line: 461, column: 21, scope: !4073)
!4080 = !DILocation(line: 461, column: 28, scope: !4073)
!4081 = !DILocation(line: 461, column: 31, scope: !4073)
!4082 = !DILocation(line: 461, column: 37, scope: !4073)
!4083 = !DILocation(line: 460, column: 14, scope: !4073)
!4084 = !DILocation(line: 462, column: 45, scope: !4074)
!4085 = !DILocation(line: 462, column: 48, scope: !4074)
!4086 = !DILocation(line: 462, column: 54, scope: !4074)
!4087 = !DILocation(line: 462, column: 5, scope: !4074)
!4088 = !DILocation(line: 463, column: 3, scope: !4074)
!4089 = !DILocation(line: 457, column: 41, scope: !4064)
!4090 = distinct !{!4090, !4059, !4091}
!4091 = !DILocation(line: 463, column: 3, scope: !4060)
!4092 = !DILocation(line: 464, column: 4, scope: !4051)
!4093 = distinct !{!4093, !4046, !4094}
!4094 = !DILocation(line: 464, column: 4, scope: !4047)
!4095 = !DILocation(line: 466, column: 7, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4033, file: !3, line: 466, column: 7)
!4097 = !DILocation(line: 466, column: 7, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 466, column: 7)
!4099 = !DILocation(line: 467, column: 22, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 467, column: 6)
!4101 = !DILocation(line: 467, column: 7, scope: !4100)
!4102 = !DILocation(line: 467, column: 6, scope: !4098)
!4103 = !DILocation(line: 469, column: 10, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 469, column: 10)
!4105 = distinct !DILexicalBlock(scope: !4100, file: !3, line: 468, column: 4)
!4106 = !DILocation(line: 469, column: 10, scope: !4105)
!4107 = !DILocation(line: 470, column: 17, scope: !4104)
!4108 = !DILocation(line: 470, column: 69, scope: !4104)
!4109 = !DILocation(line: 470, column: 75, scope: !4104)
!4110 = !DILocation(line: 470, column: 8, scope: !4104)
!4111 = !DILocation(line: 471, column: 46, scope: !4105)
!4112 = !DILocation(line: 471, column: 52, scope: !4105)
!4113 = !DILocation(line: 471, column: 59, scope: !4105)
!4114 = !DILocation(line: 471, column: 6, scope: !4105)
!4115 = !DILocation(line: 472, column: 4, scope: !4105)
!4116 = !DILocation(line: 467, column: 26, scope: !4100)
!4117 = distinct !{!4117, !4095, !4118}
!4118 = !DILocation(line: 472, column: 4, scope: !4096)
!4119 = !DILocation(line: 473, column: 7, scope: !4033)
!4120 = !DILocation(line: 474, column: 5, scope: !4033)
!4121 = !DILocation(line: 475, column: 1, scope: !3954)
!4122 = distinct !DISubprogram(name: "propagate_necessity", scope: !3, file: !3, line: 628, type: !3932, scopeLine: 629, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4123 = !DILocalVariable(name: "el", arg: 1, scope: !4122, file: !3, line: 628, type: !3791)
!4124 = !DILocation(line: 628, column: 40, scope: !4122)
!4125 = !DILocalVariable(name: "stmt", scope: !4122, file: !3, line: 630, type: !1434)
!4126 = !DILocation(line: 630, column: 10, scope: !4122)
!4127 = !DILocalVariable(name: "aggressive", scope: !4122, file: !3, line: 631, type: !1735)
!4128 = !DILocation(line: 631, column: 8, scope: !4122)
!4129 = !DILocation(line: 631, column: 22, scope: !4122)
!4130 = !DILocation(line: 631, column: 21, scope: !4122)
!4131 = !DILocation(line: 633, column: 7, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 633, column: 7)
!4133 = !DILocation(line: 633, column: 17, scope: !4132)
!4134 = !DILocation(line: 633, column: 21, scope: !4132)
!4135 = !DILocation(line: 633, column: 32, scope: !4132)
!4136 = !DILocation(line: 633, column: 7, scope: !4122)
!4137 = !DILocation(line: 634, column: 14, scope: !4132)
!4138 = !DILocation(line: 634, column: 5, scope: !4132)
!4139 = !DILocation(line: 636, column: 3, scope: !4122)
!4140 = !DILocation(line: 636, column: 10, scope: !4122)
!4141 = !DILocation(line: 636, column: 40, scope: !4122)
!4142 = !DILocation(line: 639, column: 14, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 637, column: 5)
!4144 = !DILocation(line: 639, column: 12, scope: !4143)
!4145 = !DILocation(line: 641, column: 11, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 641, column: 11)
!4147 = !DILocation(line: 641, column: 21, scope: !4146)
!4148 = !DILocation(line: 641, column: 25, scope: !4146)
!4149 = !DILocation(line: 641, column: 36, scope: !4146)
!4150 = !DILocation(line: 641, column: 11, scope: !4143)
!4151 = !DILocation(line: 643, column: 13, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4146, file: !3, line: 642, column: 2)
!4153 = !DILocation(line: 643, column: 4, scope: !4152)
!4154 = !DILocation(line: 644, column: 23, scope: !4152)
!4155 = !DILocation(line: 644, column: 34, scope: !4152)
!4156 = !DILocation(line: 644, column: 4, scope: !4152)
!4157 = !DILocation(line: 645, column: 13, scope: !4152)
!4158 = !DILocation(line: 645, column: 4, scope: !4152)
!4159 = !DILocation(line: 646, column: 2, scope: !4152)
!4160 = !DILocation(line: 648, column: 11, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 648, column: 11)
!4162 = !DILocation(line: 648, column: 11, scope: !4143)
!4163 = !DILocalVariable(name: "bb", scope: !4164, file: !3, line: 653, type: !1885)
!4164 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 649, column: 2)
!4165 = !DILocation(line: 653, column: 16, scope: !4164)
!4166 = !DILocation(line: 653, column: 32, scope: !4164)
!4167 = !DILocation(line: 653, column: 21, scope: !4164)
!4168 = !DILocation(line: 654, column: 8, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4164, file: !3, line: 654, column: 8)
!4170 = !DILocation(line: 654, column: 14, scope: !4169)
!4171 = !DILocation(line: 654, column: 11, scope: !4169)
!4172 = !DILocation(line: 655, column: 8, scope: !4169)
!4173 = !DILocation(line: 655, column: 13, scope: !4169)
!4174 = !DILocation(line: 654, column: 8, scope: !4164)
!4175 = !DILocation(line: 657, column: 17, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4169, file: !3, line: 656, column: 6)
!4177 = !DILocation(line: 657, column: 42, scope: !4176)
!4178 = !DILocation(line: 657, column: 46, scope: !4176)
!4179 = !DILocation(line: 657, column: 8, scope: !4176)
!4180 = !DILocation(line: 658, column: 48, scope: !4176)
!4181 = !DILocation(line: 658, column: 52, scope: !4176)
!4182 = !DILocation(line: 658, column: 8, scope: !4176)
!4183 = !DILocation(line: 659, column: 6, scope: !4176)
!4184 = !DILocation(line: 660, column: 2, scope: !4164)
!4185 = !DILocation(line: 662, column: 24, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 662, column: 11)
!4187 = !DILocation(line: 662, column: 11, scope: !4186)
!4188 = !DILocation(line: 662, column: 30, scope: !4186)
!4189 = !DILocation(line: 665, column: 4, scope: !4186)
!4190 = !DILocation(line: 665, column: 41, scope: !4186)
!4191 = !DILocation(line: 665, column: 22, scope: !4186)
!4192 = !DILocation(line: 665, column: 7, scope: !4186)
!4193 = !DILocation(line: 662, column: 11, scope: !4143)
!4194 = !DILocalVariable(name: "k", scope: !4195, file: !3, line: 673, type: !1943)
!4195 = distinct !DILexicalBlock(scope: !4186, file: !3, line: 666, column: 2)
!4196 = !DILocation(line: 673, column: 11, scope: !4195)
!4197 = !DILocation(line: 675, column: 11, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4195, file: !3, line: 675, column: 4)
!4199 = !DILocation(line: 675, column: 9, scope: !4198)
!4200 = !DILocation(line: 675, column: 16, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4198, file: !3, line: 675, column: 4)
!4202 = !DILocation(line: 675, column: 41, scope: !4201)
!4203 = !DILocation(line: 675, column: 20, scope: !4201)
!4204 = !DILocation(line: 675, column: 18, scope: !4201)
!4205 = !DILocation(line: 675, column: 4, scope: !4198)
!4206 = !DILocalVariable(name: "arg", scope: !4207, file: !3, line: 677, type: !1622)
!4207 = distinct !DILexicalBlock(scope: !4201, file: !3, line: 676, column: 13)
!4208 = !DILocation(line: 677, column: 13, scope: !4207)
!4209 = !DILocation(line: 677, column: 19, scope: !4207)
!4210 = !DILocation(line: 678, column: 12, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 678, column: 12)
!4212 = !DILocation(line: 678, column: 28, scope: !4211)
!4213 = !DILocation(line: 678, column: 12, scope: !4207)
!4214 = !DILocation(line: 679, column: 27, scope: !4211)
!4215 = !DILocation(line: 679, column: 3, scope: !4211)
!4216 = !DILocation(line: 680, column: 6, scope: !4207)
!4217 = !DILocation(line: 675, column: 49, scope: !4201)
!4218 = !DILocation(line: 675, column: 4, scope: !4201)
!4219 = distinct !{!4219, !4205, !4220}
!4220 = !DILocation(line: 680, column: 6, scope: !4198)
!4221 = !DILocation(line: 682, column: 8, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4195, file: !3, line: 682, column: 8)
!4223 = !DILocation(line: 682, column: 19, scope: !4222)
!4224 = !DILocation(line: 682, column: 41, scope: !4222)
!4225 = !DILocation(line: 682, column: 23, scope: !4222)
!4226 = !DILocation(line: 682, column: 8, scope: !4195)
!4227 = !DILocation(line: 684, column: 15, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4229, file: !3, line: 684, column: 8)
!4229 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 683, column: 6)
!4230 = !DILocation(line: 684, column: 13, scope: !4228)
!4231 = !DILocation(line: 684, column: 20, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 684, column: 8)
!4233 = !DILocation(line: 684, column: 45, scope: !4232)
!4234 = !DILocation(line: 684, column: 24, scope: !4232)
!4235 = !DILocation(line: 684, column: 22, scope: !4232)
!4236 = !DILocation(line: 684, column: 8, scope: !4228)
!4237 = !DILocalVariable(name: "arg_bb", scope: !4238, file: !3, line: 686, type: !1885)
!4238 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 685, column: 3)
!4239 = !DILocation(line: 686, column: 17, scope: !4238)
!4240 = !DILocation(line: 686, column: 47, scope: !4238)
!4241 = !DILocation(line: 686, column: 53, scope: !4238)
!4242 = !DILocation(line: 686, column: 26, scope: !4238)
!4243 = !DILocation(line: 686, column: 57, scope: !4238)
!4244 = !DILocation(line: 687, column: 9, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4238, file: !3, line: 687, column: 9)
!4246 = !DILocation(line: 687, column: 19, scope: !4245)
!4247 = !DILocation(line: 687, column: 16, scope: !4245)
!4248 = !DILocation(line: 688, column: 9, scope: !4245)
!4249 = !DILocation(line: 688, column: 14, scope: !4245)
!4250 = !DILocation(line: 687, column: 9, scope: !4238)
!4251 = !DILocation(line: 690, column: 18, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 689, column: 7)
!4253 = !DILocation(line: 690, column: 43, scope: !4252)
!4254 = !DILocation(line: 690, column: 51, scope: !4252)
!4255 = !DILocation(line: 690, column: 9, scope: !4252)
!4256 = !DILocation(line: 691, column: 49, scope: !4252)
!4257 = !DILocation(line: 691, column: 57, scope: !4252)
!4258 = !DILocation(line: 691, column: 9, scope: !4252)
!4259 = !DILocation(line: 692, column: 7, scope: !4252)
!4260 = !DILocation(line: 693, column: 3, scope: !4238)
!4261 = !DILocation(line: 684, column: 53, scope: !4232)
!4262 = !DILocation(line: 684, column: 8, scope: !4232)
!4263 = distinct !{!4263, !4236, !4264}
!4264 = !DILocation(line: 693, column: 3, scope: !4228)
!4265 = !DILocation(line: 694, column: 6, scope: !4229)
!4266 = !DILocation(line: 695, column: 2, scope: !4195)
!4267 = !DILocalVariable(name: "iter", scope: !4268, file: !3, line: 701, type: !3185)
!4268 = distinct !DILexicalBlock(scope: !4186, file: !3, line: 697, column: 2)
!4269 = !DILocation(line: 701, column: 16, scope: !4268)
!4270 = !DILocalVariable(name: "use", scope: !4268, file: !3, line: 702, type: !1622)
!4271 = !DILocation(line: 702, column: 9, scope: !4268)
!4272 = !DILocation(line: 704, column: 4, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 704, column: 4)
!4274 = !DILocation(line: 704, column: 4, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 704, column: 4)
!4276 = !DILocation(line: 705, column: 30, scope: !4275)
!4277 = !DILocation(line: 705, column: 6, scope: !4275)
!4278 = distinct !{!4278, !4272, !4279}
!4279 = !DILocation(line: 705, column: 33, scope: !4273)
!4280 = !DILocation(line: 707, column: 23, scope: !4268)
!4281 = !DILocation(line: 707, column: 10, scope: !4268)
!4282 = !DILocation(line: 707, column: 8, scope: !4268)
!4283 = !DILocation(line: 708, column: 9, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 708, column: 8)
!4285 = !DILocation(line: 708, column: 8, scope: !4268)
!4286 = !DILocation(line: 709, column: 6, scope: !4284)
!4287 = distinct !{!4287, !4139, !4288}
!4288 = !DILocation(line: 824, column: 5, scope: !4122)
!4289 = !DILocation(line: 713, column: 8, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 713, column: 8)
!4291 = !DILocation(line: 713, column: 8, scope: !4268)
!4292 = !DILocation(line: 715, column: 42, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 714, column: 6)
!4294 = !DILocation(line: 715, column: 8, scope: !4293)
!4295 = !DILocation(line: 716, column: 8, scope: !4293)
!4296 = !DILocation(line: 732, column: 24, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 732, column: 8)
!4298 = !DILocation(line: 732, column: 8, scope: !4297)
!4299 = !DILocation(line: 732, column: 8, scope: !4268)
!4300 = !DILocalVariable(name: "callee", scope: !4301, file: !3, line: 734, type: !1622)
!4301 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 733, column: 6)
!4302 = !DILocation(line: 734, column: 13, scope: !4301)
!4303 = !DILocation(line: 734, column: 42, scope: !4301)
!4304 = !DILocation(line: 734, column: 22, scope: !4301)
!4305 = !DILocalVariable(name: "i", scope: !4301, file: !3, line: 735, type: !7)
!4306 = !DILocation(line: 735, column: 17, scope: !4301)
!4307 = !DILocation(line: 740, column: 12, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 740, column: 12)
!4309 = !DILocation(line: 740, column: 19, scope: !4308)
!4310 = !DILocation(line: 741, column: 5, scope: !4308)
!4311 = !DILocation(line: 741, column: 8, scope: !4308)
!4312 = !DILocation(line: 741, column: 37, scope: !4308)
!4313 = !DILocation(line: 742, column: 5, scope: !4308)
!4314 = !DILocation(line: 742, column: 9, scope: !4308)
!4315 = !DILocation(line: 742, column: 37, scope: !4308)
!4316 = !DILocation(line: 743, column: 9, scope: !4308)
!4317 = !DILocation(line: 743, column: 12, scope: !4308)
!4318 = !DILocation(line: 743, column: 40, scope: !4308)
!4319 = !DILocation(line: 744, column: 9, scope: !4308)
!4320 = !DILocation(line: 744, column: 12, scope: !4308)
!4321 = !DILocation(line: 744, column: 40, scope: !4308)
!4322 = !DILocation(line: 740, column: 12, scope: !4301)
!4323 = !DILocation(line: 745, column: 3, scope: !4308)
!4324 = !DILocation(line: 749, column: 42, scope: !4301)
!4325 = !DILocation(line: 749, column: 8, scope: !4301)
!4326 = !DILocation(line: 750, column: 15, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 750, column: 8)
!4328 = !DILocation(line: 750, column: 13, scope: !4327)
!4329 = !DILocation(line: 750, column: 20, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 750, column: 8)
!4331 = !DILocation(line: 750, column: 46, scope: !4330)
!4332 = !DILocation(line: 750, column: 24, scope: !4330)
!4333 = !DILocation(line: 750, column: 22, scope: !4330)
!4334 = !DILocation(line: 750, column: 8, scope: !4327)
!4335 = !DILocalVariable(name: "arg", scope: !4336, file: !3, line: 752, type: !1622)
!4336 = distinct !DILexicalBlock(scope: !4330, file: !3, line: 751, column: 3)
!4337 = !DILocation(line: 752, column: 10, scope: !4336)
!4338 = !DILocation(line: 752, column: 33, scope: !4336)
!4339 = !DILocation(line: 752, column: 39, scope: !4336)
!4340 = !DILocation(line: 752, column: 16, scope: !4336)
!4341 = !DILocation(line: 753, column: 9, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 753, column: 9)
!4343 = !DILocation(line: 753, column: 25, scope: !4342)
!4344 = !DILocation(line: 754, column: 9, scope: !4342)
!4345 = !DILocation(line: 754, column: 37, scope: !4342)
!4346 = !DILocation(line: 754, column: 12, scope: !4342)
!4347 = !DILocation(line: 753, column: 9, scope: !4336)
!4348 = !DILocation(line: 755, column: 7, scope: !4342)
!4349 = !DILocation(line: 756, column: 30, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 756, column: 9)
!4351 = !DILocation(line: 756, column: 10, scope: !4350)
!4352 = !DILocation(line: 756, column: 9, scope: !4336)
!4353 = !DILocation(line: 757, column: 45, scope: !4350)
!4354 = !DILocation(line: 757, column: 51, scope: !4350)
!4355 = !DILocation(line: 757, column: 7, scope: !4350)
!4356 = !DILocation(line: 758, column: 3, scope: !4336)
!4357 = !DILocation(line: 750, column: 53, scope: !4330)
!4358 = !DILocation(line: 750, column: 8, scope: !4330)
!4359 = distinct !{!4359, !4334, !4360}
!4360 = !DILocation(line: 758, column: 3, scope: !4327)
!4361 = !DILocation(line: 759, column: 6, scope: !4301)
!4362 = !DILocation(line: 760, column: 37, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 760, column: 13)
!4364 = !DILocation(line: 760, column: 13, scope: !4363)
!4365 = !DILocation(line: 760, column: 13, scope: !4297)
!4366 = !DILocalVariable(name: "rhs", scope: !4367, file: !3, line: 762, type: !1622)
!4367 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 761, column: 6)
!4368 = !DILocation(line: 762, column: 13, scope: !4367)
!4369 = !DILocalVariable(name: "rhs_aliased", scope: !4367, file: !3, line: 763, type: !1735)
!4370 = !DILocation(line: 763, column: 13, scope: !4367)
!4371 = !DILocation(line: 765, column: 34, scope: !4367)
!4372 = !DILocation(line: 765, column: 14, scope: !4367)
!4373 = !DILocation(line: 765, column: 12, scope: !4367)
!4374 = !DILocation(line: 766, column: 12, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 766, column: 12)
!4376 = !DILocation(line: 766, column: 28, scope: !4375)
!4377 = !DILocation(line: 767, column: 5, scope: !4375)
!4378 = !DILocation(line: 767, column: 34, scope: !4375)
!4379 = !DILocation(line: 767, column: 9, scope: !4375)
!4380 = !DILocation(line: 766, column: 12, scope: !4367)
!4381 = !DILocation(line: 769, column: 30, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 769, column: 9)
!4383 = distinct !DILexicalBlock(scope: !4375, file: !3, line: 768, column: 3)
!4384 = !DILocation(line: 769, column: 10, scope: !4382)
!4385 = !DILocation(line: 769, column: 9, scope: !4383)
!4386 = !DILocation(line: 770, column: 45, scope: !4382)
!4387 = !DILocation(line: 770, column: 51, scope: !4382)
!4388 = !DILocation(line: 770, column: 7, scope: !4382)
!4389 = !DILocation(line: 772, column: 19, scope: !4382)
!4390 = !DILocation(line: 773, column: 3, scope: !4383)
!4391 = !DILocation(line: 774, column: 12, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 774, column: 12)
!4393 = !DILocation(line: 774, column: 12, scope: !4367)
!4394 = !DILocation(line: 775, column: 37, scope: !4392)
!4395 = !DILocation(line: 775, column: 3, scope: !4392)
!4396 = !DILocation(line: 776, column: 6, scope: !4367)
!4397 = !DILocation(line: 777, column: 26, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 777, column: 13)
!4399 = !DILocation(line: 777, column: 13, scope: !4398)
!4400 = !DILocation(line: 777, column: 32, scope: !4398)
!4401 = !DILocation(line: 777, column: 13, scope: !4363)
!4402 = !DILocalVariable(name: "rhs", scope: !4403, file: !3, line: 779, type: !1622)
!4403 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 778, column: 6)
!4404 = !DILocation(line: 779, column: 13, scope: !4403)
!4405 = !DILocation(line: 779, column: 41, scope: !4403)
!4406 = !DILocation(line: 779, column: 19, scope: !4403)
!4407 = !DILocation(line: 781, column: 12, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 781, column: 12)
!4409 = !DILocation(line: 781, column: 28, scope: !4408)
!4410 = !DILocation(line: 782, column: 5, scope: !4408)
!4411 = !DILocation(line: 782, column: 34, scope: !4408)
!4412 = !DILocation(line: 782, column: 9, scope: !4408)
!4413 = !DILocation(line: 781, column: 12, scope: !4403)
!4414 = !DILocation(line: 784, column: 30, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 784, column: 9)
!4416 = distinct !DILexicalBlock(scope: !4408, file: !3, line: 783, column: 3)
!4417 = !DILocation(line: 784, column: 10, scope: !4415)
!4418 = !DILocation(line: 784, column: 9, scope: !4416)
!4419 = !DILocation(line: 785, column: 45, scope: !4415)
!4420 = !DILocation(line: 785, column: 51, scope: !4415)
!4421 = !DILocation(line: 785, column: 7, scope: !4415)
!4422 = !DILocation(line: 787, column: 41, scope: !4415)
!4423 = !DILocation(line: 787, column: 7, scope: !4415)
!4424 = !DILocation(line: 788, column: 3, scope: !4416)
!4425 = !DILocation(line: 789, column: 6, scope: !4403)
!4426 = !DILocation(line: 790, column: 26, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 790, column: 13)
!4428 = !DILocation(line: 790, column: 13, scope: !4427)
!4429 = !DILocation(line: 790, column: 32, scope: !4427)
!4430 = !DILocation(line: 790, column: 13, scope: !4398)
!4431 = !DILocalVariable(name: "i", scope: !4432, file: !3, line: 792, type: !7)
!4432 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 791, column: 6)
!4433 = !DILocation(line: 792, column: 17, scope: !4432)
!4434 = !DILocation(line: 793, column: 42, scope: !4432)
!4435 = !DILocation(line: 793, column: 8, scope: !4432)
!4436 = !DILocation(line: 795, column: 15, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 795, column: 8)
!4438 = !DILocation(line: 795, column: 13, scope: !4437)
!4439 = !DILocation(line: 795, column: 20, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 795, column: 8)
!4441 = !DILocation(line: 795, column: 44, scope: !4440)
!4442 = !DILocation(line: 795, column: 24, scope: !4440)
!4443 = !DILocation(line: 795, column: 22, scope: !4440)
!4444 = !DILocation(line: 795, column: 8, scope: !4437)
!4445 = !DILocalVariable(name: "op", scope: !4446, file: !3, line: 797, type: !1622)
!4446 = distinct !DILexicalBlock(scope: !4440, file: !3, line: 796, column: 3)
!4447 = !DILocation(line: 797, column: 10, scope: !4446)
!4448 = !DILocation(line: 797, column: 15, scope: !4446)
!4449 = !DILocation(line: 798, column: 9, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4446, file: !3, line: 798, column: 9)
!4451 = !DILocation(line: 798, column: 24, scope: !4450)
!4452 = !DILocation(line: 799, column: 9, scope: !4450)
!4453 = !DILocation(line: 799, column: 38, scope: !4450)
!4454 = !DILocation(line: 799, column: 13, scope: !4450)
!4455 = !DILocation(line: 800, column: 9, scope: !4450)
!4456 = !DILocation(line: 800, column: 33, scope: !4450)
!4457 = !DILocation(line: 800, column: 13, scope: !4450)
!4458 = !DILocation(line: 798, column: 9, scope: !4446)
!4459 = !DILocation(line: 801, column: 45, scope: !4450)
!4460 = !DILocation(line: 801, column: 51, scope: !4450)
!4461 = !DILocation(line: 801, column: 7, scope: !4450)
!4462 = !DILocation(line: 802, column: 3, scope: !4446)
!4463 = !DILocation(line: 795, column: 51, scope: !4440)
!4464 = !DILocation(line: 795, column: 8, scope: !4440)
!4465 = distinct !{!4465, !4444, !4466}
!4466 = !DILocation(line: 802, column: 3, scope: !4437)
!4467 = !DILocation(line: 803, column: 6, scope: !4432)
!4468 = !DILocation(line: 805, column: 6, scope: !4427)
!4469 = !DILocation(line: 813, column: 8, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 813, column: 8)
!4471 = !DILocation(line: 813, column: 20, scope: !4470)
!4472 = !DILocation(line: 815, column: 8, scope: !4470)
!4473 = !DILocation(line: 815, column: 11, scope: !4470)
!4474 = !DILocation(line: 815, column: 30, scope: !4470)
!4475 = !DILocation(line: 815, column: 28, scope: !4470)
!4476 = !DILocation(line: 815, column: 23, scope: !4470)
!4477 = !DILocation(line: 817, column: 8, scope: !4470)
!4478 = !DILocation(line: 817, column: 11, scope: !4470)
!4479 = !DILocation(line: 817, column: 25, scope: !4470)
!4480 = !DILocation(line: 817, column: 34, scope: !4470)
!4481 = !DILocation(line: 817, column: 23, scope: !4470)
!4482 = !DILocation(line: 813, column: 8, scope: !4268)
!4483 = !DILocation(line: 819, column: 19, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 818, column: 6)
!4485 = !DILocation(line: 820, column: 12, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 820, column: 12)
!4487 = !DILocation(line: 820, column: 12, scope: !4484)
!4488 = !DILocation(line: 821, column: 17, scope: !4486)
!4489 = !DILocation(line: 821, column: 3, scope: !4486)
!4490 = !DILocation(line: 822, column: 6, scope: !4484)
!4491 = !DILocation(line: 825, column: 1, scope: !4122)
!4492 = distinct !DISubprogram(name: "eliminate_unnecessary_stmts", scope: !3, file: !3, line: 1054, type: !2818, scopeLine: 1055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4493 = !DILocalVariable(name: "something_changed", scope: !4492, file: !3, line: 1056, type: !1735)
!4494 = !DILocation(line: 1056, column: 8, scope: !4492)
!4495 = !DILocalVariable(name: "bb", scope: !4492, file: !3, line: 1057, type: !1885)
!4496 = !DILocation(line: 1057, column: 15, scope: !4492)
!4497 = !DILocalVariable(name: "gsi", scope: !4492, file: !3, line: 1058, type: !3960)
!4498 = !DILocation(line: 1058, column: 24, scope: !4492)
!4499 = !DILocalVariable(name: "psi", scope: !4492, file: !3, line: 1058, type: !3960)
!4500 = !DILocation(line: 1058, column: 29, scope: !4492)
!4501 = !DILocalVariable(name: "stmt", scope: !4492, file: !3, line: 1059, type: !1434)
!4502 = !DILocation(line: 1059, column: 10, scope: !4492)
!4503 = !DILocalVariable(name: "call", scope: !4492, file: !3, line: 1060, type: !1622)
!4504 = !DILocation(line: 1060, column: 8, scope: !4492)
!4505 = !DILocalVariable(name: "h", scope: !4492, file: !3, line: 1061, type: !4506)
!4506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4507, size: 64)
!4507 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !135, line: 283, baseType: !4508)
!4508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !135, line: 283, size: 128, elements: !4509)
!4509 = !{!4510}
!4510 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4508, file: !135, line: 283, baseType: !1893, size: 128)
!4511 = !DILocation(line: 1061, column: 28, scope: !4492)
!4512 = !DILocation(line: 1063, column: 7, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 1063, column: 7)
!4514 = !DILocation(line: 1063, column: 17, scope: !4513)
!4515 = !DILocation(line: 1063, column: 21, scope: !4513)
!4516 = !DILocation(line: 1063, column: 32, scope: !4513)
!4517 = !DILocation(line: 1063, column: 7, scope: !4492)
!4518 = !DILocation(line: 1064, column: 14, scope: !4513)
!4519 = !DILocation(line: 1064, column: 5, scope: !4513)
!4520 = !DILocation(line: 1066, column: 3, scope: !4492)
!4521 = !DILocation(line: 1090, column: 3, scope: !4492)
!4522 = !DILocation(line: 1091, column: 62, scope: !4492)
!4523 = !DILocation(line: 1091, column: 49, scope: !4492)
!4524 = !DILocation(line: 1091, column: 7, scope: !4492)
!4525 = !DILocation(line: 1091, column: 5, scope: !4492)
!4526 = !DILocation(line: 1093, column: 3, scope: !4492)
!4527 = !DILocation(line: 1093, column: 10, scope: !4492)
!4528 = !DILocation(line: 1095, column: 12, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 1094, column: 5)
!4530 = !DILocation(line: 1095, column: 10, scope: !4529)
!4531 = !DILocation(line: 1098, column: 31, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1098, column: 7)
!4533 = !DILocation(line: 1098, column: 18, scope: !4532)
!4534 = !DILocation(line: 1098, column: 12, scope: !4532)
!4535 = !DILocation(line: 1098, column: 37, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 1098, column: 7)
!4537 = !DILocation(line: 1098, column: 36, scope: !4536)
!4538 = !DILocation(line: 1098, column: 7, scope: !4532)
!4539 = !DILocation(line: 1100, column: 11, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 1099, column: 2)
!4541 = !DILocation(line: 1100, column: 9, scope: !4540)
!4542 = !DILocation(line: 1102, column: 10, scope: !4540)
!4543 = !DILocation(line: 1103, column: 4, scope: !4540)
!4544 = !DILocation(line: 1105, column: 15, scope: !4540)
!4545 = !DILocation(line: 1108, column: 21, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4540, file: !3, line: 1108, column: 8)
!4547 = !DILocation(line: 1108, column: 9, scope: !4546)
!4548 = !DILocation(line: 1108, column: 8, scope: !4540)
!4549 = !DILocation(line: 1110, column: 30, scope: !4550)
!4550 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 1110, column: 12)
!4551 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1109, column: 6)
!4552 = !DILocation(line: 1110, column: 13, scope: !4550)
!4553 = !DILocation(line: 1110, column: 12, scope: !4551)
!4554 = !DILocation(line: 1111, column: 21, scope: !4550)
!4555 = !DILocation(line: 1111, column: 3, scope: !4550)
!4556 = !DILocation(line: 1112, column: 32, scope: !4551)
!4557 = !DILocation(line: 1112, column: 8, scope: !4551)
!4558 = !DILocation(line: 1113, column: 6, scope: !4551)
!4559 = !DILocation(line: 1114, column: 29, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1114, column: 13)
!4561 = !DILocation(line: 1114, column: 13, scope: !4560)
!4562 = !DILocation(line: 1114, column: 13, scope: !4546)
!4563 = !DILocation(line: 1116, column: 35, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 1115, column: 6)
!4565 = !DILocation(line: 1116, column: 15, scope: !4564)
!4566 = !DILocation(line: 1116, column: 13, scope: !4564)
!4567 = !DILocation(line: 1117, column: 12, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4564, file: !3, line: 1117, column: 12)
!4569 = !DILocation(line: 1117, column: 12, scope: !4564)
!4570 = !DILocalVariable(name: "name", scope: !4571, file: !3, line: 1119, type: !1622)
!4571 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 1118, column: 3)
!4572 = !DILocation(line: 1119, column: 10, scope: !4571)
!4573 = !DILocation(line: 1123, column: 29, scope: !4571)
!4574 = !DILocation(line: 1123, column: 12, scope: !4571)
!4575 = !DILocation(line: 1123, column: 10, scope: !4571)
!4576 = !DILocation(line: 1124, column: 9, scope: !4577)
!4577 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 1124, column: 9)
!4578 = !DILocation(line: 1124, column: 14, scope: !4577)
!4579 = !DILocation(line: 1124, column: 17, scope: !4577)
!4580 = !DILocation(line: 1124, column: 34, scope: !4577)
!4581 = !DILocation(line: 1125, column: 14, scope: !4577)
!4582 = !DILocation(line: 1125, column: 18, scope: !4577)
!4583 = !DILocation(line: 1124, column: 9, scope: !4571)
!4584 = !DILocation(line: 1127, column: 27, scope: !4585)
!4585 = distinct !DILexicalBlock(scope: !4577, file: !3, line: 1126, column: 7)
!4586 = !DILocation(line: 1128, column: 13, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4585, file: !3, line: 1128, column: 13)
!4588 = !DILocation(line: 1128, column: 23, scope: !4587)
!4589 = !DILocation(line: 1128, column: 27, scope: !4587)
!4590 = !DILocation(line: 1128, column: 38, scope: !4587)
!4591 = !DILocation(line: 1128, column: 13, scope: !4585)
!4592 = !DILocation(line: 1130, column: 15, scope: !4593)
!4593 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 1129, column: 4)
!4594 = !DILocation(line: 1130, column: 6, scope: !4593)
!4595 = !DILocation(line: 1131, column: 25, scope: !4593)
!4596 = !DILocation(line: 1131, column: 36, scope: !4593)
!4597 = !DILocation(line: 1131, column: 6, scope: !4593)
!4598 = !DILocation(line: 1132, column: 15, scope: !4593)
!4599 = !DILocation(line: 1132, column: 6, scope: !4593)
!4600 = !DILocation(line: 1133, column: 4, scope: !4593)
!4601 = !DILocation(line: 1135, column: 30, scope: !4585)
!4602 = !DILocation(line: 1135, column: 9, scope: !4585)
!4603 = !DILocation(line: 1136, column: 41, scope: !4585)
!4604 = !DILocation(line: 1136, column: 47, scope: !4585)
!4605 = !DILocation(line: 1136, column: 9, scope: !4585)
!4606 = !DILocation(line: 1137, column: 22, scope: !4585)
!4607 = !DILocation(line: 1137, column: 9, scope: !4585)
!4608 = !DILocation(line: 1138, column: 27, scope: !4585)
!4609 = !DILocation(line: 1138, column: 9, scope: !4585)
!4610 = !DILocation(line: 1139, column: 7, scope: !4585)
!4611 = !DILocation(line: 1140, column: 27, scope: !4571)
!4612 = !DILocation(line: 1140, column: 5, scope: !4571)
!4613 = !DILocation(line: 1141, column: 3, scope: !4571)
!4614 = !DILocation(line: 1142, column: 6, scope: !4564)
!4615 = !DILocation(line: 1143, column: 2, scope: !4540)
!4616 = !DILocation(line: 1098, column: 60, scope: !4536)
!4617 = !DILocation(line: 1098, column: 7, scope: !4536)
!4618 = distinct !{!4618, !4538, !4619}
!4619 = !DILocation(line: 1143, column: 2, scope: !4532)
!4620 = distinct !{!4620, !4526, !4621}
!4621 = !DILocation(line: 1144, column: 5, scope: !4492)
!4622 = !DILocation(line: 1146, column: 3, scope: !4492)
!4623 = !DILocation(line: 1151, column: 7, scope: !4624)
!4624 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 1151, column: 7)
!4625 = !DILocation(line: 1151, column: 7, scope: !4492)
!4626 = !DILocalVariable(name: "prev_bb", scope: !4627, file: !3, line: 1153, type: !1885)
!4627 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 1152, column: 5)
!4628 = !DILocation(line: 1153, column: 19, scope: !4627)
!4629 = !DILocation(line: 1155, column: 7, scope: !4627)
!4630 = !DILocation(line: 1158, column: 17, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4627, file: !3, line: 1158, column: 7)
!4632 = !DILocation(line: 1158, column: 33, scope: !4631)
!4633 = !DILocation(line: 1158, column: 15, scope: !4631)
!4634 = !DILocation(line: 1158, column: 12, scope: !4631)
!4635 = !DILocation(line: 1158, column: 42, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 1158, column: 7)
!4637 = !DILocation(line: 1158, column: 48, scope: !4636)
!4638 = !DILocation(line: 1158, column: 45, scope: !4636)
!4639 = !DILocation(line: 1158, column: 7, scope: !4631)
!4640 = !DILocation(line: 1160, column: 14, scope: !4641)
!4641 = distinct !DILexicalBlock(scope: !4636, file: !3, line: 1159, column: 2)
!4642 = !DILocation(line: 1160, column: 18, scope: !4641)
!4643 = !DILocation(line: 1160, column: 12, scope: !4641)
!4644 = !DILocation(line: 1162, column: 9, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 1162, column: 8)
!4646 = !DILocation(line: 1163, column: 8, scope: !4645)
!4647 = !DILocation(line: 1163, column: 13, scope: !4645)
!4648 = !DILocation(line: 1163, column: 17, scope: !4645)
!4649 = !DILocation(line: 1163, column: 23, scope: !4645)
!4650 = !DILocation(line: 1162, column: 8, scope: !4641)
!4651 = !DILocation(line: 1165, column: 35, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4653, file: !3, line: 1165, column: 8)
!4653 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 1164, column: 6)
!4654 = !DILocation(line: 1165, column: 19, scope: !4652)
!4655 = !DILocation(line: 1165, column: 13, scope: !4652)
!4656 = !DILocation(line: 1165, column: 41, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !4652, file: !3, line: 1165, column: 8)
!4658 = !DILocation(line: 1165, column: 40, scope: !4657)
!4659 = !DILocation(line: 1165, column: 8, scope: !4652)
!4660 = !DILocation(line: 1166, column: 42, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4657, file: !3, line: 1166, column: 7)
!4662 = !DILocation(line: 1166, column: 23, scope: !4661)
!4663 = !DILocation(line: 1166, column: 8, scope: !4661)
!4664 = !DILocation(line: 1166, column: 7, scope: !4657)
!4665 = !DILocalVariable(name: "found", scope: !4666, file: !3, line: 1168, type: !1735)
!4666 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 1167, column: 5)
!4667 = !DILocation(line: 1168, column: 12, scope: !4666)
!4668 = !DILocalVariable(name: "iter", scope: !4666, file: !3, line: 1169, type: !2893)
!4669 = !DILocation(line: 1169, column: 24, scope: !4666)
!4670 = !DILocation(line: 1171, column: 7, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 1171, column: 7)
!4672 = !DILocation(line: 1171, column: 7, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4671, file: !3, line: 1171, column: 7)
!4674 = !DILocation(line: 1173, column: 21, scope: !4675)
!4675 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 1173, column: 8)
!4676 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 1172, column: 9)
!4677 = !DILocation(line: 1173, column: 10, scope: !4675)
!4678 = !DILocation(line: 1173, column: 28, scope: !4675)
!4679 = !DILocation(line: 1173, column: 34, scope: !4675)
!4680 = !DILocation(line: 1173, column: 8, scope: !4676)
!4681 = !DILocation(line: 1174, column: 6, scope: !4675)
!4682 = !DILocation(line: 1175, column: 21, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 1175, column: 8)
!4684 = !DILocation(line: 1175, column: 8, scope: !4683)
!4685 = !DILocation(line: 1175, column: 27, scope: !4683)
!4686 = !DILocation(line: 1176, column: 8, scope: !4683)
!4687 = !DILocation(line: 1176, column: 23, scope: !4683)
!4688 = !DILocation(line: 1176, column: 11, scope: !4683)
!4689 = !DILocation(line: 1175, column: 8, scope: !4676)
!4690 = !DILocation(line: 1178, column: 14, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 1177, column: 6)
!4692 = !DILocation(line: 1179, column: 8, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 1179, column: 8)
!4694 = !DILocation(line: 1181, column: 9, scope: !4676)
!4695 = distinct !{!4695, !4670, !4696}
!4696 = !DILocation(line: 1181, column: 9, scope: !4671)
!4697 = !DILocation(line: 1182, column: 11, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 1182, column: 11)
!4699 = !DILocation(line: 1182, column: 11, scope: !4666)
!4700 = !DILocation(line: 1183, column: 47, scope: !4698)
!4701 = !DILocation(line: 1183, column: 9, scope: !4698)
!4702 = !DILocation(line: 1184, column: 5, scope: !4666)
!4703 = !DILocation(line: 1166, column: 57, scope: !4661)
!4704 = !DILocation(line: 1165, column: 58, scope: !4657)
!4705 = !DILocation(line: 1165, column: 8, scope: !4657)
!4706 = distinct !{!4706, !4659, !4707}
!4707 = !DILocation(line: 1184, column: 5, scope: !4652)
!4708 = !DILocation(line: 1186, column: 14, scope: !4709)
!4709 = distinct !DILexicalBlock(scope: !4653, file: !3, line: 1186, column: 12)
!4710 = !DILocation(line: 1186, column: 18, scope: !4709)
!4711 = !DILocation(line: 1186, column: 24, scope: !4709)
!4712 = !DILocation(line: 1186, column: 12, scope: !4653)
!4713 = !DILocation(line: 1192, column: 10, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4715, file: !3, line: 1192, column: 9)
!4715 = distinct !DILexicalBlock(scope: !4709, file: !3, line: 1187, column: 3)
!4716 = !DILocation(line: 1193, column: 9, scope: !4714)
!4717 = !DILocation(line: 1193, column: 44, scope: !4714)
!4718 = !DILocation(line: 1193, column: 13, scope: !4714)
!4719 = !DILocation(line: 1192, column: 9, scope: !4715)
!4720 = !DILocation(line: 1194, column: 27, scope: !4714)
!4721 = !DILocation(line: 1194, column: 7, scope: !4714)
!4722 = !DILocation(line: 1197, column: 55, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 1196, column: 7)
!4724 = !DILocation(line: 1197, column: 13, scope: !4723)
!4725 = !DILocation(line: 1197, column: 11, scope: !4723)
!4726 = !DILocation(line: 1199, column: 9, scope: !4723)
!4727 = !DILocation(line: 1199, column: 16, scope: !4723)
!4728 = !DILocation(line: 1201, column: 11, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4723, file: !3, line: 1200, column: 4)
!4730 = !DILocation(line: 1201, column: 9, scope: !4729)
!4731 = !DILocation(line: 1202, column: 16, scope: !4729)
!4732 = !DILocation(line: 1202, column: 20, scope: !4729)
!4733 = !DILocation(line: 1202, column: 14, scope: !4729)
!4734 = !DILocation(line: 1207, column: 13, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 1207, column: 10)
!4736 = !DILocation(line: 1207, column: 17, scope: !4735)
!4737 = !DILocation(line: 1207, column: 23, scope: !4735)
!4738 = !DILocation(line: 1207, column: 10, scope: !4729)
!4739 = !DILocation(line: 1208, column: 8, scope: !4735)
!4740 = distinct !{!4740, !4726, !4741}
!4741 = !DILocation(line: 1210, column: 4, scope: !4723)
!4742 = !DILocation(line: 1209, column: 26, scope: !4729)
!4743 = !DILocation(line: 1209, column: 6, scope: !4729)
!4744 = !DILocation(line: 1212, column: 9, scope: !4723)
!4745 = !DILocation(line: 1214, column: 3, scope: !4715)
!4746 = !DILocation(line: 1215, column: 6, scope: !4653)
!4747 = !DILocation(line: 1216, column: 2, scope: !4641)
!4748 = !DILocation(line: 1158, column: 70, scope: !4636)
!4749 = !DILocation(line: 1158, column: 68, scope: !4636)
!4750 = !DILocation(line: 1158, column: 7, scope: !4636)
!4751 = distinct !{!4751, !4639, !4752}
!4752 = !DILocation(line: 1216, column: 2, scope: !4631)
!4753 = !DILocation(line: 1217, column: 5, scope: !4627)
!4754 = !DILocation(line: 1218, column: 3, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 1218, column: 3)
!4756 = !DILocation(line: 1218, column: 3, scope: !4757)
!4757 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 1218, column: 3)
!4758 = !DILocation(line: 1221, column: 46, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 1219, column: 5)
!4760 = !DILocation(line: 1221, column: 28, scope: !4759)
!4761 = !DILocation(line: 1221, column: 25, scope: !4759)
!4762 = !DILocation(line: 1222, column: 5, scope: !4759)
!4763 = distinct !{!4763, !4754, !4764}
!4764 = !DILocation(line: 1222, column: 5, scope: !4755)
!4765 = !DILocation(line: 1224, column: 10, scope: !4492)
!4766 = !DILocation(line: 1224, column: 3, scope: !4492)
!4767 = distinct !DISubprogram(name: "print_stats", scope: !3, file: !3, line: 1231, type: !4768, scopeLine: 1232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4768 = !DISubroutineType(types: !4769)
!4769 = !{null}
!4770 = !DILocalVariable(name: "percg", scope: !4767, file: !3, line: 1233, type: !2805)
!4771 = !DILocation(line: 1233, column: 9, scope: !4767)
!4772 = !DILocation(line: 1235, column: 26, scope: !4767)
!4773 = !DILocation(line: 1235, column: 12, scope: !4767)
!4774 = !DILocation(line: 1235, column: 50, scope: !4767)
!4775 = !DILocation(line: 1235, column: 36, scope: !4767)
!4776 = !DILocation(line: 1235, column: 34, scope: !4767)
!4777 = !DILocation(line: 1235, column: 57, scope: !4767)
!4778 = !DILocation(line: 1235, column: 9, scope: !4767)
!4779 = !DILocation(line: 1236, column: 12, scope: !4767)
!4780 = !DILocation(line: 1237, column: 11, scope: !4767)
!4781 = !DILocation(line: 1237, column: 26, scope: !4767)
!4782 = !DILocation(line: 1237, column: 39, scope: !4767)
!4783 = !DILocation(line: 1237, column: 33, scope: !4767)
!4784 = !DILocation(line: 1236, column: 3, scope: !4767)
!4785 = !DILocation(line: 1239, column: 13, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 1239, column: 7)
!4787 = !DILocation(line: 1239, column: 24, scope: !4786)
!4788 = !DILocation(line: 1239, column: 7, scope: !4767)
!4789 = !DILocation(line: 1240, column: 11, scope: !4786)
!4790 = !DILocation(line: 1240, column: 5, scope: !4786)
!4791 = !DILocation(line: 1242, column: 28, scope: !4786)
!4792 = !DILocation(line: 1242, column: 14, scope: !4786)
!4793 = !DILocation(line: 1242, column: 57, scope: !4786)
!4794 = !DILocation(line: 1242, column: 43, scope: !4786)
!4795 = !DILocation(line: 1242, column: 41, scope: !4786)
!4796 = !DILocation(line: 1242, column: 69, scope: !4786)
!4797 = !DILocation(line: 1242, column: 11, scope: !4786)
!4798 = !DILocation(line: 1244, column: 12, scope: !4767)
!4799 = !DILocation(line: 1245, column: 11, scope: !4767)
!4800 = !DILocation(line: 1245, column: 31, scope: !4767)
!4801 = !DILocation(line: 1245, column: 49, scope: !4767)
!4802 = !DILocation(line: 1245, column: 43, scope: !4767)
!4803 = !DILocation(line: 1244, column: 3, scope: !4767)
!4804 = !DILocation(line: 1246, column: 1, scope: !4767)
!4805 = distinct !DISubprogram(name: "tree_dce_done", scope: !3, file: !3, line: 1279, type: !3881, scopeLine: 1280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4806 = !DILocalVariable(name: "aggressive", arg: 1, scope: !4805, file: !3, line: 1279, type: !1735)
!4807 = !DILocation(line: 1279, column: 21, scope: !4805)
!4808 = !DILocation(line: 1281, column: 7, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 1281, column: 7)
!4810 = !DILocation(line: 1281, column: 7, scope: !4805)
!4811 = !DILocalVariable(name: "i", scope: !4812, file: !3, line: 1283, type: !1524)
!4812 = distinct !DILexicalBlock(scope: !4809, file: !3, line: 1282, column: 5)
!4813 = !DILocation(line: 1283, column: 11, scope: !4812)
!4814 = !DILocation(line: 1285, column: 14, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 1285, column: 7)
!4816 = !DILocation(line: 1285, column: 12, scope: !4815)
!4817 = !DILocation(line: 1285, column: 19, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 1285, column: 7)
!4819 = !DILocation(line: 1285, column: 23, scope: !4818)
!4820 = !DILocation(line: 1285, column: 21, scope: !4818)
!4821 = !DILocation(line: 1285, column: 7, scope: !4815)
!4822 = !DILocation(line: 1286, column: 2, scope: !4818)
!4823 = !DILocation(line: 1285, column: 41, scope: !4818)
!4824 = !DILocation(line: 1285, column: 7, scope: !4818)
!4825 = distinct !{!4825, !4821, !4826}
!4826 = !DILocation(line: 1286, column: 2, scope: !4815)
!4827 = !DILocation(line: 1287, column: 13, scope: !4812)
!4828 = !DILocation(line: 1287, column: 7, scope: !4812)
!4829 = !DILocation(line: 1289, column: 7, scope: !4812)
!4830 = !DILocation(line: 1290, column: 7, scope: !4812)
!4831 = !DILocation(line: 1291, column: 7, scope: !4812)
!4832 = !DILocation(line: 1292, column: 30, scope: !4812)
!4833 = !DILocation(line: 1293, column: 5, scope: !4812)
!4834 = !DILocation(line: 1295, column: 3, scope: !4805)
!4835 = !DILocation(line: 1297, column: 3, scope: !4805)
!4836 = !DILocation(line: 1298, column: 1, scope: !4805)
!4837 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !164, file: !164, line: 182, type: !4838, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4838 = !DISubroutineType(types: !4839)
!4839 = !{!7, !4840}
!4840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4841, size: 64)
!4841 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1987)
!4842 = !DILocalVariable(name: "vec_", arg: 1, scope: !4837, file: !164, line: 182, type: !4840)
!4843 = !DILocation(line: 182, column: 1, scope: !4837)
!4844 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !581, file: !581, line: 34, type: !4845, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4845 = !DISubroutineType(types: !4846)
!4846 = !{!2785, !1524}
!4847 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4844, file: !581, line: 34, type: !1524)
!4848 = !DILocation(line: 34, column: 1, scope: !4844)
!4849 = distinct !DISubprogram(name: "find_control_dependence", scope: !3, file: !3, line: 163, type: !4850, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4850 = !DISubroutineType(types: !4851)
!4851 = !{null, !3791, !1524}
!4852 = !DILocalVariable(name: "el", arg: 1, scope: !4849, file: !3, line: 163, type: !3791)
!4853 = !DILocation(line: 163, column: 44, scope: !4849)
!4854 = !DILocalVariable(name: "edge_index", arg: 2, scope: !4849, file: !3, line: 163, type: !1524)
!4855 = !DILocation(line: 163, column: 52, scope: !4849)
!4856 = !DILocalVariable(name: "current_block", scope: !4849, file: !3, line: 165, type: !1885)
!4857 = !DILocation(line: 165, column: 15, scope: !4849)
!4858 = !DILocalVariable(name: "ending_block", scope: !4849, file: !3, line: 166, type: !1885)
!4859 = !DILocation(line: 166, column: 15, scope: !4849)
!4860 = !DILocation(line: 168, column: 3, scope: !4849)
!4861 = !DILocation(line: 170, column: 7, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4849, file: !3, line: 170, column: 7)
!4863 = !DILocation(line: 170, column: 46, scope: !4862)
!4864 = !DILocation(line: 170, column: 43, scope: !4862)
!4865 = !DILocation(line: 170, column: 7, scope: !4849)
!4866 = !DILocation(line: 171, column: 33, scope: !4862)
!4867 = !DILocation(line: 171, column: 20, scope: !4862)
!4868 = !DILocation(line: 171, column: 18, scope: !4862)
!4869 = !DILocation(line: 171, column: 5, scope: !4862)
!4870 = !DILocation(line: 173, column: 31, scope: !4862)
!4871 = !DILocation(line: 173, column: 20, scope: !4862)
!4872 = !DILocation(line: 173, column: 18, scope: !4862)
!4873 = !DILocation(line: 175, column: 24, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4849, file: !3, line: 175, column: 3)
!4875 = !DILocation(line: 175, column: 22, scope: !4874)
!4876 = !DILocation(line: 175, column: 8, scope: !4874)
!4877 = !DILocation(line: 176, column: 8, scope: !4878)
!4878 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 175, column: 3)
!4879 = !DILocation(line: 176, column: 25, scope: !4878)
!4880 = !DILocation(line: 176, column: 22, scope: !4878)
!4881 = !DILocation(line: 176, column: 38, scope: !4878)
!4882 = !DILocation(line: 176, column: 41, scope: !4878)
!4883 = !DILocation(line: 176, column: 58, scope: !4878)
!4884 = !DILocation(line: 176, column: 55, scope: !4878)
!4885 = !DILocation(line: 0, scope: !4878)
!4886 = !DILocation(line: 175, column: 3, scope: !4874)
!4887 = !DILocalVariable(name: "e", scope: !4888, file: !3, line: 179, type: !1475)
!4888 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 178, column: 5)
!4889 = !DILocation(line: 179, column: 12, scope: !4888)
!4890 = !DILocation(line: 179, column: 16, scope: !4888)
!4891 = !DILocation(line: 184, column: 11, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 184, column: 11)
!4893 = !DILocation(line: 184, column: 14, scope: !4892)
!4894 = !DILocation(line: 184, column: 20, scope: !4892)
!4895 = !DILocation(line: 184, column: 11, scope: !4888)
!4896 = !DILocation(line: 185, column: 2, scope: !4892)
!4897 = !DILocation(line: 187, column: 39, scope: !4888)
!4898 = !DILocation(line: 187, column: 54, scope: !4888)
!4899 = !DILocation(line: 187, column: 7, scope: !4888)
!4900 = !DILocation(line: 188, column: 5, scope: !4888)
!4901 = !DILocation(line: 177, column: 35, scope: !4878)
!4902 = !DILocation(line: 177, column: 24, scope: !4878)
!4903 = !DILocation(line: 177, column: 22, scope: !4878)
!4904 = !DILocation(line: 175, column: 3, scope: !4878)
!4905 = distinct !{!4905, !4886, !4906}
!4906 = !DILocation(line: 188, column: 5, scope: !4874)
!4907 = !DILocation(line: 189, column: 1, scope: !4849)
!4908 = distinct !DISubprogram(name: "single_succ", scope: !135, file: !135, line: 663, type: !4909, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4909 = !DISubroutineType(types: !4910)
!4910 = !{!1885, !4911}
!4911 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1435, line: 112, baseType: !4912)
!4912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4913, size: 64)
!4913 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1460)
!4914 = !DILocalVariable(name: "bb", arg: 1, scope: !4908, file: !135, line: 663, type: !4911)
!4915 = !DILocation(line: 663, column: 32, scope: !4908)
!4916 = !DILocation(line: 665, column: 28, scope: !4908)
!4917 = !DILocation(line: 665, column: 10, scope: !4908)
!4918 = !DILocation(line: 665, column: 33, scope: !4908)
!4919 = !DILocation(line: 665, column: 3, scope: !4908)
!4920 = distinct !DISubprogram(name: "find_pdom", scope: !3, file: !3, line: 143, type: !4921, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4921 = !DISubroutineType(types: !4922)
!4922 = !{!1885, !1885}
!4923 = !DILocalVariable(name: "block", arg: 1, scope: !4920, file: !3, line: 143, type: !1885)
!4924 = !DILocation(line: 143, column: 24, scope: !4920)
!4925 = !DILocation(line: 145, column: 3, scope: !4920)
!4926 = !DILocation(line: 147, column: 7, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4920, file: !3, line: 147, column: 7)
!4928 = !DILocation(line: 147, column: 16, scope: !4927)
!4929 = !DILocation(line: 147, column: 13, scope: !4927)
!4930 = !DILocation(line: 147, column: 7, scope: !4920)
!4931 = !DILocation(line: 148, column: 12, scope: !4927)
!4932 = !DILocation(line: 148, column: 5, scope: !4927)
!4933 = !DILocalVariable(name: "bb", scope: !4934, file: !3, line: 151, type: !1885)
!4934 = distinct !DILexicalBlock(scope: !4927, file: !3, line: 150, column: 5)
!4935 = !DILocation(line: 151, column: 19, scope: !4934)
!4936 = !DILocation(line: 151, column: 70, scope: !4934)
!4937 = !DILocation(line: 151, column: 24, scope: !4934)
!4938 = !DILocation(line: 152, column: 13, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 152, column: 11)
!4940 = !DILocation(line: 152, column: 11, scope: !4934)
!4941 = !DILocation(line: 153, column: 9, scope: !4939)
!4942 = !DILocation(line: 153, column: 2, scope: !4939)
!4943 = !DILocation(line: 154, column: 14, scope: !4934)
!4944 = !DILocation(line: 154, column: 7, scope: !4934)
!4945 = !DILocation(line: 156, column: 1, scope: !4920)
!4946 = distinct !DISubprogram(name: "set_control_dependence_map_bit", scope: !3, file: !3, line: 123, type: !4947, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4947 = !DISubroutineType(types: !4948)
!4948 = !{null, !1885, !1524}
!4949 = !DILocalVariable(name: "bb", arg: 1, scope: !4946, file: !3, line: 123, type: !1885)
!4950 = !DILocation(line: 123, column: 45, scope: !4946)
!4951 = !DILocalVariable(name: "edge_index", arg: 2, scope: !4946, file: !3, line: 123, type: !1524)
!4952 = !DILocation(line: 123, column: 53, scope: !4946)
!4953 = !DILocation(line: 125, column: 7, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 125, column: 7)
!4955 = !DILocation(line: 125, column: 13, scope: !4954)
!4956 = !DILocation(line: 125, column: 10, scope: !4954)
!4957 = !DILocation(line: 125, column: 7, scope: !4946)
!4958 = !DILocation(line: 126, column: 5, scope: !4954)
!4959 = !DILocation(line: 127, column: 3, scope: !4946)
!4960 = !DILocation(line: 128, column: 19, scope: !4946)
!4961 = !DILocation(line: 128, column: 42, scope: !4946)
!4962 = !DILocation(line: 128, column: 46, scope: !4946)
!4963 = !DILocation(line: 128, column: 54, scope: !4946)
!4964 = !DILocation(line: 128, column: 3, scope: !4946)
!4965 = !DILocation(line: 129, column: 1, scope: !4946)
!4966 = distinct !DISubprogram(name: "single_succ_edge", scope: !135, file: !135, line: 643, type: !4967, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4967 = !DISubroutineType(types: !4968)
!4968 = !{!1475, !4911}
!4969 = !DILocalVariable(name: "bb", arg: 1, scope: !4966, file: !135, line: 643, type: !4911)
!4970 = !DILocation(line: 643, column: 37, scope: !4966)
!4971 = !DILocation(line: 645, column: 3, scope: !4966)
!4972 = !DILocation(line: 646, column: 10, scope: !4966)
!4973 = !DILocation(line: 646, column: 3, scope: !4966)
!4974 = distinct !DISubprogram(name: "single_succ_p", scope: !135, file: !135, line: 626, type: !4975, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4975 = !DISubroutineType(types: !4976)
!4976 = !{!1735, !4911}
!4977 = !DILocalVariable(name: "bb", arg: 1, scope: !4974, file: !135, line: 626, type: !4911)
!4978 = !DILocation(line: 626, column: 34, scope: !4974)
!4979 = !DILocation(line: 628, column: 10, scope: !4974)
!4980 = !DILocation(line: 628, column: 33, scope: !4974)
!4981 = !DILocation(line: 628, column: 3, scope: !4974)
!4982 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !4983, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4983 = !DISubroutineType(types: !4984)
!4984 = !{!1475, !4985, !7}
!4985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4986, size: 64)
!4986 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1468)
!4987 = !DILocalVariable(name: "vec_", arg: 1, scope: !4982, file: !135, line: 150, type: !4985)
!4988 = !DILocation(line: 150, column: 1, scope: !4982)
!4989 = !DILocalVariable(name: "ix_", arg: 2, scope: !4982, file: !135, line: 150, type: !7)
!4990 = !DILocation(line: 0, scope: !4982)
!4991 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !4992, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4992 = !DISubroutineType(types: !4993)
!4993 = !{!7, !4985}
!4994 = !DILocalVariable(name: "vec_", arg: 1, scope: !4991, file: !135, line: 150, type: !4985)
!4995 = !DILocation(line: 150, column: 1, scope: !4991)
!4996 = distinct !DISubprogram(name: "gsi_end_p", scope: !581, file: !581, line: 4467, type: !4997, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!4997 = !DISubroutineType(types: !4998)
!4998 = !{!1735, !3960}
!4999 = !DILocalVariable(name: "i", arg: 1, scope: !4996, file: !581, line: 4467, type: !3960)
!5000 = !DILocation(line: 4467, column: 33, scope: !4996)
!5001 = !DILocation(line: 4469, column: 12, scope: !4996)
!5002 = !DILocation(line: 4469, column: 16, scope: !4996)
!5003 = !DILocation(line: 4469, column: 10, scope: !4996)
!5004 = !DILocation(line: 4469, column: 3, scope: !4996)
!5005 = distinct !DISubprogram(name: "gsi_stmt", scope: !581, file: !581, line: 4501, type: !5006, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5006 = !DISubroutineType(types: !5007)
!5007 = !{!1434, !3960}
!5008 = !DILocalVariable(name: "i", arg: 1, scope: !5005, file: !581, line: 4501, type: !3960)
!5009 = !DILocation(line: 4501, column: 32, scope: !5005)
!5010 = !DILocation(line: 4503, column: 12, scope: !5005)
!5011 = !DILocation(line: 4503, column: 17, scope: !5005)
!5012 = !DILocation(line: 4503, column: 3, scope: !5005)
!5013 = distinct !DISubprogram(name: "gimple_set_plf", scope: !581, file: !581, line: 1235, type: !5014, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5014 = !DISubroutineType(types: !5015)
!5015 = !{null, !1434, !633, !1735}
!5016 = !DILocalVariable(name: "stmt", arg: 1, scope: !5013, file: !581, line: 1235, type: !1434)
!5017 = !DILocation(line: 1235, column: 24, scope: !5013)
!5018 = !DILocalVariable(name: "plf", arg: 2, scope: !5013, file: !581, line: 1235, type: !633)
!5019 = !DILocation(line: 1235, column: 44, scope: !5013)
!5020 = !DILocalVariable(name: "val_p", arg: 3, scope: !5013, file: !581, line: 1235, type: !1735)
!5021 = !DILocation(line: 1235, column: 54, scope: !5013)
!5022 = !DILocation(line: 1237, column: 7, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5013, file: !581, line: 1237, column: 7)
!5024 = !DILocation(line: 1237, column: 7, scope: !5013)
!5025 = !DILocation(line: 1238, column: 40, scope: !5023)
!5026 = !DILocation(line: 1238, column: 5, scope: !5023)
!5027 = !DILocation(line: 1238, column: 11, scope: !5023)
!5028 = !DILocation(line: 1238, column: 18, scope: !5023)
!5029 = !DILocation(line: 1238, column: 22, scope: !5023)
!5030 = !DILocation(line: 1240, column: 42, scope: !5023)
!5031 = !DILocation(line: 1240, column: 25, scope: !5023)
!5032 = !DILocation(line: 1240, column: 5, scope: !5023)
!5033 = !DILocation(line: 1240, column: 11, scope: !5023)
!5034 = !DILocation(line: 1240, column: 18, scope: !5023)
!5035 = !DILocation(line: 1240, column: 22, scope: !5023)
!5036 = !DILocation(line: 1241, column: 1, scope: !5013)
!5037 = distinct !DISubprogram(name: "gsi_next", scope: !581, file: !581, line: 4485, type: !5038, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5038 = !DISubroutineType(types: !5039)
!5039 = !{null, !5040}
!5040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3960, size: 64)
!5041 = !DILocalVariable(name: "i", arg: 1, scope: !5037, file: !581, line: 4485, type: !5040)
!5042 = !DILocation(line: 4485, column: 33, scope: !5037)
!5043 = !DILocation(line: 4487, column: 12, scope: !5037)
!5044 = !DILocation(line: 4487, column: 15, scope: !5037)
!5045 = !DILocation(line: 4487, column: 20, scope: !5037)
!5046 = !DILocation(line: 4487, column: 3, scope: !5037)
!5047 = !DILocation(line: 4487, column: 6, scope: !5037)
!5048 = !DILocation(line: 4487, column: 10, scope: !5037)
!5049 = !DILocation(line: 4488, column: 1, scope: !5037)
!5050 = distinct !DISubprogram(name: "gsi_start_bb", scope: !581, file: !581, line: 4418, type: !5051, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5051 = !DISubroutineType(types: !5052)
!5052 = !{!3960, !1885}
!5053 = !DILocalVariable(name: "bb", arg: 1, scope: !5050, file: !581, line: 4418, type: !1885)
!5054 = !DILocation(line: 4418, column: 27, scope: !5050)
!5055 = !DILocalVariable(name: "i", scope: !5050, file: !581, line: 4420, type: !3960)
!5056 = !DILocation(line: 4420, column: 24, scope: !5050)
!5057 = !DILocalVariable(name: "seq", scope: !5050, file: !581, line: 4421, type: !1485)
!5058 = !DILocation(line: 4421, column: 14, scope: !5050)
!5059 = !DILocation(line: 4423, column: 17, scope: !5050)
!5060 = !DILocation(line: 4423, column: 9, scope: !5050)
!5061 = !DILocation(line: 4423, column: 7, scope: !5050)
!5062 = !DILocation(line: 4424, column: 29, scope: !5050)
!5063 = !DILocation(line: 4424, column: 11, scope: !5050)
!5064 = !DILocation(line: 4424, column: 5, scope: !5050)
!5065 = !DILocation(line: 4424, column: 9, scope: !5050)
!5066 = !DILocation(line: 4425, column: 11, scope: !5050)
!5067 = !DILocation(line: 4425, column: 5, scope: !5050)
!5068 = !DILocation(line: 4425, column: 9, scope: !5050)
!5069 = !DILocation(line: 4426, column: 10, scope: !5050)
!5070 = !DILocation(line: 4426, column: 5, scope: !5050)
!5071 = !DILocation(line: 4426, column: 8, scope: !5050)
!5072 = !DILocation(line: 4428, column: 3, scope: !5050)
!5073 = distinct !DISubprogram(name: "mark_stmt_if_obviously_necessary", scope: !3, file: !3, line: 277, type: !5074, scopeLine: 278, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5074 = !DISubroutineType(types: !5075)
!5075 = !{null, !1434, !1735}
!5076 = !DILocalVariable(name: "stmt", arg: 1, scope: !5073, file: !3, line: 277, type: !1434)
!5077 = !DILocation(line: 277, column: 42, scope: !5073)
!5078 = !DILocalVariable(name: "aggressive", arg: 2, scope: !5073, file: !3, line: 277, type: !1735)
!5079 = !DILocation(line: 277, column: 53, scope: !5073)
!5080 = !DILocalVariable(name: "lhs", scope: !5073, file: !3, line: 279, type: !1622)
!5081 = !DILocation(line: 279, column: 8, scope: !5073)
!5082 = !DILocation(line: 282, column: 7, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 282, column: 7)
!5084 = !DILocation(line: 283, column: 7, scope: !5083)
!5085 = !DILocation(line: 283, column: 30, scope: !5083)
!5086 = !DILocation(line: 283, column: 10, scope: !5083)
!5087 = !DILocation(line: 282, column: 7, scope: !5073)
!5088 = !DILocation(line: 285, column: 28, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !5083, file: !3, line: 284, column: 5)
!5090 = !DILocation(line: 285, column: 7, scope: !5089)
!5091 = !DILocation(line: 286, column: 7, scope: !5089)
!5092 = !DILocation(line: 295, column: 24, scope: !5073)
!5093 = !DILocation(line: 295, column: 11, scope: !5073)
!5094 = !DILocation(line: 295, column: 3, scope: !5073)
!5095 = !DILocation(line: 299, column: 28, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 296, column: 5)
!5097 = !DILocation(line: 299, column: 7, scope: !5096)
!5098 = !DILocation(line: 300, column: 7, scope: !5096)
!5099 = !DILocation(line: 305, column: 28, scope: !5096)
!5100 = !DILocation(line: 305, column: 7, scope: !5096)
!5101 = !DILocation(line: 306, column: 7, scope: !5096)
!5102 = !DILocation(line: 312, column: 36, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 312, column: 11)
!5104 = !DILocation(line: 312, column: 11, scope: !5103)
!5105 = !DILocation(line: 312, column: 11, scope: !5096)
!5106 = !DILocation(line: 314, column: 25, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5103, file: !3, line: 313, column: 2)
!5108 = !DILocation(line: 314, column: 4, scope: !5107)
!5109 = !DILocation(line: 315, column: 4, scope: !5107)
!5110 = !DILocation(line: 317, column: 29, scope: !5111)
!5111 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 317, column: 11)
!5112 = !DILocation(line: 317, column: 12, scope: !5111)
!5113 = !DILocation(line: 317, column: 11, scope: !5096)
!5114 = !DILocation(line: 318, column: 9, scope: !5111)
!5115 = !DILocation(line: 319, column: 30, scope: !5096)
!5116 = !DILocation(line: 319, column: 13, scope: !5096)
!5117 = !DILocation(line: 319, column: 11, scope: !5096)
!5118 = !DILocation(line: 319, column: 7, scope: !5096)
!5119 = !DILocation(line: 323, column: 12, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 323, column: 11)
!5121 = !DILocation(line: 323, column: 11, scope: !5096)
!5122 = !DILocation(line: 324, column: 34, scope: !5120)
!5123 = !DILocation(line: 324, column: 15, scope: !5120)
!5124 = !DILocation(line: 324, column: 13, scope: !5120)
!5125 = !DILocation(line: 324, column: 9, scope: !5120)
!5126 = !DILocation(line: 325, column: 7, scope: !5096)
!5127 = !DILocation(line: 332, column: 42, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 332, column: 11)
!5129 = !DILocation(line: 332, column: 11, scope: !5128)
!5130 = !DILocation(line: 333, column: 4, scope: !5128)
!5131 = !DILocation(line: 333, column: 7, scope: !5128)
!5132 = !DILocation(line: 333, column: 52, scope: !5128)
!5133 = !DILocation(line: 332, column: 11, scope: !5096)
!5134 = !DILocation(line: 334, column: 23, scope: !5128)
!5135 = !DILocation(line: 334, column: 2, scope: !5128)
!5136 = !DILocation(line: 335, column: 7, scope: !5096)
!5137 = !DILocation(line: 338, column: 7, scope: !5096)
!5138 = !DILocation(line: 339, column: 28, scope: !5096)
!5139 = !DILocation(line: 339, column: 7, scope: !5096)
!5140 = !DILocation(line: 340, column: 7, scope: !5096)
!5141 = !DILocation(line: 343, column: 7, scope: !5096)
!5142 = !DILocation(line: 347, column: 13, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 347, column: 11)
!5144 = !DILocation(line: 347, column: 11, scope: !5096)
!5145 = !DILocation(line: 348, column: 23, scope: !5143)
!5146 = !DILocation(line: 348, column: 2, scope: !5143)
!5147 = !DILocation(line: 349, column: 7, scope: !5096)
!5148 = !DILocation(line: 352, column: 7, scope: !5096)
!5149 = !DILocation(line: 358, column: 32, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 358, column: 7)
!5151 = !DILocation(line: 358, column: 7, scope: !5150)
!5152 = !DILocation(line: 358, column: 38, scope: !5150)
!5153 = !DILocation(line: 358, column: 64, scope: !5150)
!5154 = !DILocation(line: 358, column: 41, scope: !5150)
!5155 = !DILocation(line: 358, column: 7, scope: !5073)
!5156 = !DILocation(line: 360, column: 28, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5150, file: !3, line: 359, column: 5)
!5158 = !DILocation(line: 360, column: 7, scope: !5157)
!5159 = !DILocation(line: 361, column: 7, scope: !5157)
!5160 = !DILocation(line: 364, column: 31, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 364, column: 7)
!5162 = !DILocation(line: 364, column: 7, scope: !5161)
!5163 = !DILocation(line: 364, column: 7, scope: !5073)
!5164 = !DILocation(line: 366, column: 28, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 365, column: 5)
!5166 = !DILocation(line: 366, column: 7, scope: !5165)
!5167 = !DILocation(line: 367, column: 7, scope: !5165)
!5168 = !DILocation(line: 370, column: 3, scope: !5073)
!5169 = !DILocation(line: 371, column: 1, scope: !5073)
!5170 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !5171, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5171 = !DISubroutineType(types: !5172)
!5172 = !{!4052, !4057}
!5173 = !DILocalVariable(name: "ev", arg: 1, scope: !5170, file: !135, line: 696, type: !4057)
!5174 = !DILocation(line: 696, column: 28, scope: !5170)
!5175 = !DILocalVariable(name: "i", scope: !5170, file: !135, line: 698, type: !4052)
!5176 = !DILocation(line: 698, column: 17, scope: !5170)
!5177 = !DILocation(line: 700, column: 5, scope: !5170)
!5178 = !DILocation(line: 700, column: 11, scope: !5170)
!5179 = !DILocation(line: 701, column: 17, scope: !5170)
!5180 = !DILocation(line: 701, column: 5, scope: !5170)
!5181 = !DILocation(line: 701, column: 15, scope: !5170)
!5182 = !DILocation(line: 703, column: 3, scope: !5170)
!5183 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !5184, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5184 = !DISubroutineType(types: !5185)
!5185 = !{!1735, !4052, !3797}
!5186 = !DILocalVariable(name: "ei", arg: 1, scope: !5183, file: !135, line: 771, type: !4052)
!5187 = !DILocation(line: 771, column: 24, scope: !5183)
!5188 = !DILocalVariable(name: "p", arg: 2, scope: !5183, file: !135, line: 771, type: !3797)
!5189 = !DILocation(line: 771, column: 34, scope: !5183)
!5190 = !DILocation(line: 773, column: 8, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5183, file: !135, line: 773, column: 7)
!5192 = !DILocation(line: 773, column: 7, scope: !5183)
!5193 = !DILocation(line: 775, column: 12, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5191, file: !135, line: 774, column: 5)
!5195 = !DILocation(line: 775, column: 8, scope: !5194)
!5196 = !DILocation(line: 775, column: 10, scope: !5194)
!5197 = !DILocation(line: 776, column: 7, scope: !5194)
!5198 = !DILocation(line: 780, column: 8, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5191, file: !135, line: 779, column: 5)
!5200 = !DILocation(line: 780, column: 10, scope: !5199)
!5201 = !DILocation(line: 781, column: 7, scope: !5199)
!5202 = !DILocation(line: 783, column: 1, scope: !5183)
!5203 = distinct !DISubprogram(name: "mark_control_dependent_edges_necessary", scope: !3, file: !3, line: 378, type: !5204, scopeLine: 379, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5204 = !DISubroutineType(types: !5205)
!5205 = !{null, !1885, !3791}
!5206 = !DILocalVariable(name: "bb", arg: 1, scope: !5203, file: !3, line: 378, type: !1885)
!5207 = !DILocation(line: 378, column: 53, scope: !5203)
!5208 = !DILocalVariable(name: "el", arg: 2, scope: !5203, file: !3, line: 378, type: !3791)
!5209 = !DILocation(line: 378, column: 75, scope: !5203)
!5210 = !DILocalVariable(name: "bi", scope: !5203, file: !3, line: 380, type: !5211)
!5211 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1560, line: 218, baseType: !5212)
!5212 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1560, line: 203, size: 256, elements: !5213)
!5213 = !{!5214, !5215, !5216, !5217}
!5214 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !5212, file: !1560, line: 206, baseType: !1563, size: 64)
!5215 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !5212, file: !1560, line: 209, baseType: !1563, size: 64, offset: 64)
!5216 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !5212, file: !1560, line: 212, baseType: !7, size: 32, offset: 128)
!5217 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !5212, file: !1560, line: 217, baseType: !1573, size: 64, offset: 192)
!5218 = !DILocation(line: 380, column: 19, scope: !5203)
!5219 = !DILocalVariable(name: "edge_number", scope: !5203, file: !3, line: 381, type: !7)
!5220 = !DILocation(line: 381, column: 12, scope: !5203)
!5221 = !DILocation(line: 383, column: 3, scope: !5203)
!5222 = !DILocation(line: 385, column: 7, scope: !5223)
!5223 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 385, column: 7)
!5224 = !DILocation(line: 385, column: 13, scope: !5223)
!5225 = !DILocation(line: 385, column: 10, scope: !5223)
!5226 = !DILocation(line: 385, column: 7, scope: !5203)
!5227 = !DILocation(line: 386, column: 5, scope: !5223)
!5228 = !DILocation(line: 388, column: 3, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 388, column: 3)
!5230 = !DILocation(line: 388, column: 3, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5229, file: !3, line: 388, column: 3)
!5232 = !DILocalVariable(name: "stmt", scope: !5233, file: !3, line: 390, type: !1434)
!5233 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 389, column: 5)
!5234 = !DILocation(line: 390, column: 14, scope: !5233)
!5235 = !DILocalVariable(name: "cd_bb", scope: !5233, file: !3, line: 391, type: !1885)
!5236 = !DILocation(line: 391, column: 19, scope: !5233)
!5237 = !DILocation(line: 391, column: 27, scope: !5233)
!5238 = !DILocation(line: 393, column: 11, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 393, column: 11)
!5240 = !DILocation(line: 393, column: 11, scope: !5233)
!5241 = !DILocation(line: 394, column: 2, scope: !5239)
!5242 = !DILocation(line: 395, column: 16, scope: !5233)
!5243 = !DILocation(line: 395, column: 37, scope: !5233)
!5244 = !DILocation(line: 395, column: 44, scope: !5233)
!5245 = !DILocation(line: 395, column: 7, scope: !5233)
!5246 = !DILocation(line: 396, column: 16, scope: !5233)
!5247 = !DILocation(line: 396, column: 40, scope: !5233)
!5248 = !DILocation(line: 396, column: 47, scope: !5233)
!5249 = !DILocation(line: 396, column: 7, scope: !5233)
!5250 = !DILocation(line: 398, column: 25, scope: !5233)
!5251 = !DILocation(line: 398, column: 14, scope: !5233)
!5252 = !DILocation(line: 398, column: 12, scope: !5233)
!5253 = !DILocation(line: 399, column: 11, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 399, column: 11)
!5255 = !DILocation(line: 399, column: 16, scope: !5254)
!5256 = !DILocation(line: 399, column: 33, scope: !5254)
!5257 = !DILocation(line: 399, column: 19, scope: !5254)
!5258 = !DILocation(line: 399, column: 11, scope: !5233)
!5259 = !DILocation(line: 400, column: 23, scope: !5254)
!5260 = !DILocation(line: 400, column: 2, scope: !5254)
!5261 = !DILocation(line: 401, column: 5, scope: !5233)
!5262 = distinct !{!5262, !5228, !5263}
!5263 = !DILocation(line: 401, column: 5, scope: !5229)
!5264 = !DILocation(line: 402, column: 1, scope: !5203)
!5265 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !5266, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5266 = !DISubroutineType(types: !5267)
!5267 = !{null, !5268}
!5268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4052, size: 64)
!5269 = !DILocalVariable(name: "i", arg: 1, scope: !5265, file: !135, line: 736, type: !5268)
!5270 = !DILocation(line: 736, column: 25, scope: !5265)
!5271 = !DILocation(line: 738, column: 3, scope: !5265)
!5272 = !DILocation(line: 739, column: 3, scope: !5265)
!5273 = !DILocation(line: 739, column: 6, scope: !5265)
!5274 = !DILocation(line: 739, column: 11, scope: !5265)
!5275 = !DILocation(line: 740, column: 1, scope: !5265)
!5276 = distinct !DISubprogram(name: "fel_init", scope: !146, file: !146, line: 535, type: !5277, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5277 = !DISubroutineType(types: !5278)
!5278 = !{null, !5279, !5280, !7}
!5279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4034, size: 64)
!5280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!5281 = !DILocalVariable(name: "li", arg: 1, scope: !5276, file: !146, line: 535, type: !5279)
!5282 = !DILocation(line: 535, column: 26, scope: !5276)
!5283 = !DILocalVariable(name: "loop", arg: 2, scope: !5276, file: !146, line: 535, type: !5280)
!5284 = !DILocation(line: 535, column: 38, scope: !5276)
!5285 = !DILocalVariable(name: "flags", arg: 3, scope: !5276, file: !146, line: 535, type: !7)
!5286 = !DILocation(line: 535, column: 53, scope: !5276)
!5287 = !DILocalVariable(name: "aloop", scope: !5276, file: !146, line: 537, type: !2060)
!5288 = !DILocation(line: 537, column: 16, scope: !5276)
!5289 = !DILocalVariable(name: "i", scope: !5276, file: !146, line: 538, type: !7)
!5290 = !DILocation(line: 538, column: 12, scope: !5276)
!5291 = !DILocalVariable(name: "mn", scope: !5276, file: !146, line: 539, type: !1524)
!5292 = !DILocation(line: 539, column: 7, scope: !5276)
!5293 = !DILocation(line: 541, column: 3, scope: !5276)
!5294 = !DILocation(line: 541, column: 7, scope: !5276)
!5295 = !DILocation(line: 541, column: 11, scope: !5276)
!5296 = !DILocation(line: 542, column: 8, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5276, file: !146, line: 542, column: 7)
!5298 = !DILocation(line: 542, column: 7, scope: !5276)
!5299 = !DILocation(line: 544, column: 7, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5297, file: !146, line: 543, column: 5)
!5301 = !DILocation(line: 544, column: 11, scope: !5300)
!5302 = !DILocation(line: 544, column: 20, scope: !5300)
!5303 = !DILocation(line: 545, column: 8, scope: !5300)
!5304 = !DILocation(line: 545, column: 13, scope: !5300)
!5305 = !DILocation(line: 546, column: 7, scope: !5300)
!5306 = !DILocation(line: 549, column: 18, scope: !5276)
!5307 = !DILocation(line: 549, column: 3, scope: !5276)
!5308 = !DILocation(line: 549, column: 7, scope: !5276)
!5309 = !DILocation(line: 549, column: 16, scope: !5276)
!5310 = !DILocation(line: 550, column: 9, scope: !5276)
!5311 = !DILocation(line: 550, column: 15, scope: !5276)
!5312 = !DILocation(line: 550, column: 8, scope: !5276)
!5313 = !DILocation(line: 550, column: 6, scope: !5276)
!5314 = !DILocation(line: 552, column: 7, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5276, file: !146, line: 552, column: 7)
!5316 = !DILocation(line: 552, column: 13, scope: !5315)
!5317 = !DILocation(line: 552, column: 7, scope: !5276)
!5318 = !DILocation(line: 554, column: 14, scope: !5319)
!5319 = distinct !DILexicalBlock(scope: !5320, file: !146, line: 554, column: 7)
!5320 = distinct !DILexicalBlock(scope: !5315, file: !146, line: 553, column: 5)
!5321 = !DILocation(line: 554, column: 12, scope: !5319)
!5322 = !DILocation(line: 554, column: 19, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5319, file: !146, line: 554, column: 7)
!5324 = !DILocation(line: 554, column: 7, scope: !5319)
!5325 = !DILocation(line: 555, column: 6, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5323, file: !146, line: 555, column: 6)
!5327 = !DILocation(line: 555, column: 12, scope: !5326)
!5328 = !DILocation(line: 556, column: 6, scope: !5326)
!5329 = !DILocation(line: 556, column: 9, scope: !5326)
!5330 = !DILocation(line: 556, column: 16, scope: !5326)
!5331 = !DILocation(line: 556, column: 22, scope: !5326)
!5332 = !DILocation(line: 557, column: 6, scope: !5326)
!5333 = !DILocation(line: 557, column: 9, scope: !5326)
!5334 = !DILocation(line: 557, column: 16, scope: !5326)
!5335 = !DILocation(line: 557, column: 23, scope: !5326)
!5336 = !DILocation(line: 557, column: 20, scope: !5326)
!5337 = !DILocation(line: 555, column: 6, scope: !5323)
!5338 = !DILocation(line: 558, column: 4, scope: !5326)
!5339 = !DILocation(line: 554, column: 75, scope: !5323)
!5340 = !DILocation(line: 554, column: 7, scope: !5323)
!5341 = distinct !{!5341, !5324, !5342}
!5342 = !DILocation(line: 558, column: 4, scope: !5319)
!5343 = !DILocation(line: 559, column: 5, scope: !5320)
!5344 = !DILocation(line: 560, column: 12, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5315, file: !146, line: 560, column: 12)
!5346 = !DILocation(line: 560, column: 18, scope: !5345)
!5347 = !DILocation(line: 560, column: 12, scope: !5315)
!5348 = !DILocation(line: 563, column: 20, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5350, file: !146, line: 563, column: 7)
!5350 = distinct !DILexicalBlock(scope: !5345, file: !146, line: 561, column: 5)
!5351 = !DILocation(line: 563, column: 35, scope: !5349)
!5352 = !DILocation(line: 563, column: 18, scope: !5349)
!5353 = !DILocation(line: 563, column: 12, scope: !5349)
!5354 = !DILocation(line: 564, column: 5, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5349, file: !146, line: 563, column: 7)
!5356 = !DILocation(line: 564, column: 12, scope: !5355)
!5357 = !DILocation(line: 564, column: 18, scope: !5355)
!5358 = !DILocation(line: 563, column: 7, scope: !5349)
!5359 = !DILocation(line: 566, column: 2, scope: !5355)
!5360 = !DILocation(line: 565, column: 13, scope: !5355)
!5361 = !DILocation(line: 565, column: 20, scope: !5355)
!5362 = !DILocation(line: 565, column: 11, scope: !5355)
!5363 = !DILocation(line: 563, column: 7, scope: !5355)
!5364 = distinct !{!5364, !5358, !5365}
!5365 = !DILocation(line: 566, column: 2, scope: !5349)
!5366 = !DILocation(line: 568, column: 7, scope: !5350)
!5367 = !DILocation(line: 570, column: 8, scope: !5368)
!5368 = distinct !DILexicalBlock(scope: !5369, file: !146, line: 570, column: 8)
!5369 = distinct !DILexicalBlock(scope: !5350, file: !146, line: 569, column: 2)
!5370 = !DILocation(line: 570, column: 15, scope: !5368)
!5371 = !DILocation(line: 570, column: 22, scope: !5368)
!5372 = !DILocation(line: 570, column: 19, scope: !5368)
!5373 = !DILocation(line: 570, column: 8, scope: !5369)
!5374 = !DILocation(line: 571, column: 6, scope: !5368)
!5375 = !DILocation(line: 573, column: 8, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5369, file: !146, line: 573, column: 8)
!5377 = !DILocation(line: 573, column: 15, scope: !5376)
!5378 = !DILocation(line: 573, column: 8, scope: !5369)
!5379 = !DILocation(line: 575, column: 21, scope: !5380)
!5380 = distinct !DILexicalBlock(scope: !5381, file: !146, line: 575, column: 8)
!5381 = distinct !DILexicalBlock(scope: !5376, file: !146, line: 574, column: 6)
!5382 = !DILocation(line: 575, column: 28, scope: !5380)
!5383 = !DILocation(line: 575, column: 19, scope: !5380)
!5384 = !DILocation(line: 575, column: 13, scope: !5380)
!5385 = !DILocation(line: 576, column: 6, scope: !5386)
!5386 = distinct !DILexicalBlock(scope: !5380, file: !146, line: 575, column: 8)
!5387 = !DILocation(line: 576, column: 13, scope: !5386)
!5388 = !DILocation(line: 576, column: 19, scope: !5386)
!5389 = !DILocation(line: 575, column: 8, scope: !5380)
!5390 = !DILocation(line: 578, column: 3, scope: !5386)
!5391 = !DILocation(line: 577, column: 14, scope: !5386)
!5392 = !DILocation(line: 577, column: 21, scope: !5386)
!5393 = !DILocation(line: 577, column: 12, scope: !5386)
!5394 = !DILocation(line: 575, column: 8, scope: !5386)
!5395 = distinct !{!5395, !5389, !5396}
!5396 = !DILocation(line: 578, column: 3, scope: !5380)
!5397 = !DILocation(line: 579, column: 6, scope: !5381)
!5398 = !DILocation(line: 580, column: 26, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5376, file: !146, line: 580, column: 13)
!5400 = !DILocation(line: 580, column: 14, scope: !5399)
!5401 = !DILocation(line: 580, column: 13, scope: !5376)
!5402 = !DILocation(line: 581, column: 6, scope: !5399)
!5403 = !DILocation(line: 583, column: 26, scope: !5399)
!5404 = !DILocation(line: 583, column: 14, scope: !5399)
!5405 = !DILocation(line: 583, column: 12, scope: !5399)
!5406 = distinct !{!5406, !5366, !5407}
!5407 = !DILocation(line: 584, column: 2, scope: !5350)
!5408 = !DILocation(line: 585, column: 5, scope: !5350)
!5409 = !DILocation(line: 589, column: 15, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5345, file: !146, line: 587, column: 5)
!5411 = !DILocation(line: 589, column: 30, scope: !5410)
!5412 = !DILocation(line: 589, column: 13, scope: !5410)
!5413 = !DILocation(line: 590, column: 7, scope: !5410)
!5414 = !DILocation(line: 592, column: 8, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5416, file: !146, line: 592, column: 8)
!5416 = distinct !DILexicalBlock(scope: !5410, file: !146, line: 591, column: 2)
!5417 = !DILocation(line: 592, column: 15, scope: !5415)
!5418 = !DILocation(line: 592, column: 22, scope: !5415)
!5419 = !DILocation(line: 592, column: 19, scope: !5415)
!5420 = !DILocation(line: 592, column: 8, scope: !5416)
!5421 = !DILocation(line: 593, column: 6, scope: !5415)
!5422 = !DILocation(line: 595, column: 8, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5416, file: !146, line: 595, column: 8)
!5424 = !DILocation(line: 595, column: 15, scope: !5423)
!5425 = !DILocation(line: 595, column: 21, scope: !5423)
!5426 = !DILocation(line: 595, column: 8, scope: !5416)
!5427 = !DILocation(line: 596, column: 14, scope: !5423)
!5428 = !DILocation(line: 596, column: 21, scope: !5423)
!5429 = !DILocation(line: 596, column: 12, scope: !5423)
!5430 = !DILocation(line: 596, column: 6, scope: !5423)
!5431 = !DILocation(line: 599, column: 8, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5423, file: !146, line: 598, column: 6)
!5433 = !DILocation(line: 599, column: 15, scope: !5432)
!5434 = !DILocation(line: 599, column: 21, scope: !5432)
!5435 = !DILocation(line: 599, column: 29, scope: !5432)
!5436 = !DILocation(line: 599, column: 32, scope: !5432)
!5437 = !DILocation(line: 599, column: 39, scope: !5432)
!5438 = !DILocation(line: 599, column: 44, scope: !5432)
!5439 = !DILocation(line: 0, scope: !5432)
!5440 = !DILocation(line: 600, column: 23, scope: !5432)
!5441 = !DILocation(line: 600, column: 11, scope: !5432)
!5442 = !DILocation(line: 600, column: 9, scope: !5432)
!5443 = distinct !{!5443, !5431, !5444}
!5444 = !DILocation(line: 600, column: 28, scope: !5432)
!5445 = !DILocation(line: 601, column: 12, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5432, file: !146, line: 601, column: 12)
!5447 = !DILocation(line: 601, column: 18, scope: !5446)
!5448 = !DILocation(line: 601, column: 12, scope: !5432)
!5449 = !DILocation(line: 602, column: 3, scope: !5446)
!5450 = !DILocation(line: 603, column: 16, scope: !5432)
!5451 = !DILocation(line: 603, column: 23, scope: !5432)
!5452 = !DILocation(line: 603, column: 14, scope: !5432)
!5453 = distinct !{!5453, !5413, !5454}
!5454 = !DILocation(line: 605, column: 2, scope: !5410)
!5455 = !DILocation(line: 608, column: 13, scope: !5276)
!5456 = !DILocation(line: 608, column: 17, scope: !5276)
!5457 = !DILocation(line: 608, column: 3, scope: !5276)
!5458 = !DILocation(line: 609, column: 1, scope: !5276)
!5459 = distinct !DISubprogram(name: "fel_next", scope: !146, file: !146, line: 518, type: !5460, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5460 = !DISubroutineType(types: !5461)
!5461 = !{null, !5279, !5280}
!5462 = !DILocalVariable(name: "li", arg: 1, scope: !5459, file: !146, line: 518, type: !5279)
!5463 = !DILocation(line: 518, column: 26, scope: !5459)
!5464 = !DILocalVariable(name: "loop", arg: 2, scope: !5459, file: !146, line: 518, type: !5280)
!5465 = !DILocation(line: 518, column: 38, scope: !5459)
!5466 = !DILocalVariable(name: "anum", scope: !5459, file: !146, line: 520, type: !1524)
!5467 = !DILocation(line: 520, column: 7, scope: !5459)
!5468 = !DILocation(line: 522, column: 3, scope: !5459)
!5469 = !DILocation(line: 522, column: 10, scope: !5459)
!5470 = !DILocation(line: 524, column: 7, scope: !5471)
!5471 = distinct !DILexicalBlock(scope: !5459, file: !146, line: 523, column: 5)
!5472 = !DILocation(line: 524, column: 11, scope: !5471)
!5473 = !DILocation(line: 524, column: 14, scope: !5471)
!5474 = !DILocation(line: 525, column: 25, scope: !5471)
!5475 = !DILocation(line: 525, column: 15, scope: !5471)
!5476 = !DILocation(line: 525, column: 8, scope: !5471)
!5477 = !DILocation(line: 525, column: 13, scope: !5471)
!5478 = !DILocation(line: 526, column: 12, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5471, file: !146, line: 526, column: 11)
!5480 = !DILocation(line: 526, column: 11, scope: !5479)
!5481 = !DILocation(line: 526, column: 11, scope: !5471)
!5482 = !DILocation(line: 527, column: 2, scope: !5479)
!5483 = distinct !{!5483, !5468, !5484}
!5484 = !DILocation(line: 528, column: 5, scope: !5459)
!5485 = !DILocation(line: 530, column: 3, scope: !5459)
!5486 = !DILocation(line: 531, column: 4, scope: !5459)
!5487 = !DILocation(line: 531, column: 9, scope: !5459)
!5488 = !DILocation(line: 532, column: 1, scope: !5459)
!5489 = distinct !DISubprogram(name: "bb_seq", scope: !581, file: !581, line: 237, type: !5490, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5490 = !DISubroutineType(types: !5491)
!5491 = !{!1485, !4911}
!5492 = !DILocalVariable(name: "bb", arg: 1, scope: !5489, file: !581, line: 237, type: !4911)
!5493 = !DILocation(line: 237, column: 27, scope: !5489)
!5494 = !DILocation(line: 239, column: 13, scope: !5489)
!5495 = !DILocation(line: 239, column: 17, scope: !5489)
!5496 = !DILocation(line: 239, column: 23, scope: !5489)
!5497 = !DILocation(line: 239, column: 33, scope: !5489)
!5498 = !DILocation(line: 239, column: 36, scope: !5489)
!5499 = !DILocation(line: 239, column: 40, scope: !5489)
!5500 = !DILocation(line: 239, column: 43, scope: !5489)
!5501 = !DILocation(line: 239, column: 10, scope: !5489)
!5502 = !DILocation(line: 239, column: 53, scope: !5489)
!5503 = !DILocation(line: 239, column: 57, scope: !5489)
!5504 = !DILocation(line: 239, column: 60, scope: !5489)
!5505 = !DILocation(line: 239, column: 68, scope: !5489)
!5506 = !DILocation(line: 239, column: 3, scope: !5489)
!5507 = distinct !DISubprogram(name: "gimple_seq_first", scope: !581, file: !581, line: 159, type: !5508, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5508 = !DISubroutineType(types: !5509)
!5509 = !{!1490, !5510}
!5510 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1435, line: 67, baseType: !5511)
!5511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5512, size: 64)
!5512 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1487)
!5513 = !DILocalVariable(name: "s", arg: 1, scope: !5507, file: !581, line: 159, type: !5510)
!5514 = !DILocation(line: 159, column: 36, scope: !5507)
!5515 = !DILocation(line: 161, column: 10, scope: !5507)
!5516 = !DILocation(line: 161, column: 14, scope: !5507)
!5517 = !DILocation(line: 161, column: 17, scope: !5507)
!5518 = !DILocation(line: 161, column: 3, scope: !5507)
!5519 = distinct !DISubprogram(name: "mark_stmt_necessary", scope: !3, file: !3, line: 207, type: !5074, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5520 = !DILocalVariable(name: "stmt", arg: 1, scope: !5519, file: !3, line: 207, type: !1434)
!5521 = !DILocation(line: 207, column: 29, scope: !5519)
!5522 = !DILocalVariable(name: "add_to_worklist", arg: 2, scope: !5519, file: !3, line: 207, type: !1735)
!5523 = !DILocation(line: 207, column: 40, scope: !5519)
!5524 = !DILocation(line: 209, column: 3, scope: !5519)
!5525 = !DILocation(line: 211, column: 19, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 211, column: 7)
!5527 = !DILocation(line: 211, column: 7, scope: !5526)
!5528 = !DILocation(line: 211, column: 7, scope: !5519)
!5529 = !DILocation(line: 212, column: 5, scope: !5526)
!5530 = !DILocation(line: 214, column: 7, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 214, column: 7)
!5532 = !DILocation(line: 214, column: 17, scope: !5531)
!5533 = !DILocation(line: 214, column: 21, scope: !5531)
!5534 = !DILocation(line: 214, column: 32, scope: !5531)
!5535 = !DILocation(line: 214, column: 7, scope: !5519)
!5536 = !DILocation(line: 216, column: 16, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 215, column: 5)
!5538 = !DILocation(line: 216, column: 7, scope: !5537)
!5539 = !DILocation(line: 217, column: 26, scope: !5537)
!5540 = !DILocation(line: 217, column: 37, scope: !5537)
!5541 = !DILocation(line: 217, column: 7, scope: !5537)
!5542 = !DILocation(line: 218, column: 16, scope: !5537)
!5543 = !DILocation(line: 218, column: 7, scope: !5537)
!5544 = !DILocation(line: 219, column: 5, scope: !5537)
!5545 = !DILocation(line: 221, column: 19, scope: !5519)
!5546 = !DILocation(line: 221, column: 3, scope: !5519)
!5547 = !DILocation(line: 222, column: 7, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 222, column: 7)
!5549 = !DILocation(line: 222, column: 7, scope: !5519)
!5550 = !DILocation(line: 223, column: 5, scope: !5548)
!5551 = !DILocation(line: 224, column: 7, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 224, column: 7)
!5553 = !DILocation(line: 224, column: 30, scope: !5552)
!5554 = !DILocation(line: 224, column: 51, scope: !5552)
!5555 = !DILocation(line: 224, column: 34, scope: !5552)
!5556 = !DILocation(line: 224, column: 7, scope: !5519)
!5557 = !DILocation(line: 225, column: 14, scope: !5552)
!5558 = !DILocation(line: 225, column: 49, scope: !5552)
!5559 = !DILocation(line: 225, column: 38, scope: !5552)
!5560 = !DILocation(line: 225, column: 56, scope: !5552)
!5561 = !DILocation(line: 225, column: 5, scope: !5552)
!5562 = !DILocation(line: 226, column: 1, scope: !5519)
!5563 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !581, file: !581, line: 1878, type: !2954, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5564 = !DILocalVariable(name: "gs", arg: 1, scope: !5563, file: !581, line: 1878, type: !2956)
!5565 = !DILocation(line: 1878, column: 31, scope: !5563)
!5566 = !DILocation(line: 1881, column: 21, scope: !5563)
!5567 = !DILocation(line: 1881, column: 10, scope: !5563)
!5568 = !DILocation(line: 1881, column: 3, scope: !5563)
!5569 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !581, file: !581, line: 1694, type: !2954, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5570 = !DILocalVariable(name: "gs", arg: 1, scope: !5569, file: !581, line: 1694, type: !2956)
!5571 = !DILocation(line: 1694, column: 33, scope: !5569)
!5572 = !DILocation(line: 1697, column: 21, scope: !5569)
!5573 = !DILocation(line: 1697, column: 10, scope: !5569)
!5574 = !DILocation(line: 1697, column: 3, scope: !5569)
!5575 = distinct !DISubprogram(name: "gimple_debug_bind_has_value_p", scope: !581, file: !581, line: 3349, type: !5576, scopeLine: 3350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5576 = !DISubroutineType(types: !5577)
!5577 = !{!1735, !1434}
!5578 = !DILocalVariable(name: "dbg", arg: 1, scope: !5575, file: !581, line: 3349, type: !1434)
!5579 = !DILocation(line: 3349, column: 39, scope: !5575)
!5580 = !DILocation(line: 3355, column: 21, scope: !5575)
!5581 = !DILocation(line: 3355, column: 10, scope: !5575)
!5582 = !DILocation(line: 3355, column: 29, scope: !5575)
!5583 = !DILocation(line: 3355, column: 3, scope: !5575)
!5584 = distinct !DISubprogram(name: "gimple_debug_bind_get_var", scope: !581, file: !581, line: 3268, type: !5585, scopeLine: 3269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5585 = !DISubroutineType(types: !5586)
!5586 = !{!1622, !1434}
!5587 = !DILocalVariable(name: "dbg", arg: 1, scope: !5584, file: !581, line: 3268, type: !1434)
!5588 = !DILocation(line: 3268, column: 35, scope: !5584)
!5589 = !DILocation(line: 3274, column: 21, scope: !5584)
!5590 = !DILocation(line: 3274, column: 10, scope: !5584)
!5591 = !DILocation(line: 3274, column: 3, scope: !5584)
!5592 = distinct !DISubprogram(name: "gimple_bb", scope: !581, file: !581, line: 1112, type: !5593, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5593 = !DISubroutineType(types: !5594)
!5594 = !{!1459, !2956}
!5595 = !DILocalVariable(name: "g", arg: 1, scope: !5592, file: !581, line: 1112, type: !2956)
!5596 = !DILocation(line: 1112, column: 25, scope: !5592)
!5597 = !DILocation(line: 1114, column: 10, scope: !5592)
!5598 = !DILocation(line: 1114, column: 13, scope: !5592)
!5599 = !DILocation(line: 1114, column: 20, scope: !5592)
!5600 = !DILocation(line: 1114, column: 3, scope: !5592)
!5601 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !581, file: !581, line: 1477, type: !3735, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5602 = !DILocalVariable(name: "stmt", arg: 1, scope: !5601, file: !581, line: 1477, type: !2956)
!5603 = !DILocation(line: 1477, column: 39, scope: !5601)
!5604 = !DILocation(line: 1479, column: 27, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5601, file: !581, line: 1479, column: 7)
!5606 = !DILocation(line: 1479, column: 7, scope: !5605)
!5607 = !DILocation(line: 1479, column: 7, scope: !5601)
!5608 = !DILocation(line: 1480, column: 12, scope: !5605)
!5609 = !DILocation(line: 1480, column: 18, scope: !5605)
!5610 = !DILocation(line: 1480, column: 25, scope: !5605)
!5611 = !DILocation(line: 1480, column: 5, scope: !5605)
!5612 = !DILocation(line: 1482, column: 5, scope: !5605)
!5613 = !DILocation(line: 1483, column: 1, scope: !5601)
!5614 = distinct !DISubprogram(name: "gimple_plf", scope: !581, file: !581, line: 1247, type: !5615, scopeLine: 1248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5615 = !DISubroutineType(types: !5616)
!5616 = !{!7, !1434, !633}
!5617 = !DILocalVariable(name: "stmt", arg: 1, scope: !5614, file: !581, line: 1247, type: !1434)
!5618 = !DILocation(line: 1247, column: 20, scope: !5614)
!5619 = !DILocalVariable(name: "plf", arg: 2, scope: !5614, file: !581, line: 1247, type: !633)
!5620 = !DILocation(line: 1247, column: 40, scope: !5614)
!5621 = !DILocation(line: 1249, column: 10, scope: !5614)
!5622 = !DILocation(line: 1249, column: 16, scope: !5614)
!5623 = !DILocation(line: 1249, column: 23, scope: !5614)
!5624 = !DILocation(line: 1249, column: 45, scope: !5614)
!5625 = !DILocation(line: 1249, column: 27, scope: !5614)
!5626 = !DILocation(line: 1249, column: 3, scope: !5614)
!5627 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !581, file: !581, line: 34, type: !5628, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5628 = !DISubroutineType(types: !5629)
!5629 = !{!5630, !5631, !1434}
!5630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1434, size: 64)
!5631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2785, size: 64)
!5632 = !DILocalVariable(name: "vec_", arg: 1, scope: !5627, file: !581, line: 34, type: !5631)
!5633 = !DILocation(line: 34, column: 1, scope: !5627)
!5634 = !DILocalVariable(name: "obj_", arg: 2, scope: !5627, file: !581, line: 34, type: !1434)
!5635 = distinct !DISubprogram(name: "is_gimple_debug", scope: !581, file: !581, line: 3249, type: !3735, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5636 = !DILocalVariable(name: "gs", arg: 1, scope: !5635, file: !581, line: 3249, type: !2956)
!5637 = !DILocation(line: 3249, column: 31, scope: !5635)
!5638 = !DILocation(line: 3251, column: 23, scope: !5635)
!5639 = !DILocation(line: 3251, column: 10, scope: !5635)
!5640 = !DILocation(line: 3251, column: 27, scope: !5635)
!5641 = !DILocation(line: 3251, column: 3, scope: !5635)
!5642 = distinct !DISubprogram(name: "SET_BIT", scope: !2842, file: !2842, line: 63, type: !5643, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5643 = !DISubroutineType(types: !5644)
!5644 = !{null, !2841, !7}
!5645 = !DILocalVariable(name: "map", arg: 1, scope: !5642, file: !2842, line: 63, type: !2841)
!5646 = !DILocation(line: 63, column: 18, scope: !5642)
!5647 = !DILocalVariable(name: "bitno", arg: 2, scope: !5642, file: !2842, line: 63, type: !7)
!5648 = !DILocation(line: 63, column: 36, scope: !5642)
!5649 = !DILocation(line: 65, column: 7, scope: !5650)
!5650 = distinct !DILexicalBlock(scope: !5642, file: !2842, line: 65, column: 7)
!5651 = !DILocation(line: 65, column: 12, scope: !5650)
!5652 = !DILocation(line: 65, column: 7, scope: !5642)
!5653 = !DILocalVariable(name: "oldbit", scope: !5654, file: !2842, line: 67, type: !1735)
!5654 = distinct !DILexicalBlock(scope: !5650, file: !2842, line: 66, column: 5)
!5655 = !DILocation(line: 67, column: 12, scope: !5654)
!5656 = !DILocation(line: 68, column: 16, scope: !5654)
!5657 = !DILocation(line: 68, column: 14, scope: !5654)
!5658 = !DILocation(line: 69, column: 12, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5654, file: !2842, line: 69, column: 11)
!5660 = !DILocation(line: 69, column: 11, scope: !5654)
!5661 = !DILocation(line: 70, column: 2, scope: !5659)
!5662 = !DILocation(line: 70, column: 7, scope: !5659)
!5663 = !DILocation(line: 70, column: 16, scope: !5659)
!5664 = !DILocation(line: 70, column: 22, scope: !5659)
!5665 = !DILocation(line: 70, column: 41, scope: !5659)
!5666 = !DILocation(line: 71, column: 5, scope: !5654)
!5667 = !DILocation(line: 73, column: 33, scope: !5642)
!5668 = !DILocation(line: 73, column: 40, scope: !5642)
!5669 = !DILocation(line: 73, column: 29, scope: !5642)
!5670 = !DILocation(line: 72, column: 3, scope: !5642)
!5671 = !DILocation(line: 72, column: 8, scope: !5642)
!5672 = !DILocation(line: 72, column: 13, scope: !5642)
!5673 = !DILocation(line: 72, column: 19, scope: !5642)
!5674 = !DILocation(line: 73, column: 5, scope: !5642)
!5675 = !DILocation(line: 74, column: 1, scope: !5642)
!5676 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !581, file: !581, line: 34, type: !5677, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5677 = !DISubroutineType(types: !5678)
!5678 = !{!1524, !5631, !1524}
!5679 = !DILocalVariable(name: "vec_", arg: 1, scope: !5676, file: !581, line: 34, type: !5631)
!5680 = !DILocation(line: 34, column: 1, scope: !5676)
!5681 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5676, file: !581, line: 34, type: !1524)
!5682 = !DILocalVariable(name: "extend", scope: !5676, file: !581, line: 34, type: !1524)
!5683 = !DILocation(line: 34, column: 1, scope: !5684)
!5684 = distinct !DILexicalBlock(scope: !5676, file: !581, line: 34, column: 1)
!5685 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !581, file: !581, line: 33, type: !5686, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5686 = !DISubroutineType(types: !5687)
!5687 = !{!5630, !5688, !1434}
!5688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1974, size: 64)
!5689 = !DILocalVariable(name: "vec_", arg: 1, scope: !5685, file: !581, line: 33, type: !5688)
!5690 = !DILocation(line: 33, column: 1, scope: !5685)
!5691 = !DILocalVariable(name: "obj_", arg: 2, scope: !5685, file: !581, line: 33, type: !1434)
!5692 = !DILocalVariable(name: "slot_", scope: !5685, file: !581, line: 33, type: !5630)
!5693 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !581, file: !581, line: 33, type: !5694, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5694 = !DISubroutineType(types: !5695)
!5695 = !{!1524, !5688, !1524}
!5696 = !DILocalVariable(name: "vec_", arg: 1, scope: !5693, file: !581, line: 33, type: !5688)
!5697 = !DILocation(line: 33, column: 1, scope: !5693)
!5698 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5693, file: !581, line: 33, type: !1524)
!5699 = distinct !DISubprogram(name: "gimple_op", scope: !581, file: !581, line: 1631, type: !5700, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5700 = !DISubroutineType(types: !5701)
!5701 = !{!1622, !2956, !7}
!5702 = !DILocalVariable(name: "gs", arg: 1, scope: !5699, file: !581, line: 1631, type: !2956)
!5703 = !DILocation(line: 1631, column: 25, scope: !5699)
!5704 = !DILocalVariable(name: "i", arg: 2, scope: !5699, file: !581, line: 1631, type: !7)
!5705 = !DILocation(line: 1631, column: 38, scope: !5699)
!5706 = !DILocation(line: 1633, column: 23, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5699, file: !581, line: 1633, column: 7)
!5708 = !DILocation(line: 1633, column: 7, scope: !5707)
!5709 = !DILocation(line: 1633, column: 7, scope: !5699)
!5710 = !DILocation(line: 1638, column: 26, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5707, file: !581, line: 1634, column: 5)
!5712 = !DILocation(line: 1638, column: 14, scope: !5711)
!5713 = !DILocation(line: 1638, column: 50, scope: !5711)
!5714 = !DILocation(line: 1638, column: 7, scope: !5711)
!5715 = !DILocation(line: 1641, column: 5, scope: !5707)
!5716 = !DILocation(line: 1642, column: 1, scope: !5699)
!5717 = distinct !DISubprogram(name: "gimple_ops", scope: !581, file: !581, line: 1614, type: !5718, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5718 = !DISubroutineType(types: !5719)
!5719 = !{!2034, !1434}
!5720 = !DILocalVariable(name: "gs", arg: 1, scope: !5717, file: !581, line: 1614, type: !1434)
!5721 = !DILocation(line: 1614, column: 20, scope: !5717)
!5722 = !DILocalVariable(name: "off", scope: !5717, file: !581, line: 1616, type: !1943)
!5723 = !DILocation(line: 1616, column: 10, scope: !5717)
!5724 = !DILocation(line: 1621, column: 56, scope: !5717)
!5725 = !DILocation(line: 1621, column: 28, scope: !5717)
!5726 = !DILocation(line: 1621, column: 9, scope: !5717)
!5727 = !DILocation(line: 1621, column: 7, scope: !5717)
!5728 = !DILocation(line: 1622, column: 3, scope: !5717)
!5729 = !DILocation(line: 1624, column: 29, scope: !5717)
!5730 = !DILocation(line: 1624, column: 20, scope: !5717)
!5731 = !DILocation(line: 1624, column: 34, scope: !5717)
!5732 = !DILocation(line: 1624, column: 32, scope: !5717)
!5733 = !DILocation(line: 1624, column: 10, scope: !5717)
!5734 = !DILocation(line: 1624, column: 3, scope: !5717)
!5735 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !581, file: !581, line: 1073, type: !5736, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5736 = !DISubroutineType(types: !5737)
!5737 = !{!651, !1434}
!5738 = !DILocalVariable(name: "gs", arg: 1, scope: !5735, file: !581, line: 1073, type: !1434)
!5739 = !DILocation(line: 1073, column: 36, scope: !5735)
!5740 = !DILocation(line: 1075, column: 37, scope: !5735)
!5741 = !DILocation(line: 1075, column: 24, scope: !5735)
!5742 = !DILocation(line: 1075, column: 10, scope: !5735)
!5743 = !DILocation(line: 1075, column: 3, scope: !5735)
!5744 = distinct !DISubprogram(name: "gss_for_code", scope: !581, file: !581, line: 1061, type: !5745, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5745 = !DISubroutineType(types: !5746)
!5746 = !{!651, !580}
!5747 = !DILocalVariable(name: "code", arg: 1, scope: !5744, file: !581, line: 1061, type: !580)
!5748 = !DILocation(line: 1061, column: 32, scope: !5744)
!5749 = !DILocation(line: 1066, column: 24, scope: !5744)
!5750 = !DILocation(line: 1066, column: 10, scope: !5744)
!5751 = !DILocation(line: 1066, column: 3, scope: !5744)
!5752 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !5753, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5753 = !DISubroutineType(types: !5754)
!5754 = !{!1735, !4052}
!5755 = !DILocalVariable(name: "i", arg: 1, scope: !5752, file: !135, line: 721, type: !4052)
!5756 = !DILocation(line: 721, column: 25, scope: !5752)
!5757 = !DILocation(line: 723, column: 13, scope: !5752)
!5758 = !DILocation(line: 723, column: 22, scope: !5752)
!5759 = !DILocation(line: 723, column: 19, scope: !5752)
!5760 = !DILocation(line: 723, column: 10, scope: !5752)
!5761 = !DILocation(line: 723, column: 3, scope: !5752)
!5762 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !5763, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5763 = !DISubroutineType(types: !5764)
!5764 = !{!1475, !4052}
!5765 = !DILocalVariable(name: "i", arg: 1, scope: !5762, file: !135, line: 752, type: !4052)
!5766 = !DILocation(line: 752, column: 24, scope: !5762)
!5767 = !DILocation(line: 754, column: 10, scope: !5762)
!5768 = !DILocation(line: 754, column: 3, scope: !5762)
!5769 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !5770, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5770 = !DISubroutineType(types: !5771)
!5771 = !{!1463, !4052}
!5772 = !DILocalVariable(name: "i", arg: 1, scope: !5769, file: !135, line: 685, type: !4052)
!5773 = !DILocation(line: 685, column: 29, scope: !5769)
!5774 = !DILocation(line: 687, column: 3, scope: !5769)
!5775 = !DILocation(line: 688, column: 13, scope: !5769)
!5776 = !DILocation(line: 688, column: 10, scope: !5769)
!5777 = !DILocation(line: 688, column: 3, scope: !5769)
!5778 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1560, file: !1560, line: 224, type: !5779, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5779 = !DISubroutineType(types: !5780)
!5780 = !{null, !5781, !5782, !7, !5785}
!5781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5211, size: 64)
!5782 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1435, line: 48, baseType: !5783)
!5783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5784, size: 64)
!5784 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1559)
!5785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5786 = !DILocalVariable(name: "bi", arg: 1, scope: !5778, file: !1560, line: 224, type: !5781)
!5787 = !DILocation(line: 224, column: 37, scope: !5778)
!5788 = !DILocalVariable(name: "map", arg: 2, scope: !5778, file: !1560, line: 224, type: !5782)
!5789 = !DILocation(line: 224, column: 54, scope: !5778)
!5790 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5778, file: !1560, line: 225, type: !7)
!5791 = !DILocation(line: 225, column: 15, scope: !5778)
!5792 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5778, file: !1560, line: 225, type: !5785)
!5793 = !DILocation(line: 225, column: 36, scope: !5778)
!5794 = !DILocation(line: 227, column: 14, scope: !5778)
!5795 = !DILocation(line: 227, column: 19, scope: !5778)
!5796 = !DILocation(line: 227, column: 3, scope: !5778)
!5797 = !DILocation(line: 227, column: 7, scope: !5778)
!5798 = !DILocation(line: 227, column: 12, scope: !5778)
!5799 = !DILocation(line: 228, column: 3, scope: !5778)
!5800 = !DILocation(line: 228, column: 7, scope: !5778)
!5801 = !DILocation(line: 228, column: 12, scope: !5778)
!5802 = !DILocation(line: 231, column: 3, scope: !5778)
!5803 = !DILocation(line: 233, column: 12, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5805, file: !1560, line: 233, column: 11)
!5805 = distinct !DILexicalBlock(scope: !5778, file: !1560, line: 232, column: 5)
!5806 = !DILocation(line: 233, column: 16, scope: !5804)
!5807 = !DILocation(line: 233, column: 11, scope: !5805)
!5808 = !DILocation(line: 235, column: 4, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5804, file: !1560, line: 234, column: 2)
!5810 = !DILocation(line: 235, column: 8, scope: !5809)
!5811 = !DILocation(line: 235, column: 13, scope: !5809)
!5812 = !DILocation(line: 236, column: 4, scope: !5809)
!5813 = !DILocation(line: 239, column: 11, scope: !5814)
!5814 = distinct !DILexicalBlock(scope: !5805, file: !1560, line: 239, column: 11)
!5815 = !DILocation(line: 239, column: 15, scope: !5814)
!5816 = !DILocation(line: 239, column: 21, scope: !5814)
!5817 = !DILocation(line: 239, column: 29, scope: !5814)
!5818 = !DILocation(line: 239, column: 39, scope: !5814)
!5819 = !DILocation(line: 239, column: 26, scope: !5814)
!5820 = !DILocation(line: 239, column: 11, scope: !5805)
!5821 = !DILocation(line: 240, column: 2, scope: !5814)
!5822 = !DILocation(line: 241, column: 18, scope: !5805)
!5823 = !DILocation(line: 241, column: 22, scope: !5805)
!5824 = !DILocation(line: 241, column: 28, scope: !5805)
!5825 = !DILocation(line: 241, column: 7, scope: !5805)
!5826 = !DILocation(line: 241, column: 11, scope: !5805)
!5827 = !DILocation(line: 241, column: 16, scope: !5805)
!5828 = distinct !{!5828, !5802, !5829}
!5829 = !DILocation(line: 242, column: 5, scope: !5778)
!5830 = !DILocation(line: 245, column: 7, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5778, file: !1560, line: 245, column: 7)
!5832 = !DILocation(line: 245, column: 11, scope: !5831)
!5833 = !DILocation(line: 245, column: 17, scope: !5831)
!5834 = !DILocation(line: 245, column: 25, scope: !5831)
!5835 = !DILocation(line: 245, column: 35, scope: !5831)
!5836 = !DILocation(line: 245, column: 22, scope: !5831)
!5837 = !DILocation(line: 245, column: 7, scope: !5778)
!5838 = !DILocation(line: 246, column: 17, scope: !5831)
!5839 = !DILocation(line: 246, column: 21, scope: !5831)
!5840 = !DILocation(line: 246, column: 27, scope: !5831)
!5841 = !DILocation(line: 246, column: 32, scope: !5831)
!5842 = !DILocation(line: 246, column: 15, scope: !5831)
!5843 = !DILocation(line: 246, column: 5, scope: !5831)
!5844 = !DILocation(line: 249, column: 17, scope: !5778)
!5845 = !DILocation(line: 249, column: 27, scope: !5778)
!5846 = !DILocation(line: 249, column: 46, scope: !5778)
!5847 = !DILocation(line: 249, column: 3, scope: !5778)
!5848 = !DILocation(line: 249, column: 7, scope: !5778)
!5849 = !DILocation(line: 249, column: 15, scope: !5778)
!5850 = !DILocation(line: 250, column: 14, scope: !5778)
!5851 = !DILocation(line: 250, column: 18, scope: !5778)
!5852 = !DILocation(line: 250, column: 24, scope: !5778)
!5853 = !DILocation(line: 250, column: 29, scope: !5778)
!5854 = !DILocation(line: 250, column: 33, scope: !5778)
!5855 = !DILocation(line: 250, column: 3, scope: !5778)
!5856 = !DILocation(line: 250, column: 7, scope: !5778)
!5857 = !DILocation(line: 250, column: 12, scope: !5778)
!5858 = !DILocation(line: 251, column: 16, scope: !5778)
!5859 = !DILocation(line: 251, column: 26, scope: !5778)
!5860 = !DILocation(line: 251, column: 3, scope: !5778)
!5861 = !DILocation(line: 251, column: 7, scope: !5778)
!5862 = !DILocation(line: 251, column: 12, scope: !5778)
!5863 = !DILocation(line: 257, column: 17, scope: !5778)
!5864 = !DILocation(line: 257, column: 21, scope: !5778)
!5865 = !DILocation(line: 257, column: 16, scope: !5778)
!5866 = !DILocation(line: 257, column: 13, scope: !5778)
!5867 = !DILocation(line: 259, column: 13, scope: !5778)
!5868 = !DILocation(line: 259, column: 4, scope: !5778)
!5869 = !DILocation(line: 259, column: 11, scope: !5778)
!5870 = !DILocation(line: 260, column: 1, scope: !5778)
!5871 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1560, file: !1560, line: 393, type: !5872, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5872 = !DISubroutineType(types: !5873)
!5873 = !{!1735, !5781, !5785}
!5874 = !DILocalVariable(name: "bi", arg: 1, scope: !5871, file: !1560, line: 393, type: !5781)
!5875 = !DILocation(line: 393, column: 32, scope: !5871)
!5876 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5871, file: !1560, line: 393, type: !5785)
!5877 = !DILocation(line: 393, column: 46, scope: !5871)
!5878 = !DILocation(line: 396, column: 7, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5871, file: !1560, line: 396, column: 7)
!5880 = !DILocation(line: 396, column: 11, scope: !5879)
!5881 = !DILocation(line: 396, column: 7, scope: !5871)
!5882 = !DILocation(line: 397, column: 5, scope: !5879)
!5883 = !DILabel(scope: !5884, name: "next_bit", file: !1560, line: 398)
!5884 = distinct !DILexicalBlock(scope: !5879, file: !1560, line: 397, column: 5)
!5885 = !DILocation(line: 398, column: 5, scope: !5884)
!5886 = !DILocation(line: 399, column: 7, scope: !5884)
!5887 = !DILocation(line: 399, column: 16, scope: !5884)
!5888 = !DILocation(line: 399, column: 20, scope: !5884)
!5889 = !DILocation(line: 399, column: 25, scope: !5884)
!5890 = !DILocation(line: 399, column: 14, scope: !5884)
!5891 = !DILocation(line: 401, column: 4, scope: !5892)
!5892 = distinct !DILexicalBlock(scope: !5884, file: !1560, line: 400, column: 2)
!5893 = !DILocation(line: 401, column: 8, scope: !5892)
!5894 = !DILocation(line: 401, column: 13, scope: !5892)
!5895 = !DILocation(line: 402, column: 5, scope: !5892)
!5896 = !DILocation(line: 402, column: 12, scope: !5892)
!5897 = distinct !{!5897, !5886, !5898}
!5898 = !DILocation(line: 403, column: 2, scope: !5884)
!5899 = !DILocation(line: 404, column: 7, scope: !5884)
!5900 = !DILocation(line: 410, column: 16, scope: !5871)
!5901 = !DILocation(line: 410, column: 15, scope: !5871)
!5902 = !DILocation(line: 410, column: 23, scope: !5871)
!5903 = !DILocation(line: 410, column: 42, scope: !5871)
!5904 = !DILocation(line: 411, column: 7, scope: !5871)
!5905 = !DILocation(line: 411, column: 26, scope: !5871)
!5906 = !DILocation(line: 410, column: 4, scope: !5871)
!5907 = !DILocation(line: 410, column: 11, scope: !5871)
!5908 = !DILocation(line: 412, column: 3, scope: !5871)
!5909 = !DILocation(line: 412, column: 7, scope: !5871)
!5910 = !DILocation(line: 412, column: 14, scope: !5871)
!5911 = !DILocation(line: 414, column: 3, scope: !5871)
!5912 = !DILocation(line: 417, column: 7, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5871, file: !1560, line: 415, column: 5)
!5914 = !DILocation(line: 417, column: 14, scope: !5913)
!5915 = !DILocation(line: 417, column: 18, scope: !5913)
!5916 = !DILocation(line: 417, column: 26, scope: !5913)
!5917 = !DILocation(line: 419, column: 15, scope: !5918)
!5918 = distinct !DILexicalBlock(scope: !5913, file: !1560, line: 418, column: 2)
!5919 = !DILocation(line: 419, column: 19, scope: !5918)
!5920 = !DILocation(line: 419, column: 25, scope: !5918)
!5921 = !DILocation(line: 419, column: 30, scope: !5918)
!5922 = !DILocation(line: 419, column: 34, scope: !5918)
!5923 = !DILocation(line: 419, column: 4, scope: !5918)
!5924 = !DILocation(line: 419, column: 8, scope: !5918)
!5925 = !DILocation(line: 419, column: 13, scope: !5918)
!5926 = !DILocation(line: 420, column: 8, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5918, file: !1560, line: 420, column: 8)
!5928 = !DILocation(line: 420, column: 12, scope: !5927)
!5929 = !DILocation(line: 420, column: 8, scope: !5918)
!5930 = !DILocation(line: 421, column: 6, scope: !5927)
!5931 = !DILocation(line: 422, column: 5, scope: !5918)
!5932 = !DILocation(line: 422, column: 12, scope: !5918)
!5933 = !DILocation(line: 423, column: 4, scope: !5918)
!5934 = !DILocation(line: 423, column: 8, scope: !5918)
!5935 = !DILocation(line: 423, column: 15, scope: !5918)
!5936 = distinct !{!5936, !5912, !5937}
!5937 = !DILocation(line: 424, column: 2, scope: !5913)
!5938 = !DILocation(line: 427, column: 18, scope: !5913)
!5939 = !DILocation(line: 427, column: 22, scope: !5913)
!5940 = !DILocation(line: 427, column: 28, scope: !5913)
!5941 = !DILocation(line: 427, column: 7, scope: !5913)
!5942 = !DILocation(line: 427, column: 11, scope: !5913)
!5943 = !DILocation(line: 427, column: 16, scope: !5913)
!5944 = !DILocation(line: 428, column: 12, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5913, file: !1560, line: 428, column: 11)
!5946 = !DILocation(line: 428, column: 16, scope: !5945)
!5947 = !DILocation(line: 428, column: 11, scope: !5913)
!5948 = !DILocation(line: 429, column: 2, scope: !5945)
!5949 = !DILocation(line: 430, column: 17, scope: !5913)
!5950 = !DILocation(line: 430, column: 21, scope: !5913)
!5951 = !DILocation(line: 430, column: 27, scope: !5913)
!5952 = !DILocation(line: 430, column: 32, scope: !5913)
!5953 = !DILocation(line: 430, column: 8, scope: !5913)
!5954 = !DILocation(line: 430, column: 15, scope: !5913)
!5955 = !DILocation(line: 431, column: 7, scope: !5913)
!5956 = !DILocation(line: 431, column: 11, scope: !5913)
!5957 = !DILocation(line: 431, column: 19, scope: !5913)
!5958 = distinct !{!5958, !5911, !5959}
!5959 = !DILocation(line: 432, column: 5, scope: !5871)
!5960 = !DILocation(line: 433, column: 1, scope: !5871)
!5961 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1560, file: !1560, line: 382, type: !5962, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5962 = !DISubroutineType(types: !5963)
!5963 = !{null, !5781, !5785}
!5964 = !DILocalVariable(name: "bi", arg: 1, scope: !5961, file: !1560, line: 382, type: !5781)
!5965 = !DILocation(line: 382, column: 33, scope: !5961)
!5966 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5961, file: !1560, line: 382, type: !5785)
!5967 = !DILocation(line: 382, column: 47, scope: !5961)
!5968 = !DILocation(line: 384, column: 3, scope: !5961)
!5969 = !DILocation(line: 384, column: 7, scope: !5961)
!5970 = !DILocation(line: 384, column: 12, scope: !5961)
!5971 = !DILocation(line: 385, column: 4, scope: !5961)
!5972 = !DILocation(line: 385, column: 11, scope: !5961)
!5973 = !DILocation(line: 386, column: 1, scope: !5961)
!5974 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2794, file: !2794, line: 32, type: !5975, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5975 = !DISubroutineType(types: !5976)
!5976 = !{!2792, !1524}
!5977 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5974, file: !2794, line: 32, type: !1524)
!5978 = !DILocation(line: 32, column: 1, scope: !5974)
!5979 = distinct !DISubprogram(name: "number_of_loops", scope: !146, file: !146, line: 459, type: !2822, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5980 = !DILocation(line: 461, column: 8, scope: !5981)
!5981 = distinct !DILexicalBlock(scope: !5979, file: !146, line: 461, column: 7)
!5982 = !DILocation(line: 461, column: 7, scope: !5979)
!5983 = !DILocation(line: 462, column: 5, scope: !5981)
!5984 = !DILocation(line: 464, column: 10, scope: !5979)
!5985 = !DILocation(line: 464, column: 3, scope: !5979)
!5986 = !DILocation(line: 465, column: 1, scope: !5979)
!5987 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !146, file: !146, line: 85, type: !5988, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!5988 = !DISubroutineType(types: !5989)
!5989 = !{!1524, !5990, !7, !5280}
!5990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5991, size: 64)
!5991 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2052)
!5992 = !DILocalVariable(name: "vec_", arg: 1, scope: !5987, file: !146, line: 85, type: !5990)
!5993 = !DILocation(line: 85, column: 1, scope: !5987)
!5994 = !DILocalVariable(name: "ix_", arg: 2, scope: !5987, file: !146, line: 85, type: !7)
!5995 = !DILocalVariable(name: "ptr", arg: 3, scope: !5987, file: !146, line: 85, type: !5280)
!5996 = !DILocation(line: 85, column: 1, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5987, file: !146, line: 85, column: 1)
!5998 = !DILocation(line: 85, column: 1, scope: !5999)
!5999 = distinct !DILexicalBlock(scope: !5997, file: !146, line: 85, column: 1)
!6000 = !DILocation(line: 85, column: 1, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5997, file: !146, line: 85, column: 1)
!6002 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2794, file: !2794, line: 31, type: !6003, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6003 = !DISubroutineType(types: !6004)
!6004 = !{!6005, !6006, !1524}
!6005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1524, size: 64)
!6006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2798, size: 64)
!6007 = !DILocalVariable(name: "vec_", arg: 1, scope: !6002, file: !2794, line: 31, type: !6006)
!6008 = !DILocation(line: 31, column: 1, scope: !6002)
!6009 = !DILocalVariable(name: "obj_", arg: 2, scope: !6002, file: !2794, line: 31, type: !1524)
!6010 = !DILocalVariable(name: "slot_", scope: !6002, file: !2794, line: 31, type: !6005)
!6011 = distinct !DISubprogram(name: "loop_outer", scope: !146, file: !146, line: 434, type: !6012, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6012 = !DISubroutineType(types: !6013)
!6013 = !{!2060, !6014}
!6014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6015, size: 64)
!6015 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2061)
!6016 = !DILocalVariable(name: "loop", arg: 1, scope: !6011, file: !146, line: 434, type: !6014)
!6017 = !DILocation(line: 434, column: 32, scope: !6011)
!6018 = !DILocalVariable(name: "n", scope: !6011, file: !146, line: 436, type: !7)
!6019 = !DILocation(line: 436, column: 12, scope: !6011)
!6020 = !DILocation(line: 436, column: 16, scope: !6011)
!6021 = !DILocation(line: 438, column: 7, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6011, file: !146, line: 438, column: 7)
!6023 = !DILocation(line: 438, column: 9, scope: !6022)
!6024 = !DILocation(line: 438, column: 7, scope: !6011)
!6025 = !DILocation(line: 439, column: 5, scope: !6022)
!6026 = !DILocation(line: 441, column: 10, scope: !6011)
!6027 = !DILocation(line: 441, column: 3, scope: !6011)
!6028 = !DILocation(line: 442, column: 1, scope: !6011)
!6029 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !146, file: !146, line: 85, type: !6030, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6030 = !DISubroutineType(types: !6031)
!6031 = !{!7, !5990}
!6032 = !DILocalVariable(name: "vec_", arg: 1, scope: !6029, file: !146, line: 85, type: !5990)
!6033 = !DILocation(line: 85, column: 1, scope: !6029)
!6034 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !146, file: !146, line: 85, type: !6035, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6035 = !DISubroutineType(types: !6036)
!6036 = !{!2059, !5990, !7}
!6037 = !DILocalVariable(name: "vec_", arg: 1, scope: !6034, file: !146, line: 85, type: !5990)
!6038 = !DILocation(line: 85, column: 1, scope: !6034)
!6039 = !DILocalVariable(name: "ix_", arg: 2, scope: !6034, file: !146, line: 85, type: !7)
!6040 = !DILocation(line: 0, scope: !6034)
!6041 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2794, file: !2794, line: 31, type: !6042, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6042 = !DISubroutineType(types: !6043)
!6043 = !{!1524, !6044, !7, !6005}
!6044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6045, size: 64)
!6045 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2798)
!6046 = !DILocalVariable(name: "vec_", arg: 1, scope: !6041, file: !2794, line: 31, type: !6044)
!6047 = !DILocation(line: 31, column: 1, scope: !6041)
!6048 = !DILocalVariable(name: "ix_", arg: 2, scope: !6041, file: !2794, line: 31, type: !7)
!6049 = !DILocalVariable(name: "ptr", arg: 3, scope: !6041, file: !2794, line: 31, type: !6005)
!6050 = !DILocation(line: 31, column: 1, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6041, file: !2794, line: 31, column: 1)
!6052 = !DILocation(line: 31, column: 1, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6051, file: !2794, line: 31, column: 1)
!6054 = !DILocation(line: 31, column: 1, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6051, file: !2794, line: 31, column: 1)
!6056 = distinct !DISubprogram(name: "get_loop", scope: !146, file: !146, line: 417, type: !6057, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6057 = !DISubroutineType(types: !6058)
!6058 = !{!2060, !7}
!6059 = !DILocalVariable(name: "num", arg: 1, scope: !6056, file: !146, line: 417, type: !7)
!6060 = !DILocation(line: 417, column: 20, scope: !6056)
!6061 = !DILocation(line: 419, column: 10, scope: !6056)
!6062 = !DILocation(line: 419, column: 3, scope: !6056)
!6063 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2794, file: !2794, line: 32, type: !6064, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6064 = !DISubroutineType(types: !6065)
!6065 = !{null, !6066}
!6066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2792, size: 64)
!6067 = !DILocalVariable(name: "vec_", arg: 1, scope: !6063, file: !2794, line: 32, type: !6066)
!6068 = !DILocation(line: 32, column: 1, scope: !6063)
!6069 = !DILocation(line: 32, column: 1, scope: !6070)
!6070 = distinct !DILexicalBlock(scope: !6063, file: !2794, line: 32, column: 1)
!6071 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !581, file: !581, line: 33, type: !6072, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6072 = !DISubroutineType(types: !6073)
!6073 = !{!7, !6074}
!6074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6075, size: 64)
!6075 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1974)
!6076 = !DILocalVariable(name: "vec_", arg: 1, scope: !6071, file: !581, line: 33, type: !6074)
!6077 = !DILocation(line: 33, column: 1, scope: !6071)
!6078 = distinct !DISubprogram(name: "VEC_gimple_base_pop", scope: !581, file: !581, line: 33, type: !6079, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6079 = !DISubroutineType(types: !6080)
!6080 = !{!1434, !5688}
!6081 = !DILocalVariable(name: "vec_", arg: 1, scope: !6078, file: !581, line: 33, type: !5688)
!6082 = !DILocation(line: 33, column: 1, scope: !6078)
!6083 = !DILocalVariable(name: "obj_", scope: !6078, file: !581, line: 33, type: !1434)
!6084 = distinct !DISubprogram(name: "mark_operand_necessary", scope: !3, file: !3, line: 232, type: !6085, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6085 = !DISubroutineType(types: !6086)
!6086 = !{null, !1622}
!6087 = !DILocalVariable(name: "op", arg: 1, scope: !6084, file: !3, line: 232, type: !1622)
!6088 = !DILocation(line: 232, column: 30, scope: !6084)
!6089 = !DILocalVariable(name: "stmt", scope: !6084, file: !3, line: 234, type: !1434)
!6090 = !DILocation(line: 234, column: 10, scope: !6084)
!6091 = !DILocalVariable(name: "ver", scope: !6084, file: !3, line: 235, type: !1524)
!6092 = !DILocation(line: 235, column: 7, scope: !6084)
!6093 = !DILocation(line: 237, column: 3, scope: !6084)
!6094 = !DILocation(line: 239, column: 9, scope: !6084)
!6095 = !DILocation(line: 239, column: 7, scope: !6084)
!6096 = !DILocation(line: 240, column: 7, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 240, column: 7)
!6098 = !DILocation(line: 240, column: 7, scope: !6084)
!6099 = !DILocation(line: 242, column: 14, scope: !6100)
!6100 = distinct !DILexicalBlock(scope: !6097, file: !3, line: 241, column: 5)
!6101 = !DILocation(line: 242, column: 12, scope: !6100)
!6102 = !DILocation(line: 243, column: 7, scope: !6100)
!6103 = !DILocation(line: 245, column: 7, scope: !6100)
!6104 = !DILocation(line: 247, column: 12, scope: !6084)
!6105 = !DILocation(line: 247, column: 23, scope: !6084)
!6106 = !DILocation(line: 247, column: 3, scope: !6084)
!6107 = !DILocation(line: 249, column: 10, scope: !6084)
!6108 = !DILocation(line: 249, column: 8, scope: !6084)
!6109 = !DILocation(line: 250, column: 3, scope: !6084)
!6110 = !DILocation(line: 252, column: 19, scope: !6111)
!6111 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 252, column: 7)
!6112 = !DILocation(line: 252, column: 7, scope: !6111)
!6113 = !DILocation(line: 252, column: 41, scope: !6111)
!6114 = !DILocation(line: 252, column: 58, scope: !6111)
!6115 = !DILocation(line: 252, column: 44, scope: !6111)
!6116 = !DILocation(line: 252, column: 7, scope: !6084)
!6117 = !DILocation(line: 253, column: 5, scope: !6111)
!6118 = !DILocation(line: 255, column: 7, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 255, column: 7)
!6120 = !DILocation(line: 255, column: 17, scope: !6119)
!6121 = !DILocation(line: 255, column: 21, scope: !6119)
!6122 = !DILocation(line: 255, column: 32, scope: !6119)
!6123 = !DILocation(line: 255, column: 7, scope: !6084)
!6124 = !DILocation(line: 257, column: 16, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 256, column: 5)
!6126 = !DILocation(line: 257, column: 7, scope: !6125)
!6127 = !DILocation(line: 258, column: 27, scope: !6125)
!6128 = !DILocation(line: 258, column: 38, scope: !6125)
!6129 = !DILocation(line: 258, column: 7, scope: !6125)
!6130 = !DILocation(line: 259, column: 16, scope: !6125)
!6131 = !DILocation(line: 259, column: 7, scope: !6125)
!6132 = !DILocation(line: 260, column: 26, scope: !6125)
!6133 = !DILocation(line: 260, column: 37, scope: !6125)
!6134 = !DILocation(line: 260, column: 7, scope: !6125)
!6135 = !DILocation(line: 261, column: 5, scope: !6125)
!6136 = !DILocation(line: 263, column: 19, scope: !6084)
!6137 = !DILocation(line: 263, column: 3, scope: !6084)
!6138 = !DILocation(line: 264, column: 7, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 264, column: 7)
!6140 = !DILocation(line: 264, column: 7, scope: !6084)
!6141 = !DILocation(line: 265, column: 14, scope: !6139)
!6142 = !DILocation(line: 265, column: 49, scope: !6139)
!6143 = !DILocation(line: 265, column: 38, scope: !6139)
!6144 = !DILocation(line: 265, column: 56, scope: !6139)
!6145 = !DILocation(line: 265, column: 5, scope: !6139)
!6146 = !DILocation(line: 266, column: 3, scope: !6084)
!6147 = !DILocation(line: 267, column: 1, scope: !6084)
!6148 = distinct !DISubprogram(name: "degenerate_phi_p", scope: !3, file: !3, line: 610, type: !5576, scopeLine: 611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6149 = !DILocalVariable(name: "phi", arg: 1, scope: !6148, file: !3, line: 610, type: !1434)
!6150 = !DILocation(line: 610, column: 26, scope: !6148)
!6151 = !DILocalVariable(name: "i", scope: !6148, file: !3, line: 612, type: !7)
!6152 = !DILocation(line: 612, column: 16, scope: !6148)
!6153 = !DILocalVariable(name: "op", scope: !6148, file: !3, line: 613, type: !1622)
!6154 = !DILocation(line: 613, column: 8, scope: !6148)
!6155 = !DILocation(line: 613, column: 33, scope: !6148)
!6156 = !DILocation(line: 613, column: 13, scope: !6148)
!6157 = !DILocation(line: 614, column: 10, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6148, file: !3, line: 614, column: 3)
!6159 = !DILocation(line: 614, column: 8, scope: !6158)
!6160 = !DILocation(line: 614, column: 15, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 614, column: 3)
!6162 = !DILocation(line: 614, column: 40, scope: !6161)
!6163 = !DILocation(line: 614, column: 19, scope: !6161)
!6164 = !DILocation(line: 614, column: 17, scope: !6161)
!6165 = !DILocation(line: 614, column: 3, scope: !6158)
!6166 = !DILocation(line: 615, column: 29, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 615, column: 9)
!6168 = !DILocation(line: 615, column: 34, scope: !6167)
!6169 = !DILocation(line: 615, column: 9, scope: !6167)
!6170 = !DILocation(line: 615, column: 40, scope: !6167)
!6171 = !DILocation(line: 615, column: 37, scope: !6167)
!6172 = !DILocation(line: 615, column: 9, scope: !6161)
!6173 = !DILocation(line: 616, column: 7, scope: !6167)
!6174 = !DILocation(line: 614, column: 47, scope: !6161)
!6175 = !DILocation(line: 614, column: 3, scope: !6161)
!6176 = distinct !{!6176, !6165, !6177}
!6177 = !DILocation(line: 616, column: 14, scope: !6158)
!6178 = !DILocation(line: 617, column: 3, scope: !6148)
!6179 = !DILocation(line: 618, column: 1, scope: !6148)
!6180 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !2964, file: !2964, line: 467, type: !6181, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6181 = !DISubroutineType(types: !6182)
!6182 = !{!1475, !1434, !1943}
!6183 = !DILocalVariable(name: "gs", arg: 1, scope: !6180, file: !2964, line: 467, type: !1434)
!6184 = !DILocation(line: 467, column: 29, scope: !6180)
!6185 = !DILocalVariable(name: "i", arg: 2, scope: !6180, file: !2964, line: 467, type: !1943)
!6186 = !DILocation(line: 467, column: 40, scope: !6180)
!6187 = !DILocation(line: 469, column: 10, scope: !6180)
!6188 = !DILocation(line: 469, column: 3, scope: !6180)
!6189 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !2964, file: !2964, line: 792, type: !6190, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6190 = !DISubroutineType(types: !6191)
!6191 = !{!1622, !3305, !1434, !1524}
!6192 = !DILocalVariable(name: "ptr", arg: 1, scope: !6189, file: !2964, line: 792, type: !3305)
!6193 = !DILocation(line: 792, column: 33, scope: !6189)
!6194 = !DILocalVariable(name: "stmt", arg: 2, scope: !6189, file: !2964, line: 792, type: !1434)
!6195 = !DILocation(line: 792, column: 45, scope: !6189)
!6196 = !DILocalVariable(name: "flags", arg: 3, scope: !6189, file: !2964, line: 792, type: !1524)
!6197 = !DILocation(line: 792, column: 55, scope: !6189)
!6198 = !DILocation(line: 794, column: 17, scope: !6189)
!6199 = !DILocation(line: 794, column: 22, scope: !6189)
!6200 = !DILocation(line: 794, column: 28, scope: !6189)
!6201 = !DILocation(line: 794, column: 3, scope: !6189)
!6202 = !DILocation(line: 795, column: 3, scope: !6189)
!6203 = !DILocation(line: 795, column: 8, scope: !6189)
!6204 = !DILocation(line: 795, column: 18, scope: !6189)
!6205 = !DILocation(line: 796, column: 29, scope: !6189)
!6206 = !DILocation(line: 796, column: 10, scope: !6189)
!6207 = !DILocation(line: 796, column: 3, scope: !6189)
!6208 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !2964, file: !2964, line: 699, type: !6209, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6209 = !DISubroutineType(types: !6210)
!6210 = !{!1622, !3305}
!6211 = !DILocalVariable(name: "ptr", arg: 1, scope: !6208, file: !2964, line: 699, type: !3305)
!6212 = !DILocation(line: 699, column: 33, scope: !6208)
!6213 = !DILocalVariable(name: "val", scope: !6208, file: !2964, line: 701, type: !1622)
!6214 = !DILocation(line: 701, column: 8, scope: !6208)
!6215 = !DILocation(line: 705, column: 7, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6208, file: !2964, line: 705, column: 7)
!6217 = !DILocation(line: 705, column: 12, scope: !6216)
!6218 = !DILocation(line: 705, column: 7, scope: !6208)
!6219 = !DILocation(line: 707, column: 13, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !6216, file: !2964, line: 706, column: 5)
!6221 = !DILocation(line: 707, column: 11, scope: !6220)
!6222 = !DILocation(line: 708, column: 19, scope: !6220)
!6223 = !DILocation(line: 708, column: 24, scope: !6220)
!6224 = !DILocation(line: 708, column: 30, scope: !6220)
!6225 = !DILocation(line: 708, column: 7, scope: !6220)
!6226 = !DILocation(line: 708, column: 12, scope: !6220)
!6227 = !DILocation(line: 708, column: 17, scope: !6220)
!6228 = !DILocation(line: 709, column: 14, scope: !6220)
!6229 = !DILocation(line: 709, column: 7, scope: !6220)
!6230 = !DILocation(line: 711, column: 7, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6208, file: !2964, line: 711, column: 7)
!6232 = !DILocation(line: 711, column: 12, scope: !6231)
!6233 = !DILocation(line: 711, column: 7, scope: !6208)
!6234 = !DILocation(line: 713, column: 13, scope: !6235)
!6235 = distinct !DILexicalBlock(scope: !6231, file: !2964, line: 712, column: 5)
!6236 = !DILocation(line: 713, column: 11, scope: !6235)
!6237 = !DILocation(line: 714, column: 19, scope: !6235)
!6238 = !DILocation(line: 714, column: 24, scope: !6235)
!6239 = !DILocation(line: 714, column: 30, scope: !6235)
!6240 = !DILocation(line: 714, column: 7, scope: !6235)
!6241 = !DILocation(line: 714, column: 12, scope: !6235)
!6242 = !DILocation(line: 714, column: 17, scope: !6235)
!6243 = !DILocation(line: 715, column: 14, scope: !6235)
!6244 = !DILocation(line: 715, column: 7, scope: !6235)
!6245 = !DILocation(line: 718, column: 3, scope: !6208)
!6246 = !DILocation(line: 718, column: 8, scope: !6208)
!6247 = !DILocation(line: 718, column: 13, scope: !6208)
!6248 = !DILocation(line: 719, column: 3, scope: !6208)
!6249 = !DILocation(line: 721, column: 1, scope: !6208)
!6250 = distinct !DISubprogram(name: "mark_all_reaching_defs_necessary", scope: !3, file: !3, line: 601, type: !2885, scopeLine: 602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6251 = !DILocalVariable(name: "stmt", arg: 1, scope: !6250, file: !3, line: 601, type: !1434)
!6252 = !DILocation(line: 601, column: 42, scope: !6250)
!6253 = !DILocation(line: 603, column: 42, scope: !6250)
!6254 = !DILocation(line: 603, column: 29, scope: !6250)
!6255 = !DILocation(line: 603, column: 3, scope: !6250)
!6256 = !DILocation(line: 605, column: 1, scope: !6250)
!6257 = distinct !DISubprogram(name: "is_gimple_call", scope: !581, file: !581, line: 1870, type: !3735, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6258 = !DILocalVariable(name: "gs", arg: 1, scope: !6257, file: !581, line: 1870, type: !2956)
!6259 = !DILocation(line: 1870, column: 30, scope: !6257)
!6260 = !DILocation(line: 1872, column: 23, scope: !6257)
!6261 = !DILocation(line: 1872, column: 10, scope: !6257)
!6262 = !DILocation(line: 1872, column: 27, scope: !6257)
!6263 = !DILocation(line: 1872, column: 3, scope: !6257)
!6264 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !581, file: !581, line: 1954, type: !2954, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6265 = !DILocalVariable(name: "gs", arg: 1, scope: !6264, file: !581, line: 1954, type: !2956)
!6266 = !DILocation(line: 1954, column: 34, scope: !6264)
!6267 = !DILocalVariable(name: "addr", scope: !6264, file: !581, line: 1956, type: !1622)
!6268 = !DILocation(line: 1956, column: 8, scope: !6264)
!6269 = !DILocation(line: 1956, column: 31, scope: !6264)
!6270 = !DILocation(line: 1956, column: 15, scope: !6264)
!6271 = !DILocation(line: 1957, column: 7, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6264, file: !581, line: 1957, column: 7)
!6273 = !DILocation(line: 1957, column: 24, scope: !6272)
!6274 = !DILocation(line: 1957, column: 7, scope: !6264)
!6275 = !DILocation(line: 1958, column: 12, scope: !6272)
!6276 = !DILocation(line: 1958, column: 5, scope: !6272)
!6277 = !DILocation(line: 1959, column: 3, scope: !6264)
!6278 = !DILocation(line: 1960, column: 1, scope: !6264)
!6279 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !581, file: !581, line: 2013, type: !3569, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6280 = !DILocalVariable(name: "gs", arg: 1, scope: !6279, file: !581, line: 2013, type: !2956)
!6281 = !DILocation(line: 2013, column: 36, scope: !6279)
!6282 = !DILocalVariable(name: "num_ops", scope: !6279, file: !581, line: 2015, type: !7)
!6283 = !DILocation(line: 2015, column: 12, scope: !6279)
!6284 = !DILocation(line: 2017, column: 29, scope: !6279)
!6285 = !DILocation(line: 2017, column: 13, scope: !6279)
!6286 = !DILocation(line: 2017, column: 11, scope: !6279)
!6287 = !DILocation(line: 2018, column: 10, scope: !6279)
!6288 = !DILocation(line: 2018, column: 18, scope: !6279)
!6289 = !DILocation(line: 2018, column: 3, scope: !6279)
!6290 = distinct !DISubprogram(name: "gimple_call_arg", scope: !581, file: !581, line: 2025, type: !5700, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6291 = !DILocalVariable(name: "gs", arg: 1, scope: !6290, file: !581, line: 2025, type: !2956)
!6292 = !DILocation(line: 2025, column: 31, scope: !6290)
!6293 = !DILocalVariable(name: "index", arg: 2, scope: !6290, file: !581, line: 2025, type: !7)
!6294 = !DILocation(line: 2025, column: 44, scope: !6290)
!6295 = !DILocation(line: 2028, column: 21, scope: !6290)
!6296 = !DILocation(line: 2028, column: 25, scope: !6290)
!6297 = !DILocation(line: 2028, column: 31, scope: !6290)
!6298 = !DILocation(line: 2028, column: 10, scope: !6290)
!6299 = !DILocation(line: 2028, column: 3, scope: !6290)
!6300 = distinct !DISubprogram(name: "ref_may_be_aliased", scope: !3, file: !3, line: 481, type: !6301, scopeLine: 482, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6301 = !DISubroutineType(types: !6302)
!6302 = !{!1735, !1622}
!6303 = !DILocalVariable(name: "ref", arg: 1, scope: !6300, file: !3, line: 481, type: !1622)
!6304 = !DILocation(line: 481, column: 26, scope: !6300)
!6305 = !DILocation(line: 483, column: 3, scope: !6300)
!6306 = !DILocation(line: 483, column: 31, scope: !6300)
!6307 = !DILocation(line: 483, column: 10, scope: !6300)
!6308 = !DILocation(line: 484, column: 11, scope: !6300)
!6309 = !DILocation(line: 484, column: 9, scope: !6300)
!6310 = distinct !{!6310, !6305, !6308}
!6311 = !DILocation(line: 485, column: 12, scope: !6300)
!6312 = !DILocation(line: 486, column: 5, scope: !6300)
!6313 = !DILocation(line: 486, column: 25, scope: !6300)
!6314 = !DILocation(line: 486, column: 9, scope: !6300)
!6315 = !DILocation(line: 486, column: 8, scope: !6300)
!6316 = !DILocation(line: 0, scope: !6300)
!6317 = !DILocation(line: 485, column: 10, scope: !6300)
!6318 = !DILocation(line: 485, column: 3, scope: !6300)
!6319 = distinct !DISubprogram(name: "mark_aliased_reaching_defs_necessary", scope: !3, file: !3, line: 549, type: !6320, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6320 = !DISubroutineType(types: !6321)
!6321 = !{null, !1434, !1622}
!6322 = !DILocalVariable(name: "stmt", arg: 1, scope: !6319, file: !3, line: 549, type: !1434)
!6323 = !DILocation(line: 549, column: 46, scope: !6319)
!6324 = !DILocalVariable(name: "ref", arg: 2, scope: !6319, file: !3, line: 549, type: !1622)
!6325 = !DILocation(line: 549, column: 57, scope: !6319)
!6326 = !DILocalVariable(name: "chain", scope: !6319, file: !3, line: 551, type: !7)
!6327 = !DILocation(line: 551, column: 16, scope: !6319)
!6328 = !DILocalVariable(name: "refd", scope: !6319, file: !3, line: 552, type: !6329)
!6329 = !DIDerivedType(tag: DW_TAG_typedef, name: "ao_ref", file: !1997, line: 86, baseType: !6330)
!6330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ao_ref_s", file: !1997, line: 63, size: 384, elements: !6331)
!6331 = !{!6332, !6333, !6334, !6335, !6336, !6337, !6338}
!6332 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !6330, file: !1997, line: 67, baseType: !1622, size: 64)
!6333 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !6330, file: !1997, line: 73, baseType: !1622, size: 64, offset: 64)
!6334 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !6330, file: !1997, line: 75, baseType: !1591, size: 64, offset: 128)
!6335 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !6330, file: !1997, line: 77, baseType: !1591, size: 64, offset: 192)
!6336 = !DIDerivedType(tag: DW_TAG_member, name: "max_size", scope: !6330, file: !1997, line: 79, baseType: !1591, size: 64, offset: 256)
!6337 = !DIDerivedType(tag: DW_TAG_member, name: "ref_alias_set", scope: !6330, file: !1997, line: 82, baseType: !2207, size: 32, offset: 320)
!6338 = !DIDerivedType(tag: DW_TAG_member, name: "base_alias_set", scope: !6330, file: !1997, line: 85, baseType: !2207, size: 32, offset: 352)
!6339 = !DILocation(line: 552, column: 10, scope: !6319)
!6340 = !DILocation(line: 553, column: 3, scope: !6319)
!6341 = !DILocation(line: 554, column: 23, scope: !6319)
!6342 = !DILocation(line: 554, column: 3, scope: !6319)
!6343 = !DILocation(line: 555, column: 51, scope: !6319)
!6344 = !DILocation(line: 555, column: 38, scope: !6319)
!6345 = !DILocation(line: 557, column: 21, scope: !6319)
!6346 = !DILocation(line: 557, column: 10, scope: !6319)
!6347 = !DILocation(line: 555, column: 11, scope: !6319)
!6348 = !DILocation(line: 555, column: 9, scope: !6319)
!6349 = !DILocation(line: 558, column: 7, scope: !6350)
!6350 = distinct !DILexicalBlock(scope: !6319, file: !3, line: 558, column: 7)
!6351 = !DILocation(line: 558, column: 15, scope: !6350)
!6352 = !DILocation(line: 558, column: 13, scope: !6350)
!6353 = !DILocation(line: 558, column: 7, scope: !6319)
!6354 = !DILocation(line: 559, column: 21, scope: !6350)
!6355 = !DILocation(line: 559, column: 19, scope: !6350)
!6356 = !DILocation(line: 559, column: 5, scope: !6350)
!6357 = !DILocation(line: 560, column: 18, scope: !6319)
!6358 = !DILocation(line: 560, column: 15, scope: !6319)
!6359 = !DILocation(line: 561, column: 11, scope: !6319)
!6360 = !DILocation(line: 562, column: 1, scope: !6319)
!6361 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !581, file: !581, line: 1727, type: !2954, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6362 = !DILocalVariable(name: "gs", arg: 1, scope: !6361, file: !581, line: 1727, type: !2956)
!6363 = !DILocation(line: 1727, column: 34, scope: !6361)
!6364 = !DILocation(line: 1730, column: 21, scope: !6361)
!6365 = !DILocation(line: 1730, column: 10, scope: !6361)
!6366 = !DILocation(line: 1730, column: 3, scope: !6361)
!6367 = distinct !DISubprogram(name: "gimple_return_retval", scope: !581, file: !581, line: 4253, type: !2954, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6368 = !DILocalVariable(name: "gs", arg: 1, scope: !6367, file: !581, line: 4253, type: !2956)
!6369 = !DILocation(line: 4253, column: 36, scope: !6367)
!6370 = !DILocation(line: 4256, column: 21, scope: !6367)
!6371 = !DILocation(line: 4256, column: 10, scope: !6367)
!6372 = !DILocation(line: 4256, column: 3, scope: !6367)
!6373 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !581, file: !581, line: 2581, type: !3569, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6374 = !DILocalVariable(name: "gs", arg: 1, scope: !6373, file: !581, line: 2581, type: !2956)
!6375 = !DILocation(line: 2581, column: 34, scope: !6373)
!6376 = !DILocation(line: 2584, column: 10, scope: !6373)
!6377 = !DILocation(line: 2584, column: 14, scope: !6373)
!6378 = !DILocation(line: 2584, column: 25, scope: !6373)
!6379 = !DILocation(line: 2584, column: 3, scope: !6373)
!6380 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !581, file: !581, line: 2619, type: !5700, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6381 = !DILocalVariable(name: "gs", arg: 1, scope: !6380, file: !581, line: 2619, type: !2956)
!6382 = !DILocation(line: 2619, column: 35, scope: !6380)
!6383 = !DILocalVariable(name: "index", arg: 2, scope: !6380, file: !581, line: 2619, type: !7)
!6384 = !DILocation(line: 2619, column: 48, scope: !6380)
!6385 = !DILocation(line: 2622, column: 3, scope: !6380)
!6386 = !DILocation(line: 2623, column: 21, scope: !6380)
!6387 = !DILocation(line: 2623, column: 25, scope: !6380)
!6388 = !DILocation(line: 2623, column: 10, scope: !6380)
!6389 = !DILocation(line: 2623, column: 3, scope: !6380)
!6390 = distinct !DISubprogram(name: "gimple_nop_p", scope: !581, file: !581, line: 4304, type: !3735, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6391 = !DILocalVariable(name: "g", arg: 1, scope: !6390, file: !581, line: 4304, type: !2956)
!6392 = !DILocation(line: 4304, column: 28, scope: !6390)
!6393 = !DILocation(line: 4306, column: 23, scope: !6390)
!6394 = !DILocation(line: 4306, column: 10, scope: !6390)
!6395 = !DILocation(line: 4306, column: 26, scope: !6390)
!6396 = !DILocation(line: 4306, column: 3, scope: !6390)
!6397 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !2964, file: !2964, line: 450, type: !6398, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6398 = !DISubroutineType(types: !6399)
!6399 = !{!1622, !1434, !1943}
!6400 = !DILocalVariable(name: "gs", arg: 1, scope: !6397, file: !2964, line: 450, type: !1434)
!6401 = !DILocation(line: 450, column: 28, scope: !6397)
!6402 = !DILocalVariable(name: "index", arg: 2, scope: !6397, file: !2964, line: 450, type: !1943)
!6403 = !DILocation(line: 450, column: 39, scope: !6397)
!6404 = !DILocalVariable(name: "pd", scope: !6397, file: !2964, line: 452, type: !3592)
!6405 = !DILocation(line: 452, column: 21, scope: !6397)
!6406 = !DILocation(line: 452, column: 42, scope: !6397)
!6407 = !DILocation(line: 452, column: 46, scope: !6397)
!6408 = !DILocation(line: 452, column: 26, scope: !6397)
!6409 = !DILocation(line: 453, column: 29, scope: !6397)
!6410 = !DILocation(line: 453, column: 33, scope: !6397)
!6411 = !DILocation(line: 453, column: 10, scope: !6397)
!6412 = !DILocation(line: 453, column: 3, scope: !6397)
!6413 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2964, file: !2964, line: 434, type: !6414, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6414 = !DISubroutineType(types: !6415)
!6415 = !{!1622, !6416}
!6416 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !574, line: 27, baseType: !2034)
!6417 = !DILocalVariable(name: "def", arg: 1, scope: !6413, file: !2964, line: 434, type: !6416)
!6418 = !DILocation(line: 434, column: 33, scope: !6413)
!6419 = !DILocation(line: 436, column: 11, scope: !6413)
!6420 = !DILocation(line: 436, column: 10, scope: !6413)
!6421 = !DILocation(line: 436, column: 3, scope: !6413)
!6422 = distinct !DISubprogram(name: "mark_all_reaching_defs_necessary_1", scope: !3, file: !3, line: 571, type: !6423, scopeLine: 573, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6423 = !DISubroutineType(types: !6424)
!6424 = !{!1735, !6425, !1622, !1612}
!6425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6329, size: 64)
!6426 = !DILocalVariable(name: "ref", arg: 1, scope: !6422, file: !3, line: 571, type: !6425)
!6427 = !DILocation(line: 571, column: 45, scope: !6422)
!6428 = !DILocalVariable(name: "vdef", arg: 2, scope: !6422, file: !3, line: 572, type: !1622)
!6429 = !DILocation(line: 572, column: 14, scope: !6422)
!6430 = !DILocalVariable(name: "data", arg: 3, scope: !6422, file: !3, line: 572, type: !1612)
!6431 = !DILocation(line: 572, column: 26, scope: !6422)
!6432 = !DILocalVariable(name: "def_stmt", scope: !6422, file: !3, line: 574, type: !1434)
!6433 = !DILocation(line: 574, column: 10, scope: !6422)
!6434 = !DILocation(line: 574, column: 21, scope: !6422)
!6435 = !DILocation(line: 578, column: 7, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 578, column: 7)
!6437 = !DILocation(line: 579, column: 7, scope: !6436)
!6438 = !DILocation(line: 579, column: 10, scope: !6436)
!6439 = !DILocation(line: 578, column: 7, scope: !6422)
!6440 = !DILocation(line: 581, column: 7, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6436, file: !3, line: 580, column: 5)
!6442 = !DILocation(line: 583, column: 7, scope: !6441)
!6443 = !DILocation(line: 587, column: 8, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 587, column: 7)
!6445 = !DILocation(line: 588, column: 7, scope: !6444)
!6446 = !DILocation(line: 588, column: 34, scope: !6444)
!6447 = !DILocation(line: 588, column: 10, scope: !6444)
!6448 = !DILocation(line: 587, column: 7, scope: !6422)
!6449 = !DILocalVariable(name: "lhs", scope: !6450, file: !3, line: 590, type: !1622)
!6450 = distinct !DILexicalBlock(scope: !6444, file: !3, line: 589, column: 5)
!6451 = !DILocation(line: 590, column: 12, scope: !6450)
!6452 = !DILocation(line: 590, column: 37, scope: !6450)
!6453 = !DILocation(line: 590, column: 18, scope: !6450)
!6454 = !DILocation(line: 591, column: 32, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6450, file: !3, line: 591, column: 11)
!6456 = !DILocation(line: 591, column: 12, scope: !6455)
!6457 = !DILocation(line: 591, column: 11, scope: !6450)
!6458 = !DILocation(line: 592, column: 2, scope: !6455)
!6459 = !DILocation(line: 593, column: 5, scope: !6450)
!6460 = !DILocation(line: 595, column: 27, scope: !6422)
!6461 = !DILocation(line: 595, column: 3, scope: !6422)
!6462 = !DILocation(line: 597, column: 3, scope: !6422)
!6463 = !DILocation(line: 598, column: 1, scope: !6422)
!6464 = distinct !DISubprogram(name: "gimple_call_fn", scope: !581, file: !581, line: 1911, type: !2954, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6465 = !DILocalVariable(name: "gs", arg: 1, scope: !6464, file: !581, line: 1911, type: !2956)
!6466 = !DILocation(line: 1911, column: 30, scope: !6464)
!6467 = !DILocation(line: 1914, column: 21, scope: !6464)
!6468 = !DILocation(line: 1914, column: 10, scope: !6464)
!6469 = !DILocation(line: 1914, column: 3, scope: !6464)
!6470 = distinct !DISubprogram(name: "gimple_num_ops", scope: !581, file: !581, line: 1596, type: !3569, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6471 = !DILocalVariable(name: "gs", arg: 1, scope: !6470, file: !581, line: 1596, type: !2956)
!6472 = !DILocation(line: 1596, column: 30, scope: !6470)
!6473 = !DILocation(line: 1598, column: 10, scope: !6470)
!6474 = !DILocation(line: 1598, column: 14, scope: !6470)
!6475 = !DILocation(line: 1598, column: 21, scope: !6470)
!6476 = !DILocation(line: 1598, column: 3, scope: !6470)
!6477 = distinct !DISubprogram(name: "handled_component_p", scope: !164, file: !164, line: 4551, type: !6478, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6478 = !DISubroutineType(types: !6479)
!6479 = !{!1735, !6480}
!6480 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1435, line: 59, baseType: !6481)
!6481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6482, size: 64)
!6482 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1624)
!6483 = !DILocalVariable(name: "t", arg: 1, scope: !6477, file: !164, line: 4551, type: !6480)
!6484 = !DILocation(line: 4551, column: 33, scope: !6477)
!6485 = !DILocation(line: 4553, column: 11, scope: !6477)
!6486 = !DILocation(line: 4553, column: 3, scope: !6477)
!6487 = !DILocation(line: 4562, column: 7, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6477, file: !164, line: 4554, column: 5)
!6489 = !DILocation(line: 4565, column: 7, scope: !6488)
!6490 = !DILocation(line: 4567, column: 1, scope: !6477)
!6491 = distinct !DISubprogram(name: "may_be_aliased", scope: !2964, file: !2964, line: 586, type: !6478, scopeLine: 587, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6492 = !DILocalVariable(name: "var", arg: 1, scope: !6491, file: !2964, line: 586, type: !6480)
!6493 = !DILocation(line: 586, column: 28, scope: !6491)
!6494 = !DILocation(line: 588, column: 11, scope: !6491)
!6495 = !DILocation(line: 588, column: 27, scope: !6491)
!6496 = !DILocation(line: 589, column: 4, scope: !6491)
!6497 = !DILocation(line: 589, column: 10, scope: !6491)
!6498 = !DILocation(line: 589, column: 28, scope: !6491)
!6499 = !DILocation(line: 589, column: 31, scope: !6491)
!6500 = !DILocation(line: 589, column: 49, scope: !6491)
!6501 = !DILocation(line: 589, column: 52, scope: !6491)
!6502 = !DILocation(line: 590, column: 9, scope: !6491)
!6503 = !DILocation(line: 590, column: 12, scope: !6491)
!6504 = !DILocation(line: 591, column: 9, scope: !6491)
!6505 = !DILocation(line: 591, column: 13, scope: !6491)
!6506 = !DILocation(line: 592, column: 4, scope: !6491)
!6507 = !DILocation(line: 592, column: 8, scope: !6491)
!6508 = !DILocation(line: 593, column: 8, scope: !6491)
!6509 = !DILocation(line: 593, column: 11, scope: !6491)
!6510 = !DILocation(line: 594, column: 8, scope: !6491)
!6511 = !DILocation(line: 594, column: 11, scope: !6491)
!6512 = !DILocation(line: 0, scope: !6491)
!6513 = !DILocation(line: 588, column: 10, scope: !6491)
!6514 = !DILocation(line: 588, column: 3, scope: !6491)
!6515 = distinct !DISubprogram(name: "mark_aliased_reaching_defs_necessary_1", scope: !3, file: !3, line: 503, type: !6423, scopeLine: 504, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6516 = !DILocalVariable(name: "ref", arg: 1, scope: !6515, file: !3, line: 503, type: !6425)
!6517 = !DILocation(line: 503, column: 49, scope: !6515)
!6518 = !DILocalVariable(name: "vdef", arg: 2, scope: !6515, file: !3, line: 503, type: !1622)
!6519 = !DILocation(line: 503, column: 59, scope: !6515)
!6520 = !DILocalVariable(name: "data", arg: 3, scope: !6515, file: !3, line: 503, type: !1612)
!6521 = !DILocation(line: 503, column: 71, scope: !6515)
!6522 = !DILocalVariable(name: "def_stmt", scope: !6515, file: !3, line: 505, type: !1434)
!6523 = !DILocation(line: 505, column: 10, scope: !6515)
!6524 = !DILocation(line: 505, column: 21, scope: !6515)
!6525 = !DILocation(line: 508, column: 27, scope: !6515)
!6526 = !DILocation(line: 508, column: 3, scope: !6515)
!6527 = !DILocation(line: 511, column: 23, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6515, file: !3, line: 511, column: 7)
!6529 = !DILocation(line: 511, column: 7, scope: !6528)
!6530 = !DILocation(line: 512, column: 7, scope: !6528)
!6531 = !DILocation(line: 512, column: 10, scope: !6528)
!6532 = !DILocation(line: 512, column: 48, scope: !6528)
!6533 = !DILocation(line: 511, column: 7, scope: !6515)
!6534 = !DILocalVariable(name: "base", scope: !6535, file: !3, line: 514, type: !1622)
!6535 = distinct !DILexicalBlock(scope: !6528, file: !3, line: 513, column: 5)
!6536 = !DILocation(line: 514, column: 12, scope: !6535)
!6537 = !DILocalVariable(name: "lhs", scope: !6535, file: !3, line: 514, type: !1622)
!6538 = !DILocation(line: 514, column: 18, scope: !6535)
!6539 = !DILocation(line: 514, column: 40, scope: !6535)
!6540 = !DILocation(line: 514, column: 24, scope: !6535)
!6541 = !DILocalVariable(name: "size", scope: !6535, file: !3, line: 515, type: !1591)
!6542 = !DILocation(line: 515, column: 21, scope: !6535)
!6543 = !DILocalVariable(name: "offset", scope: !6535, file: !3, line: 515, type: !1591)
!6544 = !DILocation(line: 515, column: 27, scope: !6535)
!6545 = !DILocalVariable(name: "max_size", scope: !6535, file: !3, line: 515, type: !1591)
!6546 = !DILocation(line: 515, column: 35, scope: !6535)
!6547 = !DILocation(line: 516, column: 20, scope: !6535)
!6548 = !DILocation(line: 516, column: 7, scope: !6535)
!6549 = !DILocation(line: 517, column: 39, scope: !6535)
!6550 = !DILocation(line: 517, column: 14, scope: !6535)
!6551 = !DILocation(line: 517, column: 12, scope: !6535)
!6552 = !DILocation(line: 520, column: 11, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 520, column: 11)
!6554 = !DILocation(line: 520, column: 19, scope: !6553)
!6555 = !DILocation(line: 520, column: 24, scope: !6553)
!6556 = !DILocation(line: 520, column: 16, scope: !6553)
!6557 = !DILocation(line: 520, column: 11, scope: !6535)
!6558 = !DILocation(line: 524, column: 8, scope: !6559)
!6559 = distinct !DILexicalBlock(scope: !6560, file: !3, line: 524, column: 8)
!6560 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 521, column: 2)
!6561 = !DILocation(line: 524, column: 13, scope: !6559)
!6562 = !DILocation(line: 524, column: 19, scope: !6559)
!6563 = !DILocation(line: 524, column: 22, scope: !6559)
!6564 = !DILocation(line: 524, column: 30, scope: !6559)
!6565 = !DILocation(line: 524, column: 27, scope: !6559)
!6566 = !DILocation(line: 525, column: 8, scope: !6559)
!6567 = !DILocation(line: 525, column: 11, scope: !6559)
!6568 = !DILocation(line: 525, column: 16, scope: !6559)
!6569 = !DILocation(line: 525, column: 25, scope: !6559)
!6570 = !DILocation(line: 524, column: 8, scope: !6560)
!6571 = !DILocation(line: 527, column: 12, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6573, file: !3, line: 527, column: 12)
!6573 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 526, column: 6)
!6574 = !DILocation(line: 527, column: 22, scope: !6572)
!6575 = !DILocation(line: 527, column: 27, scope: !6572)
!6576 = !DILocation(line: 527, column: 19, scope: !6572)
!6577 = !DILocation(line: 528, column: 5, scope: !6572)
!6578 = !DILocation(line: 528, column: 8, scope: !6572)
!6579 = !DILocation(line: 528, column: 17, scope: !6572)
!6580 = !DILocation(line: 528, column: 15, scope: !6572)
!6581 = !DILocation(line: 528, column: 25, scope: !6572)
!6582 = !DILocation(line: 528, column: 30, scope: !6572)
!6583 = !DILocation(line: 528, column: 39, scope: !6572)
!6584 = !DILocation(line: 528, column: 44, scope: !6572)
!6585 = !DILocation(line: 528, column: 37, scope: !6572)
!6586 = !DILocation(line: 528, column: 22, scope: !6572)
!6587 = !DILocation(line: 527, column: 12, scope: !6573)
!6588 = !DILocation(line: 529, column: 3, scope: !6572)
!6589 = !DILocation(line: 530, column: 6, scope: !6573)
!6590 = !DILocation(line: 532, column: 13, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 532, column: 13)
!6592 = !DILocation(line: 532, column: 18, scope: !6591)
!6593 = !DILocation(line: 537, column: 6, scope: !6591)
!6594 = !DILocation(line: 537, column: 55, scope: !6591)
!6595 = !DILocation(line: 537, column: 41, scope: !6591)
!6596 = !DILocation(line: 538, column: 22, scope: !6591)
!6597 = !DILocation(line: 538, column: 11, scope: !6591)
!6598 = !DILocation(line: 537, column: 9, scope: !6591)
!6599 = !DILocation(line: 539, column: 6, scope: !6591)
!6600 = !DILocation(line: 539, column: 26, scope: !6591)
!6601 = !DILocation(line: 539, column: 31, scope: !6591)
!6602 = !DILocation(line: 539, column: 36, scope: !6591)
!6603 = !DILocation(line: 539, column: 9, scope: !6591)
!6604 = !DILocation(line: 532, column: 13, scope: !6559)
!6605 = !DILocation(line: 540, column: 6, scope: !6591)
!6606 = !DILocation(line: 541, column: 2, scope: !6560)
!6607 = !DILocation(line: 542, column: 5, scope: !6535)
!6608 = !DILocation(line: 545, column: 3, scope: !6515)
!6609 = !DILocation(line: 546, column: 1, scope: !6515)
!6610 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !581, file: !581, line: 2210, type: !5576, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6611 = !DILocalVariable(name: "stmt", arg: 1, scope: !6610, file: !581, line: 2210, type: !1434)
!6612 = !DILocation(line: 2210, column: 24, scope: !6610)
!6613 = !DILocation(line: 2212, column: 29, scope: !6610)
!6614 = !DILocation(line: 2212, column: 11, scope: !6610)
!6615 = !DILocation(line: 2213, column: 4, scope: !6610)
!6616 = !DILocation(line: 2213, column: 24, scope: !6610)
!6617 = !DILocation(line: 2213, column: 8, scope: !6610)
!6618 = !DILocation(line: 2214, column: 8, scope: !6610)
!6619 = !DILocation(line: 2214, column: 28, scope: !6610)
!6620 = !DILocation(line: 2214, column: 11, scope: !6610)
!6621 = !DILocation(line: 2214, column: 34, scope: !6610)
!6622 = !DILocation(line: 0, scope: !6610)
!6623 = !DILocation(line: 2212, column: 10, scope: !6610)
!6624 = !DILocation(line: 2212, column: 3, scope: !6610)
!6625 = distinct !DISubprogram(name: "is_gimple_assign", scope: !581, file: !581, line: 1677, type: !3735, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6626 = !DILocalVariable(name: "gs", arg: 1, scope: !6625, file: !581, line: 1677, type: !2956)
!6627 = !DILocation(line: 1677, column: 32, scope: !6625)
!6628 = !DILocation(line: 1679, column: 23, scope: !6625)
!6629 = !DILocation(line: 1679, column: 10, scope: !6625)
!6630 = !DILocation(line: 1679, column: 27, scope: !6625)
!6631 = !DILocation(line: 1679, column: 3, scope: !6625)
!6632 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !135, file: !135, line: 281, type: !6633, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6633 = !DISubroutineType(types: !6634)
!6634 = !{!7, !6635}
!6635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6636, size: 64)
!6636 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1893)
!6637 = !DILocalVariable(name: "vec_", arg: 1, scope: !6632, file: !135, line: 281, type: !6635)
!6638 = !DILocation(line: 281, column: 1, scope: !6632)
!6639 = distinct !DISubprogram(name: "VEC_basic_block_base_pop", scope: !135, file: !135, line: 281, type: !6640, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6640 = !DISubroutineType(types: !6641)
!6641 = !{!1885, !6642}
!6642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!6643 = !DILocalVariable(name: "vec_", arg: 1, scope: !6639, file: !135, line: 281, type: !6642)
!6644 = !DILocation(line: 281, column: 1, scope: !6639)
!6645 = !DILocalVariable(name: "obj_", scope: !6639, file: !135, line: 281, type: !1885)
!6646 = distinct !DISubprogram(name: "gsi_last_bb", scope: !581, file: !581, line: 4450, type: !5051, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6647 = !DILocalVariable(name: "bb", arg: 1, scope: !6646, file: !581, line: 4450, type: !1885)
!6648 = !DILocation(line: 4450, column: 26, scope: !6646)
!6649 = !DILocalVariable(name: "i", scope: !6646, file: !581, line: 4452, type: !3960)
!6650 = !DILocation(line: 4452, column: 24, scope: !6646)
!6651 = !DILocalVariable(name: "seq", scope: !6646, file: !581, line: 4453, type: !1485)
!6652 = !DILocation(line: 4453, column: 14, scope: !6646)
!6653 = !DILocation(line: 4455, column: 17, scope: !6646)
!6654 = !DILocation(line: 4455, column: 9, scope: !6646)
!6655 = !DILocation(line: 4455, column: 7, scope: !6646)
!6656 = !DILocation(line: 4456, column: 28, scope: !6646)
!6657 = !DILocation(line: 4456, column: 11, scope: !6646)
!6658 = !DILocation(line: 4456, column: 5, scope: !6646)
!6659 = !DILocation(line: 4456, column: 9, scope: !6646)
!6660 = !DILocation(line: 4457, column: 11, scope: !6646)
!6661 = !DILocation(line: 4457, column: 5, scope: !6646)
!6662 = !DILocation(line: 4457, column: 9, scope: !6646)
!6663 = !DILocation(line: 4458, column: 10, scope: !6646)
!6664 = !DILocation(line: 4458, column: 5, scope: !6646)
!6665 = !DILocation(line: 4458, column: 8, scope: !6646)
!6666 = !DILocation(line: 4460, column: 3, scope: !6646)
!6667 = distinct !DISubprogram(name: "gsi_prev", scope: !581, file: !581, line: 4493, type: !5038, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6668 = !DILocalVariable(name: "i", arg: 1, scope: !6667, file: !581, line: 4493, type: !5040)
!6669 = !DILocation(line: 4493, column: 33, scope: !6667)
!6670 = !DILocation(line: 4495, column: 12, scope: !6667)
!6671 = !DILocation(line: 4495, column: 15, scope: !6667)
!6672 = !DILocation(line: 4495, column: 20, scope: !6667)
!6673 = !DILocation(line: 4495, column: 3, scope: !6667)
!6674 = !DILocation(line: 4495, column: 6, scope: !6667)
!6675 = !DILocation(line: 4495, column: 10, scope: !6667)
!6676 = !DILocation(line: 4496, column: 1, scope: !6667)
!6677 = distinct !DISubprogram(name: "remove_dead_stmt", scope: !3, file: !3, line: 984, type: !6678, scopeLine: 985, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6678 = !DISubroutineType(types: !6679)
!6679 = !{null, !5040, !1885}
!6680 = !DILocalVariable(name: "i", arg: 1, scope: !6677, file: !3, line: 984, type: !5040)
!6681 = !DILocation(line: 984, column: 41, scope: !6677)
!6682 = !DILocalVariable(name: "bb", arg: 2, scope: !6677, file: !3, line: 984, type: !1885)
!6683 = !DILocation(line: 984, column: 56, scope: !6677)
!6684 = !DILocalVariable(name: "stmt", scope: !6677, file: !3, line: 986, type: !1434)
!6685 = !DILocation(line: 986, column: 10, scope: !6677)
!6686 = !DILocation(line: 986, column: 28, scope: !6677)
!6687 = !DILocation(line: 986, column: 17, scope: !6677)
!6688 = !DILocation(line: 988, column: 7, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6677, file: !3, line: 988, column: 7)
!6690 = !DILocation(line: 988, column: 17, scope: !6689)
!6691 = !DILocation(line: 988, column: 21, scope: !6689)
!6692 = !DILocation(line: 988, column: 32, scope: !6689)
!6693 = !DILocation(line: 988, column: 7, scope: !6677)
!6694 = !DILocation(line: 990, column: 16, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6689, file: !3, line: 989, column: 5)
!6696 = !DILocation(line: 990, column: 7, scope: !6695)
!6697 = !DILocation(line: 991, column: 26, scope: !6695)
!6698 = !DILocation(line: 991, column: 37, scope: !6695)
!6699 = !DILocation(line: 991, column: 7, scope: !6695)
!6700 = !DILocation(line: 992, column: 16, scope: !6695)
!6701 = !DILocation(line: 992, column: 7, scope: !6695)
!6702 = !DILocation(line: 993, column: 5, scope: !6695)
!6703 = !DILocation(line: 995, column: 16, scope: !6677)
!6704 = !DILocation(line: 1003, column: 21, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6677, file: !3, line: 1003, column: 7)
!6706 = !DILocation(line: 1003, column: 7, scope: !6705)
!6707 = !DILocation(line: 1003, column: 7, scope: !6677)
!6708 = !DILocalVariable(name: "post_dom_bb", scope: !6709, file: !3, line: 1005, type: !1885)
!6709 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 1004, column: 5)
!6710 = !DILocation(line: 1005, column: 19, scope: !6709)
!6711 = !DILocalVariable(name: "e", scope: !6709, file: !3, line: 1006, type: !1475)
!6712 = !DILocation(line: 1006, column: 12, scope: !6709)
!6713 = !DILocalVariable(name: "e2", scope: !6709, file: !3, line: 1006, type: !1475)
!6714 = !DILocation(line: 1006, column: 15, scope: !6709)
!6715 = !DILocalVariable(name: "ei", scope: !6709, file: !3, line: 1007, type: !4052)
!6716 = !DILocation(line: 1007, column: 21, scope: !6709)
!6717 = !DILocation(line: 1009, column: 67, scope: !6709)
!6718 = !DILocation(line: 1009, column: 21, scope: !6709)
!6719 = !DILocation(line: 1009, column: 19, scope: !6709)
!6720 = !DILocation(line: 1011, column: 22, scope: !6709)
!6721 = !DILocation(line: 1011, column: 26, scope: !6709)
!6722 = !DILocation(line: 1011, column: 11, scope: !6709)
!6723 = !DILocation(line: 1011, column: 9, scope: !6709)
!6724 = !DILocation(line: 1017, column: 11, scope: !6725)
!6725 = distinct !DILexicalBlock(scope: !6709, file: !3, line: 1017, column: 11)
!6726 = !DILocation(line: 1017, column: 11, scope: !6709)
!6727 = !DILocation(line: 1019, column: 18, scope: !6728)
!6728 = distinct !DILexicalBlock(scope: !6725, file: !3, line: 1019, column: 16)
!6729 = !DILocation(line: 1019, column: 30, scope: !6728)
!6730 = !DILocation(line: 1019, column: 33, scope: !6728)
!6731 = !DILocation(line: 1019, column: 48, scope: !6728)
!6732 = !DILocation(line: 1019, column: 45, scope: !6728)
!6733 = !DILocation(line: 1019, column: 16, scope: !6725)
!6734 = !DILocation(line: 1020, column: 6, scope: !6728)
!6735 = !DILocation(line: 1020, column: 4, scope: !6728)
!6736 = !DILocation(line: 1020, column: 2, scope: !6728)
!6737 = !DILocation(line: 1022, column: 35, scope: !6728)
!6738 = !DILocation(line: 1022, column: 54, scope: !6728)
!6739 = !DILocation(line: 1022, column: 13, scope: !6728)
!6740 = !DILocation(line: 1022, column: 11, scope: !6728)
!6741 = !DILocation(line: 1023, column: 7, scope: !6709)
!6742 = !DILocation(line: 1024, column: 7, scope: !6709)
!6743 = !DILocation(line: 1024, column: 10, scope: !6709)
!6744 = !DILocation(line: 1024, column: 22, scope: !6709)
!6745 = !DILocation(line: 1025, column: 18, scope: !6709)
!6746 = !DILocation(line: 1025, column: 22, scope: !6709)
!6747 = !DILocation(line: 1025, column: 7, scope: !6709)
!6748 = !DILocation(line: 1025, column: 10, scope: !6709)
!6749 = !DILocation(line: 1025, column: 16, scope: !6709)
!6750 = !DILocation(line: 1029, column: 7, scope: !6709)
!6751 = !DILocation(line: 1029, column: 10, scope: !6709)
!6752 = !DILocation(line: 1029, column: 16, scope: !6709)
!6753 = !DILocation(line: 1032, column: 7, scope: !6709)
!6754 = !DILocation(line: 1032, column: 10, scope: !6709)
!6755 = !DILocation(line: 1032, column: 16, scope: !6709)
!6756 = !DILocation(line: 1035, column: 17, scope: !6757)
!6757 = distinct !DILexicalBlock(scope: !6709, file: !3, line: 1035, column: 7)
!6758 = !DILocation(line: 1035, column: 12, scope: !6757)
!6759 = !DILocation(line: 1035, column: 45, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6757, file: !3, line: 1035, column: 7)
!6761 = !DILocation(line: 1035, column: 43, scope: !6760)
!6762 = !DILocation(line: 1035, column: 7, scope: !6757)
!6763 = !DILocation(line: 1036, column: 6, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6760, file: !3, line: 1036, column: 6)
!6765 = !DILocation(line: 1036, column: 11, scope: !6764)
!6766 = !DILocation(line: 1036, column: 8, scope: !6764)
!6767 = !DILocation(line: 1036, column: 6, scope: !6760)
!6768 = !DILocation(line: 1038, column: 18, scope: !6769)
!6769 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 1037, column: 4)
!6770 = !DILocation(line: 1039, column: 26, scope: !6769)
!6771 = !DILocation(line: 1039, column: 13, scope: !6769)
!6772 = !DILocation(line: 1040, column: 4, scope: !6769)
!6773 = !DILocation(line: 1042, column: 4, scope: !6764)
!6774 = !DILocation(line: 1035, column: 7, scope: !6760)
!6775 = distinct !{!6775, !6762, !6776}
!6776 = !DILocation(line: 1042, column: 16, scope: !6757)
!6777 = !DILocation(line: 1043, column: 5, scope: !6709)
!6778 = !DILocation(line: 1045, column: 21, scope: !6677)
!6779 = !DILocation(line: 1045, column: 3, scope: !6677)
!6780 = !DILocation(line: 1046, column: 15, scope: !6677)
!6781 = !DILocation(line: 1046, column: 3, scope: !6677)
!6782 = !DILocation(line: 1047, column: 17, scope: !6677)
!6783 = !DILocation(line: 1047, column: 3, scope: !6677)
!6784 = !DILocation(line: 1048, column: 1, scope: !6677)
!6785 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !581, file: !581, line: 1898, type: !6320, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6786 = !DILocalVariable(name: "gs", arg: 1, scope: !6785, file: !581, line: 1898, type: !1434)
!6787 = !DILocation(line: 1898, column: 29, scope: !6785)
!6788 = !DILocalVariable(name: "lhs", arg: 2, scope: !6785, file: !581, line: 1898, type: !1622)
!6789 = !DILocation(line: 1898, column: 38, scope: !6785)
!6790 = !DILocation(line: 1901, column: 18, scope: !6785)
!6791 = !DILocation(line: 1901, column: 25, scope: !6785)
!6792 = !DILocation(line: 1901, column: 3, scope: !6785)
!6793 = !DILocation(line: 1902, column: 7, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6785, file: !581, line: 1902, column: 7)
!6795 = !DILocation(line: 1902, column: 11, scope: !6794)
!6796 = !DILocation(line: 1902, column: 14, scope: !6794)
!6797 = !DILocation(line: 1902, column: 30, scope: !6794)
!6798 = !DILocation(line: 1902, column: 7, scope: !6785)
!6799 = !DILocation(line: 1903, column: 31, scope: !6794)
!6800 = !DILocation(line: 1903, column: 5, scope: !6794)
!6801 = !DILocation(line: 1903, column: 29, scope: !6794)
!6802 = !DILocation(line: 1904, column: 1, scope: !6785)
!6803 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !135, file: !135, line: 283, type: !6804, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6804 = !DISubroutineType(types: !6805)
!6805 = !{null, !6806}
!6806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4506, size: 64)
!6807 = !DILocalVariable(name: "vec_", arg: 1, scope: !6803, file: !135, line: 283, type: !6806)
!6808 = !DILocation(line: 283, column: 1, scope: !6803)
!6809 = !DILocation(line: 283, column: 1, scope: !6810)
!6810 = distinct !DILexicalBlock(scope: !6803, file: !135, line: 283, column: 1)
!6811 = distinct !DISubprogram(name: "end_imm_use_stmt_traverse", scope: !2964, file: !2964, line: 978, type: !6812, scopeLine: 979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6812 = !DISubroutineType(types: !6813)
!6813 = !{null, !2967}
!6814 = !DILocalVariable(name: "imm", arg: 1, scope: !6811, file: !2964, line: 978, type: !2967)
!6815 = !DILocation(line: 978, column: 46, scope: !6811)
!6816 = !DILocation(line: 980, column: 21, scope: !6811)
!6817 = !DILocation(line: 980, column: 26, scope: !6811)
!6818 = !DILocation(line: 980, column: 3, scope: !6811)
!6819 = !DILocation(line: 981, column: 1, scope: !6811)
!6820 = distinct !DISubprogram(name: "remove_dead_phis", scope: !3, file: !3, line: 862, type: !6821, scopeLine: 863, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6821 = !DISubroutineType(types: !6822)
!6822 = !{!1735, !1885}
!6823 = !DILocalVariable(name: "bb", arg: 1, scope: !6820, file: !3, line: 862, type: !1885)
!6824 = !DILocation(line: 862, column: 31, scope: !6820)
!6825 = !DILocalVariable(name: "something_changed", scope: !6820, file: !3, line: 864, type: !1735)
!6826 = !DILocation(line: 864, column: 8, scope: !6820)
!6827 = !DILocalVariable(name: "phis", scope: !6820, file: !3, line: 865, type: !1485)
!6828 = !DILocation(line: 865, column: 14, scope: !6820)
!6829 = !DILocalVariable(name: "phi", scope: !6820, file: !3, line: 866, type: !1434)
!6830 = !DILocation(line: 866, column: 10, scope: !6820)
!6831 = !DILocalVariable(name: "gsi", scope: !6820, file: !3, line: 867, type: !3960)
!6832 = !DILocation(line: 867, column: 24, scope: !6820)
!6833 = !DILocation(line: 868, column: 21, scope: !6820)
!6834 = !DILocation(line: 868, column: 10, scope: !6820)
!6835 = !DILocation(line: 868, column: 8, scope: !6820)
!6836 = !DILocation(line: 870, column: 25, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6820, file: !3, line: 870, column: 3)
!6838 = !DILocation(line: 870, column: 14, scope: !6837)
!6839 = !DILocation(line: 870, column: 8, scope: !6837)
!6840 = !DILocation(line: 870, column: 33, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 870, column: 3)
!6842 = !DILocation(line: 870, column: 32, scope: !6841)
!6843 = !DILocation(line: 870, column: 3, scope: !6837)
!6844 = !DILocation(line: 872, column: 23, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6841, file: !3, line: 871, column: 5)
!6846 = !DILocation(line: 873, column: 13, scope: !6845)
!6847 = !DILocation(line: 873, column: 11, scope: !6845)
!6848 = !DILocation(line: 877, column: 46, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 877, column: 11)
!6850 = !DILocation(line: 877, column: 27, scope: !6849)
!6851 = !DILocation(line: 877, column: 12, scope: !6849)
!6852 = !DILocation(line: 877, column: 11, scope: !6845)
!6853 = !DILocation(line: 881, column: 26, scope: !6854)
!6854 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 881, column: 8)
!6855 = distinct !DILexicalBlock(scope: !6849, file: !3, line: 878, column: 2)
!6856 = !DILocation(line: 881, column: 8, scope: !6854)
!6857 = !DILocation(line: 881, column: 8, scope: !6855)
!6858 = !DILocalVariable(name: "vdef", scope: !6859, file: !3, line: 883, type: !1622)
!6859 = distinct !DILexicalBlock(scope: !6854, file: !3, line: 882, column: 6)
!6860 = !DILocation(line: 883, column: 13, scope: !6859)
!6861 = !DILocation(line: 883, column: 39, scope: !6859)
!6862 = !DILocation(line: 883, column: 20, scope: !6859)
!6863 = !DILocalVariable(name: "vuse", scope: !6859, file: !3, line: 884, type: !1622)
!6864 = !DILocation(line: 884, column: 13, scope: !6859)
!6865 = !DILocation(line: 884, column: 40, scope: !6859)
!6866 = !DILocation(line: 884, column: 20, scope: !6859)
!6867 = !DILocalVariable(name: "use_p", scope: !6859, file: !3, line: 886, type: !1422)
!6868 = !DILocation(line: 886, column: 22, scope: !6859)
!6869 = !DILocalVariable(name: "iter", scope: !6859, file: !3, line: 887, type: !2893)
!6870 = !DILocation(line: 887, column: 25, scope: !6859)
!6871 = !DILocalVariable(name: "use_stmt", scope: !6859, file: !3, line: 888, type: !1434)
!6872 = !DILocation(line: 888, column: 15, scope: !6859)
!6873 = !DILocation(line: 889, column: 8, scope: !6874)
!6874 = distinct !DILexicalBlock(scope: !6859, file: !3, line: 889, column: 8)
!6875 = !DILocation(line: 889, column: 8, scope: !6876)
!6876 = distinct !DILexicalBlock(scope: !6874, file: !3, line: 889, column: 8)
!6877 = !DILocation(line: 890, column: 3, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6876, file: !3, line: 890, column: 3)
!6879 = !DILocation(line: 890, column: 3, scope: !6880)
!6880 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 890, column: 3)
!6881 = !DILocation(line: 891, column: 5, scope: !6880)
!6882 = distinct !{!6882, !6877, !6883}
!6883 = !DILocation(line: 891, column: 5, scope: !6878)
!6884 = distinct !{!6884, !6873, !6885}
!6885 = !DILocation(line: 891, column: 5, scope: !6874)
!6886 = !DILocation(line: 892, column: 12, scope: !6887)
!6887 = distinct !DILexicalBlock(scope: !6859, file: !3, line: 892, column: 12)
!6888 = !DILocation(line: 893, column: 12, scope: !6887)
!6889 = !DILocation(line: 893, column: 15, scope: !6887)
!6890 = !DILocation(line: 893, column: 32, scope: !6887)
!6891 = !DILocation(line: 892, column: 12, scope: !6859)
!6892 = !DILocation(line: 894, column: 3, scope: !6887)
!6893 = !DILocation(line: 894, column: 42, scope: !6887)
!6894 = !DILocation(line: 895, column: 6, scope: !6859)
!6895 = !DILocation(line: 897, column: 22, scope: !6854)
!6896 = !DILocation(line: 897, column: 6, scope: !6854)
!6897 = !DILocation(line: 898, column: 2, scope: !6855)
!6898 = !DILocation(line: 900, column: 24, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 900, column: 11)
!6900 = !DILocation(line: 900, column: 12, scope: !6899)
!6901 = !DILocation(line: 900, column: 11, scope: !6845)
!6902 = !DILocation(line: 902, column: 22, scope: !6903)
!6903 = distinct !DILexicalBlock(scope: !6899, file: !3, line: 901, column: 2)
!6904 = !DILocation(line: 903, column: 8, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6903, file: !3, line: 903, column: 8)
!6906 = !DILocation(line: 903, column: 18, scope: !6905)
!6907 = !DILocation(line: 903, column: 22, scope: !6905)
!6908 = !DILocation(line: 903, column: 33, scope: !6905)
!6909 = !DILocation(line: 903, column: 8, scope: !6903)
!6910 = !DILocation(line: 905, column: 17, scope: !6911)
!6911 = distinct !DILexicalBlock(scope: !6905, file: !3, line: 904, column: 6)
!6912 = !DILocation(line: 905, column: 8, scope: !6911)
!6913 = !DILocation(line: 906, column: 27, scope: !6911)
!6914 = !DILocation(line: 906, column: 38, scope: !6911)
!6915 = !DILocation(line: 906, column: 8, scope: !6911)
!6916 = !DILocation(line: 907, column: 17, scope: !6911)
!6917 = !DILocation(line: 907, column: 8, scope: !6911)
!6918 = !DILocation(line: 908, column: 6, scope: !6911)
!6919 = !DILocation(line: 910, column: 4, scope: !6903)
!6920 = !DILocation(line: 911, column: 22, scope: !6903)
!6921 = !DILocation(line: 912, column: 4, scope: !6903)
!6922 = distinct !{!6922, !6843, !6923}
!6923 = !DILocation(line: 916, column: 5, scope: !6837)
!6924 = !DILocation(line: 915, column: 7, scope: !6845)
!6925 = !DILocation(line: 870, column: 3, scope: !6841)
!6926 = !DILocation(line: 917, column: 10, scope: !6820)
!6927 = !DILocation(line: 917, column: 3, scope: !6820)
!6928 = distinct !DISubprogram(name: "gimple_seq_last", scope: !581, file: !581, line: 178, type: !5508, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6929 = !DILocalVariable(name: "s", arg: 1, scope: !6928, file: !581, line: 178, type: !5510)
!6930 = !DILocation(line: 178, column: 35, scope: !6928)
!6931 = !DILocation(line: 180, column: 10, scope: !6928)
!6932 = !DILocation(line: 180, column: 14, scope: !6928)
!6933 = !DILocation(line: 180, column: 17, scope: !6928)
!6934 = !DILocation(line: 180, column: 3, scope: !6928)
!6935 = distinct !DISubprogram(name: "forward_edge_to_pdom", scope: !3, file: !3, line: 923, type: !6936, scopeLine: 924, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!6936 = !DISubroutineType(types: !6937)
!6937 = !{!1475, !1475, !1885}
!6938 = !DILocalVariable(name: "e", arg: 1, scope: !6935, file: !3, line: 923, type: !1475)
!6939 = !DILocation(line: 923, column: 28, scope: !6935)
!6940 = !DILocalVariable(name: "post_dom_bb", arg: 2, scope: !6935, file: !3, line: 923, type: !1885)
!6941 = !DILocation(line: 923, column: 43, scope: !6935)
!6942 = !DILocalVariable(name: "gsi", scope: !6935, file: !3, line: 925, type: !3960)
!6943 = !DILocation(line: 925, column: 24, scope: !6935)
!6944 = !DILocalVariable(name: "e2", scope: !6935, file: !3, line: 926, type: !1475)
!6945 = !DILocation(line: 926, column: 8, scope: !6935)
!6946 = !DILocalVariable(name: "ei", scope: !6935, file: !3, line: 927, type: !4052)
!6947 = !DILocation(line: 927, column: 17, scope: !6935)
!6948 = !DILocation(line: 929, column: 7, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6935, file: !3, line: 929, column: 7)
!6950 = !DILocation(line: 929, column: 17, scope: !6949)
!6951 = !DILocation(line: 929, column: 21, scope: !6949)
!6952 = !DILocation(line: 929, column: 32, scope: !6949)
!6953 = !DILocation(line: 929, column: 7, scope: !6935)
!6954 = !DILocation(line: 930, column: 14, scope: !6949)
!6955 = !DILocation(line: 930, column: 60, scope: !6949)
!6956 = !DILocation(line: 930, column: 63, scope: !6949)
!6957 = !DILocation(line: 930, column: 68, scope: !6949)
!6958 = !DILocation(line: 931, column: 7, scope: !6949)
!6959 = !DILocation(line: 931, column: 10, scope: !6949)
!6960 = !DILocation(line: 931, column: 16, scope: !6949)
!6961 = !DILocation(line: 931, column: 23, scope: !6949)
!6962 = !DILocation(line: 931, column: 36, scope: !6949)
!6963 = !DILocation(line: 930, column: 5, scope: !6949)
!6964 = !DILocation(line: 933, column: 34, scope: !6935)
!6965 = !DILocation(line: 933, column: 37, scope: !6935)
!6966 = !DILocation(line: 933, column: 8, scope: !6935)
!6967 = !DILocation(line: 933, column: 6, scope: !6935)
!6968 = !DILocation(line: 934, column: 15, scope: !6935)
!6969 = !DILocation(line: 937, column: 7, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6935, file: !3, line: 937, column: 7)
!6971 = !DILocation(line: 937, column: 13, scope: !6970)
!6972 = !DILocation(line: 937, column: 10, scope: !6970)
!6973 = !DILocation(line: 937, column: 7, scope: !6935)
!6974 = !DILocation(line: 938, column: 12, scope: !6970)
!6975 = !DILocation(line: 938, column: 5, scope: !6970)
!6976 = !DILocation(line: 940, column: 39, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6935, file: !3, line: 940, column: 7)
!6978 = !DILocation(line: 940, column: 28, scope: !6977)
!6979 = !DILocation(line: 940, column: 8, scope: !6977)
!6980 = !DILocation(line: 940, column: 7, scope: !6935)
!6981 = !DILocation(line: 944, column: 7, scope: !6982)
!6982 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 944, column: 7)
!6983 = distinct !DILexicalBlock(scope: !6977, file: !3, line: 941, column: 5)
!6984 = !DILocation(line: 944, column: 7, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6982, file: !3, line: 944, column: 7)
!6986 = !DILocation(line: 945, column: 6, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 945, column: 6)
!6988 = !DILocation(line: 945, column: 12, scope: !6987)
!6989 = !DILocation(line: 945, column: 9, scope: !6987)
!6990 = !DILocation(line: 945, column: 6, scope: !6985)
!6991 = !DILocation(line: 946, column: 4, scope: !6987)
!6992 = distinct !{!6992, !6981, !6993}
!6993 = !DILocation(line: 946, column: 4, scope: !6982)
!6994 = !DILocation(line: 947, column: 34, scope: !6995)
!6995 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 947, column: 7)
!6996 = !DILocation(line: 947, column: 18, scope: !6995)
!6997 = !DILocation(line: 947, column: 12, scope: !6995)
!6998 = !DILocation(line: 947, column: 49, scope: !6999)
!6999 = distinct !DILexicalBlock(scope: !6995, file: !3, line: 947, column: 7)
!7000 = !DILocation(line: 947, column: 48, scope: !6999)
!7001 = !DILocation(line: 947, column: 7, scope: !6995)
!7002 = !DILocalVariable(name: "phi", scope: !7003, file: !3, line: 949, type: !1434)
!7003 = distinct !DILexicalBlock(scope: !6999, file: !3, line: 948, column: 2)
!7004 = !DILocation(line: 949, column: 11, scope: !7003)
!7005 = !DILocation(line: 949, column: 17, scope: !7003)
!7006 = !DILocalVariable(name: "op", scope: !7003, file: !3, line: 950, type: !1622)
!7007 = !DILocation(line: 950, column: 9, scope: !7003)
!7008 = !DILocalVariable(name: "locus", scope: !7003, file: !3, line: 951, type: !1455)
!7009 = !DILocation(line: 951, column: 20, scope: !7003)
!7010 = !DILocation(line: 955, column: 43, scope: !7011)
!7011 = distinct !DILexicalBlock(scope: !7003, file: !3, line: 955, column: 8)
!7012 = !DILocation(line: 955, column: 24, scope: !7011)
!7013 = !DILocation(line: 955, column: 9, scope: !7011)
!7014 = !DILocation(line: 955, column: 8, scope: !7003)
!7015 = !DILocation(line: 957, column: 46, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 956, column: 6)
!7017 = !DILocation(line: 957, column: 8, scope: !7016)
!7018 = !DILocation(line: 958, column: 8, scope: !7016)
!7019 = !DILocation(line: 959, column: 8, scope: !7016)
!7020 = distinct !{!7020, !7001, !7021}
!7021 = !DILocation(line: 975, column: 2, scope: !6995)
!7022 = !DILocation(line: 963, column: 28, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7003, file: !3, line: 963, column: 15)
!7024 = !DILocation(line: 963, column: 16, scope: !7023)
!7025 = !DILocation(line: 963, column: 15, scope: !7003)
!7026 = !DILocation(line: 965, column: 8, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !7023, file: !3, line: 964, column: 6)
!7028 = !DILocation(line: 966, column: 8, scope: !7027)
!7029 = !DILocation(line: 969, column: 29, scope: !7003)
!7030 = !DILocation(line: 969, column: 34, scope: !7003)
!7031 = !DILocation(line: 969, column: 38, scope: !7003)
!7032 = !DILocation(line: 969, column: 9, scope: !7003)
!7033 = !DILocation(line: 969, column: 7, scope: !7003)
!7034 = !DILocation(line: 970, column: 37, scope: !7003)
!7035 = !DILocation(line: 970, column: 42, scope: !7003)
!7036 = !DILocation(line: 970, column: 46, scope: !7003)
!7037 = !DILocation(line: 970, column: 12, scope: !7003)
!7038 = !DILocation(line: 970, column: 10, scope: !7003)
!7039 = !DILocation(line: 971, column: 17, scope: !7003)
!7040 = !DILocation(line: 971, column: 22, scope: !7003)
!7041 = !DILocation(line: 971, column: 26, scope: !7003)
!7042 = !DILocation(line: 971, column: 29, scope: !7003)
!7043 = !DILocation(line: 971, column: 4, scope: !7003)
!7044 = !DILocation(line: 973, column: 4, scope: !7003)
!7045 = !DILocation(line: 974, column: 4, scope: !7003)
!7046 = !DILocation(line: 947, column: 7, scope: !6999)
!7047 = !DILocation(line: 976, column: 5, scope: !6983)
!7048 = !DILocation(line: 977, column: 10, scope: !6935)
!7049 = !DILocation(line: 977, column: 3, scope: !6935)
!7050 = !DILocation(line: 978, column: 1, scope: !6935)
!7051 = distinct !DISubprogram(name: "ei_safe_edge", scope: !135, file: !135, line: 761, type: !5763, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7052 = !DILocalVariable(name: "i", arg: 1, scope: !7051, file: !135, line: 761, type: !4052)
!7053 = !DILocation(line: 761, column: 29, scope: !7051)
!7054 = !DILocation(line: 763, column: 11, scope: !7051)
!7055 = !DILocation(line: 763, column: 10, scope: !7051)
!7056 = !DILocation(line: 763, column: 26, scope: !7051)
!7057 = !DILocation(line: 763, column: 3, scope: !7051)
!7058 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !581, file: !581, line: 215, type: !7059, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7059 = !DISubroutineType(types: !7060)
!7060 = !{!1735, !5510}
!7061 = !DILocalVariable(name: "s", arg: 1, scope: !7058, file: !581, line: 215, type: !5510)
!7062 = !DILocation(line: 215, column: 38, scope: !7058)
!7063 = !DILocation(line: 217, column: 10, scope: !7058)
!7064 = !DILocation(line: 217, column: 12, scope: !7058)
!7065 = !DILocation(line: 217, column: 20, scope: !7058)
!7066 = !DILocation(line: 217, column: 23, scope: !7058)
!7067 = !DILocation(line: 217, column: 26, scope: !7058)
!7068 = !DILocation(line: 217, column: 32, scope: !7058)
!7069 = !DILocation(line: 217, column: 3, scope: !7058)
!7070 = distinct !DISubprogram(name: "phi_nodes", scope: !2964, file: !2964, line: 508, type: !5490, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7071 = !DILocalVariable(name: "bb", arg: 1, scope: !7070, file: !2964, line: 508, type: !4911)
!7072 = !DILocation(line: 508, column: 30, scope: !7070)
!7073 = !DILocation(line: 510, column: 3, scope: !7070)
!7074 = !DILocation(line: 511, column: 8, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !7070, file: !2964, line: 511, column: 7)
!7076 = !DILocation(line: 511, column: 12, scope: !7075)
!7077 = !DILocation(line: 511, column: 15, scope: !7075)
!7078 = !DILocation(line: 511, column: 7, scope: !7070)
!7079 = !DILocation(line: 512, column: 5, scope: !7075)
!7080 = !DILocation(line: 513, column: 10, scope: !7070)
!7081 = !DILocation(line: 513, column: 14, scope: !7070)
!7082 = !DILocation(line: 513, column: 17, scope: !7070)
!7083 = !DILocation(line: 513, column: 25, scope: !7070)
!7084 = !DILocation(line: 513, column: 3, scope: !7070)
!7085 = !DILocation(line: 514, column: 1, scope: !7070)
!7086 = distinct !DISubprogram(name: "gimple_phi_arg_location", scope: !2964, file: !2964, line: 475, type: !7087, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7087 = !DISubroutineType(types: !7088)
!7088 = !{!1455, !1434, !1943}
!7089 = !DILocalVariable(name: "gs", arg: 1, scope: !7086, file: !2964, line: 475, type: !1434)
!7090 = !DILocation(line: 475, column: 33, scope: !7086)
!7091 = !DILocalVariable(name: "i", arg: 2, scope: !7086, file: !2964, line: 475, type: !1943)
!7092 = !DILocation(line: 475, column: 44, scope: !7086)
!7093 = !DILocation(line: 477, column: 26, scope: !7086)
!7094 = !DILocation(line: 477, column: 30, scope: !7086)
!7095 = !DILocation(line: 477, column: 10, scope: !7086)
!7096 = !DILocation(line: 477, column: 34, scope: !7086)
!7097 = !DILocation(line: 477, column: 3, scope: !7086)
!7098 = distinct !DISubprogram(name: "gimple_set_op", scope: !581, file: !581, line: 1663, type: !7099, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7099 = !DISubroutineType(types: !7100)
!7100 = !{null, !1434, !7, !1622}
!7101 = !DILocalVariable(name: "gs", arg: 1, scope: !7098, file: !581, line: 1663, type: !1434)
!7102 = !DILocation(line: 1663, column: 23, scope: !7098)
!7103 = !DILocalVariable(name: "i", arg: 2, scope: !7098, file: !581, line: 1663, type: !7)
!7104 = !DILocation(line: 1663, column: 36, scope: !7098)
!7105 = !DILocalVariable(name: "op", arg: 3, scope: !7098, file: !581, line: 1663, type: !1622)
!7106 = !DILocation(line: 1663, column: 44, scope: !7098)
!7107 = !DILocation(line: 1665, column: 3, scope: !7098)
!7108 = !DILocation(line: 1671, column: 24, scope: !7098)
!7109 = !DILocation(line: 1671, column: 15, scope: !7098)
!7110 = !DILocation(line: 1671, column: 3, scope: !7098)
!7111 = !DILocation(line: 1671, column: 19, scope: !7098)
!7112 = !DILocation(line: 1671, column: 22, scope: !7098)
!7113 = !DILocation(line: 1672, column: 1, scope: !7098)
!7114 = distinct !DISubprogram(name: "gsi_start", scope: !581, file: !581, line: 4403, type: !7115, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7115 = !DISubroutineType(types: !7116)
!7116 = !{!3960, !1485}
!7117 = !DILocalVariable(name: "seq", arg: 1, scope: !7114, file: !581, line: 4403, type: !1485)
!7118 = !DILocation(line: 4403, column: 23, scope: !7114)
!7119 = !DILocalVariable(name: "i", scope: !7114, file: !581, line: 4405, type: !3960)
!7120 = !DILocation(line: 4405, column: 24, scope: !7114)
!7121 = !DILocation(line: 4407, column: 29, scope: !7114)
!7122 = !DILocation(line: 4407, column: 11, scope: !7114)
!7123 = !DILocation(line: 4407, column: 5, scope: !7114)
!7124 = !DILocation(line: 4407, column: 9, scope: !7114)
!7125 = !DILocation(line: 4408, column: 11, scope: !7114)
!7126 = !DILocation(line: 4408, column: 5, scope: !7114)
!7127 = !DILocation(line: 4408, column: 9, scope: !7114)
!7128 = !DILocation(line: 4409, column: 13, scope: !7114)
!7129 = !DILocation(line: 4409, column: 11, scope: !7114)
!7130 = !DILocation(line: 4409, column: 17, scope: !7114)
!7131 = !DILocation(line: 4409, column: 22, scope: !7114)
!7132 = !DILocation(line: 4409, column: 27, scope: !7114)
!7133 = !DILocation(line: 4409, column: 20, scope: !7114)
!7134 = !DILocation(line: 4409, column: 10, scope: !7114)
!7135 = !DILocation(line: 4409, column: 48, scope: !7114)
!7136 = !DILocation(line: 4409, column: 53, scope: !7114)
!7137 = !DILocation(line: 4409, column: 35, scope: !7114)
!7138 = !DILocation(line: 4409, column: 5, scope: !7114)
!7139 = !DILocation(line: 4409, column: 8, scope: !7114)
!7140 = !DILocation(line: 4411, column: 3, scope: !7114)
!7141 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !581, file: !581, line: 34, type: !7142, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2887)
!7142 = !DISubroutineType(types: !7143)
!7143 = !{null, !5631}
!7144 = !DILocalVariable(name: "vec_", arg: 1, scope: !7141, file: !581, line: 34, type: !5631)
!7145 = !DILocation(line: 34, column: 1, scope: !7141)
!7146 = !DILocation(line: 34, column: 1, scope: !7147)
!7147 = distinct !DILexicalBlock(scope: !7141, file: !581, line: 34, column: 1)
