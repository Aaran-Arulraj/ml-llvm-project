; ModuleID = 'lto-streamer-in.c'
source_filename = "lto-streamer-in.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.lto_stats_d = type { i64, i64, i64, i64, i64, [10 x i64], i64, [188 x i64], i64, i64, i64, i64 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.line_maps = type { %struct.line_map*, i32, i32, i32, i32, i32, i8, i32, i32, i32, i8* (i8*, i64)* }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.VEC_alias_pair_gc = type { %struct.VEC_alias_pair_base }
%struct.VEC_alias_pair_base = type { i32, i32, [1 x %struct.alias_pair] }
%struct.alias_pair = type { %union.tree_node*, %union.tree_node* }
%struct.lto_file_decl_data = type { %struct.lto_in_decl_state*, %struct.lto_in_decl_state*, %struct.lto_cgraph_encoder_d*, %struct.htab*, i8*, i8, %struct.htab*, %struct.htab* }
%struct.lto_in_decl_state = type { [7 x %struct.lto_tree_ref_table], %union.tree_node* }
%struct.lto_tree_ref_table = type { %union.tree_node**, i32 }
%struct.lto_cgraph_encoder_d = type { %struct.pointer_map_t*, %struct.VEC_cgraph_node_ptr_heap* }
%struct.VEC_cgraph_node_ptr_heap = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.lto_function_header = type { %struct.lto_header, i32, i32, i32, i32, i32, i32, i32 }
%struct.lto_header = type { i16, i16, i32 }
%struct.data_in = type { %struct.lto_file_decl_data*, %union.tree_node**, i8*, i32, i32, i32, i8*, i32, i32, %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.lto_streamer_cache_d* }
%struct.VEC_ld_plugin_symbol_resolution_t_heap = type { %struct.VEC_ld_plugin_symbol_resolution_t_base }
%struct.VEC_ld_plugin_symbol_resolution_t_base = type { i32, i32, [1 x i32] }
%struct.lto_streamer_cache_d = type { %struct.htab*, i32, %struct.VEC_tree_gc*, %struct.VEC_unsigned_heap* }
%struct.VEC_unsigned_heap = type { %struct.VEC_unsigned_base }
%struct.VEC_unsigned_base = type { i32, i32, [1 x i32] }
%struct.lto_input_block = type { i8*, i32, i32 }
%struct.bitpack_d = type { i64, i64, %struct.VEC_bitpack_word_t_heap* }
%struct.VEC_bitpack_word_t_heap = type { %struct.VEC_bitpack_word_t_base }
%struct.VEC_bitpack_word_t_base = type { i32, i32, [1 x i64] }
%struct.string_slot = type { i8*, i32 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.eh_catch_d = type { %struct.eh_catch_d*, %struct.eh_catch_d*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.eh_region_u_try = type { %struct.eh_catch_d*, %struct.eh_catch_d* }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.eh_region_u_must_not_throw = type { %union.tree_node*, i32 }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.gimple_statement_eh_ctrl = type { %struct.gimple_statement_base, i32 }
%struct.gimple_statement_eh_mnt = type { %struct.gimple_statement_base, %union.tree_node* }
%struct.real_value = type { i32, [3 x i64] }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }
%struct.fixed_value = type { %struct.double_int, i32 }
%struct.double_int = type { i64, i64 }
%struct.tree_fixed_cst = type { %struct.tree_common, %struct.fixed_value* }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_vector = type { %struct.tree_common, %union.tree_node* }
%struct.tree_complex = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_binfo = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_none }
%struct.VEC_tree_none = type { %struct.VEC_tree_base }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }

@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str = private unnamed_addr constant [18 x i8] c"lto-streamer-in.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@lto_stats = external dso_local global %struct.lto_stats_d, align 8
@file_name_hash_table = internal global %struct.htab* null, align 8, !dbg !0
@.str.2 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"bytecode stream: expected tag %s instead of %s\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.4 = private unnamed_addr constant [62 x i8] c"bytecode stream: tag %s is not in the expected range [%s, %s]\00", align 1
@lto_init_eh.eh_initialized_p = internal global i8 0, align 1, !dbg !3491
@flag_exceptions = external dso_local global i32, align 4
@line_table = external dso_local global %struct.line_maps*, align 8
@.str.5 = private unnamed_addr constant [50 x i8] c"bytecode stream: found non-null terminated string\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"bytecode stream: string too long for the string table\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.7 = private unnamed_addr constant [49 x i8] c"bytecode stream: unknown GIMPLE statement tag %s\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"./lto-streamer.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.9 = private unnamed_addr constant [35 x i8] c"bytecode stream: unexpected tag %s\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@alias_pairs = external dso_local global %struct.VEC_alias_pair_gc*, align 8
@.str.11 = private unnamed_addr constant [55 x i8] c"bytecode stream: tried to jump backwards in the stream\00", align 1
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.12 = private unnamed_addr constant [38 x i8] c"target specific builtin not available\00", align 1
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.13 = private unnamed_addr constant [39 x i8] c"optimization options not supported yet\00", align 1
@.str.14 = private unnamed_addr constant [46 x i8] c"target optimization options not supported yet\00", align 1
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"%s.%lu\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_input_function_body(%struct.lto_file_decl_data* %file_data, %union.tree_node* %fn_decl, i8* %data) #0 !dbg !3499 {
entry:
  %file_data.addr = alloca %struct.lto_file_decl_data*, align 8
  %fn_decl.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.lto_file_decl_data* %file_data, %struct.lto_file_decl_data** %file_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data.addr, metadata !3502, metadata !DIExpression()), !dbg !3503
  store %union.tree_node* %fn_decl, %union.tree_node** %fn_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl.addr, metadata !3504, metadata !DIExpression()), !dbg !3505
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3506, metadata !DIExpression()), !dbg !3507
  %0 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !3508
  store %union.tree_node* %0, %union.tree_node** @current_function_decl, align 8, !dbg !3509
  %1 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3510
  %2 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !3511
  %3 = load i8*, i8** %data.addr, align 8, !dbg !3512
  call void @lto_read_body(%struct.lto_file_decl_data* %1, %union.tree_node* %2, i8* %3, i32 1), !dbg !3513
  ret void, !dbg !3514
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @lto_read_body(%struct.lto_file_decl_data* %file_data, %union.tree_node* %fn_decl, i8* %data, i32 %section_type) #0 !dbg !3515 {
entry:
  %file_data.addr = alloca %struct.lto_file_decl_data*, align 8
  %fn_decl.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %section_type.addr = alloca i32, align 4
  %header = alloca %struct.lto_function_header*, align 8
  %data_in = alloca %struct.data_in*, align 8
  %cfg_offset = alloca i32, align 4
  %main_offset = alloca i32, align 4
  %string_offset = alloca i32, align 4
  %ib_cfg = alloca %struct.lto_input_block, align 8
  %ib_main = alloca %struct.lto_input_block, align 8
  %fn = alloca %struct.function*, align 8
  %decl_state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %file_data, %struct.lto_file_decl_data** %file_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data.addr, metadata !3518, metadata !DIExpression()), !dbg !3519
  store %union.tree_node* %fn_decl, %union.tree_node** %fn_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl.addr, metadata !3520, metadata !DIExpression()), !dbg !3521
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3522, metadata !DIExpression()), !dbg !3523
  store i32 %section_type, i32* %section_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %section_type.addr, metadata !3524, metadata !DIExpression()), !dbg !3525
  call void @llvm.dbg.declare(metadata %struct.lto_function_header** %header, metadata !3526, metadata !DIExpression()), !dbg !3527
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in, metadata !3528, metadata !DIExpression()), !dbg !3529
  call void @llvm.dbg.declare(metadata i32* %cfg_offset, metadata !3530, metadata !DIExpression()), !dbg !3531
  call void @llvm.dbg.declare(metadata i32* %main_offset, metadata !3532, metadata !DIExpression()), !dbg !3533
  call void @llvm.dbg.declare(metadata i32* %string_offset, metadata !3534, metadata !DIExpression()), !dbg !3535
  call void @llvm.dbg.declare(metadata %struct.lto_input_block* %ib_cfg, metadata !3536, metadata !DIExpression()), !dbg !3542
  call void @llvm.dbg.declare(metadata %struct.lto_input_block* %ib_main, metadata !3543, metadata !DIExpression()), !dbg !3544
  %0 = load i8*, i8** %data.addr, align 8, !dbg !3545
  %1 = bitcast i8* %0 to %struct.lto_function_header*, !dbg !3546
  store %struct.lto_function_header* %1, %struct.lto_function_header** %header, align 8, !dbg !3547
  store i32 36, i32* %cfg_offset, align 4, !dbg !3548
  %2 = load i32, i32* %cfg_offset, align 4, !dbg !3549
  %3 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3550
  %cfg_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %3, i32 0, i32 5, !dbg !3551
  %4 = load i32, i32* %cfg_size, align 4, !dbg !3551
  %add = add nsw i32 %2, %4, !dbg !3552
  store i32 %add, i32* %main_offset, align 4, !dbg !3553
  %5 = load i32, i32* %main_offset, align 4, !dbg !3554
  %6 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3555
  %main_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %6, i32 0, i32 6, !dbg !3556
  %7 = load i32, i32* %main_size, align 4, !dbg !3556
  %add1 = add nsw i32 %5, %7, !dbg !3557
  store i32 %add1, i32* %string_offset, align 4, !dbg !3558
  br label %do.body, !dbg !3559

do.body:                                          ; preds = %entry
  %8 = load i8*, i8** %data.addr, align 8, !dbg !3560
  %9 = load i32, i32* %cfg_offset, align 4, !dbg !3560
  %idx.ext = sext i32 %9 to i64, !dbg !3560
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %idx.ext, !dbg !3560
  %data2 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_cfg, i32 0, i32 0, !dbg !3560
  store i8* %add.ptr, i8** %data2, align 8, !dbg !3560
  %p = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_cfg, i32 0, i32 1, !dbg !3560
  store i32 0, i32* %p, align 8, !dbg !3560
  %10 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3560
  %cfg_size3 = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %10, i32 0, i32 5, !dbg !3560
  %11 = load i32, i32* %cfg_size3, align 4, !dbg !3560
  %len = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_cfg, i32 0, i32 2, !dbg !3560
  store i32 %11, i32* %len, align 4, !dbg !3560
  br label %do.end, !dbg !3560

do.end:                                           ; preds = %do.body
  br label %do.body4, !dbg !3562

do.body4:                                         ; preds = %do.end
  %12 = load i8*, i8** %data.addr, align 8, !dbg !3563
  %13 = load i32, i32* %main_offset, align 4, !dbg !3563
  %idx.ext5 = sext i32 %13 to i64, !dbg !3563
  %add.ptr6 = getelementptr inbounds i8, i8* %12, i64 %idx.ext5, !dbg !3563
  %data7 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_main, i32 0, i32 0, !dbg !3563
  store i8* %add.ptr6, i8** %data7, align 8, !dbg !3563
  %p8 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_main, i32 0, i32 1, !dbg !3563
  store i32 0, i32* %p8, align 8, !dbg !3563
  %14 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3563
  %main_size9 = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %14, i32 0, i32 6, !dbg !3563
  %15 = load i32, i32* %main_size9, align 4, !dbg !3563
  %len10 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %ib_main, i32 0, i32 2, !dbg !3563
  store i32 %15, i32* %len10, align 4, !dbg !3563
  br label %do.end11, !dbg !3563

do.end11:                                         ; preds = %do.body4
  %16 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3565
  %17 = load i8*, i8** %data.addr, align 8, !dbg !3566
  %18 = load i32, i32* %string_offset, align 4, !dbg !3567
  %idx.ext12 = sext i32 %18 to i64, !dbg !3568
  %add.ptr13 = getelementptr inbounds i8, i8* %17, i64 %idx.ext12, !dbg !3568
  %19 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3569
  %string_size = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %19, i32 0, i32 7, !dbg !3570
  %20 = load i32, i32* %string_size, align 4, !dbg !3570
  %call = call %struct.data_in* @lto_data_in_create(%struct.lto_file_decl_data* %16, i8* %add.ptr13, i32 %20, %struct.VEC_ld_plugin_symbol_resolution_t_heap* null), !dbg !3571
  store %struct.data_in* %call, %struct.data_in** %data_in, align 8, !dbg !3572
  %21 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3573
  %lto_header = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %21, i32 0, i32 0, !dbg !3574
  %major_version = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header, i32 0, i32 0, !dbg !3575
  %22 = load i16, i16* %major_version, align 4, !dbg !3575
  %conv = sext i16 %22 to i32, !dbg !3573
  %23 = load %struct.lto_function_header*, %struct.lto_function_header** %header, align 8, !dbg !3576
  %lto_header14 = getelementptr inbounds %struct.lto_function_header, %struct.lto_function_header* %23, i32 0, i32 0, !dbg !3577
  %minor_version = getelementptr inbounds %struct.lto_header, %struct.lto_header* %lto_header14, i32 0, i32 1, !dbg !3578
  %24 = load i16, i16* %minor_version, align 2, !dbg !3578
  %conv15 = sext i16 %24 to i32, !dbg !3576
  call void @lto_check_version(i32 %conv, i32 %conv15), !dbg !3579
  %25 = load i32, i32* %section_type.addr, align 4, !dbg !3580
  %cmp = icmp eq i32 %25, 1, !dbg !3582
  br i1 %cmp, label %if.then, label %if.else, !dbg !3583

if.then:                                          ; preds = %do.end11
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !3584, metadata !DIExpression()), !dbg !3586
  %26 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !3587
  %function_decl = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !3587
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3587
  %27 = load %struct.function*, %struct.function** %f, align 8, !dbg !3587
  store %struct.function* %27, %struct.function** %fn, align 8, !dbg !3586
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %decl_state, metadata !3588, metadata !DIExpression()), !dbg !3589
  %28 = load %struct.function*, %struct.function** %fn, align 8, !dbg !3590
  call void @push_cfun(%struct.function* %28), !dbg !3591
  %29 = load %struct.function*, %struct.function** %fn, align 8, !dbg !3592
  call void @init_tree_ssa(%struct.function* %29), !dbg !3593
  %30 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3594
  %31 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !3595
  %call17 = call %struct.lto_in_decl_state* @lto_get_function_in_decl_state(%struct.lto_file_decl_data* %30, %union.tree_node* %31), !dbg !3596
  store %struct.lto_in_decl_state* %call17, %struct.lto_in_decl_state** %decl_state, align 8, !dbg !3597
  %32 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %decl_state, align 8, !dbg !3598
  %tobool = icmp ne %struct.lto_in_decl_state* %32, null, !dbg !3598
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3598

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1485, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3598
  br label %cond.end, !dbg !3598

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3598

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3598
  %33 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %decl_state, align 8, !dbg !3599
  %34 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3600
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %34, i32 0, i32 0, !dbg !3601
  store %struct.lto_in_decl_state* %33, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !3602
  %35 = load %struct.function*, %struct.function** %fn, align 8, !dbg !3603
  call void @input_cfg(%struct.lto_input_block* %ib_cfg, %struct.function* %35), !dbg !3604
  %36 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !3605
  %37 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !3606
  call void @input_function(%union.tree_node* %36, %struct.data_in* %37, %struct.lto_input_block* %ib_main), !dbg !3607
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3608
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !3608
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 3, !dbg !3609
  %39 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3609
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %39, i32 0, i32 10, !dbg !3610
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !3611
  %bf.clear = and i8 %bf.load, -2, !dbg !3611
  %bf.set = or i8 %bf.clear, 1, !dbg !3611
  store i8 %bf.set, i8* %in_ssa_p, align 8, !dbg !3611
  %40 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3612
  %global_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %40, i32 0, i32 1, !dbg !3613
  %41 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %global_decl_state, align 8, !dbg !3613
  %42 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3614
  %current_decl_state19 = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %42, i32 0, i32 0, !dbg !3615
  store %struct.lto_in_decl_state* %41, %struct.lto_in_decl_state** %current_decl_state19, align 8, !dbg !3616
  call void @pop_cfun(), !dbg !3617
  br label %if.end, !dbg !3618

if.else:                                          ; preds = %do.end11
  %43 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !3619
  call void @input_alias_pairs(%struct.lto_input_block* %ib_main, %struct.data_in* %43), !dbg !3621
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %44 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !3622
  call void @clear_line_info(%struct.data_in* %44), !dbg !3623
  %45 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !3624
  call void @lto_data_in_delete(%struct.data_in* %45), !dbg !3625
  ret void, !dbg !3626
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_input_constructors_and_inits(%struct.lto_file_decl_data* %file_data, i8* %data) #0 !dbg !3627 {
entry:
  %file_data.addr = alloca %struct.lto_file_decl_data*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.lto_file_decl_data* %file_data, %struct.lto_file_decl_data** %file_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data.addr, metadata !3630, metadata !DIExpression()), !dbg !3631
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3632, metadata !DIExpression()), !dbg !3633
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !3634
  %1 = load i8*, i8** %data.addr, align 8, !dbg !3635
  call void @lto_read_body(%struct.lto_file_decl_data* %0, %union.tree_node* null, i8* %1, i32 2), !dbg !3636
  ret void, !dbg !3637
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.bitpack_d* @lto_input_bitpack(%struct.lto_input_block* %ib) #0 !dbg !3638 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %i = alloca i32, align 4
  %num_words = alloca i32, align 4
  %bp = alloca %struct.bitpack_d*, align 8
  %w = alloca i64, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !3648, metadata !DIExpression()), !dbg !3649
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3650, metadata !DIExpression()), !dbg !3651
  call void @llvm.dbg.declare(metadata i32* %num_words, metadata !3652, metadata !DIExpression()), !dbg !3653
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !3654, metadata !DIExpression()), !dbg !3655
  %call = call %struct.bitpack_d* @bitpack_create(), !dbg !3656
  store %struct.bitpack_d* %call, %struct.bitpack_d** %bp, align 8, !dbg !3657
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3658
  %call1 = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !3659
  %conv = trunc i64 %call1 to i32, !dbg !3659
  store i32 %conv, i32* %num_words, align 4, !dbg !3660
  %1 = load i32, i32* %num_words, align 4, !dbg !3661
  %cmp = icmp ult i32 %1, 20, !dbg !3661
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3661

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1867, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3661
  br label %cond.end, !dbg !3661

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3661
  store i32 0, i32* %i, align 4, !dbg !3662
  br label %for.cond, !dbg !3664

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !3665
  %3 = load i32, i32* %num_words, align 4, !dbg !3667
  %cmp3 = icmp ult i32 %2, %3, !dbg !3668
  br i1 %cmp3, label %for.body, label %for.end, !dbg !3669

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %w, metadata !3670, metadata !DIExpression()), !dbg !3672
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3673
  %call5 = call i64 @lto_input_uleb128(%struct.lto_input_block* %4), !dbg !3674
  store i64 %call5, i64* %w, align 8, !dbg !3672
  %5 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3675
  %values = getelementptr inbounds %struct.bitpack_d, %struct.bitpack_d* %5, i32 0, i32 2, !dbg !3675
  %6 = load i64, i64* %w, align 8, !dbg !3675
  %call6 = call i64* @VEC_bitpack_word_t_heap_safe_push(%struct.VEC_bitpack_word_t_heap** %values, i64 %6), !dbg !3675
  br label %for.inc, !dbg !3676

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !3677
  %inc = add i32 %7, 1, !dbg !3677
  store i32 %inc, i32* %i, align 4, !dbg !3677
  br label %for.cond, !dbg !3678, !llvm.loop !3679

for.end:                                          ; preds = %for.cond
  %8 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !3681
  ret %struct.bitpack_d* %8, !dbg !3682
}

declare dso_local %struct.bitpack_d* @bitpack_create() #2

declare dso_local i64 @lto_input_uleb128(%struct.lto_input_block*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64* @VEC_bitpack_word_t_heap_safe_push(%struct.VEC_bitpack_word_t_heap** %vec_, i64 %obj_) #0 !dbg !3683 {
entry:
  %vec_.addr = alloca %struct.VEC_bitpack_word_t_heap**, align 8
  %obj_.addr = alloca i64, align 8
  store %struct.VEC_bitpack_word_t_heap** %vec_, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitpack_word_t_heap*** %vec_.addr, metadata !3689, metadata !DIExpression()), !dbg !3690
  store i64 %obj_, i64* %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %obj_.addr, metadata !3691, metadata !DIExpression()), !dbg !3690
  %0 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !3690
  %call = call i32 @VEC_bitpack_word_t_heap_reserve(%struct.VEC_bitpack_word_t_heap** %0, i32 1), !dbg !3690
  %1 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !3690
  %2 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %1, align 8, !dbg !3690
  %tobool = icmp ne %struct.VEC_bitpack_word_t_heap* %2, null, !dbg !3690
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3690

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !3690
  %4 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %3, align 8, !dbg !3690
  %base = getelementptr inbounds %struct.VEC_bitpack_word_t_heap, %struct.VEC_bitpack_word_t_heap* %4, i32 0, i32 0, !dbg !3690
  br label %cond.end, !dbg !3690

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3690

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitpack_word_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3690
  %5 = load i64, i64* %obj_.addr, align 8, !dbg !3690
  %call1 = call i64* @VEC_bitpack_word_t_base_quick_push(%struct.VEC_bitpack_word_t_base* %cond, i64 %5), !dbg !3690
  ret i64* %call1, !dbg !3690
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @lto_input_tree(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !3692 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %tag = alloca i32, align 4
  %result = alloca %union.tree_node*, align 8
  %ix = alloca i64, align 8
  %target = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !3695, metadata !DIExpression()), !dbg !3696
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !3697, metadata !DIExpression()), !dbg !3698
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !3699, metadata !DIExpression()), !dbg !3700
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !3701, metadata !DIExpression()), !dbg !3702
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3703
  %call = call i32 @input_record_start(%struct.lto_input_block* %0), !dbg !3704
  store i32 %call, i32* %tag, align 4, !dbg !3705
  %1 = load i32, i32* %tag, align 4, !dbg !3706
  %cmp = icmp ult i32 %1, 249, !dbg !3706
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3706

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2700, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3706
  br label %cond.end, !dbg !3706

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3706

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3706
  %2 = load i32, i32* %tag, align 4, !dbg !3707
  %cmp1 = icmp eq i32 %2, 0, !dbg !3709
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3710

if.then:                                          ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !3711
  br label %if.end36, !dbg !3712

if.else:                                          ; preds = %cond.end
  %3 = load i32, i32* %tag, align 4, !dbg !3713
  %cmp2 = icmp uge i32 %3, 238, !dbg !3715
  br i1 %cmp2, label %land.lhs.true, label %if.else6, !dbg !3716

land.lhs.true:                                    ; preds = %if.else
  %4 = load i32, i32* %tag, align 4, !dbg !3717
  %cmp3 = icmp ule i32 %4, 248, !dbg !3718
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !3719

if.then4:                                         ; preds = %land.lhs.true
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3720
  %6 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3722
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3723
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3723
  %8 = load i32, i32* %tag, align 4, !dbg !3724
  %call5 = call %union.tree_node* @lto_input_tree_ref(%struct.lto_input_block* %5, %struct.data_in* %6, %struct.function* %add.ptr, i32 %8), !dbg !3725
  store %union.tree_node* %call5, %union.tree_node** %result, align 8, !dbg !3726
  br label %if.end35, !dbg !3727

if.else6:                                         ; preds = %land.lhs.true, %if.else
  %9 = load i32, i32* %tag, align 4, !dbg !3728
  %cmp7 = icmp eq i32 %9, 236, !dbg !3730
  br i1 %cmp7, label %if.then8, label %if.else10, !dbg !3731

if.then8:                                         ; preds = %if.else6
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3732
  %11 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3734
  %call9 = call %union.tree_node* @lto_get_pickled_tree(%struct.lto_input_block* %10, %struct.data_in* %11), !dbg !3735
  store %union.tree_node* %call9, %union.tree_node** %result, align 8, !dbg !3736
  br label %if.end34, !dbg !3737

if.else10:                                        ; preds = %if.else6
  %12 = load i32, i32* %tag, align 4, !dbg !3738
  %cmp11 = icmp eq i32 %12, 227, !dbg !3740
  br i1 %cmp11, label %if.then12, label %if.else14, !dbg !3741

if.then12:                                        ; preds = %if.else10
  %13 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3742
  %14 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3744
  %call13 = call %union.tree_node* @lto_get_builtin_tree(%struct.lto_input_block* %13, %struct.data_in* %14), !dbg !3745
  store %union.tree_node* %call13, %union.tree_node** %result, align 8, !dbg !3746
  br label %if.end33, !dbg !3747

if.else14:                                        ; preds = %if.else10
  %15 = load i32, i32* %tag, align 4, !dbg !3748
  %cmp15 = icmp eq i32 %15, 237, !dbg !3750
  br i1 %cmp15, label %if.then16, label %if.else24, !dbg !3751

if.then16:                                        ; preds = %if.else14
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !3752, metadata !DIExpression()), !dbg !3754
  call void @llvm.dbg.declare(metadata %union.tree_node** %target, metadata !3755, metadata !DIExpression()), !dbg !3756
  %16 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3757
  %call17 = call i64 @lto_input_uleb128(%struct.lto_input_block* %16), !dbg !3758
  store i64 %call17, i64* %ix, align 8, !dbg !3759
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3760
  %file_data = getelementptr inbounds %struct.data_in, %struct.data_in* %17, i32 0, i32 0, !dbg !3761
  %18 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !3761
  %19 = load i64, i64* %ix, align 8, !dbg !3762
  %conv = trunc i64 %19 to i32, !dbg !3762
  %call18 = call %union.tree_node* @lto_file_decl_data_get_var_decl(%struct.lto_file_decl_data* %18, i32 %conv), !dbg !3763
  store %union.tree_node* %call18, %union.tree_node** %result, align 8, !dbg !3764
  %20 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3765
  %call19 = call i64 @lto_input_uleb128(%struct.lto_input_block* %20), !dbg !3766
  store i64 %call19, i64* %ix, align 8, !dbg !3767
  %21 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3768
  %file_data20 = getelementptr inbounds %struct.data_in, %struct.data_in* %21, i32 0, i32 0, !dbg !3769
  %22 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data20, align 8, !dbg !3769
  %23 = load i64, i64* %ix, align 8, !dbg !3770
  %conv21 = trunc i64 %23 to i32, !dbg !3770
  %call22 = call %union.tree_node* @lto_file_decl_data_get_var_decl(%struct.lto_file_decl_data* %22, i32 %conv21), !dbg !3771
  store %union.tree_node* %call22, %union.tree_node** %target, align 8, !dbg !3772
  %24 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3773
  %25 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !3774
  %call23 = call zeroext i8 @varpool_extra_name_alias(%union.tree_node* %24, %union.tree_node* %25), !dbg !3775
  br label %if.end32, !dbg !3776

if.else24:                                        ; preds = %if.else14
  %26 = load i32, i32* %tag, align 4, !dbg !3777
  %call25 = call i32 @lto_tree_code_to_tag(i32 23), !dbg !3779
  %cmp26 = icmp eq i32 %26, %call25, !dbg !3780
  br i1 %cmp26, label %if.then28, label %if.else30, !dbg !3781

if.then28:                                        ; preds = %if.else24
  %27 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3782
  %28 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3784
  %call29 = call %union.tree_node* @lto_input_integer_cst(%struct.lto_input_block* %27, %struct.data_in* %28), !dbg !3785
  store %union.tree_node* %call29, %union.tree_node** %result, align 8, !dbg !3786
  br label %if.end, !dbg !3787

if.else30:                                        ; preds = %if.else24
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3788
  %30 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3790
  %31 = load i32, i32* %tag, align 4, !dbg !3791
  %call31 = call %union.tree_node* @lto_read_tree(%struct.lto_input_block* %29, %struct.data_in* %30, i32 %31), !dbg !3792
  store %union.tree_node* %call31, %union.tree_node** %result, align 8, !dbg !3793
  br label %if.end

if.end:                                           ; preds = %if.else30, %if.then28
  br label %if.end32

if.end32:                                         ; preds = %if.end, %if.then16
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then12
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then8
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then4
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then
  %32 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3794
  ret %union.tree_node* %32, !dbg !3795
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @input_record_start(%struct.lto_input_block* %ib) #0 !dbg !3796 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %tag = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !3799, metadata !DIExpression()), !dbg !3800
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !3801, metadata !DIExpression()), !dbg !3802
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3803
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !3804
  %conv = trunc i64 %call to i32, !dbg !3805
  store i32 %conv, i32* %tag, align 4, !dbg !3802
  %1 = load i32, i32* %tag, align 4, !dbg !3806
  ret i32 %1, !dbg !3807
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_input_tree_ref(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %struct.function* %fn, i32 %tag) #0 !dbg !3808 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %tag.addr = alloca i32, align 4
  %ix_u = alloca i64, align 8
  %result = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !3811, metadata !DIExpression()), !dbg !3812
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !3813, metadata !DIExpression()), !dbg !3814
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !3815, metadata !DIExpression()), !dbg !3816
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !3817, metadata !DIExpression()), !dbg !3818
  call void @llvm.dbg.declare(metadata i64* %ix_u, metadata !3819, metadata !DIExpression()), !dbg !3820
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !3821, metadata !DIExpression()), !dbg !3822
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !3822
  %0 = load i32, i32* %tag.addr, align 4, !dbg !3823
  call void @lto_tag_check_range(i32 %0, i32 238, i32 248), !dbg !3824
  %1 = load i32, i32* %tag.addr, align 4, !dbg !3825
  switch i32 %1, label %sw.default [
    i32 245, label %sw.bb
    i32 243, label %sw.bb2
    i32 238, label %sw.bb8
    i32 239, label %sw.bb13
    i32 244, label %sw.bb18
    i32 241, label %sw.bb23
    i32 248, label %sw.bb28
    i32 242, label %sw.bb28
    i32 246, label %sw.bb28
    i32 247, label %sw.bb28
    i32 240, label %sw.bb28
  ], !dbg !3826

sw.bb:                                            ; preds = %entry
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3827
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %2), !dbg !3829
  store i64 %call, i64* %ix_u, align 8, !dbg !3830
  %3 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3831
  %file_data = getelementptr inbounds %struct.data_in, %struct.data_in* %3, i32 0, i32 0, !dbg !3832
  %4 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !3832
  %5 = load i64, i64* %ix_u, align 8, !dbg !3833
  %conv = trunc i64 %5 to i32, !dbg !3833
  %call1 = call %union.tree_node* @lto_file_decl_data_get_type(%struct.lto_file_decl_data* %4, i32 %conv), !dbg !3834
  store %union.tree_node* %call1, %union.tree_node** %result, align 8, !dbg !3835
  br label %sw.epilog, !dbg !3836

sw.bb2:                                           ; preds = %entry
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3837
  %call3 = call i64 @lto_input_uleb128(%struct.lto_input_block* %6), !dbg !3838
  store i64 %call3, i64* %ix_u, align 8, !dbg !3839
  %7 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3840
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 3, !dbg !3840
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3840
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !3840
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3840
  %tobool = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !3840
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3840

cond.true:                                        ; preds = %sw.bb2
  %10 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3840
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 3, !dbg !3840
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !3840
  %ssa_names5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !3840
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names5, align 8, !dbg !3840
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !3840
  br label %cond.end, !dbg !3840

cond.false:                                       ; preds = %sw.bb2
  br label %cond.end, !dbg !3840

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3840
  %13 = load i64, i64* %ix_u, align 8, !dbg !3840
  %conv6 = trunc i64 %13 to i32, !dbg !3840
  %call7 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %conv6), !dbg !3840
  store %union.tree_node* %call7, %union.tree_node** %result, align 8, !dbg !3841
  br label %sw.epilog, !dbg !3842

sw.bb8:                                           ; preds = %entry
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3843
  %call9 = call i64 @lto_input_uleb128(%struct.lto_input_block* %14), !dbg !3844
  store i64 %call9, i64* %ix_u, align 8, !dbg !3845
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3846
  %file_data10 = getelementptr inbounds %struct.data_in, %struct.data_in* %15, i32 0, i32 0, !dbg !3847
  %16 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data10, align 8, !dbg !3847
  %17 = load i64, i64* %ix_u, align 8, !dbg !3848
  %conv11 = trunc i64 %17 to i32, !dbg !3848
  %call12 = call %union.tree_node* @lto_file_decl_data_get_field_decl(%struct.lto_file_decl_data* %16, i32 %conv11), !dbg !3849
  store %union.tree_node* %call12, %union.tree_node** %result, align 8, !dbg !3850
  br label %sw.epilog, !dbg !3851

sw.bb13:                                          ; preds = %entry
  %18 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3852
  %call14 = call i64 @lto_input_uleb128(%struct.lto_input_block* %18), !dbg !3853
  store i64 %call14, i64* %ix_u, align 8, !dbg !3854
  %19 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3855
  %file_data15 = getelementptr inbounds %struct.data_in, %struct.data_in* %19, i32 0, i32 0, !dbg !3856
  %20 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data15, align 8, !dbg !3856
  %21 = load i64, i64* %ix_u, align 8, !dbg !3857
  %conv16 = trunc i64 %21 to i32, !dbg !3857
  %call17 = call %union.tree_node* @lto_file_decl_data_get_fn_decl(%struct.lto_file_decl_data* %20, i32 %conv16), !dbg !3858
  store %union.tree_node* %call17, %union.tree_node** %result, align 8, !dbg !3859
  br label %sw.epilog, !dbg !3860

sw.bb18:                                          ; preds = %entry
  %22 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3861
  %call19 = call i64 @lto_input_uleb128(%struct.lto_input_block* %22), !dbg !3862
  store i64 %call19, i64* %ix_u, align 8, !dbg !3863
  %23 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3864
  %file_data20 = getelementptr inbounds %struct.data_in, %struct.data_in* %23, i32 0, i32 0, !dbg !3865
  %24 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data20, align 8, !dbg !3865
  %25 = load i64, i64* %ix_u, align 8, !dbg !3866
  %conv21 = trunc i64 %25 to i32, !dbg !3866
  %call22 = call %union.tree_node* @lto_file_decl_data_get_type_decl(%struct.lto_file_decl_data* %24, i32 %conv21), !dbg !3867
  store %union.tree_node* %call22, %union.tree_node** %result, align 8, !dbg !3868
  br label %sw.epilog, !dbg !3869

sw.bb23:                                          ; preds = %entry
  %26 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3870
  %call24 = call i64 @lto_input_uleb128(%struct.lto_input_block* %26), !dbg !3871
  store i64 %call24, i64* %ix_u, align 8, !dbg !3872
  %27 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3873
  %file_data25 = getelementptr inbounds %struct.data_in, %struct.data_in* %27, i32 0, i32 0, !dbg !3874
  %28 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data25, align 8, !dbg !3874
  %29 = load i64, i64* %ix_u, align 8, !dbg !3875
  %conv26 = trunc i64 %29 to i32, !dbg !3875
  %call27 = call %union.tree_node* @lto_file_decl_data_get_namespace_decl(%struct.lto_file_decl_data* %28, i32 %conv26), !dbg !3876
  store %union.tree_node* %call27, %union.tree_node** %result, align 8, !dbg !3877
  br label %sw.epilog, !dbg !3878

sw.bb28:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  %30 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3879
  %call29 = call i64 @lto_input_uleb128(%struct.lto_input_block* %30), !dbg !3880
  store i64 %call29, i64* %ix_u, align 8, !dbg !3881
  %31 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3882
  %file_data30 = getelementptr inbounds %struct.data_in, %struct.data_in* %31, i32 0, i32 0, !dbg !3883
  %32 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data30, align 8, !dbg !3883
  %33 = load i64, i64* %ix_u, align 8, !dbg !3884
  %conv31 = trunc i64 %33 to i32, !dbg !3884
  %call32 = call %union.tree_node* @lto_file_decl_data_get_var_decl(%struct.lto_file_decl_data* %32, i32 %conv31), !dbg !3885
  store %union.tree_node* %call32, %union.tree_node** %result, align 8, !dbg !3886
  %34 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3887
  %base33 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !3887
  %35 = bitcast %struct.tree_base* %base33 to i64*, !dbg !3887
  %bf.load = load i64, i64* %35, align 8, !dbg !3887
  %bf.clear = and i64 %bf.load, 65535, !dbg !3887
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3887
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !3889
  br i1 %cmp, label %if.then, label %if.end, !dbg !3890

if.then:                                          ; preds = %sw.bb28
  %36 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3891
  %call35 = call %struct.varpool_node* @varpool_node(%union.tree_node* %36), !dbg !3892
  call void @varpool_mark_needed_node(%struct.varpool_node* %call35), !dbg !3893
  br label %if.end, !dbg !3893

if.end:                                           ; preds = %if.then, %sw.bb28
  br label %sw.epilog, !dbg !3894

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 366, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3895
  br label %sw.epilog, !dbg !3896

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb23, %sw.bb18, %sw.bb13, %sw.bb8, %cond.end, %sw.bb
  %37 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3897
  %tobool36 = icmp ne %union.tree_node* %37, null, !dbg !3897
  br i1 %tobool36, label %cond.false38, label %cond.true37, !dbg !3897

cond.true37:                                      ; preds = %sw.epilog
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 369, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3897
  br label %cond.end39, !dbg !3897

cond.false38:                                     ; preds = %sw.epilog
  br label %cond.end39, !dbg !3897

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i32 [ 0, %cond.true37 ], [ 0, %cond.false38 ], !dbg !3897
  %38 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3898
  ret %union.tree_node* %38, !dbg !3899
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_get_pickled_tree(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !3900 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ix = alloca i64, align 8
  %result = alloca %union.tree_node*, align 8
  %expected_tag = alloca i32, align 4
  %orig_offset = alloca i64, align 8
  %fwd_ib = alloca %struct.lto_input_block, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !3901, metadata !DIExpression()), !dbg !3902
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !3903, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !3905, metadata !DIExpression()), !dbg !3906
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !3907, metadata !DIExpression()), !dbg !3908
  call void @llvm.dbg.declare(metadata i32* %expected_tag, metadata !3909, metadata !DIExpression()), !dbg !3910
  call void @llvm.dbg.declare(metadata i64* %orig_offset, metadata !3911, metadata !DIExpression()), !dbg !3912
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3913
  %call = call i64 @lto_input_sleb128(%struct.lto_input_block* %0), !dbg !3914
  store i64 %call, i64* %ix, align 8, !dbg !3915
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3916
  %call1 = call i64 @lto_input_uleb128(%struct.lto_input_block* %1), !dbg !3917
  %conv = trunc i64 %call1 to i32, !dbg !3918
  store i32 %conv, i32* %expected_tag, align 4, !dbg !3919
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3920
  %call2 = call i64 @lto_input_uleb128(%struct.lto_input_block* %2), !dbg !3921
  store i64 %call2, i64* %orig_offset, align 8, !dbg !3922
  %3 = load i64, i64* %orig_offset, align 8, !dbg !3923
  %4 = load i64, i64* %orig_offset, align 8, !dbg !3923
  %conv3 = trunc i64 %4 to i32, !dbg !3923
  %conv4 = zext i32 %conv3 to i64, !dbg !3923
  %cmp = icmp eq i64 %3, %conv4, !dbg !3923
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3923

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2553, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3923
  br label %cond.end, !dbg !3923

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3923

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3923
  %5 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3924
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %5, i32 0, i32 10, !dbg !3925
  %6 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !3925
  %7 = load i64, i64* %ix, align 8, !dbg !3926
  %conv6 = trunc i64 %7 to i32, !dbg !3926
  %call7 = call %union.tree_node* @lto_streamer_cache_get(%struct.lto_streamer_cache_d* %6, i32 %conv6), !dbg !3927
  store %union.tree_node* %call7, %union.tree_node** %result, align 8, !dbg !3928
  %8 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3929
  %cmp8 = icmp eq %union.tree_node* %8, null, !dbg !3931
  br i1 %cmp8, label %if.then, label %if.end19, !dbg !3932

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.lto_input_block* %fwd_ib, metadata !3933, metadata !DIExpression()), !dbg !3935
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3936
  %p = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %9, i32 0, i32 1, !dbg !3938
  %10 = load i32, i32* %p, align 8, !dbg !3938
  %conv10 = zext i32 %10 to i64, !dbg !3936
  %11 = load i64, i64* %orig_offset, align 8, !dbg !3939
  %cmp11 = icmp uge i64 %conv10, %11, !dbg !3940
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !3941

if.then13:                                        ; preds = %if.then
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0)), !dbg !3942
  br label %if.end, !dbg !3942

if.end:                                           ; preds = %if.then13, %if.then
  br label %do.body, !dbg !3943

do.body:                                          ; preds = %if.end
  %12 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3944
  %data = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %12, i32 0, i32 0, !dbg !3944
  %13 = load i8*, i8** %data, align 8, !dbg !3944
  %data14 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %fwd_ib, i32 0, i32 0, !dbg !3944
  store i8* %13, i8** %data14, align 8, !dbg !3944
  %14 = load i64, i64* %orig_offset, align 8, !dbg !3944
  %conv15 = trunc i64 %14 to i32, !dbg !3944
  %p16 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %fwd_ib, i32 0, i32 1, !dbg !3944
  store i32 %conv15, i32* %p16, align 8, !dbg !3944
  %15 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3944
  %len = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %15, i32 0, i32 2, !dbg !3944
  %16 = load i32, i32* %len, align 4, !dbg !3944
  %len17 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %fwd_ib, i32 0, i32 2, !dbg !3944
  store i32 %16, i32* %len17, align 4, !dbg !3944
  br label %do.end, !dbg !3944

do.end:                                           ; preds = %do.body
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !3946
  %call18 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %fwd_ib, %struct.data_in* %17), !dbg !3947
  store %union.tree_node* %call18, %union.tree_node** %result, align 8, !dbg !3948
  br label %if.end19, !dbg !3949

if.end19:                                         ; preds = %do.end, %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3950
  %tobool = icmp ne %union.tree_node* %18, null, !dbg !3950
  br i1 %tobool, label %land.lhs.true, label %cond.true23, !dbg !3950

land.lhs.true:                                    ; preds = %if.end19
  %19 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3950
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3950
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !3950
  %bf.load = load i64, i64* %20, align 8, !dbg !3950
  %bf.clear = and i64 %bf.load, 65535, !dbg !3950
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3950
  %21 = load i32, i32* %expected_tag, align 4, !dbg !3950
  %call20 = call i32 @lto_tag_to_tree_code(i32 %21), !dbg !3950
  %cmp21 = icmp eq i32 %bf.cast, %call20, !dbg !3950
  br i1 %cmp21, label %cond.false24, label %cond.true23, !dbg !3950

cond.true23:                                      ; preds = %land.lhs.true, %if.end19
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3950
  br label %cond.end25, !dbg !3950

cond.false24:                                     ; preds = %land.lhs.true
  br label %cond.end25, !dbg !3950

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !3950
  %22 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3951
  ret %union.tree_node* %22, !dbg !3952
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_get_builtin_tree(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !3953 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %fclass = alloca i32, align 4
  %fcode = alloca i32, align 4
  %asmname = alloca i8*, align 8
  %result = alloca %union.tree_node*, align 8
  %ix = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !3954, metadata !DIExpression()), !dbg !3955
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !3956, metadata !DIExpression()), !dbg !3957
  call void @llvm.dbg.declare(metadata i32* %fclass, metadata !3958, metadata !DIExpression()), !dbg !3959
  call void @llvm.dbg.declare(metadata i32* %fcode, metadata !3960, metadata !DIExpression()), !dbg !3961
  call void @llvm.dbg.declare(metadata i8** %asmname, metadata !3962, metadata !DIExpression()), !dbg !3963
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !3964, metadata !DIExpression()), !dbg !3965
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !3966, metadata !DIExpression()), !dbg !3967
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3968
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !3969
  %conv = trunc i64 %call to i32, !dbg !3970
  store i32 %conv, i32* %fclass, align 4, !dbg !3971
  %1 = load i32, i32* %fclass, align 4, !dbg !3972
  %cmp = icmp eq i32 %1, 3, !dbg !3972
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !3972

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %fclass, align 4, !dbg !3972
  %cmp2 = icmp eq i32 %2, 2, !dbg !3972
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !3972

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2593, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3972
  br label %cond.end, !dbg !3972

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !3972

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3972
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3973
  %call4 = call i64 @lto_input_uleb128(%struct.lto_input_block* %3), !dbg !3974
  %conv5 = trunc i64 %call4 to i32, !dbg !3975
  store i32 %conv5, i32* %fcode, align 4, !dbg !3976
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !3977
  %call6 = call i64 @lto_input_sleb128(%struct.lto_input_block* %4), !dbg !3978
  %conv7 = trunc i64 %call6 to i32, !dbg !3978
  store i32 %conv7, i32* %ix, align 4, !dbg !3979
  %5 = load i32, i32* %ix, align 4, !dbg !3980
  %6 = load i32, i32* %ix, align 4, !dbg !3980
  %cmp8 = icmp eq i32 %5, %6, !dbg !3980
  br i1 %cmp8, label %cond.false11, label %cond.true10, !dbg !3980

cond.true10:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2598, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3980
  br label %cond.end12, !dbg !3980

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !3980

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !3980
  %7 = load i32, i32* %fclass, align 4, !dbg !3981
  %cmp14 = icmp eq i32 %7, 3, !dbg !3983
  br i1 %cmp14, label %if.then, label %if.else, !dbg !3984

if.then:                                          ; preds = %cond.end12
  %8 = load i32, i32* %fcode, align 4, !dbg !3985
  %cmp16 = icmp ult i32 %8, 721, !dbg !3985
  br i1 %cmp16, label %cond.false19, label %cond.true18, !dbg !3985

cond.true18:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3985
  br label %cond.end20, !dbg !3985

cond.false19:                                     ; preds = %if.then
  br label %cond.end20, !dbg !3985

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !3985
  %9 = load i32, i32* %fcode, align 4, !dbg !3987
  %idxprom = zext i32 %9 to i64, !dbg !3988
  %arrayidx = getelementptr inbounds [721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 %idxprom, !dbg !3988
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3988
  store %union.tree_node* %10, %union.tree_node** %result, align 8, !dbg !3989
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3990
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !3990
  br i1 %tobool, label %cond.false23, label %cond.true22, !dbg !3990

cond.true22:                                      ; preds = %cond.end20
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2604, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3990
  br label %cond.end24, !dbg !3990

cond.false23:                                     ; preds = %cond.end20
  br label %cond.end24, !dbg !3990

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !3990
  br label %if.end37, !dbg !3991

if.else:                                          ; preds = %cond.end12
  %12 = load i32, i32* %fclass, align 4, !dbg !3992
  %cmp26 = icmp eq i32 %12, 2, !dbg !3994
  br i1 %cmp26, label %if.then28, label %if.else35, !dbg !3995

if.then28:                                        ; preds = %if.else
  %13 = load %union.tree_node* (i32, i8)*, %union.tree_node* (i32, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 24), align 8, !dbg !3996
  %14 = load i32, i32* %fcode, align 4, !dbg !3998
  %call29 = call %union.tree_node* %13(i32 %14, i8 zeroext 1), !dbg !3999
  store %union.tree_node* %call29, %union.tree_node** %result, align 8, !dbg !4000
  %15 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4001
  %tobool30 = icmp ne %union.tree_node* %15, null, !dbg !4001
  br i1 %tobool30, label %lor.lhs.false31, label %if.then34, !dbg !4003

lor.lhs.false31:                                  ; preds = %if.then28
  %16 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4004
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4005
  %cmp32 = icmp eq %union.tree_node* %16, %17, !dbg !4006
  br i1 %cmp32, label %if.then34, label %if.end, !dbg !4007

if.then34:                                        ; preds = %lor.lhs.false31, %if.then28
  call void (i8*, ...) @fatal_error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i64 0, i64 0)), !dbg !4008
  br label %if.end, !dbg !4008

if.end:                                           ; preds = %if.then34, %lor.lhs.false31
  br label %if.end36, !dbg !4009

if.else35:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2613, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4010
  br label %if.end36

if.end36:                                         ; preds = %if.else35, %if.end
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %cond.end24
  %18 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4011
  %19 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4012
  %call38 = call i8* @input_string(%struct.data_in* %18, %struct.lto_input_block* %19), !dbg !4013
  store i8* %call38, i8** %asmname, align 8, !dbg !4014
  %20 = load i8*, i8** %asmname, align 8, !dbg !4015
  %tobool39 = icmp ne i8* %20, null, !dbg !4015
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !4017

if.then40:                                        ; preds = %if.end37
  %21 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4018
  %22 = load i8*, i8** %asmname, align 8, !dbg !4019
  call void @set_builtin_user_assembler_name(%union.tree_node* %21, i8* %22), !dbg !4020
  br label %if.end41, !dbg !4020

if.end41:                                         ; preds = %if.then40, %if.end37
  %23 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4021
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %23, i32 0, i32 10, !dbg !4022
  %24 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !4022
  %25 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4023
  %26 = load i32, i32* %ix, align 4, !dbg !4024
  %call42 = call zeroext i8 @lto_streamer_cache_insert_at(%struct.lto_streamer_cache_d* %24, %union.tree_node* %25, i32 %26), !dbg !4025
  %27 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4026
  ret %union.tree_node* %27, !dbg !4027
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_file_decl_data_get_var_decl(%struct.lto_file_decl_data* %data, i32 %idx) #0 !dbg !4028 {
entry:
  %data.addr = alloca %struct.lto_file_decl_data*, align 8
  %idx.addr = alloca i32, align 4
  %state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %data, %struct.lto_file_decl_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %data.addr, metadata !4031, metadata !DIExpression()), !dbg !4032
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !4033, metadata !DIExpression()), !dbg !4032
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %state, metadata !4034, metadata !DIExpression()), !dbg !4032
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %data.addr, align 8, !dbg !4032
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %0, i32 0, i32 0, !dbg !4032
  %1 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !4032
  store %struct.lto_in_decl_state* %1, %struct.lto_in_decl_state** %state, align 8, !dbg !4032
  %2 = load i32, i32* %idx.addr, align 4, !dbg !4032
  %3 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !4032
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %3, i32 0, i32 0, !dbg !4032
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 3, !dbg !4032
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !4032
  %4 = load i32, i32* %size, align 8, !dbg !4032
  %cmp = icmp ult i32 %2, %4, !dbg !4032
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4032

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 1044, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4032
  br label %cond.end, !dbg !4032

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4032
  %5 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !4032
  %streams1 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %5, i32 0, i32 0, !dbg !4032
  %arrayidx2 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams1, i64 0, i64 3, !dbg !4032
  %trees = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx2, i32 0, i32 0, !dbg !4032
  %6 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !4032
  %7 = load i32, i32* %idx.addr, align 4, !dbg !4032
  %idxprom = zext i32 %7 to i64, !dbg !4032
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !4032
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !4032
  ret %union.tree_node* %8, !dbg !4032
}

declare dso_local zeroext i8 @varpool_extra_name_alias(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_tree_code_to_tag(i32 %code) #0 !dbg !4035 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4038, metadata !DIExpression()), !dbg !4039
  %0 = load i32, i32* %code.addr, align 4, !dbg !4040
  %add = add i32 %0, 1, !dbg !4041
  ret i32 %add, !dbg !4042
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_input_integer_cst(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !4043 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %result = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  %overflow_p = alloca i8, align 1
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4044, metadata !DIExpression()), !dbg !4045
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4046, metadata !DIExpression()), !dbg !4047
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !4048, metadata !DIExpression()), !dbg !4049
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4050, metadata !DIExpression()), !dbg !4051
  call void @llvm.dbg.declare(metadata i64* %low, metadata !4052, metadata !DIExpression()), !dbg !4053
  call void @llvm.dbg.declare(metadata i64* %high, metadata !4054, metadata !DIExpression()), !dbg !4055
  call void @llvm.dbg.declare(metadata i8* %overflow_p, metadata !4056, metadata !DIExpression()), !dbg !4057
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4058
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4059
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !4060
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !4061
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4062
  %call1 = call zeroext i8 @lto_input_1_unsigned(%struct.lto_input_block* %2), !dbg !4063
  %conv = zext i8 %call1 to i32, !dbg !4063
  %cmp = icmp ne i32 %conv, 0, !dbg !4064
  %conv2 = zext i1 %cmp to i32, !dbg !4064
  %conv3 = trunc i32 %conv2 to i8, !dbg !4065
  store i8 %conv3, i8* %overflow_p, align 1, !dbg !4066
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4067
  %call4 = call i64 @lto_input_uleb128(%struct.lto_input_block* %3), !dbg !4068
  store i64 %call4, i64* %low, align 8, !dbg !4069
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4070
  %call5 = call i64 @lto_input_uleb128(%struct.lto_input_block* %4), !dbg !4071
  store i64 %call5, i64* %high, align 8, !dbg !4072
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4073
  %6 = load i64, i64* %low, align 8, !dbg !4074
  %7 = load i64, i64* %high, align 8, !dbg !4075
  %call6 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %5, i64 %6, i64 %7), !dbg !4076
  store %union.tree_node* %call6, %union.tree_node** %result, align 8, !dbg !4077
  %8 = load i8, i8* %overflow_p, align 1, !dbg !4078
  %tobool = icmp ne i8 %8, 0, !dbg !4078
  br i1 %tobool, label %if.then, label %if.end, !dbg !4080

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4081
  %call7 = call %union.tree_node* @copy_node_stat(%union.tree_node* %9), !dbg !4081
  store %union.tree_node* %call7, %union.tree_node** %result, align 8, !dbg !4083
  %10 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4084
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4084
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !4084
  %bf.load = load i64, i64* %11, align 8, !dbg !4085
  %bf.clear = and i64 %bf.load, -134217729, !dbg !4085
  %bf.set = or i64 %bf.clear, 134217728, !dbg !4085
  store i64 %bf.set, i64* %11, align 8, !dbg !4085
  br label %if.end, !dbg !4086

if.end:                                           ; preds = %if.then, %entry
  %12 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4087
  ret %union.tree_node* %12, !dbg !4088
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_read_tree(%struct.lto_input_block* %ib, %struct.data_in* %data_in, i32 %tag) #0 !dbg !4089 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %tag.addr = alloca i32, align 4
  %result = alloca %union.tree_node*, align 8
  %ix = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4092, metadata !DIExpression()), !dbg !4093
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4094, metadata !DIExpression()), !dbg !4095
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !4096, metadata !DIExpression()), !dbg !4097
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !4098, metadata !DIExpression()), !dbg !4099
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !4100, metadata !DIExpression()), !dbg !4101
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4102
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4103
  %2 = load i32, i32* %tag.addr, align 4, !dbg !4104
  %call = call %union.tree_node* @lto_materialize_tree(%struct.lto_input_block* %0, %struct.data_in* %1, i32 %2, i32* %ix), !dbg !4105
  store %union.tree_node* %call, %union.tree_node** %result, align 8, !dbg !4106
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4107
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4108
  %5 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4109
  call void @lto_input_tree_pointers(%struct.lto_input_block* %3, %struct.data_in* %4, %union.tree_node* %5), !dbg !4110
  %6 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4111
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4111
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4111
  %bf.load = load i64, i64* %7, align 8, !dbg !4111
  %bf.clear = and i64 %bf.load, 65535, !dbg !4111
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4111
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !4113
  br i1 %cmp, label %if.then, label %if.end, !dbg !4114

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4115
  %call1 = call zeroext i8 @lto_stream_as_builtin_p(%union.tree_node* %8), !dbg !4115
  %tobool = icmp ne i8 %call1, 0, !dbg !4115
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4115

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2642, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4115
  br label %cond.end, !dbg !4115

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4115
  br label %if.end, !dbg !4115

if.end:                                           ; preds = %cond.end, %entry
  %9 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4116
  %base2 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4116
  %10 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4116
  %bf.load3 = load i64, i64* %10, align 8, !dbg !4116
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4116
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4116
  %cmp6 = icmp eq i32 %bf.cast5, 32, !dbg !4118
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !4119

if.then7:                                         ; preds = %if.end
  %11 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4120
  %12 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4121
  call void @lto_register_var_decl_in_symtab(%struct.data_in* %11, %union.tree_node* %12), !dbg !4122
  br label %if.end18, !dbg !4122

if.else:                                          ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4123
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4123
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !4123
  %bf.load9 = load i64, i64* %14, align 8, !dbg !4123
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !4123
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !4123
  %cmp12 = icmp eq i32 %bf.cast11, 29, !dbg !4125
  br i1 %cmp12, label %land.lhs.true, label %if.end17, !dbg !4126

land.lhs.true:                                    ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4127
  %function_decl = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !4127
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4127
  %bf.load13 = load i32, i32* %built_in_class, align 8, !dbg !4127
  %bf.lshr = lshr i32 %bf.load13, 11, !dbg !4127
  %bf.clear14 = and i32 %bf.lshr, 3, !dbg !4127
  %cmp15 = icmp ne i32 %bf.clear14, 0, !dbg !4127
  br i1 %cmp15, label %if.end17, label %if.then16, !dbg !4128

if.then16:                                        ; preds = %land.lhs.true
  %16 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4129
  %17 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4130
  call void @lto_register_function_decl_in_symtab(%struct.data_in* %16, %union.tree_node* %17), !dbg !4131
  br label %if.end17, !dbg !4131

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then7
  %18 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4132
  %call19 = call zeroext i8 @lto_input_1_unsigned(%struct.lto_input_block* %18), !dbg !4133
  %19 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4134
  ret %union.tree_node* %19, !dbg !4135
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_init_reader() #0 !dbg !4136 {
entry:
  call void @lto_streamer_init(), !dbg !4137
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.lto_stats_d* @lto_stats to i8*), i8 0, i64 1664, i1 false), !dbg !4138
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !4139
  %call = call %struct.htab* @htab_create(i64 37, i32 (i8*)* @hash_string_slot_node, i32 (i8*, i8*)* @eq_string_slot_node, void (i8*)* @free), !dbg !4140
  store %struct.htab* %call, %struct.htab** @file_name_hash_table, align 8, !dbg !4141
  call void @gimple_register_cfg_hooks(), !dbg !4142
  ret void, !dbg !4143
}

declare dso_local void @lto_streamer_init() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_string_slot_node(i8* %p) #0 !dbg !4144 {
entry:
  %p.addr = alloca i8*, align 8
  %ds = alloca %struct.string_slot*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !4145, metadata !DIExpression()), !dbg !4146
  call void @llvm.dbg.declare(metadata %struct.string_slot** %ds, metadata !4147, metadata !DIExpression()), !dbg !4148
  %0 = load i8*, i8** %p.addr, align 8, !dbg !4149
  %1 = bitcast i8* %0 to %struct.string_slot*, !dbg !4150
  store %struct.string_slot* %1, %struct.string_slot** %ds, align 8, !dbg !4148
  %2 = load %struct.string_slot*, %struct.string_slot** %ds, align 8, !dbg !4151
  %s = getelementptr inbounds %struct.string_slot, %struct.string_slot* %2, i32 0, i32 0, !dbg !4152
  %3 = load i8*, i8** %s, align 8, !dbg !4152
  %call = call i32 @htab_hash_string(i8* %3), !dbg !4153
  ret i32 %call, !dbg !4154
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_string_slot_node(i8* %p1, i8* %p2) #0 !dbg !4155 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %ds1 = alloca %struct.string_slot*, align 8
  %ds2 = alloca %struct.string_slot*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !4156, metadata !DIExpression()), !dbg !4157
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !4158, metadata !DIExpression()), !dbg !4159
  call void @llvm.dbg.declare(metadata %struct.string_slot** %ds1, metadata !4160, metadata !DIExpression()), !dbg !4161
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !4162
  %1 = bitcast i8* %0 to %struct.string_slot*, !dbg !4163
  store %struct.string_slot* %1, %struct.string_slot** %ds1, align 8, !dbg !4161
  call void @llvm.dbg.declare(metadata %struct.string_slot** %ds2, metadata !4164, metadata !DIExpression()), !dbg !4165
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !4166
  %3 = bitcast i8* %2 to %struct.string_slot*, !dbg !4167
  store %struct.string_slot* %3, %struct.string_slot** %ds2, align 8, !dbg !4165
  %4 = load %struct.string_slot*, %struct.string_slot** %ds1, align 8, !dbg !4168
  %s = getelementptr inbounds %struct.string_slot, %struct.string_slot* %4, i32 0, i32 0, !dbg !4169
  %5 = load i8*, i8** %s, align 8, !dbg !4169
  %6 = load %struct.string_slot*, %struct.string_slot** %ds2, align 8, !dbg !4170
  %s1 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %6, i32 0, i32 0, !dbg !4171
  %7 = load i8*, i8** %s1, align 8, !dbg !4171
  %call = call i32 @strcmp(i8* %5, i8* %7), !dbg !4172
  %cmp = icmp eq i32 %call, 0, !dbg !4173
  %conv = zext i1 %cmp to i32, !dbg !4173
  ret i32 %conv, !dbg !4174
}

declare dso_local void @free(i8*) #2

declare dso_local void @gimple_register_cfg_hooks() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.data_in* @lto_data_in_create(%struct.lto_file_decl_data* %file_data, i8* %strings, i32 %len, %struct.VEC_ld_plugin_symbol_resolution_t_heap* %resolutions) #0 !dbg !4175 {
entry:
  %file_data.addr = alloca %struct.lto_file_decl_data*, align 8
  %strings.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %resolutions.addr = alloca %struct.VEC_ld_plugin_symbol_resolution_t_heap*, align 8
  %data_in = alloca %struct.data_in*, align 8
  store %struct.lto_file_decl_data* %file_data, %struct.lto_file_decl_data** %file_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %file_data.addr, metadata !4178, metadata !DIExpression()), !dbg !4179
  store i8* %strings, i8** %strings.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %strings.addr, metadata !4180, metadata !DIExpression()), !dbg !4181
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !4182, metadata !DIExpression()), !dbg !4183
  store %struct.VEC_ld_plugin_symbol_resolution_t_heap* %resolutions, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %resolutions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ld_plugin_symbol_resolution_t_heap** %resolutions.addr, metadata !4184, metadata !DIExpression()), !dbg !4185
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in, metadata !4186, metadata !DIExpression()), !dbg !4187
  %call = call i8* @xcalloc(i64 1, i64 72), !dbg !4188
  %0 = bitcast i8* %call to %struct.data_in*, !dbg !4188
  store %struct.data_in* %0, %struct.data_in** %data_in, align 8, !dbg !4187
  %1 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data.addr, align 8, !dbg !4189
  %2 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !4190
  %file_data1 = getelementptr inbounds %struct.data_in, %struct.data_in* %2, i32 0, i32 0, !dbg !4191
  store %struct.lto_file_decl_data* %1, %struct.lto_file_decl_data** %file_data1, align 8, !dbg !4192
  %3 = load i8*, i8** %strings.addr, align 8, !dbg !4193
  %4 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !4194
  %strings2 = getelementptr inbounds %struct.data_in, %struct.data_in* %4, i32 0, i32 2, !dbg !4195
  store i8* %3, i8** %strings2, align 8, !dbg !4196
  %5 = load i32, i32* %len.addr, align 4, !dbg !4197
  %6 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !4198
  %strings_len = getelementptr inbounds %struct.data_in, %struct.data_in* %6, i32 0, i32 3, !dbg !4199
  store i32 %5, i32* %strings_len, align 8, !dbg !4200
  %7 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %resolutions.addr, align 8, !dbg !4201
  %8 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !4202
  %globals_resolution = getelementptr inbounds %struct.data_in, %struct.data_in* %8, i32 0, i32 9, !dbg !4203
  store %struct.VEC_ld_plugin_symbol_resolution_t_heap* %7, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution, align 8, !dbg !4204
  %call3 = call %struct.lto_streamer_cache_d* @lto_streamer_cache_create(), !dbg !4205
  %9 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !4206
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %9, i32 0, i32 10, !dbg !4207
  store %struct.lto_streamer_cache_d* %call3, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !4208
  %10 = load %struct.data_in*, %struct.data_in** %data_in, align 8, !dbg !4209
  ret %struct.data_in* %10, !dbg !4210
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.lto_streamer_cache_d* @lto_streamer_cache_create() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @lto_data_in_delete(%struct.data_in* %data_in) #0 !dbg !4211 {
entry:
  %data_in.addr = alloca %struct.data_in*, align 8
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4214, metadata !DIExpression()), !dbg !4215
  %0 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4216
  %globals_resolution = getelementptr inbounds %struct.data_in, %struct.data_in* %0, i32 0, i32 9, !dbg !4216
  call void @VEC_ld_plugin_symbol_resolution_t_heap_free(%struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution), !dbg !4216
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4217
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %1, i32 0, i32 10, !dbg !4218
  %2 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !4218
  call void @lto_streamer_cache_delete(%struct.lto_streamer_cache_d* %2), !dbg !4219
  %3 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4220
  %labels = getelementptr inbounds %struct.data_in, %struct.data_in* %3, i32 0, i32 1, !dbg !4221
  %4 = load %union.tree_node**, %union.tree_node*** %labels, align 8, !dbg !4221
  %5 = bitcast %union.tree_node** %4 to i8*, !dbg !4220
  call void @free(i8* %5), !dbg !4222
  %6 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4223
  %7 = bitcast %struct.data_in* %6 to i8*, !dbg !4223
  call void @free(i8* %7), !dbg !4224
  ret void, !dbg !4225
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ld_plugin_symbol_resolution_t_heap_free(%struct.VEC_ld_plugin_symbol_resolution_t_heap** %vec_) #0 !dbg !4226 {
entry:
  %vec_.addr = alloca %struct.VEC_ld_plugin_symbol_resolution_t_heap**, align 8
  store %struct.VEC_ld_plugin_symbol_resolution_t_heap** %vec_, %struct.VEC_ld_plugin_symbol_resolution_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ld_plugin_symbol_resolution_t_heap*** %vec_.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  %0 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap**, %struct.VEC_ld_plugin_symbol_resolution_t_heap*** %vec_.addr, align 8, !dbg !4232
  %1 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %0, align 8, !dbg !4232
  %tobool = icmp ne %struct.VEC_ld_plugin_symbol_resolution_t_heap* %1, null, !dbg !4232
  br i1 %tobool, label %if.then, label %if.end, !dbg !4231

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap**, %struct.VEC_ld_plugin_symbol_resolution_t_heap*** %vec_.addr, align 8, !dbg !4232
  %3 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %2, align 8, !dbg !4232
  %4 = bitcast %struct.VEC_ld_plugin_symbol_resolution_t_heap* %3 to i8*, !dbg !4232
  call void @free(i8* %4), !dbg !4232
  br label %if.end, !dbg !4232

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap**, %struct.VEC_ld_plugin_symbol_resolution_t_heap*** %vec_.addr, align 8, !dbg !4231
  store %struct.VEC_ld_plugin_symbol_resolution_t_heap* null, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %5, align 8, !dbg !4231
  ret void, !dbg !4231
}

declare dso_local void @lto_streamer_cache_delete(%struct.lto_streamer_cache_d*) #2

declare dso_local void @lto_check_version(i32, i32) #2

declare dso_local void @push_cfun(%struct.function*) #2

declare dso_local void @init_tree_ssa(%struct.function*) #2

declare dso_local %struct.lto_in_decl_state* @lto_get_function_in_decl_state(%struct.lto_file_decl_data*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @input_cfg(%struct.lto_input_block* %ib, %struct.function* %fn) #0 !dbg !4234 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %bb_count = alloca i32, align 4
  %p_bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %edge_count = alloca i32, align 4
  %dest_index = alloca i32, align 4
  %edge_flags = alloca i32, align 4
  %dest = alloca %struct.basic_block_def*, align 8
  %probability = alloca i32, align 4
  %count = alloca i64, align 8
  %e = alloca %struct.edge_def*, align 8
  %bb86 = alloca %struct.basic_block_def*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4237, metadata !DIExpression()), !dbg !4238
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !4239, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.declare(metadata i32* %bb_count, metadata !4241, metadata !DIExpression()), !dbg !4242
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %p_bb, metadata !4243, metadata !DIExpression()), !dbg !4244
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4245, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.declare(metadata i32* %index, metadata !4247, metadata !DIExpression()), !dbg !4248
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4249
  call void @init_empty_tree_cfg_for_function(%struct.function* %0), !dbg !4250
  call void @init_ssa_operands(), !dbg !4251
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4252
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %1), !dbg !4253
  %conv = trunc i64 %call to i32, !dbg !4254
  %2 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4255
  %cfg = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1, !dbg !4255
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4255
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 7, !dbg !4255
  store i32 %conv, i32* %x_profile_status, align 8, !dbg !4256
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4257
  %call1 = call i64 @lto_input_uleb128(%struct.lto_input_block* %4), !dbg !4258
  %conv2 = trunc i64 %call1 to i32, !dbg !4258
  store i32 %conv2, i32* %bb_count, align 4, !dbg !4259
  %5 = load i32, i32* %bb_count, align 4, !dbg !4260
  %6 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4261
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1, !dbg !4261
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4261
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 5, !dbg !4261
  store i32 %5, i32* %x_last_basic_block, align 8, !dbg !4262
  %8 = load i32, i32* %bb_count, align 4, !dbg !4263
  %9 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4265
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 1, !dbg !4265
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !4265
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 2, !dbg !4265
  %11 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4265
  %tobool = icmp ne %struct.VEC_basic_block_gc* %11, null, !dbg !4265
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4265

cond.true:                                        ; preds = %entry
  %12 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4265
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 1, !dbg !4265
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !4265
  %x_basic_block_info6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 2, !dbg !4265
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info6, align 8, !dbg !4265
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i32 0, i32 0, !dbg !4265
  br label %cond.end, !dbg !4265

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4265
  %call7 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !4265
  %cmp = icmp ugt i32 %8, %call7, !dbg !4266
  br i1 %cmp, label %if.then, label %if.end, !dbg !4267

if.then:                                          ; preds = %cond.end
  %15 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4268
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1, !dbg !4268
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !4268
  %x_basic_block_info10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 2, !dbg !4268
  %17 = load i32, i32* %bb_count, align 4, !dbg !4268
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_basic_block_info10, i32 %17), !dbg !4268
  br label %if.end, !dbg !4268

if.end:                                           ; preds = %if.then, %cond.end
  %18 = load i32, i32* %bb_count, align 4, !dbg !4269
  %19 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4271
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 1, !dbg !4271
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !4271
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 6, !dbg !4271
  %21 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !4271
  %tobool12 = icmp ne %struct.VEC_basic_block_gc* %21, null, !dbg !4271
  br i1 %tobool12, label %cond.true13, label %cond.false17, !dbg !4271

cond.true13:                                      ; preds = %if.end
  %22 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4271
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 1, !dbg !4271
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !4271
  %x_label_to_block_map15 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 6, !dbg !4271
  %24 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map15, align 8, !dbg !4271
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %24, i32 0, i32 0, !dbg !4271
  br label %cond.end18, !dbg !4271

cond.false17:                                     ; preds = %if.end
  br label %cond.end18, !dbg !4271

cond.end18:                                       ; preds = %cond.false17, %cond.true13
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true13 ], [ null, %cond.false17 ], !dbg !4271
  %call20 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond19), !dbg !4271
  %cmp21 = icmp ugt i32 %18, %call20, !dbg !4272
  br i1 %cmp21, label %if.then23, label %if.end26, !dbg !4273

if.then23:                                        ; preds = %cond.end18
  %25 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4274
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 1, !dbg !4274
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !4274
  %x_label_to_block_map25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i32 0, i32 6, !dbg !4274
  %27 = load i32, i32* %bb_count, align 4, !dbg !4274
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_label_to_block_map25, i32 %27), !dbg !4274
  br label %if.end26, !dbg !4274

if.end26:                                         ; preds = %if.then23, %cond.end18
  %28 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4275
  %call27 = call i64 @lto_input_sleb128(%struct.lto_input_block* %28), !dbg !4276
  %conv28 = trunc i64 %call27 to i32, !dbg !4276
  store i32 %conv28, i32* %index, align 4, !dbg !4277
  br label %while.cond, !dbg !4278

while.cond:                                       ; preds = %for.end, %if.end26
  %29 = load i32, i32* %index, align 4, !dbg !4279
  %cmp29 = icmp ne i32 %29, -1, !dbg !4280
  br i1 %cmp29, label %while.body, label %while.end, !dbg !4278

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4281, metadata !DIExpression()), !dbg !4283
  %30 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4284
  %cfg31 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 1, !dbg !4284
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg31, align 8, !dbg !4284
  %x_basic_block_info32 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 2, !dbg !4284
  %32 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info32, align 8, !dbg !4284
  %tobool33 = icmp ne %struct.VEC_basic_block_gc* %32, null, !dbg !4284
  br i1 %tobool33, label %cond.true34, label %cond.false38, !dbg !4284

cond.true34:                                      ; preds = %while.body
  %33 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4284
  %cfg35 = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 1, !dbg !4284
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg35, align 8, !dbg !4284
  %x_basic_block_info36 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i32 0, i32 2, !dbg !4284
  %35 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info36, align 8, !dbg !4284
  %base37 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %35, i32 0, i32 0, !dbg !4284
  br label %cond.end39, !dbg !4284

cond.false38:                                     ; preds = %while.body
  br label %cond.end39, !dbg !4284

cond.end39:                                       ; preds = %cond.false38, %cond.true34
  %cond40 = phi %struct.VEC_basic_block_base* [ %base37, %cond.true34 ], [ null, %cond.false38 ], !dbg !4284
  %36 = load i32, i32* %index, align 4, !dbg !4284
  %call41 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond40, i32 %36), !dbg !4284
  store %struct.basic_block_def* %call41, %struct.basic_block_def** %bb, align 8, !dbg !4283
  call void @llvm.dbg.declare(metadata i32* %edge_count, metadata !4285, metadata !DIExpression()), !dbg !4286
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4287
  %cmp42 = icmp eq %struct.basic_block_def* %37, null, !dbg !4289
  br i1 %cmp42, label %if.then44, label %if.end46, !dbg !4290

if.then44:                                        ; preds = %cond.end39
  %38 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4291
  %39 = load i32, i32* %index, align 4, !dbg !4292
  %call45 = call %struct.basic_block_def* @make_new_block(%struct.function* %38, i32 %39), !dbg !4293
  store %struct.basic_block_def* %call45, %struct.basic_block_def** %bb, align 8, !dbg !4294
  br label %if.end46, !dbg !4295

if.end46:                                         ; preds = %if.then44, %cond.end39
  %40 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4296
  %call47 = call i64 @lto_input_uleb128(%struct.lto_input_block* %40), !dbg !4297
  %conv48 = trunc i64 %call47 to i32, !dbg !4297
  store i32 %conv48, i32* %edge_count, align 4, !dbg !4298
  store i32 0, i32* %i, align 4, !dbg !4299
  br label %for.cond, !dbg !4301

for.cond:                                         ; preds = %for.inc, %if.end46
  %41 = load i32, i32* %i, align 4, !dbg !4302
  %42 = load i32, i32* %edge_count, align 4, !dbg !4304
  %cmp49 = icmp ult i32 %41, %42, !dbg !4305
  br i1 %cmp49, label %for.body, label %for.end, !dbg !4306

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %dest_index, metadata !4307, metadata !DIExpression()), !dbg !4309
  call void @llvm.dbg.declare(metadata i32* %edge_flags, metadata !4310, metadata !DIExpression()), !dbg !4311
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !4312, metadata !DIExpression()), !dbg !4313
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !4314, metadata !DIExpression()), !dbg !4315
  call void @llvm.dbg.declare(metadata i64* %count, metadata !4316, metadata !DIExpression()), !dbg !4317
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4318, metadata !DIExpression()), !dbg !4319
  %43 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4320
  %call51 = call i64 @lto_input_uleb128(%struct.lto_input_block* %43), !dbg !4321
  %conv52 = trunc i64 %call51 to i32, !dbg !4321
  store i32 %conv52, i32* %dest_index, align 4, !dbg !4322
  %44 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4323
  %call53 = call i64 @lto_input_sleb128(%struct.lto_input_block* %44), !dbg !4324
  %conv54 = trunc i64 %call53 to i32, !dbg !4325
  store i32 %conv54, i32* %probability, align 4, !dbg !4326
  %45 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4327
  %call55 = call i64 @lto_input_sleb128(%struct.lto_input_block* %45), !dbg !4328
  store i64 %call55, i64* %count, align 8, !dbg !4329
  %46 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4330
  %call56 = call i64 @lto_input_uleb128(%struct.lto_input_block* %46), !dbg !4331
  %conv57 = trunc i64 %call56 to i32, !dbg !4331
  store i32 %conv57, i32* %edge_flags, align 4, !dbg !4332
  %47 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4333
  %cfg58 = getelementptr inbounds %struct.function, %struct.function* %47, i32 0, i32 1, !dbg !4333
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg58, align 8, !dbg !4333
  %x_basic_block_info59 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 2, !dbg !4333
  %49 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info59, align 8, !dbg !4333
  %tobool60 = icmp ne %struct.VEC_basic_block_gc* %49, null, !dbg !4333
  br i1 %tobool60, label %cond.true61, label %cond.false65, !dbg !4333

cond.true61:                                      ; preds = %for.body
  %50 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4333
  %cfg62 = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 1, !dbg !4333
  %51 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg62, align 8, !dbg !4333
  %x_basic_block_info63 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %51, i32 0, i32 2, !dbg !4333
  %52 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info63, align 8, !dbg !4333
  %base64 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %52, i32 0, i32 0, !dbg !4333
  br label %cond.end66, !dbg !4333

cond.false65:                                     ; preds = %for.body
  br label %cond.end66, !dbg !4333

cond.end66:                                       ; preds = %cond.false65, %cond.true61
  %cond67 = phi %struct.VEC_basic_block_base* [ %base64, %cond.true61 ], [ null, %cond.false65 ], !dbg !4333
  %53 = load i32, i32* %dest_index, align 4, !dbg !4333
  %call68 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond67, i32 %53), !dbg !4333
  store %struct.basic_block_def* %call68, %struct.basic_block_def** %dest, align 8, !dbg !4334
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4335
  %cmp69 = icmp eq %struct.basic_block_def* %54, null, !dbg !4337
  br i1 %cmp69, label %if.then71, label %if.end73, !dbg !4338

if.then71:                                        ; preds = %cond.end66
  %55 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4339
  %56 = load i32, i32* %dest_index, align 4, !dbg !4340
  %call72 = call %struct.basic_block_def* @make_new_block(%struct.function* %55, i32 %56), !dbg !4341
  store %struct.basic_block_def* %call72, %struct.basic_block_def** %dest, align 8, !dbg !4342
  br label %if.end73, !dbg !4343

if.end73:                                         ; preds = %if.then71, %cond.end66
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4344
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4345
  %59 = load i32, i32* %edge_flags, align 4, !dbg !4346
  %call74 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %57, %struct.basic_block_def* %58, i32 %59), !dbg !4347
  store %struct.edge_def* %call74, %struct.edge_def** %e, align 8, !dbg !4348
  %60 = load i32, i32* %probability, align 4, !dbg !4349
  %61 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4350
  %probability75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 8, !dbg !4351
  store i32 %60, i32* %probability75, align 4, !dbg !4352
  %62 = load i64, i64* %count, align 8, !dbg !4353
  %63 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4354
  %count76 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 9, !dbg !4355
  store i64 %62, i64* %count76, align 8, !dbg !4356
  br label %for.inc, !dbg !4357

for.inc:                                          ; preds = %if.end73
  %64 = load i32, i32* %i, align 4, !dbg !4358
  %inc = add i32 %64, 1, !dbg !4358
  store i32 %inc, i32* %i, align 4, !dbg !4358
  br label %for.cond, !dbg !4359, !llvm.loop !4360

for.end:                                          ; preds = %for.cond
  %65 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4362
  %call77 = call i64 @lto_input_sleb128(%struct.lto_input_block* %65), !dbg !4363
  %conv78 = trunc i64 %call77 to i32, !dbg !4363
  store i32 %conv78, i32* %index, align 4, !dbg !4364
  br label %while.cond, !dbg !4278, !llvm.loop !4365

while.end:                                        ; preds = %while.cond
  %66 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4367
  %cfg79 = getelementptr inbounds %struct.function, %struct.function* %66, i32 0, i32 1, !dbg !4367
  %67 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg79, align 8, !dbg !4367
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %67, i32 0, i32 0, !dbg !4367
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4367
  store %struct.basic_block_def* %68, %struct.basic_block_def** %p_bb, align 8, !dbg !4368
  %69 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4369
  %call80 = call i64 @lto_input_sleb128(%struct.lto_input_block* %69), !dbg !4370
  %conv81 = trunc i64 %call80 to i32, !dbg !4370
  store i32 %conv81, i32* %index, align 4, !dbg !4371
  br label %while.cond82, !dbg !4372

while.cond82:                                     ; preds = %cond.end95, %while.end
  %70 = load i32, i32* %index, align 4, !dbg !4373
  %cmp83 = icmp ne i32 %70, -1, !dbg !4374
  br i1 %cmp83, label %while.body85, label %while.end100, !dbg !4372

while.body85:                                     ; preds = %while.cond82
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb86, metadata !4375, metadata !DIExpression()), !dbg !4377
  %71 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4378
  %cfg87 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 1, !dbg !4378
  %72 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg87, align 8, !dbg !4378
  %x_basic_block_info88 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %72, i32 0, i32 2, !dbg !4378
  %73 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info88, align 8, !dbg !4378
  %tobool89 = icmp ne %struct.VEC_basic_block_gc* %73, null, !dbg !4378
  br i1 %tobool89, label %cond.true90, label %cond.false94, !dbg !4378

cond.true90:                                      ; preds = %while.body85
  %74 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4378
  %cfg91 = getelementptr inbounds %struct.function, %struct.function* %74, i32 0, i32 1, !dbg !4378
  %75 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg91, align 8, !dbg !4378
  %x_basic_block_info92 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %75, i32 0, i32 2, !dbg !4378
  %76 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info92, align 8, !dbg !4378
  %base93 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %76, i32 0, i32 0, !dbg !4378
  br label %cond.end95, !dbg !4378

cond.false94:                                     ; preds = %while.body85
  br label %cond.end95, !dbg !4378

cond.end95:                                       ; preds = %cond.false94, %cond.true90
  %cond96 = phi %struct.VEC_basic_block_base* [ %base93, %cond.true90 ], [ null, %cond.false94 ], !dbg !4378
  %77 = load i32, i32* %index, align 4, !dbg !4378
  %call97 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond96, i32 %77), !dbg !4378
  store %struct.basic_block_def* %call97, %struct.basic_block_def** %bb86, align 8, !dbg !4377
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %p_bb, align 8, !dbg !4379
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb86, align 8, !dbg !4380
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 5, !dbg !4381
  store %struct.basic_block_def* %78, %struct.basic_block_def** %prev_bb, align 8, !dbg !4382
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %bb86, align 8, !dbg !4383
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %p_bb, align 8, !dbg !4384
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 6, !dbg !4385
  store %struct.basic_block_def* %80, %struct.basic_block_def** %next_bb, align 8, !dbg !4386
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %bb86, align 8, !dbg !4387
  store %struct.basic_block_def* %82, %struct.basic_block_def** %p_bb, align 8, !dbg !4388
  %83 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4389
  %call98 = call i64 @lto_input_sleb128(%struct.lto_input_block* %83), !dbg !4390
  %conv99 = trunc i64 %call98 to i32, !dbg !4390
  store i32 %conv99, i32* %index, align 4, !dbg !4391
  br label %while.cond82, !dbg !4372, !llvm.loop !4392

while.end100:                                     ; preds = %while.cond82
  ret void, !dbg !4394
}

; Function Attrs: noinline nounwind uwtable
define internal void @input_function(%union.tree_node* %fn_decl, %struct.data_in* %data_in, %struct.lto_input_block* %ib) #0 !dbg !4395 {
entry:
  %fn_decl.addr = alloca %union.tree_node*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %fn = alloca %struct.function*, align 8
  %tag = alloca i32, align 4
  %stmts = alloca %union.gimple_statement_d**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bp = alloca %struct.bitpack_d*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %args = alloca %union.tree_node*, align 8
  %narg = alloca %union.tree_node*, align 8
  %oarg = alloca %union.tree_node*, align 8
  %ix = alloca i32, align 4
  %res = alloca i8, align 1
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  store %union.tree_node* %fn_decl, %union.tree_node** %fn_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn_decl.addr, metadata !4398, metadata !DIExpression()), !dbg !4399
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4400, metadata !DIExpression()), !dbg !4401
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4402, metadata !DIExpression()), !dbg !4403
  call void @llvm.dbg.declare(metadata %struct.function** %fn, metadata !4404, metadata !DIExpression()), !dbg !4405
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !4406, metadata !DIExpression()), !dbg !4407
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmts, metadata !4408, metadata !DIExpression()), !dbg !4409
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4410, metadata !DIExpression()), !dbg !4411
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !4412, metadata !DIExpression()), !dbg !4413
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4414, metadata !DIExpression()), !dbg !4415
  call void @llvm.dbg.declare(metadata %union.tree_node** %args, metadata !4416, metadata !DIExpression()), !dbg !4417
  call void @llvm.dbg.declare(metadata %union.tree_node** %narg, metadata !4418, metadata !DIExpression()), !dbg !4419
  call void @llvm.dbg.declare(metadata %union.tree_node** %oarg, metadata !4420, metadata !DIExpression()), !dbg !4421
  %0 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4422
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !4422
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4422
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !4422
  store %struct.function* %1, %struct.function** %fn, align 8, !dbg !4423
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4424
  %call = call i32 @input_record_start(%struct.lto_input_block* %2), !dbg !4425
  store i32 %call, i32* %tag, align 4, !dbg !4426
  %3 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4427
  call void @clear_line_info(%struct.data_in* %3), !dbg !4428
  call void @gimple_register_cfg_hooks(), !dbg !4429
  %4 = load i32, i32* %tag, align 4, !dbg !4430
  call void @lto_tag_check(i32 %4, i32 228), !dbg !4431
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4432
  %call1 = call %struct.bitpack_d* @lto_input_bitpack(%struct.lto_input_block* %5), !dbg !4433
  store %struct.bitpack_d* %call1, %struct.bitpack_d** %bp, align 8, !dbg !4434
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4435
  %call2 = call i64 @bp_unpack_value(%struct.bitpack_d* %6, i32 1), !dbg !4436
  %conv = trunc i64 %call2 to i32, !dbg !4436
  %7 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4437
  %is_thunk = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 20, !dbg !4438
  %bf.load = load i32, i32* %is_thunk, align 8, !dbg !4439
  %bf.value = and i32 %conv, 1, !dbg !4439
  %bf.shl = shl i32 %bf.value, 30, !dbg !4439
  %bf.clear = and i32 %bf.load, -1073741825, !dbg !4439
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !4439
  store i32 %bf.set, i32* %is_thunk, align 8, !dbg !4439
  %8 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4440
  %call3 = call i64 @bp_unpack_value(%struct.bitpack_d* %8, i32 1), !dbg !4441
  %conv4 = trunc i64 %call3 to i32, !dbg !4441
  %9 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4442
  %has_local_explicit_reg_vars = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 20, !dbg !4443
  %bf.load5 = load i32, i32* %has_local_explicit_reg_vars, align 8, !dbg !4444
  %bf.value6 = and i32 %conv4, 1, !dbg !4444
  %bf.shl7 = shl i32 %bf.value6, 29, !dbg !4444
  %bf.clear8 = and i32 %bf.load5, -536870913, !dbg !4444
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !4444
  store i32 %bf.set9, i32* %has_local_explicit_reg_vars, align 8, !dbg !4444
  %10 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4445
  %call10 = call i64 @bp_unpack_value(%struct.bitpack_d* %10, i32 1), !dbg !4446
  %conv11 = trunc i64 %call10 to i32, !dbg !4446
  %11 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4447
  %after_tree_profile = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 20, !dbg !4448
  %bf.load12 = load i32, i32* %after_tree_profile, align 8, !dbg !4449
  %bf.value13 = and i32 %conv11, 1, !dbg !4449
  %bf.shl14 = shl i32 %bf.value13, 28, !dbg !4449
  %bf.clear15 = and i32 %bf.load12, -268435457, !dbg !4449
  %bf.set16 = or i32 %bf.clear15, %bf.shl14, !dbg !4449
  store i32 %bf.set16, i32* %after_tree_profile, align 8, !dbg !4449
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4450
  %call17 = call i64 @bp_unpack_value(%struct.bitpack_d* %12, i32 1), !dbg !4451
  %conv18 = trunc i64 %call17 to i32, !dbg !4451
  %13 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4452
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 20, !dbg !4453
  %bf.load19 = load i32, i32* %returns_pcc_struct, align 8, !dbg !4454
  %bf.value20 = and i32 %conv18, 1, !dbg !4454
  %bf.shl21 = shl i32 %bf.value20, 27, !dbg !4454
  %bf.clear22 = and i32 %bf.load19, -134217729, !dbg !4454
  %bf.set23 = or i32 %bf.clear22, %bf.shl21, !dbg !4454
  store i32 %bf.set23, i32* %returns_pcc_struct, align 8, !dbg !4454
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4455
  %call24 = call i64 @bp_unpack_value(%struct.bitpack_d* %14, i32 1), !dbg !4456
  %conv25 = trunc i64 %call24 to i32, !dbg !4456
  %15 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4457
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 20, !dbg !4458
  %bf.load26 = load i32, i32* %returns_struct, align 8, !dbg !4459
  %bf.value27 = and i32 %conv25, 1, !dbg !4459
  %bf.shl28 = shl i32 %bf.value27, 26, !dbg !4459
  %bf.clear29 = and i32 %bf.load26, -67108865, !dbg !4459
  %bf.set30 = or i32 %bf.clear29, %bf.shl28, !dbg !4459
  store i32 %bf.set30, i32* %returns_struct, align 8, !dbg !4459
  %16 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4460
  %call31 = call i64 @bp_unpack_value(%struct.bitpack_d* %16, i32 1), !dbg !4461
  %conv32 = trunc i64 %call31 to i32, !dbg !4461
  %17 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4462
  %always_inline_functions_inlined = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 20, !dbg !4463
  %bf.load33 = load i32, i32* %always_inline_functions_inlined, align 8, !dbg !4464
  %bf.value34 = and i32 %conv32, 1, !dbg !4464
  %bf.shl35 = shl i32 %bf.value34, 25, !dbg !4464
  %bf.clear36 = and i32 %bf.load33, -33554433, !dbg !4464
  %bf.set37 = or i32 %bf.clear36, %bf.shl35, !dbg !4464
  store i32 %bf.set37, i32* %always_inline_functions_inlined, align 8, !dbg !4464
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4465
  %call38 = call i64 @bp_unpack_value(%struct.bitpack_d* %18, i32 1), !dbg !4466
  %conv39 = trunc i64 %call38 to i32, !dbg !4466
  %19 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4467
  %after_inlining = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 20, !dbg !4468
  %bf.load40 = load i32, i32* %after_inlining, align 8, !dbg !4469
  %bf.value41 = and i32 %conv39, 1, !dbg !4469
  %bf.shl42 = shl i32 %bf.value41, 24, !dbg !4469
  %bf.clear43 = and i32 %bf.load40, -16777217, !dbg !4469
  %bf.set44 = or i32 %bf.clear43, %bf.shl42, !dbg !4469
  store i32 %bf.set44, i32* %after_inlining, align 8, !dbg !4469
  %20 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4470
  %call45 = call i64 @bp_unpack_value(%struct.bitpack_d* %20, i32 1), !dbg !4471
  %conv46 = trunc i64 %call45 to i32, !dbg !4471
  %21 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4472
  %dont_save_pending_sizes_p = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 20, !dbg !4473
  %bf.load47 = load i32, i32* %dont_save_pending_sizes_p, align 8, !dbg !4474
  %bf.value48 = and i32 %conv46, 1, !dbg !4474
  %bf.shl49 = shl i32 %bf.value48, 23, !dbg !4474
  %bf.clear50 = and i32 %bf.load47, -8388609, !dbg !4474
  %bf.set51 = or i32 %bf.clear50, %bf.shl49, !dbg !4474
  store i32 %bf.set51, i32* %dont_save_pending_sizes_p, align 8, !dbg !4474
  %22 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4475
  %call52 = call i64 @bp_unpack_value(%struct.bitpack_d* %22, i32 1), !dbg !4476
  %conv53 = trunc i64 %call52 to i32, !dbg !4476
  %23 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4477
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 20, !dbg !4478
  %bf.load54 = load i32, i32* %stdarg, align 8, !dbg !4479
  %bf.value55 = and i32 %conv53, 1, !dbg !4479
  %bf.shl56 = shl i32 %bf.value55, 22, !dbg !4479
  %bf.clear57 = and i32 %bf.load54, -4194305, !dbg !4479
  %bf.set58 = or i32 %bf.clear57, %bf.shl56, !dbg !4479
  store i32 %bf.set58, i32* %stdarg, align 8, !dbg !4479
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4480
  %call59 = call i64 @bp_unpack_value(%struct.bitpack_d* %24, i32 1), !dbg !4481
  %conv60 = trunc i64 %call59 to i32, !dbg !4481
  %25 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4482
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 20, !dbg !4483
  %bf.load61 = load i32, i32* %has_nonlocal_label, align 8, !dbg !4484
  %bf.value62 = and i32 %conv60, 1, !dbg !4484
  %bf.shl63 = shl i32 %bf.value62, 20, !dbg !4484
  %bf.clear64 = and i32 %bf.load61, -1048577, !dbg !4484
  %bf.set65 = or i32 %bf.clear64, %bf.shl63, !dbg !4484
  store i32 %bf.set65, i32* %has_nonlocal_label, align 8, !dbg !4484
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4485
  %call66 = call i64 @bp_unpack_value(%struct.bitpack_d* %26, i32 1), !dbg !4486
  %conv67 = trunc i64 %call66 to i32, !dbg !4486
  %27 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4487
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 20, !dbg !4488
  %bf.load68 = load i32, i32* %calls_alloca, align 8, !dbg !4489
  %bf.value69 = and i32 %conv67, 1, !dbg !4489
  %bf.shl70 = shl i32 %bf.value69, 19, !dbg !4489
  %bf.clear71 = and i32 %bf.load68, -524289, !dbg !4489
  %bf.set72 = or i32 %bf.clear71, %bf.shl70, !dbg !4489
  store i32 %bf.set72, i32* %calls_alloca, align 8, !dbg !4489
  %28 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4490
  %call73 = call i64 @bp_unpack_value(%struct.bitpack_d* %28, i32 1), !dbg !4491
  %conv74 = trunc i64 %call73 to i32, !dbg !4491
  %29 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4492
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %29, i32 0, i32 20, !dbg !4493
  %bf.load75 = load i32, i32* %calls_setjmp, align 8, !dbg !4494
  %bf.value76 = and i32 %conv74, 1, !dbg !4494
  %bf.shl77 = shl i32 %bf.value76, 18, !dbg !4494
  %bf.clear78 = and i32 %bf.load75, -262145, !dbg !4494
  %bf.set79 = or i32 %bf.clear78, %bf.shl77, !dbg !4494
  store i32 %bf.set79, i32* %calls_setjmp, align 8, !dbg !4494
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4495
  %call80 = call i64 @bp_unpack_value(%struct.bitpack_d* %30, i32 2), !dbg !4496
  %conv81 = trunc i64 %call80 to i32, !dbg !4497
  %31 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4498
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 20, !dbg !4499
  %bf.load82 = load i32, i32* %function_frequency, align 8, !dbg !4500
  %bf.value83 = and i32 %conv81, 3, !dbg !4500
  %bf.shl84 = shl i32 %bf.value83, 16, !dbg !4500
  %bf.clear85 = and i32 %bf.load82, -196609, !dbg !4500
  %bf.set86 = or i32 %bf.clear85, %bf.shl84, !dbg !4500
  store i32 %bf.set86, i32* %function_frequency, align 8, !dbg !4500
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4501
  %call87 = call i64 @bp_unpack_value(%struct.bitpack_d* %32, i32 8), !dbg !4502
  %conv88 = trunc i64 %call87 to i32, !dbg !4502
  %33 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4503
  %va_list_fpr_size = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 20, !dbg !4504
  %bf.load89 = load i32, i32* %va_list_fpr_size, align 8, !dbg !4505
  %bf.value90 = and i32 %conv88, 255, !dbg !4505
  %bf.shl91 = shl i32 %bf.value90, 8, !dbg !4505
  %bf.clear92 = and i32 %bf.load89, -65281, !dbg !4505
  %bf.set93 = or i32 %bf.clear92, %bf.shl91, !dbg !4505
  store i32 %bf.set93, i32* %va_list_fpr_size, align 8, !dbg !4505
  %34 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4506
  %call94 = call i64 @bp_unpack_value(%struct.bitpack_d* %34, i32 8), !dbg !4507
  %conv95 = trunc i64 %call94 to i32, !dbg !4507
  %35 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4508
  %va_list_gpr_size = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 20, !dbg !4509
  %bf.load96 = load i32, i32* %va_list_gpr_size, align 8, !dbg !4510
  %bf.value97 = and i32 %conv95, 255, !dbg !4510
  %bf.clear98 = and i32 %bf.load96, -256, !dbg !4510
  %bf.set99 = or i32 %bf.clear98, %bf.value97, !dbg !4510
  store i32 %bf.set99, i32* %va_list_gpr_size, align 8, !dbg !4510
  %36 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !4511
  call void @bitpack_delete(%struct.bitpack_d* %36), !dbg !4512
  %37 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4513
  %call100 = call i64 @lto_input_uleb128(%struct.lto_input_block* %37), !dbg !4514
  %conv101 = trunc i64 %call100 to i32, !dbg !4514
  %38 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4515
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 17, !dbg !4516
  store i32 %conv101, i32* %curr_properties, align 8, !dbg !4517
  %39 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4518
  %40 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4519
  %call102 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %39, %struct.data_in* %40), !dbg !4520
  %41 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4521
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %41, i32 0, i32 7, !dbg !4522
  store %union.tree_node* %call102, %union.tree_node** %static_chain_decl, align 8, !dbg !4523
  %42 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4524
  %43 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4525
  %call103 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %42, %struct.data_in* %43), !dbg !4526
  %44 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4527
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 8, !dbg !4528
  store %union.tree_node* %call103, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !4529
  %45 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4530
  %46 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4531
  %call104 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %45, %struct.data_in* %46), !dbg !4532
  %47 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4533
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %47, i32 0, i32 9, !dbg !4534
  store %union.tree_node* %call104, %union.tree_node** %local_decls, align 8, !dbg !4535
  %48 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4536
  %49 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4537
  %call105 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %48, %struct.data_in* %49), !dbg !4538
  store %union.tree_node* %call105, %union.tree_node** %args, align 8, !dbg !4539
  %50 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !4540
  store %union.tree_node* %50, %union.tree_node** %oarg, align 8, !dbg !4542
  %51 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4543
  %decl_non_common = bitcast %union.tree_node* %51 to %struct.tree_decl_non_common*, !dbg !4543
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4543
  %52 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4543
  store %union.tree_node* %52, %union.tree_node** %narg, align 8, !dbg !4544
  br label %for.cond, !dbg !4545

for.cond:                                         ; preds = %for.inc, %entry
  %53 = load %union.tree_node*, %union.tree_node** %oarg, align 8, !dbg !4546
  %tobool = icmp ne %union.tree_node* %53, null, !dbg !4546
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4548

land.rhs:                                         ; preds = %for.cond
  %54 = load %union.tree_node*, %union.tree_node** %narg, align 8, !dbg !4549
  %tobool106 = icmp ne %union.tree_node* %54, null, !dbg !4548
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %55 = phi i1 [ false, %for.cond ], [ %tobool106, %land.rhs ], !dbg !4550
  br i1 %55, label %for.body, label %for.end, !dbg !4551

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !4552, metadata !DIExpression()), !dbg !4554
  call void @llvm.dbg.declare(metadata i8* %res, metadata !4555, metadata !DIExpression()), !dbg !4556
  %56 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4557
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %56, i32 0, i32 10, !dbg !4558
  %57 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !4558
  %58 = load %union.tree_node*, %union.tree_node** %oarg, align 8, !dbg !4559
  %call107 = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %57, %union.tree_node* %58, i32* %ix), !dbg !4560
  store i8 %call107, i8* %res, align 1, !dbg !4561
  %59 = load i8, i8* %res, align 1, !dbg !4562
  %tobool108 = icmp ne i8 %59, 0, !dbg !4562
  br i1 %tobool108, label %cond.false, label %cond.true, !dbg !4562

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1338, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4562
  br label %cond.end, !dbg !4562

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4562

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4562
  %60 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4563
  %reader_cache109 = getelementptr inbounds %struct.data_in, %struct.data_in* %60, i32 0, i32 10, !dbg !4564
  %61 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache109, align 8, !dbg !4564
  %62 = load %union.tree_node*, %union.tree_node** %narg, align 8, !dbg !4565
  %63 = load i32, i32* %ix, align 4, !dbg !4566
  %call110 = call zeroext i8 @lto_streamer_cache_insert_at(%struct.lto_streamer_cache_d* %61, %union.tree_node* %62, i32 %63), !dbg !4567
  br label %for.inc, !dbg !4568

for.inc:                                          ; preds = %cond.end
  %64 = load %union.tree_node*, %union.tree_node** %oarg, align 8, !dbg !4569
  %common = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !4569
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4569
  %65 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4569
  store %union.tree_node* %65, %union.tree_node** %oarg, align 8, !dbg !4570
  %66 = load %union.tree_node*, %union.tree_node** %narg, align 8, !dbg !4571
  %common111 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !4571
  %chain112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common111, i32 0, i32 1, !dbg !4571
  %67 = load %union.tree_node*, %union.tree_node** %chain112, align 8, !dbg !4571
  store %union.tree_node* %67, %union.tree_node** %narg, align 8, !dbg !4572
  br label %for.cond, !dbg !4573, !llvm.loop !4574

for.end:                                          ; preds = %land.end
  %68 = load %union.tree_node*, %union.tree_node** %oarg, align 8, !dbg !4576
  %tobool113 = icmp ne %union.tree_node* %68, null, !dbg !4576
  br i1 %tobool113, label %cond.true115, label %land.lhs.true, !dbg !4576

land.lhs.true:                                    ; preds = %for.end
  %69 = load %union.tree_node*, %union.tree_node** %narg, align 8, !dbg !4576
  %tobool114 = icmp ne %union.tree_node* %69, null, !dbg !4576
  br i1 %tobool114, label %cond.true115, label %cond.false116, !dbg !4576

cond.true115:                                     ; preds = %land.lhs.true, %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1342, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4576
  br label %cond.end117, !dbg !4576

cond.false116:                                    ; preds = %land.lhs.true
  br label %cond.end117, !dbg !4576

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond118 = phi i32 [ 0, %cond.true115 ], [ 0, %cond.false116 ], !dbg !4576
  %70 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4577
  %71 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4578
  %72 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4579
  call void @input_ssa_names(%struct.lto_input_block* %70, %struct.data_in* %71, %struct.function* %72), !dbg !4580
  %73 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4581
  %74 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4582
  %75 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4583
  call void @input_eh_regions(%struct.lto_input_block* %73, %struct.data_in* %74, %struct.function* %75), !dbg !4584
  %76 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4585
  %77 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4586
  %call119 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %76, %struct.data_in* %77), !dbg !4587
  %78 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4588
  %decl_common = bitcast %union.tree_node* %78 to %struct.tree_decl_common*, !dbg !4588
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4588
  store %union.tree_node* %call119, %union.tree_node** %initial, align 8, !dbg !4589
  %79 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4590
  %decl_common120 = bitcast %union.tree_node* %79 to %struct.tree_decl_common*, !dbg !4590
  %initial121 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common120, i32 0, i32 5, !dbg !4590
  %80 = load %union.tree_node*, %union.tree_node** %initial121, align 8, !dbg !4590
  %tobool122 = icmp ne %union.tree_node* %80, null, !dbg !4590
  br i1 %tobool122, label %cond.false124, label %cond.true123, !dbg !4590

cond.true123:                                     ; preds = %cond.end117
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1352, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4590
  br label %cond.end125, !dbg !4590

cond.false124:                                    ; preds = %cond.end117
  br label %cond.end125, !dbg !4590

cond.end125:                                      ; preds = %cond.false124, %cond.true123
  %cond126 = phi i32 [ 0, %cond.true123 ], [ 0, %cond.false124 ], !dbg !4590
  %81 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4591
  %decl_non_common127 = bitcast %union.tree_node* %81 to %struct.tree_decl_non_common*, !dbg !4591
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common127, i32 0, i32 1, !dbg !4591
  store %union.tree_node* null, %union.tree_node** %saved_tree, align 8, !dbg !4592
  %82 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4593
  %call128 = call i32 @input_record_start(%struct.lto_input_block* %82), !dbg !4594
  store i32 %call128, i32* %tag, align 4, !dbg !4595
  br label %while.cond, !dbg !4596

while.cond:                                       ; preds = %while.body, %cond.end125
  %83 = load i32, i32* %tag, align 4, !dbg !4597
  %tobool129 = icmp ne i32 %83, 0, !dbg !4596
  br i1 %tobool129, label %while.body, label %while.end, !dbg !4596

while.body:                                       ; preds = %while.cond
  %84 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4598
  %85 = load i32, i32* %tag, align 4, !dbg !4600
  %86 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4601
  %87 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4602
  call void @input_bb(%struct.lto_input_block* %84, i32 %85, %struct.data_in* %86, %struct.function* %87), !dbg !4603
  %88 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4604
  %call130 = call i32 @input_record_start(%struct.lto_input_block* %88), !dbg !4605
  store i32 %call130, i32* %tag, align 4, !dbg !4606
  br label %while.cond, !dbg !4596, !llvm.loop !4607

while.end:                                        ; preds = %while.cond
  call void @renumber_gimple_stmt_uids(), !dbg !4609
  %89 = load %struct.function*, %struct.function** %fn, align 8, !dbg !4610
  %call131 = call i32 @gimple_stmt_max_uid(%struct.function* %89), !dbg !4611
  %conv132 = zext i32 %call131 to i64, !dbg !4611
  %call133 = call i8* @xcalloc(i64 %conv132, i64 8), !dbg !4612
  %90 = bitcast i8* %call133 to %union.gimple_statement_d**, !dbg !4613
  store %union.gimple_statement_d** %90, %union.gimple_statement_d*** %stmts, align 8, !dbg !4614
  %91 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4615
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %91, i64 0, !dbg !4615
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4615
  %92 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4615
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %92, i32 0, i32 0, !dbg !4615
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4615
  store %struct.basic_block_def* %93, %struct.basic_block_def** %bb, align 8, !dbg !4615
  br label %for.cond134, !dbg !4615

for.cond134:                                      ; preds = %for.inc145, %while.end
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4617
  %tobool135 = icmp ne %struct.basic_block_def* %94, null, !dbg !4615
  br i1 %tobool135, label %for.body136, label %for.end146, !dbg !4615

for.body136:                                      ; preds = %for.cond134
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4619, metadata !DIExpression()), !dbg !4627
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4628
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %95), !dbg !4630
  %96 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4630
  %97 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4630
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 24, i1 false), !dbg !4630
  br label %for.cond137, !dbg !4631

for.cond137:                                      ; preds = %for.inc143, %for.body136
  %call138 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4632
  %tobool139 = icmp ne i8 %call138, 0, !dbg !4634
  %lnot = xor i1 %tobool139, true, !dbg !4634
  br i1 %lnot, label %for.body140, label %for.end144, !dbg !4635

for.body140:                                      ; preds = %for.cond137
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4636, metadata !DIExpression()), !dbg !4638
  %call141 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4639
  store %union.gimple_statement_d* %call141, %union.gimple_statement_d** %stmt, align 8, !dbg !4638
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4640
  %99 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts, align 8, !dbg !4641
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4642
  %call142 = call i32 @gimple_uid(%union.gimple_statement_d* %100), !dbg !4643
  %idxprom = zext i32 %call142 to i64, !dbg !4641
  %arrayidx = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %99, i64 %idxprom, !dbg !4641
  store %union.gimple_statement_d* %98, %union.gimple_statement_d** %arrayidx, align 8, !dbg !4644
  br label %for.inc143, !dbg !4645

for.inc143:                                       ; preds = %for.body140
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4646
  br label %for.cond137, !dbg !4647, !llvm.loop !4648

for.end144:                                       ; preds = %for.cond137
  br label %for.inc145, !dbg !4650

for.inc145:                                       ; preds = %for.end144
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4617
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 6, !dbg !4617
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4617
  store %struct.basic_block_def* %102, %struct.basic_block_def** %bb, align 8, !dbg !4617
  br label %for.cond134, !dbg !4617, !llvm.loop !4651

for.end146:                                       ; preds = %for.cond134
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4653, metadata !DIExpression()), !dbg !4661
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4662
  %add.ptr147 = getelementptr inbounds %struct.function, %struct.function* %103, i64 0, !dbg !4662
  %cfg148 = getelementptr inbounds %struct.function, %struct.function* %add.ptr147, i32 0, i32 1, !dbg !4662
  %104 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg148, align 8, !dbg !4662
  %x_entry_block_ptr149 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %104, i32 0, i32 0, !dbg !4662
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr149, align 8, !dbg !4662
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 1, !dbg !4662
  %call150 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4662
  %106 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4662
  %107 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %106, i32 0, i32 0, !dbg !4662
  %108 = extractvalue { i32, %struct.VEC_edge_gc** } %call150, 0, !dbg !4662
  store i32 %108, i32* %107, align 8, !dbg !4662
  %109 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %106, i32 0, i32 1, !dbg !4662
  %110 = extractvalue { i32, %struct.VEC_edge_gc** } %call150, 1, !dbg !4662
  store %struct.VEC_edge_gc** %110, %struct.VEC_edge_gc*** %109, align 8, !dbg !4662
  %111 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4663
  %112 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4664
  %113 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %112, i32 0, i32 0, !dbg !4664
  %114 = load i32, i32* %113, align 8, !dbg !4664
  %115 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %112, i32 0, i32 1, !dbg !4664
  %116 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %115, align 8, !dbg !4664
  %call151 = call %struct.edge_def* @ei_edge(i32 %114, %struct.VEC_edge_gc** %116), !dbg !4664
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call151, i32 0, i32 1, !dbg !4665
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4665
  %call152 = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %117), !dbg !4666
  call void @gimple_set_body(%union.tree_node* %111, %struct.gimple_seq_d* %call152), !dbg !4667
  %118 = load %union.tree_node*, %union.tree_node** %fn_decl.addr, align 8, !dbg !4668
  %call153 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %118), !dbg !4669
  store %struct.cgraph_node* %call153, %struct.cgraph_node** %node, align 8, !dbg !4670
  %119 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4671
  %120 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts, align 8, !dbg !4672
  call void @fixup_call_stmt_edges(%struct.cgraph_node* %119, %union.gimple_statement_d** %120), !dbg !4673
  %121 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4674
  %122 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts, align 8, !dbg !4675
  call void @execute_all_ipa_stmt_fixups(%struct.cgraph_node* %121, %union.gimple_statement_d** %122), !dbg !4676
  call void @update_ssa(i32 16384), !dbg !4677
  call void @free_dominance_info(i32 1), !dbg !4678
  call void @free_dominance_info(i32 2), !dbg !4679
  %123 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts, align 8, !dbg !4680
  %124 = bitcast %union.gimple_statement_d** %123 to i8*, !dbg !4680
  call void @free(i8* %124), !dbg !4681
  ret void, !dbg !4682
}

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define internal void @input_alias_pairs(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !4683 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %var = alloca %union.tree_node*, align 8
  %orig_name = alloca i8*, align 8
  %new_name = alloca i8*, align 8
  %p = alloca %struct.alias_pair*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4686, metadata !DIExpression()), !dbg !4687
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4688, metadata !DIExpression()), !dbg !4689
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4690, metadata !DIExpression()), !dbg !4691
  %0 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4692
  call void @clear_line_info(%struct.data_in* %0), !dbg !4693
  br label %do.body, !dbg !4694

do.body:                                          ; preds = %do.cond, %entry
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4695
  %2 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4696
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %1, %struct.data_in* %2), !dbg !4697
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !4698
  br label %do.cond, !dbg !4699

do.cond:                                          ; preds = %do.body
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4700
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !4699
  br i1 %tobool, label %do.body, label %do.end, !dbg !4699, !llvm.loop !4701

do.end:                                           ; preds = %do.cond
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4703
  %5 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4704
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %4, %struct.data_in* %5), !dbg !4705
  store %union.tree_node* %call1, %union.tree_node** %var, align 8, !dbg !4706
  br label %while.cond, !dbg !4707

while.cond:                                       ; preds = %if.end, %do.end
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4708
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !4707
  br i1 %tobool2, label %while.body, label %while.end, !dbg !4707

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %orig_name, metadata !4709, metadata !DIExpression()), !dbg !4711
  call void @llvm.dbg.declare(metadata i8** %new_name, metadata !4712, metadata !DIExpression()), !dbg !4713
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p, metadata !4714, metadata !DIExpression()), !dbg !4716
  %call3 = call %struct.alias_pair* @VEC_alias_pair_gc_safe_push(%struct.VEC_alias_pair_gc** @alias_pairs, %struct.alias_pair* null), !dbg !4717
  store %struct.alias_pair* %call3, %struct.alias_pair** %p, align 8, !dbg !4718
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4719
  %8 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !4720
  %decl = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %8, i32 0, i32 0, !dbg !4721
  store %union.tree_node* %7, %union.tree_node** %decl, align 8, !dbg !4722
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4723
  %10 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4724
  %call4 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %9, %struct.data_in* %10), !dbg !4725
  %11 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !4726
  %target = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %11, i32 0, i32 1, !dbg !4727
  store %union.tree_node* %call4, %union.tree_node** %target, align 8, !dbg !4728
  %12 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !4729
  %target5 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %12, i32 0, i32 1, !dbg !4729
  %13 = load %union.tree_node*, %union.tree_node** %target5, align 8, !dbg !4729
  %identifier = bitcast %union.tree_node* %13 to %struct.tree_identifier*, !dbg !4729
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4729
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !4729
  %14 = load i8*, i8** %str, align 8, !dbg !4729
  store i8* %14, i8** %orig_name, align 8, !dbg !4730
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4731
  %file_data = getelementptr inbounds %struct.data_in, %struct.data_in* %15, i32 0, i32 0, !dbg !4732
  %16 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !4732
  %17 = load i8*, i8** %orig_name, align 8, !dbg !4733
  %call6 = call i8* @lto_get_decl_name_mapping(%struct.lto_file_decl_data* %16, i8* %17), !dbg !4734
  store i8* %call6, i8** %new_name, align 8, !dbg !4735
  %18 = load i8*, i8** %orig_name, align 8, !dbg !4736
  %19 = load i8*, i8** %new_name, align 8, !dbg !4738
  %call7 = call i32 @strcmp(i8* %18, i8* %19), !dbg !4739
  %cmp = icmp ne i32 %call7, 0, !dbg !4740
  br i1 %cmp, label %if.then, label %if.end, !dbg !4741

if.then:                                          ; preds = %while.body
  %20 = load i8*, i8** %new_name, align 8, !dbg !4742
  %call8 = call %union.tree_node* @get_identifier(i8* %20), !dbg !4743
  %21 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !4744
  %target9 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %21, i32 0, i32 1, !dbg !4745
  store %union.tree_node* %call8, %union.tree_node** %target9, align 8, !dbg !4746
  br label %if.end, !dbg !4744

if.end:                                           ; preds = %if.then, %while.body
  %22 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4747
  %23 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4748
  %call10 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %22, %struct.data_in* %23), !dbg !4749
  store %union.tree_node* %call10, %union.tree_node** %var, align 8, !dbg !4750
  br label %while.cond, !dbg !4707, !llvm.loop !4751

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4753
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_line_info(%struct.data_in* %data_in) #0 !dbg !4754 {
entry:
  %data_in.addr = alloca %struct.data_in*, align 8
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4755, metadata !DIExpression()), !dbg !4756
  %0 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4757
  %current_file = getelementptr inbounds %struct.data_in, %struct.data_in* %0, i32 0, i32 6, !dbg !4759
  %1 = load i8*, i8** %current_file, align 8, !dbg !4759
  %tobool = icmp ne i8* %1, null, !dbg !4757
  br i1 %tobool, label %if.then, label %if.end, !dbg !4760

if.then:                                          ; preds = %entry
  %2 = load %struct.line_maps*, %struct.line_maps** @line_table, align 8, !dbg !4761
  %call = call %struct.line_map* @linemap_add(%struct.line_maps* %2, i32 1, i32 0, i8* null, i32 0), !dbg !4762
  br label %if.end, !dbg !4762

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4763
  %current_file1 = getelementptr inbounds %struct.data_in, %struct.data_in* %3, i32 0, i32 6, !dbg !4764
  store i8* null, i8** %current_file1, align 8, !dbg !4765
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4766
  %current_line = getelementptr inbounds %struct.data_in, %struct.data_in* %4, i32 0, i32 7, !dbg !4767
  store i32 0, i32* %current_line, align 8, !dbg !4768
  %5 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4769
  %current_col = getelementptr inbounds %struct.data_in, %struct.data_in* %5, i32 0, i32 8, !dbg !4770
  store i32 0, i32* %current_col, align 4, !dbg !4771
  ret void, !dbg !4772
}

declare dso_local void @init_empty_tree_cfg_for_function(%struct.function*) #2

declare dso_local void @init_ssa_operands() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !4773 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4778, metadata !DIExpression()), !dbg !4779
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4779
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4779
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4779

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4779
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !4779
  %2 = load i32, i32* %num, align 8, !dbg !4779
  br label %cond.end, !dbg !4779

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4779

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4779
  ret i32 %cond, !dbg !4779
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !4780 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !4784, metadata !DIExpression()), !dbg !4785
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4786, metadata !DIExpression()), !dbg !4785
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !4787, metadata !DIExpression()), !dbg !4785
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4785
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !4785
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !4785
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4785

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4785
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !4785
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !4785
  br label %cond.end, !dbg !4785

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4785

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4785
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !4785
  store i32 %call, i32* %oldsize, align 4, !dbg !4785
  %4 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4785
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4785
  call void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %4, i32 %5), !dbg !4785
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4785
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !4785
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %7, null, !dbg !4785
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4785

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4785
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %8, align 8, !dbg !4785
  %base3 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !4785
  br label %cond.end5, !dbg !4785

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4785

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_basic_block_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4785
  %call7 = call %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %cond6), !dbg !4785
  %10 = load i32, i32* %oldsize, align 4, !dbg !4785
  %idxprom = sext i32 %10 to i64, !dbg !4785
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call7, i64 %idxprom, !dbg !4785
  %11 = bitcast %struct.basic_block_def** %arrayidx to i8*, !dbg !4785
  %12 = load i32, i32* %size_.addr, align 4, !dbg !4785
  %13 = load i32, i32* %oldsize, align 4, !dbg !4785
  %sub = sub nsw i32 %12, %13, !dbg !4785
  %conv = sext i32 %sub to i64, !dbg !4785
  %mul = mul i64 8, %conv, !dbg !4785
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !4785
  ret void, !dbg !4785
}

declare dso_local i64 @lto_input_sleb128(%struct.lto_input_block*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !4788 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4791, metadata !DIExpression()), !dbg !4792
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4793, metadata !DIExpression()), !dbg !4792
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4792
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4792
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4792

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4792
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4792
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !4792
  %3 = load i32, i32* %num, align 8, !dbg !4792
  %cmp = icmp ult i32 %1, %3, !dbg !4792
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4794
  %land.ext = zext i1 %4 to i32, !dbg !4792
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4792
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !4792
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4792
  %idxprom = zext i32 %6 to i64, !dbg !4792
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4792
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4792
  ret %struct.basic_block_def* %7, !dbg !4792
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @make_new_block(%struct.function* %fn, i32 %index) #0 !dbg !4795 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  %index.addr = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !4798, metadata !DIExpression()), !dbg !4799
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4800, metadata !DIExpression()), !dbg !4801
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4802, metadata !DIExpression()), !dbg !4803
  %call = call %struct.basic_block_def* @alloc_block(), !dbg !4804
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !4803
  %0 = load i32, i32* %index.addr, align 4, !dbg !4805
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4806
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !4807
  store i32 %0, i32* %index1, align 8, !dbg !4808
  %2 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4809
  %cfg = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1, !dbg !4809
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4809
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 2, !dbg !4809
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4809
  %tobool = icmp ne %struct.VEC_basic_block_gc* %4, null, !dbg !4809
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4809

cond.true:                                        ; preds = %entry
  %5 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4809
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1, !dbg !4809
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4809
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 2, !dbg !4809
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !4809
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %7, i32 0, i32 0, !dbg !4809
  br label %cond.end, !dbg !4809

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4809

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4809
  %8 = load i32, i32* %index.addr, align 4, !dbg !4809
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4809
  %call4 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond, i32 %8, %struct.basic_block_def* %9), !dbg !4809
  %call5 = call i8* @ggc_alloc_cleared_stat(i64 16), !dbg !4810
  %10 = bitcast i8* %call5 to %struct.gimple_bb_info*, !dbg !4810
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4811
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !4812
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !4813
  store %struct.gimple_bb_info* %10, %struct.gimple_bb_info** %gimple, align 8, !dbg !4814
  %12 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4815
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 1, !dbg !4815
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !4815
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 3, !dbg !4815
  %14 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4816
  %inc = add nsw i32 %14, 1, !dbg !4816
  store i32 %inc, i32* %x_n_basic_blocks, align 8, !dbg !4816
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4817
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 13, !dbg !4818
  store i32 0, i32* %flags, align 8, !dbg !4819
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4820
  %call7 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !4821
  call void @set_bb_seq(%struct.basic_block_def* %16, %struct.gimple_seq_d* %call7), !dbg !4822
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4823
  ret %struct.basic_block_def* %17, !dbg !4824
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !4825 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !4826, metadata !DIExpression()), !dbg !4827
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4828, metadata !DIExpression()), !dbg !4827
  %0 = load i32, i32* %size_.addr, align 4, !dbg !4827
  %cmp = icmp sge i32 %0, 0, !dbg !4827
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4827

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %1, align 8, !dbg !4827
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !4827
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4827

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %3, align 8, !dbg !4827
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %4, i32 0, i32 0, !dbg !4827
  br label %cond.end, !dbg !4827

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !4827

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4827
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !4827
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4827
  %cmp1 = icmp ule i32 %call, %5, !dbg !4827
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !4829
  %land.ext = zext i1 %6 to i32, !dbg !4827
  %7 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %8 = load i32, i32* %size_.addr, align 4, !dbg !4827
  %9 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %9, align 8, !dbg !4827
  %tobool2 = icmp ne %struct.VEC_basic_block_gc* %10, null, !dbg !4827
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !4827

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %11, align 8, !dbg !4827
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %12, null, !dbg !4827
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !4827

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %13, align 8, !dbg !4827
  %base6 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i32 0, i32 0, !dbg !4827
  br label %cond.end8, !dbg !4827

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !4827

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_basic_block_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !4827
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond9, i32 0, i32 0, !dbg !4827
  %15 = load i32, i32* %num, align 8, !dbg !4827
  br label %cond.end11, !dbg !4827

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !4827

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !4827
  %sub = sub nsw i32 %8, %cond12, !dbg !4827
  %call13 = call i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %7, i32 %sub), !dbg !4827
  %16 = load i32, i32* %size_.addr, align 4, !dbg !4827
  %17 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %17, align 8, !dbg !4827
  %tobool14 = icmp ne %struct.VEC_basic_block_gc* %18, null, !dbg !4827
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4827

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4827
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %19, align 8, !dbg !4827
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !4827
  br label %cond.end18, !dbg !4827

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !4827

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4827
  %num20 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond19, i32 0, i32 0, !dbg !4827
  store i32 %16, i32* %num20, align 8, !dbg !4827
  ret void, !dbg !4827
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %vec_) #0 !dbg !4830 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4835, metadata !DIExpression()), !dbg !4836
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4836
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4836
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4836

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4836
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 2, !dbg !4836
  %arraydecay = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 0, !dbg !4836
  br label %cond.end, !dbg !4836

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4836

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4836
  ret %struct.basic_block_def** %cond, !dbg !4836
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %vec_, i32 %alloc_) #0 !dbg !4837 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !4840, metadata !DIExpression()), !dbg !4841
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4842, metadata !DIExpression()), !dbg !4841
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4843, metadata !DIExpression()), !dbg !4841
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4841
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !4841
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !4841
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4841

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4841
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !4841
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !4841
  br label %cond.end, !dbg !4841

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4841

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4841
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4841
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !4841
  %tobool1 = icmp ne i32 %call, 0, !dbg !4841
  %lnot = xor i1 %tobool1, true, !dbg !4841
  %lnot.ext = zext i1 %lnot to i32, !dbg !4841
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4841
  %5 = load i32, i32* %extend, align 4, !dbg !4844
  %tobool2 = icmp ne i32 %5, 0, !dbg !4844
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4841

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4844
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !4844
  %8 = bitcast %struct.VEC_basic_block_gc* %7 to i8*, !dbg !4844
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4844
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !4844
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_gc*, !dbg !4844
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4844
  store %struct.VEC_basic_block_gc* %10, %struct.VEC_basic_block_gc** %11, align 8, !dbg !4844
  br label %if.end, !dbg !4844

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4841
  ret i32 %12, !dbg !4841
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !4846 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4849, metadata !DIExpression()), !dbg !4850
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4851, metadata !DIExpression()), !dbg !4850
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4850
  %cmp = icmp sge i32 %0, 0, !dbg !4850
  %conv = zext i1 %cmp to i32, !dbg !4850
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4850
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !4850
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4850

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4850
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !4850
  %3 = load i32, i32* %alloc, align 4, !dbg !4850
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4850
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !4850
  %5 = load i32, i32* %num, align 8, !dbg !4850
  %sub = sub i32 %3, %5, !dbg !4850
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4850
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4850
  %conv2 = zext i1 %cmp1 to i32, !dbg !4850
  br label %cond.end, !dbg !4850

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4850
  %tobool3 = icmp ne i32 %7, 0, !dbg !4850
  %lnot = xor i1 %tobool3, true, !dbg !4850
  %lnot.ext = zext i1 %lnot to i32, !dbg !4850
  br label %cond.end, !dbg !4850

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4850
  ret i32 %cond, !dbg !4850
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

declare dso_local %struct.basic_block_def* @alloc_block() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def* %obj_) #0 !dbg !4852 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %old_obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4855, metadata !DIExpression()), !dbg !4856
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4857, metadata !DIExpression()), !dbg !4856
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !4858, metadata !DIExpression()), !dbg !4856
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_obj_, metadata !4859, metadata !DIExpression()), !dbg !4856
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4856
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4856
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !4856
  %2 = load i32, i32* %num, align 8, !dbg !4856
  %cmp = icmp ult i32 %0, %2, !dbg !4856
  %conv = zext i1 %cmp to i32, !dbg !4856
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4856
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 2, !dbg !4856
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4856
  %idxprom = zext i32 %4 to i64, !dbg !4856
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4856
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4856
  store %struct.basic_block_def* %5, %struct.basic_block_def** %old_obj_, align 8, !dbg !4856
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !4856
  %7 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4856
  %vec1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %7, i32 0, i32 2, !dbg !4856
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !4856
  %idxprom2 = zext i32 %8 to i64, !dbg !4856
  %arrayidx3 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec1, i64 0, i64 %idxprom2, !dbg !4856
  store %struct.basic_block_def* %6, %struct.basic_block_def** %arrayidx3, align 8, !dbg !4856
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %old_obj_, align 8, !dbg !4856
  ret %struct.basic_block_def* %9, !dbg !4856
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_bb_seq(%struct.basic_block_def* %bb, %struct.gimple_seq_d* %seq) #0 !dbg !4860 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4863, metadata !DIExpression()), !dbg !4864
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4865, metadata !DIExpression()), !dbg !4866
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4867
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !4867
  %1 = load i32, i32* %flags, align 8, !dbg !4867
  %and = and i32 %1, 512, !dbg !4867
  %tobool = icmp ne i32 %and, 0, !dbg !4867
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4867

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4867
  br label %cond.end, !dbg !4867

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4867

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4867
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4868
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4869
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !4870
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !4871
  %4 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !4871
  %seq1 = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %4, i32 0, i32 0, !dbg !4872
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq1, align 8, !dbg !4873
  ret void, !dbg !4874
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_tag_check(i32 %actual, i32 %expected) #0 !dbg !4875 {
entry:
  %actual.addr = alloca i32, align 4
  %expected.addr = alloca i32, align 4
  store i32 %actual, i32* %actual.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %actual.addr, metadata !4878, metadata !DIExpression()), !dbg !4879
  store i32 %expected, i32* %expected.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %expected.addr, metadata !4880, metadata !DIExpression()), !dbg !4881
  %0 = load i32, i32* %actual.addr, align 4, !dbg !4882
  %1 = load i32, i32* %expected.addr, align 4, !dbg !4884
  %cmp = icmp ne i32 %0, %1, !dbg !4885
  br i1 %cmp, label %if.then, label %if.end, !dbg !4886

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %expected.addr, align 4, !dbg !4887
  %call = call i8* @lto_tag_name(i32 %2), !dbg !4888
  %3 = load i32, i32* %actual.addr, align 4, !dbg !4889
  %call1 = call i8* @lto_tag_name(i32 %3), !dbg !4890
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i8* %call, i8* %call1), !dbg !4891
  br label %if.end, !dbg !4891

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4892
}

declare dso_local i64 @bp_unpack_value(%struct.bitpack_d*, i32) #2

declare dso_local void @bitpack_delete(%struct.bitpack_d*) #2

declare dso_local zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d*, %union.tree_node*, i32*) #2

declare dso_local zeroext i8 @lto_streamer_cache_insert_at(%struct.lto_streamer_cache_d*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @input_ssa_names(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %struct.function* %fn) #0 !dbg !4893 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %ssa_name = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %is_default_def = alloca i8, align 1
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4896, metadata !DIExpression()), !dbg !4897
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4898, metadata !DIExpression()), !dbg !4899
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !4900, metadata !DIExpression()), !dbg !4901
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4902, metadata !DIExpression()), !dbg !4903
  call void @llvm.dbg.declare(metadata i32* %size, metadata !4904, metadata !DIExpression()), !dbg !4905
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4906
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !4907
  %conv = trunc i64 %call to i32, !dbg !4907
  store i32 %conv, i32* %size, align 4, !dbg !4908
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4909
  %2 = load i32, i32* %size, align 4, !dbg !4910
  call void @init_ssanames(%struct.function* %1, i32 %2), !dbg !4911
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4912
  %call1 = call i64 @lto_input_uleb128(%struct.lto_input_block* %3), !dbg !4913
  %conv2 = trunc i64 %call1 to i32, !dbg !4913
  store i32 %conv2, i32* %i, align 4, !dbg !4914
  br label %while.cond, !dbg !4915

while.cond:                                       ; preds = %if.end, %entry
  %4 = load i32, i32* %i, align 4, !dbg !4916
  %tobool = icmp ne i32 %4, 0, !dbg !4915
  br i1 %tobool, label %while.body, label %while.end33, !dbg !4915

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_name, metadata !4917, metadata !DIExpression()), !dbg !4919
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4920, metadata !DIExpression()), !dbg !4921
  call void @llvm.dbg.declare(metadata i8* %is_default_def, metadata !4922, metadata !DIExpression()), !dbg !4923
  br label %while.cond3, !dbg !4924

while.cond3:                                      ; preds = %cond.end18, %while.body
  %5 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4925
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 3, !dbg !4925
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4925
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 2, !dbg !4925
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4925
  %tobool4 = icmp ne %struct.VEC_tree_gc* %7, null, !dbg !4925
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4925

cond.true:                                        ; preds = %while.cond3
  %8 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4925
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %8, i32 0, i32 3, !dbg !4925
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !4925
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 2, !dbg !4925
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !4925
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %10, i32 0, i32 0, !dbg !4925
  br label %cond.end, !dbg !4925

cond.false:                                       ; preds = %while.cond3
  br label %cond.end, !dbg !4925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4925
  %call7 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4925
  %11 = load i32, i32* %i, align 4, !dbg !4926
  %cmp = icmp ult i32 %call7, %11, !dbg !4927
  br i1 %cmp, label %while.body9, label %while.end, !dbg !4924

while.body9:                                      ; preds = %cond.end
  %12 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4928
  %gimple_df10 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 3, !dbg !4928
  %13 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df10, align 8, !dbg !4928
  %ssa_names11 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %13, i32 0, i32 2, !dbg !4928
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names11, align 8, !dbg !4928
  %tobool12 = icmp ne %struct.VEC_tree_gc* %14, null, !dbg !4928
  br i1 %tobool12, label %cond.true13, label %cond.false17, !dbg !4928

cond.true13:                                      ; preds = %while.body9
  %15 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4928
  %gimple_df14 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 3, !dbg !4928
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df14, align 8, !dbg !4928
  %ssa_names15 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !4928
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names15, align 8, !dbg !4928
  %base16 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %17, i32 0, i32 0, !dbg !4928
  br label %cond.end18, !dbg !4928

cond.false17:                                     ; preds = %while.body9
  br label %cond.end18, !dbg !4928

cond.end18:                                       ; preds = %cond.false17, %cond.true13
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true13 ], [ null, %cond.false17 ], !dbg !4928
  %call20 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond19, %union.tree_node* null), !dbg !4928
  br label %while.cond3, !dbg !4924, !llvm.loop !4929

while.end:                                        ; preds = %cond.end
  %18 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4930
  %call21 = call zeroext i8 @lto_input_1_unsigned(%struct.lto_input_block* %18), !dbg !4931
  %conv22 = zext i8 %call21 to i32, !dbg !4931
  %cmp23 = icmp ne i32 %conv22, 0, !dbg !4932
  %conv24 = zext i1 %cmp23 to i32, !dbg !4932
  %conv25 = trunc i32 %conv24 to i8, !dbg !4933
  store i8 %conv25, i8* %is_default_def, align 1, !dbg !4934
  %19 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4935
  %20 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !4936
  %call26 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %19, %struct.data_in* %20), !dbg !4937
  store %union.tree_node* %call26, %union.tree_node** %name, align 8, !dbg !4938
  %21 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4939
  %22 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4940
  %call27 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !4941
  %call28 = call %union.tree_node* @make_ssa_name_fn(%struct.function* %21, %union.tree_node* %22, %union.gimple_statement_d* %call27), !dbg !4942
  store %union.tree_node* %call28, %union.tree_node** %ssa_name, align 8, !dbg !4943
  %23 = load i8, i8* %is_default_def, align 1, !dbg !4944
  %tobool29 = icmp ne i8 %23, 0, !dbg !4944
  br i1 %tobool29, label %if.then, label %if.end, !dbg !4946

if.then:                                          ; preds = %while.end
  %24 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !4947
  %ssa_name30 = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !4947
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name30, i32 0, i32 1, !dbg !4947
  %25 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4947
  %26 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !4948
  call void @set_default_def(%union.tree_node* %25, %union.tree_node* %26), !dbg !4949
  br label %if.end, !dbg !4949

if.end:                                           ; preds = %if.then, %while.end
  %27 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4950
  %call31 = call i64 @lto_input_uleb128(%struct.lto_input_block* %27), !dbg !4951
  %conv32 = trunc i64 %call31 to i32, !dbg !4951
  store i32 %conv32, i32* %i, align 4, !dbg !4952
  br label %while.cond, !dbg !4915, !llvm.loop !4953

while.end33:                                      ; preds = %while.cond
  ret void, !dbg !4955
}

; Function Attrs: noinline nounwind uwtable
define internal void @input_eh_regions(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %struct.function* %fn) #0 !dbg !4956 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %i = alloca i64, align 8
  %root_region = alloca i64, align 8
  %len = alloca i64, align 8
  %tag = alloca i32, align 4
  %r = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %ttype = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %c = alloca i8, align 1
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !4957, metadata !DIExpression()), !dbg !4958
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !4959, metadata !DIExpression()), !dbg !4960
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !4961, metadata !DIExpression()), !dbg !4962
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4963, metadata !DIExpression()), !dbg !4964
  call void @llvm.dbg.declare(metadata i64* %root_region, metadata !4965, metadata !DIExpression()), !dbg !4966
  call void @llvm.dbg.declare(metadata i64* %len, metadata !4967, metadata !DIExpression()), !dbg !4968
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !4969, metadata !DIExpression()), !dbg !4970
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4971
  %call = call i32 @input_record_start(%struct.lto_input_block* %0), !dbg !4972
  store i32 %call, i32* %tag, align 4, !dbg !4973
  %1 = load i32, i32* %tag, align 4, !dbg !4974
  %cmp = icmp eq i32 %1, 0, !dbg !4976
  br i1 %cmp, label %if.then, label %if.end, !dbg !4977

if.then:                                          ; preds = %entry
  br label %return, !dbg !4978

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tag, align 4, !dbg !4979
  call void @lto_tag_check_range(i32 %2, i32 229, i32 229), !dbg !4980
  call void @lto_init_eh(), !dbg !4981
  %3 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4982
  %eh = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 0, !dbg !4982
  %4 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4982
  %tobool = icmp ne %struct.eh_status* %4, null, !dbg !4982
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4982

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 627, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4982
  br label %cond.end, !dbg !4982

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4982

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4982
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4983
  %call1 = call i64 @lto_input_sleb128(%struct.lto_input_block* %5), !dbg !4984
  store i64 %call1, i64* %root_region, align 8, !dbg !4985
  %6 = load i64, i64* %root_region, align 8, !dbg !4986
  %7 = load i64, i64* %root_region, align 8, !dbg !4986
  %conv = trunc i64 %7 to i32, !dbg !4986
  %conv2 = sext i32 %conv to i64, !dbg !4986
  %cmp3 = icmp eq i64 %6, %conv2, !dbg !4986
  br i1 %cmp3, label %cond.false6, label %cond.true5, !dbg !4986

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 630, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4986
  br label %cond.end7, !dbg !4986

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4986

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !4986
  %8 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !4987
  %call9 = call i64 @lto_input_sleb128(%struct.lto_input_block* %8), !dbg !4988
  store i64 %call9, i64* %len, align 8, !dbg !4989
  %9 = load i64, i64* %len, align 8, !dbg !4990
  %10 = load i64, i64* %len, align 8, !dbg !4990
  %conv10 = trunc i64 %10 to i32, !dbg !4990
  %conv11 = sext i32 %conv10 to i64, !dbg !4990
  %cmp12 = icmp eq i64 %9, %conv11, !dbg !4990
  br i1 %cmp12, label %cond.false15, label %cond.true14, !dbg !4990

cond.true14:                                      ; preds = %cond.end7
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 634, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4990
  br label %cond.end16, !dbg !4990

cond.false15:                                     ; preds = %cond.end7
  br label %cond.end16, !dbg !4990

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !4990
  %11 = load i64, i64* %len, align 8, !dbg !4991
  %cmp18 = icmp sgt i64 %11, 0, !dbg !4993
  br i1 %cmp18, label %if.then20, label %if.end38, !dbg !4994

if.then20:                                        ; preds = %cond.end16
  %12 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4995
  %eh21 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 0, !dbg !4995
  %13 = load %struct.eh_status*, %struct.eh_status** %eh21, align 8, !dbg !4995
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %13, i32 0, i32 1, !dbg !4995
  %14 = load i64, i64* %len, align 8, !dbg !4995
  %conv22 = trunc i64 %14 to i32, !dbg !4995
  call void @VEC_eh_region_gc_safe_grow(%struct.VEC_eh_region_gc** %region_array, i32 %conv22), !dbg !4995
  store i64 0, i64* %i, align 8, !dbg !4997
  br label %for.cond, !dbg !4999

for.cond:                                         ; preds = %for.inc, %if.then20
  %15 = load i64, i64* %i, align 8, !dbg !5000
  %16 = load i64, i64* %len, align 8, !dbg !5002
  %cmp23 = icmp slt i64 %15, %16, !dbg !5003
  br i1 %cmp23, label %for.body, label %for.end, !dbg !5004

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !5005, metadata !DIExpression()), !dbg !5007
  %17 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5008
  %18 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5009
  %19 = load i64, i64* %i, align 8, !dbg !5010
  %conv25 = trunc i64 %19 to i32, !dbg !5010
  %call26 = call %struct.eh_region_d* @input_eh_region(%struct.lto_input_block* %17, %struct.data_in* %18, i32 %conv25), !dbg !5011
  store %struct.eh_region_d* %call26, %struct.eh_region_d** %r, align 8, !dbg !5007
  %20 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5012
  %eh27 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 0, !dbg !5012
  %21 = load %struct.eh_status*, %struct.eh_status** %eh27, align 8, !dbg !5012
  %region_array28 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %21, i32 0, i32 1, !dbg !5012
  %22 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array28, align 8, !dbg !5012
  %tobool29 = icmp ne %struct.VEC_eh_region_gc* %22, null, !dbg !5012
  br i1 %tobool29, label %cond.true30, label %cond.false33, !dbg !5012

cond.true30:                                      ; preds = %for.body
  %23 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5012
  %eh31 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 0, !dbg !5012
  %24 = load %struct.eh_status*, %struct.eh_status** %eh31, align 8, !dbg !5012
  %region_array32 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %24, i32 0, i32 1, !dbg !5012
  %25 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array32, align 8, !dbg !5012
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %25, i32 0, i32 0, !dbg !5012
  br label %cond.end34, !dbg !5012

cond.false33:                                     ; preds = %for.body
  br label %cond.end34, !dbg !5012

cond.end34:                                       ; preds = %cond.false33, %cond.true30
  %cond35 = phi %struct.VEC_eh_region_base* [ %base, %cond.true30 ], [ null, %cond.false33 ], !dbg !5012
  %26 = load i64, i64* %i, align 8, !dbg !5012
  %conv36 = trunc i64 %26 to i32, !dbg !5012
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5012
  %call37 = call %struct.eh_region_d* @VEC_eh_region_base_replace(%struct.VEC_eh_region_base* %cond35, i32 %conv36, %struct.eh_region_d* %27), !dbg !5012
  br label %for.inc, !dbg !5013

for.inc:                                          ; preds = %cond.end34
  %28 = load i64, i64* %i, align 8, !dbg !5014
  %inc = add nsw i64 %28, 1, !dbg !5014
  store i64 %inc, i64* %i, align 8, !dbg !5014
  br label %for.cond, !dbg !5015, !llvm.loop !5016

for.end:                                          ; preds = %for.cond
  br label %if.end38, !dbg !5018

if.end38:                                         ; preds = %for.end, %cond.end16
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5019
  %call39 = call i64 @lto_input_sleb128(%struct.lto_input_block* %29), !dbg !5020
  store i64 %call39, i64* %len, align 8, !dbg !5021
  %30 = load i64, i64* %len, align 8, !dbg !5022
  %31 = load i64, i64* %len, align 8, !dbg !5022
  %conv40 = trunc i64 %31 to i32, !dbg !5022
  %conv41 = sext i32 %conv40 to i64, !dbg !5022
  %cmp42 = icmp eq i64 %30, %conv41, !dbg !5022
  br i1 %cmp42, label %cond.false45, label %cond.true44, !dbg !5022

cond.true44:                                      ; preds = %if.end38
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 647, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5022
  br label %cond.end46, !dbg !5022

cond.false45:                                     ; preds = %if.end38
  br label %cond.end46, !dbg !5022

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !5022
  %32 = load i64, i64* %len, align 8, !dbg !5023
  %cmp48 = icmp sgt i64 %32, 0, !dbg !5025
  br i1 %cmp48, label %if.then50, label %if.end74, !dbg !5026

if.then50:                                        ; preds = %cond.end46
  %33 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5027
  %eh51 = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 0, !dbg !5027
  %34 = load %struct.eh_status*, %struct.eh_status** %eh51, align 8, !dbg !5027
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %34, i32 0, i32 2, !dbg !5027
  %35 = load i64, i64* %len, align 8, !dbg !5027
  %conv52 = trunc i64 %35 to i32, !dbg !5027
  call void @VEC_eh_landing_pad_gc_safe_grow(%struct.VEC_eh_landing_pad_gc** %lp_array, i32 %conv52), !dbg !5027
  store i64 0, i64* %i, align 8, !dbg !5029
  br label %for.cond53, !dbg !5031

for.cond53:                                       ; preds = %for.inc71, %if.then50
  %36 = load i64, i64* %i, align 8, !dbg !5032
  %37 = load i64, i64* %len, align 8, !dbg !5034
  %cmp54 = icmp slt i64 %36, %37, !dbg !5035
  br i1 %cmp54, label %for.body56, label %for.end73, !dbg !5036

for.body56:                                       ; preds = %for.cond53
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5037, metadata !DIExpression()), !dbg !5039
  %38 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5040
  %39 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5041
  %40 = load i64, i64* %i, align 8, !dbg !5042
  %conv57 = trunc i64 %40 to i32, !dbg !5042
  %call58 = call %struct.eh_landing_pad_d* @input_eh_lp(%struct.lto_input_block* %38, %struct.data_in* %39, i32 %conv57), !dbg !5043
  store %struct.eh_landing_pad_d* %call58, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5039
  %41 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5044
  %eh59 = getelementptr inbounds %struct.function, %struct.function* %41, i32 0, i32 0, !dbg !5044
  %42 = load %struct.eh_status*, %struct.eh_status** %eh59, align 8, !dbg !5044
  %lp_array60 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %42, i32 0, i32 2, !dbg !5044
  %43 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array60, align 8, !dbg !5044
  %tobool61 = icmp ne %struct.VEC_eh_landing_pad_gc* %43, null, !dbg !5044
  br i1 %tobool61, label %cond.true62, label %cond.false66, !dbg !5044

cond.true62:                                      ; preds = %for.body56
  %44 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5044
  %eh63 = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 0, !dbg !5044
  %45 = load %struct.eh_status*, %struct.eh_status** %eh63, align 8, !dbg !5044
  %lp_array64 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %45, i32 0, i32 2, !dbg !5044
  %46 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array64, align 8, !dbg !5044
  %base65 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %46, i32 0, i32 0, !dbg !5044
  br label %cond.end67, !dbg !5044

cond.false66:                                     ; preds = %for.body56
  br label %cond.end67, !dbg !5044

cond.end67:                                       ; preds = %cond.false66, %cond.true62
  %cond68 = phi %struct.VEC_eh_landing_pad_base* [ %base65, %cond.true62 ], [ null, %cond.false66 ], !dbg !5044
  %47 = load i64, i64* %i, align 8, !dbg !5044
  %conv69 = trunc i64 %47 to i32, !dbg !5044
  %48 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5044
  %call70 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_replace(%struct.VEC_eh_landing_pad_base* %cond68, i32 %conv69, %struct.eh_landing_pad_d* %48), !dbg !5044
  br label %for.inc71, !dbg !5045

for.inc71:                                        ; preds = %cond.end67
  %49 = load i64, i64* %i, align 8, !dbg !5046
  %inc72 = add nsw i64 %49, 1, !dbg !5046
  store i64 %inc72, i64* %i, align 8, !dbg !5046
  br label %for.cond53, !dbg !5047, !llvm.loop !5048

for.end73:                                        ; preds = %for.cond53
  br label %if.end74, !dbg !5050

if.end74:                                         ; preds = %for.end73, %cond.end46
  %50 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5051
  %call75 = call i64 @lto_input_sleb128(%struct.lto_input_block* %50), !dbg !5052
  store i64 %call75, i64* %len, align 8, !dbg !5053
  %51 = load i64, i64* %len, align 8, !dbg !5054
  %52 = load i64, i64* %len, align 8, !dbg !5054
  %conv76 = trunc i64 %52 to i32, !dbg !5054
  %conv77 = sext i32 %conv76 to i64, !dbg !5054
  %cmp78 = icmp eq i64 %51, %conv77, !dbg !5054
  br i1 %cmp78, label %cond.false81, label %cond.true80, !dbg !5054

cond.true80:                                      ; preds = %if.end74
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 660, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5054
  br label %cond.end82, !dbg !5054

cond.false81:                                     ; preds = %if.end74
  br label %cond.end82, !dbg !5054

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !5054
  %53 = load i64, i64* %len, align 8, !dbg !5055
  %cmp84 = icmp sgt i64 %53, 0, !dbg !5057
  br i1 %cmp84, label %if.then86, label %if.end109, !dbg !5058

if.then86:                                        ; preds = %cond.end82
  %54 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5059
  %eh87 = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 0, !dbg !5059
  %55 = load %struct.eh_status*, %struct.eh_status** %eh87, align 8, !dbg !5059
  %ttype_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %55, i32 0, i32 4, !dbg !5059
  %56 = load i64, i64* %len, align 8, !dbg !5059
  %conv88 = trunc i64 %56 to i32, !dbg !5059
  call void @VEC_tree_gc_safe_grow(%struct.VEC_tree_gc** %ttype_data, i32 %conv88), !dbg !5059
  store i64 0, i64* %i, align 8, !dbg !5061
  br label %for.cond89, !dbg !5063

for.cond89:                                       ; preds = %for.inc106, %if.then86
  %57 = load i64, i64* %i, align 8, !dbg !5064
  %58 = load i64, i64* %len, align 8, !dbg !5066
  %cmp90 = icmp slt i64 %57, %58, !dbg !5067
  br i1 %cmp90, label %for.body92, label %for.end108, !dbg !5068

for.body92:                                       ; preds = %for.cond89
  call void @llvm.dbg.declare(metadata %union.tree_node** %ttype, metadata !5069, metadata !DIExpression()), !dbg !5071
  %59 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5072
  %60 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5073
  %call93 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %59, %struct.data_in* %60), !dbg !5074
  store %union.tree_node* %call93, %union.tree_node** %ttype, align 8, !dbg !5071
  %61 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5075
  %eh94 = getelementptr inbounds %struct.function, %struct.function* %61, i32 0, i32 0, !dbg !5075
  %62 = load %struct.eh_status*, %struct.eh_status** %eh94, align 8, !dbg !5075
  %ttype_data95 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %62, i32 0, i32 4, !dbg !5075
  %63 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data95, align 8, !dbg !5075
  %tobool96 = icmp ne %struct.VEC_tree_gc* %63, null, !dbg !5075
  br i1 %tobool96, label %cond.true97, label %cond.false101, !dbg !5075

cond.true97:                                      ; preds = %for.body92
  %64 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5075
  %eh98 = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 0, !dbg !5075
  %65 = load %struct.eh_status*, %struct.eh_status** %eh98, align 8, !dbg !5075
  %ttype_data99 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %65, i32 0, i32 4, !dbg !5075
  %66 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ttype_data99, align 8, !dbg !5075
  %base100 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %66, i32 0, i32 0, !dbg !5075
  br label %cond.end102, !dbg !5075

cond.false101:                                    ; preds = %for.body92
  br label %cond.end102, !dbg !5075

cond.end102:                                      ; preds = %cond.false101, %cond.true97
  %cond103 = phi %struct.VEC_tree_base* [ %base100, %cond.true97 ], [ null, %cond.false101 ], !dbg !5075
  %67 = load i64, i64* %i, align 8, !dbg !5075
  %conv104 = trunc i64 %67 to i32, !dbg !5075
  %68 = load %union.tree_node*, %union.tree_node** %ttype, align 8, !dbg !5075
  %call105 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond103, i32 %conv104, %union.tree_node* %68), !dbg !5075
  br label %for.inc106, !dbg !5076

for.inc106:                                       ; preds = %cond.end102
  %69 = load i64, i64* %i, align 8, !dbg !5077
  %inc107 = add nsw i64 %69, 1, !dbg !5077
  store i64 %inc107, i64* %i, align 8, !dbg !5077
  br label %for.cond89, !dbg !5078, !llvm.loop !5079

for.end108:                                       ; preds = %for.cond89
  br label %if.end109, !dbg !5081

if.end109:                                        ; preds = %for.end108, %cond.end82
  %70 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5082
  %call110 = call i64 @lto_input_sleb128(%struct.lto_input_block* %70), !dbg !5083
  store i64 %call110, i64* %len, align 8, !dbg !5084
  %71 = load i64, i64* %len, align 8, !dbg !5085
  %72 = load i64, i64* %len, align 8, !dbg !5085
  %conv111 = trunc i64 %72 to i32, !dbg !5085
  %conv112 = sext i32 %conv111 to i64, !dbg !5085
  %cmp113 = icmp eq i64 %71, %conv112, !dbg !5085
  br i1 %cmp113, label %cond.false116, label %cond.true115, !dbg !5085

cond.true115:                                     ; preds = %if.end109
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 673, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5085
  br label %cond.end117, !dbg !5085

cond.false116:                                    ; preds = %if.end109
  br label %cond.end117, !dbg !5085

cond.end117:                                      ; preds = %cond.false116, %cond.true115
  %cond118 = phi i32 [ 0, %cond.true115 ], [ 0, %cond.false116 ], !dbg !5085
  %73 = load i64, i64* %len, align 8, !dbg !5086
  %cmp119 = icmp sgt i64 %73, 0, !dbg !5088
  br i1 %cmp119, label %if.then121, label %if.end174, !dbg !5089

if.then121:                                       ; preds = %cond.end117
  %74 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 120), align 1, !dbg !5090
  %tobool122 = icmp ne i8 %74, 0, !dbg !5093
  br i1 %tobool122, label %if.then123, label %if.else, !dbg !5094

if.then123:                                       ; preds = %if.then121
  %75 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5095
  %eh124 = getelementptr inbounds %struct.function, %struct.function* %75, i32 0, i32 0, !dbg !5095
  %76 = load %struct.eh_status*, %struct.eh_status** %eh124, align 8, !dbg !5095
  %ehspec_data = getelementptr inbounds %struct.eh_status, %struct.eh_status* %76, i32 0, i32 5, !dbg !5095
  %arm_eabi = bitcast %union.eh_status_u* %ehspec_data to %struct.VEC_tree_gc**, !dbg !5095
  %77 = load i64, i64* %len, align 8, !dbg !5095
  %conv125 = trunc i64 %77 to i32, !dbg !5095
  call void @VEC_tree_gc_safe_grow(%struct.VEC_tree_gc** %arm_eabi, i32 %conv125), !dbg !5095
  store i64 0, i64* %i, align 8, !dbg !5097
  br label %for.cond126, !dbg !5099

for.cond126:                                      ; preds = %for.inc145, %if.then123
  %78 = load i64, i64* %i, align 8, !dbg !5100
  %79 = load i64, i64* %len, align 8, !dbg !5102
  %cmp127 = icmp slt i64 %78, %79, !dbg !5103
  br i1 %cmp127, label %for.body129, label %for.end147, !dbg !5104

for.body129:                                      ; preds = %for.cond126
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5105, metadata !DIExpression()), !dbg !5107
  %80 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5108
  %81 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5109
  %call130 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %80, %struct.data_in* %81), !dbg !5110
  store %union.tree_node* %call130, %union.tree_node** %t, align 8, !dbg !5107
  %82 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5111
  %eh131 = getelementptr inbounds %struct.function, %struct.function* %82, i32 0, i32 0, !dbg !5111
  %83 = load %struct.eh_status*, %struct.eh_status** %eh131, align 8, !dbg !5111
  %ehspec_data132 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %83, i32 0, i32 5, !dbg !5111
  %arm_eabi133 = bitcast %union.eh_status_u* %ehspec_data132 to %struct.VEC_tree_gc**, !dbg !5111
  %84 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi133, align 8, !dbg !5111
  %tobool134 = icmp ne %struct.VEC_tree_gc* %84, null, !dbg !5111
  br i1 %tobool134, label %cond.true135, label %cond.false140, !dbg !5111

cond.true135:                                     ; preds = %for.body129
  %85 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5111
  %eh136 = getelementptr inbounds %struct.function, %struct.function* %85, i32 0, i32 0, !dbg !5111
  %86 = load %struct.eh_status*, %struct.eh_status** %eh136, align 8, !dbg !5111
  %ehspec_data137 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %86, i32 0, i32 5, !dbg !5111
  %arm_eabi138 = bitcast %union.eh_status_u* %ehspec_data137 to %struct.VEC_tree_gc**, !dbg !5111
  %87 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %arm_eabi138, align 8, !dbg !5111
  %base139 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %87, i32 0, i32 0, !dbg !5111
  br label %cond.end141, !dbg !5111

cond.false140:                                    ; preds = %for.body129
  br label %cond.end141, !dbg !5111

cond.end141:                                      ; preds = %cond.false140, %cond.true135
  %cond142 = phi %struct.VEC_tree_base* [ %base139, %cond.true135 ], [ null, %cond.false140 ], !dbg !5111
  %88 = load i64, i64* %i, align 8, !dbg !5111
  %conv143 = trunc i64 %88 to i32, !dbg !5111
  %89 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5111
  %call144 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond142, i32 %conv143, %union.tree_node* %89), !dbg !5111
  br label %for.inc145, !dbg !5112

for.inc145:                                       ; preds = %cond.end141
  %90 = load i64, i64* %i, align 8, !dbg !5113
  %inc146 = add nsw i64 %90, 1, !dbg !5113
  store i64 %inc146, i64* %i, align 8, !dbg !5113
  br label %for.cond126, !dbg !5114, !llvm.loop !5115

for.end147:                                       ; preds = %for.cond126
  br label %if.end173, !dbg !5117

if.else:                                          ; preds = %if.then121
  %91 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5118
  %eh148 = getelementptr inbounds %struct.function, %struct.function* %91, i32 0, i32 0, !dbg !5118
  %92 = load %struct.eh_status*, %struct.eh_status** %eh148, align 8, !dbg !5118
  %ehspec_data149 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %92, i32 0, i32 5, !dbg !5118
  %other = bitcast %union.eh_status_u* %ehspec_data149 to %struct.VEC_uchar_gc**, !dbg !5118
  %93 = load i64, i64* %len, align 8, !dbg !5118
  %conv150 = trunc i64 %93 to i32, !dbg !5118
  call void @VEC_uchar_gc_safe_grow(%struct.VEC_uchar_gc** %other, i32 %conv150), !dbg !5118
  store i64 0, i64* %i, align 8, !dbg !5120
  br label %for.cond151, !dbg !5122

for.cond151:                                      ; preds = %for.inc170, %if.else
  %94 = load i64, i64* %i, align 8, !dbg !5123
  %95 = load i64, i64* %len, align 8, !dbg !5125
  %cmp152 = icmp slt i64 %94, %95, !dbg !5126
  br i1 %cmp152, label %for.body154, label %for.end172, !dbg !5127

for.body154:                                      ; preds = %for.cond151
  call void @llvm.dbg.declare(metadata i8* %c, metadata !5128, metadata !DIExpression()), !dbg !5130
  %96 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5131
  %call155 = call zeroext i8 @lto_input_1_unsigned(%struct.lto_input_block* %96), !dbg !5132
  store i8 %call155, i8* %c, align 1, !dbg !5130
  %97 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5133
  %eh156 = getelementptr inbounds %struct.function, %struct.function* %97, i32 0, i32 0, !dbg !5133
  %98 = load %struct.eh_status*, %struct.eh_status** %eh156, align 8, !dbg !5133
  %ehspec_data157 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %98, i32 0, i32 5, !dbg !5133
  %other158 = bitcast %union.eh_status_u* %ehspec_data157 to %struct.VEC_uchar_gc**, !dbg !5133
  %99 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other158, align 8, !dbg !5133
  %tobool159 = icmp ne %struct.VEC_uchar_gc* %99, null, !dbg !5133
  br i1 %tobool159, label %cond.true160, label %cond.false165, !dbg !5133

cond.true160:                                     ; preds = %for.body154
  %100 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5133
  %eh161 = getelementptr inbounds %struct.function, %struct.function* %100, i32 0, i32 0, !dbg !5133
  %101 = load %struct.eh_status*, %struct.eh_status** %eh161, align 8, !dbg !5133
  %ehspec_data162 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %101, i32 0, i32 5, !dbg !5133
  %other163 = bitcast %union.eh_status_u* %ehspec_data162 to %struct.VEC_uchar_gc**, !dbg !5133
  %102 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %other163, align 8, !dbg !5133
  %base164 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %102, i32 0, i32 0, !dbg !5133
  br label %cond.end166, !dbg !5133

cond.false165:                                    ; preds = %for.body154
  br label %cond.end166, !dbg !5133

cond.end166:                                      ; preds = %cond.false165, %cond.true160
  %cond167 = phi %struct.VEC_uchar_base* [ %base164, %cond.true160 ], [ null, %cond.false165 ], !dbg !5133
  %103 = load i64, i64* %i, align 8, !dbg !5133
  %conv168 = trunc i64 %103 to i32, !dbg !5133
  %104 = load i8, i8* %c, align 1, !dbg !5133
  %call169 = call zeroext i8 @VEC_uchar_base_replace(%struct.VEC_uchar_base* %cond167, i32 %conv168, i8 zeroext %104), !dbg !5133
  br label %for.inc170, !dbg !5134

for.inc170:                                       ; preds = %cond.end166
  %105 = load i64, i64* %i, align 8, !dbg !5135
  %inc171 = add nsw i64 %105, 1, !dbg !5135
  store i64 %inc171, i64* %i, align 8, !dbg !5135
  br label %for.cond151, !dbg !5136, !llvm.loop !5137

for.end172:                                       ; preds = %for.cond151
  br label %if.end173

if.end173:                                        ; preds = %for.end172, %for.end147
  br label %if.end174, !dbg !5139

if.end174:                                        ; preds = %if.end173, %cond.end117
  %106 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5140
  %107 = load i64, i64* %root_region, align 8, !dbg !5141
  call void @fixup_eh_region_pointers(%struct.function* %106, i64 %107), !dbg !5142
  %108 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5143
  %call175 = call i32 @input_record_start(%struct.lto_input_block* %108), !dbg !5144
  store i32 %call175, i32* %tag, align 4, !dbg !5145
  %109 = load i32, i32* %tag, align 4, !dbg !5146
  call void @lto_tag_check_range(i32 %109, i32 0, i32 0), !dbg !5147
  br label %return, !dbg !5148

return:                                           ; preds = %if.end174, %if.then
  ret void, !dbg !5148
}

; Function Attrs: noinline nounwind uwtable
define internal void @input_bb(%struct.lto_input_block* %ib, i32 %tag, %struct.data_in* %data_in, %struct.function* %fn) #0 !dbg !5149 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %tag.addr = alloca i32, align 4
  %data_in.addr = alloca %struct.data_in*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %index = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %region = alloca i64, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !5152, metadata !DIExpression()), !dbg !5153
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !5154, metadata !DIExpression()), !dbg !5155
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !5156, metadata !DIExpression()), !dbg !5157
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5158, metadata !DIExpression()), !dbg !5159
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5160, metadata !DIExpression()), !dbg !5161
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5162, metadata !DIExpression()), !dbg !5163
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5164, metadata !DIExpression()), !dbg !5165
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5166
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5166
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5166
  %cmp = icmp eq %struct.function* %add.ptr, %1, !dbg !5166
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5166

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1184, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5166
  br label %cond.end, !dbg !5166

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5166

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5166
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5167
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %2), !dbg !5168
  %conv = trunc i64 %call to i32, !dbg !5168
  store i32 %conv, i32* %index, align 4, !dbg !5169
  %3 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5170
  %cfg = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1, !dbg !5170
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5170
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !5170
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5170
  %tobool = icmp ne %struct.VEC_basic_block_gc* %5, null, !dbg !5170
  br i1 %tobool, label %cond.true1, label %cond.false4, !dbg !5170

cond.true1:                                       ; preds = %cond.end
  %6 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5170
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1, !dbg !5170
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5170
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 2, !dbg !5170
  %8 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !5170
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %8, i32 0, i32 0, !dbg !5170
  br label %cond.end5, !dbg !5170

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5170

cond.end5:                                        ; preds = %cond.false4, %cond.true1
  %cond6 = phi %struct.VEC_basic_block_base* [ %base, %cond.true1 ], [ null, %cond.false4 ], !dbg !5170
  %9 = load i32, i32* %index, align 4, !dbg !5170
  %call7 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond6, i32 %9), !dbg !5170
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %bb, align 8, !dbg !5171
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5172
  %call8 = call i64 @lto_input_sleb128(%struct.lto_input_block* %10), !dbg !5173
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5174
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 8, !dbg !5175
  store i64 %call8, i64* %count, align 8, !dbg !5176
  %12 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5177
  %call9 = call i64 @lto_input_sleb128(%struct.lto_input_block* %12), !dbg !5178
  %conv10 = trunc i64 %call9 to i32, !dbg !5178
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5179
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 10, !dbg !5180
  store i32 %conv10, i32* %loop_depth, align 4, !dbg !5181
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5182
  %call11 = call i64 @lto_input_sleb128(%struct.lto_input_block* %14), !dbg !5183
  %conv12 = trunc i64 %call11 to i32, !dbg !5183
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5184
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 11, !dbg !5185
  store i32 %conv12, i32* %frequency, align 8, !dbg !5186
  %16 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5187
  %call13 = call i64 @lto_input_sleb128(%struct.lto_input_block* %16), !dbg !5188
  %conv14 = trunc i64 %call13 to i32, !dbg !5188
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5189
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 13, !dbg !5190
  store i32 %conv14, i32* %flags, align 8, !dbg !5191
  %18 = load i32, i32* %tag.addr, align 4, !dbg !5192
  %cmp15 = icmp eq i32 %18, 224, !dbg !5194
  br i1 %cmp15, label %if.then, label %if.end, !dbg !5195

if.then:                                          ; preds = %cond.end5
  br label %while.end49, !dbg !5196

if.end:                                           ; preds = %cond.end5
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5197
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %19), !dbg !5198
  %20 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5198
  %21 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5198
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false), !dbg !5198
  %22 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5199
  %call17 = call i32 @input_record_start(%struct.lto_input_block* %22), !dbg !5200
  store i32 %call17, i32* %tag.addr, align 4, !dbg !5201
  br label %while.cond, !dbg !5202

while.cond:                                       ; preds = %if.end41, %if.end
  %23 = load i32, i32* %tag.addr, align 4, !dbg !5203
  %tobool18 = icmp ne i32 %23, 0, !dbg !5202
  br i1 %tobool18, label %while.body, label %while.end, !dbg !5202

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5204, metadata !DIExpression()), !dbg !5206
  %24 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5207
  %25 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5208
  %26 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5209
  %27 = load i32, i32* %tag.addr, align 4, !dbg !5210
  %call19 = call %union.gimple_statement_d* @input_gimple_stmt(%struct.lto_input_block* %24, %struct.data_in* %25, %struct.function* %26, i32 %27), !dbg !5211
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %stmt, align 8, !dbg !5206
  %28 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5212
  %tobool20 = icmp ne i32 %28, 0, !dbg !5212
  br i1 %tobool20, label %if.end26, label %land.lhs.true, !dbg !5214

land.lhs.true:                                    ; preds = %while.body
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5215
  %call21 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %29), !dbg !5216
  %conv22 = zext i8 %call21 to i32, !dbg !5216
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !5216
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !5217

if.then24:                                        ; preds = %land.lhs.true
  %call25 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !5218
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %stmt, align 8, !dbg !5219
  br label %if.end26, !dbg !5220

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %while.body
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5221
  call void @find_referenced_vars_in(%union.gimple_statement_d* %30), !dbg !5222
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5223
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %31, i32 0), !dbg !5224
  %32 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5225
  %call27 = call i32 @input_record_start(%struct.lto_input_block* %32), !dbg !5226
  store i32 %call27, i32* %tag.addr, align 4, !dbg !5227
  %33 = load i32, i32* %tag.addr, align 4, !dbg !5228
  call void (i32, i32, ...) @lto_tag_check_set(i32 %33, i32 2, i32 226, i32 0), !dbg !5229
  %34 = load i32, i32* %tag.addr, align 4, !dbg !5230
  %cmp28 = icmp eq i32 %34, 226, !dbg !5232
  br i1 %cmp28, label %if.then30, label %if.end41, !dbg !5233

if.then30:                                        ; preds = %if.end26
  call void @llvm.dbg.declare(metadata i64* %region, metadata !5234, metadata !DIExpression()), !dbg !5236
  %35 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5237
  %call31 = call i64 @lto_input_sleb128(%struct.lto_input_block* %35), !dbg !5238
  store i64 %call31, i64* %region, align 8, !dbg !5236
  %36 = load i64, i64* %region, align 8, !dbg !5239
  %37 = load i64, i64* %region, align 8, !dbg !5239
  %conv32 = trunc i64 %37 to i32, !dbg !5239
  %conv33 = sext i32 %conv32 to i64, !dbg !5239
  %cmp34 = icmp eq i64 %36, %conv33, !dbg !5239
  br i1 %cmp34, label %cond.false37, label %cond.true36, !dbg !5239

cond.true36:                                      ; preds = %if.then30
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5239
  br label %cond.end38, !dbg !5239

cond.false37:                                     ; preds = %if.then30
  br label %cond.end38, !dbg !5239

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !5239
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5240
  %39 = load i64, i64* %region, align 8, !dbg !5241
  %conv40 = trunc i64 %39 to i32, !dbg !5241
  call void @add_stmt_to_eh_lp(%union.gimple_statement_d* %38, i32 %conv40), !dbg !5242
  br label %if.end41, !dbg !5243

if.end41:                                         ; preds = %cond.end38, %if.end26
  %40 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5244
  %call42 = call i32 @input_record_start(%struct.lto_input_block* %40), !dbg !5245
  store i32 %call42, i32* %tag.addr, align 4, !dbg !5246
  br label %while.cond, !dbg !5202, !llvm.loop !5247

while.end:                                        ; preds = %while.cond
  %41 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5249
  %call43 = call i32 @input_record_start(%struct.lto_input_block* %41), !dbg !5250
  store i32 %call43, i32* %tag.addr, align 4, !dbg !5251
  br label %while.cond44, !dbg !5252

while.cond44:                                     ; preds = %while.body46, %while.end
  %42 = load i32, i32* %tag.addr, align 4, !dbg !5253
  %tobool45 = icmp ne i32 %42, 0, !dbg !5252
  br i1 %tobool45, label %while.body46, label %while.end49, !dbg !5252

while.body46:                                     ; preds = %while.cond44
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5254, metadata !DIExpression()), !dbg !5256
  %43 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5257
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5258
  %45 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5259
  %46 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5260
  %call47 = call %union.gimple_statement_d* @input_phi(%struct.lto_input_block* %43, %struct.basic_block_def* %44, %struct.data_in* %45, %struct.function* %46), !dbg !5261
  store %union.gimple_statement_d* %call47, %union.gimple_statement_d** %phi, align 8, !dbg !5256
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5262
  call void @find_referenced_vars_in(%union.gimple_statement_d* %47), !dbg !5263
  %48 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5264
  %call48 = call i32 @input_record_start(%struct.lto_input_block* %48), !dbg !5265
  store i32 %call48, i32* %tag.addr, align 4, !dbg !5266
  br label %while.cond44, !dbg !5252, !llvm.loop !5267

while.end49:                                      ; preds = %if.then, %while.cond44
  ret void, !dbg !5269
}

declare dso_local void @renumber_gimple_stmt_uids() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_stmt_max_uid(%struct.function* %fn) #0 !dbg !5270 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5274, metadata !DIExpression()), !dbg !5275
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5276
  %last_stmt_uid = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 13, !dbg !5277
  %1 = load i32, i32* %last_stmt_uid, align 8, !dbg !5277
  ret i32 %1, !dbg !5278
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5279 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5282, metadata !DIExpression()), !dbg !5283
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5284, metadata !DIExpression()), !dbg !5285
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5286, metadata !DIExpression()), !dbg !5287
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5288
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5289
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5290
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5291
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5292
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5293
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5294
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5295
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5296
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5297
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5298
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5299
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5300
  ret void, !dbg !5301
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5302 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5305, metadata !DIExpression()), !dbg !5306
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5307
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5307
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5308
  %conv = zext i1 %cmp to i32, !dbg !5308
  %conv1 = trunc i32 %conv to i8, !dbg !5309
  ret i8 %conv1, !dbg !5310
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5311 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5314, metadata !DIExpression()), !dbg !5315
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5316
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5316
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5317
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5317
  ret %union.gimple_statement_d* %1, !dbg !5318
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !5319 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5323, metadata !DIExpression()), !dbg !5324
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5325
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5326
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !5327
  %1 = load i32, i32* %uid, align 4, !dbg !5327
  ret i32 %1, !dbg !5328
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5329 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5333, metadata !DIExpression()), !dbg !5334
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5335
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5336
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5336
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5337
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5337
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5338
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5339
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5340
  ret void, !dbg !5341
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !5342 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !5345, metadata !DIExpression()), !dbg !5346
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !5347, metadata !DIExpression()), !dbg !5348
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !5349
  store i32 0, i32* %index, align 8, !dbg !5350
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !5351
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !5352
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !5353
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !5354
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !5354
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !5354
}

declare dso_local void @gimple_set_body(%union.tree_node*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5355 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5361, metadata !DIExpression()), !dbg !5362
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5363
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5364
  %1 = load i32, i32* %flags, align 8, !dbg !5364
  %and = and i32 %1, 512, !dbg !5365
  %tobool = icmp ne i32 %and, 0, !dbg !5365
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5366

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5367
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5368
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5369
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5369
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5367
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5370

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5371
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5372
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5373
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5373
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5374
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5374
  br label %cond.end, !dbg !5370

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5370

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5370
  ret %struct.gimple_seq_d* %cond, !dbg !5375
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5376 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5379, metadata !DIExpression()), !dbg !5380
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5381
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5381
  %5 = load i32, i32* %4, align 8, !dbg !5381
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5381
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5381
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5381
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5381
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5381

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5381
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5381
  %10 = load i32, i32* %9, align 8, !dbg !5381
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5381
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5381
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5381
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5381
  br label %cond.end, !dbg !5381

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5381

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5381
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5381
  %13 = load i32, i32* %index, align 8, !dbg !5381
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5381
  ret %struct.edge_def* %call2, !dbg !5382
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fixup_call_stmt_edges(%struct.cgraph_node* %orig, %union.gimple_statement_d** %stmts) #0 !dbg !5383 {
entry:
  %orig.addr = alloca %struct.cgraph_node*, align 8
  %stmts.addr = alloca %union.gimple_statement_d**, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %orig, %struct.cgraph_node** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %orig.addr, metadata !5384, metadata !DIExpression()), !dbg !5385
  store %union.gimple_statement_d** %stmts, %union.gimple_statement_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmts.addr, metadata !5386, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5388, metadata !DIExpression()), !dbg !5389
  br label %while.cond, !dbg !5390

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5391
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 12, !dbg !5392
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !5392
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !5390
  br i1 %tobool, label %while.body, label %while.end, !dbg !5390

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5393
  %clone_of1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 12, !dbg !5394
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of1, align 8, !dbg !5394
  store %struct.cgraph_node* %3, %struct.cgraph_node** %orig.addr, align 8, !dbg !5395
  br label %while.cond, !dbg !5390, !llvm.loop !5396

while.end:                                        ; preds = %while.cond
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5397
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts.addr, align 8, !dbg !5398
  call void @fixup_call_stmt_edges_1(%struct.cgraph_node* %4, %union.gimple_statement_d** %5), !dbg !5399
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5400
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 11, !dbg !5402
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !5402
  %tobool2 = icmp ne %struct.cgraph_node* %7, null, !dbg !5400
  br i1 %tobool2, label %if.then, label %if.end24, !dbg !5403

if.then:                                          ; preds = %while.end
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5404
  %clones3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 11, !dbg !5406
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %clones3, align 8, !dbg !5406
  store %struct.cgraph_node* %9, %struct.cgraph_node** %node, align 8, !dbg !5407
  br label %for.cond, !dbg !5408

for.cond:                                         ; preds = %if.end23, %if.then
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5409
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5411
  %cmp = icmp ne %struct.cgraph_node* %10, %11, !dbg !5412
  br i1 %cmp, label %for.body, label %for.end, !dbg !5413

for.body:                                         ; preds = %for.cond
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5414
  %13 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts.addr, align 8, !dbg !5416
  call void @fixup_call_stmt_edges_1(%struct.cgraph_node* %12, %union.gimple_statement_d** %13), !dbg !5417
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5418
  %clones4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 11, !dbg !5420
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %clones4, align 8, !dbg !5420
  %tobool5 = icmp ne %struct.cgraph_node* %15, null, !dbg !5418
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !5421

if.then6:                                         ; preds = %for.body
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5422
  %clones7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 11, !dbg !5423
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %clones7, align 8, !dbg !5423
  store %struct.cgraph_node* %17, %struct.cgraph_node** %node, align 8, !dbg !5424
  br label %if.end23, !dbg !5425

if.else:                                          ; preds = %for.body
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5426
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 9, !dbg !5428
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !5428
  %tobool8 = icmp ne %struct.cgraph_node* %19, null, !dbg !5426
  br i1 %tobool8, label %if.then9, label %if.else11, !dbg !5429

if.then9:                                         ; preds = %if.else
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5430
  %next_sibling_clone10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 9, !dbg !5431
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone10, align 8, !dbg !5431
  store %struct.cgraph_node* %21, %struct.cgraph_node** %node, align 8, !dbg !5432
  br label %if.end22, !dbg !5433

if.else11:                                        ; preds = %if.else
  br label %while.cond12, !dbg !5434

while.cond12:                                     ; preds = %while.body16, %if.else11
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5436
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5437
  %cmp13 = icmp ne %struct.cgraph_node* %22, %23, !dbg !5438
  br i1 %cmp13, label %land.rhs, label %land.end, !dbg !5439

land.rhs:                                         ; preds = %while.cond12
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5440
  %next_sibling_clone14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 9, !dbg !5441
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone14, align 8, !dbg !5441
  %tobool15 = icmp ne %struct.cgraph_node* %25, null, !dbg !5442
  %lnot = xor i1 %tobool15, true, !dbg !5442
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond12
  %26 = phi i1 [ false, %while.cond12 ], [ %lnot, %land.rhs ], !dbg !5443
  br i1 %26, label %while.body16, label %while.end18, !dbg !5434

while.body16:                                     ; preds = %land.end
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5444
  %clone_of17 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 12, !dbg !5445
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of17, align 8, !dbg !5445
  store %struct.cgraph_node* %28, %struct.cgraph_node** %node, align 8, !dbg !5446
  br label %while.cond12, !dbg !5434, !llvm.loop !5447

while.end18:                                      ; preds = %land.end
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5448
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !5450
  %cmp19 = icmp ne %struct.cgraph_node* %29, %30, !dbg !5451
  br i1 %cmp19, label %if.then20, label %if.end, !dbg !5452

if.then20:                                        ; preds = %while.end18
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5453
  %next_sibling_clone21 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 9, !dbg !5454
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone21, align 8, !dbg !5454
  store %struct.cgraph_node* %32, %struct.cgraph_node** %node, align 8, !dbg !5455
  br label %if.end, !dbg !5456

if.end:                                           ; preds = %if.then20, %while.end18
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then9
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then6
  br label %for.cond, !dbg !5457, !llvm.loop !5458

for.end:                                          ; preds = %for.cond
  br label %if.end24, !dbg !5459

if.end24:                                         ; preds = %for.end, %while.end
  ret void, !dbg !5460
}

declare dso_local void @execute_all_ipa_stmt_fixups(%struct.cgraph_node*, %union.gimple_statement_d**) #2

declare dso_local void @update_ssa(i32) #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @internal_error(i8*, ...) #2

declare dso_local i8* @lto_tag_name(i32) #2

declare dso_local void @init_ssanames(%struct.function*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !5461 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5466, metadata !DIExpression()), !dbg !5467
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5467
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5467
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5467

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5467
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5467
  %2 = load i32, i32* %num, align 8, !dbg !5467
  br label %cond.end, !dbg !5467

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5467
  ret i32 %cond, !dbg !5467
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !5468 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !5474, metadata !DIExpression()), !dbg !5473
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !5475, metadata !DIExpression()), !dbg !5473
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5473
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !5473
  %1 = load i32, i32* %num, align 8, !dbg !5473
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5473
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !5473
  %3 = load i32, i32* %alloc, align 4, !dbg !5473
  %cmp = icmp ult i32 %1, %3, !dbg !5473
  %conv = zext i1 %cmp to i32, !dbg !5473
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5473
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !5473
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5473
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !5473
  %6 = load i32, i32* %num1, align 8, !dbg !5473
  %inc = add i32 %6, 1, !dbg !5473
  store i32 %inc, i32* %num1, align 8, !dbg !5473
  %idxprom = zext i32 %6 to i64, !dbg !5473
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5473
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !5473
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !5473
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5473
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !5473
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5473
  ret %union.tree_node** %9, !dbg !5473
}

declare dso_local zeroext i8 @lto_input_1_unsigned(%struct.lto_input_block*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local void @set_default_def(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_tag_check_range(i32 %actual, i32 %tag1, i32 %tag2) #0 !dbg !5476 {
entry:
  %actual.addr = alloca i32, align 4
  %tag1.addr = alloca i32, align 4
  %tag2.addr = alloca i32, align 4
  store i32 %actual, i32* %actual.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %actual.addr, metadata !5479, metadata !DIExpression()), !dbg !5480
  store i32 %tag1, i32* %tag1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag1.addr, metadata !5481, metadata !DIExpression()), !dbg !5482
  store i32 %tag2, i32* %tag2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag2.addr, metadata !5483, metadata !DIExpression()), !dbg !5484
  %0 = load i32, i32* %actual.addr, align 4, !dbg !5485
  %1 = load i32, i32* %tag1.addr, align 4, !dbg !5487
  %cmp = icmp ult i32 %0, %1, !dbg !5488
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5489

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %actual.addr, align 4, !dbg !5490
  %3 = load i32, i32* %tag2.addr, align 4, !dbg !5491
  %cmp1 = icmp ugt i32 %2, %3, !dbg !5492
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5493

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i32, i32* %actual.addr, align 4, !dbg !5494
  %call = call i8* @lto_tag_name(i32 %4), !dbg !5495
  %5 = load i32, i32* %tag1.addr, align 4, !dbg !5496
  %call2 = call i8* @lto_tag_name(i32 %5), !dbg !5497
  %6 = load i32, i32* %tag2.addr, align 4, !dbg !5498
  %call3 = call i8* @lto_tag_name(i32 %6), !dbg !5499
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.4, i64 0, i64 0), i8* %call, i8* %call2, i8* %call3), !dbg !5500
  br label %if.end, !dbg !5500

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void, !dbg !5501
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_init_eh() #0 !dbg !3493 {
entry:
  %0 = load i8, i8* @lto_init_eh.eh_initialized_p, align 1, !dbg !5502
  %tobool = icmp ne i8 %0, 0, !dbg !5502
  br i1 %tobool, label %if.then, label %if.end, !dbg !5504

if.then:                                          ; preds = %entry
  br label %return, !dbg !5505

if.end:                                           ; preds = %entry
  store i32 1, i32* @flag_exceptions, align 4, !dbg !5506
  call void @init_eh(), !dbg !5507
  %call = call i32 @dwarf2out_do_frame(), !dbg !5508
  %tobool1 = icmp ne i32 %call, 0, !dbg !5508
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !5510

if.then2:                                         ; preds = %if.end
  call void @dwarf2out_frame_init(), !dbg !5511
  br label %if.end3, !dbg !5511

if.end3:                                          ; preds = %if.then2, %if.end
  store i8 1, i8* @lto_init_eh.eh_initialized_p, align 1, !dbg !5512
  br label %return, !dbg !5513

return:                                           ; preds = %if.end3, %if.then
  ret void, !dbg !5513
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_eh_region_gc_safe_grow(%struct.VEC_eh_region_gc** %vec_, i32 %size_) #0 !dbg !5514 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_eh_region_gc** %vec_, %struct.VEC_eh_region_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_gc*** %vec_.addr, metadata !5518, metadata !DIExpression()), !dbg !5519
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5520, metadata !DIExpression()), !dbg !5519
  %0 = load i32, i32* %size_.addr, align 4, !dbg !5519
  %cmp = icmp sge i32 %0, 0, !dbg !5519
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5519

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %1, align 8, !dbg !5519
  %tobool = icmp ne %struct.VEC_eh_region_gc* %2, null, !dbg !5519
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5519

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %4 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %3, align 8, !dbg !5519
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %4, i32 0, i32 0, !dbg !5519
  br label %cond.end, !dbg !5519

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !5519

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5519
  %call = call i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %cond), !dbg !5519
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5519
  %cmp1 = icmp ule i32 %call, %5, !dbg !5519
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !5521
  %land.ext = zext i1 %6 to i32, !dbg !5519
  %7 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %8 = load i32, i32* %size_.addr, align 4, !dbg !5519
  %9 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %10 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %9, align 8, !dbg !5519
  %tobool2 = icmp ne %struct.VEC_eh_region_gc* %10, null, !dbg !5519
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !5519

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %12 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %11, align 8, !dbg !5519
  %tobool4 = icmp ne %struct.VEC_eh_region_gc* %12, null, !dbg !5519
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5519

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %14 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %13, align 8, !dbg !5519
  %base6 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %14, i32 0, i32 0, !dbg !5519
  br label %cond.end8, !dbg !5519

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5519

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_eh_region_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5519
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %cond9, i32 0, i32 0, !dbg !5519
  %15 = load i32, i32* %num, align 8, !dbg !5519
  br label %cond.end11, !dbg !5519

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !5519

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !5519
  %sub = sub nsw i32 %8, %cond12, !dbg !5519
  %call13 = call i32 @VEC_eh_region_gc_reserve_exact(%struct.VEC_eh_region_gc** %7, i32 %sub), !dbg !5519
  %16 = load i32, i32* %size_.addr, align 4, !dbg !5519
  %17 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %18 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %17, align 8, !dbg !5519
  %tobool14 = icmp ne %struct.VEC_eh_region_gc* %18, null, !dbg !5519
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5519

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5519
  %20 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %19, align 8, !dbg !5519
  %base16 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %20, i32 0, i32 0, !dbg !5519
  br label %cond.end18, !dbg !5519

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !5519

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_eh_region_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5519
  %num20 = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %cond19, i32 0, i32 0, !dbg !5519
  store i32 %16, i32* %num20, align 8, !dbg !5519
  ret void, !dbg !5519
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @input_eh_region(%struct.lto_input_block* %ib, %struct.data_in* %data_in, i32 %ix) #0 !dbg !5522 {
entry:
  %retval = alloca %struct.eh_region_d*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ix.addr = alloca i32, align 4
  %tag = alloca i32, align 4
  %r = alloca %struct.eh_region_d*, align 8
  %last_catch = alloca %struct.eh_catch_d*, align 8
  %l = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !5525, metadata !DIExpression()), !dbg !5526
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !5527, metadata !DIExpression()), !dbg !5528
  store i32 %ix, i32* %ix.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix.addr, metadata !5529, metadata !DIExpression()), !dbg !5530
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !5531, metadata !DIExpression()), !dbg !5532
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !5533, metadata !DIExpression()), !dbg !5534
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5535
  %call = call i32 @input_record_start(%struct.lto_input_block* %0), !dbg !5536
  store i32 %call, i32* %tag, align 4, !dbg !5537
  %1 = load i32, i32* %tag, align 4, !dbg !5538
  %cmp = icmp eq i32 %1, 0, !dbg !5540
  br i1 %cmp, label %if.then, label %if.end, !dbg !5541

if.then:                                          ; preds = %entry
  store %struct.eh_region_d* null, %struct.eh_region_d** %retval, align 8, !dbg !5542
  br label %return, !dbg !5542

if.end:                                           ; preds = %entry
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 88), !dbg !5543
  %2 = bitcast i8* %call1 to %struct.eh_region_d*, !dbg !5543
  store %struct.eh_region_d* %2, %struct.eh_region_d** %r, align 8, !dbg !5544
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5545
  %call2 = call i64 @lto_input_sleb128(%struct.lto_input_block* %3), !dbg !5546
  %conv = trunc i64 %call2 to i32, !dbg !5546
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5547
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 3, !dbg !5548
  store i32 %conv, i32* %index, align 8, !dbg !5549
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5550
  %index3 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %5, i32 0, i32 3, !dbg !5550
  %6 = load i32, i32* %index3, align 8, !dbg !5550
  %7 = load i32, i32* %ix.addr, align 4, !dbg !5550
  %cmp4 = icmp eq i32 %6, %7, !dbg !5550
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !5550

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 438, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5550
  br label %cond.end, !dbg !5550

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5550
  %8 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5551
  %call6 = call i64 @lto_input_sleb128(%struct.lto_input_block* %8), !dbg !5552
  %9 = inttoptr i64 %call6 to %struct.eh_region_d*, !dbg !5553
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5554
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 0, !dbg !5555
  store %struct.eh_region_d* %9, %struct.eh_region_d** %outer, align 8, !dbg !5556
  %11 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5557
  %call7 = call i64 @lto_input_sleb128(%struct.lto_input_block* %11), !dbg !5558
  %12 = inttoptr i64 %call7 to %struct.eh_region_d*, !dbg !5559
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5560
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %13, i32 0, i32 1, !dbg !5561
  store %struct.eh_region_d* %12, %struct.eh_region_d** %inner, align 8, !dbg !5562
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5563
  %call8 = call i64 @lto_input_sleb128(%struct.lto_input_block* %14), !dbg !5564
  %15 = inttoptr i64 %call8 to %struct.eh_region_d*, !dbg !5565
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5566
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 2, !dbg !5567
  store %struct.eh_region_d* %15, %struct.eh_region_d** %next_peer, align 8, !dbg !5568
  %17 = load i32, i32* %tag, align 4, !dbg !5569
  switch i32 %17, label %sw.default [
    i32 230, label %sw.bb
    i32 231, label %sw.bb9
    i32 232, label %sw.bb15
    i32 233, label %sw.bb29
  ], !dbg !5570

sw.bb:                                            ; preds = %cond.end
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5571
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %18, i32 0, i32 4, !dbg !5573
  store i32 0, i32* %type, align 4, !dbg !5574
  br label %sw.epilog, !dbg !5575

sw.bb9:                                           ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %last_catch, metadata !5576, metadata !DIExpression()), !dbg !5578
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5579
  %type10 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %19, i32 0, i32 4, !dbg !5580
  store i32 1, i32* %type10, align 4, !dbg !5581
  %20 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5582
  %21 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5583
  %call11 = call %struct.eh_catch_d* @lto_input_eh_catch_list(%struct.lto_input_block* %20, %struct.data_in* %21, %struct.eh_catch_d** %last_catch), !dbg !5584
  %22 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5585
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %22, i32 0, i32 5, !dbg !5586
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !5587
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !5588
  store %struct.eh_catch_d* %call11, %struct.eh_catch_d** %first_catch, align 8, !dbg !5589
  %23 = load %struct.eh_catch_d*, %struct.eh_catch_d** %last_catch, align 8, !dbg !5590
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5591
  %u12 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %24, i32 0, i32 5, !dbg !5592
  %eh_try13 = bitcast %union.eh_region_u* %u12 to %struct.eh_region_u_try*, !dbg !5593
  %last_catch14 = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try13, i32 0, i32 1, !dbg !5594
  store %struct.eh_catch_d* %23, %struct.eh_catch_d** %last_catch14, align 8, !dbg !5595
  br label %sw.epilog, !dbg !5596

sw.bb15:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %l, metadata !5597, metadata !DIExpression()), !dbg !5599
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5600
  %type16 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %25, i32 0, i32 4, !dbg !5601
  store i32 2, i32* %type16, align 4, !dbg !5602
  %26 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5603
  %27 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5604
  %call17 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %26, %struct.data_in* %27), !dbg !5605
  %28 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5606
  %u18 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %28, i32 0, i32 5, !dbg !5607
  %allowed = bitcast %union.eh_region_u* %u18 to %struct.eh_region_u_allowed*, !dbg !5608
  %type_list = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 0, !dbg !5609
  store %union.tree_node* %call17, %union.tree_node** %type_list, align 8, !dbg !5610
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5611
  %30 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5612
  %call19 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %29, %struct.data_in* %30), !dbg !5613
  %31 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5614
  %u20 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %31, i32 0, i32 5, !dbg !5615
  %allowed21 = bitcast %union.eh_region_u* %u20 to %struct.eh_region_u_allowed*, !dbg !5616
  %label = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed21, i32 0, i32 1, !dbg !5617
  store %union.tree_node* %call19, %union.tree_node** %label, align 8, !dbg !5618
  %32 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5619
  %call22 = call i64 @lto_input_uleb128(%struct.lto_input_block* %32), !dbg !5620
  %conv23 = trunc i64 %call22 to i32, !dbg !5620
  %33 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5621
  %u24 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %33, i32 0, i32 5, !dbg !5622
  %allowed25 = bitcast %union.eh_region_u* %u24 to %struct.eh_region_u_allowed*, !dbg !5623
  %filter = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed25, i32 0, i32 2, !dbg !5624
  store i32 %conv23, i32* %filter, align 8, !dbg !5625
  %34 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5626
  %u26 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %34, i32 0, i32 5, !dbg !5628
  %allowed27 = bitcast %union.eh_region_u* %u26 to %struct.eh_region_u_allowed*, !dbg !5629
  %type_list28 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed27, i32 0, i32 0, !dbg !5630
  %35 = load %union.tree_node*, %union.tree_node** %type_list28, align 8, !dbg !5630
  store %union.tree_node* %35, %union.tree_node** %l, align 8, !dbg !5631
  br label %for.cond, !dbg !5632

for.cond:                                         ; preds = %for.inc, %sw.bb15
  %36 = load %union.tree_node*, %union.tree_node** %l, align 8, !dbg !5633
  %tobool = icmp ne %union.tree_node* %36, null, !dbg !5635
  br i1 %tobool, label %for.body, label %for.end, !dbg !5635

for.body:                                         ; preds = %for.cond
  %37 = load %union.tree_node*, %union.tree_node** %l, align 8, !dbg !5636
  %list = bitcast %union.tree_node* %37 to %struct.tree_list*, !dbg !5636
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5636
  %38 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5636
  call void @add_type_for_runtime(%union.tree_node* %38), !dbg !5637
  br label %for.inc, !dbg !5637

for.inc:                                          ; preds = %for.body
  %39 = load %union.tree_node*, %union.tree_node** %l, align 8, !dbg !5638
  %common = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !5638
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5638
  %40 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5638
  store %union.tree_node* %40, %union.tree_node** %l, align 8, !dbg !5639
  br label %for.cond, !dbg !5640, !llvm.loop !5641

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !5643

sw.bb29:                                          ; preds = %cond.end
  %41 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5644
  %type30 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %41, i32 0, i32 4, !dbg !5645
  store i32 3, i32* %type30, align 4, !dbg !5646
  %42 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5647
  %43 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5648
  %call31 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %42, %struct.data_in* %43), !dbg !5649
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5650
  %u32 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %44, i32 0, i32 5, !dbg !5651
  %must_not_throw = bitcast %union.eh_region_u* %u32 to %struct.eh_region_u_must_not_throw*, !dbg !5652
  %failure_decl = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw, i32 0, i32 0, !dbg !5653
  store %union.tree_node* %call31, %union.tree_node** %failure_decl, align 8, !dbg !5654
  %45 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5655
  %46 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5656
  %call33 = call i32 @lto_input_location(%struct.lto_input_block* %45, %struct.data_in* %46), !dbg !5657
  %47 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5658
  %u34 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %47, i32 0, i32 5, !dbg !5659
  %must_not_throw35 = bitcast %union.eh_region_u* %u34 to %struct.eh_region_u_must_not_throw*, !dbg !5660
  %failure_loc = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw35, i32 0, i32 1, !dbg !5661
  store i32 %call33, i32* %failure_loc, align 8, !dbg !5662
  br label %sw.epilog, !dbg !5663

sw.default:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 483, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5664
  br label %sw.epilog, !dbg !5665

sw.epilog:                                        ; preds = %sw.default, %sw.bb29, %for.end, %sw.bb9, %sw.bb
  %48 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5666
  %call36 = call i64 @lto_input_sleb128(%struct.lto_input_block* %48), !dbg !5667
  %49 = inttoptr i64 %call36 to %struct.eh_landing_pad_d*, !dbg !5668
  %50 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5669
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %50, i32 0, i32 6, !dbg !5670
  store %struct.eh_landing_pad_d* %49, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !5671
  %51 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5672
  store %struct.eh_region_d* %51, %struct.eh_region_d** %retval, align 8, !dbg !5673
  br label %return, !dbg !5673

return:                                           ; preds = %sw.epilog, %if.then
  %52 = load %struct.eh_region_d*, %struct.eh_region_d** %retval, align 8, !dbg !5674
  ret %struct.eh_region_d* %52, !dbg !5674
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @VEC_eh_region_base_replace(%struct.VEC_eh_region_base* %vec_, i32 %ix_, %struct.eh_region_d* %obj_) #0 !dbg !5675 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.eh_region_d*, align 8
  %old_obj_ = alloca %struct.eh_region_d*, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !5679, metadata !DIExpression()), !dbg !5680
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5681, metadata !DIExpression()), !dbg !5680
  store %struct.eh_region_d* %obj_, %struct.eh_region_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %obj_.addr, metadata !5682, metadata !DIExpression()), !dbg !5680
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %old_obj_, metadata !5683, metadata !DIExpression()), !dbg !5680
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5680
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5680
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %1, i32 0, i32 0, !dbg !5680
  %2 = load i32, i32* %num, align 8, !dbg !5680
  %cmp = icmp ult i32 %0, %2, !dbg !5680
  %conv = zext i1 %cmp to i32, !dbg !5680
  %3 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5680
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %3, i32 0, i32 2, !dbg !5680
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5680
  %idxprom = zext i32 %4 to i64, !dbg !5680
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !5680
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !5680
  store %struct.eh_region_d* %5, %struct.eh_region_d** %old_obj_, align 8, !dbg !5680
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %obj_.addr, align 8, !dbg !5680
  %7 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5680
  %vec1 = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %7, i32 0, i32 2, !dbg !5680
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5680
  %idxprom2 = zext i32 %8 to i64, !dbg !5680
  %arrayidx3 = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec1, i64 0, i64 %idxprom2, !dbg !5680
  store %struct.eh_region_d* %6, %struct.eh_region_d** %arrayidx3, align 8, !dbg !5680
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %old_obj_, align 8, !dbg !5680
  ret %struct.eh_region_d* %9, !dbg !5680
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_eh_landing_pad_gc_safe_grow(%struct.VEC_eh_landing_pad_gc** %vec_, i32 %size_) #0 !dbg !5684 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_gc** %vec_, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_gc*** %vec_.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5690, metadata !DIExpression()), !dbg !5689
  %0 = load i32, i32* %size_.addr, align 4, !dbg !5689
  %cmp = icmp sge i32 %0, 0, !dbg !5689
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5689

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %1, align 8, !dbg !5689
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !5689
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5689

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %4 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %3, align 8, !dbg !5689
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %4, i32 0, i32 0, !dbg !5689
  br label %cond.end, !dbg !5689

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !5689

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5689
  %call = call i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %cond), !dbg !5689
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5689
  %cmp1 = icmp ule i32 %call, %5, !dbg !5689
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !5691
  %land.ext = zext i1 %6 to i32, !dbg !5689
  %7 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %8 = load i32, i32* %size_.addr, align 4, !dbg !5689
  %9 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %10 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %9, align 8, !dbg !5689
  %tobool2 = icmp ne %struct.VEC_eh_landing_pad_gc* %10, null, !dbg !5689
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !5689

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %12 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %11, align 8, !dbg !5689
  %tobool4 = icmp ne %struct.VEC_eh_landing_pad_gc* %12, null, !dbg !5689
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5689

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %14 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %13, align 8, !dbg !5689
  %base6 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %14, i32 0, i32 0, !dbg !5689
  br label %cond.end8, !dbg !5689

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5689

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_eh_landing_pad_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5689
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %cond9, i32 0, i32 0, !dbg !5689
  %15 = load i32, i32* %num, align 8, !dbg !5689
  br label %cond.end11, !dbg !5689

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !5689

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !5689
  %sub = sub nsw i32 %8, %cond12, !dbg !5689
  %call13 = call i32 @VEC_eh_landing_pad_gc_reserve_exact(%struct.VEC_eh_landing_pad_gc** %7, i32 %sub), !dbg !5689
  %16 = load i32, i32* %size_.addr, align 4, !dbg !5689
  %17 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %18 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %17, align 8, !dbg !5689
  %tobool14 = icmp ne %struct.VEC_eh_landing_pad_gc* %18, null, !dbg !5689
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5689

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !5689
  %20 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %19, align 8, !dbg !5689
  %base16 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %20, i32 0, i32 0, !dbg !5689
  br label %cond.end18, !dbg !5689

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !5689

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_eh_landing_pad_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5689
  %num20 = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %cond19, i32 0, i32 0, !dbg !5689
  store i32 %16, i32* %num20, align 8, !dbg !5689
  ret void, !dbg !5689
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d* @input_eh_lp(%struct.lto_input_block* %ib, %struct.data_in* %data_in, i32 %ix) #0 !dbg !5692 {
entry:
  %retval = alloca %struct.eh_landing_pad_d*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ix.addr = alloca i32, align 4
  %tag = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !5695, metadata !DIExpression()), !dbg !5696
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !5697, metadata !DIExpression()), !dbg !5698
  store i32 %ix, i32* %ix.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix.addr, metadata !5699, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !5701, metadata !DIExpression()), !dbg !5702
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5703, metadata !DIExpression()), !dbg !5704
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5705
  %call = call i32 @input_record_start(%struct.lto_input_block* %0), !dbg !5706
  store i32 %call, i32* %tag, align 4, !dbg !5707
  %1 = load i32, i32* %tag, align 4, !dbg !5708
  %cmp = icmp eq i32 %1, 0, !dbg !5710
  br i1 %cmp, label %if.then, label %if.end, !dbg !5711

if.then:                                          ; preds = %entry
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %retval, align 8, !dbg !5712
  br label %return, !dbg !5712

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tag, align 4, !dbg !5713
  call void @lto_tag_check_range(i32 %2, i32 234, i32 234), !dbg !5714
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 40), !dbg !5715
  %3 = bitcast i8* %call1 to %struct.eh_landing_pad_d*, !dbg !5715
  store %struct.eh_landing_pad_d* %3, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5716
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5717
  %call2 = call i64 @lto_input_sleb128(%struct.lto_input_block* %4), !dbg !5718
  %conv = trunc i64 %call2 to i32, !dbg !5718
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5719
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %5, i32 0, i32 4, !dbg !5720
  store i32 %conv, i32* %index, align 8, !dbg !5721
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5722
  %index3 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %6, i32 0, i32 4, !dbg !5722
  %7 = load i32, i32* %index3, align 8, !dbg !5722
  %8 = load i32, i32* %ix.addr, align 4, !dbg !5722
  %cmp4 = icmp eq i32 %7, %8, !dbg !5722
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !5722

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5722
  br label %cond.end, !dbg !5722

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5722

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5722
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5723
  %call6 = call i64 @lto_input_sleb128(%struct.lto_input_block* %9), !dbg !5724
  %10 = inttoptr i64 %call6 to %struct.eh_landing_pad_d*, !dbg !5725
  %11 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5726
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %11, i32 0, i32 0, !dbg !5727
  store %struct.eh_landing_pad_d* %10, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !5728
  %12 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5729
  %call7 = call i64 @lto_input_sleb128(%struct.lto_input_block* %12), !dbg !5730
  %13 = inttoptr i64 %call7 to %struct.eh_region_d*, !dbg !5731
  %14 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5732
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %14, i32 0, i32 1, !dbg !5733
  store %struct.eh_region_d* %13, %struct.eh_region_d** %region, align 8, !dbg !5734
  %15 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5735
  %16 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5736
  %call8 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %15, %struct.data_in* %16), !dbg !5737
  %17 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5738
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %17, i32 0, i32 2, !dbg !5739
  store %union.tree_node* %call8, %union.tree_node** %post_landing_pad, align 8, !dbg !5740
  %18 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5741
  store %struct.eh_landing_pad_d* %18, %struct.eh_landing_pad_d** %retval, align 8, !dbg !5742
  br label %return, !dbg !5742

return:                                           ; preds = %cond.end, %if.then
  %19 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %retval, align 8, !dbg !5743
  ret %struct.eh_landing_pad_d* %19, !dbg !5743
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_replace(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d* %obj_) #0 !dbg !5744 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.eh_landing_pad_d*, align 8
  %old_obj_ = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !5748, metadata !DIExpression()), !dbg !5749
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5750, metadata !DIExpression()), !dbg !5749
  store %struct.eh_landing_pad_d* %obj_, %struct.eh_landing_pad_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %obj_.addr, metadata !5751, metadata !DIExpression()), !dbg !5749
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %old_obj_, metadata !5752, metadata !DIExpression()), !dbg !5749
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5749
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !5749
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %1, i32 0, i32 0, !dbg !5749
  %2 = load i32, i32* %num, align 8, !dbg !5749
  %cmp = icmp ult i32 %0, %2, !dbg !5749
  %conv = zext i1 %cmp to i32, !dbg !5749
  %3 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !5749
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %3, i32 0, i32 2, !dbg !5749
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5749
  %idxprom = zext i32 %4 to i64, !dbg !5749
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !5749
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !5749
  store %struct.eh_landing_pad_d* %5, %struct.eh_landing_pad_d** %old_obj_, align 8, !dbg !5749
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %obj_.addr, align 8, !dbg !5749
  %7 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !5749
  %vec1 = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %7, i32 0, i32 2, !dbg !5749
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5749
  %idxprom2 = zext i32 %8 to i64, !dbg !5749
  %arrayidx3 = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec1, i64 0, i64 %idxprom2, !dbg !5749
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %arrayidx3, align 8, !dbg !5749
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_obj_, align 8, !dbg !5749
  ret %struct.eh_landing_pad_d* %9, !dbg !5749
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_gc_safe_grow(%struct.VEC_tree_gc** %vec_, i32 %size_) #0 !dbg !5753 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !5757, metadata !DIExpression()), !dbg !5758
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5759, metadata !DIExpression()), !dbg !5758
  %0 = load i32, i32* %size_.addr, align 4, !dbg !5758
  %cmp = icmp sge i32 %0, 0, !dbg !5758
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5758

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !5758
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !5758
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5758

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !5758
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !5758
  br label %cond.end, !dbg !5758

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !5758

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5758
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5758
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5758
  %cmp1 = icmp ule i32 %call, %5, !dbg !5758
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !5760
  %land.ext = zext i1 %6 to i32, !dbg !5758
  %7 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %8 = load i32, i32* %size_.addr, align 4, !dbg !5758
  %9 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %9, align 8, !dbg !5758
  %tobool2 = icmp ne %struct.VEC_tree_gc* %10, null, !dbg !5758
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !5758

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %11, align 8, !dbg !5758
  %tobool4 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !5758
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5758

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %13, align 8, !dbg !5758
  %base6 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %14, i32 0, i32 0, !dbg !5758
  br label %cond.end8, !dbg !5758

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5758

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_tree_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5758
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %cond9, i32 0, i32 0, !dbg !5758
  %15 = load i32, i32* %num, align 8, !dbg !5758
  br label %cond.end11, !dbg !5758

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !5758

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !5758
  %sub = sub nsw i32 %8, %cond12, !dbg !5758
  %call13 = call i32 @VEC_tree_gc_reserve_exact(%struct.VEC_tree_gc** %7, i32 %sub), !dbg !5758
  %16 = load i32, i32* %size_.addr, align 4, !dbg !5758
  %17 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %18 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %17, align 8, !dbg !5758
  %tobool14 = icmp ne %struct.VEC_tree_gc* %18, null, !dbg !5758
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5758

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !5758
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %19, align 8, !dbg !5758
  %base16 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %20, i32 0, i32 0, !dbg !5758
  br label %cond.end18, !dbg !5758

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !5758

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5758
  %num20 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %cond19, i32 0, i32 0, !dbg !5758
  store i32 %16, i32* %num20, align 8, !dbg !5758
  ret void, !dbg !5758
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !5761 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %old_obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5764, metadata !DIExpression()), !dbg !5765
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5766, metadata !DIExpression()), !dbg !5765
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !5767, metadata !DIExpression()), !dbg !5765
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_obj_, metadata !5768, metadata !DIExpression()), !dbg !5765
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5765
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5765
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5765
  %2 = load i32, i32* %num, align 8, !dbg !5765
  %cmp = icmp ult i32 %0, %2, !dbg !5765
  %conv = zext i1 %cmp to i32, !dbg !5765
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5765
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !5765
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5765
  %idxprom = zext i32 %4 to i64, !dbg !5765
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5765
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5765
  store %union.tree_node* %5, %union.tree_node** %old_obj_, align 8, !dbg !5765
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !5765
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5765
  %vec1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !5765
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5765
  %idxprom2 = zext i32 %8 to i64, !dbg !5765
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec1, i64 0, i64 %idxprom2, !dbg !5765
  store %union.tree_node* %6, %union.tree_node** %arrayidx3, align 8, !dbg !5765
  %9 = load %union.tree_node*, %union.tree_node** %old_obj_, align 8, !dbg !5765
  ret %union.tree_node* %9, !dbg !5765
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_uchar_gc_safe_grow(%struct.VEC_uchar_gc** %vec_, i32 %size_) #0 !dbg !5769 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_uchar_gc** %vec_, %struct.VEC_uchar_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_gc*** %vec_.addr, metadata !5773, metadata !DIExpression()), !dbg !5774
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !5775, metadata !DIExpression()), !dbg !5774
  %0 = load i32, i32* %size_.addr, align 4, !dbg !5774
  %cmp = icmp sge i32 %0, 0, !dbg !5774
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5774

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %2 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %1, align 8, !dbg !5774
  %tobool = icmp ne %struct.VEC_uchar_gc* %2, null, !dbg !5774
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5774

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %4 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %3, align 8, !dbg !5774
  %base = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %4, i32 0, i32 0, !dbg !5774
  br label %cond.end, !dbg !5774

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !5774

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_uchar_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5774
  %call = call i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %cond), !dbg !5774
  %5 = load i32, i32* %size_.addr, align 4, !dbg !5774
  %cmp1 = icmp ule i32 %call, %5, !dbg !5774
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !5776
  %land.ext = zext i1 %6 to i32, !dbg !5774
  %7 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %8 = load i32, i32* %size_.addr, align 4, !dbg !5774
  %9 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %10 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %9, align 8, !dbg !5774
  %tobool2 = icmp ne %struct.VEC_uchar_gc* %10, null, !dbg !5774
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !5774

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %12 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %11, align 8, !dbg !5774
  %tobool4 = icmp ne %struct.VEC_uchar_gc* %12, null, !dbg !5774
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5774

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %14 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %13, align 8, !dbg !5774
  %base6 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %14, i32 0, i32 0, !dbg !5774
  br label %cond.end8, !dbg !5774

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5774

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_uchar_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5774
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %cond9, i32 0, i32 0, !dbg !5774
  %15 = load i32, i32* %num, align 4, !dbg !5774
  br label %cond.end11, !dbg !5774

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !5774

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !5774
  %sub = sub nsw i32 %8, %cond12, !dbg !5774
  %call13 = call i32 @VEC_uchar_gc_reserve_exact(%struct.VEC_uchar_gc** %7, i32 %sub), !dbg !5774
  %16 = load i32, i32* %size_.addr, align 4, !dbg !5774
  %17 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %18 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %17, align 8, !dbg !5774
  %tobool14 = icmp ne %struct.VEC_uchar_gc* %18, null, !dbg !5774
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5774

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !5774
  %20 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %19, align 8, !dbg !5774
  %base16 = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %20, i32 0, i32 0, !dbg !5774
  br label %cond.end18, !dbg !5774

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !5774

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_uchar_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5774
  %num20 = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %cond19, i32 0, i32 0, !dbg !5774
  store i32 %16, i32* %num20, align 4, !dbg !5774
  ret void, !dbg !5774
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @VEC_uchar_base_replace(%struct.VEC_uchar_base* %vec_, i32 %ix_, i8 zeroext %obj_) #0 !dbg !5777 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca i8, align 1
  %old_obj_ = alloca i8, align 1
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !5781, metadata !DIExpression()), !dbg !5782
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5783, metadata !DIExpression()), !dbg !5782
  store i8 %obj_, i8* %obj_.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %obj_.addr, metadata !5784, metadata !DIExpression()), !dbg !5782
  call void @llvm.dbg.declare(metadata i8* %old_obj_, metadata !5785, metadata !DIExpression()), !dbg !5782
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5782
  %1 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !5782
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %1, i32 0, i32 0, !dbg !5782
  %2 = load i32, i32* %num, align 4, !dbg !5782
  %cmp = icmp ult i32 %0, %2, !dbg !5782
  %conv = zext i1 %cmp to i32, !dbg !5782
  %3 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !5782
  %vec = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %3, i32 0, i32 2, !dbg !5782
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5782
  %idxprom = zext i32 %4 to i64, !dbg !5782
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 %idxprom, !dbg !5782
  %5 = load i8, i8* %arrayidx, align 1, !dbg !5782
  store i8 %5, i8* %old_obj_, align 1, !dbg !5782
  %6 = load i8, i8* %obj_.addr, align 1, !dbg !5782
  %7 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !5782
  %vec1 = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %7, i32 0, i32 2, !dbg !5782
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5782
  %idxprom2 = zext i32 %8 to i64, !dbg !5782
  %arrayidx3 = getelementptr inbounds [1 x i8], [1 x i8]* %vec1, i64 0, i64 %idxprom2, !dbg !5782
  store i8 %6, i8* %arrayidx3, align 1, !dbg !5782
  %9 = load i8, i8* %old_obj_, align 1, !dbg !5782
  ret i8 %9, !dbg !5782
}

; Function Attrs: noinline nounwind uwtable
define internal void @fixup_eh_region_pointers(%struct.function* %fn, i64 %root_region) #0 !dbg !5786 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  %root_region.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %eh_array = alloca %struct.VEC_eh_region_gc*, align 8
  %lp_array = alloca %struct.VEC_eh_landing_pad_gc*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !5789, metadata !DIExpression()), !dbg !5790
  store i64 %root_region, i64* %root_region.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %root_region.addr, metadata !5791, metadata !DIExpression()), !dbg !5792
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5793, metadata !DIExpression()), !dbg !5794
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_gc** %eh_array, metadata !5795, metadata !DIExpression()), !dbg !5796
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5797
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !5798
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5798
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 1, !dbg !5799
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !5799
  store %struct.VEC_eh_region_gc* %2, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5796
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_gc** %lp_array, metadata !5800, metadata !DIExpression()), !dbg !5801
  %3 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5802
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 0, !dbg !5803
  %4 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !5803
  %lp_array2 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 2, !dbg !5804
  %5 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array2, align 8, !dbg !5804
  store %struct.VEC_eh_landing_pad_gc* %5, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5801
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !5805, metadata !DIExpression()), !dbg !5806
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5807, metadata !DIExpression()), !dbg !5808
  %6 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5809
  %tobool = icmp ne %struct.VEC_eh_region_gc* %6, null, !dbg !5809
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !5809

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5809
  %tobool3 = icmp ne %struct.VEC_eh_landing_pad_gc* %7, null, !dbg !5809
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !5809

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 533, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5809
  br label %cond.end, !dbg !5809

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5809

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5809
  %8 = load i64, i64* %root_region.addr, align 8, !dbg !5810
  %cmp = icmp sge i64 %8, 0, !dbg !5810
  br i1 %cmp, label %cond.false5, label %cond.true4, !dbg !5810

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 535, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5810
  br label %cond.end6, !dbg !5810

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !5810

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !5810
  %9 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5811
  %tobool8 = icmp ne %struct.VEC_eh_region_gc* %9, null, !dbg !5811
  br i1 %tobool8, label %cond.true9, label %cond.false10, !dbg !5811

cond.true9:                                       ; preds = %cond.end6
  %10 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5811
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %10, i32 0, i32 0, !dbg !5811
  br label %cond.end11, !dbg !5811

cond.false10:                                     ; preds = %cond.end6
  br label %cond.end11, !dbg !5811

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi %struct.VEC_eh_region_base* [ %base, %cond.true9 ], [ null, %cond.false10 ], !dbg !5811
  %11 = load i64, i64* %root_region.addr, align 8, !dbg !5811
  %conv = trunc i64 %11 to i32, !dbg !5811
  %call = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond12, i32 %conv), !dbg !5811
  %12 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !5812
  %eh13 = getelementptr inbounds %struct.function, %struct.function* %12, i32 0, i32 0, !dbg !5813
  %13 = load %struct.eh_status*, %struct.eh_status** %eh13, align 8, !dbg !5813
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %13, i32 0, i32 0, !dbg !5814
  store %struct.eh_region_d* %call, %struct.eh_region_d** %region_tree, align 8, !dbg !5815
  store i32 0, i32* %i, align 4, !dbg !5816
  br label %for.cond, !dbg !5818

for.cond:                                         ; preds = %for.inc, %cond.end11
  %14 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5819
  %tobool14 = icmp ne %struct.VEC_eh_region_gc* %14, null, !dbg !5819
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !5819

cond.true15:                                      ; preds = %for.cond
  %15 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5819
  %base16 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %15, i32 0, i32 0, !dbg !5819
  br label %cond.end18, !dbg !5819

cond.false17:                                     ; preds = %for.cond
  br label %cond.end18, !dbg !5819

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_eh_region_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !5819
  %16 = load i32, i32* %i, align 4, !dbg !5819
  %call20 = call i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %cond19, i32 %16, %struct.eh_region_d** %r), !dbg !5819
  %tobool21 = icmp ne i32 %call20, 0, !dbg !5821
  br i1 %tobool21, label %for.body, label %for.end, !dbg !5821

for.body:                                         ; preds = %cond.end18
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5822
  %cmp22 = icmp eq %struct.eh_region_d* %17, null, !dbg !5825
  br i1 %cmp22, label %if.then, label %if.end, !dbg !5826

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5827

if.end:                                           ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !5828
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5828
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %19, i32 0, i32 3, !dbg !5828
  %20 = load i32, i32* %index, align 8, !dbg !5828
  %cmp24 = icmp eq i32 %18, %20, !dbg !5828
  br i1 %cmp24, label %cond.false27, label %cond.true26, !dbg !5828

cond.true26:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 551, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5828
  br label %cond.end28, !dbg !5828

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5828

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !5828
  %21 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5829
  %tobool30 = icmp ne %struct.VEC_eh_region_gc* %21, null, !dbg !5829
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !5829

cond.true31:                                      ; preds = %cond.end28
  %22 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5829
  %base32 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %22, i32 0, i32 0, !dbg !5829
  br label %cond.end34, !dbg !5829

cond.false33:                                     ; preds = %cond.end28
  br label %cond.end34, !dbg !5829

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_eh_region_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !5829
  %23 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5829
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %23, i32 0, i32 0, !dbg !5829
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !5829
  %25 = ptrtoint %struct.eh_region_d* %24 to i64, !dbg !5829
  %conv36 = trunc i64 %25 to i32, !dbg !5829
  %call37 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond35, i32 %conv36), !dbg !5829
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5829
  %outer38 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %26, i32 0, i32 0, !dbg !5829
  store %struct.eh_region_d* %call37, %struct.eh_region_d** %outer38, align 8, !dbg !5829
  %27 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5830
  %tobool39 = icmp ne %struct.VEC_eh_region_gc* %27, null, !dbg !5830
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !5830

cond.true40:                                      ; preds = %cond.end34
  %28 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5830
  %base41 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %28, i32 0, i32 0, !dbg !5830
  br label %cond.end43, !dbg !5830

cond.false42:                                     ; preds = %cond.end34
  br label %cond.end43, !dbg !5830

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_eh_region_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !5830
  %29 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5830
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %29, i32 0, i32 1, !dbg !5830
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !5830
  %31 = ptrtoint %struct.eh_region_d* %30 to i64, !dbg !5830
  %conv45 = trunc i64 %31 to i32, !dbg !5830
  %call46 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond44, i32 %conv45), !dbg !5830
  %32 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5830
  %inner47 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %32, i32 0, i32 1, !dbg !5830
  store %struct.eh_region_d* %call46, %struct.eh_region_d** %inner47, align 8, !dbg !5830
  %33 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5831
  %tobool48 = icmp ne %struct.VEC_eh_region_gc* %33, null, !dbg !5831
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !5831

cond.true49:                                      ; preds = %cond.end43
  %34 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5831
  %base50 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %34, i32 0, i32 0, !dbg !5831
  br label %cond.end52, !dbg !5831

cond.false51:                                     ; preds = %cond.end43
  br label %cond.end52, !dbg !5831

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_eh_region_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !5831
  %35 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5831
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %35, i32 0, i32 2, !dbg !5831
  %36 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !5831
  %37 = ptrtoint %struct.eh_region_d* %36 to i64, !dbg !5831
  %conv54 = trunc i64 %37 to i32, !dbg !5831
  %call55 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond53, i32 %conv54), !dbg !5831
  %38 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5831
  %next_peer56 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %38, i32 0, i32 2, !dbg !5831
  store %struct.eh_region_d* %call55, %struct.eh_region_d** %next_peer56, align 8, !dbg !5831
  %39 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5832
  %tobool57 = icmp ne %struct.VEC_eh_landing_pad_gc* %39, null, !dbg !5832
  br i1 %tobool57, label %cond.true58, label %cond.false60, !dbg !5832

cond.true58:                                      ; preds = %cond.end52
  %40 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5832
  %base59 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %40, i32 0, i32 0, !dbg !5832
  br label %cond.end61, !dbg !5832

cond.false60:                                     ; preds = %cond.end52
  br label %cond.end61, !dbg !5832

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi %struct.VEC_eh_landing_pad_base* [ %base59, %cond.true58 ], [ null, %cond.false60 ], !dbg !5832
  %41 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5832
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %41, i32 0, i32 6, !dbg !5832
  %42 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !5832
  %43 = ptrtoint %struct.eh_landing_pad_d* %42 to i64, !dbg !5832
  %conv63 = trunc i64 %43 to i32, !dbg !5832
  %call64 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond62, i32 %conv63), !dbg !5832
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5832
  %landing_pads65 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %44, i32 0, i32 6, !dbg !5832
  store %struct.eh_landing_pad_d* %call64, %struct.eh_landing_pad_d** %landing_pads65, align 8, !dbg !5832
  br label %for.inc, !dbg !5833

for.inc:                                          ; preds = %cond.end61, %if.then
  %45 = load i32, i32* %i, align 4, !dbg !5834
  %inc = add i32 %45, 1, !dbg !5834
  store i32 %inc, i32* %i, align 4, !dbg !5834
  br label %for.cond, !dbg !5835, !llvm.loop !5836

for.end:                                          ; preds = %cond.end18
  store i32 0, i32* %i, align 4, !dbg !5838
  br label %for.cond66, !dbg !5840

for.cond66:                                       ; preds = %for.inc105, %for.end
  %46 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5841
  %tobool67 = icmp ne %struct.VEC_eh_landing_pad_gc* %46, null, !dbg !5841
  br i1 %tobool67, label %cond.true68, label %cond.false70, !dbg !5841

cond.true68:                                      ; preds = %for.cond66
  %47 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5841
  %base69 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %47, i32 0, i32 0, !dbg !5841
  br label %cond.end71, !dbg !5841

cond.false70:                                     ; preds = %for.cond66
  br label %cond.end71, !dbg !5841

cond.end71:                                       ; preds = %cond.false70, %cond.true68
  %cond72 = phi %struct.VEC_eh_landing_pad_base* [ %base69, %cond.true68 ], [ null, %cond.false70 ], !dbg !5841
  %48 = load i32, i32* %i, align 4, !dbg !5841
  %call73 = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond72, i32 %48, %struct.eh_landing_pad_d** %lp), !dbg !5841
  %tobool74 = icmp ne i32 %call73, 0, !dbg !5843
  br i1 %tobool74, label %for.body75, label %for.end107, !dbg !5843

for.body75:                                       ; preds = %cond.end71
  %49 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5844
  %cmp76 = icmp eq %struct.eh_landing_pad_d* %49, null, !dbg !5847
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !5848

if.then78:                                        ; preds = %for.body75
  br label %for.inc105, !dbg !5849

if.end79:                                         ; preds = %for.body75
  %50 = load i32, i32* %i, align 4, !dbg !5850
  %51 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5850
  %index80 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %51, i32 0, i32 4, !dbg !5850
  %52 = load i32, i32* %index80, align 8, !dbg !5850
  %cmp81 = icmp eq i32 %50, %52, !dbg !5850
  br i1 %cmp81, label %cond.false84, label %cond.true83, !dbg !5850

cond.true83:                                      ; preds = %if.end79
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 566, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5850
  br label %cond.end85, !dbg !5850

cond.false84:                                     ; preds = %if.end79
  br label %cond.end85, !dbg !5850

cond.end85:                                       ; preds = %cond.false84, %cond.true83
  %cond86 = phi i32 [ 0, %cond.true83 ], [ 0, %cond.false84 ], !dbg !5850
  %53 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5851
  %tobool87 = icmp ne %struct.VEC_eh_landing_pad_gc* %53, null, !dbg !5851
  br i1 %tobool87, label %cond.true88, label %cond.false90, !dbg !5851

cond.true88:                                      ; preds = %cond.end85
  %54 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5851
  %base89 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %54, i32 0, i32 0, !dbg !5851
  br label %cond.end91, !dbg !5851

cond.false90:                                     ; preds = %cond.end85
  br label %cond.end91, !dbg !5851

cond.end91:                                       ; preds = %cond.false90, %cond.true88
  %cond92 = phi %struct.VEC_eh_landing_pad_base* [ %base89, %cond.true88 ], [ null, %cond.false90 ], !dbg !5851
  %55 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5851
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %55, i32 0, i32 0, !dbg !5851
  %56 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !5851
  %57 = ptrtoint %struct.eh_landing_pad_d* %56 to i64, !dbg !5851
  %conv93 = trunc i64 %57 to i32, !dbg !5851
  %call94 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond92, i32 %conv93), !dbg !5851
  %58 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5851
  %next_lp95 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %58, i32 0, i32 0, !dbg !5851
  store %struct.eh_landing_pad_d* %call94, %struct.eh_landing_pad_d** %next_lp95, align 8, !dbg !5851
  %59 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5852
  %tobool96 = icmp ne %struct.VEC_eh_region_gc* %59, null, !dbg !5852
  br i1 %tobool96, label %cond.true97, label %cond.false99, !dbg !5852

cond.true97:                                      ; preds = %cond.end91
  %60 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %eh_array, align 8, !dbg !5852
  %base98 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %60, i32 0, i32 0, !dbg !5852
  br label %cond.end100, !dbg !5852

cond.false99:                                     ; preds = %cond.end91
  br label %cond.end100, !dbg !5852

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi %struct.VEC_eh_region_base* [ %base98, %cond.true97 ], [ null, %cond.false99 ], !dbg !5852
  %61 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5852
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %61, i32 0, i32 1, !dbg !5852
  %62 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !5852
  %63 = ptrtoint %struct.eh_region_d* %62 to i64, !dbg !5852
  %conv102 = trunc i64 %63 to i32, !dbg !5852
  %call103 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond101, i32 %conv102), !dbg !5852
  %64 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5852
  %region104 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %64, i32 0, i32 1, !dbg !5852
  store %struct.eh_region_d* %call103, %struct.eh_region_d** %region104, align 8, !dbg !5852
  br label %for.inc105, !dbg !5853

for.inc105:                                       ; preds = %cond.end100, %if.then78
  %65 = load i32, i32* %i, align 4, !dbg !5854
  %inc106 = add i32 %65, 1, !dbg !5854
  store i32 %inc106, i32* %i, align 4, !dbg !5854
  br label %for.cond66, !dbg !5855, !llvm.loop !5856

for.end107:                                       ; preds = %cond.end71
  ret void, !dbg !5858
}

declare dso_local void @init_eh() #2

declare dso_local i32 @dwarf2out_do_frame() #2

declare dso_local void @dwarf2out_frame_init() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %vec_) #0 !dbg !5859 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !5864, metadata !DIExpression()), !dbg !5865
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5865
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !5865
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5865

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5865
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %1, i32 0, i32 0, !dbg !5865
  %2 = load i32, i32* %num, align 8, !dbg !5865
  br label %cond.end, !dbg !5865

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5865

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5865
  ret i32 %cond, !dbg !5865
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_gc_reserve_exact(%struct.VEC_eh_region_gc** %vec_, i32 %alloc_) #0 !dbg !5866 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_eh_region_gc** %vec_, %struct.VEC_eh_region_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_gc*** %vec_.addr, metadata !5869, metadata !DIExpression()), !dbg !5870
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5871, metadata !DIExpression()), !dbg !5870
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5872, metadata !DIExpression()), !dbg !5870
  %0 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5870
  %1 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %0, align 8, !dbg !5870
  %tobool = icmp ne %struct.VEC_eh_region_gc* %1, null, !dbg !5870
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5870

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5870
  %3 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %2, align 8, !dbg !5870
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %3, i32 0, i32 0, !dbg !5870
  br label %cond.end, !dbg !5870

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5870
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5870
  %call = call i32 @VEC_eh_region_base_space(%struct.VEC_eh_region_base* %cond, i32 %4), !dbg !5870
  %tobool1 = icmp ne i32 %call, 0, !dbg !5870
  %lnot = xor i1 %tobool1, true, !dbg !5870
  %lnot.ext = zext i1 %lnot to i32, !dbg !5870
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5870
  %5 = load i32, i32* %extend, align 4, !dbg !5873
  %tobool2 = icmp ne i32 %5, 0, !dbg !5873
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5870

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5873
  %7 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %6, align 8, !dbg !5873
  %8 = bitcast %struct.VEC_eh_region_gc* %7 to i8*, !dbg !5873
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5873
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !5873
  %10 = bitcast i8* %call3 to %struct.VEC_eh_region_gc*, !dbg !5873
  %11 = load %struct.VEC_eh_region_gc**, %struct.VEC_eh_region_gc*** %vec_.addr, align 8, !dbg !5873
  store %struct.VEC_eh_region_gc* %10, %struct.VEC_eh_region_gc** %11, align 8, !dbg !5873
  br label %if.end, !dbg !5873

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5870
  ret i32 %12, !dbg !5870
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_space(%struct.VEC_eh_region_base* %vec_, i32 %alloc_) #0 !dbg !5875 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !5878, metadata !DIExpression()), !dbg !5879
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5880, metadata !DIExpression()), !dbg !5879
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5879
  %cmp = icmp sge i32 %0, 0, !dbg !5879
  %conv = zext i1 %cmp to i32, !dbg !5879
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5879
  %tobool = icmp ne %struct.VEC_eh_region_base* %1, null, !dbg !5879
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5879

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5879
  %alloc = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 1, !dbg !5879
  %3 = load i32, i32* %alloc, align 4, !dbg !5879
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !5879
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 0, !dbg !5879
  %5 = load i32, i32* %num, align 8, !dbg !5879
  %sub = sub i32 %3, %5, !dbg !5879
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5879
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5879
  %conv2 = zext i1 %cmp1 to i32, !dbg !5879
  br label %cond.end, !dbg !5879

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5879
  %tobool3 = icmp ne i32 %7, 0, !dbg !5879
  %lnot = xor i1 %tobool3, true, !dbg !5879
  %lnot.ext = zext i1 %lnot to i32, !dbg !5879
  br label %cond.end, !dbg !5879

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5879
  ret i32 %cond, !dbg !5879
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_catch_d* @lto_input_eh_catch_list(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %struct.eh_catch_d** %last_p) #0 !dbg !5881 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %last_p.addr = alloca %struct.eh_catch_d**, align 8
  %first = alloca %struct.eh_catch_d*, align 8
  %tag = alloca i32, align 4
  %list = alloca %union.tree_node*, align 8
  %n = alloca %struct.eh_catch_d*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !5886, metadata !DIExpression()), !dbg !5887
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !5888, metadata !DIExpression()), !dbg !5889
  store %struct.eh_catch_d** %last_p, %struct.eh_catch_d*** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d*** %last_p.addr, metadata !5890, metadata !DIExpression()), !dbg !5891
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %first, metadata !5892, metadata !DIExpression()), !dbg !5893
  call void @llvm.dbg.declare(metadata i32* %tag, metadata !5894, metadata !DIExpression()), !dbg !5895
  store %struct.eh_catch_d* null, %struct.eh_catch_d** %first, align 8, !dbg !5896
  %0 = load %struct.eh_catch_d**, %struct.eh_catch_d*** %last_p.addr, align 8, !dbg !5897
  store %struct.eh_catch_d* null, %struct.eh_catch_d** %0, align 8, !dbg !5898
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5899
  %call = call i32 @input_record_start(%struct.lto_input_block* %1), !dbg !5900
  store i32 %call, i32* %tag, align 4, !dbg !5901
  br label %while.cond, !dbg !5902

while.cond:                                       ; preds = %if.end10, %entry
  %2 = load i32, i32* %tag, align 4, !dbg !5903
  %tobool = icmp ne i32 %2, 0, !dbg !5902
  br i1 %tobool, label %while.body, label %while.end, !dbg !5902

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !5904, metadata !DIExpression()), !dbg !5906
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %n, metadata !5907, metadata !DIExpression()), !dbg !5908
  %3 = load i32, i32* %tag, align 4, !dbg !5909
  call void @lto_tag_check_range(i32 %3, i32 235, i32 235), !dbg !5910
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 40), !dbg !5911
  %4 = bitcast i8* %call1 to %struct.eh_catch_d*, !dbg !5911
  store %struct.eh_catch_d* %4, %struct.eh_catch_d** %n, align 8, !dbg !5912
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5913
  %6 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5914
  %call2 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %5, %struct.data_in* %6), !dbg !5915
  %7 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5916
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %7, i32 0, i32 2, !dbg !5917
  store %union.tree_node* %call2, %union.tree_node** %type_list, align 8, !dbg !5918
  %8 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5919
  %9 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5920
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %8, %struct.data_in* %9), !dbg !5921
  %10 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5922
  %filter_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %10, i32 0, i32 3, !dbg !5923
  store %union.tree_node* %call3, %union.tree_node** %filter_list, align 8, !dbg !5924
  %11 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5925
  %12 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5926
  %call4 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %11, %struct.data_in* %12), !dbg !5927
  %13 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5928
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %13, i32 0, i32 4, !dbg !5929
  store %union.tree_node* %call4, %union.tree_node** %label, align 8, !dbg !5930
  %14 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5931
  %filter_list5 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %14, i32 0, i32 3, !dbg !5933
  %15 = load %union.tree_node*, %union.tree_node** %filter_list5, align 8, !dbg !5933
  store %union.tree_node* %15, %union.tree_node** %list, align 8, !dbg !5934
  br label %for.cond, !dbg !5935

for.cond:                                         ; preds = %for.inc, %while.body
  %16 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5936
  %tobool6 = icmp ne %union.tree_node* %16, null, !dbg !5938
  br i1 %tobool6, label %for.body, label %for.end, !dbg !5938

for.body:                                         ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5939
  %list7 = bitcast %union.tree_node* %17 to %struct.tree_list*, !dbg !5939
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 2, !dbg !5939
  %18 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5939
  call void @add_type_for_runtime(%union.tree_node* %18), !dbg !5940
  br label %for.inc, !dbg !5940

for.inc:                                          ; preds = %for.body
  %19 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5941
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !5941
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5941
  %20 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5941
  store %union.tree_node* %20, %union.tree_node** %list, align 8, !dbg !5942
  br label %for.cond, !dbg !5943, !llvm.loop !5944

for.end:                                          ; preds = %for.cond
  %21 = load %struct.eh_catch_d**, %struct.eh_catch_d*** %last_p.addr, align 8, !dbg !5946
  %22 = load %struct.eh_catch_d*, %struct.eh_catch_d** %21, align 8, !dbg !5948
  %tobool8 = icmp ne %struct.eh_catch_d* %22, null, !dbg !5948
  br i1 %tobool8, label %if.then, label %if.end, !dbg !5949

if.then:                                          ; preds = %for.end
  %23 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5950
  %24 = load %struct.eh_catch_d**, %struct.eh_catch_d*** %last_p.addr, align 8, !dbg !5951
  %25 = load %struct.eh_catch_d*, %struct.eh_catch_d** %24, align 8, !dbg !5952
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %25, i32 0, i32 0, !dbg !5953
  store %struct.eh_catch_d* %23, %struct.eh_catch_d** %next_catch, align 8, !dbg !5954
  br label %if.end, !dbg !5955

if.end:                                           ; preds = %if.then, %for.end
  %26 = load %struct.eh_catch_d**, %struct.eh_catch_d*** %last_p.addr, align 8, !dbg !5956
  %27 = load %struct.eh_catch_d*, %struct.eh_catch_d** %26, align 8, !dbg !5957
  %28 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5958
  %prev_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %28, i32 0, i32 1, !dbg !5959
  store %struct.eh_catch_d* %27, %struct.eh_catch_d** %prev_catch, align 8, !dbg !5960
  %29 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5961
  %30 = load %struct.eh_catch_d**, %struct.eh_catch_d*** %last_p.addr, align 8, !dbg !5962
  store %struct.eh_catch_d* %29, %struct.eh_catch_d** %30, align 8, !dbg !5963
  %31 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first, align 8, !dbg !5964
  %cmp = icmp eq %struct.eh_catch_d* %31, null, !dbg !5966
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !5967

if.then9:                                         ; preds = %if.end
  %32 = load %struct.eh_catch_d*, %struct.eh_catch_d** %n, align 8, !dbg !5968
  store %struct.eh_catch_d* %32, %struct.eh_catch_d** %first, align 8, !dbg !5969
  br label %if.end10, !dbg !5970

if.end10:                                         ; preds = %if.then9, %if.end
  %33 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5971
  %call11 = call i32 @input_record_start(%struct.lto_input_block* %33), !dbg !5972
  store i32 %call11, i32* %tag, align 4, !dbg !5973
  br label %while.cond, !dbg !5902, !llvm.loop !5974

while.end:                                        ; preds = %while.cond
  %34 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first, align 8, !dbg !5976
  ret %struct.eh_catch_d* %34, !dbg !5977
}

declare dso_local void @add_type_for_runtime(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_input_location(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !5978 {
entry:
  %retval = alloca i32, align 4
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %xloc = alloca %struct.expanded_location, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !5981, metadata !DIExpression()), !dbg !5982
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  call void @llvm.dbg.declare(metadata %struct.expanded_location* %xloc, metadata !5985, metadata !DIExpression()), !dbg !5993
  %0 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !5994
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !5995
  %call = call i8* @input_string(%struct.data_in* %0, %struct.lto_input_block* %1), !dbg !5996
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !5997
  store i8* %call, i8** %file, align 8, !dbg !5998
  %file1 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !5999
  %2 = load i8*, i8** %file1, align 8, !dbg !5999
  %cmp = icmp eq i8* %2, null, !dbg !6001
  br i1 %cmp, label %if.then, label %if.end, !dbg !6002

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6003
  br label %return, !dbg !6003

if.end:                                           ; preds = %entry
  %file2 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !6004
  %3 = load i8*, i8** %file2, align 8, !dbg !6004
  %call3 = call i8* @canon_file_name(i8* %3), !dbg !6005
  %file4 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !6006
  store i8* %call3, i8** %file4, align 8, !dbg !6007
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6008
  %call5 = call i64 @lto_input_sleb128(%struct.lto_input_block* %4), !dbg !6009
  %conv = trunc i64 %call5 to i32, !dbg !6009
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !6010
  store i32 %conv, i32* %line, align 8, !dbg !6011
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6012
  %call6 = call i64 @lto_input_sleb128(%struct.lto_input_block* %5), !dbg !6013
  %conv7 = trunc i64 %call6 to i32, !dbg !6013
  %column = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 2, !dbg !6014
  store i32 %conv7, i32* %column, align 4, !dbg !6015
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6016
  %call8 = call i64 @lto_input_sleb128(%struct.lto_input_block* %6), !dbg !6017
  %conv9 = trunc i64 %call8 to i8, !dbg !6017
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 3, !dbg !6018
  store i8 %conv9, i8* %sysp, align 8, !dbg !6019
  %7 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6020
  %current_file = getelementptr inbounds %struct.data_in, %struct.data_in* %7, i32 0, i32 6, !dbg !6022
  %8 = load i8*, i8** %current_file, align 8, !dbg !6022
  %file10 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !6023
  %9 = load i8*, i8** %file10, align 8, !dbg !6023
  %cmp11 = icmp ne i8* %8, %9, !dbg !6024
  br i1 %cmp11, label %if.then13, label %if.else, !dbg !6025

if.then13:                                        ; preds = %if.end
  %10 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6026
  %current_file14 = getelementptr inbounds %struct.data_in, %struct.data_in* %10, i32 0, i32 6, !dbg !6029
  %11 = load i8*, i8** %current_file14, align 8, !dbg !6029
  %tobool = icmp ne i8* %11, null, !dbg !6026
  br i1 %tobool, label %if.then15, label %if.end17, !dbg !6030

if.then15:                                        ; preds = %if.then13
  %12 = load %struct.line_maps*, %struct.line_maps** @line_table, align 8, !dbg !6031
  %call16 = call %struct.line_map* @linemap_add(%struct.line_maps* %12, i32 1, i32 0, i8* null, i32 0), !dbg !6032
  br label %if.end17, !dbg !6032

if.end17:                                         ; preds = %if.then15, %if.then13
  %13 = load %struct.line_maps*, %struct.line_maps** @line_table, align 8, !dbg !6033
  %sysp18 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 3, !dbg !6034
  %14 = load i8, i8* %sysp18, align 8, !dbg !6034
  %conv19 = zext i8 %14 to i32, !dbg !6035
  %file20 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !6036
  %15 = load i8*, i8** %file20, align 8, !dbg !6036
  %line21 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !6037
  %16 = load i32, i32* %line21, align 8, !dbg !6037
  %call22 = call %struct.line_map* @linemap_add(%struct.line_maps* %13, i32 0, i32 %conv19, i8* %15, i32 %16), !dbg !6038
  br label %if.end31, !dbg !6039

if.else:                                          ; preds = %if.end
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6040
  %current_line = getelementptr inbounds %struct.data_in, %struct.data_in* %17, i32 0, i32 7, !dbg !6042
  %18 = load i32, i32* %current_line, align 8, !dbg !6042
  %line23 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !6043
  %19 = load i32, i32* %line23, align 8, !dbg !6043
  %cmp24 = icmp ne i32 %18, %19, !dbg !6044
  br i1 %cmp24, label %if.then26, label %if.end30, !dbg !6045

if.then26:                                        ; preds = %if.else
  %20 = load %struct.line_maps*, %struct.line_maps** @line_table, align 8, !dbg !6046
  %line27 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !6047
  %21 = load i32, i32* %line27, align 8, !dbg !6047
  %column28 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 2, !dbg !6048
  %22 = load i32, i32* %column28, align 4, !dbg !6048
  %call29 = call i32 @linemap_line_start(%struct.line_maps* %20, i32 %21, i32 %22), !dbg !6049
  br label %if.end30, !dbg !6049

if.end30:                                         ; preds = %if.then26, %if.else
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end17
  %file32 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 0, !dbg !6050
  %23 = load i8*, i8** %file32, align 8, !dbg !6050
  %24 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6051
  %current_file33 = getelementptr inbounds %struct.data_in, %struct.data_in* %24, i32 0, i32 6, !dbg !6052
  store i8* %23, i8** %current_file33, align 8, !dbg !6053
  %line34 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 1, !dbg !6054
  %25 = load i32, i32* %line34, align 8, !dbg !6054
  %26 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6055
  %current_line35 = getelementptr inbounds %struct.data_in, %struct.data_in* %26, i32 0, i32 7, !dbg !6056
  store i32 %25, i32* %current_line35, align 8, !dbg !6057
  %column36 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 2, !dbg !6058
  %27 = load i32, i32* %column36, align 4, !dbg !6058
  %28 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6059
  %current_col = getelementptr inbounds %struct.data_in, %struct.data_in* %28, i32 0, i32 8, !dbg !6060
  store i32 %27, i32* %current_col, align 4, !dbg !6061
  %29 = load %struct.line_maps*, %struct.line_maps** @line_table, align 8, !dbg !6062
  %column37 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %xloc, i32 0, i32 2, !dbg !6063
  %30 = load i32, i32* %column37, align 4, !dbg !6063
  %call38 = call i32 @linemap_position_for_column(%struct.line_maps* %29, i32 %30), !dbg !6064
  store i32 %call38, i32* %retval, align 4, !dbg !6065
  br label %return, !dbg !6065

return:                                           ; preds = %if.end31, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !6066
  ret i32 %31, !dbg !6066
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @input_string(%struct.data_in* %data_in, %struct.lto_input_block* %ib) #0 !dbg !6067 {
entry:
  %retval = alloca i8*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %len = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %is_null = alloca i32, align 4
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !6070, metadata !DIExpression()), !dbg !6071
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !6072, metadata !DIExpression()), !dbg !6073
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6074, metadata !DIExpression()), !dbg !6075
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !6076, metadata !DIExpression()), !dbg !6077
  call void @llvm.dbg.declare(metadata i32* %is_null, metadata !6078, metadata !DIExpression()), !dbg !6079
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6080
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !6081
  %conv = trunc i64 %call to i32, !dbg !6081
  store i32 %conv, i32* %is_null, align 4, !dbg !6082
  %1 = load i32, i32* %is_null, align 4, !dbg !6083
  %tobool = icmp ne i32 %1, 0, !dbg !6083
  br i1 %tobool, label %if.then, label %if.end, !dbg !6085

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !6086
  br label %return, !dbg !6086

if.end:                                           ; preds = %entry
  %2 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6087
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6088
  %call1 = call i8* @input_string_internal(%struct.data_in* %2, %struct.lto_input_block* %3, i32* %len), !dbg !6089
  store i8* %call1, i8** %ptr, align 8, !dbg !6090
  %4 = load i8*, i8** %ptr, align 8, !dbg !6091
  %5 = load i32, i32* %len, align 4, !dbg !6093
  %sub = sub i32 %5, 1, !dbg !6094
  %idxprom = zext i32 %sub to i64, !dbg !6091
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !6091
  %6 = load i8, i8* %arrayidx, align 1, !dbg !6091
  %conv2 = sext i8 %6 to i32, !dbg !6091
  %cmp = icmp ne i32 %conv2, 0, !dbg !6095
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !6096

if.then4:                                         ; preds = %if.end
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0)), !dbg !6097
  br label %if.end5, !dbg !6097

if.end5:                                          ; preds = %if.then4, %if.end
  %7 = load i8*, i8** %ptr, align 8, !dbg !6098
  store i8* %7, i8** %retval, align 8, !dbg !6099
  br label %return, !dbg !6099

return:                                           ; preds = %if.end5, %if.then
  %8 = load i8*, i8** %retval, align 8, !dbg !6100
  ret i8* %8, !dbg !6100
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @canon_file_name(i8* %string) #0 !dbg !6101 {
entry:
  %retval = alloca i8*, align 8
  %string.addr = alloca i8*, align 8
  %slot = alloca i8**, align 8
  %s_slot = alloca %struct.string_slot, align 8
  %len = alloca i64, align 8
  %saved_string = alloca i8*, align 8
  %new_slot = alloca %struct.string_slot*, align 8
  %old_slot = alloca %struct.string_slot*, align 8
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !6104, metadata !DIExpression()), !dbg !6105
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6106, metadata !DIExpression()), !dbg !6107
  call void @llvm.dbg.declare(metadata %struct.string_slot* %s_slot, metadata !6108, metadata !DIExpression()), !dbg !6109
  %0 = load i8*, i8** %string.addr, align 8, !dbg !6110
  %s = getelementptr inbounds %struct.string_slot, %struct.string_slot* %s_slot, i32 0, i32 0, !dbg !6111
  store i8* %0, i8** %s, align 8, !dbg !6112
  %1 = load %struct.htab*, %struct.htab** @file_name_hash_table, align 8, !dbg !6113
  %2 = bitcast %struct.string_slot* %s_slot to i8*, !dbg !6114
  %call = call i8** @htab_find_slot(%struct.htab* %1, i8* %2, i32 1), !dbg !6115
  store i8** %call, i8*** %slot, align 8, !dbg !6116
  %3 = load i8**, i8*** %slot, align 8, !dbg !6117
  %4 = load i8*, i8** %3, align 8, !dbg !6119
  %cmp = icmp eq i8* %4, null, !dbg !6120
  br i1 %cmp, label %if.then, label %if.else, !dbg !6121

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6122, metadata !DIExpression()), !dbg !6124
  call void @llvm.dbg.declare(metadata i8** %saved_string, metadata !6125, metadata !DIExpression()), !dbg !6126
  call void @llvm.dbg.declare(metadata %struct.string_slot** %new_slot, metadata !6127, metadata !DIExpression()), !dbg !6128
  %5 = load i8*, i8** %string.addr, align 8, !dbg !6129
  %call1 = call i64 @strlen(i8* %5), !dbg !6130
  store i64 %call1, i64* %len, align 8, !dbg !6131
  %6 = load i64, i64* %len, align 8, !dbg !6132
  %add = add i64 %6, 1, !dbg !6133
  %call2 = call i8* @xmalloc(i64 %add), !dbg !6134
  store i8* %call2, i8** %saved_string, align 8, !dbg !6135
  %call3 = call i8* @xcalloc(i64 1, i64 16), !dbg !6136
  %7 = bitcast i8* %call3 to %struct.string_slot*, !dbg !6136
  store %struct.string_slot* %7, %struct.string_slot** %new_slot, align 8, !dbg !6137
  %8 = load i8*, i8** %saved_string, align 8, !dbg !6138
  %9 = load i8*, i8** %string.addr, align 8, !dbg !6139
  %call4 = call i8* @strcpy(i8* %8, i8* %9), !dbg !6140
  %10 = load i8*, i8** %saved_string, align 8, !dbg !6141
  %11 = load %struct.string_slot*, %struct.string_slot** %new_slot, align 8, !dbg !6142
  %s5 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %11, i32 0, i32 0, !dbg !6143
  store i8* %10, i8** %s5, align 8, !dbg !6144
  %12 = load %struct.string_slot*, %struct.string_slot** %new_slot, align 8, !dbg !6145
  %13 = bitcast %struct.string_slot* %12 to i8*, !dbg !6145
  %14 = load i8**, i8*** %slot, align 8, !dbg !6146
  store i8* %13, i8** %14, align 8, !dbg !6147
  %15 = load i8*, i8** %saved_string, align 8, !dbg !6148
  store i8* %15, i8** %retval, align 8, !dbg !6149
  br label %return, !dbg !6149

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.string_slot** %old_slot, metadata !6150, metadata !DIExpression()), !dbg !6152
  %16 = load i8**, i8*** %slot, align 8, !dbg !6153
  %17 = load i8*, i8** %16, align 8, !dbg !6154
  %18 = bitcast i8* %17 to %struct.string_slot*, !dbg !6155
  store %struct.string_slot* %18, %struct.string_slot** %old_slot, align 8, !dbg !6152
  %19 = load %struct.string_slot*, %struct.string_slot** %old_slot, align 8, !dbg !6156
  %s6 = getelementptr inbounds %struct.string_slot, %struct.string_slot* %19, i32 0, i32 0, !dbg !6157
  %20 = load i8*, i8** %s6, align 8, !dbg !6157
  store i8* %20, i8** %retval, align 8, !dbg !6158
  br label %return, !dbg !6158

return:                                           ; preds = %if.else, %if.then
  %21 = load i8*, i8** %retval, align 8, !dbg !6159
  ret i8* %21, !dbg !6159
}

declare dso_local %struct.line_map* @linemap_add(%struct.line_maps*, i32, i32, i8*, i32) #2

declare dso_local i32 @linemap_line_start(%struct.line_maps*, i32, i32) #2

declare dso_local i32 @linemap_position_for_column(%struct.line_maps*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @input_string_internal(%struct.data_in* %data_in, %struct.lto_input_block* %ib, i32* %rlen) #0 !dbg !6160 {
entry:
  %data_in.addr = alloca %struct.data_in*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %rlen.addr = alloca i32*, align 8
  %str_tab = alloca %struct.lto_input_block, align 8
  %len = alloca i32, align 4
  %loc = alloca i32, align 4
  %result = alloca i8*, align 8
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  store i32* %rlen, i32** %rlen.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %rlen.addr, metadata !6168, metadata !DIExpression()), !dbg !6169
  call void @llvm.dbg.declare(metadata %struct.lto_input_block* %str_tab, metadata !6170, metadata !DIExpression()), !dbg !6171
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6172, metadata !DIExpression()), !dbg !6173
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6174, metadata !DIExpression()), !dbg !6175
  call void @llvm.dbg.declare(metadata i8** %result, metadata !6176, metadata !DIExpression()), !dbg !6177
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6178
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !6179
  %conv = trunc i64 %call to i32, !dbg !6179
  store i32 %conv, i32* %loc, align 4, !dbg !6180
  br label %do.body, !dbg !6181

do.body:                                          ; preds = %entry
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6182
  %strings = getelementptr inbounds %struct.data_in, %struct.data_in* %1, i32 0, i32 2, !dbg !6182
  %2 = load i8*, i8** %strings, align 8, !dbg !6182
  %data = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %str_tab, i32 0, i32 0, !dbg !6182
  store i8* %2, i8** %data, align 8, !dbg !6182
  %3 = load i32, i32* %loc, align 4, !dbg !6182
  %p = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %str_tab, i32 0, i32 1, !dbg !6182
  store i32 %3, i32* %p, align 8, !dbg !6182
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6182
  %strings_len = getelementptr inbounds %struct.data_in, %struct.data_in* %4, i32 0, i32 3, !dbg !6182
  %5 = load i32, i32* %strings_len, align 8, !dbg !6182
  %len1 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %str_tab, i32 0, i32 2, !dbg !6182
  store i32 %5, i32* %len1, align 4, !dbg !6182
  br label %do.end, !dbg !6182

do.end:                                           ; preds = %do.body
  %call2 = call i64 @lto_input_uleb128(%struct.lto_input_block* %str_tab), !dbg !6184
  %conv3 = trunc i64 %call2 to i32, !dbg !6184
  store i32 %conv3, i32* %len, align 4, !dbg !6185
  %6 = load i32, i32* %len, align 4, !dbg !6186
  %7 = load i32*, i32** %rlen.addr, align 8, !dbg !6187
  store i32 %6, i32* %7, align 4, !dbg !6188
  %p4 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %str_tab, i32 0, i32 1, !dbg !6189
  %8 = load i32, i32* %p4, align 8, !dbg !6189
  %9 = load i32, i32* %len, align 4, !dbg !6191
  %add = add i32 %8, %9, !dbg !6192
  %10 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6193
  %strings_len5 = getelementptr inbounds %struct.data_in, %struct.data_in* %10, i32 0, i32 3, !dbg !6194
  %11 = load i32, i32* %strings_len5, align 8, !dbg !6194
  %cmp = icmp ugt i32 %add, %11, !dbg !6195
  br i1 %cmp, label %if.then, label %if.end, !dbg !6196

if.then:                                          ; preds = %do.end
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)), !dbg !6197
  br label %if.end, !dbg !6197

if.end:                                           ; preds = %if.then, %do.end
  %12 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6198
  %strings7 = getelementptr inbounds %struct.data_in, %struct.data_in* %12, i32 0, i32 2, !dbg !6199
  %13 = load i8*, i8** %strings7, align 8, !dbg !6199
  %p8 = getelementptr inbounds %struct.lto_input_block, %struct.lto_input_block* %str_tab, i32 0, i32 1, !dbg !6200
  %14 = load i32, i32* %p8, align 8, !dbg !6200
  %idx.ext = zext i32 %14 to i64, !dbg !6201
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %idx.ext, !dbg !6201
  store i8* %add.ptr, i8** %result, align 8, !dbg !6202
  %15 = load i8*, i8** %result, align 8, !dbg !6203
  ret i8* %15, !dbg !6204
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %vec_) #0 !dbg !6205 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6210, metadata !DIExpression()), !dbg !6211
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6211
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !6211
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6211

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6211
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %1, i32 0, i32 0, !dbg !6211
  %2 = load i32, i32* %num, align 8, !dbg !6211
  br label %cond.end, !dbg !6211

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6211

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6211
  ret i32 %cond, !dbg !6211
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_gc_reserve_exact(%struct.VEC_eh_landing_pad_gc** %vec_, i32 %alloc_) #0 !dbg !6212 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_gc** %vec_, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_gc*** %vec_.addr, metadata !6215, metadata !DIExpression()), !dbg !6216
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6217, metadata !DIExpression()), !dbg !6216
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6218, metadata !DIExpression()), !dbg !6216
  %0 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6216
  %1 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %0, align 8, !dbg !6216
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %1, null, !dbg !6216
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6216

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6216
  %3 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %2, align 8, !dbg !6216
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %3, i32 0, i32 0, !dbg !6216
  br label %cond.end, !dbg !6216

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6216

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6216
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6216
  %call = call i32 @VEC_eh_landing_pad_base_space(%struct.VEC_eh_landing_pad_base* %cond, i32 %4), !dbg !6216
  %tobool1 = icmp ne i32 %call, 0, !dbg !6216
  %lnot = xor i1 %tobool1, true, !dbg !6216
  %lnot.ext = zext i1 %lnot to i32, !dbg !6216
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6216
  %5 = load i32, i32* %extend, align 4, !dbg !6219
  %tobool2 = icmp ne i32 %5, 0, !dbg !6219
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6216

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6219
  %7 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %6, align 8, !dbg !6219
  %8 = bitcast %struct.VEC_eh_landing_pad_gc* %7 to i8*, !dbg !6219
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6219
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !6219
  %10 = bitcast i8* %call3 to %struct.VEC_eh_landing_pad_gc*, !dbg !6219
  %11 = load %struct.VEC_eh_landing_pad_gc**, %struct.VEC_eh_landing_pad_gc*** %vec_.addr, align 8, !dbg !6219
  store %struct.VEC_eh_landing_pad_gc* %10, %struct.VEC_eh_landing_pad_gc** %11, align 8, !dbg !6219
  br label %if.end, !dbg !6219

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6216
  ret i32 %12, !dbg !6216
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_space(%struct.VEC_eh_landing_pad_base* %vec_, i32 %alloc_) #0 !dbg !6221 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6224, metadata !DIExpression()), !dbg !6225
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6226, metadata !DIExpression()), !dbg !6225
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6225
  %cmp = icmp sge i32 %0, 0, !dbg !6225
  %conv = zext i1 %cmp to i32, !dbg !6225
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6225
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %1, null, !dbg !6225
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6225

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6225
  %alloc = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 1, !dbg !6225
  %3 = load i32, i32* %alloc, align 4, !dbg !6225
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6225
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 0, !dbg !6225
  %5 = load i32, i32* %num, align 8, !dbg !6225
  %sub = sub i32 %3, %5, !dbg !6225
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6225
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6225
  %conv2 = zext i1 %cmp1 to i32, !dbg !6225
  br label %cond.end, !dbg !6225

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6225
  %tobool3 = icmp ne i32 %7, 0, !dbg !6225
  %lnot = xor i1 %tobool3, true, !dbg !6225
  %lnot.ext = zext i1 %lnot to i32, !dbg !6225
  br label %cond.end, !dbg !6225

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6225
  ret i32 %cond, !dbg !6225
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve_exact(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !6227 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !6230, metadata !DIExpression()), !dbg !6231
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6232, metadata !DIExpression()), !dbg !6231
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6233, metadata !DIExpression()), !dbg !6231
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6231
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !6231
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !6231
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6231

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6231
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !6231
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !6231
  br label %cond.end, !dbg !6231

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6231

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6231
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6231
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !6231
  %tobool1 = icmp ne i32 %call, 0, !dbg !6231
  %lnot = xor i1 %tobool1, true, !dbg !6231
  %lnot.ext = zext i1 %lnot to i32, !dbg !6231
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6231
  %5 = load i32, i32* %extend, align 4, !dbg !6234
  %tobool2 = icmp ne i32 %5, 0, !dbg !6234
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6231

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6234
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !6234
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !6234
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6234
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !6234
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !6234
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !6234
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !6234
  br label %if.end, !dbg !6234

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6231
  ret i32 %12, !dbg !6231
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !6236 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6239, metadata !DIExpression()), !dbg !6240
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6241, metadata !DIExpression()), !dbg !6240
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6240
  %cmp = icmp sge i32 %0, 0, !dbg !6240
  %conv = zext i1 %cmp to i32, !dbg !6240
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6240
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !6240
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6240

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6240
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6240
  %3 = load i32, i32* %alloc, align 4, !dbg !6240
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6240
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !6240
  %5 = load i32, i32* %num, align 8, !dbg !6240
  %sub = sub i32 %3, %5, !dbg !6240
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6240
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6240
  %conv2 = zext i1 %cmp1 to i32, !dbg !6240
  br label %cond.end, !dbg !6240

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6240
  %tobool3 = icmp ne i32 %7, 0, !dbg !6240
  %lnot = xor i1 %tobool3, true, !dbg !6240
  %lnot.ext = zext i1 %lnot to i32, !dbg !6240
  br label %cond.end, !dbg !6240

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6240
  ret i32 %cond, !dbg !6240
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_length(%struct.VEC_uchar_base* %vec_) #0 !dbg !6242 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6247, metadata !DIExpression()), !dbg !6248
  %0 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6248
  %tobool = icmp ne %struct.VEC_uchar_base* %0, null, !dbg !6248
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6248

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6248
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %1, i32 0, i32 0, !dbg !6248
  %2 = load i32, i32* %num, align 4, !dbg !6248
  br label %cond.end, !dbg !6248

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6248

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6248
  ret i32 %cond, !dbg !6248
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_gc_reserve_exact(%struct.VEC_uchar_gc** %vec_, i32 %alloc_) #0 !dbg !6249 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_uchar_gc** %vec_, %struct.VEC_uchar_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_gc*** %vec_.addr, metadata !6252, metadata !DIExpression()), !dbg !6253
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6254, metadata !DIExpression()), !dbg !6253
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6255, metadata !DIExpression()), !dbg !6253
  %0 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6253
  %1 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %0, align 8, !dbg !6253
  %tobool = icmp ne %struct.VEC_uchar_gc* %1, null, !dbg !6253
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6253

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6253
  %3 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %2, align 8, !dbg !6253
  %base = getelementptr inbounds %struct.VEC_uchar_gc, %struct.VEC_uchar_gc* %3, i32 0, i32 0, !dbg !6253
  br label %cond.end, !dbg !6253

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6253

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_uchar_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6253
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6253
  %call = call i32 @VEC_uchar_base_space(%struct.VEC_uchar_base* %cond, i32 %4), !dbg !6253
  %tobool1 = icmp ne i32 %call, 0, !dbg !6253
  %lnot = xor i1 %tobool1, true, !dbg !6253
  %lnot.ext = zext i1 %lnot to i32, !dbg !6253
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6253
  %5 = load i32, i32* %extend, align 4, !dbg !6256
  %tobool2 = icmp ne i32 %5, 0, !dbg !6256
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6253

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6256
  %7 = load %struct.VEC_uchar_gc*, %struct.VEC_uchar_gc** %6, align 8, !dbg !6256
  %8 = bitcast %struct.VEC_uchar_gc* %7 to i8*, !dbg !6256
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6256
  %call3 = call i8* @vec_gc_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 1), !dbg !6256
  %10 = bitcast i8* %call3 to %struct.VEC_uchar_gc*, !dbg !6256
  %11 = load %struct.VEC_uchar_gc**, %struct.VEC_uchar_gc*** %vec_.addr, align 8, !dbg !6256
  store %struct.VEC_uchar_gc* %10, %struct.VEC_uchar_gc** %11, align 8, !dbg !6256
  br label %if.end, !dbg !6256

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6253
  ret i32 %12, !dbg !6253
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_uchar_base_space(%struct.VEC_uchar_base* %vec_, i32 %alloc_) #0 !dbg !6258 {
entry:
  %vec_.addr = alloca %struct.VEC_uchar_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_uchar_base* %vec_, %struct.VEC_uchar_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_uchar_base** %vec_.addr, metadata !6261, metadata !DIExpression()), !dbg !6262
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6263, metadata !DIExpression()), !dbg !6262
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6262
  %cmp = icmp sge i32 %0, 0, !dbg !6262
  %conv = zext i1 %cmp to i32, !dbg !6262
  %1 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6262
  %tobool = icmp ne %struct.VEC_uchar_base* %1, null, !dbg !6262
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6262

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6262
  %alloc = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %2, i32 0, i32 1, !dbg !6262
  %3 = load i32, i32* %alloc, align 4, !dbg !6262
  %4 = load %struct.VEC_uchar_base*, %struct.VEC_uchar_base** %vec_.addr, align 8, !dbg !6262
  %num = getelementptr inbounds %struct.VEC_uchar_base, %struct.VEC_uchar_base* %4, i32 0, i32 0, !dbg !6262
  %5 = load i32, i32* %num, align 4, !dbg !6262
  %sub = sub i32 %3, %5, !dbg !6262
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6262
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6262
  %conv2 = zext i1 %cmp1 to i32, !dbg !6262
  br label %cond.end, !dbg !6262

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6262
  %tobool3 = icmp ne i32 %7, 0, !dbg !6262
  %lnot = xor i1 %tobool3, true, !dbg !6262
  %lnot.ext = zext i1 %lnot to i32, !dbg !6262
  br label %cond.end, !dbg !6262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6262
  ret i32 %cond, !dbg !6262
}

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %vec_, i32 %ix_) #0 !dbg !6264 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !6267, metadata !DIExpression()), !dbg !6268
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6269, metadata !DIExpression()), !dbg !6268
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6268
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !6268
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6268

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6268
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6268
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !6268
  %3 = load i32, i32* %num, align 8, !dbg !6268
  %cmp = icmp ult i32 %1, %3, !dbg !6268
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6270
  %land.ext = zext i1 %4 to i32, !dbg !6268
  %5 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6268
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %5, i32 0, i32 2, !dbg !6268
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6268
  %idxprom = zext i32 %6 to i64, !dbg !6268
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !6268
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !6268
  ret %struct.eh_region_d* %7, !dbg !6268
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %vec_, i32 %ix_, %struct.eh_region_d** %ptr) #0 !dbg !6271 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_region_d**, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !6275, metadata !DIExpression()), !dbg !6276
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6277, metadata !DIExpression()), !dbg !6276
  store %struct.eh_region_d** %ptr, %struct.eh_region_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %ptr.addr, metadata !6278, metadata !DIExpression()), !dbg !6276
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6279
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !6279
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6279

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6279
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6279
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !6279
  %3 = load i32, i32* %num, align 8, !dbg !6279
  %cmp = icmp ult i32 %1, %3, !dbg !6279
  br i1 %cmp, label %if.then, label %if.else, !dbg !6276

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !6281
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 2, !dbg !6281
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6281
  %idxprom = zext i32 %5 to i64, !dbg !6281
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !6281
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !6281
  %7 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !6281
  store %struct.eh_region_d* %6, %struct.eh_region_d** %7, align 8, !dbg !6281
  store i32 1, i32* %retval, align 4, !dbg !6281
  br label %return, !dbg !6281

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !6283
  store %struct.eh_region_d* null, %struct.eh_region_d** %8, align 8, !dbg !6283
  store i32 0, i32* %retval, align 4, !dbg !6283
  br label %return, !dbg !6283

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6276
  ret i32 %9, !dbg !6276
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_) #0 !dbg !6285 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6288, metadata !DIExpression()), !dbg !6289
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6290, metadata !DIExpression()), !dbg !6289
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6289
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !6289
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6289

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6289
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6289
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !6289
  %3 = load i32, i32* %num, align 8, !dbg !6289
  %cmp = icmp ult i32 %1, %3, !dbg !6289
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6291
  %land.ext = zext i1 %4 to i32, !dbg !6289
  %5 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6289
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %5, i32 0, i32 2, !dbg !6289
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6289
  %idxprom = zext i32 %6 to i64, !dbg !6289
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !6289
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !6289
  ret %struct.eh_landing_pad_d* %7, !dbg !6289
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d** %ptr) #0 !dbg !6292 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !6296, metadata !DIExpression()), !dbg !6297
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6298, metadata !DIExpression()), !dbg !6297
  store %struct.eh_landing_pad_d** %ptr, %struct.eh_landing_pad_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %ptr.addr, metadata !6299, metadata !DIExpression()), !dbg !6297
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6300
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !6300
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6300

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6300
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6300
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !6300
  %3 = load i32, i32* %num, align 8, !dbg !6300
  %cmp = icmp ult i32 %1, %3, !dbg !6300
  br i1 %cmp, label %if.then, label %if.else, !dbg !6297

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !6302
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 2, !dbg !6302
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6302
  %idxprom = zext i32 %5 to i64, !dbg !6302
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !6302
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !6302
  %7 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !6302
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %7, align 8, !dbg !6302
  store i32 1, i32* %retval, align 4, !dbg !6302
  br label %return, !dbg !6302

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !6304
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %8, align 8, !dbg !6304
  store i32 0, i32* %retval, align 4, !dbg !6304
  br label %return, !dbg !6304

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6297
  ret i32 %9, !dbg !6297
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @input_gimple_stmt(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %struct.function* %fn, i32 %tag) #0 !dbg !6306 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %tag.addr = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %num_ops = alloca i64, align 8
  %i = alloca i64, align 8
  %bp = alloca %struct.bitpack_d*, align 8
  %str = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %type110 = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %i193 = alloca i32, align 4
  %op199 = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !6309, metadata !DIExpression()), !dbg !6310
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !6311, metadata !DIExpression()), !dbg !6312
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !6313, metadata !DIExpression()), !dbg !6314
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !6315, metadata !DIExpression()), !dbg !6316
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6317, metadata !DIExpression()), !dbg !6318
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6319, metadata !DIExpression()), !dbg !6320
  call void @llvm.dbg.declare(metadata i64* %num_ops, metadata !6321, metadata !DIExpression()), !dbg !6322
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6323, metadata !DIExpression()), !dbg !6324
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !6325, metadata !DIExpression()), !dbg !6326
  %0 = load i32, i32* %tag.addr, align 4, !dbg !6327
  %call = call i32 @lto_tag_to_gimple_code(i32 %0), !dbg !6328
  store i32 %call, i32* %code, align 4, !dbg !6329
  %1 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6330
  %call1 = call %struct.bitpack_d* @lto_input_bitpack(%struct.lto_input_block* %1), !dbg !6331
  store %struct.bitpack_d* %call1, %struct.bitpack_d** %bp, align 8, !dbg !6332
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6333
  %call2 = call i64 @bp_unpack_value(%struct.bitpack_d* %2, i32 32), !dbg !6334
  store i64 %call2, i64* %num_ops, align 8, !dbg !6335
  %3 = load i32, i32* %code, align 4, !dbg !6336
  %4 = load i64, i64* %num_ops, align 8, !dbg !6336
  %conv = trunc i64 %4 to i32, !dbg !6336
  %call3 = call %union.gimple_statement_d* @gimple_alloc_stat(i32 %3, i32 %conv), !dbg !6336
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !6337
  %5 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6338
  %call4 = call i64 @bp_unpack_value(%struct.bitpack_d* %5, i32 1), !dbg !6339
  %conv5 = trunc i64 %call4 to i32, !dbg !6339
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6340
  %gsbase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_base*, !dbg !6341
  %7 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6342
  %bf.load = load i32, i32* %7, align 8, !dbg !6343
  %bf.value = and i32 %conv5, 1, !dbg !6343
  %bf.shl = shl i32 %bf.value, 8, !dbg !6343
  %bf.clear = and i32 %bf.load, -257, !dbg !6343
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !6343
  store i32 %bf.set, i32* %7, align 8, !dbg !6343
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6344
  %call6 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %8), !dbg !6346
  %tobool = icmp ne i8 %call6, 0, !dbg !6346
  br i1 %tobool, label %if.then, label %if.end, !dbg !6347

if.then:                                          ; preds = %entry
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6348
  %call7 = call i64 @bp_unpack_value(%struct.bitpack_d* %9, i32 1), !dbg !6349
  %conv8 = trunc i64 %call7 to i32, !dbg !6349
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6350
  %gsbase9 = bitcast %union.gimple_statement_d* %10 to %struct.gimple_statement_base*, !dbg !6351
  %11 = bitcast %struct.gimple_statement_base* %gsbase9 to i32*, !dbg !6352
  %bf.load10 = load i32, i32* %11, align 8, !dbg !6353
  %bf.value11 = and i32 %conv8, 1, !dbg !6353
  %bf.shl12 = shl i32 %bf.value11, 10, !dbg !6353
  %bf.clear13 = and i32 %bf.load10, -1025, !dbg !6353
  %bf.set14 = or i32 %bf.clear13, %bf.shl12, !dbg !6353
  store i32 %bf.set14, i32* %11, align 8, !dbg !6353
  br label %if.end, !dbg !6350

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6354
  %call15 = call i64 @bp_unpack_value(%struct.bitpack_d* %12, i32 1), !dbg !6355
  %conv16 = trunc i64 %call15 to i32, !dbg !6355
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6356
  %gsbase17 = bitcast %union.gimple_statement_d* %13 to %struct.gimple_statement_base*, !dbg !6357
  %14 = bitcast %struct.gimple_statement_base* %gsbase17 to i32*, !dbg !6358
  %bf.load18 = load i32, i32* %14, align 8, !dbg !6359
  %bf.value19 = and i32 %conv16, 1, !dbg !6359
  %bf.shl20 = shl i32 %bf.value19, 14, !dbg !6359
  %bf.clear21 = and i32 %bf.load18, -16385, !dbg !6359
  %bf.set22 = or i32 %bf.clear21, %bf.shl20, !dbg !6359
  store i32 %bf.set22, i32* %14, align 8, !dbg !6359
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6360
  %call23 = call i64 @bp_unpack_value(%struct.bitpack_d* %15, i32 16), !dbg !6361
  %conv24 = trunc i64 %call23 to i32, !dbg !6361
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6362
  %gsbase25 = bitcast %union.gimple_statement_d* %16 to %struct.gimple_statement_base*, !dbg !6363
  %17 = bitcast %struct.gimple_statement_base* %gsbase25 to i32*, !dbg !6364
  %bf.load26 = load i32, i32* %17, align 8, !dbg !6365
  %bf.value27 = and i32 %conv24, 65535, !dbg !6365
  %bf.shl28 = shl i32 %bf.value27, 16, !dbg !6365
  %bf.clear29 = and i32 %bf.load26, 65535, !dbg !6365
  %bf.set30 = or i32 %bf.clear29, %bf.shl28, !dbg !6365
  store i32 %bf.set30, i32* %17, align 8, !dbg !6365
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !6366
  call void @bitpack_delete(%struct.bitpack_d* %18), !dbg !6367
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6368
  %20 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6369
  %21 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6370
  %call31 = call i32 @lto_input_location(%struct.lto_input_block* %20, %struct.data_in* %21), !dbg !6371
  call void @gimple_set_location(%union.gimple_statement_d* %19, i32 %call31), !dbg !6372
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6373
  %23 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6374
  %24 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6375
  %call32 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %23, %struct.data_in* %24), !dbg !6376
  call void @gimple_set_block(%union.gimple_statement_d* %22, %union.tree_node* %call32), !dbg !6377
  %25 = load i32, i32* %code, align 4, !dbg !6378
  switch i32 %25, label %sw.default [
    i32 14, label %sw.bb
    i32 13, label %sw.bb35
    i32 15, label %sw.bb37
    i32 7, label %sw.bb40
    i32 6, label %sw.bb53
    i32 8, label %sw.bb53
    i32 9, label %sw.bb53
    i32 5, label %sw.bb53
    i32 4, label %sw.bb53
    i32 1, label %sw.bb53
    i32 3, label %sw.bb53
    i32 2, label %sw.bb53
    i32 18, label %sw.bb157
    i32 33, label %sw.bb157
  ], !dbg !6379

sw.bb:                                            ; preds = %if.end
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6380
  %27 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6382
  %call33 = call i64 @lto_input_sleb128(%struct.lto_input_block* %27), !dbg !6383
  %conv34 = trunc i64 %call33 to i32, !dbg !6383
  call void @gimple_resx_set_region(%union.gimple_statement_d* %26, i32 %conv34), !dbg !6384
  br label %sw.epilog, !dbg !6385

sw.bb35:                                          ; preds = %if.end
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6386
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6387
  %30 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6388
  %call36 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %29, %struct.data_in* %30), !dbg !6389
  call void @gimple_eh_must_not_throw_set_fndecl(%union.gimple_statement_d* %28, %union.tree_node* %call36), !dbg !6390
  br label %sw.epilog, !dbg !6391

sw.bb37:                                          ; preds = %if.end
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6392
  %32 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6393
  %call38 = call i64 @lto_input_sleb128(%struct.lto_input_block* %32), !dbg !6394
  %conv39 = trunc i64 %call38 to i32, !dbg !6394
  call void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %31, i32 %conv39), !dbg !6395
  br label %sw.epilog, !dbg !6396

sw.bb40:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %str, metadata !6397, metadata !DIExpression()), !dbg !6399
  %33 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6400
  %call41 = call i64 @lto_input_uleb128(%struct.lto_input_block* %33), !dbg !6401
  %conv42 = trunc i64 %call41 to i8, !dbg !6401
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6402
  %gimple_asm = bitcast %union.gimple_statement_d* %34 to %struct.gimple_statement_asm*, !dbg !6403
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 2, !dbg !6404
  store i8 %conv42, i8* %ni, align 8, !dbg !6405
  %35 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6406
  %call43 = call i64 @lto_input_uleb128(%struct.lto_input_block* %35), !dbg !6407
  %conv44 = trunc i64 %call43 to i8, !dbg !6407
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6408
  %gimple_asm45 = bitcast %union.gimple_statement_d* %36 to %struct.gimple_statement_asm*, !dbg !6409
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm45, i32 0, i32 3, !dbg !6410
  store i8 %conv44, i8* %no, align 1, !dbg !6411
  %37 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6412
  %call46 = call i64 @lto_input_uleb128(%struct.lto_input_block* %37), !dbg !6413
  %conv47 = trunc i64 %call46 to i8, !dbg !6413
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6414
  %gimple_asm48 = bitcast %union.gimple_statement_d* %38 to %struct.gimple_statement_asm*, !dbg !6415
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm48, i32 0, i32 4, !dbg !6416
  store i8 %conv47, i8* %nc, align 2, !dbg !6417
  %39 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6418
  %40 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6419
  %call49 = call %union.tree_node* @input_string_cst(%struct.data_in* %39, %struct.lto_input_block* %40), !dbg !6420
  store %union.tree_node* %call49, %union.tree_node** %str, align 8, !dbg !6421
  %41 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !6422
  %string = bitcast %union.tree_node* %41 to %struct.tree_string*, !dbg !6422
  %str50 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !6422
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str50, i64 0, i64 0, !dbg !6422
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6423
  %gimple_asm51 = bitcast %union.gimple_statement_d* %42 to %struct.gimple_statement_asm*, !dbg !6424
  %string52 = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm51, i32 0, i32 1, !dbg !6425
  store i8* %arraydecay, i8** %string52, align 8, !dbg !6426
  br label %sw.bb53, !dbg !6427

sw.bb53:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %sw.bb40
  store i64 0, i64* %i, align 8, !dbg !6428
  br label %for.cond, !dbg !6430

for.cond:                                         ; preds = %for.inc155, %sw.bb53
  %43 = load i64, i64* %i, align 8, !dbg !6431
  %44 = load i64, i64* %num_ops, align 8, !dbg !6433
  %cmp = icmp ult i64 %43, %44, !dbg !6434
  br i1 %cmp, label %for.body, label %for.end156, !dbg !6435

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6436, metadata !DIExpression()), !dbg !6438
  %45 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6439
  %46 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6440
  %call55 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %45, %struct.data_in* %46), !dbg !6441
  store %union.tree_node* %call55, %union.tree_node** %op, align 8, !dbg !6438
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6442
  %48 = load i64, i64* %i, align 8, !dbg !6443
  %conv56 = trunc i64 %48 to i32, !dbg !6443
  %49 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6444
  call void @gimple_set_op(%union.gimple_statement_d* %47, i32 %conv56, %union.tree_node* %49), !dbg !6445
  %50 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6446
  %tobool57 = icmp ne %union.tree_node* %50, null, !dbg !6446
  br i1 %tobool57, label %if.end59, label %if.then58, !dbg !6448

if.then58:                                        ; preds = %for.body
  br label %for.inc155, !dbg !6449

if.end59:                                         ; preds = %for.body
  %51 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6450
  %base = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6450
  %52 = bitcast %struct.tree_base* %base to i64*, !dbg !6450
  %bf.load60 = load i64, i64* %52, align 8, !dbg !6450
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !6450
  %bf.cast = trunc i64 %bf.clear61 to i32, !dbg !6450
  %cmp62 = icmp eq i32 %bf.cast, 121, !dbg !6452
  br i1 %cmp62, label %land.lhs.true, label %if.end89, !dbg !6453

land.lhs.true:                                    ; preds = %if.end59
  %53 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6454
  %exp = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !6454
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6454
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6454
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6454
  %base64 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !6454
  %55 = bitcast %struct.tree_base* %base64 to i64*, !dbg !6454
  %bf.load65 = load i64, i64* %55, align 8, !dbg !6454
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !6454
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !6454
  %cmp68 = icmp eq i32 %bf.cast67, 32, !dbg !6455
  br i1 %cmp68, label %land.lhs.true70, label %if.end89, !dbg !6456

land.lhs.true70:                                  ; preds = %land.lhs.true
  %56 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6457
  %common = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !6457
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6457
  %57 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6457
  %common71 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !6457
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !6457
  %58 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !6457
  %59 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6458
  %common73 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !6458
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !6458
  %60 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !6458
  %call75 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %58, %union.tree_node* %60), !dbg !6459
  %tobool76 = icmp ne i8 %call75, 0, !dbg !6459
  br i1 %tobool76, label %if.end89, label %if.then77, !dbg !6460

if.then77:                                        ; preds = %land.lhs.true70
  %61 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6461
  %common78 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !6461
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !6461
  %62 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !6461
  %common80 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !6461
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !6461
  %63 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !6461
  %64 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6461
  %exp82 = bitcast %union.tree_node* %64 to %struct.tree_exp*, !dbg !6461
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !6461
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 0, !dbg !6461
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !6461
  %call85 = call %union.tree_node* @build1_stat(i32 118, %union.tree_node* %63, %union.tree_node* %65), !dbg !6461
  %66 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6463
  %exp86 = bitcast %union.tree_node* %66 to %struct.tree_exp*, !dbg !6463
  %operands87 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp86, i32 0, i32 3, !dbg !6463
  %arrayidx88 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands87, i64 0, i64 0, !dbg !6463
  store %union.tree_node* %call85, %union.tree_node** %arrayidx88, align 8, !dbg !6464
  br label %for.inc155, !dbg !6465

if.end89:                                         ; preds = %land.lhs.true70, %land.lhs.true, %if.end59
  %67 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6466
  %base90 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !6466
  %68 = bitcast %struct.tree_base* %base90 to i64*, !dbg !6466
  %bf.load91 = load i64, i64* %68, align 8, !dbg !6466
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !6466
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !6466
  %cmp94 = icmp eq i32 %bf.cast93, 121, !dbg !6468
  br i1 %cmp94, label %if.then96, label %if.end100, !dbg !6469

if.then96:                                        ; preds = %if.end89
  %69 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6470
  %exp97 = bitcast %union.tree_node* %69 to %struct.tree_exp*, !dbg !6470
  %operands98 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp97, i32 0, i32 3, !dbg !6470
  %arrayidx99 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands98, i64 0, i64 0, !dbg !6470
  %70 = load %union.tree_node*, %union.tree_node** %arrayidx99, align 8, !dbg !6470
  store %union.tree_node* %70, %union.tree_node** %op, align 8, !dbg !6471
  br label %if.end100, !dbg !6472

if.end100:                                        ; preds = %if.then96, %if.end89
  br label %while.cond, !dbg !6473

while.cond:                                       ; preds = %if.end147, %if.end100
  %71 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6474
  %call101 = call zeroext i8 @handled_component_p(%union.tree_node* %71), !dbg !6475
  %tobool102 = icmp ne i8 %call101, 0, !dbg !6473
  br i1 %tobool102, label %while.body, label %while.end, !dbg !6473

while.body:                                       ; preds = %while.cond
  %72 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6476
  %base103 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !6476
  %73 = bitcast %struct.tree_base* %base103 to i64*, !dbg !6476
  %bf.load104 = load i64, i64* %73, align 8, !dbg !6476
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !6476
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !6476
  %cmp107 = icmp eq i32 %bf.cast106, 41, !dbg !6479
  br i1 %cmp107, label %if.then109, label %if.end140, !dbg !6480

if.then109:                                       ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !6481, metadata !DIExpression()), !dbg !6483
  call void @llvm.dbg.declare(metadata %union.tree_node** %type110, metadata !6484, metadata !DIExpression()), !dbg !6485
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !6486, metadata !DIExpression()), !dbg !6487
  %74 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6488
  %exp111 = bitcast %union.tree_node* %74 to %struct.tree_exp*, !dbg !6488
  %operands112 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp111, i32 0, i32 3, !dbg !6488
  %arrayidx113 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands112, i64 0, i64 1, !dbg !6488
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx113, align 8, !dbg !6488
  store %union.tree_node* %75, %union.tree_node** %field, align 8, !dbg !6489
  %76 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6490
  %decl_minimal = bitcast %union.tree_node* %76 to %struct.tree_decl_minimal*, !dbg !6490
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !6490
  %77 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6490
  store %union.tree_node* %77, %union.tree_node** %type110, align 8, !dbg !6491
  %78 = load %union.tree_node*, %union.tree_node** %type110, align 8, !dbg !6492
  %type114 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !6492
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 1, !dbg !6492
  %79 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6492
  store %union.tree_node* %79, %union.tree_node** %tem, align 8, !dbg !6494
  br label %for.cond115, !dbg !6495

for.cond115:                                      ; preds = %for.inc, %if.then109
  %80 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6496
  %tobool116 = icmp ne %union.tree_node* %80, null, !dbg !6498
  br i1 %tobool116, label %for.body117, label %for.end, !dbg !6498

for.body117:                                      ; preds = %for.cond115
  %81 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6499
  %82 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6502
  %cmp118 = icmp eq %union.tree_node* %81, %82, !dbg !6503
  br i1 %cmp118, label %if.then130, label %lor.lhs.false, !dbg !6504

lor.lhs.false:                                    ; preds = %for.body117
  %83 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6505
  %common120 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !6505
  %type121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2, !dbg !6505
  %84 = load %union.tree_node*, %union.tree_node** %type121, align 8, !dbg !6505
  %85 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6506
  %common122 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !6506
  %type123 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common122, i32 0, i32 2, !dbg !6506
  %86 = load %union.tree_node*, %union.tree_node** %type123, align 8, !dbg !6506
  %cmp124 = icmp eq %union.tree_node* %84, %86, !dbg !6507
  br i1 %cmp124, label %land.lhs.true126, label %if.end131, !dbg !6508

land.lhs.true126:                                 ; preds = %lor.lhs.false
  %87 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6509
  %88 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6510
  %call127 = call zeroext i8 @compare_field_offset(%union.tree_node* %87, %union.tree_node* %88), !dbg !6511
  %conv128 = zext i8 %call127 to i32, !dbg !6511
  %tobool129 = icmp ne i32 %conv128, 0, !dbg !6511
  br i1 %tobool129, label %if.then130, label %if.end131, !dbg !6512

if.then130:                                       ; preds = %land.lhs.true126, %for.body117
  br label %for.end, !dbg !6513

if.end131:                                        ; preds = %land.lhs.true126, %lor.lhs.false
  br label %for.inc, !dbg !6514

for.inc:                                          ; preds = %if.end131
  %89 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6515
  %common132 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !6515
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common132, i32 0, i32 1, !dbg !6515
  %90 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6515
  store %union.tree_node* %90, %union.tree_node** %tem, align 8, !dbg !6516
  br label %for.cond115, !dbg !6517, !llvm.loop !6518

for.end:                                          ; preds = %if.then130, %for.cond115
  %91 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6520
  %cmp133 = icmp ne %union.tree_node* %91, null, !dbg !6522
  br i1 %cmp133, label %if.then135, label %if.end139, !dbg !6523

if.then135:                                       ; preds = %for.end
  %92 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6524
  %93 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6525
  %exp136 = bitcast %union.tree_node* %93 to %struct.tree_exp*, !dbg !6525
  %operands137 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp136, i32 0, i32 3, !dbg !6525
  %arrayidx138 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands137, i64 0, i64 1, !dbg !6525
  store %union.tree_node* %92, %union.tree_node** %arrayidx138, align 8, !dbg !6526
  br label %if.end139, !dbg !6525

if.end139:                                        ; preds = %if.then135, %for.end
  br label %if.end140, !dbg !6527

if.end140:                                        ; preds = %if.end139, %while.body
  %94 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6528
  %exp141 = bitcast %union.tree_node* %94 to %struct.tree_exp*, !dbg !6528
  %operands142 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp141, i32 0, i32 3, !dbg !6528
  %arrayidx143 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands142, i64 0, i64 0, !dbg !6528
  %95 = load %union.tree_node*, %union.tree_node** %arrayidx143, align 8, !dbg !6528
  %call144 = call zeroext i8 @handled_component_p(%union.tree_node* %95), !dbg !6530
  %tobool145 = icmp ne i8 %call144, 0, !dbg !6530
  br i1 %tobool145, label %if.end147, label %if.then146, !dbg !6531

if.then146:                                       ; preds = %if.end140
  br label %while.end, !dbg !6532

if.end147:                                        ; preds = %if.end140
  %96 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6533
  %exp148 = bitcast %union.tree_node* %96 to %struct.tree_exp*, !dbg !6533
  %operands149 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp148, i32 0, i32 3, !dbg !6533
  %arrayidx150 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands149, i64 0, i64 0, !dbg !6533
  %97 = load %union.tree_node*, %union.tree_node** %arrayidx150, align 8, !dbg !6533
  store %union.tree_node* %97, %union.tree_node** %op, align 8, !dbg !6534
  br label %while.cond, !dbg !6473, !llvm.loop !6535

while.end:                                        ; preds = %if.then146, %while.cond
  %98 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6537
  %call151 = call zeroext i8 @handled_component_p(%union.tree_node* %98), !dbg !6539
  %tobool152 = icmp ne i8 %call151, 0, !dbg !6539
  br i1 %tobool152, label %if.then153, label %if.end154, !dbg !6540

if.then153:                                       ; preds = %while.end
  %99 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6541
  call void @maybe_fixup_handled_component(%union.tree_node* %99), !dbg !6542
  br label %if.end154, !dbg !6542

if.end154:                                        ; preds = %if.then153, %while.end
  br label %for.inc155, !dbg !6543

for.inc155:                                       ; preds = %if.end154, %if.then77, %if.then58
  %100 = load i64, i64* %i, align 8, !dbg !6544
  %inc = add i64 %100, 1, !dbg !6544
  store i64 %inc, i64* %i, align 8, !dbg !6544
  br label %for.cond, !dbg !6545, !llvm.loop !6546

for.end156:                                       ; preds = %for.cond
  br label %sw.epilog, !dbg !6548

sw.bb157:                                         ; preds = %if.end, %if.end
  br label %sw.epilog, !dbg !6549

sw.default:                                       ; preds = %if.end
  %101 = load i32, i32* %tag.addr, align 4, !dbg !6550
  %call158 = call i8* @lto_tag_name(i32 %101), !dbg !6551
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.7, i64 0, i64 0), i8* %call158), !dbg !6552
  br label %sw.epilog, !dbg !6553

sw.epilog:                                        ; preds = %sw.default, %sw.bb157, %for.end156, %sw.bb37, %sw.bb35, %sw.bb
  %102 = load i32, i32* %code, align 4, !dbg !6554
  %cmp159 = icmp eq i32 %102, 6, !dbg !6556
  br i1 %cmp159, label %if.then164, label %lor.lhs.false161, !dbg !6557

lor.lhs.false161:                                 ; preds = %sw.epilog
  %103 = load i32, i32* %code, align 4, !dbg !6558
  %cmp162 = icmp eq i32 %103, 8, !dbg !6559
  br i1 %cmp162, label %if.then164, label %if.else, !dbg !6560

if.then164:                                       ; preds = %lor.lhs.false161, %sw.epilog
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6561, metadata !DIExpression()), !dbg !6563
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6564
  %call165 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %104), !dbg !6565
  store %union.tree_node* %call165, %union.tree_node** %lhs, align 8, !dbg !6563
  %105 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6566
  %tobool166 = icmp ne %union.tree_node* %105, null, !dbg !6566
  br i1 %tobool166, label %land.lhs.true167, label %if.end175, !dbg !6568

land.lhs.true167:                                 ; preds = %if.then164
  %106 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6569
  %base168 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !6569
  %107 = bitcast %struct.tree_base* %base168 to i64*, !dbg !6569
  %bf.load169 = load i64, i64* %107, align 8, !dbg !6569
  %bf.clear170 = and i64 %bf.load169, 65535, !dbg !6569
  %bf.cast171 = trunc i64 %bf.clear170 to i32, !dbg !6569
  %cmp172 = icmp eq i32 %bf.cast171, 141, !dbg !6570
  br i1 %cmp172, label %if.then174, label %if.end175, !dbg !6571

if.then174:                                       ; preds = %land.lhs.true167
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6572
  %109 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6573
  %ssa_name = bitcast %union.tree_node* %109 to %struct.tree_ssa_name*, !dbg !6573
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6573
  store %union.gimple_statement_d* %108, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6574
  br label %if.end175, !dbg !6573

if.end175:                                        ; preds = %if.then174, %land.lhs.true167, %if.then164
  br label %if.end216, !dbg !6575

if.else:                                          ; preds = %lor.lhs.false161
  %110 = load i32, i32* %code, align 4, !dbg !6576
  %cmp176 = icmp eq i32 %110, 4, !dbg !6578
  br i1 %cmp176, label %if.then178, label %if.else189, !dbg !6579

if.then178:                                       ; preds = %if.else
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6580
  %call179 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %111), !dbg !6580
  %call180 = call zeroext i8 @emit_label_in_global_context_p(%union.tree_node* %call179), !dbg !6580
  %conv181 = zext i8 %call180 to i32, !dbg !6580
  %tobool182 = icmp ne i32 %conv181, 0, !dbg !6580
  br i1 %tobool182, label %cond.false, label %lor.lhs.false183, !dbg !6580

lor.lhs.false183:                                 ; preds = %if.then178
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6580
  %call184 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %112), !dbg !6580
  %decl_minimal185 = bitcast %union.tree_node* %call184 to %struct.tree_decl_minimal*, !dbg !6580
  %context186 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal185, i32 0, i32 4, !dbg !6580
  %113 = load %union.tree_node*, %union.tree_node** %context186, align 8, !dbg !6580
  %114 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6580
  %decl = getelementptr inbounds %struct.function, %struct.function* %114, i32 0, i32 6, !dbg !6580
  %115 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6580
  %cmp187 = icmp eq %union.tree_node* %113, %115, !dbg !6580
  br i1 %cmp187, label %cond.false, label %cond.true, !dbg !6580

cond.true:                                        ; preds = %lor.lhs.false183
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6580
  br label %cond.end, !dbg !6580

cond.false:                                       ; preds = %lor.lhs.false183, %if.then178
  br label %cond.end, !dbg !6580

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6580
  br label %if.end215, !dbg !6580

if.else189:                                       ; preds = %if.else
  %116 = load i32, i32* %code, align 4, !dbg !6581
  %cmp190 = icmp eq i32 %116, 7, !dbg !6583
  br i1 %cmp190, label %if.then192, label %if.end214, !dbg !6584

if.then192:                                       ; preds = %if.else189
  call void @llvm.dbg.declare(metadata i32* %i193, metadata !6585, metadata !DIExpression()), !dbg !6587
  store i32 0, i32* %i193, align 4, !dbg !6588
  br label %for.cond194, !dbg !6590

for.cond194:                                      ; preds = %for.inc211, %if.then192
  %117 = load i32, i32* %i193, align 4, !dbg !6591
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6593
  %call195 = call i32 @gimple_asm_noutputs(%union.gimple_statement_d* %118), !dbg !6594
  %cmp196 = icmp ult i32 %117, %call195, !dbg !6595
  br i1 %cmp196, label %for.body198, label %for.end213, !dbg !6596

for.body198:                                      ; preds = %for.cond194
  call void @llvm.dbg.declare(metadata %union.tree_node** %op199, metadata !6597, metadata !DIExpression()), !dbg !6599
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6600
  %120 = load i32, i32* %i193, align 4, !dbg !6600
  %call200 = call %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %119, i32 %120), !dbg !6600
  %list = bitcast %union.tree_node* %call200 to %struct.tree_list*, !dbg !6600
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6600
  %121 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6600
  store %union.tree_node* %121, %union.tree_node** %op199, align 8, !dbg !6599
  %122 = load %union.tree_node*, %union.tree_node** %op199, align 8, !dbg !6601
  %base201 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !6601
  %123 = bitcast %struct.tree_base* %base201 to i64*, !dbg !6601
  %bf.load202 = load i64, i64* %123, align 8, !dbg !6601
  %bf.clear203 = and i64 %bf.load202, 65535, !dbg !6601
  %bf.cast204 = trunc i64 %bf.clear203 to i32, !dbg !6601
  %cmp205 = icmp eq i32 %bf.cast204, 141, !dbg !6603
  br i1 %cmp205, label %if.then207, label %if.end210, !dbg !6604

if.then207:                                       ; preds = %for.body198
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6605
  %125 = load %union.tree_node*, %union.tree_node** %op199, align 8, !dbg !6606
  %ssa_name208 = bitcast %union.tree_node* %125 to %struct.tree_ssa_name*, !dbg !6606
  %def_stmt209 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name208, i32 0, i32 2, !dbg !6606
  store %union.gimple_statement_d* %124, %union.gimple_statement_d** %def_stmt209, align 8, !dbg !6607
  br label %if.end210, !dbg !6606

if.end210:                                        ; preds = %if.then207, %for.body198
  br label %for.inc211, !dbg !6608

for.inc211:                                       ; preds = %if.end210
  %126 = load i32, i32* %i193, align 4, !dbg !6609
  %inc212 = add i32 %126, 1, !dbg !6609
  store i32 %inc212, i32* %i193, align 4, !dbg !6609
  br label %for.cond194, !dbg !6610, !llvm.loop !6611

for.end213:                                       ; preds = %for.cond194
  br label %if.end214, !dbg !6613

if.end214:                                        ; preds = %for.end213, %if.else189
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %cond.end
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %if.end175
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6614
  call void @maybe_fixup_decls(%union.gimple_statement_d* %127), !dbg !6615
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6616
  call void @gimple_set_modified(%union.gimple_statement_d* %128, i8 zeroext 1), !dbg !6617
  %129 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6618
  ret %union.gimple_statement_d* %129, !dbg !6619
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !6620 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6623, metadata !DIExpression()), !dbg !6624
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6625
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6626
  %cmp = icmp eq i32 %call, 2, !dbg !6627
  %conv = zext i1 %cmp to i32, !dbg !6627
  %conv1 = trunc i32 %conv to i8, !dbg !6626
  ret i8 %conv1, !dbg !6628
}

declare dso_local void @find_referenced_vars_in(%union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_tag_check_set(i32 %actual, i32 %ntags, ...) #0 !dbg !6629 {
entry:
  %actual.addr = alloca i32, align 4
  %ntags.addr = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %i = alloca i32, align 4
  store i32 %actual, i32* %actual.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %actual.addr, metadata !6632, metadata !DIExpression()), !dbg !6633
  store i32 %ntags, i32* %ntags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ntags.addr, metadata !6634, metadata !DIExpression()), !dbg !6635
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !6636, metadata !DIExpression()), !dbg !6649
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6650, metadata !DIExpression()), !dbg !6651
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6652
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !6652
  call void @llvm.va_start(i8* %arraydecay1), !dbg !6652
  store i32 0, i32* %i, align 4, !dbg !6653
  br label %for.cond, !dbg !6655

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6656
  %1 = load i32, i32* %ntags.addr, align 4, !dbg !6658
  %cmp = icmp slt i32 %0, %1, !dbg !6659
  br i1 %cmp, label %for.body, label %for.end, !dbg !6660

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %actual.addr, align 4, !dbg !6661
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6663
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0, !dbg !6663
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !6663
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !6663
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !6663

vaarg.in_reg:                                     ; preds = %for.body
  %3 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3, !dbg !6663
  %reg_save_area = load i8*, i8** %3, align 16, !dbg !6663
  %4 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !6663
  %5 = bitcast i8* %4 to i32*, !dbg !6663
  %6 = add i32 %gp_offset, 8, !dbg !6663
  store i32 %6, i32* %gp_offset_p, align 16, !dbg !6663
  br label %vaarg.end, !dbg !6663

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2, !dbg !6663
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !6663
  %7 = bitcast i8* %overflow_arg_area to i32*, !dbg !6663
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !6663
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !6663
  br label %vaarg.end, !dbg !6663

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %5, %vaarg.in_reg ], [ %7, %vaarg.in_mem ], !dbg !6663
  %8 = load i32, i32* %vaarg.addr, align 4, !dbg !6663
  %cmp3 = icmp eq i32 %2, %8, !dbg !6664
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6665

if.then:                                          ; preds = %vaarg.end
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6666
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*, !dbg !6666
  call void @llvm.va_end(i8* %arraydecay45), !dbg !6666
  br label %return, !dbg !6668

if.end:                                           ; preds = %vaarg.end
  br label %for.inc, !dbg !6663

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !6669
  %inc = add nsw i32 %9, 1, !dbg !6669
  store i32 %inc, i32* %i, align 4, !dbg !6669
  br label %for.cond, !dbg !6670, !llvm.loop !6671

for.end:                                          ; preds = %for.cond
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, !dbg !6673
  %arraydecay67 = bitcast %struct.__va_list_tag* %arraydecay6 to i8*, !dbg !6673
  call void @llvm.va_end(i8* %arraydecay67), !dbg !6673
  %10 = load i32, i32* %actual.addr, align 4, !dbg !6674
  %call = call i8* @lto_tag_name(i32 %10), !dbg !6675
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0), i8* %call), !dbg !6676
  br label %return, !dbg !6677

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !6677
}

declare dso_local void @add_stmt_to_eh_lp(%union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @input_phi(%struct.lto_input_block* %ib, %struct.basic_block_def* %bb, %struct.data_in* %data_in, %struct.function* %fn) #0 !dbg !6678 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %fn.addr = alloca %struct.function*, align 8
  %ix = alloca i64, align 8
  %phi_result = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %result = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %src_index = alloca i32, align 4
  %arg_loc = alloca i32, align 4
  %sbb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %j = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !6681, metadata !DIExpression()), !dbg !6682
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6683, metadata !DIExpression()), !dbg !6684
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !6685, metadata !DIExpression()), !dbg !6686
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !6689, metadata !DIExpression()), !dbg !6690
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_result, metadata !6691, metadata !DIExpression()), !dbg !6692
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6693, metadata !DIExpression()), !dbg !6694
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6695, metadata !DIExpression()), !dbg !6696
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %result, metadata !6697, metadata !DIExpression()), !dbg !6698
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6699
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !6700
  store i64 %call, i64* %ix, align 8, !dbg !6701
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6702
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !6702
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6702
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %2, i32 0, i32 2, !dbg !6702
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !6702
  %tobool = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !6702
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6702

cond.true:                                        ; preds = %entry
  %4 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6702
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 3, !dbg !6702
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !6702
  %ssa_names2 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 2, !dbg !6702
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names2, align 8, !dbg !6702
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %6, i32 0, i32 0, !dbg !6702
  br label %cond.end, !dbg !6702

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6702

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6702
  %7 = load i64, i64* %ix, align 8, !dbg !6702
  %conv = trunc i64 %7 to i32, !dbg !6702
  %call3 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %conv), !dbg !6702
  store %union.tree_node* %call3, %union.tree_node** %phi_result, align 8, !dbg !6703
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6704
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !6704
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6704
  %tobool4 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !6704
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !6704

cond.true5:                                       ; preds = %cond.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6704
  %preds6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 0, !dbg !6704
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds6, align 8, !dbg !6704
  %base7 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !6704
  br label %cond.end9, !dbg !6704

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !6704

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_edge_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !6704
  %call11 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond10), !dbg !6704
  store i32 %call11, i32* %len, align 4, !dbg !6705
  %12 = load %union.tree_node*, %union.tree_node** %phi_result, align 8, !dbg !6706
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6707
  %call12 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %12, %struct.basic_block_def* %13), !dbg !6708
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %result, align 8, !dbg !6709
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %result, align 8, !dbg !6710
  %15 = load %union.tree_node*, %union.tree_node** %phi_result, align 8, !dbg !6711
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !6711
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6711
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6712
  store i32 0, i32* %i, align 4, !dbg !6713
  br label %for.cond, !dbg !6715

for.cond:                                         ; preds = %for.inc51, %cond.end9
  %16 = load i32, i32* %i, align 4, !dbg !6716
  %17 = load i32, i32* %len, align 4, !dbg !6718
  %cmp = icmp slt i32 %16, %17, !dbg !6719
  br i1 %cmp, label %for.body, label %for.end53, !dbg !6720

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6721, metadata !DIExpression()), !dbg !6723
  %18 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6724
  %19 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6725
  %call14 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %18, %struct.data_in* %19), !dbg !6726
  store %union.tree_node* %call14, %union.tree_node** %def, align 8, !dbg !6723
  call void @llvm.dbg.declare(metadata i32* %src_index, metadata !6727, metadata !DIExpression()), !dbg !6728
  %20 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6729
  %call15 = call i64 @lto_input_uleb128(%struct.lto_input_block* %20), !dbg !6730
  %conv16 = trunc i64 %call15 to i32, !dbg !6730
  store i32 %conv16, i32* %src_index, align 4, !dbg !6728
  call void @llvm.dbg.declare(metadata i32* %arg_loc, metadata !6731, metadata !DIExpression()), !dbg !6732
  %21 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6733
  %22 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6734
  %call17 = call i32 @lto_input_location(%struct.lto_input_block* %21, %struct.data_in* %22), !dbg !6735
  store i32 %call17, i32* %arg_loc, align 4, !dbg !6732
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %sbb, metadata !6736, metadata !DIExpression()), !dbg !6737
  %23 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6738
  %cfg = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1, !dbg !6738
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6738
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 2, !dbg !6738
  %25 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6738
  %tobool18 = icmp ne %struct.VEC_basic_block_gc* %25, null, !dbg !6738
  br i1 %tobool18, label %cond.true19, label %cond.false23, !dbg !6738

cond.true19:                                      ; preds = %for.body
  %26 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !6738
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %26, i32 0, i32 1, !dbg !6738
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !6738
  %x_basic_block_info21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 2, !dbg !6738
  %28 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info21, align 8, !dbg !6738
  %base22 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %28, i32 0, i32 0, !dbg !6738
  br label %cond.end24, !dbg !6738

cond.false23:                                     ; preds = %for.body
  br label %cond.end24, !dbg !6738

cond.end24:                                       ; preds = %cond.false23, %cond.true19
  %cond25 = phi %struct.VEC_basic_block_base* [ %base22, %cond.true19 ], [ null, %cond.false23 ], !dbg !6738
  %29 = load i32, i32* %src_index, align 4, !dbg !6738
  %call26 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond25, i32 %29), !dbg !6738
  store %struct.basic_block_def* %call26, %struct.basic_block_def** %sbb, align 8, !dbg !6737
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6739, metadata !DIExpression()), !dbg !6740
  store %struct.edge_def* null, %struct.edge_def** %e, align 8, !dbg !6740
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6741, metadata !DIExpression()), !dbg !6742
  store i32 0, i32* %j, align 4, !dbg !6743
  br label %for.cond27, !dbg !6745

for.cond27:                                       ; preds = %for.inc, %cond.end24
  %30 = load i32, i32* %j, align 4, !dbg !6746
  %31 = load i32, i32* %len, align 4, !dbg !6748
  %cmp28 = icmp slt i32 %30, %31, !dbg !6749
  br i1 %cmp28, label %for.body30, label %for.end, !dbg !6750

for.body30:                                       ; preds = %for.cond27
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6751
  %preds31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 0, !dbg !6751
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds31, align 8, !dbg !6751
  %tobool32 = icmp ne %struct.VEC_edge_gc* %33, null, !dbg !6751
  br i1 %tobool32, label %cond.true33, label %cond.false36, !dbg !6751

cond.true33:                                      ; preds = %for.body30
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6751
  %preds34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 0, !dbg !6751
  %35 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds34, align 8, !dbg !6751
  %base35 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %35, i32 0, i32 0, !dbg !6751
  br label %cond.end37, !dbg !6751

cond.false36:                                     ; preds = %for.body30
  br label %cond.end37, !dbg !6751

cond.end37:                                       ; preds = %cond.false36, %cond.true33
  %cond38 = phi %struct.VEC_edge_base* [ %base35, %cond.true33 ], [ null, %cond.false36 ], !dbg !6751
  %36 = load i32, i32* %j, align 4, !dbg !6751
  %call39 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond38, i32 %36), !dbg !6751
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call39, i32 0, i32 0, !dbg !6753
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6753
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %sbb, align 8, !dbg !6754
  %cmp40 = icmp eq %struct.basic_block_def* %37, %38, !dbg !6755
  br i1 %cmp40, label %if.then, label %if.end, !dbg !6756

if.then:                                          ; preds = %cond.end37
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6757
  %preds42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 0, !dbg !6757
  %40 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds42, align 8, !dbg !6757
  %tobool43 = icmp ne %struct.VEC_edge_gc* %40, null, !dbg !6757
  br i1 %tobool43, label %cond.true44, label %cond.false47, !dbg !6757

cond.true44:                                      ; preds = %if.then
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6757
  %preds45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 0, !dbg !6757
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds45, align 8, !dbg !6757
  %base46 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %42, i32 0, i32 0, !dbg !6757
  br label %cond.end48, !dbg !6757

cond.false47:                                     ; preds = %if.then
  br label %cond.end48, !dbg !6757

cond.end48:                                       ; preds = %cond.false47, %cond.true44
  %cond49 = phi %struct.VEC_edge_base* [ %base46, %cond.true44 ], [ null, %cond.false47 ], !dbg !6757
  %43 = load i32, i32* %j, align 4, !dbg !6757
  %call50 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond49, i32 %43), !dbg !6757
  store %struct.edge_def* %call50, %struct.edge_def** %e, align 8, !dbg !6759
  br label %for.end, !dbg !6760

if.end:                                           ; preds = %cond.end37
  br label %for.inc, !dbg !6754

for.inc:                                          ; preds = %if.end
  %44 = load i32, i32* %j, align 4, !dbg !6761
  %inc = add nsw i32 %44, 1, !dbg !6761
  store i32 %inc, i32* %j, align 4, !dbg !6761
  br label %for.cond27, !dbg !6762, !llvm.loop !6763

for.end:                                          ; preds = %cond.end48, %for.cond27
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %result, align 8, !dbg !6765
  %46 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6766
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6767
  %48 = load i32, i32* %arg_loc, align 4, !dbg !6768
  call void @add_phi_arg(%union.gimple_statement_d* %45, %union.tree_node* %46, %struct.edge_def* %47, i32 %48), !dbg !6769
  br label %for.inc51, !dbg !6770

for.inc51:                                        ; preds = %for.end
  %49 = load i32, i32* %i, align 4, !dbg !6771
  %inc52 = add nsw i32 %49, 1, !dbg !6771
  store i32 %inc52, i32* %i, align 4, !dbg !6771
  br label %for.cond, !dbg !6772, !llvm.loop !6773

for.end53:                                        ; preds = %for.cond
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %result, align 8, !dbg !6775
  ret %union.gimple_statement_d* %50, !dbg !6776
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_tag_to_gimple_code(i32 %tag) #0 !dbg !6777 {
entry:
  %tag.addr = alloca i32, align 4
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !6780, metadata !DIExpression()), !dbg !6781
  %0 = load i32, i32* %tag.addr, align 4, !dbg !6782
  %call = call zeroext i8 @lto_tag_is_gimple_code_p(i32 %0), !dbg !6782
  %tobool = icmp ne i8 %call, 0, !dbg !6782
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6782

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 907, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6782
  br label %cond.end, !dbg !6782

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6782

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6782
  %1 = load i32, i32* %tag.addr, align 4, !dbg !6783
  %sub = sub i32 %1, 188, !dbg !6784
  %sub1 = sub i32 %sub, 1, !dbg !6785
  ret i32 %sub1, !dbg !6786
}

declare dso_local %union.gimple_statement_d* @gimple_alloc_stat(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6787 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6788, metadata !DIExpression()), !dbg !6789
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6790
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6791
  %cmp = icmp eq i32 %call, 6, !dbg !6792
  %conv = zext i1 %cmp to i32, !dbg !6792
  %conv1 = trunc i32 %conv to i8, !dbg !6791
  ret i8 %conv1, !dbg !6793
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !6794 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6797, metadata !DIExpression()), !dbg !6798
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !6799, metadata !DIExpression()), !dbg !6800
  %0 = load i32, i32* %location.addr, align 4, !dbg !6801
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6802
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6803
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6804
  store i32 %0, i32* %location1, align 8, !dbg !6805
  ret void, !dbg !6806
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) #0 !dbg !6807 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6810, metadata !DIExpression()), !dbg !6811
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !6812, metadata !DIExpression()), !dbg !6813
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6814
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6815
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6816
  %block1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !6817
  store %union.tree_node* %0, %union.tree_node** %block1, align 8, !dbg !6818
  ret void, !dbg !6819
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_resx_set_region(%union.gimple_statement_d* %gs, i32 %region) #0 !dbg !6820 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6823, metadata !DIExpression()), !dbg !6824
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  %0 = load i32, i32* %region.addr, align 4, !dbg !6827
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6828
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !6829
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !6830
  store i32 %0, i32* %region1, align 8, !dbg !6831
  ret void, !dbg !6832
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_must_not_throw_set_fndecl(%union.gimple_statement_d* %gs, %union.tree_node* %decl) #0 !dbg !6833 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6836, metadata !DIExpression()), !dbg !6837
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6838
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6839
  %gimple_eh_mnt = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_mnt*, !dbg !6840
  %fndecl = getelementptr inbounds %struct.gimple_statement_eh_mnt, %struct.gimple_statement_eh_mnt* %gimple_eh_mnt, i32 0, i32 1, !dbg !6841
  store %union.tree_node* %0, %union.tree_node** %fndecl, align 8, !dbg !6842
  ret void, !dbg !6843
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %gs, i32 %region) #0 !dbg !6844 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6845, metadata !DIExpression()), !dbg !6846
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !6847, metadata !DIExpression()), !dbg !6848
  %0 = load i32, i32* %region.addr, align 4, !dbg !6849
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6850
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !6851
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !6852
  store i32 %0, i32* %region1, align 8, !dbg !6853
  ret void, !dbg !6854
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @input_string_cst(%struct.data_in* %data_in, %struct.lto_input_block* %ib) #0 !dbg !6855 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %len = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %is_null = alloca i32, align 4
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !6858, metadata !DIExpression()), !dbg !6859
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !6860, metadata !DIExpression()), !dbg !6861
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6862, metadata !DIExpression()), !dbg !6863
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !6864, metadata !DIExpression()), !dbg !6865
  call void @llvm.dbg.declare(metadata i32* %is_null, metadata !6866, metadata !DIExpression()), !dbg !6867
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6868
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !6869
  %conv = trunc i64 %call to i32, !dbg !6869
  store i32 %conv, i32* %is_null, align 4, !dbg !6870
  %1 = load i32, i32* %is_null, align 4, !dbg !6871
  %tobool = icmp ne i32 %1, 0, !dbg !6871
  br i1 %tobool, label %if.then, label %if.end, !dbg !6873

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6874
  br label %return, !dbg !6874

if.end:                                           ; preds = %entry
  %2 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !6875
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !6876
  %call1 = call i8* @input_string_internal(%struct.data_in* %2, %struct.lto_input_block* %3, i32* %len), !dbg !6877
  store i8* %call1, i8** %ptr, align 8, !dbg !6878
  %4 = load i32, i32* %len, align 4, !dbg !6879
  %5 = load i8*, i8** %ptr, align 8, !dbg !6880
  %call2 = call %union.tree_node* @build_string(i32 %4, i8* %5), !dbg !6881
  store %union.tree_node* %call2, %union.tree_node** %retval, align 8, !dbg !6882
  br label %return, !dbg !6882

return:                                           ; preds = %if.end, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6883
  ret %union.tree_node* %6, !dbg !6883
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6884 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6887, metadata !DIExpression()), !dbg !6888
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6889, metadata !DIExpression()), !dbg !6890
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6891, metadata !DIExpression()), !dbg !6892
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6893
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6893
  %conv = zext i8 %call to i32, !dbg !6893
  %tobool = icmp ne i32 %conv, 0, !dbg !6893
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6893

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6893
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6893
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6893
  %cmp = icmp ult i32 %1, %call1, !dbg !6893
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6893

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6893
  br label %cond.end, !dbg !6893

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6893
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6894
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6895
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6896
  %5 = load i32, i32* %i.addr, align 4, !dbg !6897
  %idxprom = zext i32 %5 to i64, !dbg !6896
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6896
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6898
  ret void, !dbg !6899
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !6900 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6906, metadata !DIExpression()), !dbg !6907
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6908
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6908
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6908
  %bf.load = load i64, i64* %1, align 8, !dbg !6908
  %bf.clear = and i64 %bf.load, 65535, !dbg !6908
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6908
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !6909

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !6910
  br label %return, !dbg !6910

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6912
  br label %return, !dbg !6912

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !6913
  ret i8 %2, !dbg !6913
}

declare dso_local zeroext i8 @compare_field_offset(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_fixup_handled_component(%union.tree_node* %op) #0 !dbg !6914 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  %decl_type = alloca %union.tree_node*, align 8
  %wanted_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_type, metadata !6919, metadata !DIExpression()), !dbg !6920
  call void @llvm.dbg.declare(metadata %union.tree_node** %wanted_type, metadata !6921, metadata !DIExpression()), !dbg !6922
  br label %while.cond, !dbg !6923

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6924
  %exp = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !6924
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6924
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6924
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6924
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %1), !dbg !6925
  %tobool = icmp ne i8 %call, 0, !dbg !6923
  br i1 %tobool, label %while.body, label %while.end, !dbg !6923

while.body:                                       ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6926
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !6926
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !6926
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !6926
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !6926
  store %union.tree_node* %3, %union.tree_node** %op.addr, align 8, !dbg !6927
  br label %while.cond, !dbg !6923, !llvm.loop !6928

while.end:                                        ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6929
  %exp4 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !6929
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !6929
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 0, !dbg !6929
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !6929
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6929
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !6929
  %bf.load = load i64, i64* %6, align 8, !dbg !6929
  %bf.clear = and i64 %bf.load, 65535, !dbg !6929
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6929
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !6931
  br i1 %cmp, label %if.then, label %if.end, !dbg !6932

if.then:                                          ; preds = %while.end
  br label %if.end110, !dbg !6933

if.end:                                           ; preds = %while.end
  %7 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6934
  %exp7 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !6934
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !6934
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 0, !dbg !6934
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !6934
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !6934
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6934
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6934
  store %union.tree_node* %9, %union.tree_node** %decl_type, align 8, !dbg !6935
  %10 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6936
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6936
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !6936
  %bf.load11 = load i64, i64* %11, align 8, !dbg !6936
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !6936
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !6936
  switch i32 %bf.cast13, label %sw.default [
    i32 41, label %sw.bb
    i32 45, label %sw.bb17
    i32 46, label %sw.bb39
    i32 42, label %sw.bb72
    i32 118, label %sw.bb72
    i32 43, label %sw.bb73
    i32 44, label %sw.bb73
  ], !dbg !6937

sw.bb:                                            ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6938
  %exp14 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !6938
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !6938
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 1, !dbg !6938
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !6938
  %decl_minimal = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !6938
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !6938
  %14 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6938
  store %union.tree_node* %14, %union.tree_node** %wanted_type, align 8, !dbg !6940
  br label %sw.epilog, !dbg !6941

sw.bb17:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6942
  %base18 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6942
  %16 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6942
  %bf.load19 = load i64, i64* %16, align 8, !dbg !6942
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !6942
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6942
  %cmp22 = icmp eq i32 %bf.cast21, 15, !dbg !6944
  br i1 %cmp22, label %land.lhs.true, label %if.end35, !dbg !6945

land.lhs.true:                                    ; preds = %sw.bb17
  %17 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6946
  %common23 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6946
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !6946
  %18 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !6946
  %19 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6947
  %common25 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !6947
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !6947
  %20 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !6947
  %cmp27 = icmp eq %union.tree_node* %18, %20, !dbg !6948
  br i1 %cmp27, label %if.then34, label %lor.lhs.false, !dbg !6949

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6950
  %common28 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !6950
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !6950
  %22 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !6950
  %23 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6951
  %common30 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !6951
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !6951
  %24 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !6951
  %call32 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %22, %union.tree_node* %24), !dbg !6952
  %conv = zext i8 %call32 to i32, !dbg !6952
  %tobool33 = icmp ne i32 %conv, 0, !dbg !6952
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !6953

if.then34:                                        ; preds = %lor.lhs.false, %land.lhs.true
  br label %if.end110, !dbg !6954

if.end35:                                         ; preds = %lor.lhs.false, %sw.bb17
  %25 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6955
  %common36 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !6955
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !6955
  %26 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !6955
  %call38 = call %union.tree_node* @build_array_type(%union.tree_node* %26, %union.tree_node* null), !dbg !6956
  store %union.tree_node* %call38, %union.tree_node** %wanted_type, align 8, !dbg !6957
  br label %sw.epilog, !dbg !6958

sw.bb39:                                          ; preds = %if.end
  %27 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6959
  %base40 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6959
  %28 = bitcast %struct.tree_base* %base40 to i64*, !dbg !6959
  %bf.load41 = load i64, i64* %28, align 8, !dbg !6959
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !6959
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !6959
  %cmp44 = icmp eq i32 %bf.cast43, 15, !dbg !6961
  br i1 %cmp44, label %land.lhs.true46, label %if.end66, !dbg !6962

land.lhs.true46:                                  ; preds = %sw.bb39
  %29 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6963
  %common47 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !6963
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !6963
  %30 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !6963
  %31 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6964
  %common49 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !6964
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !6964
  %32 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !6964
  %common51 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !6964
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !6964
  %33 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !6964
  %cmp53 = icmp eq %union.tree_node* %30, %33, !dbg !6965
  br i1 %cmp53, label %if.then65, label %lor.lhs.false55, !dbg !6966

lor.lhs.false55:                                  ; preds = %land.lhs.true46
  %34 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6967
  %common56 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !6967
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !6967
  %35 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !6967
  %common58 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !6967
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !6967
  %36 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !6967
  %37 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6968
  %common60 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !6968
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !6968
  %38 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !6968
  %call62 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %36, %union.tree_node* %38), !dbg !6969
  %conv63 = zext i8 %call62 to i32, !dbg !6969
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !6969
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !6970

if.then65:                                        ; preds = %lor.lhs.false55, %land.lhs.true46
  br label %if.end110, !dbg !6971

if.end66:                                         ; preds = %lor.lhs.false55, %sw.bb39
  %39 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6972
  %common67 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !6972
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !6972
  %40 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !6972
  %common69 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !6972
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !6972
  %41 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !6972
  %call71 = call %union.tree_node* @build_array_type(%union.tree_node* %41, %union.tree_node* null), !dbg !6973
  store %union.tree_node* %call71, %union.tree_node** %wanted_type, align 8, !dbg !6974
  br label %sw.epilog, !dbg !6975

sw.bb72:                                          ; preds = %if.end, %if.end
  br label %if.end110, !dbg !6976

sw.bb73:                                          ; preds = %if.end, %if.end
  %42 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6977
  %base74 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6977
  %43 = bitcast %struct.tree_base* %base74 to i64*, !dbg !6977
  %bf.load75 = load i64, i64* %43, align 8, !dbg !6977
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !6977
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !6977
  %cmp78 = icmp eq i32 %bf.cast77, 13, !dbg !6979
  br i1 %cmp78, label %land.lhs.true80, label %if.end96, !dbg !6980

land.lhs.true80:                                  ; preds = %sw.bb73
  %44 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6981
  %common81 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !6981
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !6981
  %45 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !6981
  %46 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6982
  %common83 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !6982
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !6982
  %47 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !6982
  %cmp85 = icmp eq %union.tree_node* %45, %47, !dbg !6983
  br i1 %cmp85, label %if.then95, label %lor.lhs.false87, !dbg !6984

lor.lhs.false87:                                  ; preds = %land.lhs.true80
  %48 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6985
  %common88 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !6985
  %type89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2, !dbg !6985
  %49 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !6985
  %50 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6986
  %common90 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !6986
  %type91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 2, !dbg !6986
  %51 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !6986
  %call92 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %49, %union.tree_node* %51), !dbg !6987
  %conv93 = zext i8 %call92 to i32, !dbg !6987
  %tobool94 = icmp ne i32 %conv93, 0, !dbg !6987
  br i1 %tobool94, label %if.then95, label %if.end96, !dbg !6988

if.then95:                                        ; preds = %lor.lhs.false87, %land.lhs.true80
  br label %if.end110, !dbg !6989

if.end96:                                         ; preds = %lor.lhs.false87, %sw.bb73
  %52 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6990
  %common97 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !6990
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !6990
  %53 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !6990
  %call99 = call %union.tree_node* @build_complex_type(%union.tree_node* %53), !dbg !6991
  store %union.tree_node* %call99, %union.tree_node** %wanted_type, align 8, !dbg !6992
  br label %sw.epilog, !dbg !6993

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 940, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6994
  br label %sw.epilog, !dbg !6995

sw.epilog:                                        ; preds = %sw.default, %if.end96, %if.end66, %if.end35, %sw.bb
  %54 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6996
  %55 = load %union.tree_node*, %union.tree_node** %decl_type, align 8, !dbg !6998
  %call100 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %54, %union.tree_node* %55), !dbg !6999
  %tobool101 = icmp ne i8 %call100, 0, !dbg !6999
  br i1 %tobool101, label %if.end110, label %if.then102, !dbg !7000

if.then102:                                       ; preds = %sw.epilog
  %56 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !7001
  %57 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7001
  %exp103 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !7001
  %operands104 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp103, i32 0, i32 3, !dbg !7001
  %arrayidx105 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands104, i64 0, i64 0, !dbg !7001
  %58 = load %union.tree_node*, %union.tree_node** %arrayidx105, align 8, !dbg !7001
  %call106 = call %union.tree_node* @build1_stat(i32 118, %union.tree_node* %56, %union.tree_node* %58), !dbg !7001
  %59 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7002
  %exp107 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !7002
  %operands108 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp107, i32 0, i32 3, !dbg !7002
  %arrayidx109 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands108, i64 0, i64 0, !dbg !7002
  store %union.tree_node* %call106, %union.tree_node** %arrayidx109, align 8, !dbg !7003
  br label %if.end110, !dbg !7002

if.end110:                                        ; preds = %if.then, %if.then34, %if.then65, %sw.bb72, %if.then95, %if.then102, %sw.epilog
  ret void, !dbg !7004
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @emit_label_in_global_context_p(%union.tree_node* %label) #0 !dbg !7005 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !7008, metadata !DIExpression()), !dbg !7009
  %0 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !7010
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !7010
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7010
  %1 = bitcast i40* %nonlocal_flag to i64*, !dbg !7010
  %bf.load = load i64, i64* %1, align 8, !dbg !7010
  %bf.lshr = lshr i64 %bf.load, 8, !dbg !7010
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7010
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7010
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7010
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !7011

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !7012
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7012
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7012
  %bf.load1 = load i64, i64* %3, align 8, !dbg !7012
  %bf.lshr2 = lshr i64 %bf.load1, 16, !dbg !7012
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !7012
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7012
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !7011
  br label %lor.end, !dbg !7011

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !7011
  %conv = trunc i32 %lor.ext to i8, !dbg !7010
  ret i8 %conv, !dbg !7013
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !7014 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7017, metadata !DIExpression()), !dbg !7018
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7019
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7020
  ret %union.tree_node* %call, !dbg !7021
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) #0 !dbg !7022 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7023, metadata !DIExpression()), !dbg !7024
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7025
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !7026
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !7027
  %1 = load i8, i8* %no, align 1, !dbg !7027
  %conv = zext i8 %1 to i32, !dbg !7025
  ret i32 %conv, !dbg !7028
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7029 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7032, metadata !DIExpression()), !dbg !7033
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7034, metadata !DIExpression()), !dbg !7035
  %0 = load i32, i32* %index.addr, align 4, !dbg !7036
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7036
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !7036
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 3, !dbg !7036
  %2 = load i8, i8* %no, align 1, !dbg !7036
  %conv = zext i8 %2 to i32, !dbg !7036
  %cmp = icmp ule i32 %0, %conv, !dbg !7036
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7036

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7036
  br label %cond.end, !dbg !7036

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7036

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7036
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7037
  %4 = load i32, i32* %index.addr, align 4, !dbg !7038
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7039
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !7040
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !7041
  %6 = load i8, i8* %ni, align 8, !dbg !7041
  %conv3 = zext i8 %6 to i32, !dbg !7039
  %add = add i32 %4, %conv3, !dbg !7042
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add), !dbg !7043
  ret %union.tree_node* %call, !dbg !7044
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_fixup_decls(%union.gimple_statement_d* %stmt) #0 !dbg !7045 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %lhs35 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7048, metadata !DIExpression()), !dbg !7049
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7050
  %call = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %0), !dbg !7052
  %tobool = icmp ne i8 %call, 0, !dbg !7052
  br i1 %tobool, label %if.then, label %if.else31, !dbg !7053

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !7054, metadata !DIExpression()), !dbg !7056
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7057
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !7058
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !7056
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !7059, metadata !DIExpression()), !dbg !7060
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7061
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !7062
  store %union.tree_node* %call2, %union.tree_node** %rhs, align 8, !dbg !7060
  %3 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7063
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7063
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7063
  %bf.load = load i64, i64* %4, align 8, !dbg !7063
  %bf.clear = and i64 %bf.load, 65535, !dbg !7063
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7063
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7065
  br i1 %cmp, label %if.then3, label %if.else, !dbg !7066

if.then3:                                         ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7067
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7067
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7067
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7067
  %7 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7070
  %common4 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !7070
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7070
  %8 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7070
  %call6 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %6, %union.tree_node* %8), !dbg !7071
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7071
  br i1 %tobool7, label %if.end, label %if.then8, !dbg !7072

if.then8:                                         ; preds = %if.then3
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7073
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7074
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !7074
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7074
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7074
  %12 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7074
  %call11 = call %union.tree_node* @build1_stat(i32 118, %union.tree_node* %11, %union.tree_node* %12), !dbg !7074
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %9, %union.tree_node* %call11), !dbg !7075
  br label %if.end, !dbg !7075

if.end:                                           ; preds = %if.then8, %if.then3
  br label %if.end30, !dbg !7076

if.else:                                          ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7077
  %base12 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7077
  %14 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7077
  %bf.load13 = load i64, i64* %14, align 8, !dbg !7077
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7077
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7077
  %cmp16 = icmp eq i32 %bf.cast15, 32, !dbg !7079
  br i1 %cmp16, label %if.then17, label %if.end29, !dbg !7080

if.then17:                                        ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7081
  %common18 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7081
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !7081
  %16 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !7081
  %17 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7084
  %common20 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !7084
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !7084
  %18 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !7084
  %call22 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %16, %union.tree_node* %18), !dbg !7085
  %tobool23 = icmp ne i8 %call22, 0, !dbg !7085
  br i1 %tobool23, label %if.end28, label %if.then24, !dbg !7086

if.then24:                                        ; preds = %if.then17
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7087
  %20 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7088
  %common25 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !7088
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !7088
  %21 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !7088
  %22 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7088
  %call27 = call %union.tree_node* @build1_stat(i32 118, %union.tree_node* %21, %union.tree_node* %22), !dbg !7088
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %19, %union.tree_node* %call27), !dbg !7089
  br label %if.end28, !dbg !7089

if.end28:                                         ; preds = %if.then24, %if.then17
  br label %if.end29, !dbg !7090

if.end29:                                         ; preds = %if.end28, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end
  br label %if.end55, !dbg !7091

if.else31:                                        ; preds = %entry
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7092
  %call32 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %23), !dbg !7094
  %tobool33 = icmp ne i8 %call32, 0, !dbg !7094
  br i1 %tobool33, label %if.then34, label %if.end54, !dbg !7095

if.then34:                                        ; preds = %if.else31
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs35, metadata !7096, metadata !DIExpression()), !dbg !7098
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7099
  %call36 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %24), !dbg !7100
  store %union.tree_node* %call36, %union.tree_node** %lhs35, align 8, !dbg !7098
  %25 = load %union.tree_node*, %union.tree_node** %lhs35, align 8, !dbg !7101
  %tobool37 = icmp ne %union.tree_node* %25, null, !dbg !7101
  br i1 %tobool37, label %land.lhs.true, label %if.end53, !dbg !7103

land.lhs.true:                                    ; preds = %if.then34
  %26 = load %union.tree_node*, %union.tree_node** %lhs35, align 8, !dbg !7104
  %base38 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7104
  %27 = bitcast %struct.tree_base* %base38 to i64*, !dbg !7104
  %bf.load39 = load i64, i64* %27, align 8, !dbg !7104
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !7104
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !7104
  %cmp42 = icmp eq i32 %bf.cast41, 32, !dbg !7105
  br i1 %cmp42, label %if.then43, label %if.end53, !dbg !7106

if.then43:                                        ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %lhs35, align 8, !dbg !7107
  %common44 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !7107
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !7107
  %29 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !7107
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7110
  %call46 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %30), !dbg !7111
  %call47 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %29, %union.tree_node* %call46), !dbg !7112
  %tobool48 = icmp ne i8 %call47, 0, !dbg !7112
  br i1 %tobool48, label %if.end52, label %if.then49, !dbg !7113

if.then49:                                        ; preds = %if.then43
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7114
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7115
  %call50 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %32), !dbg !7115
  %33 = load %union.tree_node*, %union.tree_node** %lhs35, align 8, !dbg !7115
  %call51 = call %union.tree_node* @build1_stat(i32 118, %union.tree_node* %call50, %union.tree_node* %33), !dbg !7115
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %31, %union.tree_node* %call51), !dbg !7116
  br label %if.end52, !dbg !7116

if.end52:                                         ; preds = %if.then49, %if.then43
  br label %if.end53, !dbg !7117

if.end53:                                         ; preds = %if.end52, %land.lhs.true, %if.then34
  br label %if.end54, !dbg !7118

if.end54:                                         ; preds = %if.end53, %if.else31
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end30
  ret void, !dbg !7119
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lto_tag_is_gimple_code_p(i32 %tag) #0 !dbg !7120 {
entry:
  %tag.addr = alloca i32, align 4
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !7123, metadata !DIExpression()), !dbg !7124
  %0 = load i32, i32* %tag.addr, align 4, !dbg !7125
  %cmp = icmp uge i32 %0, 189, !dbg !7126
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7127

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %tag.addr, align 4, !dbg !7128
  %cmp1 = icmp ult i32 %1, 224, !dbg !7129
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ], !dbg !7130
  %land.ext = zext i1 %2 to i32, !dbg !7127
  %conv = trunc i32 %land.ext to i8, !dbg !7131
  ret i8 %conv, !dbg !7132
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !7133 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7136, metadata !DIExpression()), !dbg !7137
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7138
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7139
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7140
  %bf.load = load i32, i32* %1, align 8, !dbg !7140
  %bf.clear = and i32 %bf.load, 255, !dbg !7140
  ret i32 %bf.clear, !dbg !7141
}

declare dso_local %union.tree_node* @build_string(i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !7142 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7143, metadata !DIExpression()), !dbg !7144
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7145
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7146
  %cmp = icmp uge i32 %call, 1, !dbg !7147
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7148

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7149
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7150
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7151
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7152
  %land.ext = zext i1 %2 to i32, !dbg !7148
  %conv = trunc i32 %land.ext to i8, !dbg !7146
  ret i8 %conv, !dbg !7153
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7154 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7155, metadata !DIExpression()), !dbg !7156
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7157
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7158
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7159
  %1 = load i32, i32* %num_ops, align 4, !dbg !7159
  ret i32 %1, !dbg !7160
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !7161 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7164, metadata !DIExpression()), !dbg !7165
  call void @llvm.dbg.declare(metadata i64* %off, metadata !7166, metadata !DIExpression()), !dbg !7167
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7168
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !7169
  %idxprom = zext i32 %call to i64, !dbg !7170
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7170
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7170
  store i64 %1, i64* %off, align 8, !dbg !7171
  %2 = load i64, i64* %off, align 8, !dbg !7172
  %cmp = icmp ne i64 %2, 0, !dbg !7172
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7172

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7172
  br label %cond.end, !dbg !7172

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7172
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7173
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !7174
  %5 = load i64, i64* %off, align 8, !dbg !7175
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !7176
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7177
  ret %union.tree_node** %6, !dbg !7178
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !7179 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7182, metadata !DIExpression()), !dbg !7183
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7184
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7185
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7186
  ret i32 %call1, !dbg !7187
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7188 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7191, metadata !DIExpression()), !dbg !7192
  %0 = load i32, i32* %code.addr, align 4, !dbg !7193
  %idxprom = zext i32 %0 to i64, !dbg !7194
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7194
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7194
  ret i32 %1, !dbg !7195
}

declare dso_local %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_complex_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7196 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7197, metadata !DIExpression()), !dbg !7198
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7199, metadata !DIExpression()), !dbg !7200
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7201
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7203
  %tobool = icmp ne i8 %call, 0, !dbg !7203
  br i1 %tobool, label %if.then, label %if.else, !dbg !7204

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7205
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7207
  %2 = load i32, i32* %i.addr, align 4, !dbg !7208
  %idxprom = zext i32 %2 to i64, !dbg !7207
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7207
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7207
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7209
  br label %return, !dbg !7209

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7210
  br label %return, !dbg !7210

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7211
  ret %union.tree_node* %4, !dbg !7211
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7212 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7213, metadata !DIExpression()), !dbg !7214
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7215
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7216
  ret %union.tree_node* %call, !dbg !7217
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !7218 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7219, metadata !DIExpression()), !dbg !7220
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7221
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7222
  ret %union.tree_node* %call, !dbg !7223
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !7224 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7225, metadata !DIExpression()), !dbg !7226
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !7227, metadata !DIExpression()), !dbg !7228
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7229
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !7230
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !7231
  ret void, !dbg !7232
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7233 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7234, metadata !DIExpression()), !dbg !7235
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7236, metadata !DIExpression()), !dbg !7237
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7238
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7239
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7240
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7241
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7241
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7243

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7244
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7244
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7244
  %bf.load = load i64, i64* %4, align 8, !dbg !7244
  %bf.clear = and i64 %bf.load, 65535, !dbg !7244
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7244
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7245
  br i1 %cmp, label %if.then, label %if.end, !dbg !7246

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7247
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7248
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7248
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7248
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7249
  br label %if.end, !dbg !7248

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7250
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !7251 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7252, metadata !DIExpression()), !dbg !7253
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7254
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7255
  %cmp = icmp eq i32 %call, 8, !dbg !7256
  %conv = zext i1 %cmp to i32, !dbg !7256
  %conv1 = trunc i32 %conv to i8, !dbg !7255
  ret i8 %conv1, !dbg !7257
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7258 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7259, metadata !DIExpression()), !dbg !7260
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7261
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7262
  ret %union.tree_node* %call, !dbg !7263
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !7264 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7267, metadata !DIExpression()), !dbg !7268
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7269
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7270
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7268
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7271, metadata !DIExpression()), !dbg !7272
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7273
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7273
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7273
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7273
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7272
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7274
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7274
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7274
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7274
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7275
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7276
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7276
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7276
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7276
  ret %union.tree_node* %6, !dbg !7277
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7278 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7279, metadata !DIExpression()), !dbg !7280
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7281, metadata !DIExpression()), !dbg !7282
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7283
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7284
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7285
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7286
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7286
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7288

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7289
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7289
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7289
  %bf.load = load i64, i64* %4, align 8, !dbg !7289
  %bf.clear = and i64 %bf.load, 65535, !dbg !7289
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7289
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7290
  br i1 %cmp, label %if.then, label %if.end, !dbg !7291

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7292
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7293
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7293
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7293
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7294
  br label %if.end, !dbg !7293

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7295
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7296 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7297, metadata !DIExpression()), !dbg !7298
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7299
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7300
  ret %union.tree_node* %call, !dbg !7301
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !7302 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7307, metadata !DIExpression()), !dbg !7306
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7306
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !7306
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7306

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7306
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7306
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !7306
  %3 = load i32, i32* %num, align 8, !dbg !7306
  %cmp = icmp ult i32 %1, %3, !dbg !7306
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7308
  %land.ext = zext i1 %4 to i32, !dbg !7306
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7306
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !7306
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7306
  %idxprom = zext i32 %6 to i64, !dbg !7306
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7306
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7306
  ret %union.tree_node* %7, !dbg !7306
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !7309 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7314, metadata !DIExpression()), !dbg !7315
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7315
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7315
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7315

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7315
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7315
  %2 = load i32, i32* %num, align 8, !dbg !7315
  br label %cond.end, !dbg !7315

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7315

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7315
  ret i32 %cond, !dbg !7315
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7316 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7319, metadata !DIExpression()), !dbg !7320
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7321, metadata !DIExpression()), !dbg !7320
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7320
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7320
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7320

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7320
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7320
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7320
  %3 = load i32, i32* %num, align 8, !dbg !7320
  %cmp = icmp ult i32 %1, %3, !dbg !7320
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7322
  %land.ext = zext i1 %4 to i32, !dbg !7320
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7320
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7320
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7320
  %idxprom = zext i32 %6 to i64, !dbg !7320
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7320
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7320
  ret %struct.edge_def* %7, !dbg !7320
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !7323 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7329, metadata !DIExpression()), !dbg !7330
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7331
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !7331
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7331

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7332
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !7333
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7333
  br label %cond.end, !dbg !7331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !7331
  ret %struct.gimple_seq_node_d* %cond, !dbg !7334
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7335 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7338, metadata !DIExpression()), !dbg !7339
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7340
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !7340
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !7340
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7340

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7340
  br label %cond.end, !dbg !7340

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7340
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !7341
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !7341
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !7342
  ret %struct.VEC_edge_gc* %5, !dbg !7343
}

; Function Attrs: noinline nounwind uwtable
define internal void @fixup_call_stmt_edges_1(%struct.cgraph_node* %node, %union.gimple_statement_d** %stmts) #0 !dbg !7344 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %stmts.addr = alloca %union.gimple_statement_d**, align 8
  %cedge = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7345, metadata !DIExpression()), !dbg !7346
  store %union.gimple_statement_d** %stmts, %union.gimple_statement_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmts.addr, metadata !7347, metadata !DIExpression()), !dbg !7348
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cedge, metadata !7349, metadata !DIExpression()), !dbg !7350
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7351
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 1, !dbg !7353
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !7353
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %cedge, align 8, !dbg !7354
  br label %for.cond, !dbg !7355

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cedge, align 8, !dbg !7356
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !7358
  br i1 %tobool, label %for.body, label %for.end, !dbg !7358

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmts.addr, align 8, !dbg !7359
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cedge, align 8, !dbg !7360
  %lto_stmt_uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 10, !dbg !7361
  %5 = load i32, i32* %lto_stmt_uid, align 4, !dbg !7361
  %idxprom = zext i32 %5 to i64, !dbg !7359
  %arrayidx = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %3, i64 %idxprom, !dbg !7359
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !7359
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cedge, align 8, !dbg !7362
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 7, !dbg !7363
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %call_stmt, align 8, !dbg !7364
  br label %for.inc, !dbg !7362

for.inc:                                          ; preds = %for.body
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cedge, align 8, !dbg !7365
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 6, !dbg !7366
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !7366
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %cedge, align 8, !dbg !7367
  br label %for.cond, !dbg !7368, !llvm.loop !7369

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7371
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_pair* @VEC_alias_pair_gc_safe_push(%struct.VEC_alias_pair_gc** %vec_, %struct.alias_pair* %obj_) #0 !dbg !7372 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_gc**, align 8
  %obj_.addr = alloca %struct.alias_pair*, align 8
  store %struct.VEC_alias_pair_gc** %vec_, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_gc*** %vec_.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  store %struct.alias_pair* %obj_, %struct.alias_pair** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %obj_.addr, metadata !7380, metadata !DIExpression()), !dbg !7379
  %0 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7379
  %call = call i32 @VEC_alias_pair_gc_reserve(%struct.VEC_alias_pair_gc** %0, i32 1), !dbg !7379
  %1 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7379
  %2 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %1, align 8, !dbg !7379
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %2, null, !dbg !7379
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7379

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7379
  %4 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %3, align 8, !dbg !7379
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %4, i32 0, i32 0, !dbg !7379
  br label %cond.end, !dbg !7379

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7379

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7379
  %5 = load %struct.alias_pair*, %struct.alias_pair** %obj_.addr, align 8, !dbg !7379
  %call1 = call %struct.alias_pair* @VEC_alias_pair_base_quick_push(%struct.VEC_alias_pair_base* %cond, %struct.alias_pair* %5), !dbg !7379
  ret %struct.alias_pair* %call1, !dbg !7379
}

declare dso_local i8* @lto_get_decl_name_mapping(%struct.lto_file_decl_data*, i8*) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_pair_gc_reserve(%struct.VEC_alias_pair_gc** %vec_, i32 %alloc_) #0 !dbg !7381 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_alias_pair_gc** %vec_, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_gc*** %vec_.addr, metadata !7384, metadata !DIExpression()), !dbg !7385
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7386, metadata !DIExpression()), !dbg !7385
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7387, metadata !DIExpression()), !dbg !7385
  %0 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7385
  %1 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %0, align 8, !dbg !7385
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %1, null, !dbg !7385
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7385

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7385
  %3 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %2, align 8, !dbg !7385
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %3, i32 0, i32 0, !dbg !7385
  br label %cond.end, !dbg !7385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7385
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7385
  %call = call i32 @VEC_alias_pair_base_space(%struct.VEC_alias_pair_base* %cond, i32 %4), !dbg !7385
  %tobool1 = icmp ne i32 %call, 0, !dbg !7385
  %lnot = xor i1 %tobool1, true, !dbg !7385
  %lnot.ext = zext i1 %lnot to i32, !dbg !7385
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7385
  %5 = load i32, i32* %extend, align 4, !dbg !7388
  %tobool2 = icmp ne i32 %5, 0, !dbg !7388
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7385

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7388
  %7 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %6, align 8, !dbg !7388
  %8 = bitcast %struct.VEC_alias_pair_gc* %7 to i8*, !dbg !7388
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7388
  %call3 = call i8* @vec_gc_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !7388
  %10 = bitcast i8* %call3 to %struct.VEC_alias_pair_gc*, !dbg !7388
  %11 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !7388
  store %struct.VEC_alias_pair_gc* %10, %struct.VEC_alias_pair_gc** %11, align 8, !dbg !7388
  br label %if.end, !dbg !7388

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7385
  ret i32 %12, !dbg !7385
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_pair* @VEC_alias_pair_base_quick_push(%struct.VEC_alias_pair_base* %vec_, %struct.alias_pair* %obj_) #0 !dbg !7390 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %obj_.addr = alloca %struct.alias_pair*, align 8
  %slot_ = alloca %struct.alias_pair*, align 8
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !7394, metadata !DIExpression()), !dbg !7395
  store %struct.alias_pair* %obj_, %struct.alias_pair** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %obj_.addr, metadata !7396, metadata !DIExpression()), !dbg !7395
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %slot_, metadata !7397, metadata !DIExpression()), !dbg !7395
  %0 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7395
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %0, i32 0, i32 0, !dbg !7395
  %1 = load i32, i32* %num, align 8, !dbg !7395
  %2 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7395
  %alloc = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %2, i32 0, i32 1, !dbg !7395
  %3 = load i32, i32* %alloc, align 4, !dbg !7395
  %cmp = icmp ult i32 %1, %3, !dbg !7395
  %conv = zext i1 %cmp to i32, !dbg !7395
  %4 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7395
  %vec = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %4, i32 0, i32 2, !dbg !7395
  %5 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7395
  %num1 = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %5, i32 0, i32 0, !dbg !7395
  %6 = load i32, i32* %num1, align 8, !dbg !7395
  %inc = add i32 %6, 1, !dbg !7395
  store i32 %inc, i32* %num1, align 8, !dbg !7395
  %idxprom = zext i32 %6 to i64, !dbg !7395
  %arrayidx = getelementptr inbounds [1 x %struct.alias_pair], [1 x %struct.alias_pair]* %vec, i64 0, i64 %idxprom, !dbg !7395
  store %struct.alias_pair* %arrayidx, %struct.alias_pair** %slot_, align 8, !dbg !7395
  %7 = load %struct.alias_pair*, %struct.alias_pair** %obj_.addr, align 8, !dbg !7398
  %tobool = icmp ne %struct.alias_pair* %7, null, !dbg !7398
  br i1 %tobool, label %if.then, label %if.end, !dbg !7395

if.then:                                          ; preds = %entry
  %8 = load %struct.alias_pair*, %struct.alias_pair** %slot_, align 8, !dbg !7398
  %9 = load %struct.alias_pair*, %struct.alias_pair** %obj_.addr, align 8, !dbg !7398
  %10 = bitcast %struct.alias_pair* %8 to i8*, !dbg !7398
  %11 = bitcast %struct.alias_pair* %9 to i8*, !dbg !7398
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !7398
  br label %if.end, !dbg !7398

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.alias_pair*, %struct.alias_pair** %slot_, align 8, !dbg !7395
  ret %struct.alias_pair* %12, !dbg !7395
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_pair_base_space(%struct.VEC_alias_pair_base* %vec_, i32 %alloc_) #0 !dbg !7400 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !7403, metadata !DIExpression()), !dbg !7404
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7405, metadata !DIExpression()), !dbg !7404
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7404
  %cmp = icmp sge i32 %0, 0, !dbg !7404
  %conv = zext i1 %cmp to i32, !dbg !7404
  %1 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7404
  %tobool = icmp ne %struct.VEC_alias_pair_base* %1, null, !dbg !7404
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7404

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7404
  %alloc = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %2, i32 0, i32 1, !dbg !7404
  %3 = load i32, i32* %alloc, align 4, !dbg !7404
  %4 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !7404
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %4, i32 0, i32 0, !dbg !7404
  %5 = load i32, i32* %num, align 8, !dbg !7404
  %sub = sub i32 %3, %5, !dbg !7404
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7404
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7404
  %conv2 = zext i1 %cmp1 to i32, !dbg !7404
  br label %cond.end, !dbg !7404

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7404
  %tobool3 = icmp ne i32 %7, 0, !dbg !7404
  %lnot = xor i1 %tobool3, true, !dbg !7404
  %lnot.ext = zext i1 %lnot to i32, !dbg !7404
  br label %cond.end, !dbg !7404

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7404
  ret i32 %cond, !dbg !7404
}

declare dso_local i8* @vec_gc_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitpack_word_t_heap_reserve(%struct.VEC_bitpack_word_t_heap** %vec_, i32 %alloc_) #0 !dbg !7406 {
entry:
  %vec_.addr = alloca %struct.VEC_bitpack_word_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_bitpack_word_t_heap** %vec_, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitpack_word_t_heap*** %vec_.addr, metadata !7409, metadata !DIExpression()), !dbg !7410
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7411, metadata !DIExpression()), !dbg !7410
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7412, metadata !DIExpression()), !dbg !7410
  %0 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !7410
  %1 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %0, align 8, !dbg !7410
  %tobool = icmp ne %struct.VEC_bitpack_word_t_heap* %1, null, !dbg !7410
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7410

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !7410
  %3 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %2, align 8, !dbg !7410
  %base = getelementptr inbounds %struct.VEC_bitpack_word_t_heap, %struct.VEC_bitpack_word_t_heap* %3, i32 0, i32 0, !dbg !7410
  br label %cond.end, !dbg !7410

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7410

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitpack_word_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7410
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7410
  %call = call i32 @VEC_bitpack_word_t_base_space(%struct.VEC_bitpack_word_t_base* %cond, i32 %4), !dbg !7410
  %tobool1 = icmp ne i32 %call, 0, !dbg !7410
  %lnot = xor i1 %tobool1, true, !dbg !7410
  %lnot.ext = zext i1 %lnot to i32, !dbg !7410
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7410
  %5 = load i32, i32* %extend, align 4, !dbg !7413
  %tobool2 = icmp ne i32 %5, 0, !dbg !7413
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7410

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !7413
  %7 = load %struct.VEC_bitpack_word_t_heap*, %struct.VEC_bitpack_word_t_heap** %6, align 8, !dbg !7413
  %8 = bitcast %struct.VEC_bitpack_word_t_heap* %7 to i8*, !dbg !7413
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7413
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 8), !dbg !7413
  %10 = bitcast i8* %call3 to %struct.VEC_bitpack_word_t_heap*, !dbg !7413
  %11 = load %struct.VEC_bitpack_word_t_heap**, %struct.VEC_bitpack_word_t_heap*** %vec_.addr, align 8, !dbg !7413
  store %struct.VEC_bitpack_word_t_heap* %10, %struct.VEC_bitpack_word_t_heap** %11, align 8, !dbg !7413
  br label %if.end, !dbg !7413

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7410
  ret i32 %12, !dbg !7410
}

; Function Attrs: noinline nounwind uwtable
define internal i64* @VEC_bitpack_word_t_base_quick_push(%struct.VEC_bitpack_word_t_base* %vec_, i64 %obj_) #0 !dbg !7415 {
entry:
  %vec_.addr = alloca %struct.VEC_bitpack_word_t_base*, align 8
  %obj_.addr = alloca i64, align 8
  %slot_ = alloca i64*, align 8
  store %struct.VEC_bitpack_word_t_base* %vec_, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitpack_word_t_base** %vec_.addr, metadata !7419, metadata !DIExpression()), !dbg !7420
  store i64 %obj_, i64* %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %obj_.addr, metadata !7421, metadata !DIExpression()), !dbg !7420
  call void @llvm.dbg.declare(metadata i64** %slot_, metadata !7422, metadata !DIExpression()), !dbg !7420
  %0 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7420
  %num = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %0, i32 0, i32 0, !dbg !7420
  %1 = load i32, i32* %num, align 8, !dbg !7420
  %2 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7420
  %alloc = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %2, i32 0, i32 1, !dbg !7420
  %3 = load i32, i32* %alloc, align 4, !dbg !7420
  %cmp = icmp ult i32 %1, %3, !dbg !7420
  %conv = zext i1 %cmp to i32, !dbg !7420
  %4 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7420
  %vec = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %4, i32 0, i32 2, !dbg !7420
  %5 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7420
  %num1 = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %5, i32 0, i32 0, !dbg !7420
  %6 = load i32, i32* %num1, align 8, !dbg !7420
  %inc = add i32 %6, 1, !dbg !7420
  store i32 %inc, i32* %num1, align 8, !dbg !7420
  %idxprom = zext i32 %6 to i64, !dbg !7420
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %vec, i64 0, i64 %idxprom, !dbg !7420
  store i64* %arrayidx, i64** %slot_, align 8, !dbg !7420
  %7 = load i64, i64* %obj_.addr, align 8, !dbg !7420
  %8 = load i64*, i64** %slot_, align 8, !dbg !7420
  store i64 %7, i64* %8, align 8, !dbg !7420
  %9 = load i64*, i64** %slot_, align 8, !dbg !7420
  ret i64* %9, !dbg !7420
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitpack_word_t_base_space(%struct.VEC_bitpack_word_t_base* %vec_, i32 %alloc_) #0 !dbg !7423 {
entry:
  %vec_.addr = alloca %struct.VEC_bitpack_word_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_bitpack_word_t_base* %vec_, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitpack_word_t_base** %vec_.addr, metadata !7426, metadata !DIExpression()), !dbg !7427
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7428, metadata !DIExpression()), !dbg !7427
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7427
  %cmp = icmp sge i32 %0, 0, !dbg !7427
  %conv = zext i1 %cmp to i32, !dbg !7427
  %1 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7427
  %tobool = icmp ne %struct.VEC_bitpack_word_t_base* %1, null, !dbg !7427
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7427

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7427
  %alloc = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %2, i32 0, i32 1, !dbg !7427
  %3 = load i32, i32* %alloc, align 4, !dbg !7427
  %4 = load %struct.VEC_bitpack_word_t_base*, %struct.VEC_bitpack_word_t_base** %vec_.addr, align 8, !dbg !7427
  %num = getelementptr inbounds %struct.VEC_bitpack_word_t_base, %struct.VEC_bitpack_word_t_base* %4, i32 0, i32 0, !dbg !7427
  %5 = load i32, i32* %num, align 8, !dbg !7427
  %sub = sub i32 %3, %5, !dbg !7427
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7427
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7427
  %conv2 = zext i1 %cmp1 to i32, !dbg !7427
  br label %cond.end, !dbg !7427

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7427
  %tobool3 = icmp ne i32 %7, 0, !dbg !7427
  %lnot = xor i1 %tobool3, true, !dbg !7427
  %lnot.ext = zext i1 %lnot to i32, !dbg !7427
  br label %cond.end, !dbg !7427

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7427
  ret i32 %cond, !dbg !7427
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_file_decl_data_get_type(%struct.lto_file_decl_data* %data, i32 %idx) #0 !dbg !7429 {
entry:
  %data.addr = alloca %struct.lto_file_decl_data*, align 8
  %idx.addr = alloca i32, align 4
  %state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %data, %struct.lto_file_decl_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %data.addr, metadata !7430, metadata !DIExpression()), !dbg !7431
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !7432, metadata !DIExpression()), !dbg !7431
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %state, metadata !7433, metadata !DIExpression()), !dbg !7431
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %data.addr, align 8, !dbg !7431
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %0, i32 0, i32 0, !dbg !7431
  %1 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !7431
  store %struct.lto_in_decl_state* %1, %struct.lto_in_decl_state** %state, align 8, !dbg !7431
  %2 = load i32, i32* %idx.addr, align 4, !dbg !7431
  %3 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7431
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %3, i32 0, i32 0, !dbg !7431
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 0, !dbg !7431
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !7431
  %4 = load i32, i32* %size, align 8, !dbg !7431
  %cmp = icmp ult i32 %2, %4, !dbg !7431
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7431

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 1041, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7431
  br label %cond.end, !dbg !7431

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7431

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7431
  %5 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7431
  %streams1 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %5, i32 0, i32 0, !dbg !7431
  %arrayidx2 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams1, i64 0, i64 0, !dbg !7431
  %trees = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx2, i32 0, i32 0, !dbg !7431
  %6 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !7431
  %7 = load i32, i32* %idx.addr, align 4, !dbg !7431
  %idxprom = zext i32 %7 to i64, !dbg !7431
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !7431
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7431
  ret %union.tree_node* %8, !dbg !7431
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_file_decl_data_get_field_decl(%struct.lto_file_decl_data* %data, i32 %idx) #0 !dbg !7434 {
entry:
  %data.addr = alloca %struct.lto_file_decl_data*, align 8
  %idx.addr = alloca i32, align 4
  %state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %data, %struct.lto_file_decl_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %data.addr, metadata !7435, metadata !DIExpression()), !dbg !7436
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !7437, metadata !DIExpression()), !dbg !7436
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %state, metadata !7438, metadata !DIExpression()), !dbg !7436
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %data.addr, align 8, !dbg !7436
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %0, i32 0, i32 0, !dbg !7436
  %1 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !7436
  store %struct.lto_in_decl_state* %1, %struct.lto_in_decl_state** %state, align 8, !dbg !7436
  %2 = load i32, i32* %idx.addr, align 4, !dbg !7436
  %3 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7436
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %3, i32 0, i32 0, !dbg !7436
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 1, !dbg !7436
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !7436
  %4 = load i32, i32* %size, align 8, !dbg !7436
  %cmp = icmp ult i32 %2, %4, !dbg !7436
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7436

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 1042, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7436
  br label %cond.end, !dbg !7436

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7436

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7436
  %5 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7436
  %streams1 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %5, i32 0, i32 0, !dbg !7436
  %arrayidx2 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams1, i64 0, i64 1, !dbg !7436
  %trees = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx2, i32 0, i32 0, !dbg !7436
  %6 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !7436
  %7 = load i32, i32* %idx.addr, align 4, !dbg !7436
  %idxprom = zext i32 %7 to i64, !dbg !7436
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !7436
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7436
  ret %union.tree_node* %8, !dbg !7436
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_file_decl_data_get_fn_decl(%struct.lto_file_decl_data* %data, i32 %idx) #0 !dbg !7439 {
entry:
  %data.addr = alloca %struct.lto_file_decl_data*, align 8
  %idx.addr = alloca i32, align 4
  %state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %data, %struct.lto_file_decl_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %data.addr, metadata !7440, metadata !DIExpression()), !dbg !7441
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !7442, metadata !DIExpression()), !dbg !7441
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %state, metadata !7443, metadata !DIExpression()), !dbg !7441
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %data.addr, align 8, !dbg !7441
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %0, i32 0, i32 0, !dbg !7441
  %1 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !7441
  store %struct.lto_in_decl_state* %1, %struct.lto_in_decl_state** %state, align 8, !dbg !7441
  %2 = load i32, i32* %idx.addr, align 4, !dbg !7441
  %3 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7441
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %3, i32 0, i32 0, !dbg !7441
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 2, !dbg !7441
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !7441
  %4 = load i32, i32* %size, align 8, !dbg !7441
  %cmp = icmp ult i32 %2, %4, !dbg !7441
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7441

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 1043, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7441
  br label %cond.end, !dbg !7441

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7441

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7441
  %5 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7441
  %streams1 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %5, i32 0, i32 0, !dbg !7441
  %arrayidx2 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams1, i64 0, i64 2, !dbg !7441
  %trees = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx2, i32 0, i32 0, !dbg !7441
  %6 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !7441
  %7 = load i32, i32* %idx.addr, align 4, !dbg !7441
  %idxprom = zext i32 %7 to i64, !dbg !7441
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !7441
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7441
  ret %union.tree_node* %8, !dbg !7441
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_file_decl_data_get_type_decl(%struct.lto_file_decl_data* %data, i32 %idx) #0 !dbg !7444 {
entry:
  %data.addr = alloca %struct.lto_file_decl_data*, align 8
  %idx.addr = alloca i32, align 4
  %state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %data, %struct.lto_file_decl_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %data.addr, metadata !7445, metadata !DIExpression()), !dbg !7446
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !7447, metadata !DIExpression()), !dbg !7446
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %state, metadata !7448, metadata !DIExpression()), !dbg !7446
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %data.addr, align 8, !dbg !7446
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %0, i32 0, i32 0, !dbg !7446
  %1 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !7446
  store %struct.lto_in_decl_state* %1, %struct.lto_in_decl_state** %state, align 8, !dbg !7446
  %2 = load i32, i32* %idx.addr, align 4, !dbg !7446
  %3 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7446
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %3, i32 0, i32 0, !dbg !7446
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 4, !dbg !7446
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !7446
  %4 = load i32, i32* %size, align 8, !dbg !7446
  %cmp = icmp ult i32 %2, %4, !dbg !7446
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7446

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 1045, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7446
  br label %cond.end, !dbg !7446

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7446

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7446
  %5 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7446
  %streams1 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %5, i32 0, i32 0, !dbg !7446
  %arrayidx2 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams1, i64 0, i64 4, !dbg !7446
  %trees = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx2, i32 0, i32 0, !dbg !7446
  %6 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !7446
  %7 = load i32, i32* %idx.addr, align 4, !dbg !7446
  %idxprom = zext i32 %7 to i64, !dbg !7446
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !7446
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7446
  ret %union.tree_node* %8, !dbg !7446
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_file_decl_data_get_namespace_decl(%struct.lto_file_decl_data* %data, i32 %idx) #0 !dbg !7449 {
entry:
  %data.addr = alloca %struct.lto_file_decl_data*, align 8
  %idx.addr = alloca i32, align 4
  %state = alloca %struct.lto_in_decl_state*, align 8
  store %struct.lto_file_decl_data* %data, %struct.lto_file_decl_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_file_decl_data** %data.addr, metadata !7450, metadata !DIExpression()), !dbg !7451
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !7452, metadata !DIExpression()), !dbg !7451
  call void @llvm.dbg.declare(metadata %struct.lto_in_decl_state** %state, metadata !7453, metadata !DIExpression()), !dbg !7451
  %0 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %data.addr, align 8, !dbg !7451
  %current_decl_state = getelementptr inbounds %struct.lto_file_decl_data, %struct.lto_file_decl_data* %0, i32 0, i32 0, !dbg !7451
  %1 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %current_decl_state, align 8, !dbg !7451
  store %struct.lto_in_decl_state* %1, %struct.lto_in_decl_state** %state, align 8, !dbg !7451
  %2 = load i32, i32* %idx.addr, align 4, !dbg !7451
  %3 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7451
  %streams = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %3, i32 0, i32 0, !dbg !7451
  %arrayidx = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams, i64 0, i64 5, !dbg !7451
  %size = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx, i32 0, i32 1, !dbg !7451
  %4 = load i32, i32* %size, align 8, !dbg !7451
  %cmp = icmp ult i32 %2, %4, !dbg !7451
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7451

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 1046, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7451
  br label %cond.end, !dbg !7451

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7451
  %5 = load %struct.lto_in_decl_state*, %struct.lto_in_decl_state** %state, align 8, !dbg !7451
  %streams1 = getelementptr inbounds %struct.lto_in_decl_state, %struct.lto_in_decl_state* %5, i32 0, i32 0, !dbg !7451
  %arrayidx2 = getelementptr inbounds [7 x %struct.lto_tree_ref_table], [7 x %struct.lto_tree_ref_table]* %streams1, i64 0, i64 5, !dbg !7451
  %trees = getelementptr inbounds %struct.lto_tree_ref_table, %struct.lto_tree_ref_table* %arrayidx2, i32 0, i32 0, !dbg !7451
  %6 = load %union.tree_node**, %union.tree_node*** %trees, align 8, !dbg !7451
  %7 = load i32, i32* %idx.addr, align 4, !dbg !7451
  %idxprom = zext i32 %7 to i64, !dbg !7451
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %6, i64 %idxprom, !dbg !7451
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7451
  ret %union.tree_node* %8, !dbg !7451
}

declare dso_local void @varpool_mark_needed_node(%struct.varpool_node*) #2

declare dso_local %struct.varpool_node* @varpool_node(%union.tree_node*) #2

declare dso_local %union.tree_node* @lto_streamer_cache_get(%struct.lto_streamer_cache_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @lto_tag_to_tree_code(i32 %tag) #0 !dbg !7454 {
entry:
  %tag.addr = alloca i32, align 4
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !7457, metadata !DIExpression()), !dbg !7458
  %0 = load i32, i32* %tag.addr, align 4, !dbg !7459
  %call = call zeroext i8 @lto_tag_is_tree_code_p(i32 %0), !dbg !7459
  %tobool = icmp ne i8 %call, 0, !dbg !7459
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7459

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 926, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7459
  br label %cond.end, !dbg !7459

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7459
  %1 = load i32, i32* %tag.addr, align 4, !dbg !7460
  %sub = sub i32 %1, 1, !dbg !7461
  ret i32 %sub, !dbg !7462
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lto_tag_is_tree_code_p(i32 %tag) #0 !dbg !7463 {
entry:
  %tag.addr = alloca i32, align 4
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  %0 = load i32, i32* %tag.addr, align 4, !dbg !7466
  %cmp = icmp ugt i32 %0, 0, !dbg !7467
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7468

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %tag.addr, align 4, !dbg !7469
  %cmp1 = icmp ule i32 %1, 188, !dbg !7470
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ], !dbg !7471
  %land.ext = zext i1 %2 to i32, !dbg !7468
  %conv = trunc i32 %land.ext to i8, !dbg !7466
  ret i8 %conv, !dbg !7472
}

declare dso_local void @fatal_error(i8*, ...) #2

declare dso_local void @set_builtin_user_assembler_name(%union.tree_node*, i8*) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_materialize_tree(%struct.lto_input_block* %ib, %struct.data_in* %data_in, i32 %tag, i32* %ix_p) #0 !dbg !7473 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %tag.addr = alloca i32, align 4
  %ix_p.addr = alloca i32*, align 8
  %bp = alloca %struct.bitpack_d*, align 8
  %code = alloca i32, align 4
  %result = alloca %union.tree_node*, align 8
  %ix = alloca i64, align 8
  %len = alloca i64, align 8
  %len34 = alloca i64, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !7477, metadata !DIExpression()), !dbg !7478
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7479, metadata !DIExpression()), !dbg !7480
  store i32 %tag, i32* %tag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tag.addr, metadata !7481, metadata !DIExpression()), !dbg !7482
  store i32* %ix_p, i32** %ix_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ix_p.addr, metadata !7483, metadata !DIExpression()), !dbg !7484
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp, metadata !7485, metadata !DIExpression()), !dbg !7486
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7487, metadata !DIExpression()), !dbg !7488
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !7489, metadata !DIExpression()), !dbg !7490
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !7491, metadata !DIExpression()), !dbg !7492
  store %union.tree_node* null, %union.tree_node** %result, align 8, !dbg !7493
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7494
  %call = call i64 @lto_input_sleb128(%struct.lto_input_block* %0), !dbg !7495
  store i64 %call, i64* %ix, align 8, !dbg !7496
  %1 = load i64, i64* %ix, align 8, !dbg !7497
  %conv = trunc i64 %1 to i32, !dbg !7497
  %conv1 = sext i32 %conv to i64, !dbg !7497
  %2 = load i64, i64* %ix, align 8, !dbg !7497
  %cmp = icmp eq i64 %conv1, %2, !dbg !7497
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7497

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1899, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7497
  br label %cond.end, !dbg !7497

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7497

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7497
  %3 = load i64, i64* %ix, align 8, !dbg !7498
  %conv3 = trunc i64 %3 to i32, !dbg !7499
  %4 = load i32*, i32** %ix_p.addr, align 8, !dbg !7500
  store i32 %conv3, i32* %4, align 4, !dbg !7501
  %5 = load i32, i32* %tag.addr, align 4, !dbg !7502
  %call4 = call i32 @lto_tag_to_tree_code(i32 %5), !dbg !7503
  store i32 %call4, i32* %code, align 4, !dbg !7504
  %6 = load i32, i32* %code, align 4, !dbg !7505
  %cmp5 = icmp ne i32 %6, 141, !dbg !7505
  br i1 %cmp5, label %cond.false8, label %cond.true7, !dbg !7505

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1914, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7505
  br label %cond.end9, !dbg !7505

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !7505

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !7505
  %7 = load i32, i32* %code, align 4, !dbg !7506
  %idxprom = zext i32 %7 to i64, !dbg !7506
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !7506
  %arrayidx11 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 6, !dbg !7506
  %8 = load i8, i8* %arrayidx11, align 2, !dbg !7506
  %tobool = icmp ne i8 %8, 0, !dbg !7506
  br i1 %tobool, label %if.then, label %if.else, !dbg !7508

if.then:                                          ; preds = %cond.end9
  %9 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7509
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7510
  %call12 = call %union.tree_node* @input_string_cst(%struct.data_in* %9, %struct.lto_input_block* %10), !dbg !7511
  store %union.tree_node* %call12, %union.tree_node** %result, align 8, !dbg !7512
  br label %if.end42, !dbg !7513

if.else:                                          ; preds = %cond.end9
  %11 = load i32, i32* %code, align 4, !dbg !7514
  %idxprom13 = zext i32 %11 to i64, !dbg !7514
  %arrayidx14 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom13, !dbg !7514
  %arrayidx15 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx14, i64 0, i64 8, !dbg !7514
  %12 = load i8, i8* %arrayidx15, align 8, !dbg !7514
  %tobool16 = icmp ne i8 %12, 0, !dbg !7514
  br i1 %tobool16, label %if.then17, label %if.else19, !dbg !7516

if.then17:                                        ; preds = %if.else
  %13 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7517
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7518
  %call18 = call %union.tree_node* @input_identifier(%struct.data_in* %13, %struct.lto_input_block* %14), !dbg !7519
  store %union.tree_node* %call18, %union.tree_node** %result, align 8, !dbg !7520
  br label %if.end41, !dbg !7521

if.else19:                                        ; preds = %if.else
  %15 = load i32, i32* %code, align 4, !dbg !7522
  %idxprom20 = zext i32 %15 to i64, !dbg !7522
  %arrayidx21 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom20, !dbg !7522
  %arrayidx22 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx21, i64 0, i64 24, !dbg !7522
  %16 = load i8, i8* %arrayidx22, align 8, !dbg !7522
  %tobool23 = icmp ne i8 %16, 0, !dbg !7522
  br i1 %tobool23, label %if.then24, label %if.else28, !dbg !7524

if.then24:                                        ; preds = %if.else19
  call void @llvm.dbg.declare(metadata i64* %len, metadata !7525, metadata !DIExpression()), !dbg !7527
  %17 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7528
  %call25 = call i64 @lto_input_sleb128(%struct.lto_input_block* %17), !dbg !7529
  store i64 %call25, i64* %len, align 8, !dbg !7527
  %18 = load i64, i64* %len, align 8, !dbg !7530
  %conv26 = trunc i64 %18 to i32, !dbg !7530
  %call27 = call %union.tree_node* @make_tree_vec_stat(i32 %conv26), !dbg !7530
  store %union.tree_node* %call27, %union.tree_node** %result, align 8, !dbg !7531
  br label %if.end40, !dbg !7532

if.else28:                                        ; preds = %if.else19
  %19 = load i32, i32* %code, align 4, !dbg !7533
  %idxprom29 = zext i32 %19 to i64, !dbg !7533
  %arrayidx30 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom29, !dbg !7533
  %arrayidx31 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx30, i64 0, i64 28, !dbg !7533
  %20 = load i8, i8* %arrayidx31, align 4, !dbg !7533
  %tobool32 = icmp ne i8 %20, 0, !dbg !7533
  br i1 %tobool32, label %if.then33, label %if.else38, !dbg !7535

if.then33:                                        ; preds = %if.else28
  call void @llvm.dbg.declare(metadata i64* %len34, metadata !7536, metadata !DIExpression()), !dbg !7538
  %21 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7539
  %call35 = call i64 @lto_input_uleb128(%struct.lto_input_block* %21), !dbg !7540
  store i64 %call35, i64* %len34, align 8, !dbg !7538
  %22 = load i64, i64* %len34, align 8, !dbg !7541
  %conv36 = trunc i64 %22 to i32, !dbg !7541
  %call37 = call %union.tree_node* @make_tree_binfo_stat(i32 %conv36), !dbg !7541
  store %union.tree_node* %call37, %union.tree_node** %result, align 8, !dbg !7542
  br label %if.end, !dbg !7543

if.else38:                                        ; preds = %if.else28
  %23 = load i32, i32* %code, align 4, !dbg !7544
  %call39 = call %union.tree_node* @make_node_stat(i32 %23), !dbg !7544
  store %union.tree_node* %call39, %union.tree_node** %result, align 8, !dbg !7546
  br label %if.end

if.end:                                           ; preds = %if.else38, %if.then33
  br label %if.end40

if.end40:                                         ; preds = %if.end, %if.then24
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then17
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then
  %24 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7547
  %call43 = call %struct.bitpack_d* @lto_input_bitpack(%struct.lto_input_block* %24), !dbg !7548
  store %struct.bitpack_d* %call43, %struct.bitpack_d** %bp, align 8, !dbg !7549
  %25 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7550
  %call44 = call i64 @bp_unpack_value(%struct.bitpack_d* %25, i32 16), !dbg !7551
  %conv45 = trunc i64 %call44 to i32, !dbg !7552
  store i32 %conv45, i32* %code, align 4, !dbg !7553
  %26 = load i32, i32* %code, align 4, !dbg !7554
  %call46 = call i32 @lto_tree_code_to_tag(i32 %26), !dbg !7555
  %27 = load i32, i32* %tag.addr, align 4, !dbg !7556
  call void @lto_tag_check(i32 %call46, i32 %27), !dbg !7557
  %28 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7558
  %29 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7559
  call void @unpack_value_fields(%struct.bitpack_d* %28, %union.tree_node* %29), !dbg !7560
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp, align 8, !dbg !7561
  call void @bitpack_delete(%struct.bitpack_d* %30), !dbg !7562
  %31 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7563
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %31, i32 0, i32 10, !dbg !7564
  %32 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !7564
  %33 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7565
  %34 = load i64, i64* %ix, align 8, !dbg !7566
  %conv47 = trunc i64 %34 to i32, !dbg !7566
  %call48 = call zeroext i8 @lto_streamer_cache_insert_at(%struct.lto_streamer_cache_d* %32, %union.tree_node* %33, i32 %conv47), !dbg !7567
  %35 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7568
  ret %union.tree_node* %35, !dbg !7569
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !7570 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !7573, metadata !DIExpression()), !dbg !7574
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7575, metadata !DIExpression()), !dbg !7576
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7577, metadata !DIExpression()), !dbg !7578
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7579, metadata !DIExpression()), !dbg !7580
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7581
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7581
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7581
  %bf.load = load i64, i64* %1, align 8, !dbg !7581
  %bf.clear = and i64 %bf.load, 65535, !dbg !7581
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7581
  store i32 %bf.cast, i32* %code, align 4, !dbg !7582
  %2 = load i32, i32* %code, align 4, !dbg !7583
  %idxprom = zext i32 %2 to i64, !dbg !7583
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !7583
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 1, !dbg !7583
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !7583
  %tobool = icmp ne i8 %3, 0, !dbg !7583
  br i1 %tobool, label %if.then, label %if.end, !dbg !7585

if.then:                                          ; preds = %entry
  %4 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7586
  %5 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7587
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7588
  call void @lto_input_ts_common_tree_pointers(%struct.lto_input_block* %4, %struct.data_in* %5, %union.tree_node* %6), !dbg !7589
  br label %if.end, !dbg !7589

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %code, align 4, !dbg !7590
  %idxprom2 = zext i32 %7 to i64, !dbg !7590
  %arrayidx3 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom2, !dbg !7590
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx3, i64 0, i64 5, !dbg !7590
  %8 = load i8, i8* %arrayidx4, align 1, !dbg !7590
  %tobool5 = icmp ne i8 %8, 0, !dbg !7590
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !7592

if.then6:                                         ; preds = %if.end
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7593
  %10 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7594
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7595
  call void @lto_input_ts_vector_tree_pointers(%struct.lto_input_block* %9, %struct.data_in* %10, %union.tree_node* %11), !dbg !7596
  br label %if.end7, !dbg !7596

if.end7:                                          ; preds = %if.then6, %if.end
  %12 = load i32, i32* %code, align 4, !dbg !7597
  %idxprom8 = zext i32 %12 to i64, !dbg !7597
  %arrayidx9 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom8, !dbg !7597
  %arrayidx10 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx9, i64 0, i64 7, !dbg !7597
  %13 = load i8, i8* %arrayidx10, align 1, !dbg !7597
  %tobool11 = icmp ne i8 %13, 0, !dbg !7597
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !7599

if.then12:                                        ; preds = %if.end7
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7600
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7601
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7602
  call void @lto_input_ts_complex_tree_pointers(%struct.lto_input_block* %14, %struct.data_in* %15, %union.tree_node* %16), !dbg !7603
  br label %if.end13, !dbg !7603

if.end13:                                         ; preds = %if.then12, %if.end7
  %17 = load i32, i32* %code, align 4, !dbg !7604
  %idxprom14 = zext i32 %17 to i64, !dbg !7604
  %arrayidx15 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom14, !dbg !7604
  %arrayidx16 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx15, i64 0, i64 9, !dbg !7604
  %18 = load i8, i8* %arrayidx16, align 1, !dbg !7604
  %tobool17 = icmp ne i8 %18, 0, !dbg !7604
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !7606

if.then18:                                        ; preds = %if.end13
  %19 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7607
  %20 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7608
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7609
  call void @lto_input_ts_decl_minimal_tree_pointers(%struct.lto_input_block* %19, %struct.data_in* %20, %union.tree_node* %21), !dbg !7610
  br label %if.end19, !dbg !7610

if.end19:                                         ; preds = %if.then18, %if.end13
  %22 = load i32, i32* %code, align 4, !dbg !7611
  %idxprom20 = zext i32 %22 to i64, !dbg !7611
  %arrayidx21 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom20, !dbg !7611
  %arrayidx22 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx21, i64 0, i64 10, !dbg !7611
  %23 = load i8, i8* %arrayidx22, align 2, !dbg !7611
  %tobool23 = icmp ne i8 %23, 0, !dbg !7611
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !7613

if.then24:                                        ; preds = %if.end19
  %24 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7614
  %25 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7615
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7616
  call void @lto_input_ts_decl_common_tree_pointers(%struct.lto_input_block* %24, %struct.data_in* %25, %union.tree_node* %26), !dbg !7617
  br label %if.end25, !dbg !7617

if.end25:                                         ; preds = %if.then24, %if.end19
  %27 = load i32, i32* %code, align 4, !dbg !7618
  %idxprom26 = zext i32 %27 to i64, !dbg !7618
  %arrayidx27 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom26, !dbg !7618
  %arrayidx28 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx27, i64 0, i64 12, !dbg !7618
  %28 = load i8, i8* %arrayidx28, align 4, !dbg !7618
  %tobool29 = icmp ne i8 %28, 0, !dbg !7618
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !7620

if.then30:                                        ; preds = %if.end25
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7621
  %30 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7622
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7623
  call void @lto_input_ts_decl_non_common_tree_pointers(%struct.lto_input_block* %29, %struct.data_in* %30, %union.tree_node* %31), !dbg !7624
  br label %if.end31, !dbg !7624

if.end31:                                         ; preds = %if.then30, %if.end25
  %32 = load i32, i32* %code, align 4, !dbg !7625
  %idxprom32 = zext i32 %32 to i64, !dbg !7625
  %arrayidx33 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom32, !dbg !7625
  %arrayidx34 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx33, i64 0, i64 13, !dbg !7625
  %33 = load i8, i8* %arrayidx34, align 1, !dbg !7625
  %tobool35 = icmp ne i8 %33, 0, !dbg !7625
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !7627

if.then36:                                        ; preds = %if.end31
  %34 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7628
  %35 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7629
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7630
  call void @lto_input_ts_decl_with_vis_tree_pointers(%struct.lto_input_block* %34, %struct.data_in* %35, %union.tree_node* %36), !dbg !7631
  br label %if.end37, !dbg !7631

if.end37:                                         ; preds = %if.then36, %if.end31
  %37 = load i32, i32* %code, align 4, !dbg !7632
  %idxprom38 = zext i32 %37 to i64, !dbg !7632
  %arrayidx39 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom38, !dbg !7632
  %arrayidx40 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx39, i64 0, i64 14, !dbg !7632
  %38 = load i8, i8* %arrayidx40, align 2, !dbg !7632
  %tobool41 = icmp ne i8 %38, 0, !dbg !7632
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !7634

if.then42:                                        ; preds = %if.end37
  %39 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7635
  %40 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7636
  %41 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7637
  call void @lto_input_ts_field_decl_tree_pointers(%struct.lto_input_block* %39, %struct.data_in* %40, %union.tree_node* %41), !dbg !7638
  br label %if.end43, !dbg !7638

if.end43:                                         ; preds = %if.then42, %if.end37
  %42 = load i32, i32* %code, align 4, !dbg !7639
  %idxprom44 = zext i32 %42 to i64, !dbg !7639
  %arrayidx45 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom44, !dbg !7639
  %arrayidx46 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i64 0, i64 21, !dbg !7639
  %43 = load i8, i8* %arrayidx46, align 1, !dbg !7639
  %tobool47 = icmp ne i8 %43, 0, !dbg !7639
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !7641

if.then48:                                        ; preds = %if.end43
  %44 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7642
  %45 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7643
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7644
  call void @lto_input_ts_function_decl_tree_pointers(%struct.lto_input_block* %44, %struct.data_in* %45, %union.tree_node* %46), !dbg !7645
  br label %if.end49, !dbg !7645

if.end49:                                         ; preds = %if.then48, %if.end43
  %47 = load i32, i32* %code, align 4, !dbg !7646
  %idxprom50 = zext i32 %47 to i64, !dbg !7646
  %arrayidx51 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom50, !dbg !7646
  %arrayidx52 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx51, i64 0, i64 22, !dbg !7646
  %48 = load i8, i8* %arrayidx52, align 2, !dbg !7646
  %tobool53 = icmp ne i8 %48, 0, !dbg !7646
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !7648

if.then54:                                        ; preds = %if.end49
  %49 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7649
  %50 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7650
  %51 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7651
  call void @lto_input_ts_type_tree_pointers(%struct.lto_input_block* %49, %struct.data_in* %50, %union.tree_node* %51), !dbg !7652
  br label %if.end55, !dbg !7652

if.end55:                                         ; preds = %if.then54, %if.end49
  %52 = load i32, i32* %code, align 4, !dbg !7653
  %idxprom56 = zext i32 %52 to i64, !dbg !7653
  %arrayidx57 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom56, !dbg !7653
  %arrayidx58 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx57, i64 0, i64 23, !dbg !7653
  %53 = load i8, i8* %arrayidx58, align 1, !dbg !7653
  %tobool59 = icmp ne i8 %53, 0, !dbg !7653
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !7655

if.then60:                                        ; preds = %if.end55
  %54 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7656
  %55 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7657
  %56 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7658
  call void @lto_input_ts_list_tree_pointers(%struct.lto_input_block* %54, %struct.data_in* %55, %union.tree_node* %56), !dbg !7659
  br label %if.end61, !dbg !7659

if.end61:                                         ; preds = %if.then60, %if.end55
  %57 = load i32, i32* %code, align 4, !dbg !7660
  %idxprom62 = zext i32 %57 to i64, !dbg !7660
  %arrayidx63 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom62, !dbg !7660
  %arrayidx64 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx63, i64 0, i64 24, !dbg !7660
  %58 = load i8, i8* %arrayidx64, align 8, !dbg !7660
  %tobool65 = icmp ne i8 %58, 0, !dbg !7660
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !7662

if.then66:                                        ; preds = %if.end61
  %59 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7663
  %60 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7664
  %61 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7665
  call void @lto_input_ts_vec_tree_pointers(%struct.lto_input_block* %59, %struct.data_in* %60, %union.tree_node* %61), !dbg !7666
  br label %if.end67, !dbg !7666

if.end67:                                         ; preds = %if.then66, %if.end61
  %62 = load i32, i32* %code, align 4, !dbg !7667
  %idxprom68 = zext i32 %62 to i64, !dbg !7667
  %arrayidx69 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom68, !dbg !7667
  %arrayidx70 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx69, i64 0, i64 25, !dbg !7667
  %63 = load i8, i8* %arrayidx70, align 1, !dbg !7667
  %tobool71 = icmp ne i8 %63, 0, !dbg !7667
  br i1 %tobool71, label %if.then72, label %if.end73, !dbg !7669

if.then72:                                        ; preds = %if.end67
  %64 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7670
  %65 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7671
  %66 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7672
  call void @lto_input_ts_exp_tree_pointers(%struct.lto_input_block* %64, %struct.data_in* %65, %union.tree_node* %66), !dbg !7673
  br label %if.end73, !dbg !7673

if.end73:                                         ; preds = %if.then72, %if.end67
  %67 = load i32, i32* %code, align 4, !dbg !7674
  %idxprom74 = zext i32 %67 to i64, !dbg !7674
  %arrayidx75 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom74, !dbg !7674
  %arrayidx76 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx75, i64 0, i64 26, !dbg !7674
  %68 = load i8, i8* %arrayidx76, align 2, !dbg !7674
  %tobool77 = icmp ne i8 %68, 0, !dbg !7674
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !7676

if.then78:                                        ; preds = %if.end73
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2392, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7677
  br label %if.end79, !dbg !7679

if.end79:                                         ; preds = %if.then78, %if.end73
  %69 = load i32, i32* %code, align 4, !dbg !7680
  %idxprom80 = zext i32 %69 to i64, !dbg !7680
  %arrayidx81 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom80, !dbg !7680
  %arrayidx82 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx81, i64 0, i64 27, !dbg !7680
  %70 = load i8, i8* %arrayidx82, align 1, !dbg !7680
  %tobool83 = icmp ne i8 %70, 0, !dbg !7680
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !7682

if.then84:                                        ; preds = %if.end79
  %71 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7683
  %72 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7684
  %73 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7685
  call void @lto_input_ts_block_tree_pointers(%struct.lto_input_block* %71, %struct.data_in* %72, %union.tree_node* %73), !dbg !7686
  br label %if.end85, !dbg !7686

if.end85:                                         ; preds = %if.then84, %if.end79
  %74 = load i32, i32* %code, align 4, !dbg !7687
  %idxprom86 = zext i32 %74 to i64, !dbg !7687
  %arrayidx87 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom86, !dbg !7687
  %arrayidx88 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx87, i64 0, i64 28, !dbg !7687
  %75 = load i8, i8* %arrayidx88, align 4, !dbg !7687
  %tobool89 = icmp ne i8 %75, 0, !dbg !7687
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !7689

if.then90:                                        ; preds = %if.end85
  %76 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7690
  %77 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7691
  %78 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7692
  call void @lto_input_ts_binfo_tree_pointers(%struct.lto_input_block* %76, %struct.data_in* %77, %union.tree_node* %78), !dbg !7693
  br label %if.end91, !dbg !7693

if.end91:                                         ; preds = %if.then90, %if.end85
  %79 = load i32, i32* %code, align 4, !dbg !7694
  %idxprom92 = zext i32 %79 to i64, !dbg !7694
  %arrayidx93 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom92, !dbg !7694
  %arrayidx94 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx93, i64 0, i64 29, !dbg !7694
  %80 = load i8, i8* %arrayidx94, align 1, !dbg !7694
  %tobool95 = icmp ne i8 %80, 0, !dbg !7694
  br i1 %tobool95, label %if.then96, label %if.end97, !dbg !7696

if.then96:                                        ; preds = %if.end91
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2404, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7697
  br label %if.end97, !dbg !7699

if.end97:                                         ; preds = %if.then96, %if.end91
  %81 = load i32, i32* %code, align 4, !dbg !7700
  %idxprom98 = zext i32 %81 to i64, !dbg !7700
  %arrayidx99 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom98, !dbg !7700
  %arrayidx100 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx99, i64 0, i64 30, !dbg !7700
  %82 = load i8, i8* %arrayidx100, align 2, !dbg !7700
  %tobool101 = icmp ne i8 %82, 0, !dbg !7700
  br i1 %tobool101, label %if.then102, label %if.end103, !dbg !7702

if.then102:                                       ; preds = %if.end97
  %83 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7703
  %84 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7704
  %85 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7705
  call void @lto_input_ts_constructor_tree_pointers(%struct.lto_input_block* %83, %struct.data_in* %84, %union.tree_node* %85), !dbg !7706
  br label %if.end103, !dbg !7706

if.end103:                                        ; preds = %if.then102, %if.end97
  %86 = load i32, i32* %code, align 4, !dbg !7707
  %idxprom104 = zext i32 %86 to i64, !dbg !7707
  %arrayidx105 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom104, !dbg !7707
  %arrayidx106 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx105, i64 0, i64 31, !dbg !7707
  %87 = load i8, i8* %arrayidx106, align 1, !dbg !7707
  %tobool107 = icmp ne i8 %87, 0, !dbg !7707
  br i1 %tobool107, label %if.then108, label %if.end109, !dbg !7709

if.then108:                                       ; preds = %if.end103
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2413, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7710
  br label %if.end109, !dbg !7712

if.end109:                                        ; preds = %if.then108, %if.end103
  %88 = load i32, i32* %code, align 4, !dbg !7713
  %idxprom110 = zext i32 %88 to i64, !dbg !7713
  %arrayidx111 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom110, !dbg !7713
  %arrayidx112 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx111, i64 0, i64 32, !dbg !7713
  %89 = load i8, i8* %arrayidx112, align 16, !dbg !7713
  %tobool113 = icmp ne i8 %89, 0, !dbg !7713
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !7715

if.then114:                                       ; preds = %if.end109
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.13, i64 0, i64 0)), !dbg !7716
  br label %if.end115, !dbg !7718

if.end115:                                        ; preds = %if.then114, %if.end109
  %90 = load i32, i32* %code, align 4, !dbg !7719
  %idxprom116 = zext i32 %90 to i64, !dbg !7719
  %arrayidx117 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom116, !dbg !7719
  %arrayidx118 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx117, i64 0, i64 33, !dbg !7719
  %91 = load i8, i8* %arrayidx118, align 1, !dbg !7719
  %tobool119 = icmp ne i8 %91, 0, !dbg !7719
  br i1 %tobool119, label %if.then120, label %if.end121, !dbg !7721

if.then120:                                       ; preds = %if.end115
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.14, i64 0, i64 0)), !dbg !7722
  br label %if.end121, !dbg !7724

if.end121:                                        ; preds = %if.then120, %if.end115
  ret void, !dbg !7725
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lto_stream_as_builtin_p(%union.tree_node* %expr) #0 !dbg !7726 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7727, metadata !DIExpression()), !dbg !7728
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7729
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7729
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7729
  %bf.load = load i64, i64* %1, align 8, !dbg !7729
  %bf.clear = and i64 %bf.load, 65535, !dbg !7729
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7729
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !7730
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !7731

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7732
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !7732
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !7732
  %3 = load i32, i32* %locus, align 8, !dbg !7732
  %cmp1 = icmp ule i32 %3, 1, !dbg !7732
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !7733

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7734
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !7734
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7734
  %bf.load2 = load i32, i32* %built_in_class, align 8, !dbg !7734
  %bf.lshr = lshr i32 %bf.load2, 11, !dbg !7734
  %bf.clear3 = and i32 %bf.lshr, 3, !dbg !7734
  %cmp4 = icmp eq i32 %bf.clear3, 3, !dbg !7735
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !7736

lor.rhs:                                          ; preds = %land.rhs
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7737
  %function_decl5 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !7737
  %built_in_class6 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl5, i32 0, i32 5, !dbg !7737
  %bf.load7 = load i32, i32* %built_in_class6, align 8, !dbg !7737
  %bf.lshr8 = lshr i32 %bf.load7, 11, !dbg !7737
  %bf.clear9 = and i32 %bf.lshr8, 3, !dbg !7737
  %cmp10 = icmp eq i32 %bf.clear9, 2, !dbg !7738
  br label %lor.end, !dbg !7736

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %cmp10, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %7 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %6, %lor.end ], !dbg !7739
  %land.ext = zext i1 %7 to i32, !dbg !7733
  %conv = trunc i32 %land.ext to i8, !dbg !7740
  ret i8 %conv, !dbg !7741
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_register_var_decl_in_symtab(%struct.data_in* %data_in, %union.tree_node* %decl) #0 !dbg !7742 {
entry:
  %data_in.addr = alloca %struct.data_in*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  %label = alloca i8*, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  %ix = alloca i32, align 4
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7745, metadata !DIExpression()), !dbg !7746
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7747, metadata !DIExpression()), !dbg !7748
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7749
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %0), !dbg !7751
  %cmp = icmp eq %union.tree_node* %call, null, !dbg !7752
  br i1 %cmp, label %if.then, label %if.end6, !dbg !7753

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7754
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7754
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7754
  %bf.load = load i64, i64* %2, align 8, !dbg !7754
  %bf.lshr = lshr i64 %bf.load, 27, !dbg !7754
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7754
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7754
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7754
  br i1 %tobool, label %if.end, label %if.then1, !dbg !7757

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %name, metadata !7758, metadata !DIExpression()), !dbg !7760
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7761
  %call2 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %3), !dbg !7761
  %identifier = bitcast %union.tree_node* %call2 to %struct.tree_identifier*, !dbg !7761
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !7761
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !7761
  %4 = load i8*, i8** %str, align 8, !dbg !7761
  store i8* %4, i8** %name, align 8, !dbg !7760
  call void @llvm.dbg.declare(metadata i8** %label, metadata !7762, metadata !DIExpression()), !dbg !7763
  br label %do.body, !dbg !7764

do.body:                                          ; preds = %if.then1
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !7765, metadata !DIExpression()), !dbg !7768
  %5 = load i8*, i8** %name, align 8, !dbg !7768
  store i8* %5, i8** %name_, align 8, !dbg !7768
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !7769, metadata !DIExpression()), !dbg !7768
  %6 = load i8*, i8** %name_, align 8, !dbg !7768
  %call3 = call i64 @strlen(i8* %6), !dbg !7768
  %add = add i64 %call3, 32, !dbg !7768
  %7 = alloca i8, i64 %add, align 16, !dbg !7768
  store i8* %7, i8** %label, align 8, !dbg !7768
  store i8* %7, i8** %output_, align 8, !dbg !7768
  %8 = load i8*, i8** %output_, align 8, !dbg !7768
  %9 = load i8*, i8** %name_, align 8, !dbg !7768
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7768
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !7768
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7768
  %11 = load i32, i32* %uid, align 4, !dbg !7768
  %conv = zext i32 %11 to i64, !dbg !7768
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0), i8* %9, i64 %conv), !dbg !7768
  br label %do.end, !dbg !7768

do.end:                                           ; preds = %do.body
  %12 = load i8*, i8** %label, align 8, !dbg !7771
  %call5 = call %union.tree_node* @get_identifier(i8* %12), !dbg !7771
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7771
  %decl_with_vis = bitcast %union.tree_node* %13 to %struct.tree_decl_with_vis*, !dbg !7771
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !7771
  store %union.tree_node* %call5, %union.tree_node** %assembler_name, align 8, !dbg !7771
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7772
  call void @rest_of_decl_compilation(%union.tree_node* %14, i32 1, i32 0), !dbg !7773
  br label %if.end, !dbg !7774

if.end:                                           ; preds = %do.end, %if.then
  br label %if.end6, !dbg !7775

if.end6:                                          ; preds = %if.end, %entry
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7776
  %base7 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7776
  %16 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7776
  %bf.load8 = load i64, i64* %16, align 8, !dbg !7776
  %bf.lshr9 = lshr i64 %bf.load8, 27, !dbg !7776
  %bf.clear10 = and i64 %bf.lshr9, 1, !dbg !7776
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7776
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !7776
  br i1 %tobool12, label %if.then13, label %if.end19, !dbg !7778

if.then13:                                        ; preds = %if.end6
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !7779, metadata !DIExpression()), !dbg !7781
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7782
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %17, i32 0, i32 10, !dbg !7784
  %18 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !7784
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7785
  %call14 = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %18, %union.tree_node* %19, i32* %ix), !dbg !7786
  %tobool15 = icmp ne i8 %call14, 0, !dbg !7786
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !7787

if.then16:                                        ; preds = %if.then13
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7788
  br label %if.end17, !dbg !7788

if.end17:                                         ; preds = %if.then16, %if.then13
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7789
  %21 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7790
  %22 = load i32, i32* %ix, align 4, !dbg !7791
  %call18 = call i32 @get_resolution(%struct.data_in* %21, i32 %22), !dbg !7792
  %23 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7793
  %file_data = getelementptr inbounds %struct.data_in, %struct.data_in* %23, i32 0, i32 0, !dbg !7794
  %24 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !7794
  call void @lto_symtab_register_decl(%union.tree_node* %20, i32 %call18, %struct.lto_file_decl_data* %24), !dbg !7795
  br label %if.end19, !dbg !7796

if.end19:                                         ; preds = %if.end17, %if.end6
  ret void, !dbg !7797
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_register_function_decl_in_symtab(%struct.data_in* %data_in, %union.tree_node* %decl) #0 !dbg !7798 {
entry:
  %data_in.addr = alloca %struct.data_in*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %old_assembler_name = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  %label = alloca i8*, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  %new_assembler_name = alloca %union.tree_node*, align 8
  %ix = alloca i32, align 4
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7799, metadata !DIExpression()), !dbg !7800
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7801, metadata !DIExpression()), !dbg !7802
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7803
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7803
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7803
  %bf.load = load i64, i64* %1, align 8, !dbg !7803
  %bf.lshr = lshr i64 %bf.load, 27, !dbg !7803
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7803
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7803
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7803
  br i1 %tobool, label %if.end22, label %if.then, !dbg !7805

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_assembler_name, metadata !7806, metadata !DIExpression()), !dbg !7808
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7809
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !7810
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !7811
  %3 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !7811
  store %union.tree_node* %3, %union.tree_node** %old_assembler_name, align 8, !dbg !7808
  call void @llvm.dbg.declare(metadata i8** %name, metadata !7812, metadata !DIExpression()), !dbg !7813
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7814
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %4), !dbg !7814
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !7814
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !7814
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !7814
  %5 = load i8*, i8** %str, align 8, !dbg !7814
  store i8* %5, i8** %name, align 8, !dbg !7813
  call void @llvm.dbg.declare(metadata i8** %label, metadata !7815, metadata !DIExpression()), !dbg !7816
  br label %do.body, !dbg !7817

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !7818, metadata !DIExpression()), !dbg !7820
  %6 = load i8*, i8** %name, align 8, !dbg !7820
  store i8* %6, i8** %name_, align 8, !dbg !7820
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !7821, metadata !DIExpression()), !dbg !7820
  %7 = load i8*, i8** %name_, align 8, !dbg !7820
  %call1 = call i64 @strlen(i8* %7), !dbg !7820
  %add = add i64 %call1, 32, !dbg !7820
  %8 = alloca i8, i64 %add, align 16, !dbg !7820
  store i8* %8, i8** %label, align 8, !dbg !7820
  store i8* %8, i8** %output_, align 8, !dbg !7820
  %9 = load i8*, i8** %output_, align 8, !dbg !7820
  %10 = load i8*, i8** %name_, align 8, !dbg !7820
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7820
  %decl_minimal = bitcast %union.tree_node* %11 to %struct.tree_decl_minimal*, !dbg !7820
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7820
  %12 = load i32, i32* %uid, align 4, !dbg !7820
  %conv = zext i32 %12 to i64, !dbg !7820
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0), i8* %10, i64 %conv), !dbg !7820
  br label %do.end, !dbg !7820

do.end:                                           ; preds = %do.body
  %13 = load i8*, i8** %label, align 8, !dbg !7822
  %call3 = call %union.tree_node* @get_identifier(i8* %13), !dbg !7822
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7822
  %decl_with_vis4 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_vis*, !dbg !7822
  %assembler_name5 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis4, i32 0, i32 1, !dbg !7822
  store %union.tree_node* %call3, %union.tree_node** %assembler_name5, align 8, !dbg !7822
  %15 = load %union.tree_node*, %union.tree_node** %old_assembler_name, align 8, !dbg !7823
  %tobool6 = icmp ne %union.tree_node* %15, null, !dbg !7823
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !7825

if.then7:                                         ; preds = %do.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_assembler_name, metadata !7826, metadata !DIExpression()), !dbg !7828
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7829
  %call8 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %16), !dbg !7829
  store %union.tree_node* %call8, %union.tree_node** %new_assembler_name, align 8, !dbg !7828
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7830
  %file_data = getelementptr inbounds %struct.data_in, %struct.data_in* %17, i32 0, i32 0, !dbg !7831
  %18 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data, align 8, !dbg !7831
  %19 = load %union.tree_node*, %union.tree_node** %old_assembler_name, align 8, !dbg !7832
  %identifier9 = bitcast %union.tree_node* %19 to %struct.tree_identifier*, !dbg !7832
  %id10 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier9, i32 0, i32 1, !dbg !7832
  %str11 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id10, i32 0, i32 0, !dbg !7832
  %20 = load i8*, i8** %str11, align 8, !dbg !7832
  %21 = load %union.tree_node*, %union.tree_node** %new_assembler_name, align 8, !dbg !7833
  %identifier12 = bitcast %union.tree_node* %21 to %struct.tree_identifier*, !dbg !7833
  %id13 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier12, i32 0, i32 1, !dbg !7833
  %str14 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id13, i32 0, i32 0, !dbg !7833
  %22 = load i8*, i8** %str14, align 8, !dbg !7833
  call void @lto_record_renamed_decl(%struct.lto_file_decl_data* %18, i8* %20, i8* %22), !dbg !7834
  %23 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7835
  %file_data15 = getelementptr inbounds %struct.data_in, %struct.data_in* %23, i32 0, i32 0, !dbg !7836
  %24 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data15, align 8, !dbg !7836
  %25 = load %union.tree_node*, %union.tree_node** %new_assembler_name, align 8, !dbg !7837
  %identifier16 = bitcast %union.tree_node* %25 to %struct.tree_identifier*, !dbg !7837
  %id17 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier16, i32 0, i32 1, !dbg !7837
  %str18 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id17, i32 0, i32 0, !dbg !7837
  %26 = load i8*, i8** %str18, align 8, !dbg !7837
  %27 = load %union.tree_node*, %union.tree_node** %old_assembler_name, align 8, !dbg !7838
  %identifier19 = bitcast %union.tree_node* %27 to %struct.tree_identifier*, !dbg !7838
  %id20 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier19, i32 0, i32 1, !dbg !7838
  %str21 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id20, i32 0, i32 0, !dbg !7838
  %28 = load i8*, i8** %str21, align 8, !dbg !7838
  call void @lto_record_renamed_decl(%struct.lto_file_decl_data* %24, i8* %26, i8* %28), !dbg !7839
  br label %if.end, !dbg !7840

if.end:                                           ; preds = %if.then7, %do.end
  br label %if.end22, !dbg !7841

if.end22:                                         ; preds = %if.end, %entry
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7842
  %base23 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !7842
  %30 = bitcast %struct.tree_base* %base23 to i64*, !dbg !7842
  %bf.load24 = load i64, i64* %30, align 8, !dbg !7842
  %bf.lshr25 = lshr i64 %bf.load24, 27, !dbg !7842
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !7842
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !7842
  %tobool28 = icmp ne i32 %bf.cast27, 0, !dbg !7842
  br i1 %tobool28, label %land.lhs.true, label %if.end41, !dbg !7844

land.lhs.true:                                    ; preds = %if.end22
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7845
  %decl_common = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !7845
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7845
  %32 = bitcast i40* %abstract_flag to i64*, !dbg !7845
  %bf.load29 = load i64, i64* %32, align 8, !dbg !7845
  %bf.lshr30 = lshr i64 %bf.load29, 11, !dbg !7845
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !7845
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !7845
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !7845
  br i1 %tobool33, label %if.end41, label %if.then34, !dbg !7846

if.then34:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !7847, metadata !DIExpression()), !dbg !7849
  %33 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7850
  %reader_cache = getelementptr inbounds %struct.data_in, %struct.data_in* %33, i32 0, i32 10, !dbg !7852
  %34 = load %struct.lto_streamer_cache_d*, %struct.lto_streamer_cache_d** %reader_cache, align 8, !dbg !7852
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7853
  %call35 = call zeroext i8 @lto_streamer_cache_lookup(%struct.lto_streamer_cache_d* %34, %union.tree_node* %35, i32* %ix), !dbg !7854
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7854
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7855

if.then37:                                        ; preds = %if.then34
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2531, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7856
  br label %if.end38, !dbg !7856

if.end38:                                         ; preds = %if.then37, %if.then34
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7857
  %37 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7858
  %38 = load i32, i32* %ix, align 4, !dbg !7859
  %call39 = call i32 @get_resolution(%struct.data_in* %37, i32 %38), !dbg !7860
  %39 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7861
  %file_data40 = getelementptr inbounds %struct.data_in, %struct.data_in* %39, i32 0, i32 0, !dbg !7862
  %40 = load %struct.lto_file_decl_data*, %struct.lto_file_decl_data** %file_data40, align 8, !dbg !7862
  call void @lto_symtab_register_decl(%union.tree_node* %36, i32 %call39, %struct.lto_file_decl_data* %40), !dbg !7863
  br label %if.end41, !dbg !7864

if.end41:                                         ; preds = %if.end38, %land.lhs.true, %if.end22
  ret void, !dbg !7865
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @input_identifier(%struct.data_in* %data_in, %struct.lto_input_block* %ib) #0 !dbg !7866 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %len = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %is_null = alloca i32, align 4
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !7867, metadata !DIExpression()), !dbg !7868
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !7869, metadata !DIExpression()), !dbg !7870
  call void @llvm.dbg.declare(metadata i32* %len, metadata !7871, metadata !DIExpression()), !dbg !7872
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !7873, metadata !DIExpression()), !dbg !7874
  call void @llvm.dbg.declare(metadata i32* %is_null, metadata !7875, metadata !DIExpression()), !dbg !7876
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7877
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !7878
  %conv = trunc i64 %call to i32, !dbg !7878
  store i32 %conv, i32* %is_null, align 4, !dbg !7879
  %1 = load i32, i32* %is_null, align 4, !dbg !7880
  %tobool = icmp ne i32 %1, 0, !dbg !7880
  br i1 %tobool, label %if.then, label %if.end, !dbg !7882

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7883
  br label %return, !dbg !7883

if.end:                                           ; preds = %entry
  %2 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !7884
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !7885
  %call1 = call i8* @input_string_internal(%struct.data_in* %2, %struct.lto_input_block* %3, i32* %len), !dbg !7886
  store i8* %call1, i8** %ptr, align 8, !dbg !7887
  %4 = load i8*, i8** %ptr, align 8, !dbg !7888
  %5 = load i32, i32* %len, align 4, !dbg !7889
  %conv2 = zext i32 %5 to i64, !dbg !7889
  %call3 = call %union.tree_node* @get_identifier_with_length(i8* %4, i64 %conv2), !dbg !7890
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !7891
  br label %return, !dbg !7891

return:                                           ; preds = %if.end, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7892
  ret %union.tree_node* %6, !dbg !7892
}

declare dso_local %union.tree_node* @make_tree_vec_stat(i32) #2

declare dso_local %union.tree_node* @make_tree_binfo_stat(i32) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !7893 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !7896, metadata !DIExpression()), !dbg !7897
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7898, metadata !DIExpression()), !dbg !7899
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7900, metadata !DIExpression()), !dbg !7901
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7902
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7902
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7902
  %bf.load = load i64, i64* %1, align 8, !dbg !7902
  %bf.clear = and i64 %bf.load, 65535, !dbg !7902
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7902
  store i32 %bf.cast, i32* %code, align 4, !dbg !7903
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7904
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7905
  call void @unpack_ts_base_value_fields(%struct.bitpack_d* %2, %union.tree_node* %3), !dbg !7906
  %4 = load i32, i32* %code, align 4, !dbg !7907
  %idxprom = zext i32 %4 to i64, !dbg !7907
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !7907
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 3, !dbg !7907
  %5 = load i8, i8* %arrayidx1, align 1, !dbg !7907
  %tobool = icmp ne i8 %5, 0, !dbg !7907
  br i1 %tobool, label %if.then, label %if.end, !dbg !7909

if.then:                                          ; preds = %entry
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7910
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7911
  call void @unpack_ts_real_cst_value_fields(%struct.bitpack_d* %6, %union.tree_node* %7), !dbg !7912
  br label %if.end, !dbg !7912

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %code, align 4, !dbg !7913
  %idxprom2 = zext i32 %8 to i64, !dbg !7913
  %arrayidx3 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom2, !dbg !7913
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx3, i64 0, i64 4, !dbg !7913
  %9 = load i8, i8* %arrayidx4, align 4, !dbg !7913
  %tobool5 = icmp ne i8 %9, 0, !dbg !7913
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !7915

if.then6:                                         ; preds = %if.end
  %10 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7916
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7917
  call void @unpack_ts_fixed_cst_value_fields(%struct.bitpack_d* %10, %union.tree_node* %11), !dbg !7918
  br label %if.end7, !dbg !7918

if.end7:                                          ; preds = %if.then6, %if.end
  %12 = load i32, i32* %code, align 4, !dbg !7919
  %idxprom8 = zext i32 %12 to i64, !dbg !7919
  %arrayidx9 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom8, !dbg !7919
  %arrayidx10 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx9, i64 0, i64 10, !dbg !7919
  %13 = load i8, i8* %arrayidx10, align 2, !dbg !7919
  %tobool11 = icmp ne i8 %13, 0, !dbg !7919
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !7921

if.then12:                                        ; preds = %if.end7
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7922
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7923
  call void @unpack_ts_decl_common_value_fields(%struct.bitpack_d* %14, %union.tree_node* %15), !dbg !7924
  br label %if.end13, !dbg !7924

if.end13:                                         ; preds = %if.then12, %if.end7
  %16 = load i32, i32* %code, align 4, !dbg !7925
  %idxprom14 = zext i32 %16 to i64, !dbg !7925
  %arrayidx15 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom14, !dbg !7925
  %arrayidx16 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx15, i64 0, i64 11, !dbg !7925
  %17 = load i8, i8* %arrayidx16, align 1, !dbg !7925
  %tobool17 = icmp ne i8 %17, 0, !dbg !7925
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !7927

if.then18:                                        ; preds = %if.end13
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7928
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7929
  call void @unpack_ts_decl_wrtl_value_fields(%struct.bitpack_d* %18, %union.tree_node* %19), !dbg !7930
  br label %if.end19, !dbg !7930

if.end19:                                         ; preds = %if.then18, %if.end13
  %20 = load i32, i32* %code, align 4, !dbg !7931
  %idxprom20 = zext i32 %20 to i64, !dbg !7931
  %arrayidx21 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom20, !dbg !7931
  %arrayidx22 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx21, i64 0, i64 13, !dbg !7931
  %21 = load i8, i8* %arrayidx22, align 1, !dbg !7931
  %tobool23 = icmp ne i8 %21, 0, !dbg !7931
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !7933

if.then24:                                        ; preds = %if.end19
  %22 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7934
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7935
  call void @unpack_ts_decl_with_vis_value_fields(%struct.bitpack_d* %22, %union.tree_node* %23), !dbg !7936
  br label %if.end25, !dbg !7936

if.end25:                                         ; preds = %if.then24, %if.end19
  %24 = load i32, i32* %code, align 4, !dbg !7937
  %idxprom26 = zext i32 %24 to i64, !dbg !7937
  %arrayidx27 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom26, !dbg !7937
  %arrayidx28 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx27, i64 0, i64 21, !dbg !7937
  %25 = load i8, i8* %arrayidx28, align 1, !dbg !7937
  %tobool29 = icmp ne i8 %25, 0, !dbg !7937
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !7939

if.then30:                                        ; preds = %if.end25
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7940
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7941
  call void @unpack_ts_function_decl_value_fields(%struct.bitpack_d* %26, %union.tree_node* %27), !dbg !7942
  br label %if.end31, !dbg !7942

if.end31:                                         ; preds = %if.then30, %if.end25
  %28 = load i32, i32* %code, align 4, !dbg !7943
  %idxprom32 = zext i32 %28 to i64, !dbg !7943
  %arrayidx33 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom32, !dbg !7943
  %arrayidx34 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx33, i64 0, i64 22, !dbg !7943
  %29 = load i8, i8* %arrayidx34, align 2, !dbg !7943
  %tobool35 = icmp ne i8 %29, 0, !dbg !7943
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !7945

if.then36:                                        ; preds = %if.end31
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7946
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7947
  call void @unpack_ts_type_value_fields(%struct.bitpack_d* %30, %union.tree_node* %31), !dbg !7948
  br label %if.end37, !dbg !7948

if.end37:                                         ; preds = %if.then36, %if.end31
  %32 = load i32, i32* %code, align 4, !dbg !7949
  %idxprom38 = zext i32 %32 to i64, !dbg !7949
  %arrayidx39 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom38, !dbg !7949
  %arrayidx40 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx39, i64 0, i64 27, !dbg !7949
  %33 = load i8, i8* %arrayidx40, align 1, !dbg !7949
  %tobool41 = icmp ne i8 %33, 0, !dbg !7949
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !7951

if.then42:                                        ; preds = %if.end37
  %34 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7952
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7953
  call void @unpack_ts_block_value_fields(%struct.bitpack_d* %34, %union.tree_node* %35), !dbg !7954
  br label %if.end43, !dbg !7954

if.end43:                                         ; preds = %if.then42, %if.end37
  %36 = load i32, i32* %code, align 4, !dbg !7955
  %idxprom44 = zext i32 %36 to i64, !dbg !7955
  %arrayidx45 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom44, !dbg !7955
  %arrayidx46 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx45, i64 0, i64 26, !dbg !7955
  %37 = load i8, i8* %arrayidx46, align 2, !dbg !7955
  %tobool47 = icmp ne i8 %37, 0, !dbg !7955
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !7957

if.then48:                                        ; preds = %if.end43
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1836, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7958
  br label %if.end49, !dbg !7960

if.end49:                                         ; preds = %if.then48, %if.end43
  %38 = load i32, i32* %code, align 4, !dbg !7961
  %idxprom50 = zext i32 %38 to i64, !dbg !7961
  %arrayidx51 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom50, !dbg !7961
  %arrayidx52 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx51, i64 0, i64 29, !dbg !7961
  %39 = load i8, i8* %arrayidx52, align 1, !dbg !7961
  %tobool53 = icmp ne i8 %39, 0, !dbg !7961
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !7963

if.then54:                                        ; preds = %if.end49
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1842, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7964
  br label %if.end55, !dbg !7966

if.end55:                                         ; preds = %if.then54, %if.end49
  %40 = load i32, i32* %code, align 4, !dbg !7967
  %idxprom56 = zext i32 %40 to i64, !dbg !7967
  %arrayidx57 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom56, !dbg !7967
  %arrayidx58 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx57, i64 0, i64 31, !dbg !7967
  %41 = load i8, i8* %arrayidx58, align 1, !dbg !7967
  %tobool59 = icmp ne i8 %41, 0, !dbg !7967
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !7969

if.then60:                                        ; preds = %if.end55
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 1848, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7970
  br label %if.end61, !dbg !7972

if.end61:                                         ; preds = %if.then60, %if.end55
  ret void, !dbg !7973
}

declare dso_local %union.tree_node* @get_identifier_with_length(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_base_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !7974 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !7975, metadata !DIExpression()), !dbg !7976
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7977, metadata !DIExpression()), !dbg !7978
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7979
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7979
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7979
  %bf.load = load i64, i64* %1, align 8, !dbg !7979
  %bf.clear = and i64 %bf.load, 65535, !dbg !7979
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7979
  %idxprom = sext i32 %bf.cast to i64, !dbg !7979
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7979
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7979
  %cmp = icmp eq i32 %2, 2, !dbg !7979
  br i1 %cmp, label %if.end, label %if.then, !dbg !7981

if.then:                                          ; preds = %entry
  %3 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7982
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %3, i32 1), !dbg !7984
  %conv = trunc i64 %call to i32, !dbg !7985
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7986
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7986
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7986
  %6 = zext i32 %conv to i64, !dbg !7987
  %bf.load2 = load i64, i64* %5, align 8, !dbg !7987
  %bf.value = and i64 %6, 1, !dbg !7987
  %bf.shl = shl i64 %bf.value, 16, !dbg !7987
  %bf.clear3 = and i64 %bf.load2, -65537, !dbg !7987
  %bf.set = or i64 %bf.clear3, %bf.shl, !dbg !7987
  store i64 %bf.set, i64* %5, align 8, !dbg !7987
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7987
  %7 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7988
  %call4 = call i64 @bp_unpack_value(%struct.bitpack_d* %7, i32 1), !dbg !7989
  %conv5 = trunc i64 %call4 to i32, !dbg !7990
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7991
  %base6 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7991
  %9 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7991
  %10 = zext i32 %conv5 to i64, !dbg !7992
  %bf.load7 = load i64, i64* %9, align 8, !dbg !7992
  %bf.value8 = and i64 %10, 1, !dbg !7992
  %bf.shl9 = shl i64 %bf.value8, 17, !dbg !7992
  %bf.clear10 = and i64 %bf.load7, -131073, !dbg !7992
  %bf.set11 = or i64 %bf.clear10, %bf.shl9, !dbg !7992
  store i64 %bf.set11, i64* %9, align 8, !dbg !7992
  %bf.result.cast12 = trunc i64 %bf.value8 to i32, !dbg !7992
  %11 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7993
  %call13 = call i64 @bp_unpack_value(%struct.bitpack_d* %11, i32 1), !dbg !7994
  %conv14 = trunc i64 %call13 to i32, !dbg !7995
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7996
  %base15 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7996
  %13 = bitcast %struct.tree_base* %base15 to i64*, !dbg !7996
  %14 = zext i32 %conv14 to i64, !dbg !7997
  %bf.load16 = load i64, i64* %13, align 8, !dbg !7997
  %bf.value17 = and i64 %14, 1, !dbg !7997
  %bf.shl18 = shl i64 %bf.value17, 20, !dbg !7997
  %bf.clear19 = and i64 %bf.load16, -1048577, !dbg !7997
  %bf.set20 = or i64 %bf.clear19, %bf.shl18, !dbg !7997
  store i64 %bf.set20, i64* %13, align 8, !dbg !7997
  %bf.result.cast21 = trunc i64 %bf.value17 to i32, !dbg !7997
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !7998
  %call22 = call i64 @bp_unpack_value(%struct.bitpack_d* %15, i32 1), !dbg !7999
  %conv23 = trunc i64 %call22 to i32, !dbg !8000
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8001
  %base24 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !8001
  %17 = bitcast %struct.tree_base* %base24 to i64*, !dbg !8001
  %18 = zext i32 %conv23 to i64, !dbg !8002
  %bf.load25 = load i64, i64* %17, align 8, !dbg !8002
  %bf.value26 = and i64 %18, 1, !dbg !8002
  %bf.shl27 = shl i64 %bf.value26, 27, !dbg !8002
  %bf.clear28 = and i64 %bf.load25, -134217729, !dbg !8002
  %bf.set29 = or i64 %bf.clear28, %bf.shl27, !dbg !8002
  store i64 %bf.set29, i64* %17, align 8, !dbg !8002
  %bf.result.cast30 = trunc i64 %bf.value26 to i32, !dbg !8002
  br label %if.end, !dbg !8003

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8004
  %call31 = call i64 @bp_unpack_value(%struct.bitpack_d* %19, i32 1), !dbg !8005
  %conv32 = trunc i64 %call31 to i32, !dbg !8006
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8007
  %base33 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !8007
  %21 = bitcast %struct.tree_base* %base33 to i64*, !dbg !8007
  %22 = zext i32 %conv32 to i64, !dbg !8008
  %bf.load34 = load i64, i64* %21, align 8, !dbg !8008
  %bf.value35 = and i64 %22, 1, !dbg !8008
  %bf.shl36 = shl i64 %bf.value35, 18, !dbg !8008
  %bf.clear37 = and i64 %bf.load34, -262145, !dbg !8008
  %bf.set38 = or i64 %bf.clear37, %bf.shl36, !dbg !8008
  store i64 %bf.set38, i64* %21, align 8, !dbg !8008
  %bf.result.cast39 = trunc i64 %bf.value35 to i32, !dbg !8008
  %23 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8009
  %call40 = call i64 @bp_unpack_value(%struct.bitpack_d* %23, i32 1), !dbg !8010
  %conv41 = trunc i64 %call40 to i32, !dbg !8011
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8012
  %base42 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8012
  %25 = bitcast %struct.tree_base* %base42 to i64*, !dbg !8012
  %26 = zext i32 %conv41 to i64, !dbg !8013
  %bf.load43 = load i64, i64* %25, align 8, !dbg !8013
  %bf.value44 = and i64 %26, 1, !dbg !8013
  %bf.shl45 = shl i64 %bf.value44, 19, !dbg !8013
  %bf.clear46 = and i64 %bf.load43, -524289, !dbg !8013
  %bf.set47 = or i64 %bf.clear46, %bf.shl45, !dbg !8013
  store i64 %bf.set47, i64* %25, align 8, !dbg !8013
  %bf.result.cast48 = trunc i64 %bf.value44 to i32, !dbg !8013
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8014
  %base49 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !8014
  %28 = bitcast %struct.tree_base* %base49 to i64*, !dbg !8014
  %bf.load50 = load i64, i64* %28, align 8, !dbg !8014
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !8014
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !8014
  %idxprom53 = sext i32 %bf.cast52 to i64, !dbg !8014
  %arrayidx54 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom53, !dbg !8014
  %29 = load i32, i32* %arrayidx54, align 4, !dbg !8014
  %cmp55 = icmp eq i32 %29, 3, !dbg !8014
  br i1 %cmp55, label %if.then57, label %if.else, !dbg !8016

if.then57:                                        ; preds = %if.end
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8017
  %call58 = call i64 @bp_unpack_value(%struct.bitpack_d* %30, i32 1), !dbg !8018
  %conv59 = trunc i64 %call58 to i32, !dbg !8019
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8020
  %base60 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !8020
  %32 = bitcast %struct.tree_base* %base60 to i64*, !dbg !8020
  %33 = zext i32 %conv59 to i64, !dbg !8021
  %bf.load61 = load i64, i64* %32, align 8, !dbg !8021
  %bf.value62 = and i64 %33, 1, !dbg !8021
  %bf.shl63 = shl i64 %bf.value62, 21, !dbg !8021
  %bf.clear64 = and i64 %bf.load61, -2097153, !dbg !8021
  %bf.set65 = or i64 %bf.clear64, %bf.shl63, !dbg !8021
  store i64 %bf.set65, i64* %32, align 8, !dbg !8021
  %bf.result.cast66 = trunc i64 %bf.value62 to i32, !dbg !8021
  br label %if.end86, !dbg !8020

if.else:                                          ; preds = %if.end
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8022
  %base67 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !8022
  %35 = bitcast %struct.tree_base* %base67 to i64*, !dbg !8022
  %bf.load68 = load i64, i64* %35, align 8, !dbg !8022
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !8022
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !8022
  %idxprom71 = sext i32 %bf.cast70 to i64, !dbg !8022
  %arrayidx72 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom71, !dbg !8022
  %36 = load i32, i32* %arrayidx72, align 4, !dbg !8022
  %cmp73 = icmp eq i32 %36, 2, !dbg !8022
  br i1 %cmp73, label %if.then75, label %if.end85, !dbg !8024

if.then75:                                        ; preds = %if.else
  %37 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8025
  %call76 = call i64 @bp_unpack_value(%struct.bitpack_d* %37, i32 1), !dbg !8026
  %conv77 = trunc i64 %call76 to i32, !dbg !8027
  %38 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8028
  %base78 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !8028
  %39 = bitcast %struct.tree_base* %base78 to i64*, !dbg !8028
  %40 = zext i32 %conv77 to i64, !dbg !8029
  %bf.load79 = load i64, i64* %39, align 8, !dbg !8029
  %bf.value80 = and i64 %40, 1, !dbg !8029
  %bf.shl81 = shl i64 %bf.value80, 21, !dbg !8029
  %bf.clear82 = and i64 %bf.load79, -2097153, !dbg !8029
  %bf.set83 = or i64 %bf.clear82, %bf.shl81, !dbg !8029
  store i64 %bf.set83, i64* %39, align 8, !dbg !8029
  %bf.result.cast84 = trunc i64 %bf.value80 to i32, !dbg !8029
  br label %if.end85, !dbg !8028

if.end85:                                         ; preds = %if.then75, %if.else
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then57
  %41 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8030
  %call87 = call i64 @bp_unpack_value(%struct.bitpack_d* %41, i32 1), !dbg !8031
  %conv88 = trunc i64 %call87 to i32, !dbg !8032
  %42 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8033
  %base89 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !8033
  %43 = bitcast %struct.tree_base* %base89 to i64*, !dbg !8033
  %44 = zext i32 %conv88 to i64, !dbg !8034
  %bf.load90 = load i64, i64* %43, align 8, !dbg !8034
  %bf.value91 = and i64 %44, 1, !dbg !8034
  %bf.shl92 = shl i64 %bf.value91, 22, !dbg !8034
  %bf.clear93 = and i64 %bf.load90, -4194305, !dbg !8034
  %bf.set94 = or i64 %bf.clear93, %bf.shl92, !dbg !8034
  store i64 %bf.set94, i64* %43, align 8, !dbg !8034
  %bf.result.cast95 = trunc i64 %bf.value91 to i32, !dbg !8034
  %45 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8035
  %call96 = call i64 @bp_unpack_value(%struct.bitpack_d* %45, i32 1), !dbg !8036
  %conv97 = trunc i64 %call96 to i32, !dbg !8037
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8038
  %base98 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !8038
  %47 = bitcast %struct.tree_base* %base98 to i64*, !dbg !8038
  %48 = zext i32 %conv97 to i64, !dbg !8039
  %bf.load99 = load i64, i64* %47, align 8, !dbg !8039
  %bf.value100 = and i64 %48, 1, !dbg !8039
  %bf.shl101 = shl i64 %bf.value100, 23, !dbg !8039
  %bf.clear102 = and i64 %bf.load99, -8388609, !dbg !8039
  %bf.set103 = or i64 %bf.clear102, %bf.shl101, !dbg !8039
  store i64 %bf.set103, i64* %47, align 8, !dbg !8039
  %bf.result.cast104 = trunc i64 %bf.value100 to i32, !dbg !8039
  %49 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8040
  %call105 = call i64 @bp_unpack_value(%struct.bitpack_d* %49, i32 1), !dbg !8041
  %conv106 = trunc i64 %call105 to i32, !dbg !8042
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8043
  %base107 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !8043
  %51 = bitcast %struct.tree_base* %base107 to i64*, !dbg !8043
  %52 = zext i32 %conv106 to i64, !dbg !8044
  %bf.load108 = load i64, i64* %51, align 8, !dbg !8044
  %bf.value109 = and i64 %52, 1, !dbg !8044
  %bf.shl110 = shl i64 %bf.value109, 24, !dbg !8044
  %bf.clear111 = and i64 %bf.load108, -16777217, !dbg !8044
  %bf.set112 = or i64 %bf.clear111, %bf.shl110, !dbg !8044
  store i64 %bf.set112, i64* %51, align 8, !dbg !8044
  %bf.result.cast113 = trunc i64 %bf.value109 to i32, !dbg !8044
  %53 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8045
  %call114 = call i64 @bp_unpack_value(%struct.bitpack_d* %53, i32 1), !dbg !8046
  %conv115 = trunc i64 %call114 to i32, !dbg !8047
  %54 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8048
  %base116 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !8048
  %55 = bitcast %struct.tree_base* %base116 to i64*, !dbg !8048
  %56 = zext i32 %conv115 to i64, !dbg !8049
  %bf.load117 = load i64, i64* %55, align 8, !dbg !8049
  %bf.value118 = and i64 %56, 1, !dbg !8049
  %bf.shl119 = shl i64 %bf.value118, 25, !dbg !8049
  %bf.clear120 = and i64 %bf.load117, -33554433, !dbg !8049
  %bf.set121 = or i64 %bf.clear120, %bf.shl119, !dbg !8049
  store i64 %bf.set121, i64* %55, align 8, !dbg !8049
  %bf.result.cast122 = trunc i64 %bf.value118 to i32, !dbg !8049
  %57 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8050
  %call123 = call i64 @bp_unpack_value(%struct.bitpack_d* %57, i32 1), !dbg !8051
  %conv124 = trunc i64 %call123 to i32, !dbg !8052
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8053
  %base125 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !8053
  %59 = bitcast %struct.tree_base* %base125 to i64*, !dbg !8053
  %60 = zext i32 %conv124 to i64, !dbg !8054
  %bf.load126 = load i64, i64* %59, align 8, !dbg !8054
  %bf.value127 = and i64 %60, 1, !dbg !8054
  %bf.shl128 = shl i64 %bf.value127, 26, !dbg !8054
  %bf.clear129 = and i64 %bf.load126, -67108865, !dbg !8054
  %bf.set130 = or i64 %bf.clear129, %bf.shl128, !dbg !8054
  store i64 %bf.set130, i64* %59, align 8, !dbg !8054
  %bf.result.cast131 = trunc i64 %bf.value127 to i32, !dbg !8054
  %61 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8055
  %call132 = call i64 @bp_unpack_value(%struct.bitpack_d* %61, i32 1), !dbg !8056
  %conv133 = trunc i64 %call132 to i32, !dbg !8057
  %62 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8058
  %base134 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !8058
  %63 = bitcast %struct.tree_base* %base134 to i64*, !dbg !8058
  %64 = zext i32 %conv133 to i64, !dbg !8059
  %bf.load135 = load i64, i64* %63, align 8, !dbg !8059
  %bf.value136 = and i64 %64, 1, !dbg !8059
  %bf.shl137 = shl i64 %bf.value136, 28, !dbg !8059
  %bf.clear138 = and i64 %bf.load135, -268435457, !dbg !8059
  %bf.set139 = or i64 %bf.clear138, %bf.shl137, !dbg !8059
  store i64 %bf.set139, i64* %63, align 8, !dbg !8059
  %bf.result.cast140 = trunc i64 %bf.value136 to i32, !dbg !8059
  %65 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8060
  %call141 = call i64 @bp_unpack_value(%struct.bitpack_d* %65, i32 1), !dbg !8061
  %conv142 = trunc i64 %call141 to i32, !dbg !8062
  %66 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8063
  %base143 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !8063
  %67 = bitcast %struct.tree_base* %base143 to i64*, !dbg !8063
  %68 = zext i32 %conv142 to i64, !dbg !8064
  %bf.load144 = load i64, i64* %67, align 8, !dbg !8064
  %bf.value145 = and i64 %68, 1, !dbg !8064
  %bf.shl146 = shl i64 %bf.value145, 29, !dbg !8064
  %bf.clear147 = and i64 %bf.load144, -536870913, !dbg !8064
  %bf.set148 = or i64 %bf.clear147, %bf.shl146, !dbg !8064
  store i64 %bf.set148, i64* %67, align 8, !dbg !8064
  %bf.result.cast149 = trunc i64 %bf.value145 to i32, !dbg !8064
  %69 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8065
  %call150 = call i64 @bp_unpack_value(%struct.bitpack_d* %69, i32 1), !dbg !8066
  %conv151 = trunc i64 %call150 to i32, !dbg !8067
  %70 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8068
  %base152 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !8068
  %71 = bitcast %struct.tree_base* %base152 to i64*, !dbg !8068
  %72 = zext i32 %conv151 to i64, !dbg !8069
  %bf.load153 = load i64, i64* %71, align 8, !dbg !8069
  %bf.value154 = and i64 %72, 1, !dbg !8069
  %bf.shl155 = shl i64 %bf.value154, 30, !dbg !8069
  %bf.clear156 = and i64 %bf.load153, -1073741825, !dbg !8069
  %bf.set157 = or i64 %bf.clear156, %bf.shl155, !dbg !8069
  store i64 %bf.set157, i64* %71, align 8, !dbg !8069
  %bf.result.cast158 = trunc i64 %bf.value154 to i32, !dbg !8069
  %73 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8070
  %base159 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !8070
  %74 = bitcast %struct.tree_base* %base159 to i64*, !dbg !8070
  %bf.load160 = load i64, i64* %74, align 8, !dbg !8070
  %bf.clear161 = and i64 %bf.load160, 65535, !dbg !8070
  %bf.cast162 = trunc i64 %bf.clear161 to i32, !dbg !8070
  %idxprom163 = sext i32 %bf.cast162 to i64, !dbg !8070
  %arrayidx164 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom163, !dbg !8070
  %75 = load i32, i32* %arrayidx164, align 4, !dbg !8070
  %cmp165 = icmp eq i32 %75, 2, !dbg !8070
  br i1 %cmp165, label %if.then167, label %if.end177, !dbg !8072

if.then167:                                       ; preds = %if.end86
  %76 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8073
  %call168 = call i64 @bp_unpack_value(%struct.bitpack_d* %76, i32 1), !dbg !8074
  %conv169 = trunc i64 %call168 to i32, !dbg !8075
  %77 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8076
  %base170 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !8076
  %78 = bitcast %struct.tree_base* %base170 to i64*, !dbg !8076
  %79 = zext i32 %conv169 to i64, !dbg !8077
  %bf.load171 = load i64, i64* %78, align 8, !dbg !8077
  %bf.value172 = and i64 %79, 1, !dbg !8077
  %bf.shl173 = shl i64 %bf.value172, 31, !dbg !8077
  %bf.clear174 = and i64 %bf.load171, -2147483649, !dbg !8077
  %bf.set175 = or i64 %bf.clear174, %bf.shl173, !dbg !8077
  store i64 %bf.set175, i64* %78, align 8, !dbg !8077
  %bf.result.cast176 = trunc i64 %bf.value172 to i32, !dbg !8077
  br label %if.end177, !dbg !8076

if.end177:                                        ; preds = %if.then167, %if.end86
  %80 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8078
  %base178 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !8078
  %81 = bitcast %struct.tree_base* %base178 to i64*, !dbg !8078
  %bf.load179 = load i64, i64* %81, align 8, !dbg !8078
  %bf.clear180 = and i64 %bf.load179, 65535, !dbg !8078
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !8078
  %cmp182 = icmp eq i32 %bf.cast181, 141, !dbg !8080
  br i1 %cmp182, label %if.then184, label %if.end194, !dbg !8081

if.then184:                                       ; preds = %if.end177
  %82 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8082
  %call185 = call i64 @bp_unpack_value(%struct.bitpack_d* %82, i32 1), !dbg !8083
  %conv186 = trunc i64 %call185 to i32, !dbg !8084
  %83 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8085
  %base187 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !8085
  %84 = bitcast %struct.tree_base* %base187 to i64*, !dbg !8085
  %85 = zext i32 %conv186 to i64, !dbg !8086
  %bf.load188 = load i64, i64* %84, align 8, !dbg !8086
  %bf.value189 = and i64 %85, 1, !dbg !8086
  %bf.shl190 = shl i64 %bf.value189, 32, !dbg !8086
  %bf.clear191 = and i64 %bf.load188, -4294967297, !dbg !8086
  %bf.set192 = or i64 %bf.clear191, %bf.shl190, !dbg !8086
  store i64 %bf.set192, i64* %84, align 8, !dbg !8086
  %bf.result.cast193 = trunc i64 %bf.value189 to i32, !dbg !8086
  br label %if.end194, !dbg !8085

if.end194:                                        ; preds = %if.then184, %if.end177
  ret void, !dbg !8087
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_real_cst_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8088 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %r = alloca %struct.real_value, align 8
  %rp = alloca %struct.real_value*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8089, metadata !DIExpression()), !dbg !8090
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8091, metadata !DIExpression()), !dbg !8092
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8093, metadata !DIExpression()), !dbg !8094
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !8095, metadata !DIExpression()), !dbg !8096
  call void @llvm.dbg.declare(metadata %struct.real_value** %rp, metadata !8097, metadata !DIExpression()), !dbg !8098
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8099
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 2), !dbg !8100
  %conv = trunc i64 %call to i32, !dbg !8101
  %1 = bitcast %struct.real_value* %r to i32*, !dbg !8102
  %bf.load = load i32, i32* %1, align 8, !dbg !8103
  %bf.value = and i32 %conv, 3, !dbg !8103
  %bf.clear = and i32 %bf.load, -4, !dbg !8103
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !8103
  store i32 %bf.set, i32* %1, align 8, !dbg !8103
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8104
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %2, i32 1), !dbg !8105
  %conv2 = trunc i64 %call1 to i32, !dbg !8106
  %3 = bitcast %struct.real_value* %r to i32*, !dbg !8107
  %bf.load3 = load i32, i32* %3, align 8, !dbg !8108
  %bf.value4 = and i32 %conv2, 1, !dbg !8108
  %bf.shl = shl i32 %bf.value4, 2, !dbg !8108
  %bf.clear5 = and i32 %bf.load3, -5, !dbg !8108
  %bf.set6 = or i32 %bf.clear5, %bf.shl, !dbg !8108
  store i32 %bf.set6, i32* %3, align 8, !dbg !8108
  %4 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8109
  %call7 = call i64 @bp_unpack_value(%struct.bitpack_d* %4, i32 1), !dbg !8110
  %conv8 = trunc i64 %call7 to i32, !dbg !8111
  %5 = bitcast %struct.real_value* %r to i32*, !dbg !8112
  %bf.load9 = load i32, i32* %5, align 8, !dbg !8113
  %bf.value10 = and i32 %conv8, 1, !dbg !8113
  %bf.shl11 = shl i32 %bf.value10, 3, !dbg !8113
  %bf.clear12 = and i32 %bf.load9, -9, !dbg !8113
  %bf.set13 = or i32 %bf.clear12, %bf.shl11, !dbg !8113
  store i32 %bf.set13, i32* %5, align 8, !dbg !8113
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8114
  %call14 = call i64 @bp_unpack_value(%struct.bitpack_d* %6, i32 1), !dbg !8115
  %conv15 = trunc i64 %call14 to i32, !dbg !8116
  %7 = bitcast %struct.real_value* %r to i32*, !dbg !8117
  %bf.load16 = load i32, i32* %7, align 8, !dbg !8118
  %bf.value17 = and i32 %conv15, 1, !dbg !8118
  %bf.shl18 = shl i32 %bf.value17, 4, !dbg !8118
  %bf.clear19 = and i32 %bf.load16, -17, !dbg !8118
  %bf.set20 = or i32 %bf.clear19, %bf.shl18, !dbg !8118
  store i32 %bf.set20, i32* %7, align 8, !dbg !8118
  %8 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8119
  %call21 = call i64 @bp_unpack_value(%struct.bitpack_d* %8, i32 1), !dbg !8120
  %conv22 = trunc i64 %call21 to i32, !dbg !8121
  %9 = bitcast %struct.real_value* %r to i32*, !dbg !8122
  %bf.load23 = load i32, i32* %9, align 8, !dbg !8123
  %bf.value24 = and i32 %conv22, 1, !dbg !8123
  %bf.shl25 = shl i32 %bf.value24, 5, !dbg !8123
  %bf.clear26 = and i32 %bf.load23, -33, !dbg !8123
  %bf.set27 = or i32 %bf.clear26, %bf.shl25, !dbg !8123
  store i32 %bf.set27, i32* %9, align 8, !dbg !8123
  %10 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8124
  %call28 = call i64 @bp_unpack_value(%struct.bitpack_d* %10, i32 26), !dbg !8125
  %conv29 = trunc i64 %call28 to i32, !dbg !8126
  %11 = bitcast %struct.real_value* %r to i32*, !dbg !8127
  %bf.load30 = load i32, i32* %11, align 8, !dbg !8128
  %bf.value31 = and i32 %conv29, 67108863, !dbg !8128
  %bf.shl32 = shl i32 %bf.value31, 6, !dbg !8128
  %bf.clear33 = and i32 %bf.load30, 63, !dbg !8128
  %bf.set34 = or i32 %bf.clear33, %bf.shl32, !dbg !8128
  store i32 %bf.set34, i32* %11, align 8, !dbg !8128
  store i32 0, i32* %i, align 4, !dbg !8129
  br label %for.cond, !dbg !8131

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %i, align 4, !dbg !8132
  %cmp = icmp ult i32 %12, 3, !dbg !8134
  br i1 %cmp, label %for.body, label %for.end, !dbg !8135

for.body:                                         ; preds = %for.cond
  %13 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8136
  %call36 = call i64 @bp_unpack_value(%struct.bitpack_d* %13, i32 64), !dbg !8137
  %sig = getelementptr inbounds %struct.real_value, %struct.real_value* %r, i32 0, i32 1, !dbg !8138
  %14 = load i32, i32* %i, align 4, !dbg !8139
  %idxprom = zext i32 %14 to i64, !dbg !8140
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %sig, i64 0, i64 %idxprom, !dbg !8140
  store i64 %call36, i64* %arrayidx, align 8, !dbg !8141
  br label %for.inc, !dbg !8140

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !8142
  %inc = add i32 %15, 1, !dbg !8142
  store i32 %inc, i32* %i, align 4, !dbg !8142
  br label %for.cond, !dbg !8143, !llvm.loop !8144

for.end:                                          ; preds = %for.cond
  %call37 = call i8* @ggc_alloc_stat(i64 32), !dbg !8146
  %16 = bitcast i8* %call37 to %struct.real_value*, !dbg !8146
  store %struct.real_value* %16, %struct.real_value** %rp, align 8, !dbg !8147
  %17 = load %struct.real_value*, %struct.real_value** %rp, align 8, !dbg !8148
  %18 = bitcast %struct.real_value* %17 to i8*, !dbg !8149
  %19 = bitcast %struct.real_value* %r to i8*, !dbg !8149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false), !dbg !8149
  %20 = load %struct.real_value*, %struct.real_value** %rp, align 8, !dbg !8150
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8151
  %real_cst = bitcast %union.tree_node* %21 to %struct.tree_real_cst*, !dbg !8151
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !8151
  store %struct.real_value* %20, %struct.real_value** %real_cst_ptr, align 8, !dbg !8152
  ret void, !dbg !8153
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_fixed_cst_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8154 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %fv = alloca %struct.fixed_value, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8155, metadata !DIExpression()), !dbg !8156
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8157, metadata !DIExpression()), !dbg !8158
  call void @llvm.dbg.declare(metadata %struct.fixed_value* %fv, metadata !8159, metadata !DIExpression()), !dbg !8160
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8161
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 64), !dbg !8162
  %data = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %fv, i32 0, i32 0, !dbg !8163
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %data, i32 0, i32 0, !dbg !8164
  store i64 %call, i64* %low, align 8, !dbg !8165
  %1 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8166
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %1, i32 64), !dbg !8167
  %data2 = getelementptr inbounds %struct.fixed_value, %struct.fixed_value* %fv, i32 0, i32 0, !dbg !8168
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %data2, i32 0, i32 1, !dbg !8169
  store i64 %call1, i64* %high, align 8, !dbg !8170
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8171
  %fixed_cst = bitcast %union.tree_node* %2 to %struct.tree_fixed_cst*, !dbg !8171
  %fixed_cst_ptr = getelementptr inbounds %struct.tree_fixed_cst, %struct.tree_fixed_cst* %fixed_cst, i32 0, i32 1, !dbg !8171
  %3 = load %struct.fixed_value*, %struct.fixed_value** %fixed_cst_ptr, align 8, !dbg !8171
  %4 = bitcast %struct.fixed_value* %3 to i8*, !dbg !8172
  %5 = bitcast %struct.fixed_value* %fv to i8*, !dbg !8172
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !8172
  ret void, !dbg !8173
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_decl_common_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8174 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %off_align = alloca i64, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8175, metadata !DIExpression()), !dbg !8176
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8177, metadata !DIExpression()), !dbg !8178
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8179
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 8), !dbg !8180
  %conv = trunc i64 %call to i32, !dbg !8181
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8182
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !8182
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8182
  %2 = bitcast i40* %mode to i64*, !dbg !8182
  %3 = zext i32 %conv to i64, !dbg !8183
  %bf.load = load i64, i64* %2, align 8, !dbg !8183
  %bf.value = and i64 %3, 255, !dbg !8183
  %bf.clear = and i64 %bf.load, -256, !dbg !8183
  %bf.set = or i64 %bf.clear, %bf.value, !dbg !8183
  store i64 %bf.set, i64* %2, align 8, !dbg !8183
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !8183
  %4 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8184
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %4, i32 1), !dbg !8185
  %conv2 = trunc i64 %call1 to i32, !dbg !8186
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8187
  %decl_common3 = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !8187
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common3, i32 0, i32 2, !dbg !8187
  %6 = bitcast i40* %nonlocal_flag to i64*, !dbg !8187
  %7 = zext i32 %conv2 to i64, !dbg !8188
  %bf.load4 = load i64, i64* %6, align 8, !dbg !8188
  %bf.value5 = and i64 %7, 1, !dbg !8188
  %bf.shl = shl i64 %bf.value5, 8, !dbg !8188
  %bf.clear6 = and i64 %bf.load4, -257, !dbg !8188
  %bf.set7 = or i64 %bf.clear6, %bf.shl, !dbg !8188
  store i64 %bf.set7, i64* %6, align 8, !dbg !8188
  %bf.result.cast8 = trunc i64 %bf.value5 to i32, !dbg !8188
  %8 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8189
  %call9 = call i64 @bp_unpack_value(%struct.bitpack_d* %8, i32 1), !dbg !8190
  %conv10 = trunc i64 %call9 to i32, !dbg !8191
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8192
  %decl_common11 = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !8192
  %virtual_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common11, i32 0, i32 2, !dbg !8192
  %10 = bitcast i40* %virtual_flag to i64*, !dbg !8192
  %11 = zext i32 %conv10 to i64, !dbg !8193
  %bf.load12 = load i64, i64* %10, align 8, !dbg !8193
  %bf.value13 = and i64 %11, 1, !dbg !8193
  %bf.shl14 = shl i64 %bf.value13, 9, !dbg !8193
  %bf.clear15 = and i64 %bf.load12, -513, !dbg !8193
  %bf.set16 = or i64 %bf.clear15, %bf.shl14, !dbg !8193
  store i64 %bf.set16, i64* %10, align 8, !dbg !8193
  %bf.result.cast17 = trunc i64 %bf.value13 to i32, !dbg !8193
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8194
  %call18 = call i64 @bp_unpack_value(%struct.bitpack_d* %12, i32 1), !dbg !8195
  %conv19 = trunc i64 %call18 to i32, !dbg !8196
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8197
  %decl_common20 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !8197
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 2, !dbg !8197
  %14 = bitcast i40* %ignored_flag to i64*, !dbg !8197
  %15 = zext i32 %conv19 to i64, !dbg !8198
  %bf.load21 = load i64, i64* %14, align 8, !dbg !8198
  %bf.value22 = and i64 %15, 1, !dbg !8198
  %bf.shl23 = shl i64 %bf.value22, 10, !dbg !8198
  %bf.clear24 = and i64 %bf.load21, -1025, !dbg !8198
  %bf.set25 = or i64 %bf.clear24, %bf.shl23, !dbg !8198
  store i64 %bf.set25, i64* %14, align 8, !dbg !8198
  %bf.result.cast26 = trunc i64 %bf.value22 to i32, !dbg !8198
  %16 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8199
  %call27 = call i64 @bp_unpack_value(%struct.bitpack_d* %16, i32 1), !dbg !8200
  %conv28 = trunc i64 %call27 to i32, !dbg !8201
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8202
  %decl_common29 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !8202
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common29, i32 0, i32 2, !dbg !8202
  %18 = bitcast i40* %abstract_flag to i64*, !dbg !8202
  %19 = zext i32 %conv28 to i64, !dbg !8203
  %bf.load30 = load i64, i64* %18, align 8, !dbg !8203
  %bf.value31 = and i64 %19, 1, !dbg !8203
  %bf.shl32 = shl i64 %bf.value31, 11, !dbg !8203
  %bf.clear33 = and i64 %bf.load30, -2049, !dbg !8203
  %bf.set34 = or i64 %bf.clear33, %bf.shl32, !dbg !8203
  store i64 %bf.set34, i64* %18, align 8, !dbg !8203
  %bf.result.cast35 = trunc i64 %bf.value31 to i32, !dbg !8203
  %20 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8204
  %call36 = call i64 @bp_unpack_value(%struct.bitpack_d* %20, i32 1), !dbg !8205
  %conv37 = trunc i64 %call36 to i32, !dbg !8206
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8207
  %decl_common38 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !8207
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common38, i32 0, i32 2, !dbg !8207
  %22 = bitcast i40* %artificial_flag to i64*, !dbg !8207
  %23 = zext i32 %conv37 to i64, !dbg !8208
  %bf.load39 = load i64, i64* %22, align 8, !dbg !8208
  %bf.value40 = and i64 %23, 1, !dbg !8208
  %bf.shl41 = shl i64 %bf.value40, 12, !dbg !8208
  %bf.clear42 = and i64 %bf.load39, -4097, !dbg !8208
  %bf.set43 = or i64 %bf.clear42, %bf.shl41, !dbg !8208
  store i64 %bf.set43, i64* %22, align 8, !dbg !8208
  %bf.result.cast44 = trunc i64 %bf.value40 to i32, !dbg !8208
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8209
  %call45 = call i64 @bp_unpack_value(%struct.bitpack_d* %24, i32 1), !dbg !8210
  %conv46 = trunc i64 %call45 to i32, !dbg !8211
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8212
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !8212
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !8212
  %26 = bitcast %struct.tree_base* %base to i64*, !dbg !8212
  %27 = zext i32 %conv46 to i64, !dbg !8213
  %bf.load47 = load i64, i64* %26, align 8, !dbg !8213
  %bf.value48 = and i64 %27, 1, !dbg !8213
  %bf.shl49 = shl i64 %bf.value48, 42, !dbg !8213
  %bf.clear50 = and i64 %bf.load47, -4398046511105, !dbg !8213
  %bf.set51 = or i64 %bf.clear50, %bf.shl49, !dbg !8213
  store i64 %bf.set51, i64* %26, align 8, !dbg !8213
  %bf.result.cast52 = trunc i64 %bf.value48 to i32, !dbg !8213
  %28 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8214
  %call53 = call i64 @bp_unpack_value(%struct.bitpack_d* %28, i32 1), !dbg !8215
  %conv54 = trunc i64 %call53 to i32, !dbg !8216
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8217
  %decl_common55 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !8217
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common55, i32 0, i32 2, !dbg !8217
  %30 = bitcast i40* %preserve_flag to i64*, !dbg !8217
  %31 = zext i32 %conv54 to i64, !dbg !8218
  %bf.load56 = load i64, i64* %30, align 8, !dbg !8218
  %bf.value57 = and i64 %31, 1, !dbg !8218
  %bf.shl58 = shl i64 %bf.value57, 13, !dbg !8218
  %bf.clear59 = and i64 %bf.load56, -8193, !dbg !8218
  %bf.set60 = or i64 %bf.clear59, %bf.shl58, !dbg !8218
  store i64 %bf.set60, i64* %30, align 8, !dbg !8218
  %bf.result.cast61 = trunc i64 %bf.value57 to i32, !dbg !8218
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8219
  %call62 = call i64 @bp_unpack_value(%struct.bitpack_d* %32, i32 1), !dbg !8220
  %conv63 = trunc i64 %call62 to i32, !dbg !8221
  %33 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8222
  %decl_common64 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !8222
  %debug_expr_is_from = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common64, i32 0, i32 2, !dbg !8222
  %34 = bitcast i40* %debug_expr_is_from to i64*, !dbg !8222
  %35 = zext i32 %conv63 to i64, !dbg !8223
  %bf.load65 = load i64, i64* %34, align 8, !dbg !8223
  %bf.value66 = and i64 %35, 1, !dbg !8223
  %bf.shl67 = shl i64 %bf.value66, 14, !dbg !8223
  %bf.clear68 = and i64 %bf.load65, -16385, !dbg !8223
  %bf.set69 = or i64 %bf.clear68, %bf.shl67, !dbg !8223
  store i64 %bf.set69, i64* %34, align 8, !dbg !8223
  %bf.result.cast70 = trunc i64 %bf.value66 to i32, !dbg !8223
  %36 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8224
  %call71 = call i64 @bp_unpack_value(%struct.bitpack_d* %36, i32 1), !dbg !8225
  %conv72 = trunc i64 %call71 to i32, !dbg !8226
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8227
  %decl_common73 = bitcast %union.tree_node* %37 to %struct.tree_decl_common*, !dbg !8227
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common73, i32 0, i32 2, !dbg !8227
  %38 = bitcast i40* %decl_flag_1 to i64*, !dbg !8227
  %39 = zext i32 %conv72 to i64, !dbg !8228
  %bf.load74 = load i64, i64* %38, align 8, !dbg !8228
  %bf.value75 = and i64 %39, 1, !dbg !8228
  %bf.shl76 = shl i64 %bf.value75, 25, !dbg !8228
  %bf.clear77 = and i64 %bf.load74, -33554433, !dbg !8228
  %bf.set78 = or i64 %bf.clear77, %bf.shl76, !dbg !8228
  store i64 %bf.set78, i64* %38, align 8, !dbg !8228
  %bf.result.cast79 = trunc i64 %bf.value75 to i32, !dbg !8228
  %40 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8229
  %call80 = call i64 @bp_unpack_value(%struct.bitpack_d* %40, i32 1), !dbg !8230
  %conv81 = trunc i64 %call80 to i32, !dbg !8231
  %41 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8232
  %decl_common82 = bitcast %union.tree_node* %41 to %struct.tree_decl_common*, !dbg !8232
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common82, i32 0, i32 2, !dbg !8232
  %42 = bitcast i40* %gimple_reg_flag to i64*, !dbg !8232
  %43 = zext i32 %conv81 to i64, !dbg !8233
  %bf.load83 = load i64, i64* %42, align 8, !dbg !8233
  %bf.value84 = and i64 %43, 1, !dbg !8233
  %bf.shl85 = shl i64 %bf.value84, 27, !dbg !8233
  %bf.clear86 = and i64 %bf.load83, -134217729, !dbg !8233
  %bf.set87 = or i64 %bf.clear86, %bf.shl85, !dbg !8233
  store i64 %bf.set87, i64* %42, align 8, !dbg !8233
  %bf.result.cast88 = trunc i64 %bf.value84 to i32, !dbg !8233
  %44 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8234
  %call89 = call i64 @bp_unpack_value(%struct.bitpack_d* %44, i32 32), !dbg !8235
  %conv90 = trunc i64 %call89 to i32, !dbg !8236
  %45 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8237
  %decl_common91 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !8237
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common91, i32 0, i32 3, !dbg !8237
  store i32 %conv90, i32* %align, align 8, !dbg !8238
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8239
  %base92 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !8239
  %47 = bitcast %struct.tree_base* %base92 to i64*, !dbg !8239
  %bf.load93 = load i64, i64* %47, align 8, !dbg !8239
  %bf.clear94 = and i64 %bf.load93, 65535, !dbg !8239
  %bf.cast = trunc i64 %bf.clear94 to i32, !dbg !8239
  %cmp = icmp eq i32 %bf.cast, 30, !dbg !8241
  br i1 %cmp, label %if.then, label %if.end, !dbg !8242

if.then:                                          ; preds = %entry
  %48 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8243
  %call96 = call i64 @bp_unpack_value(%struct.bitpack_d* %48, i32 1), !dbg !8245
  %conv97 = trunc i64 %call96 to i32, !dbg !8246
  %49 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8247
  %decl_common98 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !8247
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common98, i32 0, i32 2, !dbg !8247
  %50 = bitcast i40* %decl_flag_0 to i64*, !dbg !8247
  %51 = zext i32 %conv97 to i64, !dbg !8248
  %bf.load99 = load i64, i64* %50, align 8, !dbg !8248
  %bf.value100 = and i64 %51, 1, !dbg !8248
  %bf.shl101 = shl i64 %bf.value100, 24, !dbg !8248
  %bf.clear102 = and i64 %bf.load99, -16777217, !dbg !8248
  %bf.set103 = or i64 %bf.clear102, %bf.shl101, !dbg !8248
  store i64 %bf.set103, i64* %50, align 8, !dbg !8248
  %bf.result.cast104 = trunc i64 %bf.value100 to i32, !dbg !8248
  %52 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8249
  %call105 = call i64 @bp_unpack_value(%struct.bitpack_d* %52, i32 32), !dbg !8250
  %conv106 = trunc i64 %call105 to i32, !dbg !8251
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8252
  %label_decl = bitcast %union.tree_node* %53 to %struct.tree_label_decl*, !dbg !8252
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !8252
  store i32 %conv106, i32* %eh_landing_pad_nr, align 4, !dbg !8253
  %54 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8254
  %label_decl107 = bitcast %union.tree_node* %54 to %struct.tree_label_decl*, !dbg !8254
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl107, i32 0, i32 1, !dbg !8254
  store i32 -1, i32* %label_decl_uid, align 8, !dbg !8255
  br label %if.end, !dbg !8256

if.end:                                           ; preds = %if.then, %entry
  %55 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8257
  %base108 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !8257
  %56 = bitcast %struct.tree_base* %base108 to i64*, !dbg !8257
  %bf.load109 = load i64, i64* %56, align 8, !dbg !8257
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !8257
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !8257
  %cmp112 = icmp eq i32 %bf.cast111, 31, !dbg !8259
  br i1 %cmp112, label %if.then114, label %if.end144, !dbg !8260

if.then114:                                       ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %off_align, metadata !8261, metadata !DIExpression()), !dbg !8263
  %57 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8264
  %call115 = call i64 @bp_unpack_value(%struct.bitpack_d* %57, i32 1), !dbg !8265
  %conv116 = trunc i64 %call115 to i32, !dbg !8266
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8267
  %common117 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !8267
  %base118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 0, !dbg !8267
  %59 = bitcast %struct.tree_base* %base118 to i64*, !dbg !8267
  %60 = zext i32 %conv116 to i64, !dbg !8268
  %bf.load119 = load i64, i64* %59, align 8, !dbg !8268
  %bf.value120 = and i64 %60, 1, !dbg !8268
  %bf.shl121 = shl i64 %bf.value120, 41, !dbg !8268
  %bf.clear122 = and i64 %bf.load119, -2199023255553, !dbg !8268
  %bf.set123 = or i64 %bf.clear122, %bf.shl121, !dbg !8268
  store i64 %bf.set123, i64* %59, align 8, !dbg !8268
  %bf.result.cast124 = trunc i64 %bf.value120 to i32, !dbg !8268
  %61 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8269
  %call125 = call i64 @bp_unpack_value(%struct.bitpack_d* %61, i32 1), !dbg !8270
  %conv126 = trunc i64 %call125 to i32, !dbg !8271
  %62 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8272
  %decl_common127 = bitcast %union.tree_node* %62 to %struct.tree_decl_common*, !dbg !8272
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common127, i32 0, i32 2, !dbg !8272
  %63 = bitcast i40* %decl_flag_2 to i64*, !dbg !8272
  %64 = zext i32 %conv126 to i64, !dbg !8273
  %bf.load128 = load i64, i64* %63, align 8, !dbg !8273
  %bf.value129 = and i64 %64, 1, !dbg !8273
  %bf.shl130 = shl i64 %bf.value129, 26, !dbg !8273
  %bf.clear131 = and i64 %bf.load128, -67108865, !dbg !8273
  %bf.set132 = or i64 %bf.clear131, %bf.shl130, !dbg !8273
  store i64 %bf.set132, i64* %63, align 8, !dbg !8273
  %bf.result.cast133 = trunc i64 %bf.value129 to i32, !dbg !8273
  %65 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8274
  %call134 = call i64 @bp_unpack_value(%struct.bitpack_d* %65, i32 8), !dbg !8275
  store i64 %call134, i64* %off_align, align 8, !dbg !8276
  %66 = load i64, i64* %off_align, align 8, !dbg !8277
  %67 = load i64, i64* %off_align, align 8, !dbg !8277
  %sub = sub i64 0, %67, !dbg !8277
  %and = and i64 %66, %sub, !dbg !8277
  %call135 = call i32 @exact_log2(i64 %and), !dbg !8277
  %68 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8277
  %decl_common136 = bitcast %union.tree_node* %68 to %struct.tree_decl_common*, !dbg !8277
  %off_align137 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common136, i32 0, i32 2, !dbg !8277
  %69 = bitcast i40* %off_align137 to i64*, !dbg !8277
  %70 = zext i32 %call135 to i64, !dbg !8277
  %bf.load138 = load i64, i64* %69, align 8, !dbg !8277
  %bf.value139 = and i64 %70, 255, !dbg !8277
  %bf.shl140 = shl i64 %bf.value139, 32, !dbg !8277
  %bf.clear141 = and i64 %bf.load138, -1095216660481, !dbg !8277
  %bf.set142 = or i64 %bf.clear141, %bf.shl140, !dbg !8277
  store i64 %bf.set142, i64* %69, align 8, !dbg !8277
  %bf.result.cast143 = trunc i64 %bf.value139 to i32, !dbg !8277
  br label %if.end144, !dbg !8278

if.end144:                                        ; preds = %if.then114, %if.end
  %71 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8279
  %base145 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !8279
  %72 = bitcast %struct.tree_base* %base145 to i64*, !dbg !8279
  %bf.load146 = load i64, i64* %72, align 8, !dbg !8279
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !8279
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !8279
  %cmp149 = icmp eq i32 %bf.cast148, 36, !dbg !8281
  br i1 %cmp149, label %if.then164, label %lor.lhs.false, !dbg !8282

lor.lhs.false:                                    ; preds = %if.end144
  %73 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8283
  %base151 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !8283
  %74 = bitcast %struct.tree_base* %base151 to i64*, !dbg !8283
  %bf.load152 = load i64, i64* %74, align 8, !dbg !8283
  %bf.clear153 = and i64 %bf.load152, 65535, !dbg !8283
  %bf.cast154 = trunc i64 %bf.clear153 to i32, !dbg !8283
  %cmp155 = icmp eq i32 %bf.cast154, 34, !dbg !8284
  br i1 %cmp155, label %if.then164, label %lor.lhs.false157, !dbg !8285

lor.lhs.false157:                                 ; preds = %lor.lhs.false
  %75 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8286
  %base158 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !8286
  %76 = bitcast %struct.tree_base* %base158 to i64*, !dbg !8286
  %bf.load159 = load i64, i64* %76, align 8, !dbg !8286
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !8286
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !8286
  %cmp162 = icmp eq i32 %bf.cast161, 32, !dbg !8287
  br i1 %cmp162, label %if.then164, label %if.end208, !dbg !8288

if.then164:                                       ; preds = %lor.lhs.false157, %lor.lhs.false, %if.end144
  %77 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8289
  %call165 = call i64 @bp_unpack_value(%struct.bitpack_d* %77, i32 1), !dbg !8291
  %conv166 = trunc i64 %call165 to i32, !dbg !8292
  %78 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8293
  %decl_common167 = bitcast %union.tree_node* %78 to %struct.tree_decl_common*, !dbg !8293
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common167, i32 0, i32 2, !dbg !8293
  %79 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !8293
  %80 = zext i32 %conv166 to i64, !dbg !8294
  %bf.load168 = load i64, i64* %79, align 8, !dbg !8294
  %bf.value169 = and i64 %80, 1, !dbg !8294
  %bf.shl170 = shl i64 %bf.value169, 28, !dbg !8294
  %bf.clear171 = and i64 %bf.load168, -268435457, !dbg !8294
  %bf.set172 = or i64 %bf.clear171, %bf.shl170, !dbg !8294
  store i64 %bf.set172, i64* %79, align 8, !dbg !8294
  %bf.result.cast173 = trunc i64 %bf.value169 to i32, !dbg !8294
  %81 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8295
  %base174 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !8295
  %82 = bitcast %struct.tree_base* %base174 to i64*, !dbg !8295
  %bf.load175 = load i64, i64* %82, align 8, !dbg !8295
  %bf.clear176 = and i64 %bf.load175, 65535, !dbg !8295
  %bf.cast177 = trunc i64 %bf.clear176 to i32, !dbg !8295
  %cmp178 = icmp eq i32 %bf.cast177, 32, !dbg !8297
  br i1 %cmp178, label %if.then187, label %lor.lhs.false180, !dbg !8298

lor.lhs.false180:                                 ; preds = %if.then164
  %83 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8299
  %base181 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !8299
  %84 = bitcast %struct.tree_base* %base181 to i64*, !dbg !8299
  %bf.load182 = load i64, i64* %84, align 8, !dbg !8299
  %bf.clear183 = and i64 %bf.load182, 65535, !dbg !8299
  %bf.cast184 = trunc i64 %bf.clear183 to i32, !dbg !8299
  %cmp185 = icmp eq i32 %bf.cast184, 34, !dbg !8300
  br i1 %cmp185, label %if.then187, label %if.end198, !dbg !8301

if.then187:                                       ; preds = %lor.lhs.false180, %if.then164
  %85 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8302
  %call188 = call i64 @bp_unpack_value(%struct.bitpack_d* %85, i32 1), !dbg !8303
  %conv189 = trunc i64 %call188 to i32, !dbg !8304
  %86 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8305
  %decl_common190 = bitcast %union.tree_node* %86 to %struct.tree_decl_common*, !dbg !8305
  %decl_flag_2191 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common190, i32 0, i32 2, !dbg !8305
  %87 = bitcast i40* %decl_flag_2191 to i64*, !dbg !8305
  %88 = zext i32 %conv189 to i64, !dbg !8306
  %bf.load192 = load i64, i64* %87, align 8, !dbg !8306
  %bf.value193 = and i64 %88, 1, !dbg !8306
  %bf.shl194 = shl i64 %bf.value193, 26, !dbg !8306
  %bf.clear195 = and i64 %bf.load192, -67108865, !dbg !8306
  %bf.set196 = or i64 %bf.clear195, %bf.shl194, !dbg !8306
  store i64 %bf.set196, i64* %87, align 8, !dbg !8306
  %bf.result.cast197 = trunc i64 %bf.value193 to i32, !dbg !8306
  br label %if.end198, !dbg !8305

if.end198:                                        ; preds = %if.then187, %lor.lhs.false180
  %89 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8307
  %call199 = call i64 @bp_unpack_value(%struct.bitpack_d* %89, i32 1), !dbg !8308
  %conv200 = trunc i64 %call199 to i32, !dbg !8309
  %90 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8310
  %decl_common201 = bitcast %union.tree_node* %90 to %struct.tree_decl_common*, !dbg !8310
  %decl_restricted_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common201, i32 0, i32 2, !dbg !8310
  %91 = bitcast i40* %decl_restricted_flag to i64*, !dbg !8310
  %92 = zext i32 %conv200 to i64, !dbg !8311
  %bf.load202 = load i64, i64* %91, align 8, !dbg !8311
  %bf.value203 = and i64 %92, 1, !dbg !8311
  %bf.shl204 = shl i64 %bf.value203, 29, !dbg !8311
  %bf.clear205 = and i64 %bf.load202, -536870913, !dbg !8311
  %bf.set206 = or i64 %bf.clear205, %bf.shl204, !dbg !8311
  store i64 %bf.set206, i64* %91, align 8, !dbg !8311
  %bf.result.cast207 = trunc i64 %bf.value203 to i32, !dbg !8311
  br label %if.end208, !dbg !8312

if.end208:                                        ; preds = %if.end198, %lor.lhs.false157
  ret void, !dbg !8313
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_decl_wrtl_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8314 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8315, metadata !DIExpression()), !dbg !8316
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8317, metadata !DIExpression()), !dbg !8318
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8319
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 1), !dbg !8320
  %conv = trunc i64 %call to i32, !dbg !8321
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8322
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !8322
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8322
  %2 = bitcast i40* %decl_flag_0 to i64*, !dbg !8322
  %3 = zext i32 %conv to i64, !dbg !8323
  %bf.load = load i64, i64* %2, align 8, !dbg !8323
  %bf.value = and i64 %3, 1, !dbg !8323
  %bf.shl = shl i64 %bf.value, 24, !dbg !8323
  %bf.clear = and i64 %bf.load, -16777217, !dbg !8323
  %bf.set = or i64 %bf.clear, %bf.shl, !dbg !8323
  store i64 %bf.set, i64* %2, align 8, !dbg !8323
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !8323
  ret void, !dbg !8324
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_decl_with_vis_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8325 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %p = alloca i16, align 2
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8326, metadata !DIExpression()), !dbg !8327
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8328, metadata !DIExpression()), !dbg !8329
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8330
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 1), !dbg !8331
  %conv = trunc i64 %call to i32, !dbg !8332
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8333
  %decl_with_vis = bitcast %union.tree_node* %1 to %struct.tree_decl_with_vis*, !dbg !8333
  %defer_output = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !8333
  %2 = bitcast i24* %defer_output to i32*, !dbg !8333
  %bf.load = load i32, i32* %2, align 8, !dbg !8334
  %bf.value = and i32 %conv, 1, !dbg !8334
  %bf.clear = and i32 %bf.load, -2, !dbg !8334
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !8334
  store i32 %bf.set, i32* %2, align 8, !dbg !8334
  %3 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8335
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %3, i32 1), !dbg !8336
  %conv2 = trunc i64 %call1 to i32, !dbg !8337
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8338
  %decl_with_vis3 = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !8338
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis3, i32 0, i32 4, !dbg !8338
  %5 = bitcast i24* %common_flag to i32*, !dbg !8338
  %bf.load4 = load i32, i32* %5, align 8, !dbg !8339
  %bf.value5 = and i32 %conv2, 1, !dbg !8339
  %bf.shl = shl i32 %bf.value5, 3, !dbg !8339
  %bf.clear6 = and i32 %bf.load4, -9, !dbg !8339
  %bf.set7 = or i32 %bf.clear6, %bf.shl, !dbg !8339
  store i32 %bf.set7, i32* %5, align 8, !dbg !8339
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8340
  %call8 = call i64 @bp_unpack_value(%struct.bitpack_d* %6, i32 1), !dbg !8341
  %conv9 = trunc i64 %call8 to i32, !dbg !8342
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8343
  %decl_with_vis10 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_vis*, !dbg !8343
  %dllimport_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis10, i32 0, i32 4, !dbg !8343
  %8 = bitcast i24* %dllimport_flag to i32*, !dbg !8343
  %bf.load11 = load i32, i32* %8, align 8, !dbg !8344
  %bf.value12 = and i32 %conv9, 1, !dbg !8344
  %bf.shl13 = shl i32 %bf.value12, 5, !dbg !8344
  %bf.clear14 = and i32 %bf.load11, -33, !dbg !8344
  %bf.set15 = or i32 %bf.clear14, %bf.shl13, !dbg !8344
  store i32 %bf.set15, i32* %8, align 8, !dbg !8344
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8345
  %call16 = call i64 @bp_unpack_value(%struct.bitpack_d* %9, i32 1), !dbg !8346
  %conv17 = trunc i64 %call16 to i32, !dbg !8347
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8348
  %decl_with_vis18 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_vis*, !dbg !8348
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis18, i32 0, i32 4, !dbg !8348
  %11 = bitcast i24* %weak_flag to i32*, !dbg !8348
  %bf.load19 = load i32, i32* %11, align 8, !dbg !8349
  %bf.value20 = and i32 %conv17, 1, !dbg !8349
  %bf.shl21 = shl i32 %bf.value20, 7, !dbg !8349
  %bf.clear22 = and i32 %bf.load19, -129, !dbg !8349
  %bf.set23 = or i32 %bf.clear22, %bf.shl21, !dbg !8349
  store i32 %bf.set23, i32* %11, align 8, !dbg !8349
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8350
  %call24 = call i64 @bp_unpack_value(%struct.bitpack_d* %12, i32 1), !dbg !8351
  %conv25 = trunc i64 %call24 to i32, !dbg !8352
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8353
  %decl_with_vis26 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_vis*, !dbg !8353
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis26, i32 0, i32 4, !dbg !8353
  %14 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !8353
  %bf.load27 = load i32, i32* %14, align 8, !dbg !8354
  %bf.value28 = and i32 %conv25, 1, !dbg !8354
  %bf.shl29 = shl i32 %bf.value28, 8, !dbg !8354
  %bf.clear30 = and i32 %bf.load27, -257, !dbg !8354
  %bf.set31 = or i32 %bf.clear30, %bf.shl29, !dbg !8354
  store i32 %bf.set31, i32* %14, align 8, !dbg !8354
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8355
  %call32 = call i64 @bp_unpack_value(%struct.bitpack_d* %15, i32 1), !dbg !8356
  %conv33 = trunc i64 %call32 to i32, !dbg !8357
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8358
  %decl_with_vis34 = bitcast %union.tree_node* %16 to %struct.tree_decl_with_vis*, !dbg !8358
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis34, i32 0, i32 4, !dbg !8358
  %17 = bitcast i24* %comdat_flag to i32*, !dbg !8358
  %bf.load35 = load i32, i32* %17, align 8, !dbg !8359
  %bf.value36 = and i32 %conv33, 1, !dbg !8359
  %bf.shl37 = shl i32 %bf.value36, 9, !dbg !8359
  %bf.clear38 = and i32 %bf.load35, -513, !dbg !8359
  %bf.set39 = or i32 %bf.clear38, %bf.shl37, !dbg !8359
  store i32 %bf.set39, i32* %17, align 8, !dbg !8359
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8360
  %call40 = call i64 @bp_unpack_value(%struct.bitpack_d* %18, i32 2), !dbg !8361
  %conv41 = trunc i64 %call40 to i32, !dbg !8362
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8363
  %decl_with_vis42 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_vis*, !dbg !8363
  %visibility = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis42, i32 0, i32 4, !dbg !8363
  %20 = bitcast i24* %visibility to i32*, !dbg !8363
  %bf.load43 = load i32, i32* %20, align 8, !dbg !8364
  %bf.value44 = and i32 %conv41, 3, !dbg !8364
  %bf.shl45 = shl i32 %bf.value44, 10, !dbg !8364
  %bf.clear46 = and i32 %bf.load43, -3073, !dbg !8364
  %bf.set47 = or i32 %bf.clear46, %bf.shl45, !dbg !8364
  store i32 %bf.set47, i32* %20, align 8, !dbg !8364
  %21 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8365
  %call48 = call i64 @bp_unpack_value(%struct.bitpack_d* %21, i32 1), !dbg !8366
  %conv49 = trunc i64 %call48 to i32, !dbg !8367
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8368
  %decl_with_vis50 = bitcast %union.tree_node* %22 to %struct.tree_decl_with_vis*, !dbg !8368
  %visibility_specified = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis50, i32 0, i32 4, !dbg !8368
  %23 = bitcast i24* %visibility_specified to i32*, !dbg !8368
  %bf.load51 = load i32, i32* %23, align 8, !dbg !8369
  %bf.value52 = and i32 %conv49, 1, !dbg !8369
  %bf.shl53 = shl i32 %bf.value52, 12, !dbg !8369
  %bf.clear54 = and i32 %bf.load51, -4097, !dbg !8369
  %bf.set55 = or i32 %bf.clear54, %bf.shl53, !dbg !8369
  store i32 %bf.set55, i32* %23, align 8, !dbg !8369
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8370
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8370
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !8370
  %bf.load56 = load i64, i64* %25, align 8, !dbg !8370
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !8370
  %bf.cast = trunc i64 %bf.clear57 to i32, !dbg !8370
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !8372
  br i1 %cmp, label %if.then, label %if.end, !dbg !8373

if.then:                                          ; preds = %entry
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8374
  %call59 = call i64 @bp_unpack_value(%struct.bitpack_d* %26, i32 1), !dbg !8376
  %conv60 = trunc i64 %call59 to i32, !dbg !8377
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8378
  %decl_with_vis61 = bitcast %union.tree_node* %27 to %struct.tree_decl_with_vis*, !dbg !8378
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis61, i32 0, i32 4, !dbg !8378
  %28 = bitcast i24* %hard_register to i32*, !dbg !8378
  %bf.load62 = load i32, i32* %28, align 8, !dbg !8379
  %bf.value63 = and i32 %conv60, 1, !dbg !8379
  %bf.shl64 = shl i32 %bf.value63, 1, !dbg !8379
  %bf.clear65 = and i32 %bf.load62, -3, !dbg !8379
  %bf.set66 = or i32 %bf.clear65, %bf.shl64, !dbg !8379
  store i32 %bf.set66, i32* %28, align 8, !dbg !8379
  %29 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8380
  %call67 = call i64 @bp_unpack_value(%struct.bitpack_d* %29, i32 1), !dbg !8381
  %conv68 = trunc i64 %call67 to i32, !dbg !8382
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8383
  %decl_with_vis69 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_vis*, !dbg !8383
  %in_text_section = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis69, i32 0, i32 4, !dbg !8383
  %31 = bitcast i24* %in_text_section to i32*, !dbg !8383
  %bf.load70 = load i32, i32* %31, align 8, !dbg !8384
  %bf.value71 = and i32 %conv68, 1, !dbg !8384
  %bf.shl72 = shl i32 %bf.value71, 4, !dbg !8384
  %bf.clear73 = and i32 %bf.load70, -17, !dbg !8384
  %bf.set74 = or i32 %bf.clear73, %bf.shl72, !dbg !8384
  store i32 %bf.set74, i32* %31, align 8, !dbg !8384
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8385
  %call75 = call i64 @bp_unpack_value(%struct.bitpack_d* %32, i32 3), !dbg !8386
  %conv76 = trunc i64 %call75 to i32, !dbg !8387
  %33 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8388
  %decl_with_vis77 = bitcast %union.tree_node* %33 to %struct.tree_decl_with_vis*, !dbg !8388
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis77, i32 0, i32 4, !dbg !8388
  %34 = bitcast i24* %tls_model to i32*, !dbg !8388
  %bf.load78 = load i32, i32* %34, align 8, !dbg !8389
  %bf.value79 = and i32 %conv76, 7, !dbg !8389
  %bf.shl80 = shl i32 %bf.value79, 13, !dbg !8389
  %bf.clear81 = and i32 %bf.load78, -57345, !dbg !8389
  %bf.set82 = or i32 %bf.clear81, %bf.shl80, !dbg !8389
  store i32 %bf.set82, i32* %34, align 8, !dbg !8389
  br label %if.end, !dbg !8390

if.end:                                           ; preds = %if.then, %entry
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8391
  %base83 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !8391
  %36 = bitcast %struct.tree_base* %base83 to i64*, !dbg !8391
  %bf.load84 = load i64, i64* %36, align 8, !dbg !8391
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !8391
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !8391
  %cmp87 = icmp eq i32 %bf.cast86, 32, !dbg !8391
  br i1 %cmp87, label %if.then95, label %lor.lhs.false, !dbg !8391

lor.lhs.false:                                    ; preds = %if.end
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8391
  %base89 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !8391
  %38 = bitcast %struct.tree_base* %base89 to i64*, !dbg !8391
  %bf.load90 = load i64, i64* %38, align 8, !dbg !8391
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !8391
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !8391
  %cmp93 = icmp eq i32 %bf.cast92, 29, !dbg !8391
  br i1 %cmp93, label %if.then95, label %if.end98, !dbg !8393

if.then95:                                        ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata i16* %p, metadata !8394, metadata !DIExpression()), !dbg !8396
  %39 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8397
  %call96 = call i64 @bp_unpack_value(%struct.bitpack_d* %39, i32 16), !dbg !8398
  %conv97 = trunc i64 %call96 to i16, !dbg !8399
  store i16 %conv97, i16* %p, align 2, !dbg !8400
  %40 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8401
  %41 = load i16, i16* %p, align 2, !dbg !8401
  call void @decl_init_priority_insert(%union.tree_node* %40, i16 zeroext %41), !dbg !8401
  br label %if.end98, !dbg !8402

if.end98:                                         ; preds = %if.then95, %lor.lhs.false
  ret void, !dbg !8403
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_function_decl_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8404 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8405, metadata !DIExpression()), !dbg !8406
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8407, metadata !DIExpression()), !dbg !8408
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8409
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 11), !dbg !8410
  %conv = trunc i64 %call to i32, !dbg !8411
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8412
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !8412
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8412
  %bf.load = load i32, i32* %function_code, align 8, !dbg !8413
  %bf.value = and i32 %conv, 2047, !dbg !8413
  %bf.clear = and i32 %bf.load, -2048, !dbg !8413
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !8413
  store i32 %bf.set, i32* %function_code, align 8, !dbg !8413
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8414
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %2, i32 2), !dbg !8415
  %conv2 = trunc i64 %call1 to i32, !dbg !8416
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8417
  %function_decl3 = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !8417
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl3, i32 0, i32 5, !dbg !8417
  %bf.load4 = load i32, i32* %built_in_class, align 8, !dbg !8418
  %bf.value5 = and i32 %conv2, 3, !dbg !8418
  %bf.shl = shl i32 %bf.value5, 11, !dbg !8418
  %bf.clear6 = and i32 %bf.load4, -6145, !dbg !8418
  %bf.set7 = or i32 %bf.clear6, %bf.shl, !dbg !8418
  store i32 %bf.set7, i32* %built_in_class, align 8, !dbg !8418
  %4 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8419
  %call8 = call i64 @bp_unpack_value(%struct.bitpack_d* %4, i32 1), !dbg !8420
  %conv9 = trunc i64 %call8 to i32, !dbg !8421
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8422
  %function_decl10 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !8422
  %static_ctor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !8422
  %bf.load11 = load i32, i32* %static_ctor_flag, align 8, !dbg !8423
  %bf.value12 = and i32 %conv9, 1, !dbg !8423
  %bf.shl13 = shl i32 %bf.value12, 13, !dbg !8423
  %bf.clear14 = and i32 %bf.load11, -8193, !dbg !8423
  %bf.set15 = or i32 %bf.clear14, %bf.shl13, !dbg !8423
  store i32 %bf.set15, i32* %static_ctor_flag, align 8, !dbg !8423
  %6 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8424
  %call16 = call i64 @bp_unpack_value(%struct.bitpack_d* %6, i32 1), !dbg !8425
  %conv17 = trunc i64 %call16 to i32, !dbg !8426
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8427
  %function_decl18 = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !8427
  %static_dtor_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl18, i32 0, i32 5, !dbg !8427
  %bf.load19 = load i32, i32* %static_dtor_flag, align 8, !dbg !8428
  %bf.value20 = and i32 %conv17, 1, !dbg !8428
  %bf.shl21 = shl i32 %bf.value20, 14, !dbg !8428
  %bf.clear22 = and i32 %bf.load19, -16385, !dbg !8428
  %bf.set23 = or i32 %bf.clear22, %bf.shl21, !dbg !8428
  store i32 %bf.set23, i32* %static_dtor_flag, align 8, !dbg !8428
  %8 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8429
  %call24 = call i64 @bp_unpack_value(%struct.bitpack_d* %8, i32 1), !dbg !8430
  %conv25 = trunc i64 %call24 to i32, !dbg !8431
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8432
  %function_decl26 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !8432
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl26, i32 0, i32 5, !dbg !8432
  %bf.load27 = load i32, i32* %uninlinable, align 8, !dbg !8433
  %bf.value28 = and i32 %conv25, 1, !dbg !8433
  %bf.shl29 = shl i32 %bf.value28, 15, !dbg !8433
  %bf.clear30 = and i32 %bf.load27, -32769, !dbg !8433
  %bf.set31 = or i32 %bf.clear30, %bf.shl29, !dbg !8433
  store i32 %bf.set31, i32* %uninlinable, align 8, !dbg !8433
  %10 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8434
  %call32 = call i64 @bp_unpack_value(%struct.bitpack_d* %10, i32 1), !dbg !8435
  %conv33 = trunc i64 %call32 to i32, !dbg !8436
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8437
  %function_decl34 = bitcast %union.tree_node* %11 to %struct.tree_function_decl*, !dbg !8437
  %possibly_inlined = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl34, i32 0, i32 5, !dbg !8437
  %bf.load35 = load i32, i32* %possibly_inlined, align 8, !dbg !8438
  %bf.value36 = and i32 %conv33, 1, !dbg !8438
  %bf.shl37 = shl i32 %bf.value36, 16, !dbg !8438
  %bf.clear38 = and i32 %bf.load35, -65537, !dbg !8438
  %bf.set39 = or i32 %bf.clear38, %bf.shl37, !dbg !8438
  store i32 %bf.set39, i32* %possibly_inlined, align 8, !dbg !8438
  %12 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8439
  %call40 = call i64 @bp_unpack_value(%struct.bitpack_d* %12, i32 1), !dbg !8440
  %conv41 = trunc i64 %call40 to i32, !dbg !8441
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8442
  %function_decl42 = bitcast %union.tree_node* %13 to %struct.tree_function_decl*, !dbg !8442
  %novops_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl42, i32 0, i32 5, !dbg !8442
  %bf.load43 = load i32, i32* %novops_flag, align 8, !dbg !8443
  %bf.value44 = and i32 %conv41, 1, !dbg !8443
  %bf.shl45 = shl i32 %bf.value44, 17, !dbg !8443
  %bf.clear46 = and i32 %bf.load43, -131073, !dbg !8443
  %bf.set47 = or i32 %bf.clear46, %bf.shl45, !dbg !8443
  store i32 %bf.set47, i32* %novops_flag, align 8, !dbg !8443
  %14 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8444
  %call48 = call i64 @bp_unpack_value(%struct.bitpack_d* %14, i32 1), !dbg !8445
  %conv49 = trunc i64 %call48 to i32, !dbg !8446
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8447
  %function_decl50 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !8447
  %returns_twice_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl50, i32 0, i32 5, !dbg !8447
  %bf.load51 = load i32, i32* %returns_twice_flag, align 8, !dbg !8448
  %bf.value52 = and i32 %conv49, 1, !dbg !8448
  %bf.shl53 = shl i32 %bf.value52, 18, !dbg !8448
  %bf.clear54 = and i32 %bf.load51, -262145, !dbg !8448
  %bf.set55 = or i32 %bf.clear54, %bf.shl53, !dbg !8448
  store i32 %bf.set55, i32* %returns_twice_flag, align 8, !dbg !8448
  %16 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8449
  %call56 = call i64 @bp_unpack_value(%struct.bitpack_d* %16, i32 1), !dbg !8450
  %conv57 = trunc i64 %call56 to i32, !dbg !8451
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8452
  %function_decl58 = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !8452
  %malloc_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl58, i32 0, i32 5, !dbg !8452
  %bf.load59 = load i32, i32* %malloc_flag, align 8, !dbg !8453
  %bf.value60 = and i32 %conv57, 1, !dbg !8453
  %bf.shl61 = shl i32 %bf.value60, 19, !dbg !8453
  %bf.clear62 = and i32 %bf.load59, -524289, !dbg !8453
  %bf.set63 = or i32 %bf.clear62, %bf.shl61, !dbg !8453
  store i32 %bf.set63, i32* %malloc_flag, align 8, !dbg !8453
  %18 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8454
  %call64 = call i64 @bp_unpack_value(%struct.bitpack_d* %18, i32 1), !dbg !8455
  %conv65 = trunc i64 %call64 to i32, !dbg !8456
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8457
  %function_decl66 = bitcast %union.tree_node* %19 to %struct.tree_function_decl*, !dbg !8457
  %operator_new_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl66, i32 0, i32 5, !dbg !8457
  %bf.load67 = load i32, i32* %operator_new_flag, align 8, !dbg !8458
  %bf.value68 = and i32 %conv65, 1, !dbg !8458
  %bf.shl69 = shl i32 %bf.value68, 20, !dbg !8458
  %bf.clear70 = and i32 %bf.load67, -1048577, !dbg !8458
  %bf.set71 = or i32 %bf.clear70, %bf.shl69, !dbg !8458
  store i32 %bf.set71, i32* %operator_new_flag, align 8, !dbg !8458
  %20 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8459
  %call72 = call i64 @bp_unpack_value(%struct.bitpack_d* %20, i32 1), !dbg !8460
  %conv73 = trunc i64 %call72 to i32, !dbg !8461
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8462
  %function_decl74 = bitcast %union.tree_node* %21 to %struct.tree_function_decl*, !dbg !8462
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl74, i32 0, i32 5, !dbg !8462
  %bf.load75 = load i32, i32* %declared_inline_flag, align 8, !dbg !8463
  %bf.value76 = and i32 %conv73, 1, !dbg !8463
  %bf.shl77 = shl i32 %bf.value76, 21, !dbg !8463
  %bf.clear78 = and i32 %bf.load75, -2097153, !dbg !8463
  %bf.set79 = or i32 %bf.clear78, %bf.shl77, !dbg !8463
  store i32 %bf.set79, i32* %declared_inline_flag, align 8, !dbg !8463
  %22 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8464
  %call80 = call i64 @bp_unpack_value(%struct.bitpack_d* %22, i32 1), !dbg !8465
  %conv81 = trunc i64 %call80 to i32, !dbg !8466
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8467
  %function_decl82 = bitcast %union.tree_node* %23 to %struct.tree_function_decl*, !dbg !8467
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl82, i32 0, i32 5, !dbg !8467
  %bf.load83 = load i32, i32* %regdecl_flag, align 8, !dbg !8468
  %bf.value84 = and i32 %conv81, 1, !dbg !8468
  %bf.shl85 = shl i32 %bf.value84, 22, !dbg !8468
  %bf.clear86 = and i32 %bf.load83, -4194305, !dbg !8468
  %bf.set87 = or i32 %bf.clear86, %bf.shl85, !dbg !8468
  store i32 %bf.set87, i32* %regdecl_flag, align 8, !dbg !8468
  %24 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8469
  %call88 = call i64 @bp_unpack_value(%struct.bitpack_d* %24, i32 1), !dbg !8470
  %conv89 = trunc i64 %call88 to i32, !dbg !8471
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8472
  %function_decl90 = bitcast %union.tree_node* %25 to %struct.tree_function_decl*, !dbg !8472
  %no_inline_warning_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl90, i32 0, i32 5, !dbg !8472
  %bf.load91 = load i32, i32* %no_inline_warning_flag, align 8, !dbg !8473
  %bf.value92 = and i32 %conv89, 1, !dbg !8473
  %bf.shl93 = shl i32 %bf.value92, 23, !dbg !8473
  %bf.clear94 = and i32 %bf.load91, -8388609, !dbg !8473
  %bf.set95 = or i32 %bf.clear94, %bf.shl93, !dbg !8473
  store i32 %bf.set95, i32* %no_inline_warning_flag, align 8, !dbg !8473
  %26 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8474
  %call96 = call i64 @bp_unpack_value(%struct.bitpack_d* %26, i32 1), !dbg !8475
  %conv97 = trunc i64 %call96 to i32, !dbg !8476
  %27 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8477
  %function_decl98 = bitcast %union.tree_node* %27 to %struct.tree_function_decl*, !dbg !8477
  %no_instrument_function_entry_exit = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl98, i32 0, i32 5, !dbg !8477
  %bf.load99 = load i32, i32* %no_instrument_function_entry_exit, align 8, !dbg !8478
  %bf.value100 = and i32 %conv97, 1, !dbg !8478
  %bf.shl101 = shl i32 %bf.value100, 24, !dbg !8478
  %bf.clear102 = and i32 %bf.load99, -16777217, !dbg !8478
  %bf.set103 = or i32 %bf.clear102, %bf.shl101, !dbg !8478
  store i32 %bf.set103, i32* %no_instrument_function_entry_exit, align 8, !dbg !8478
  %28 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8479
  %call104 = call i64 @bp_unpack_value(%struct.bitpack_d* %28, i32 1), !dbg !8480
  %conv105 = trunc i64 %call104 to i32, !dbg !8481
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8482
  %function_decl106 = bitcast %union.tree_node* %29 to %struct.tree_function_decl*, !dbg !8482
  %no_limit_stack = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl106, i32 0, i32 5, !dbg !8482
  %bf.load107 = load i32, i32* %no_limit_stack, align 8, !dbg !8483
  %bf.value108 = and i32 %conv105, 1, !dbg !8483
  %bf.shl109 = shl i32 %bf.value108, 25, !dbg !8483
  %bf.clear110 = and i32 %bf.load107, -33554433, !dbg !8483
  %bf.set111 = or i32 %bf.clear110, %bf.shl109, !dbg !8483
  store i32 %bf.set111, i32* %no_limit_stack, align 8, !dbg !8483
  %30 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8484
  %call112 = call i64 @bp_unpack_value(%struct.bitpack_d* %30, i32 1), !dbg !8485
  %conv113 = trunc i64 %call112 to i32, !dbg !8486
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8487
  %function_decl114 = bitcast %union.tree_node* %31 to %struct.tree_function_decl*, !dbg !8487
  %disregard_inline_limits = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl114, i32 0, i32 5, !dbg !8487
  %bf.load115 = load i32, i32* %disregard_inline_limits, align 8, !dbg !8488
  %bf.value116 = and i32 %conv113, 1, !dbg !8488
  %bf.shl117 = shl i32 %bf.value116, 26, !dbg !8488
  %bf.clear118 = and i32 %bf.load115, -67108865, !dbg !8488
  %bf.set119 = or i32 %bf.clear118, %bf.shl117, !dbg !8488
  store i32 %bf.set119, i32* %disregard_inline_limits, align 8, !dbg !8488
  %32 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8489
  %call120 = call i64 @bp_unpack_value(%struct.bitpack_d* %32, i32 1), !dbg !8490
  %conv121 = trunc i64 %call120 to i32, !dbg !8491
  %33 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8492
  %function_decl122 = bitcast %union.tree_node* %33 to %struct.tree_function_decl*, !dbg !8492
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl122, i32 0, i32 5, !dbg !8492
  %bf.load123 = load i32, i32* %pure_flag, align 8, !dbg !8493
  %bf.value124 = and i32 %conv121, 1, !dbg !8493
  %bf.shl125 = shl i32 %bf.value124, 27, !dbg !8493
  %bf.clear126 = and i32 %bf.load123, -134217729, !dbg !8493
  %bf.set127 = or i32 %bf.clear126, %bf.shl125, !dbg !8493
  store i32 %bf.set127, i32* %pure_flag, align 8, !dbg !8493
  %34 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8494
  %call128 = call i64 @bp_unpack_value(%struct.bitpack_d* %34, i32 1), !dbg !8495
  %conv129 = trunc i64 %call128 to i32, !dbg !8496
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8497
  %function_decl130 = bitcast %union.tree_node* %35 to %struct.tree_function_decl*, !dbg !8497
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl130, i32 0, i32 5, !dbg !8497
  %bf.load131 = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !8498
  %bf.value132 = and i32 %conv129, 1, !dbg !8498
  %bf.shl133 = shl i32 %bf.value132, 28, !dbg !8498
  %bf.clear134 = and i32 %bf.load131, -268435457, !dbg !8498
  %bf.set135 = or i32 %bf.clear134, %bf.shl133, !dbg !8498
  store i32 %bf.set135, i32* %looping_const_or_pure_flag, align 8, !dbg !8498
  ret void, !dbg !8499
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_type_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8500 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8501, metadata !DIExpression()), !dbg !8502
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8503, metadata !DIExpression()), !dbg !8504
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !8505, metadata !DIExpression()), !dbg !8506
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8507
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 9), !dbg !8508
  %conv = trunc i64 %call to i32, !dbg !8509
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8510
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !8510
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !8510
  %bf.load = load i32, i32* %precision, align 4, !dbg !8511
  %bf.value = and i32 %conv, 1023, !dbg !8511
  %bf.clear = and i32 %bf.load, -1024, !dbg !8511
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !8511
  store i32 %bf.set, i32* %precision, align 4, !dbg !8511
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8512
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %2, i32 7), !dbg !8513
  %conv2 = trunc i64 %call1 to i32, !dbg !8514
  store i32 %conv2, i32* %mode, align 4, !dbg !8515
  %3 = load i32, i32* %mode, align 4, !dbg !8516
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8516
  %type3 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !8516
  %mode4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 6, !dbg !8516
  %bf.load5 = load i32, i32* %mode4, align 4, !dbg !8516
  %bf.value6 = and i32 %3, 255, !dbg !8516
  %bf.shl = shl i32 %bf.value6, 16, !dbg !8516
  %bf.clear7 = and i32 %bf.load5, -16711681, !dbg !8516
  %bf.set8 = or i32 %bf.clear7, %bf.shl, !dbg !8516
  store i32 %bf.set8, i32* %mode4, align 4, !dbg !8516
  %5 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8517
  %call9 = call i64 @bp_unpack_value(%struct.bitpack_d* %5, i32 1), !dbg !8518
  %conv10 = trunc i64 %call9 to i32, !dbg !8519
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8520
  %type11 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !8520
  %string_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !8520
  %bf.load12 = load i32, i32* %string_flag, align 4, !dbg !8521
  %bf.value13 = and i32 %conv10, 1, !dbg !8521
  %bf.shl14 = shl i32 %bf.value13, 24, !dbg !8521
  %bf.clear15 = and i32 %bf.load12, -16777217, !dbg !8521
  %bf.set16 = or i32 %bf.clear15, %bf.shl14, !dbg !8521
  store i32 %bf.set16, i32* %string_flag, align 4, !dbg !8521
  %7 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8522
  %call17 = call i64 @bp_unpack_value(%struct.bitpack_d* %7, i32 1), !dbg !8523
  %conv18 = trunc i64 %call17 to i32, !dbg !8524
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8525
  %type19 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !8525
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 6, !dbg !8525
  %bf.load20 = load i32, i32* %no_force_blk_flag, align 4, !dbg !8526
  %bf.value21 = and i32 %conv18, 1, !dbg !8526
  %bf.shl22 = shl i32 %bf.value21, 10, !dbg !8526
  %bf.clear23 = and i32 %bf.load20, -1025, !dbg !8526
  %bf.set24 = or i32 %bf.clear23, %bf.shl22, !dbg !8526
  store i32 %bf.set24, i32* %no_force_blk_flag, align 4, !dbg !8526
  %9 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8527
  %call25 = call i64 @bp_unpack_value(%struct.bitpack_d* %9, i32 1), !dbg !8528
  %conv26 = trunc i64 %call25 to i32, !dbg !8529
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8530
  %type27 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !8530
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !8530
  %bf.load28 = load i32, i32* %needs_constructing_flag, align 4, !dbg !8531
  %bf.value29 = and i32 %conv26, 1, !dbg !8531
  %bf.shl30 = shl i32 %bf.value29, 11, !dbg !8531
  %bf.clear31 = and i32 %bf.load28, -2049, !dbg !8531
  %bf.set32 = or i32 %bf.clear31, %bf.shl30, !dbg !8531
  store i32 %bf.set32, i32* %needs_constructing_flag, align 4, !dbg !8531
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8532
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8532
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !8532
  %bf.load33 = load i64, i64* %12, align 8, !dbg !8532
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !8532
  %bf.cast = trunc i64 %bf.clear34 to i32, !dbg !8532
  %cmp = icmp eq i32 %bf.cast, 17, !dbg !8534
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8535

lor.lhs.false:                                    ; preds = %entry
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8536
  %base36 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !8536
  %14 = bitcast %struct.tree_base* %base36 to i64*, !dbg !8536
  %bf.load37 = load i64, i64* %14, align 8, !dbg !8536
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !8536
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !8536
  %cmp40 = icmp eq i32 %bf.cast39, 16, !dbg !8537
  br i1 %cmp40, label %if.then, label %if.end, !dbg !8538

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8539
  %call42 = call i64 @bp_unpack_value(%struct.bitpack_d* %15, i32 1), !dbg !8540
  %conv43 = trunc i64 %call42 to i32, !dbg !8541
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8542
  %type44 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !8542
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 6, !dbg !8542
  %bf.load45 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !8543
  %bf.value46 = and i32 %conv43, 1, !dbg !8543
  %bf.shl47 = shl i32 %bf.value46, 12, !dbg !8543
  %bf.clear48 = and i32 %bf.load45, -4097, !dbg !8543
  %bf.set49 = or i32 %bf.clear48, %bf.shl47, !dbg !8543
  store i32 %bf.set49, i32* %transparent_aggr_flag, align 4, !dbg !8543
  br label %if.end, !dbg !8542

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %17 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8544
  %call50 = call i64 @bp_unpack_value(%struct.bitpack_d* %17, i32 1), !dbg !8545
  %conv51 = trunc i64 %call50 to i32, !dbg !8546
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8547
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !8547
  %base52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !8547
  %19 = bitcast %struct.tree_base* %base52 to i64*, !dbg !8547
  %20 = zext i32 %conv51 to i64, !dbg !8548
  %bf.load53 = load i64, i64* %19, align 8, !dbg !8548
  %bf.value54 = and i64 %20, 1, !dbg !8548
  %bf.shl55 = shl i64 %bf.value54, 41, !dbg !8548
  %bf.clear56 = and i64 %bf.load53, -2199023255553, !dbg !8548
  %bf.set57 = or i64 %bf.clear56, %bf.shl55, !dbg !8548
  store i64 %bf.set57, i64* %19, align 8, !dbg !8548
  %bf.result.cast = trunc i64 %bf.value54 to i32, !dbg !8548
  %21 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8549
  %call58 = call i64 @bp_unpack_value(%struct.bitpack_d* %21, i32 1), !dbg !8550
  %conv59 = trunc i64 %call58 to i32, !dbg !8551
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8552
  %type60 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !8552
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type60, i32 0, i32 6, !dbg !8552
  %bf.load61 = load i32, i32* %restrict_flag, align 4, !dbg !8553
  %bf.value62 = and i32 %conv59, 1, !dbg !8553
  %bf.shl63 = shl i32 %bf.value62, 13, !dbg !8553
  %bf.clear64 = and i32 %bf.load61, -8193, !dbg !8553
  %bf.set65 = or i32 %bf.clear64, %bf.shl63, !dbg !8553
  store i32 %bf.set65, i32* %restrict_flag, align 4, !dbg !8553
  %23 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8554
  %call66 = call i64 @bp_unpack_value(%struct.bitpack_d* %23, i32 2), !dbg !8555
  %conv67 = trunc i64 %call66 to i32, !dbg !8556
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8557
  %type68 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !8557
  %contains_placeholder_bits = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type68, i32 0, i32 6, !dbg !8557
  %bf.load69 = load i32, i32* %contains_placeholder_bits, align 4, !dbg !8558
  %bf.value70 = and i32 %conv67, 3, !dbg !8558
  %bf.shl71 = shl i32 %bf.value70, 14, !dbg !8558
  %bf.clear72 = and i32 %bf.load69, -49153, !dbg !8558
  %bf.set73 = or i32 %bf.clear72, %bf.shl71, !dbg !8558
  store i32 %bf.set73, i32* %contains_placeholder_bits, align 4, !dbg !8558
  %25 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8559
  %call74 = call i64 @bp_unpack_value(%struct.bitpack_d* %25, i32 1), !dbg !8560
  %conv75 = trunc i64 %call74 to i32, !dbg !8561
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8562
  %common76 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !8562
  %base77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 0, !dbg !8562
  %27 = bitcast %struct.tree_base* %base77 to i64*, !dbg !8562
  %28 = zext i32 %conv75 to i64, !dbg !8563
  %bf.load78 = load i64, i64* %27, align 8, !dbg !8563
  %bf.value79 = and i64 %28, 1, !dbg !8563
  %bf.shl80 = shl i64 %bf.value79, 42, !dbg !8563
  %bf.clear81 = and i64 %bf.load78, -4398046511105, !dbg !8563
  %bf.set82 = or i64 %bf.clear81, %bf.shl80, !dbg !8563
  store i64 %bf.set82, i64* %27, align 8, !dbg !8563
  %bf.result.cast83 = trunc i64 %bf.value79 to i32, !dbg !8563
  %29 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8564
  %call84 = call i64 @bp_unpack_value(%struct.bitpack_d* %29, i32 1), !dbg !8565
  %conv85 = trunc i64 %call84 to i32, !dbg !8566
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8567
  %base86 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !8567
  %31 = bitcast %struct.tree_base* %base86 to i64*, !dbg !8567
  %32 = zext i32 %conv85 to i64, !dbg !8568
  %bf.load87 = load i64, i64* %31, align 8, !dbg !8568
  %bf.value88 = and i64 %32, 1, !dbg !8568
  %bf.shl89 = shl i64 %bf.value88, 20, !dbg !8568
  %bf.clear90 = and i64 %bf.load87, -1048577, !dbg !8568
  %bf.set91 = or i64 %bf.clear90, %bf.shl89, !dbg !8568
  store i64 %bf.set91, i64* %31, align 8, !dbg !8568
  %bf.result.cast92 = trunc i64 %bf.value88 to i32, !dbg !8568
  %33 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8569
  %call93 = call i64 @bp_unpack_value(%struct.bitpack_d* %33, i32 32), !dbg !8570
  %conv94 = trunc i64 %call93 to i32, !dbg !8571
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8572
  %type95 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !8572
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 7, !dbg !8572
  store i32 %conv94, i32* %align, align 8, !dbg !8573
  %35 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8574
  %call96 = call i64 @bp_unpack_value(%struct.bitpack_d* %35, i32 32), !dbg !8575
  %conv97 = trunc i64 %call96 to i32, !dbg !8575
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8576
  %type98 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !8576
  %alias_set = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type98, i32 0, i32 8, !dbg !8576
  store i32 %conv97, i32* %alias_set, align 4, !dbg !8577
  ret void, !dbg !8578
}

; Function Attrs: noinline nounwind uwtable
define internal void @unpack_ts_block_value_fields(%struct.bitpack_d* %bp, %union.tree_node* %expr) #0 !dbg !8579 {
entry:
  %bp.addr = alloca %struct.bitpack_d*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.bitpack_d* %bp, %struct.bitpack_d** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitpack_d** %bp.addr, metadata !8580, metadata !DIExpression()), !dbg !8581
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8582, metadata !DIExpression()), !dbg !8583
  %0 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8584
  %call = call i64 @bp_unpack_value(%struct.bitpack_d* %0, i32 1), !dbg !8585
  %conv = trunc i64 %call to i32, !dbg !8586
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8587
  %block = bitcast %union.tree_node* %1 to %struct.tree_block*, !dbg !8587
  %abstract_flag = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1, !dbg !8587
  %bf.load = load i32, i32* %abstract_flag, align 8, !dbg !8588
  %bf.value = and i32 %conv, 1, !dbg !8588
  %bf.clear = and i32 %bf.load, -2, !dbg !8588
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !8588
  store i32 %bf.set, i32* %abstract_flag, align 8, !dbg !8588
  %2 = load %struct.bitpack_d*, %struct.bitpack_d** %bp.addr, align 8, !dbg !8589
  %call1 = call i64 @bp_unpack_value(%struct.bitpack_d* %2, i32 31), !dbg !8590
  %conv2 = trunc i64 %call1 to i32, !dbg !8591
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8592
  %block3 = bitcast %union.tree_node* %3 to %struct.tree_block*, !dbg !8592
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 1, !dbg !8592
  %bf.load4 = load i32, i32* %block_num, align 8, !dbg !8593
  %bf.value5 = and i32 %conv2, 2147483647, !dbg !8593
  %bf.shl = shl i32 %bf.value5, 1, !dbg !8593
  %bf.clear6 = and i32 %bf.load4, 1, !dbg !8593
  %bf.set7 = or i32 %bf.clear6, %bf.shl, !dbg !8593
  store i32 %bf.set7, i32* %block_num, align 8, !dbg !8593
  ret void, !dbg !8594
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local i32 @exact_log2(i64) #2

declare dso_local void @decl_init_priority_insert(%union.tree_node*, i16 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_common_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8595 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8596, metadata !DIExpression()), !dbg !8597
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8598, metadata !DIExpression()), !dbg !8599
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8600, metadata !DIExpression()), !dbg !8601
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8602
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8603
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8604
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8605
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !8605
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8605
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !8606
  ret void, !dbg !8607
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_vector_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8608 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8609, metadata !DIExpression()), !dbg !8610
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8611, metadata !DIExpression()), !dbg !8612
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8613, metadata !DIExpression()), !dbg !8614
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8615
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8616
  %call = call %union.tree_node* @lto_input_chain(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8617
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8618
  %vector = bitcast %union.tree_node* %2 to %struct.tree_vector*, !dbg !8618
  %elements = getelementptr inbounds %struct.tree_vector, %struct.tree_vector* %vector, i32 0, i32 1, !dbg !8618
  store %union.tree_node* %call, %union.tree_node** %elements, align 8, !dbg !8619
  ret void, !dbg !8620
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_complex_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8621 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8622, metadata !DIExpression()), !dbg !8623
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8624, metadata !DIExpression()), !dbg !8625
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8626, metadata !DIExpression()), !dbg !8627
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8628
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8629
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8630
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8631
  %complex = bitcast %union.tree_node* %2 to %struct.tree_complex*, !dbg !8631
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !8631
  store %union.tree_node* %call, %union.tree_node** %real, align 8, !dbg !8632
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8633
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8634
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !8635
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8636
  %complex2 = bitcast %union.tree_node* %5 to %struct.tree_complex*, !dbg !8636
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex2, i32 0, i32 2, !dbg !8636
  store %union.tree_node* %call1, %union.tree_node** %imag, align 8, !dbg !8637
  ret void, !dbg !8638
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_decl_minimal_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8639 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8640, metadata !DIExpression()), !dbg !8641
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8642, metadata !DIExpression()), !dbg !8643
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8644, metadata !DIExpression()), !dbg !8645
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8646
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8647
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8648
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8649
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !8649
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !8649
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !8650
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8651
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8652
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !8653
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8654
  %decl_minimal2 = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !8654
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal2, i32 0, i32 4, !dbg !8654
  store %union.tree_node* %call1, %union.tree_node** %context, align 8, !dbg !8655
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8656
  %7 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8657
  %call3 = call i32 @lto_input_location(%struct.lto_input_block* %6, %struct.data_in* %7), !dbg !8658
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8659
  %decl_minimal4 = bitcast %union.tree_node* %8 to %struct.tree_decl_minimal*, !dbg !8659
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal4, i32 0, i32 1, !dbg !8659
  store i32 %call3, i32* %locus, align 8, !dbg !8660
  ret void, !dbg !8661
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_decl_common_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8662 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8663, metadata !DIExpression()), !dbg !8664
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8665, metadata !DIExpression()), !dbg !8666
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8667, metadata !DIExpression()), !dbg !8668
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8669
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8670
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8671
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8672
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !8672
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !8672
  store %union.tree_node* %call, %union.tree_node** %size, align 8, !dbg !8673
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8674
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8675
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !8676
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8677
  %decl_common2 = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !8677
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 4, !dbg !8677
  store %union.tree_node* %call1, %union.tree_node** %size_unit, align 8, !dbg !8678
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8679
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8679
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !8679
  %bf.load = load i64, i64* %7, align 8, !dbg !8679
  %bf.clear = and i64 %bf.load, 65535, !dbg !8679
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8679
  %cmp = icmp ne i32 %bf.cast, 29, !dbg !8681
  br i1 %cmp, label %if.then, label %if.end, !dbg !8682

if.then:                                          ; preds = %entry
  %8 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8683
  %9 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8684
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %8, %struct.data_in* %9), !dbg !8685
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8686
  %decl_common4 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !8686
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common4, i32 0, i32 5, !dbg !8686
  store %union.tree_node* %call3, %union.tree_node** %initial, align 8, !dbg !8687
  br label %if.end, !dbg !8686

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8688
  %12 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8689
  %call5 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %11, %struct.data_in* %12), !dbg !8690
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8691
  %decl_common6 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !8691
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 6, !dbg !8691
  store %union.tree_node* %call5, %union.tree_node** %attributes, align 8, !dbg !8692
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8693
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8694
  %call7 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %14, %struct.data_in* %15), !dbg !8695
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8696
  %decl_common8 = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !8696
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common8, i32 0, i32 7, !dbg !8696
  store %union.tree_node* %call7, %union.tree_node** %abstract_origin, align 8, !dbg !8697
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8698
  %base9 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8698
  %18 = bitcast %struct.tree_base* %base9 to i64*, !dbg !8698
  %bf.load10 = load i64, i64* %18, align 8, !dbg !8698
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !8698
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !8698
  %cmp13 = icmp eq i32 %bf.cast12, 34, !dbg !8700
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !8701

if.then14:                                        ; preds = %if.end
  %19 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8702
  %20 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8703
  %call15 = call %union.tree_node* @lto_input_chain(%struct.lto_input_block* %19, %struct.data_in* %20), !dbg !8704
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8705
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !8705
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8705
  store %union.tree_node* %call15, %union.tree_node** %chain, align 8, !dbg !8706
  br label %if.end16, !dbg !8705

if.end16:                                         ; preds = %if.then14, %if.end
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8707
  %base17 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !8707
  %23 = bitcast %struct.tree_base* %base17 to i64*, !dbg !8707
  %bf.load18 = load i64, i64* %23, align 8, !dbg !8707
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !8707
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !8707
  %cmp21 = icmp eq i32 %bf.cast20, 32, !dbg !8709
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false, !dbg !8710

lor.lhs.false:                                    ; preds = %if.end16
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8711
  %base22 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8711
  %25 = bitcast %struct.tree_base* %base22 to i64*, !dbg !8711
  %bf.load23 = load i64, i64* %25, align 8, !dbg !8711
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !8711
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !8711
  %cmp26 = icmp eq i32 %bf.cast25, 34, !dbg !8712
  br i1 %cmp26, label %land.lhs.true, label %if.end33, !dbg !8713

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end16
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8714
  %decl_common27 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !8714
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common27, i32 0, i32 2, !dbg !8714
  %27 = bitcast i40* %decl_flag_2 to i64*, !dbg !8714
  %bf.load28 = load i64, i64* %27, align 8, !dbg !8714
  %bf.lshr = lshr i64 %bf.load28, 26, !dbg !8714
  %bf.clear29 = and i64 %bf.lshr, 1, !dbg !8714
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !8714
  %tobool = icmp ne i32 %bf.cast30, 0, !dbg !8714
  br i1 %tobool, label %if.then31, label %if.end33, !dbg !8715

if.then31:                                        ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8716
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8716
  %30 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8716
  %call32 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %29, %struct.data_in* %30), !dbg !8716
  call void @decl_value_expr_insert(%union.tree_node* %28, %union.tree_node* %call32), !dbg !8716
  br label %if.end33, !dbg !8716

if.end33:                                         ; preds = %if.then31, %land.lhs.true, %lor.lhs.false
  ret void, !dbg !8717
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_decl_non_common_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8718 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8719, metadata !DIExpression()), !dbg !8720
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8721, metadata !DIExpression()), !dbg !8722
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8723, metadata !DIExpression()), !dbg !8724
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8725
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8725
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8725
  %bf.load = load i64, i64* %1, align 8, !dbg !8725
  %bf.clear = and i64 %bf.load, 65535, !dbg !8725
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8725
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !8727
  br i1 %cmp, label %if.then, label %if.end, !dbg !8728

if.then:                                          ; preds = %entry
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8729
  %3 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8731
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %2, %struct.data_in* %3), !dbg !8732
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8733
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !8733
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !8733
  store %union.tree_node* %call, %union.tree_node** %arguments, align 8, !dbg !8734
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8735
  %6 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8736
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %5, %struct.data_in* %6), !dbg !8737
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8738
  %decl_non_common2 = bitcast %union.tree_node* %7 to %struct.tree_decl_non_common*, !dbg !8738
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 3, !dbg !8738
  store %union.tree_node* %call1, %union.tree_node** %result, align 8, !dbg !8739
  br label %if.end, !dbg !8740

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8741
  %9 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8742
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %8, %struct.data_in* %9), !dbg !8743
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8744
  %decl_non_common4 = bitcast %union.tree_node* %10 to %struct.tree_decl_non_common*, !dbg !8744
  %vindex = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common4, i32 0, i32 4, !dbg !8744
  store %union.tree_node* %call3, %union.tree_node** %vindex, align 8, !dbg !8745
  ret void, !dbg !8746
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_decl_with_vis_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8747 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %id = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8748, metadata !DIExpression()), !dbg !8749
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8750, metadata !DIExpression()), !dbg !8751
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8752, metadata !DIExpression()), !dbg !8753
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !8754, metadata !DIExpression()), !dbg !8755
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8756
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8757
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8758
  store %union.tree_node* %call, %union.tree_node** %id, align 8, !dbg !8759
  %2 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !8760
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8760
  br i1 %tobool, label %if.then, label %if.end, !dbg !8762

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !8763
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8763
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8763
  %bf.load = load i64, i64* %4, align 8, !dbg !8763
  %bf.clear = and i64 %bf.load, 65535, !dbg !8763
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8763
  %cmp = icmp eq i32 %bf.cast, 1, !dbg !8763
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8763

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8763
  br label %cond.end, !dbg !8763

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !8763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8763
  %5 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !8765
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8765
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !8765
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !8765
  store %union.tree_node* %5, %union.tree_node** %assembler_name, align 8, !dbg !8765
  br label %if.end, !dbg !8766

if.end:                                           ; preds = %cond.end, %entry
  %7 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8767
  %8 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8768
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %7, %struct.data_in* %8), !dbg !8769
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8770
  %decl_with_vis2 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_vis*, !dbg !8770
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis2, i32 0, i32 2, !dbg !8770
  store %union.tree_node* %call1, %union.tree_node** %section_name, align 8, !dbg !8771
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8772
  %11 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8773
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %10, %struct.data_in* %11), !dbg !8774
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8775
  %decl_with_vis4 = bitcast %union.tree_node* %12 to %struct.tree_decl_with_vis*, !dbg !8775
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis4, i32 0, i32 3, !dbg !8775
  store %union.tree_node* %call3, %union.tree_node** %comdat_group, align 8, !dbg !8776
  ret void, !dbg !8777
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_field_decl_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8778 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8779, metadata !DIExpression()), !dbg !8780
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8781, metadata !DIExpression()), !dbg !8782
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8783, metadata !DIExpression()), !dbg !8784
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8785
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8786
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8787
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8788
  %field_decl = bitcast %union.tree_node* %2 to %struct.tree_field_decl*, !dbg !8788
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !8788
  store %union.tree_node* %call, %union.tree_node** %offset, align 8, !dbg !8789
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8790
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8791
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !8792
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8793
  %field_decl2 = bitcast %union.tree_node* %5 to %struct.tree_field_decl*, !dbg !8793
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl2, i32 0, i32 2, !dbg !8793
  store %union.tree_node* %call1, %union.tree_node** %bit_field_type, align 8, !dbg !8794
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8795
  %7 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8796
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %6, %struct.data_in* %7), !dbg !8797
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8798
  %field_decl4 = bitcast %union.tree_node* %8 to %struct.tree_field_decl*, !dbg !8798
  %qualifier = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl4, i32 0, i32 3, !dbg !8798
  store %union.tree_node* %call3, %union.tree_node** %qualifier, align 8, !dbg !8799
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8800
  %10 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8801
  %call5 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %9, %struct.data_in* %10), !dbg !8802
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8803
  %field_decl6 = bitcast %union.tree_node* %11 to %struct.tree_field_decl*, !dbg !8803
  %bit_offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl6, i32 0, i32 4, !dbg !8803
  store %union.tree_node* %call5, %union.tree_node** %bit_offset, align 8, !dbg !8804
  %12 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8805
  %13 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8806
  %call7 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %12, %struct.data_in* %13), !dbg !8807
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8808
  %field_decl8 = bitcast %union.tree_node* %14 to %struct.tree_field_decl*, !dbg !8808
  %fcontext = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl8, i32 0, i32 5, !dbg !8808
  store %union.tree_node* %call7, %union.tree_node** %fcontext, align 8, !dbg !8809
  %15 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8810
  %16 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8811
  %call9 = call %union.tree_node* @lto_input_chain(%struct.lto_input_block* %15, %struct.data_in* %16), !dbg !8812
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8813
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !8813
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8813
  store %union.tree_node* %call9, %union.tree_node** %chain, align 8, !dbg !8814
  ret void, !dbg !8815
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_function_decl_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8816 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8817, metadata !DIExpression()), !dbg !8818
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8819, metadata !DIExpression()), !dbg !8820
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8821, metadata !DIExpression()), !dbg !8822
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8823
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8824
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8825
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8826
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !8826
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 2, !dbg !8826
  store %union.tree_node* %call, %union.tree_node** %personality, align 8, !dbg !8827
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8828
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8829
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !8830
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8831
  %function_decl2 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !8831
  %function_specific_target = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 3, !dbg !8831
  store %union.tree_node* %call1, %union.tree_node** %function_specific_target, align 8, !dbg !8832
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8833
  %7 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8834
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %6, %struct.data_in* %7), !dbg !8835
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8836
  %function_decl4 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !8836
  %function_specific_optimization = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl4, i32 0, i32 4, !dbg !8836
  store %union.tree_node* %call3, %union.tree_node** %function_specific_optimization, align 8, !dbg !8837
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8838
  %function_decl5 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !8838
  %personality6 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl5, i32 0, i32 2, !dbg !8838
  %10 = load %union.tree_node*, %union.tree_node** %personality6, align 8, !dbg !8838
  %tobool = icmp ne %union.tree_node* %10, null, !dbg !8838
  br i1 %tobool, label %if.then, label %if.end, !dbg !8840

if.then:                                          ; preds = %entry
  call void @lto_init_eh(), !dbg !8841
  br label %if.end, !dbg !8841

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8842
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_type_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8843 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8844, metadata !DIExpression()), !dbg !8845
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8846, metadata !DIExpression()), !dbg !8847
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8848, metadata !DIExpression()), !dbg !8849
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8850
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8850
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8850
  %bf.load = load i64, i64* %1, align 8, !dbg !8850
  %bf.clear = and i64 %bf.load, 65535, !dbg !8850
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8850
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !8852
  br i1 %cmp, label %if.then, label %if.else, !dbg !8853

if.then:                                          ; preds = %entry
  %2 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8854
  %3 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8855
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %2, %struct.data_in* %3), !dbg !8856
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8857
  %type = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !8857
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 1, !dbg !8857
  store %union.tree_node* %call, %union.tree_node** %values, align 8, !dbg !8858
  br label %if.end54, !dbg !8857

if.else:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8859
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8859
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8859
  %bf.load2 = load i64, i64* %6, align 8, !dbg !8859
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8859
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8859
  %cmp5 = icmp eq i32 %bf.cast4, 15, !dbg !8861
  br i1 %cmp5, label %if.then6, label %if.else10, !dbg !8862

if.then6:                                         ; preds = %if.else
  %7 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8863
  %8 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8864
  %call7 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %7, %struct.data_in* %8), !dbg !8865
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8866
  %type8 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !8866
  %values9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 1, !dbg !8866
  store %union.tree_node* %call7, %union.tree_node** %values9, align 8, !dbg !8867
  br label %if.end53, !dbg !8866

if.else10:                                        ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8868
  %base11 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8868
  %11 = bitcast %struct.tree_base* %base11 to i64*, !dbg !8868
  %bf.load12 = load i64, i64* %11, align 8, !dbg !8868
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !8868
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !8868
  %cmp15 = icmp eq i32 %bf.cast14, 16, !dbg !8870
  br i1 %cmp15, label %if.then21, label %lor.lhs.false, !dbg !8871

lor.lhs.false:                                    ; preds = %if.else10
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8872
  %base16 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !8872
  %13 = bitcast %struct.tree_base* %base16 to i64*, !dbg !8872
  %bf.load17 = load i64, i64* %13, align 8, !dbg !8872
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !8872
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !8872
  %cmp20 = icmp eq i32 %bf.cast19, 17, !dbg !8873
  br i1 %cmp20, label %if.then21, label %if.else25, !dbg !8874

if.then21:                                        ; preds = %lor.lhs.false, %if.else10
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8875
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8876
  %call22 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %14, %struct.data_in* %15), !dbg !8877
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8878
  %type23 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !8878
  %values24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 1, !dbg !8878
  store %union.tree_node* %call22, %union.tree_node** %values24, align 8, !dbg !8879
  br label %if.end52, !dbg !8878

if.else25:                                        ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8880
  %base26 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8880
  %18 = bitcast %struct.tree_base* %base26 to i64*, !dbg !8880
  %bf.load27 = load i64, i64* %18, align 8, !dbg !8880
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !8880
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !8880
  %cmp30 = icmp eq i32 %bf.cast29, 20, !dbg !8882
  br i1 %cmp30, label %if.then37, label %lor.lhs.false31, !dbg !8883

lor.lhs.false31:                                  ; preds = %if.else25
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8884
  %base32 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !8884
  %20 = bitcast %struct.tree_base* %base32 to i64*, !dbg !8884
  %bf.load33 = load i64, i64* %20, align 8, !dbg !8884
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !8884
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !8884
  %cmp36 = icmp eq i32 %bf.cast35, 21, !dbg !8885
  br i1 %cmp36, label %if.then37, label %if.else41, !dbg !8886

if.then37:                                        ; preds = %lor.lhs.false31, %if.else25
  %21 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8887
  %22 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8888
  %call38 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %21, %struct.data_in* %22), !dbg !8889
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8890
  %type39 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !8890
  %values40 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type39, i32 0, i32 1, !dbg !8890
  store %union.tree_node* %call38, %union.tree_node** %values40, align 8, !dbg !8891
  br label %if.end51, !dbg !8890

if.else41:                                        ; preds = %lor.lhs.false31
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8892
  %base42 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8892
  %25 = bitcast %struct.tree_base* %base42 to i64*, !dbg !8892
  %bf.load43 = load i64, i64* %25, align 8, !dbg !8892
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !8892
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !8892
  %cmp46 = icmp eq i32 %bf.cast45, 14, !dbg !8894
  br i1 %cmp46, label %if.then47, label %if.end, !dbg !8895

if.then47:                                        ; preds = %if.else41
  %26 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8896
  %27 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8897
  %call48 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %26, %struct.data_in* %27), !dbg !8898
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8899
  %type49 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !8899
  %values50 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 1, !dbg !8899
  store %union.tree_node* %call48, %union.tree_node** %values50, align 8, !dbg !8900
  br label %if.end, !dbg !8899

if.end:                                           ; preds = %if.then47, %if.else41
  br label %if.end51

if.end51:                                         ; preds = %if.end, %if.then37
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then21
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then6
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then
  %29 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8901
  %30 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8902
  %call55 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %29, %struct.data_in* %30), !dbg !8903
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8904
  %type56 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !8904
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 2, !dbg !8904
  store %union.tree_node* %call55, %union.tree_node** %size, align 8, !dbg !8905
  %32 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8906
  %33 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8907
  %call57 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %32, %struct.data_in* %33), !dbg !8908
  %34 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8909
  %type58 = bitcast %union.tree_node* %34 to %struct.tree_type*, !dbg !8909
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i32 0, i32 3, !dbg !8909
  store %union.tree_node* %call57, %union.tree_node** %size_unit, align 8, !dbg !8910
  %35 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8911
  %36 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8912
  %call59 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %35, %struct.data_in* %36), !dbg !8913
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8914
  %type60 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !8914
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type60, i32 0, i32 4, !dbg !8914
  store %union.tree_node* %call59, %union.tree_node** %attributes, align 8, !dbg !8915
  %38 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8916
  %39 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8917
  %call61 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %38, %struct.data_in* %39), !dbg !8918
  %40 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8919
  %type62 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !8919
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type62, i32 0, i32 12, !dbg !8919
  store %union.tree_node* %call61, %union.tree_node** %name, align 8, !dbg !8920
  %41 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8921
  %base63 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !8921
  %42 = bitcast %struct.tree_base* %base63 to i64*, !dbg !8921
  %bf.load64 = load i64, i64* %42, align 8, !dbg !8921
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !8921
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !8921
  %cmp67 = icmp eq i32 %bf.cast66, 10, !dbg !8921
  br i1 %cmp67, label %if.end77, label %lor.lhs.false68, !dbg !8921

lor.lhs.false68:                                  ; preds = %if.end54
  %43 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8921
  %base69 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !8921
  %44 = bitcast %struct.tree_base* %base69 to i64*, !dbg !8921
  %bf.load70 = load i64, i64* %44, align 8, !dbg !8921
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !8921
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !8921
  %cmp73 = icmp eq i32 %bf.cast72, 12, !dbg !8921
  br i1 %cmp73, label %if.end77, label %if.then74, !dbg !8923

if.then74:                                        ; preds = %lor.lhs.false68
  %45 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8924
  %46 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8925
  %call75 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %45, %struct.data_in* %46), !dbg !8926
  %47 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8927
  %type76 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !8927
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type76, i32 0, i32 13, !dbg !8927
  store %union.tree_node* %call75, %union.tree_node** %minval, align 8, !dbg !8928
  br label %if.end77, !dbg !8927

if.end77:                                         ; preds = %if.then74, %lor.lhs.false68, %if.end54
  %48 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8929
  %49 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8930
  %call78 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %48, %struct.data_in* %49), !dbg !8931
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8932
  %type79 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !8932
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type79, i32 0, i32 14, !dbg !8932
  store %union.tree_node* %call78, %union.tree_node** %maxval, align 8, !dbg !8933
  %51 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8934
  %52 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8935
  %call80 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %51, %struct.data_in* %52), !dbg !8936
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8937
  %type81 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !8937
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type81, i32 0, i32 16, !dbg !8937
  store %union.tree_node* %call80, %union.tree_node** %main_variant, align 8, !dbg !8938
  %54 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8939
  %base82 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !8939
  %55 = bitcast %struct.tree_base* %base82 to i64*, !dbg !8939
  %bf.load83 = load i64, i64* %55, align 8, !dbg !8939
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !8939
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !8939
  %cmp86 = icmp eq i32 %bf.cast85, 16, !dbg !8939
  br i1 %cmp86, label %if.then99, label %lor.lhs.false87, !dbg !8939

lor.lhs.false87:                                  ; preds = %if.end77
  %56 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8939
  %base88 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !8939
  %57 = bitcast %struct.tree_base* %base88 to i64*, !dbg !8939
  %bf.load89 = load i64, i64* %57, align 8, !dbg !8939
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !8939
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !8939
  %cmp92 = icmp eq i32 %bf.cast91, 17, !dbg !8939
  br i1 %cmp92, label %if.then99, label %lor.lhs.false93, !dbg !8939

lor.lhs.false93:                                  ; preds = %lor.lhs.false87
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8939
  %base94 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !8939
  %59 = bitcast %struct.tree_base* %base94 to i64*, !dbg !8939
  %bf.load95 = load i64, i64* %59, align 8, !dbg !8939
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !8939
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !8939
  %cmp98 = icmp eq i32 %bf.cast97, 18, !dbg !8939
  br i1 %cmp98, label %if.then99, label %if.end102, !dbg !8941

if.then99:                                        ; preds = %lor.lhs.false93, %lor.lhs.false87, %if.end77
  %60 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8942
  %61 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8943
  %call100 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %60, %struct.data_in* %61), !dbg !8944
  %62 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8945
  %type101 = bitcast %union.tree_node* %62 to %struct.tree_type*, !dbg !8945
  %binfo = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type101, i32 0, i32 17, !dbg !8945
  store %union.tree_node* %call100, %union.tree_node** %binfo, align 8, !dbg !8946
  br label %if.end102, !dbg !8945

if.end102:                                        ; preds = %if.then99, %lor.lhs.false93
  %63 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8947
  %64 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8948
  %call103 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %63, %struct.data_in* %64), !dbg !8949
  %65 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8950
  %type104 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !8950
  %context = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type104, i32 0, i32 18, !dbg !8950
  store %union.tree_node* %call103, %union.tree_node** %context, align 8, !dbg !8951
  %66 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8952
  %67 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8953
  %call105 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %66, %struct.data_in* %67), !dbg !8954
  %68 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8955
  %type106 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !8955
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type106, i32 0, i32 19, !dbg !8955
  store %union.tree_node* %call105, %union.tree_node** %canonical, align 8, !dbg !8956
  %69 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8957
  %70 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8958
  %call107 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %69, %struct.data_in* %70), !dbg !8959
  %71 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8960
  %common = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !8960
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8960
  store %union.tree_node* %call107, %union.tree_node** %chain, align 8, !dbg !8961
  ret void, !dbg !8962
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_list_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8963 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8964, metadata !DIExpression()), !dbg !8965
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8966, metadata !DIExpression()), !dbg !8967
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8968, metadata !DIExpression()), !dbg !8969
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8970
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8971
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !8972
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8973
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !8973
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !8973
  store %union.tree_node* %call, %union.tree_node** %purpose, align 8, !dbg !8974
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8975
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8976
  %call1 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !8977
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8978
  %list2 = bitcast %union.tree_node* %5 to %struct.tree_list*, !dbg !8978
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list2, i32 0, i32 2, !dbg !8978
  store %union.tree_node* %call1, %union.tree_node** %value, align 8, !dbg !8979
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !8980
  %7 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !8981
  %call3 = call %union.tree_node* @lto_input_chain(%struct.lto_input_block* %6, %struct.data_in* %7), !dbg !8982
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8983
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !8983
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8983
  store %union.tree_node* %call3, %union.tree_node** %chain, align 8, !dbg !8984
  ret void, !dbg !8985
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_vec_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !8986 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !8987, metadata !DIExpression()), !dbg !8988
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !8989, metadata !DIExpression()), !dbg !8990
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8991, metadata !DIExpression()), !dbg !8992
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8993, metadata !DIExpression()), !dbg !8994
  store i32 0, i32* %i, align 4, !dbg !8995
  br label %for.cond, !dbg !8997

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8998
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9000
  %vec = bitcast %union.tree_node* %1 to %struct.tree_vec*, !dbg !9000
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 1, !dbg !9000
  %2 = load i32, i32* %length, align 8, !dbg !9000
  %cmp = icmp slt i32 %0, %2, !dbg !9001
  br i1 %cmp, label %for.body, label %for.end, !dbg !9002

for.body:                                         ; preds = %for.cond
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9003
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9004
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !9005
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9006
  %vec1 = bitcast %union.tree_node* %5 to %struct.tree_vec*, !dbg !9006
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec1, i32 0, i32 2, !dbg !9006
  %6 = load i32, i32* %i, align 4, !dbg !9006
  %idxprom = sext i32 %6 to i64, !dbg !9006
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %idxprom, !dbg !9006
  store %union.tree_node* %call, %union.tree_node** %arrayidx, align 8, !dbg !9007
  br label %for.inc, !dbg !9006

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !9008
  %inc = add nsw i32 %7, 1, !dbg !9008
  store i32 %inc, i32* %i, align 4, !dbg !9008
  br label %for.cond, !dbg !9009, !llvm.loop !9010

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9012
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_exp_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !9013 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %loc = alloca i32, align 4
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !9014, metadata !DIExpression()), !dbg !9015
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !9016, metadata !DIExpression()), !dbg !9017
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9018, metadata !DIExpression()), !dbg !9019
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9020, metadata !DIExpression()), !dbg !9021
  call void @llvm.dbg.declare(metadata i32* %length, metadata !9022, metadata !DIExpression()), !dbg !9023
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !9024, metadata !DIExpression()), !dbg !9025
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9026
  %call = call i64 @lto_input_sleb128(%struct.lto_input_block* %0), !dbg !9027
  %conv = trunc i64 %call to i32, !dbg !9027
  store i32 %conv, i32* %length, align 4, !dbg !9028
  %1 = load i32, i32* %length, align 4, !dbg !9029
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9029
  %call1 = call i32 @tree_operand_length(%union.tree_node* %2), !dbg !9029
  %cmp = icmp eq i32 %1, %call1, !dbg !9029
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9029

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i32 2235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9029
  br label %cond.end, !dbg !9029

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9029

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9029
  store i32 0, i32* %i, align 4, !dbg !9030
  br label %for.cond, !dbg !9032

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load i32, i32* %i, align 4, !dbg !9033
  %4 = load i32, i32* %length, align 4, !dbg !9035
  %cmp3 = icmp slt i32 %3, %4, !dbg !9036
  br i1 %cmp3, label %for.body, label %for.end, !dbg !9037

for.body:                                         ; preds = %for.cond
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9038
  %6 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9039
  %call5 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %5, %struct.data_in* %6), !dbg !9040
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9041
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !9041
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9041
  %8 = load i32, i32* %i, align 4, !dbg !9041
  %idxprom = sext i32 %8 to i64, !dbg !9041
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !9041
  store %union.tree_node* %call5, %union.tree_node** %arrayidx, align 8, !dbg !9042
  br label %for.inc, !dbg !9041

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !9043
  %inc = add nsw i32 %9, 1, !dbg !9043
  store i32 %inc, i32* %i, align 4, !dbg !9043
  br label %for.cond, !dbg !9044, !llvm.loop !9045

for.end:                                          ; preds = %for.cond
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9047
  %11 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9048
  %call6 = call i32 @lto_input_location(%struct.lto_input_block* %10, %struct.data_in* %11), !dbg !9049
  store i32 %call6, i32* %loc, align 4, !dbg !9050
  %12 = load i32, i32* %loc, align 4, !dbg !9051
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9051
  %exp7 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !9051
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 1, !dbg !9051
  store i32 %12, i32* %locus, align 8, !dbg !9051
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9052
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9053
  %call8 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %14, %struct.data_in* %15), !dbg !9054
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9055
  %call9 = call %union.tree_node** @tree_block(%union.tree_node* %16), !dbg !9055
  store %union.tree_node* %call8, %union.tree_node** %call9, align 8, !dbg !9056
  ret void, !dbg !9057
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_block_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !9058 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !9059, metadata !DIExpression()), !dbg !9060
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !9061, metadata !DIExpression()), !dbg !9062
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9063, metadata !DIExpression()), !dbg !9064
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9065, metadata !DIExpression()), !dbg !9066
  call void @llvm.dbg.declare(metadata i32* %len, metadata !9067, metadata !DIExpression()), !dbg !9068
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9069
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9070
  %call = call i32 @lto_input_location(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !9071
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9072
  %block = bitcast %union.tree_node* %2 to %struct.tree_block*, !dbg !9072
  %locus = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 2, !dbg !9072
  store i32 %call, i32* %locus, align 4, !dbg !9073
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9074
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9075
  %call1 = call %union.tree_node* @lto_input_chain(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !9076
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9077
  %block2 = bitcast %union.tree_node* %5 to %struct.tree_block*, !dbg !9077
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 3, !dbg !9077
  store %union.tree_node* %call1, %union.tree_node** %vars, align 8, !dbg !9078
  %6 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9079
  %call3 = call i64 @lto_input_uleb128(%struct.lto_input_block* %6), !dbg !9080
  %conv = trunc i64 %call3 to i32, !dbg !9080
  store i32 %conv, i32* %len, align 4, !dbg !9081
  store i32 0, i32* %i, align 4, !dbg !9082
  br label %for.cond, !dbg !9084

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4, !dbg !9085
  %8 = load i32, i32* %len, align 4, !dbg !9087
  %cmp = icmp ult i32 %7, %8, !dbg !9088
  br i1 %cmp, label %for.body, label %for.end, !dbg !9089

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9090, metadata !DIExpression()), !dbg !9092
  %9 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9093
  %10 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9094
  %call5 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %9, %struct.data_in* %10), !dbg !9095
  store %union.tree_node* %call5, %union.tree_node** %t, align 8, !dbg !9092
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9096
  %block6 = bitcast %union.tree_node* %11 to %struct.tree_block*, !dbg !9096
  %nonlocalized_vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block6, i32 0, i32 4, !dbg !9096
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9096
  %call7 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %nonlocalized_vars, %union.tree_node* %12), !dbg !9096
  br label %for.inc, !dbg !9097

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !9098
  %inc = add i32 %13, 1, !dbg !9098
  store i32 %inc, i32* %i, align 4, !dbg !9098
  br label %for.cond, !dbg !9099, !llvm.loop !9100

for.end:                                          ; preds = %for.cond
  %14 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9102
  %15 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9103
  %call8 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %14, %struct.data_in* %15), !dbg !9104
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9105
  %block9 = bitcast %union.tree_node* %16 to %struct.tree_block*, !dbg !9105
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block9, i32 0, i32 6, !dbg !9105
  store %union.tree_node* %call8, %union.tree_node** %supercontext, align 8, !dbg !9106
  %17 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9107
  %18 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9108
  %call10 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %17, %struct.data_in* %18), !dbg !9109
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9110
  %block11 = bitcast %union.tree_node* %19 to %struct.tree_block*, !dbg !9110
  %abstract_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block11, i32 0, i32 7, !dbg !9110
  store %union.tree_node* %call10, %union.tree_node** %abstract_origin, align 8, !dbg !9111
  %20 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9112
  %21 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9113
  %call12 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %20, %struct.data_in* %21), !dbg !9114
  %22 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9115
  %block13 = bitcast %union.tree_node* %22 to %struct.tree_block*, !dbg !9115
  %fragment_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block13, i32 0, i32 8, !dbg !9115
  store %union.tree_node* %call12, %union.tree_node** %fragment_origin, align 8, !dbg !9116
  %23 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9117
  %24 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9118
  %call14 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %23, %struct.data_in* %24), !dbg !9119
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9120
  %block15 = bitcast %union.tree_node* %25 to %struct.tree_block*, !dbg !9120
  %fragment_chain = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block15, i32 0, i32 9, !dbg !9120
  store %union.tree_node* %call14, %union.tree_node** %fragment_chain, align 8, !dbg !9121
  %26 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9122
  %27 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9123
  %call16 = call %union.tree_node* @lto_input_chain(%struct.lto_input_block* %26, %struct.data_in* %27), !dbg !9124
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9125
  %block17 = bitcast %union.tree_node* %28 to %struct.tree_block*, !dbg !9125
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block17, i32 0, i32 5, !dbg !9125
  store %union.tree_node* %call16, %union.tree_node** %subblocks, align 8, !dbg !9126
  ret void, !dbg !9127
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_binfo_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !9128 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %a = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !9129, metadata !DIExpression()), !dbg !9130
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !9131, metadata !DIExpression()), !dbg !9132
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9133, metadata !DIExpression()), !dbg !9134
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9135, metadata !DIExpression()), !dbg !9136
  call void @llvm.dbg.declare(metadata i32* %len, metadata !9137, metadata !DIExpression()), !dbg !9138
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9139, metadata !DIExpression()), !dbg !9140
  br label %do.body, !dbg !9141

do.body:                                          ; preds = %do.cond, %entry
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9142
  %1 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9144
  %call = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %0, %struct.data_in* %1), !dbg !9145
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !9146
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9147
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9147
  br i1 %tobool, label %if.then, label %if.end, !dbg !9149

if.then:                                          ; preds = %do.body
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9150
  %binfo = bitcast %union.tree_node* %3 to %struct.tree_binfo*, !dbg !9150
  %base_binfos = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo, i32 0, i32 9, !dbg !9150
  %tobool1 = icmp ne %struct.VEC_tree_none* %base_binfos, null, !dbg !9150
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !9150

cond.true:                                        ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9150
  %binfo2 = bitcast %union.tree_node* %4 to %struct.tree_binfo*, !dbg !9150
  %base_binfos3 = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo2, i32 0, i32 9, !dbg !9150
  %base = getelementptr inbounds %struct.VEC_tree_none, %struct.VEC_tree_none* %base_binfos3, i32 0, i32 0, !dbg !9150
  br label %cond.end, !dbg !9150

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9150

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9150
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9150
  %call4 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !9150
  br label %if.end, !dbg !9150

if.end:                                           ; preds = %cond.end, %do.body
  br label %do.cond, !dbg !9151

do.cond:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9152
  %tobool5 = icmp ne %union.tree_node* %6, null, !dbg !9151
  br i1 %tobool5, label %do.body, label %do.end, !dbg !9151, !llvm.loop !9153

do.end:                                           ; preds = %do.cond
  %7 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9155
  %8 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9156
  %call6 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %7, %struct.data_in* %8), !dbg !9157
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9158
  %binfo7 = bitcast %union.tree_node* %9 to %struct.tree_binfo*, !dbg !9158
  %offset = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo7, i32 0, i32 1, !dbg !9158
  store %union.tree_node* %call6, %union.tree_node** %offset, align 8, !dbg !9159
  %10 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9160
  %11 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9161
  %call8 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %10, %struct.data_in* %11), !dbg !9162
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9163
  %binfo9 = bitcast %union.tree_node* %12 to %struct.tree_binfo*, !dbg !9163
  %vtable = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo9, i32 0, i32 2, !dbg !9163
  store %union.tree_node* %call8, %union.tree_node** %vtable, align 8, !dbg !9164
  %13 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9165
  %14 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9166
  %call10 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %13, %struct.data_in* %14), !dbg !9167
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9168
  %binfo11 = bitcast %union.tree_node* %15 to %struct.tree_binfo*, !dbg !9168
  %virtuals = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo11, i32 0, i32 3, !dbg !9168
  store %union.tree_node* %call10, %union.tree_node** %virtuals, align 8, !dbg !9169
  %16 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9170
  %17 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9171
  %call12 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %16, %struct.data_in* %17), !dbg !9172
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9173
  %binfo13 = bitcast %union.tree_node* %18 to %struct.tree_binfo*, !dbg !9173
  %vptr_field = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo13, i32 0, i32 4, !dbg !9173
  store %union.tree_node* %call12, %union.tree_node** %vptr_field, align 8, !dbg !9174
  %19 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9175
  %call14 = call i64 @lto_input_uleb128(%struct.lto_input_block* %19), !dbg !9176
  %conv = trunc i64 %call14 to i32, !dbg !9176
  store i32 %conv, i32* %len, align 4, !dbg !9177
  store i32 0, i32* %i, align 4, !dbg !9178
  br label %for.cond, !dbg !9180

for.cond:                                         ; preds = %for.inc, %do.end
  %20 = load i32, i32* %i, align 4, !dbg !9181
  %21 = load i32, i32* %len, align 4, !dbg !9183
  %cmp = icmp ult i32 %20, %21, !dbg !9184
  br i1 %cmp, label %for.body, label %for.end, !dbg !9185

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !9186, metadata !DIExpression()), !dbg !9188
  %22 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9189
  %23 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9190
  %call16 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %22, %struct.data_in* %23), !dbg !9191
  store %union.tree_node* %call16, %union.tree_node** %a, align 8, !dbg !9188
  %24 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9192
  %binfo17 = bitcast %union.tree_node* %24 to %struct.tree_binfo*, !dbg !9192
  %base_accesses = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo17, i32 0, i32 5, !dbg !9192
  %25 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !9192
  %call18 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %base_accesses, %union.tree_node* %25), !dbg !9192
  br label %for.inc, !dbg !9193

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %i, align 4, !dbg !9194
  %inc = add i32 %26, 1, !dbg !9194
  store i32 %inc, i32* %i, align 4, !dbg !9194
  br label %for.cond, !dbg !9195, !llvm.loop !9196

for.end:                                          ; preds = %for.cond
  %27 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9198
  %28 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9199
  %call19 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %27, %struct.data_in* %28), !dbg !9200
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9201
  %binfo20 = bitcast %union.tree_node* %29 to %struct.tree_binfo*, !dbg !9201
  %inheritance = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo20, i32 0, i32 6, !dbg !9201
  store %union.tree_node* %call19, %union.tree_node** %inheritance, align 8, !dbg !9202
  %30 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9203
  %31 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9204
  %call21 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %30, %struct.data_in* %31), !dbg !9205
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9206
  %binfo22 = bitcast %union.tree_node* %32 to %struct.tree_binfo*, !dbg !9206
  %vtt_subvtt = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo22, i32 0, i32 7, !dbg !9206
  store %union.tree_node* %call21, %union.tree_node** %vtt_subvtt, align 8, !dbg !9207
  %33 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9208
  %34 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9209
  %call23 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %33, %struct.data_in* %34), !dbg !9210
  %35 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9211
  %binfo24 = bitcast %union.tree_node* %35 to %struct.tree_binfo*, !dbg !9211
  %vtt_vptr = getelementptr inbounds %struct.tree_binfo, %struct.tree_binfo* %binfo24, i32 0, i32 8, !dbg !9211
  store %union.tree_node* %call23, %union.tree_node** %vtt_vptr, align 8, !dbg !9212
  ret void, !dbg !9213
}

; Function Attrs: noinline nounwind uwtable
define internal void @lto_input_ts_constructor_tree_pointers(%struct.lto_input_block* %ib, %struct.data_in* %data_in, %union.tree_node* %expr) #0 !dbg !9214 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %index = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %_ce___ = alloca %struct.constructor_elt_d*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !9215, metadata !DIExpression()), !dbg !9216
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !9217, metadata !DIExpression()), !dbg !9218
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9219, metadata !DIExpression()), !dbg !9220
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9221, metadata !DIExpression()), !dbg !9222
  call void @llvm.dbg.declare(metadata i32* %len, metadata !9223, metadata !DIExpression()), !dbg !9224
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9225
  %call = call i64 @lto_input_uleb128(%struct.lto_input_block* %0), !dbg !9226
  %conv = trunc i64 %call to i32, !dbg !9226
  store i32 %conv, i32* %len, align 4, !dbg !9227
  store i32 0, i32* %i, align 4, !dbg !9228
  br label %for.cond, !dbg !9230

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !9231
  %2 = load i32, i32* %len, align 4, !dbg !9233
  %cmp = icmp ult i32 %1, %2, !dbg !9234
  br i1 %cmp, label %for.body, label %for.end, !dbg !9235

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !9236, metadata !DIExpression()), !dbg !9238
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !9239, metadata !DIExpression()), !dbg !9240
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9241
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9242
  %call2 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !9243
  store %union.tree_node* %call2, %union.tree_node** %index, align 8, !dbg !9244
  %5 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9245
  %6 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9246
  %call3 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %5, %struct.data_in* %6), !dbg !9247
  store %union.tree_node* %call3, %union.tree_node** %value, align 8, !dbg !9248
  br label %do.body, !dbg !9249

do.body:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %_ce___, metadata !9250, metadata !DIExpression()), !dbg !9253
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9253
  %constructor = bitcast %union.tree_node* %7 to %struct.tree_constructor*, !dbg !9253
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !9253
  %call4 = call %struct.constructor_elt_d* @VEC_constructor_elt_gc_safe_push(%struct.VEC_constructor_elt_gc** %elts, %struct.constructor_elt_d* null), !dbg !9253
  store %struct.constructor_elt_d* %call4, %struct.constructor_elt_d** %_ce___, align 8, !dbg !9253
  %8 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !9253
  %9 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %_ce___, align 8, !dbg !9253
  %index5 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %9, i32 0, i32 0, !dbg !9253
  store %union.tree_node* %8, %union.tree_node** %index5, align 8, !dbg !9253
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9253
  %11 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %_ce___, align 8, !dbg !9253
  %value6 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %11, i32 0, i32 1, !dbg !9253
  store %union.tree_node* %10, %union.tree_node** %value6, align 8, !dbg !9253
  br label %do.end, !dbg !9253

do.end:                                           ; preds = %do.body
  br label %for.inc, !dbg !9254

for.inc:                                          ; preds = %do.end
  %12 = load i32, i32* %i, align 4, !dbg !9255
  %inc = add i32 %12, 1, !dbg !9255
  store i32 %inc, i32* %i, align 4, !dbg !9255
  br label %for.cond, !dbg !9256, !llvm.loop !9257

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9259
}

declare dso_local void @sorry(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lto_input_chain(%struct.lto_input_block* %ib, %struct.data_in* %data_in) #0 !dbg !9260 {
entry:
  %ib.addr = alloca %struct.lto_input_block*, align 8
  %data_in.addr = alloca %struct.data_in*, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  %first = alloca %union.tree_node*, align 8
  %prev = alloca %union.tree_node*, align 8
  %curr = alloca %union.tree_node*, align 8
  store %struct.lto_input_block* %ib, %struct.lto_input_block** %ib.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lto_input_block** %ib.addr, metadata !9261, metadata !DIExpression()), !dbg !9262
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !9263, metadata !DIExpression()), !dbg !9264
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9265, metadata !DIExpression()), !dbg !9266
  call void @llvm.dbg.declare(metadata i32* %count, metadata !9267, metadata !DIExpression()), !dbg !9268
  call void @llvm.dbg.declare(metadata %union.tree_node** %first, metadata !9269, metadata !DIExpression()), !dbg !9270
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev, metadata !9271, metadata !DIExpression()), !dbg !9272
  call void @llvm.dbg.declare(metadata %union.tree_node** %curr, metadata !9273, metadata !DIExpression()), !dbg !9274
  store %union.tree_node* null, %union.tree_node** %prev, align 8, !dbg !9275
  store %union.tree_node* null, %union.tree_node** %first, align 8, !dbg !9276
  %0 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9277
  %call = call i64 @lto_input_sleb128(%struct.lto_input_block* %0), !dbg !9278
  %conv = trunc i64 %call to i32, !dbg !9278
  store i32 %conv, i32* %count, align 4, !dbg !9279
  store i32 0, i32* %i, align 4, !dbg !9280
  br label %for.cond, !dbg !9282

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !9283
  %2 = load i32, i32* %count, align 4, !dbg !9285
  %cmp = icmp slt i32 %1, %2, !dbg !9286
  br i1 %cmp, label %for.body, label %for.end, !dbg !9287

for.body:                                         ; preds = %for.cond
  %3 = load %struct.lto_input_block*, %struct.lto_input_block** %ib.addr, align 8, !dbg !9288
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9290
  %call2 = call %union.tree_node* @lto_input_tree(%struct.lto_input_block* %3, %struct.data_in* %4), !dbg !9291
  store %union.tree_node* %call2, %union.tree_node** %curr, align 8, !dbg !9292
  %5 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !9293
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !9293
  br i1 %tobool, label %if.then, label %if.else, !dbg !9295

if.then:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %curr, align 8, !dbg !9296
  %7 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !9297
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !9297
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9297
  store %union.tree_node* %6, %union.tree_node** %chain, align 8, !dbg !9298
  br label %if.end, !dbg !9297

if.else:                                          ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %curr, align 8, !dbg !9299
  store %union.tree_node* %8, %union.tree_node** %first, align 8, !dbg !9300
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %curr, align 8, !dbg !9301
  %common3 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !9301
  %chain4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1, !dbg !9301
  store %union.tree_node* null, %union.tree_node** %chain4, align 8, !dbg !9302
  %10 = load %union.tree_node*, %union.tree_node** %curr, align 8, !dbg !9303
  store %union.tree_node* %10, %union.tree_node** %prev, align 8, !dbg !9304
  br label %for.inc, !dbg !9305

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !9306
  %inc = add nsw i32 %11, 1, !dbg !9306
  store i32 %inc, i32* %i, align 4, !dbg !9306
  br label %for.cond, !dbg !9307, !llvm.loop !9308

for.end:                                          ; preds = %for.cond
  %12 = load %union.tree_node*, %union.tree_node** %first, align 8, !dbg !9310
  ret %union.tree_node* %12, !dbg !9311
}

declare dso_local void @decl_value_expr_insert(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !9312 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !9317
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9317
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9317
  %bf.load = load i64, i64* %1, align 8, !dbg !9317
  %bf.clear = and i64 %bf.load, 65535, !dbg !9317
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9317
  %idxprom = sext i32 %bf.cast to i64, !dbg !9317
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9317
  %2 = load i32, i32* %arrayidx, align 4, !dbg !9317
  %cmp = icmp eq i32 %2, 9, !dbg !9317
  br i1 %cmp, label %if.then, label %if.else, !dbg !9319

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !9320
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9320
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9320
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9320
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !9320
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !9320
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9320
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !9320
  %5 = load i64, i64* %low, align 8, !dbg !9320
  %conv = trunc i64 %5 to i32, !dbg !9320
  store i32 %conv, i32* %retval, align 4, !dbg !9321
  br label %return, !dbg !9321

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !9322
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9322
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !9322
  %bf.load4 = load i64, i64* %7, align 8, !dbg !9322
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !9322
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !9322
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !9322
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !9322
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !9322
  %conv9 = zext i8 %8 to i32, !dbg !9322
  store i32 %conv9, i32* %retval, align 4, !dbg !9323
  br label %return, !dbg !9323

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9324
  ret i32 %9, !dbg !9324
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !9325 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !9328, metadata !DIExpression()), !dbg !9329
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !9330, metadata !DIExpression()), !dbg !9329
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9329
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !9329
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9329
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !9329
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !9329
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9329

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9329
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !9329
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !9329
  br label %cond.end, !dbg !9329

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9329

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9329
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !9329
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !9329
  ret %union.tree_node** %call1, !dbg !9329
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !9331 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !9332, metadata !DIExpression()), !dbg !9333
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9334, metadata !DIExpression()), !dbg !9333
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9335, metadata !DIExpression()), !dbg !9333
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9333
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !9333
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !9333
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9333

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9333
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !9333
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !9333
  br label %cond.end, !dbg !9333

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9333

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9333
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9333
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !9333
  %tobool1 = icmp ne i32 %call, 0, !dbg !9333
  %lnot = xor i1 %tobool1, true, !dbg !9333
  %lnot.ext = zext i1 %lnot to i32, !dbg !9333
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9333
  %5 = load i32, i32* %extend, align 4, !dbg !9336
  %tobool2 = icmp ne i32 %5, 0, !dbg !9336
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9333

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9336
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !9336
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !9336
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9336
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !9336
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !9336
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9336
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !9336
  br label %if.end, !dbg !9336

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9333
  ret i32 %12, !dbg !9333
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_gc_safe_push(%struct.VEC_constructor_elt_gc** %vec_, %struct.constructor_elt_d* %obj_) #0 !dbg !9338 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_gc**, align 8
  %obj_.addr = alloca %struct.constructor_elt_d*, align 8
  store %struct.VEC_constructor_elt_gc** %vec_, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc*** %vec_.addr, metadata !9344, metadata !DIExpression()), !dbg !9345
  store %struct.constructor_elt_d* %obj_, %struct.constructor_elt_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %obj_.addr, metadata !9346, metadata !DIExpression()), !dbg !9345
  %0 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9345
  %call = call i32 @VEC_constructor_elt_gc_reserve(%struct.VEC_constructor_elt_gc** %0, i32 1), !dbg !9345
  %1 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9345
  %2 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %1, align 8, !dbg !9345
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %2, null, !dbg !9345
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9345

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9345
  %4 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %3, align 8, !dbg !9345
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %4, i32 0, i32 0, !dbg !9345
  br label %cond.end, !dbg !9345

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9345

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9345
  %5 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %obj_.addr, align 8, !dbg !9345
  %call1 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %cond, %struct.constructor_elt_d* %5), !dbg !9345
  ret %struct.constructor_elt_d* %call1, !dbg !9345
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_gc_reserve(%struct.VEC_constructor_elt_gc** %vec_, i32 %alloc_) #0 !dbg !9347 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_constructor_elt_gc** %vec_, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc*** %vec_.addr, metadata !9350, metadata !DIExpression()), !dbg !9351
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9352, metadata !DIExpression()), !dbg !9351
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9353, metadata !DIExpression()), !dbg !9351
  %0 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9351
  %1 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %0, align 8, !dbg !9351
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %1, null, !dbg !9351
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9351

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9351
  %3 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %2, align 8, !dbg !9351
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %3, i32 0, i32 0, !dbg !9351
  br label %cond.end, !dbg !9351

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9351

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9351
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9351
  %call = call i32 @VEC_constructor_elt_base_space(%struct.VEC_constructor_elt_base* %cond, i32 %4), !dbg !9351
  %tobool1 = icmp ne i32 %call, 0, !dbg !9351
  %lnot = xor i1 %tobool1, true, !dbg !9351
  %lnot.ext = zext i1 %lnot to i32, !dbg !9351
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9351
  %5 = load i32, i32* %extend, align 4, !dbg !9354
  %tobool2 = icmp ne i32 %5, 0, !dbg !9354
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9351

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9354
  %7 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %6, align 8, !dbg !9354
  %8 = bitcast %struct.VEC_constructor_elt_gc* %7 to i8*, !dbg !9354
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9354
  %call3 = call i8* @vec_gc_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !9354
  %10 = bitcast i8* %call3 to %struct.VEC_constructor_elt_gc*, !dbg !9354
  %11 = load %struct.VEC_constructor_elt_gc**, %struct.VEC_constructor_elt_gc*** %vec_.addr, align 8, !dbg !9354
  store %struct.VEC_constructor_elt_gc* %10, %struct.VEC_constructor_elt_gc** %11, align 8, !dbg !9354
  br label %if.end, !dbg !9354

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9351
  ret i32 %12, !dbg !9351
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %vec_, %struct.constructor_elt_d* %obj_) #0 !dbg !9356 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %obj_.addr = alloca %struct.constructor_elt_d*, align 8
  %slot_ = alloca %struct.constructor_elt_d*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !9360, metadata !DIExpression()), !dbg !9361
  store %struct.constructor_elt_d* %obj_, %struct.constructor_elt_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %obj_.addr, metadata !9362, metadata !DIExpression()), !dbg !9361
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %slot_, metadata !9363, metadata !DIExpression()), !dbg !9361
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9361
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %0, i32 0, i32 0, !dbg !9361
  %1 = load i32, i32* %num, align 8, !dbg !9361
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9361
  %alloc = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 1, !dbg !9361
  %3 = load i32, i32* %alloc, align 4, !dbg !9361
  %cmp = icmp ult i32 %1, %3, !dbg !9361
  %conv = zext i1 %cmp to i32, !dbg !9361
  %4 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9361
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %4, i32 0, i32 2, !dbg !9361
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9361
  %num1 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 0, !dbg !9361
  %6 = load i32, i32* %num1, align 8, !dbg !9361
  %inc = add i32 %6, 1, !dbg !9361
  store i32 %inc, i32* %num1, align 8, !dbg !9361
  %idxprom = zext i32 %6 to i64, !dbg !9361
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !9361
  store %struct.constructor_elt_d* %arrayidx, %struct.constructor_elt_d** %slot_, align 8, !dbg !9361
  %7 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %obj_.addr, align 8, !dbg !9364
  %tobool = icmp ne %struct.constructor_elt_d* %7, null, !dbg !9364
  br i1 %tobool, label %if.then, label %if.end, !dbg !9361

if.then:                                          ; preds = %entry
  %8 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %slot_, align 8, !dbg !9364
  %9 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %obj_.addr, align 8, !dbg !9364
  %10 = bitcast %struct.constructor_elt_d* %8 to i8*, !dbg !9364
  %11 = bitcast %struct.constructor_elt_d* %9 to i8*, !dbg !9364
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !9364
  br label %if.end, !dbg !9364

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %slot_, align 8, !dbg !9361
  ret %struct.constructor_elt_d* %12, !dbg !9361
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_space(%struct.VEC_constructor_elt_base* %vec_, i32 %alloc_) #0 !dbg !9366 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !9369, metadata !DIExpression()), !dbg !9370
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9371, metadata !DIExpression()), !dbg !9370
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9370
  %cmp = icmp sge i32 %0, 0, !dbg !9370
  %conv = zext i1 %cmp to i32, !dbg !9370
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9370
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %1, null, !dbg !9370
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9370

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9370
  %alloc = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 1, !dbg !9370
  %3 = load i32, i32* %alloc, align 4, !dbg !9370
  %4 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !9370
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %4, i32 0, i32 0, !dbg !9370
  %5 = load i32, i32* %num, align 8, !dbg !9370
  %sub = sub i32 %3, %5, !dbg !9370
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !9370
  %cmp1 = icmp uge i32 %sub, %6, !dbg !9370
  %conv2 = zext i1 %cmp1 to i32, !dbg !9370
  br label %cond.end, !dbg !9370

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !9370
  %tobool3 = icmp ne i32 %7, 0, !dbg !9370
  %lnot = xor i1 %tobool3, true, !dbg !9370
  %lnot.ext = zext i1 %lnot to i32, !dbg !9370
  br label %cond.end, !dbg !9370

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9370
  ret i32 %cond, !dbg !9370
}

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local void @rest_of_decl_compilation(%union.tree_node*, i32, i32) #2

declare dso_local void @lto_symtab_register_decl(%union.tree_node*, i32, %struct.lto_file_decl_data*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_resolution(%struct.data_in* %data_in, i32 %index) #0 !dbg !9372 {
entry:
  %retval = alloca i32, align 4
  %data_in.addr = alloca %struct.data_in*, align 8
  %index.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.data_in* %data_in, %struct.data_in** %data_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_in** %data_in.addr, metadata !9375, metadata !DIExpression()), !dbg !9376
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9377, metadata !DIExpression()), !dbg !9378
  %0 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9379
  %globals_resolution = getelementptr inbounds %struct.data_in, %struct.data_in* %0, i32 0, i32 9, !dbg !9381
  %1 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution, align 8, !dbg !9381
  %tobool = icmp ne %struct.VEC_ld_plugin_symbol_resolution_t_heap* %1, null, !dbg !9379
  br i1 %tobool, label %if.then, label %if.else, !dbg !9382

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9383, metadata !DIExpression()), !dbg !9385
  %2 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9386
  %globals_resolution1 = getelementptr inbounds %struct.data_in, %struct.data_in* %2, i32 0, i32 9, !dbg !9386
  %3 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution1, align 8, !dbg !9386
  %tobool2 = icmp ne %struct.VEC_ld_plugin_symbol_resolution_t_heap* %3, null, !dbg !9386
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !9386

cond.true:                                        ; preds = %if.then
  %4 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9386
  %globals_resolution3 = getelementptr inbounds %struct.data_in, %struct.data_in* %4, i32 0, i32 9, !dbg !9386
  %5 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution3, align 8, !dbg !9386
  %base = getelementptr inbounds %struct.VEC_ld_plugin_symbol_resolution_t_heap, %struct.VEC_ld_plugin_symbol_resolution_t_heap* %5, i32 0, i32 0, !dbg !9386
  br label %cond.end, !dbg !9386

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ld_plugin_symbol_resolution_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9386
  %call = call i32 @VEC_ld_plugin_symbol_resolution_t_base_length(%struct.VEC_ld_plugin_symbol_resolution_t_base* %cond), !dbg !9386
  %6 = load i32, i32* %index.addr, align 4, !dbg !9388
  %cmp = icmp ule i32 %call, %6, !dbg !9389
  br i1 %cmp, label %if.then4, label %if.end, !dbg !9390

if.then4:                                         ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !9391
  br label %return, !dbg !9391

if.end:                                           ; preds = %cond.end
  %7 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9392
  %globals_resolution5 = getelementptr inbounds %struct.data_in, %struct.data_in* %7, i32 0, i32 9, !dbg !9392
  %8 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution5, align 8, !dbg !9392
  %tobool6 = icmp ne %struct.VEC_ld_plugin_symbol_resolution_t_heap* %8, null, !dbg !9392
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !9392

cond.true7:                                       ; preds = %if.end
  %9 = load %struct.data_in*, %struct.data_in** %data_in.addr, align 8, !dbg !9392
  %globals_resolution8 = getelementptr inbounds %struct.data_in, %struct.data_in* %9, i32 0, i32 9, !dbg !9392
  %10 = load %struct.VEC_ld_plugin_symbol_resolution_t_heap*, %struct.VEC_ld_plugin_symbol_resolution_t_heap** %globals_resolution8, align 8, !dbg !9392
  %base9 = getelementptr inbounds %struct.VEC_ld_plugin_symbol_resolution_t_heap, %struct.VEC_ld_plugin_symbol_resolution_t_heap* %10, i32 0, i32 0, !dbg !9392
  br label %cond.end11, !dbg !9392

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !9392

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_ld_plugin_symbol_resolution_t_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !9392
  %11 = load i32, i32* %index.addr, align 4, !dbg !9392
  %call13 = call i32 @VEC_ld_plugin_symbol_resolution_t_base_index(%struct.VEC_ld_plugin_symbol_resolution_t_base* %cond12, i32 %11), !dbg !9392
  store i32 %call13, i32* %ret, align 4, !dbg !9393
  %12 = load i32, i32* %ret, align 4, !dbg !9394
  store i32 %12, i32* %retval, align 4, !dbg !9395
  br label %return, !dbg !9395

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !9396
  br label %return, !dbg !9396

return:                                           ; preds = %if.else, %cond.end11, %if.then4
  %13 = load i32, i32* %retval, align 4, !dbg !9397
  ret i32 %13, !dbg !9397
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ld_plugin_symbol_resolution_t_base_length(%struct.VEC_ld_plugin_symbol_resolution_t_base* %vec_) #0 !dbg !9398 {
entry:
  %vec_.addr = alloca %struct.VEC_ld_plugin_symbol_resolution_t_base*, align 8
  store %struct.VEC_ld_plugin_symbol_resolution_t_base* %vec_, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, metadata !9403, metadata !DIExpression()), !dbg !9404
  %0 = load %struct.VEC_ld_plugin_symbol_resolution_t_base*, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8, !dbg !9404
  %tobool = icmp ne %struct.VEC_ld_plugin_symbol_resolution_t_base* %0, null, !dbg !9404
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9404

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ld_plugin_symbol_resolution_t_base*, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8, !dbg !9404
  %num = getelementptr inbounds %struct.VEC_ld_plugin_symbol_resolution_t_base, %struct.VEC_ld_plugin_symbol_resolution_t_base* %1, i32 0, i32 0, !dbg !9404
  %2 = load i32, i32* %num, align 4, !dbg !9404
  br label %cond.end, !dbg !9404

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9404

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9404
  ret i32 %cond, !dbg !9404
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ld_plugin_symbol_resolution_t_base_index(%struct.VEC_ld_plugin_symbol_resolution_t_base* %vec_, i32 %ix_) #0 !dbg !9405 {
entry:
  %vec_.addr = alloca %struct.VEC_ld_plugin_symbol_resolution_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ld_plugin_symbol_resolution_t_base* %vec_, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, metadata !9408, metadata !DIExpression()), !dbg !9409
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9410, metadata !DIExpression()), !dbg !9409
  %0 = load %struct.VEC_ld_plugin_symbol_resolution_t_base*, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8, !dbg !9409
  %tobool = icmp ne %struct.VEC_ld_plugin_symbol_resolution_t_base* %0, null, !dbg !9409
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9409

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9409
  %2 = load %struct.VEC_ld_plugin_symbol_resolution_t_base*, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8, !dbg !9409
  %num = getelementptr inbounds %struct.VEC_ld_plugin_symbol_resolution_t_base, %struct.VEC_ld_plugin_symbol_resolution_t_base* %2, i32 0, i32 0, !dbg !9409
  %3 = load i32, i32* %num, align 4, !dbg !9409
  %cmp = icmp ult i32 %1, %3, !dbg !9409
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9411
  %land.ext = zext i1 %4 to i32, !dbg !9409
  %5 = load %struct.VEC_ld_plugin_symbol_resolution_t_base*, %struct.VEC_ld_plugin_symbol_resolution_t_base** %vec_.addr, align 8, !dbg !9409
  %vec = getelementptr inbounds %struct.VEC_ld_plugin_symbol_resolution_t_base, %struct.VEC_ld_plugin_symbol_resolution_t_base* %5, i32 0, i32 2, !dbg !9409
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9409
  %idxprom = zext i32 %6 to i64, !dbg !9409
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9409
  %7 = load i32, i32* %arrayidx, align 4, !dbg !9409
  ret i32 %7, !dbg !9409
}

declare dso_local void @lto_record_renamed_decl(%struct.lto_file_decl_data*, i8*, i8*) #2

declare dso_local i32 @htab_hash_string(i8*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3495, !3496, !3497}
!llvm.ident = !{!3498}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "file_name_hash_table", scope: !2, file: !3, line: 60, type: !2523, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1687, globals: !3490, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "lto-streamer-in.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !407, !414, !590, !604, !616, !645, !659, !665, !669, !676, !681, !687, !725, !751, !761, !767, !1487, !1621, !1658, !1671, !1677}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !385, line: 309, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406}
!387 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!399 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!400 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!401 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!402 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!403 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!404 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!405 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!406 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !408, line: 104, baseType: !7, size: 32, elements: !409)
!408 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!409 = !{!410, !411, !412, !413}
!410 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!411 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!412 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!413 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!414 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !415, line: 74, baseType: !7, size: 32, elements: !416)
!415 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!416 = !{!417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589}
!417 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!589 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!590 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lto_section_type", file: !591, line: 256, baseType: !7, size: 32, elements: !592)
!591 = !DIFile(filename: "./lto-streamer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!592 = !{!593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603}
!593 = !DIEnumerator(name: "LTO_section_decls", value: 0, isUnsigned: true)
!594 = !DIEnumerator(name: "LTO_section_function_body", value: 1, isUnsigned: true)
!595 = !DIEnumerator(name: "LTO_section_static_initializer", value: 2, isUnsigned: true)
!596 = !DIEnumerator(name: "LTO_section_cgraph", value: 3, isUnsigned: true)
!597 = !DIEnumerator(name: "LTO_section_jump_functions", value: 4, isUnsigned: true)
!598 = !DIEnumerator(name: "LTO_section_ipa_pure_const", value: 5, isUnsigned: true)
!599 = !DIEnumerator(name: "LTO_section_ipa_reference", value: 6, isUnsigned: true)
!600 = !DIEnumerator(name: "LTO_section_symtab", value: 7, isUnsigned: true)
!601 = !DIEnumerator(name: "LTO_section_wpa_fixup", value: 8, isUnsigned: true)
!602 = !DIEnumerator(name: "LTO_section_opts", value: 9, isUnsigned: true)
!603 = !DIEnumerator(name: "LTO_N_SECTION_TYPES", value: 10, isUnsigned: true)
!604 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ld_plugin_symbol_resolution", file: !605, line: 123, baseType: !7, size: 32, elements: !606)
!605 = !DIFile(filename: "./include/plugin-api.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!606 = !{!607, !608, !609, !610, !611, !612, !613, !614, !615}
!607 = !DIEnumerator(name: "LDPR_UNKNOWN", value: 0, isUnsigned: true)
!608 = !DIEnumerator(name: "LDPR_UNDEF", value: 1, isUnsigned: true)
!609 = !DIEnumerator(name: "LDPR_PREVAILING_DEF", value: 2, isUnsigned: true)
!610 = !DIEnumerator(name: "LDPR_PREVAILING_DEF_IRONLY", value: 3, isUnsigned: true)
!611 = !DIEnumerator(name: "LDPR_PREEMPTED_REG", value: 4, isUnsigned: true)
!612 = !DIEnumerator(name: "LDPR_PREEMPTED_IR", value: 5, isUnsigned: true)
!613 = !DIEnumerator(name: "LDPR_RESOLVED_IR", value: 6, isUnsigned: true)
!614 = !DIEnumerator(name: "LDPR_RESOLVED_EXEC", value: 7, isUnsigned: true)
!615 = !DIEnumerator(name: "LDPR_RESOLVED_DYN", value: 8, isUnsigned: true)
!616 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "LTO_tags", file: !591, line: 175, baseType: !7, size: 32, elements: !617)
!617 = !{!618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644}
!618 = !DIEnumerator(name: "LTO_null", value: 0, isUnsigned: true)
!619 = !DIEnumerator(name: "LTO_bb0", value: 224, isUnsigned: true)
!620 = !DIEnumerator(name: "LTO_bb1", value: 225, isUnsigned: true)
!621 = !DIEnumerator(name: "LTO_eh_region", value: 226, isUnsigned: true)
!622 = !DIEnumerator(name: "LTO_builtin_decl", value: 227, isUnsigned: true)
!623 = !DIEnumerator(name: "LTO_function", value: 228, isUnsigned: true)
!624 = !DIEnumerator(name: "LTO_eh_table", value: 229, isUnsigned: true)
!625 = !DIEnumerator(name: "LTO_ert_cleanup", value: 230, isUnsigned: true)
!626 = !DIEnumerator(name: "LTO_ert_try", value: 231, isUnsigned: true)
!627 = !DIEnumerator(name: "LTO_ert_allowed_exceptions", value: 232, isUnsigned: true)
!628 = !DIEnumerator(name: "LTO_ert_must_not_throw", value: 233, isUnsigned: true)
!629 = !DIEnumerator(name: "LTO_eh_landing_pad", value: 234, isUnsigned: true)
!630 = !DIEnumerator(name: "LTO_eh_catch", value: 235, isUnsigned: true)
!631 = !DIEnumerator(name: "LTO_tree_pickle_reference", value: 236, isUnsigned: true)
!632 = !DIEnumerator(name: "LTO_var_decl_alias", value: 237, isUnsigned: true)
!633 = !DIEnumerator(name: "LTO_field_decl_ref", value: 238, isUnsigned: true)
!634 = !DIEnumerator(name: "LTO_function_decl_ref", value: 239, isUnsigned: true)
!635 = !DIEnumerator(name: "LTO_label_decl_ref", value: 240, isUnsigned: true)
!636 = !DIEnumerator(name: "LTO_namespace_decl_ref", value: 241, isUnsigned: true)
!637 = !DIEnumerator(name: "LTO_result_decl_ref", value: 242, isUnsigned: true)
!638 = !DIEnumerator(name: "LTO_ssa_name_ref", value: 243, isUnsigned: true)
!639 = !DIEnumerator(name: "LTO_type_decl_ref", value: 244, isUnsigned: true)
!640 = !DIEnumerator(name: "LTO_type_ref", value: 245, isUnsigned: true)
!641 = !DIEnumerator(name: "LTO_const_decl_ref", value: 246, isUnsigned: true)
!642 = !DIEnumerator(name: "LTO_imported_decl_ref", value: 247, isUnsigned: true)
!643 = !DIEnumerator(name: "LTO_global_decl_ref", value: 248, isUnsigned: true)
!644 = !DIEnumerator(name: "LTO_NUM_TAGS", value: 249, isUnsigned: true)
!645 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !337, line: 295, baseType: !7, size: 32, elements: !646)
!646 = !{!647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658}
!647 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!648 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!649 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!650 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!651 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!652 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!653 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!654 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!655 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!656 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!657 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!658 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!659 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "function_frequency", file: !660, line: 179, baseType: !7, size: 32, elements: !661)
!660 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!661 = !{!662, !663, !664}
!662 = !DIEnumerator(name: "FUNCTION_FREQUENCY_UNLIKELY_EXECUTED", value: 0, isUnsigned: true)
!663 = !DIEnumerator(name: "FUNCTION_FREQUENCY_NORMAL", value: 1, isUnsigned: true)
!664 = !DIEnumerator(name: "FUNCTION_FREQUENCY_HOT", value: 2, isUnsigned: true)
!665 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !337, line: 912, baseType: !7, size: 32, elements: !666)
!666 = !{!667, !668}
!667 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!668 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!669 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lc_reason", file: !670, line: 36, baseType: !7, size: 32, elements: !671)
!670 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!671 = !{!672, !673, !674, !675}
!672 = !DIEnumerator(name: "LC_ENTER", value: 0, isUnsigned: true)
!673 = !DIEnumerator(name: "LC_LEAVE", value: 1, isUnsigned: true)
!674 = !DIEnumerator(name: "LC_RENAME", value: 2, isUnsigned: true)
!675 = !DIEnumerator(name: "LC_RENAME_VERBATIM", value: 3, isUnsigned: true)
!676 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !677, line: 147, baseType: !7, size: 32, elements: !678)
!677 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!678 = !{!679, !680}
!679 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!680 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!681 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !682, line: 4603, baseType: !7, size: 32, elements: !683)
!682 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!683 = !{!684, !685, !686}
!684 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!685 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!686 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!687 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !682, line: 51, baseType: !7, size: 32, elements: !688)
!688 = !{!689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724}
!689 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!690 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!691 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!692 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!693 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!694 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!695 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!696 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!697 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!698 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!699 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!700 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!701 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!702 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!703 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!704 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!705 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!706 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!707 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!708 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!709 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!710 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!711 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!712 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!713 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!714 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!715 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!716 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!717 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!718 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!719 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!720 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!721 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!722 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!723 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!724 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!725 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !682, line: 727, baseType: !7, size: 32, elements: !726)
!726 = !{!727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750}
!727 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!728 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!729 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!730 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!731 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!732 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!733 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!734 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!735 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!736 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!737 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!738 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!739 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!740 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!741 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!742 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!743 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!744 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!745 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!746 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!747 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!748 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!749 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!750 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!751 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !591, line: 272, baseType: !7, size: 32, elements: !752)
!752 = !{!753, !754, !755, !756, !757, !758, !759, !760}
!753 = !DIEnumerator(name: "LTO_DECL_STREAM_TYPE", value: 0, isUnsigned: true)
!754 = !DIEnumerator(name: "LTO_DECL_STREAM_FIELD_DECL", value: 1, isUnsigned: true)
!755 = !DIEnumerator(name: "LTO_DECL_STREAM_FN_DECL", value: 2, isUnsigned: true)
!756 = !DIEnumerator(name: "LTO_DECL_STREAM_VAR_DECL", value: 3, isUnsigned: true)
!757 = !DIEnumerator(name: "LTO_DECL_STREAM_TYPE_DECL", value: 4, isUnsigned: true)
!758 = !DIEnumerator(name: "LTO_DECL_STREAM_NAMESPACE_DECL", value: 5, isUnsigned: true)
!759 = !DIEnumerator(name: "LTO_DECL_STREAM_LABEL_DECL", value: 6, isUnsigned: true)
!760 = !DIEnumerator(name: "LTO_N_DECL_STREAMS", value: 7, isUnsigned: true)
!761 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !762)
!762 = !{!763, !764, !765, !766}
!763 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!767 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !768)
!768 = !{!769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486}
!769 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1484 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1485 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1486 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1487 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !1488)
!1488 = !{!1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620}
!1489 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1490 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1491 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1492 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1493 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1494 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1495 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1496 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1497 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1498 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1499 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1500 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1519 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1520 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1521 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1522 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1523 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1524 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1525 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1526 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1527 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1528 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1529 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1530 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1531 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1532 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1533 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1534 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1535 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1536 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1537 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1538 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1539 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1540 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1541 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1542 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1543 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1544 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1545 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1546 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1547 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1548 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1549 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1550 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1551 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1552 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1553 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1554 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1555 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1556 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1557 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1558 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1559 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1560 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1561 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1562 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1563 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1564 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1565 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1566 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1567 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1568 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1569 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1570 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1571 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1572 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1573 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1574 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1575 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1576 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1577 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1578 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1579 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1580 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1581 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1582 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1583 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1584 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1585 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1586 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1587 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1588 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1589 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1590 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1591 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1592 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1593 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1594 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1595 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1596 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1597 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1598 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1599 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1600 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1601 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1602 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1603 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1604 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1605 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1606 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1607 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1608 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1609 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1610 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1611 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1612 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1613 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1614 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1615 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1616 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1617 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1618 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1619 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1620 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1621 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !1622)
!1622 = !{!1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657}
!1623 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!1624 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!1625 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!1626 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!1627 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!1628 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!1629 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!1630 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!1631 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!1632 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!1633 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!1634 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!1635 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!1636 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!1637 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!1638 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!1639 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!1640 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!1641 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!1642 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!1643 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!1644 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!1645 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!1646 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!1647 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!1648 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!1649 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!1650 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!1651 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!1652 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!1653 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!1654 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!1655 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!1656 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!1657 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!1658 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !1659)
!1659 = !{!1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670}
!1660 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1661 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1662 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1663 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1664 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1665 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1666 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1667 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1668 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1669 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1670 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1671 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "symbol_visibility", file: !135, line: 2465, baseType: !7, size: 32, elements: !1672)
!1672 = !{!1673, !1674, !1675, !1676}
!1673 = !DIEnumerator(name: "VISIBILITY_DEFAULT", value: 0, isUnsigned: true)
!1674 = !DIEnumerator(name: "VISIBILITY_PROTECTED", value: 1, isUnsigned: true)
!1675 = !DIEnumerator(name: "VISIBILITY_HIDDEN", value: 2, isUnsigned: true)
!1676 = !DIEnumerator(name: "VISIBILITY_INTERNAL", value: 3, isUnsigned: true)
!1677 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tls_model", file: !1678, line: 97, baseType: !7, size: 32, elements: !1679)
!1678 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1679 = !{!1680, !1681, !1682, !1683, !1684, !1685, !1686}
!1680 = !DIEnumerator(name: "TLS_MODEL_NONE", value: 0, isUnsigned: true)
!1681 = !DIEnumerator(name: "TLS_MODEL_EMULATED", value: 1, isUnsigned: true)
!1682 = !DIEnumerator(name: "TLS_MODEL_REAL", value: 2, isUnsigned: true)
!1683 = !DIEnumerator(name: "TLS_MODEL_GLOBAL_DYNAMIC", value: 2, isUnsigned: true)
!1684 = !DIEnumerator(name: "TLS_MODEL_LOCAL_DYNAMIC", value: 3, isUnsigned: true)
!1685 = !DIEnumerator(name: "TLS_MODEL_INITIAL_EXEC", value: 4, isUnsigned: true)
!1686 = !DIEnumerator(name: "TLS_MODEL_LOCAL_EXEC", value: 5, isUnsigned: true)
!1687 = !{!7, !1688, !1970, !3116, !3423, !336, !1784, !2229, !2608, !2245, !659, !3268, !2496, !2448, !2447, !3447, !2521, !2463, !1817, !1890, !1955, !3450, !2509, !2484, !2570, !2586, !1743, !134, !687, !2052, !2018, !3455, !3457, !3474, !616, !761, !767, !1741, !1749, !5, !1671, !1677, !3487, !2894, !3488, !2532}
!1688 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1678, line: 56, baseType: !1689)
!1689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1690, size: 64)
!1690 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1691)
!1691 = !{!1692, !1725, !1731, !1744, !1763, !1774, !1779, !1790, !1796, !1810, !1821, !1859, !2355, !2383, !2400, !2401, !2406, !2415, !2421, !2426, !2430, !2434, !2767, !2814, !2820, !2826, !2833, !2846, !2860, !2877, !2889, !2911, !2926, !3098}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1690, file: !135, line: 3372, baseType: !1693, size: 64)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1694)
!1694 = !{!1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1693, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1693, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1693, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1693, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1693, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1693, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1693, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1693, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1693, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1693, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1693, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1693, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1693, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1693, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1693, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1693, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1693, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1693, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1693, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1693, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1693, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1693, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1693, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1693, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1693, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1693, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1693, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1693, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1693, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1693, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1690, file: !135, line: 3373, baseType: !1726, size: 192)
!1726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1727)
!1727 = !{!1728, !1729, !1730}
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1726, file: !135, line: 403, baseType: !1693, size: 64)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1726, file: !135, line: 404, baseType: !1688, size: 64, offset: 64)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1726, file: !135, line: 405, baseType: !1688, size: 64, offset: 128)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1690, file: !135, line: 3374, baseType: !1732, size: 320)
!1732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1733)
!1733 = !{!1734, !1735}
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1732, file: !135, line: 1385, baseType: !1726, size: 192)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1732, file: !135, line: 1386, baseType: !1736, size: 128, offset: 192)
!1736 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1737, line: 58, baseType: !1738)
!1737 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1737, line: 54, size: 128, elements: !1739)
!1739 = !{!1740, !1742}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1738, file: !1737, line: 56, baseType: !1741, size: 64)
!1741 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1738, file: !1737, line: 57, baseType: !1743, size: 64, offset: 64)
!1743 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1690, file: !135, line: 3375, baseType: !1745, size: 256)
!1745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1746)
!1746 = !{!1747, !1748}
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1745, file: !135, line: 1398, baseType: !1726, size: 192)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1745, file: !135, line: 1399, baseType: !1749, size: 64, offset: 192)
!1749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1750, size: 64)
!1750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1751, line: 52, size: 256, elements: !1752)
!1751 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1752 = !{!1753, !1754, !1755, !1756, !1757, !1758, !1759}
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1750, file: !1751, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1750, file: !1751, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1750, file: !1751, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1750, file: !1751, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1750, file: !1751, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1750, file: !1751, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1750, file: !1751, line: 62, baseType: !1760, size: 192, offset: 64)
!1760 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1741, size: 192, elements: !1761)
!1761 = !{!1762}
!1762 = !DISubrange(count: 3)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1690, file: !135, line: 3376, baseType: !1764, size: 256)
!1764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1765)
!1765 = !{!1766, !1767}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1764, file: !135, line: 1409, baseType: !1726, size: 192)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1764, file: !135, line: 1410, baseType: !1768, size: 64, offset: 192)
!1768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1769, size: 64)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1770, line: 27, size: 192, elements: !1771)
!1770 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1771 = !{!1772, !1773}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1769, file: !1770, line: 29, baseType: !1736, size: 128)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1769, file: !1770, line: 30, baseType: !5, size: 32, offset: 128)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1690, file: !135, line: 3377, baseType: !1775, size: 256)
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1776)
!1776 = !{!1777, !1778}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1775, file: !135, line: 1438, baseType: !1726, size: 192)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1775, file: !135, line: 1439, baseType: !1688, size: 64, offset: 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1690, file: !135, line: 3378, baseType: !1780, size: 256)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1781)
!1781 = !{!1782, !1783, !1785}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1780, file: !135, line: 1419, baseType: !1726, size: 192)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1780, file: !135, line: 1420, baseType: !1784, size: 32, offset: 192)
!1784 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1780, file: !135, line: 1421, baseType: !1786, size: 8, offset: 224)
!1786 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1787, size: 8, elements: !1788)
!1787 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1788 = !{!1789}
!1789 = !DISubrange(count: 1)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1690, file: !135, line: 3379, baseType: !1791, size: 320)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1792)
!1792 = !{!1793, !1794, !1795}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1791, file: !135, line: 1429, baseType: !1726, size: 192)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1791, file: !135, line: 1430, baseType: !1688, size: 64, offset: 192)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1791, file: !135, line: 1431, baseType: !1688, size: 64, offset: 256)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1690, file: !135, line: 3380, baseType: !1797, size: 320)
!1797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1798)
!1798 = !{!1799, !1800}
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1797, file: !135, line: 1461, baseType: !1726, size: 192)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1797, file: !135, line: 1462, baseType: !1801, size: 128, offset: 192)
!1801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1802, line: 31, size: 128, elements: !1803)
!1802 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1803 = !{!1804, !1808, !1809}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1801, file: !1802, line: 32, baseType: !1805, size: 64)
!1805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1806, size: 64)
!1806 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1807)
!1807 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1801, file: !1802, line: 33, baseType: !7, size: 32, offset: 64)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1801, file: !1802, line: 34, baseType: !7, size: 32, offset: 96)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1690, file: !135, line: 3381, baseType: !1811, size: 384)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1812)
!1812 = !{!1813, !1814, !1818, !1819, !1820}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1811, file: !135, line: 2508, baseType: !1726, size: 192)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1811, file: !135, line: 2509, baseType: !1815, size: 32, offset: 192)
!1815 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1816, line: 58, baseType: !1817)
!1816 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1817 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !670, line: 44, baseType: !7)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1811, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1811, file: !135, line: 2511, baseType: !1688, size: 64, offset: 256)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1811, file: !135, line: 2512, baseType: !1688, size: 64, offset: 320)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1690, file: !135, line: 3382, baseType: !1822, size: 896)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1823)
!1823 = !{!1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1822, file: !135, line: 2653, baseType: !1811, size: 384)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1822, file: !135, line: 2654, baseType: !1688, size: 64, offset: 384)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1822, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1822, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1822, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1822, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1822, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1822, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1822, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1822, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1822, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1822, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1822, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1822, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1822, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1822, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1822, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1822, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1822, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1822, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1822, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1822, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1822, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1822, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1822, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1822, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1822, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1822, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1822, file: !135, line: 2705, baseType: !1688, size: 64, offset: 576)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1822, file: !135, line: 2706, baseType: !1688, size: 64, offset: 640)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1822, file: !135, line: 2707, baseType: !1688, size: 64, offset: 704)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1822, file: !135, line: 2708, baseType: !1688, size: 64, offset: 768)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1822, file: !135, line: 2711, baseType: !1857, size: 64, offset: 832)
!1857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1858, size: 64)
!1858 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1690, file: !135, line: 3383, baseType: !1860, size: 960)
!1860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1861)
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1860, file: !135, line: 2757, baseType: !1822, size: 896)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1860, file: !135, line: 2758, baseType: !1864, size: 64, offset: 896)
!1864 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1678, line: 50, baseType: !1865)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1867, line: 240, size: 384, elements: !1868)
!1867 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1868 = !{!1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1866, file: !1867, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1866, file: !1867, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1866, file: !1867, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1866, file: !1867, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1866, file: !1867, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1866, file: !1867, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1866, file: !1867, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1866, file: !1867, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1866, file: !1867, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1866, file: !1867, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1866, file: !1867, line: 321, baseType: !1880, size: 320, offset: 64)
!1880 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1867, line: 315, size: 320, elements: !1881)
!1881 = !{!1882, !2288, !2290, !2353, !2354}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1880, file: !1867, line: 316, baseType: !1883, size: 64)
!1883 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1884, size: 64, elements: !1788)
!1884 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1867, line: 183, baseType: !1885)
!1885 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1867, line: 166, size: 64, elements: !1886)
!1886 = !{!1887, !1888, !1889, !1892, !1893, !1901, !1902, !1914, !1917, !1979, !1980, !2265, !2278, !2285}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1885, file: !1867, line: 168, baseType: !1784, size: 32)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1885, file: !1867, line: 169, baseType: !7, size: 32)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1885, file: !1867, line: 170, baseType: !1890, size: 64)
!1890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1891, size: 64)
!1891 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1787)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1885, file: !1867, line: 171, baseType: !1864, size: 64)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1885, file: !1867, line: 172, baseType: !1894, size: 64)
!1894 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1678, line: 53, baseType: !1895)
!1895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1896, size: 64)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1867, line: 359, size: 128, elements: !1897)
!1897 = !{!1898, !1899}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1896, file: !1867, line: 360, baseType: !1784, size: 32)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1896, file: !1867, line: 361, baseType: !1900, size: 64, offset: 64)
!1900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1864, size: 64, elements: !1788)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1885, file: !1867, line: 173, baseType: !5, size: 32)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1885, file: !1867, line: 174, baseType: !1903, size: 32)
!1903 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1867, line: 133, baseType: !1904)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1867, line: 115, size: 32, elements: !1905)
!1905 = !{!1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1904, file: !1867, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1904, file: !1867, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1904, file: !1867, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1904, file: !1867, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1904, file: !1867, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1904, file: !1867, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1904, file: !1867, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1904, file: !1867, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1885, file: !1867, line: 175, baseType: !1915, size: 64)
!1915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1916, size: 64)
!1916 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1867, line: 175, flags: DIFlagFwdDecl)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1885, file: !1867, line: 176, baseType: !1918, size: 64)
!1918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1919, size: 64)
!1919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1920, line: 75, size: 256, elements: !1921)
!1920 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1921 = !{!1922, !1936, !1937, !1938}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1919, file: !1920, line: 76, baseType: !1923, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64)
!1924 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1920, line: 68, baseType: !1925)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1920, line: 63, size: 320, elements: !1926)
!1926 = !{!1927, !1929, !1930, !1931}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1925, file: !1920, line: 64, baseType: !1928, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1925, file: !1920, line: 65, baseType: !1928, size: 64, offset: 64)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1925, file: !1920, line: 66, baseType: !7, size: 32, offset: 128)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1925, file: !1920, line: 67, baseType: !1932, size: 128, offset: 192)
!1932 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1933, size: 128, elements: !1934)
!1933 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1920, line: 29, baseType: !1741)
!1934 = !{!1935}
!1935 = !DISubrange(count: 2)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1919, file: !1920, line: 77, baseType: !1923, size: 64, offset: 64)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1919, file: !1920, line: 78, baseType: !7, size: 32, offset: 128)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1919, file: !1920, line: 79, baseType: !1939, size: 64, offset: 192)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1920, line: 49, baseType: !1941)
!1941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1920, line: 45, size: 832, elements: !1942)
!1942 = !{!1943, !1944, !1945}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1941, file: !1920, line: 46, baseType: !1928, size: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1941, file: !1920, line: 47, baseType: !1918, size: 64, offset: 64)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1941, file: !1920, line: 48, baseType: !1946, size: 704, offset: 128)
!1946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1947, line: 164, size: 704, elements: !1948)
!1947 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1948 = !{!1949, !1950, !1961, !1962, !1963, !1964, !1965, !1966, !1971, !1975, !1976, !1977, !1978}
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1946, file: !1947, line: 166, baseType: !1743, size: 64)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1946, file: !1947, line: 167, baseType: !1951, size: 64, offset: 64)
!1951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1952, size: 64)
!1952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1947, line: 157, size: 192, elements: !1953)
!1953 = !{!1954, !1956, !1957}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1952, file: !1947, line: 159, baseType: !1955, size: 64)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1787, size: 64)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1952, file: !1947, line: 160, baseType: !1951, size: 64, offset: 64)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1952, file: !1947, line: 161, baseType: !1958, size: 32, offset: 128)
!1958 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1787, size: 32, elements: !1959)
!1959 = !{!1960}
!1960 = !DISubrange(count: 4)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1946, file: !1947, line: 168, baseType: !1955, size: 64, offset: 128)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1946, file: !1947, line: 169, baseType: !1955, size: 64, offset: 192)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1946, file: !1947, line: 170, baseType: !1955, size: 64, offset: 256)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1946, file: !1947, line: 171, baseType: !1743, size: 64, offset: 320)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1946, file: !1947, line: 172, baseType: !1784, size: 32, offset: 384)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1946, file: !1947, line: 176, baseType: !1967, size: 64, offset: 448)
!1967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1968, size: 64)
!1968 = !DISubroutineType(types: !1969)
!1969 = !{!1951, !1970, !1743}
!1970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1946, file: !1947, line: 177, baseType: !1972, size: 64, offset: 512)
!1972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1973, size: 64)
!1973 = !DISubroutineType(types: !1974)
!1974 = !{null, !1970, !1951}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1946, file: !1947, line: 178, baseType: !1970, size: 64, offset: 576)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1946, file: !1947, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1946, file: !1947, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1946, file: !1947, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1885, file: !1867, line: 177, baseType: !1688, size: 64)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1885, file: !1867, line: 178, baseType: !1981, size: 64)
!1981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1982, size: 64)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !1983)
!1983 = !{!1984, !2230, !2231, !2232, !2235, !2239, !2240, !2241, !2259, !2260, !2261, !2262, !2263, !2264}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1982, file: !337, line: 219, baseType: !1985, size: 64)
!1985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1986, size: 64)
!1986 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !1987)
!1987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !1988)
!1988 = !{!1989}
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1987, file: !337, line: 151, baseType: !1990, size: 128)
!1990 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !1991)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !1992)
!1992 = !{!1993, !1994, !1995}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1991, file: !337, line: 150, baseType: !7, size: 32)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1991, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1991, file: !337, line: 150, baseType: !1996, size: 64, offset: 64)
!1996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1997, size: 64, elements: !1788)
!1997 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1678, line: 108, baseType: !1998)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1999, size: 64)
!1999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !2000)
!2000 = !{!2001, !2002, !2003, !2222, !2223, !2224, !2225, !2226, !2227, !2228}
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1999, file: !337, line: 124, baseType: !1981, size: 64)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1999, file: !337, line: 125, baseType: !1981, size: 64, offset: 64)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1999, file: !337, line: 131, baseType: !2004, size: 64, offset: 128)
!2004 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !2005)
!2005 = !{!2006, !2221}
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2004, file: !337, line: 129, baseType: !2007, size: 64)
!2007 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1678, line: 66, baseType: !2008)
!2008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2009, size: 64)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !682, line: 143, size: 192, elements: !2010)
!2010 = !{!2011, !2219, !2220}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2009, file: !682, line: 145, baseType: !2012, size: 64)
!2012 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1678, line: 69, baseType: !2013)
!2013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2014, size: 64)
!2014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !682, line: 136, size: 192, elements: !2015)
!2015 = !{!2016, !2217, !2218}
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2014, file: !682, line: 137, baseType: !2017, size: 64)
!2017 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1678, line: 58, baseType: !2018)
!2018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2019, size: 64)
!2019 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !682, line: 737, size: 768, elements: !2020)
!2020 = !{!2021, !2038, !2072, !2078, !2083, !2088, !2095, !2101, !2107, !2112, !2126, !2131, !2137, !2142, !2152, !2157, !2175, !2182, !2189, !2195, !2200, !2206, !2212}
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2019, file: !682, line: 738, baseType: !2022, size: 256)
!2022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !682, line: 271, size: 256, elements: !2023)
!2023 = !{!2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2022, file: !682, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2022, file: !682, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2022, file: !682, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2022, file: !682, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2022, file: !682, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2022, file: !682, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2022, file: !682, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2022, file: !682, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2022, file: !682, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2022, file: !682, line: 312, baseType: !7, size: 32, offset: 32)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2022, file: !682, line: 316, baseType: !1815, size: 32, offset: 64)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2022, file: !682, line: 319, baseType: !7, size: 32, offset: 96)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2022, file: !682, line: 323, baseType: !1981, size: 64, offset: 128)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2022, file: !682, line: 327, baseType: !1688, size: 64, offset: 192)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2019, file: !682, line: 739, baseType: !2039, size: 448)
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !682, line: 350, size: 448, elements: !2040)
!2040 = !{!2041, !2070}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2039, file: !682, line: 353, baseType: !2042, size: 384)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !682, line: 333, size: 384, elements: !2043)
!2043 = !{!2044, !2045, !2053}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2042, file: !682, line: 336, baseType: !2022, size: 256)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2042, file: !682, line: 343, baseType: !2046, size: 64, offset: 256)
!2046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2047, size: 64)
!2047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2048, line: 37, size: 128, elements: !2049)
!2048 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2049 = !{!2050, !2051}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2047, file: !2048, line: 39, baseType: !2046, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2047, file: !2048, line: 40, baseType: !2052, size: 64, offset: 64)
!2052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2042, file: !682, line: 344, baseType: !2054, size: 64, offset: 320)
!2054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2048, line: 45, size: 320, elements: !2056)
!2056 = !{!2057, !2058}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2055, file: !2048, line: 47, baseType: !2054, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2055, file: !2048, line: 48, baseType: !2059, size: 256, offset: 64)
!2059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2060)
!2060 = !{!2061, !2063, !2064, !2069}
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2059, file: !135, line: 1884, baseType: !2062, size: 64)
!2062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2059, file: !135, line: 1885, baseType: !2062, size: 64, offset: 64)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2059, file: !135, line: 1891, baseType: !2065, size: 64, offset: 128)
!2065 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2059, file: !135, line: 1891, size: 64, elements: !2066)
!2066 = !{!2067, !2068}
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2065, file: !135, line: 1891, baseType: !2017, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2065, file: !135, line: 1891, baseType: !1688, size: 64)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2059, file: !135, line: 1892, baseType: !2052, size: 64, offset: 192)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2039, file: !682, line: 359, baseType: !2071, size: 64, offset: 384)
!2071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1688, size: 64, elements: !1788)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2019, file: !682, line: 740, baseType: !2073, size: 512)
!2073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !682, line: 365, size: 512, elements: !2074)
!2074 = !{!2075, !2076, !2077}
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2073, file: !682, line: 368, baseType: !2042, size: 384)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2073, file: !682, line: 373, baseType: !1688, size: 64, offset: 384)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2073, file: !682, line: 374, baseType: !1688, size: 64, offset: 448)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2019, file: !682, line: 741, baseType: !2079, size: 576)
!2079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !682, line: 380, size: 576, elements: !2080)
!2080 = !{!2081, !2082}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2079, file: !682, line: 383, baseType: !2073, size: 512)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2079, file: !682, line: 389, baseType: !2071, size: 64, offset: 512)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2019, file: !682, line: 742, baseType: !2084, size: 320)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !682, line: 395, size: 320, elements: !2085)
!2085 = !{!2086, !2087}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2084, file: !682, line: 397, baseType: !2022, size: 256)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2084, file: !682, line: 400, baseType: !2007, size: 64, offset: 256)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2019, file: !682, line: 743, baseType: !2089, size: 448)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !682, line: 406, size: 448, elements: !2090)
!2090 = !{!2091, !2092, !2093, !2094}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2089, file: !682, line: 408, baseType: !2022, size: 256)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2089, file: !682, line: 412, baseType: !1688, size: 64, offset: 256)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2089, file: !682, line: 420, baseType: !1688, size: 64, offset: 320)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2089, file: !682, line: 423, baseType: !2007, size: 64, offset: 384)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2019, file: !682, line: 744, baseType: !2096, size: 384)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !682, line: 429, size: 384, elements: !2097)
!2097 = !{!2098, !2099, !2100}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2096, file: !682, line: 431, baseType: !2022, size: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2096, file: !682, line: 434, baseType: !1688, size: 64, offset: 256)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2096, file: !682, line: 437, baseType: !2007, size: 64, offset: 320)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2019, file: !682, line: 745, baseType: !2102, size: 384)
!2102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !682, line: 443, size: 384, elements: !2103)
!2103 = !{!2104, !2105, !2106}
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2102, file: !682, line: 445, baseType: !2022, size: 256)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2102, file: !682, line: 449, baseType: !1688, size: 64, offset: 256)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2102, file: !682, line: 453, baseType: !2007, size: 64, offset: 320)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2019, file: !682, line: 746, baseType: !2108, size: 320)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !682, line: 459, size: 320, elements: !2109)
!2109 = !{!2110, !2111}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2108, file: !682, line: 461, baseType: !2022, size: 256)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2108, file: !682, line: 464, baseType: !1688, size: 64, offset: 256)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2019, file: !682, line: 747, baseType: !2113, size: 768)
!2113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !682, line: 469, size: 768, elements: !2114)
!2114 = !{!2115, !2116, !2117, !2118, !2119}
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2113, file: !682, line: 471, baseType: !2022, size: 256)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2113, file: !682, line: 474, baseType: !7, size: 32, offset: 256)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2113, file: !682, line: 475, baseType: !7, size: 32, offset: 288)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2113, file: !682, line: 478, baseType: !1688, size: 64, offset: 320)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2113, file: !682, line: 481, baseType: !2120, size: 384, offset: 384)
!2120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2121, size: 384, elements: !1788)
!2121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2122)
!2122 = !{!2123, !2124, !2125}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2121, file: !135, line: 1920, baseType: !2059, size: 256)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2121, file: !135, line: 1921, baseType: !1688, size: 64, offset: 256)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2121, file: !135, line: 1922, baseType: !1815, size: 32, offset: 320)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2019, file: !682, line: 748, baseType: !2127, size: 320)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !682, line: 487, size: 320, elements: !2128)
!2128 = !{!2129, !2130}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2127, file: !682, line: 490, baseType: !2022, size: 256)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2127, file: !682, line: 494, baseType: !1784, size: 32, offset: 256)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2019, file: !682, line: 749, baseType: !2132, size: 384)
!2132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !682, line: 500, size: 384, elements: !2133)
!2133 = !{!2134, !2135, !2136}
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2132, file: !682, line: 502, baseType: !2022, size: 256)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2132, file: !682, line: 506, baseType: !2007, size: 64, offset: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2132, file: !682, line: 510, baseType: !2007, size: 64, offset: 320)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2019, file: !682, line: 750, baseType: !2138, size: 320)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !682, line: 529, size: 320, elements: !2139)
!2139 = !{!2140, !2141}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2138, file: !682, line: 531, baseType: !2022, size: 256)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2138, file: !682, line: 540, baseType: !2007, size: 64, offset: 256)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2019, file: !682, line: 751, baseType: !2143, size: 704)
!2143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !682, line: 546, size: 704, elements: !2144)
!2144 = !{!2145, !2146, !2147, !2148, !2149, !2150, !2151}
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2143, file: !682, line: 549, baseType: !2073, size: 512)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2143, file: !682, line: 553, baseType: !1890, size: 64, offset: 512)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2143, file: !682, line: 557, baseType: !1807, size: 8, offset: 576)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2143, file: !682, line: 558, baseType: !1807, size: 8, offset: 584)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2143, file: !682, line: 559, baseType: !1807, size: 8, offset: 592)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2143, file: !682, line: 560, baseType: !1807, size: 8, offset: 600)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2143, file: !682, line: 566, baseType: !2071, size: 64, offset: 640)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2019, file: !682, line: 752, baseType: !2153, size: 384)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !682, line: 571, size: 384, elements: !2154)
!2154 = !{!2155, !2156}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2153, file: !682, line: 573, baseType: !2084, size: 320)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2153, file: !682, line: 577, baseType: !1688, size: 64, offset: 320)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2019, file: !682, line: 753, baseType: !2158, size: 576)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !682, line: 600, size: 576, elements: !2159)
!2159 = !{!2160, !2161, !2162, !2165, !2174}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2158, file: !682, line: 602, baseType: !2084, size: 320)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2158, file: !682, line: 605, baseType: !1688, size: 64, offset: 320)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2158, file: !682, line: 609, baseType: !2163, size: 64, offset: 384)
!2163 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2164, line: 46, baseType: !1741)
!2164 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2158, file: !682, line: 612, baseType: !2166, size: 64, offset: 448)
!2166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2167, size: 64)
!2167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !682, line: 581, size: 320, elements: !2168)
!2168 = !{!2169, !2170, !2171, !2172, !2173}
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2167, file: !682, line: 583, baseType: !134, size: 32)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2167, file: !682, line: 586, baseType: !1688, size: 64, offset: 64)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2167, file: !682, line: 589, baseType: !1688, size: 64, offset: 128)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2167, file: !682, line: 592, baseType: !1688, size: 64, offset: 192)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2167, file: !682, line: 595, baseType: !1688, size: 64, offset: 256)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2158, file: !682, line: 616, baseType: !2007, size: 64, offset: 512)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2019, file: !682, line: 754, baseType: !2176, size: 512)
!2176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !682, line: 622, size: 512, elements: !2177)
!2177 = !{!2178, !2179, !2180, !2181}
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2176, file: !682, line: 624, baseType: !2084, size: 320)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2176, file: !682, line: 628, baseType: !1688, size: 64, offset: 320)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2176, file: !682, line: 632, baseType: !1688, size: 64, offset: 384)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2176, file: !682, line: 636, baseType: !1688, size: 64, offset: 448)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2019, file: !682, line: 755, baseType: !2183, size: 704)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !682, line: 642, size: 704, elements: !2184)
!2184 = !{!2185, !2186, !2187, !2188}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2183, file: !682, line: 644, baseType: !2176, size: 512)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2183, file: !682, line: 648, baseType: !1688, size: 64, offset: 512)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2183, file: !682, line: 652, baseType: !1688, size: 64, offset: 576)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2183, file: !682, line: 653, baseType: !1688, size: 64, offset: 640)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2019, file: !682, line: 756, baseType: !2190, size: 448)
!2190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !682, line: 663, size: 448, elements: !2191)
!2191 = !{!2192, !2193, !2194}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2190, file: !682, line: 665, baseType: !2084, size: 320)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2190, file: !682, line: 668, baseType: !1688, size: 64, offset: 320)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2190, file: !682, line: 673, baseType: !1688, size: 64, offset: 384)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2019, file: !682, line: 757, baseType: !2196, size: 384)
!2196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !682, line: 694, size: 384, elements: !2197)
!2197 = !{!2198, !2199}
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2196, file: !682, line: 696, baseType: !2084, size: 320)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2196, file: !682, line: 699, baseType: !1688, size: 64, offset: 320)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2019, file: !682, line: 758, baseType: !2201, size: 384)
!2201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !682, line: 681, size: 384, elements: !2202)
!2202 = !{!2203, !2204, !2205}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2201, file: !682, line: 683, baseType: !2022, size: 256)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2201, file: !682, line: 686, baseType: !1688, size: 64, offset: 256)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2201, file: !682, line: 689, baseType: !1688, size: 64, offset: 320)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2019, file: !682, line: 759, baseType: !2207, size: 384)
!2207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !682, line: 707, size: 384, elements: !2208)
!2208 = !{!2209, !2210, !2211}
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2207, file: !682, line: 709, baseType: !2022, size: 256)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2207, file: !682, line: 712, baseType: !1688, size: 64, offset: 256)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2207, file: !682, line: 712, baseType: !1688, size: 64, offset: 320)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2019, file: !682, line: 760, baseType: !2213, size: 320)
!2213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !682, line: 718, size: 320, elements: !2214)
!2214 = !{!2215, !2216}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2213, file: !682, line: 720, baseType: !2022, size: 256)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2213, file: !682, line: 723, baseType: !1688, size: 64, offset: 256)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2014, file: !682, line: 138, baseType: !2013, size: 64, offset: 64)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2014, file: !682, line: 139, baseType: !2013, size: 64, offset: 128)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2009, file: !682, line: 146, baseType: !2012, size: 64, offset: 64)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2009, file: !682, line: 152, baseType: !2007, size: 64, offset: 128)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2004, file: !337, line: 130, baseType: !1864, size: 64)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1999, file: !337, line: 134, baseType: !1970, size: 64, offset: 192)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1999, file: !337, line: 137, baseType: !1688, size: 64, offset: 256)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1999, file: !337, line: 138, baseType: !1815, size: 32, offset: 320)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1999, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1999, file: !337, line: 144, baseType: !1784, size: 32, offset: 384)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1999, file: !337, line: 145, baseType: !1784, size: 32, offset: 416)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1999, file: !337, line: 146, baseType: !2229, size: 64, offset: 448)
!2229 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !1743)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1982, file: !337, line: 220, baseType: !1985, size: 64, offset: 64)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1982, file: !337, line: 223, baseType: !1970, size: 64, offset: 128)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1982, file: !337, line: 226, baseType: !2233, size: 64, offset: 192)
!2233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!2234 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1982, file: !337, line: 229, baseType: !2236, size: 128, offset: 256)
!2236 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2237, size: 128, elements: !1934)
!2237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2238, size: 64)
!2238 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1982, file: !337, line: 232, baseType: !1981, size: 64, offset: 384)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1982, file: !337, line: 233, baseType: !1981, size: 64, offset: 448)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1982, file: !337, line: 238, baseType: !2242, size: 64, offset: 512)
!2242 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !2243)
!2243 = !{!2244, !2250}
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2242, file: !337, line: 236, baseType: !2245, size: 64)
!2245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2246, size: 64)
!2246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !2247)
!2247 = !{!2248, !2249}
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2246, file: !337, line: 275, baseType: !2007, size: 64)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2246, file: !337, line: 278, baseType: !2007, size: 64, offset: 64)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2242, file: !337, line: 237, baseType: !2251, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2252, size: 64)
!2252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !2253)
!2253 = !{!2254, !2255, !2256, !2257, !2258}
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2252, file: !337, line: 261, baseType: !1864, size: 64)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2252, file: !337, line: 262, baseType: !1864, size: 64, offset: 64)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2252, file: !337, line: 266, baseType: !1864, size: 64, offset: 128)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2252, file: !337, line: 267, baseType: !1864, size: 64, offset: 192)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2252, file: !337, line: 270, baseType: !1784, size: 32, offset: 256)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1982, file: !337, line: 241, baseType: !2229, size: 64, offset: 576)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1982, file: !337, line: 244, baseType: !1784, size: 32, offset: 640)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1982, file: !337, line: 247, baseType: !1784, size: 32, offset: 672)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1982, file: !337, line: 250, baseType: !1784, size: 32, offset: 704)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1982, file: !337, line: 253, baseType: !1784, size: 32, offset: 736)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1982, file: !337, line: 256, baseType: !1784, size: 32, offset: 768)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1885, file: !1867, line: 179, baseType: !2266, size: 64)
!2266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2267, size: 64)
!2267 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1867, line: 150, baseType: !2268)
!2268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1867, line: 142, size: 320, elements: !2269)
!2269 = !{!2270, !2271, !2272, !2273, !2276, !2277}
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2268, file: !1867, line: 144, baseType: !1688, size: 64)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2268, file: !1867, line: 145, baseType: !1864, size: 64, offset: 64)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2268, file: !1867, line: 146, baseType: !1864, size: 64, offset: 128)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2268, file: !1867, line: 147, baseType: !2274, size: 32, offset: 192)
!2274 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2275, line: 31, baseType: !1784)
!2275 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2268, file: !1867, line: 148, baseType: !7, size: 32, offset: 224)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2268, file: !1867, line: 149, baseType: !1807, size: 8, offset: 256)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1885, file: !1867, line: 180, baseType: !2279, size: 64)
!2279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2280, size: 64)
!2280 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1867, line: 162, baseType: !2281)
!2281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1867, line: 159, size: 128, elements: !2282)
!2282 = !{!2283, !2284}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2281, file: !1867, line: 160, baseType: !1688, size: 64)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2281, file: !1867, line: 161, baseType: !1743, size: 64, offset: 64)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1885, file: !1867, line: 181, baseType: !2286, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!2287 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1867, line: 181, flags: DIFlagFwdDecl)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1880, file: !1867, line: 317, baseType: !2289, size: 64)
!2289 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1743, size: 64, elements: !1788)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1880, file: !1867, line: 318, baseType: !2291, size: 320)
!2291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1867, line: 188, size: 320, elements: !2292)
!2292 = !{!2293, !2295, !2352}
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2291, file: !1867, line: 190, baseType: !2294, size: 192)
!2294 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1884, size: 192, elements: !1761)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2291, file: !1867, line: 193, baseType: !2296, size: 64, offset: 192)
!2296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2297, size: 64)
!2297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1867, line: 206, size: 320, elements: !2298)
!2298 = !{!2299, !2337, !2338, !2339, !2351}
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2297, file: !1867, line: 208, baseType: !2300, size: 64)
!2300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!2301 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1678, line: 62, baseType: !2302)
!2302 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2303, line: 538, size: 256, elements: !2304)
!2303 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2304 = !{!2305, !2309, !2315, !2328}
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2302, file: !2303, line: 539, baseType: !2306, size: 32)
!2306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2303, line: 482, size: 32, elements: !2307)
!2307 = !{!2308}
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2306, file: !2303, line: 484, baseType: !7, size: 32)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2302, file: !2303, line: 540, baseType: !2310, size: 192)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2303, line: 488, size: 192, elements: !2311)
!2311 = !{!2312, !2313, !2314}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2310, file: !2303, line: 489, baseType: !2306, size: 32)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2310, file: !2303, line: 492, baseType: !1890, size: 64, offset: 64)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2310, file: !2303, line: 496, baseType: !1688, size: 64, offset: 128)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2302, file: !2303, line: 541, baseType: !2316, size: 256)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2303, line: 504, size: 256, elements: !2317)
!2317 = !{!2318, !2319, !2326, !2327}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2316, file: !2303, line: 505, baseType: !2306, size: 32)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2316, file: !2303, line: 509, baseType: !2320, size: 64, offset: 64)
!2320 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2303, line: 501, baseType: !2321)
!2321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2322, size: 64)
!2322 = !DISubroutineType(types: !2323)
!2323 = !{null, !2324}
!2324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!2325 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2316, file: !2303, line: 510, baseType: !2324, size: 64, offset: 128)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2316, file: !2303, line: 513, baseType: !2300, size: 64, offset: 192)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2302, file: !2303, line: 542, baseType: !2329, size: 128)
!2329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2303, line: 530, size: 128, elements: !2330)
!2330 = !{!2331, !2332}
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2329, file: !2303, line: 531, baseType: !2306, size: 32)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2329, file: !2303, line: 534, baseType: !2333, size: 64, offset: 64)
!2333 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2303, line: 525, baseType: !2334)
!2334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2335, size: 64)
!2335 = !DISubroutineType(types: !2336)
!2336 = !{!1807, !1688, !1890, !1741, !1741}
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2297, file: !1867, line: 211, baseType: !7, size: 32, offset: 64)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2297, file: !1867, line: 214, baseType: !1743, size: 64, offset: 128)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2297, file: !1867, line: 224, baseType: !2340, size: 64, offset: 192)
!2340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2341, size: 64)
!2341 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1867, line: 202, baseType: !2342)
!2342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1867, line: 202, size: 128, elements: !2343)
!2343 = !{!2344}
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2342, file: !1867, line: 202, baseType: !2345, size: 128)
!2345 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1867, line: 200, baseType: !2346)
!2346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1867, line: 200, size: 128, elements: !2347)
!2347 = !{!2348, !2349, !2350}
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2346, file: !1867, line: 200, baseType: !7, size: 32)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2346, file: !1867, line: 200, baseType: !7, size: 32, offset: 32)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2346, file: !1867, line: 200, baseType: !1900, size: 64, offset: 64)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2297, file: !1867, line: 234, baseType: !2340, size: 64, offset: 256)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2291, file: !1867, line: 197, baseType: !1743, size: 64, offset: 256)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1880, file: !1867, line: 319, baseType: !1750, size: 256)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1880, file: !1867, line: 320, baseType: !1769, size: 192)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1690, file: !135, line: 3384, baseType: !2356, size: 1472)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2357)
!2357 = !{!2358, !2379, !2380, !2381, !2382}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2356, file: !135, line: 3115, baseType: !2359, size: 1216)
!2359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2360)
!2360 = !{!2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378}
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2359, file: !135, line: 2985, baseType: !1860, size: 960)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2359, file: !135, line: 2986, baseType: !1688, size: 64, offset: 960)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2359, file: !135, line: 2987, baseType: !1688, size: 64, offset: 1024)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2359, file: !135, line: 2988, baseType: !1688, size: 64, offset: 1088)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2359, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2359, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2359, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2359, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2359, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2359, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2359, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2359, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2359, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2359, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2359, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2359, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2359, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2359, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2356, file: !135, line: 3117, baseType: !1688, size: 64, offset: 1216)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2356, file: !135, line: 3119, baseType: !1688, size: 64, offset: 1280)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2356, file: !135, line: 3121, baseType: !1688, size: 64, offset: 1344)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2356, file: !135, line: 3123, baseType: !1688, size: 64, offset: 1408)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1690, file: !135, line: 3385, baseType: !2384, size: 1088)
!2384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2385)
!2385 = !{!2386, !2387, !2388}
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2384, file: !135, line: 2875, baseType: !1860, size: 960)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2384, file: !135, line: 2876, baseType: !1864, size: 64, offset: 960)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2384, file: !135, line: 2877, baseType: !2389, size: 64, offset: 1024)
!2389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2390, size: 64)
!2390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2391, line: 172, size: 128, elements: !2392)
!2391 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2392 = !{!2393, !2394, !2395, !2396, !2397, !2398, !2399}
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2390, file: !2391, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2390, file: !2391, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2390, file: !2391, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2390, file: !2391, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2390, file: !2391, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2390, file: !2391, line: 195, baseType: !7, size: 32, offset: 32)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2390, file: !2391, line: 199, baseType: !1688, size: 64, offset: 64)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1690, file: !135, line: 3386, baseType: !2359, size: 1216)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1690, file: !135, line: 3387, baseType: !2402, size: 1280)
!2402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2403)
!2403 = !{!2404, !2405}
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2402, file: !135, line: 3094, baseType: !2359, size: 1216)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2402, file: !135, line: 3095, baseType: !2389, size: 64, offset: 1216)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1690, file: !135, line: 3388, baseType: !2407, size: 1216)
!2407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2408)
!2408 = !{!2409, !2410, !2411, !2412, !2413, !2414}
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2407, file: !135, line: 2825, baseType: !1822, size: 896)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2407, file: !135, line: 2827, baseType: !1688, size: 64, offset: 896)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2407, file: !135, line: 2828, baseType: !1688, size: 64, offset: 960)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2407, file: !135, line: 2829, baseType: !1688, size: 64, offset: 1024)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2407, file: !135, line: 2830, baseType: !1688, size: 64, offset: 1088)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2407, file: !135, line: 2831, baseType: !1688, size: 64, offset: 1152)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1690, file: !135, line: 3389, baseType: !2416, size: 1024)
!2416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2417)
!2417 = !{!2418, !2419, !2420}
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2416, file: !135, line: 2851, baseType: !1860, size: 960)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2416, file: !135, line: 2852, baseType: !1784, size: 32, offset: 960)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2416, file: !135, line: 2853, baseType: !1784, size: 32, offset: 992)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1690, file: !135, line: 3390, baseType: !2422, size: 1024)
!2422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2423)
!2423 = !{!2424, !2425}
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2422, file: !135, line: 2858, baseType: !1860, size: 960)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2422, file: !135, line: 2859, baseType: !2389, size: 64, offset: 960)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1690, file: !135, line: 3391, baseType: !2427, size: 960)
!2427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2428)
!2428 = !{!2429}
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2427, file: !135, line: 2863, baseType: !1860, size: 960)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1690, file: !135, line: 3392, baseType: !2431, size: 1472)
!2431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2432)
!2432 = !{!2433}
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2431, file: !135, line: 3305, baseType: !2356, size: 1472)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1690, file: !135, line: 3393, baseType: !2435, size: 1792)
!2435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2436)
!2436 = !{!2437, !2438, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766}
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2435, file: !135, line: 3249, baseType: !2356, size: 1472)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2435, file: !135, line: 3251, baseType: !2439, size: 64, offset: 1472)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2440, size: 64)
!2440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !660, line: 463, size: 1152, elements: !2441)
!2441 = !{!2442, !2600, !2631, !2632, !2687, !2690, !2691, !2692, !2693, !2694, !2695, !2719, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745}
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2440, file: !660, line: 464, baseType: !2443, size: 64)
!2443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2444, size: 64)
!2444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !2445)
!2445 = !{!2446, !2495, !2508, !2522, !2569, !2581}
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2444, file: !330, line: 197, baseType: !2447, size: 64)
!2447 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !2448)
!2448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2449, size: 64)
!2449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !2450)
!2450 = !{!2451, !2452, !2453, !2454, !2455, !2456, !2483, !2492, !2493, !2494}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2449, file: !330, line: 119, baseType: !2448, size: 64)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2449, file: !330, line: 122, baseType: !2448, size: 64, offset: 64)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2449, file: !330, line: 123, baseType: !2448, size: 64, offset: 128)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2449, file: !330, line: 126, baseType: !1784, size: 32, offset: 192)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2449, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2449, file: !330, line: 165, baseType: !2457, size: 192, offset: 256)
!2457 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !2458)
!2458 = !{!2459, !2472, !2478}
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2457, file: !330, line: 137, baseType: !2460, size: 128)
!2460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !2461)
!2461 = !{!2462, !2471}
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2460, file: !330, line: 135, baseType: !2463, size: 64)
!2463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2464, size: 64)
!2464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !2465)
!2465 = !{!2466, !2467, !2468, !2469, !2470}
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2464, file: !330, line: 96, baseType: !2463, size: 64)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2464, file: !330, line: 97, baseType: !2463, size: 64, offset: 64)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2464, file: !330, line: 101, baseType: !1688, size: 64, offset: 128)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2464, file: !330, line: 106, baseType: !1688, size: 64, offset: 192)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2464, file: !330, line: 111, baseType: !1688, size: 64, offset: 256)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2460, file: !330, line: 136, baseType: !2463, size: 64, offset: 64)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2457, file: !330, line: 151, baseType: !2473, size: 192)
!2473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !2474)
!2474 = !{!2475, !2476, !2477}
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2473, file: !330, line: 141, baseType: !1688, size: 64)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2473, file: !330, line: 145, baseType: !1688, size: 64, offset: 64)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2473, file: !330, line: 150, baseType: !1784, size: 32, offset: 128)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2457, file: !330, line: 164, baseType: !2479, size: 128)
!2479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !2480)
!2480 = !{!2481, !2482}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2479, file: !330, line: 161, baseType: !1688, size: 64)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2479, file: !330, line: 163, baseType: !1815, size: 32, offset: 64)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2449, file: !330, line: 168, baseType: !2484, size: 64, offset: 448)
!2484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2485, size: 64)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !2486)
!2486 = !{!2487, !2488, !2489, !2490, !2491}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2485, file: !330, line: 70, baseType: !2484, size: 64)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2485, file: !330, line: 73, baseType: !2448, size: 64, offset: 64)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2485, file: !330, line: 78, baseType: !1688, size: 64, offset: 128)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2485, file: !330, line: 85, baseType: !1864, size: 64, offset: 192)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2485, file: !330, line: 88, baseType: !1784, size: 32, offset: 256)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2449, file: !330, line: 173, baseType: !1864, size: 64, offset: 512)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2449, file: !330, line: 173, baseType: !1864, size: 64, offset: 576)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2449, file: !330, line: 177, baseType: !1807, size: 8, offset: 640)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2444, file: !330, line: 200, baseType: !2496, size: 64, offset: 64)
!2496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2497, size: 64)
!2497 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !2498)
!2498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !2499)
!2499 = !{!2500}
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2498, file: !330, line: 185, baseType: !2501, size: 128)
!2501 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !2502)
!2502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !2503)
!2503 = !{!2504, !2505, !2506}
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2502, file: !330, line: 184, baseType: !7, size: 32)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2502, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2502, file: !330, line: 184, baseType: !2507, size: 64, offset: 64)
!2507 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2447, size: 64, elements: !1788)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2444, file: !330, line: 203, baseType: !2509, size: 64, offset: 128)
!2509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2510, size: 64)
!2510 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !2511)
!2511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !2512)
!2512 = !{!2513}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2511, file: !330, line: 189, baseType: !2514, size: 128)
!2514 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !2515)
!2515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !2516)
!2516 = !{!2517, !2518, !2519}
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2515, file: !330, line: 188, baseType: !7, size: 32)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2515, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2515, file: !330, line: 188, baseType: !2520, size: 64, offset: 64)
!2520 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2521, size: 64, elements: !1788)
!2521 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !2484)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2444, file: !330, line: 207, baseType: !2523, size: 64, offset: 192)
!2523 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !677, line: 144, baseType: !2524)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !677, line: 100, size: 896, elements: !2526)
!2526 = !{!2527, !2533, !2538, !2543, !2545, !2546, !2547, !2548, !2549, !2550, !2555, !2557, !2558, !2563, !2568}
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2525, file: !677, line: 102, baseType: !2528, size: 64)
!2528 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !677, line: 52, baseType: !2529)
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2530 = !DISubroutineType(types: !2531)
!2531 = !{!2532, !2324}
!2532 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !677, line: 47, baseType: !7)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2525, file: !677, line: 105, baseType: !2534, size: 64, offset: 64)
!2534 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !677, line: 59, baseType: !2535)
!2535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2536, size: 64)
!2536 = !DISubroutineType(types: !2537)
!2537 = !{!1784, !2324, !2324}
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2525, file: !677, line: 108, baseType: !2539, size: 64, offset: 128)
!2539 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !677, line: 63, baseType: !2540)
!2540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2541, size: 64)
!2541 = !DISubroutineType(types: !2542)
!2542 = !{null, !1970}
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2525, file: !677, line: 111, baseType: !2544, size: 64, offset: 192)
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1970, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2525, file: !677, line: 114, baseType: !2163, size: 64, offset: 256)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2525, file: !677, line: 117, baseType: !2163, size: 64, offset: 320)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2525, file: !677, line: 120, baseType: !2163, size: 64, offset: 384)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2525, file: !677, line: 124, baseType: !7, size: 32, offset: 448)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2525, file: !677, line: 128, baseType: !7, size: 32, offset: 480)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2525, file: !677, line: 131, baseType: !2551, size: 64, offset: 512)
!2551 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !677, line: 75, baseType: !2552)
!2552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!2553 = !DISubroutineType(types: !2554)
!2554 = !{!1970, !2163, !2163}
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2525, file: !677, line: 132, baseType: !2556, size: 64, offset: 576)
!2556 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !677, line: 78, baseType: !2540)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2525, file: !677, line: 135, baseType: !1970, size: 64, offset: 640)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2525, file: !677, line: 136, baseType: !2559, size: 64, offset: 704)
!2559 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !677, line: 82, baseType: !2560)
!2560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2561, size: 64)
!2561 = !DISubroutineType(types: !2562)
!2562 = !{!1970, !1970, !2163, !2163}
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2525, file: !677, line: 137, baseType: !2564, size: 64, offset: 768)
!2564 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !677, line: 83, baseType: !2565)
!2565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2566, size: 64)
!2566 = !DISubroutineType(types: !2567)
!2567 = !{null, !1970, !1970}
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2525, file: !677, line: 141, baseType: !7, size: 32, offset: 832)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2444, file: !330, line: 211, baseType: !2570, size: 64, offset: 256)
!2570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2571, size: 64)
!2571 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2572)
!2572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2573)
!2573 = !{!2574}
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2572, file: !135, line: 183, baseType: !2575, size: 128)
!2575 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2576)
!2576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2577)
!2577 = !{!2578, !2579, !2580}
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2576, file: !135, line: 182, baseType: !7, size: 32)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2576, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2576, file: !135, line: 182, baseType: !2071, size: 64, offset: 64)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2444, file: !330, line: 220, baseType: !2582, size: 64, offset: 320)
!2582 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !2583)
!2583 = !{!2584, !2585}
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2582, file: !330, line: 218, baseType: !2570, size: 64)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2582, file: !330, line: 219, baseType: !2586, size: 64)
!2586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2587, size: 64)
!2587 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2588, line: 29, baseType: !2589)
!2588 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2588, line: 29, size: 96, elements: !2590)
!2590 = !{!2591}
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2589, file: !2588, line: 29, baseType: !2592, size: 96)
!2592 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2588, line: 27, baseType: !2593)
!2593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2588, line: 27, size: 96, elements: !2594)
!2594 = !{!2595, !2596, !2597}
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2593, file: !2588, line: 27, baseType: !7, size: 32)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2593, file: !2588, line: 27, baseType: !7, size: 32, offset: 32)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2593, file: !2588, line: 27, baseType: !2598, size: 8, offset: 64)
!2598 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2599, size: 8, elements: !1788)
!2599 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2588, line: 26, baseType: !1807)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2440, file: !660, line: 467, baseType: !2601, size: 64, offset: 64)
!2601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2602, size: 64)
!2602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !2603)
!2603 = !{!2604, !2606, !2607, !2620, !2621, !2622, !2623, !2624, !2625, !2627, !2629, !2630}
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2602, file: !337, line: 377, baseType: !2605, size: 64)
!2605 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1678, line: 111, baseType: !1981)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2602, file: !337, line: 378, baseType: !2605, size: 64, offset: 64)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2602, file: !337, line: 381, baseType: !2608, size: 64, offset: 128)
!2608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2609, size: 64)
!2609 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !2610)
!2610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !2611)
!2611 = !{!2612}
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2610, file: !337, line: 282, baseType: !2613, size: 128)
!2613 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !2614)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !2615)
!2615 = !{!2616, !2617, !2618}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2614, file: !337, line: 281, baseType: !7, size: 32)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2614, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2614, file: !337, line: 281, baseType: !2619, size: 64, offset: 64)
!2619 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2605, size: 64, elements: !1788)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2602, file: !337, line: 384, baseType: !1784, size: 32, offset: 192)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2602, file: !337, line: 387, baseType: !1784, size: 32, offset: 224)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2602, file: !337, line: 390, baseType: !1784, size: 32, offset: 256)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2602, file: !337, line: 394, baseType: !2608, size: 64, offset: 320)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2602, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2602, file: !337, line: 399, baseType: !2626, size: 64, offset: 416)
!2626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !1934)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2602, file: !337, line: 402, baseType: !2628, size: 64, offset: 480)
!2628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1934)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2602, file: !337, line: 406, baseType: !1784, size: 32, offset: 544)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2602, file: !337, line: 409, baseType: !1784, size: 32, offset: 576)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2440, file: !660, line: 470, baseType: !2008, size: 64, offset: 128)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2440, file: !660, line: 473, baseType: !2633, size: 64, offset: 192)
!2633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2634, size: 64)
!2634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2391, line: 39, size: 1152, elements: !2635)
!2635 = !{!2636, !2637, !2650, !2651, !2652, !2664, !2665, !2669, !2670, !2671, !2672, !2673}
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2634, file: !2391, line: 41, baseType: !2523, size: 64)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2634, file: !2391, line: 48, baseType: !2638, size: 64, offset: 64)
!2638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2639, size: 64)
!2639 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !682, line: 35, baseType: !2640)
!2640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !682, line: 35, size: 128, elements: !2641)
!2641 = !{!2642}
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2640, file: !682, line: 35, baseType: !2643, size: 128)
!2643 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !682, line: 33, baseType: !2644)
!2644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !682, line: 33, size: 128, elements: !2645)
!2645 = !{!2646, !2647, !2648}
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2644, file: !682, line: 33, baseType: !7, size: 32)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2644, file: !682, line: 33, baseType: !7, size: 32, offset: 32)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2644, file: !682, line: 33, baseType: !2649, size: 64, offset: 64)
!2649 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2017, size: 64, elements: !1788)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2634, file: !2391, line: 51, baseType: !2570, size: 64, offset: 128)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2634, file: !2391, line: 54, baseType: !1688, size: 64, offset: 192)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2634, file: !2391, line: 57, baseType: !2653, size: 128, offset: 256)
!2653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2654, line: 31, size: 128, elements: !2655)
!2654 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2655 = !{!2656, !2657, !2658, !2659, !2660, !2661, !2662}
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2653, file: !2654, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2653, file: !2654, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2653, file: !2654, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2653, file: !2654, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2653, file: !2654, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2653, file: !2654, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2653, file: !2654, line: 56, baseType: !2663, size: 64, offset: 64)
!2663 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1678, line: 47, baseType: !1918)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2634, file: !2391, line: 60, baseType: !2653, size: 128, offset: 384)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2634, file: !2391, line: 64, baseType: !2666, size: 64, offset: 512)
!2666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2667, size: 64)
!2667 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2668, line: 33, flags: DIFlagFwdDecl)
!2668 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2634, file: !2391, line: 67, baseType: !1688, size: 64, offset: 576)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2634, file: !2391, line: 73, baseType: !2523, size: 64, offset: 640)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2634, file: !2391, line: 77, baseType: !2663, size: 64, offset: 704)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2634, file: !2391, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2634, file: !2391, line: 82, baseType: !2674, size: 320, offset: 832)
!2674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2048, line: 62, size: 320, elements: !2675)
!2675 = !{!2676, !2682, !2683, !2684, !2685, !2686}
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2674, file: !2048, line: 63, baseType: !2677, size: 64)
!2677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2678, size: 64)
!2678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2048, line: 56, size: 128, elements: !2679)
!2679 = !{!2680, !2681}
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2678, file: !2048, line: 57, baseType: !2677, size: 64)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2678, file: !2048, line: 58, baseType: !1786, size: 8, offset: 64)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2674, file: !2048, line: 64, baseType: !7, size: 32, offset: 64)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2674, file: !2048, line: 66, baseType: !7, size: 32, offset: 96)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2674, file: !2048, line: 68, baseType: !1807, size: 8, offset: 128)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2674, file: !2048, line: 70, baseType: !2046, size: 64, offset: 192)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2674, file: !2048, line: 71, baseType: !2054, size: 64, offset: 256)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2440, file: !660, line: 476, baseType: !2688, size: 64, offset: 256)
!2688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2689, size: 64)
!2689 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !660, line: 476, flags: DIFlagFwdDecl)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2440, file: !660, line: 479, baseType: !2523, size: 64, offset: 320)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2440, file: !660, line: 484, baseType: !1688, size: 64, offset: 384)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2440, file: !660, line: 488, baseType: !1688, size: 64, offset: 448)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2440, file: !660, line: 493, baseType: !1688, size: 64, offset: 512)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2440, file: !660, line: 496, baseType: !1688, size: 64, offset: 576)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2440, file: !660, line: 501, baseType: !2696, size: 64, offset: 640)
!2696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2697, size: 64)
!2697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !2698)
!2698 = !{!2699, !2702, !2703, !2704, !2705, !2707, !2708, !2713, !2714, !2715, !2716, !2717, !2718}
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2697, file: !348, line: 2356, baseType: !2700, size: 64)
!2700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2701, size: 64)
!2701 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2697, file: !348, line: 2357, baseType: !1890, size: 64, offset: 64)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2697, file: !348, line: 2358, baseType: !1784, size: 32, offset: 128)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2697, file: !348, line: 2359, baseType: !1784, size: 32, offset: 160)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2697, file: !348, line: 2360, baseType: !2706, size: 128, offset: 192)
!2706 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1784, size: 128, elements: !1959)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2697, file: !348, line: 2364, baseType: !1784, size: 32, offset: 320)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2697, file: !348, line: 2367, baseType: !2709, size: 128, offset: 384)
!2709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !2710)
!2710 = !{!2711, !2712}
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2709, file: !348, line: 2351, baseType: !1864, size: 64)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2709, file: !348, line: 2352, baseType: !1743, size: 64, offset: 64)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2697, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2697, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2697, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2697, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2697, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2697, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2440, file: !660, line: 504, baseType: !2720, size: 64, offset: 704)
!2720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2721, size: 64)
!2721 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !660, line: 504, flags: DIFlagFwdDecl)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2440, file: !660, line: 507, baseType: !2523, size: 64, offset: 768)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2440, file: !660, line: 510, baseType: !1784, size: 32, offset: 832)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2440, file: !660, line: 513, baseType: !1784, size: 32, offset: 864)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2440, file: !660, line: 516, baseType: !1815, size: 32, offset: 896)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2440, file: !660, line: 519, baseType: !1815, size: 32, offset: 928)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2440, file: !660, line: 522, baseType: !7, size: 32, offset: 960)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2440, file: !660, line: 523, baseType: !7, size: 32, offset: 992)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2440, file: !660, line: 528, baseType: !1890, size: 64, offset: 1024)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2440, file: !660, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2440, file: !660, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2440, file: !660, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2440, file: !660, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2440, file: !660, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2440, file: !660, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2440, file: !660, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2440, file: !660, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2440, file: !660, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2440, file: !660, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2440, file: !660, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2440, file: !660, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2440, file: !660, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2440, file: !660, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2440, file: !660, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2440, file: !660, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2435, file: !135, line: 3254, baseType: !1688, size: 64, offset: 1536)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2435, file: !135, line: 3257, baseType: !1688, size: 64, offset: 1600)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2435, file: !135, line: 3258, baseType: !1688, size: 64, offset: 1664)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2435, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2435, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2435, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2435, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2435, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2435, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2435, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2435, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2435, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2435, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2435, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2435, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2435, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2435, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2435, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2435, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2435, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2435, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1690, file: !135, line: 3394, baseType: !2768, size: 1344)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2769)
!2769 = !{!2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2768, file: !135, line: 2280, baseType: !1726, size: 192)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2768, file: !135, line: 2281, baseType: !1688, size: 64, offset: 192)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2768, file: !135, line: 2282, baseType: !1688, size: 64, offset: 256)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2768, file: !135, line: 2283, baseType: !1688, size: 64, offset: 320)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2768, file: !135, line: 2284, baseType: !1688, size: 64, offset: 384)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2768, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2768, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2768, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2768, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2768, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2768, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2768, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2768, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2768, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2768, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2768, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2768, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2768, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2768, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2768, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2768, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2768, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2768, file: !135, line: 2306, baseType: !2274, size: 32, offset: 544)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2768, file: !135, line: 2307, baseType: !1688, size: 64, offset: 576)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2768, file: !135, line: 2308, baseType: !1688, size: 64, offset: 640)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2768, file: !135, line: 2314, baseType: !2796, size: 64, offset: 704)
!2796 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2797)
!2797 = !{!2798, !2799, !2800}
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2796, file: !135, line: 2310, baseType: !1784, size: 32)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2796, file: !135, line: 2311, baseType: !1890, size: 64)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2796, file: !135, line: 2312, baseType: !2801, size: 64)
!2801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2802, size: 64)
!2802 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2768, file: !135, line: 2315, baseType: !1688, size: 64, offset: 768)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2768, file: !135, line: 2316, baseType: !1688, size: 64, offset: 832)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2768, file: !135, line: 2317, baseType: !1688, size: 64, offset: 896)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2768, file: !135, line: 2318, baseType: !1688, size: 64, offset: 960)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2768, file: !135, line: 2319, baseType: !1688, size: 64, offset: 1024)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2768, file: !135, line: 2320, baseType: !1688, size: 64, offset: 1088)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2768, file: !135, line: 2321, baseType: !1688, size: 64, offset: 1152)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2768, file: !135, line: 2322, baseType: !1688, size: 64, offset: 1216)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2768, file: !135, line: 2324, baseType: !2812, size: 64, offset: 1280)
!2812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2813, size: 64)
!2813 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1690, file: !135, line: 3395, baseType: !2815, size: 320)
!2815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2816)
!2816 = !{!2817, !2818, !2819}
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2815, file: !135, line: 1470, baseType: !1726, size: 192)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2815, file: !135, line: 1471, baseType: !1688, size: 64, offset: 192)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2815, file: !135, line: 1472, baseType: !1688, size: 64, offset: 256)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1690, file: !135, line: 3396, baseType: !2821, size: 320)
!2821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2822)
!2822 = !{!2823, !2824, !2825}
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2821, file: !135, line: 1483, baseType: !1726, size: 192)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2821, file: !135, line: 1484, baseType: !1784, size: 32, offset: 192)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2821, file: !135, line: 1485, baseType: !2071, size: 64, offset: 256)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1690, file: !135, line: 3397, baseType: !2827, size: 384)
!2827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2828)
!2828 = !{!2829, !2830, !2831, !2832}
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2827, file: !135, line: 1830, baseType: !1726, size: 192)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2827, file: !135, line: 1831, baseType: !1815, size: 32, offset: 192)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2827, file: !135, line: 1832, baseType: !1688, size: 64, offset: 256)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2827, file: !135, line: 1835, baseType: !2071, size: 64, offset: 320)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1690, file: !135, line: 3398, baseType: !2834, size: 704)
!2834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2835)
!2835 = !{!2836, !2837, !2838, !2839, !2840, !2845}
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2834, file: !135, line: 1899, baseType: !1726, size: 192)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2834, file: !135, line: 1902, baseType: !1688, size: 64, offset: 192)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2834, file: !135, line: 1905, baseType: !2017, size: 64, offset: 256)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2834, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2834, file: !135, line: 1911, baseType: !2841, size: 64, offset: 384)
!2841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2842, size: 64)
!2842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2391, line: 117, size: 128, elements: !2843)
!2843 = !{!2844}
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2842, file: !2391, line: 120, baseType: !2653, size: 128)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2834, file: !135, line: 1914, baseType: !2059, size: 256, offset: 448)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1690, file: !135, line: 3399, baseType: !2847, size: 704)
!2847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2848)
!2848 = !{!2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859}
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2847, file: !135, line: 2009, baseType: !1726, size: 192)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2847, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2847, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2847, file: !135, line: 2014, baseType: !1815, size: 32, offset: 224)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2847, file: !135, line: 2016, baseType: !1688, size: 64, offset: 256)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2847, file: !135, line: 2017, baseType: !2570, size: 64, offset: 320)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2847, file: !135, line: 2019, baseType: !1688, size: 64, offset: 384)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2847, file: !135, line: 2020, baseType: !1688, size: 64, offset: 448)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2847, file: !135, line: 2021, baseType: !1688, size: 64, offset: 512)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2847, file: !135, line: 2022, baseType: !1688, size: 64, offset: 576)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2847, file: !135, line: 2023, baseType: !1688, size: 64, offset: 640)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1690, file: !135, line: 3400, baseType: !2861, size: 832)
!2861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2862)
!2862 = !{!2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872}
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2861, file: !135, line: 2431, baseType: !1726, size: 192)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2861, file: !135, line: 2433, baseType: !1688, size: 64, offset: 192)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2861, file: !135, line: 2434, baseType: !1688, size: 64, offset: 256)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2861, file: !135, line: 2435, baseType: !1688, size: 64, offset: 320)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2861, file: !135, line: 2436, baseType: !1688, size: 64, offset: 384)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2861, file: !135, line: 2437, baseType: !2570, size: 64, offset: 448)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2861, file: !135, line: 2438, baseType: !1688, size: 64, offset: 512)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2861, file: !135, line: 2440, baseType: !1688, size: 64, offset: 576)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2861, file: !135, line: 2441, baseType: !1688, size: 64, offset: 640)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2861, file: !135, line: 2443, baseType: !2873, size: 128, offset: 704)
!2873 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2874)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2875)
!2875 = !{!2876}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2874, file: !135, line: 182, baseType: !2575, size: 128)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1690, file: !135, line: 3401, baseType: !2878, size: 320)
!2878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2879)
!2879 = !{!2880, !2881, !2888}
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2878, file: !135, line: 3329, baseType: !1726, size: 192)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2878, file: !135, line: 3330, baseType: !2882, size: 64, offset: 192)
!2882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2883, size: 64)
!2883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2884)
!2884 = !{!2885, !2886, !2887}
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2883, file: !135, line: 3322, baseType: !2882, size: 64)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2883, file: !135, line: 3323, baseType: !2882, size: 64, offset: 64)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2883, file: !135, line: 3324, baseType: !1688, size: 64, offset: 128)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2878, file: !135, line: 3331, baseType: !2882, size: 64, offset: 256)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1690, file: !135, line: 3402, baseType: !2890, size: 256)
!2890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2891)
!2891 = !{!2892, !2893}
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2890, file: !135, line: 1541, baseType: !1726, size: 192)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2890, file: !135, line: 1542, baseType: !2894, size: 64, offset: 192)
!2894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2895, size: 64)
!2895 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2896)
!2896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2897)
!2897 = !{!2898}
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2896, file: !135, line: 1538, baseType: !2899, size: 192)
!2899 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2900)
!2900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2901)
!2901 = !{!2902, !2903, !2904}
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2900, file: !135, line: 1537, baseType: !7, size: 32)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2900, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2900, file: !135, line: 1537, baseType: !2905, size: 128, offset: 64)
!2905 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2906, size: 128, elements: !1788)
!2906 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2907)
!2907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2908)
!2908 = !{!2909, !2910}
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2907, file: !135, line: 1533, baseType: !1688, size: 64)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2907, file: !135, line: 1534, baseType: !1688, size: 64, offset: 64)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1690, file: !135, line: 3403, baseType: !2912, size: 512)
!2912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2913)
!2913 = !{!2914, !2915, !2916, !2917, !2923, !2924, !2925}
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2912, file: !135, line: 1939, baseType: !1726, size: 192)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2912, file: !135, line: 1940, baseType: !1815, size: 32, offset: 192)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2912, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2912, file: !135, line: 1946, baseType: !2918, size: 32, offset: 256)
!2918 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2919)
!2919 = !{!2920, !2921, !2922}
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2918, file: !135, line: 1943, baseType: !370, size: 32)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2918, file: !135, line: 1944, baseType: !377, size: 32)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2918, file: !135, line: 1945, baseType: !134, size: 32)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2912, file: !135, line: 1950, baseType: !2007, size: 64, offset: 320)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2912, file: !135, line: 1951, baseType: !2007, size: 64, offset: 384)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2912, file: !135, line: 1953, baseType: !2071, size: 64, offset: 448)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1690, file: !135, line: 3404, baseType: !2927, size: 1664)
!2927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2928)
!2928 = !{!2929, !2930}
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2927, file: !135, line: 3338, baseType: !1726, size: 192)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2927, file: !135, line: 3341, baseType: !2931, size: 1472, offset: 192)
!2931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2932, line: 410, size: 1472, elements: !2933)
!2932 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2933 = !{!2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097}
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2931, file: !2932, line: 412, baseType: !1784, size: 32)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2931, file: !2932, line: 413, baseType: !1784, size: 32, offset: 32)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2931, file: !2932, line: 414, baseType: !1784, size: 32, offset: 64)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2931, file: !2932, line: 415, baseType: !1784, size: 32, offset: 96)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2931, file: !2932, line: 416, baseType: !1784, size: 32, offset: 128)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2931, file: !2932, line: 417, baseType: !1784, size: 32, offset: 160)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2931, file: !2932, line: 418, baseType: !1807, size: 8, offset: 192)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2931, file: !2932, line: 419, baseType: !1807, size: 8, offset: 200)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2931, file: !2932, line: 420, baseType: !2943, size: 8, offset: 208)
!2943 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2931, file: !2932, line: 421, baseType: !2943, size: 8, offset: 216)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2931, file: !2932, line: 422, baseType: !2943, size: 8, offset: 224)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2931, file: !2932, line: 423, baseType: !2943, size: 8, offset: 232)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2931, file: !2932, line: 424, baseType: !2943, size: 8, offset: 240)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2931, file: !2932, line: 425, baseType: !2943, size: 8, offset: 248)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2931, file: !2932, line: 426, baseType: !2943, size: 8, offset: 256)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2931, file: !2932, line: 427, baseType: !2943, size: 8, offset: 264)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2931, file: !2932, line: 428, baseType: !2943, size: 8, offset: 272)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2931, file: !2932, line: 429, baseType: !2943, size: 8, offset: 280)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2931, file: !2932, line: 430, baseType: !2943, size: 8, offset: 288)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2931, file: !2932, line: 431, baseType: !2943, size: 8, offset: 296)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2931, file: !2932, line: 432, baseType: !2943, size: 8, offset: 304)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2931, file: !2932, line: 433, baseType: !2943, size: 8, offset: 312)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2931, file: !2932, line: 434, baseType: !2943, size: 8, offset: 320)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2931, file: !2932, line: 435, baseType: !2943, size: 8, offset: 328)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2931, file: !2932, line: 436, baseType: !2943, size: 8, offset: 336)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2931, file: !2932, line: 437, baseType: !2943, size: 8, offset: 344)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2931, file: !2932, line: 438, baseType: !2943, size: 8, offset: 352)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2931, file: !2932, line: 439, baseType: !2943, size: 8, offset: 360)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2931, file: !2932, line: 440, baseType: !2943, size: 8, offset: 368)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2931, file: !2932, line: 441, baseType: !2943, size: 8, offset: 376)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2931, file: !2932, line: 442, baseType: !2943, size: 8, offset: 384)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2931, file: !2932, line: 443, baseType: !2943, size: 8, offset: 392)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2931, file: !2932, line: 444, baseType: !2943, size: 8, offset: 400)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2931, file: !2932, line: 445, baseType: !2943, size: 8, offset: 408)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2931, file: !2932, line: 446, baseType: !2943, size: 8, offset: 416)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2931, file: !2932, line: 447, baseType: !2943, size: 8, offset: 424)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2931, file: !2932, line: 448, baseType: !2943, size: 8, offset: 432)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2931, file: !2932, line: 449, baseType: !2943, size: 8, offset: 440)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2931, file: !2932, line: 450, baseType: !2943, size: 8, offset: 448)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2931, file: !2932, line: 451, baseType: !2943, size: 8, offset: 456)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2931, file: !2932, line: 452, baseType: !2943, size: 8, offset: 464)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2931, file: !2932, line: 453, baseType: !2943, size: 8, offset: 472)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2931, file: !2932, line: 454, baseType: !2943, size: 8, offset: 480)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2931, file: !2932, line: 455, baseType: !2943, size: 8, offset: 488)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2931, file: !2932, line: 456, baseType: !2943, size: 8, offset: 496)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2931, file: !2932, line: 457, baseType: !2943, size: 8, offset: 504)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2931, file: !2932, line: 458, baseType: !2943, size: 8, offset: 512)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2931, file: !2932, line: 459, baseType: !2943, size: 8, offset: 520)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2931, file: !2932, line: 460, baseType: !2943, size: 8, offset: 528)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2931, file: !2932, line: 461, baseType: !2943, size: 8, offset: 536)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2931, file: !2932, line: 462, baseType: !2943, size: 8, offset: 544)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2931, file: !2932, line: 463, baseType: !2943, size: 8, offset: 552)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2931, file: !2932, line: 464, baseType: !2943, size: 8, offset: 560)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2931, file: !2932, line: 465, baseType: !2943, size: 8, offset: 568)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2931, file: !2932, line: 466, baseType: !2943, size: 8, offset: 576)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2931, file: !2932, line: 467, baseType: !2943, size: 8, offset: 584)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2931, file: !2932, line: 468, baseType: !2943, size: 8, offset: 592)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2931, file: !2932, line: 469, baseType: !2943, size: 8, offset: 600)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2931, file: !2932, line: 470, baseType: !2943, size: 8, offset: 608)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2931, file: !2932, line: 471, baseType: !2943, size: 8, offset: 616)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2931, file: !2932, line: 472, baseType: !2943, size: 8, offset: 624)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2931, file: !2932, line: 473, baseType: !2943, size: 8, offset: 632)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2931, file: !2932, line: 474, baseType: !2943, size: 8, offset: 640)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2931, file: !2932, line: 475, baseType: !2943, size: 8, offset: 648)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2931, file: !2932, line: 476, baseType: !2943, size: 8, offset: 656)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2931, file: !2932, line: 477, baseType: !2943, size: 8, offset: 664)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2931, file: !2932, line: 478, baseType: !2943, size: 8, offset: 672)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2931, file: !2932, line: 479, baseType: !2943, size: 8, offset: 680)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2931, file: !2932, line: 480, baseType: !2943, size: 8, offset: 688)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2931, file: !2932, line: 481, baseType: !2943, size: 8, offset: 696)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2931, file: !2932, line: 482, baseType: !2943, size: 8, offset: 704)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2931, file: !2932, line: 483, baseType: !2943, size: 8, offset: 712)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2931, file: !2932, line: 484, baseType: !2943, size: 8, offset: 720)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2931, file: !2932, line: 485, baseType: !2943, size: 8, offset: 728)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2931, file: !2932, line: 486, baseType: !2943, size: 8, offset: 736)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2931, file: !2932, line: 487, baseType: !2943, size: 8, offset: 744)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2931, file: !2932, line: 488, baseType: !2943, size: 8, offset: 752)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2931, file: !2932, line: 489, baseType: !2943, size: 8, offset: 760)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2931, file: !2932, line: 490, baseType: !2943, size: 8, offset: 768)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2931, file: !2932, line: 491, baseType: !2943, size: 8, offset: 776)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2931, file: !2932, line: 492, baseType: !2943, size: 8, offset: 784)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2931, file: !2932, line: 493, baseType: !2943, size: 8, offset: 792)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2931, file: !2932, line: 494, baseType: !2943, size: 8, offset: 800)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2931, file: !2932, line: 495, baseType: !2943, size: 8, offset: 808)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2931, file: !2932, line: 496, baseType: !2943, size: 8, offset: 816)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2931, file: !2932, line: 497, baseType: !2943, size: 8, offset: 824)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2931, file: !2932, line: 498, baseType: !2943, size: 8, offset: 832)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2931, file: !2932, line: 499, baseType: !2943, size: 8, offset: 840)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2931, file: !2932, line: 500, baseType: !2943, size: 8, offset: 848)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2931, file: !2932, line: 501, baseType: !2943, size: 8, offset: 856)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2931, file: !2932, line: 502, baseType: !2943, size: 8, offset: 864)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2931, file: !2932, line: 503, baseType: !2943, size: 8, offset: 872)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2931, file: !2932, line: 504, baseType: !2943, size: 8, offset: 880)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2931, file: !2932, line: 505, baseType: !2943, size: 8, offset: 888)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2931, file: !2932, line: 506, baseType: !2943, size: 8, offset: 896)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2931, file: !2932, line: 507, baseType: !2943, size: 8, offset: 904)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2931, file: !2932, line: 508, baseType: !2943, size: 8, offset: 912)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2931, file: !2932, line: 509, baseType: !2943, size: 8, offset: 920)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2931, file: !2932, line: 510, baseType: !2943, size: 8, offset: 928)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2931, file: !2932, line: 511, baseType: !2943, size: 8, offset: 936)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2931, file: !2932, line: 512, baseType: !2943, size: 8, offset: 944)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2931, file: !2932, line: 513, baseType: !2943, size: 8, offset: 952)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2931, file: !2932, line: 514, baseType: !2943, size: 8, offset: 960)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2931, file: !2932, line: 515, baseType: !2943, size: 8, offset: 968)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2931, file: !2932, line: 516, baseType: !2943, size: 8, offset: 976)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2931, file: !2932, line: 517, baseType: !2943, size: 8, offset: 984)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2931, file: !2932, line: 518, baseType: !2943, size: 8, offset: 992)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2931, file: !2932, line: 519, baseType: !2943, size: 8, offset: 1000)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2931, file: !2932, line: 520, baseType: !2943, size: 8, offset: 1008)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2931, file: !2932, line: 521, baseType: !2943, size: 8, offset: 1016)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2931, file: !2932, line: 522, baseType: !2943, size: 8, offset: 1024)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2931, file: !2932, line: 523, baseType: !2943, size: 8, offset: 1032)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2931, file: !2932, line: 524, baseType: !2943, size: 8, offset: 1040)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2931, file: !2932, line: 525, baseType: !2943, size: 8, offset: 1048)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2931, file: !2932, line: 526, baseType: !2943, size: 8, offset: 1056)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2931, file: !2932, line: 527, baseType: !2943, size: 8, offset: 1064)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2931, file: !2932, line: 528, baseType: !2943, size: 8, offset: 1072)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2931, file: !2932, line: 529, baseType: !2943, size: 8, offset: 1080)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2931, file: !2932, line: 530, baseType: !2943, size: 8, offset: 1088)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2931, file: !2932, line: 531, baseType: !2943, size: 8, offset: 1096)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2931, file: !2932, line: 532, baseType: !2943, size: 8, offset: 1104)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2931, file: !2932, line: 533, baseType: !2943, size: 8, offset: 1112)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2931, file: !2932, line: 534, baseType: !2943, size: 8, offset: 1120)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2931, file: !2932, line: 535, baseType: !2943, size: 8, offset: 1128)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2931, file: !2932, line: 536, baseType: !2943, size: 8, offset: 1136)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2931, file: !2932, line: 537, baseType: !2943, size: 8, offset: 1144)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2931, file: !2932, line: 538, baseType: !2943, size: 8, offset: 1152)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2931, file: !2932, line: 539, baseType: !2943, size: 8, offset: 1160)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2931, file: !2932, line: 540, baseType: !2943, size: 8, offset: 1168)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2931, file: !2932, line: 541, baseType: !2943, size: 8, offset: 1176)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2931, file: !2932, line: 542, baseType: !2943, size: 8, offset: 1184)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2931, file: !2932, line: 543, baseType: !2943, size: 8, offset: 1192)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2931, file: !2932, line: 544, baseType: !2943, size: 8, offset: 1200)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2931, file: !2932, line: 545, baseType: !2943, size: 8, offset: 1208)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2931, file: !2932, line: 546, baseType: !2943, size: 8, offset: 1216)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2931, file: !2932, line: 547, baseType: !2943, size: 8, offset: 1224)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2931, file: !2932, line: 548, baseType: !2943, size: 8, offset: 1232)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2931, file: !2932, line: 549, baseType: !2943, size: 8, offset: 1240)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2931, file: !2932, line: 550, baseType: !2943, size: 8, offset: 1248)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2931, file: !2932, line: 551, baseType: !2943, size: 8, offset: 1256)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2931, file: !2932, line: 552, baseType: !2943, size: 8, offset: 1264)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2931, file: !2932, line: 553, baseType: !2943, size: 8, offset: 1272)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2931, file: !2932, line: 554, baseType: !2943, size: 8, offset: 1280)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2931, file: !2932, line: 555, baseType: !2943, size: 8, offset: 1288)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2931, file: !2932, line: 556, baseType: !2943, size: 8, offset: 1296)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2931, file: !2932, line: 557, baseType: !2943, size: 8, offset: 1304)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2931, file: !2932, line: 558, baseType: !2943, size: 8, offset: 1312)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2931, file: !2932, line: 559, baseType: !2943, size: 8, offset: 1320)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2931, file: !2932, line: 560, baseType: !2943, size: 8, offset: 1328)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2931, file: !2932, line: 561, baseType: !2943, size: 8, offset: 1336)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2931, file: !2932, line: 562, baseType: !2943, size: 8, offset: 1344)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2931, file: !2932, line: 563, baseType: !2943, size: 8, offset: 1352)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2931, file: !2932, line: 564, baseType: !2943, size: 8, offset: 1360)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2931, file: !2932, line: 565, baseType: !2943, size: 8, offset: 1368)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2931, file: !2932, line: 566, baseType: !2943, size: 8, offset: 1376)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2931, file: !2932, line: 567, baseType: !2943, size: 8, offset: 1384)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2931, file: !2932, line: 568, baseType: !2943, size: 8, offset: 1392)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2931, file: !2932, line: 569, baseType: !2943, size: 8, offset: 1400)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2931, file: !2932, line: 570, baseType: !2943, size: 8, offset: 1408)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2931, file: !2932, line: 571, baseType: !2943, size: 8, offset: 1416)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2931, file: !2932, line: 572, baseType: !2943, size: 8, offset: 1424)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2931, file: !2932, line: 573, baseType: !2943, size: 8, offset: 1432)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2931, file: !2932, line: 574, baseType: !2943, size: 8, offset: 1440)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1690, file: !135, line: 3405, baseType: !3099, size: 384)
!3099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !3100)
!3100 = !{!3101, !3102}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3099, file: !135, line: 3353, baseType: !1726, size: 192)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3099, file: !135, line: 3356, baseType: !3103, size: 192, offset: 192)
!3103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2932, line: 578, size: 192, elements: !3104)
!3104 = !{!3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115}
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3103, file: !2932, line: 580, baseType: !1784, size: 32)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3103, file: !2932, line: 581, baseType: !1784, size: 32, offset: 32)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3103, file: !2932, line: 582, baseType: !1784, size: 32, offset: 64)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3103, file: !2932, line: 583, baseType: !1784, size: 32, offset: 96)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3103, file: !2932, line: 584, baseType: !1807, size: 8, offset: 128)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3103, file: !2932, line: 585, baseType: !1807, size: 8, offset: 136)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3103, file: !2932, line: 586, baseType: !1807, size: 8, offset: 144)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3103, file: !2932, line: 587, baseType: !1807, size: 8, offset: 152)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3103, file: !2932, line: 588, baseType: !1807, size: 8, offset: 160)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3103, file: !2932, line: 589, baseType: !1807, size: 8, offset: 168)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3103, file: !2932, line: 590, baseType: !1807, size: 8, offset: 176)
!3116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3117, size: 64)
!3117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_in", file: !591, line: 663, size: 576, elements: !3118)
!3118 = !{!3119, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3403}
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "file_data", scope: !3117, file: !591, line: 666, baseType: !3120, size: 64)
!3120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3121, size: 64)
!3121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !591, line: 540, size: 512, elements: !3122)
!3122 = !{!3123, !3136, !3137, !3376, !3377, !3378, !3379, !3380}
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "current_decl_state", scope: !3121, file: !591, line: 543, baseType: !3124, size: 64)
!3124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3125, size: 64)
!3125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_in_decl_state", file: !591, line: 502, size: 960, elements: !3126)
!3126 = !{!3127, !3135}
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "streams", scope: !3125, file: !591, line: 505, baseType: !3128, size: 896)
!3128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3129, size: 896, elements: !3133)
!3129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_tree_ref_table", file: !591, line: 473, size: 128, elements: !3130)
!3130 = !{!3131, !3132}
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "trees", scope: !3129, file: !591, line: 476, baseType: !2052, size: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3129, file: !591, line: 479, baseType: !7, size: 32, offset: 64)
!3133 = !{!3134}
!3134 = !DISubrange(count: 7)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "fn_decl", scope: !3125, file: !591, line: 509, baseType: !1688, size: 64, offset: 896)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "global_decl_state", scope: !3121, file: !591, line: 547, baseType: !3124, size: 64, offset: 64)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "cgraph_node_encoder", scope: !3121, file: !591, line: 550, baseType: !3138, size: 64, offset: 128)
!3138 = !DIDerivedType(tag: DW_TAG_typedef, name: "lto_cgraph_encoder_t", file: !591, line: 470, baseType: !3139)
!3139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3140, size: 64)
!3140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_cgraph_encoder_d", file: !591, line: 461, size: 128, elements: !3141)
!3141 = !{!3142, !3143}
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !3140, file: !591, line: 464, baseType: !2666, size: 64)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3140, file: !591, line: 467, baseType: !3144, size: 64, offset: 64)
!3144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3145, size: 64)
!3145 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_heap", file: !385, line: 271, baseType: !3146)
!3146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_heap", file: !385, line: 271, size: 128, elements: !3147)
!3147 = !{!3148}
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3146, file: !385, line: 271, baseType: !3149, size: 128)
!3149 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !385, line: 270, baseType: !3150)
!3150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !385, line: 270, size: 128, elements: !3151)
!3151 = !{!3152, !3153, !3154}
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3150, file: !385, line: 270, baseType: !7, size: 32)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3150, file: !385, line: 270, baseType: !7, size: 32, offset: 32)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3150, file: !385, line: 270, baseType: !3155, size: 64, offset: 64)
!3155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3156, size: 64, elements: !1788)
!3156 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !385, line: 268, baseType: !3157)
!3157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!3158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !385, line: 181, size: 2496, elements: !3159)
!3159 = !{!3160, !3161, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3293, !3313, !3323, !3327, !3353, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375}
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3158, file: !385, line: 182, baseType: !1688, size: 64)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3158, file: !385, line: 183, baseType: !3162, size: 64, offset: 64)
!3162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3163, size: 64)
!3163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !385, line: 314, size: 768, elements: !3164)
!3164 = !{!3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3176, !3177, !3178, !3179, !3181, !3182, !3183}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3163, file: !385, line: 316, baseType: !2229, size: 64)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3163, file: !385, line: 317, baseType: !3157, size: 64, offset: 64)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3163, file: !385, line: 318, baseType: !3157, size: 64, offset: 128)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3163, file: !385, line: 319, baseType: !3162, size: 64, offset: 192)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3163, file: !385, line: 320, baseType: !3162, size: 64, offset: 256)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3163, file: !385, line: 321, baseType: !3162, size: 64, offset: 320)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3163, file: !385, line: 322, baseType: !3162, size: 64, offset: 384)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3163, file: !385, line: 323, baseType: !2017, size: 64, offset: 448)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3163, file: !385, line: 324, baseType: !1970, size: 64, offset: 512)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3163, file: !385, line: 327, baseType: !3175, size: 32, offset: 576)
!3175 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !385, line: 312, baseType: !384)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3163, file: !385, line: 330, baseType: !7, size: 32, offset: 608)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3163, file: !385, line: 334, baseType: !1784, size: 32, offset: 640)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3163, file: !385, line: 336, baseType: !1784, size: 32, offset: 672)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3163, file: !385, line: 338, baseType: !3180, size: 16, offset: 704)
!3180 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3163, file: !385, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3163, file: !385, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3163, file: !385, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3158, file: !385, line: 184, baseType: !3162, size: 64, offset: 128)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3158, file: !385, line: 185, baseType: !3157, size: 64, offset: 192)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3158, file: !385, line: 186, baseType: !3157, size: 64, offset: 256)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3158, file: !385, line: 188, baseType: !3157, size: 64, offset: 320)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3158, file: !385, line: 190, baseType: !3157, size: 64, offset: 384)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3158, file: !385, line: 192, baseType: !3157, size: 64, offset: 448)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3158, file: !385, line: 194, baseType: !3157, size: 64, offset: 512)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3158, file: !385, line: 196, baseType: !3157, size: 64, offset: 576)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3158, file: !385, line: 197, baseType: !3157, size: 64, offset: 640)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3158, file: !385, line: 198, baseType: !3157, size: 64, offset: 704)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3158, file: !385, line: 199, baseType: !3157, size: 64, offset: 768)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3158, file: !385, line: 202, baseType: !3157, size: 64, offset: 832)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3158, file: !385, line: 204, baseType: !3157, size: 64, offset: 896)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3158, file: !385, line: 207, baseType: !2523, size: 64, offset: 960)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3158, file: !385, line: 209, baseType: !1970, size: 64, offset: 1024)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3158, file: !385, line: 214, baseType: !3200, size: 64, offset: 1088)
!3200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3201, size: 64)
!3201 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !660, line: 177, baseType: !3202)
!3202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !660, line: 177, size: 128, elements: !3203)
!3203 = !{!3204}
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3202, file: !660, line: 177, baseType: !3205, size: 128)
!3205 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !660, line: 176, baseType: !3206)
!3206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !660, line: 176, size: 128, elements: !3207)
!3207 = !{!3208, !3209, !3210}
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3206, file: !660, line: 176, baseType: !7, size: 32)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3206, file: !660, line: 176, baseType: !7, size: 32, offset: 32)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3206, file: !660, line: 176, baseType: !3211, size: 64, offset: 64)
!3211 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3212, size: 64, elements: !1788)
!3212 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !660, line: 174, baseType: !3213)
!3213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3214, size: 64)
!3214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !408, line: 173, size: 1152, elements: !3215)
!3215 = !{!3216, !3240, !3244, !3259, !3260, !3264, !3269, !3270, !3274}
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3214, file: !408, line: 175, baseType: !3217, size: 640)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !408, line: 114, size: 640, elements: !3218)
!3218 = !{!3219, !3220, !3221, !3225, !3229, !3231, !3232, !3233, !3235, !3236, !3237, !3238, !3239}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3217, file: !408, line: 117, baseType: !407, size: 32)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3217, file: !408, line: 121, baseType: !1890, size: 64, offset: 64)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3217, file: !408, line: 125, baseType: !3222, size: 64, offset: 128)
!3222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3223, size: 64)
!3223 = !DISubroutineType(types: !3224)
!3224 = !{!1807}
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3217, file: !408, line: 130, baseType: !3226, size: 64, offset: 192)
!3226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3227, size: 64)
!3227 = !DISubroutineType(types: !3228)
!3228 = !{!7}
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3217, file: !408, line: 133, baseType: !3230, size: 64, offset: 256)
!3230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3217, size: 64)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3217, file: !408, line: 136, baseType: !3230, size: 64, offset: 320)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3217, file: !408, line: 139, baseType: !1784, size: 32, offset: 384)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3217, file: !408, line: 143, baseType: !3234, size: 32, offset: 416)
!3234 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !415, line: 80, baseType: !414)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3217, file: !408, line: 146, baseType: !7, size: 32, offset: 448)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3217, file: !408, line: 147, baseType: !7, size: 32, offset: 480)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3217, file: !408, line: 148, baseType: !7, size: 32, offset: 512)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3217, file: !408, line: 151, baseType: !7, size: 32, offset: 544)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3217, file: !408, line: 152, baseType: !7, size: 32, offset: 576)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !3214, file: !408, line: 179, baseType: !3241, size: 64, offset: 640)
!3241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3242, size: 64)
!3242 = !DISubroutineType(types: !3243)
!3243 = !{null}
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !3214, file: !408, line: 182, baseType: !3245, size: 64, offset: 704)
!3245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3246, size: 64)
!3246 = !DISubroutineType(types: !3247)
!3247 = !{null, !3248}
!3248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3249, size: 64)
!3249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !385, line: 276, size: 192, elements: !3250)
!3250 = !{!3251, !3252, !3258}
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3249, file: !385, line: 278, baseType: !2523, size: 64)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3249, file: !385, line: 279, baseType: !3253, size: 64, offset: 64)
!3253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3254, size: 64)
!3254 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !385, line: 272, baseType: !3255)
!3255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !385, line: 272, size: 128, elements: !3256)
!3256 = !{!3257}
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3255, file: !385, line: 272, baseType: !3149, size: 128)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3249, file: !385, line: 280, baseType: !1970, size: 64, offset: 128)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !3214, file: !408, line: 187, baseType: !3241, size: 64, offset: 768)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !3214, file: !408, line: 188, baseType: !3261, size: 64, offset: 832)
!3261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3262, size: 64)
!3262 = !DISubroutineType(types: !3263)
!3263 = !{null, !3157}
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !3214, file: !408, line: 191, baseType: !3265, size: 64, offset: 896)
!3265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3266, size: 64)
!3266 = !DISubroutineType(types: !3267)
!3267 = !{null, !3157, !3268}
!3268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !3214, file: !408, line: 195, baseType: !7, size: 32, offset: 960)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !3214, file: !408, line: 196, baseType: !3271, size: 64, offset: 1024)
!3271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3272, size: 64)
!3272 = !DISubroutineType(types: !3273)
!3273 = !{!7, !3157}
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !3214, file: !408, line: 197, baseType: !3275, size: 64, offset: 1088)
!3275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3276, size: 64)
!3276 = !DISubroutineType(types: !3277)
!3277 = !{null, !3278}
!3278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3279, size: 64)
!3279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !385, line: 358, size: 320, elements: !3280)
!3280 = !{!3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292}
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3279, file: !385, line: 359, baseType: !1688, size: 64)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3279, file: !385, line: 361, baseType: !3278, size: 64, offset: 64)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3279, file: !385, line: 363, baseType: !3278, size: 64, offset: 128)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3279, file: !385, line: 366, baseType: !3278, size: 64, offset: 192)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3279, file: !385, line: 368, baseType: !1784, size: 32, offset: 256)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3279, file: !385, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3279, file: !385, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3279, file: !385, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3279, file: !385, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3279, file: !385, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3279, file: !385, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3279, file: !385, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3158, file: !385, line: 216, baseType: !3294, size: 320, offset: 1152)
!3294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !385, line: 88, size: 320, elements: !3295)
!3295 = !{!3296, !3297, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312}
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3294, file: !385, line: 90, baseType: !3120, size: 64)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3294, file: !385, line: 92, baseType: !3298, size: 192, offset: 64)
!3298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !385, line: 57, size: 192, elements: !3299)
!3299 = !{!3300, !3301, !3302, !3303, !3304}
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3298, file: !385, line: 60, baseType: !1743, size: 64)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3298, file: !385, line: 63, baseType: !1784, size: 32, offset: 64)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3298, file: !385, line: 65, baseType: !1784, size: 32, offset: 96)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3298, file: !385, line: 67, baseType: !1784, size: 32, offset: 128)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3298, file: !385, line: 69, baseType: !1784, size: 32, offset: 160)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3294, file: !385, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3294, file: !385, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3294, file: !385, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3294, file: !385, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3294, file: !385, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3294, file: !385, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3294, file: !385, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3294, file: !385, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3158, file: !385, line: 217, baseType: !3314, size: 320, offset: 1472)
!3314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !385, line: 126, size: 320, elements: !3315)
!3315 = !{!3316, !3317, !3318, !3319, !3320, !3321, !3322}
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3314, file: !385, line: 128, baseType: !1743, size: 64)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3314, file: !385, line: 130, baseType: !1743, size: 64, offset: 64)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3314, file: !385, line: 134, baseType: !3157, size: 64, offset: 128)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3314, file: !385, line: 137, baseType: !1784, size: 32, offset: 192)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3314, file: !385, line: 138, baseType: !1784, size: 32, offset: 224)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3314, file: !385, line: 141, baseType: !1784, size: 32, offset: 256)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3314, file: !385, line: 144, baseType: !1807, size: 8, offset: 288)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3158, file: !385, line: 218, baseType: !3324, size: 32, offset: 1792)
!3324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !385, line: 150, size: 32, elements: !3325)
!3325 = !{!3326}
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3324, file: !385, line: 151, baseType: !7, size: 32)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3158, file: !385, line: 219, baseType: !3328, size: 192, offset: 1856)
!3328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !385, line: 171, size: 192, elements: !3329)
!3329 = !{!3330, !3351, !3352}
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3328, file: !385, line: 173, baseType: !3331, size: 64)
!3331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3332, size: 64)
!3332 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !385, line: 169, baseType: !3333)
!3333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !385, line: 169, size: 128, elements: !3334)
!3334 = !{!3335}
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3333, file: !385, line: 169, baseType: !3336, size: 128)
!3336 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !385, line: 168, baseType: !3337)
!3337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !385, line: 168, size: 128, elements: !3338)
!3338 = !{!3339, !3340, !3341}
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3337, file: !385, line: 168, baseType: !7, size: 32)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3337, file: !385, line: 168, baseType: !7, size: 32, offset: 32)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3337, file: !385, line: 168, baseType: !3342, size: 64, offset: 64)
!3342 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3343, size: 64, elements: !1788)
!3343 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !385, line: 167, baseType: !3344)
!3344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3345, size: 64)
!3345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !385, line: 156, size: 192, elements: !3346)
!3346 = !{!3347, !3348, !3349, !3350}
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3345, file: !385, line: 159, baseType: !1688, size: 64)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3345, file: !385, line: 161, baseType: !1688, size: 64, offset: 64)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3345, file: !385, line: 163, baseType: !1807, size: 8, offset: 128)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3345, file: !385, line: 165, baseType: !1807, size: 8, offset: 136)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3328, file: !385, line: 174, baseType: !2663, size: 64, offset: 64)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3328, file: !385, line: 175, baseType: !2663, size: 64, offset: 128)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3158, file: !385, line: 220, baseType: !3354, size: 256, offset: 2048)
!3354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !385, line: 74, size: 256, elements: !3355)
!3355 = !{!3356, !3357, !3358, !3359, !3360, !3361}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3354, file: !385, line: 76, baseType: !1743, size: 64)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3354, file: !385, line: 77, baseType: !1743, size: 64, offset: 64)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3354, file: !385, line: 78, baseType: !1688, size: 64, offset: 128)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3354, file: !385, line: 79, baseType: !1807, size: 8, offset: 192)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3354, file: !385, line: 80, baseType: !1807, size: 8, offset: 200)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3354, file: !385, line: 82, baseType: !1807, size: 8, offset: 208)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3158, file: !385, line: 223, baseType: !2229, size: 64, offset: 2304)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3158, file: !385, line: 225, baseType: !1784, size: 32, offset: 2368)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3158, file: !385, line: 227, baseType: !1784, size: 32, offset: 2400)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3158, file: !385, line: 231, baseType: !1784, size: 32, offset: 2432)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3158, file: !385, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3158, file: !385, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3158, file: !385, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3158, file: !385, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3158, file: !385, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3158, file: !385, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3158, file: !385, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3158, file: !385, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3158, file: !385, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3158, file: !385, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl_states", scope: !3121, file: !591, line: 553, baseType: !2523, size: 64, offset: 192)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "file_name", scope: !3121, file: !591, line: 556, baseType: !1890, size: 64, offset: 256)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "needs_ltrans_p", scope: !3121, file: !591, line: 559, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "section_hash_table", scope: !3121, file: !591, line: 562, baseType: !2523, size: 64, offset: 384)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "renaming_hash_table", scope: !3121, file: !591, line: 565, baseType: !2523, size: 64, offset: 448)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "labels", scope: !3117, file: !591, line: 669, baseType: !2052, size: 64, offset: 64)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "strings", scope: !3117, file: !591, line: 672, baseType: !1890, size: 64, offset: 128)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "strings_len", scope: !3117, file: !591, line: 675, baseType: !7, size: 32, offset: 192)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "num_named_labels", scope: !3117, file: !591, line: 679, baseType: !7, size: 32, offset: 224)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "num_unnamed_labels", scope: !3117, file: !591, line: 682, baseType: !7, size: 32, offset: 256)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "current_file", scope: !3117, file: !591, line: 684, baseType: !1890, size: 64, offset: 320)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "current_line", scope: !3117, file: !591, line: 685, baseType: !1784, size: 32, offset: 384)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "current_col", scope: !3117, file: !591, line: 686, baseType: !1784, size: 32, offset: 416)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "globals_resolution", scope: !3117, file: !591, line: 689, baseType: !3390, size: 64, offset: 448)
!3390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3391, size: 64)
!3391 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ld_plugin_symbol_resolution_t_heap", file: !591, line: 286, baseType: !3392)
!3392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ld_plugin_symbol_resolution_t_heap", file: !591, line: 286, size: 96, elements: !3393)
!3393 = !{!3394}
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3392, file: !591, line: 286, baseType: !3395, size: 96)
!3395 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ld_plugin_symbol_resolution_t_base", file: !591, line: 285, baseType: !3396)
!3396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ld_plugin_symbol_resolution_t_base", file: !591, line: 285, size: 96, elements: !3397)
!3397 = !{!3398, !3399, !3400}
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3396, file: !591, line: 285, baseType: !7, size: 32)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3396, file: !591, line: 285, baseType: !7, size: 32, offset: 32)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3396, file: !591, line: 285, baseType: !3401, size: 32, offset: 64)
!3401 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3402, size: 32, elements: !1788)
!3402 = !DIDerivedType(tag: DW_TAG_typedef, name: "ld_plugin_symbol_resolution_t", file: !591, line: 284, baseType: !604)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "reader_cache", scope: !3117, file: !591, line: 692, baseType: !3404, size: 64, offset: 512)
!3404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3405, size: 64)
!3405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_streamer_cache_d", file: !591, line: 346, size: 256, elements: !3406)
!3406 = !{!3407, !3408, !3409, !3410}
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "node_map", scope: !3405, file: !591, line: 349, baseType: !2523, size: 64)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "next_slot", scope: !3405, file: !591, line: 352, baseType: !7, size: 32, offset: 64)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3405, file: !591, line: 355, baseType: !2570, size: 64, offset: 128)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "offsets", scope: !3405, file: !591, line: 358, baseType: !3411, size: 64, offset: 192)
!3411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3412, size: 64)
!3412 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_heap", file: !2588, line: 35, baseType: !3413)
!3413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_heap", file: !2588, line: 35, size: 96, elements: !3414)
!3414 = !{!3415}
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3413, file: !2588, line: 35, baseType: !3416, size: 96)
!3416 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_base", file: !2588, line: 34, baseType: !3417)
!3417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_base", file: !2588, line: 34, size: 96, elements: !3418)
!3418 = !{!3419, !3420, !3421}
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3417, file: !2588, line: 34, baseType: !7, size: 32)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3417, file: !2588, line: 34, baseType: !7, size: 32, offset: 32)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3417, file: !2588, line: 34, baseType: !3422, size: 32, offset: 64)
!3422 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !1788)
!3423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3424, size: 64)
!3424 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3425)
!3425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_function_header", file: !591, line: 395, size: 288, elements: !3426)
!3426 = !{!3427, !3438, !3441, !3442, !3443, !3444, !3445, !3446}
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "lto_header", scope: !3425, file: !591, line: 398, baseType: !3428, size: 64)
!3428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_header", file: !591, line: 387, size: 64, elements: !3429)
!3429 = !{!3430, !3436, !3437}
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "major_version", scope: !3428, file: !591, line: 389, baseType: !3431, size: 16)
!3431 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !3432, line: 25, baseType: !3433)
!3432 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "")
!3433 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int16_t", file: !3434, line: 39, baseType: !3435)
!3434 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3435 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "minor_version", scope: !3428, file: !591, line: 390, baseType: !3431, size: 16, offset: 16)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "section_type", scope: !3428, file: !591, line: 391, baseType: !590, size: 32, offset: 32)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "num_named_labels", scope: !3425, file: !591, line: 401, baseType: !3439, size: 32, offset: 64)
!3439 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !3432, line: 26, baseType: !3440)
!3440 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !3434, line: 41, baseType: !1784)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "num_unnamed_labels", scope: !3425, file: !591, line: 404, baseType: !3439, size: 32, offset: 96)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "compressed_size", scope: !3425, file: !591, line: 407, baseType: !3439, size: 32, offset: 128)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "named_label_size", scope: !3425, file: !591, line: 410, baseType: !3439, size: 32, offset: 160)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_size", scope: !3425, file: !591, line: 413, baseType: !3439, size: 32, offset: 192)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "main_size", scope: !3425, file: !591, line: 416, baseType: !3439, size: 32, offset: 224)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "string_size", scope: !3425, file: !591, line: 419, baseType: !3439, size: 32, offset: 256)
!3447 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !3448, line: 267, baseType: !3449)
!3448 = !DIFile(filename: "/usr/include/unistd.h", directory: "")
!3449 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intptr_t", file: !3434, line: 206, baseType: !1743)
!3450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3451, size: 64)
!3451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "string_slot", file: !3, line: 53, size: 128, elements: !3452)
!3452 = !{!3453, !3454}
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !3451, file: !3, line: 55, baseType: !1890, size: 64)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "slot_num", scope: !3451, file: !3, line: 56, baseType: !7, size: 32, offset: 64)
!3455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3456, size: 64)
!3456 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2019)
!3457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3458, size: 64)
!3458 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_pair_gc", file: !135, line: 198, baseType: !3459)
!3459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_pair_gc", file: !135, line: 198, size: 192, elements: !3460)
!3460 = !{!3461}
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3459, file: !135, line: 198, baseType: !3462, size: 192)
!3462 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_pair_base", file: !135, line: 197, baseType: !3463)
!3463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_pair_base", file: !135, line: 197, size: 192, elements: !3464)
!3464 = !{!3465, !3466, !3467}
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3463, file: !135, line: 197, baseType: !7, size: 32)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3463, file: !135, line: 197, baseType: !7, size: 32, offset: 32)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3463, file: !135, line: 197, baseType: !3468, size: 128, offset: 64)
!3468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3469, size: 128, elements: !1788)
!3469 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_pair", file: !135, line: 194, baseType: !3470)
!3470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alias_pair", file: !135, line: 190, size: 128, elements: !3471)
!3471 = !{!3472, !3473}
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3470, file: !135, line: 192, baseType: !1688, size: 64)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "target", scope: !3470, file: !135, line: 193, baseType: !1688, size: 64, offset: 64)
!3474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3475, size: 64)
!3475 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitpack_word_t_heap", file: !591, line: 154, baseType: !3476)
!3476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitpack_word_t_heap", file: !591, line: 154, size: 128, elements: !3477)
!3477 = !{!3478}
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3476, file: !591, line: 154, baseType: !3479, size: 128)
!3479 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitpack_word_t_base", file: !591, line: 153, baseType: !3480)
!3480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitpack_word_t_base", file: !591, line: 153, size: 128, elements: !3481)
!3481 = !{!3482, !3483, !3484}
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3480, file: !591, line: 153, baseType: !7, size: 32)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3480, file: !591, line: 153, baseType: !7, size: 32, offset: 32)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3480, file: !591, line: 153, baseType: !3485, size: 64, offset: 64)
!3485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3486, size: 64, elements: !1788)
!3486 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitpack_word_t", file: !591, line: 152, baseType: !1741)
!3487 = !DIDerivedType(tag: DW_TAG_typedef, name: "priority_type", file: !135, line: 3039, baseType: !3180)
!3488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3489, size: 64)
!3489 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3451)
!3490 = !{!0, !3491}
!3491 = !DIGlobalVariableExpression(var: !3492, expr: !DIExpression())
!3492 = distinct !DIGlobalVariable(name: "eh_initialized_p", scope: !3493, file: !3, line: 581, type: !1807, isLocal: true, isDefinition: true)
!3493 = distinct !DISubprogram(name: "lto_init_eh", scope: !3, file: !3, line: 579, type: !3242, scopeLine: 580, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3494 = !{}
!3495 = !{i32 7, !"Dwarf Version", i32 4}
!3496 = !{i32 2, !"Debug Info Version", i32 3}
!3497 = !{i32 1, !"wchar_size", i32 4}
!3498 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3499 = distinct !DISubprogram(name: "lto_input_function_body", scope: !3, file: !3, line: 1515, type: !3500, scopeLine: 1517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3500 = !DISubroutineType(types: !3501)
!3501 = !{null, !3120, !1688, !1890}
!3502 = !DILocalVariable(name: "file_data", arg: 1, scope: !3499, file: !3, line: 1515, type: !3120)
!3503 = !DILocation(line: 1515, column: 53, scope: !3499)
!3504 = !DILocalVariable(name: "fn_decl", arg: 2, scope: !3499, file: !3, line: 1516, type: !1688)
!3505 = !DILocation(line: 1516, column: 10, scope: !3499)
!3506 = !DILocalVariable(name: "data", arg: 3, scope: !3499, file: !3, line: 1516, type: !1890)
!3507 = !DILocation(line: 1516, column: 31, scope: !3499)
!3508 = !DILocation(line: 1518, column: 27, scope: !3499)
!3509 = !DILocation(line: 1518, column: 25, scope: !3499)
!3510 = !DILocation(line: 1519, column: 18, scope: !3499)
!3511 = !DILocation(line: 1519, column: 29, scope: !3499)
!3512 = !DILocation(line: 1519, column: 38, scope: !3499)
!3513 = !DILocation(line: 1519, column: 3, scope: !3499)
!3514 = !DILocation(line: 1520, column: 1, scope: !3499)
!3515 = distinct !DISubprogram(name: "lto_read_body", scope: !3, file: !3, line: 1442, type: !3516, scopeLine: 1444, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3516 = !DISubroutineType(types: !3517)
!3517 = !{null, !3120, !1688, !1890, !590}
!3518 = !DILocalVariable(name: "file_data", arg: 1, scope: !3515, file: !3, line: 1442, type: !3120)
!3519 = !DILocation(line: 1442, column: 43, scope: !3515)
!3520 = !DILocalVariable(name: "fn_decl", arg: 2, scope: !3515, file: !3, line: 1442, type: !1688)
!3521 = !DILocation(line: 1442, column: 59, scope: !3515)
!3522 = !DILocalVariable(name: "data", arg: 3, scope: !3515, file: !3, line: 1443, type: !1890)
!3523 = !DILocation(line: 1443, column: 21, scope: !3515)
!3524 = !DILocalVariable(name: "section_type", arg: 4, scope: !3515, file: !3, line: 1443, type: !590)
!3525 = !DILocation(line: 1443, column: 49, scope: !3515)
!3526 = !DILocalVariable(name: "header", scope: !3515, file: !3, line: 1445, type: !3423)
!3527 = !DILocation(line: 1445, column: 37, scope: !3515)
!3528 = !DILocalVariable(name: "data_in", scope: !3515, file: !3, line: 1446, type: !3116)
!3529 = !DILocation(line: 1446, column: 19, scope: !3515)
!3530 = !DILocalVariable(name: "cfg_offset", scope: !3515, file: !3, line: 1447, type: !3439)
!3531 = !DILocation(line: 1447, column: 11, scope: !3515)
!3532 = !DILocalVariable(name: "main_offset", scope: !3515, file: !3, line: 1448, type: !3439)
!3533 = !DILocation(line: 1448, column: 11, scope: !3515)
!3534 = !DILocalVariable(name: "string_offset", scope: !3515, file: !3, line: 1449, type: !3439)
!3535 = !DILocation(line: 1449, column: 11, scope: !3515)
!3536 = !DILocalVariable(name: "ib_cfg", scope: !3515, file: !3, line: 1450, type: !3537)
!3537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lto_input_block", file: !591, line: 363, size: 128, elements: !3538)
!3538 = !{!3539, !3540, !3541}
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3537, file: !591, line: 365, baseType: !1890, size: 64)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3537, file: !591, line: 366, baseType: !7, size: 32, offset: 64)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3537, file: !591, line: 367, baseType: !7, size: 32, offset: 96)
!3542 = !DILocation(line: 1450, column: 26, scope: !3515)
!3543 = !DILocalVariable(name: "ib_main", scope: !3515, file: !3, line: 1451, type: !3537)
!3544 = !DILocation(line: 1451, column: 26, scope: !3515)
!3545 = !DILocation(line: 1453, column: 49, scope: !3515)
!3546 = !DILocation(line: 1453, column: 12, scope: !3515)
!3547 = !DILocation(line: 1453, column: 10, scope: !3515)
!3548 = !DILocation(line: 1454, column: 14, scope: !3515)
!3549 = !DILocation(line: 1455, column: 17, scope: !3515)
!3550 = !DILocation(line: 1455, column: 30, scope: !3515)
!3551 = !DILocation(line: 1455, column: 38, scope: !3515)
!3552 = !DILocation(line: 1455, column: 28, scope: !3515)
!3553 = !DILocation(line: 1455, column: 15, scope: !3515)
!3554 = !DILocation(line: 1456, column: 19, scope: !3515)
!3555 = !DILocation(line: 1456, column: 33, scope: !3515)
!3556 = !DILocation(line: 1456, column: 41, scope: !3515)
!3557 = !DILocation(line: 1456, column: 31, scope: !3515)
!3558 = !DILocation(line: 1456, column: 17, scope: !3515)
!3559 = !DILocation(line: 1458, column: 3, scope: !3515)
!3560 = !DILocation(line: 1458, column: 3, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 1458, column: 3)
!3562 = !DILocation(line: 1463, column: 3, scope: !3515)
!3563 = !DILocation(line: 1463, column: 3, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 1463, column: 3)
!3565 = !DILocation(line: 1468, column: 33, scope: !3515)
!3566 = !DILocation(line: 1468, column: 44, scope: !3515)
!3567 = !DILocation(line: 1468, column: 51, scope: !3515)
!3568 = !DILocation(line: 1468, column: 49, scope: !3515)
!3569 = !DILocation(line: 1469, column: 5, scope: !3515)
!3570 = !DILocation(line: 1469, column: 13, scope: !3515)
!3571 = !DILocation(line: 1468, column: 13, scope: !3515)
!3572 = !DILocation(line: 1468, column: 11, scope: !3515)
!3573 = !DILocation(line: 1472, column: 22, scope: !3515)
!3574 = !DILocation(line: 1472, column: 30, scope: !3515)
!3575 = !DILocation(line: 1472, column: 41, scope: !3515)
!3576 = !DILocation(line: 1473, column: 8, scope: !3515)
!3577 = !DILocation(line: 1473, column: 16, scope: !3515)
!3578 = !DILocation(line: 1473, column: 27, scope: !3515)
!3579 = !DILocation(line: 1472, column: 3, scope: !3515)
!3580 = !DILocation(line: 1475, column: 7, scope: !3581)
!3581 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 1475, column: 7)
!3582 = !DILocation(line: 1475, column: 20, scope: !3581)
!3583 = !DILocation(line: 1475, column: 7, scope: !3515)
!3584 = !DILocalVariable(name: "fn", scope: !3585, file: !3, line: 1477, type: !2439)
!3585 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 1476, column: 5)
!3586 = !DILocation(line: 1477, column: 24, scope: !3585)
!3587 = !DILocation(line: 1477, column: 29, scope: !3585)
!3588 = !DILocalVariable(name: "decl_state", scope: !3585, file: !3, line: 1478, type: !3124)
!3589 = !DILocation(line: 1478, column: 33, scope: !3585)
!3590 = !DILocation(line: 1480, column: 18, scope: !3585)
!3591 = !DILocation(line: 1480, column: 7, scope: !3585)
!3592 = !DILocation(line: 1481, column: 22, scope: !3585)
!3593 = !DILocation(line: 1481, column: 7, scope: !3585)
!3594 = !DILocation(line: 1484, column: 52, scope: !3585)
!3595 = !DILocation(line: 1484, column: 63, scope: !3585)
!3596 = !DILocation(line: 1484, column: 20, scope: !3585)
!3597 = !DILocation(line: 1484, column: 18, scope: !3585)
!3598 = !DILocation(line: 1485, column: 7, scope: !3585)
!3599 = !DILocation(line: 1486, column: 39, scope: !3585)
!3600 = !DILocation(line: 1486, column: 7, scope: !3585)
!3601 = !DILocation(line: 1486, column: 18, scope: !3585)
!3602 = !DILocation(line: 1486, column: 37, scope: !3585)
!3603 = !DILocation(line: 1488, column: 27, scope: !3585)
!3604 = !DILocation(line: 1488, column: 7, scope: !3585)
!3605 = !DILocation(line: 1491, column: 23, scope: !3585)
!3606 = !DILocation(line: 1491, column: 32, scope: !3585)
!3607 = !DILocation(line: 1491, column: 7, scope: !3585)
!3608 = !DILocation(line: 1494, column: 7, scope: !3585)
!3609 = !DILocation(line: 1494, column: 13, scope: !3585)
!3610 = !DILocation(line: 1494, column: 24, scope: !3585)
!3611 = !DILocation(line: 1494, column: 33, scope: !3585)
!3612 = !DILocation(line: 1497, column: 39, scope: !3585)
!3613 = !DILocation(line: 1497, column: 50, scope: !3585)
!3614 = !DILocation(line: 1497, column: 7, scope: !3585)
!3615 = !DILocation(line: 1497, column: 18, scope: !3585)
!3616 = !DILocation(line: 1497, column: 37, scope: !3585)
!3617 = !DILocation(line: 1499, column: 7, scope: !3585)
!3618 = !DILocation(line: 1500, column: 5, scope: !3585)
!3619 = !DILocation(line: 1503, column: 36, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 1502, column: 5)
!3621 = !DILocation(line: 1503, column: 7, scope: !3620)
!3622 = !DILocation(line: 1506, column: 20, scope: !3515)
!3623 = !DILocation(line: 1506, column: 3, scope: !3515)
!3624 = !DILocation(line: 1507, column: 23, scope: !3515)
!3625 = !DILocation(line: 1507, column: 3, scope: !3515)
!3626 = !DILocation(line: 1508, column: 1, scope: !3515)
!3627 = distinct !DISubprogram(name: "lto_input_constructors_and_inits", scope: !3, file: !3, line: 1527, type: !3628, scopeLine: 1529, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3628 = !DISubroutineType(types: !3629)
!3629 = !{null, !3120, !1890}
!3630 = !DILocalVariable(name: "file_data", arg: 1, scope: !3627, file: !3, line: 1527, type: !3120)
!3631 = !DILocation(line: 1527, column: 62, scope: !3627)
!3632 = !DILocalVariable(name: "data", arg: 2, scope: !3627, file: !3, line: 1528, type: !1890)
!3633 = !DILocation(line: 1528, column: 19, scope: !3627)
!3634 = !DILocation(line: 1530, column: 18, scope: !3627)
!3635 = !DILocation(line: 1530, column: 35, scope: !3627)
!3636 = !DILocation(line: 1530, column: 3, scope: !3627)
!3637 = !DILocation(line: 1531, column: 1, scope: !3627)
!3638 = distinct !DISubprogram(name: "lto_input_bitpack", scope: !3, file: !3, line: 1856, type: !3639, scopeLine: 1857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3639 = !DISubroutineType(types: !3640)
!3640 = !{!3641, !3647}
!3641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3642, size: 64)
!3642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitpack_d", file: !591, line: 156, size: 192, elements: !3643)
!3643 = !{!3644, !3645, !3646}
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "num_bits", scope: !3642, file: !591, line: 159, baseType: !2163, size: 64)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "first_unused_bit", scope: !3642, file: !591, line: 165, baseType: !2163, size: 64, offset: 64)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3642, file: !591, line: 168, baseType: !3474, size: 64, offset: 128)
!3647 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3537, size: 64)
!3648 = !DILocalVariable(name: "ib", arg: 1, scope: !3638, file: !3, line: 1856, type: !3647)
!3649 = !DILocation(line: 1856, column: 44, scope: !3638)
!3650 = !DILocalVariable(name: "i", scope: !3638, file: !3, line: 1858, type: !7)
!3651 = !DILocation(line: 1858, column: 12, scope: !3638)
!3652 = !DILocalVariable(name: "num_words", scope: !3638, file: !3, line: 1858, type: !7)
!3653 = !DILocation(line: 1858, column: 15, scope: !3638)
!3654 = !DILocalVariable(name: "bp", scope: !3638, file: !3, line: 1859, type: !3641)
!3655 = !DILocation(line: 1859, column: 21, scope: !3638)
!3656 = !DILocation(line: 1861, column: 8, scope: !3638)
!3657 = !DILocation(line: 1861, column: 6, scope: !3638)
!3658 = !DILocation(line: 1866, column: 34, scope: !3638)
!3659 = !DILocation(line: 1866, column: 15, scope: !3638)
!3660 = !DILocation(line: 1866, column: 13, scope: !3638)
!3661 = !DILocation(line: 1867, column: 3, scope: !3638)
!3662 = !DILocation(line: 1869, column: 10, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3638, file: !3, line: 1869, column: 3)
!3664 = !DILocation(line: 1869, column: 8, scope: !3663)
!3665 = !DILocation(line: 1869, column: 15, scope: !3666)
!3666 = distinct !DILexicalBlock(scope: !3663, file: !3, line: 1869, column: 3)
!3667 = !DILocation(line: 1869, column: 19, scope: !3666)
!3668 = !DILocation(line: 1869, column: 17, scope: !3666)
!3669 = !DILocation(line: 1869, column: 3, scope: !3663)
!3670 = !DILocalVariable(name: "w", scope: !3671, file: !3, line: 1871, type: !3486)
!3671 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 1870, column: 5)
!3672 = !DILocation(line: 1871, column: 22, scope: !3671)
!3673 = !DILocation(line: 1871, column: 45, scope: !3671)
!3674 = !DILocation(line: 1871, column: 26, scope: !3671)
!3675 = !DILocation(line: 1872, column: 7, scope: !3671)
!3676 = !DILocation(line: 1873, column: 5, scope: !3671)
!3677 = !DILocation(line: 1869, column: 31, scope: !3666)
!3678 = !DILocation(line: 1869, column: 3, scope: !3666)
!3679 = distinct !{!3679, !3669, !3680}
!3680 = !DILocation(line: 1873, column: 5, scope: !3663)
!3681 = !DILocation(line: 1875, column: 10, scope: !3638)
!3682 = !DILocation(line: 1875, column: 3, scope: !3638)
!3683 = distinct !DISubprogram(name: "VEC_bitpack_word_t_heap_safe_push", scope: !591, file: !591, line: 154, type: !3684, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3684 = !DISubroutineType(types: !3685)
!3685 = !{!3686, !3687, !3688}
!3686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3486, size: 64)
!3687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3474, size: 64)
!3688 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3486)
!3689 = !DILocalVariable(name: "vec_", arg: 1, scope: !3683, file: !591, line: 154, type: !3687)
!3690 = !DILocation(line: 154, column: 1, scope: !3683)
!3691 = !DILocalVariable(name: "obj_", arg: 2, scope: !3683, file: !591, line: 154, type: !3688)
!3692 = distinct !DISubprogram(name: "lto_input_tree", scope: !3, file: !3, line: 2694, type: !3693, scopeLine: 2695, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3693 = !DISubroutineType(types: !3694)
!3694 = !{!1688, !3647, !3116}
!3695 = !DILocalVariable(name: "ib", arg: 1, scope: !3692, file: !3, line: 2694, type: !3647)
!3696 = !DILocation(line: 2694, column: 41, scope: !3692)
!3697 = !DILocalVariable(name: "data_in", arg: 2, scope: !3692, file: !3, line: 2694, type: !3116)
!3698 = !DILocation(line: 2694, column: 61, scope: !3692)
!3699 = !DILocalVariable(name: "tag", scope: !3692, file: !3, line: 2696, type: !616)
!3700 = !DILocation(line: 2696, column: 17, scope: !3692)
!3701 = !DILocalVariable(name: "result", scope: !3692, file: !3, line: 2697, type: !1688)
!3702 = !DILocation(line: 2697, column: 8, scope: !3692)
!3703 = !DILocation(line: 2699, column: 29, scope: !3692)
!3704 = !DILocation(line: 2699, column: 9, scope: !3692)
!3705 = !DILocation(line: 2699, column: 7, scope: !3692)
!3706 = !DILocation(line: 2700, column: 3, scope: !3692)
!3707 = !DILocation(line: 2702, column: 7, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 2702, column: 7)
!3709 = !DILocation(line: 2702, column: 11, scope: !3708)
!3710 = !DILocation(line: 2702, column: 7, scope: !3692)
!3711 = !DILocation(line: 2703, column: 12, scope: !3708)
!3712 = !DILocation(line: 2703, column: 5, scope: !3708)
!3713 = !DILocation(line: 2704, column: 12, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3708, file: !3, line: 2704, column: 12)
!3715 = !DILocation(line: 2704, column: 16, scope: !3714)
!3716 = !DILocation(line: 2704, column: 38, scope: !3714)
!3717 = !DILocation(line: 2704, column: 41, scope: !3714)
!3718 = !DILocation(line: 2704, column: 45, scope: !3714)
!3719 = !DILocation(line: 2704, column: 12, scope: !3708)
!3720 = !DILocation(line: 2709, column: 36, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3714, file: !3, line: 2705, column: 5)
!3722 = !DILocation(line: 2709, column: 40, scope: !3721)
!3723 = !DILocation(line: 2709, column: 49, scope: !3721)
!3724 = !DILocation(line: 2709, column: 55, scope: !3721)
!3725 = !DILocation(line: 2709, column: 16, scope: !3721)
!3726 = !DILocation(line: 2709, column: 14, scope: !3721)
!3727 = !DILocation(line: 2710, column: 5, scope: !3721)
!3728 = !DILocation(line: 2711, column: 12, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3714, file: !3, line: 2711, column: 12)
!3730 = !DILocation(line: 2711, column: 16, scope: !3729)
!3731 = !DILocation(line: 2711, column: 12, scope: !3714)
!3732 = !DILocation(line: 2715, column: 38, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 2712, column: 5)
!3734 = !DILocation(line: 2715, column: 42, scope: !3733)
!3735 = !DILocation(line: 2715, column: 16, scope: !3733)
!3736 = !DILocation(line: 2715, column: 14, scope: !3733)
!3737 = !DILocation(line: 2716, column: 5, scope: !3733)
!3738 = !DILocation(line: 2717, column: 12, scope: !3739)
!3739 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 2717, column: 12)
!3740 = !DILocation(line: 2717, column: 16, scope: !3739)
!3741 = !DILocation(line: 2717, column: 12, scope: !3729)
!3742 = !DILocation(line: 2721, column: 38, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 2718, column: 5)
!3744 = !DILocation(line: 2721, column: 42, scope: !3743)
!3745 = !DILocation(line: 2721, column: 16, scope: !3743)
!3746 = !DILocation(line: 2721, column: 14, scope: !3743)
!3747 = !DILocation(line: 2722, column: 5, scope: !3743)
!3748 = !DILocation(line: 2723, column: 12, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 2723, column: 12)
!3750 = !DILocation(line: 2723, column: 16, scope: !3749)
!3751 = !DILocation(line: 2723, column: 12, scope: !3739)
!3752 = !DILocalVariable(name: "ix", scope: !3753, file: !3, line: 2726, type: !1741)
!3753 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 2724, column: 5)
!3754 = !DILocation(line: 2726, column: 30, scope: !3753)
!3755 = !DILocalVariable(name: "target", scope: !3753, file: !3, line: 2727, type: !1688)
!3756 = !DILocation(line: 2727, column: 12, scope: !3753)
!3757 = !DILocation(line: 2728, column: 31, scope: !3753)
!3758 = !DILocation(line: 2728, column: 12, scope: !3753)
!3759 = !DILocation(line: 2728, column: 10, scope: !3753)
!3760 = !DILocation(line: 2729, column: 49, scope: !3753)
!3761 = !DILocation(line: 2729, column: 58, scope: !3753)
!3762 = !DILocation(line: 2729, column: 69, scope: !3753)
!3763 = !DILocation(line: 2729, column: 16, scope: !3753)
!3764 = !DILocation(line: 2729, column: 14, scope: !3753)
!3765 = !DILocation(line: 2730, column: 31, scope: !3753)
!3766 = !DILocation(line: 2730, column: 12, scope: !3753)
!3767 = !DILocation(line: 2730, column: 10, scope: !3753)
!3768 = !DILocation(line: 2731, column: 49, scope: !3753)
!3769 = !DILocation(line: 2731, column: 58, scope: !3753)
!3770 = !DILocation(line: 2731, column: 69, scope: !3753)
!3771 = !DILocation(line: 2731, column: 16, scope: !3753)
!3772 = !DILocation(line: 2731, column: 14, scope: !3753)
!3773 = !DILocation(line: 2732, column: 33, scope: !3753)
!3774 = !DILocation(line: 2732, column: 41, scope: !3753)
!3775 = !DILocation(line: 2732, column: 7, scope: !3753)
!3776 = !DILocation(line: 2733, column: 5, scope: !3753)
!3777 = !DILocation(line: 2734, column: 12, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 2734, column: 12)
!3779 = !DILocation(line: 2734, column: 19, scope: !3778)
!3780 = !DILocation(line: 2734, column: 16, scope: !3778)
!3781 = !DILocation(line: 2734, column: 12, scope: !3749)
!3782 = !DILocation(line: 2738, column: 39, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 2735, column: 5)
!3784 = !DILocation(line: 2738, column: 43, scope: !3783)
!3785 = !DILocation(line: 2738, column: 16, scope: !3783)
!3786 = !DILocation(line: 2738, column: 14, scope: !3783)
!3787 = !DILocation(line: 2739, column: 5, scope: !3783)
!3788 = !DILocation(line: 2743, column: 31, scope: !3789)
!3789 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 2741, column: 5)
!3790 = !DILocation(line: 2743, column: 35, scope: !3789)
!3791 = !DILocation(line: 2743, column: 44, scope: !3789)
!3792 = !DILocation(line: 2743, column: 16, scope: !3789)
!3793 = !DILocation(line: 2743, column: 14, scope: !3789)
!3794 = !DILocation(line: 2746, column: 10, scope: !3692)
!3795 = !DILocation(line: 2746, column: 3, scope: !3692)
!3796 = distinct !DISubprogram(name: "input_record_start", scope: !3, file: !3, line: 219, type: !3797, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3797 = !DISubroutineType(types: !3798)
!3798 = !{!616, !3647}
!3799 = !DILocalVariable(name: "ib", arg: 1, scope: !3796, file: !3, line: 219, type: !3647)
!3800 = !DILocation(line: 219, column: 45, scope: !3796)
!3801 = !DILocalVariable(name: "tag", scope: !3796, file: !3, line: 221, type: !616)
!3802 = !DILocation(line: 221, column: 17, scope: !3796)
!3803 = !DILocation(line: 221, column: 58, scope: !3796)
!3804 = !DILocation(line: 221, column: 39, scope: !3796)
!3805 = !DILocation(line: 221, column: 23, scope: !3796)
!3806 = !DILocation(line: 222, column: 10, scope: !3796)
!3807 = !DILocation(line: 222, column: 3, scope: !3796)
!3808 = distinct !DISubprogram(name: "lto_input_tree_ref", scope: !3, file: !3, line: 314, type: !3809, scopeLine: 316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3809 = !DISubroutineType(types: !3810)
!3810 = !{!1688, !3647, !3116, !2439, !616}
!3811 = !DILocalVariable(name: "ib", arg: 1, scope: !3808, file: !3, line: 314, type: !3647)
!3812 = !DILocation(line: 314, column: 45, scope: !3808)
!3813 = !DILocalVariable(name: "data_in", arg: 2, scope: !3808, file: !3, line: 314, type: !3116)
!3814 = !DILocation(line: 314, column: 65, scope: !3808)
!3815 = !DILocalVariable(name: "fn", arg: 3, scope: !3808, file: !3, line: 315, type: !2439)
!3816 = !DILocation(line: 315, column: 24, scope: !3808)
!3817 = !DILocalVariable(name: "tag", arg: 4, scope: !3808, file: !3, line: 315, type: !616)
!3818 = !DILocation(line: 315, column: 42, scope: !3808)
!3819 = !DILocalVariable(name: "ix_u", scope: !3808, file: !3, line: 317, type: !1741)
!3820 = !DILocation(line: 317, column: 26, scope: !3808)
!3821 = !DILocalVariable(name: "result", scope: !3808, file: !3, line: 318, type: !1688)
!3822 = !DILocation(line: 318, column: 8, scope: !3808)
!3823 = !DILocation(line: 320, column: 24, scope: !3808)
!3824 = !DILocation(line: 320, column: 3, scope: !3808)
!3825 = !DILocation(line: 322, column: 11, scope: !3808)
!3826 = !DILocation(line: 322, column: 3, scope: !3808)
!3827 = !DILocation(line: 325, column: 33, scope: !3828)
!3828 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 323, column: 5)
!3829 = !DILocation(line: 325, column: 14, scope: !3828)
!3830 = !DILocation(line: 325, column: 12, scope: !3828)
!3831 = !DILocation(line: 326, column: 45, scope: !3828)
!3832 = !DILocation(line: 326, column: 54, scope: !3828)
!3833 = !DILocation(line: 326, column: 65, scope: !3828)
!3834 = !DILocation(line: 326, column: 16, scope: !3828)
!3835 = !DILocation(line: 326, column: 14, scope: !3828)
!3836 = !DILocation(line: 327, column: 7, scope: !3828)
!3837 = !DILocation(line: 330, column: 33, scope: !3828)
!3838 = !DILocation(line: 330, column: 14, scope: !3828)
!3839 = !DILocation(line: 330, column: 12, scope: !3828)
!3840 = !DILocation(line: 331, column: 16, scope: !3828)
!3841 = !DILocation(line: 331, column: 14, scope: !3828)
!3842 = !DILocation(line: 332, column: 7, scope: !3828)
!3843 = !DILocation(line: 335, column: 33, scope: !3828)
!3844 = !DILocation(line: 335, column: 14, scope: !3828)
!3845 = !DILocation(line: 335, column: 12, scope: !3828)
!3846 = !DILocation(line: 336, column: 51, scope: !3828)
!3847 = !DILocation(line: 336, column: 60, scope: !3828)
!3848 = !DILocation(line: 336, column: 71, scope: !3828)
!3849 = !DILocation(line: 336, column: 16, scope: !3828)
!3850 = !DILocation(line: 336, column: 14, scope: !3828)
!3851 = !DILocation(line: 337, column: 7, scope: !3828)
!3852 = !DILocation(line: 340, column: 33, scope: !3828)
!3853 = !DILocation(line: 340, column: 14, scope: !3828)
!3854 = !DILocation(line: 340, column: 12, scope: !3828)
!3855 = !DILocation(line: 341, column: 48, scope: !3828)
!3856 = !DILocation(line: 341, column: 57, scope: !3828)
!3857 = !DILocation(line: 341, column: 68, scope: !3828)
!3858 = !DILocation(line: 341, column: 16, scope: !3828)
!3859 = !DILocation(line: 341, column: 14, scope: !3828)
!3860 = !DILocation(line: 342, column: 7, scope: !3828)
!3861 = !DILocation(line: 345, column: 33, scope: !3828)
!3862 = !DILocation(line: 345, column: 14, scope: !3828)
!3863 = !DILocation(line: 345, column: 12, scope: !3828)
!3864 = !DILocation(line: 346, column: 50, scope: !3828)
!3865 = !DILocation(line: 346, column: 59, scope: !3828)
!3866 = !DILocation(line: 346, column: 70, scope: !3828)
!3867 = !DILocation(line: 346, column: 16, scope: !3828)
!3868 = !DILocation(line: 346, column: 14, scope: !3828)
!3869 = !DILocation(line: 347, column: 7, scope: !3828)
!3870 = !DILocation(line: 350, column: 33, scope: !3828)
!3871 = !DILocation(line: 350, column: 14, scope: !3828)
!3872 = !DILocation(line: 350, column: 12, scope: !3828)
!3873 = !DILocation(line: 351, column: 55, scope: !3828)
!3874 = !DILocation(line: 351, column: 64, scope: !3828)
!3875 = !DILocation(line: 351, column: 75, scope: !3828)
!3876 = !DILocation(line: 351, column: 16, scope: !3828)
!3877 = !DILocation(line: 351, column: 14, scope: !3828)
!3878 = !DILocation(line: 352, column: 7, scope: !3828)
!3879 = !DILocation(line: 359, column: 33, scope: !3828)
!3880 = !DILocation(line: 359, column: 14, scope: !3828)
!3881 = !DILocation(line: 359, column: 12, scope: !3828)
!3882 = !DILocation(line: 360, column: 49, scope: !3828)
!3883 = !DILocation(line: 360, column: 58, scope: !3828)
!3884 = !DILocation(line: 360, column: 69, scope: !3828)
!3885 = !DILocation(line: 360, column: 16, scope: !3828)
!3886 = !DILocation(line: 360, column: 14, scope: !3828)
!3887 = !DILocation(line: 361, column: 11, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 361, column: 11)
!3889 = !DILocation(line: 361, column: 30, scope: !3888)
!3890 = !DILocation(line: 361, column: 11, scope: !3828)
!3891 = !DILocation(line: 362, column: 42, scope: !3888)
!3892 = !DILocation(line: 362, column: 28, scope: !3888)
!3893 = !DILocation(line: 362, column: 2, scope: !3888)
!3894 = !DILocation(line: 363, column: 7, scope: !3828)
!3895 = !DILocation(line: 366, column: 7, scope: !3828)
!3896 = !DILocation(line: 367, column: 5, scope: !3828)
!3897 = !DILocation(line: 369, column: 3, scope: !3808)
!3898 = !DILocation(line: 371, column: 10, scope: !3808)
!3899 = !DILocation(line: 371, column: 3, scope: !3808)
!3900 = distinct !DISubprogram(name: "lto_get_pickled_tree", scope: !3, file: !3, line: 2542, type: !3693, scopeLine: 2543, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3901 = !DILocalVariable(name: "ib", arg: 1, scope: !3900, file: !3, line: 2542, type: !3647)
!3902 = !DILocation(line: 2542, column: 47, scope: !3900)
!3903 = !DILocalVariable(name: "data_in", arg: 2, scope: !3900, file: !3, line: 2542, type: !3116)
!3904 = !DILocation(line: 2542, column: 67, scope: !3900)
!3905 = !DILocalVariable(name: "ix", scope: !3900, file: !3, line: 2544, type: !1743)
!3906 = !DILocation(line: 2544, column: 17, scope: !3900)
!3907 = !DILocalVariable(name: "result", scope: !3900, file: !3, line: 2545, type: !1688)
!3908 = !DILocation(line: 2545, column: 8, scope: !3900)
!3909 = !DILocalVariable(name: "expected_tag", scope: !3900, file: !3, line: 2546, type: !616)
!3910 = !DILocation(line: 2546, column: 17, scope: !3900)
!3911 = !DILocalVariable(name: "orig_offset", scope: !3900, file: !3, line: 2547, type: !1741)
!3912 = !DILocation(line: 2547, column: 26, scope: !3900)
!3913 = !DILocation(line: 2549, column: 27, scope: !3900)
!3914 = !DILocation(line: 2549, column: 8, scope: !3900)
!3915 = !DILocation(line: 2549, column: 6, scope: !3900)
!3916 = !DILocation(line: 2550, column: 53, scope: !3900)
!3917 = !DILocation(line: 2550, column: 34, scope: !3900)
!3918 = !DILocation(line: 2550, column: 18, scope: !3900)
!3919 = !DILocation(line: 2550, column: 16, scope: !3900)
!3920 = !DILocation(line: 2552, column: 36, scope: !3900)
!3921 = !DILocation(line: 2552, column: 17, scope: !3900)
!3922 = !DILocation(line: 2552, column: 15, scope: !3900)
!3923 = !DILocation(line: 2553, column: 3, scope: !3900)
!3924 = !DILocation(line: 2555, column: 36, scope: !3900)
!3925 = !DILocation(line: 2555, column: 45, scope: !3900)
!3926 = !DILocation(line: 2555, column: 59, scope: !3900)
!3927 = !DILocation(line: 2555, column: 12, scope: !3900)
!3928 = !DILocation(line: 2555, column: 10, scope: !3900)
!3929 = !DILocation(line: 2556, column: 7, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3900, file: !3, line: 2556, column: 7)
!3931 = !DILocation(line: 2556, column: 14, scope: !3930)
!3932 = !DILocation(line: 2556, column: 7, scope: !3900)
!3933 = !DILocalVariable(name: "fwd_ib", scope: !3934, file: !3, line: 2561, type: !3537)
!3934 = distinct !DILexicalBlock(scope: !3930, file: !3, line: 2557, column: 5)
!3935 = !DILocation(line: 2561, column: 30, scope: !3934)
!3936 = !DILocation(line: 2565, column: 11, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 2565, column: 11)
!3938 = !DILocation(line: 2565, column: 15, scope: !3937)
!3939 = !DILocation(line: 2565, column: 20, scope: !3937)
!3940 = !DILocation(line: 2565, column: 17, scope: !3937)
!3941 = !DILocation(line: 2565, column: 11, scope: !3934)
!3942 = !DILocation(line: 2566, column: 2, scope: !3937)
!3943 = !DILocation(line: 2569, column: 7, scope: !3934)
!3944 = !DILocation(line: 2569, column: 7, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 2569, column: 7)
!3946 = !DILocation(line: 2570, column: 41, scope: !3934)
!3947 = !DILocation(line: 2570, column: 16, scope: !3934)
!3948 = !DILocation(line: 2570, column: 14, scope: !3934)
!3949 = !DILocation(line: 2571, column: 5, scope: !3934)
!3950 = !DILocation(line: 2573, column: 3, scope: !3900)
!3951 = !DILocation(line: 2576, column: 10, scope: !3900)
!3952 = !DILocation(line: 2576, column: 3, scope: !3900)
!3953 = distinct !DISubprogram(name: "lto_get_builtin_tree", scope: !3, file: !3, line: 2584, type: !3693, scopeLine: 2585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!3954 = !DILocalVariable(name: "ib", arg: 1, scope: !3953, file: !3, line: 2584, type: !3647)
!3955 = !DILocation(line: 2584, column: 47, scope: !3953)
!3956 = !DILocalVariable(name: "data_in", arg: 2, scope: !3953, file: !3, line: 2584, type: !3116)
!3957 = !DILocation(line: 2584, column: 67, scope: !3953)
!3958 = !DILocalVariable(name: "fclass", scope: !3953, file: !3, line: 2586, type: !761)
!3959 = !DILocation(line: 2586, column: 23, scope: !3953)
!3960 = !DILocalVariable(name: "fcode", scope: !3953, file: !3, line: 2587, type: !767)
!3961 = !DILocation(line: 2587, column: 26, scope: !3953)
!3962 = !DILocalVariable(name: "asmname", scope: !3953, file: !3, line: 2588, type: !1890)
!3963 = !DILocation(line: 2588, column: 15, scope: !3953)
!3964 = !DILocalVariable(name: "result", scope: !3953, file: !3, line: 2589, type: !1688)
!3965 = !DILocation(line: 2589, column: 8, scope: !3953)
!3966 = !DILocalVariable(name: "ix", scope: !3953, file: !3, line: 2590, type: !1784)
!3967 = !DILocation(line: 2590, column: 7, scope: !3953)
!3968 = !DILocation(line: 2592, column: 53, scope: !3953)
!3969 = !DILocation(line: 2592, column: 34, scope: !3953)
!3970 = !DILocation(line: 2592, column: 12, scope: !3953)
!3971 = !DILocation(line: 2592, column: 10, scope: !3953)
!3972 = !DILocation(line: 2593, column: 3, scope: !3953)
!3973 = !DILocation(line: 2595, column: 55, scope: !3953)
!3974 = !DILocation(line: 2595, column: 36, scope: !3953)
!3975 = !DILocation(line: 2595, column: 11, scope: !3953)
!3976 = !DILocation(line: 2595, column: 9, scope: !3953)
!3977 = !DILocation(line: 2597, column: 27, scope: !3953)
!3978 = !DILocation(line: 2597, column: 8, scope: !3953)
!3979 = !DILocation(line: 2597, column: 6, scope: !3953)
!3980 = !DILocation(line: 2598, column: 3, scope: !3953)
!3981 = !DILocation(line: 2600, column: 7, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 2600, column: 7)
!3983 = !DILocation(line: 2600, column: 14, scope: !3982)
!3984 = !DILocation(line: 2600, column: 7, scope: !3953)
!3985 = !DILocation(line: 2602, column: 7, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3982, file: !3, line: 2601, column: 5)
!3987 = !DILocation(line: 2603, column: 31, scope: !3986)
!3988 = !DILocation(line: 2603, column: 16, scope: !3986)
!3989 = !DILocation(line: 2603, column: 14, scope: !3986)
!3990 = !DILocation(line: 2604, column: 7, scope: !3986)
!3991 = !DILocation(line: 2605, column: 5, scope: !3986)
!3992 = !DILocation(line: 2606, column: 12, scope: !3993)
!3993 = distinct !DILexicalBlock(scope: !3982, file: !3, line: 2606, column: 12)
!3994 = !DILocation(line: 2606, column: 19, scope: !3993)
!3995 = !DILocation(line: 2606, column: 12, scope: !3982)
!3996 = !DILocation(line: 2608, column: 24, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 2607, column: 5)
!3998 = !DILocation(line: 2608, column: 38, scope: !3997)
!3999 = !DILocation(line: 2608, column: 16, scope: !3997)
!4000 = !DILocation(line: 2608, column: 14, scope: !3997)
!4001 = !DILocation(line: 2609, column: 12, scope: !4002)
!4002 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 2609, column: 11)
!4003 = !DILocation(line: 2609, column: 19, scope: !4002)
!4004 = !DILocation(line: 2609, column: 22, scope: !4002)
!4005 = !DILocation(line: 2609, column: 32, scope: !4002)
!4006 = !DILocation(line: 2609, column: 29, scope: !4002)
!4007 = !DILocation(line: 2609, column: 11, scope: !3997)
!4008 = !DILocation(line: 2610, column: 2, scope: !4002)
!4009 = !DILocation(line: 2611, column: 5, scope: !3997)
!4010 = !DILocation(line: 2613, column: 5, scope: !3993)
!4011 = !DILocation(line: 2615, column: 27, scope: !3953)
!4012 = !DILocation(line: 2615, column: 36, scope: !3953)
!4013 = !DILocation(line: 2615, column: 13, scope: !3953)
!4014 = !DILocation(line: 2615, column: 11, scope: !3953)
!4015 = !DILocation(line: 2616, column: 7, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 2616, column: 7)
!4017 = !DILocation(line: 2616, column: 7, scope: !3953)
!4018 = !DILocation(line: 2617, column: 38, scope: !4016)
!4019 = !DILocation(line: 2617, column: 46, scope: !4016)
!4020 = !DILocation(line: 2617, column: 5, scope: !4016)
!4021 = !DILocation(line: 2619, column: 33, scope: !3953)
!4022 = !DILocation(line: 2619, column: 42, scope: !3953)
!4023 = !DILocation(line: 2619, column: 56, scope: !3953)
!4024 = !DILocation(line: 2619, column: 64, scope: !3953)
!4025 = !DILocation(line: 2619, column: 3, scope: !3953)
!4026 = !DILocation(line: 2621, column: 10, scope: !3953)
!4027 = !DILocation(line: 2621, column: 3, scope: !3953)
!4028 = distinct !DISubprogram(name: "lto_file_decl_data_get_var_decl", scope: !591, file: !591, line: 1044, type: !4029, scopeLine: 1044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4029 = !DISubroutineType(types: !4030)
!4030 = !{!1688, !3120, !7}
!4031 = !DILocalVariable(name: "data", arg: 1, scope: !4028, file: !591, line: 1044, type: !3120)
!4032 = !DILocation(line: 1044, column: 1, scope: !4028)
!4033 = !DILocalVariable(name: "idx", arg: 2, scope: !4028, file: !591, line: 1044, type: !7)
!4034 = !DILocalVariable(name: "state", scope: !4028, file: !591, line: 1044, type: !3124)
!4035 = distinct !DISubprogram(name: "lto_tree_code_to_tag", scope: !591, file: !591, line: 915, type: !4036, scopeLine: 916, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4036 = !DISubroutineType(types: !4037)
!4037 = !{!616, !134}
!4038 = !DILocalVariable(name: "code", arg: 1, scope: !4035, file: !591, line: 915, type: !134)
!4039 = !DILocation(line: 915, column: 38, scope: !4035)
!4040 = !DILocation(line: 917, column: 38, scope: !4035)
!4041 = !DILocation(line: 917, column: 43, scope: !4035)
!4042 = !DILocation(line: 917, column: 3, scope: !4035)
!4043 = distinct !DISubprogram(name: "lto_input_integer_cst", scope: !3, file: !3, line: 2665, type: !3693, scopeLine: 2666, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4044 = !DILocalVariable(name: "ib", arg: 1, scope: !4043, file: !3, line: 2665, type: !3647)
!4045 = !DILocation(line: 2665, column: 48, scope: !4043)
!4046 = !DILocalVariable(name: "data_in", arg: 2, scope: !4043, file: !3, line: 2665, type: !3116)
!4047 = !DILocation(line: 2665, column: 68, scope: !4043)
!4048 = !DILocalVariable(name: "result", scope: !4043, file: !3, line: 2667, type: !1688)
!4049 = !DILocation(line: 2667, column: 8, scope: !4043)
!4050 = !DILocalVariable(name: "type", scope: !4043, file: !3, line: 2667, type: !1688)
!4051 = !DILocation(line: 2667, column: 16, scope: !4043)
!4052 = !DILocalVariable(name: "low", scope: !4043, file: !3, line: 2668, type: !1743)
!4053 = !DILocation(line: 2668, column: 17, scope: !4043)
!4054 = !DILocalVariable(name: "high", scope: !4043, file: !3, line: 2668, type: !1743)
!4055 = !DILocation(line: 2668, column: 22, scope: !4043)
!4056 = !DILocalVariable(name: "overflow_p", scope: !4043, file: !3, line: 2669, type: !1807)
!4057 = !DILocation(line: 2669, column: 8, scope: !4043)
!4058 = !DILocation(line: 2671, column: 26, scope: !4043)
!4059 = !DILocation(line: 2671, column: 30, scope: !4043)
!4060 = !DILocation(line: 2671, column: 10, scope: !4043)
!4061 = !DILocation(line: 2671, column: 8, scope: !4043)
!4062 = !DILocation(line: 2672, column: 39, scope: !4043)
!4063 = !DILocation(line: 2672, column: 17, scope: !4043)
!4064 = !DILocation(line: 2672, column: 43, scope: !4043)
!4065 = !DILocation(line: 2672, column: 16, scope: !4043)
!4066 = !DILocation(line: 2672, column: 14, scope: !4043)
!4067 = !DILocation(line: 2673, column: 28, scope: !4043)
!4068 = !DILocation(line: 2673, column: 9, scope: !4043)
!4069 = !DILocation(line: 2673, column: 7, scope: !4043)
!4070 = !DILocation(line: 2674, column: 29, scope: !4043)
!4071 = !DILocation(line: 2674, column: 10, scope: !4043)
!4072 = !DILocation(line: 2674, column: 8, scope: !4043)
!4073 = !DILocation(line: 2675, column: 32, scope: !4043)
!4074 = !DILocation(line: 2675, column: 38, scope: !4043)
!4075 = !DILocation(line: 2675, column: 43, scope: !4043)
!4076 = !DILocation(line: 2675, column: 12, scope: !4043)
!4077 = !DILocation(line: 2675, column: 10, scope: !4043)
!4078 = !DILocation(line: 2679, column: 7, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 2679, column: 7)
!4080 = !DILocation(line: 2679, column: 7, scope: !4043)
!4081 = !DILocation(line: 2681, column: 16, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 2680, column: 5)
!4083 = !DILocation(line: 2681, column: 14, scope: !4082)
!4084 = !DILocation(line: 2682, column: 7, scope: !4082)
!4085 = !DILocation(line: 2682, column: 30, scope: !4082)
!4086 = !DILocation(line: 2683, column: 5, scope: !4082)
!4087 = !DILocation(line: 2685, column: 10, scope: !4043)
!4088 = !DILocation(line: 2685, column: 3, scope: !4043)
!4089 = distinct !DISubprogram(name: "lto_read_tree", scope: !3, file: !3, line: 2629, type: !4090, scopeLine: 2631, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4090 = !DISubroutineType(types: !4091)
!4091 = !{!1688, !3647, !3116, !616}
!4092 = !DILocalVariable(name: "ib", arg: 1, scope: !4089, file: !3, line: 2629, type: !3647)
!4093 = !DILocation(line: 2629, column: 40, scope: !4089)
!4094 = !DILocalVariable(name: "data_in", arg: 2, scope: !4089, file: !3, line: 2629, type: !3116)
!4095 = !DILocation(line: 2629, column: 60, scope: !4089)
!4096 = !DILocalVariable(name: "tag", arg: 3, scope: !4089, file: !3, line: 2630, type: !616)
!4097 = !DILocation(line: 2630, column: 23, scope: !4089)
!4098 = !DILocalVariable(name: "result", scope: !4089, file: !3, line: 2632, type: !1688)
!4099 = !DILocation(line: 2632, column: 8, scope: !4089)
!4100 = !DILocalVariable(name: "ix", scope: !4089, file: !3, line: 2633, type: !1784)
!4101 = !DILocation(line: 2633, column: 7, scope: !4089)
!4102 = !DILocation(line: 2635, column: 34, scope: !4089)
!4103 = !DILocation(line: 2635, column: 38, scope: !4089)
!4104 = !DILocation(line: 2635, column: 47, scope: !4089)
!4105 = !DILocation(line: 2635, column: 12, scope: !4089)
!4106 = !DILocation(line: 2635, column: 10, scope: !4089)
!4107 = !DILocation(line: 2638, column: 28, scope: !4089)
!4108 = !DILocation(line: 2638, column: 32, scope: !4089)
!4109 = !DILocation(line: 2638, column: 41, scope: !4089)
!4110 = !DILocation(line: 2638, column: 3, scope: !4089)
!4111 = !DILocation(line: 2641, column: 7, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4089, file: !3, line: 2641, column: 7)
!4113 = !DILocation(line: 2641, column: 26, scope: !4112)
!4114 = !DILocation(line: 2641, column: 7, scope: !4089)
!4115 = !DILocation(line: 2642, column: 5, scope: !4112)
!4116 = !DILocation(line: 2644, column: 7, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4089, file: !3, line: 2644, column: 7)
!4118 = !DILocation(line: 2644, column: 26, scope: !4117)
!4119 = !DILocation(line: 2644, column: 7, scope: !4089)
!4120 = !DILocation(line: 2645, column: 38, scope: !4117)
!4121 = !DILocation(line: 2645, column: 47, scope: !4117)
!4122 = !DILocation(line: 2645, column: 5, scope: !4117)
!4123 = !DILocation(line: 2646, column: 12, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 2646, column: 12)
!4125 = !DILocation(line: 2646, column: 31, scope: !4124)
!4126 = !DILocation(line: 2646, column: 48, scope: !4124)
!4127 = !DILocation(line: 2646, column: 52, scope: !4124)
!4128 = !DILocation(line: 2646, column: 12, scope: !4117)
!4129 = !DILocation(line: 2647, column: 43, scope: !4124)
!4130 = !DILocation(line: 2647, column: 52, scope: !4124)
!4131 = !DILocation(line: 2647, column: 5, scope: !4124)
!4132 = !DILocation(line: 2649, column: 44, scope: !4089)
!4133 = !DILocation(line: 2649, column: 22, scope: !4089)
!4134 = !DILocation(line: 2657, column: 10, scope: !4089)
!4135 = !DILocation(line: 2657, column: 3, scope: !4089)
!4136 = distinct !DISubprogram(name: "lto_init_reader", scope: !3, file: !3, line: 2753, type: !3242, scopeLine: 2754, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4137 = !DILocation(line: 2755, column: 3, scope: !4136)
!4138 = !DILocation(line: 2757, column: 3, scope: !4136)
!4139 = !DILocation(line: 2758, column: 3, scope: !4136)
!4140 = !DILocation(line: 2760, column: 26, scope: !4136)
!4141 = !DILocation(line: 2760, column: 24, scope: !4136)
!4142 = !DILocation(line: 2763, column: 3, scope: !4136)
!4143 = !DILocation(line: 2764, column: 1, scope: !4136)
!4144 = distinct !DISubprogram(name: "hash_string_slot_node", scope: !3, file: !3, line: 114, type: !2530, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4145 = !DILocalVariable(name: "p", arg: 1, scope: !4144, file: !3, line: 114, type: !2324)
!4146 = !DILocation(line: 114, column: 36, scope: !4144)
!4147 = !DILocalVariable(name: "ds", scope: !4144, file: !3, line: 116, type: !3488)
!4148 = !DILocation(line: 116, column: 29, scope: !4144)
!4149 = !DILocation(line: 116, column: 63, scope: !4144)
!4150 = !DILocation(line: 116, column: 34, scope: !4144)
!4151 = !DILocation(line: 117, column: 40, scope: !4144)
!4152 = !DILocation(line: 117, column: 44, scope: !4144)
!4153 = !DILocation(line: 117, column: 22, scope: !4144)
!4154 = !DILocation(line: 117, column: 3, scope: !4144)
!4155 = distinct !DISubprogram(name: "eq_string_slot_node", scope: !3, file: !3, line: 124, type: !2536, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4156 = !DILocalVariable(name: "p1", arg: 1, scope: !4155, file: !3, line: 124, type: !2324)
!4157 = !DILocation(line: 124, column: 34, scope: !4155)
!4158 = !DILocalVariable(name: "p2", arg: 2, scope: !4155, file: !3, line: 124, type: !2324)
!4159 = !DILocation(line: 124, column: 50, scope: !4155)
!4160 = !DILocalVariable(name: "ds1", scope: !4155, file: !3, line: 126, type: !3488)
!4161 = !DILocation(line: 126, column: 29, scope: !4155)
!4162 = !DILocation(line: 126, column: 64, scope: !4155)
!4163 = !DILocation(line: 126, column: 35, scope: !4155)
!4164 = !DILocalVariable(name: "ds2", scope: !4155, file: !3, line: 127, type: !3488)
!4165 = !DILocation(line: 127, column: 29, scope: !4155)
!4166 = !DILocation(line: 127, column: 64, scope: !4155)
!4167 = !DILocation(line: 127, column: 35, scope: !4155)
!4168 = !DILocation(line: 128, column: 18, scope: !4155)
!4169 = !DILocation(line: 128, column: 23, scope: !4155)
!4170 = !DILocation(line: 128, column: 26, scope: !4155)
!4171 = !DILocation(line: 128, column: 31, scope: !4155)
!4172 = !DILocation(line: 128, column: 10, scope: !4155)
!4173 = !DILocation(line: 128, column: 34, scope: !4155)
!4174 = !DILocation(line: 128, column: 3, scope: !4155)
!4175 = distinct !DISubprogram(name: "lto_data_in_create", scope: !3, file: !3, line: 2772, type: !4176, scopeLine: 2775, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4176 = !DISubroutineType(types: !4177)
!4177 = !{!3116, !3120, !1890, !7, !3390}
!4178 = !DILocalVariable(name: "file_data", arg: 1, scope: !4175, file: !3, line: 2772, type: !3120)
!4179 = !DILocation(line: 2772, column: 48, scope: !4175)
!4180 = !DILocalVariable(name: "strings", arg: 2, scope: !4175, file: !3, line: 2772, type: !1890)
!4181 = !DILocation(line: 2772, column: 71, scope: !4175)
!4182 = !DILocalVariable(name: "len", arg: 3, scope: !4175, file: !3, line: 2773, type: !7)
!4183 = !DILocation(line: 2773, column: 16, scope: !4175)
!4184 = !DILocalVariable(name: "resolutions", arg: 4, scope: !4175, file: !3, line: 2774, type: !3390)
!4185 = !DILocation(line: 2774, column: 48, scope: !4175)
!4186 = !DILocalVariable(name: "data_in", scope: !4175, file: !3, line: 2776, type: !3116)
!4187 = !DILocation(line: 2776, column: 19, scope: !4175)
!4188 = !DILocation(line: 2776, column: 29, scope: !4175)
!4189 = !DILocation(line: 2777, column: 24, scope: !4175)
!4190 = !DILocation(line: 2777, column: 3, scope: !4175)
!4191 = !DILocation(line: 2777, column: 12, scope: !4175)
!4192 = !DILocation(line: 2777, column: 22, scope: !4175)
!4193 = !DILocation(line: 2778, column: 22, scope: !4175)
!4194 = !DILocation(line: 2778, column: 3, scope: !4175)
!4195 = !DILocation(line: 2778, column: 12, scope: !4175)
!4196 = !DILocation(line: 2778, column: 20, scope: !4175)
!4197 = !DILocation(line: 2779, column: 26, scope: !4175)
!4198 = !DILocation(line: 2779, column: 3, scope: !4175)
!4199 = !DILocation(line: 2779, column: 12, scope: !4175)
!4200 = !DILocation(line: 2779, column: 24, scope: !4175)
!4201 = !DILocation(line: 2780, column: 33, scope: !4175)
!4202 = !DILocation(line: 2780, column: 3, scope: !4175)
!4203 = !DILocation(line: 2780, column: 12, scope: !4175)
!4204 = !DILocation(line: 2780, column: 31, scope: !4175)
!4205 = !DILocation(line: 2781, column: 27, scope: !4175)
!4206 = !DILocation(line: 2781, column: 3, scope: !4175)
!4207 = !DILocation(line: 2781, column: 12, scope: !4175)
!4208 = !DILocation(line: 2781, column: 25, scope: !4175)
!4209 = !DILocation(line: 2783, column: 10, scope: !4175)
!4210 = !DILocation(line: 2783, column: 3, scope: !4175)
!4211 = distinct !DISubprogram(name: "lto_data_in_delete", scope: !3, file: !3, line: 2790, type: !4212, scopeLine: 2791, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4212 = !DISubroutineType(types: !4213)
!4213 = !{null, !3116}
!4214 = !DILocalVariable(name: "data_in", arg: 1, scope: !4211, file: !3, line: 2790, type: !3116)
!4215 = !DILocation(line: 2790, column: 37, scope: !4211)
!4216 = !DILocation(line: 2792, column: 3, scope: !4211)
!4217 = !DILocation(line: 2793, column: 30, scope: !4211)
!4218 = !DILocation(line: 2793, column: 39, scope: !4211)
!4219 = !DILocation(line: 2793, column: 3, scope: !4211)
!4220 = !DILocation(line: 2794, column: 9, scope: !4211)
!4221 = !DILocation(line: 2794, column: 18, scope: !4211)
!4222 = !DILocation(line: 2794, column: 3, scope: !4211)
!4223 = !DILocation(line: 2795, column: 9, scope: !4211)
!4224 = !DILocation(line: 2795, column: 3, scope: !4211)
!4225 = !DILocation(line: 2796, column: 1, scope: !4211)
!4226 = distinct !DISubprogram(name: "VEC_ld_plugin_symbol_resolution_t_heap_free", scope: !591, file: !591, line: 286, type: !4227, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4227 = !DISubroutineType(types: !4228)
!4228 = !{null, !4229}
!4229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3390, size: 64)
!4230 = !DILocalVariable(name: "vec_", arg: 1, scope: !4226, file: !591, line: 286, type: !4229)
!4231 = !DILocation(line: 286, column: 1, scope: !4226)
!4232 = !DILocation(line: 286, column: 1, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4226, file: !591, line: 286, column: 1)
!4234 = distinct !DISubprogram(name: "input_cfg", scope: !3, file: !3, line: 724, type: !4235, scopeLine: 725, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4235 = !DISubroutineType(types: !4236)
!4236 = !{null, !3647, !2439}
!4237 = !DILocalVariable(name: "ib", arg: 1, scope: !4234, file: !3, line: 724, type: !3647)
!4238 = !DILocation(line: 724, column: 36, scope: !4234)
!4239 = !DILocalVariable(name: "fn", arg: 2, scope: !4234, file: !3, line: 724, type: !2439)
!4240 = !DILocation(line: 724, column: 57, scope: !4234)
!4241 = !DILocalVariable(name: "bb_count", scope: !4234, file: !3, line: 726, type: !7)
!4242 = !DILocation(line: 726, column: 16, scope: !4234)
!4243 = !DILocalVariable(name: "p_bb", scope: !4234, file: !3, line: 727, type: !2605)
!4244 = !DILocation(line: 727, column: 15, scope: !4234)
!4245 = !DILocalVariable(name: "i", scope: !4234, file: !3, line: 728, type: !7)
!4246 = !DILocation(line: 728, column: 16, scope: !4234)
!4247 = !DILocalVariable(name: "index", scope: !4234, file: !3, line: 729, type: !1784)
!4248 = !DILocation(line: 729, column: 7, scope: !4234)
!4249 = !DILocation(line: 731, column: 37, scope: !4234)
!4250 = !DILocation(line: 731, column: 3, scope: !4234)
!4251 = !DILocation(line: 732, column: 3, scope: !4234)
!4252 = !DILocation(line: 735, column: 48, scope: !4234)
!4253 = !DILocation(line: 735, column: 29, scope: !4234)
!4254 = !DILocation(line: 735, column: 5, scope: !4234)
!4255 = !DILocation(line: 734, column: 3, scope: !4234)
!4256 = !DILocation(line: 734, column: 36, scope: !4234)
!4257 = !DILocation(line: 737, column: 33, scope: !4234)
!4258 = !DILocation(line: 737, column: 14, scope: !4234)
!4259 = !DILocation(line: 737, column: 12, scope: !4234)
!4260 = !DILocation(line: 739, column: 40, scope: !4234)
!4261 = !DILocation(line: 739, column: 3, scope: !4234)
!4262 = !DILocation(line: 739, column: 38, scope: !4234)
!4263 = !DILocation(line: 740, column: 7, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 740, column: 7)
!4265 = !DILocation(line: 740, column: 18, scope: !4264)
!4266 = !DILocation(line: 740, column: 16, scope: !4264)
!4267 = !DILocation(line: 740, column: 7, scope: !4234)
!4268 = !DILocation(line: 741, column: 5, scope: !4264)
!4269 = !DILocation(line: 744, column: 7, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 744, column: 7)
!4271 = !DILocation(line: 744, column: 18, scope: !4270)
!4272 = !DILocation(line: 744, column: 16, scope: !4270)
!4273 = !DILocation(line: 744, column: 7, scope: !4234)
!4274 = !DILocation(line: 745, column: 5, scope: !4270)
!4275 = !DILocation(line: 748, column: 30, scope: !4234)
!4276 = !DILocation(line: 748, column: 11, scope: !4234)
!4277 = !DILocation(line: 748, column: 9, scope: !4234)
!4278 = !DILocation(line: 749, column: 3, scope: !4234)
!4279 = !DILocation(line: 749, column: 10, scope: !4234)
!4280 = !DILocation(line: 749, column: 16, scope: !4234)
!4281 = !DILocalVariable(name: "bb", scope: !4282, file: !3, line: 751, type: !2605)
!4282 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 750, column: 5)
!4283 = !DILocation(line: 751, column: 19, scope: !4282)
!4284 = !DILocation(line: 751, column: 24, scope: !4282)
!4285 = !DILocalVariable(name: "edge_count", scope: !4282, file: !3, line: 752, type: !7)
!4286 = !DILocation(line: 752, column: 20, scope: !4282)
!4287 = !DILocation(line: 754, column: 11, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 754, column: 11)
!4289 = !DILocation(line: 754, column: 14, scope: !4288)
!4290 = !DILocation(line: 754, column: 11, scope: !4282)
!4291 = !DILocation(line: 755, column: 23, scope: !4288)
!4292 = !DILocation(line: 755, column: 27, scope: !4288)
!4293 = !DILocation(line: 755, column: 7, scope: !4288)
!4294 = !DILocation(line: 755, column: 5, scope: !4288)
!4295 = !DILocation(line: 755, column: 2, scope: !4288)
!4296 = !DILocation(line: 757, column: 39, scope: !4282)
!4297 = !DILocation(line: 757, column: 20, scope: !4282)
!4298 = !DILocation(line: 757, column: 18, scope: !4282)
!4299 = !DILocation(line: 760, column: 14, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 760, column: 7)
!4301 = !DILocation(line: 760, column: 12, scope: !4300)
!4302 = !DILocation(line: 760, column: 19, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 760, column: 7)
!4304 = !DILocation(line: 760, column: 23, scope: !4303)
!4305 = !DILocation(line: 760, column: 21, scope: !4303)
!4306 = !DILocation(line: 760, column: 7, scope: !4300)
!4307 = !DILocalVariable(name: "dest_index", scope: !4308, file: !3, line: 762, type: !7)
!4308 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 761, column: 2)
!4309 = !DILocation(line: 762, column: 17, scope: !4308)
!4310 = !DILocalVariable(name: "edge_flags", scope: !4308, file: !3, line: 763, type: !7)
!4311 = !DILocation(line: 763, column: 17, scope: !4308)
!4312 = !DILocalVariable(name: "dest", scope: !4308, file: !3, line: 764, type: !2605)
!4313 = !DILocation(line: 764, column: 16, scope: !4308)
!4314 = !DILocalVariable(name: "probability", scope: !4308, file: !3, line: 765, type: !1784)
!4315 = !DILocation(line: 765, column: 8, scope: !4308)
!4316 = !DILocalVariable(name: "count", scope: !4308, file: !3, line: 766, type: !2229)
!4317 = !DILocation(line: 766, column: 14, scope: !4308)
!4318 = !DILocalVariable(name: "e", scope: !4308, file: !3, line: 767, type: !1997)
!4319 = !DILocation(line: 767, column: 9, scope: !4308)
!4320 = !DILocation(line: 769, column: 36, scope: !4308)
!4321 = !DILocation(line: 769, column: 17, scope: !4308)
!4322 = !DILocation(line: 769, column: 15, scope: !4308)
!4323 = !DILocation(line: 770, column: 43, scope: !4308)
!4324 = !DILocation(line: 770, column: 24, scope: !4308)
!4325 = !DILocation(line: 770, column: 18, scope: !4308)
!4326 = !DILocation(line: 770, column: 16, scope: !4308)
!4327 = !DILocation(line: 771, column: 43, scope: !4308)
!4328 = !DILocation(line: 771, column: 24, scope: !4308)
!4329 = !DILocation(line: 771, column: 10, scope: !4308)
!4330 = !DILocation(line: 772, column: 36, scope: !4308)
!4331 = !DILocation(line: 772, column: 17, scope: !4308)
!4332 = !DILocation(line: 772, column: 15, scope: !4308)
!4333 = !DILocation(line: 774, column: 11, scope: !4308)
!4334 = !DILocation(line: 774, column: 9, scope: !4308)
!4335 = !DILocation(line: 776, column: 8, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 776, column: 8)
!4337 = !DILocation(line: 776, column: 13, scope: !4336)
!4338 = !DILocation(line: 776, column: 8, scope: !4308)
!4339 = !DILocation(line: 777, column: 29, scope: !4336)
!4340 = !DILocation(line: 777, column: 33, scope: !4336)
!4341 = !DILocation(line: 777, column: 13, scope: !4336)
!4342 = !DILocation(line: 777, column: 11, scope: !4336)
!4343 = !DILocation(line: 777, column: 6, scope: !4336)
!4344 = !DILocation(line: 779, column: 19, scope: !4308)
!4345 = !DILocation(line: 779, column: 23, scope: !4308)
!4346 = !DILocation(line: 779, column: 29, scope: !4308)
!4347 = !DILocation(line: 779, column: 8, scope: !4308)
!4348 = !DILocation(line: 779, column: 6, scope: !4308)
!4349 = !DILocation(line: 780, column: 21, scope: !4308)
!4350 = !DILocation(line: 780, column: 4, scope: !4308)
!4351 = !DILocation(line: 780, column: 7, scope: !4308)
!4352 = !DILocation(line: 780, column: 19, scope: !4308)
!4353 = !DILocation(line: 781, column: 15, scope: !4308)
!4354 = !DILocation(line: 781, column: 4, scope: !4308)
!4355 = !DILocation(line: 781, column: 7, scope: !4308)
!4356 = !DILocation(line: 781, column: 13, scope: !4308)
!4357 = !DILocation(line: 782, column: 2, scope: !4308)
!4358 = !DILocation(line: 760, column: 36, scope: !4303)
!4359 = !DILocation(line: 760, column: 7, scope: !4303)
!4360 = distinct !{!4360, !4306, !4361}
!4361 = !DILocation(line: 782, column: 2, scope: !4300)
!4362 = !DILocation(line: 784, column: 34, scope: !4282)
!4363 = !DILocation(line: 784, column: 15, scope: !4282)
!4364 = !DILocation(line: 784, column: 13, scope: !4282)
!4365 = distinct !{!4365, !4278, !4366}
!4366 = !DILocation(line: 785, column: 5, scope: !4234)
!4367 = !DILocation(line: 787, column: 10, scope: !4234)
!4368 = !DILocation(line: 787, column: 8, scope: !4234)
!4369 = !DILocation(line: 788, column: 30, scope: !4234)
!4370 = !DILocation(line: 788, column: 11, scope: !4234)
!4371 = !DILocation(line: 788, column: 9, scope: !4234)
!4372 = !DILocation(line: 789, column: 3, scope: !4234)
!4373 = !DILocation(line: 789, column: 10, scope: !4234)
!4374 = !DILocation(line: 789, column: 16, scope: !4234)
!4375 = !DILocalVariable(name: "bb", scope: !4376, file: !3, line: 791, type: !2605)
!4376 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 790, column: 5)
!4377 = !DILocation(line: 791, column: 19, scope: !4376)
!4378 = !DILocation(line: 791, column: 24, scope: !4376)
!4379 = !DILocation(line: 792, column: 21, scope: !4376)
!4380 = !DILocation(line: 792, column: 7, scope: !4376)
!4381 = !DILocation(line: 792, column: 11, scope: !4376)
!4382 = !DILocation(line: 792, column: 19, scope: !4376)
!4383 = !DILocation(line: 793, column: 23, scope: !4376)
!4384 = !DILocation(line: 793, column: 7, scope: !4376)
!4385 = !DILocation(line: 793, column: 13, scope: !4376)
!4386 = !DILocation(line: 793, column: 21, scope: !4376)
!4387 = !DILocation(line: 794, column: 14, scope: !4376)
!4388 = !DILocation(line: 794, column: 12, scope: !4376)
!4389 = !DILocation(line: 795, column: 34, scope: !4376)
!4390 = !DILocation(line: 795, column: 15, scope: !4376)
!4391 = !DILocation(line: 795, column: 13, scope: !4376)
!4392 = distinct !{!4392, !4372, !4393}
!4393 = !DILocation(line: 796, column: 5, scope: !4234)
!4394 = !DILocation(line: 797, column: 1, scope: !4234)
!4395 = distinct !DISubprogram(name: "input_function", scope: !3, file: !3, line: 1281, type: !4396, scopeLine: 1283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4396 = !DISubroutineType(types: !4397)
!4397 = !{null, !1688, !3116, !3647}
!4398 = !DILocalVariable(name: "fn_decl", arg: 1, scope: !4395, file: !3, line: 1281, type: !1688)
!4399 = !DILocation(line: 1281, column: 22, scope: !4395)
!4400 = !DILocalVariable(name: "data_in", arg: 2, scope: !4395, file: !3, line: 1281, type: !3116)
!4401 = !DILocation(line: 1281, column: 47, scope: !4395)
!4402 = !DILocalVariable(name: "ib", arg: 3, scope: !4395, file: !3, line: 1282, type: !3647)
!4403 = !DILocation(line: 1282, column: 27, scope: !4395)
!4404 = !DILocalVariable(name: "fn", scope: !4395, file: !3, line: 1284, type: !2439)
!4405 = !DILocation(line: 1284, column: 20, scope: !4395)
!4406 = !DILocalVariable(name: "tag", scope: !4395, file: !3, line: 1285, type: !616)
!4407 = !DILocation(line: 1285, column: 17, scope: !4395)
!4408 = !DILocalVariable(name: "stmts", scope: !4395, file: !3, line: 1286, type: !3268)
!4409 = !DILocation(line: 1286, column: 11, scope: !4395)
!4410 = !DILocalVariable(name: "bb", scope: !4395, file: !3, line: 1287, type: !2605)
!4411 = !DILocation(line: 1287, column: 15, scope: !4395)
!4412 = !DILocalVariable(name: "bp", scope: !4395, file: !3, line: 1288, type: !3641)
!4413 = !DILocation(line: 1288, column: 21, scope: !4395)
!4414 = !DILocalVariable(name: "node", scope: !4395, file: !3, line: 1289, type: !3157)
!4415 = !DILocation(line: 1289, column: 23, scope: !4395)
!4416 = !DILocalVariable(name: "args", scope: !4395, file: !3, line: 1290, type: !1688)
!4417 = !DILocation(line: 1290, column: 8, scope: !4395)
!4418 = !DILocalVariable(name: "narg", scope: !4395, file: !3, line: 1290, type: !1688)
!4419 = !DILocation(line: 1290, column: 14, scope: !4395)
!4420 = !DILocalVariable(name: "oarg", scope: !4395, file: !3, line: 1290, type: !1688)
!4421 = !DILocation(line: 1290, column: 20, scope: !4395)
!4422 = !DILocation(line: 1292, column: 8, scope: !4395)
!4423 = !DILocation(line: 1292, column: 6, scope: !4395)
!4424 = !DILocation(line: 1293, column: 29, scope: !4395)
!4425 = !DILocation(line: 1293, column: 9, scope: !4395)
!4426 = !DILocation(line: 1293, column: 7, scope: !4395)
!4427 = !DILocation(line: 1294, column: 20, scope: !4395)
!4428 = !DILocation(line: 1294, column: 3, scope: !4395)
!4429 = !DILocation(line: 1296, column: 3, scope: !4395)
!4430 = !DILocation(line: 1297, column: 18, scope: !4395)
!4431 = !DILocation(line: 1297, column: 3, scope: !4395)
!4432 = !DILocation(line: 1300, column: 27, scope: !4395)
!4433 = !DILocation(line: 1300, column: 8, scope: !4395)
!4434 = !DILocation(line: 1300, column: 6, scope: !4395)
!4435 = !DILocation(line: 1301, column: 35, scope: !4395)
!4436 = !DILocation(line: 1301, column: 18, scope: !4395)
!4437 = !DILocation(line: 1301, column: 3, scope: !4395)
!4438 = !DILocation(line: 1301, column: 7, scope: !4395)
!4439 = !DILocation(line: 1301, column: 16, scope: !4395)
!4440 = !DILocation(line: 1302, column: 54, scope: !4395)
!4441 = !DILocation(line: 1302, column: 37, scope: !4395)
!4442 = !DILocation(line: 1302, column: 3, scope: !4395)
!4443 = !DILocation(line: 1302, column: 7, scope: !4395)
!4444 = !DILocation(line: 1302, column: 35, scope: !4395)
!4445 = !DILocation(line: 1303, column: 45, scope: !4395)
!4446 = !DILocation(line: 1303, column: 28, scope: !4395)
!4447 = !DILocation(line: 1303, column: 3, scope: !4395)
!4448 = !DILocation(line: 1303, column: 7, scope: !4395)
!4449 = !DILocation(line: 1303, column: 26, scope: !4395)
!4450 = !DILocation(line: 1304, column: 45, scope: !4395)
!4451 = !DILocation(line: 1304, column: 28, scope: !4395)
!4452 = !DILocation(line: 1304, column: 3, scope: !4395)
!4453 = !DILocation(line: 1304, column: 7, scope: !4395)
!4454 = !DILocation(line: 1304, column: 26, scope: !4395)
!4455 = !DILocation(line: 1305, column: 41, scope: !4395)
!4456 = !DILocation(line: 1305, column: 24, scope: !4395)
!4457 = !DILocation(line: 1305, column: 3, scope: !4395)
!4458 = !DILocation(line: 1305, column: 7, scope: !4395)
!4459 = !DILocation(line: 1305, column: 22, scope: !4395)
!4460 = !DILocation(line: 1306, column: 58, scope: !4395)
!4461 = !DILocation(line: 1306, column: 41, scope: !4395)
!4462 = !DILocation(line: 1306, column: 3, scope: !4395)
!4463 = !DILocation(line: 1306, column: 7, scope: !4395)
!4464 = !DILocation(line: 1306, column: 39, scope: !4395)
!4465 = !DILocation(line: 1307, column: 41, scope: !4395)
!4466 = !DILocation(line: 1307, column: 24, scope: !4395)
!4467 = !DILocation(line: 1307, column: 3, scope: !4395)
!4468 = !DILocation(line: 1307, column: 7, scope: !4395)
!4469 = !DILocation(line: 1307, column: 22, scope: !4395)
!4470 = !DILocation(line: 1308, column: 52, scope: !4395)
!4471 = !DILocation(line: 1308, column: 35, scope: !4395)
!4472 = !DILocation(line: 1308, column: 3, scope: !4395)
!4473 = !DILocation(line: 1308, column: 7, scope: !4395)
!4474 = !DILocation(line: 1308, column: 33, scope: !4395)
!4475 = !DILocation(line: 1309, column: 33, scope: !4395)
!4476 = !DILocation(line: 1309, column: 16, scope: !4395)
!4477 = !DILocation(line: 1309, column: 3, scope: !4395)
!4478 = !DILocation(line: 1309, column: 7, scope: !4395)
!4479 = !DILocation(line: 1309, column: 14, scope: !4395)
!4480 = !DILocation(line: 1310, column: 45, scope: !4395)
!4481 = !DILocation(line: 1310, column: 28, scope: !4395)
!4482 = !DILocation(line: 1310, column: 3, scope: !4395)
!4483 = !DILocation(line: 1310, column: 7, scope: !4395)
!4484 = !DILocation(line: 1310, column: 26, scope: !4395)
!4485 = !DILocation(line: 1311, column: 39, scope: !4395)
!4486 = !DILocation(line: 1311, column: 22, scope: !4395)
!4487 = !DILocation(line: 1311, column: 3, scope: !4395)
!4488 = !DILocation(line: 1311, column: 7, scope: !4395)
!4489 = !DILocation(line: 1311, column: 20, scope: !4395)
!4490 = !DILocation(line: 1312, column: 39, scope: !4395)
!4491 = !DILocation(line: 1312, column: 22, scope: !4395)
!4492 = !DILocation(line: 1312, column: 3, scope: !4395)
!4493 = !DILocation(line: 1312, column: 7, scope: !4395)
!4494 = !DILocation(line: 1312, column: 20, scope: !4395)
!4495 = !DILocation(line: 1313, column: 71, scope: !4395)
!4496 = !DILocation(line: 1313, column: 54, scope: !4395)
!4497 = !DILocation(line: 1313, column: 28, scope: !4395)
!4498 = !DILocation(line: 1313, column: 3, scope: !4395)
!4499 = !DILocation(line: 1313, column: 7, scope: !4395)
!4500 = !DILocation(line: 1313, column: 26, scope: !4395)
!4501 = !DILocation(line: 1314, column: 43, scope: !4395)
!4502 = !DILocation(line: 1314, column: 26, scope: !4395)
!4503 = !DILocation(line: 1314, column: 3, scope: !4395)
!4504 = !DILocation(line: 1314, column: 7, scope: !4395)
!4505 = !DILocation(line: 1314, column: 24, scope: !4395)
!4506 = !DILocation(line: 1315, column: 43, scope: !4395)
!4507 = !DILocation(line: 1315, column: 26, scope: !4395)
!4508 = !DILocation(line: 1315, column: 3, scope: !4395)
!4509 = !DILocation(line: 1315, column: 7, scope: !4395)
!4510 = !DILocation(line: 1315, column: 24, scope: !4395)
!4511 = !DILocation(line: 1316, column: 19, scope: !4395)
!4512 = !DILocation(line: 1316, column: 3, scope: !4395)
!4513 = !DILocation(line: 1319, column: 44, scope: !4395)
!4514 = !DILocation(line: 1319, column: 25, scope: !4395)
!4515 = !DILocation(line: 1319, column: 3, scope: !4395)
!4516 = !DILocation(line: 1319, column: 7, scope: !4395)
!4517 = !DILocation(line: 1319, column: 23, scope: !4395)
!4518 = !DILocation(line: 1322, column: 43, scope: !4395)
!4519 = !DILocation(line: 1322, column: 47, scope: !4395)
!4520 = !DILocation(line: 1322, column: 27, scope: !4395)
!4521 = !DILocation(line: 1322, column: 3, scope: !4395)
!4522 = !DILocation(line: 1322, column: 7, scope: !4395)
!4523 = !DILocation(line: 1322, column: 25, scope: !4395)
!4524 = !DILocation(line: 1323, column: 49, scope: !4395)
!4525 = !DILocation(line: 1323, column: 53, scope: !4395)
!4526 = !DILocation(line: 1323, column: 33, scope: !4395)
!4527 = !DILocation(line: 1323, column: 3, scope: !4395)
!4528 = !DILocation(line: 1323, column: 7, scope: !4395)
!4529 = !DILocation(line: 1323, column: 31, scope: !4395)
!4530 = !DILocation(line: 1326, column: 37, scope: !4395)
!4531 = !DILocation(line: 1326, column: 41, scope: !4395)
!4532 = !DILocation(line: 1326, column: 21, scope: !4395)
!4533 = !DILocation(line: 1326, column: 3, scope: !4395)
!4534 = !DILocation(line: 1326, column: 7, scope: !4395)
!4535 = !DILocation(line: 1326, column: 19, scope: !4395)
!4536 = !DILocation(line: 1330, column: 26, scope: !4395)
!4537 = !DILocation(line: 1330, column: 30, scope: !4395)
!4538 = !DILocation(line: 1330, column: 10, scope: !4395)
!4539 = !DILocation(line: 1330, column: 8, scope: !4395)
!4540 = !DILocation(line: 1331, column: 15, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1331, column: 3)
!4542 = !DILocation(line: 1331, column: 13, scope: !4541)
!4543 = !DILocation(line: 1331, column: 28, scope: !4541)
!4544 = !DILocation(line: 1331, column: 26, scope: !4541)
!4545 = !DILocation(line: 1331, column: 8, scope: !4541)
!4546 = !DILocation(line: 1332, column: 8, scope: !4547)
!4547 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 1331, column: 3)
!4548 = !DILocation(line: 1332, column: 13, scope: !4547)
!4549 = !DILocation(line: 1332, column: 16, scope: !4547)
!4550 = !DILocation(line: 0, scope: !4547)
!4551 = !DILocation(line: 1331, column: 3, scope: !4541)
!4552 = !DILocalVariable(name: "ix", scope: !4553, file: !3, line: 1335, type: !1784)
!4553 = distinct !DILexicalBlock(scope: !4547, file: !3, line: 1334, column: 5)
!4554 = !DILocation(line: 1335, column: 11, scope: !4553)
!4555 = !DILocalVariable(name: "res", scope: !4553, file: !3, line: 1336, type: !1807)
!4556 = !DILocation(line: 1336, column: 12, scope: !4553)
!4557 = !DILocation(line: 1337, column: 40, scope: !4553)
!4558 = !DILocation(line: 1337, column: 49, scope: !4553)
!4559 = !DILocation(line: 1337, column: 63, scope: !4553)
!4560 = !DILocation(line: 1337, column: 13, scope: !4553)
!4561 = !DILocation(line: 1337, column: 11, scope: !4553)
!4562 = !DILocation(line: 1338, column: 7, scope: !4553)
!4563 = !DILocation(line: 1340, column: 37, scope: !4553)
!4564 = !DILocation(line: 1340, column: 46, scope: !4553)
!4565 = !DILocation(line: 1340, column: 60, scope: !4553)
!4566 = !DILocation(line: 1340, column: 66, scope: !4553)
!4567 = !DILocation(line: 1340, column: 7, scope: !4553)
!4568 = !DILocation(line: 1341, column: 5, scope: !4553)
!4569 = !DILocation(line: 1333, column: 15, scope: !4547)
!4570 = !DILocation(line: 1333, column: 13, scope: !4547)
!4571 = !DILocation(line: 1333, column: 41, scope: !4547)
!4572 = !DILocation(line: 1333, column: 39, scope: !4547)
!4573 = !DILocation(line: 1331, column: 3, scope: !4547)
!4574 = distinct !{!4574, !4551, !4575}
!4575 = !DILocation(line: 1341, column: 5, scope: !4541)
!4576 = !DILocation(line: 1342, column: 3, scope: !4395)
!4577 = !DILocation(line: 1345, column: 20, scope: !4395)
!4578 = !DILocation(line: 1345, column: 24, scope: !4395)
!4579 = !DILocation(line: 1345, column: 33, scope: !4395)
!4580 = !DILocation(line: 1345, column: 3, scope: !4395)
!4581 = !DILocation(line: 1348, column: 21, scope: !4395)
!4582 = !DILocation(line: 1348, column: 25, scope: !4395)
!4583 = !DILocation(line: 1348, column: 34, scope: !4395)
!4584 = !DILocation(line: 1348, column: 3, scope: !4395)
!4585 = !DILocation(line: 1351, column: 44, scope: !4395)
!4586 = !DILocation(line: 1351, column: 48, scope: !4395)
!4587 = !DILocation(line: 1351, column: 28, scope: !4395)
!4588 = !DILocation(line: 1351, column: 3, scope: !4395)
!4589 = !DILocation(line: 1351, column: 26, scope: !4395)
!4590 = !DILocation(line: 1352, column: 3, scope: !4395)
!4591 = !DILocation(line: 1353, column: 3, scope: !4395)
!4592 = !DILocation(line: 1353, column: 29, scope: !4395)
!4593 = !DILocation(line: 1356, column: 29, scope: !4395)
!4594 = !DILocation(line: 1356, column: 9, scope: !4395)
!4595 = !DILocation(line: 1356, column: 7, scope: !4395)
!4596 = !DILocation(line: 1357, column: 3, scope: !4395)
!4597 = !DILocation(line: 1357, column: 10, scope: !4395)
!4598 = !DILocation(line: 1359, column: 17, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1358, column: 5)
!4600 = !DILocation(line: 1359, column: 21, scope: !4599)
!4601 = !DILocation(line: 1359, column: 26, scope: !4599)
!4602 = !DILocation(line: 1359, column: 35, scope: !4599)
!4603 = !DILocation(line: 1359, column: 7, scope: !4599)
!4604 = !DILocation(line: 1360, column: 33, scope: !4599)
!4605 = !DILocation(line: 1360, column: 13, scope: !4599)
!4606 = !DILocation(line: 1360, column: 11, scope: !4599)
!4607 = distinct !{!4607, !4596, !4608}
!4608 = !DILocation(line: 1361, column: 5, scope: !4395)
!4609 = !DILocation(line: 1365, column: 3, scope: !4395)
!4610 = !DILocation(line: 1366, column: 52, scope: !4395)
!4611 = !DILocation(line: 1366, column: 31, scope: !4395)
!4612 = !DILocation(line: 1366, column: 22, scope: !4395)
!4613 = !DILocation(line: 1366, column: 11, scope: !4395)
!4614 = !DILocation(line: 1366, column: 9, scope: !4395)
!4615 = !DILocation(line: 1367, column: 3, scope: !4616)
!4616 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1367, column: 3)
!4617 = !DILocation(line: 1367, column: 3, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4616, file: !3, line: 1367, column: 3)
!4619 = !DILocalVariable(name: "bsi", scope: !4620, file: !3, line: 1369, type: !4621)
!4620 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 1368, column: 5)
!4621 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !682, line: 265, baseType: !4622)
!4622 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !682, line: 254, size: 192, elements: !4623)
!4623 = !{!4624, !4625, !4626}
!4624 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4622, file: !682, line: 257, baseType: !2012, size: 64)
!4625 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4622, file: !682, line: 263, baseType: !2007, size: 64, offset: 64)
!4626 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4622, file: !682, line: 264, baseType: !2605, size: 64, offset: 128)
!4627 = !DILocation(line: 1369, column: 28, scope: !4620)
!4628 = !DILocation(line: 1370, column: 32, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1370, column: 7)
!4630 = !DILocation(line: 1370, column: 18, scope: !4629)
!4631 = !DILocation(line: 1370, column: 12, scope: !4629)
!4632 = !DILocation(line: 1370, column: 38, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 1370, column: 7)
!4634 = !DILocation(line: 1370, column: 37, scope: !4633)
!4635 = !DILocation(line: 1370, column: 7, scope: !4629)
!4636 = !DILocalVariable(name: "stmt", scope: !4637, file: !3, line: 1372, type: !2017)
!4637 = distinct !DILexicalBlock(scope: !4633, file: !3, line: 1371, column: 2)
!4638 = !DILocation(line: 1372, column: 11, scope: !4637)
!4639 = !DILocation(line: 1372, column: 18, scope: !4637)
!4640 = !DILocation(line: 1373, column: 31, scope: !4637)
!4641 = !DILocation(line: 1373, column: 4, scope: !4637)
!4642 = !DILocation(line: 1373, column: 22, scope: !4637)
!4643 = !DILocation(line: 1373, column: 10, scope: !4637)
!4644 = !DILocation(line: 1373, column: 29, scope: !4637)
!4645 = !DILocation(line: 1374, column: 2, scope: !4637)
!4646 = !DILocation(line: 1370, column: 55, scope: !4633)
!4647 = !DILocation(line: 1370, column: 7, scope: !4633)
!4648 = distinct !{!4648, !4635, !4649}
!4649 = !DILocation(line: 1374, column: 2, scope: !4629)
!4650 = !DILocation(line: 1375, column: 5, scope: !4620)
!4651 = distinct !{!4651, !4615, !4652}
!4652 = !DILocation(line: 1375, column: 5, scope: !4616)
!4653 = !DILocalVariable(name: "ei", scope: !4654, file: !3, line: 1382, type: !4655)
!4654 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1381, column: 3)
!4655 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !337, line: 682, baseType: !4656)
!4656 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !337, line: 679, size: 128, elements: !4657)
!4657 = !{!4658, !4659}
!4658 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4656, file: !337, line: 680, baseType: !7, size: 32)
!4659 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4656, file: !337, line: 681, baseType: !4660, size: 64, offset: 64)
!4660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1985, size: 64)
!4661 = !DILocation(line: 1382, column: 19, scope: !4654)
!4662 = !DILocation(line: 1382, column: 24, scope: !4654)
!4663 = !DILocation(line: 1383, column: 22, scope: !4654)
!4664 = !DILocation(line: 1383, column: 39, scope: !4654)
!4665 = !DILocation(line: 1383, column: 53, scope: !4654)
!4666 = !DILocation(line: 1383, column: 31, scope: !4654)
!4667 = !DILocation(line: 1383, column: 5, scope: !4654)
!4668 = !DILocation(line: 1386, column: 23, scope: !4395)
!4669 = !DILocation(line: 1386, column: 10, scope: !4395)
!4670 = !DILocation(line: 1386, column: 8, scope: !4395)
!4671 = !DILocation(line: 1387, column: 26, scope: !4395)
!4672 = !DILocation(line: 1387, column: 32, scope: !4395)
!4673 = !DILocation(line: 1387, column: 3, scope: !4395)
!4674 = !DILocation(line: 1388, column: 32, scope: !4395)
!4675 = !DILocation(line: 1388, column: 38, scope: !4395)
!4676 = !DILocation(line: 1388, column: 3, scope: !4395)
!4677 = !DILocation(line: 1390, column: 3, scope: !4395)
!4678 = !DILocation(line: 1391, column: 3, scope: !4395)
!4679 = !DILocation(line: 1392, column: 3, scope: !4395)
!4680 = !DILocation(line: 1393, column: 9, scope: !4395)
!4681 = !DILocation(line: 1393, column: 3, scope: !4395)
!4682 = !DILocation(line: 1394, column: 1, scope: !4395)
!4683 = distinct !DISubprogram(name: "input_alias_pairs", scope: !3, file: !3, line: 1401, type: !4684, scopeLine: 1402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4684 = !DISubroutineType(types: !4685)
!4685 = !{null, !3647, !3116}
!4686 = !DILocalVariable(name: "ib", arg: 1, scope: !4683, file: !3, line: 1401, type: !3647)
!4687 = !DILocation(line: 1401, column: 44, scope: !4683)
!4688 = !DILocalVariable(name: "data_in", arg: 2, scope: !4683, file: !3, line: 1401, type: !3116)
!4689 = !DILocation(line: 1401, column: 64, scope: !4683)
!4690 = !DILocalVariable(name: "var", scope: !4683, file: !3, line: 1403, type: !1688)
!4691 = !DILocation(line: 1403, column: 8, scope: !4683)
!4692 = !DILocation(line: 1405, column: 20, scope: !4683)
!4693 = !DILocation(line: 1405, column: 3, scope: !4683)
!4694 = !DILocation(line: 1408, column: 3, scope: !4683)
!4695 = !DILocation(line: 1409, column: 27, scope: !4683)
!4696 = !DILocation(line: 1409, column: 31, scope: !4683)
!4697 = !DILocation(line: 1409, column: 11, scope: !4683)
!4698 = !DILocation(line: 1409, column: 9, scope: !4683)
!4699 = !DILocation(line: 1409, column: 5, scope: !4683)
!4700 = !DILocation(line: 1410, column: 10, scope: !4683)
!4701 = distinct !{!4701, !4694, !4702}
!4702 = !DILocation(line: 1410, column: 13, scope: !4683)
!4703 = !DILocation(line: 1412, column: 25, scope: !4683)
!4704 = !DILocation(line: 1412, column: 29, scope: !4683)
!4705 = !DILocation(line: 1412, column: 9, scope: !4683)
!4706 = !DILocation(line: 1412, column: 7, scope: !4683)
!4707 = !DILocation(line: 1413, column: 3, scope: !4683)
!4708 = !DILocation(line: 1413, column: 10, scope: !4683)
!4709 = !DILocalVariable(name: "orig_name", scope: !4710, file: !3, line: 1415, type: !1890)
!4710 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 1414, column: 5)
!4711 = !DILocation(line: 1415, column: 19, scope: !4710)
!4712 = !DILocalVariable(name: "new_name", scope: !4710, file: !3, line: 1415, type: !1890)
!4713 = !DILocation(line: 1415, column: 31, scope: !4710)
!4714 = !DILocalVariable(name: "p", scope: !4710, file: !3, line: 1416, type: !4715)
!4715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3469, size: 64)
!4716 = !DILocation(line: 1416, column: 19, scope: !4710)
!4717 = !DILocation(line: 1418, column: 11, scope: !4710)
!4718 = !DILocation(line: 1418, column: 9, scope: !4710)
!4719 = !DILocation(line: 1419, column: 17, scope: !4710)
!4720 = !DILocation(line: 1419, column: 7, scope: !4710)
!4721 = !DILocation(line: 1419, column: 10, scope: !4710)
!4722 = !DILocation(line: 1419, column: 15, scope: !4710)
!4723 = !DILocation(line: 1420, column: 35, scope: !4710)
!4724 = !DILocation(line: 1420, column: 39, scope: !4710)
!4725 = !DILocation(line: 1420, column: 19, scope: !4710)
!4726 = !DILocation(line: 1420, column: 7, scope: !4710)
!4727 = !DILocation(line: 1420, column: 10, scope: !4710)
!4728 = !DILocation(line: 1420, column: 17, scope: !4710)
!4729 = !DILocation(line: 1425, column: 19, scope: !4710)
!4730 = !DILocation(line: 1425, column: 17, scope: !4710)
!4731 = !DILocation(line: 1426, column: 45, scope: !4710)
!4732 = !DILocation(line: 1426, column: 54, scope: !4710)
!4733 = !DILocation(line: 1426, column: 65, scope: !4710)
!4734 = !DILocation(line: 1426, column: 18, scope: !4710)
!4735 = !DILocation(line: 1426, column: 16, scope: !4710)
!4736 = !DILocation(line: 1427, column: 19, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 1427, column: 11)
!4738 = !DILocation(line: 1427, column: 30, scope: !4737)
!4739 = !DILocation(line: 1427, column: 11, scope: !4737)
!4740 = !DILocation(line: 1427, column: 40, scope: !4737)
!4741 = !DILocation(line: 1427, column: 11, scope: !4710)
!4742 = !DILocation(line: 1428, column: 30, scope: !4737)
!4743 = !DILocation(line: 1428, column: 14, scope: !4737)
!4744 = !DILocation(line: 1428, column: 2, scope: !4737)
!4745 = !DILocation(line: 1428, column: 5, scope: !4737)
!4746 = !DILocation(line: 1428, column: 12, scope: !4737)
!4747 = !DILocation(line: 1430, column: 29, scope: !4710)
!4748 = !DILocation(line: 1430, column: 33, scope: !4710)
!4749 = !DILocation(line: 1430, column: 13, scope: !4710)
!4750 = !DILocation(line: 1430, column: 11, scope: !4710)
!4751 = distinct !{!4751, !4707, !4752}
!4752 = !DILocation(line: 1431, column: 5, scope: !4683)
!4753 = !DILocation(line: 1432, column: 1, scope: !4683)
!4754 = distinct !DISubprogram(name: "clear_line_info", scope: !3, file: !3, line: 262, type: !4212, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4755 = !DILocalVariable(name: "data_in", arg: 1, scope: !4754, file: !3, line: 262, type: !3116)
!4756 = !DILocation(line: 262, column: 34, scope: !4754)
!4757 = !DILocation(line: 264, column: 7, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4754, file: !3, line: 264, column: 7)
!4759 = !DILocation(line: 264, column: 16, scope: !4758)
!4760 = !DILocation(line: 264, column: 7, scope: !4754)
!4761 = !DILocation(line: 265, column: 18, scope: !4758)
!4762 = !DILocation(line: 265, column: 5, scope: !4758)
!4763 = !DILocation(line: 266, column: 3, scope: !4754)
!4764 = !DILocation(line: 266, column: 12, scope: !4754)
!4765 = !DILocation(line: 266, column: 25, scope: !4754)
!4766 = !DILocation(line: 267, column: 3, scope: !4754)
!4767 = !DILocation(line: 267, column: 12, scope: !4754)
!4768 = !DILocation(line: 267, column: 25, scope: !4754)
!4769 = !DILocation(line: 268, column: 3, scope: !4754)
!4770 = !DILocation(line: 268, column: 12, scope: !4754)
!4771 = !DILocation(line: 268, column: 24, scope: !4754)
!4772 = !DILocation(line: 269, column: 1, scope: !4754)
!4773 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !337, file: !337, line: 281, type: !4774, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4774 = !DISubroutineType(types: !4775)
!4775 = !{!7, !4776}
!4776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4777, size: 64)
!4777 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2613)
!4778 = !DILocalVariable(name: "vec_", arg: 1, scope: !4773, file: !337, line: 281, type: !4776)
!4779 = !DILocation(line: 281, column: 1, scope: !4773)
!4780 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow_cleared", scope: !337, file: !337, line: 282, type: !4781, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4781 = !DISubroutineType(types: !4782)
!4782 = !{null, !4783, !1784}
!4783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2608, size: 64)
!4784 = !DILocalVariable(name: "vec_", arg: 1, scope: !4780, file: !337, line: 282, type: !4783)
!4785 = !DILocation(line: 282, column: 1, scope: !4780)
!4786 = !DILocalVariable(name: "size_", arg: 2, scope: !4780, file: !337, line: 282, type: !1784)
!4787 = !DILocalVariable(name: "oldsize", scope: !4780, file: !337, line: 282, type: !1784)
!4788 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !337, file: !337, line: 281, type: !4789, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4789 = !DISubroutineType(types: !4790)
!4790 = !{!2605, !4776, !7}
!4791 = !DILocalVariable(name: "vec_", arg: 1, scope: !4788, file: !337, line: 281, type: !4776)
!4792 = !DILocation(line: 281, column: 1, scope: !4788)
!4793 = !DILocalVariable(name: "ix_", arg: 2, scope: !4788, file: !337, line: 281, type: !7)
!4794 = !DILocation(line: 0, scope: !4788)
!4795 = distinct !DISubprogram(name: "make_new_block", scope: !3, file: !3, line: 708, type: !4796, scopeLine: 709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4796 = !DISubroutineType(types: !4797)
!4797 = !{!2605, !2439, !7}
!4798 = !DILocalVariable(name: "fn", arg: 1, scope: !4795, file: !3, line: 708, type: !2439)
!4799 = !DILocation(line: 708, column: 34, scope: !4795)
!4800 = !DILocalVariable(name: "index", arg: 2, scope: !4795, file: !3, line: 708, type: !7)
!4801 = !DILocation(line: 708, column: 51, scope: !4795)
!4802 = !DILocalVariable(name: "bb", scope: !4795, file: !3, line: 710, type: !2605)
!4803 = !DILocation(line: 710, column: 15, scope: !4795)
!4804 = !DILocation(line: 710, column: 20, scope: !4795)
!4805 = !DILocation(line: 711, column: 15, scope: !4795)
!4806 = !DILocation(line: 711, column: 3, scope: !4795)
!4807 = !DILocation(line: 711, column: 7, scope: !4795)
!4808 = !DILocation(line: 711, column: 13, scope: !4795)
!4809 = !DILocation(line: 712, column: 3, scope: !4795)
!4810 = !DILocation(line: 713, column: 19, scope: !4795)
!4811 = !DILocation(line: 713, column: 3, scope: !4795)
!4812 = !DILocation(line: 713, column: 7, scope: !4795)
!4813 = !DILocation(line: 713, column: 10, scope: !4795)
!4814 = !DILocation(line: 713, column: 17, scope: !4795)
!4815 = !DILocation(line: 714, column: 3, scope: !4795)
!4816 = !DILocation(line: 714, column: 35, scope: !4795)
!4817 = !DILocation(line: 715, column: 3, scope: !4795)
!4818 = !DILocation(line: 715, column: 7, scope: !4795)
!4819 = !DILocation(line: 715, column: 13, scope: !4795)
!4820 = !DILocation(line: 716, column: 15, scope: !4795)
!4821 = !DILocation(line: 716, column: 19, scope: !4795)
!4822 = !DILocation(line: 716, column: 3, scope: !4795)
!4823 = !DILocation(line: 717, column: 10, scope: !4795)
!4824 = !DILocation(line: 717, column: 3, scope: !4795)
!4825 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow", scope: !337, file: !337, line: 282, type: !4781, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4826 = !DILocalVariable(name: "vec_", arg: 1, scope: !4825, file: !337, line: 282, type: !4783)
!4827 = !DILocation(line: 282, column: 1, scope: !4825)
!4828 = !DILocalVariable(name: "size_", arg: 2, scope: !4825, file: !337, line: 282, type: !1784)
!4829 = !DILocation(line: 0, scope: !4825)
!4830 = distinct !DISubprogram(name: "VEC_basic_block_base_address", scope: !337, file: !337, line: 281, type: !4831, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4831 = !DISubroutineType(types: !4832)
!4832 = !{!4833, !4834}
!4833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2605, size: 64)
!4834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2613, size: 64)
!4835 = !DILocalVariable(name: "vec_", arg: 1, scope: !4830, file: !337, line: 281, type: !4834)
!4836 = !DILocation(line: 281, column: 1, scope: !4830)
!4837 = distinct !DISubprogram(name: "VEC_basic_block_gc_reserve_exact", scope: !337, file: !337, line: 282, type: !4838, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4838 = !DISubroutineType(types: !4839)
!4839 = !{!1784, !4783, !1784}
!4840 = !DILocalVariable(name: "vec_", arg: 1, scope: !4837, file: !337, line: 282, type: !4783)
!4841 = !DILocation(line: 282, column: 1, scope: !4837)
!4842 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4837, file: !337, line: 282, type: !1784)
!4843 = !DILocalVariable(name: "extend", scope: !4837, file: !337, line: 282, type: !1784)
!4844 = !DILocation(line: 282, column: 1, scope: !4845)
!4845 = distinct !DILexicalBlock(scope: !4837, file: !337, line: 282, column: 1)
!4846 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !337, file: !337, line: 281, type: !4847, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4847 = !DISubroutineType(types: !4848)
!4848 = !{!1784, !4834, !1784}
!4849 = !DILocalVariable(name: "vec_", arg: 1, scope: !4846, file: !337, line: 281, type: !4834)
!4850 = !DILocation(line: 281, column: 1, scope: !4846)
!4851 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4846, file: !337, line: 281, type: !1784)
!4852 = distinct !DISubprogram(name: "VEC_basic_block_base_replace", scope: !337, file: !337, line: 281, type: !4853, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4853 = !DISubroutineType(types: !4854)
!4854 = !{!2605, !4834, !7, !2605}
!4855 = !DILocalVariable(name: "vec_", arg: 1, scope: !4852, file: !337, line: 281, type: !4834)
!4856 = !DILocation(line: 281, column: 1, scope: !4852)
!4857 = !DILocalVariable(name: "ix_", arg: 2, scope: !4852, file: !337, line: 281, type: !7)
!4858 = !DILocalVariable(name: "obj_", arg: 3, scope: !4852, file: !337, line: 281, type: !2605)
!4859 = !DILocalVariable(name: "old_obj_", scope: !4852, file: !337, line: 281, type: !2605)
!4860 = distinct !DISubprogram(name: "set_bb_seq", scope: !682, file: !682, line: 246, type: !4861, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4861 = !DISubroutineType(types: !4862)
!4862 = !{null, !2605, !2007}
!4863 = !DILocalVariable(name: "bb", arg: 1, scope: !4860, file: !682, line: 246, type: !2605)
!4864 = !DILocation(line: 246, column: 25, scope: !4860)
!4865 = !DILocalVariable(name: "seq", arg: 2, scope: !4860, file: !682, line: 246, type: !2007)
!4866 = !DILocation(line: 246, column: 40, scope: !4860)
!4867 = !DILocation(line: 248, column: 3, scope: !4860)
!4868 = !DILocation(line: 249, column: 24, scope: !4860)
!4869 = !DILocation(line: 249, column: 3, scope: !4860)
!4870 = !DILocation(line: 249, column: 7, scope: !4860)
!4871 = !DILocation(line: 249, column: 10, scope: !4860)
!4872 = !DILocation(line: 249, column: 18, scope: !4860)
!4873 = !DILocation(line: 249, column: 22, scope: !4860)
!4874 = !DILocation(line: 250, column: 1, scope: !4860)
!4875 = distinct !DISubprogram(name: "lto_tag_check", scope: !3, file: !3, line: 103, type: !4876, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4876 = !DISubroutineType(types: !4877)
!4877 = !{null, !616, !616}
!4878 = !DILocalVariable(name: "actual", arg: 1, scope: !4875, file: !3, line: 103, type: !616)
!4879 = !DILocation(line: 103, column: 30, scope: !4875)
!4880 = !DILocalVariable(name: "expected", arg: 2, scope: !4875, file: !3, line: 103, type: !616)
!4881 = !DILocation(line: 103, column: 52, scope: !4875)
!4882 = !DILocation(line: 105, column: 7, scope: !4883)
!4883 = distinct !DILexicalBlock(scope: !4875, file: !3, line: 105, column: 7)
!4884 = !DILocation(line: 105, column: 17, scope: !4883)
!4885 = !DILocation(line: 105, column: 14, scope: !4883)
!4886 = !DILocation(line: 105, column: 7, scope: !4875)
!4887 = !DILocation(line: 107, column: 21, scope: !4883)
!4888 = !DILocation(line: 107, column: 7, scope: !4883)
!4889 = !DILocation(line: 107, column: 46, scope: !4883)
!4890 = !DILocation(line: 107, column: 32, scope: !4883)
!4891 = !DILocation(line: 106, column: 5, scope: !4883)
!4892 = !DILocation(line: 108, column: 1, scope: !4875)
!4893 = distinct !DISubprogram(name: "input_ssa_names", scope: !3, file: !3, line: 849, type: !4894, scopeLine: 851, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4894 = !DISubroutineType(types: !4895)
!4895 = !{null, !3647, !3116, !2439}
!4896 = !DILocalVariable(name: "ib", arg: 1, scope: !4893, file: !3, line: 849, type: !3647)
!4897 = !DILocation(line: 849, column: 42, scope: !4893)
!4898 = !DILocalVariable(name: "data_in", arg: 2, scope: !4893, file: !3, line: 849, type: !3116)
!4899 = !DILocation(line: 849, column: 62, scope: !4893)
!4900 = !DILocalVariable(name: "fn", arg: 3, scope: !4893, file: !3, line: 850, type: !2439)
!4901 = !DILocation(line: 850, column: 21, scope: !4893)
!4902 = !DILocalVariable(name: "i", scope: !4893, file: !3, line: 852, type: !7)
!4903 = !DILocation(line: 852, column: 16, scope: !4893)
!4904 = !DILocalVariable(name: "size", scope: !4893, file: !3, line: 852, type: !7)
!4905 = !DILocation(line: 852, column: 19, scope: !4893)
!4906 = !DILocation(line: 854, column: 29, scope: !4893)
!4907 = !DILocation(line: 854, column: 10, scope: !4893)
!4908 = !DILocation(line: 854, column: 8, scope: !4893)
!4909 = !DILocation(line: 855, column: 18, scope: !4893)
!4910 = !DILocation(line: 855, column: 22, scope: !4893)
!4911 = !DILocation(line: 855, column: 3, scope: !4893)
!4912 = !DILocation(line: 857, column: 26, scope: !4893)
!4913 = !DILocation(line: 857, column: 7, scope: !4893)
!4914 = !DILocation(line: 857, column: 5, scope: !4893)
!4915 = !DILocation(line: 858, column: 3, scope: !4893)
!4916 = !DILocation(line: 858, column: 10, scope: !4893)
!4917 = !DILocalVariable(name: "ssa_name", scope: !4918, file: !3, line: 860, type: !1688)
!4918 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 859, column: 5)
!4919 = !DILocation(line: 860, column: 12, scope: !4918)
!4920 = !DILocalVariable(name: "name", scope: !4918, file: !3, line: 860, type: !1688)
!4921 = !DILocation(line: 860, column: 22, scope: !4918)
!4922 = !DILocalVariable(name: "is_default_def", scope: !4918, file: !3, line: 861, type: !1807)
!4923 = !DILocation(line: 861, column: 12, scope: !4918)
!4924 = !DILocation(line: 864, column: 7, scope: !4918)
!4925 = !DILocation(line: 864, column: 14, scope: !4918)
!4926 = !DILocation(line: 864, column: 49, scope: !4918)
!4927 = !DILocation(line: 864, column: 47, scope: !4918)
!4928 = !DILocation(line: 865, column: 2, scope: !4918)
!4929 = distinct !{!4929, !4924, !4928}
!4930 = !DILocation(line: 867, column: 47, scope: !4918)
!4931 = !DILocation(line: 867, column: 25, scope: !4918)
!4932 = !DILocation(line: 867, column: 51, scope: !4918)
!4933 = !DILocation(line: 867, column: 24, scope: !4918)
!4934 = !DILocation(line: 867, column: 22, scope: !4918)
!4935 = !DILocation(line: 868, column: 30, scope: !4918)
!4936 = !DILocation(line: 868, column: 34, scope: !4918)
!4937 = !DILocation(line: 868, column: 14, scope: !4918)
!4938 = !DILocation(line: 868, column: 12, scope: !4918)
!4939 = !DILocation(line: 869, column: 36, scope: !4918)
!4940 = !DILocation(line: 869, column: 40, scope: !4918)
!4941 = !DILocation(line: 869, column: 46, scope: !4918)
!4942 = !DILocation(line: 869, column: 18, scope: !4918)
!4943 = !DILocation(line: 869, column: 16, scope: !4918)
!4944 = !DILocation(line: 871, column: 11, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 871, column: 11)
!4946 = !DILocation(line: 871, column: 11, scope: !4918)
!4947 = !DILocation(line: 872, column: 19, scope: !4945)
!4948 = !DILocation(line: 872, column: 44, scope: !4945)
!4949 = !DILocation(line: 872, column: 2, scope: !4945)
!4950 = !DILocation(line: 874, column: 30, scope: !4918)
!4951 = !DILocation(line: 874, column: 11, scope: !4918)
!4952 = !DILocation(line: 874, column: 9, scope: !4918)
!4953 = distinct !{!4953, !4915, !4954}
!4954 = !DILocation(line: 875, column: 5, scope: !4893)
!4955 = !DILocation(line: 876, column: 1, scope: !4893)
!4956 = distinct !DISubprogram(name: "input_eh_regions", scope: !3, file: !3, line: 610, type: !4894, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!4957 = !DILocalVariable(name: "ib", arg: 1, scope: !4956, file: !3, line: 610, type: !3647)
!4958 = !DILocation(line: 610, column: 43, scope: !4956)
!4959 = !DILocalVariable(name: "data_in", arg: 2, scope: !4956, file: !3, line: 610, type: !3116)
!4960 = !DILocation(line: 610, column: 63, scope: !4956)
!4961 = !DILocalVariable(name: "fn", arg: 3, scope: !4956, file: !3, line: 611, type: !2439)
!4962 = !DILocation(line: 611, column: 22, scope: !4956)
!4963 = !DILocalVariable(name: "i", scope: !4956, file: !3, line: 613, type: !1743)
!4964 = !DILocation(line: 613, column: 17, scope: !4956)
!4965 = !DILocalVariable(name: "root_region", scope: !4956, file: !3, line: 613, type: !1743)
!4966 = !DILocation(line: 613, column: 20, scope: !4956)
!4967 = !DILocalVariable(name: "len", scope: !4956, file: !3, line: 613, type: !1743)
!4968 = !DILocation(line: 613, column: 33, scope: !4956)
!4969 = !DILocalVariable(name: "tag", scope: !4956, file: !3, line: 614, type: !616)
!4970 = !DILocation(line: 614, column: 17, scope: !4956)
!4971 = !DILocation(line: 616, column: 29, scope: !4956)
!4972 = !DILocation(line: 616, column: 9, scope: !4956)
!4973 = !DILocation(line: 616, column: 7, scope: !4956)
!4974 = !DILocation(line: 617, column: 7, scope: !4975)
!4975 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 617, column: 7)
!4976 = !DILocation(line: 617, column: 11, scope: !4975)
!4977 = !DILocation(line: 617, column: 7, scope: !4956)
!4978 = !DILocation(line: 618, column: 5, scope: !4975)
!4979 = !DILocation(line: 620, column: 24, scope: !4956)
!4980 = !DILocation(line: 620, column: 3, scope: !4956)
!4981 = !DILocation(line: 625, column: 3, scope: !4956)
!4982 = !DILocation(line: 627, column: 3, scope: !4956)
!4983 = !DILocation(line: 629, column: 36, scope: !4956)
!4984 = !DILocation(line: 629, column: 17, scope: !4956)
!4985 = !DILocation(line: 629, column: 15, scope: !4956)
!4986 = !DILocation(line: 630, column: 3, scope: !4956)
!4987 = !DILocation(line: 633, column: 28, scope: !4956)
!4988 = !DILocation(line: 633, column: 9, scope: !4956)
!4989 = !DILocation(line: 633, column: 7, scope: !4956)
!4990 = !DILocation(line: 634, column: 3, scope: !4956)
!4991 = !DILocation(line: 635, column: 7, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 635, column: 7)
!4993 = !DILocation(line: 635, column: 11, scope: !4992)
!4994 = !DILocation(line: 635, column: 7, scope: !4956)
!4995 = !DILocation(line: 637, column: 7, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 636, column: 5)
!4997 = !DILocation(line: 638, column: 14, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 638, column: 7)
!4999 = !DILocation(line: 638, column: 12, scope: !4998)
!5000 = !DILocation(line: 638, column: 19, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4998, file: !3, line: 638, column: 7)
!5002 = !DILocation(line: 638, column: 23, scope: !5001)
!5003 = !DILocation(line: 638, column: 21, scope: !5001)
!5004 = !DILocation(line: 638, column: 7, scope: !4998)
!5005 = !DILocalVariable(name: "r", scope: !5006, file: !3, line: 640, type: !2447)
!5006 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 639, column: 2)
!5007 = !DILocation(line: 640, column: 14, scope: !5006)
!5008 = !DILocation(line: 640, column: 35, scope: !5006)
!5009 = !DILocation(line: 640, column: 39, scope: !5006)
!5010 = !DILocation(line: 640, column: 48, scope: !5006)
!5011 = !DILocation(line: 640, column: 18, scope: !5006)
!5012 = !DILocation(line: 641, column: 4, scope: !5006)
!5013 = !DILocation(line: 642, column: 2, scope: !5006)
!5014 = !DILocation(line: 638, column: 29, scope: !5001)
!5015 = !DILocation(line: 638, column: 7, scope: !5001)
!5016 = distinct !{!5016, !5004, !5017}
!5017 = !DILocation(line: 642, column: 2, scope: !4998)
!5018 = !DILocation(line: 643, column: 5, scope: !4996)
!5019 = !DILocation(line: 646, column: 28, scope: !4956)
!5020 = !DILocation(line: 646, column: 9, scope: !4956)
!5021 = !DILocation(line: 646, column: 7, scope: !4956)
!5022 = !DILocation(line: 647, column: 3, scope: !4956)
!5023 = !DILocation(line: 648, column: 7, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 648, column: 7)
!5025 = !DILocation(line: 648, column: 11, scope: !5024)
!5026 = !DILocation(line: 648, column: 7, scope: !4956)
!5027 = !DILocation(line: 650, column: 7, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5024, file: !3, line: 649, column: 5)
!5029 = !DILocation(line: 651, column: 14, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 651, column: 7)
!5031 = !DILocation(line: 651, column: 12, scope: !5030)
!5032 = !DILocation(line: 651, column: 19, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 651, column: 7)
!5034 = !DILocation(line: 651, column: 23, scope: !5033)
!5035 = !DILocation(line: 651, column: 21, scope: !5033)
!5036 = !DILocation(line: 651, column: 7, scope: !5030)
!5037 = !DILocalVariable(name: "lp", scope: !5038, file: !3, line: 653, type: !2521)
!5038 = distinct !DILexicalBlock(scope: !5033, file: !3, line: 652, column: 2)
!5039 = !DILocation(line: 653, column: 19, scope: !5038)
!5040 = !DILocation(line: 653, column: 37, scope: !5038)
!5041 = !DILocation(line: 653, column: 41, scope: !5038)
!5042 = !DILocation(line: 653, column: 50, scope: !5038)
!5043 = !DILocation(line: 653, column: 24, scope: !5038)
!5044 = !DILocation(line: 654, column: 4, scope: !5038)
!5045 = !DILocation(line: 655, column: 2, scope: !5038)
!5046 = !DILocation(line: 651, column: 29, scope: !5033)
!5047 = !DILocation(line: 651, column: 7, scope: !5033)
!5048 = distinct !{!5048, !5036, !5049}
!5049 = !DILocation(line: 655, column: 2, scope: !5030)
!5050 = !DILocation(line: 656, column: 5, scope: !5028)
!5051 = !DILocation(line: 659, column: 28, scope: !4956)
!5052 = !DILocation(line: 659, column: 9, scope: !4956)
!5053 = !DILocation(line: 659, column: 7, scope: !4956)
!5054 = !DILocation(line: 660, column: 3, scope: !4956)
!5055 = !DILocation(line: 661, column: 7, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 661, column: 7)
!5057 = !DILocation(line: 661, column: 11, scope: !5056)
!5058 = !DILocation(line: 661, column: 7, scope: !4956)
!5059 = !DILocation(line: 663, column: 7, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5056, file: !3, line: 662, column: 5)
!5061 = !DILocation(line: 664, column: 14, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 664, column: 7)
!5063 = !DILocation(line: 664, column: 12, scope: !5062)
!5064 = !DILocation(line: 664, column: 19, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 664, column: 7)
!5066 = !DILocation(line: 664, column: 23, scope: !5065)
!5067 = !DILocation(line: 664, column: 21, scope: !5065)
!5068 = !DILocation(line: 664, column: 7, scope: !5062)
!5069 = !DILocalVariable(name: "ttype", scope: !5070, file: !3, line: 666, type: !1688)
!5070 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 665, column: 2)
!5071 = !DILocation(line: 666, column: 9, scope: !5070)
!5072 = !DILocation(line: 666, column: 33, scope: !5070)
!5073 = !DILocation(line: 666, column: 37, scope: !5070)
!5074 = !DILocation(line: 666, column: 17, scope: !5070)
!5075 = !DILocation(line: 667, column: 4, scope: !5070)
!5076 = !DILocation(line: 668, column: 2, scope: !5070)
!5077 = !DILocation(line: 664, column: 29, scope: !5065)
!5078 = !DILocation(line: 664, column: 7, scope: !5065)
!5079 = distinct !{!5079, !5068, !5080}
!5080 = !DILocation(line: 668, column: 2, scope: !5062)
!5081 = !DILocation(line: 669, column: 5, scope: !5060)
!5082 = !DILocation(line: 672, column: 28, scope: !4956)
!5083 = !DILocation(line: 672, column: 9, scope: !4956)
!5084 = !DILocation(line: 672, column: 7, scope: !4956)
!5085 = !DILocation(line: 673, column: 3, scope: !4956)
!5086 = !DILocation(line: 674, column: 7, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 674, column: 7)
!5088 = !DILocation(line: 674, column: 11, scope: !5087)
!5089 = !DILocation(line: 674, column: 7, scope: !4956)
!5090 = !DILocation(line: 676, column: 19, scope: !5091)
!5091 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 676, column: 11)
!5092 = distinct !DILexicalBlock(scope: !5087, file: !3, line: 675, column: 5)
!5093 = !DILocation(line: 676, column: 11, scope: !5091)
!5094 = !DILocation(line: 676, column: 11, scope: !5092)
!5095 = !DILocation(line: 678, column: 4, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5091, file: !3, line: 677, column: 2)
!5097 = !DILocation(line: 679, column: 11, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 679, column: 4)
!5099 = !DILocation(line: 679, column: 9, scope: !5098)
!5100 = !DILocation(line: 679, column: 16, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5098, file: !3, line: 679, column: 4)
!5102 = !DILocation(line: 679, column: 20, scope: !5101)
!5103 = !DILocation(line: 679, column: 18, scope: !5101)
!5104 = !DILocation(line: 679, column: 4, scope: !5098)
!5105 = !DILocalVariable(name: "t", scope: !5106, file: !3, line: 681, type: !1688)
!5106 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 680, column: 6)
!5107 = !DILocation(line: 681, column: 13, scope: !5106)
!5108 = !DILocation(line: 681, column: 33, scope: !5106)
!5109 = !DILocation(line: 681, column: 37, scope: !5106)
!5110 = !DILocation(line: 681, column: 17, scope: !5106)
!5111 = !DILocation(line: 682, column: 8, scope: !5106)
!5112 = !DILocation(line: 683, column: 6, scope: !5106)
!5113 = !DILocation(line: 679, column: 26, scope: !5101)
!5114 = !DILocation(line: 679, column: 4, scope: !5101)
!5115 = distinct !{!5115, !5104, !5116}
!5116 = !DILocation(line: 683, column: 6, scope: !5098)
!5117 = !DILocation(line: 684, column: 2, scope: !5096)
!5118 = !DILocation(line: 687, column: 4, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5091, file: !3, line: 686, column: 2)
!5120 = !DILocation(line: 688, column: 11, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5119, file: !3, line: 688, column: 4)
!5122 = !DILocation(line: 688, column: 9, scope: !5121)
!5123 = !DILocation(line: 688, column: 16, scope: !5124)
!5124 = distinct !DILexicalBlock(scope: !5121, file: !3, line: 688, column: 4)
!5125 = !DILocation(line: 688, column: 20, scope: !5124)
!5126 = !DILocation(line: 688, column: 18, scope: !5124)
!5127 = !DILocation(line: 688, column: 4, scope: !5121)
!5128 = !DILocalVariable(name: "c", scope: !5129, file: !3, line: 690, type: !2599)
!5129 = distinct !DILexicalBlock(scope: !5124, file: !3, line: 689, column: 6)
!5130 = !DILocation(line: 690, column: 14, scope: !5129)
!5131 = !DILocation(line: 690, column: 40, scope: !5129)
!5132 = !DILocation(line: 690, column: 18, scope: !5129)
!5133 = !DILocation(line: 691, column: 8, scope: !5129)
!5134 = !DILocation(line: 692, column: 6, scope: !5129)
!5135 = !DILocation(line: 688, column: 26, scope: !5124)
!5136 = !DILocation(line: 688, column: 4, scope: !5124)
!5137 = distinct !{!5137, !5127, !5138}
!5138 = !DILocation(line: 692, column: 6, scope: !5121)
!5139 = !DILocation(line: 694, column: 5, scope: !5092)
!5140 = !DILocation(line: 698, column: 29, scope: !4956)
!5141 = !DILocation(line: 698, column: 33, scope: !4956)
!5142 = !DILocation(line: 698, column: 3, scope: !4956)
!5143 = !DILocation(line: 700, column: 29, scope: !4956)
!5144 = !DILocation(line: 700, column: 9, scope: !4956)
!5145 = !DILocation(line: 700, column: 7, scope: !4956)
!5146 = !DILocation(line: 701, column: 24, scope: !4956)
!5147 = !DILocation(line: 701, column: 3, scope: !4956)
!5148 = !DILocation(line: 702, column: 1, scope: !4956)
!5149 = distinct !DISubprogram(name: "input_bb", scope: !3, file: !3, line: 1175, type: !5150, scopeLine: 1177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5150 = !DISubroutineType(types: !5151)
!5151 = !{null, !3647, !616, !3116, !2439}
!5152 = !DILocalVariable(name: "ib", arg: 1, scope: !5149, file: !3, line: 1175, type: !3647)
!5153 = !DILocation(line: 1175, column: 35, scope: !5149)
!5154 = !DILocalVariable(name: "tag", arg: 2, scope: !5149, file: !3, line: 1175, type: !616)
!5155 = !DILocation(line: 1175, column: 53, scope: !5149)
!5156 = !DILocalVariable(name: "data_in", arg: 3, scope: !5149, file: !3, line: 1176, type: !3116)
!5157 = !DILocation(line: 1176, column: 20, scope: !5149)
!5158 = !DILocalVariable(name: "fn", arg: 4, scope: !5149, file: !3, line: 1176, type: !2439)
!5159 = !DILocation(line: 1176, column: 46, scope: !5149)
!5160 = !DILocalVariable(name: "index", scope: !5149, file: !3, line: 1178, type: !7)
!5161 = !DILocation(line: 1178, column: 16, scope: !5149)
!5162 = !DILocalVariable(name: "bb", scope: !5149, file: !3, line: 1179, type: !2605)
!5163 = !DILocation(line: 1179, column: 15, scope: !5149)
!5164 = !DILocalVariable(name: "bsi", scope: !5149, file: !3, line: 1180, type: !4621)
!5165 = !DILocation(line: 1180, column: 24, scope: !5149)
!5166 = !DILocation(line: 1184, column: 3, scope: !5149)
!5167 = !DILocation(line: 1186, column: 30, scope: !5149)
!5168 = !DILocation(line: 1186, column: 11, scope: !5149)
!5169 = !DILocation(line: 1186, column: 9, scope: !5149)
!5170 = !DILocation(line: 1187, column: 8, scope: !5149)
!5171 = !DILocation(line: 1187, column: 6, scope: !5149)
!5172 = !DILocation(line: 1189, column: 34, scope: !5149)
!5173 = !DILocation(line: 1189, column: 15, scope: !5149)
!5174 = !DILocation(line: 1189, column: 3, scope: !5149)
!5175 = !DILocation(line: 1189, column: 7, scope: !5149)
!5176 = !DILocation(line: 1189, column: 13, scope: !5149)
!5177 = !DILocation(line: 1190, column: 39, scope: !5149)
!5178 = !DILocation(line: 1190, column: 20, scope: !5149)
!5179 = !DILocation(line: 1190, column: 3, scope: !5149)
!5180 = !DILocation(line: 1190, column: 7, scope: !5149)
!5181 = !DILocation(line: 1190, column: 18, scope: !5149)
!5182 = !DILocation(line: 1191, column: 38, scope: !5149)
!5183 = !DILocation(line: 1191, column: 19, scope: !5149)
!5184 = !DILocation(line: 1191, column: 3, scope: !5149)
!5185 = !DILocation(line: 1191, column: 7, scope: !5149)
!5186 = !DILocation(line: 1191, column: 17, scope: !5149)
!5187 = !DILocation(line: 1192, column: 34, scope: !5149)
!5188 = !DILocation(line: 1192, column: 15, scope: !5149)
!5189 = !DILocation(line: 1192, column: 3, scope: !5149)
!5190 = !DILocation(line: 1192, column: 7, scope: !5149)
!5191 = !DILocation(line: 1192, column: 13, scope: !5149)
!5192 = !DILocation(line: 1195, column: 7, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 1195, column: 7)
!5194 = !DILocation(line: 1195, column: 11, scope: !5193)
!5195 = !DILocation(line: 1195, column: 7, scope: !5149)
!5196 = !DILocation(line: 1196, column: 5, scope: !5193)
!5197 = !DILocation(line: 1198, column: 23, scope: !5149)
!5198 = !DILocation(line: 1198, column: 9, scope: !5149)
!5199 = !DILocation(line: 1199, column: 29, scope: !5149)
!5200 = !DILocation(line: 1199, column: 9, scope: !5149)
!5201 = !DILocation(line: 1199, column: 7, scope: !5149)
!5202 = !DILocation(line: 1200, column: 3, scope: !5149)
!5203 = !DILocation(line: 1200, column: 10, scope: !5149)
!5204 = !DILocalVariable(name: "stmt", scope: !5205, file: !3, line: 1202, type: !2017)
!5205 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 1201, column: 5)
!5206 = !DILocation(line: 1202, column: 14, scope: !5205)
!5207 = !DILocation(line: 1202, column: 40, scope: !5205)
!5208 = !DILocation(line: 1202, column: 44, scope: !5205)
!5209 = !DILocation(line: 1202, column: 53, scope: !5205)
!5210 = !DILocation(line: 1202, column: 57, scope: !5205)
!5211 = !DILocation(line: 1202, column: 21, scope: !5205)
!5212 = !DILocation(line: 1207, column: 12, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5205, file: !3, line: 1207, column: 11)
!5214 = !DILocation(line: 1208, column: 4, scope: !5213)
!5215 = !DILocation(line: 1208, column: 24, scope: !5213)
!5216 = !DILocation(line: 1208, column: 7, scope: !5213)
!5217 = !DILocation(line: 1207, column: 11, scope: !5205)
!5218 = !DILocation(line: 1209, column: 9, scope: !5213)
!5219 = !DILocation(line: 1209, column: 7, scope: !5213)
!5220 = !DILocation(line: 1209, column: 2, scope: !5213)
!5221 = !DILocation(line: 1211, column: 32, scope: !5205)
!5222 = !DILocation(line: 1211, column: 7, scope: !5205)
!5223 = !DILocation(line: 1212, column: 31, scope: !5205)
!5224 = !DILocation(line: 1212, column: 7, scope: !5205)
!5225 = !DILocation(line: 1216, column: 33, scope: !5205)
!5226 = !DILocation(line: 1216, column: 13, scope: !5205)
!5227 = !DILocation(line: 1216, column: 11, scope: !5205)
!5228 = !DILocation(line: 1217, column: 26, scope: !5205)
!5229 = !DILocation(line: 1217, column: 7, scope: !5205)
!5230 = !DILocation(line: 1219, column: 11, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5205, file: !3, line: 1219, column: 11)
!5232 = !DILocation(line: 1219, column: 15, scope: !5231)
!5233 = !DILocation(line: 1219, column: 11, scope: !5205)
!5234 = !DILocalVariable(name: "region", scope: !5235, file: !3, line: 1221, type: !1743)
!5235 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 1220, column: 2)
!5236 = !DILocation(line: 1221, column: 18, scope: !5235)
!5237 = !DILocation(line: 1221, column: 46, scope: !5235)
!5238 = !DILocation(line: 1221, column: 27, scope: !5235)
!5239 = !DILocation(line: 1222, column: 4, scope: !5235)
!5240 = !DILocation(line: 1223, column: 23, scope: !5235)
!5241 = !DILocation(line: 1223, column: 29, scope: !5235)
!5242 = !DILocation(line: 1223, column: 4, scope: !5235)
!5243 = !DILocation(line: 1224, column: 2, scope: !5235)
!5244 = !DILocation(line: 1226, column: 33, scope: !5205)
!5245 = !DILocation(line: 1226, column: 13, scope: !5205)
!5246 = !DILocation(line: 1226, column: 11, scope: !5205)
!5247 = distinct !{!5247, !5202, !5248}
!5248 = !DILocation(line: 1227, column: 5, scope: !5149)
!5249 = !DILocation(line: 1229, column: 29, scope: !5149)
!5250 = !DILocation(line: 1229, column: 9, scope: !5149)
!5251 = !DILocation(line: 1229, column: 7, scope: !5149)
!5252 = !DILocation(line: 1230, column: 3, scope: !5149)
!5253 = !DILocation(line: 1230, column: 10, scope: !5149)
!5254 = !DILocalVariable(name: "phi", scope: !5255, file: !3, line: 1232, type: !2017)
!5255 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 1231, column: 5)
!5256 = !DILocation(line: 1232, column: 14, scope: !5255)
!5257 = !DILocation(line: 1232, column: 31, scope: !5255)
!5258 = !DILocation(line: 1232, column: 35, scope: !5255)
!5259 = !DILocation(line: 1232, column: 39, scope: !5255)
!5260 = !DILocation(line: 1232, column: 48, scope: !5255)
!5261 = !DILocation(line: 1232, column: 20, scope: !5255)
!5262 = !DILocation(line: 1233, column: 32, scope: !5255)
!5263 = !DILocation(line: 1233, column: 7, scope: !5255)
!5264 = !DILocation(line: 1234, column: 33, scope: !5255)
!5265 = !DILocation(line: 1234, column: 13, scope: !5255)
!5266 = !DILocation(line: 1234, column: 11, scope: !5255)
!5267 = distinct !{!5267, !5252, !5268}
!5268 = !DILocation(line: 1235, column: 5, scope: !5149)
!5269 = !DILocation(line: 1236, column: 1, scope: !5149)
!5270 = distinct !DISubprogram(name: "gimple_stmt_max_uid", scope: !5271, file: !5271, line: 150, type: !5272, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5271 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5272 = !DISubroutineType(types: !5273)
!5273 = !{!7, !2439}
!5274 = !DILocalVariable(name: "fn", arg: 1, scope: !5270, file: !5271, line: 150, type: !2439)
!5275 = !DILocation(line: 150, column: 39, scope: !5270)
!5276 = !DILocation(line: 152, column: 10, scope: !5270)
!5277 = !DILocation(line: 152, column: 14, scope: !5270)
!5278 = !DILocation(line: 152, column: 3, scope: !5270)
!5279 = distinct !DISubprogram(name: "gsi_start_bb", scope: !682, file: !682, line: 4418, type: !5280, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5280 = !DISubroutineType(types: !5281)
!5281 = !{!4621, !2605}
!5282 = !DILocalVariable(name: "bb", arg: 1, scope: !5279, file: !682, line: 4418, type: !2605)
!5283 = !DILocation(line: 4418, column: 27, scope: !5279)
!5284 = !DILocalVariable(name: "i", scope: !5279, file: !682, line: 4420, type: !4621)
!5285 = !DILocation(line: 4420, column: 24, scope: !5279)
!5286 = !DILocalVariable(name: "seq", scope: !5279, file: !682, line: 4421, type: !2007)
!5287 = !DILocation(line: 4421, column: 14, scope: !5279)
!5288 = !DILocation(line: 4423, column: 17, scope: !5279)
!5289 = !DILocation(line: 4423, column: 9, scope: !5279)
!5290 = !DILocation(line: 4423, column: 7, scope: !5279)
!5291 = !DILocation(line: 4424, column: 29, scope: !5279)
!5292 = !DILocation(line: 4424, column: 11, scope: !5279)
!5293 = !DILocation(line: 4424, column: 5, scope: !5279)
!5294 = !DILocation(line: 4424, column: 9, scope: !5279)
!5295 = !DILocation(line: 4425, column: 11, scope: !5279)
!5296 = !DILocation(line: 4425, column: 5, scope: !5279)
!5297 = !DILocation(line: 4425, column: 9, scope: !5279)
!5298 = !DILocation(line: 4426, column: 10, scope: !5279)
!5299 = !DILocation(line: 4426, column: 5, scope: !5279)
!5300 = !DILocation(line: 4426, column: 8, scope: !5279)
!5301 = !DILocation(line: 4428, column: 3, scope: !5279)
!5302 = distinct !DISubprogram(name: "gsi_end_p", scope: !682, file: !682, line: 4467, type: !5303, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5303 = !DISubroutineType(types: !5304)
!5304 = !{!1807, !4621}
!5305 = !DILocalVariable(name: "i", arg: 1, scope: !5302, file: !682, line: 4467, type: !4621)
!5306 = !DILocation(line: 4467, column: 33, scope: !5302)
!5307 = !DILocation(line: 4469, column: 12, scope: !5302)
!5308 = !DILocation(line: 4469, column: 16, scope: !5302)
!5309 = !DILocation(line: 4469, column: 10, scope: !5302)
!5310 = !DILocation(line: 4469, column: 3, scope: !5302)
!5311 = distinct !DISubprogram(name: "gsi_stmt", scope: !682, file: !682, line: 4501, type: !5312, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5312 = !DISubroutineType(types: !5313)
!5313 = !{!2017, !4621}
!5314 = !DILocalVariable(name: "i", arg: 1, scope: !5311, file: !682, line: 4501, type: !4621)
!5315 = !DILocation(line: 4501, column: 32, scope: !5311)
!5316 = !DILocation(line: 4503, column: 12, scope: !5311)
!5317 = !DILocation(line: 4503, column: 17, scope: !5311)
!5318 = !DILocation(line: 4503, column: 3, scope: !5311)
!5319 = distinct !DISubprogram(name: "gimple_uid", scope: !682, file: !682, line: 1265, type: !5320, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5320 = !DISubroutineType(types: !5321)
!5321 = !{!7, !5322}
!5322 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1678, line: 60, baseType: !3455)
!5323 = !DILocalVariable(name: "g", arg: 1, scope: !5319, file: !682, line: 1265, type: !5322)
!5324 = !DILocation(line: 1265, column: 26, scope: !5319)
!5325 = !DILocation(line: 1267, column: 10, scope: !5319)
!5326 = !DILocation(line: 1267, column: 13, scope: !5319)
!5327 = !DILocation(line: 1267, column: 20, scope: !5319)
!5328 = !DILocation(line: 1267, column: 3, scope: !5319)
!5329 = distinct !DISubprogram(name: "gsi_next", scope: !682, file: !682, line: 4485, type: !5330, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5330 = !DISubroutineType(types: !5331)
!5331 = !{null, !5332}
!5332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4621, size: 64)
!5333 = !DILocalVariable(name: "i", arg: 1, scope: !5329, file: !682, line: 4485, type: !5332)
!5334 = !DILocation(line: 4485, column: 33, scope: !5329)
!5335 = !DILocation(line: 4487, column: 12, scope: !5329)
!5336 = !DILocation(line: 4487, column: 15, scope: !5329)
!5337 = !DILocation(line: 4487, column: 20, scope: !5329)
!5338 = !DILocation(line: 4487, column: 3, scope: !5329)
!5339 = !DILocation(line: 4487, column: 6, scope: !5329)
!5340 = !DILocation(line: 4487, column: 10, scope: !5329)
!5341 = !DILocation(line: 4488, column: 1, scope: !5329)
!5342 = distinct !DISubprogram(name: "ei_start_1", scope: !337, file: !337, line: 696, type: !5343, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5343 = !DISubroutineType(types: !5344)
!5344 = !{!4655, !4660}
!5345 = !DILocalVariable(name: "ev", arg: 1, scope: !5342, file: !337, line: 696, type: !4660)
!5346 = !DILocation(line: 696, column: 28, scope: !5342)
!5347 = !DILocalVariable(name: "i", scope: !5342, file: !337, line: 698, type: !4655)
!5348 = !DILocation(line: 698, column: 17, scope: !5342)
!5349 = !DILocation(line: 700, column: 5, scope: !5342)
!5350 = !DILocation(line: 700, column: 11, scope: !5342)
!5351 = !DILocation(line: 701, column: 17, scope: !5342)
!5352 = !DILocation(line: 701, column: 5, scope: !5342)
!5353 = !DILocation(line: 701, column: 15, scope: !5342)
!5354 = !DILocation(line: 703, column: 3, scope: !5342)
!5355 = distinct !DISubprogram(name: "bb_seq", scope: !682, file: !682, line: 237, type: !5356, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5356 = !DISubroutineType(types: !5357)
!5357 = !{!2007, !5358}
!5358 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1678, line: 112, baseType: !5359)
!5359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5360, size: 64)
!5360 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1982)
!5361 = !DILocalVariable(name: "bb", arg: 1, scope: !5355, file: !682, line: 237, type: !5358)
!5362 = !DILocation(line: 237, column: 27, scope: !5355)
!5363 = !DILocation(line: 239, column: 13, scope: !5355)
!5364 = !DILocation(line: 239, column: 17, scope: !5355)
!5365 = !DILocation(line: 239, column: 23, scope: !5355)
!5366 = !DILocation(line: 239, column: 33, scope: !5355)
!5367 = !DILocation(line: 239, column: 36, scope: !5355)
!5368 = !DILocation(line: 239, column: 40, scope: !5355)
!5369 = !DILocation(line: 239, column: 43, scope: !5355)
!5370 = !DILocation(line: 239, column: 10, scope: !5355)
!5371 = !DILocation(line: 239, column: 53, scope: !5355)
!5372 = !DILocation(line: 239, column: 57, scope: !5355)
!5373 = !DILocation(line: 239, column: 60, scope: !5355)
!5374 = !DILocation(line: 239, column: 68, scope: !5355)
!5375 = !DILocation(line: 239, column: 3, scope: !5355)
!5376 = distinct !DISubprogram(name: "ei_edge", scope: !337, file: !337, line: 752, type: !5377, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5377 = !DISubroutineType(types: !5378)
!5378 = !{!1997, !4655}
!5379 = !DILocalVariable(name: "i", arg: 1, scope: !5376, file: !337, line: 752, type: !4655)
!5380 = !DILocation(line: 752, column: 24, scope: !5376)
!5381 = !DILocation(line: 754, column: 10, scope: !5376)
!5382 = !DILocation(line: 754, column: 3, scope: !5376)
!5383 = distinct !DISubprogram(name: "fixup_call_stmt_edges", scope: !3, file: !3, line: 1252, type: !3266, scopeLine: 1253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5384 = !DILocalVariable(name: "orig", arg: 1, scope: !5383, file: !3, line: 1252, type: !3157)
!5385 = !DILocation(line: 1252, column: 44, scope: !5383)
!5386 = !DILocalVariable(name: "stmts", arg: 2, scope: !5383, file: !3, line: 1252, type: !3268)
!5387 = !DILocation(line: 1252, column: 58, scope: !5383)
!5388 = !DILocalVariable(name: "node", scope: !5383, file: !3, line: 1254, type: !3157)
!5389 = !DILocation(line: 1254, column: 23, scope: !5383)
!5390 = !DILocation(line: 1256, column: 3, scope: !5383)
!5391 = !DILocation(line: 1256, column: 10, scope: !5383)
!5392 = !DILocation(line: 1256, column: 16, scope: !5383)
!5393 = !DILocation(line: 1257, column: 12, scope: !5383)
!5394 = !DILocation(line: 1257, column: 18, scope: !5383)
!5395 = !DILocation(line: 1257, column: 10, scope: !5383)
!5396 = distinct !{!5396, !5390, !5394}
!5397 = !DILocation(line: 1259, column: 28, scope: !5383)
!5398 = !DILocation(line: 1259, column: 34, scope: !5383)
!5399 = !DILocation(line: 1259, column: 3, scope: !5383)
!5400 = !DILocation(line: 1260, column: 7, scope: !5401)
!5401 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 1260, column: 7)
!5402 = !DILocation(line: 1260, column: 13, scope: !5401)
!5403 = !DILocation(line: 1260, column: 7, scope: !5383)
!5404 = !DILocation(line: 1261, column: 17, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5401, file: !3, line: 1261, column: 5)
!5406 = !DILocation(line: 1261, column: 23, scope: !5405)
!5407 = !DILocation(line: 1261, column: 15, scope: !5405)
!5408 = !DILocation(line: 1261, column: 10, scope: !5405)
!5409 = !DILocation(line: 1261, column: 31, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 1261, column: 5)
!5411 = !DILocation(line: 1261, column: 39, scope: !5410)
!5412 = !DILocation(line: 1261, column: 36, scope: !5410)
!5413 = !DILocation(line: 1261, column: 5, scope: !5405)
!5414 = !DILocation(line: 1263, column: 27, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5410, file: !3, line: 1262, column: 7)
!5416 = !DILocation(line: 1263, column: 33, scope: !5415)
!5417 = !DILocation(line: 1263, column: 2, scope: !5415)
!5418 = !DILocation(line: 1264, column: 6, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5415, file: !3, line: 1264, column: 6)
!5420 = !DILocation(line: 1264, column: 12, scope: !5419)
!5421 = !DILocation(line: 1264, column: 6, scope: !5415)
!5422 = !DILocation(line: 1265, column: 11, scope: !5419)
!5423 = !DILocation(line: 1265, column: 17, scope: !5419)
!5424 = !DILocation(line: 1265, column: 9, scope: !5419)
!5425 = !DILocation(line: 1265, column: 4, scope: !5419)
!5426 = !DILocation(line: 1266, column: 11, scope: !5427)
!5427 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 1266, column: 11)
!5428 = !DILocation(line: 1266, column: 17, scope: !5427)
!5429 = !DILocation(line: 1266, column: 11, scope: !5419)
!5430 = !DILocation(line: 1267, column: 11, scope: !5427)
!5431 = !DILocation(line: 1267, column: 17, scope: !5427)
!5432 = !DILocation(line: 1267, column: 9, scope: !5427)
!5433 = !DILocation(line: 1267, column: 4, scope: !5427)
!5434 = !DILocation(line: 1270, column: 6, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 1269, column: 4)
!5436 = !DILocation(line: 1270, column: 13, scope: !5435)
!5437 = !DILocation(line: 1270, column: 21, scope: !5435)
!5438 = !DILocation(line: 1270, column: 18, scope: !5435)
!5439 = !DILocation(line: 1270, column: 26, scope: !5435)
!5440 = !DILocation(line: 1270, column: 30, scope: !5435)
!5441 = !DILocation(line: 1270, column: 36, scope: !5435)
!5442 = !DILocation(line: 1270, column: 29, scope: !5435)
!5443 = !DILocation(line: 0, scope: !5435)
!5444 = !DILocation(line: 1271, column: 15, scope: !5435)
!5445 = !DILocation(line: 1271, column: 21, scope: !5435)
!5446 = !DILocation(line: 1271, column: 13, scope: !5435)
!5447 = distinct !{!5447, !5434, !5445}
!5448 = !DILocation(line: 1272, column: 10, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 1272, column: 10)
!5450 = !DILocation(line: 1272, column: 18, scope: !5449)
!5451 = !DILocation(line: 1272, column: 15, scope: !5449)
!5452 = !DILocation(line: 1272, column: 10, scope: !5435)
!5453 = !DILocation(line: 1273, column: 15, scope: !5449)
!5454 = !DILocation(line: 1273, column: 21, scope: !5449)
!5455 = !DILocation(line: 1273, column: 13, scope: !5449)
!5456 = !DILocation(line: 1273, column: 8, scope: !5449)
!5457 = !DILocation(line: 1261, column: 5, scope: !5410)
!5458 = distinct !{!5458, !5413, !5459}
!5459 = !DILocation(line: 1275, column: 7, scope: !5405)
!5460 = !DILocation(line: 1276, column: 1, scope: !5383)
!5461 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !5462, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5462 = !DISubroutineType(types: !5463)
!5463 = !{!7, !5464}
!5464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5465, size: 64)
!5465 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2575)
!5466 = !DILocalVariable(name: "vec_", arg: 1, scope: !5461, file: !135, line: 182, type: !5464)
!5467 = !DILocation(line: 182, column: 1, scope: !5461)
!5468 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !5469, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5469 = !DISubroutineType(types: !5470)
!5470 = !{!2052, !5471, !1688}
!5471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!5472 = !DILocalVariable(name: "vec_", arg: 1, scope: !5468, file: !135, line: 182, type: !5471)
!5473 = !DILocation(line: 182, column: 1, scope: !5468)
!5474 = !DILocalVariable(name: "obj_", arg: 2, scope: !5468, file: !135, line: 182, type: !1688)
!5475 = !DILocalVariable(name: "slot_", scope: !5468, file: !135, line: 182, type: !2052)
!5476 = distinct !DISubprogram(name: "lto_tag_check_range", scope: !3, file: !3, line: 88, type: !5477, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5477 = !DISubroutineType(types: !5478)
!5478 = !{null, !616, !616, !616}
!5479 = !DILocalVariable(name: "actual", arg: 1, scope: !5476, file: !3, line: 88, type: !616)
!5480 = !DILocation(line: 88, column: 36, scope: !5476)
!5481 = !DILocalVariable(name: "tag1", arg: 2, scope: !5476, file: !3, line: 88, type: !616)
!5482 = !DILocation(line: 88, column: 58, scope: !5476)
!5483 = !DILocalVariable(name: "tag2", arg: 3, scope: !5476, file: !3, line: 89, type: !616)
!5484 = !DILocation(line: 89, column: 22, scope: !5476)
!5485 = !DILocation(line: 91, column: 7, scope: !5486)
!5486 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 91, column: 7)
!5487 = !DILocation(line: 91, column: 16, scope: !5486)
!5488 = !DILocation(line: 91, column: 14, scope: !5486)
!5489 = !DILocation(line: 91, column: 21, scope: !5486)
!5490 = !DILocation(line: 91, column: 24, scope: !5486)
!5491 = !DILocation(line: 91, column: 33, scope: !5486)
!5492 = !DILocation(line: 91, column: 31, scope: !5486)
!5493 = !DILocation(line: 91, column: 7, scope: !5476)
!5494 = !DILocation(line: 94, column: 21, scope: !5486)
!5495 = !DILocation(line: 94, column: 7, scope: !5486)
!5496 = !DILocation(line: 95, column: 21, scope: !5486)
!5497 = !DILocation(line: 95, column: 7, scope: !5486)
!5498 = !DILocation(line: 96, column: 21, scope: !5486)
!5499 = !DILocation(line: 96, column: 7, scope: !5486)
!5500 = !DILocation(line: 92, column: 5, scope: !5486)
!5501 = !DILocation(line: 97, column: 1, scope: !5476)
!5502 = !DILocation(line: 583, column: 7, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 583, column: 7)
!5504 = !DILocation(line: 583, column: 7, scope: !3493)
!5505 = !DILocation(line: 584, column: 5, scope: !5503)
!5506 = !DILocation(line: 591, column: 19, scope: !3493)
!5507 = !DILocation(line: 592, column: 3, scope: !3493)
!5508 = !DILocation(line: 598, column: 7, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !3493, file: !3, line: 598, column: 7)
!5510 = !DILocation(line: 598, column: 7, scope: !3493)
!5511 = !DILocation(line: 599, column: 5, scope: !5509)
!5512 = !DILocation(line: 602, column: 20, scope: !3493)
!5513 = !DILocation(line: 603, column: 1, scope: !3493)
!5514 = distinct !DISubprogram(name: "VEC_eh_region_gc_safe_grow", scope: !330, file: !330, line: 185, type: !5515, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5515 = !DISubroutineType(types: !5516)
!5516 = !{null, !5517, !1784}
!5517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2496, size: 64)
!5518 = !DILocalVariable(name: "vec_", arg: 1, scope: !5514, file: !330, line: 185, type: !5517)
!5519 = !DILocation(line: 185, column: 1, scope: !5514)
!5520 = !DILocalVariable(name: "size_", arg: 2, scope: !5514, file: !330, line: 185, type: !1784)
!5521 = !DILocation(line: 0, scope: !5514)
!5522 = distinct !DISubprogram(name: "input_eh_region", scope: !3, file: !3, line: 425, type: !5523, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5523 = !DISubroutineType(types: !5524)
!5524 = !{!2447, !3647, !3116, !1784}
!5525 = !DILocalVariable(name: "ib", arg: 1, scope: !5522, file: !3, line: 425, type: !3647)
!5526 = !DILocation(line: 425, column: 42, scope: !5522)
!5527 = !DILocalVariable(name: "data_in", arg: 2, scope: !5522, file: !3, line: 425, type: !3116)
!5528 = !DILocation(line: 425, column: 62, scope: !5522)
!5529 = !DILocalVariable(name: "ix", arg: 3, scope: !5522, file: !3, line: 425, type: !1784)
!5530 = !DILocation(line: 425, column: 75, scope: !5522)
!5531 = !DILocalVariable(name: "tag", scope: !5522, file: !3, line: 427, type: !616)
!5532 = !DILocation(line: 427, column: 17, scope: !5522)
!5533 = !DILocalVariable(name: "r", scope: !5522, file: !3, line: 428, type: !2447)
!5534 = !DILocation(line: 428, column: 13, scope: !5522)
!5535 = !DILocation(line: 431, column: 29, scope: !5522)
!5536 = !DILocation(line: 431, column: 9, scope: !5522)
!5537 = !DILocation(line: 431, column: 7, scope: !5522)
!5538 = !DILocation(line: 432, column: 7, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5522, file: !3, line: 432, column: 7)
!5540 = !DILocation(line: 432, column: 11, scope: !5539)
!5541 = !DILocation(line: 432, column: 7, scope: !5522)
!5542 = !DILocation(line: 433, column: 5, scope: !5539)
!5543 = !DILocation(line: 435, column: 7, scope: !5522)
!5544 = !DILocation(line: 435, column: 5, scope: !5522)
!5545 = !DILocation(line: 436, column: 33, scope: !5522)
!5546 = !DILocation(line: 436, column: 14, scope: !5522)
!5547 = !DILocation(line: 436, column: 3, scope: !5522)
!5548 = !DILocation(line: 436, column: 6, scope: !5522)
!5549 = !DILocation(line: 436, column: 12, scope: !5522)
!5550 = !DILocation(line: 438, column: 3, scope: !5522)
!5551 = !DILocation(line: 442, column: 56, scope: !5522)
!5552 = !DILocation(line: 442, column: 37, scope: !5522)
!5553 = !DILocation(line: 442, column: 14, scope: !5522)
!5554 = !DILocation(line: 442, column: 3, scope: !5522)
!5555 = !DILocation(line: 442, column: 6, scope: !5522)
!5556 = !DILocation(line: 442, column: 12, scope: !5522)
!5557 = !DILocation(line: 443, column: 56, scope: !5522)
!5558 = !DILocation(line: 443, column: 37, scope: !5522)
!5559 = !DILocation(line: 443, column: 14, scope: !5522)
!5560 = !DILocation(line: 443, column: 3, scope: !5522)
!5561 = !DILocation(line: 443, column: 6, scope: !5522)
!5562 = !DILocation(line: 443, column: 12, scope: !5522)
!5563 = !DILocation(line: 444, column: 60, scope: !5522)
!5564 = !DILocation(line: 444, column: 41, scope: !5522)
!5565 = !DILocation(line: 444, column: 18, scope: !5522)
!5566 = !DILocation(line: 444, column: 3, scope: !5522)
!5567 = !DILocation(line: 444, column: 6, scope: !5522)
!5568 = !DILocation(line: 444, column: 16, scope: !5522)
!5569 = !DILocation(line: 446, column: 11, scope: !5522)
!5570 = !DILocation(line: 446, column: 3, scope: !5522)
!5571 = !DILocation(line: 449, column: 2, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5522, file: !3, line: 447, column: 5)
!5573 = !DILocation(line: 449, column: 5, scope: !5572)
!5574 = !DILocation(line: 449, column: 10, scope: !5572)
!5575 = !DILocation(line: 450, column: 2, scope: !5572)
!5576 = !DILocalVariable(name: "last_catch", scope: !5577, file: !3, line: 454, type: !2463)
!5577 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 453, column: 2)
!5578 = !DILocation(line: 454, column: 23, scope: !5577)
!5579 = !DILocation(line: 455, column: 4, scope: !5577)
!5580 = !DILocation(line: 455, column: 7, scope: !5577)
!5581 = !DILocation(line: 455, column: 12, scope: !5577)
!5582 = !DILocation(line: 456, column: 55, scope: !5577)
!5583 = !DILocation(line: 456, column: 59, scope: !5577)
!5584 = !DILocation(line: 456, column: 30, scope: !5577)
!5585 = !DILocation(line: 456, column: 4, scope: !5577)
!5586 = !DILocation(line: 456, column: 7, scope: !5577)
!5587 = !DILocation(line: 456, column: 9, scope: !5577)
!5588 = !DILocation(line: 456, column: 16, scope: !5577)
!5589 = !DILocation(line: 456, column: 28, scope: !5577)
!5590 = !DILocation(line: 458, column: 29, scope: !5577)
!5591 = !DILocation(line: 458, column: 4, scope: !5577)
!5592 = !DILocation(line: 458, column: 7, scope: !5577)
!5593 = !DILocation(line: 458, column: 9, scope: !5577)
!5594 = !DILocation(line: 458, column: 16, scope: !5577)
!5595 = !DILocation(line: 458, column: 27, scope: !5577)
!5596 = !DILocation(line: 459, column: 4, scope: !5577)
!5597 = !DILocalVariable(name: "l", scope: !5598, file: !3, line: 464, type: !1688)
!5598 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 463, column: 2)
!5599 = !DILocation(line: 464, column: 9, scope: !5598)
!5600 = !DILocation(line: 466, column: 4, scope: !5598)
!5601 = !DILocation(line: 466, column: 7, scope: !5598)
!5602 = !DILocation(line: 466, column: 12, scope: !5598)
!5603 = !DILocation(line: 467, column: 45, scope: !5598)
!5604 = !DILocation(line: 467, column: 49, scope: !5598)
!5605 = !DILocation(line: 467, column: 29, scope: !5598)
!5606 = !DILocation(line: 467, column: 4, scope: !5598)
!5607 = !DILocation(line: 467, column: 7, scope: !5598)
!5608 = !DILocation(line: 467, column: 9, scope: !5598)
!5609 = !DILocation(line: 467, column: 17, scope: !5598)
!5610 = !DILocation(line: 467, column: 27, scope: !5598)
!5611 = !DILocation(line: 468, column: 41, scope: !5598)
!5612 = !DILocation(line: 468, column: 45, scope: !5598)
!5613 = !DILocation(line: 468, column: 25, scope: !5598)
!5614 = !DILocation(line: 468, column: 4, scope: !5598)
!5615 = !DILocation(line: 468, column: 7, scope: !5598)
!5616 = !DILocation(line: 468, column: 9, scope: !5598)
!5617 = !DILocation(line: 468, column: 17, scope: !5598)
!5618 = !DILocation(line: 468, column: 23, scope: !5598)
!5619 = !DILocation(line: 469, column: 45, scope: !5598)
!5620 = !DILocation(line: 469, column: 26, scope: !5598)
!5621 = !DILocation(line: 469, column: 4, scope: !5598)
!5622 = !DILocation(line: 469, column: 7, scope: !5598)
!5623 = !DILocation(line: 469, column: 9, scope: !5598)
!5624 = !DILocation(line: 469, column: 17, scope: !5598)
!5625 = !DILocation(line: 469, column: 24, scope: !5598)
!5626 = !DILocation(line: 471, column: 13, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5598, file: !3, line: 471, column: 4)
!5628 = !DILocation(line: 471, column: 16, scope: !5627)
!5629 = !DILocation(line: 471, column: 18, scope: !5627)
!5630 = !DILocation(line: 471, column: 26, scope: !5627)
!5631 = !DILocation(line: 471, column: 11, scope: !5627)
!5632 = !DILocation(line: 471, column: 9, scope: !5627)
!5633 = !DILocation(line: 471, column: 37, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5627, file: !3, line: 471, column: 4)
!5635 = !DILocation(line: 471, column: 4, scope: !5627)
!5636 = !DILocation(line: 472, column: 28, scope: !5634)
!5637 = !DILocation(line: 472, column: 6, scope: !5634)
!5638 = !DILocation(line: 471, column: 45, scope: !5634)
!5639 = !DILocation(line: 471, column: 43, scope: !5634)
!5640 = !DILocation(line: 471, column: 4, scope: !5634)
!5641 = distinct !{!5641, !5635, !5642}
!5642 = !DILocation(line: 472, column: 42, scope: !5627)
!5643 = !DILocation(line: 474, column: 2, scope: !5572)
!5644 = !DILocation(line: 477, column: 2, scope: !5572)
!5645 = !DILocation(line: 477, column: 5, scope: !5572)
!5646 = !DILocation(line: 477, column: 10, scope: !5572)
!5647 = !DILocation(line: 478, column: 53, scope: !5572)
!5648 = !DILocation(line: 478, column: 57, scope: !5572)
!5649 = !DILocation(line: 478, column: 37, scope: !5572)
!5650 = !DILocation(line: 478, column: 2, scope: !5572)
!5651 = !DILocation(line: 478, column: 5, scope: !5572)
!5652 = !DILocation(line: 478, column: 7, scope: !5572)
!5653 = !DILocation(line: 478, column: 22, scope: !5572)
!5654 = !DILocation(line: 478, column: 35, scope: !5572)
!5655 = !DILocation(line: 479, column: 56, scope: !5572)
!5656 = !DILocation(line: 479, column: 60, scope: !5572)
!5657 = !DILocation(line: 479, column: 36, scope: !5572)
!5658 = !DILocation(line: 479, column: 2, scope: !5572)
!5659 = !DILocation(line: 479, column: 5, scope: !5572)
!5660 = !DILocation(line: 479, column: 7, scope: !5572)
!5661 = !DILocation(line: 479, column: 22, scope: !5572)
!5662 = !DILocation(line: 479, column: 34, scope: !5572)
!5663 = !DILocation(line: 480, column: 2, scope: !5572)
!5664 = !DILocation(line: 483, column: 2, scope: !5572)
!5665 = !DILocation(line: 484, column: 5, scope: !5572)
!5666 = !DILocation(line: 486, column: 68, scope: !5522)
!5667 = !DILocation(line: 486, column: 49, scope: !5522)
!5668 = !DILocation(line: 486, column: 21, scope: !5522)
!5669 = !DILocation(line: 486, column: 3, scope: !5522)
!5670 = !DILocation(line: 486, column: 6, scope: !5522)
!5671 = !DILocation(line: 486, column: 19, scope: !5522)
!5672 = !DILocation(line: 488, column: 10, scope: !5522)
!5673 = !DILocation(line: 488, column: 3, scope: !5522)
!5674 = !DILocation(line: 489, column: 1, scope: !5522)
!5675 = distinct !DISubprogram(name: "VEC_eh_region_base_replace", scope: !330, file: !330, line: 184, type: !5676, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5676 = !DISubroutineType(types: !5677)
!5677 = !{!2447, !5678, !7, !2447}
!5678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!5679 = !DILocalVariable(name: "vec_", arg: 1, scope: !5675, file: !330, line: 184, type: !5678)
!5680 = !DILocation(line: 184, column: 1, scope: !5675)
!5681 = !DILocalVariable(name: "ix_", arg: 2, scope: !5675, file: !330, line: 184, type: !7)
!5682 = !DILocalVariable(name: "obj_", arg: 3, scope: !5675, file: !330, line: 184, type: !2447)
!5683 = !DILocalVariable(name: "old_obj_", scope: !5675, file: !330, line: 184, type: !2447)
!5684 = distinct !DISubprogram(name: "VEC_eh_landing_pad_gc_safe_grow", scope: !330, file: !330, line: 189, type: !5685, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5685 = !DISubroutineType(types: !5686)
!5686 = !{null, !5687, !1784}
!5687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2509, size: 64)
!5688 = !DILocalVariable(name: "vec_", arg: 1, scope: !5684, file: !330, line: 189, type: !5687)
!5689 = !DILocation(line: 189, column: 1, scope: !5684)
!5690 = !DILocalVariable(name: "size_", arg: 2, scope: !5684, file: !330, line: 189, type: !1784)
!5691 = !DILocation(line: 0, scope: !5684)
!5692 = distinct !DISubprogram(name: "input_eh_lp", scope: !3, file: !3, line: 496, type: !5693, scopeLine: 497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5693 = !DISubroutineType(types: !5694)
!5694 = !{!2521, !3647, !3116, !1784}
!5695 = !DILocalVariable(name: "ib", arg: 1, scope: !5692, file: !3, line: 496, type: !3647)
!5696 = !DILocation(line: 496, column: 38, scope: !5692)
!5697 = !DILocalVariable(name: "data_in", arg: 2, scope: !5692, file: !3, line: 496, type: !3116)
!5698 = !DILocation(line: 496, column: 58, scope: !5692)
!5699 = !DILocalVariable(name: "ix", arg: 3, scope: !5692, file: !3, line: 496, type: !1784)
!5700 = !DILocation(line: 496, column: 71, scope: !5692)
!5701 = !DILocalVariable(name: "tag", scope: !5692, file: !3, line: 498, type: !616)
!5702 = !DILocation(line: 498, column: 17, scope: !5692)
!5703 = !DILocalVariable(name: "lp", scope: !5692, file: !3, line: 499, type: !2521)
!5704 = !DILocation(line: 499, column: 18, scope: !5692)
!5705 = !DILocation(line: 502, column: 29, scope: !5692)
!5706 = !DILocation(line: 502, column: 9, scope: !5692)
!5707 = !DILocation(line: 502, column: 7, scope: !5692)
!5708 = !DILocation(line: 503, column: 7, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5692, file: !3, line: 503, column: 7)
!5710 = !DILocation(line: 503, column: 11, scope: !5709)
!5711 = !DILocation(line: 503, column: 7, scope: !5692)
!5712 = !DILocation(line: 504, column: 5, scope: !5709)
!5713 = !DILocation(line: 506, column: 24, scope: !5692)
!5714 = !DILocation(line: 506, column: 3, scope: !5692)
!5715 = !DILocation(line: 508, column: 8, scope: !5692)
!5716 = !DILocation(line: 508, column: 6, scope: !5692)
!5717 = !DILocation(line: 509, column: 34, scope: !5692)
!5718 = !DILocation(line: 509, column: 15, scope: !5692)
!5719 = !DILocation(line: 509, column: 3, scope: !5692)
!5720 = !DILocation(line: 509, column: 7, scope: !5692)
!5721 = !DILocation(line: 509, column: 13, scope: !5692)
!5722 = !DILocation(line: 510, column: 3, scope: !5692)
!5723 = !DILocation(line: 511, column: 64, scope: !5692)
!5724 = !DILocation(line: 511, column: 45, scope: !5692)
!5725 = !DILocation(line: 511, column: 17, scope: !5692)
!5726 = !DILocation(line: 511, column: 3, scope: !5692)
!5727 = !DILocation(line: 511, column: 7, scope: !5692)
!5728 = !DILocation(line: 511, column: 15, scope: !5692)
!5729 = !DILocation(line: 512, column: 58, scope: !5692)
!5730 = !DILocation(line: 512, column: 39, scope: !5692)
!5731 = !DILocation(line: 512, column: 16, scope: !5692)
!5732 = !DILocation(line: 512, column: 3, scope: !5692)
!5733 = !DILocation(line: 512, column: 7, scope: !5692)
!5734 = !DILocation(line: 512, column: 14, scope: !5692)
!5735 = !DILocation(line: 513, column: 42, scope: !5692)
!5736 = !DILocation(line: 513, column: 46, scope: !5692)
!5737 = !DILocation(line: 513, column: 26, scope: !5692)
!5738 = !DILocation(line: 513, column: 3, scope: !5692)
!5739 = !DILocation(line: 513, column: 7, scope: !5692)
!5740 = !DILocation(line: 513, column: 24, scope: !5692)
!5741 = !DILocation(line: 515, column: 10, scope: !5692)
!5742 = !DILocation(line: 515, column: 3, scope: !5692)
!5743 = !DILocation(line: 516, column: 1, scope: !5692)
!5744 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_replace", scope: !330, file: !330, line: 188, type: !5745, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5745 = !DISubroutineType(types: !5746)
!5746 = !{!2521, !5747, !7, !2521}
!5747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2514, size: 64)
!5748 = !DILocalVariable(name: "vec_", arg: 1, scope: !5744, file: !330, line: 188, type: !5747)
!5749 = !DILocation(line: 188, column: 1, scope: !5744)
!5750 = !DILocalVariable(name: "ix_", arg: 2, scope: !5744, file: !330, line: 188, type: !7)
!5751 = !DILocalVariable(name: "obj_", arg: 3, scope: !5744, file: !330, line: 188, type: !2521)
!5752 = !DILocalVariable(name: "old_obj_", scope: !5744, file: !330, line: 188, type: !2521)
!5753 = distinct !DISubprogram(name: "VEC_tree_gc_safe_grow", scope: !135, file: !135, line: 183, type: !5754, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5754 = !DISubroutineType(types: !5755)
!5755 = !{null, !5756, !1784}
!5756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2570, size: 64)
!5757 = !DILocalVariable(name: "vec_", arg: 1, scope: !5753, file: !135, line: 183, type: !5756)
!5758 = !DILocation(line: 183, column: 1, scope: !5753)
!5759 = !DILocalVariable(name: "size_", arg: 2, scope: !5753, file: !135, line: 183, type: !1784)
!5760 = !DILocation(line: 0, scope: !5753)
!5761 = distinct !DISubprogram(name: "VEC_tree_base_replace", scope: !135, file: !135, line: 182, type: !5762, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5762 = !DISubroutineType(types: !5763)
!5763 = !{!1688, !5471, !7, !1688}
!5764 = !DILocalVariable(name: "vec_", arg: 1, scope: !5761, file: !135, line: 182, type: !5471)
!5765 = !DILocation(line: 182, column: 1, scope: !5761)
!5766 = !DILocalVariable(name: "ix_", arg: 2, scope: !5761, file: !135, line: 182, type: !7)
!5767 = !DILocalVariable(name: "obj_", arg: 3, scope: !5761, file: !135, line: 182, type: !1688)
!5768 = !DILocalVariable(name: "old_obj_", scope: !5761, file: !135, line: 182, type: !1688)
!5769 = distinct !DISubprogram(name: "VEC_uchar_gc_safe_grow", scope: !2588, file: !2588, line: 29, type: !5770, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5770 = !DISubroutineType(types: !5771)
!5771 = !{null, !5772, !1784}
!5772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2586, size: 64)
!5773 = !DILocalVariable(name: "vec_", arg: 1, scope: !5769, file: !2588, line: 29, type: !5772)
!5774 = !DILocation(line: 29, column: 1, scope: !5769)
!5775 = !DILocalVariable(name: "size_", arg: 2, scope: !5769, file: !2588, line: 29, type: !1784)
!5776 = !DILocation(line: 0, scope: !5769)
!5777 = distinct !DISubprogram(name: "VEC_uchar_base_replace", scope: !2588, file: !2588, line: 27, type: !5778, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5778 = !DISubroutineType(types: !5779)
!5779 = !{!2599, !5780, !7, !2599}
!5780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2592, size: 64)
!5781 = !DILocalVariable(name: "vec_", arg: 1, scope: !5777, file: !2588, line: 27, type: !5780)
!5782 = !DILocation(line: 27, column: 1, scope: !5777)
!5783 = !DILocalVariable(name: "ix_", arg: 2, scope: !5777, file: !2588, line: 27, type: !7)
!5784 = !DILocalVariable(name: "obj_", arg: 3, scope: !5777, file: !2588, line: 27, type: !2599)
!5785 = !DILocalVariable(name: "old_obj_", scope: !5777, file: !2588, line: 27, type: !2599)
!5786 = distinct !DISubprogram(name: "fixup_eh_region_pointers", scope: !3, file: !3, line: 525, type: !5787, scopeLine: 526, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5787 = !DISubroutineType(types: !5788)
!5788 = !{null, !2439, !1743}
!5789 = !DILocalVariable(name: "fn", arg: 1, scope: !5786, file: !3, line: 525, type: !2439)
!5790 = !DILocation(line: 525, column: 44, scope: !5786)
!5791 = !DILocalVariable(name: "root_region", arg: 2, scope: !5786, file: !3, line: 525, type: !1743)
!5792 = !DILocation(line: 525, column: 62, scope: !5786)
!5793 = !DILocalVariable(name: "i", scope: !5786, file: !3, line: 527, type: !7)
!5794 = !DILocation(line: 527, column: 12, scope: !5786)
!5795 = !DILocalVariable(name: "eh_array", scope: !5786, file: !3, line: 528, type: !2496)
!5796 = !DILocation(line: 528, column: 22, scope: !5786)
!5797 = !DILocation(line: 528, column: 33, scope: !5786)
!5798 = !DILocation(line: 528, column: 37, scope: !5786)
!5799 = !DILocation(line: 528, column: 41, scope: !5786)
!5800 = !DILocalVariable(name: "lp_array", scope: !5786, file: !3, line: 529, type: !2509)
!5801 = !DILocation(line: 529, column: 27, scope: !5786)
!5802 = !DILocation(line: 529, column: 38, scope: !5786)
!5803 = !DILocation(line: 529, column: 42, scope: !5786)
!5804 = !DILocation(line: 529, column: 46, scope: !5786)
!5805 = !DILocalVariable(name: "r", scope: !5786, file: !3, line: 530, type: !2447)
!5806 = !DILocation(line: 530, column: 13, scope: !5786)
!5807 = !DILocalVariable(name: "lp", scope: !5786, file: !3, line: 531, type: !2521)
!5808 = !DILocation(line: 531, column: 18, scope: !5786)
!5809 = !DILocation(line: 533, column: 3, scope: !5786)
!5810 = !DILocation(line: 535, column: 3, scope: !5786)
!5811 = !DILocation(line: 536, column: 25, scope: !5786)
!5812 = !DILocation(line: 536, column: 3, scope: !5786)
!5813 = !DILocation(line: 536, column: 7, scope: !5786)
!5814 = !DILocation(line: 536, column: 11, scope: !5786)
!5815 = !DILocation(line: 536, column: 23, scope: !5786)
!5816 = !DILocation(line: 545, column: 10, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 545, column: 3)
!5818 = !DILocation(line: 545, column: 8, scope: !5817)
!5819 = !DILocation(line: 545, column: 15, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5817, file: !3, line: 545, column: 3)
!5821 = !DILocation(line: 545, column: 3, scope: !5817)
!5822 = !DILocation(line: 548, column: 11, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5824, file: !3, line: 548, column: 11)
!5824 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 546, column: 5)
!5825 = !DILocation(line: 548, column: 13, scope: !5823)
!5826 = !DILocation(line: 548, column: 11, scope: !5824)
!5827 = !DILocation(line: 549, column: 2, scope: !5823)
!5828 = !DILocation(line: 551, column: 7, scope: !5824)
!5829 = !DILocation(line: 552, column: 7, scope: !5824)
!5830 = !DILocation(line: 553, column: 7, scope: !5824)
!5831 = !DILocation(line: 554, column: 7, scope: !5824)
!5832 = !DILocation(line: 555, column: 7, scope: !5824)
!5833 = !DILocation(line: 556, column: 5, scope: !5824)
!5834 = !DILocation(line: 545, column: 57, scope: !5820)
!5835 = !DILocation(line: 545, column: 3, scope: !5820)
!5836 = distinct !{!5836, !5821, !5837}
!5837 = !DILocation(line: 556, column: 5, scope: !5817)
!5838 = !DILocation(line: 560, column: 10, scope: !5839)
!5839 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 560, column: 3)
!5840 = !DILocation(line: 560, column: 8, scope: !5839)
!5841 = !DILocation(line: 560, column: 15, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 560, column: 3)
!5843 = !DILocation(line: 560, column: 3, scope: !5839)
!5844 = !DILocation(line: 563, column: 11, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5846, file: !3, line: 563, column: 11)
!5846 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 561, column: 5)
!5847 = !DILocation(line: 563, column: 14, scope: !5845)
!5848 = !DILocation(line: 563, column: 11, scope: !5846)
!5849 = !DILocation(line: 564, column: 2, scope: !5845)
!5850 = !DILocation(line: 566, column: 7, scope: !5846)
!5851 = !DILocation(line: 567, column: 7, scope: !5846)
!5852 = !DILocation(line: 568, column: 7, scope: !5846)
!5853 = !DILocation(line: 569, column: 5, scope: !5846)
!5854 = !DILocation(line: 560, column: 63, scope: !5842)
!5855 = !DILocation(line: 560, column: 3, scope: !5842)
!5856 = distinct !{!5856, !5843, !5857}
!5857 = !DILocation(line: 569, column: 5, scope: !5839)
!5858 = !DILocation(line: 573, column: 1, scope: !5786)
!5859 = distinct !DISubprogram(name: "VEC_eh_region_base_length", scope: !330, file: !330, line: 184, type: !5860, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5860 = !DISubroutineType(types: !5861)
!5861 = !{!7, !5862}
!5862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5863, size: 64)
!5863 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2501)
!5864 = !DILocalVariable(name: "vec_", arg: 1, scope: !5859, file: !330, line: 184, type: !5862)
!5865 = !DILocation(line: 184, column: 1, scope: !5859)
!5866 = distinct !DISubprogram(name: "VEC_eh_region_gc_reserve_exact", scope: !330, file: !330, line: 185, type: !5867, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5867 = !DISubroutineType(types: !5868)
!5868 = !{!1784, !5517, !1784}
!5869 = !DILocalVariable(name: "vec_", arg: 1, scope: !5866, file: !330, line: 185, type: !5517)
!5870 = !DILocation(line: 185, column: 1, scope: !5866)
!5871 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5866, file: !330, line: 185, type: !1784)
!5872 = !DILocalVariable(name: "extend", scope: !5866, file: !330, line: 185, type: !1784)
!5873 = !DILocation(line: 185, column: 1, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5866, file: !330, line: 185, column: 1)
!5875 = distinct !DISubprogram(name: "VEC_eh_region_base_space", scope: !330, file: !330, line: 184, type: !5876, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5876 = !DISubroutineType(types: !5877)
!5877 = !{!1784, !5678, !1784}
!5878 = !DILocalVariable(name: "vec_", arg: 1, scope: !5875, file: !330, line: 184, type: !5678)
!5879 = !DILocation(line: 184, column: 1, scope: !5875)
!5880 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5875, file: !330, line: 184, type: !1784)
!5881 = distinct !DISubprogram(name: "lto_input_eh_catch_list", scope: !3, file: !3, line: 379, type: !5882, scopeLine: 381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5882 = !DISubroutineType(types: !5883)
!5883 = !{!2463, !3647, !3116, !5884}
!5884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5885, size: 64)
!5885 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_catch", file: !330, line: 181, baseType: !2463)
!5886 = !DILocalVariable(name: "ib", arg: 1, scope: !5881, file: !3, line: 379, type: !3647)
!5887 = !DILocation(line: 379, column: 50, scope: !5881)
!5888 = !DILocalVariable(name: "data_in", arg: 2, scope: !5881, file: !3, line: 379, type: !3116)
!5889 = !DILocation(line: 379, column: 70, scope: !5881)
!5890 = !DILocalVariable(name: "last_p", arg: 3, scope: !5881, file: !3, line: 380, type: !5884)
!5891 = !DILocation(line: 380, column: 15, scope: !5881)
!5892 = !DILocalVariable(name: "first", scope: !5881, file: !3, line: 382, type: !5885)
!5893 = !DILocation(line: 382, column: 12, scope: !5881)
!5894 = !DILocalVariable(name: "tag", scope: !5881, file: !3, line: 383, type: !616)
!5895 = !DILocation(line: 383, column: 17, scope: !5881)
!5896 = !DILocation(line: 385, column: 19, scope: !5881)
!5897 = !DILocation(line: 385, column: 4, scope: !5881)
!5898 = !DILocation(line: 385, column: 11, scope: !5881)
!5899 = !DILocation(line: 386, column: 29, scope: !5881)
!5900 = !DILocation(line: 386, column: 9, scope: !5881)
!5901 = !DILocation(line: 386, column: 7, scope: !5881)
!5902 = !DILocation(line: 387, column: 3, scope: !5881)
!5903 = !DILocation(line: 387, column: 10, scope: !5881)
!5904 = !DILocalVariable(name: "list", scope: !5905, file: !3, line: 389, type: !1688)
!5905 = distinct !DILexicalBlock(scope: !5881, file: !3, line: 388, column: 5)
!5906 = !DILocation(line: 389, column: 12, scope: !5905)
!5907 = !DILocalVariable(name: "n", scope: !5905, file: !3, line: 390, type: !5885)
!5908 = !DILocation(line: 390, column: 16, scope: !5905)
!5909 = !DILocation(line: 392, column: 28, scope: !5905)
!5910 = !DILocation(line: 392, column: 7, scope: !5905)
!5911 = !DILocation(line: 395, column: 11, scope: !5905)
!5912 = !DILocation(line: 395, column: 9, scope: !5905)
!5913 = !DILocation(line: 396, column: 38, scope: !5905)
!5914 = !DILocation(line: 396, column: 42, scope: !5905)
!5915 = !DILocation(line: 396, column: 22, scope: !5905)
!5916 = !DILocation(line: 396, column: 7, scope: !5905)
!5917 = !DILocation(line: 396, column: 10, scope: !5905)
!5918 = !DILocation(line: 396, column: 20, scope: !5905)
!5919 = !DILocation(line: 397, column: 40, scope: !5905)
!5920 = !DILocation(line: 397, column: 44, scope: !5905)
!5921 = !DILocation(line: 397, column: 24, scope: !5905)
!5922 = !DILocation(line: 397, column: 7, scope: !5905)
!5923 = !DILocation(line: 397, column: 10, scope: !5905)
!5924 = !DILocation(line: 397, column: 22, scope: !5905)
!5925 = !DILocation(line: 398, column: 34, scope: !5905)
!5926 = !DILocation(line: 398, column: 38, scope: !5905)
!5927 = !DILocation(line: 398, column: 18, scope: !5905)
!5928 = !DILocation(line: 398, column: 7, scope: !5905)
!5929 = !DILocation(line: 398, column: 10, scope: !5905)
!5930 = !DILocation(line: 398, column: 16, scope: !5905)
!5931 = !DILocation(line: 401, column: 19, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 401, column: 7)
!5933 = !DILocation(line: 401, column: 22, scope: !5932)
!5934 = !DILocation(line: 401, column: 17, scope: !5932)
!5935 = !DILocation(line: 401, column: 12, scope: !5932)
!5936 = !DILocation(line: 401, column: 35, scope: !5937)
!5937 = distinct !DILexicalBlock(scope: !5932, file: !3, line: 401, column: 7)
!5938 = !DILocation(line: 401, column: 7, scope: !5932)
!5939 = !DILocation(line: 402, column: 24, scope: !5937)
!5940 = !DILocation(line: 402, column: 2, scope: !5937)
!5941 = !DILocation(line: 401, column: 48, scope: !5937)
!5942 = !DILocation(line: 401, column: 46, scope: !5937)
!5943 = !DILocation(line: 401, column: 7, scope: !5937)
!5944 = distinct !{!5944, !5938, !5945}
!5945 = !DILocation(line: 402, column: 41, scope: !5932)
!5946 = !DILocation(line: 405, column: 12, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 405, column: 11)
!5948 = !DILocation(line: 405, column: 11, scope: !5947)
!5949 = !DILocation(line: 405, column: 11, scope: !5905)
!5950 = !DILocation(line: 406, column: 26, scope: !5947)
!5951 = !DILocation(line: 406, column: 4, scope: !5947)
!5952 = !DILocation(line: 406, column: 3, scope: !5947)
!5953 = !DILocation(line: 406, column: 13, scope: !5947)
!5954 = !DILocation(line: 406, column: 24, scope: !5947)
!5955 = !DILocation(line: 406, column: 2, scope: !5947)
!5956 = !DILocation(line: 407, column: 24, scope: !5905)
!5957 = !DILocation(line: 407, column: 23, scope: !5905)
!5958 = !DILocation(line: 407, column: 7, scope: !5905)
!5959 = !DILocation(line: 407, column: 10, scope: !5905)
!5960 = !DILocation(line: 407, column: 21, scope: !5905)
!5961 = !DILocation(line: 408, column: 17, scope: !5905)
!5962 = !DILocation(line: 408, column: 8, scope: !5905)
!5963 = !DILocation(line: 408, column: 15, scope: !5905)
!5964 = !DILocation(line: 411, column: 11, scope: !5965)
!5965 = distinct !DILexicalBlock(scope: !5905, file: !3, line: 411, column: 11)
!5966 = !DILocation(line: 411, column: 17, scope: !5965)
!5967 = !DILocation(line: 411, column: 11, scope: !5905)
!5968 = !DILocation(line: 412, column: 10, scope: !5965)
!5969 = !DILocation(line: 412, column: 8, scope: !5965)
!5970 = !DILocation(line: 412, column: 2, scope: !5965)
!5971 = !DILocation(line: 414, column: 33, scope: !5905)
!5972 = !DILocation(line: 414, column: 13, scope: !5905)
!5973 = !DILocation(line: 414, column: 11, scope: !5905)
!5974 = distinct !{!5974, !5902, !5975}
!5975 = !DILocation(line: 415, column: 5, scope: !5881)
!5976 = !DILocation(line: 417, column: 10, scope: !5881)
!5977 = !DILocation(line: 417, column: 3, scope: !5881)
!5978 = distinct !DISubprogram(name: "lto_input_location", scope: !3, file: !3, line: 275, type: !5979, scopeLine: 276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!5979 = !DISubroutineType(types: !5980)
!5980 = !{!1815, !3647, !3116}
!5981 = !DILocalVariable(name: "ib", arg: 1, scope: !5978, file: !3, line: 275, type: !3647)
!5982 = !DILocation(line: 275, column: 45, scope: !5978)
!5983 = !DILocalVariable(name: "data_in", arg: 2, scope: !5978, file: !3, line: 275, type: !3116)
!5984 = !DILocation(line: 275, column: 65, scope: !5978)
!5985 = !DILocalVariable(name: "xloc", scope: !5978, file: !3, line: 277, type: !5986)
!5986 = !DIDerivedType(tag: DW_TAG_typedef, name: "expanded_location", file: !1816, line: 52, baseType: !5987)
!5987 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1816, line: 40, size: 192, elements: !5988)
!5988 = !{!5989, !5990, !5991, !5992}
!5989 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !5987, file: !1816, line: 43, baseType: !1890, size: 64)
!5990 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !5987, file: !1816, line: 46, baseType: !1784, size: 32, offset: 64)
!5991 = !DIDerivedType(tag: DW_TAG_member, name: "column", scope: !5987, file: !1816, line: 48, baseType: !1784, size: 32, offset: 96)
!5992 = !DIDerivedType(tag: DW_TAG_member, name: "sysp", scope: !5987, file: !1816, line: 51, baseType: !1807, size: 8, offset: 128)
!5993 = !DILocation(line: 277, column: 21, scope: !5978)
!5994 = !DILocation(line: 279, column: 29, scope: !5978)
!5995 = !DILocation(line: 279, column: 38, scope: !5978)
!5996 = !DILocation(line: 279, column: 15, scope: !5978)
!5997 = !DILocation(line: 279, column: 8, scope: !5978)
!5998 = !DILocation(line: 279, column: 13, scope: !5978)
!5999 = !DILocation(line: 280, column: 12, scope: !6000)
!6000 = distinct !DILexicalBlock(scope: !5978, file: !3, line: 280, column: 7)
!6001 = !DILocation(line: 280, column: 17, scope: !6000)
!6002 = !DILocation(line: 280, column: 7, scope: !5978)
!6003 = !DILocation(line: 281, column: 5, scope: !6000)
!6004 = !DILocation(line: 283, column: 37, scope: !5978)
!6005 = !DILocation(line: 283, column: 15, scope: !5978)
!6006 = !DILocation(line: 283, column: 8, scope: !5978)
!6007 = !DILocation(line: 283, column: 13, scope: !5978)
!6008 = !DILocation(line: 284, column: 34, scope: !5978)
!6009 = !DILocation(line: 284, column: 15, scope: !5978)
!6010 = !DILocation(line: 284, column: 8, scope: !5978)
!6011 = !DILocation(line: 284, column: 13, scope: !5978)
!6012 = !DILocation(line: 285, column: 36, scope: !5978)
!6013 = !DILocation(line: 285, column: 17, scope: !5978)
!6014 = !DILocation(line: 285, column: 8, scope: !5978)
!6015 = !DILocation(line: 285, column: 15, scope: !5978)
!6016 = !DILocation(line: 286, column: 34, scope: !5978)
!6017 = !DILocation(line: 286, column: 15, scope: !5978)
!6018 = !DILocation(line: 286, column: 8, scope: !5978)
!6019 = !DILocation(line: 286, column: 13, scope: !5978)
!6020 = !DILocation(line: 288, column: 7, scope: !6021)
!6021 = distinct !DILexicalBlock(scope: !5978, file: !3, line: 288, column: 7)
!6022 = !DILocation(line: 288, column: 16, scope: !6021)
!6023 = !DILocation(line: 288, column: 37, scope: !6021)
!6024 = !DILocation(line: 288, column: 29, scope: !6021)
!6025 = !DILocation(line: 288, column: 7, scope: !5978)
!6026 = !DILocation(line: 290, column: 11, scope: !6027)
!6027 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 290, column: 11)
!6028 = distinct !DILexicalBlock(scope: !6021, file: !3, line: 289, column: 5)
!6029 = !DILocation(line: 290, column: 20, scope: !6027)
!6030 = !DILocation(line: 290, column: 11, scope: !6028)
!6031 = !DILocation(line: 291, column: 15, scope: !6027)
!6032 = !DILocation(line: 291, column: 2, scope: !6027)
!6033 = !DILocation(line: 293, column: 20, scope: !6028)
!6034 = !DILocation(line: 293, column: 47, scope: !6028)
!6035 = !DILocation(line: 293, column: 42, scope: !6028)
!6036 = !DILocation(line: 293, column: 58, scope: !6028)
!6037 = !DILocation(line: 293, column: 69, scope: !6028)
!6038 = !DILocation(line: 293, column: 7, scope: !6028)
!6039 = !DILocation(line: 294, column: 5, scope: !6028)
!6040 = !DILocation(line: 295, column: 12, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !6021, file: !3, line: 295, column: 12)
!6042 = !DILocation(line: 295, column: 21, scope: !6041)
!6043 = !DILocation(line: 295, column: 42, scope: !6041)
!6044 = !DILocation(line: 295, column: 34, scope: !6041)
!6045 = !DILocation(line: 295, column: 12, scope: !6021)
!6046 = !DILocation(line: 296, column: 25, scope: !6041)
!6047 = !DILocation(line: 296, column: 42, scope: !6041)
!6048 = !DILocation(line: 296, column: 53, scope: !6041)
!6049 = !DILocation(line: 296, column: 5, scope: !6041)
!6050 = !DILocation(line: 298, column: 32, scope: !5978)
!6051 = !DILocation(line: 298, column: 3, scope: !5978)
!6052 = !DILocation(line: 298, column: 12, scope: !5978)
!6053 = !DILocation(line: 298, column: 25, scope: !5978)
!6054 = !DILocation(line: 299, column: 32, scope: !5978)
!6055 = !DILocation(line: 299, column: 3, scope: !5978)
!6056 = !DILocation(line: 299, column: 12, scope: !5978)
!6057 = !DILocation(line: 299, column: 25, scope: !5978)
!6058 = !DILocation(line: 300, column: 31, scope: !5978)
!6059 = !DILocation(line: 300, column: 3, scope: !5978)
!6060 = !DILocation(line: 300, column: 12, scope: !5978)
!6061 = !DILocation(line: 300, column: 24, scope: !5978)
!6062 = !DILocation(line: 302, column: 39, scope: !5978)
!6063 = !DILocation(line: 302, column: 56, scope: !5978)
!6064 = !DILocation(line: 302, column: 10, scope: !5978)
!6065 = !DILocation(line: 302, column: 3, scope: !5978)
!6066 = !DILocation(line: 303, column: 1, scope: !5978)
!6067 = distinct !DISubprogram(name: "input_string", scope: !3, file: !3, line: 198, type: !6068, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6068 = !DISubroutineType(types: !6069)
!6069 = !{!1890, !3116, !3647}
!6070 = !DILocalVariable(name: "data_in", arg: 1, scope: !6067, file: !3, line: 198, type: !3116)
!6071 = !DILocation(line: 198, column: 31, scope: !6067)
!6072 = !DILocalVariable(name: "ib", arg: 2, scope: !6067, file: !3, line: 198, type: !3647)
!6073 = !DILocation(line: 198, column: 64, scope: !6067)
!6074 = !DILocalVariable(name: "len", scope: !6067, file: !3, line: 200, type: !7)
!6075 = !DILocation(line: 200, column: 16, scope: !6067)
!6076 = !DILocalVariable(name: "ptr", scope: !6067, file: !3, line: 201, type: !1890)
!6077 = !DILocation(line: 201, column: 15, scope: !6067)
!6078 = !DILocalVariable(name: "is_null", scope: !6067, file: !3, line: 202, type: !7)
!6079 = !DILocation(line: 202, column: 16, scope: !6067)
!6080 = !DILocation(line: 204, column: 32, scope: !6067)
!6081 = !DILocation(line: 204, column: 13, scope: !6067)
!6082 = !DILocation(line: 204, column: 11, scope: !6067)
!6083 = !DILocation(line: 205, column: 7, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 205, column: 7)
!6085 = !DILocation(line: 205, column: 7, scope: !6067)
!6086 = !DILocation(line: 206, column: 5, scope: !6084)
!6087 = !DILocation(line: 208, column: 32, scope: !6067)
!6088 = !DILocation(line: 208, column: 41, scope: !6067)
!6089 = !DILocation(line: 208, column: 9, scope: !6067)
!6090 = !DILocation(line: 208, column: 7, scope: !6067)
!6091 = !DILocation(line: 209, column: 7, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6067, file: !3, line: 209, column: 7)
!6093 = !DILocation(line: 209, column: 11, scope: !6092)
!6094 = !DILocation(line: 209, column: 15, scope: !6092)
!6095 = !DILocation(line: 209, column: 20, scope: !6092)
!6096 = !DILocation(line: 209, column: 7, scope: !6067)
!6097 = !DILocation(line: 210, column: 5, scope: !6092)
!6098 = !DILocation(line: 212, column: 10, scope: !6067)
!6099 = !DILocation(line: 212, column: 3, scope: !6067)
!6100 = !DILocation(line: 213, column: 1, scope: !6067)
!6101 = distinct !DISubprogram(name: "canon_file_name", scope: !3, file: !3, line: 230, type: !6102, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6102 = !DISubroutineType(types: !6103)
!6103 = !{!1890, !1890}
!6104 = !DILocalVariable(name: "string", arg: 1, scope: !6101, file: !3, line: 230, type: !1890)
!6105 = !DILocation(line: 230, column: 30, scope: !6101)
!6106 = !DILocalVariable(name: "slot", scope: !6101, file: !3, line: 232, type: !2544)
!6107 = !DILocation(line: 232, column: 10, scope: !6101)
!6108 = !DILocalVariable(name: "s_slot", scope: !6101, file: !3, line: 233, type: !3451)
!6109 = !DILocation(line: 233, column: 22, scope: !6101)
!6110 = !DILocation(line: 234, column: 14, scope: !6101)
!6111 = !DILocation(line: 234, column: 10, scope: !6101)
!6112 = !DILocation(line: 234, column: 12, scope: !6101)
!6113 = !DILocation(line: 236, column: 26, scope: !6101)
!6114 = !DILocation(line: 236, column: 48, scope: !6101)
!6115 = !DILocation(line: 236, column: 10, scope: !6101)
!6116 = !DILocation(line: 236, column: 8, scope: !6101)
!6117 = !DILocation(line: 237, column: 8, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !6101, file: !3, line: 237, column: 7)
!6119 = !DILocation(line: 237, column: 7, scope: !6118)
!6120 = !DILocation(line: 237, column: 13, scope: !6118)
!6121 = !DILocation(line: 237, column: 7, scope: !6101)
!6122 = !DILocalVariable(name: "len", scope: !6123, file: !3, line: 239, type: !2163)
!6123 = distinct !DILexicalBlock(scope: !6118, file: !3, line: 238, column: 5)
!6124 = !DILocation(line: 239, column: 14, scope: !6123)
!6125 = !DILocalVariable(name: "saved_string", scope: !6123, file: !3, line: 240, type: !1955)
!6126 = !DILocation(line: 240, column: 13, scope: !6123)
!6127 = !DILocalVariable(name: "new_slot", scope: !6123, file: !3, line: 241, type: !3450)
!6128 = !DILocation(line: 241, column: 27, scope: !6123)
!6129 = !DILocation(line: 243, column: 21, scope: !6123)
!6130 = !DILocation(line: 243, column: 13, scope: !6123)
!6131 = !DILocation(line: 243, column: 11, scope: !6123)
!6132 = !DILocation(line: 244, column: 40, scope: !6123)
!6133 = !DILocation(line: 244, column: 44, scope: !6123)
!6134 = !DILocation(line: 244, column: 31, scope: !6123)
!6135 = !DILocation(line: 244, column: 20, scope: !6123)
!6136 = !DILocation(line: 245, column: 18, scope: !6123)
!6137 = !DILocation(line: 245, column: 16, scope: !6123)
!6138 = !DILocation(line: 246, column: 15, scope: !6123)
!6139 = !DILocation(line: 246, column: 29, scope: !6123)
!6140 = !DILocation(line: 246, column: 7, scope: !6123)
!6141 = !DILocation(line: 247, column: 21, scope: !6123)
!6142 = !DILocation(line: 247, column: 7, scope: !6123)
!6143 = !DILocation(line: 247, column: 17, scope: !6123)
!6144 = !DILocation(line: 247, column: 19, scope: !6123)
!6145 = !DILocation(line: 248, column: 15, scope: !6123)
!6146 = !DILocation(line: 248, column: 8, scope: !6123)
!6147 = !DILocation(line: 248, column: 13, scope: !6123)
!6148 = !DILocation(line: 249, column: 14, scope: !6123)
!6149 = !DILocation(line: 249, column: 7, scope: !6123)
!6150 = !DILocalVariable(name: "old_slot", scope: !6151, file: !3, line: 253, type: !3450)
!6151 = distinct !DILexicalBlock(scope: !6118, file: !3, line: 252, column: 5)
!6152 = !DILocation(line: 253, column: 27, scope: !6151)
!6153 = !DILocation(line: 253, column: 62, scope: !6151)
!6154 = !DILocation(line: 253, column: 61, scope: !6151)
!6155 = !DILocation(line: 253, column: 38, scope: !6151)
!6156 = !DILocation(line: 254, column: 14, scope: !6151)
!6157 = !DILocation(line: 254, column: 24, scope: !6151)
!6158 = !DILocation(line: 254, column: 7, scope: !6151)
!6159 = !DILocation(line: 256, column: 1, scope: !6101)
!6160 = distinct !DISubprogram(name: "input_string_internal", scope: !3, file: !3, line: 136, type: !6161, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6161 = !DISubroutineType(types: !6162)
!6162 = !{!1890, !3116, !3647, !6163}
!6163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!6164 = !DILocalVariable(name: "data_in", arg: 1, scope: !6160, file: !3, line: 136, type: !3116)
!6165 = !DILocation(line: 136, column: 40, scope: !6160)
!6166 = !DILocalVariable(name: "ib", arg: 2, scope: !6160, file: !3, line: 136, type: !3647)
!6167 = !DILocation(line: 136, column: 73, scope: !6160)
!6168 = !DILocalVariable(name: "rlen", arg: 3, scope: !6160, file: !3, line: 137, type: !6163)
!6169 = !DILocation(line: 137, column: 24, scope: !6160)
!6170 = !DILocalVariable(name: "str_tab", scope: !6160, file: !3, line: 139, type: !3537)
!6171 = !DILocation(line: 139, column: 26, scope: !6160)
!6172 = !DILocalVariable(name: "len", scope: !6160, file: !3, line: 140, type: !7)
!6173 = !DILocation(line: 140, column: 16, scope: !6160)
!6174 = !DILocalVariable(name: "loc", scope: !6160, file: !3, line: 141, type: !7)
!6175 = !DILocation(line: 141, column: 16, scope: !6160)
!6176 = !DILocalVariable(name: "result", scope: !6160, file: !3, line: 142, type: !1890)
!6177 = !DILocation(line: 142, column: 15, scope: !6160)
!6178 = !DILocation(line: 144, column: 28, scope: !6160)
!6179 = !DILocation(line: 144, column: 9, scope: !6160)
!6180 = !DILocation(line: 144, column: 7, scope: !6160)
!6181 = !DILocation(line: 145, column: 3, scope: !6160)
!6182 = !DILocation(line: 145, column: 3, scope: !6183)
!6183 = distinct !DILexicalBlock(scope: !6160, file: !3, line: 145, column: 3)
!6184 = !DILocation(line: 146, column: 9, scope: !6160)
!6185 = !DILocation(line: 146, column: 7, scope: !6160)
!6186 = !DILocation(line: 147, column: 11, scope: !6160)
!6187 = !DILocation(line: 147, column: 4, scope: !6160)
!6188 = !DILocation(line: 147, column: 9, scope: !6160)
!6189 = !DILocation(line: 149, column: 15, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6160, file: !3, line: 149, column: 7)
!6191 = !DILocation(line: 149, column: 19, scope: !6190)
!6192 = !DILocation(line: 149, column: 17, scope: !6190)
!6193 = !DILocation(line: 149, column: 25, scope: !6190)
!6194 = !DILocation(line: 149, column: 34, scope: !6190)
!6195 = !DILocation(line: 149, column: 23, scope: !6190)
!6196 = !DILocation(line: 149, column: 7, scope: !6160)
!6197 = !DILocation(line: 150, column: 5, scope: !6190)
!6198 = !DILocation(line: 152, column: 27, scope: !6160)
!6199 = !DILocation(line: 152, column: 36, scope: !6160)
!6200 = !DILocation(line: 152, column: 54, scope: !6160)
!6201 = !DILocation(line: 152, column: 44, scope: !6160)
!6202 = !DILocation(line: 152, column: 10, scope: !6160)
!6203 = !DILocation(line: 154, column: 10, scope: !6160)
!6204 = !DILocation(line: 154, column: 3, scope: !6160)
!6205 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_length", scope: !330, file: !330, line: 188, type: !6206, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6206 = !DISubroutineType(types: !6207)
!6207 = !{!7, !6208}
!6208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6209, size: 64)
!6209 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2514)
!6210 = !DILocalVariable(name: "vec_", arg: 1, scope: !6205, file: !330, line: 188, type: !6208)
!6211 = !DILocation(line: 188, column: 1, scope: !6205)
!6212 = distinct !DISubprogram(name: "VEC_eh_landing_pad_gc_reserve_exact", scope: !330, file: !330, line: 189, type: !6213, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6213 = !DISubroutineType(types: !6214)
!6214 = !{!1784, !5687, !1784}
!6215 = !DILocalVariable(name: "vec_", arg: 1, scope: !6212, file: !330, line: 189, type: !5687)
!6216 = !DILocation(line: 189, column: 1, scope: !6212)
!6217 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6212, file: !330, line: 189, type: !1784)
!6218 = !DILocalVariable(name: "extend", scope: !6212, file: !330, line: 189, type: !1784)
!6219 = !DILocation(line: 189, column: 1, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !6212, file: !330, line: 189, column: 1)
!6221 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_space", scope: !330, file: !330, line: 188, type: !6222, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6222 = !DISubroutineType(types: !6223)
!6223 = !{!1784, !5747, !1784}
!6224 = !DILocalVariable(name: "vec_", arg: 1, scope: !6221, file: !330, line: 188, type: !5747)
!6225 = !DILocation(line: 188, column: 1, scope: !6221)
!6226 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6221, file: !330, line: 188, type: !1784)
!6227 = distinct !DISubprogram(name: "VEC_tree_gc_reserve_exact", scope: !135, file: !135, line: 183, type: !6228, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6228 = !DISubroutineType(types: !6229)
!6229 = !{!1784, !5756, !1784}
!6230 = !DILocalVariable(name: "vec_", arg: 1, scope: !6227, file: !135, line: 183, type: !5756)
!6231 = !DILocation(line: 183, column: 1, scope: !6227)
!6232 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6227, file: !135, line: 183, type: !1784)
!6233 = !DILocalVariable(name: "extend", scope: !6227, file: !135, line: 183, type: !1784)
!6234 = !DILocation(line: 183, column: 1, scope: !6235)
!6235 = distinct !DILexicalBlock(scope: !6227, file: !135, line: 183, column: 1)
!6236 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !6237, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6237 = !DISubroutineType(types: !6238)
!6238 = !{!1784, !5471, !1784}
!6239 = !DILocalVariable(name: "vec_", arg: 1, scope: !6236, file: !135, line: 182, type: !5471)
!6240 = !DILocation(line: 182, column: 1, scope: !6236)
!6241 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6236, file: !135, line: 182, type: !1784)
!6242 = distinct !DISubprogram(name: "VEC_uchar_base_length", scope: !2588, file: !2588, line: 27, type: !6243, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6243 = !DISubroutineType(types: !6244)
!6244 = !{!7, !6245}
!6245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6246, size: 64)
!6246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2592)
!6247 = !DILocalVariable(name: "vec_", arg: 1, scope: !6242, file: !2588, line: 27, type: !6245)
!6248 = !DILocation(line: 27, column: 1, scope: !6242)
!6249 = distinct !DISubprogram(name: "VEC_uchar_gc_reserve_exact", scope: !2588, file: !2588, line: 29, type: !6250, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6250 = !DISubroutineType(types: !6251)
!6251 = !{!1784, !5772, !1784}
!6252 = !DILocalVariable(name: "vec_", arg: 1, scope: !6249, file: !2588, line: 29, type: !5772)
!6253 = !DILocation(line: 29, column: 1, scope: !6249)
!6254 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6249, file: !2588, line: 29, type: !1784)
!6255 = !DILocalVariable(name: "extend", scope: !6249, file: !2588, line: 29, type: !1784)
!6256 = !DILocation(line: 29, column: 1, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6249, file: !2588, line: 29, column: 1)
!6258 = distinct !DISubprogram(name: "VEC_uchar_base_space", scope: !2588, file: !2588, line: 27, type: !6259, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6259 = !DISubroutineType(types: !6260)
!6260 = !{!1784, !5780, !1784}
!6261 = !DILocalVariable(name: "vec_", arg: 1, scope: !6258, file: !2588, line: 27, type: !5780)
!6262 = !DILocation(line: 27, column: 1, scope: !6258)
!6263 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6258, file: !2588, line: 27, type: !1784)
!6264 = distinct !DISubprogram(name: "VEC_eh_region_base_index", scope: !330, file: !330, line: 184, type: !6265, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6265 = !DISubroutineType(types: !6266)
!6266 = !{!2447, !5862, !7}
!6267 = !DILocalVariable(name: "vec_", arg: 1, scope: !6264, file: !330, line: 184, type: !5862)
!6268 = !DILocation(line: 184, column: 1, scope: !6264)
!6269 = !DILocalVariable(name: "ix_", arg: 2, scope: !6264, file: !330, line: 184, type: !7)
!6270 = !DILocation(line: 0, scope: !6264)
!6271 = distinct !DISubprogram(name: "VEC_eh_region_base_iterate", scope: !330, file: !330, line: 184, type: !6272, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6272 = !DISubroutineType(types: !6273)
!6273 = !{!1784, !5862, !7, !6274}
!6274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2447, size: 64)
!6275 = !DILocalVariable(name: "vec_", arg: 1, scope: !6271, file: !330, line: 184, type: !5862)
!6276 = !DILocation(line: 184, column: 1, scope: !6271)
!6277 = !DILocalVariable(name: "ix_", arg: 2, scope: !6271, file: !330, line: 184, type: !7)
!6278 = !DILocalVariable(name: "ptr", arg: 3, scope: !6271, file: !330, line: 184, type: !6274)
!6279 = !DILocation(line: 184, column: 1, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6271, file: !330, line: 184, column: 1)
!6281 = !DILocation(line: 184, column: 1, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6280, file: !330, line: 184, column: 1)
!6283 = !DILocation(line: 184, column: 1, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6280, file: !330, line: 184, column: 1)
!6285 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_index", scope: !330, file: !330, line: 188, type: !6286, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6286 = !DISubroutineType(types: !6287)
!6287 = !{!2521, !6208, !7}
!6288 = !DILocalVariable(name: "vec_", arg: 1, scope: !6285, file: !330, line: 188, type: !6208)
!6289 = !DILocation(line: 188, column: 1, scope: !6285)
!6290 = !DILocalVariable(name: "ix_", arg: 2, scope: !6285, file: !330, line: 188, type: !7)
!6291 = !DILocation(line: 0, scope: !6285)
!6292 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_iterate", scope: !330, file: !330, line: 188, type: !6293, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6293 = !DISubroutineType(types: !6294)
!6294 = !{!1784, !6208, !7, !6295}
!6295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2521, size: 64)
!6296 = !DILocalVariable(name: "vec_", arg: 1, scope: !6292, file: !330, line: 188, type: !6208)
!6297 = !DILocation(line: 188, column: 1, scope: !6292)
!6298 = !DILocalVariable(name: "ix_", arg: 2, scope: !6292, file: !330, line: 188, type: !7)
!6299 = !DILocalVariable(name: "ptr", arg: 3, scope: !6292, file: !330, line: 188, type: !6295)
!6300 = !DILocation(line: 188, column: 1, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6292, file: !330, line: 188, column: 1)
!6302 = !DILocation(line: 188, column: 1, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6301, file: !330, line: 188, column: 1)
!6304 = !DILocation(line: 188, column: 1, scope: !6305)
!6305 = distinct !DILexicalBlock(scope: !6301, file: !330, line: 188, column: 1)
!6306 = distinct !DISubprogram(name: "input_gimple_stmt", scope: !3, file: !3, line: 1000, type: !6307, scopeLine: 1002, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6307 = !DISubroutineType(types: !6308)
!6308 = !{!2017, !3647, !3116, !2439, !616}
!6309 = !DILocalVariable(name: "ib", arg: 1, scope: !6306, file: !3, line: 1000, type: !3647)
!6310 = !DILocation(line: 1000, column: 44, scope: !6306)
!6311 = !DILocalVariable(name: "data_in", arg: 2, scope: !6306, file: !3, line: 1000, type: !3116)
!6312 = !DILocation(line: 1000, column: 64, scope: !6306)
!6313 = !DILocalVariable(name: "fn", arg: 3, scope: !6306, file: !3, line: 1001, type: !2439)
!6314 = !DILocation(line: 1001, column: 23, scope: !6306)
!6315 = !DILocalVariable(name: "tag", arg: 4, scope: !6306, file: !3, line: 1001, type: !616)
!6316 = !DILocation(line: 1001, column: 41, scope: !6306)
!6317 = !DILocalVariable(name: "stmt", scope: !6306, file: !3, line: 1003, type: !2017)
!6318 = !DILocation(line: 1003, column: 10, scope: !6306)
!6319 = !DILocalVariable(name: "code", scope: !6306, file: !3, line: 1004, type: !687)
!6320 = !DILocation(line: 1004, column: 20, scope: !6306)
!6321 = !DILocalVariable(name: "num_ops", scope: !6306, file: !3, line: 1005, type: !1741)
!6322 = !DILocation(line: 1005, column: 26, scope: !6306)
!6323 = !DILocalVariable(name: "i", scope: !6306, file: !3, line: 1006, type: !2163)
!6324 = !DILocation(line: 1006, column: 10, scope: !6306)
!6325 = !DILocalVariable(name: "bp", scope: !6306, file: !3, line: 1007, type: !3641)
!6326 = !DILocation(line: 1007, column: 21, scope: !6306)
!6327 = !DILocation(line: 1009, column: 34, scope: !6306)
!6328 = !DILocation(line: 1009, column: 10, scope: !6306)
!6329 = !DILocation(line: 1009, column: 8, scope: !6306)
!6330 = !DILocation(line: 1012, column: 27, scope: !6306)
!6331 = !DILocation(line: 1012, column: 8, scope: !6306)
!6332 = !DILocation(line: 1012, column: 6, scope: !6306)
!6333 = !DILocation(line: 1013, column: 30, scope: !6306)
!6334 = !DILocation(line: 1013, column: 13, scope: !6306)
!6335 = !DILocation(line: 1013, column: 11, scope: !6306)
!6336 = !DILocation(line: 1014, column: 10, scope: !6306)
!6337 = !DILocation(line: 1014, column: 8, scope: !6306)
!6338 = !DILocation(line: 1015, column: 46, scope: !6306)
!6339 = !DILocation(line: 1015, column: 29, scope: !6306)
!6340 = !DILocation(line: 1015, column: 3, scope: !6306)
!6341 = !DILocation(line: 1015, column: 9, scope: !6306)
!6342 = !DILocation(line: 1015, column: 16, scope: !6306)
!6343 = !DILocation(line: 1015, column: 27, scope: !6306)
!6344 = !DILocation(line: 1016, column: 25, scope: !6345)
!6345 = distinct !DILexicalBlock(scope: !6306, file: !3, line: 1016, column: 7)
!6346 = !DILocation(line: 1016, column: 7, scope: !6345)
!6347 = !DILocation(line: 1016, column: 7, scope: !6306)
!6348 = !DILocation(line: 1017, column: 54, scope: !6345)
!6349 = !DILocation(line: 1017, column: 37, scope: !6345)
!6350 = !DILocation(line: 1017, column: 5, scope: !6345)
!6351 = !DILocation(line: 1017, column: 11, scope: !6345)
!6352 = !DILocation(line: 1017, column: 18, scope: !6345)
!6353 = !DILocation(line: 1017, column: 35, scope: !6345)
!6354 = !DILocation(line: 1018, column: 52, scope: !6306)
!6355 = !DILocation(line: 1018, column: 35, scope: !6306)
!6356 = !DILocation(line: 1018, column: 3, scope: !6306)
!6357 = !DILocation(line: 1018, column: 9, scope: !6306)
!6358 = !DILocation(line: 1018, column: 16, scope: !6306)
!6359 = !DILocation(line: 1018, column: 33, scope: !6306)
!6360 = !DILocation(line: 1019, column: 43, scope: !6306)
!6361 = !DILocation(line: 1019, column: 26, scope: !6306)
!6362 = !DILocation(line: 1019, column: 3, scope: !6306)
!6363 = !DILocation(line: 1019, column: 9, scope: !6306)
!6364 = !DILocation(line: 1019, column: 16, scope: !6306)
!6365 = !DILocation(line: 1019, column: 24, scope: !6306)
!6366 = !DILocation(line: 1020, column: 19, scope: !6306)
!6367 = !DILocation(line: 1020, column: 3, scope: !6306)
!6368 = !DILocation(line: 1023, column: 24, scope: !6306)
!6369 = !DILocation(line: 1023, column: 50, scope: !6306)
!6370 = !DILocation(line: 1023, column: 54, scope: !6306)
!6371 = !DILocation(line: 1023, column: 30, scope: !6306)
!6372 = !DILocation(line: 1023, column: 3, scope: !6306)
!6373 = !DILocation(line: 1026, column: 21, scope: !6306)
!6374 = !DILocation(line: 1026, column: 43, scope: !6306)
!6375 = !DILocation(line: 1026, column: 47, scope: !6306)
!6376 = !DILocation(line: 1026, column: 27, scope: !6306)
!6377 = !DILocation(line: 1026, column: 3, scope: !6306)
!6378 = !DILocation(line: 1029, column: 11, scope: !6306)
!6379 = !DILocation(line: 1029, column: 3, scope: !6306)
!6380 = !DILocation(line: 1032, column: 31, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6306, file: !3, line: 1030, column: 5)
!6382 = !DILocation(line: 1032, column: 56, scope: !6381)
!6383 = !DILocation(line: 1032, column: 37, scope: !6381)
!6384 = !DILocation(line: 1032, column: 7, scope: !6381)
!6385 = !DILocation(line: 1033, column: 7, scope: !6381)
!6386 = !DILocation(line: 1036, column: 44, scope: !6381)
!6387 = !DILocation(line: 1036, column: 66, scope: !6381)
!6388 = !DILocation(line: 1036, column: 70, scope: !6381)
!6389 = !DILocation(line: 1036, column: 50, scope: !6381)
!6390 = !DILocation(line: 1036, column: 7, scope: !6381)
!6391 = !DILocation(line: 1037, column: 7, scope: !6381)
!6392 = !DILocation(line: 1040, column: 38, scope: !6381)
!6393 = !DILocation(line: 1040, column: 63, scope: !6381)
!6394 = !DILocation(line: 1040, column: 44, scope: !6381)
!6395 = !DILocation(line: 1040, column: 7, scope: !6381)
!6396 = !DILocation(line: 1041, column: 7, scope: !6381)
!6397 = !DILocalVariable(name: "str", scope: !6398, file: !3, line: 1046, type: !1688)
!6398 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 1044, column: 7)
!6399 = !DILocation(line: 1046, column: 7, scope: !6398)
!6400 = !DILocation(line: 1047, column: 43, scope: !6398)
!6401 = !DILocation(line: 1047, column: 24, scope: !6398)
!6402 = !DILocation(line: 1047, column: 2, scope: !6398)
!6403 = !DILocation(line: 1047, column: 8, scope: !6398)
!6404 = !DILocation(line: 1047, column: 19, scope: !6398)
!6405 = !DILocation(line: 1047, column: 22, scope: !6398)
!6406 = !DILocation(line: 1048, column: 43, scope: !6398)
!6407 = !DILocation(line: 1048, column: 24, scope: !6398)
!6408 = !DILocation(line: 1048, column: 2, scope: !6398)
!6409 = !DILocation(line: 1048, column: 8, scope: !6398)
!6410 = !DILocation(line: 1048, column: 19, scope: !6398)
!6411 = !DILocation(line: 1048, column: 22, scope: !6398)
!6412 = !DILocation(line: 1049, column: 43, scope: !6398)
!6413 = !DILocation(line: 1049, column: 24, scope: !6398)
!6414 = !DILocation(line: 1049, column: 2, scope: !6398)
!6415 = !DILocation(line: 1049, column: 8, scope: !6398)
!6416 = !DILocation(line: 1049, column: 19, scope: !6398)
!6417 = !DILocation(line: 1049, column: 22, scope: !6398)
!6418 = !DILocation(line: 1050, column: 26, scope: !6398)
!6419 = !DILocation(line: 1050, column: 35, scope: !6398)
!6420 = !DILocation(line: 1050, column: 8, scope: !6398)
!6421 = !DILocation(line: 1050, column: 6, scope: !6398)
!6422 = !DILocation(line: 1051, column: 28, scope: !6398)
!6423 = !DILocation(line: 1051, column: 2, scope: !6398)
!6424 = !DILocation(line: 1051, column: 8, scope: !6398)
!6425 = !DILocation(line: 1051, column: 19, scope: !6398)
!6426 = !DILocation(line: 1051, column: 26, scope: !6398)
!6427 = !DILocation(line: 1052, column: 7, scope: !6398)
!6428 = !DILocation(line: 1063, column: 14, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 1063, column: 7)
!6430 = !DILocation(line: 1063, column: 12, scope: !6429)
!6431 = !DILocation(line: 1063, column: 19, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6429, file: !3, line: 1063, column: 7)
!6433 = !DILocation(line: 1063, column: 23, scope: !6432)
!6434 = !DILocation(line: 1063, column: 21, scope: !6432)
!6435 = !DILocation(line: 1063, column: 7, scope: !6429)
!6436 = !DILocalVariable(name: "op", scope: !6437, file: !3, line: 1065, type: !1688)
!6437 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 1064, column: 2)
!6438 = !DILocation(line: 1065, column: 9, scope: !6437)
!6439 = !DILocation(line: 1065, column: 30, scope: !6437)
!6440 = !DILocation(line: 1065, column: 34, scope: !6437)
!6441 = !DILocation(line: 1065, column: 14, scope: !6437)
!6442 = !DILocation(line: 1066, column: 19, scope: !6437)
!6443 = !DILocation(line: 1066, column: 25, scope: !6437)
!6444 = !DILocation(line: 1066, column: 28, scope: !6437)
!6445 = !DILocation(line: 1066, column: 4, scope: !6437)
!6446 = !DILocation(line: 1067, column: 9, scope: !6447)
!6447 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1067, column: 8)
!6448 = !DILocation(line: 1067, column: 8, scope: !6437)
!6449 = !DILocation(line: 1068, column: 6, scope: !6447)
!6450 = !DILocation(line: 1074, column: 8, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1074, column: 8)
!6452 = !DILocation(line: 1074, column: 23, scope: !6451)
!6453 = !DILocation(line: 1075, column: 8, scope: !6451)
!6454 = !DILocation(line: 1075, column: 11, scope: !6451)
!6455 = !DILocation(line: 1075, column: 44, scope: !6451)
!6456 = !DILocation(line: 1076, column: 8, scope: !6451)
!6457 = !DILocation(line: 1076, column: 39, scope: !6451)
!6458 = !DILocation(line: 1077, column: 11, scope: !6451)
!6459 = !DILocation(line: 1076, column: 12, scope: !6451)
!6460 = !DILocation(line: 1074, column: 8, scope: !6437)
!6461 = !DILocation(line: 1080, column: 5, scope: !6462)
!6462 = distinct !DILexicalBlock(scope: !6451, file: !3, line: 1078, column: 6)
!6463 = !DILocation(line: 1079, column: 8, scope: !6462)
!6464 = !DILocation(line: 1080, column: 3, scope: !6462)
!6465 = !DILocation(line: 1082, column: 8, scope: !6462)
!6466 = !DILocation(line: 1087, column: 8, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1087, column: 8)
!6468 = !DILocation(line: 1087, column: 23, scope: !6467)
!6469 = !DILocation(line: 1087, column: 8, scope: !6437)
!6470 = !DILocation(line: 1088, column: 11, scope: !6467)
!6471 = !DILocation(line: 1088, column: 9, scope: !6467)
!6472 = !DILocation(line: 1088, column: 6, scope: !6467)
!6473 = !DILocation(line: 1089, column: 4, scope: !6437)
!6474 = !DILocation(line: 1089, column: 32, scope: !6437)
!6475 = !DILocation(line: 1089, column: 11, scope: !6437)
!6476 = !DILocation(line: 1091, column: 12, scope: !6477)
!6477 = distinct !DILexicalBlock(scope: !6478, file: !3, line: 1091, column: 12)
!6478 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1090, column: 6)
!6479 = !DILocation(line: 1091, column: 27, scope: !6477)
!6480 = !DILocation(line: 1091, column: 12, scope: !6478)
!6481 = !DILocalVariable(name: "field", scope: !6482, file: !3, line: 1093, type: !1688)
!6482 = distinct !DILexicalBlock(scope: !6477, file: !3, line: 1092, column: 3)
!6483 = !DILocation(line: 1093, column: 10, scope: !6482)
!6484 = !DILocalVariable(name: "type", scope: !6482, file: !3, line: 1093, type: !1688)
!6485 = !DILocation(line: 1093, column: 17, scope: !6482)
!6486 = !DILocalVariable(name: "tem", scope: !6482, file: !3, line: 1093, type: !1688)
!6487 = !DILocation(line: 1093, column: 23, scope: !6482)
!6488 = !DILocation(line: 1094, column: 13, scope: !6482)
!6489 = !DILocation(line: 1094, column: 11, scope: !6482)
!6490 = !DILocation(line: 1095, column: 12, scope: !6482)
!6491 = !DILocation(line: 1095, column: 10, scope: !6482)
!6492 = !DILocation(line: 1096, column: 16, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 1096, column: 5)
!6494 = !DILocation(line: 1096, column: 14, scope: !6493)
!6495 = !DILocation(line: 1096, column: 10, scope: !6493)
!6496 = !DILocation(line: 1096, column: 36, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6493, file: !3, line: 1096, column: 5)
!6498 = !DILocation(line: 1096, column: 5, scope: !6493)
!6499 = !DILocation(line: 1098, column: 13, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6501, file: !3, line: 1098, column: 13)
!6501 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1097, column: 7)
!6502 = !DILocation(line: 1098, column: 20, scope: !6500)
!6503 = !DILocation(line: 1098, column: 17, scope: !6500)
!6504 = !DILocation(line: 1099, column: 6, scope: !6500)
!6505 = !DILocation(line: 1099, column: 10, scope: !6500)
!6506 = !DILocation(line: 1099, column: 29, scope: !6500)
!6507 = !DILocation(line: 1099, column: 26, scope: !6500)
!6508 = !DILocation(line: 1100, column: 10, scope: !6500)
!6509 = !DILocation(line: 1100, column: 35, scope: !6500)
!6510 = !DILocation(line: 1100, column: 40, scope: !6500)
!6511 = !DILocation(line: 1100, column: 13, scope: !6500)
!6512 = !DILocation(line: 1098, column: 13, scope: !6501)
!6513 = !DILocation(line: 1101, column: 4, scope: !6500)
!6514 = !DILocation(line: 1102, column: 7, scope: !6501)
!6515 = !DILocation(line: 1096, column: 47, scope: !6497)
!6516 = !DILocation(line: 1096, column: 45, scope: !6497)
!6517 = !DILocation(line: 1096, column: 5, scope: !6497)
!6518 = distinct !{!6518, !6498, !6519}
!6519 = !DILocation(line: 1102, column: 7, scope: !6493)
!6520 = !DILocation(line: 1110, column: 9, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 1110, column: 9)
!6522 = !DILocation(line: 1110, column: 13, scope: !6521)
!6523 = !DILocation(line: 1110, column: 9, scope: !6482)
!6524 = !DILocation(line: 1111, column: 30, scope: !6521)
!6525 = !DILocation(line: 1111, column: 7, scope: !6521)
!6526 = !DILocation(line: 1111, column: 28, scope: !6521)
!6527 = !DILocation(line: 1112, column: 3, scope: !6482)
!6528 = !DILocation(line: 1116, column: 34, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6478, file: !3, line: 1116, column: 12)
!6530 = !DILocation(line: 1116, column: 13, scope: !6529)
!6531 = !DILocation(line: 1116, column: 12, scope: !6478)
!6532 = !DILocation(line: 1117, column: 3, scope: !6529)
!6533 = !DILocation(line: 1118, column: 13, scope: !6478)
!6534 = !DILocation(line: 1118, column: 11, scope: !6478)
!6535 = distinct !{!6535, !6473, !6536}
!6536 = !DILocation(line: 1119, column: 6, scope: !6437)
!6537 = !DILocation(line: 1123, column: 29, scope: !6538)
!6538 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 1123, column: 8)
!6539 = !DILocation(line: 1123, column: 8, scope: !6538)
!6540 = !DILocation(line: 1123, column: 8, scope: !6437)
!6541 = !DILocation(line: 1124, column: 37, scope: !6538)
!6542 = !DILocation(line: 1124, column: 6, scope: !6538)
!6543 = !DILocation(line: 1125, column: 2, scope: !6437)
!6544 = !DILocation(line: 1063, column: 33, scope: !6432)
!6545 = !DILocation(line: 1063, column: 7, scope: !6432)
!6546 = distinct !{!6546, !6435, !6547}
!6547 = !DILocation(line: 1125, column: 2, scope: !6429)
!6548 = !DILocation(line: 1126, column: 7, scope: !6381)
!6549 = !DILocation(line: 1130, column: 7, scope: !6381)
!6550 = !DILocation(line: 1134, column: 23, scope: !6381)
!6551 = !DILocation(line: 1134, column: 9, scope: !6381)
!6552 = !DILocation(line: 1133, column: 7, scope: !6381)
!6553 = !DILocation(line: 1135, column: 5, scope: !6381)
!6554 = !DILocation(line: 1139, column: 7, scope: !6555)
!6555 = distinct !DILexicalBlock(scope: !6306, file: !3, line: 1139, column: 7)
!6556 = !DILocation(line: 1139, column: 12, scope: !6555)
!6557 = !DILocation(line: 1139, column: 29, scope: !6555)
!6558 = !DILocation(line: 1139, column: 32, scope: !6555)
!6559 = !DILocation(line: 1139, column: 37, scope: !6555)
!6560 = !DILocation(line: 1139, column: 7, scope: !6306)
!6561 = !DILocalVariable(name: "lhs", scope: !6562, file: !3, line: 1141, type: !1688)
!6562 = distinct !DILexicalBlock(scope: !6555, file: !3, line: 1140, column: 5)
!6563 = !DILocation(line: 1141, column: 12, scope: !6562)
!6564 = !DILocation(line: 1141, column: 34, scope: !6562)
!6565 = !DILocation(line: 1141, column: 18, scope: !6562)
!6566 = !DILocation(line: 1142, column: 11, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6562, file: !3, line: 1142, column: 11)
!6568 = !DILocation(line: 1142, column: 15, scope: !6567)
!6569 = !DILocation(line: 1142, column: 18, scope: !6567)
!6570 = !DILocation(line: 1142, column: 34, scope: !6567)
!6571 = !DILocation(line: 1142, column: 11, scope: !6562)
!6572 = !DILocation(line: 1143, column: 28, scope: !6567)
!6573 = !DILocation(line: 1143, column: 2, scope: !6567)
!6574 = !DILocation(line: 1143, column: 26, scope: !6567)
!6575 = !DILocation(line: 1144, column: 5, scope: !6562)
!6576 = !DILocation(line: 1145, column: 12, scope: !6577)
!6577 = distinct !DILexicalBlock(scope: !6555, file: !3, line: 1145, column: 12)
!6578 = !DILocation(line: 1145, column: 17, scope: !6577)
!6579 = !DILocation(line: 1145, column: 12, scope: !6555)
!6580 = !DILocation(line: 1146, column: 5, scope: !6577)
!6581 = !DILocation(line: 1148, column: 12, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6577, file: !3, line: 1148, column: 12)
!6583 = !DILocation(line: 1148, column: 17, scope: !6582)
!6584 = !DILocation(line: 1148, column: 12, scope: !6577)
!6585 = !DILocalVariable(name: "i", scope: !6586, file: !3, line: 1150, type: !7)
!6586 = distinct !DILexicalBlock(scope: !6582, file: !3, line: 1149, column: 5)
!6587 = !DILocation(line: 1150, column: 16, scope: !6586)
!6588 = !DILocation(line: 1152, column: 14, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 1152, column: 7)
!6590 = !DILocation(line: 1152, column: 12, scope: !6589)
!6591 = !DILocation(line: 1152, column: 19, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6589, file: !3, line: 1152, column: 7)
!6593 = !DILocation(line: 1152, column: 44, scope: !6592)
!6594 = !DILocation(line: 1152, column: 23, scope: !6592)
!6595 = !DILocation(line: 1152, column: 21, scope: !6592)
!6596 = !DILocation(line: 1152, column: 7, scope: !6589)
!6597 = !DILocalVariable(name: "op", scope: !6598, file: !3, line: 1154, type: !1688)
!6598 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 1153, column: 2)
!6599 = !DILocation(line: 1154, column: 9, scope: !6598)
!6600 = !DILocation(line: 1154, column: 14, scope: !6598)
!6601 = !DILocation(line: 1155, column: 8, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 1155, column: 8)
!6603 = !DILocation(line: 1155, column: 23, scope: !6602)
!6604 = !DILocation(line: 1155, column: 8, scope: !6598)
!6605 = !DILocation(line: 1156, column: 31, scope: !6602)
!6606 = !DILocation(line: 1156, column: 6, scope: !6602)
!6607 = !DILocation(line: 1156, column: 29, scope: !6602)
!6608 = !DILocation(line: 1157, column: 2, scope: !6598)
!6609 = !DILocation(line: 1152, column: 52, scope: !6592)
!6610 = !DILocation(line: 1152, column: 7, scope: !6592)
!6611 = distinct !{!6611, !6596, !6612}
!6612 = !DILocation(line: 1157, column: 2, scope: !6589)
!6613 = !DILocation(line: 1158, column: 5, scope: !6586)
!6614 = !DILocation(line: 1162, column: 22, scope: !6306)
!6615 = !DILocation(line: 1162, column: 3, scope: !6306)
!6616 = !DILocation(line: 1165, column: 24, scope: !6306)
!6617 = !DILocation(line: 1165, column: 3, scope: !6306)
!6618 = !DILocation(line: 1167, column: 10, scope: !6306)
!6619 = !DILocation(line: 1167, column: 3, scope: !6306)
!6620 = distinct !DISubprogram(name: "is_gimple_debug", scope: !682, file: !682, line: 3249, type: !6621, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6621 = !DISubroutineType(types: !6622)
!6622 = !{!1807, !5322}
!6623 = !DILocalVariable(name: "gs", arg: 1, scope: !6620, file: !682, line: 3249, type: !5322)
!6624 = !DILocation(line: 3249, column: 31, scope: !6620)
!6625 = !DILocation(line: 3251, column: 23, scope: !6620)
!6626 = !DILocation(line: 3251, column: 10, scope: !6620)
!6627 = !DILocation(line: 3251, column: 27, scope: !6620)
!6628 = !DILocation(line: 3251, column: 3, scope: !6620)
!6629 = distinct !DISubprogram(name: "lto_tag_check_set", scope: !3, file: !3, line: 67, type: !6630, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6630 = !DISubroutineType(types: !6631)
!6631 = !{null, !616, !1784, null}
!6632 = !DILocalVariable(name: "actual", arg: 1, scope: !6629, file: !3, line: 67, type: !616)
!6633 = !DILocation(line: 67, column: 34, scope: !6629)
!6634 = !DILocalVariable(name: "ntags", arg: 2, scope: !6629, file: !3, line: 67, type: !1784)
!6635 = !DILocation(line: 67, column: 46, scope: !6629)
!6636 = !DILocalVariable(name: "ap", scope: !6629, file: !3, line: 69, type: !6637)
!6637 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6638, line: 52, baseType: !6639)
!6638 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!6639 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !6640, line: 32, baseType: !6641)
!6640 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stdarg.h", directory: "/home/venkat/IF-DV")
!6641 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 69, baseType: !6642)
!6642 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6643, size: 192, elements: !1788)
!6643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 69, size: 192, elements: !6644)
!6644 = !{!6645, !6646, !6647, !6648}
!6645 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !6643, file: !3, line: 69, baseType: !7, size: 32)
!6646 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !6643, file: !3, line: 69, baseType: !7, size: 32, offset: 32)
!6647 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !6643, file: !3, line: 69, baseType: !1970, size: 64, offset: 64)
!6648 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !6643, file: !3, line: 69, baseType: !1970, size: 64, offset: 128)
!6649 = !DILocation(line: 69, column: 11, scope: !6629)
!6650 = !DILocalVariable(name: "i", scope: !6629, file: !3, line: 70, type: !1784)
!6651 = !DILocation(line: 70, column: 7, scope: !6629)
!6652 = !DILocation(line: 72, column: 3, scope: !6629)
!6653 = !DILocation(line: 73, column: 10, scope: !6654)
!6654 = distinct !DILexicalBlock(scope: !6629, file: !3, line: 73, column: 3)
!6655 = !DILocation(line: 73, column: 8, scope: !6654)
!6656 = !DILocation(line: 73, column: 15, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6654, file: !3, line: 73, column: 3)
!6658 = !DILocation(line: 73, column: 19, scope: !6657)
!6659 = !DILocation(line: 73, column: 17, scope: !6657)
!6660 = !DILocation(line: 73, column: 3, scope: !6654)
!6661 = !DILocation(line: 74, column: 20, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6657, file: !3, line: 74, column: 9)
!6663 = !DILocation(line: 74, column: 30, scope: !6662)
!6664 = !DILocation(line: 74, column: 27, scope: !6662)
!6665 = !DILocation(line: 74, column: 9, scope: !6657)
!6666 = !DILocation(line: 76, column: 2, scope: !6667)
!6667 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 75, column: 7)
!6668 = !DILocation(line: 77, column: 2, scope: !6667)
!6669 = !DILocation(line: 73, column: 27, scope: !6657)
!6670 = !DILocation(line: 73, column: 3, scope: !6657)
!6671 = distinct !{!6671, !6660, !6672}
!6672 = !DILocation(line: 78, column: 7, scope: !6654)
!6673 = !DILocation(line: 80, column: 3, scope: !6629)
!6674 = !DILocation(line: 81, column: 71, scope: !6629)
!6675 = !DILocation(line: 81, column: 57, scope: !6629)
!6676 = !DILocation(line: 81, column: 3, scope: !6629)
!6677 = !DILocation(line: 82, column: 1, scope: !6629)
!6678 = distinct !DISubprogram(name: "input_phi", scope: !3, file: !3, line: 804, type: !6679, scopeLine: 806, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6679 = !DISubroutineType(types: !6680)
!6680 = !{!2017, !3647, !2605, !3116, !2439}
!6681 = !DILocalVariable(name: "ib", arg: 1, scope: !6678, file: !3, line: 804, type: !3647)
!6682 = !DILocation(line: 804, column: 36, scope: !6678)
!6683 = !DILocalVariable(name: "bb", arg: 2, scope: !6678, file: !3, line: 804, type: !2605)
!6684 = !DILocation(line: 804, column: 52, scope: !6678)
!6685 = !DILocalVariable(name: "data_in", arg: 3, scope: !6678, file: !3, line: 804, type: !3116)
!6686 = !DILocation(line: 804, column: 72, scope: !6678)
!6687 = !DILocalVariable(name: "fn", arg: 4, scope: !6678, file: !3, line: 805, type: !2439)
!6688 = !DILocation(line: 805, column: 22, scope: !6678)
!6689 = !DILocalVariable(name: "ix", scope: !6678, file: !3, line: 807, type: !1741)
!6690 = !DILocation(line: 807, column: 26, scope: !6678)
!6691 = !DILocalVariable(name: "phi_result", scope: !6678, file: !3, line: 808, type: !1688)
!6692 = !DILocation(line: 808, column: 8, scope: !6678)
!6693 = !DILocalVariable(name: "i", scope: !6678, file: !3, line: 809, type: !1784)
!6694 = !DILocation(line: 809, column: 7, scope: !6678)
!6695 = !DILocalVariable(name: "len", scope: !6678, file: !3, line: 809, type: !1784)
!6696 = !DILocation(line: 809, column: 10, scope: !6678)
!6697 = !DILocalVariable(name: "result", scope: !6678, file: !3, line: 810, type: !2017)
!6698 = !DILocation(line: 810, column: 10, scope: !6678)
!6699 = !DILocation(line: 812, column: 27, scope: !6678)
!6700 = !DILocation(line: 812, column: 8, scope: !6678)
!6701 = !DILocation(line: 812, column: 6, scope: !6678)
!6702 = !DILocation(line: 813, column: 16, scope: !6678)
!6703 = !DILocation(line: 813, column: 14, scope: !6678)
!6704 = !DILocation(line: 814, column: 9, scope: !6678)
!6705 = !DILocation(line: 814, column: 7, scope: !6678)
!6706 = !DILocation(line: 815, column: 29, scope: !6678)
!6707 = !DILocation(line: 815, column: 41, scope: !6678)
!6708 = !DILocation(line: 815, column: 12, scope: !6678)
!6709 = !DILocation(line: 815, column: 10, scope: !6678)
!6710 = !DILocation(line: 816, column: 36, scope: !6678)
!6711 = !DILocation(line: 816, column: 3, scope: !6678)
!6712 = !DILocation(line: 816, column: 34, scope: !6678)
!6713 = !DILocation(line: 821, column: 10, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 821, column: 3)
!6715 = !DILocation(line: 821, column: 8, scope: !6714)
!6716 = !DILocation(line: 821, column: 15, scope: !6717)
!6717 = distinct !DILexicalBlock(scope: !6714, file: !3, line: 821, column: 3)
!6718 = !DILocation(line: 821, column: 19, scope: !6717)
!6719 = !DILocation(line: 821, column: 17, scope: !6717)
!6720 = !DILocation(line: 821, column: 3, scope: !6714)
!6721 = !DILocalVariable(name: "def", scope: !6722, file: !3, line: 823, type: !1688)
!6722 = distinct !DILexicalBlock(scope: !6717, file: !3, line: 822, column: 5)
!6723 = !DILocation(line: 823, column: 12, scope: !6722)
!6724 = !DILocation(line: 823, column: 34, scope: !6722)
!6725 = !DILocation(line: 823, column: 38, scope: !6722)
!6726 = !DILocation(line: 823, column: 18, scope: !6722)
!6727 = !DILocalVariable(name: "src_index", scope: !6722, file: !3, line: 824, type: !1784)
!6728 = !DILocation(line: 824, column: 11, scope: !6722)
!6729 = !DILocation(line: 824, column: 42, scope: !6722)
!6730 = !DILocation(line: 824, column: 23, scope: !6722)
!6731 = !DILocalVariable(name: "arg_loc", scope: !6722, file: !3, line: 825, type: !1815)
!6732 = !DILocation(line: 825, column: 18, scope: !6722)
!6733 = !DILocation(line: 825, column: 48, scope: !6722)
!6734 = !DILocation(line: 825, column: 52, scope: !6722)
!6735 = !DILocation(line: 825, column: 28, scope: !6722)
!6736 = !DILocalVariable(name: "sbb", scope: !6722, file: !3, line: 826, type: !2605)
!6737 = !DILocation(line: 826, column: 19, scope: !6722)
!6738 = !DILocation(line: 826, column: 25, scope: !6722)
!6739 = !DILocalVariable(name: "e", scope: !6722, file: !3, line: 828, type: !1997)
!6740 = !DILocation(line: 828, column: 12, scope: !6722)
!6741 = !DILocalVariable(name: "j", scope: !6722, file: !3, line: 829, type: !1784)
!6742 = !DILocation(line: 829, column: 11, scope: !6722)
!6743 = !DILocation(line: 831, column: 14, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 831, column: 7)
!6745 = !DILocation(line: 831, column: 12, scope: !6744)
!6746 = !DILocation(line: 831, column: 19, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6744, file: !3, line: 831, column: 7)
!6748 = !DILocation(line: 831, column: 23, scope: !6747)
!6749 = !DILocation(line: 831, column: 21, scope: !6747)
!6750 = !DILocation(line: 831, column: 7, scope: !6744)
!6751 = !DILocation(line: 832, column: 6, scope: !6752)
!6752 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 832, column: 6)
!6753 = !DILocation(line: 832, column: 25, scope: !6752)
!6754 = !DILocation(line: 832, column: 32, scope: !6752)
!6755 = !DILocation(line: 832, column: 29, scope: !6752)
!6756 = !DILocation(line: 832, column: 6, scope: !6747)
!6757 = !DILocation(line: 834, column: 10, scope: !6758)
!6758 = distinct !DILexicalBlock(scope: !6752, file: !3, line: 833, column: 4)
!6759 = !DILocation(line: 834, column: 8, scope: !6758)
!6760 = !DILocation(line: 835, column: 6, scope: !6758)
!6761 = !DILocation(line: 831, column: 29, scope: !6747)
!6762 = !DILocation(line: 831, column: 7, scope: !6747)
!6763 = distinct !{!6763, !6750, !6764}
!6764 = !DILocation(line: 836, column: 4, scope: !6744)
!6765 = !DILocation(line: 838, column: 20, scope: !6722)
!6766 = !DILocation(line: 838, column: 28, scope: !6722)
!6767 = !DILocation(line: 838, column: 33, scope: !6722)
!6768 = !DILocation(line: 838, column: 36, scope: !6722)
!6769 = !DILocation(line: 838, column: 7, scope: !6722)
!6770 = !DILocation(line: 839, column: 5, scope: !6722)
!6771 = !DILocation(line: 821, column: 25, scope: !6717)
!6772 = !DILocation(line: 821, column: 3, scope: !6717)
!6773 = distinct !{!6773, !6720, !6774}
!6774 = !DILocation(line: 839, column: 5, scope: !6714)
!6775 = !DILocation(line: 841, column: 10, scope: !6678)
!6776 = !DILocation(line: 841, column: 3, scope: !6678)
!6777 = distinct !DISubprogram(name: "lto_tag_to_gimple_code", scope: !591, file: !591, line: 905, type: !6778, scopeLine: 906, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6778 = !DISubroutineType(types: !6779)
!6779 = !{!687, !616}
!6780 = !DILocalVariable(name: "tag", arg: 1, scope: !6777, file: !591, line: 905, type: !616)
!6781 = !DILocation(line: 905, column: 39, scope: !6777)
!6782 = !DILocation(line: 907, column: 3, scope: !6777)
!6783 = !DILocation(line: 908, column: 41, scope: !6777)
!6784 = !DILocation(line: 908, column: 45, scope: !6777)
!6785 = !DILocation(line: 908, column: 62, scope: !6777)
!6786 = !DILocation(line: 908, column: 3, scope: !6777)
!6787 = distinct !DISubprogram(name: "is_gimple_assign", scope: !682, file: !682, line: 1677, type: !6621, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6788 = !DILocalVariable(name: "gs", arg: 1, scope: !6787, file: !682, line: 1677, type: !5322)
!6789 = !DILocation(line: 1677, column: 32, scope: !6787)
!6790 = !DILocation(line: 1679, column: 23, scope: !6787)
!6791 = !DILocation(line: 1679, column: 10, scope: !6787)
!6792 = !DILocation(line: 1679, column: 27, scope: !6787)
!6793 = !DILocation(line: 1679, column: 3, scope: !6787)
!6794 = distinct !DISubprogram(name: "gimple_set_location", scope: !682, file: !682, line: 1156, type: !6795, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6795 = !DISubroutineType(types: !6796)
!6796 = !{null, !2017, !1815}
!6797 = !DILocalVariable(name: "g", arg: 1, scope: !6794, file: !682, line: 1156, type: !2017)
!6798 = !DILocation(line: 1156, column: 29, scope: !6794)
!6799 = !DILocalVariable(name: "location", arg: 2, scope: !6794, file: !682, line: 1156, type: !1815)
!6800 = !DILocation(line: 1156, column: 43, scope: !6794)
!6801 = !DILocation(line: 1158, column: 24, scope: !6794)
!6802 = !DILocation(line: 1158, column: 3, scope: !6794)
!6803 = !DILocation(line: 1158, column: 6, scope: !6794)
!6804 = !DILocation(line: 1158, column: 13, scope: !6794)
!6805 = !DILocation(line: 1158, column: 22, scope: !6794)
!6806 = !DILocation(line: 1159, column: 1, scope: !6794)
!6807 = distinct !DISubprogram(name: "gimple_set_block", scope: !682, file: !682, line: 1130, type: !6808, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6808 = !DISubroutineType(types: !6809)
!6809 = !{null, !2017, !1688}
!6810 = !DILocalVariable(name: "g", arg: 1, scope: !6807, file: !682, line: 1130, type: !2017)
!6811 = !DILocation(line: 1130, column: 26, scope: !6807)
!6812 = !DILocalVariable(name: "block", arg: 2, scope: !6807, file: !682, line: 1130, type: !1688)
!6813 = !DILocation(line: 1130, column: 34, scope: !6807)
!6814 = !DILocation(line: 1132, column: 21, scope: !6807)
!6815 = !DILocation(line: 1132, column: 3, scope: !6807)
!6816 = !DILocation(line: 1132, column: 6, scope: !6807)
!6817 = !DILocation(line: 1132, column: 13, scope: !6807)
!6818 = !DILocation(line: 1132, column: 19, scope: !6807)
!6819 = !DILocation(line: 1133, column: 1, scope: !6807)
!6820 = distinct !DISubprogram(name: "gimple_resx_set_region", scope: !682, file: !682, line: 3130, type: !6821, scopeLine: 3131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6821 = !DISubroutineType(types: !6822)
!6822 = !{null, !2017, !1784}
!6823 = !DILocalVariable(name: "gs", arg: 1, scope: !6820, file: !682, line: 3130, type: !2017)
!6824 = !DILocation(line: 3130, column: 32, scope: !6820)
!6825 = !DILocalVariable(name: "region", arg: 2, scope: !6820, file: !682, line: 3130, type: !1784)
!6826 = !DILocation(line: 3130, column: 40, scope: !6820)
!6827 = !DILocation(line: 3133, column: 31, scope: !6820)
!6828 = !DILocation(line: 3133, column: 3, scope: !6820)
!6829 = !DILocation(line: 3133, column: 7, scope: !6820)
!6830 = !DILocation(line: 3133, column: 22, scope: !6820)
!6831 = !DILocation(line: 3133, column: 29, scope: !6820)
!6832 = !DILocation(line: 3134, column: 1, scope: !6820)
!6833 = distinct !DISubprogram(name: "gimple_eh_must_not_throw_set_fndecl", scope: !682, file: !682, line: 2908, type: !6808, scopeLine: 2909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6834 = !DILocalVariable(name: "gs", arg: 1, scope: !6833, file: !682, line: 2908, type: !2017)
!6835 = !DILocation(line: 2908, column: 45, scope: !6833)
!6836 = !DILocalVariable(name: "decl", arg: 2, scope: !6833, file: !682, line: 2908, type: !1688)
!6837 = !DILocation(line: 2908, column: 54, scope: !6833)
!6838 = !DILocation(line: 2911, column: 30, scope: !6833)
!6839 = !DILocation(line: 2911, column: 3, scope: !6833)
!6840 = !DILocation(line: 2911, column: 7, scope: !6833)
!6841 = !DILocation(line: 2911, column: 21, scope: !6833)
!6842 = !DILocation(line: 2911, column: 28, scope: !6833)
!6843 = !DILocation(line: 2912, column: 1, scope: !6833)
!6844 = distinct !DISubprogram(name: "gimple_eh_dispatch_set_region", scope: !682, file: !682, line: 3148, type: !6821, scopeLine: 3149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6845 = !DILocalVariable(name: "gs", arg: 1, scope: !6844, file: !682, line: 3148, type: !2017)
!6846 = !DILocation(line: 3148, column: 39, scope: !6844)
!6847 = !DILocalVariable(name: "region", arg: 2, scope: !6844, file: !682, line: 3148, type: !1784)
!6848 = !DILocation(line: 3148, column: 47, scope: !6844)
!6849 = !DILocation(line: 3151, column: 31, scope: !6844)
!6850 = !DILocation(line: 3151, column: 3, scope: !6844)
!6851 = !DILocation(line: 3151, column: 7, scope: !6844)
!6852 = !DILocation(line: 3151, column: 22, scope: !6844)
!6853 = !DILocation(line: 3151, column: 29, scope: !6844)
!6854 = !DILocation(line: 3152, column: 1, scope: !6844)
!6855 = distinct !DISubprogram(name: "input_string_cst", scope: !3, file: !3, line: 162, type: !6856, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6856 = !DISubroutineType(types: !6857)
!6857 = !{!1688, !3116, !3647}
!6858 = !DILocalVariable(name: "data_in", arg: 1, scope: !6855, file: !3, line: 162, type: !3116)
!6859 = !DILocation(line: 162, column: 35, scope: !6855)
!6860 = !DILocalVariable(name: "ib", arg: 2, scope: !6855, file: !3, line: 162, type: !3647)
!6861 = !DILocation(line: 162, column: 68, scope: !6855)
!6862 = !DILocalVariable(name: "len", scope: !6855, file: !3, line: 164, type: !7)
!6863 = !DILocation(line: 164, column: 16, scope: !6855)
!6864 = !DILocalVariable(name: "ptr", scope: !6855, file: !3, line: 165, type: !1890)
!6865 = !DILocation(line: 165, column: 16, scope: !6855)
!6866 = !DILocalVariable(name: "is_null", scope: !6855, file: !3, line: 166, type: !7)
!6867 = !DILocation(line: 166, column: 16, scope: !6855)
!6868 = !DILocation(line: 168, column: 32, scope: !6855)
!6869 = !DILocation(line: 168, column: 13, scope: !6855)
!6870 = !DILocation(line: 168, column: 11, scope: !6855)
!6871 = !DILocation(line: 169, column: 7, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 169, column: 7)
!6873 = !DILocation(line: 169, column: 7, scope: !6855)
!6874 = !DILocation(line: 170, column: 5, scope: !6872)
!6875 = !DILocation(line: 172, column: 32, scope: !6855)
!6876 = !DILocation(line: 172, column: 41, scope: !6855)
!6877 = !DILocation(line: 172, column: 9, scope: !6855)
!6878 = !DILocation(line: 172, column: 7, scope: !6855)
!6879 = !DILocation(line: 173, column: 24, scope: !6855)
!6880 = !DILocation(line: 173, column: 29, scope: !6855)
!6881 = !DILocation(line: 173, column: 10, scope: !6855)
!6882 = !DILocation(line: 173, column: 3, scope: !6855)
!6883 = !DILocation(line: 174, column: 1, scope: !6855)
!6884 = distinct !DISubprogram(name: "gimple_set_op", scope: !682, file: !682, line: 1663, type: !6885, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6885 = !DISubroutineType(types: !6886)
!6886 = !{null, !2017, !7, !1688}
!6887 = !DILocalVariable(name: "gs", arg: 1, scope: !6884, file: !682, line: 1663, type: !2017)
!6888 = !DILocation(line: 1663, column: 23, scope: !6884)
!6889 = !DILocalVariable(name: "i", arg: 2, scope: !6884, file: !682, line: 1663, type: !7)
!6890 = !DILocation(line: 1663, column: 36, scope: !6884)
!6891 = !DILocalVariable(name: "op", arg: 3, scope: !6884, file: !682, line: 1663, type: !1688)
!6892 = !DILocation(line: 1663, column: 44, scope: !6884)
!6893 = !DILocation(line: 1665, column: 3, scope: !6884)
!6894 = !DILocation(line: 1671, column: 24, scope: !6884)
!6895 = !DILocation(line: 1671, column: 15, scope: !6884)
!6896 = !DILocation(line: 1671, column: 3, scope: !6884)
!6897 = !DILocation(line: 1671, column: 19, scope: !6884)
!6898 = !DILocation(line: 1671, column: 22, scope: !6884)
!6899 = !DILocation(line: 1672, column: 1, scope: !6884)
!6900 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !6901, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6901 = !DISubroutineType(types: !6902)
!6902 = !{!1807, !6903}
!6903 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1678, line: 59, baseType: !6904)
!6904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6905, size: 64)
!6905 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1690)
!6906 = !DILocalVariable(name: "t", arg: 1, scope: !6900, file: !135, line: 4551, type: !6903)
!6907 = !DILocation(line: 4551, column: 33, scope: !6900)
!6908 = !DILocation(line: 4553, column: 11, scope: !6900)
!6909 = !DILocation(line: 4553, column: 3, scope: !6900)
!6910 = !DILocation(line: 4562, column: 7, scope: !6911)
!6911 = distinct !DILexicalBlock(scope: !6900, file: !135, line: 4554, column: 5)
!6912 = !DILocation(line: 4565, column: 7, scope: !6911)
!6913 = !DILocation(line: 4567, column: 1, scope: !6900)
!6914 = distinct !DISubprogram(name: "maybe_fixup_handled_component", scope: !3, file: !3, line: 883, type: !6915, scopeLine: 884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!6915 = !DISubroutineType(types: !6916)
!6916 = !{null, !1688}
!6917 = !DILocalVariable(name: "op", arg: 1, scope: !6914, file: !3, line: 883, type: !1688)
!6918 = !DILocation(line: 883, column: 37, scope: !6914)
!6919 = !DILocalVariable(name: "decl_type", scope: !6914, file: !3, line: 885, type: !1688)
!6920 = !DILocation(line: 885, column: 8, scope: !6914)
!6921 = !DILocalVariable(name: "wanted_type", scope: !6914, file: !3, line: 886, type: !1688)
!6922 = !DILocation(line: 886, column: 8, scope: !6914)
!6923 = !DILocation(line: 888, column: 3, scope: !6914)
!6924 = !DILocation(line: 888, column: 31, scope: !6914)
!6925 = !DILocation(line: 888, column: 10, scope: !6914)
!6926 = !DILocation(line: 889, column: 10, scope: !6914)
!6927 = !DILocation(line: 889, column: 8, scope: !6914)
!6928 = distinct !{!6928, !6923, !6926}
!6929 = !DILocation(line: 890, column: 7, scope: !6930)
!6930 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 890, column: 7)
!6931 = !DILocation(line: 890, column: 40, scope: !6930)
!6932 = !DILocation(line: 890, column: 7, scope: !6914)
!6933 = !DILocation(line: 891, column: 5, scope: !6930)
!6934 = !DILocation(line: 893, column: 15, scope: !6914)
!6935 = !DILocation(line: 893, column: 13, scope: !6914)
!6936 = !DILocation(line: 895, column: 11, scope: !6914)
!6937 = !DILocation(line: 895, column: 3, scope: !6914)
!6938 = !DILocation(line: 899, column: 21, scope: !6939)
!6939 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 896, column: 5)
!6940 = !DILocation(line: 899, column: 19, scope: !6939)
!6941 = !DILocation(line: 900, column: 7, scope: !6939)
!6942 = !DILocation(line: 903, column: 11, scope: !6943)
!6943 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 903, column: 11)
!6944 = !DILocation(line: 903, column: 33, scope: !6943)
!6945 = !DILocation(line: 904, column: 4, scope: !6943)
!6946 = !DILocation(line: 904, column: 8, scope: !6943)
!6947 = !DILocation(line: 904, column: 33, scope: !6943)
!6948 = !DILocation(line: 904, column: 30, scope: !6943)
!6949 = !DILocation(line: 905, column: 8, scope: !6943)
!6950 = !DILocation(line: 905, column: 38, scope: !6943)
!6951 = !DILocation(line: 906, column: 10, scope: !6943)
!6952 = !DILocation(line: 905, column: 11, scope: !6943)
!6953 = !DILocation(line: 903, column: 11, scope: !6939)
!6954 = !DILocation(line: 907, column: 2, scope: !6943)
!6955 = !DILocation(line: 910, column: 39, scope: !6939)
!6956 = !DILocation(line: 910, column: 21, scope: !6939)
!6957 = !DILocation(line: 910, column: 19, scope: !6939)
!6958 = !DILocation(line: 911, column: 7, scope: !6939)
!6959 = !DILocation(line: 914, column: 11, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 914, column: 11)
!6961 = !DILocation(line: 914, column: 33, scope: !6960)
!6962 = !DILocation(line: 915, column: 4, scope: !6960)
!6963 = !DILocation(line: 915, column: 8, scope: !6960)
!6964 = !DILocation(line: 915, column: 33, scope: !6960)
!6965 = !DILocation(line: 915, column: 30, scope: !6960)
!6966 = !DILocation(line: 916, column: 8, scope: !6960)
!6967 = !DILocation(line: 916, column: 38, scope: !6960)
!6968 = !DILocation(line: 917, column: 10, scope: !6960)
!6969 = !DILocation(line: 916, column: 11, scope: !6960)
!6970 = !DILocation(line: 914, column: 11, scope: !6939)
!6971 = !DILocation(line: 918, column: 2, scope: !6960)
!6972 = !DILocation(line: 921, column: 39, scope: !6939)
!6973 = !DILocation(line: 921, column: 21, scope: !6939)
!6974 = !DILocation(line: 921, column: 19, scope: !6939)
!6975 = !DILocation(line: 922, column: 7, scope: !6939)
!6976 = !DILocation(line: 927, column: 7, scope: !6939)
!6977 = !DILocation(line: 931, column: 11, scope: !6978)
!6978 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 931, column: 11)
!6979 = !DILocation(line: 931, column: 33, scope: !6978)
!6980 = !DILocation(line: 932, column: 4, scope: !6978)
!6981 = !DILocation(line: 932, column: 8, scope: !6978)
!6982 = !DILocation(line: 932, column: 33, scope: !6978)
!6983 = !DILocation(line: 932, column: 30, scope: !6978)
!6984 = !DILocation(line: 933, column: 8, scope: !6978)
!6985 = !DILocation(line: 933, column: 38, scope: !6978)
!6986 = !DILocation(line: 934, column: 10, scope: !6978)
!6987 = !DILocation(line: 933, column: 11, scope: !6978)
!6988 = !DILocation(line: 931, column: 11, scope: !6939)
!6989 = !DILocation(line: 935, column: 2, scope: !6978)
!6990 = !DILocation(line: 936, column: 41, scope: !6939)
!6991 = !DILocation(line: 936, column: 21, scope: !6939)
!6992 = !DILocation(line: 936, column: 19, scope: !6939)
!6993 = !DILocation(line: 937, column: 7, scope: !6939)
!6994 = !DILocation(line: 940, column: 7, scope: !6939)
!6995 = !DILocation(line: 941, column: 5, scope: !6939)
!6996 = !DILocation(line: 943, column: 35, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 943, column: 7)
!6998 = !DILocation(line: 943, column: 48, scope: !6997)
!6999 = !DILocation(line: 943, column: 8, scope: !6997)
!7000 = !DILocation(line: 943, column: 7, scope: !6914)
!7001 = !DILocation(line: 944, column: 28, scope: !6997)
!7002 = !DILocation(line: 944, column: 5, scope: !6997)
!7003 = !DILocation(line: 944, column: 26, scope: !6997)
!7004 = !DILocation(line: 946, column: 1, scope: !6914)
!7005 = distinct !DISubprogram(name: "emit_label_in_global_context_p", scope: !591, file: !591, line: 1002, type: !7006, scopeLine: 1003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7006 = !DISubroutineType(types: !7007)
!7007 = !{!1807, !1688}
!7008 = !DILocalVariable(name: "label", arg: 1, scope: !7005, file: !591, line: 1002, type: !1688)
!7009 = !DILocation(line: 1002, column: 38, scope: !7005)
!7010 = !DILocation(line: 1004, column: 10, scope: !7005)
!7011 = !DILocation(line: 1004, column: 32, scope: !7005)
!7012 = !DILocation(line: 1004, column: 35, scope: !7005)
!7013 = !DILocation(line: 1004, column: 3, scope: !7005)
!7014 = distinct !DISubprogram(name: "gimple_label_label", scope: !682, file: !682, line: 2444, type: !7015, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7015 = !DISubroutineType(types: !7016)
!7016 = !{!1688, !5322}
!7017 = !DILocalVariable(name: "gs", arg: 1, scope: !7014, file: !682, line: 2444, type: !5322)
!7018 = !DILocation(line: 2444, column: 34, scope: !7014)
!7019 = !DILocation(line: 2447, column: 21, scope: !7014)
!7020 = !DILocation(line: 2447, column: 10, scope: !7014)
!7021 = !DILocation(line: 2447, column: 3, scope: !7014)
!7022 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !682, file: !682, line: 2591, type: !5320, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7023 = !DILocalVariable(name: "gs", arg: 1, scope: !7022, file: !682, line: 2591, type: !5322)
!7024 = !DILocation(line: 2591, column: 35, scope: !7022)
!7025 = !DILocation(line: 2594, column: 10, scope: !7022)
!7026 = !DILocation(line: 2594, column: 14, scope: !7022)
!7027 = !DILocation(line: 2594, column: 25, scope: !7022)
!7028 = !DILocation(line: 2594, column: 3, scope: !7022)
!7029 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !682, file: !682, line: 2652, type: !7030, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7030 = !DISubroutineType(types: !7031)
!7031 = !{!1688, !5322, !7}
!7032 = !DILocalVariable(name: "gs", arg: 1, scope: !7029, file: !682, line: 2652, type: !5322)
!7033 = !DILocation(line: 2652, column: 36, scope: !7029)
!7034 = !DILocalVariable(name: "index", arg: 2, scope: !7029, file: !682, line: 2652, type: !7)
!7035 = !DILocation(line: 2652, column: 49, scope: !7029)
!7036 = !DILocation(line: 2655, column: 3, scope: !7029)
!7037 = !DILocation(line: 2656, column: 21, scope: !7029)
!7038 = !DILocation(line: 2656, column: 25, scope: !7029)
!7039 = !DILocation(line: 2656, column: 33, scope: !7029)
!7040 = !DILocation(line: 2656, column: 37, scope: !7029)
!7041 = !DILocation(line: 2656, column: 48, scope: !7029)
!7042 = !DILocation(line: 2656, column: 31, scope: !7029)
!7043 = !DILocation(line: 2656, column: 10, scope: !7029)
!7044 = !DILocation(line: 2656, column: 3, scope: !7029)
!7045 = distinct !DISubprogram(name: "maybe_fixup_decls", scope: !3, file: !3, line: 953, type: !7046, scopeLine: 954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7046 = !DISubroutineType(types: !7047)
!7047 = !{null, !2017}
!7048 = !DILocalVariable(name: "stmt", arg: 1, scope: !7045, file: !3, line: 953, type: !2017)
!7049 = !DILocation(line: 953, column: 27, scope: !7045)
!7050 = !DILocation(line: 959, column: 31, scope: !7051)
!7051 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 959, column: 7)
!7052 = !DILocation(line: 959, column: 7, scope: !7051)
!7053 = !DILocation(line: 959, column: 7, scope: !7045)
!7054 = !DILocalVariable(name: "lhs", scope: !7055, file: !3, line: 961, type: !1688)
!7055 = distinct !DILexicalBlock(scope: !7051, file: !3, line: 960, column: 5)
!7056 = !DILocation(line: 961, column: 12, scope: !7055)
!7057 = !DILocation(line: 961, column: 37, scope: !7055)
!7058 = !DILocation(line: 961, column: 18, scope: !7055)
!7059 = !DILocalVariable(name: "rhs", scope: !7055, file: !3, line: 962, type: !1688)
!7060 = !DILocation(line: 962, column: 12, scope: !7055)
!7061 = !DILocation(line: 962, column: 38, scope: !7055)
!7062 = !DILocation(line: 962, column: 18, scope: !7055)
!7063 = !DILocation(line: 965, column: 11, scope: !7064)
!7064 = distinct !DILexicalBlock(scope: !7055, file: !3, line: 965, column: 11)
!7065 = !DILocation(line: 965, column: 27, scope: !7064)
!7066 = !DILocation(line: 965, column: 11, scope: !7055)
!7067 = !DILocation(line: 967, column: 36, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7069, file: !3, line: 967, column: 8)
!7069 = distinct !DILexicalBlock(scope: !7064, file: !3, line: 966, column: 2)
!7070 = !DILocation(line: 967, column: 53, scope: !7068)
!7071 = !DILocation(line: 967, column: 9, scope: !7068)
!7072 = !DILocation(line: 967, column: 8, scope: !7069)
!7073 = !DILocation(line: 968, column: 30, scope: !7068)
!7074 = !DILocation(line: 968, column: 36, scope: !7068)
!7075 = !DILocation(line: 968, column: 6, scope: !7068)
!7076 = !DILocation(line: 970, column: 2, scope: !7069)
!7077 = !DILocation(line: 972, column: 16, scope: !7078)
!7078 = distinct !DILexicalBlock(scope: !7064, file: !3, line: 972, column: 16)
!7079 = !DILocation(line: 972, column: 32, scope: !7078)
!7080 = !DILocation(line: 972, column: 16, scope: !7064)
!7081 = !DILocation(line: 974, column: 36, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7083, file: !3, line: 974, column: 8)
!7083 = distinct !DILexicalBlock(scope: !7078, file: !3, line: 973, column: 2)
!7084 = !DILocation(line: 974, column: 53, scope: !7082)
!7085 = !DILocation(line: 974, column: 9, scope: !7082)
!7086 = !DILocation(line: 974, column: 8, scope: !7083)
!7087 = !DILocation(line: 975, column: 29, scope: !7082)
!7088 = !DILocation(line: 975, column: 35, scope: !7082)
!7089 = !DILocation(line: 975, column: 6, scope: !7082)
!7090 = !DILocation(line: 977, column: 2, scope: !7083)
!7091 = !DILocation(line: 978, column: 5, scope: !7055)
!7092 = !DILocation(line: 979, column: 28, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7051, file: !3, line: 979, column: 12)
!7094 = !DILocation(line: 979, column: 12, scope: !7093)
!7095 = !DILocation(line: 979, column: 12, scope: !7051)
!7096 = !DILocalVariable(name: "lhs", scope: !7097, file: !3, line: 981, type: !1688)
!7097 = distinct !DILexicalBlock(scope: !7093, file: !3, line: 980, column: 5)
!7098 = !DILocation(line: 981, column: 12, scope: !7097)
!7099 = !DILocation(line: 981, column: 35, scope: !7097)
!7100 = !DILocation(line: 981, column: 18, scope: !7097)
!7101 = !DILocation(line: 983, column: 11, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7097, file: !3, line: 983, column: 11)
!7103 = !DILocation(line: 983, column: 15, scope: !7102)
!7104 = !DILocation(line: 983, column: 18, scope: !7102)
!7105 = !DILocation(line: 983, column: 34, scope: !7102)
!7106 = !DILocation(line: 983, column: 11, scope: !7097)
!7107 = !DILocation(line: 985, column: 36, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7109, file: !3, line: 985, column: 8)
!7109 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 984, column: 2)
!7110 = !DILocation(line: 986, column: 33, scope: !7108)
!7111 = !DILocation(line: 986, column: 8, scope: !7108)
!7112 = !DILocation(line: 985, column: 9, scope: !7108)
!7113 = !DILocation(line: 985, column: 8, scope: !7109)
!7114 = !DILocation(line: 987, column: 27, scope: !7108)
!7115 = !DILocation(line: 987, column: 33, scope: !7108)
!7116 = !DILocation(line: 987, column: 6, scope: !7108)
!7117 = !DILocation(line: 990, column: 2, scope: !7109)
!7118 = !DILocation(line: 993, column: 5, scope: !7097)
!7119 = !DILocation(line: 994, column: 1, scope: !7045)
!7120 = distinct !DISubprogram(name: "lto_tag_is_gimple_code_p", scope: !591, file: !591, line: 886, type: !7121, scopeLine: 887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7121 = !DISubroutineType(types: !7122)
!7122 = !{!1807, !616}
!7123 = !DILocalVariable(name: "tag", arg: 1, scope: !7120, file: !591, line: 886, type: !616)
!7124 = !DILocation(line: 886, column: 41, scope: !7120)
!7125 = !DILocation(line: 888, column: 21, scope: !7120)
!7126 = !DILocation(line: 888, column: 25, scope: !7120)
!7127 = !DILocation(line: 889, column: 3, scope: !7120)
!7128 = !DILocation(line: 889, column: 17, scope: !7120)
!7129 = !DILocation(line: 889, column: 21, scope: !7120)
!7130 = !DILocation(line: 0, scope: !7120)
!7131 = !DILocation(line: 888, column: 10, scope: !7120)
!7132 = !DILocation(line: 888, column: 3, scope: !7120)
!7133 = distinct !DISubprogram(name: "gimple_code", scope: !682, file: !682, line: 1052, type: !7134, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7134 = !DISubroutineType(types: !7135)
!7135 = !{!687, !5322}
!7136 = !DILocalVariable(name: "g", arg: 1, scope: !7133, file: !682, line: 1052, type: !5322)
!7137 = !DILocation(line: 1052, column: 27, scope: !7133)
!7138 = !DILocation(line: 1054, column: 10, scope: !7133)
!7139 = !DILocation(line: 1054, column: 13, scope: !7133)
!7140 = !DILocation(line: 1054, column: 20, scope: !7133)
!7141 = !DILocation(line: 1054, column: 3, scope: !7133)
!7142 = distinct !DISubprogram(name: "gimple_has_ops", scope: !682, file: !682, line: 1274, type: !6621, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7143 = !DILocalVariable(name: "g", arg: 1, scope: !7142, file: !682, line: 1274, type: !5322)
!7144 = !DILocation(line: 1274, column: 30, scope: !7142)
!7145 = !DILocation(line: 1276, column: 23, scope: !7142)
!7146 = !DILocation(line: 1276, column: 10, scope: !7142)
!7147 = !DILocation(line: 1276, column: 26, scope: !7142)
!7148 = !DILocation(line: 1276, column: 41, scope: !7142)
!7149 = !DILocation(line: 1276, column: 57, scope: !7142)
!7150 = !DILocation(line: 1276, column: 44, scope: !7142)
!7151 = !DILocation(line: 1276, column: 60, scope: !7142)
!7152 = !DILocation(line: 0, scope: !7142)
!7153 = !DILocation(line: 1276, column: 3, scope: !7142)
!7154 = distinct !DISubprogram(name: "gimple_num_ops", scope: !682, file: !682, line: 1596, type: !5320, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7155 = !DILocalVariable(name: "gs", arg: 1, scope: !7154, file: !682, line: 1596, type: !5322)
!7156 = !DILocation(line: 1596, column: 30, scope: !7154)
!7157 = !DILocation(line: 1598, column: 10, scope: !7154)
!7158 = !DILocation(line: 1598, column: 14, scope: !7154)
!7159 = !DILocation(line: 1598, column: 21, scope: !7154)
!7160 = !DILocation(line: 1598, column: 3, scope: !7154)
!7161 = distinct !DISubprogram(name: "gimple_ops", scope: !682, file: !682, line: 1614, type: !7162, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7162 = !DISubroutineType(types: !7163)
!7163 = !{!2052, !2017}
!7164 = !DILocalVariable(name: "gs", arg: 1, scope: !7161, file: !682, line: 1614, type: !2017)
!7165 = !DILocation(line: 1614, column: 20, scope: !7161)
!7166 = !DILocalVariable(name: "off", scope: !7161, file: !682, line: 1616, type: !2163)
!7167 = !DILocation(line: 1616, column: 10, scope: !7161)
!7168 = !DILocation(line: 1621, column: 56, scope: !7161)
!7169 = !DILocation(line: 1621, column: 28, scope: !7161)
!7170 = !DILocation(line: 1621, column: 9, scope: !7161)
!7171 = !DILocation(line: 1621, column: 7, scope: !7161)
!7172 = !DILocation(line: 1622, column: 3, scope: !7161)
!7173 = !DILocation(line: 1624, column: 29, scope: !7161)
!7174 = !DILocation(line: 1624, column: 20, scope: !7161)
!7175 = !DILocation(line: 1624, column: 34, scope: !7161)
!7176 = !DILocation(line: 1624, column: 32, scope: !7161)
!7177 = !DILocation(line: 1624, column: 10, scope: !7161)
!7178 = !DILocation(line: 1624, column: 3, scope: !7161)
!7179 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !682, file: !682, line: 1073, type: !7180, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7180 = !DISubroutineType(types: !7181)
!7181 = !{!725, !2017}
!7182 = !DILocalVariable(name: "gs", arg: 1, scope: !7179, file: !682, line: 1073, type: !2017)
!7183 = !DILocation(line: 1073, column: 36, scope: !7179)
!7184 = !DILocation(line: 1075, column: 37, scope: !7179)
!7185 = !DILocation(line: 1075, column: 24, scope: !7179)
!7186 = !DILocation(line: 1075, column: 10, scope: !7179)
!7187 = !DILocation(line: 1075, column: 3, scope: !7179)
!7188 = distinct !DISubprogram(name: "gss_for_code", scope: !682, file: !682, line: 1061, type: !7189, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7189 = !DISubroutineType(types: !7190)
!7190 = !{!725, !687}
!7191 = !DILocalVariable(name: "code", arg: 1, scope: !7188, file: !682, line: 1061, type: !687)
!7192 = !DILocation(line: 1061, column: 32, scope: !7188)
!7193 = !DILocation(line: 1066, column: 24, scope: !7188)
!7194 = !DILocation(line: 1066, column: 10, scope: !7188)
!7195 = !DILocation(line: 1066, column: 3, scope: !7188)
!7196 = distinct !DISubprogram(name: "gimple_op", scope: !682, file: !682, line: 1631, type: !7030, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7197 = !DILocalVariable(name: "gs", arg: 1, scope: !7196, file: !682, line: 1631, type: !5322)
!7198 = !DILocation(line: 1631, column: 25, scope: !7196)
!7199 = !DILocalVariable(name: "i", arg: 2, scope: !7196, file: !682, line: 1631, type: !7)
!7200 = !DILocation(line: 1631, column: 38, scope: !7196)
!7201 = !DILocation(line: 1633, column: 23, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7196, file: !682, line: 1633, column: 7)
!7203 = !DILocation(line: 1633, column: 7, scope: !7202)
!7204 = !DILocation(line: 1633, column: 7, scope: !7196)
!7205 = !DILocation(line: 1638, column: 26, scope: !7206)
!7206 = distinct !DILexicalBlock(scope: !7202, file: !682, line: 1634, column: 5)
!7207 = !DILocation(line: 1638, column: 14, scope: !7206)
!7208 = !DILocation(line: 1638, column: 50, scope: !7206)
!7209 = !DILocation(line: 1638, column: 7, scope: !7206)
!7210 = !DILocation(line: 1641, column: 5, scope: !7202)
!7211 = !DILocation(line: 1642, column: 1, scope: !7196)
!7212 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !682, file: !682, line: 1694, type: !7015, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7213 = !DILocalVariable(name: "gs", arg: 1, scope: !7212, file: !682, line: 1694, type: !5322)
!7214 = !DILocation(line: 1694, column: 33, scope: !7212)
!7215 = !DILocation(line: 1697, column: 21, scope: !7212)
!7216 = !DILocation(line: 1697, column: 10, scope: !7212)
!7217 = !DILocation(line: 1697, column: 3, scope: !7212)
!7218 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !682, file: !682, line: 1727, type: !7015, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7219 = !DILocalVariable(name: "gs", arg: 1, scope: !7218, file: !682, line: 1727, type: !5322)
!7220 = !DILocation(line: 1727, column: 34, scope: !7218)
!7221 = !DILocation(line: 1730, column: 21, scope: !7218)
!7222 = !DILocation(line: 1730, column: 10, scope: !7218)
!7223 = !DILocation(line: 1730, column: 3, scope: !7218)
!7224 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !682, file: !682, line: 1747, type: !6808, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7225 = !DILocalVariable(name: "gs", arg: 1, scope: !7224, file: !682, line: 1747, type: !2017)
!7226 = !DILocation(line: 1747, column: 32, scope: !7224)
!7227 = !DILocalVariable(name: "rhs", arg: 2, scope: !7224, file: !682, line: 1747, type: !1688)
!7228 = !DILocation(line: 1747, column: 41, scope: !7224)
!7229 = !DILocation(line: 1751, column: 18, scope: !7224)
!7230 = !DILocation(line: 1751, column: 25, scope: !7224)
!7231 = !DILocation(line: 1751, column: 3, scope: !7224)
!7232 = !DILocation(line: 1752, column: 1, scope: !7224)
!7233 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !682, file: !682, line: 1714, type: !6808, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7234 = !DILocalVariable(name: "gs", arg: 1, scope: !7233, file: !682, line: 1714, type: !2017)
!7235 = !DILocation(line: 1714, column: 31, scope: !7233)
!7236 = !DILocalVariable(name: "lhs", arg: 2, scope: !7233, file: !682, line: 1714, type: !1688)
!7237 = !DILocation(line: 1714, column: 40, scope: !7233)
!7238 = !DILocation(line: 1717, column: 18, scope: !7233)
!7239 = !DILocation(line: 1717, column: 25, scope: !7233)
!7240 = !DILocation(line: 1717, column: 3, scope: !7233)
!7241 = !DILocation(line: 1719, column: 7, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7233, file: !682, line: 1719, column: 7)
!7243 = !DILocation(line: 1719, column: 11, scope: !7242)
!7244 = !DILocation(line: 1719, column: 14, scope: !7242)
!7245 = !DILocation(line: 1719, column: 30, scope: !7242)
!7246 = !DILocation(line: 1719, column: 7, scope: !7233)
!7247 = !DILocation(line: 1720, column: 31, scope: !7242)
!7248 = !DILocation(line: 1720, column: 5, scope: !7242)
!7249 = !DILocation(line: 1720, column: 29, scope: !7242)
!7250 = !DILocation(line: 1721, column: 1, scope: !7233)
!7251 = distinct !DISubprogram(name: "is_gimple_call", scope: !682, file: !682, line: 1870, type: !6621, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7252 = !DILocalVariable(name: "gs", arg: 1, scope: !7251, file: !682, line: 1870, type: !5322)
!7253 = !DILocation(line: 1870, column: 30, scope: !7251)
!7254 = !DILocation(line: 1872, column: 23, scope: !7251)
!7255 = !DILocation(line: 1872, column: 10, scope: !7251)
!7256 = !DILocation(line: 1872, column: 27, scope: !7251)
!7257 = !DILocation(line: 1872, column: 3, scope: !7251)
!7258 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !682, file: !682, line: 1878, type: !7015, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7259 = !DILocalVariable(name: "gs", arg: 1, scope: !7258, file: !682, line: 1878, type: !5322)
!7260 = !DILocation(line: 1878, column: 31, scope: !7258)
!7261 = !DILocation(line: 1881, column: 21, scope: !7258)
!7262 = !DILocation(line: 1881, column: 10, scope: !7258)
!7263 = !DILocation(line: 1881, column: 3, scope: !7258)
!7264 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !682, file: !682, line: 1966, type: !7015, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7265 = !DILocalVariable(name: "gs", arg: 1, scope: !7264, file: !682, line: 1966, type: !5322)
!7266 = !DILocation(line: 1966, column: 39, scope: !7264)
!7267 = !DILocalVariable(name: "fn", scope: !7264, file: !682, line: 1968, type: !1688)
!7268 = !DILocation(line: 1968, column: 8, scope: !7264)
!7269 = !DILocation(line: 1968, column: 29, scope: !7264)
!7270 = !DILocation(line: 1968, column: 13, scope: !7264)
!7271 = !DILocalVariable(name: "type", scope: !7264, file: !682, line: 1969, type: !1688)
!7272 = !DILocation(line: 1969, column: 8, scope: !7264)
!7273 = !DILocation(line: 1969, column: 15, scope: !7264)
!7274 = !DILocation(line: 1972, column: 10, scope: !7264)
!7275 = !DILocation(line: 1972, column: 8, scope: !7264)
!7276 = !DILocation(line: 1976, column: 10, scope: !7264)
!7277 = !DILocation(line: 1976, column: 3, scope: !7264)
!7278 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !682, file: !682, line: 1898, type: !6808, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7279 = !DILocalVariable(name: "gs", arg: 1, scope: !7278, file: !682, line: 1898, type: !2017)
!7280 = !DILocation(line: 1898, column: 29, scope: !7278)
!7281 = !DILocalVariable(name: "lhs", arg: 2, scope: !7278, file: !682, line: 1898, type: !1688)
!7282 = !DILocation(line: 1898, column: 38, scope: !7278)
!7283 = !DILocation(line: 1901, column: 18, scope: !7278)
!7284 = !DILocation(line: 1901, column: 25, scope: !7278)
!7285 = !DILocation(line: 1901, column: 3, scope: !7278)
!7286 = !DILocation(line: 1902, column: 7, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7278, file: !682, line: 1902, column: 7)
!7288 = !DILocation(line: 1902, column: 11, scope: !7287)
!7289 = !DILocation(line: 1902, column: 14, scope: !7287)
!7290 = !DILocation(line: 1902, column: 30, scope: !7287)
!7291 = !DILocation(line: 1902, column: 7, scope: !7278)
!7292 = !DILocation(line: 1903, column: 31, scope: !7287)
!7293 = !DILocation(line: 1903, column: 5, scope: !7287)
!7294 = !DILocation(line: 1903, column: 29, scope: !7287)
!7295 = !DILocation(line: 1904, column: 1, scope: !7278)
!7296 = distinct !DISubprogram(name: "gimple_call_fn", scope: !682, file: !682, line: 1911, type: !7015, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7297 = !DILocalVariable(name: "gs", arg: 1, scope: !7296, file: !682, line: 1911, type: !5322)
!7298 = !DILocation(line: 1911, column: 30, scope: !7296)
!7299 = !DILocation(line: 1914, column: 21, scope: !7296)
!7300 = !DILocation(line: 1914, column: 10, scope: !7296)
!7301 = !DILocation(line: 1914, column: 3, scope: !7296)
!7302 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !7303, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7303 = !DISubroutineType(types: !7304)
!7304 = !{!1688, !5464, !7}
!7305 = !DILocalVariable(name: "vec_", arg: 1, scope: !7302, file: !135, line: 182, type: !5464)
!7306 = !DILocation(line: 182, column: 1, scope: !7302)
!7307 = !DILocalVariable(name: "ix_", arg: 2, scope: !7302, file: !135, line: 182, type: !7)
!7308 = !DILocation(line: 0, scope: !7302)
!7309 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !337, file: !337, line: 150, type: !7310, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7310 = !DISubroutineType(types: !7311)
!7311 = !{!7, !7312}
!7312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7313, size: 64)
!7313 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1990)
!7314 = !DILocalVariable(name: "vec_", arg: 1, scope: !7309, file: !337, line: 150, type: !7312)
!7315 = !DILocation(line: 150, column: 1, scope: !7309)
!7316 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !337, file: !337, line: 150, type: !7317, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7317 = !DISubroutineType(types: !7318)
!7318 = !{!1997, !7312, !7}
!7319 = !DILocalVariable(name: "vec_", arg: 1, scope: !7316, file: !337, line: 150, type: !7312)
!7320 = !DILocation(line: 150, column: 1, scope: !7316)
!7321 = !DILocalVariable(name: "ix_", arg: 2, scope: !7316, file: !337, line: 150, type: !7)
!7322 = !DILocation(line: 0, scope: !7316)
!7323 = distinct !DISubprogram(name: "gimple_seq_first", scope: !682, file: !682, line: 159, type: !7324, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7324 = !DISubroutineType(types: !7325)
!7325 = !{!2012, !7326}
!7326 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1678, line: 67, baseType: !7327)
!7327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7328, size: 64)
!7328 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2009)
!7329 = !DILocalVariable(name: "s", arg: 1, scope: !7323, file: !682, line: 159, type: !7326)
!7330 = !DILocation(line: 159, column: 36, scope: !7323)
!7331 = !DILocation(line: 161, column: 10, scope: !7323)
!7332 = !DILocation(line: 161, column: 14, scope: !7323)
!7333 = !DILocation(line: 161, column: 17, scope: !7323)
!7334 = !DILocation(line: 161, column: 3, scope: !7323)
!7335 = distinct !DISubprogram(name: "ei_container", scope: !337, file: !337, line: 685, type: !7336, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7336 = !DISubroutineType(types: !7337)
!7337 = !{!1985, !4655}
!7338 = !DILocalVariable(name: "i", arg: 1, scope: !7335, file: !337, line: 685, type: !4655)
!7339 = !DILocation(line: 685, column: 29, scope: !7335)
!7340 = !DILocation(line: 687, column: 3, scope: !7335)
!7341 = !DILocation(line: 688, column: 13, scope: !7335)
!7342 = !DILocation(line: 688, column: 10, scope: !7335)
!7343 = !DILocation(line: 688, column: 3, scope: !7335)
!7344 = distinct !DISubprogram(name: "fixup_call_stmt_edges_1", scope: !3, file: !3, line: 1242, type: !3266, scopeLine: 1243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7345 = !DILocalVariable(name: "node", arg: 1, scope: !7344, file: !3, line: 1242, type: !3157)
!7346 = !DILocation(line: 1242, column: 46, scope: !7344)
!7347 = !DILocalVariable(name: "stmts", arg: 2, scope: !7344, file: !3, line: 1242, type: !3268)
!7348 = !DILocation(line: 1242, column: 60, scope: !7344)
!7349 = !DILocalVariable(name: "cedge", scope: !7344, file: !3, line: 1244, type: !3162)
!7350 = !DILocation(line: 1244, column: 23, scope: !7344)
!7351 = !DILocation(line: 1245, column: 16, scope: !7352)
!7352 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 1245, column: 3)
!7353 = !DILocation(line: 1245, column: 22, scope: !7352)
!7354 = !DILocation(line: 1245, column: 14, scope: !7352)
!7355 = !DILocation(line: 1245, column: 8, scope: !7352)
!7356 = !DILocation(line: 1245, column: 31, scope: !7357)
!7357 = distinct !DILexicalBlock(scope: !7352, file: !3, line: 1245, column: 3)
!7358 = !DILocation(line: 1245, column: 3, scope: !7352)
!7359 = !DILocation(line: 1246, column: 24, scope: !7357)
!7360 = !DILocation(line: 1246, column: 30, scope: !7357)
!7361 = !DILocation(line: 1246, column: 37, scope: !7357)
!7362 = !DILocation(line: 1246, column: 5, scope: !7357)
!7363 = !DILocation(line: 1246, column: 12, scope: !7357)
!7364 = !DILocation(line: 1246, column: 22, scope: !7357)
!7365 = !DILocation(line: 1245, column: 46, scope: !7357)
!7366 = !DILocation(line: 1245, column: 53, scope: !7357)
!7367 = !DILocation(line: 1245, column: 44, scope: !7357)
!7368 = !DILocation(line: 1245, column: 3, scope: !7357)
!7369 = distinct !{!7369, !7358, !7370}
!7370 = !DILocation(line: 1246, column: 49, scope: !7352)
!7371 = !DILocation(line: 1247, column: 1, scope: !7344)
!7372 = distinct !DISubprogram(name: "VEC_alias_pair_gc_safe_push", scope: !135, file: !135, line: 198, type: !7373, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7373 = !DISubroutineType(types: !7374)
!7374 = !{!4715, !7375, !7376}
!7375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3457, size: 64)
!7376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7377, size: 64)
!7377 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3469)
!7378 = !DILocalVariable(name: "vec_", arg: 1, scope: !7372, file: !135, line: 198, type: !7375)
!7379 = !DILocation(line: 198, column: 1, scope: !7372)
!7380 = !DILocalVariable(name: "obj_", arg: 2, scope: !7372, file: !135, line: 198, type: !7376)
!7381 = distinct !DISubprogram(name: "VEC_alias_pair_gc_reserve", scope: !135, file: !135, line: 198, type: !7382, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7382 = !DISubroutineType(types: !7383)
!7383 = !{!1784, !7375, !1784}
!7384 = !DILocalVariable(name: "vec_", arg: 1, scope: !7381, file: !135, line: 198, type: !7375)
!7385 = !DILocation(line: 198, column: 1, scope: !7381)
!7386 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7381, file: !135, line: 198, type: !1784)
!7387 = !DILocalVariable(name: "extend", scope: !7381, file: !135, line: 198, type: !1784)
!7388 = !DILocation(line: 198, column: 1, scope: !7389)
!7389 = distinct !DILexicalBlock(scope: !7381, file: !135, line: 198, column: 1)
!7390 = distinct !DISubprogram(name: "VEC_alias_pair_base_quick_push", scope: !135, file: !135, line: 197, type: !7391, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7391 = !DISubroutineType(types: !7392)
!7392 = !{!4715, !7393, !7376}
!7393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3462, size: 64)
!7394 = !DILocalVariable(name: "vec_", arg: 1, scope: !7390, file: !135, line: 197, type: !7393)
!7395 = !DILocation(line: 197, column: 1, scope: !7390)
!7396 = !DILocalVariable(name: "obj_", arg: 2, scope: !7390, file: !135, line: 197, type: !7376)
!7397 = !DILocalVariable(name: "slot_", scope: !7390, file: !135, line: 197, type: !4715)
!7398 = !DILocation(line: 197, column: 1, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7390, file: !135, line: 197, column: 1)
!7400 = distinct !DISubprogram(name: "VEC_alias_pair_base_space", scope: !135, file: !135, line: 197, type: !7401, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7401 = !DISubroutineType(types: !7402)
!7402 = !{!1784, !7393, !1784}
!7403 = !DILocalVariable(name: "vec_", arg: 1, scope: !7400, file: !135, line: 197, type: !7393)
!7404 = !DILocation(line: 197, column: 1, scope: !7400)
!7405 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7400, file: !135, line: 197, type: !1784)
!7406 = distinct !DISubprogram(name: "VEC_bitpack_word_t_heap_reserve", scope: !591, file: !591, line: 154, type: !7407, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7407 = !DISubroutineType(types: !7408)
!7408 = !{!1784, !3687, !1784}
!7409 = !DILocalVariable(name: "vec_", arg: 1, scope: !7406, file: !591, line: 154, type: !3687)
!7410 = !DILocation(line: 154, column: 1, scope: !7406)
!7411 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7406, file: !591, line: 154, type: !1784)
!7412 = !DILocalVariable(name: "extend", scope: !7406, file: !591, line: 154, type: !1784)
!7413 = !DILocation(line: 154, column: 1, scope: !7414)
!7414 = distinct !DILexicalBlock(scope: !7406, file: !591, line: 154, column: 1)
!7415 = distinct !DISubprogram(name: "VEC_bitpack_word_t_base_quick_push", scope: !591, file: !591, line: 153, type: !7416, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7416 = !DISubroutineType(types: !7417)
!7417 = !{!3686, !7418, !3486}
!7418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3479, size: 64)
!7419 = !DILocalVariable(name: "vec_", arg: 1, scope: !7415, file: !591, line: 153, type: !7418)
!7420 = !DILocation(line: 153, column: 1, scope: !7415)
!7421 = !DILocalVariable(name: "obj_", arg: 2, scope: !7415, file: !591, line: 153, type: !3486)
!7422 = !DILocalVariable(name: "slot_", scope: !7415, file: !591, line: 153, type: !3686)
!7423 = distinct !DISubprogram(name: "VEC_bitpack_word_t_base_space", scope: !591, file: !591, line: 153, type: !7424, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7424 = !DISubroutineType(types: !7425)
!7425 = !{!1784, !7418, !1784}
!7426 = !DILocalVariable(name: "vec_", arg: 1, scope: !7423, file: !591, line: 153, type: !7418)
!7427 = !DILocation(line: 153, column: 1, scope: !7423)
!7428 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7423, file: !591, line: 153, type: !1784)
!7429 = distinct !DISubprogram(name: "lto_file_decl_data_get_type", scope: !591, file: !591, line: 1041, type: !4029, scopeLine: 1041, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7430 = !DILocalVariable(name: "data", arg: 1, scope: !7429, file: !591, line: 1041, type: !3120)
!7431 = !DILocation(line: 1041, column: 1, scope: !7429)
!7432 = !DILocalVariable(name: "idx", arg: 2, scope: !7429, file: !591, line: 1041, type: !7)
!7433 = !DILocalVariable(name: "state", scope: !7429, file: !591, line: 1041, type: !3124)
!7434 = distinct !DISubprogram(name: "lto_file_decl_data_get_field_decl", scope: !591, file: !591, line: 1042, type: !4029, scopeLine: 1042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7435 = !DILocalVariable(name: "data", arg: 1, scope: !7434, file: !591, line: 1042, type: !3120)
!7436 = !DILocation(line: 1042, column: 1, scope: !7434)
!7437 = !DILocalVariable(name: "idx", arg: 2, scope: !7434, file: !591, line: 1042, type: !7)
!7438 = !DILocalVariable(name: "state", scope: !7434, file: !591, line: 1042, type: !3124)
!7439 = distinct !DISubprogram(name: "lto_file_decl_data_get_fn_decl", scope: !591, file: !591, line: 1043, type: !4029, scopeLine: 1043, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7440 = !DILocalVariable(name: "data", arg: 1, scope: !7439, file: !591, line: 1043, type: !3120)
!7441 = !DILocation(line: 1043, column: 1, scope: !7439)
!7442 = !DILocalVariable(name: "idx", arg: 2, scope: !7439, file: !591, line: 1043, type: !7)
!7443 = !DILocalVariable(name: "state", scope: !7439, file: !591, line: 1043, type: !3124)
!7444 = distinct !DISubprogram(name: "lto_file_decl_data_get_type_decl", scope: !591, file: !591, line: 1045, type: !4029, scopeLine: 1045, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7445 = !DILocalVariable(name: "data", arg: 1, scope: !7444, file: !591, line: 1045, type: !3120)
!7446 = !DILocation(line: 1045, column: 1, scope: !7444)
!7447 = !DILocalVariable(name: "idx", arg: 2, scope: !7444, file: !591, line: 1045, type: !7)
!7448 = !DILocalVariable(name: "state", scope: !7444, file: !591, line: 1045, type: !3124)
!7449 = distinct !DISubprogram(name: "lto_file_decl_data_get_namespace_decl", scope: !591, file: !591, line: 1046, type: !4029, scopeLine: 1046, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7450 = !DILocalVariable(name: "data", arg: 1, scope: !7449, file: !591, line: 1046, type: !3120)
!7451 = !DILocation(line: 1046, column: 1, scope: !7449)
!7452 = !DILocalVariable(name: "idx", arg: 2, scope: !7449, file: !591, line: 1046, type: !7)
!7453 = !DILocalVariable(name: "state", scope: !7449, file: !591, line: 1046, type: !3124)
!7454 = distinct !DISubprogram(name: "lto_tag_to_tree_code", scope: !591, file: !591, line: 924, type: !7455, scopeLine: 925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7455 = !DISubroutineType(types: !7456)
!7456 = !{!134, !616}
!7457 = !DILocalVariable(name: "tag", arg: 1, scope: !7454, file: !591, line: 924, type: !616)
!7458 = !DILocation(line: 924, column: 37, scope: !7454)
!7459 = !DILocation(line: 926, column: 3, scope: !7454)
!7460 = !DILocation(line: 927, column: 39, scope: !7454)
!7461 = !DILocation(line: 927, column: 43, scope: !7454)
!7462 = !DILocation(line: 927, column: 3, scope: !7454)
!7463 = distinct !DISubprogram(name: "lto_tag_is_tree_code_p", scope: !591, file: !591, line: 878, type: !7121, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7464 = !DILocalVariable(name: "tag", arg: 1, scope: !7463, file: !591, line: 878, type: !616)
!7465 = !DILocation(line: 878, column: 39, scope: !7463)
!7466 = !DILocation(line: 880, column: 10, scope: !7463)
!7467 = !DILocation(line: 880, column: 14, scope: !7463)
!7468 = !DILocation(line: 880, column: 25, scope: !7463)
!7469 = !DILocation(line: 880, column: 39, scope: !7463)
!7470 = !DILocation(line: 880, column: 43, scope: !7463)
!7471 = !DILocation(line: 0, scope: !7463)
!7472 = !DILocation(line: 880, column: 3, scope: !7463)
!7473 = distinct !DISubprogram(name: "lto_materialize_tree", scope: !3, file: !3, line: 1884, type: !7474, scopeLine: 1886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7474 = !DISubroutineType(types: !7475)
!7475 = !{!1688, !3647, !3116, !616, !7476}
!7476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1784, size: 64)
!7477 = !DILocalVariable(name: "ib", arg: 1, scope: !7473, file: !3, line: 1884, type: !3647)
!7478 = !DILocation(line: 1884, column: 47, scope: !7473)
!7479 = !DILocalVariable(name: "data_in", arg: 2, scope: !7473, file: !3, line: 1884, type: !3116)
!7480 = !DILocation(line: 1884, column: 67, scope: !7473)
!7481 = !DILocalVariable(name: "tag", arg: 3, scope: !7473, file: !3, line: 1885, type: !616)
!7482 = !DILocation(line: 1885, column: 23, scope: !7473)
!7483 = !DILocalVariable(name: "ix_p", arg: 4, scope: !7473, file: !3, line: 1885, type: !7476)
!7484 = !DILocation(line: 1885, column: 33, scope: !7473)
!7485 = !DILocalVariable(name: "bp", scope: !7473, file: !3, line: 1887, type: !3641)
!7486 = !DILocation(line: 1887, column: 21, scope: !7473)
!7487 = !DILocalVariable(name: "code", scope: !7473, file: !3, line: 1888, type: !134)
!7488 = !DILocation(line: 1888, column: 18, scope: !7473)
!7489 = !DILocalVariable(name: "result", scope: !7473, file: !3, line: 1889, type: !1688)
!7490 = !DILocation(line: 1889, column: 8, scope: !7473)
!7491 = !DILocalVariable(name: "ix", scope: !7473, file: !3, line: 1893, type: !1743)
!7492 = !DILocation(line: 1893, column: 17, scope: !7473)
!7493 = !DILocation(line: 1895, column: 10, scope: !7473)
!7494 = !DILocation(line: 1898, column: 27, scope: !7473)
!7495 = !DILocation(line: 1898, column: 8, scope: !7473)
!7496 = !DILocation(line: 1898, column: 6, scope: !7473)
!7497 = !DILocation(line: 1899, column: 3, scope: !7473)
!7498 = !DILocation(line: 1900, column: 17, scope: !7473)
!7499 = !DILocation(line: 1900, column: 11, scope: !7473)
!7500 = !DILocation(line: 1900, column: 4, scope: !7473)
!7501 = !DILocation(line: 1900, column: 9, scope: !7473)
!7502 = !DILocation(line: 1910, column: 32, scope: !7473)
!7503 = !DILocation(line: 1910, column: 10, scope: !7473)
!7504 = !DILocation(line: 1910, column: 8, scope: !7473)
!7505 = !DILocation(line: 1914, column: 3, scope: !7473)
!7506 = !DILocation(line: 1917, column: 7, scope: !7507)
!7507 = distinct !DILexicalBlock(scope: !7473, file: !3, line: 1917, column: 7)
!7508 = !DILocation(line: 1917, column: 7, scope: !7473)
!7509 = !DILocation(line: 1918, column: 32, scope: !7507)
!7510 = !DILocation(line: 1918, column: 41, scope: !7507)
!7511 = !DILocation(line: 1918, column: 14, scope: !7507)
!7512 = !DILocation(line: 1918, column: 12, scope: !7507)
!7513 = !DILocation(line: 1918, column: 5, scope: !7507)
!7514 = !DILocation(line: 1919, column: 12, scope: !7515)
!7515 = distinct !DILexicalBlock(scope: !7507, file: !3, line: 1919, column: 12)
!7516 = !DILocation(line: 1919, column: 12, scope: !7507)
!7517 = !DILocation(line: 1920, column: 32, scope: !7515)
!7518 = !DILocation(line: 1920, column: 41, scope: !7515)
!7519 = !DILocation(line: 1920, column: 14, scope: !7515)
!7520 = !DILocation(line: 1920, column: 12, scope: !7515)
!7521 = !DILocation(line: 1920, column: 5, scope: !7515)
!7522 = !DILocation(line: 1921, column: 12, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7515, file: !3, line: 1921, column: 12)
!7524 = !DILocation(line: 1921, column: 12, scope: !7515)
!7525 = !DILocalVariable(name: "len", scope: !7526, file: !3, line: 1923, type: !1743)
!7526 = distinct !DILexicalBlock(scope: !7523, file: !3, line: 1922, column: 5)
!7527 = !DILocation(line: 1923, column: 21, scope: !7526)
!7528 = !DILocation(line: 1923, column: 46, scope: !7526)
!7529 = !DILocation(line: 1923, column: 27, scope: !7526)
!7530 = !DILocation(line: 1924, column: 16, scope: !7526)
!7531 = !DILocation(line: 1924, column: 14, scope: !7526)
!7532 = !DILocation(line: 1925, column: 5, scope: !7526)
!7533 = !DILocation(line: 1926, column: 12, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7523, file: !3, line: 1926, column: 12)
!7535 = !DILocation(line: 1926, column: 12, scope: !7523)
!7536 = !DILocalVariable(name: "len", scope: !7537, file: !3, line: 1928, type: !1741)
!7537 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 1927, column: 5)
!7538 = !DILocation(line: 1928, column: 30, scope: !7537)
!7539 = !DILocation(line: 1928, column: 55, scope: !7537)
!7540 = !DILocation(line: 1928, column: 36, scope: !7537)
!7541 = !DILocation(line: 1929, column: 16, scope: !7537)
!7542 = !DILocation(line: 1929, column: 14, scope: !7537)
!7543 = !DILocation(line: 1930, column: 5, scope: !7537)
!7544 = !DILocation(line: 1935, column: 16, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 1932, column: 5)
!7546 = !DILocation(line: 1935, column: 14, scope: !7545)
!7547 = !DILocation(line: 1948, column: 27, scope: !7473)
!7548 = !DILocation(line: 1948, column: 8, scope: !7473)
!7549 = !DILocation(line: 1948, column: 6, scope: !7473)
!7550 = !DILocation(line: 1952, column: 44, scope: !7473)
!7551 = !DILocation(line: 1952, column: 27, scope: !7473)
!7552 = !DILocation(line: 1952, column: 10, scope: !7473)
!7553 = !DILocation(line: 1952, column: 8, scope: !7473)
!7554 = !DILocation(line: 1953, column: 40, scope: !7473)
!7555 = !DILocation(line: 1953, column: 18, scope: !7473)
!7556 = !DILocation(line: 1953, column: 47, scope: !7473)
!7557 = !DILocation(line: 1953, column: 3, scope: !7473)
!7558 = !DILocation(line: 1956, column: 24, scope: !7473)
!7559 = !DILocation(line: 1956, column: 28, scope: !7473)
!7560 = !DILocation(line: 1956, column: 3, scope: !7473)
!7561 = !DILocation(line: 1957, column: 19, scope: !7473)
!7562 = !DILocation(line: 1957, column: 3, scope: !7473)
!7563 = !DILocation(line: 1962, column: 33, scope: !7473)
!7564 = !DILocation(line: 1962, column: 42, scope: !7473)
!7565 = !DILocation(line: 1962, column: 56, scope: !7473)
!7566 = !DILocation(line: 1962, column: 64, scope: !7473)
!7567 = !DILocation(line: 1962, column: 3, scope: !7473)
!7568 = !DILocation(line: 1964, column: 10, scope: !7473)
!7569 = !DILocation(line: 1964, column: 3, scope: !7473)
!7570 = distinct !DISubprogram(name: "lto_input_tree_pointers", scope: !3, file: !3, line: 2343, type: !7571, scopeLine: 2345, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7571 = !DISubroutineType(types: !7572)
!7572 = !{null, !3647, !3116, !1688}
!7573 = !DILocalVariable(name: "ib", arg: 1, scope: !7570, file: !3, line: 2343, type: !3647)
!7574 = !DILocation(line: 2343, column: 50, scope: !7570)
!7575 = !DILocalVariable(name: "data_in", arg: 2, scope: !7570, file: !3, line: 2343, type: !3116)
!7576 = !DILocation(line: 2343, column: 70, scope: !7570)
!7577 = !DILocalVariable(name: "expr", arg: 3, scope: !7570, file: !3, line: 2344, type: !1688)
!7578 = !DILocation(line: 2344, column: 10, scope: !7570)
!7579 = !DILocalVariable(name: "code", scope: !7570, file: !3, line: 2346, type: !134)
!7580 = !DILocation(line: 2346, column: 18, scope: !7570)
!7581 = !DILocation(line: 2348, column: 10, scope: !7570)
!7582 = !DILocation(line: 2348, column: 8, scope: !7570)
!7583 = !DILocation(line: 2350, column: 7, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2350, column: 7)
!7585 = !DILocation(line: 2350, column: 7, scope: !7570)
!7586 = !DILocation(line: 2351, column: 40, scope: !7584)
!7587 = !DILocation(line: 2351, column: 44, scope: !7584)
!7588 = !DILocation(line: 2351, column: 53, scope: !7584)
!7589 = !DILocation(line: 2351, column: 5, scope: !7584)
!7590 = !DILocation(line: 2353, column: 7, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2353, column: 7)
!7592 = !DILocation(line: 2353, column: 7, scope: !7570)
!7593 = !DILocation(line: 2354, column: 40, scope: !7591)
!7594 = !DILocation(line: 2354, column: 44, scope: !7591)
!7595 = !DILocation(line: 2354, column: 53, scope: !7591)
!7596 = !DILocation(line: 2354, column: 5, scope: !7591)
!7597 = !DILocation(line: 2356, column: 7, scope: !7598)
!7598 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2356, column: 7)
!7599 = !DILocation(line: 2356, column: 7, scope: !7570)
!7600 = !DILocation(line: 2357, column: 41, scope: !7598)
!7601 = !DILocation(line: 2357, column: 45, scope: !7598)
!7602 = !DILocation(line: 2357, column: 54, scope: !7598)
!7603 = !DILocation(line: 2357, column: 5, scope: !7598)
!7604 = !DILocation(line: 2359, column: 7, scope: !7605)
!7605 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2359, column: 7)
!7606 = !DILocation(line: 2359, column: 7, scope: !7570)
!7607 = !DILocation(line: 2360, column: 46, scope: !7605)
!7608 = !DILocation(line: 2360, column: 50, scope: !7605)
!7609 = !DILocation(line: 2360, column: 59, scope: !7605)
!7610 = !DILocation(line: 2360, column: 5, scope: !7605)
!7611 = !DILocation(line: 2362, column: 7, scope: !7612)
!7612 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2362, column: 7)
!7613 = !DILocation(line: 2362, column: 7, scope: !7570)
!7614 = !DILocation(line: 2363, column: 45, scope: !7612)
!7615 = !DILocation(line: 2363, column: 49, scope: !7612)
!7616 = !DILocation(line: 2363, column: 58, scope: !7612)
!7617 = !DILocation(line: 2363, column: 5, scope: !7612)
!7618 = !DILocation(line: 2365, column: 7, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2365, column: 7)
!7620 = !DILocation(line: 2365, column: 7, scope: !7570)
!7621 = !DILocation(line: 2366, column: 49, scope: !7619)
!7622 = !DILocation(line: 2366, column: 53, scope: !7619)
!7623 = !DILocation(line: 2366, column: 62, scope: !7619)
!7624 = !DILocation(line: 2366, column: 5, scope: !7619)
!7625 = !DILocation(line: 2368, column: 7, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2368, column: 7)
!7627 = !DILocation(line: 2368, column: 7, scope: !7570)
!7628 = !DILocation(line: 2369, column: 47, scope: !7626)
!7629 = !DILocation(line: 2369, column: 51, scope: !7626)
!7630 = !DILocation(line: 2369, column: 60, scope: !7626)
!7631 = !DILocation(line: 2369, column: 5, scope: !7626)
!7632 = !DILocation(line: 2371, column: 7, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2371, column: 7)
!7634 = !DILocation(line: 2371, column: 7, scope: !7570)
!7635 = !DILocation(line: 2372, column: 44, scope: !7633)
!7636 = !DILocation(line: 2372, column: 48, scope: !7633)
!7637 = !DILocation(line: 2372, column: 57, scope: !7633)
!7638 = !DILocation(line: 2372, column: 5, scope: !7633)
!7639 = !DILocation(line: 2374, column: 7, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2374, column: 7)
!7641 = !DILocation(line: 2374, column: 7, scope: !7570)
!7642 = !DILocation(line: 2375, column: 47, scope: !7640)
!7643 = !DILocation(line: 2375, column: 51, scope: !7640)
!7644 = !DILocation(line: 2375, column: 60, scope: !7640)
!7645 = !DILocation(line: 2375, column: 5, scope: !7640)
!7646 = !DILocation(line: 2377, column: 7, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2377, column: 7)
!7648 = !DILocation(line: 2377, column: 7, scope: !7570)
!7649 = !DILocation(line: 2378, column: 38, scope: !7647)
!7650 = !DILocation(line: 2378, column: 42, scope: !7647)
!7651 = !DILocation(line: 2378, column: 51, scope: !7647)
!7652 = !DILocation(line: 2378, column: 5, scope: !7647)
!7653 = !DILocation(line: 2380, column: 7, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2380, column: 7)
!7655 = !DILocation(line: 2380, column: 7, scope: !7570)
!7656 = !DILocation(line: 2381, column: 38, scope: !7654)
!7657 = !DILocation(line: 2381, column: 42, scope: !7654)
!7658 = !DILocation(line: 2381, column: 51, scope: !7654)
!7659 = !DILocation(line: 2381, column: 5, scope: !7654)
!7660 = !DILocation(line: 2383, column: 7, scope: !7661)
!7661 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2383, column: 7)
!7662 = !DILocation(line: 2383, column: 7, scope: !7570)
!7663 = !DILocation(line: 2384, column: 37, scope: !7661)
!7664 = !DILocation(line: 2384, column: 41, scope: !7661)
!7665 = !DILocation(line: 2384, column: 50, scope: !7661)
!7666 = !DILocation(line: 2384, column: 5, scope: !7661)
!7667 = !DILocation(line: 2386, column: 7, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2386, column: 7)
!7669 = !DILocation(line: 2386, column: 7, scope: !7570)
!7670 = !DILocation(line: 2387, column: 37, scope: !7668)
!7671 = !DILocation(line: 2387, column: 41, scope: !7668)
!7672 = !DILocation(line: 2387, column: 50, scope: !7668)
!7673 = !DILocation(line: 2387, column: 5, scope: !7668)
!7674 = !DILocation(line: 2389, column: 7, scope: !7675)
!7675 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2389, column: 7)
!7676 = !DILocation(line: 2389, column: 7, scope: !7570)
!7677 = !DILocation(line: 2392, column: 7, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7675, file: !3, line: 2390, column: 5)
!7679 = !DILocation(line: 2393, column: 5, scope: !7678)
!7680 = !DILocation(line: 2395, column: 7, scope: !7681)
!7681 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2395, column: 7)
!7682 = !DILocation(line: 2395, column: 7, scope: !7570)
!7683 = !DILocation(line: 2396, column: 39, scope: !7681)
!7684 = !DILocation(line: 2396, column: 43, scope: !7681)
!7685 = !DILocation(line: 2396, column: 52, scope: !7681)
!7686 = !DILocation(line: 2396, column: 5, scope: !7681)
!7687 = !DILocation(line: 2398, column: 7, scope: !7688)
!7688 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2398, column: 7)
!7689 = !DILocation(line: 2398, column: 7, scope: !7570)
!7690 = !DILocation(line: 2399, column: 39, scope: !7688)
!7691 = !DILocation(line: 2399, column: 43, scope: !7688)
!7692 = !DILocation(line: 2399, column: 52, scope: !7688)
!7693 = !DILocation(line: 2399, column: 5, scope: !7688)
!7694 = !DILocation(line: 2401, column: 7, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2401, column: 7)
!7696 = !DILocation(line: 2401, column: 7, scope: !7570)
!7697 = !DILocation(line: 2404, column: 7, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 2402, column: 5)
!7699 = !DILocation(line: 2405, column: 5, scope: !7698)
!7700 = !DILocation(line: 2407, column: 7, scope: !7701)
!7701 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2407, column: 7)
!7702 = !DILocation(line: 2407, column: 7, scope: !7570)
!7703 = !DILocation(line: 2408, column: 45, scope: !7701)
!7704 = !DILocation(line: 2408, column: 49, scope: !7701)
!7705 = !DILocation(line: 2408, column: 58, scope: !7701)
!7706 = !DILocation(line: 2408, column: 5, scope: !7701)
!7707 = !DILocation(line: 2410, column: 7, scope: !7708)
!7708 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2410, column: 7)
!7709 = !DILocation(line: 2410, column: 7, scope: !7570)
!7710 = !DILocation(line: 2413, column: 7, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7708, file: !3, line: 2411, column: 5)
!7712 = !DILocation(line: 2414, column: 5, scope: !7711)
!7713 = !DILocation(line: 2416, column: 7, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2416, column: 7)
!7715 = !DILocation(line: 2416, column: 7, scope: !7570)
!7716 = !DILocation(line: 2418, column: 7, scope: !7717)
!7717 = distinct !DILexicalBlock(scope: !7714, file: !3, line: 2417, column: 5)
!7718 = !DILocation(line: 2419, column: 5, scope: !7717)
!7719 = !DILocation(line: 2421, column: 7, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2421, column: 7)
!7721 = !DILocation(line: 2421, column: 7, scope: !7570)
!7722 = !DILocation(line: 2423, column: 7, scope: !7723)
!7723 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 2422, column: 5)
!7724 = !DILocation(line: 2424, column: 5, scope: !7723)
!7725 = !DILocation(line: 2425, column: 1, scope: !7570)
!7726 = distinct !DISubprogram(name: "lto_stream_as_builtin_p", scope: !591, file: !591, line: 1010, type: !7006, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7727 = !DILocalVariable(name: "expr", arg: 1, scope: !7726, file: !591, line: 1010, type: !1688)
!7728 = !DILocation(line: 1010, column: 31, scope: !7726)
!7729 = !DILocation(line: 1012, column: 11, scope: !7726)
!7730 = !DILocation(line: 1012, column: 28, scope: !7726)
!7731 = !DILocation(line: 1013, column: 4, scope: !7726)
!7732 = !DILocation(line: 1013, column: 7, scope: !7726)
!7733 = !DILocation(line: 1014, column: 4, scope: !7726)
!7734 = !DILocation(line: 1014, column: 8, scope: !7726)
!7735 = !DILocation(line: 1014, column: 35, scope: !7726)
!7736 = !DILocation(line: 1015, column: 8, scope: !7726)
!7737 = !DILocation(line: 1015, column: 11, scope: !7726)
!7738 = !DILocation(line: 1015, column: 38, scope: !7726)
!7739 = !DILocation(line: 0, scope: !7726)
!7740 = !DILocation(line: 1012, column: 10, scope: !7726)
!7741 = !DILocation(line: 1012, column: 3, scope: !7726)
!7742 = distinct !DISubprogram(name: "lto_register_var_decl_in_symtab", scope: !3, file: !3, line: 2433, type: !7743, scopeLine: 2434, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7743 = !DISubroutineType(types: !7744)
!7744 = !{null, !3116, !1688}
!7745 = !DILocalVariable(name: "data_in", arg: 1, scope: !7742, file: !3, line: 2433, type: !3116)
!7746 = !DILocation(line: 2433, column: 50, scope: !7742)
!7747 = !DILocalVariable(name: "decl", arg: 2, scope: !7742, file: !3, line: 2433, type: !1688)
!7748 = !DILocation(line: 2433, column: 64, scope: !7742)
!7749 = !DILocation(line: 2437, column: 30, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !7742, file: !3, line: 2437, column: 7)
!7751 = !DILocation(line: 2437, column: 7, scope: !7750)
!7752 = !DILocation(line: 2437, column: 36, scope: !7750)
!7753 = !DILocation(line: 2437, column: 7, scope: !7742)
!7754 = !DILocation(line: 2441, column: 12, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7756, file: !3, line: 2441, column: 11)
!7756 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 2438, column: 5)
!7757 = !DILocation(line: 2441, column: 11, scope: !7756)
!7758 = !DILocalVariable(name: "name", scope: !7759, file: !3, line: 2449, type: !1890)
!7759 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 2442, column: 9)
!7760 = !DILocation(line: 2449, column: 16, scope: !7759)
!7761 = !DILocation(line: 2449, column: 23, scope: !7759)
!7762 = !DILocalVariable(name: "label", scope: !7759, file: !3, line: 2450, type: !1955)
!7763 = !DILocation(line: 2450, column: 10, scope: !7759)
!7764 = !DILocation(line: 2452, column: 4, scope: !7759)
!7765 = !DILocalVariable(name: "name_", scope: !7766, file: !3, line: 2452, type: !7767)
!7766 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 2452, column: 4)
!7767 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1890)
!7768 = !DILocation(line: 2452, column: 4, scope: !7766)
!7769 = !DILocalVariable(name: "output_", scope: !7766, file: !3, line: 2452, type: !7770)
!7770 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1955)
!7771 = !DILocation(line: 2453, column: 4, scope: !7759)
!7772 = !DILocation(line: 2454, column: 37, scope: !7759)
!7773 = !DILocation(line: 2454, column: 11, scope: !7759)
!7774 = !DILocation(line: 2455, column: 9, scope: !7759)
!7775 = !DILocation(line: 2456, column: 5, scope: !7756)
!7776 = !DILocation(line: 2460, column: 7, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7742, file: !3, line: 2460, column: 7)
!7778 = !DILocation(line: 2460, column: 7, scope: !7742)
!7779 = !DILocalVariable(name: "ix", scope: !7780, file: !3, line: 2462, type: !1784)
!7780 = distinct !DILexicalBlock(scope: !7777, file: !3, line: 2461, column: 5)
!7781 = !DILocation(line: 2462, column: 11, scope: !7780)
!7782 = !DILocation(line: 2463, column: 39, scope: !7783)
!7783 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 2463, column: 11)
!7784 = !DILocation(line: 2463, column: 48, scope: !7783)
!7785 = !DILocation(line: 2463, column: 62, scope: !7783)
!7786 = !DILocation(line: 2463, column: 12, scope: !7783)
!7787 = !DILocation(line: 2463, column: 11, scope: !7780)
!7788 = !DILocation(line: 2464, column: 2, scope: !7783)
!7789 = !DILocation(line: 2465, column: 33, scope: !7780)
!7790 = !DILocation(line: 2465, column: 55, scope: !7780)
!7791 = !DILocation(line: 2465, column: 64, scope: !7780)
!7792 = !DILocation(line: 2465, column: 39, scope: !7780)
!7793 = !DILocation(line: 2466, column: 5, scope: !7780)
!7794 = !DILocation(line: 2466, column: 14, scope: !7780)
!7795 = !DILocation(line: 2465, column: 7, scope: !7780)
!7796 = !DILocation(line: 2467, column: 5, scope: !7780)
!7797 = !DILocation(line: 2468, column: 1, scope: !7742)
!7798 = distinct !DISubprogram(name: "lto_register_function_decl_in_symtab", scope: !3, file: !3, line: 2478, type: !7743, scopeLine: 2479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7799 = !DILocalVariable(name: "data_in", arg: 1, scope: !7798, file: !3, line: 2478, type: !3116)
!7800 = !DILocation(line: 2478, column: 55, scope: !7798)
!7801 = !DILocalVariable(name: "decl", arg: 2, scope: !7798, file: !3, line: 2478, type: !1688)
!7802 = !DILocation(line: 2478, column: 69, scope: !7798)
!7803 = !DILocation(line: 2482, column: 8, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 2482, column: 7)
!7805 = !DILocation(line: 2482, column: 7, scope: !7798)
!7806 = !DILocalVariable(name: "old_assembler_name", scope: !7807, file: !3, line: 2486, type: !1688)
!7807 = distinct !DILexicalBlock(scope: !7804, file: !3, line: 2483, column: 5)
!7808 = !DILocation(line: 2486, column: 12, scope: !7807)
!7809 = !DILocation(line: 2486, column: 33, scope: !7807)
!7810 = !DILocation(line: 2486, column: 39, scope: !7807)
!7811 = !DILocation(line: 2486, column: 53, scope: !7807)
!7812 = !DILocalVariable(name: "name", scope: !7807, file: !3, line: 2494, type: !1890)
!7813 = !DILocation(line: 2494, column: 19, scope: !7807)
!7814 = !DILocation(line: 2494, column: 26, scope: !7807)
!7815 = !DILocalVariable(name: "label", scope: !7807, file: !3, line: 2495, type: !1955)
!7816 = !DILocation(line: 2495, column: 13, scope: !7807)
!7817 = !DILocation(line: 2497, column: 7, scope: !7807)
!7818 = !DILocalVariable(name: "name_", scope: !7819, file: !3, line: 2497, type: !7767)
!7819 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 2497, column: 7)
!7820 = !DILocation(line: 2497, column: 7, scope: !7819)
!7821 = !DILocalVariable(name: "output_", scope: !7819, file: !3, line: 2497, type: !7770)
!7822 = !DILocation(line: 2498, column: 7, scope: !7807)
!7823 = !DILocation(line: 2503, column: 11, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 2503, column: 11)
!7825 = !DILocation(line: 2503, column: 11, scope: !7807)
!7826 = !DILocalVariable(name: "new_assembler_name", scope: !7827, file: !3, line: 2505, type: !1688)
!7827 = distinct !DILexicalBlock(scope: !7824, file: !3, line: 2504, column: 2)
!7828 = !DILocation(line: 2505, column: 9, scope: !7827)
!7829 = !DILocation(line: 2505, column: 30, scope: !7827)
!7830 = !DILocation(line: 2512, column: 29, scope: !7827)
!7831 = !DILocation(line: 2512, column: 38, scope: !7827)
!7832 = !DILocation(line: 2513, column: 8, scope: !7827)
!7833 = !DILocation(line: 2514, column: 8, scope: !7827)
!7834 = !DILocation(line: 2512, column: 4, scope: !7827)
!7835 = !DILocation(line: 2519, column: 29, scope: !7827)
!7836 = !DILocation(line: 2519, column: 38, scope: !7827)
!7837 = !DILocation(line: 2520, column: 8, scope: !7827)
!7838 = !DILocation(line: 2521, column: 8, scope: !7827)
!7839 = !DILocation(line: 2519, column: 4, scope: !7827)
!7840 = !DILocation(line: 2522, column: 2, scope: !7827)
!7841 = !DILocation(line: 2523, column: 5, scope: !7807)
!7842 = !DILocation(line: 2527, column: 7, scope: !7843)
!7843 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 2527, column: 7)
!7844 = !DILocation(line: 2527, column: 26, scope: !7843)
!7845 = !DILocation(line: 2527, column: 30, scope: !7843)
!7846 = !DILocation(line: 2527, column: 7, scope: !7798)
!7847 = !DILocalVariable(name: "ix", scope: !7848, file: !3, line: 2529, type: !1784)
!7848 = distinct !DILexicalBlock(scope: !7843, file: !3, line: 2528, column: 5)
!7849 = !DILocation(line: 2529, column: 11, scope: !7848)
!7850 = !DILocation(line: 2530, column: 39, scope: !7851)
!7851 = distinct !DILexicalBlock(scope: !7848, file: !3, line: 2530, column: 11)
!7852 = !DILocation(line: 2530, column: 48, scope: !7851)
!7853 = !DILocation(line: 2530, column: 62, scope: !7851)
!7854 = !DILocation(line: 2530, column: 12, scope: !7851)
!7855 = !DILocation(line: 2530, column: 11, scope: !7848)
!7856 = !DILocation(line: 2531, column: 2, scope: !7851)
!7857 = !DILocation(line: 2532, column: 33, scope: !7848)
!7858 = !DILocation(line: 2532, column: 55, scope: !7848)
!7859 = !DILocation(line: 2532, column: 64, scope: !7848)
!7860 = !DILocation(line: 2532, column: 39, scope: !7848)
!7861 = !DILocation(line: 2533, column: 5, scope: !7848)
!7862 = !DILocation(line: 2533, column: 14, scope: !7848)
!7863 = !DILocation(line: 2532, column: 7, scope: !7848)
!7864 = !DILocation(line: 2534, column: 5, scope: !7848)
!7865 = !DILocation(line: 2535, column: 1, scope: !7798)
!7866 = distinct !DISubprogram(name: "input_identifier", scope: !3, file: !3, line: 181, type: !6856, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7867 = !DILocalVariable(name: "data_in", arg: 1, scope: !7866, file: !3, line: 181, type: !3116)
!7868 = !DILocation(line: 181, column: 35, scope: !7866)
!7869 = !DILocalVariable(name: "ib", arg: 2, scope: !7866, file: !3, line: 181, type: !3647)
!7870 = !DILocation(line: 181, column: 68, scope: !7866)
!7871 = !DILocalVariable(name: "len", scope: !7866, file: !3, line: 183, type: !7)
!7872 = !DILocation(line: 183, column: 16, scope: !7866)
!7873 = !DILocalVariable(name: "ptr", scope: !7866, file: !3, line: 184, type: !1890)
!7874 = !DILocation(line: 184, column: 15, scope: !7866)
!7875 = !DILocalVariable(name: "is_null", scope: !7866, file: !3, line: 185, type: !7)
!7876 = !DILocation(line: 185, column: 16, scope: !7866)
!7877 = !DILocation(line: 187, column: 32, scope: !7866)
!7878 = !DILocation(line: 187, column: 13, scope: !7866)
!7879 = !DILocation(line: 187, column: 11, scope: !7866)
!7880 = !DILocation(line: 188, column: 7, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7866, file: !3, line: 188, column: 7)
!7882 = !DILocation(line: 188, column: 7, scope: !7866)
!7883 = !DILocation(line: 189, column: 5, scope: !7881)
!7884 = !DILocation(line: 191, column: 32, scope: !7866)
!7885 = !DILocation(line: 191, column: 41, scope: !7866)
!7886 = !DILocation(line: 191, column: 9, scope: !7866)
!7887 = !DILocation(line: 191, column: 7, scope: !7866)
!7888 = !DILocation(line: 192, column: 38, scope: !7866)
!7889 = !DILocation(line: 192, column: 43, scope: !7866)
!7890 = !DILocation(line: 192, column: 10, scope: !7866)
!7891 = !DILocation(line: 192, column: 3, scope: !7866)
!7892 = !DILocation(line: 193, column: 1, scope: !7866)
!7893 = distinct !DISubprogram(name: "unpack_value_fields", scope: !3, file: !3, line: 1799, type: !7894, scopeLine: 1800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7894 = !DISubroutineType(types: !7895)
!7895 = !{null, !3641, !1688}
!7896 = !DILocalVariable(name: "bp", arg: 1, scope: !7893, file: !3, line: 1799, type: !3641)
!7897 = !DILocation(line: 1799, column: 40, scope: !7893)
!7898 = !DILocalVariable(name: "expr", arg: 2, scope: !7893, file: !3, line: 1799, type: !1688)
!7899 = !DILocation(line: 1799, column: 49, scope: !7893)
!7900 = !DILocalVariable(name: "code", scope: !7893, file: !3, line: 1801, type: !134)
!7901 = !DILocation(line: 1801, column: 18, scope: !7893)
!7902 = !DILocation(line: 1803, column: 10, scope: !7893)
!7903 = !DILocation(line: 1803, column: 8, scope: !7893)
!7904 = !DILocation(line: 1807, column: 32, scope: !7893)
!7905 = !DILocation(line: 1807, column: 36, scope: !7893)
!7906 = !DILocation(line: 1807, column: 3, scope: !7893)
!7907 = !DILocation(line: 1809, column: 7, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1809, column: 7)
!7909 = !DILocation(line: 1809, column: 7, scope: !7893)
!7910 = !DILocation(line: 1810, column: 38, scope: !7908)
!7911 = !DILocation(line: 1810, column: 42, scope: !7908)
!7912 = !DILocation(line: 1810, column: 5, scope: !7908)
!7913 = !DILocation(line: 1812, column: 7, scope: !7914)
!7914 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1812, column: 7)
!7915 = !DILocation(line: 1812, column: 7, scope: !7893)
!7916 = !DILocation(line: 1813, column: 39, scope: !7914)
!7917 = !DILocation(line: 1813, column: 43, scope: !7914)
!7918 = !DILocation(line: 1813, column: 5, scope: !7914)
!7919 = !DILocation(line: 1815, column: 7, scope: !7920)
!7920 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1815, column: 7)
!7921 = !DILocation(line: 1815, column: 7, scope: !7893)
!7922 = !DILocation(line: 1816, column: 41, scope: !7920)
!7923 = !DILocation(line: 1816, column: 45, scope: !7920)
!7924 = !DILocation(line: 1816, column: 5, scope: !7920)
!7925 = !DILocation(line: 1818, column: 7, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1818, column: 7)
!7927 = !DILocation(line: 1818, column: 7, scope: !7893)
!7928 = !DILocation(line: 1819, column: 39, scope: !7926)
!7929 = !DILocation(line: 1819, column: 43, scope: !7926)
!7930 = !DILocation(line: 1819, column: 5, scope: !7926)
!7931 = !DILocation(line: 1821, column: 7, scope: !7932)
!7932 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1821, column: 7)
!7933 = !DILocation(line: 1821, column: 7, scope: !7893)
!7934 = !DILocation(line: 1822, column: 43, scope: !7932)
!7935 = !DILocation(line: 1822, column: 47, scope: !7932)
!7936 = !DILocation(line: 1822, column: 5, scope: !7932)
!7937 = !DILocation(line: 1824, column: 7, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1824, column: 7)
!7939 = !DILocation(line: 1824, column: 7, scope: !7893)
!7940 = !DILocation(line: 1825, column: 43, scope: !7938)
!7941 = !DILocation(line: 1825, column: 47, scope: !7938)
!7942 = !DILocation(line: 1825, column: 5, scope: !7938)
!7943 = !DILocation(line: 1827, column: 7, scope: !7944)
!7944 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1827, column: 7)
!7945 = !DILocation(line: 1827, column: 7, scope: !7893)
!7946 = !DILocation(line: 1828, column: 34, scope: !7944)
!7947 = !DILocation(line: 1828, column: 38, scope: !7944)
!7948 = !DILocation(line: 1828, column: 5, scope: !7944)
!7949 = !DILocation(line: 1830, column: 7, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1830, column: 7)
!7951 = !DILocation(line: 1830, column: 7, scope: !7893)
!7952 = !DILocation(line: 1831, column: 35, scope: !7950)
!7953 = !DILocation(line: 1831, column: 39, scope: !7950)
!7954 = !DILocation(line: 1831, column: 5, scope: !7950)
!7955 = !DILocation(line: 1833, column: 7, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1833, column: 7)
!7957 = !DILocation(line: 1833, column: 7, scope: !7893)
!7958 = !DILocation(line: 1836, column: 7, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7956, file: !3, line: 1834, column: 5)
!7960 = !DILocation(line: 1837, column: 5, scope: !7959)
!7961 = !DILocation(line: 1839, column: 7, scope: !7962)
!7962 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1839, column: 7)
!7963 = !DILocation(line: 1839, column: 7, scope: !7893)
!7964 = !DILocation(line: 1842, column: 7, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7962, file: !3, line: 1840, column: 5)
!7966 = !DILocation(line: 1843, column: 5, scope: !7965)
!7967 = !DILocation(line: 1845, column: 7, scope: !7968)
!7968 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1845, column: 7)
!7969 = !DILocation(line: 1845, column: 7, scope: !7893)
!7970 = !DILocation(line: 1848, column: 7, scope: !7971)
!7971 = distinct !DILexicalBlock(scope: !7968, file: !3, line: 1846, column: 5)
!7972 = !DILocation(line: 1849, column: 5, scope: !7971)
!7973 = !DILocation(line: 1850, column: 1, scope: !7893)
!7974 = distinct !DISubprogram(name: "unpack_ts_base_value_fields", scope: !3, file: !3, line: 1563, type: !7894, scopeLine: 1564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!7975 = !DILocalVariable(name: "bp", arg: 1, scope: !7974, file: !3, line: 1563, type: !3641)
!7976 = !DILocation(line: 1563, column: 48, scope: !7974)
!7977 = !DILocalVariable(name: "expr", arg: 2, scope: !7974, file: !3, line: 1563, type: !1688)
!7978 = !DILocation(line: 1563, column: 57, scope: !7974)
!7979 = !DILocation(line: 1567, column: 8, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 1567, column: 7)
!7981 = !DILocation(line: 1567, column: 7, scope: !7974)
!7982 = !DILocation(line: 1569, column: 62, scope: !7983)
!7983 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 1568, column: 5)
!7984 = !DILocation(line: 1569, column: 45, scope: !7983)
!7985 = !DILocation(line: 1569, column: 34, scope: !7983)
!7986 = !DILocation(line: 1569, column: 7, scope: !7983)
!7987 = !DILocation(line: 1569, column: 32, scope: !7983)
!7988 = !DILocation(line: 1570, column: 58, scope: !7983)
!7989 = !DILocation(line: 1570, column: 41, scope: !7983)
!7990 = !DILocation(line: 1570, column: 30, scope: !7983)
!7991 = !DILocation(line: 1570, column: 7, scope: !7983)
!7992 = !DILocation(line: 1570, column: 28, scope: !7983)
!7993 = !DILocation(line: 1571, column: 58, scope: !7983)
!7994 = !DILocation(line: 1571, column: 41, scope: !7983)
!7995 = !DILocation(line: 1571, column: 30, scope: !7983)
!7996 = !DILocation(line: 1571, column: 7, scope: !7983)
!7997 = !DILocation(line: 1571, column: 28, scope: !7983)
!7998 = !DILocation(line: 1576, column: 56, scope: !7983)
!7999 = !DILocation(line: 1576, column: 39, scope: !7983)
!8000 = !DILocation(line: 1576, column: 28, scope: !7983)
!8001 = !DILocation(line: 1576, column: 7, scope: !7983)
!8002 = !DILocation(line: 1576, column: 26, scope: !7983)
!8003 = !DILocation(line: 1577, column: 5, scope: !7983)
!8004 = !DILocation(line: 1578, column: 57, scope: !7974)
!8005 = !DILocation(line: 1578, column: 40, scope: !7974)
!8006 = !DILocation(line: 1578, column: 29, scope: !7974)
!8007 = !DILocation(line: 1578, column: 3, scope: !7974)
!8008 = !DILocation(line: 1578, column: 27, scope: !7974)
!8009 = !DILocation(line: 1579, column: 59, scope: !7974)
!8010 = !DILocation(line: 1579, column: 42, scope: !7974)
!8011 = !DILocation(line: 1579, column: 31, scope: !7974)
!8012 = !DILocation(line: 1579, column: 3, scope: !7974)
!8013 = !DILocation(line: 1579, column: 29, scope: !7974)
!8014 = !DILocation(line: 1580, column: 7, scope: !8015)
!8015 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 1580, column: 7)
!8016 = !DILocation(line: 1580, column: 7, scope: !7974)
!8017 = !DILocation(line: 1581, column: 56, scope: !8015)
!8018 = !DILocation(line: 1581, column: 39, scope: !8015)
!8019 = !DILocation(line: 1581, column: 28, scope: !8015)
!8020 = !DILocation(line: 1581, column: 5, scope: !8015)
!8021 = !DILocation(line: 1581, column: 26, scope: !8015)
!8022 = !DILocation(line: 1582, column: 12, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !8015, file: !3, line: 1582, column: 12)
!8024 = !DILocation(line: 1582, column: 12, scope: !8015)
!8025 = !DILocation(line: 1583, column: 56, scope: !8023)
!8026 = !DILocation(line: 1583, column: 39, scope: !8023)
!8027 = !DILocation(line: 1583, column: 28, scope: !8023)
!8028 = !DILocation(line: 1583, column: 5, scope: !8023)
!8029 = !DILocation(line: 1583, column: 26, scope: !8023)
!8030 = !DILocation(line: 1584, column: 57, scope: !7974)
!8031 = !DILocation(line: 1584, column: 40, scope: !7974)
!8032 = !DILocation(line: 1584, column: 29, scope: !7974)
!8033 = !DILocation(line: 1584, column: 3, scope: !7974)
!8034 = !DILocation(line: 1584, column: 27, scope: !7974)
!8035 = !DILocation(line: 1585, column: 56, scope: !7974)
!8036 = !DILocation(line: 1585, column: 39, scope: !7974)
!8037 = !DILocation(line: 1585, column: 28, scope: !7974)
!8038 = !DILocation(line: 1585, column: 3, scope: !7974)
!8039 = !DILocation(line: 1585, column: 26, scope: !7974)
!8040 = !DILocation(line: 1586, column: 50, scope: !7974)
!8041 = !DILocation(line: 1586, column: 33, scope: !7974)
!8042 = !DILocation(line: 1586, column: 22, scope: !7974)
!8043 = !DILocation(line: 1586, column: 3, scope: !7974)
!8044 = !DILocation(line: 1586, column: 20, scope: !7974)
!8045 = !DILocation(line: 1587, column: 53, scope: !7974)
!8046 = !DILocation(line: 1587, column: 36, scope: !7974)
!8047 = !DILocation(line: 1587, column: 25, scope: !7974)
!8048 = !DILocation(line: 1587, column: 3, scope: !7974)
!8049 = !DILocation(line: 1587, column: 23, scope: !7974)
!8050 = !DILocation(line: 1588, column: 52, scope: !7974)
!8051 = !DILocation(line: 1588, column: 35, scope: !7974)
!8052 = !DILocation(line: 1588, column: 24, scope: !7974)
!8053 = !DILocation(line: 1588, column: 3, scope: !7974)
!8054 = !DILocation(line: 1588, column: 22, scope: !7974)
!8055 = !DILocation(line: 1589, column: 53, scope: !7974)
!8056 = !DILocation(line: 1589, column: 36, scope: !7974)
!8057 = !DILocation(line: 1589, column: 25, scope: !7974)
!8058 = !DILocation(line: 1589, column: 3, scope: !7974)
!8059 = !DILocation(line: 1589, column: 23, scope: !7974)
!8060 = !DILocation(line: 1590, column: 55, scope: !7974)
!8061 = !DILocation(line: 1590, column: 38, scope: !7974)
!8062 = !DILocation(line: 1590, column: 27, scope: !7974)
!8063 = !DILocation(line: 1590, column: 3, scope: !7974)
!8064 = !DILocation(line: 1590, column: 25, scope: !7974)
!8065 = !DILocation(line: 1591, column: 56, scope: !7974)
!8066 = !DILocation(line: 1591, column: 39, scope: !7974)
!8067 = !DILocation(line: 1591, column: 28, scope: !7974)
!8068 = !DILocation(line: 1591, column: 3, scope: !7974)
!8069 = !DILocation(line: 1591, column: 26, scope: !7974)
!8070 = !DILocation(line: 1592, column: 7, scope: !8071)
!8071 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 1592, column: 7)
!8072 = !DILocation(line: 1592, column: 7, scope: !7974)
!8073 = !DILocation(line: 1593, column: 58, scope: !8071)
!8074 = !DILocation(line: 1593, column: 41, scope: !8071)
!8075 = !DILocation(line: 1593, column: 30, scope: !8071)
!8076 = !DILocation(line: 1593, column: 5, scope: !8071)
!8077 = !DILocation(line: 1593, column: 28, scope: !8071)
!8078 = !DILocation(line: 1594, column: 7, scope: !8079)
!8079 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 1594, column: 7)
!8080 = !DILocation(line: 1594, column: 24, scope: !8079)
!8081 = !DILocation(line: 1594, column: 7, scope: !7974)
!8082 = !DILocation(line: 1595, column: 66, scope: !8079)
!8083 = !DILocation(line: 1595, column: 49, scope: !8079)
!8084 = !DILocation(line: 1595, column: 38, scope: !8079)
!8085 = !DILocation(line: 1595, column: 5, scope: !8079)
!8086 = !DILocation(line: 1595, column: 36, scope: !8079)
!8087 = !DILocation(line: 1596, column: 1, scope: !7974)
!8088 = distinct !DISubprogram(name: "unpack_ts_real_cst_value_fields", scope: !3, file: !3, line: 1603, type: !7894, scopeLine: 1604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8089 = !DILocalVariable(name: "bp", arg: 1, scope: !8088, file: !3, line: 1603, type: !3641)
!8090 = !DILocation(line: 1603, column: 52, scope: !8088)
!8091 = !DILocalVariable(name: "expr", arg: 2, scope: !8088, file: !3, line: 1603, type: !1688)
!8092 = !DILocation(line: 1603, column: 61, scope: !8088)
!8093 = !DILocalVariable(name: "i", scope: !8088, file: !3, line: 1605, type: !7)
!8094 = !DILocation(line: 1605, column: 12, scope: !8088)
!8095 = !DILocalVariable(name: "r", scope: !8088, file: !3, line: 1606, type: !1750)
!8096 = !DILocation(line: 1606, column: 19, scope: !8088)
!8097 = !DILocalVariable(name: "rp", scope: !8088, file: !3, line: 1607, type: !1749)
!8098 = !DILocation(line: 1607, column: 20, scope: !8088)
!8099 = !DILocation(line: 1609, column: 38, scope: !8088)
!8100 = !DILocation(line: 1609, column: 21, scope: !8088)
!8101 = !DILocation(line: 1609, column: 10, scope: !8088)
!8102 = !DILocation(line: 1609, column: 5, scope: !8088)
!8103 = !DILocation(line: 1609, column: 8, scope: !8088)
!8104 = !DILocation(line: 1610, column: 43, scope: !8088)
!8105 = !DILocation(line: 1610, column: 26, scope: !8088)
!8106 = !DILocation(line: 1610, column: 15, scope: !8088)
!8107 = !DILocation(line: 1610, column: 5, scope: !8088)
!8108 = !DILocation(line: 1610, column: 13, scope: !8088)
!8109 = !DILocation(line: 1611, column: 40, scope: !8088)
!8110 = !DILocation(line: 1611, column: 23, scope: !8088)
!8111 = !DILocation(line: 1611, column: 12, scope: !8088)
!8112 = !DILocation(line: 1611, column: 5, scope: !8088)
!8113 = !DILocation(line: 1611, column: 10, scope: !8088)
!8114 = !DILocation(line: 1612, column: 46, scope: !8088)
!8115 = !DILocation(line: 1612, column: 29, scope: !8088)
!8116 = !DILocation(line: 1612, column: 18, scope: !8088)
!8117 = !DILocation(line: 1612, column: 5, scope: !8088)
!8118 = !DILocation(line: 1612, column: 16, scope: !8088)
!8119 = !DILocation(line: 1613, column: 45, scope: !8088)
!8120 = !DILocation(line: 1613, column: 28, scope: !8088)
!8121 = !DILocation(line: 1613, column: 17, scope: !8088)
!8122 = !DILocation(line: 1613, column: 5, scope: !8088)
!8123 = !DILocation(line: 1613, column: 15, scope: !8088)
!8124 = !DILocation(line: 1614, column: 40, scope: !8088)
!8125 = !DILocation(line: 1614, column: 23, scope: !8088)
!8126 = !DILocation(line: 1614, column: 12, scope: !8088)
!8127 = !DILocation(line: 1614, column: 5, scope: !8088)
!8128 = !DILocation(line: 1614, column: 10, scope: !8088)
!8129 = !DILocation(line: 1615, column: 10, scope: !8130)
!8130 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 1615, column: 3)
!8131 = !DILocation(line: 1615, column: 8, scope: !8130)
!8132 = !DILocation(line: 1615, column: 15, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 1615, column: 3)
!8134 = !DILocation(line: 1615, column: 17, scope: !8133)
!8135 = !DILocation(line: 1615, column: 3, scope: !8130)
!8136 = !DILocation(line: 1616, column: 49, scope: !8133)
!8137 = !DILocation(line: 1616, column: 32, scope: !8133)
!8138 = !DILocation(line: 1616, column: 7, scope: !8133)
!8139 = !DILocation(line: 1616, column: 11, scope: !8133)
!8140 = !DILocation(line: 1616, column: 5, scope: !8133)
!8141 = !DILocation(line: 1616, column: 14, scope: !8133)
!8142 = !DILocation(line: 1615, column: 27, scope: !8133)
!8143 = !DILocation(line: 1615, column: 3, scope: !8133)
!8144 = distinct !{!8144, !8135, !8145}
!8145 = !DILocation(line: 1616, column: 71, scope: !8130)
!8146 = !DILocation(line: 1618, column: 8, scope: !8088)
!8147 = !DILocation(line: 1618, column: 6, scope: !8088)
!8148 = !DILocation(line: 1619, column: 11, scope: !8088)
!8149 = !DILocation(line: 1619, column: 3, scope: !8088)
!8150 = !DILocation(line: 1620, column: 30, scope: !8088)
!8151 = !DILocation(line: 1620, column: 3, scope: !8088)
!8152 = !DILocation(line: 1620, column: 28, scope: !8088)
!8153 = !DILocation(line: 1621, column: 1, scope: !8088)
!8154 = distinct !DISubprogram(name: "unpack_ts_fixed_cst_value_fields", scope: !3, file: !3, line: 1628, type: !7894, scopeLine: 1629, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8155 = !DILocalVariable(name: "bp", arg: 1, scope: !8154, file: !3, line: 1628, type: !3641)
!8156 = !DILocation(line: 1628, column: 53, scope: !8154)
!8157 = !DILocalVariable(name: "expr", arg: 2, scope: !8154, file: !3, line: 1628, type: !1688)
!8158 = !DILocation(line: 1628, column: 62, scope: !8154)
!8159 = !DILocalVariable(name: "fv", scope: !8154, file: !3, line: 1630, type: !1769)
!8160 = !DILocation(line: 1630, column: 22, scope: !8154)
!8161 = !DILocation(line: 1632, column: 50, scope: !8154)
!8162 = !DILocation(line: 1632, column: 33, scope: !8154)
!8163 = !DILocation(line: 1632, column: 6, scope: !8154)
!8164 = !DILocation(line: 1632, column: 11, scope: !8154)
!8165 = !DILocation(line: 1632, column: 15, scope: !8154)
!8166 = !DILocation(line: 1633, column: 51, scope: !8154)
!8167 = !DILocation(line: 1633, column: 34, scope: !8154)
!8168 = !DILocation(line: 1633, column: 6, scope: !8154)
!8169 = !DILocation(line: 1633, column: 11, scope: !8154)
!8170 = !DILocation(line: 1633, column: 16, scope: !8154)
!8171 = !DILocation(line: 1634, column: 3, scope: !8154)
!8172 = !DILocation(line: 1634, column: 27, scope: !8154)
!8173 = !DILocation(line: 1635, column: 1, scope: !8154)
!8174 = distinct !DISubprogram(name: "unpack_ts_decl_common_value_fields", scope: !3, file: !3, line: 1642, type: !7894, scopeLine: 1643, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8175 = !DILocalVariable(name: "bp", arg: 1, scope: !8174, file: !3, line: 1642, type: !3641)
!8176 = !DILocation(line: 1642, column: 55, scope: !8174)
!8177 = !DILocalVariable(name: "expr", arg: 2, scope: !8174, file: !3, line: 1642, type: !1688)
!8178 = !DILocation(line: 1642, column: 64, scope: !8174)
!8179 = !DILocation(line: 1644, column: 59, scope: !8174)
!8180 = !DILocation(line: 1644, column: 42, scope: !8174)
!8181 = !DILocation(line: 1644, column: 22, scope: !8174)
!8182 = !DILocation(line: 1644, column: 3, scope: !8174)
!8183 = !DILocation(line: 1644, column: 20, scope: !8174)
!8184 = !DILocation(line: 1645, column: 54, scope: !8174)
!8185 = !DILocation(line: 1645, column: 37, scope: !8174)
!8186 = !DILocation(line: 1645, column: 26, scope: !8174)
!8187 = !DILocation(line: 1645, column: 3, scope: !8174)
!8188 = !DILocation(line: 1645, column: 24, scope: !8174)
!8189 = !DILocation(line: 1646, column: 55, scope: !8174)
!8190 = !DILocation(line: 1646, column: 38, scope: !8174)
!8191 = !DILocation(line: 1646, column: 27, scope: !8174)
!8192 = !DILocation(line: 1646, column: 3, scope: !8174)
!8193 = !DILocation(line: 1646, column: 25, scope: !8174)
!8194 = !DILocation(line: 1647, column: 55, scope: !8174)
!8195 = !DILocation(line: 1647, column: 38, scope: !8174)
!8196 = !DILocation(line: 1647, column: 27, scope: !8174)
!8197 = !DILocation(line: 1647, column: 3, scope: !8174)
!8198 = !DILocation(line: 1647, column: 25, scope: !8174)
!8199 = !DILocation(line: 1648, column: 54, scope: !8174)
!8200 = !DILocation(line: 1648, column: 37, scope: !8174)
!8201 = !DILocation(line: 1648, column: 26, scope: !8174)
!8202 = !DILocation(line: 1648, column: 3, scope: !8174)
!8203 = !DILocation(line: 1648, column: 24, scope: !8174)
!8204 = !DILocation(line: 1649, column: 56, scope: !8174)
!8205 = !DILocation(line: 1649, column: 39, scope: !8174)
!8206 = !DILocation(line: 1649, column: 28, scope: !8174)
!8207 = !DILocation(line: 1649, column: 3, scope: !8174)
!8208 = !DILocation(line: 1649, column: 26, scope: !8174)
!8209 = !DILocation(line: 1650, column: 56, scope: !8174)
!8210 = !DILocation(line: 1650, column: 39, scope: !8174)
!8211 = !DILocation(line: 1650, column: 28, scope: !8174)
!8212 = !DILocation(line: 1650, column: 3, scope: !8174)
!8213 = !DILocation(line: 1650, column: 26, scope: !8174)
!8214 = !DILocation(line: 1651, column: 56, scope: !8174)
!8215 = !DILocation(line: 1651, column: 39, scope: !8174)
!8216 = !DILocation(line: 1651, column: 28, scope: !8174)
!8217 = !DILocation(line: 1651, column: 3, scope: !8174)
!8218 = !DILocation(line: 1651, column: 26, scope: !8174)
!8219 = !DILocation(line: 1652, column: 64, scope: !8174)
!8220 = !DILocation(line: 1652, column: 47, scope: !8174)
!8221 = !DILocation(line: 1652, column: 36, scope: !8174)
!8222 = !DILocation(line: 1652, column: 3, scope: !8174)
!8223 = !DILocation(line: 1652, column: 34, scope: !8174)
!8224 = !DILocation(line: 1653, column: 54, scope: !8174)
!8225 = !DILocation(line: 1653, column: 37, scope: !8174)
!8226 = !DILocation(line: 1653, column: 26, scope: !8174)
!8227 = !DILocation(line: 1653, column: 3, scope: !8174)
!8228 = !DILocation(line: 1653, column: 24, scope: !8174)
!8229 = !DILocation(line: 1654, column: 58, scope: !8174)
!8230 = !DILocation(line: 1654, column: 41, scope: !8174)
!8231 = !DILocation(line: 1654, column: 30, scope: !8174)
!8232 = !DILocation(line: 1654, column: 3, scope: !8174)
!8233 = !DILocation(line: 1654, column: 28, scope: !8174)
!8234 = !DILocation(line: 1655, column: 51, scope: !8174)
!8235 = !DILocation(line: 1655, column: 34, scope: !8174)
!8236 = !DILocation(line: 1655, column: 23, scope: !8174)
!8237 = !DILocation(line: 1655, column: 3, scope: !8174)
!8238 = !DILocation(line: 1655, column: 21, scope: !8174)
!8239 = !DILocation(line: 1657, column: 7, scope: !8240)
!8240 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 1657, column: 7)
!8241 = !DILocation(line: 1657, column: 24, scope: !8240)
!8242 = !DILocation(line: 1657, column: 7, scope: !8174)
!8243 = !DILocation(line: 1659, column: 62, scope: !8244)
!8244 = distinct !DILexicalBlock(scope: !8240, file: !3, line: 1658, column: 5)
!8245 = !DILocation(line: 1659, column: 45, scope: !8244)
!8246 = !DILocation(line: 1659, column: 34, scope: !8244)
!8247 = !DILocation(line: 1659, column: 7, scope: !8244)
!8248 = !DILocation(line: 1659, column: 32, scope: !8244)
!8249 = !DILocation(line: 1660, column: 57, scope: !8244)
!8250 = !DILocation(line: 1660, column: 40, scope: !8244)
!8251 = !DILocation(line: 1660, column: 34, scope: !8244)
!8252 = !DILocation(line: 1660, column: 7, scope: !8244)
!8253 = !DILocation(line: 1660, column: 32, scope: !8244)
!8254 = !DILocation(line: 1664, column: 7, scope: !8244)
!8255 = !DILocation(line: 1664, column: 29, scope: !8244)
!8256 = !DILocation(line: 1665, column: 5, scope: !8244)
!8257 = !DILocation(line: 1667, column: 7, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 1667, column: 7)
!8259 = !DILocation(line: 1667, column: 24, scope: !8258)
!8260 = !DILocation(line: 1667, column: 7, scope: !8174)
!8261 = !DILocalVariable(name: "off_align", scope: !8262, file: !3, line: 1669, type: !1741)
!8262 = distinct !DILexicalBlock(scope: !8258, file: !3, line: 1668, column: 5)
!8263 = !DILocation(line: 1669, column: 30, scope: !8262)
!8264 = !DILocation(line: 1670, column: 56, scope: !8262)
!8265 = !DILocation(line: 1670, column: 39, scope: !8262)
!8266 = !DILocation(line: 1670, column: 28, scope: !8262)
!8267 = !DILocation(line: 1670, column: 7, scope: !8262)
!8268 = !DILocation(line: 1670, column: 26, scope: !8262)
!8269 = !DILocation(line: 1671, column: 66, scope: !8262)
!8270 = !DILocation(line: 1671, column: 49, scope: !8262)
!8271 = !DILocation(line: 1671, column: 38, scope: !8262)
!8272 = !DILocation(line: 1671, column: 7, scope: !8262)
!8273 = !DILocation(line: 1671, column: 36, scope: !8262)
!8274 = !DILocation(line: 1672, column: 61, scope: !8262)
!8275 = !DILocation(line: 1672, column: 44, scope: !8262)
!8276 = !DILocation(line: 1672, column: 17, scope: !8262)
!8277 = !DILocation(line: 1673, column: 7, scope: !8262)
!8278 = !DILocation(line: 1674, column: 5, scope: !8262)
!8279 = !DILocation(line: 1676, column: 7, scope: !8280)
!8280 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 1676, column: 7)
!8281 = !DILocation(line: 1676, column: 24, scope: !8280)
!8282 = !DILocation(line: 1677, column: 7, scope: !8280)
!8283 = !DILocation(line: 1677, column: 10, scope: !8280)
!8284 = !DILocation(line: 1677, column: 27, scope: !8280)
!8285 = !DILocation(line: 1678, column: 7, scope: !8280)
!8286 = !DILocation(line: 1678, column: 10, scope: !8280)
!8287 = !DILocation(line: 1678, column: 27, scope: !8280)
!8288 = !DILocation(line: 1676, column: 7, scope: !8174)
!8289 = !DILocation(line: 1680, column: 62, scope: !8290)
!8290 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 1679, column: 5)
!8291 = !DILocation(line: 1680, column: 45, scope: !8290)
!8292 = !DILocation(line: 1680, column: 34, scope: !8290)
!8293 = !DILocation(line: 1680, column: 7, scope: !8290)
!8294 = !DILocation(line: 1680, column: 32, scope: !8290)
!8295 = !DILocation(line: 1681, column: 11, scope: !8296)
!8296 = distinct !DILexicalBlock(scope: !8290, file: !3, line: 1681, column: 11)
!8297 = !DILocation(line: 1681, column: 28, scope: !8296)
!8298 = !DILocation(line: 1682, column: 4, scope: !8296)
!8299 = !DILocation(line: 1682, column: 7, scope: !8296)
!8300 = !DILocation(line: 1682, column: 24, scope: !8296)
!8301 = !DILocation(line: 1681, column: 11, scope: !8290)
!8302 = !DILocation(line: 1683, column: 61, scope: !8296)
!8303 = !DILocation(line: 1683, column: 44, scope: !8296)
!8304 = !DILocation(line: 1683, column: 33, scope: !8296)
!8305 = !DILocation(line: 1683, column: 2, scope: !8296)
!8306 = !DILocation(line: 1683, column: 31, scope: !8296)
!8307 = !DILocation(line: 1684, column: 62, scope: !8290)
!8308 = !DILocation(line: 1684, column: 45, scope: !8290)
!8309 = !DILocation(line: 1684, column: 34, scope: !8290)
!8310 = !DILocation(line: 1684, column: 7, scope: !8290)
!8311 = !DILocation(line: 1684, column: 32, scope: !8290)
!8312 = !DILocation(line: 1685, column: 5, scope: !8290)
!8313 = !DILocation(line: 1686, column: 1, scope: !8174)
!8314 = distinct !DISubprogram(name: "unpack_ts_decl_wrtl_value_fields", scope: !3, file: !3, line: 1693, type: !7894, scopeLine: 1694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8315 = !DILocalVariable(name: "bp", arg: 1, scope: !8314, file: !3, line: 1693, type: !3641)
!8316 = !DILocation(line: 1693, column: 53, scope: !8314)
!8317 = !DILocalVariable(name: "expr", arg: 2, scope: !8314, file: !3, line: 1693, type: !1688)
!8318 = !DILocation(line: 1693, column: 62, scope: !8314)
!8319 = !DILocation(line: 1695, column: 54, scope: !8314)
!8320 = !DILocation(line: 1695, column: 37, scope: !8314)
!8321 = !DILocation(line: 1695, column: 26, scope: !8314)
!8322 = !DILocation(line: 1695, column: 3, scope: !8314)
!8323 = !DILocation(line: 1695, column: 24, scope: !8314)
!8324 = !DILocation(line: 1696, column: 1, scope: !8314)
!8325 = distinct !DISubprogram(name: "unpack_ts_decl_with_vis_value_fields", scope: !3, file: !3, line: 1703, type: !7894, scopeLine: 1704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8326 = !DILocalVariable(name: "bp", arg: 1, scope: !8325, file: !3, line: 1703, type: !3641)
!8327 = !DILocation(line: 1703, column: 57, scope: !8325)
!8328 = !DILocalVariable(name: "expr", arg: 2, scope: !8325, file: !3, line: 1703, type: !1688)
!8329 = !DILocation(line: 1703, column: 66, scope: !8325)
!8330 = !DILocation(line: 1705, column: 58, scope: !8325)
!8331 = !DILocation(line: 1705, column: 41, scope: !8325)
!8332 = !DILocation(line: 1705, column: 30, scope: !8325)
!8333 = !DILocation(line: 1705, column: 3, scope: !8325)
!8334 = !DILocation(line: 1705, column: 28, scope: !8325)
!8335 = !DILocation(line: 1706, column: 52, scope: !8325)
!8336 = !DILocation(line: 1706, column: 35, scope: !8325)
!8337 = !DILocation(line: 1706, column: 24, scope: !8325)
!8338 = !DILocation(line: 1706, column: 3, scope: !8325)
!8339 = !DILocation(line: 1706, column: 22, scope: !8325)
!8340 = !DILocation(line: 1707, column: 57, scope: !8325)
!8341 = !DILocation(line: 1707, column: 40, scope: !8325)
!8342 = !DILocation(line: 1707, column: 29, scope: !8325)
!8343 = !DILocation(line: 1707, column: 3, scope: !8325)
!8344 = !DILocation(line: 1707, column: 27, scope: !8325)
!8345 = !DILocation(line: 1708, column: 50, scope: !8325)
!8346 = !DILocation(line: 1708, column: 33, scope: !8325)
!8347 = !DILocation(line: 1708, column: 22, scope: !8325)
!8348 = !DILocation(line: 1708, column: 3, scope: !8325)
!8349 = !DILocation(line: 1708, column: 20, scope: !8325)
!8350 = !DILocation(line: 1709, column: 65, scope: !8325)
!8351 = !DILocation(line: 1709, column: 48, scope: !8325)
!8352 = !DILocation(line: 1709, column: 37, scope: !8325)
!8353 = !DILocation(line: 1709, column: 3, scope: !8325)
!8354 = !DILocation(line: 1709, column: 35, scope: !8325)
!8355 = !DILocation(line: 1710, column: 52, scope: !8325)
!8356 = !DILocation(line: 1710, column: 35, scope: !8325)
!8357 = !DILocation(line: 1710, column: 24, scope: !8325)
!8358 = !DILocation(line: 1710, column: 3, scope: !8325)
!8359 = !DILocation(line: 1710, column: 22, scope: !8325)
!8360 = !DILocation(line: 1711, column: 70, scope: !8325)
!8361 = !DILocation(line: 1711, column: 53, scope: !8325)
!8362 = !DILocation(line: 1711, column: 28, scope: !8325)
!8363 = !DILocation(line: 1711, column: 3, scope: !8325)
!8364 = !DILocation(line: 1711, column: 26, scope: !8325)
!8365 = !DILocation(line: 1712, column: 66, scope: !8325)
!8366 = !DILocation(line: 1712, column: 49, scope: !8325)
!8367 = !DILocation(line: 1712, column: 38, scope: !8325)
!8368 = !DILocation(line: 1712, column: 3, scope: !8325)
!8369 = !DILocation(line: 1712, column: 36, scope: !8325)
!8370 = !DILocation(line: 1714, column: 7, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8325, file: !3, line: 1714, column: 7)
!8372 = !DILocation(line: 1714, column: 24, scope: !8371)
!8373 = !DILocation(line: 1714, column: 7, scope: !8325)
!8374 = !DILocation(line: 1716, column: 63, scope: !8375)
!8375 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 1715, column: 5)
!8376 = !DILocation(line: 1716, column: 46, scope: !8375)
!8377 = !DILocation(line: 1716, column: 35, scope: !8375)
!8378 = !DILocation(line: 1716, column: 7, scope: !8375)
!8379 = !DILocation(line: 1716, column: 33, scope: !8375)
!8380 = !DILocation(line: 1717, column: 65, scope: !8375)
!8381 = !DILocation(line: 1717, column: 48, scope: !8375)
!8382 = !DILocation(line: 1717, column: 37, scope: !8375)
!8383 = !DILocation(line: 1717, column: 7, scope: !8375)
!8384 = !DILocation(line: 1717, column: 35, scope: !8375)
!8385 = !DILocation(line: 1718, column: 65, scope: !8375)
!8386 = !DILocation(line: 1718, column: 48, scope: !8375)
!8387 = !DILocation(line: 1718, column: 31, scope: !8375)
!8388 = !DILocation(line: 1718, column: 7, scope: !8375)
!8389 = !DILocation(line: 1718, column: 29, scope: !8375)
!8390 = !DILocation(line: 1719, column: 5, scope: !8375)
!8391 = !DILocation(line: 1721, column: 7, scope: !8392)
!8392 = distinct !DILexicalBlock(scope: !8325, file: !3, line: 1721, column: 7)
!8393 = !DILocation(line: 1721, column: 7, scope: !8325)
!8394 = !DILocalVariable(name: "p", scope: !8395, file: !3, line: 1723, type: !3487)
!8395 = distinct !DILexicalBlock(scope: !8392, file: !3, line: 1722, column: 5)
!8396 = !DILocation(line: 1723, column: 21, scope: !8395)
!8397 = !DILocation(line: 1724, column: 44, scope: !8395)
!8398 = !DILocation(line: 1724, column: 27, scope: !8395)
!8399 = !DILocation(line: 1724, column: 11, scope: !8395)
!8400 = !DILocation(line: 1724, column: 9, scope: !8395)
!8401 = !DILocation(line: 1725, column: 7, scope: !8395)
!8402 = !DILocation(line: 1726, column: 5, scope: !8395)
!8403 = !DILocation(line: 1727, column: 1, scope: !8325)
!8404 = distinct !DISubprogram(name: "unpack_ts_function_decl_value_fields", scope: !3, file: !3, line: 1734, type: !7894, scopeLine: 1735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8405 = !DILocalVariable(name: "bp", arg: 1, scope: !8404, file: !3, line: 1734, type: !3641)
!8406 = !DILocation(line: 1734, column: 57, scope: !8404)
!8407 = !DILocalVariable(name: "expr", arg: 2, scope: !8404, file: !3, line: 1734, type: !1688)
!8408 = !DILocation(line: 1734, column: 66, scope: !8404)
!8409 = !DILocation(line: 1736, column: 73, scope: !8404)
!8410 = !DILocation(line: 1736, column: 56, scope: !8404)
!8411 = !DILocation(line: 1736, column: 31, scope: !8404)
!8412 = !DILocation(line: 1736, column: 3, scope: !8404)
!8413 = !DILocation(line: 1736, column: 29, scope: !8404)
!8414 = !DILocation(line: 1737, column: 71, scope: !8404)
!8415 = !DILocation(line: 1737, column: 54, scope: !8404)
!8416 = !DILocation(line: 1737, column: 32, scope: !8404)
!8417 = !DILocation(line: 1737, column: 3, scope: !8404)
!8418 = !DILocation(line: 1737, column: 30, scope: !8404)
!8419 = !DILocation(line: 1738, column: 64, scope: !8404)
!8420 = !DILocation(line: 1738, column: 47, scope: !8404)
!8421 = !DILocation(line: 1738, column: 36, scope: !8404)
!8422 = !DILocation(line: 1738, column: 3, scope: !8404)
!8423 = !DILocation(line: 1738, column: 34, scope: !8404)
!8424 = !DILocation(line: 1739, column: 63, scope: !8404)
!8425 = !DILocation(line: 1739, column: 46, scope: !8404)
!8426 = !DILocation(line: 1739, column: 35, scope: !8404)
!8427 = !DILocation(line: 1739, column: 3, scope: !8404)
!8428 = !DILocation(line: 1739, column: 33, scope: !8404)
!8429 = !DILocation(line: 1740, column: 57, scope: !8404)
!8430 = !DILocation(line: 1740, column: 40, scope: !8404)
!8431 = !DILocation(line: 1740, column: 29, scope: !8404)
!8432 = !DILocation(line: 1740, column: 3, scope: !8404)
!8433 = !DILocation(line: 1740, column: 27, scope: !8404)
!8434 = !DILocation(line: 1741, column: 62, scope: !8404)
!8435 = !DILocation(line: 1741, column: 45, scope: !8404)
!8436 = !DILocation(line: 1741, column: 34, scope: !8404)
!8437 = !DILocation(line: 1741, column: 3, scope: !8404)
!8438 = !DILocation(line: 1741, column: 32, scope: !8404)
!8439 = !DILocation(line: 1742, column: 55, scope: !8404)
!8440 = !DILocation(line: 1742, column: 38, scope: !8404)
!8441 = !DILocation(line: 1742, column: 27, scope: !8404)
!8442 = !DILocation(line: 1742, column: 3, scope: !8404)
!8443 = !DILocation(line: 1742, column: 25, scope: !8404)
!8444 = !DILocation(line: 1743, column: 62, scope: !8404)
!8445 = !DILocation(line: 1743, column: 45, scope: !8404)
!8446 = !DILocation(line: 1743, column: 34, scope: !8404)
!8447 = !DILocation(line: 1743, column: 3, scope: !8404)
!8448 = !DILocation(line: 1743, column: 32, scope: !8404)
!8449 = !DILocation(line: 1744, column: 55, scope: !8404)
!8450 = !DILocation(line: 1744, column: 38, scope: !8404)
!8451 = !DILocation(line: 1744, column: 27, scope: !8404)
!8452 = !DILocation(line: 1744, column: 3, scope: !8404)
!8453 = !DILocation(line: 1744, column: 25, scope: !8404)
!8454 = !DILocation(line: 1745, column: 61, scope: !8404)
!8455 = !DILocation(line: 1745, column: 44, scope: !8404)
!8456 = !DILocation(line: 1745, column: 33, scope: !8404)
!8457 = !DILocation(line: 1745, column: 3, scope: !8404)
!8458 = !DILocation(line: 1745, column: 31, scope: !8404)
!8459 = !DILocation(line: 1746, column: 63, scope: !8404)
!8460 = !DILocation(line: 1746, column: 46, scope: !8404)
!8461 = !DILocation(line: 1746, column: 35, scope: !8404)
!8462 = !DILocation(line: 1746, column: 3, scope: !8404)
!8463 = !DILocation(line: 1746, column: 33, scope: !8404)
!8464 = !DILocation(line: 1747, column: 58, scope: !8404)
!8465 = !DILocation(line: 1747, column: 41, scope: !8404)
!8466 = !DILocation(line: 1747, column: 30, scope: !8404)
!8467 = !DILocation(line: 1747, column: 3, scope: !8404)
!8468 = !DILocation(line: 1747, column: 28, scope: !8404)
!8469 = !DILocation(line: 1748, column: 65, scope: !8404)
!8470 = !DILocation(line: 1748, column: 48, scope: !8404)
!8471 = !DILocation(line: 1748, column: 37, scope: !8404)
!8472 = !DILocation(line: 1748, column: 3, scope: !8404)
!8473 = !DILocation(line: 1748, column: 35, scope: !8404)
!8474 = !DILocation(line: 1750, column: 38, scope: !8404)
!8475 = !DILocation(line: 1750, column: 21, scope: !8404)
!8476 = !DILocation(line: 1750, column: 10, scope: !8404)
!8477 = !DILocation(line: 1749, column: 3, scope: !8404)
!8478 = !DILocation(line: 1750, column: 8, scope: !8404)
!8479 = !DILocation(line: 1751, column: 60, scope: !8404)
!8480 = !DILocation(line: 1751, column: 43, scope: !8404)
!8481 = !DILocation(line: 1751, column: 32, scope: !8404)
!8482 = !DILocation(line: 1751, column: 3, scope: !8404)
!8483 = !DILocation(line: 1751, column: 30, scope: !8404)
!8484 = !DILocation(line: 1752, column: 69, scope: !8404)
!8485 = !DILocation(line: 1752, column: 52, scope: !8404)
!8486 = !DILocation(line: 1752, column: 41, scope: !8404)
!8487 = !DILocation(line: 1752, column: 3, scope: !8404)
!8488 = !DILocation(line: 1752, column: 39, scope: !8404)
!8489 = !DILocation(line: 1753, column: 52, scope: !8404)
!8490 = !DILocation(line: 1753, column: 35, scope: !8404)
!8491 = !DILocation(line: 1753, column: 24, scope: !8404)
!8492 = !DILocation(line: 1753, column: 3, scope: !8404)
!8493 = !DILocation(line: 1753, column: 22, scope: !8404)
!8494 = !DILocation(line: 1754, column: 69, scope: !8404)
!8495 = !DILocation(line: 1754, column: 52, scope: !8404)
!8496 = !DILocation(line: 1754, column: 41, scope: !8404)
!8497 = !DILocation(line: 1754, column: 3, scope: !8404)
!8498 = !DILocation(line: 1754, column: 39, scope: !8404)
!8499 = !DILocation(line: 1755, column: 1, scope: !8404)
!8500 = distinct !DISubprogram(name: "unpack_ts_type_value_fields", scope: !3, file: !3, line: 1762, type: !7894, scopeLine: 1763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8501 = !DILocalVariable(name: "bp", arg: 1, scope: !8500, file: !3, line: 1762, type: !3641)
!8502 = !DILocation(line: 1762, column: 48, scope: !8500)
!8503 = !DILocalVariable(name: "expr", arg: 2, scope: !8500, file: !3, line: 1762, type: !1688)
!8504 = !DILocation(line: 1762, column: 57, scope: !8500)
!8505 = !DILocalVariable(name: "mode", scope: !8500, file: !3, line: 1764, type: !5)
!8506 = !DILocation(line: 1764, column: 21, scope: !8500)
!8507 = !DILocation(line: 1766, column: 55, scope: !8500)
!8508 = !DILocation(line: 1766, column: 38, scope: !8500)
!8509 = !DILocation(line: 1766, column: 27, scope: !8500)
!8510 = !DILocation(line: 1766, column: 3, scope: !8500)
!8511 = !DILocation(line: 1766, column: 25, scope: !8500)
!8512 = !DILocation(line: 1767, column: 47, scope: !8500)
!8513 = !DILocation(line: 1767, column: 30, scope: !8500)
!8514 = !DILocation(line: 1767, column: 10, scope: !8500)
!8515 = !DILocation(line: 1767, column: 8, scope: !8500)
!8516 = !DILocation(line: 1768, column: 3, scope: !8500)
!8517 = !DILocation(line: 1769, column: 57, scope: !8500)
!8518 = !DILocation(line: 1769, column: 40, scope: !8500)
!8519 = !DILocation(line: 1769, column: 29, scope: !8500)
!8520 = !DILocation(line: 1769, column: 3, scope: !8500)
!8521 = !DILocation(line: 1769, column: 27, scope: !8500)
!8522 = !DILocation(line: 1770, column: 58, scope: !8500)
!8523 = !DILocation(line: 1770, column: 41, scope: !8500)
!8524 = !DILocation(line: 1770, column: 30, scope: !8500)
!8525 = !DILocation(line: 1770, column: 3, scope: !8500)
!8526 = !DILocation(line: 1770, column: 28, scope: !8500)
!8527 = !DILocation(line: 1771, column: 63, scope: !8500)
!8528 = !DILocation(line: 1771, column: 46, scope: !8500)
!8529 = !DILocation(line: 1771, column: 35, scope: !8500)
!8530 = !DILocation(line: 1771, column: 3, scope: !8500)
!8531 = !DILocation(line: 1771, column: 33, scope: !8500)
!8532 = !DILocation(line: 1772, column: 7, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8500, file: !3, line: 1772, column: 7)
!8534 = !DILocation(line: 1772, column: 24, scope: !8533)
!8535 = !DILocation(line: 1772, column: 38, scope: !8533)
!8536 = !DILocation(line: 1772, column: 41, scope: !8533)
!8537 = !DILocation(line: 1772, column: 58, scope: !8533)
!8538 = !DILocation(line: 1772, column: 7, scope: !8500)
!8539 = !DILocation(line: 1773, column: 64, scope: !8533)
!8540 = !DILocation(line: 1773, column: 47, scope: !8533)
!8541 = !DILocation(line: 1773, column: 36, scope: !8533)
!8542 = !DILocation(line: 1773, column: 5, scope: !8533)
!8543 = !DILocation(line: 1773, column: 34, scope: !8533)
!8544 = !DILocation(line: 1774, column: 52, scope: !8500)
!8545 = !DILocation(line: 1774, column: 35, scope: !8500)
!8546 = !DILocation(line: 1774, column: 24, scope: !8500)
!8547 = !DILocation(line: 1774, column: 3, scope: !8500)
!8548 = !DILocation(line: 1774, column: 22, scope: !8500)
!8549 = !DILocation(line: 1775, column: 54, scope: !8500)
!8550 = !DILocation(line: 1775, column: 37, scope: !8500)
!8551 = !DILocation(line: 1775, column: 26, scope: !8500)
!8552 = !DILocation(line: 1775, column: 3, scope: !8500)
!8553 = !DILocation(line: 1775, column: 24, scope: !8500)
!8554 = !DILocation(line: 1777, column: 36, scope: !8500)
!8555 = !DILocation(line: 1777, column: 19, scope: !8500)
!8556 = !DILocation(line: 1777, column: 8, scope: !8500)
!8557 = !DILocation(line: 1776, column: 3, scope: !8500)
!8558 = !DILocation(line: 1777, column: 6, scope: !8500)
!8559 = !DILocation(line: 1778, column: 56, scope: !8500)
!8560 = !DILocation(line: 1778, column: 39, scope: !8500)
!8561 = !DILocation(line: 1778, column: 28, scope: !8500)
!8562 = !DILocation(line: 1778, column: 3, scope: !8500)
!8563 = !DILocation(line: 1778, column: 26, scope: !8500)
!8564 = !DILocation(line: 1779, column: 54, scope: !8500)
!8565 = !DILocation(line: 1779, column: 37, scope: !8500)
!8566 = !DILocation(line: 1779, column: 26, scope: !8500)
!8567 = !DILocation(line: 1779, column: 3, scope: !8500)
!8568 = !DILocation(line: 1779, column: 24, scope: !8500)
!8569 = !DILocation(line: 1780, column: 51, scope: !8500)
!8570 = !DILocation(line: 1780, column: 34, scope: !8500)
!8571 = !DILocation(line: 1780, column: 23, scope: !8500)
!8572 = !DILocation(line: 1780, column: 3, scope: !8500)
!8573 = !DILocation(line: 1780, column: 21, scope: !8500)
!8574 = !DILocation(line: 1781, column: 44, scope: !8500)
!8575 = !DILocation(line: 1781, column: 27, scope: !8500)
!8576 = !DILocation(line: 1781, column: 3, scope: !8500)
!8577 = !DILocation(line: 1781, column: 25, scope: !8500)
!8578 = !DILocation(line: 1782, column: 1, scope: !8500)
!8579 = distinct !DISubprogram(name: "unpack_ts_block_value_fields", scope: !3, file: !3, line: 1789, type: !7894, scopeLine: 1790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8580 = !DILocalVariable(name: "bp", arg: 1, scope: !8579, file: !3, line: 1789, type: !3641)
!8581 = !DILocation(line: 1789, column: 49, scope: !8579)
!8582 = !DILocalVariable(name: "expr", arg: 2, scope: !8579, file: !3, line: 1789, type: !1688)
!8583 = !DILocation(line: 1789, column: 58, scope: !8579)
!8584 = !DILocation(line: 1791, column: 55, scope: !8579)
!8585 = !DILocation(line: 1791, column: 38, scope: !8579)
!8586 = !DILocation(line: 1791, column: 27, scope: !8579)
!8587 = !DILocation(line: 1791, column: 3, scope: !8579)
!8588 = !DILocation(line: 1791, column: 25, scope: !8579)
!8589 = !DILocation(line: 1792, column: 53, scope: !8579)
!8590 = !DILocation(line: 1792, column: 36, scope: !8579)
!8591 = !DILocation(line: 1792, column: 25, scope: !8579)
!8592 = !DILocation(line: 1792, column: 3, scope: !8579)
!8593 = !DILocation(line: 1792, column: 23, scope: !8579)
!8594 = !DILocation(line: 1793, column: 1, scope: !8579)
!8595 = distinct !DISubprogram(name: "lto_input_ts_common_tree_pointers", scope: !3, file: !3, line: 2001, type: !7571, scopeLine: 2003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8596 = !DILocalVariable(name: "ib", arg: 1, scope: !8595, file: !3, line: 2001, type: !3647)
!8597 = !DILocation(line: 2001, column: 60, scope: !8595)
!8598 = !DILocalVariable(name: "data_in", arg: 2, scope: !8595, file: !3, line: 2002, type: !3116)
!8599 = !DILocation(line: 2002, column: 24, scope: !8595)
!8600 = !DILocalVariable(name: "expr", arg: 3, scope: !8595, file: !3, line: 2002, type: !1688)
!8601 = !DILocation(line: 2002, column: 38, scope: !8595)
!8602 = !DILocation(line: 2004, column: 38, scope: !8595)
!8603 = !DILocation(line: 2004, column: 42, scope: !8595)
!8604 = !DILocation(line: 2004, column: 22, scope: !8595)
!8605 = !DILocation(line: 2004, column: 3, scope: !8595)
!8606 = !DILocation(line: 2004, column: 20, scope: !8595)
!8607 = !DILocation(line: 2005, column: 1, scope: !8595)
!8608 = distinct !DISubprogram(name: "lto_input_ts_vector_tree_pointers", scope: !3, file: !3, line: 2013, type: !7571, scopeLine: 2015, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8609 = !DILocalVariable(name: "ib", arg: 1, scope: !8608, file: !3, line: 2013, type: !3647)
!8610 = !DILocation(line: 2013, column: 60, scope: !8608)
!8611 = !DILocalVariable(name: "data_in", arg: 2, scope: !8608, file: !3, line: 2014, type: !3116)
!8612 = !DILocation(line: 2014, column: 24, scope: !8608)
!8613 = !DILocalVariable(name: "expr", arg: 3, scope: !8608, file: !3, line: 2014, type: !1688)
!8614 = !DILocation(line: 2014, column: 38, scope: !8608)
!8615 = !DILocation(line: 2016, column: 50, scope: !8608)
!8616 = !DILocation(line: 2016, column: 54, scope: !8608)
!8617 = !DILocation(line: 2016, column: 33, scope: !8608)
!8618 = !DILocation(line: 2016, column: 3, scope: !8608)
!8619 = !DILocation(line: 2016, column: 31, scope: !8608)
!8620 = !DILocation(line: 2017, column: 1, scope: !8608)
!8621 = distinct !DISubprogram(name: "lto_input_ts_complex_tree_pointers", scope: !3, file: !3, line: 2025, type: !7571, scopeLine: 2027, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8622 = !DILocalVariable(name: "ib", arg: 1, scope: !8621, file: !3, line: 2025, type: !3647)
!8623 = !DILocation(line: 2025, column: 61, scope: !8621)
!8624 = !DILocalVariable(name: "data_in", arg: 2, scope: !8621, file: !3, line: 2026, type: !3116)
!8625 = !DILocation(line: 2026, column: 25, scope: !8621)
!8626 = !DILocalVariable(name: "expr", arg: 3, scope: !8621, file: !3, line: 2026, type: !1688)
!8627 = !DILocation(line: 2026, column: 39, scope: !8621)
!8628 = !DILocation(line: 2028, column: 42, scope: !8621)
!8629 = !DILocation(line: 2028, column: 46, scope: !8621)
!8630 = !DILocation(line: 2028, column: 26, scope: !8621)
!8631 = !DILocation(line: 2028, column: 3, scope: !8621)
!8632 = !DILocation(line: 2028, column: 24, scope: !8621)
!8633 = !DILocation(line: 2029, column: 42, scope: !8621)
!8634 = !DILocation(line: 2029, column: 46, scope: !8621)
!8635 = !DILocation(line: 2029, column: 26, scope: !8621)
!8636 = !DILocation(line: 2029, column: 3, scope: !8621)
!8637 = !DILocation(line: 2029, column: 24, scope: !8621)
!8638 = !DILocation(line: 2030, column: 1, scope: !8621)
!8639 = distinct !DISubprogram(name: "lto_input_ts_decl_minimal_tree_pointers", scope: !3, file: !3, line: 2038, type: !7571, scopeLine: 2040, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8640 = !DILocalVariable(name: "ib", arg: 1, scope: !8639, file: !3, line: 2038, type: !3647)
!8641 = !DILocation(line: 2038, column: 66, scope: !8639)
!8642 = !DILocalVariable(name: "data_in", arg: 2, scope: !8639, file: !3, line: 2039, type: !3116)
!8643 = !DILocation(line: 2039, column: 23, scope: !8639)
!8644 = !DILocalVariable(name: "expr", arg: 3, scope: !8639, file: !3, line: 2039, type: !1688)
!8645 = !DILocation(line: 2039, column: 37, scope: !8639)
!8646 = !DILocation(line: 2041, column: 38, scope: !8639)
!8647 = !DILocation(line: 2041, column: 42, scope: !8639)
!8648 = !DILocation(line: 2041, column: 22, scope: !8639)
!8649 = !DILocation(line: 2041, column: 3, scope: !8639)
!8650 = !DILocation(line: 2041, column: 20, scope: !8639)
!8651 = !DILocation(line: 2042, column: 41, scope: !8639)
!8652 = !DILocation(line: 2042, column: 45, scope: !8639)
!8653 = !DILocation(line: 2042, column: 25, scope: !8639)
!8654 = !DILocation(line: 2042, column: 3, scope: !8639)
!8655 = !DILocation(line: 2042, column: 23, scope: !8639)
!8656 = !DILocation(line: 2043, column: 53, scope: !8639)
!8657 = !DILocation(line: 2043, column: 57, scope: !8639)
!8658 = !DILocation(line: 2043, column: 33, scope: !8639)
!8659 = !DILocation(line: 2043, column: 3, scope: !8639)
!8660 = !DILocation(line: 2043, column: 31, scope: !8639)
!8661 = !DILocation(line: 2044, column: 1, scope: !8639)
!8662 = distinct !DISubprogram(name: "lto_input_ts_decl_common_tree_pointers", scope: !3, file: !3, line: 2052, type: !7571, scopeLine: 2054, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8663 = !DILocalVariable(name: "ib", arg: 1, scope: !8662, file: !3, line: 2052, type: !3647)
!8664 = !DILocation(line: 2052, column: 65, scope: !8662)
!8665 = !DILocalVariable(name: "data_in", arg: 2, scope: !8662, file: !3, line: 2053, type: !3116)
!8666 = !DILocation(line: 2053, column: 22, scope: !8662)
!8667 = !DILocalVariable(name: "expr", arg: 3, scope: !8662, file: !3, line: 2053, type: !1688)
!8668 = !DILocation(line: 2053, column: 36, scope: !8662)
!8669 = !DILocation(line: 2055, column: 38, scope: !8662)
!8670 = !DILocation(line: 2055, column: 42, scope: !8662)
!8671 = !DILocation(line: 2055, column: 22, scope: !8662)
!8672 = !DILocation(line: 2055, column: 3, scope: !8662)
!8673 = !DILocation(line: 2055, column: 20, scope: !8662)
!8674 = !DILocation(line: 2056, column: 43, scope: !8662)
!8675 = !DILocation(line: 2056, column: 47, scope: !8662)
!8676 = !DILocation(line: 2056, column: 27, scope: !8662)
!8677 = !DILocation(line: 2056, column: 3, scope: !8662)
!8678 = !DILocation(line: 2056, column: 25, scope: !8662)
!8679 = !DILocation(line: 2058, column: 7, scope: !8680)
!8680 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 2058, column: 7)
!8681 = !DILocation(line: 2058, column: 24, scope: !8680)
!8682 = !DILocation(line: 2058, column: 7, scope: !8662)
!8683 = !DILocation(line: 2059, column: 43, scope: !8680)
!8684 = !DILocation(line: 2059, column: 47, scope: !8680)
!8685 = !DILocation(line: 2059, column: 27, scope: !8680)
!8686 = !DILocation(line: 2059, column: 5, scope: !8680)
!8687 = !DILocation(line: 2059, column: 25, scope: !8680)
!8688 = !DILocation(line: 2061, column: 44, scope: !8662)
!8689 = !DILocation(line: 2061, column: 48, scope: !8662)
!8690 = !DILocation(line: 2061, column: 28, scope: !8662)
!8691 = !DILocation(line: 2061, column: 3, scope: !8662)
!8692 = !DILocation(line: 2061, column: 26, scope: !8662)
!8693 = !DILocation(line: 2062, column: 49, scope: !8662)
!8694 = !DILocation(line: 2062, column: 53, scope: !8662)
!8695 = !DILocation(line: 2062, column: 33, scope: !8662)
!8696 = !DILocation(line: 2062, column: 3, scope: !8662)
!8697 = !DILocation(line: 2062, column: 31, scope: !8662)
!8698 = !DILocation(line: 2064, column: 7, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 2064, column: 7)
!8700 = !DILocation(line: 2064, column: 24, scope: !8699)
!8701 = !DILocation(line: 2064, column: 7, scope: !8662)
!8702 = !DILocation(line: 2065, column: 42, scope: !8699)
!8703 = !DILocation(line: 2065, column: 46, scope: !8699)
!8704 = !DILocation(line: 2065, column: 25, scope: !8699)
!8705 = !DILocation(line: 2065, column: 5, scope: !8699)
!8706 = !DILocation(line: 2065, column: 23, scope: !8699)
!8707 = !DILocation(line: 2067, column: 8, scope: !8708)
!8708 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 2067, column: 7)
!8709 = !DILocation(line: 2067, column: 25, scope: !8708)
!8710 = !DILocation(line: 2068, column: 8, scope: !8708)
!8711 = !DILocation(line: 2068, column: 11, scope: !8708)
!8712 = !DILocation(line: 2068, column: 28, scope: !8708)
!8713 = !DILocation(line: 2069, column: 7, scope: !8708)
!8714 = !DILocation(line: 2069, column: 10, scope: !8708)
!8715 = !DILocation(line: 2067, column: 7, scope: !8662)
!8716 = !DILocation(line: 2070, column: 5, scope: !8708)
!8717 = !DILocation(line: 2071, column: 1, scope: !8662)
!8718 = distinct !DISubprogram(name: "lto_input_ts_decl_non_common_tree_pointers", scope: !3, file: !3, line: 2079, type: !7571, scopeLine: 2081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8719 = !DILocalVariable(name: "ib", arg: 1, scope: !8718, file: !3, line: 2079, type: !3647)
!8720 = !DILocation(line: 2079, column: 69, scope: !8718)
!8721 = !DILocalVariable(name: "data_in", arg: 2, scope: !8718, file: !3, line: 2080, type: !3116)
!8722 = !DILocation(line: 2080, column: 26, scope: !8718)
!8723 = !DILocalVariable(name: "expr", arg: 3, scope: !8718, file: !3, line: 2080, type: !1688)
!8724 = !DILocation(line: 2080, column: 40, scope: !8718)
!8725 = !DILocation(line: 2082, column: 7, scope: !8726)
!8726 = distinct !DILexicalBlock(scope: !8718, file: !3, line: 2082, column: 7)
!8727 = !DILocation(line: 2082, column: 24, scope: !8726)
!8728 = !DILocation(line: 2082, column: 7, scope: !8718)
!8729 = !DILocation(line: 2084, column: 47, scope: !8730)
!8730 = distinct !DILexicalBlock(scope: !8726, file: !3, line: 2083, column: 5)
!8731 = !DILocation(line: 2084, column: 51, scope: !8730)
!8732 = !DILocation(line: 2084, column: 31, scope: !8730)
!8733 = !DILocation(line: 2084, column: 7, scope: !8730)
!8734 = !DILocation(line: 2084, column: 29, scope: !8730)
!8735 = !DILocation(line: 2085, column: 44, scope: !8730)
!8736 = !DILocation(line: 2085, column: 48, scope: !8730)
!8737 = !DILocation(line: 2085, column: 28, scope: !8730)
!8738 = !DILocation(line: 2085, column: 7, scope: !8730)
!8739 = !DILocation(line: 2085, column: 26, scope: !8730)
!8740 = !DILocation(line: 2086, column: 5, scope: !8730)
!8741 = !DILocation(line: 2087, column: 40, scope: !8718)
!8742 = !DILocation(line: 2087, column: 44, scope: !8718)
!8743 = !DILocation(line: 2087, column: 24, scope: !8718)
!8744 = !DILocation(line: 2087, column: 3, scope: !8718)
!8745 = !DILocation(line: 2087, column: 22, scope: !8718)
!8746 = !DILocation(line: 2088, column: 1, scope: !8718)
!8747 = distinct !DISubprogram(name: "lto_input_ts_decl_with_vis_tree_pointers", scope: !3, file: !3, line: 2096, type: !7571, scopeLine: 2098, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8748 = !DILocalVariable(name: "ib", arg: 1, scope: !8747, file: !3, line: 2096, type: !3647)
!8749 = !DILocation(line: 2096, column: 67, scope: !8747)
!8750 = !DILocalVariable(name: "data_in", arg: 2, scope: !8747, file: !3, line: 2097, type: !3116)
!8751 = !DILocation(line: 2097, column: 31, scope: !8747)
!8752 = !DILocalVariable(name: "expr", arg: 3, scope: !8747, file: !3, line: 2097, type: !1688)
!8753 = !DILocation(line: 2097, column: 45, scope: !8747)
!8754 = !DILocalVariable(name: "id", scope: !8747, file: !3, line: 2099, type: !1688)
!8755 = !DILocation(line: 2099, column: 8, scope: !8747)
!8756 = !DILocation(line: 2101, column: 24, scope: !8747)
!8757 = !DILocation(line: 2101, column: 28, scope: !8747)
!8758 = !DILocation(line: 2101, column: 8, scope: !8747)
!8759 = !DILocation(line: 2101, column: 6, scope: !8747)
!8760 = !DILocation(line: 2102, column: 7, scope: !8761)
!8761 = distinct !DILexicalBlock(scope: !8747, file: !3, line: 2102, column: 7)
!8762 = !DILocation(line: 2102, column: 7, scope: !8747)
!8763 = !DILocation(line: 2104, column: 7, scope: !8764)
!8764 = distinct !DILexicalBlock(scope: !8761, file: !3, line: 2103, column: 5)
!8765 = !DILocation(line: 2105, column: 7, scope: !8764)
!8766 = !DILocation(line: 2106, column: 5, scope: !8764)
!8767 = !DILocation(line: 2108, column: 46, scope: !8747)
!8768 = !DILocation(line: 2108, column: 50, scope: !8747)
!8769 = !DILocation(line: 2108, column: 30, scope: !8747)
!8770 = !DILocation(line: 2108, column: 3, scope: !8747)
!8771 = !DILocation(line: 2108, column: 28, scope: !8747)
!8772 = !DILocation(line: 2109, column: 46, scope: !8747)
!8773 = !DILocation(line: 2109, column: 50, scope: !8747)
!8774 = !DILocation(line: 2109, column: 30, scope: !8747)
!8775 = !DILocation(line: 2109, column: 3, scope: !8747)
!8776 = !DILocation(line: 2109, column: 28, scope: !8747)
!8777 = !DILocation(line: 2110, column: 1, scope: !8747)
!8778 = distinct !DISubprogram(name: "lto_input_ts_field_decl_tree_pointers", scope: !3, file: !3, line: 2118, type: !7571, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8779 = !DILocalVariable(name: "ib", arg: 1, scope: !8778, file: !3, line: 2118, type: !3647)
!8780 = !DILocation(line: 2118, column: 64, scope: !8778)
!8781 = !DILocalVariable(name: "data_in", arg: 2, scope: !8778, file: !3, line: 2119, type: !3116)
!8782 = !DILocation(line: 2119, column: 28, scope: !8778)
!8783 = !DILocalVariable(name: "expr", arg: 3, scope: !8778, file: !3, line: 2119, type: !1688)
!8784 = !DILocation(line: 2119, column: 42, scope: !8778)
!8785 = !DILocation(line: 2121, column: 46, scope: !8778)
!8786 = !DILocation(line: 2121, column: 50, scope: !8778)
!8787 = !DILocation(line: 2121, column: 30, scope: !8778)
!8788 = !DILocation(line: 2121, column: 3, scope: !8778)
!8789 = !DILocation(line: 2121, column: 28, scope: !8778)
!8790 = !DILocation(line: 2122, column: 48, scope: !8778)
!8791 = !DILocation(line: 2122, column: 52, scope: !8778)
!8792 = !DILocation(line: 2122, column: 32, scope: !8778)
!8793 = !DILocation(line: 2122, column: 3, scope: !8778)
!8794 = !DILocation(line: 2122, column: 30, scope: !8778)
!8795 = !DILocation(line: 2123, column: 43, scope: !8778)
!8796 = !DILocation(line: 2123, column: 47, scope: !8778)
!8797 = !DILocation(line: 2123, column: 27, scope: !8778)
!8798 = !DILocation(line: 2123, column: 3, scope: !8778)
!8799 = !DILocation(line: 2123, column: 25, scope: !8778)
!8800 = !DILocation(line: 2124, column: 50, scope: !8778)
!8801 = !DILocation(line: 2124, column: 54, scope: !8778)
!8802 = !DILocation(line: 2124, column: 34, scope: !8778)
!8803 = !DILocation(line: 2124, column: 3, scope: !8778)
!8804 = !DILocation(line: 2124, column: 32, scope: !8778)
!8805 = !DILocation(line: 2125, column: 42, scope: !8778)
!8806 = !DILocation(line: 2125, column: 46, scope: !8778)
!8807 = !DILocation(line: 2125, column: 26, scope: !8778)
!8808 = !DILocation(line: 2125, column: 3, scope: !8778)
!8809 = !DILocation(line: 2125, column: 24, scope: !8778)
!8810 = !DILocation(line: 2126, column: 40, scope: !8778)
!8811 = !DILocation(line: 2126, column: 44, scope: !8778)
!8812 = !DILocation(line: 2126, column: 23, scope: !8778)
!8813 = !DILocation(line: 2126, column: 3, scope: !8778)
!8814 = !DILocation(line: 2126, column: 21, scope: !8778)
!8815 = !DILocation(line: 2127, column: 1, scope: !8778)
!8816 = distinct !DISubprogram(name: "lto_input_ts_function_decl_tree_pointers", scope: !3, file: !3, line: 2135, type: !7571, scopeLine: 2137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8817 = !DILocalVariable(name: "ib", arg: 1, scope: !8816, file: !3, line: 2135, type: !3647)
!8818 = !DILocation(line: 2135, column: 67, scope: !8816)
!8819 = !DILocalVariable(name: "data_in", arg: 2, scope: !8816, file: !3, line: 2136, type: !3116)
!8820 = !DILocation(line: 2136, column: 24, scope: !8816)
!8821 = !DILocalVariable(name: "expr", arg: 3, scope: !8816, file: !3, line: 2136, type: !1688)
!8822 = !DILocation(line: 2136, column: 38, scope: !8816)
!8823 = !DILocation(line: 2140, column: 54, scope: !8816)
!8824 = !DILocation(line: 2140, column: 58, scope: !8816)
!8825 = !DILocation(line: 2140, column: 38, scope: !8816)
!8826 = !DILocation(line: 2140, column: 3, scope: !8816)
!8827 = !DILocation(line: 2140, column: 36, scope: !8816)
!8828 = !DILocation(line: 2141, column: 58, scope: !8816)
!8829 = !DILocation(line: 2141, column: 62, scope: !8816)
!8830 = !DILocation(line: 2141, column: 42, scope: !8816)
!8831 = !DILocation(line: 2141, column: 3, scope: !8816)
!8832 = !DILocation(line: 2141, column: 40, scope: !8816)
!8833 = !DILocation(line: 2142, column: 64, scope: !8816)
!8834 = !DILocation(line: 2142, column: 68, scope: !8816)
!8835 = !DILocation(line: 2142, column: 48, scope: !8816)
!8836 = !DILocation(line: 2142, column: 3, scope: !8816)
!8837 = !DILocation(line: 2142, column: 46, scope: !8816)
!8838 = !DILocation(line: 2147, column: 7, scope: !8839)
!8839 = distinct !DILexicalBlock(scope: !8816, file: !3, line: 2147, column: 7)
!8840 = !DILocation(line: 2147, column: 7, scope: !8816)
!8841 = !DILocation(line: 2148, column: 5, scope: !8839)
!8842 = !DILocation(line: 2149, column: 1, scope: !8816)
!8843 = distinct !DISubprogram(name: "lto_input_ts_type_tree_pointers", scope: !3, file: !3, line: 2157, type: !7571, scopeLine: 2159, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8844 = !DILocalVariable(name: "ib", arg: 1, scope: !8843, file: !3, line: 2157, type: !3647)
!8845 = !DILocation(line: 2157, column: 58, scope: !8843)
!8846 = !DILocalVariable(name: "data_in", arg: 2, scope: !8843, file: !3, line: 2158, type: !3116)
!8847 = !DILocation(line: 2158, column: 22, scope: !8843)
!8848 = !DILocalVariable(name: "expr", arg: 3, scope: !8843, file: !3, line: 2158, type: !1688)
!8849 = !DILocation(line: 2158, column: 36, scope: !8843)
!8850 = !DILocation(line: 2160, column: 7, scope: !8851)
!8851 = distinct !DILexicalBlock(scope: !8843, file: !3, line: 2160, column: 7)
!8852 = !DILocation(line: 2160, column: 24, scope: !8851)
!8853 = !DILocation(line: 2160, column: 7, scope: !8843)
!8854 = !DILocation(line: 2161, column: 42, scope: !8851)
!8855 = !DILocation(line: 2161, column: 46, scope: !8851)
!8856 = !DILocation(line: 2161, column: 26, scope: !8851)
!8857 = !DILocation(line: 2161, column: 5, scope: !8851)
!8858 = !DILocation(line: 2161, column: 24, scope: !8851)
!8859 = !DILocation(line: 2162, column: 12, scope: !8860)
!8860 = distinct !DILexicalBlock(scope: !8851, file: !3, line: 2162, column: 12)
!8861 = !DILocation(line: 2162, column: 29, scope: !8860)
!8862 = !DILocation(line: 2162, column: 12, scope: !8851)
!8863 = !DILocation(line: 2163, column: 42, scope: !8860)
!8864 = !DILocation(line: 2163, column: 46, scope: !8860)
!8865 = !DILocation(line: 2163, column: 26, scope: !8860)
!8866 = !DILocation(line: 2163, column: 5, scope: !8860)
!8867 = !DILocation(line: 2163, column: 24, scope: !8860)
!8868 = !DILocation(line: 2164, column: 12, scope: !8869)
!8869 = distinct !DILexicalBlock(scope: !8860, file: !3, line: 2164, column: 12)
!8870 = !DILocation(line: 2164, column: 29, scope: !8869)
!8871 = !DILocation(line: 2164, column: 44, scope: !8869)
!8872 = !DILocation(line: 2164, column: 47, scope: !8869)
!8873 = !DILocation(line: 2164, column: 64, scope: !8869)
!8874 = !DILocation(line: 2164, column: 12, scope: !8860)
!8875 = !DILocation(line: 2165, column: 42, scope: !8869)
!8876 = !DILocation(line: 2165, column: 46, scope: !8869)
!8877 = !DILocation(line: 2165, column: 26, scope: !8869)
!8878 = !DILocation(line: 2165, column: 5, scope: !8869)
!8879 = !DILocation(line: 2165, column: 24, scope: !8869)
!8880 = !DILocation(line: 2166, column: 12, scope: !8881)
!8881 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 2166, column: 12)
!8882 = !DILocation(line: 2166, column: 29, scope: !8881)
!8883 = !DILocation(line: 2166, column: 46, scope: !8881)
!8884 = !DILocation(line: 2166, column: 49, scope: !8881)
!8885 = !DILocation(line: 2166, column: 66, scope: !8881)
!8886 = !DILocation(line: 2166, column: 12, scope: !8869)
!8887 = !DILocation(line: 2167, column: 45, scope: !8881)
!8888 = !DILocation(line: 2167, column: 49, scope: !8881)
!8889 = !DILocation(line: 2167, column: 29, scope: !8881)
!8890 = !DILocation(line: 2167, column: 5, scope: !8881)
!8891 = !DILocation(line: 2167, column: 27, scope: !8881)
!8892 = !DILocation(line: 2168, column: 12, scope: !8893)
!8893 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 2168, column: 12)
!8894 = !DILocation(line: 2168, column: 29, scope: !8893)
!8895 = !DILocation(line: 2168, column: 12, scope: !8881)
!8896 = !DILocation(line: 2169, column: 61, scope: !8893)
!8897 = !DILocation(line: 2169, column: 65, scope: !8893)
!8898 = !DILocation(line: 2169, column: 45, scope: !8893)
!8899 = !DILocation(line: 2169, column: 5, scope: !8893)
!8900 = !DILocation(line: 2169, column: 43, scope: !8893)
!8901 = !DILocation(line: 2171, column: 38, scope: !8843)
!8902 = !DILocation(line: 2171, column: 42, scope: !8843)
!8903 = !DILocation(line: 2171, column: 22, scope: !8843)
!8904 = !DILocation(line: 2171, column: 3, scope: !8843)
!8905 = !DILocation(line: 2171, column: 20, scope: !8843)
!8906 = !DILocation(line: 2172, column: 43, scope: !8843)
!8907 = !DILocation(line: 2172, column: 47, scope: !8843)
!8908 = !DILocation(line: 2172, column: 27, scope: !8843)
!8909 = !DILocation(line: 2172, column: 3, scope: !8843)
!8910 = !DILocation(line: 2172, column: 25, scope: !8843)
!8911 = !DILocation(line: 2173, column: 44, scope: !8843)
!8912 = !DILocation(line: 2173, column: 48, scope: !8843)
!8913 = !DILocation(line: 2173, column: 28, scope: !8843)
!8914 = !DILocation(line: 2173, column: 3, scope: !8843)
!8915 = !DILocation(line: 2173, column: 26, scope: !8843)
!8916 = !DILocation(line: 2174, column: 38, scope: !8843)
!8917 = !DILocation(line: 2174, column: 42, scope: !8843)
!8918 = !DILocation(line: 2174, column: 22, scope: !8843)
!8919 = !DILocation(line: 2174, column: 3, scope: !8843)
!8920 = !DILocation(line: 2174, column: 20, scope: !8843)
!8921 = !DILocation(line: 2177, column: 8, scope: !8922)
!8922 = distinct !DILexicalBlock(scope: !8843, file: !3, line: 2177, column: 7)
!8923 = !DILocation(line: 2177, column: 7, scope: !8843)
!8924 = !DILocation(line: 2178, column: 42, scope: !8922)
!8925 = !DILocation(line: 2178, column: 46, scope: !8922)
!8926 = !DILocation(line: 2178, column: 26, scope: !8922)
!8927 = !DILocation(line: 2178, column: 5, scope: !8922)
!8928 = !DILocation(line: 2178, column: 24, scope: !8922)
!8929 = !DILocation(line: 2179, column: 40, scope: !8843)
!8930 = !DILocation(line: 2179, column: 44, scope: !8843)
!8931 = !DILocation(line: 2179, column: 24, scope: !8843)
!8932 = !DILocation(line: 2179, column: 3, scope: !8843)
!8933 = !DILocation(line: 2179, column: 22, scope: !8843)
!8934 = !DILocation(line: 2180, column: 46, scope: !8843)
!8935 = !DILocation(line: 2180, column: 50, scope: !8843)
!8936 = !DILocation(line: 2180, column: 30, scope: !8843)
!8937 = !DILocation(line: 2180, column: 3, scope: !8843)
!8938 = !DILocation(line: 2180, column: 28, scope: !8843)
!8939 = !DILocation(line: 2183, column: 7, scope: !8940)
!8940 = distinct !DILexicalBlock(scope: !8843, file: !3, line: 2183, column: 7)
!8941 = !DILocation(line: 2183, column: 7, scope: !8843)
!8942 = !DILocation(line: 2184, column: 41, scope: !8940)
!8943 = !DILocation(line: 2184, column: 45, scope: !8940)
!8944 = !DILocation(line: 2184, column: 25, scope: !8940)
!8945 = !DILocation(line: 2184, column: 5, scope: !8940)
!8946 = !DILocation(line: 2184, column: 23, scope: !8940)
!8947 = !DILocation(line: 2185, column: 41, scope: !8843)
!8948 = !DILocation(line: 2185, column: 45, scope: !8843)
!8949 = !DILocation(line: 2185, column: 25, scope: !8843)
!8950 = !DILocation(line: 2185, column: 3, scope: !8843)
!8951 = !DILocation(line: 2185, column: 23, scope: !8843)
!8952 = !DILocation(line: 2186, column: 43, scope: !8843)
!8953 = !DILocation(line: 2186, column: 47, scope: !8843)
!8954 = !DILocation(line: 2186, column: 27, scope: !8843)
!8955 = !DILocation(line: 2186, column: 3, scope: !8843)
!8956 = !DILocation(line: 2186, column: 25, scope: !8843)
!8957 = !DILocation(line: 2187, column: 43, scope: !8843)
!8958 = !DILocation(line: 2187, column: 47, scope: !8843)
!8959 = !DILocation(line: 2187, column: 27, scope: !8843)
!8960 = !DILocation(line: 2187, column: 3, scope: !8843)
!8961 = !DILocation(line: 2187, column: 25, scope: !8843)
!8962 = !DILocation(line: 2188, column: 1, scope: !8843)
!8963 = distinct !DISubprogram(name: "lto_input_ts_list_tree_pointers", scope: !3, file: !3, line: 2196, type: !7571, scopeLine: 2198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8964 = !DILocalVariable(name: "ib", arg: 1, scope: !8963, file: !3, line: 2196, type: !3647)
!8965 = !DILocation(line: 2196, column: 58, scope: !8963)
!8966 = !DILocalVariable(name: "data_in", arg: 2, scope: !8963, file: !3, line: 2197, type: !3116)
!8967 = !DILocation(line: 2197, column: 22, scope: !8963)
!8968 = !DILocalVariable(name: "expr", arg: 3, scope: !8963, file: !3, line: 2197, type: !1688)
!8969 = !DILocation(line: 2197, column: 36, scope: !8963)
!8970 = !DILocation(line: 2199, column: 41, scope: !8963)
!8971 = !DILocation(line: 2199, column: 45, scope: !8963)
!8972 = !DILocation(line: 2199, column: 25, scope: !8963)
!8973 = !DILocation(line: 2199, column: 3, scope: !8963)
!8974 = !DILocation(line: 2199, column: 23, scope: !8963)
!8975 = !DILocation(line: 2200, column: 39, scope: !8963)
!8976 = !DILocation(line: 2200, column: 43, scope: !8963)
!8977 = !DILocation(line: 2200, column: 23, scope: !8963)
!8978 = !DILocation(line: 2200, column: 3, scope: !8963)
!8979 = !DILocation(line: 2200, column: 21, scope: !8963)
!8980 = !DILocation(line: 2201, column: 40, scope: !8963)
!8981 = !DILocation(line: 2201, column: 44, scope: !8963)
!8982 = !DILocation(line: 2201, column: 23, scope: !8963)
!8983 = !DILocation(line: 2201, column: 3, scope: !8963)
!8984 = !DILocation(line: 2201, column: 21, scope: !8963)
!8985 = !DILocation(line: 2202, column: 1, scope: !8963)
!8986 = distinct !DISubprogram(name: "lto_input_ts_vec_tree_pointers", scope: !3, file: !3, line: 2210, type: !7571, scopeLine: 2212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!8987 = !DILocalVariable(name: "ib", arg: 1, scope: !8986, file: !3, line: 2210, type: !3647)
!8988 = !DILocation(line: 2210, column: 57, scope: !8986)
!8989 = !DILocalVariable(name: "data_in", arg: 2, scope: !8986, file: !3, line: 2211, type: !3116)
!8990 = !DILocation(line: 2211, column: 21, scope: !8986)
!8991 = !DILocalVariable(name: "expr", arg: 3, scope: !8986, file: !3, line: 2211, type: !1688)
!8992 = !DILocation(line: 2211, column: 35, scope: !8986)
!8993 = !DILocalVariable(name: "i", scope: !8986, file: !3, line: 2213, type: !1784)
!8994 = !DILocation(line: 2213, column: 7, scope: !8986)
!8995 = !DILocation(line: 2217, column: 10, scope: !8996)
!8996 = distinct !DILexicalBlock(scope: !8986, file: !3, line: 2217, column: 3)
!8997 = !DILocation(line: 2217, column: 8, scope: !8996)
!8998 = !DILocation(line: 2217, column: 15, scope: !8999)
!8999 = distinct !DILexicalBlock(scope: !8996, file: !3, line: 2217, column: 3)
!9000 = !DILocation(line: 2217, column: 19, scope: !8999)
!9001 = !DILocation(line: 2217, column: 17, scope: !8999)
!9002 = !DILocation(line: 2217, column: 3, scope: !8996)
!9003 = !DILocation(line: 2218, column: 46, scope: !8999)
!9004 = !DILocation(line: 2218, column: 50, scope: !8999)
!9005 = !DILocation(line: 2218, column: 30, scope: !8999)
!9006 = !DILocation(line: 2218, column: 5, scope: !8999)
!9007 = !DILocation(line: 2218, column: 28, scope: !8999)
!9008 = !DILocation(line: 2217, column: 44, scope: !8999)
!9009 = !DILocation(line: 2217, column: 3, scope: !8999)
!9010 = distinct !{!9010, !9002, !9011}
!9011 = !DILocation(line: 2218, column: 57, scope: !8996)
!9012 = !DILocation(line: 2219, column: 1, scope: !8986)
!9013 = distinct !DISubprogram(name: "lto_input_ts_exp_tree_pointers", scope: !3, file: !3, line: 2228, type: !7571, scopeLine: 2230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9014 = !DILocalVariable(name: "ib", arg: 1, scope: !9013, file: !3, line: 2228, type: !3647)
!9015 = !DILocation(line: 2228, column: 57, scope: !9013)
!9016 = !DILocalVariable(name: "data_in", arg: 2, scope: !9013, file: !3, line: 2229, type: !3116)
!9017 = !DILocation(line: 2229, column: 28, scope: !9013)
!9018 = !DILocalVariable(name: "expr", arg: 3, scope: !9013, file: !3, line: 2229, type: !1688)
!9019 = !DILocation(line: 2229, column: 42, scope: !9013)
!9020 = !DILocalVariable(name: "i", scope: !9013, file: !3, line: 2231, type: !1784)
!9021 = !DILocation(line: 2231, column: 7, scope: !9013)
!9022 = !DILocalVariable(name: "length", scope: !9013, file: !3, line: 2231, type: !1784)
!9023 = !DILocation(line: 2231, column: 10, scope: !9013)
!9024 = !DILocalVariable(name: "loc", scope: !9013, file: !3, line: 2232, type: !1815)
!9025 = !DILocation(line: 2232, column: 14, scope: !9013)
!9026 = !DILocation(line: 2234, column: 31, scope: !9013)
!9027 = !DILocation(line: 2234, column: 12, scope: !9013)
!9028 = !DILocation(line: 2234, column: 10, scope: !9013)
!9029 = !DILocation(line: 2235, column: 3, scope: !9013)
!9030 = !DILocation(line: 2237, column: 10, scope: !9031)
!9031 = distinct !DILexicalBlock(scope: !9013, file: !3, line: 2237, column: 3)
!9032 = !DILocation(line: 2237, column: 8, scope: !9031)
!9033 = !DILocation(line: 2237, column: 15, scope: !9034)
!9034 = distinct !DILexicalBlock(scope: !9031, file: !3, line: 2237, column: 3)
!9035 = !DILocation(line: 2237, column: 19, scope: !9034)
!9036 = !DILocation(line: 2237, column: 17, scope: !9034)
!9037 = !DILocation(line: 2237, column: 3, scope: !9031)
!9038 = !DILocation(line: 2238, column: 46, scope: !9034)
!9039 = !DILocation(line: 2238, column: 50, scope: !9034)
!9040 = !DILocation(line: 2238, column: 30, scope: !9034)
!9041 = !DILocation(line: 2238, column: 5, scope: !9034)
!9042 = !DILocation(line: 2238, column: 28, scope: !9034)
!9043 = !DILocation(line: 2237, column: 28, scope: !9034)
!9044 = !DILocation(line: 2237, column: 3, scope: !9034)
!9045 = distinct !{!9045, !9037, !9046}
!9046 = !DILocation(line: 2238, column: 57, scope: !9031)
!9047 = !DILocation(line: 2240, column: 29, scope: !9013)
!9048 = !DILocation(line: 2240, column: 33, scope: !9013)
!9049 = !DILocation(line: 2240, column: 9, scope: !9013)
!9050 = !DILocation(line: 2240, column: 7, scope: !9013)
!9051 = !DILocation(line: 2241, column: 3, scope: !9013)
!9052 = !DILocation(line: 2242, column: 39, scope: !9013)
!9053 = !DILocation(line: 2242, column: 43, scope: !9013)
!9054 = !DILocation(line: 2242, column: 23, scope: !9013)
!9055 = !DILocation(line: 2242, column: 3, scope: !9013)
!9056 = !DILocation(line: 2242, column: 21, scope: !9013)
!9057 = !DILocation(line: 2243, column: 1, scope: !9013)
!9058 = distinct !DISubprogram(name: "lto_input_ts_block_tree_pointers", scope: !3, file: !3, line: 2251, type: !7571, scopeLine: 2253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9059 = !DILocalVariable(name: "ib", arg: 1, scope: !9058, file: !3, line: 2251, type: !3647)
!9060 = !DILocation(line: 2251, column: 59, scope: !9058)
!9061 = !DILocalVariable(name: "data_in", arg: 2, scope: !9058, file: !3, line: 2252, type: !3116)
!9062 = !DILocation(line: 2252, column: 23, scope: !9058)
!9063 = !DILocalVariable(name: "expr", arg: 3, scope: !9058, file: !3, line: 2252, type: !1688)
!9064 = !DILocation(line: 2252, column: 37, scope: !9058)
!9065 = !DILocalVariable(name: "i", scope: !9058, file: !3, line: 2254, type: !7)
!9066 = !DILocation(line: 2254, column: 12, scope: !9058)
!9067 = !DILocalVariable(name: "len", scope: !9058, file: !3, line: 2254, type: !7)
!9068 = !DILocation(line: 2254, column: 15, scope: !9058)
!9069 = !DILocation(line: 2256, column: 54, scope: !9058)
!9070 = !DILocation(line: 2256, column: 58, scope: !9058)
!9071 = !DILocation(line: 2256, column: 34, scope: !9058)
!9072 = !DILocation(line: 2256, column: 3, scope: !9058)
!9073 = !DILocation(line: 2256, column: 32, scope: !9058)
!9074 = !DILocation(line: 2257, column: 40, scope: !9058)
!9075 = !DILocation(line: 2257, column: 44, scope: !9058)
!9076 = !DILocation(line: 2257, column: 23, scope: !9058)
!9077 = !DILocation(line: 2257, column: 3, scope: !9058)
!9078 = !DILocation(line: 2257, column: 21, scope: !9058)
!9079 = !DILocation(line: 2259, column: 28, scope: !9058)
!9080 = !DILocation(line: 2259, column: 9, scope: !9058)
!9081 = !DILocation(line: 2259, column: 7, scope: !9058)
!9082 = !DILocation(line: 2260, column: 10, scope: !9083)
!9083 = distinct !DILexicalBlock(scope: !9058, file: !3, line: 2260, column: 3)
!9084 = !DILocation(line: 2260, column: 8, scope: !9083)
!9085 = !DILocation(line: 2260, column: 15, scope: !9086)
!9086 = distinct !DILexicalBlock(scope: !9083, file: !3, line: 2260, column: 3)
!9087 = !DILocation(line: 2260, column: 19, scope: !9086)
!9088 = !DILocation(line: 2260, column: 17, scope: !9086)
!9089 = !DILocation(line: 2260, column: 3, scope: !9083)
!9090 = !DILocalVariable(name: "t", scope: !9091, file: !3, line: 2262, type: !1688)
!9091 = distinct !DILexicalBlock(scope: !9086, file: !3, line: 2261, column: 5)
!9092 = !DILocation(line: 2262, column: 12, scope: !9091)
!9093 = !DILocation(line: 2262, column: 32, scope: !9091)
!9094 = !DILocation(line: 2262, column: 36, scope: !9091)
!9095 = !DILocation(line: 2262, column: 16, scope: !9091)
!9096 = !DILocation(line: 2263, column: 7, scope: !9091)
!9097 = !DILocation(line: 2264, column: 5, scope: !9091)
!9098 = !DILocation(line: 2260, column: 25, scope: !9086)
!9099 = !DILocation(line: 2260, column: 3, scope: !9086)
!9100 = distinct !{!9100, !9089, !9101}
!9101 = !DILocation(line: 2264, column: 5, scope: !9083)
!9102 = !DILocation(line: 2266, column: 47, scope: !9058)
!9103 = !DILocation(line: 2266, column: 51, scope: !9058)
!9104 = !DILocation(line: 2266, column: 31, scope: !9058)
!9105 = !DILocation(line: 2266, column: 3, scope: !9058)
!9106 = !DILocation(line: 2266, column: 29, scope: !9058)
!9107 = !DILocation(line: 2267, column: 50, scope: !9058)
!9108 = !DILocation(line: 2267, column: 54, scope: !9058)
!9109 = !DILocation(line: 2267, column: 34, scope: !9058)
!9110 = !DILocation(line: 2267, column: 3, scope: !9058)
!9111 = !DILocation(line: 2267, column: 32, scope: !9058)
!9112 = !DILocation(line: 2268, column: 50, scope: !9058)
!9113 = !DILocation(line: 2268, column: 54, scope: !9058)
!9114 = !DILocation(line: 2268, column: 34, scope: !9058)
!9115 = !DILocation(line: 2268, column: 3, scope: !9058)
!9116 = !DILocation(line: 2268, column: 32, scope: !9058)
!9117 = !DILocation(line: 2269, column: 49, scope: !9058)
!9118 = !DILocation(line: 2269, column: 53, scope: !9058)
!9119 = !DILocation(line: 2269, column: 33, scope: !9058)
!9120 = !DILocation(line: 2269, column: 3, scope: !9058)
!9121 = !DILocation(line: 2269, column: 31, scope: !9058)
!9122 = !DILocation(line: 2270, column: 45, scope: !9058)
!9123 = !DILocation(line: 2270, column: 49, scope: !9058)
!9124 = !DILocation(line: 2270, column: 28, scope: !9058)
!9125 = !DILocation(line: 2270, column: 3, scope: !9058)
!9126 = !DILocation(line: 2270, column: 26, scope: !9058)
!9127 = !DILocation(line: 2271, column: 1, scope: !9058)
!9128 = distinct !DISubprogram(name: "lto_input_ts_binfo_tree_pointers", scope: !3, file: !3, line: 2279, type: !7571, scopeLine: 2281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9129 = !DILocalVariable(name: "ib", arg: 1, scope: !9128, file: !3, line: 2279, type: !3647)
!9130 = !DILocation(line: 2279, column: 59, scope: !9128)
!9131 = !DILocalVariable(name: "data_in", arg: 2, scope: !9128, file: !3, line: 2280, type: !3116)
!9132 = !DILocation(line: 2280, column: 23, scope: !9128)
!9133 = !DILocalVariable(name: "expr", arg: 3, scope: !9128, file: !3, line: 2280, type: !1688)
!9134 = !DILocation(line: 2280, column: 37, scope: !9128)
!9135 = !DILocalVariable(name: "i", scope: !9128, file: !3, line: 2282, type: !7)
!9136 = !DILocation(line: 2282, column: 12, scope: !9128)
!9137 = !DILocalVariable(name: "len", scope: !9128, file: !3, line: 2282, type: !7)
!9138 = !DILocation(line: 2282, column: 15, scope: !9128)
!9139 = !DILocalVariable(name: "t", scope: !9128, file: !3, line: 2283, type: !1688)
!9140 = !DILocation(line: 2283, column: 8, scope: !9128)
!9141 = !DILocation(line: 2290, column: 3, scope: !9128)
!9142 = !DILocation(line: 2292, column: 27, scope: !9143)
!9143 = distinct !DILexicalBlock(scope: !9128, file: !3, line: 2291, column: 5)
!9144 = !DILocation(line: 2292, column: 31, scope: !9143)
!9145 = !DILocation(line: 2292, column: 11, scope: !9143)
!9146 = !DILocation(line: 2292, column: 9, scope: !9143)
!9147 = !DILocation(line: 2293, column: 11, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !9143, file: !3, line: 2293, column: 11)
!9149 = !DILocation(line: 2293, column: 11, scope: !9143)
!9150 = !DILocation(line: 2294, column: 2, scope: !9148)
!9151 = !DILocation(line: 2295, column: 5, scope: !9143)
!9152 = !DILocation(line: 2296, column: 10, scope: !9128)
!9153 = distinct !{!9153, !9141, !9154}
!9154 = !DILocation(line: 2296, column: 11, scope: !9128)
!9155 = !DILocation(line: 2298, column: 41, scope: !9128)
!9156 = !DILocation(line: 2298, column: 45, scope: !9128)
!9157 = !DILocation(line: 2298, column: 25, scope: !9128)
!9158 = !DILocation(line: 2298, column: 3, scope: !9128)
!9159 = !DILocation(line: 2298, column: 23, scope: !9128)
!9160 = !DILocation(line: 2299, column: 41, scope: !9128)
!9161 = !DILocation(line: 2299, column: 45, scope: !9128)
!9162 = !DILocation(line: 2299, column: 25, scope: !9128)
!9163 = !DILocation(line: 2299, column: 3, scope: !9128)
!9164 = !DILocation(line: 2299, column: 23, scope: !9128)
!9165 = !DILocation(line: 2300, column: 43, scope: !9128)
!9166 = !DILocation(line: 2300, column: 47, scope: !9128)
!9167 = !DILocation(line: 2300, column: 27, scope: !9128)
!9168 = !DILocation(line: 2300, column: 3, scope: !9128)
!9169 = !DILocation(line: 2300, column: 25, scope: !9128)
!9170 = !DILocation(line: 2301, column: 45, scope: !9128)
!9171 = !DILocation(line: 2301, column: 49, scope: !9128)
!9172 = !DILocation(line: 2301, column: 29, scope: !9128)
!9173 = !DILocation(line: 2301, column: 3, scope: !9128)
!9174 = !DILocation(line: 2301, column: 27, scope: !9128)
!9175 = !DILocation(line: 2303, column: 28, scope: !9128)
!9176 = !DILocation(line: 2303, column: 9, scope: !9128)
!9177 = !DILocation(line: 2303, column: 7, scope: !9128)
!9178 = !DILocation(line: 2304, column: 10, scope: !9179)
!9179 = distinct !DILexicalBlock(scope: !9128, file: !3, line: 2304, column: 3)
!9180 = !DILocation(line: 2304, column: 8, scope: !9179)
!9181 = !DILocation(line: 2304, column: 15, scope: !9182)
!9182 = distinct !DILexicalBlock(scope: !9179, file: !3, line: 2304, column: 3)
!9183 = !DILocation(line: 2304, column: 19, scope: !9182)
!9184 = !DILocation(line: 2304, column: 17, scope: !9182)
!9185 = !DILocation(line: 2304, column: 3, scope: !9179)
!9186 = !DILocalVariable(name: "a", scope: !9187, file: !3, line: 2306, type: !1688)
!9187 = distinct !DILexicalBlock(scope: !9182, file: !3, line: 2305, column: 5)
!9188 = !DILocation(line: 2306, column: 12, scope: !9187)
!9189 = !DILocation(line: 2306, column: 32, scope: !9187)
!9190 = !DILocation(line: 2306, column: 36, scope: !9187)
!9191 = !DILocation(line: 2306, column: 16, scope: !9187)
!9192 = !DILocation(line: 2307, column: 7, scope: !9187)
!9193 = !DILocation(line: 2308, column: 5, scope: !9187)
!9194 = !DILocation(line: 2304, column: 25, scope: !9182)
!9195 = !DILocation(line: 2304, column: 3, scope: !9182)
!9196 = distinct !{!9196, !9185, !9197}
!9197 = !DILocation(line: 2308, column: 5, scope: !9179)
!9198 = !DILocation(line: 2310, column: 52, scope: !9128)
!9199 = !DILocation(line: 2310, column: 56, scope: !9128)
!9200 = !DILocation(line: 2310, column: 36, scope: !9128)
!9201 = !DILocation(line: 2310, column: 3, scope: !9128)
!9202 = !DILocation(line: 2310, column: 34, scope: !9128)
!9203 = !DILocation(line: 2311, column: 47, scope: !9128)
!9204 = !DILocation(line: 2311, column: 51, scope: !9128)
!9205 = !DILocation(line: 2311, column: 31, scope: !9128)
!9206 = !DILocation(line: 2311, column: 3, scope: !9128)
!9207 = !DILocation(line: 2311, column: 29, scope: !9128)
!9208 = !DILocation(line: 2312, column: 45, scope: !9128)
!9209 = !DILocation(line: 2312, column: 49, scope: !9128)
!9210 = !DILocation(line: 2312, column: 29, scope: !9128)
!9211 = !DILocation(line: 2312, column: 3, scope: !9128)
!9212 = !DILocation(line: 2312, column: 27, scope: !9128)
!9213 = !DILocation(line: 2313, column: 1, scope: !9128)
!9214 = distinct !DISubprogram(name: "lto_input_ts_constructor_tree_pointers", scope: !3, file: !3, line: 2321, type: !7571, scopeLine: 2323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9215 = !DILocalVariable(name: "ib", arg: 1, scope: !9214, file: !3, line: 2321, type: !3647)
!9216 = !DILocation(line: 2321, column: 65, scope: !9214)
!9217 = !DILocalVariable(name: "data_in", arg: 2, scope: !9214, file: !3, line: 2322, type: !3116)
!9218 = !DILocation(line: 2322, column: 29, scope: !9214)
!9219 = !DILocalVariable(name: "expr", arg: 3, scope: !9214, file: !3, line: 2322, type: !1688)
!9220 = !DILocation(line: 2322, column: 43, scope: !9214)
!9221 = !DILocalVariable(name: "i", scope: !9214, file: !3, line: 2324, type: !7)
!9222 = !DILocation(line: 2324, column: 12, scope: !9214)
!9223 = !DILocalVariable(name: "len", scope: !9214, file: !3, line: 2324, type: !7)
!9224 = !DILocation(line: 2324, column: 15, scope: !9214)
!9225 = !DILocation(line: 2326, column: 28, scope: !9214)
!9226 = !DILocation(line: 2326, column: 9, scope: !9214)
!9227 = !DILocation(line: 2326, column: 7, scope: !9214)
!9228 = !DILocation(line: 2327, column: 10, scope: !9229)
!9229 = distinct !DILexicalBlock(scope: !9214, file: !3, line: 2327, column: 3)
!9230 = !DILocation(line: 2327, column: 8, scope: !9229)
!9231 = !DILocation(line: 2327, column: 15, scope: !9232)
!9232 = distinct !DILexicalBlock(scope: !9229, file: !3, line: 2327, column: 3)
!9233 = !DILocation(line: 2327, column: 19, scope: !9232)
!9234 = !DILocation(line: 2327, column: 17, scope: !9232)
!9235 = !DILocation(line: 2327, column: 3, scope: !9229)
!9236 = !DILocalVariable(name: "index", scope: !9237, file: !3, line: 2329, type: !1688)
!9237 = distinct !DILexicalBlock(scope: !9232, file: !3, line: 2328, column: 5)
!9238 = !DILocation(line: 2329, column: 12, scope: !9237)
!9239 = !DILocalVariable(name: "value", scope: !9237, file: !3, line: 2329, type: !1688)
!9240 = !DILocation(line: 2329, column: 19, scope: !9237)
!9241 = !DILocation(line: 2331, column: 31, scope: !9237)
!9242 = !DILocation(line: 2331, column: 35, scope: !9237)
!9243 = !DILocation(line: 2331, column: 15, scope: !9237)
!9244 = !DILocation(line: 2331, column: 13, scope: !9237)
!9245 = !DILocation(line: 2332, column: 31, scope: !9237)
!9246 = !DILocation(line: 2332, column: 35, scope: !9237)
!9247 = !DILocation(line: 2332, column: 15, scope: !9237)
!9248 = !DILocation(line: 2332, column: 13, scope: !9237)
!9249 = !DILocation(line: 2333, column: 7, scope: !9237)
!9250 = !DILocalVariable(name: "_ce___", scope: !9251, file: !3, line: 2333, type: !9252)
!9251 = distinct !DILexicalBlock(scope: !9237, file: !3, line: 2333, column: 7)
!9252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2906, size: 64)
!9253 = !DILocation(line: 2333, column: 7, scope: !9251)
!9254 = !DILocation(line: 2334, column: 5, scope: !9237)
!9255 = !DILocation(line: 2327, column: 25, scope: !9232)
!9256 = !DILocation(line: 2327, column: 3, scope: !9232)
!9257 = distinct !{!9257, !9235, !9258}
!9258 = !DILocation(line: 2334, column: 5, scope: !9229)
!9259 = !DILocation(line: 2335, column: 1, scope: !9214)
!9260 = distinct !DISubprogram(name: "lto_input_chain", scope: !3, file: !3, line: 1972, type: !3693, scopeLine: 1973, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9261 = !DILocalVariable(name: "ib", arg: 1, scope: !9260, file: !3, line: 1972, type: !3647)
!9262 = !DILocation(line: 1972, column: 42, scope: !9260)
!9263 = !DILocalVariable(name: "data_in", arg: 2, scope: !9260, file: !3, line: 1972, type: !3116)
!9264 = !DILocation(line: 1972, column: 62, scope: !9260)
!9265 = !DILocalVariable(name: "i", scope: !9260, file: !3, line: 1974, type: !1784)
!9266 = !DILocation(line: 1974, column: 7, scope: !9260)
!9267 = !DILocalVariable(name: "count", scope: !9260, file: !3, line: 1974, type: !1784)
!9268 = !DILocation(line: 1974, column: 10, scope: !9260)
!9269 = !DILocalVariable(name: "first", scope: !9260, file: !3, line: 1975, type: !1688)
!9270 = !DILocation(line: 1975, column: 8, scope: !9260)
!9271 = !DILocalVariable(name: "prev", scope: !9260, file: !3, line: 1975, type: !1688)
!9272 = !DILocation(line: 1975, column: 15, scope: !9260)
!9273 = !DILocalVariable(name: "curr", scope: !9260, file: !3, line: 1975, type: !1688)
!9274 = !DILocation(line: 1975, column: 21, scope: !9260)
!9275 = !DILocation(line: 1977, column: 16, scope: !9260)
!9276 = !DILocation(line: 1977, column: 9, scope: !9260)
!9277 = !DILocation(line: 1978, column: 30, scope: !9260)
!9278 = !DILocation(line: 1978, column: 11, scope: !9260)
!9279 = !DILocation(line: 1978, column: 9, scope: !9260)
!9280 = !DILocation(line: 1979, column: 10, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !9260, file: !3, line: 1979, column: 3)
!9282 = !DILocation(line: 1979, column: 8, scope: !9281)
!9283 = !DILocation(line: 1979, column: 15, scope: !9284)
!9284 = distinct !DILexicalBlock(scope: !9281, file: !3, line: 1979, column: 3)
!9285 = !DILocation(line: 1979, column: 19, scope: !9284)
!9286 = !DILocation(line: 1979, column: 17, scope: !9284)
!9287 = !DILocation(line: 1979, column: 3, scope: !9281)
!9288 = !DILocation(line: 1981, column: 30, scope: !9289)
!9289 = distinct !DILexicalBlock(scope: !9284, file: !3, line: 1980, column: 5)
!9290 = !DILocation(line: 1981, column: 34, scope: !9289)
!9291 = !DILocation(line: 1981, column: 14, scope: !9289)
!9292 = !DILocation(line: 1981, column: 12, scope: !9289)
!9293 = !DILocation(line: 1982, column: 11, scope: !9294)
!9294 = distinct !DILexicalBlock(scope: !9289, file: !3, line: 1982, column: 11)
!9295 = !DILocation(line: 1982, column: 11, scope: !9289)
!9296 = !DILocation(line: 1983, column: 22, scope: !9294)
!9297 = !DILocation(line: 1983, column: 2, scope: !9294)
!9298 = !DILocation(line: 1983, column: 20, scope: !9294)
!9299 = !DILocation(line: 1985, column: 10, scope: !9294)
!9300 = !DILocation(line: 1985, column: 8, scope: !9294)
!9301 = !DILocation(line: 1987, column: 7, scope: !9289)
!9302 = !DILocation(line: 1987, column: 25, scope: !9289)
!9303 = !DILocation(line: 1988, column: 14, scope: !9289)
!9304 = !DILocation(line: 1988, column: 12, scope: !9289)
!9305 = !DILocation(line: 1989, column: 5, scope: !9289)
!9306 = !DILocation(line: 1979, column: 27, scope: !9284)
!9307 = !DILocation(line: 1979, column: 3, scope: !9284)
!9308 = distinct !{!9308, !9287, !9309}
!9309 = !DILocation(line: 1989, column: 5, scope: !9281)
!9310 = !DILocation(line: 1991, column: 10, scope: !9260)
!9311 = !DILocation(line: 1991, column: 3, scope: !9260)
!9312 = distinct !DISubprogram(name: "tree_operand_length", scope: !135, file: !135, line: 5347, type: !9313, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9313 = !DISubroutineType(types: !9314)
!9314 = !{!1784, !6903}
!9315 = !DILocalVariable(name: "node", arg: 1, scope: !9312, file: !135, line: 5347, type: !6903)
!9316 = !DILocation(line: 5347, column: 33, scope: !9312)
!9317 = !DILocation(line: 5349, column: 7, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9312, file: !135, line: 5349, column: 7)
!9319 = !DILocation(line: 5349, column: 7, scope: !9312)
!9320 = !DILocation(line: 5350, column: 12, scope: !9318)
!9321 = !DILocation(line: 5350, column: 5, scope: !9318)
!9322 = !DILocation(line: 5352, column: 12, scope: !9318)
!9323 = !DILocation(line: 5352, column: 5, scope: !9318)
!9324 = !DILocation(line: 5353, column: 1, scope: !9312)
!9325 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !135, file: !135, line: 183, type: !9326, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9326 = !DISubroutineType(types: !9327)
!9327 = !{!2052, !5756, !1688}
!9328 = !DILocalVariable(name: "vec_", arg: 1, scope: !9325, file: !135, line: 183, type: !5756)
!9329 = !DILocation(line: 183, column: 1, scope: !9325)
!9330 = !DILocalVariable(name: "obj_", arg: 2, scope: !9325, file: !135, line: 183, type: !1688)
!9331 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !135, file: !135, line: 183, type: !6228, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9332 = !DILocalVariable(name: "vec_", arg: 1, scope: !9331, file: !135, line: 183, type: !5756)
!9333 = !DILocation(line: 183, column: 1, scope: !9331)
!9334 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9331, file: !135, line: 183, type: !1784)
!9335 = !DILocalVariable(name: "extend", scope: !9331, file: !135, line: 183, type: !1784)
!9336 = !DILocation(line: 183, column: 1, scope: !9337)
!9337 = distinct !DILexicalBlock(scope: !9331, file: !135, line: 183, column: 1)
!9338 = distinct !DISubprogram(name: "VEC_constructor_elt_gc_safe_push", scope: !135, file: !135, line: 1538, type: !9339, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9339 = !DISubroutineType(types: !9340)
!9340 = !{!9252, !9341, !9342}
!9341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2894, size: 64)
!9342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9343, size: 64)
!9343 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2906)
!9344 = !DILocalVariable(name: "vec_", arg: 1, scope: !9338, file: !135, line: 1538, type: !9341)
!9345 = !DILocation(line: 1538, column: 1, scope: !9338)
!9346 = !DILocalVariable(name: "obj_", arg: 2, scope: !9338, file: !135, line: 1538, type: !9342)
!9347 = distinct !DISubprogram(name: "VEC_constructor_elt_gc_reserve", scope: !135, file: !135, line: 1538, type: !9348, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9348 = !DISubroutineType(types: !9349)
!9349 = !{!1784, !9341, !1784}
!9350 = !DILocalVariable(name: "vec_", arg: 1, scope: !9347, file: !135, line: 1538, type: !9341)
!9351 = !DILocation(line: 1538, column: 1, scope: !9347)
!9352 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9347, file: !135, line: 1538, type: !1784)
!9353 = !DILocalVariable(name: "extend", scope: !9347, file: !135, line: 1538, type: !1784)
!9354 = !DILocation(line: 1538, column: 1, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9347, file: !135, line: 1538, column: 1)
!9356 = distinct !DISubprogram(name: "VEC_constructor_elt_base_quick_push", scope: !135, file: !135, line: 1537, type: !9357, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9357 = !DISubroutineType(types: !9358)
!9358 = !{!9252, !9359, !9342}
!9359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2899, size: 64)
!9360 = !DILocalVariable(name: "vec_", arg: 1, scope: !9356, file: !135, line: 1537, type: !9359)
!9361 = !DILocation(line: 1537, column: 1, scope: !9356)
!9362 = !DILocalVariable(name: "obj_", arg: 2, scope: !9356, file: !135, line: 1537, type: !9342)
!9363 = !DILocalVariable(name: "slot_", scope: !9356, file: !135, line: 1537, type: !9252)
!9364 = !DILocation(line: 1537, column: 1, scope: !9365)
!9365 = distinct !DILexicalBlock(scope: !9356, file: !135, line: 1537, column: 1)
!9366 = distinct !DISubprogram(name: "VEC_constructor_elt_base_space", scope: !135, file: !135, line: 1537, type: !9367, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9367 = !DISubroutineType(types: !9368)
!9368 = !{!1784, !9359, !1784}
!9369 = !DILocalVariable(name: "vec_", arg: 1, scope: !9366, file: !135, line: 1537, type: !9359)
!9370 = !DILocation(line: 1537, column: 1, scope: !9366)
!9371 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9366, file: !135, line: 1537, type: !1784)
!9372 = distinct !DISubprogram(name: "get_resolution", scope: !3, file: !3, line: 1537, type: !9373, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9373 = !DISubroutineType(types: !9374)
!9374 = !{!604, !3116, !7}
!9375 = !DILocalVariable(name: "data_in", arg: 1, scope: !9372, file: !3, line: 1537, type: !3116)
!9376 = !DILocation(line: 1537, column: 33, scope: !9372)
!9377 = !DILocalVariable(name: "index", arg: 2, scope: !9372, file: !3, line: 1537, type: !7)
!9378 = !DILocation(line: 1537, column: 51, scope: !9372)
!9379 = !DILocation(line: 1539, column: 7, scope: !9380)
!9380 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 1539, column: 7)
!9381 = !DILocation(line: 1539, column: 16, scope: !9380)
!9382 = !DILocation(line: 1539, column: 7, scope: !9372)
!9383 = !DILocalVariable(name: "ret", scope: !9384, file: !3, line: 1541, type: !3402)
!9384 = distinct !DILexicalBlock(scope: !9380, file: !3, line: 1540, column: 5)
!9385 = !DILocation(line: 1541, column: 37, scope: !9384)
!9386 = !DILocation(line: 1545, column: 11, scope: !9387)
!9387 = distinct !DILexicalBlock(scope: !9384, file: !3, line: 1545, column: 11)
!9388 = !DILocation(line: 1546, column: 41, scope: !9387)
!9389 = !DILocation(line: 1546, column: 38, scope: !9387)
!9390 = !DILocation(line: 1545, column: 11, scope: !9384)
!9391 = !DILocation(line: 1547, column: 2, scope: !9387)
!9392 = !DILocation(line: 1548, column: 13, scope: !9384)
!9393 = !DILocation(line: 1548, column: 11, scope: !9384)
!9394 = !DILocation(line: 1551, column: 14, scope: !9384)
!9395 = !DILocation(line: 1551, column: 7, scope: !9384)
!9396 = !DILocation(line: 1555, column: 5, scope: !9380)
!9397 = !DILocation(line: 1556, column: 1, scope: !9372)
!9398 = distinct !DISubprogram(name: "VEC_ld_plugin_symbol_resolution_t_base_length", scope: !591, file: !591, line: 285, type: !9399, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9399 = !DISubroutineType(types: !9400)
!9400 = !{!7, !9401}
!9401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9402, size: 64)
!9402 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3395)
!9403 = !DILocalVariable(name: "vec_", arg: 1, scope: !9398, file: !591, line: 285, type: !9401)
!9404 = !DILocation(line: 285, column: 1, scope: !9398)
!9405 = distinct !DISubprogram(name: "VEC_ld_plugin_symbol_resolution_t_base_index", scope: !591, file: !591, line: 285, type: !9406, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3494)
!9406 = !DISubroutineType(types: !9407)
!9407 = !{!3402, !9401, !7}
!9408 = !DILocalVariable(name: "vec_", arg: 1, scope: !9405, file: !591, line: 285, type: !9401)
!9409 = !DILocation(line: 285, column: 1, scope: !9405)
!9410 = !DILocalVariable(name: "ix_", arg: 2, scope: !9405, file: !591, line: 285, type: !7)
!9411 = !DILocation(line: 0, scope: !9405)
