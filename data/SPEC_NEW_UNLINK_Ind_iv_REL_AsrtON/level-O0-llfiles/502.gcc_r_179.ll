; ModuleID = 'ira-build.c'
source_filename = "ira-build.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.ira_allocno = type { i32, i32, i32, i32, %struct.rtx_def*, %struct.ira_allocno*, %struct.ira_loop_tree_node*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ira_allocno_copy*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno_live_range*, i32, i32, i8*, i32, i32, i64, i64, i32, i32, i32, i16, %struct.ira_allocno*, i32*, i32*, i32*, i32*, i32, i32, %struct.ira_allocno*, %struct.ira_allocno*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.ira_loop_tree_node = type { %struct.basic_block_def*, %struct.loop*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, i32, i8, %struct.ira_allocno**, i8, [27 x i32], %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.gimple_seq_d = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ira_allocno_copy = type { i32, %struct.ira_allocno*, %struct.ira_allocno*, i32, i8, %struct.rtx_def*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_loop_tree_node* }
%struct.ira_allocno_live_range = type { %struct.ira_allocno*, i32, i32, %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range* }
%struct.VEC_ira_allocno_t_heap = type { %struct.VEC_ira_allocno_t_base }
%struct.VEC_ira_allocno_t_base = type { i32, i32, [1 x %struct.ira_allocno*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.VEC_ira_copy_t_heap = type { %struct.VEC_ira_copy_t_base }
%struct.VEC_ira_copy_t_base = type { i32, i32, [1 x %struct.ira_allocno_copy*] }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.VEC_ira_loop_tree_node_t_heap = type { %struct.VEC_ira_loop_tree_node_t_base }
%struct.VEC_ira_loop_tree_node_t_base = type { i32, i32, [1 x %struct.ira_loop_tree_node*] }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.ira_copy_iterator = type { i32 }
%struct.ira_allocno_iterator = type { i32 }
%struct.sparseset_def = type { i32*, i32*, i32, i32, i32, i8, i8, [2 x i32] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.df_lr_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }

@allocno_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !0
@ira_regno_allocno_map = common dso_local global %struct.ira_allocno** null, align 8, !dbg !2002
@ira_allocnos_num = common dso_local global i32 0, align 4, !dbg !2006
@ira_no_alloc_regs = external dso_local global i64, align 8
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@allocno_vec = internal global %struct.VEC_ira_allocno_t_heap* null, align 8, !dbg !2038
@ira_allocnos = common dso_local global %struct.ira_allocno** null, align 8, !dbg !2004
@ira_conflict_id_allocno_map_vec = internal global %struct.VEC_ira_allocno_t_heap* null, align 8, !dbg !2040
@ira_conflict_id_allocno_map = common dso_local global %struct.ira_allocno** null, align 8, !dbg !2008
@reg_class_contents = external dso_local global [27 x i64], align 16
@ira_dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [9 x i8] c" a%d(r%d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c",b%d\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c",l%d\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c")\00", align 1
@allocno_live_range_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !2015
@copy_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !2042
@ira_copies_num = common dso_local global i32 0, align 4, !dbg !2013
@copy_vec = internal global %struct.VEC_ira_copy_t_heap* null, align 8, !dbg !2044
@ira_copies = common dso_local global %struct.ira_allocno_copy** null, align 8, !dbg !2010
@stderr = external dso_local global %struct._IO_FILE*, align 8
@cost_vector_pool = internal global [27 x %struct.alloc_pool_def*] zeroinitializer, align 16, !dbg !2046
@ira_curr_loop_tree_node = common dso_local global %struct.ira_loop_tree_node* null, align 8, !dbg !2049
@ira_curr_regno_allocno_map = common dso_local global %struct.ira_allocno** null, align 8, !dbg !2051
@regno_top_level_allocno_map = internal global %struct.ira_allocno** null, align 8, !dbg !2053
@internal_flag_ira_verbose = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [42 x i8] c"      Moving ranges of a%dr%d to a%dr%d: \00", align 1
@ira_class_hard_regs_num = external dso_local global [27 x i32], align 16
@ira_max_point = external dso_local global i32, align 4
@ira_start_point_ranges = external dso_local global %struct.ira_allocno_live_range**, align 8
@ira_reg_classes_intersect_p = external dso_local global [27 x [27 x i8]], align 16
@ira_finish_point_ranges = external dso_local global %struct.ira_allocno_live_range**, align 8
@.str.6 = private unnamed_addr constant [35 x i8] c"      Remove cp%d:%c%dr%d-%c%dr%d\0A\00", align 1
@ira_loop_tree_root = common dso_local global %struct.ira_loop_tree_node* null, align 8, !dbg !1994
@.str.7 = private unnamed_addr constant [33 x i8] c"      Remove cp%d:a%dr%d-a%dr%d\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"      Remove a%dr%d\0A\00", align 1
@ira_conflicts_p = external dso_local global i8, align 1
@call_used_reg_set = external dso_local global i64, align 8
@.str.9 = private unnamed_addr constant [36 x i8] c"  regions=%d, blocks=%d, points=%d\0A\00", align 1
@ira_loops = external dso_local global %struct.loops, align 8
@cfun = external dso_local global %struct.function*, align 8
@.str.10 = private unnamed_addr constant [53 x i8] c"    allocnos=%d, copies=%d, conflicts=%d, ranges=%d\0A\00", align 1
@ira_loop_tree_height = common dso_local global i32 0, align 4, !dbg !1996
@ira_bb_nodes = common dso_local global %struct.ira_loop_tree_node* null, align 8, !dbg !1998
@ira_loop_nodes = common dso_local global %struct.ira_loop_tree_node* null, align 8, !dbg !2000
@.str.11 = private unnamed_addr constant [12 x i8] c"ira-build.c\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"  cp%d:a%d(r%d)<->a%d(r%d)@%d:%s\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"move\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"constraint\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"shuffle\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c" a%d(r%d):\00", align 1
@.str.18 = private unnamed_addr constant [18 x i8] c" cp%d:a%d(r%d)@%d\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"      Coping ranges of a%dr%d to a%dr%d: \00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"./sparseset.h\00", align 1
@allocno_conflict_check = internal global i32* null, align 8, !dbg !2055
@curr_allocno_conflict_check_tick = internal global i32 0, align 4, !dbg !2057
@ira_reg_class_cover_size = external dso_local global i32, align 4
@ira_reg_class_cover = external dso_local global [27 x i32], align 16
@.str.22 = private unnamed_addr constant [13 x i8] c"cost vectors\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"allocno live ranges\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"allocnos\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"copies\00", align 1
@last_basic_block_before_change = internal global i32 0, align 4, !dbg !2059
@.str.26 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@optimize = external dso_local global i32, align 4
@curr_bb = internal global %struct.basic_block_def* null, align 8, !dbg !2061
@optimize_size = external dso_local global i32, align 4
@flag_branch_probabilities = external dso_local global i32, align 4
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@df = external dso_local global %struct.df*, align 8
@children_vec = internal global %struct.VEC_ira_loop_tree_node_t_heap* null, align 8, !dbg !2063
@removed_loop_vec = internal global %struct.VEC_ira_loop_tree_node_t_heap* null, align 8, !dbg !2065
@.str.27 = private unnamed_addr constant [59 x i8] c"  Mark loop %d (header %d, freq %d, depth %d) for removal\0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.28 = private unnamed_addr constant [64 x i8] c"  Mark loop %d (header %d, freq %d, depth %d) for removal (%s)\0A\00", align 1
@.str.29 = private unnamed_addr constant [13 x i8] c"low pressure\00", align 1
@.str.30 = private unnamed_addr constant [11 x i8] c"cheap loop\00", align 1
@ira_available_class_regs = external dso_local global [27 x i32], align 16
@regno_allocnos = internal global %struct.ira_allocno** null, align 8, !dbg !2067
@.str.31 = private unnamed_addr constant [39 x i8] c" Rebuilding regno allocno list for %d\0A\00", align 1
@reg_obstack = external dso_local global %struct.bitmap_obstack, align 8
@flag_ira_region = external dso_local global i32, align 4
@.str.32 = private unnamed_addr constant [18 x i8] c"    Creating cap \00", align 1
@flag_ira_algorithm = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ira_allocno* @ira_create_allocno(i32 %regno, i8 zeroext %cap_p, %struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !2073 {
entry:
  %regno.addr = alloca i32, align 4
  %cap_p.addr = alloca i8, align 1
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !2077, metadata !DIExpression()), !dbg !2078
  store i8 %cap_p, i8* %cap_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %cap_p.addr, metadata !2079, metadata !DIExpression()), !dbg !2080
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !2081, metadata !DIExpression()), !dbg !2082
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !2083, metadata !DIExpression()), !dbg !2084
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_pool, align 8, !dbg !2085
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !2086
  %1 = bitcast i8* %call to %struct.ira_allocno*, !dbg !2087
  store %struct.ira_allocno* %1, %struct.ira_allocno** %a, align 8, !dbg !2088
  %2 = load i32, i32* %regno.addr, align 4, !dbg !2089
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2090
  %regno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 1, !dbg !2090
  store i32 %2, i32* %regno1, align 4, !dbg !2091
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !2092
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2093
  %loop_tree_node2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 6, !dbg !2093
  store %struct.ira_loop_tree_node* %4, %struct.ira_loop_tree_node** %loop_tree_node2, align 8, !dbg !2094
  %6 = load i8, i8* %cap_p.addr, align 1, !dbg !2095
  %tobool = icmp ne i8 %6, 0, !dbg !2095
  br i1 %tobool, label %if.end11, label %if.then, !dbg !2097

if.then:                                          ; preds = %entry
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !2098
  %8 = load i32, i32* %regno.addr, align 4, !dbg !2100
  %idxprom = sext i32 %8 to i64, !dbg !2098
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 %idxprom, !dbg !2098
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !2098
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2101
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 5, !dbg !2101
  store %struct.ira_allocno* %9, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !2102
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2103
  %12 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !2104
  %13 = load i32, i32* %regno.addr, align 4, !dbg !2105
  %idxprom3 = sext i32 %13 to i64, !dbg !2104
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %12, i64 %idxprom3, !dbg !2104
  store %struct.ira_allocno* %11, %struct.ira_allocno** %arrayidx4, align 8, !dbg !2106
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !2107
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i32 0, i32 9, !dbg !2109
  %15 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !2109
  %16 = load i32, i32* %regno.addr, align 4, !dbg !2110
  %idxprom5 = sext i32 %16 to i64, !dbg !2107
  %arrayidx6 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %15, i64 %idxprom5, !dbg !2107
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx6, align 8, !dbg !2107
  %cmp = icmp eq %struct.ira_allocno* %17, null, !dbg !2111
  br i1 %cmp, label %if.then7, label %if.end, !dbg !2112

if.then7:                                         ; preds = %if.then
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2113
  %19 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !2114
  %regno_allocno_map8 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %19, i32 0, i32 9, !dbg !2115
  %20 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map8, align 8, !dbg !2115
  %21 = load i32, i32* %regno.addr, align 4, !dbg !2116
  %idxprom9 = sext i32 %21 to i64, !dbg !2114
  %arrayidx10 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %20, i64 %idxprom9, !dbg !2114
  store %struct.ira_allocno* %18, %struct.ira_allocno** %arrayidx10, align 8, !dbg !2117
  br label %if.end, !dbg !2114

if.end:                                           ; preds = %if.then7, %if.then
  br label %if.end11, !dbg !2118

if.end11:                                         ; preds = %if.end, %entry
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2119
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 16, !dbg !2119
  store %struct.ira_allocno* null, %struct.ira_allocno** %cap, align 8, !dbg !2120
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2121
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 17, !dbg !2121
  store %struct.ira_allocno* null, %struct.ira_allocno** %cap_member, align 8, !dbg !2122
  %24 = load i32, i32* @ira_allocnos_num, align 4, !dbg !2123
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2124
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 0, !dbg !2124
  store i32 %24, i32* %num, align 8, !dbg !2125
  %26 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !2126
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %26, i32 0, i32 12, !dbg !2127
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !2127
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2128
  %num12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 0, !dbg !2128
  %29 = load i32, i32* %num12, align 8, !dbg !2128
  %call13 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %27, i32 %29), !dbg !2129
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2130
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 23, !dbg !2130
  store i8* null, i8** %conflict_allocno_array, align 8, !dbg !2131
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2132
  %conflict_allocnos_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 28, !dbg !2132
  store i32 0, i32* %conflict_allocnos_num, align 8, !dbg !2133
  %32 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !2134
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2134
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %33, i32 0, i32 26, !dbg !2134
  store i64 %32, i64* %conflict_hard_regs, align 8, !dbg !2134
  %34 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !2135
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2135
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 27, !dbg !2135
  store i64 %34, i64* %total_conflict_hard_regs, align 8, !dbg !2135
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2136
  %nrefs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 7, !dbg !2136
  store i32 0, i32* %nrefs, align 8, !dbg !2137
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2138
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 8, !dbg !2138
  store i32 0, i32* %freq, align 4, !dbg !2139
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2140
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 3, !dbg !2140
  store i32 -1, i32* %hard_regno, align 4, !dbg !2141
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2142
  %call_freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 29, !dbg !2142
  store i32 0, i32* %call_freq, align 4, !dbg !2143
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2144
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 30, !dbg !2144
  store i32 0, i32* %calls_crossed_num, align 8, !dbg !2145
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2146
  %no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 31, !dbg !2146
  %bf.load = load i16, i16* %no_stack_reg_p, align 4, !dbg !2147
  %bf.clear = and i16 %bf.load, -17, !dbg !2147
  store i16 %bf.clear, i16* %no_stack_reg_p, align 4, !dbg !2147
  %42 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2148
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %42, i32 0, i32 31, !dbg !2148
  %bf.load14 = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !2149
  %bf.clear15 = and i16 %bf.load14, -33, !dbg !2149
  store i16 %bf.clear15, i16* %total_no_stack_reg_p, align 4, !dbg !2149
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2150
  %mem_optimized_dest = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 32, !dbg !2150
  store %struct.ira_allocno* null, %struct.ira_allocno** %mem_optimized_dest, align 8, !dbg !2151
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2152
  %mem_optimized_dest_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 31, !dbg !2152
  %bf.load16 = load i16, i16* %mem_optimized_dest_p, align 4, !dbg !2153
  %bf.clear17 = and i16 %bf.load16, -2, !dbg !2153
  store i16 %bf.clear17, i16* %mem_optimized_dest_p, align 4, !dbg !2153
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2154
  %somewhere_renamed_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 31, !dbg !2154
  %bf.load18 = load i16, i16* %somewhere_renamed_p, align 4, !dbg !2155
  %bf.clear19 = and i16 %bf.load18, -3, !dbg !2155
  store i16 %bf.clear19, i16* %somewhere_renamed_p, align 4, !dbg !2155
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2156
  %child_renamed_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 31, !dbg !2156
  %bf.load20 = load i16, i16* %child_renamed_p, align 4, !dbg !2157
  %bf.clear21 = and i16 %bf.load20, -5, !dbg !2157
  store i16 %bf.clear21, i16* %child_renamed_p, align 4, !dbg !2157
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2158
  %dont_reassign_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %47, i32 0, i32 31, !dbg !2158
  %bf.load22 = load i16, i16* %dont_reassign_p, align 4, !dbg !2159
  %bf.clear23 = and i16 %bf.load22, -9, !dbg !2159
  store i16 %bf.clear23, i16* %dont_reassign_p, align 4, !dbg !2159
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2160
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 31, !dbg !2160
  %bf.load24 = load i16, i16* %bad_spill_p, align 4, !dbg !2161
  %bf.clear25 = and i16 %bf.load24, -65, !dbg !2161
  store i16 %bf.clear25, i16* %bad_spill_p, align 4, !dbg !2161
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2162
  %in_graph_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %49, i32 0, i32 31, !dbg !2162
  %bf.load26 = load i16, i16* %in_graph_p, align 4, !dbg !2163
  %bf.clear27 = and i16 %bf.load26, -129, !dbg !2163
  store i16 %bf.clear27, i16* %in_graph_p, align 4, !dbg !2163
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2164
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 31, !dbg !2164
  %bf.load28 = load i16, i16* %assigned_p, align 4, !dbg !2165
  %bf.clear29 = and i16 %bf.load28, -257, !dbg !2165
  store i16 %bf.clear29, i16* %assigned_p, align 4, !dbg !2165
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2166
  %may_be_spilled_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 31, !dbg !2166
  %bf.load30 = load i16, i16* %may_be_spilled_p, align 4, !dbg !2167
  %bf.clear31 = and i16 %bf.load30, -513, !dbg !2167
  store i16 %bf.clear31, i16* %may_be_spilled_p, align 4, !dbg !2167
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2168
  %splay_removed_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 31, !dbg !2168
  %bf.load32 = load i16, i16* %splay_removed_p, align 4, !dbg !2169
  %bf.clear33 = and i16 %bf.load32, -1025, !dbg !2169
  store i16 %bf.clear33, i16* %splay_removed_p, align 4, !dbg !2169
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2170
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 31, !dbg !2170
  %bf.load34 = load i16, i16* %conflict_vec_p, align 4, !dbg !2171
  %bf.clear35 = and i16 %bf.load34, -2049, !dbg !2171
  store i16 %bf.clear35, i16* %conflict_vec_p, align 4, !dbg !2171
  %54 = load i32, i32* %regno.addr, align 4, !dbg !2172
  %cmp36 = icmp slt i32 %54, 0, !dbg !2173
  br i1 %cmp36, label %cond.true, label %cond.false, !dbg !2172

cond.true:                                        ; preds = %if.end11
  br label %cond.end, !dbg !2172

cond.false:                                       ; preds = %if.end11
  %55 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !2174
  %56 = load i32, i32* %regno.addr, align 4, !dbg !2174
  %idxprom37 = sext i32 %56 to i64, !dbg !2174
  %arrayidx38 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %55, i64 %idxprom37, !dbg !2174
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !2174
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !2174
  %bf.load39 = load i32, i32* %58, align 8, !dbg !2174
  %bf.lshr = lshr i32 %bf.load39, 16, !dbg !2174
  %bf.clear40 = and i32 %bf.lshr, 255, !dbg !2174
  br label %cond.end, !dbg !2172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %bf.clear40, %cond.false ], !dbg !2172
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2175
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 2, !dbg !2175
  store i32 %cond, i32* %mode, align 8, !dbg !2176
  %60 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2177
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %60, i32 0, i32 15, !dbg !2177
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !2178
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2179
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 33, !dbg !2179
  store i32* null, i32** %hard_reg_costs, align 8, !dbg !2180
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2181
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 35, !dbg !2181
  store i32* null, i32** %conflict_hard_reg_costs, align 8, !dbg !2182
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2183
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %63, i32 0, i32 34, !dbg !2183
  store i32* null, i32** %updated_hard_reg_costs, align 8, !dbg !2184
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2185
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 36, !dbg !2185
  store i32* null, i32** %updated_conflict_hard_reg_costs, align 8, !dbg !2186
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2187
  %left_conflicts_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 37, !dbg !2187
  store i32 -1, i32* %left_conflicts_size, align 8, !dbg !2188
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2189
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 9, !dbg !2189
  store i32 0, i32* %cover_class, align 8, !dbg !2190
  %67 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2191
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %67, i32 0, i32 11, !dbg !2191
  store i32 0, i32* %updated_cover_class_cost, align 8, !dbg !2192
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2193
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %68, i32 0, i32 10, !dbg !2193
  store i32 0, i32* %cover_class_cost, align 4, !dbg !2194
  %69 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2195
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %69, i32 0, i32 12, !dbg !2195
  store i32 0, i32* %memory_cost, align 4, !dbg !2196
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2197
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %70, i32 0, i32 13, !dbg !2197
  store i32 0, i32* %updated_memory_cost, align 8, !dbg !2198
  %71 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2199
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %71, i32 0, i32 14, !dbg !2199
  store i32 0, i32* %excess_pressure_points_num, align 4, !dbg !2200
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2201
  %next_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 39, !dbg !2201
  store %struct.ira_allocno* null, %struct.ira_allocno** %next_bucket_allocno, align 8, !dbg !2202
  %73 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2203
  %prev_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %73, i32 0, i32 40, !dbg !2203
  store %struct.ira_allocno* null, %struct.ira_allocno** %prev_bucket_allocno, align 8, !dbg !2204
  %74 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2205
  %75 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2206
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %75, i32 0, i32 18, !dbg !2206
  store %struct.ira_allocno* %74, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !2207
  %76 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2208
  %77 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2209
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %77, i32 0, i32 19, !dbg !2209
  store %struct.ira_allocno* %76, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !2210
  %78 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2211
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %78, i32 0, i32 20, !dbg !2211
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !2212
  %79 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2213
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %79, i32 0, i32 21, !dbg !2213
  store i32 2147483647, i32* %min, align 8, !dbg !2214
  %80 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2215
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %80, i32 0, i32 22, !dbg !2215
  store i32 -1, i32* %max, align 4, !dbg !2216
  %81 = load i32, i32* @ira_allocnos_num, align 4, !dbg !2217
  %82 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2218
  %conflict_id = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %82, i32 0, i32 24, !dbg !2218
  store i32 %81, i32* %conflict_id, align 8, !dbg !2219
  %83 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2220
  %call41 = call %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** @allocno_vec, %struct.ira_allocno* %83), !dbg !2220
  %84 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_vec, align 8, !dbg !2221
  %tobool42 = icmp ne %struct.VEC_ira_allocno_t_heap* %84, null, !dbg !2221
  br i1 %tobool42, label %cond.true43, label %cond.false44, !dbg !2221

cond.true43:                                      ; preds = %cond.end
  %85 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_vec, align 8, !dbg !2221
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %85, i32 0, i32 0, !dbg !2221
  br label %cond.end45, !dbg !2221

cond.false44:                                     ; preds = %cond.end
  br label %cond.end45, !dbg !2221

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true43 ], [ null, %cond.false44 ], !dbg !2221
  %call47 = call %struct.ira_allocno** @VEC_ira_allocno_t_base_address(%struct.VEC_ira_allocno_t_base* %cond46), !dbg !2221
  store %struct.ira_allocno** %call47, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !2222
  %86 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_vec, align 8, !dbg !2223
  %tobool48 = icmp ne %struct.VEC_ira_allocno_t_heap* %86, null, !dbg !2223
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !2223

cond.true49:                                      ; preds = %cond.end45
  %87 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_vec, align 8, !dbg !2223
  %base50 = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %87, i32 0, i32 0, !dbg !2223
  br label %cond.end52, !dbg !2223

cond.false51:                                     ; preds = %cond.end45
  br label %cond.end52, !dbg !2223

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_ira_allocno_t_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !2223
  %call54 = call i32 @VEC_ira_allocno_t_base_length(%struct.VEC_ira_allocno_t_base* %cond53), !dbg !2223
  store i32 %call54, i32* @ira_allocnos_num, align 4, !dbg !2224
  %88 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2225
  %call55 = call %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** @ira_conflict_id_allocno_map_vec, %struct.ira_allocno* %88), !dbg !2225
  %89 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @ira_conflict_id_allocno_map_vec, align 8, !dbg !2226
  %tobool56 = icmp ne %struct.VEC_ira_allocno_t_heap* %89, null, !dbg !2226
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !2226

cond.true57:                                      ; preds = %cond.end52
  %90 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @ira_conflict_id_allocno_map_vec, align 8, !dbg !2226
  %base58 = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %90, i32 0, i32 0, !dbg !2226
  br label %cond.end60, !dbg !2226

cond.false59:                                     ; preds = %cond.end52
  br label %cond.end60, !dbg !2226

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_ira_allocno_t_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !2226
  %call62 = call %struct.ira_allocno** @VEC_ira_allocno_t_base_address(%struct.VEC_ira_allocno_t_base* %cond61), !dbg !2226
  store %struct.ira_allocno** %call62, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !2227
  %91 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2228
  ret %struct.ira_allocno* %91, !dbg !2229
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** %vec_, %struct.ira_allocno* %obj_) #0 !dbg !2230 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_heap**, align 8
  %obj_.addr = alloca %struct.ira_allocno*, align 8
  store %struct.VEC_ira_allocno_t_heap** %vec_, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_heap*** %vec_.addr, metadata !2234, metadata !DIExpression()), !dbg !2235
  store %struct.ira_allocno* %obj_, %struct.ira_allocno** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %obj_.addr, metadata !2236, metadata !DIExpression()), !dbg !2235
  %0 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !2235
  %call = call i32 @VEC_ira_allocno_t_heap_reserve(%struct.VEC_ira_allocno_t_heap** %0, i32 1), !dbg !2235
  %1 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !2235
  %2 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %1, align 8, !dbg !2235
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %2, null, !dbg !2235
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2235

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !2235
  %4 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %3, align 8, !dbg !2235
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %4, i32 0, i32 0, !dbg !2235
  br label %cond.end, !dbg !2235

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2235

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2235
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %obj_.addr, align 8, !dbg !2235
  %call1 = call %struct.ira_allocno** @VEC_ira_allocno_t_base_quick_push(%struct.VEC_ira_allocno_t_base* %cond, %struct.ira_allocno* %5), !dbg !2235
  ret %struct.ira_allocno** %call1, !dbg !2235
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno** @VEC_ira_allocno_t_base_address(%struct.VEC_ira_allocno_t_base* %vec_) #0 !dbg !2237 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !2241, metadata !DIExpression()), !dbg !2242
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !2242
  %tobool = icmp ne %struct.VEC_ira_allocno_t_base* %0, null, !dbg !2242
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2242

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !2242
  %vec = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %1, i32 0, i32 2, !dbg !2242
  %arraydecay = getelementptr inbounds [1 x %struct.ira_allocno*], [1 x %struct.ira_allocno*]* %vec, i64 0, i64 0, !dbg !2242
  br label %cond.end, !dbg !2242

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ira_allocno** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !2242
  ret %struct.ira_allocno** %cond, !dbg !2242
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_allocno_t_base_length(%struct.VEC_ira_allocno_t_base* %vec_) #0 !dbg !2243 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !2248, metadata !DIExpression()), !dbg !2249
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !2249
  %tobool = icmp ne %struct.VEC_ira_allocno_t_base* %0, null, !dbg !2249
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2249

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !2249
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %1, i32 0, i32 0, !dbg !2249
  %2 = load i32, i32* %num, align 8, !dbg !2249
  br label %cond.end, !dbg !2249

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2249

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2249
  ret i32 %cond, !dbg !2249
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_set_allocno_cover_class(%struct.ira_allocno* %a, i32 %cover_class) #0 !dbg !2250 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %cover_class.addr = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2253, metadata !DIExpression()), !dbg !2254
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !2255, metadata !DIExpression()), !dbg !2256
  %0 = load i32, i32* %cover_class.addr, align 4, !dbg !2257
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2258
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 9, !dbg !2258
  store i32 %0, i32* %cover_class1, align 8, !dbg !2259
  %2 = load i32, i32* %cover_class.addr, align 4, !dbg !2260
  %idxprom = zext i32 %2 to i64, !dbg !2260
  %arrayidx = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom, !dbg !2260
  %3 = load i64, i64* %arrayidx, align 8, !dbg !2260
  %neg = xor i64 %3, -1, !dbg !2260
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2260
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 26, !dbg !2260
  %5 = load i64, i64* %conflict_hard_regs, align 8, !dbg !2260
  %or = or i64 %5, %neg, !dbg !2260
  store i64 %or, i64* %conflict_hard_regs, align 8, !dbg !2260
  %6 = load i32, i32* %cover_class.addr, align 4, !dbg !2261
  %idxprom2 = zext i32 %6 to i64, !dbg !2261
  %arrayidx3 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom2, !dbg !2261
  %7 = load i64, i64* %arrayidx3, align 8, !dbg !2261
  %neg4 = xor i64 %7, -1, !dbg !2261
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2261
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 27, !dbg !2261
  %9 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !2261
  %or5 = or i64 %9, %neg4, !dbg !2261
  store i64 %or5, i64* %total_conflict_hard_regs, align 8, !dbg !2261
  ret void, !dbg !2262
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ira_conflict_vector_profitable_p(%struct.ira_allocno* %a, i32 %num) #0 !dbg !2263 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.ira_allocno*, align 8
  %num.addr = alloca i32, align 4
  %nw = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2266, metadata !DIExpression()), !dbg !2267
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2268, metadata !DIExpression()), !dbg !2269
  call void @llvm.dbg.declare(metadata i32* %nw, metadata !2270, metadata !DIExpression()), !dbg !2271
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2272
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 22, !dbg !2272
  %1 = load i32, i32* %max, align 4, !dbg !2272
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2274
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 21, !dbg !2274
  %3 = load i32, i32* %min, align 8, !dbg !2274
  %cmp = icmp slt i32 %1, %3, !dbg !2275
  br i1 %cmp, label %if.then, label %if.end, !dbg !2276

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2277
  br label %return, !dbg !2277

if.end:                                           ; preds = %entry
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2278
  %max1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 22, !dbg !2278
  %5 = load i32, i32* %max1, align 4, !dbg !2278
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2279
  %min2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 21, !dbg !2279
  %7 = load i32, i32* %min2, align 8, !dbg !2279
  %sub = sub nsw i32 %5, %7, !dbg !2280
  %add = add nsw i32 %sub, 64, !dbg !2281
  %div = sdiv i32 %add, 64, !dbg !2282
  store i32 %div, i32* %nw, align 4, !dbg !2283
  %8 = load i32, i32* %num.addr, align 4, !dbg !2284
  %add3 = add nsw i32 %8, 1, !dbg !2285
  %conv = sext i32 %add3 to i64, !dbg !2286
  %mul = mul i64 16, %conv, !dbg !2287
  %9 = load i32, i32* %nw, align 4, !dbg !2288
  %mul4 = mul nsw i32 3, %9, !dbg !2289
  %conv5 = sext i32 %mul4 to i64, !dbg !2290
  %mul6 = mul i64 %conv5, 8, !dbg !2291
  %cmp7 = icmp ult i64 %mul, %mul6, !dbg !2292
  %conv8 = zext i1 %cmp7 to i32, !dbg !2292
  %conv9 = trunc i32 %conv8 to i8, !dbg !2293
  store i8 %conv9, i8* %retval, align 1, !dbg !2294
  br label %return, !dbg !2294

return:                                           ; preds = %if.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !2295
  ret i8 %10, !dbg !2295
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_allocate_allocno_conflict_vec(%struct.ira_allocno* %a, i32 %num) #0 !dbg !2296 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %num.addr = alloca i32, align 4
  %size = alloca i32, align 4
  %vec = alloca %struct.ira_allocno**, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2299, metadata !DIExpression()), !dbg !2300
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2301, metadata !DIExpression()), !dbg !2302
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2303, metadata !DIExpression()), !dbg !2304
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %vec, metadata !2305, metadata !DIExpression()), !dbg !2306
  %0 = load i32, i32* %num.addr, align 4, !dbg !2307
  %inc = add nsw i32 %0, 1, !dbg !2307
  store i32 %inc, i32* %num.addr, align 4, !dbg !2307
  %1 = load i32, i32* %num.addr, align 4, !dbg !2308
  %conv = sext i32 %1 to i64, !dbg !2308
  %mul = mul i64 8, %conv, !dbg !2309
  %conv1 = trunc i64 %mul to i32, !dbg !2310
  store i32 %conv1, i32* %size, align 4, !dbg !2311
  %2 = load i32, i32* %size, align 4, !dbg !2312
  %conv2 = sext i32 %2 to i64, !dbg !2312
  %call = call i8* @ira_allocate(i64 %conv2), !dbg !2313
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2314
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 23, !dbg !2314
  store i8* %call, i8** %conflict_allocno_array, align 8, !dbg !2315
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2316
  %conflict_allocno_array3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 23, !dbg !2316
  %5 = load i8*, i8** %conflict_allocno_array3, align 8, !dbg !2316
  %6 = bitcast i8* %5 to %struct.ira_allocno**, !dbg !2317
  store %struct.ira_allocno** %6, %struct.ira_allocno*** %vec, align 8, !dbg !2318
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !2319
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 0, !dbg !2319
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx, align 8, !dbg !2320
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2321
  %conflict_allocnos_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 28, !dbg !2321
  store i32 0, i32* %conflict_allocnos_num, align 8, !dbg !2322
  %9 = load i32, i32* %size, align 4, !dbg !2323
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2324
  %conflict_allocno_array_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 25, !dbg !2324
  store i32 %9, i32* %conflict_allocno_array_size, align 4, !dbg !2325
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2326
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 31, !dbg !2326
  %bf.load = load i16, i16* %conflict_vec_p, align 4, !dbg !2327
  %bf.clear = and i16 %bf.load, -2049, !dbg !2327
  %bf.set = or i16 %bf.clear, 2048, !dbg !2327
  store i16 %bf.set, i16* %conflict_vec_p, align 4, !dbg !2327
  ret void, !dbg !2328
}

declare dso_local i8* @ira_allocate(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_allocate_allocno_conflicts(%struct.ira_allocno* %a, i32 %num) #0 !dbg !2329 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %num.addr = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2330, metadata !DIExpression()), !dbg !2331
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2332, metadata !DIExpression()), !dbg !2333
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2334
  %1 = load i32, i32* %num.addr, align 4, !dbg !2336
  %call = call zeroext i8 @ira_conflict_vector_profitable_p(%struct.ira_allocno* %0, i32 %1), !dbg !2337
  %tobool = icmp ne i8 %call, 0, !dbg !2337
  br i1 %tobool, label %if.then, label %if.else, !dbg !2338

if.then:                                          ; preds = %entry
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2339
  %3 = load i32, i32* %num.addr, align 4, !dbg !2340
  call void @ira_allocate_allocno_conflict_vec(%struct.ira_allocno* %2, i32 %3), !dbg !2341
  br label %if.end, !dbg !2341

if.else:                                          ; preds = %entry
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2342
  call void @allocate_allocno_conflict_bit_vec(%struct.ira_allocno* %4), !dbg !2343
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2344
}

; Function Attrs: noinline nounwind uwtable
define internal void @allocate_allocno_conflict_bit_vec(%struct.ira_allocno* %a) #0 !dbg !2345 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %size = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2348, metadata !DIExpression()), !dbg !2349
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2350, metadata !DIExpression()), !dbg !2351
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2352
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 22, !dbg !2352
  %1 = load i32, i32* %max, align 4, !dbg !2352
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2353
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 21, !dbg !2353
  %3 = load i32, i32* %min, align 8, !dbg !2353
  %sub = sub nsw i32 %1, %3, !dbg !2354
  %add = add nsw i32 %sub, 64, !dbg !2355
  %div = sdiv i32 %add, 64, !dbg !2356
  %conv = sext i32 %div to i64, !dbg !2357
  %mul = mul i64 %conv, 8, !dbg !2358
  %conv1 = trunc i64 %mul to i32, !dbg !2359
  store i32 %conv1, i32* %size, align 4, !dbg !2360
  %4 = load i32, i32* %size, align 4, !dbg !2361
  %conv2 = zext i32 %4 to i64, !dbg !2361
  %call = call i8* @ira_allocate(i64 %conv2), !dbg !2362
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2363
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 23, !dbg !2363
  store i8* %call, i8** %conflict_allocno_array, align 8, !dbg !2364
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2365
  %conflict_allocno_array3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 23, !dbg !2365
  %7 = load i8*, i8** %conflict_allocno_array3, align 8, !dbg !2365
  %8 = load i32, i32* %size, align 4, !dbg !2366
  %conv4 = zext i32 %8 to i64, !dbg !2366
  call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 %conv4, i1 false), !dbg !2367
  %9 = load i32, i32* %size, align 4, !dbg !2368
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2369
  %conflict_allocno_array_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 25, !dbg !2369
  store i32 %9, i32* %conflict_allocno_array_size, align 4, !dbg !2370
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2371
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 31, !dbg !2371
  %bf.load = load i16, i16* %conflict_vec_p, align 4, !dbg !2372
  %bf.clear = and i16 %bf.load, -2049, !dbg !2372
  store i16 %bf.clear, i16* %conflict_vec_p, align 4, !dbg !2372
  ret void, !dbg !2373
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_add_allocno_conflict(%struct.ira_allocno* %a1, %struct.ira_allocno* %a2) #0 !dbg !2374 {
entry:
  %a1.addr = alloca %struct.ira_allocno*, align 8
  %a2.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %a1, %struct.ira_allocno** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1.addr, metadata !2377, metadata !DIExpression()), !dbg !2378
  store %struct.ira_allocno* %a2, %struct.ira_allocno** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2.addr, metadata !2379, metadata !DIExpression()), !dbg !2380
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2381
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !2382
  call void @add_to_allocno_conflicts(%struct.ira_allocno* %0, %struct.ira_allocno* %1), !dbg !2383
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !2384
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2385
  call void @add_to_allocno_conflicts(%struct.ira_allocno* %2, %struct.ira_allocno* %3), !dbg !2386
  ret void, !dbg !2387
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_allocno_conflicts(%struct.ira_allocno* %a1, %struct.ira_allocno* %a2) #0 !dbg !2388 {
entry:
  %a1.addr = alloca %struct.ira_allocno*, align 8
  %a2.addr = alloca %struct.ira_allocno*, align 8
  %num = alloca i32, align 4
  %size = alloca i32, align 4
  %vec = alloca %struct.ira_allocno**, align 8
  %nw = alloca i32, align 4
  %added_head_nw = alloca i32, align 4
  %id = alloca i32, align 4
  %vec22 = alloca i64*, align 8
  store %struct.ira_allocno* %a1, %struct.ira_allocno** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1.addr, metadata !2389, metadata !DIExpression()), !dbg !2390
  store %struct.ira_allocno* %a2, %struct.ira_allocno** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2.addr, metadata !2391, metadata !DIExpression()), !dbg !2392
  call void @llvm.dbg.declare(metadata i32* %num, metadata !2393, metadata !DIExpression()), !dbg !2394
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2395, metadata !DIExpression()), !dbg !2396
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2397
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !2397
  %bf.load = load i16, i16* %conflict_vec_p, align 4, !dbg !2397
  %bf.lshr = lshr i16 %bf.load, 11, !dbg !2397
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2397
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2397
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !2397
  br i1 %tobool, label %if.then, label %if.else21, !dbg !2399

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %vec, metadata !2400, metadata !DIExpression()), !dbg !2402
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2403
  %conflict_allocnos_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 28, !dbg !2403
  %2 = load i32, i32* %conflict_allocnos_num, align 8, !dbg !2403
  %add = add nsw i32 %2, 2, !dbg !2404
  store i32 %add, i32* %num, align 4, !dbg !2405
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2406
  %conflict_allocno_array_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 25, !dbg !2406
  %4 = load i32, i32* %conflict_allocno_array_size, align 4, !dbg !2406
  %conv = zext i32 %4 to i64, !dbg !2406
  %5 = load i32, i32* %num, align 4, !dbg !2408
  %conv1 = sext i32 %5 to i64, !dbg !2408
  %mul = mul i64 %conv1, 8, !dbg !2409
  %cmp = icmp uge i64 %conv, %mul, !dbg !2410
  br i1 %cmp, label %if.then3, label %if.else, !dbg !2411

if.then3:                                         ; preds = %if.then
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2412
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 23, !dbg !2412
  %7 = load i8*, i8** %conflict_allocno_array, align 8, !dbg !2412
  %8 = bitcast i8* %7 to %struct.ira_allocno**, !dbg !2413
  store %struct.ira_allocno** %8, %struct.ira_allocno*** %vec, align 8, !dbg !2414
  br label %if.end, !dbg !2415

if.else:                                          ; preds = %if.then
  %9 = load i32, i32* %num, align 4, !dbg !2416
  %mul4 = mul nsw i32 3, %9, !dbg !2418
  %div = sdiv i32 %mul4, 2, !dbg !2419
  %add5 = add nsw i32 %div, 1, !dbg !2420
  %conv6 = sext i32 %add5 to i64, !dbg !2421
  %mul7 = mul i64 %conv6, 8, !dbg !2422
  %conv8 = trunc i64 %mul7 to i32, !dbg !2421
  store i32 %conv8, i32* %size, align 4, !dbg !2423
  %10 = load i32, i32* %size, align 4, !dbg !2424
  %conv9 = zext i32 %10 to i64, !dbg !2424
  %call = call i8* @ira_allocate(i64 %conv9), !dbg !2425
  %11 = bitcast i8* %call to %struct.ira_allocno**, !dbg !2426
  store %struct.ira_allocno** %11, %struct.ira_allocno*** %vec, align 8, !dbg !2427
  %12 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !2428
  %13 = bitcast %struct.ira_allocno** %12 to i8*, !dbg !2429
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2430
  %conflict_allocno_array10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 23, !dbg !2430
  %15 = load i8*, i8** %conflict_allocno_array10, align 8, !dbg !2430
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2431
  %conflict_allocnos_num11 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 28, !dbg !2431
  %17 = load i32, i32* %conflict_allocnos_num11, align 8, !dbg !2431
  %conv12 = sext i32 %17 to i64, !dbg !2431
  %mul13 = mul i64 8, %conv12, !dbg !2432
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 1 %15, i64 %mul13, i1 false), !dbg !2429
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2433
  %conflict_allocno_array14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 23, !dbg !2433
  %19 = load i8*, i8** %conflict_allocno_array14, align 8, !dbg !2433
  call void @ira_free(i8* %19), !dbg !2434
  %20 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !2435
  %21 = bitcast %struct.ira_allocno** %20 to i8*, !dbg !2435
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2436
  %conflict_allocno_array15 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 23, !dbg !2436
  store i8* %21, i8** %conflict_allocno_array15, align 8, !dbg !2437
  %23 = load i32, i32* %size, align 4, !dbg !2438
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2439
  %conflict_allocno_array_size16 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 25, !dbg !2439
  store i32 %23, i32* %conflict_allocno_array_size16, align 4, !dbg !2440
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !2441
  %26 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !2442
  %27 = load i32, i32* %num, align 4, !dbg !2443
  %sub = sub nsw i32 %27, 2, !dbg !2444
  %idxprom = sext i32 %sub to i64, !dbg !2442
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %26, i64 %idxprom, !dbg !2442
  store %struct.ira_allocno* %25, %struct.ira_allocno** %arrayidx, align 8, !dbg !2445
  %28 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !2446
  %29 = load i32, i32* %num, align 4, !dbg !2447
  %sub17 = sub nsw i32 %29, 1, !dbg !2448
  %idxprom18 = sext i32 %sub17 to i64, !dbg !2446
  %arrayidx19 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %28, i64 %idxprom18, !dbg !2446
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx19, align 8, !dbg !2449
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2450
  %conflict_allocnos_num20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 28, !dbg !2450
  %31 = load i32, i32* %conflict_allocnos_num20, align 8, !dbg !2451
  %inc = add nsw i32 %31, 1, !dbg !2451
  store i32 %inc, i32* %conflict_allocnos_num20, align 8, !dbg !2451
  br label %if.end130, !dbg !2452

if.else21:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %nw, metadata !2453, metadata !DIExpression()), !dbg !2455
  call void @llvm.dbg.declare(metadata i32* %added_head_nw, metadata !2456, metadata !DIExpression()), !dbg !2457
  call void @llvm.dbg.declare(metadata i32* %id, metadata !2458, metadata !DIExpression()), !dbg !2459
  call void @llvm.dbg.declare(metadata i64** %vec22, metadata !2460, metadata !DIExpression()), !dbg !2461
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !2462
  %conflict_id = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 24, !dbg !2462
  %33 = load i32, i32* %conflict_id, align 8, !dbg !2462
  store i32 %33, i32* %id, align 4, !dbg !2463
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2464
  %conflict_allocno_array23 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 23, !dbg !2464
  %35 = load i8*, i8** %conflict_allocno_array23, align 8, !dbg !2464
  %36 = bitcast i8* %35 to i64*, !dbg !2465
  store i64* %36, i64** %vec22, align 8, !dbg !2466
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2467
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 21, !dbg !2467
  %38 = load i32, i32* %min, align 8, !dbg !2467
  %39 = load i32, i32* %id, align 4, !dbg !2469
  %cmp24 = icmp sgt i32 %38, %39, !dbg !2470
  br i1 %cmp24, label %if.then26, label %if.else84, !dbg !2471

if.then26:                                        ; preds = %if.else21
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2472
  %min27 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 21, !dbg !2472
  %41 = load i32, i32* %min27, align 8, !dbg !2472
  %42 = load i32, i32* %id, align 4, !dbg !2474
  %sub28 = sub nsw i32 %41, %42, !dbg !2475
  %sub29 = sub nsw i32 %sub28, 1, !dbg !2476
  %div30 = sdiv i32 %sub29, 64, !dbg !2477
  %add31 = add nsw i32 %div30, 1, !dbg !2478
  store i32 %add31, i32* %added_head_nw, align 4, !dbg !2479
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2480
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 22, !dbg !2480
  %44 = load i32, i32* %max, align 4, !dbg !2480
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2481
  %min32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 21, !dbg !2481
  %46 = load i32, i32* %min32, align 8, !dbg !2481
  %sub33 = sub nsw i32 %44, %46, !dbg !2482
  %div34 = sdiv i32 %sub33, 64, !dbg !2483
  %add35 = add nsw i32 %div34, 1, !dbg !2484
  store i32 %add35, i32* %nw, align 4, !dbg !2485
  %47 = load i32, i32* %nw, align 4, !dbg !2486
  %48 = load i32, i32* %added_head_nw, align 4, !dbg !2487
  %add36 = add nsw i32 %47, %48, !dbg !2488
  %conv37 = sext i32 %add36 to i64, !dbg !2489
  %mul38 = mul i64 %conv37, 8, !dbg !2490
  %conv39 = trunc i64 %mul38 to i32, !dbg !2489
  store i32 %conv39, i32* %size, align 4, !dbg !2491
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2492
  %conflict_allocno_array_size40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %49, i32 0, i32 25, !dbg !2492
  %50 = load i32, i32* %conflict_allocno_array_size40, align 4, !dbg !2492
  %51 = load i32, i32* %size, align 4, !dbg !2494
  %cmp41 = icmp uge i32 %50, %51, !dbg !2495
  br i1 %cmp41, label %if.then43, label %if.else50, !dbg !2496

if.then43:                                        ; preds = %if.then26
  %52 = load i64*, i64** %vec22, align 8, !dbg !2497
  %53 = bitcast i64* %52 to i8*, !dbg !2499
  %54 = load i32, i32* %added_head_nw, align 4, !dbg !2500
  %conv44 = sext i32 %54 to i64, !dbg !2500
  %mul45 = mul i64 %conv44, 8, !dbg !2501
  %add.ptr = getelementptr inbounds i8, i8* %53, i64 %mul45, !dbg !2502
  %55 = load i64*, i64** %vec22, align 8, !dbg !2503
  %56 = bitcast i64* %55 to i8*, !dbg !2504
  %57 = load i32, i32* %nw, align 4, !dbg !2505
  %conv46 = sext i32 %57 to i64, !dbg !2505
  %mul47 = mul i64 %conv46, 8, !dbg !2506
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 8 %56, i64 %mul47, i1 false), !dbg !2504
  %58 = load i64*, i64** %vec22, align 8, !dbg !2507
  %59 = bitcast i64* %58 to i8*, !dbg !2508
  %60 = load i32, i32* %added_head_nw, align 4, !dbg !2509
  %conv48 = sext i32 %60 to i64, !dbg !2509
  %mul49 = mul i64 %conv48, 8, !dbg !2510
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %mul49, i1 false), !dbg !2508
  br label %if.end80, !dbg !2511

if.else50:                                        ; preds = %if.then26
  %61 = load i32, i32* %nw, align 4, !dbg !2512
  %62 = load i32, i32* %added_head_nw, align 4, !dbg !2514
  %add51 = add nsw i32 %61, %62, !dbg !2515
  %mul52 = mul nsw i32 3, %add51, !dbg !2516
  %div53 = sdiv i32 %mul52, 2, !dbg !2517
  %add54 = add nsw i32 %div53, 1, !dbg !2518
  %conv55 = sext i32 %add54 to i64, !dbg !2519
  %mul56 = mul i64 %conv55, 8, !dbg !2520
  %conv57 = trunc i64 %mul56 to i32, !dbg !2519
  store i32 %conv57, i32* %size, align 4, !dbg !2521
  %63 = load i32, i32* %size, align 4, !dbg !2522
  %conv58 = zext i32 %63 to i64, !dbg !2522
  %call59 = call i8* @ira_allocate(i64 %conv58), !dbg !2523
  %64 = bitcast i8* %call59 to i64*, !dbg !2524
  store i64* %64, i64** %vec22, align 8, !dbg !2525
  %65 = load i64*, i64** %vec22, align 8, !dbg !2526
  %66 = bitcast i64* %65 to i8*, !dbg !2527
  %67 = load i32, i32* %added_head_nw, align 4, !dbg !2528
  %conv60 = sext i32 %67 to i64, !dbg !2528
  %mul61 = mul i64 %conv60, 8, !dbg !2529
  %add.ptr62 = getelementptr inbounds i8, i8* %66, i64 %mul61, !dbg !2530
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2531
  %conflict_allocno_array63 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %68, i32 0, i32 23, !dbg !2531
  %69 = load i8*, i8** %conflict_allocno_array63, align 8, !dbg !2531
  %70 = load i32, i32* %nw, align 4, !dbg !2532
  %conv64 = sext i32 %70 to i64, !dbg !2532
  %mul65 = mul i64 %conv64, 8, !dbg !2533
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr62, i8* align 1 %69, i64 %mul65, i1 false), !dbg !2534
  %71 = load i64*, i64** %vec22, align 8, !dbg !2535
  %72 = bitcast i64* %71 to i8*, !dbg !2536
  %73 = load i32, i32* %added_head_nw, align 4, !dbg !2537
  %conv66 = sext i32 %73 to i64, !dbg !2537
  %mul67 = mul i64 %conv66, 8, !dbg !2538
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 %mul67, i1 false), !dbg !2536
  %74 = load i64*, i64** %vec22, align 8, !dbg !2539
  %75 = bitcast i64* %74 to i8*, !dbg !2540
  %76 = load i32, i32* %nw, align 4, !dbg !2541
  %77 = load i32, i32* %added_head_nw, align 4, !dbg !2542
  %add68 = add nsw i32 %76, %77, !dbg !2543
  %conv69 = sext i32 %add68 to i64, !dbg !2544
  %mul70 = mul i64 %conv69, 8, !dbg !2545
  %add.ptr71 = getelementptr inbounds i8, i8* %75, i64 %mul70, !dbg !2546
  %78 = load i32, i32* %size, align 4, !dbg !2547
  %conv72 = zext i32 %78 to i64, !dbg !2547
  %79 = load i32, i32* %nw, align 4, !dbg !2548
  %80 = load i32, i32* %added_head_nw, align 4, !dbg !2549
  %add73 = add nsw i32 %79, %80, !dbg !2550
  %conv74 = sext i32 %add73 to i64, !dbg !2551
  %mul75 = mul i64 %conv74, 8, !dbg !2552
  %sub76 = sub i64 %conv72, %mul75, !dbg !2553
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr71, i8 0, i64 %sub76, i1 false), !dbg !2554
  %81 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2555
  %conflict_allocno_array77 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %81, i32 0, i32 23, !dbg !2555
  %82 = load i8*, i8** %conflict_allocno_array77, align 8, !dbg !2555
  call void @ira_free(i8* %82), !dbg !2556
  %83 = load i64*, i64** %vec22, align 8, !dbg !2557
  %84 = bitcast i64* %83 to i8*, !dbg !2557
  %85 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2558
  %conflict_allocno_array78 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %85, i32 0, i32 23, !dbg !2558
  store i8* %84, i8** %conflict_allocno_array78, align 8, !dbg !2559
  %86 = load i32, i32* %size, align 4, !dbg !2560
  %87 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2561
  %conflict_allocno_array_size79 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %87, i32 0, i32 25, !dbg !2561
  store i32 %86, i32* %conflict_allocno_array_size79, align 4, !dbg !2562
  br label %if.end80

if.end80:                                         ; preds = %if.else50, %if.then43
  %88 = load i32, i32* %added_head_nw, align 4, !dbg !2563
  %mul81 = mul nsw i32 %88, 64, !dbg !2564
  %89 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2565
  %min82 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %89, i32 0, i32 21, !dbg !2565
  %90 = load i32, i32* %min82, align 8, !dbg !2566
  %sub83 = sub nsw i32 %90, %mul81, !dbg !2566
  store i32 %sub83, i32* %min82, align 8, !dbg !2566
  br label %if.end122, !dbg !2567

if.else84:                                        ; preds = %if.else21
  %91 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2568
  %max85 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %91, i32 0, i32 22, !dbg !2568
  %92 = load i32, i32* %max85, align 4, !dbg !2568
  %93 = load i32, i32* %id, align 4, !dbg !2570
  %cmp86 = icmp slt i32 %92, %93, !dbg !2571
  br i1 %cmp86, label %if.then88, label %if.end121, !dbg !2572

if.then88:                                        ; preds = %if.else84
  %94 = load i32, i32* %id, align 4, !dbg !2573
  %95 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2575
  %min89 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %95, i32 0, i32 21, !dbg !2575
  %96 = load i32, i32* %min89, align 8, !dbg !2575
  %sub90 = sub nsw i32 %94, %96, !dbg !2576
  %div91 = sdiv i32 %sub90, 64, !dbg !2577
  %add92 = add nsw i32 %div91, 1, !dbg !2578
  store i32 %add92, i32* %nw, align 4, !dbg !2579
  %97 = load i32, i32* %nw, align 4, !dbg !2580
  %conv93 = sext i32 %97 to i64, !dbg !2580
  %mul94 = mul i64 %conv93, 8, !dbg !2581
  %conv95 = trunc i64 %mul94 to i32, !dbg !2580
  store i32 %conv95, i32* %size, align 4, !dbg !2582
  %98 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2583
  %conflict_allocno_array_size96 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %98, i32 0, i32 25, !dbg !2583
  %99 = load i32, i32* %conflict_allocno_array_size96, align 4, !dbg !2583
  %100 = load i32, i32* %size, align 4, !dbg !2585
  %cmp97 = icmp ult i32 %99, %100, !dbg !2586
  br i1 %cmp97, label %if.then99, label %if.end119, !dbg !2587

if.then99:                                        ; preds = %if.then88
  %101 = load i32, i32* %nw, align 4, !dbg !2588
  %mul100 = mul nsw i32 3, %101, !dbg !2590
  %div101 = sdiv i32 %mul100, 2, !dbg !2591
  %add102 = add nsw i32 %div101, 1, !dbg !2592
  %conv103 = sext i32 %add102 to i64, !dbg !2593
  %mul104 = mul i64 %conv103, 8, !dbg !2594
  %conv105 = trunc i64 %mul104 to i32, !dbg !2593
  store i32 %conv105, i32* %size, align 4, !dbg !2595
  %102 = load i32, i32* %size, align 4, !dbg !2596
  %conv106 = zext i32 %102 to i64, !dbg !2596
  %call107 = call i8* @ira_allocate(i64 %conv106), !dbg !2597
  %103 = bitcast i8* %call107 to i64*, !dbg !2598
  store i64* %103, i64** %vec22, align 8, !dbg !2599
  %104 = load i64*, i64** %vec22, align 8, !dbg !2600
  %105 = bitcast i64* %104 to i8*, !dbg !2601
  %106 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2602
  %conflict_allocno_array108 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %106, i32 0, i32 23, !dbg !2602
  %107 = load i8*, i8** %conflict_allocno_array108, align 8, !dbg !2602
  %108 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2603
  %conflict_allocno_array_size109 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %108, i32 0, i32 25, !dbg !2603
  %109 = load i32, i32* %conflict_allocno_array_size109, align 4, !dbg !2603
  %conv110 = zext i32 %109 to i64, !dbg !2603
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 1 %107, i64 %conv110, i1 false), !dbg !2601
  %110 = load i64*, i64** %vec22, align 8, !dbg !2604
  %111 = bitcast i64* %110 to i8*, !dbg !2605
  %112 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2606
  %conflict_allocno_array_size111 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %112, i32 0, i32 25, !dbg !2606
  %113 = load i32, i32* %conflict_allocno_array_size111, align 4, !dbg !2606
  %idx.ext = zext i32 %113 to i64, !dbg !2607
  %add.ptr112 = getelementptr inbounds i8, i8* %111, i64 %idx.ext, !dbg !2607
  %114 = load i32, i32* %size, align 4, !dbg !2608
  %115 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2609
  %conflict_allocno_array_size113 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %115, i32 0, i32 25, !dbg !2609
  %116 = load i32, i32* %conflict_allocno_array_size113, align 4, !dbg !2609
  %sub114 = sub i32 %114, %116, !dbg !2610
  %conv115 = zext i32 %sub114 to i64, !dbg !2608
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr112, i8 0, i64 %conv115, i1 false), !dbg !2611
  %117 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2612
  %conflict_allocno_array116 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %117, i32 0, i32 23, !dbg !2612
  %118 = load i8*, i8** %conflict_allocno_array116, align 8, !dbg !2612
  call void @ira_free(i8* %118), !dbg !2613
  %119 = load i64*, i64** %vec22, align 8, !dbg !2614
  %120 = bitcast i64* %119 to i8*, !dbg !2614
  %121 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2615
  %conflict_allocno_array117 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %121, i32 0, i32 23, !dbg !2615
  store i8* %120, i8** %conflict_allocno_array117, align 8, !dbg !2616
  %122 = load i32, i32* %size, align 4, !dbg !2617
  %123 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2618
  %conflict_allocno_array_size118 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %123, i32 0, i32 25, !dbg !2618
  store i32 %122, i32* %conflict_allocno_array_size118, align 4, !dbg !2619
  br label %if.end119, !dbg !2620

if.end119:                                        ; preds = %if.then99, %if.then88
  %124 = load i32, i32* %id, align 4, !dbg !2621
  %125 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2622
  %max120 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %125, i32 0, i32 22, !dbg !2622
  store i32 %124, i32* %max120, align 4, !dbg !2623
  br label %if.end121, !dbg !2624

if.end121:                                        ; preds = %if.end119, %if.else84
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.end80
  %126 = load i32, i32* %id, align 4, !dbg !2625
  %127 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2625
  %min123 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %127, i32 0, i32 21, !dbg !2625
  %128 = load i32, i32* %min123, align 8, !dbg !2625
  %sub124 = sub nsw i32 %126, %128, !dbg !2625
  %rem = urem i32 %sub124, 64, !dbg !2625
  %sh_prom = zext i32 %rem to i64, !dbg !2625
  %shl = shl i64 1, %sh_prom, !dbg !2625
  %129 = load i64*, i64** %vec22, align 8, !dbg !2625
  %130 = load i32, i32* %id, align 4, !dbg !2625
  %131 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !2625
  %min125 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %131, i32 0, i32 21, !dbg !2625
  %132 = load i32, i32* %min125, align 8, !dbg !2625
  %sub126 = sub nsw i32 %130, %132, !dbg !2625
  %div127 = udiv i32 %sub126, 64, !dbg !2625
  %idxprom128 = zext i32 %div127 to i64, !dbg !2625
  %arrayidx129 = getelementptr inbounds i64, i64* %129, i64 %idxprom128, !dbg !2625
  %133 = load i64, i64* %arrayidx129, align 8, !dbg !2625
  %or = or i64 %133, %shl, !dbg !2625
  store i64 %or, i64* %arrayidx129, align 8, !dbg !2625
  br label %if.end130

if.end130:                                        ; preds = %if.end122, %if.end
  ret void, !dbg !2626
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_print_expanded_allocno(%struct.ira_allocno* %a) #0 !dbg !2627 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2628, metadata !DIExpression()), !dbg !2629
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2630, metadata !DIExpression()), !dbg !2631
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2632
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2633
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 0, !dbg !2633
  %2 = load i32, i32* %num, align 8, !dbg !2633
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2634
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 1, !dbg !2634
  %4 = load i32, i32* %regno, align 4, !dbg !2634
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 %2, i32 %4), !dbg !2635
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2636
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 6, !dbg !2636
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !2636
  %bb1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i32 0, i32 0, !dbg !2638
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !2638
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !2639
  %cmp = icmp ne %struct.basic_block_def* %7, null, !dbg !2640
  br i1 %cmp, label %if.then, label %if.else, !dbg !2641

if.then:                                          ; preds = %entry
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2642
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2643
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !2644
  %10 = load i32, i32* %index, align 8, !dbg !2644
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %10), !dbg !2645
  br label %if.end, !dbg !2645

if.else:                                          ; preds = %entry
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2646
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2647
  %loop_tree_node3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 6, !dbg !2647
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node3, align 8, !dbg !2647
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i32 0, i32 1, !dbg !2648
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2648
  %num4 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !2649
  %15 = load i32, i32* %num4, align 8, !dbg !2649
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 %15), !dbg !2650
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2651
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 17, !dbg !2651
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !2651
  %cmp6 = icmp ne %struct.ira_allocno* %17, null, !dbg !2653
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !2654

if.then7:                                         ; preds = %if.end
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2655
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !2657
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2658
  %cap_member9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 17, !dbg !2658
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member9, align 8, !dbg !2658
  call void @ira_print_expanded_allocno(%struct.ira_allocno* %20), !dbg !2659
  br label %if.end10, !dbg !2660

if.end10:                                         ; preds = %if.then7, %if.end
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2661
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2662
  ret void, !dbg !2663
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ira_allocno_live_range* @ira_create_allocno_live_range(%struct.ira_allocno* %a, i32 %start, i32 %finish, %struct.ira_allocno_live_range* %next) #0 !dbg !2664 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %start.addr = alloca i32, align 4
  %finish.addr = alloca i32, align 4
  %next.addr = alloca %struct.ira_allocno_live_range*, align 8
  %p = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2667, metadata !DIExpression()), !dbg !2668
  store i32 %start, i32* %start.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start.addr, metadata !2669, metadata !DIExpression()), !dbg !2670
  store i32 %finish, i32* %finish.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %finish.addr, metadata !2671, metadata !DIExpression()), !dbg !2672
  store %struct.ira_allocno_live_range* %next, %struct.ira_allocno_live_range** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %next.addr, metadata !2673, metadata !DIExpression()), !dbg !2674
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %p, metadata !2675, metadata !DIExpression()), !dbg !2676
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_live_range_pool, align 8, !dbg !2677
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !2678
  %1 = bitcast i8* %call to %struct.ira_allocno_live_range*, !dbg !2679
  store %struct.ira_allocno_live_range* %1, %struct.ira_allocno_live_range** %p, align 8, !dbg !2680
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2681
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2682
  %allocno = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %3, i32 0, i32 0, !dbg !2683
  store %struct.ira_allocno* %2, %struct.ira_allocno** %allocno, align 8, !dbg !2684
  %4 = load i32, i32* %start.addr, align 4, !dbg !2685
  %5 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2686
  %start1 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %5, i32 0, i32 1, !dbg !2687
  store i32 %4, i32* %start1, align 8, !dbg !2688
  %6 = load i32, i32* %finish.addr, align 4, !dbg !2689
  %7 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2690
  %finish2 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %7, i32 0, i32 2, !dbg !2691
  store i32 %6, i32* %finish2, align 4, !dbg !2692
  %8 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next.addr, align 8, !dbg !2693
  %9 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2694
  %next3 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %9, i32 0, i32 3, !dbg !2695
  store %struct.ira_allocno_live_range* %8, %struct.ira_allocno_live_range** %next3, align 8, !dbg !2696
  %10 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2697
  ret %struct.ira_allocno_live_range* %10, !dbg !2698
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ira_allocno_live_range* @ira_copy_allocno_live_range_list(%struct.ira_allocno_live_range* %r) #0 !dbg !2699 {
entry:
  %retval = alloca %struct.ira_allocno_live_range*, align 8
  %r.addr = alloca %struct.ira_allocno_live_range*, align 8
  %p = alloca %struct.ira_allocno_live_range*, align 8
  %first = alloca %struct.ira_allocno_live_range*, align 8
  %last = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno_live_range* %r, %struct.ira_allocno_live_range** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r.addr, metadata !2702, metadata !DIExpression()), !dbg !2703
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %p, metadata !2704, metadata !DIExpression()), !dbg !2705
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %first, metadata !2706, metadata !DIExpression()), !dbg !2707
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %last, metadata !2708, metadata !DIExpression()), !dbg !2709
  %0 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2710
  %cmp = icmp eq %struct.ira_allocno_live_range* %0, null, !dbg !2712
  br i1 %cmp, label %if.then, label %if.end, !dbg !2713

if.then:                                          ; preds = %entry
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2714
  br label %return, !dbg !2714

if.end:                                           ; preds = %entry
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %last, align 8, !dbg !2715
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %first, align 8, !dbg !2717
  br label %for.cond, !dbg !2718

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2719
  %cmp1 = icmp ne %struct.ira_allocno_live_range* %1, null, !dbg !2721
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2722

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2723
  %call = call %struct.ira_allocno_live_range* @copy_allocno_live_range(%struct.ira_allocno_live_range* %2), !dbg !2725
  store %struct.ira_allocno_live_range* %call, %struct.ira_allocno_live_range** %p, align 8, !dbg !2726
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %first, align 8, !dbg !2727
  %cmp2 = icmp eq %struct.ira_allocno_live_range* %3, null, !dbg !2729
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !2730

if.then3:                                         ; preds = %for.body
  %4 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2731
  store %struct.ira_allocno_live_range* %4, %struct.ira_allocno_live_range** %first, align 8, !dbg !2732
  br label %if.end4, !dbg !2733

if.else:                                          ; preds = %for.body
  %5 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2734
  %6 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %last, align 8, !dbg !2735
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %6, i32 0, i32 3, !dbg !2736
  store %struct.ira_allocno_live_range* %5, %struct.ira_allocno_live_range** %next, align 8, !dbg !2737
  br label %if.end4

if.end4:                                          ; preds = %if.else, %if.then3
  %7 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2738
  store %struct.ira_allocno_live_range* %7, %struct.ira_allocno_live_range** %last, align 8, !dbg !2739
  br label %for.inc, !dbg !2740

for.inc:                                          ; preds = %if.end4
  %8 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2741
  %next5 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %8, i32 0, i32 3, !dbg !2742
  %9 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next5, align 8, !dbg !2742
  store %struct.ira_allocno_live_range* %9, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2743
  br label %for.cond, !dbg !2744, !llvm.loop !2745

for.end:                                          ; preds = %for.cond
  %10 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %first, align 8, !dbg !2747
  store %struct.ira_allocno_live_range* %10, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2748
  br label %return, !dbg !2748

return:                                           ; preds = %for.end, %if.then
  %11 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2749
  ret %struct.ira_allocno_live_range* %11, !dbg !2749
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno_live_range* @copy_allocno_live_range(%struct.ira_allocno_live_range* %r) #0 !dbg !2750 {
entry:
  %r.addr = alloca %struct.ira_allocno_live_range*, align 8
  %p = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno_live_range* %r, %struct.ira_allocno_live_range** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r.addr, metadata !2751, metadata !DIExpression()), !dbg !2752
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %p, metadata !2753, metadata !DIExpression()), !dbg !2754
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_live_range_pool, align 8, !dbg !2755
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !2756
  %1 = bitcast i8* %call to %struct.ira_allocno_live_range*, !dbg !2757
  store %struct.ira_allocno_live_range* %1, %struct.ira_allocno_live_range** %p, align 8, !dbg !2758
  %2 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2759
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2760
  %4 = bitcast %struct.ira_allocno_live_range* %2 to i8*, !dbg !2761
  %5 = bitcast %struct.ira_allocno_live_range* %3 to i8*, !dbg !2761
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 40, i1 false), !dbg !2761
  %6 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %p, align 8, !dbg !2762
  ret %struct.ira_allocno_live_range* %6, !dbg !2763
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range* %r1, %struct.ira_allocno_live_range* %r2) #0 !dbg !2764 {
entry:
  %retval = alloca %struct.ira_allocno_live_range*, align 8
  %r1.addr = alloca %struct.ira_allocno_live_range*, align 8
  %r2.addr = alloca %struct.ira_allocno_live_range*, align 8
  %first = alloca %struct.ira_allocno_live_range*, align 8
  %last = alloca %struct.ira_allocno_live_range*, align 8
  %temp = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno_live_range* %r1, %struct.ira_allocno_live_range** %r1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r1.addr, metadata !2767, metadata !DIExpression()), !dbg !2768
  store %struct.ira_allocno_live_range* %r2, %struct.ira_allocno_live_range** %r2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r2.addr, metadata !2769, metadata !DIExpression()), !dbg !2770
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %first, metadata !2771, metadata !DIExpression()), !dbg !2772
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %last, metadata !2773, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %temp, metadata !2775, metadata !DIExpression()), !dbg !2776
  %0 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2777
  %cmp = icmp eq %struct.ira_allocno_live_range* %0, null, !dbg !2779
  br i1 %cmp, label %if.then, label %if.end, !dbg !2780

if.then:                                          ; preds = %entry
  %1 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2781
  store %struct.ira_allocno_live_range* %1, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2782
  br label %return, !dbg !2782

if.end:                                           ; preds = %entry
  %2 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2783
  %cmp1 = icmp eq %struct.ira_allocno_live_range* %2, null, !dbg !2785
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !2786

if.then2:                                         ; preds = %if.end
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2787
  store %struct.ira_allocno_live_range* %3, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2788
  br label %return, !dbg !2788

if.end3:                                          ; preds = %if.end
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %last, align 8, !dbg !2789
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %first, align 8, !dbg !2791
  br label %for.cond, !dbg !2792

for.cond:                                         ; preds = %if.end38, %if.end3
  %4 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2793
  %cmp4 = icmp ne %struct.ira_allocno_live_range* %4, null, !dbg !2795
  br i1 %cmp4, label %land.rhs, label %land.end, !dbg !2796

land.rhs:                                         ; preds = %for.cond
  %5 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2797
  %cmp5 = icmp ne %struct.ira_allocno_live_range* %5, null, !dbg !2798
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %6 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ], !dbg !2799
  br i1 %6, label %for.body, label %for.end, !dbg !2800

for.body:                                         ; preds = %land.end
  %7 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2801
  %start = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %7, i32 0, i32 1, !dbg !2804
  %8 = load i32, i32* %start, align 8, !dbg !2804
  %9 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2805
  %start6 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %9, i32 0, i32 1, !dbg !2806
  %10 = load i32, i32* %start6, align 8, !dbg !2806
  %cmp7 = icmp slt i32 %8, %10, !dbg !2807
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !2808

if.then8:                                         ; preds = %for.body
  %11 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2809
  store %struct.ira_allocno_live_range* %11, %struct.ira_allocno_live_range** %temp, align 8, !dbg !2811
  %12 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2812
  store %struct.ira_allocno_live_range* %12, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2813
  %13 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %temp, align 8, !dbg !2814
  store %struct.ira_allocno_live_range* %13, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2815
  br label %if.end9, !dbg !2816

if.end9:                                          ; preds = %if.then8, %for.body
  %14 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2817
  %start10 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %14, i32 0, i32 1, !dbg !2819
  %15 = load i32, i32* %start10, align 8, !dbg !2819
  %16 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2820
  %finish = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %16, i32 0, i32 2, !dbg !2821
  %17 = load i32, i32* %finish, align 4, !dbg !2821
  %add = add nsw i32 %17, 1, !dbg !2822
  %cmp11 = icmp sle i32 %15, %add, !dbg !2823
  br i1 %cmp11, label %if.then12, label %if.else, !dbg !2824

if.then12:                                        ; preds = %if.end9
  %18 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2825
  %start13 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %18, i32 0, i32 1, !dbg !2827
  %19 = load i32, i32* %start13, align 8, !dbg !2827
  %20 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2828
  %start14 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %20, i32 0, i32 1, !dbg !2829
  store i32 %19, i32* %start14, align 8, !dbg !2830
  %21 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2831
  %finish15 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %21, i32 0, i32 2, !dbg !2833
  %22 = load i32, i32* %finish15, align 4, !dbg !2833
  %23 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2834
  %finish16 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %23, i32 0, i32 2, !dbg !2835
  %24 = load i32, i32* %finish16, align 4, !dbg !2835
  %cmp17 = icmp slt i32 %22, %24, !dbg !2836
  br i1 %cmp17, label %if.then18, label %if.end21, !dbg !2837

if.then18:                                        ; preds = %if.then12
  %25 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2838
  %finish19 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %25, i32 0, i32 2, !dbg !2839
  %26 = load i32, i32* %finish19, align 4, !dbg !2839
  %27 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2840
  %finish20 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %27, i32 0, i32 2, !dbg !2841
  store i32 %26, i32* %finish20, align 4, !dbg !2842
  br label %if.end21, !dbg !2840

if.end21:                                         ; preds = %if.then18, %if.then12
  %28 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2843
  store %struct.ira_allocno_live_range* %28, %struct.ira_allocno_live_range** %temp, align 8, !dbg !2844
  %29 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2845
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %29, i32 0, i32 3, !dbg !2846
  %30 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !2846
  store %struct.ira_allocno_live_range* %30, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2847
  %31 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %temp, align 8, !dbg !2848
  call void @ira_finish_allocno_live_range(%struct.ira_allocno_live_range* %31), !dbg !2849
  %32 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2850
  %cmp22 = icmp eq %struct.ira_allocno_live_range* %32, null, !dbg !2852
  br i1 %cmp22, label %if.then23, label %if.end26, !dbg !2853

if.then23:                                        ; preds = %if.end21
  %33 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2854
  %next24 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %33, i32 0, i32 3, !dbg !2856
  %34 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next24, align 8, !dbg !2856
  store %struct.ira_allocno_live_range* %34, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2857
  %35 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2858
  %next25 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %35, i32 0, i32 3, !dbg !2859
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %next25, align 8, !dbg !2860
  br label %if.end26, !dbg !2861

if.end26:                                         ; preds = %if.then23, %if.end21
  br label %if.end38, !dbg !2862

if.else:                                          ; preds = %if.end9
  %36 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %first, align 8, !dbg !2863
  %cmp27 = icmp eq %struct.ira_allocno_live_range* %36, null, !dbg !2866
  br i1 %cmp27, label %if.then28, label %if.else29, !dbg !2867

if.then28:                                        ; preds = %if.else
  %37 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2868
  store %struct.ira_allocno_live_range* %37, %struct.ira_allocno_live_range** %last, align 8, !dbg !2869
  store %struct.ira_allocno_live_range* %37, %struct.ira_allocno_live_range** %first, align 8, !dbg !2870
  br label %if.end31, !dbg !2871

if.else29:                                        ; preds = %if.else
  %38 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2872
  %39 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %last, align 8, !dbg !2874
  %next30 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %39, i32 0, i32 3, !dbg !2875
  store %struct.ira_allocno_live_range* %38, %struct.ira_allocno_live_range** %next30, align 8, !dbg !2876
  %40 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2877
  store %struct.ira_allocno_live_range* %40, %struct.ira_allocno_live_range** %last, align 8, !dbg !2878
  br label %if.end31

if.end31:                                         ; preds = %if.else29, %if.then28
  %41 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2879
  %next32 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %41, i32 0, i32 3, !dbg !2880
  %42 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next32, align 8, !dbg !2880
  store %struct.ira_allocno_live_range* %42, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2881
  %43 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2882
  %cmp33 = icmp eq %struct.ira_allocno_live_range* %43, null, !dbg !2884
  br i1 %cmp33, label %if.then34, label %if.end37, !dbg !2885

if.then34:                                        ; preds = %if.end31
  %44 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2886
  %next35 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %44, i32 0, i32 3, !dbg !2888
  %45 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next35, align 8, !dbg !2888
  store %struct.ira_allocno_live_range* %45, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2889
  %46 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2890
  %next36 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %46, i32 0, i32 3, !dbg !2891
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %next36, align 8, !dbg !2892
  br label %if.end37, !dbg !2893

if.end37:                                         ; preds = %if.then34, %if.end31
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end26
  br label %for.cond, !dbg !2894, !llvm.loop !2895

for.end:                                          ; preds = %land.end
  %47 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2897
  %cmp39 = icmp ne %struct.ira_allocno_live_range* %47, null, !dbg !2899
  br i1 %cmp39, label %if.then40, label %if.else46, !dbg !2900

if.then40:                                        ; preds = %for.end
  %48 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %first, align 8, !dbg !2901
  %cmp41 = icmp eq %struct.ira_allocno_live_range* %48, null, !dbg !2904
  br i1 %cmp41, label %if.then42, label %if.else43, !dbg !2905

if.then42:                                        ; preds = %if.then40
  %49 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2906
  store %struct.ira_allocno_live_range* %49, %struct.ira_allocno_live_range** %first, align 8, !dbg !2907
  br label %if.end45, !dbg !2908

if.else43:                                        ; preds = %if.then40
  %50 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2909
  %51 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %last, align 8, !dbg !2910
  %next44 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %51, i32 0, i32 3, !dbg !2911
  store %struct.ira_allocno_live_range* %50, %struct.ira_allocno_live_range** %next44, align 8, !dbg !2912
  br label %if.end45

if.end45:                                         ; preds = %if.else43, %if.then42
  br label %if.end56, !dbg !2913

if.else46:                                        ; preds = %for.end
  %52 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2914
  %cmp47 = icmp ne %struct.ira_allocno_live_range* %52, null, !dbg !2916
  br i1 %cmp47, label %if.then48, label %if.else54, !dbg !2917

if.then48:                                        ; preds = %if.else46
  %53 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %first, align 8, !dbg !2918
  %cmp49 = icmp eq %struct.ira_allocno_live_range* %53, null, !dbg !2921
  br i1 %cmp49, label %if.then50, label %if.else51, !dbg !2922

if.then50:                                        ; preds = %if.then48
  %54 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2923
  store %struct.ira_allocno_live_range* %54, %struct.ira_allocno_live_range** %first, align 8, !dbg !2924
  br label %if.end53, !dbg !2925

if.else51:                                        ; preds = %if.then48
  %55 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2926
  %56 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %last, align 8, !dbg !2927
  %next52 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %56, i32 0, i32 3, !dbg !2928
  store %struct.ira_allocno_live_range* %55, %struct.ira_allocno_live_range** %next52, align 8, !dbg !2929
  br label %if.end53

if.end53:                                         ; preds = %if.else51, %if.then50
  br label %if.end55, !dbg !2930

if.else54:                                        ; preds = %if.else46
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.end53
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end45
  %57 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %first, align 8, !dbg !2931
  store %struct.ira_allocno_live_range* %57, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2932
  br label %return, !dbg !2932

return:                                           ; preds = %if.end56, %if.then2, %if.then
  %58 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %retval, align 8, !dbg !2933
  ret %struct.ira_allocno_live_range* %58, !dbg !2933
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_finish_allocno_live_range(%struct.ira_allocno_live_range* %r) #0 !dbg !2934 {
entry:
  %r.addr = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno_live_range* %r, %struct.ira_allocno_live_range** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r.addr, metadata !2937, metadata !DIExpression()), !dbg !2938
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_live_range_pool, align 8, !dbg !2939
  %1 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2940
  %2 = bitcast %struct.ira_allocno_live_range* %1 to i8*, !dbg !2940
  call void @pool_free(%struct.alloc_pool_def* %0, i8* %2), !dbg !2941
  ret void, !dbg !2942
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ira_allocno_live_ranges_intersect_p(%struct.ira_allocno_live_range* %r1, %struct.ira_allocno_live_range* %r2) #0 !dbg !2943 {
entry:
  %retval = alloca i8, align 1
  %r1.addr = alloca %struct.ira_allocno_live_range*, align 8
  %r2.addr = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno_live_range* %r1, %struct.ira_allocno_live_range** %r1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r1.addr, metadata !2946, metadata !DIExpression()), !dbg !2947
  store %struct.ira_allocno_live_range* %r2, %struct.ira_allocno_live_range** %r2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r2.addr, metadata !2948, metadata !DIExpression()), !dbg !2949
  br label %while.cond, !dbg !2950

while.cond:                                       ; preds = %if.end9, %entry
  %0 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2951
  %cmp = icmp ne %struct.ira_allocno_live_range* %0, null, !dbg !2952
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !2953

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2954
  %cmp1 = icmp ne %struct.ira_allocno_live_range* %1, null, !dbg !2955
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ], !dbg !2956
  br i1 %2, label %while.body, label %while.end, !dbg !2950

while.body:                                       ; preds = %land.end
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2957
  %start = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %3, i32 0, i32 1, !dbg !2960
  %4 = load i32, i32* %start, align 8, !dbg !2960
  %5 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2961
  %finish = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %5, i32 0, i32 2, !dbg !2962
  %6 = load i32, i32* %finish, align 4, !dbg !2962
  %cmp2 = icmp sgt i32 %4, %6, !dbg !2963
  br i1 %cmp2, label %if.then, label %if.else, !dbg !2964

if.then:                                          ; preds = %while.body
  %7 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2965
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %7, i32 0, i32 3, !dbg !2966
  %8 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !2966
  store %struct.ira_allocno_live_range* %8, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2967
  br label %if.end9, !dbg !2968

if.else:                                          ; preds = %while.body
  %9 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2969
  %start3 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %9, i32 0, i32 1, !dbg !2971
  %10 = load i32, i32* %start3, align 8, !dbg !2971
  %11 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r1.addr, align 8, !dbg !2972
  %finish4 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %11, i32 0, i32 2, !dbg !2973
  %12 = load i32, i32* %finish4, align 4, !dbg !2973
  %cmp5 = icmp sgt i32 %10, %12, !dbg !2974
  br i1 %cmp5, label %if.then6, label %if.else8, !dbg !2975

if.then6:                                         ; preds = %if.else
  %13 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2976
  %next7 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %13, i32 0, i32 3, !dbg !2977
  %14 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next7, align 8, !dbg !2977
  store %struct.ira_allocno_live_range* %14, %struct.ira_allocno_live_range** %r2.addr, align 8, !dbg !2978
  br label %if.end, !dbg !2979

if.else8:                                         ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !2980
  br label %return, !dbg !2980

if.end:                                           ; preds = %if.then6
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %while.cond, !dbg !2950, !llvm.loop !2981

while.end:                                        ; preds = %land.end
  store i8 0, i8* %retval, align 1, !dbg !2983
  br label %return, !dbg !2983

return:                                           ; preds = %while.end, %if.else8
  %15 = load i8, i8* %retval, align 1, !dbg !2984
  ret i8 %15, !dbg !2984
}

declare dso_local void @pool_free(%struct.alloc_pool_def*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_finish_allocno_live_range_list(%struct.ira_allocno_live_range* %r) #0 !dbg !2985 {
entry:
  %r.addr = alloca %struct.ira_allocno_live_range*, align 8
  %next_r = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno_live_range* %r, %struct.ira_allocno_live_range** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r.addr, metadata !2986, metadata !DIExpression()), !dbg !2987
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %next_r, metadata !2988, metadata !DIExpression()), !dbg !2989
  br label %for.cond, !dbg !2990

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2991
  %cmp = icmp ne %struct.ira_allocno_live_range* %0, null, !dbg !2994
  br i1 %cmp, label %for.body, label %for.end, !dbg !2995

for.body:                                         ; preds = %for.cond
  %1 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !2996
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %1, i32 0, i32 3, !dbg !2998
  %2 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !2998
  store %struct.ira_allocno_live_range* %2, %struct.ira_allocno_live_range** %next_r, align 8, !dbg !2999
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !3000
  call void @ira_finish_allocno_live_range(%struct.ira_allocno_live_range* %3), !dbg !3001
  br label %for.inc, !dbg !3002

for.inc:                                          ; preds = %for.body
  %4 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next_r, align 8, !dbg !3003
  store %struct.ira_allocno_live_range* %4, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !3004
  br label %for.cond, !dbg !3005, !llvm.loop !3006

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3008
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_free_allocno_updated_costs(%struct.ira_allocno* %a) #0 !dbg !3009 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !3010, metadata !DIExpression()), !dbg !3011
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !3012, metadata !DIExpression()), !dbg !3013
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3014
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !3014
  %1 = load i32, i32* %cover_class1, align 8, !dbg !3014
  store i32 %1, i32* %cover_class, align 4, !dbg !3015
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3016
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 34, !dbg !3016
  %3 = load i32*, i32** %updated_hard_reg_costs, align 8, !dbg !3016
  %cmp = icmp ne i32* %3, null, !dbg !3018
  br i1 %cmp, label %if.then, label %if.end, !dbg !3019

if.then:                                          ; preds = %entry
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3020
  %updated_hard_reg_costs2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 34, !dbg !3020
  %5 = load i32*, i32** %updated_hard_reg_costs2, align 8, !dbg !3020
  %6 = load i32, i32* %cover_class, align 4, !dbg !3021
  call void @ira_free_cost_vector(i32* %5, i32 %6), !dbg !3022
  br label %if.end, !dbg !3022

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3023
  %updated_hard_reg_costs3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 34, !dbg !3023
  store i32* null, i32** %updated_hard_reg_costs3, align 8, !dbg !3024
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3025
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 36, !dbg !3025
  %9 = load i32*, i32** %updated_conflict_hard_reg_costs, align 8, !dbg !3025
  %cmp4 = icmp ne i32* %9, null, !dbg !3027
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !3028

if.then5:                                         ; preds = %if.end
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3029
  %updated_conflict_hard_reg_costs6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 36, !dbg !3029
  %11 = load i32*, i32** %updated_conflict_hard_reg_costs6, align 8, !dbg !3029
  %12 = load i32, i32* %cover_class, align 4, !dbg !3030
  call void @ira_free_cost_vector(i32* %11, i32 %12), !dbg !3031
  br label %if.end7, !dbg !3031

if.end7:                                          ; preds = %if.then5, %if.end
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3032
  %updated_conflict_hard_reg_costs8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 36, !dbg !3032
  store i32* null, i32** %updated_conflict_hard_reg_costs8, align 8, !dbg !3033
  ret void, !dbg !3034
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_free_cost_vector(i32* %vec, i32 %cover_class) #0 !dbg !3035 {
entry:
  %vec.addr = alloca i32*, align 8
  %cover_class.addr = alloca i32, align 4
  store i32* %vec, i32** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %vec.addr, metadata !3038, metadata !DIExpression()), !dbg !3039
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !3040, metadata !DIExpression()), !dbg !3041
  %0 = load i32, i32* %cover_class.addr, align 4, !dbg !3042
  %idxprom = zext i32 %0 to i64, !dbg !3043
  %arrayidx = getelementptr inbounds [27 x %struct.alloc_pool_def*], [27 x %struct.alloc_pool_def*]* @cost_vector_pool, i64 0, i64 %idxprom, !dbg !3043
  %1 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %arrayidx, align 8, !dbg !3043
  %2 = load i32*, i32** %vec.addr, align 8, !dbg !3044
  %3 = bitcast i32* %2 to i8*, !dbg !3044
  call void @pool_free(%struct.alloc_pool_def* %1, i8* %3), !dbg !3045
  ret void, !dbg !3046
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ira_allocno_copy* @ira_create_copy(%struct.ira_allocno* %first, %struct.ira_allocno* %second, i32 %freq, i8 zeroext %constraint_p, %struct.rtx_def* %insn, %struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !3047 {
entry:
  %first.addr = alloca %struct.ira_allocno*, align 8
  %second.addr = alloca %struct.ira_allocno*, align 8
  %freq.addr = alloca i32, align 4
  %constraint_p.addr = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno* %first, %struct.ira_allocno** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first.addr, metadata !3050, metadata !DIExpression()), !dbg !3051
  store %struct.ira_allocno* %second, %struct.ira_allocno** %second.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %second.addr, metadata !3052, metadata !DIExpression()), !dbg !3053
  store i32 %freq, i32* %freq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq.addr, metadata !3054, metadata !DIExpression()), !dbg !3055
  store i8 %constraint_p, i8* %constraint_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %constraint_p.addr, metadata !3056, metadata !DIExpression()), !dbg !3057
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3058, metadata !DIExpression()), !dbg !3059
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !3060, metadata !DIExpression()), !dbg !3061
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3062, metadata !DIExpression()), !dbg !3063
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @copy_pool, align 8, !dbg !3064
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !3065
  %1 = bitcast i8* %call to %struct.ira_allocno_copy*, !dbg !3066
  store %struct.ira_allocno_copy* %1, %struct.ira_allocno_copy** %cp, align 8, !dbg !3067
  %2 = load i32, i32* @ira_copies_num, align 4, !dbg !3068
  %3 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3069
  %num = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %3, i32 0, i32 0, !dbg !3070
  store i32 %2, i32* %num, align 8, !dbg !3071
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %first.addr, align 8, !dbg !3072
  %5 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3073
  %first1 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %5, i32 0, i32 1, !dbg !3074
  store %struct.ira_allocno* %4, %struct.ira_allocno** %first1, align 8, !dbg !3075
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %second.addr, align 8, !dbg !3076
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3077
  %second2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %7, i32 0, i32 2, !dbg !3078
  store %struct.ira_allocno* %6, %struct.ira_allocno** %second2, align 8, !dbg !3079
  %8 = load i32, i32* %freq.addr, align 4, !dbg !3080
  %9 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3081
  %freq3 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %9, i32 0, i32 3, !dbg !3082
  store i32 %8, i32* %freq3, align 8, !dbg !3083
  %10 = load i8, i8* %constraint_p.addr, align 1, !dbg !3084
  %11 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3085
  %constraint_p4 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %11, i32 0, i32 4, !dbg !3086
  store i8 %10, i8* %constraint_p4, align 4, !dbg !3087
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3088
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3089
  %insn5 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %13, i32 0, i32 5, !dbg !3090
  store %struct.rtx_def* %12, %struct.rtx_def** %insn5, align 8, !dbg !3091
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !3092
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3093
  %loop_tree_node6 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 10, !dbg !3094
  store %struct.ira_loop_tree_node* %14, %struct.ira_loop_tree_node** %loop_tree_node6, align 8, !dbg !3095
  %16 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3096
  %call7 = call %struct.ira_allocno_copy** @VEC_ira_copy_t_heap_safe_push(%struct.VEC_ira_copy_t_heap** @copy_vec, %struct.ira_allocno_copy* %16), !dbg !3096
  %17 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** @copy_vec, align 8, !dbg !3097
  %tobool = icmp ne %struct.VEC_ira_copy_t_heap* %17, null, !dbg !3097
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3097

cond.true:                                        ; preds = %entry
  %18 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** @copy_vec, align 8, !dbg !3097
  %base = getelementptr inbounds %struct.VEC_ira_copy_t_heap, %struct.VEC_ira_copy_t_heap* %18, i32 0, i32 0, !dbg !3097
  br label %cond.end, !dbg !3097

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_copy_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3097
  %call8 = call %struct.ira_allocno_copy** @VEC_ira_copy_t_base_address(%struct.VEC_ira_copy_t_base* %cond), !dbg !3097
  store %struct.ira_allocno_copy** %call8, %struct.ira_allocno_copy*** @ira_copies, align 8, !dbg !3098
  %19 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** @copy_vec, align 8, !dbg !3099
  %tobool9 = icmp ne %struct.VEC_ira_copy_t_heap* %19, null, !dbg !3099
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !3099

cond.true10:                                      ; preds = %cond.end
  %20 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** @copy_vec, align 8, !dbg !3099
  %base11 = getelementptr inbounds %struct.VEC_ira_copy_t_heap, %struct.VEC_ira_copy_t_heap* %20, i32 0, i32 0, !dbg !3099
  br label %cond.end13, !dbg !3099

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !3099

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_ira_copy_t_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !3099
  %call15 = call i32 @VEC_ira_copy_t_base_length(%struct.VEC_ira_copy_t_base* %cond14), !dbg !3099
  store i32 %call15, i32* @ira_copies_num, align 4, !dbg !3100
  %21 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3101
  ret %struct.ira_allocno_copy* %21, !dbg !3102
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno_copy** @VEC_ira_copy_t_heap_safe_push(%struct.VEC_ira_copy_t_heap** %vec_, %struct.ira_allocno_copy* %obj_) #0 !dbg !3103 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_heap**, align 8
  %obj_.addr = alloca %struct.ira_allocno_copy*, align 8
  store %struct.VEC_ira_copy_t_heap** %vec_, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_heap*** %vec_.addr, metadata !3107, metadata !DIExpression()), !dbg !3108
  store %struct.ira_allocno_copy* %obj_, %struct.ira_allocno_copy** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %obj_.addr, metadata !3109, metadata !DIExpression()), !dbg !3108
  %0 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !3108
  %call = call i32 @VEC_ira_copy_t_heap_reserve(%struct.VEC_ira_copy_t_heap** %0, i32 1), !dbg !3108
  %1 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !3108
  %2 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %1, align 8, !dbg !3108
  %tobool = icmp ne %struct.VEC_ira_copy_t_heap* %2, null, !dbg !3108
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3108

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !3108
  %4 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %3, align 8, !dbg !3108
  %base = getelementptr inbounds %struct.VEC_ira_copy_t_heap, %struct.VEC_ira_copy_t_heap* %4, i32 0, i32 0, !dbg !3108
  br label %cond.end, !dbg !3108

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3108

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_copy_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3108
  %5 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %obj_.addr, align 8, !dbg !3108
  %call1 = call %struct.ira_allocno_copy** @VEC_ira_copy_t_base_quick_push(%struct.VEC_ira_copy_t_base* %cond, %struct.ira_allocno_copy* %5), !dbg !3108
  ret %struct.ira_allocno_copy** %call1, !dbg !3108
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno_copy** @VEC_ira_copy_t_base_address(%struct.VEC_ira_copy_t_base* %vec_) #0 !dbg !3110 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_base*, align 8
  store %struct.VEC_ira_copy_t_base* %vec_, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_base** %vec_.addr, metadata !3114, metadata !DIExpression()), !dbg !3115
  %0 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !3115
  %tobool = icmp ne %struct.VEC_ira_copy_t_base* %0, null, !dbg !3115
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3115

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !3115
  %vec = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %1, i32 0, i32 2, !dbg !3115
  %arraydecay = getelementptr inbounds [1 x %struct.ira_allocno_copy*], [1 x %struct.ira_allocno_copy*]* %vec, i64 0, i64 0, !dbg !3115
  br label %cond.end, !dbg !3115

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ira_allocno_copy** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !3115
  ret %struct.ira_allocno_copy** %cond, !dbg !3115
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_copy_t_base_length(%struct.VEC_ira_copy_t_base* %vec_) #0 !dbg !3116 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_base*, align 8
  store %struct.VEC_ira_copy_t_base* %vec_, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_base** %vec_.addr, metadata !3121, metadata !DIExpression()), !dbg !3122
  %0 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !3122
  %tobool = icmp ne %struct.VEC_ira_copy_t_base* %0, null, !dbg !3122
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3122

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !3122
  %num = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %1, i32 0, i32 0, !dbg !3122
  %2 = load i32, i32* %num, align 8, !dbg !3122
  br label %cond.end, !dbg !3122

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3122
  ret i32 %cond, !dbg !3122
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_add_allocno_copy_to_list(%struct.ira_allocno_copy* %cp) #0 !dbg !3123 {
entry:
  %cp.addr = alloca %struct.ira_allocno_copy*, align 8
  %first = alloca %struct.ira_allocno*, align 8
  %second = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno_copy* %cp, %struct.ira_allocno_copy** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp.addr, metadata !3126, metadata !DIExpression()), !dbg !3127
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first, metadata !3128, metadata !DIExpression()), !dbg !3129
  %0 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3130
  %first1 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %0, i32 0, i32 1, !dbg !3131
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %first1, align 8, !dbg !3131
  store %struct.ira_allocno* %1, %struct.ira_allocno** %first, align 8, !dbg !3129
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %second, metadata !3132, metadata !DIExpression()), !dbg !3133
  %2 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3134
  %second2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %2, i32 0, i32 2, !dbg !3135
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %second2, align 8, !dbg !3135
  store %struct.ira_allocno* %3, %struct.ira_allocno** %second, align 8, !dbg !3133
  %4 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3136
  %prev_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %4, i32 0, i32 6, !dbg !3137
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %prev_first_allocno_copy, align 8, !dbg !3138
  %5 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3139
  %prev_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %5, i32 0, i32 8, !dbg !3140
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %prev_second_allocno_copy, align 8, !dbg !3141
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3142
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 15, !dbg !3142
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !3142
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3143
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 7, !dbg !3144
  store %struct.ira_allocno_copy* %7, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !3145
  %9 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3146
  %next_first_allocno_copy3 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %9, i32 0, i32 7, !dbg !3148
  %10 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy3, align 8, !dbg !3148
  %cmp = icmp ne %struct.ira_allocno_copy* %10, null, !dbg !3149
  br i1 %cmp, label %if.then, label %if.end12, !dbg !3150

if.then:                                          ; preds = %entry
  %11 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3151
  %next_first_allocno_copy4 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %11, i32 0, i32 7, !dbg !3154
  %12 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy4, align 8, !dbg !3154
  %first5 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %12, i32 0, i32 1, !dbg !3155
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %first5, align 8, !dbg !3155
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3156
  %cmp6 = icmp eq %struct.ira_allocno* %13, %14, !dbg !3157
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !3158

if.then7:                                         ; preds = %if.then
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3159
  %16 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3160
  %next_first_allocno_copy8 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %16, i32 0, i32 7, !dbg !3161
  %17 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy8, align 8, !dbg !3161
  %prev_first_allocno_copy9 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %17, i32 0, i32 6, !dbg !3162
  store %struct.ira_allocno_copy* %15, %struct.ira_allocno_copy** %prev_first_allocno_copy9, align 8, !dbg !3163
  br label %if.end, !dbg !3160

if.else:                                          ; preds = %if.then
  %18 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3164
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3165
  %next_first_allocno_copy10 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %19, i32 0, i32 7, !dbg !3166
  %20 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy10, align 8, !dbg !3166
  %prev_second_allocno_copy11 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %20, i32 0, i32 8, !dbg !3167
  store %struct.ira_allocno_copy* %18, %struct.ira_allocno_copy** %prev_second_allocno_copy11, align 8, !dbg !3168
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end12, !dbg !3169

if.end12:                                         ; preds = %if.end, %entry
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3170
  %allocno_copies13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 15, !dbg !3170
  %22 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies13, align 8, !dbg !3170
  %23 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3171
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %23, i32 0, i32 9, !dbg !3172
  store %struct.ira_allocno_copy* %22, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !3173
  %24 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3174
  %next_second_allocno_copy14 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %24, i32 0, i32 9, !dbg !3176
  %25 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy14, align 8, !dbg !3176
  %cmp15 = icmp ne %struct.ira_allocno_copy* %25, null, !dbg !3177
  br i1 %cmp15, label %if.then16, label %if.end27, !dbg !3178

if.then16:                                        ; preds = %if.end12
  %26 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3179
  %next_second_allocno_copy17 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %26, i32 0, i32 9, !dbg !3182
  %27 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy17, align 8, !dbg !3182
  %second18 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %27, i32 0, i32 2, !dbg !3183
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %second18, align 8, !dbg !3183
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3184
  %cmp19 = icmp eq %struct.ira_allocno* %28, %29, !dbg !3185
  br i1 %cmp19, label %if.then20, label %if.else23, !dbg !3186

if.then20:                                        ; preds = %if.then16
  %30 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3187
  %31 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3188
  %next_second_allocno_copy21 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %31, i32 0, i32 9, !dbg !3189
  %32 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy21, align 8, !dbg !3189
  %prev_second_allocno_copy22 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %32, i32 0, i32 8, !dbg !3190
  store %struct.ira_allocno_copy* %30, %struct.ira_allocno_copy** %prev_second_allocno_copy22, align 8, !dbg !3191
  br label %if.end26, !dbg !3188

if.else23:                                        ; preds = %if.then16
  %33 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3192
  %34 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3193
  %next_second_allocno_copy24 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %34, i32 0, i32 9, !dbg !3194
  %35 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy24, align 8, !dbg !3194
  %prev_first_allocno_copy25 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %35, i32 0, i32 6, !dbg !3195
  store %struct.ira_allocno_copy* %33, %struct.ira_allocno_copy** %prev_first_allocno_copy25, align 8, !dbg !3196
  br label %if.end26

if.end26:                                         ; preds = %if.else23, %if.then20
  br label %if.end27, !dbg !3197

if.end27:                                         ; preds = %if.end26, %if.end12
  %36 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3198
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3199
  %allocno_copies28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 15, !dbg !3199
  store %struct.ira_allocno_copy* %36, %struct.ira_allocno_copy** %allocno_copies28, align 8, !dbg !3200
  %38 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3201
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3202
  %allocno_copies29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 15, !dbg !3202
  store %struct.ira_allocno_copy* %38, %struct.ira_allocno_copy** %allocno_copies29, align 8, !dbg !3203
  ret void, !dbg !3204
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_remove_allocno_copy_from_list(%struct.ira_allocno_copy* %cp) #0 !dbg !3205 {
entry:
  %cp.addr = alloca %struct.ira_allocno_copy*, align 8
  %first = alloca %struct.ira_allocno*, align 8
  %second = alloca %struct.ira_allocno*, align 8
  %prev = alloca %struct.ira_allocno_copy*, align 8
  %next = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno_copy* %cp, %struct.ira_allocno_copy** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp.addr, metadata !3206, metadata !DIExpression()), !dbg !3207
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first, metadata !3208, metadata !DIExpression()), !dbg !3209
  %0 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3210
  %first1 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %0, i32 0, i32 1, !dbg !3211
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %first1, align 8, !dbg !3211
  store %struct.ira_allocno* %1, %struct.ira_allocno** %first, align 8, !dbg !3209
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %second, metadata !3212, metadata !DIExpression()), !dbg !3213
  %2 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3214
  %second2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %2, i32 0, i32 2, !dbg !3215
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %second2, align 8, !dbg !3215
  store %struct.ira_allocno* %3, %struct.ira_allocno** %second, align 8, !dbg !3213
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %prev, metadata !3216, metadata !DIExpression()), !dbg !3217
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next, metadata !3218, metadata !DIExpression()), !dbg !3219
  %4 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3220
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %4, i32 0, i32 7, !dbg !3221
  %5 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !3221
  store %struct.ira_allocno_copy* %5, %struct.ira_allocno_copy** %next, align 8, !dbg !3222
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3223
  %prev_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %6, i32 0, i32 6, !dbg !3224
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev_first_allocno_copy, align 8, !dbg !3224
  store %struct.ira_allocno_copy* %7, %struct.ira_allocno_copy** %prev, align 8, !dbg !3225
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3226
  %cmp = icmp eq %struct.ira_allocno_copy* %8, null, !dbg !3228
  br i1 %cmp, label %if.then, label %if.else, !dbg !3229

if.then:                                          ; preds = %entry
  %9 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3230
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3231
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 15, !dbg !3231
  store %struct.ira_allocno_copy* %9, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !3232
  br label %if.end8, !dbg !3231

if.else:                                          ; preds = %entry
  %11 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3233
  %first3 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %11, i32 0, i32 1, !dbg !3235
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %first3, align 8, !dbg !3235
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3236
  %cmp4 = icmp eq %struct.ira_allocno* %12, %13, !dbg !3237
  br i1 %cmp4, label %if.then5, label %if.else7, !dbg !3238

if.then5:                                         ; preds = %if.else
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3239
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3240
  %next_first_allocno_copy6 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 7, !dbg !3241
  store %struct.ira_allocno_copy* %14, %struct.ira_allocno_copy** %next_first_allocno_copy6, align 8, !dbg !3242
  br label %if.end, !dbg !3240

if.else7:                                         ; preds = %if.else
  %16 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3243
  %17 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3244
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %17, i32 0, i32 9, !dbg !3245
  store %struct.ira_allocno_copy* %16, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !3246
  br label %if.end

if.end:                                           ; preds = %if.else7, %if.then5
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %18 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3247
  %cmp9 = icmp ne %struct.ira_allocno_copy* %18, null, !dbg !3249
  br i1 %cmp9, label %if.then10, label %if.end17, !dbg !3250

if.then10:                                        ; preds = %if.end8
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3251
  %first11 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %19, i32 0, i32 1, !dbg !3254
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %first11, align 8, !dbg !3254
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3255
  %cmp12 = icmp eq %struct.ira_allocno* %20, %21, !dbg !3256
  br i1 %cmp12, label %if.then13, label %if.else15, !dbg !3257

if.then13:                                        ; preds = %if.then10
  %22 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3258
  %23 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3259
  %prev_first_allocno_copy14 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %23, i32 0, i32 6, !dbg !3260
  store %struct.ira_allocno_copy* %22, %struct.ira_allocno_copy** %prev_first_allocno_copy14, align 8, !dbg !3261
  br label %if.end16, !dbg !3259

if.else15:                                        ; preds = %if.then10
  %24 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3262
  %25 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3263
  %prev_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %25, i32 0, i32 8, !dbg !3264
  store %struct.ira_allocno_copy* %24, %struct.ira_allocno_copy** %prev_second_allocno_copy, align 8, !dbg !3265
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.then13
  br label %if.end17, !dbg !3266

if.end17:                                         ; preds = %if.end16, %if.end8
  %26 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3267
  %next_first_allocno_copy18 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %26, i32 0, i32 7, !dbg !3268
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %next_first_allocno_copy18, align 8, !dbg !3269
  %27 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3270
  %prev_first_allocno_copy19 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %27, i32 0, i32 6, !dbg !3271
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %prev_first_allocno_copy19, align 8, !dbg !3272
  %28 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3273
  %next_second_allocno_copy20 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %28, i32 0, i32 9, !dbg !3274
  %29 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy20, align 8, !dbg !3274
  store %struct.ira_allocno_copy* %29, %struct.ira_allocno_copy** %next, align 8, !dbg !3275
  %30 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3276
  %prev_second_allocno_copy21 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %30, i32 0, i32 8, !dbg !3277
  %31 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev_second_allocno_copy21, align 8, !dbg !3277
  store %struct.ira_allocno_copy* %31, %struct.ira_allocno_copy** %prev, align 8, !dbg !3278
  %32 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3279
  %cmp22 = icmp eq %struct.ira_allocno_copy* %32, null, !dbg !3281
  br i1 %cmp22, label %if.then23, label %if.else25, !dbg !3282

if.then23:                                        ; preds = %if.end17
  %33 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3283
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3284
  %allocno_copies24 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 15, !dbg !3284
  store %struct.ira_allocno_copy* %33, %struct.ira_allocno_copy** %allocno_copies24, align 8, !dbg !3285
  br label %if.end33, !dbg !3284

if.else25:                                        ; preds = %if.end17
  %35 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3286
  %second26 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %35, i32 0, i32 2, !dbg !3288
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %second26, align 8, !dbg !3288
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3289
  %cmp27 = icmp eq %struct.ira_allocno* %36, %37, !dbg !3290
  br i1 %cmp27, label %if.then28, label %if.else30, !dbg !3291

if.then28:                                        ; preds = %if.else25
  %38 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3292
  %39 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3293
  %next_second_allocno_copy29 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %39, i32 0, i32 9, !dbg !3294
  store %struct.ira_allocno_copy* %38, %struct.ira_allocno_copy** %next_second_allocno_copy29, align 8, !dbg !3295
  br label %if.end32, !dbg !3293

if.else30:                                        ; preds = %if.else25
  %40 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3296
  %41 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3297
  %next_first_allocno_copy31 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %41, i32 0, i32 7, !dbg !3298
  store %struct.ira_allocno_copy* %40, %struct.ira_allocno_copy** %next_first_allocno_copy31, align 8, !dbg !3299
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then28
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then23
  %42 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3300
  %cmp34 = icmp ne %struct.ira_allocno_copy* %42, null, !dbg !3302
  br i1 %cmp34, label %if.then35, label %if.end43, !dbg !3303

if.then35:                                        ; preds = %if.end33
  %43 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3304
  %second36 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %43, i32 0, i32 2, !dbg !3307
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %second36, align 8, !dbg !3307
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3308
  %cmp37 = icmp eq %struct.ira_allocno* %44, %45, !dbg !3309
  br i1 %cmp37, label %if.then38, label %if.else40, !dbg !3310

if.then38:                                        ; preds = %if.then35
  %46 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3311
  %47 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3312
  %prev_second_allocno_copy39 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %47, i32 0, i32 8, !dbg !3313
  store %struct.ira_allocno_copy* %46, %struct.ira_allocno_copy** %prev_second_allocno_copy39, align 8, !dbg !3314
  br label %if.end42, !dbg !3312

if.else40:                                        ; preds = %if.then35
  %48 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev, align 8, !dbg !3315
  %49 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next, align 8, !dbg !3316
  %prev_first_allocno_copy41 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %49, i32 0, i32 6, !dbg !3317
  store %struct.ira_allocno_copy* %48, %struct.ira_allocno_copy** %prev_first_allocno_copy41, align 8, !dbg !3318
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.then38
  br label %if.end43, !dbg !3319

if.end43:                                         ; preds = %if.end42, %if.end33
  %50 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3320
  %next_second_allocno_copy44 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %50, i32 0, i32 9, !dbg !3321
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %next_second_allocno_copy44, align 8, !dbg !3322
  %51 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3323
  %prev_second_allocno_copy45 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %51, i32 0, i32 8, !dbg !3324
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %prev_second_allocno_copy45, align 8, !dbg !3325
  ret void, !dbg !3326
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_swap_allocno_copy_ends_if_necessary(%struct.ira_allocno_copy* %cp) #0 !dbg !3327 {
entry:
  %cp.addr = alloca %struct.ira_allocno_copy*, align 8
  %temp = alloca %struct.ira_allocno*, align 8
  %temp_cp = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno_copy* %cp, %struct.ira_allocno_copy** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp.addr, metadata !3328, metadata !DIExpression()), !dbg !3329
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %temp, metadata !3330, metadata !DIExpression()), !dbg !3331
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %temp_cp, metadata !3332, metadata !DIExpression()), !dbg !3333
  %0 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3334
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %0, i32 0, i32 1, !dbg !3334
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3334
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 0, !dbg !3334
  %2 = load i32, i32* %num, align 8, !dbg !3334
  %3 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3336
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %3, i32 0, i32 2, !dbg !3336
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3336
  %num1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 0, !dbg !3336
  %5 = load i32, i32* %num1, align 8, !dbg !3336
  %cmp = icmp sle i32 %2, %5, !dbg !3337
  br i1 %cmp, label %if.then, label %if.end, !dbg !3338

if.then:                                          ; preds = %entry
  br label %return, !dbg !3339

if.end:                                           ; preds = %entry
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3340
  %first2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %6, i32 0, i32 1, !dbg !3341
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %first2, align 8, !dbg !3341
  store %struct.ira_allocno* %7, %struct.ira_allocno** %temp, align 8, !dbg !3342
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3343
  %second3 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 2, !dbg !3344
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %second3, align 8, !dbg !3344
  %10 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3345
  %first4 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %10, i32 0, i32 1, !dbg !3346
  store %struct.ira_allocno* %9, %struct.ira_allocno** %first4, align 8, !dbg !3347
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %temp, align 8, !dbg !3348
  %12 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3349
  %second5 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %12, i32 0, i32 2, !dbg !3350
  store %struct.ira_allocno* %11, %struct.ira_allocno** %second5, align 8, !dbg !3351
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3352
  %prev_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %13, i32 0, i32 6, !dbg !3353
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev_first_allocno_copy, align 8, !dbg !3353
  store %struct.ira_allocno_copy* %14, %struct.ira_allocno_copy** %temp_cp, align 8, !dbg !3354
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3355
  %prev_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 8, !dbg !3356
  %16 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %prev_second_allocno_copy, align 8, !dbg !3356
  %17 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3357
  %prev_first_allocno_copy6 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %17, i32 0, i32 6, !dbg !3358
  store %struct.ira_allocno_copy* %16, %struct.ira_allocno_copy** %prev_first_allocno_copy6, align 8, !dbg !3359
  %18 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %temp_cp, align 8, !dbg !3360
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3361
  %prev_second_allocno_copy7 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %19, i32 0, i32 8, !dbg !3362
  store %struct.ira_allocno_copy* %18, %struct.ira_allocno_copy** %prev_second_allocno_copy7, align 8, !dbg !3363
  %20 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3364
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %20, i32 0, i32 7, !dbg !3365
  %21 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !3365
  store %struct.ira_allocno_copy* %21, %struct.ira_allocno_copy** %temp_cp, align 8, !dbg !3366
  %22 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3367
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %22, i32 0, i32 9, !dbg !3368
  %23 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !3368
  %24 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3369
  %next_first_allocno_copy8 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %24, i32 0, i32 7, !dbg !3370
  store %struct.ira_allocno_copy* %23, %struct.ira_allocno_copy** %next_first_allocno_copy8, align 8, !dbg !3371
  %25 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %temp_cp, align 8, !dbg !3372
  %26 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3373
  %next_second_allocno_copy9 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %26, i32 0, i32 9, !dbg !3374
  store %struct.ira_allocno_copy* %25, %struct.ira_allocno_copy** %next_second_allocno_copy9, align 8, !dbg !3375
  br label %return, !dbg !3376

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3376
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ira_allocno_copy* @ira_add_allocno_copy(%struct.ira_allocno* %first, %struct.ira_allocno* %second, i32 %freq, i8 zeroext %constraint_p, %struct.rtx_def* %insn, %struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !3377 {
entry:
  %retval = alloca %struct.ira_allocno_copy*, align 8
  %first.addr = alloca %struct.ira_allocno*, align 8
  %second.addr = alloca %struct.ira_allocno*, align 8
  %freq.addr = alloca i32, align 4
  %constraint_p.addr = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno* %first, %struct.ira_allocno** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first.addr, metadata !3378, metadata !DIExpression()), !dbg !3379
  store %struct.ira_allocno* %second, %struct.ira_allocno** %second.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %second.addr, metadata !3380, metadata !DIExpression()), !dbg !3381
  store i32 %freq, i32* %freq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq.addr, metadata !3382, metadata !DIExpression()), !dbg !3383
  store i8 %constraint_p, i8* %constraint_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %constraint_p.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3386, metadata !DIExpression()), !dbg !3387
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !3388, metadata !DIExpression()), !dbg !3389
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3390, metadata !DIExpression()), !dbg !3391
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %first.addr, align 8, !dbg !3392
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %second.addr, align 8, !dbg !3394
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3395
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !3396
  %call = call %struct.ira_allocno_copy* @find_allocno_copy(%struct.ira_allocno* %0, %struct.ira_allocno* %1, %struct.rtx_def* %2, %struct.ira_loop_tree_node* %3), !dbg !3397
  store %struct.ira_allocno_copy* %call, %struct.ira_allocno_copy** %cp, align 8, !dbg !3398
  %cmp = icmp ne %struct.ira_allocno_copy* %call, null, !dbg !3399
  br i1 %cmp, label %if.then, label %if.end, !dbg !3400

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %freq.addr, align 4, !dbg !3401
  %5 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3403
  %freq1 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %5, i32 0, i32 3, !dbg !3404
  %6 = load i32, i32* %freq1, align 8, !dbg !3405
  %add = add nsw i32 %6, %4, !dbg !3405
  store i32 %add, i32* %freq1, align 8, !dbg !3405
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3406
  store %struct.ira_allocno_copy* %7, %struct.ira_allocno_copy** %retval, align 8, !dbg !3407
  br label %return, !dbg !3407

if.end:                                           ; preds = %entry
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %first.addr, align 8, !dbg !3408
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %second.addr, align 8, !dbg !3409
  %10 = load i32, i32* %freq.addr, align 4, !dbg !3410
  %11 = load i8, i8* %constraint_p.addr, align 1, !dbg !3411
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3412
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !3413
  %call2 = call %struct.ira_allocno_copy* @ira_create_copy(%struct.ira_allocno* %8, %struct.ira_allocno* %9, i32 %10, i8 zeroext %11, %struct.rtx_def* %12, %struct.ira_loop_tree_node* %13), !dbg !3414
  store %struct.ira_allocno_copy* %call2, %struct.ira_allocno_copy** %cp, align 8, !dbg !3415
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3416
  call void @ira_add_allocno_copy_to_list(%struct.ira_allocno_copy* %14), !dbg !3417
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3418
  call void @ira_swap_allocno_copy_ends_if_necessary(%struct.ira_allocno_copy* %15), !dbg !3419
  %16 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3420
  store %struct.ira_allocno_copy* %16, %struct.ira_allocno_copy** %retval, align 8, !dbg !3421
  br label %return, !dbg !3421

return:                                           ; preds = %if.end, %if.then
  %17 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %retval, align 8, !dbg !3422
  ret %struct.ira_allocno_copy* %17, !dbg !3422
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno_copy* @find_allocno_copy(%struct.ira_allocno* %a1, %struct.ira_allocno* %a2, %struct.rtx_def* %insn, %struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !3423 {
entry:
  %retval = alloca %struct.ira_allocno_copy*, align 8
  %a1.addr = alloca %struct.ira_allocno*, align 8
  %a2.addr = alloca %struct.ira_allocno*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  %another_a = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %a1, %struct.ira_allocno** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1.addr, metadata !3426, metadata !DIExpression()), !dbg !3427
  store %struct.ira_allocno* %a2, %struct.ira_allocno** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2.addr, metadata !3428, metadata !DIExpression()), !dbg !3429
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3430, metadata !DIExpression()), !dbg !3431
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !3432, metadata !DIExpression()), !dbg !3433
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3434, metadata !DIExpression()), !dbg !3435
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !3436, metadata !DIExpression()), !dbg !3437
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %another_a, metadata !3438, metadata !DIExpression()), !dbg !3439
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !3440
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 15, !dbg !3440
  %1 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !3440
  store %struct.ira_allocno_copy* %1, %struct.ira_allocno_copy** %cp, align 8, !dbg !3442
  br label %for.cond, !dbg !3443

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3444
  %cmp = icmp ne %struct.ira_allocno_copy* %2, null, !dbg !3446
  br i1 %cmp, label %for.body, label %for.end, !dbg !3447

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3448
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %3, i32 0, i32 1, !dbg !3451
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3451
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !3452
  %cmp1 = icmp eq %struct.ira_allocno* %4, %5, !dbg !3453
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3454

if.then:                                          ; preds = %for.body
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3455
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %6, i32 0, i32 7, !dbg !3457
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !3457
  store %struct.ira_allocno_copy* %7, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3458
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3459
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 2, !dbg !3460
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3460
  store %struct.ira_allocno* %9, %struct.ira_allocno** %another_a, align 8, !dbg !3461
  br label %if.end7, !dbg !3462

if.else:                                          ; preds = %for.body
  %10 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3463
  %second2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %10, i32 0, i32 2, !dbg !3465
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %second2, align 8, !dbg !3465
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !3466
  %cmp3 = icmp eq %struct.ira_allocno* %11, %12, !dbg !3467
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !3468

if.then4:                                         ; preds = %if.else
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3469
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %13, i32 0, i32 9, !dbg !3471
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !3471
  store %struct.ira_allocno_copy* %14, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3472
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3473
  %first5 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 1, !dbg !3474
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %first5, align 8, !dbg !3474
  store %struct.ira_allocno* %16, %struct.ira_allocno** %another_a, align 8, !dbg !3475
  br label %if.end, !dbg !3476

if.else6:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1062, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !3477
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then4
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %another_a, align 8, !dbg !3478
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !3480
  %cmp8 = icmp eq %struct.ira_allocno* %17, %18, !dbg !3481
  br i1 %cmp8, label %land.lhs.true, label %if.end15, !dbg !3482

land.lhs.true:                                    ; preds = %if.end7
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3483
  %insn9 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %19, i32 0, i32 5, !dbg !3484
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn9, align 8, !dbg !3484
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3485
  %cmp10 = icmp eq %struct.rtx_def* %20, %21, !dbg !3486
  br i1 %cmp10, label %land.lhs.true11, label %if.end15, !dbg !3487

land.lhs.true11:                                  ; preds = %land.lhs.true
  %22 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3488
  %loop_tree_node12 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %22, i32 0, i32 10, !dbg !3489
  %23 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node12, align 8, !dbg !3489
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !3490
  %cmp13 = icmp eq %struct.ira_loop_tree_node* %23, %24, !dbg !3491
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !3492

if.then14:                                        ; preds = %land.lhs.true11
  %25 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3493
  store %struct.ira_allocno_copy* %25, %struct.ira_allocno_copy** %retval, align 8, !dbg !3494
  br label %return, !dbg !3494

if.end15:                                         ; preds = %land.lhs.true11, %land.lhs.true, %if.end7
  br label %for.inc, !dbg !3495

for.inc:                                          ; preds = %if.end15
  %26 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3496
  store %struct.ira_allocno_copy* %26, %struct.ira_allocno_copy** %cp, align 8, !dbg !3497
  br label %for.cond, !dbg !3498, !llvm.loop !3499

for.end:                                          ; preds = %for.cond
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %retval, align 8, !dbg !3501
  br label %return, !dbg !3501

return:                                           ; preds = %for.end, %if.then14
  %27 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %retval, align 8, !dbg !3502
  ret %struct.ira_allocno_copy* %27, !dbg !3502
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_debug_copy(%struct.ira_allocno_copy* %cp) #0 !dbg !3503 {
entry:
  %cp.addr = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno_copy* %cp, %struct.ira_allocno_copy** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp.addr, metadata !3504, metadata !DIExpression()), !dbg !3505
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3506
  %1 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3507
  call void @print_copy(%struct._IO_FILE* %0, %struct.ira_allocno_copy* %1), !dbg !3508
  ret void, !dbg !3509
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_copy(%struct._IO_FILE* %f, %struct.ira_allocno_copy* %cp) #0 !dbg !3510 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %cp.addr = alloca %struct.ira_allocno_copy*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !3564, metadata !DIExpression()), !dbg !3565
  store %struct.ira_allocno_copy* %cp, %struct.ira_allocno_copy** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp.addr, metadata !3566, metadata !DIExpression()), !dbg !3567
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3568
  %1 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3569
  %num = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %1, i32 0, i32 0, !dbg !3570
  %2 = load i32, i32* %num, align 8, !dbg !3570
  %3 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3571
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %3, i32 0, i32 1, !dbg !3571
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3571
  %num1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 0, !dbg !3571
  %5 = load i32, i32* %num1, align 8, !dbg !3571
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3572
  %first2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %6, i32 0, i32 1, !dbg !3572
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %first2, align 8, !dbg !3572
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 1, !dbg !3572
  %8 = load i32, i32* %regno, align 4, !dbg !3572
  %9 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3573
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %9, i32 0, i32 2, !dbg !3573
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3573
  %num3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 0, !dbg !3573
  %11 = load i32, i32* %num3, align 8, !dbg !3573
  %12 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3574
  %second4 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %12, i32 0, i32 2, !dbg !3574
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %second4, align 8, !dbg !3574
  %regno5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 1, !dbg !3574
  %14 = load i32, i32* %regno5, align 4, !dbg !3574
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3575
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 3, !dbg !3576
  %16 = load i32, i32* %freq, align 8, !dbg !3576
  %17 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3577
  %insn = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %17, i32 0, i32 5, !dbg !3578
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3578
  %cmp = icmp ne %struct.rtx_def* %18, null, !dbg !3579
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3577

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !3577

cond.false:                                       ; preds = %entry
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !3580
  %constraint_p = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %19, i32 0, i32 4, !dbg !3581
  %20 = load i8, i8* %constraint_p, align 4, !dbg !3581
  %conv = zext i8 %20 to i32, !dbg !3580
  %tobool = icmp ne i32 %conv, 0, !dbg !3580
  %21 = zext i1 %tobool to i64, !dbg !3580
  %cond = select i1 %tobool, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), !dbg !3580
  br label %cond.end, !dbg !3577

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0), %cond.true ], [ %cond, %cond.false ], !dbg !3577
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i64 0, i64 0), i32 %2, i32 %5, i32 %8, i32 %11, i32 %14, i32 %16, i8* %cond6), !dbg !3582
  ret void, !dbg !3583
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_debug_copies() #0 !dbg !3584 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3587
  call void @print_copies(%struct._IO_FILE* %0), !dbg !3588
  ret void, !dbg !3589
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_copies(%struct._IO_FILE* %f) #0 !dbg !3590 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %ci = alloca %struct.ira_copy_iterator, align 4
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !3593, metadata !DIExpression()), !dbg !3594
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3595, metadata !DIExpression()), !dbg !3596
  call void @llvm.dbg.declare(metadata %struct.ira_copy_iterator* %ci, metadata !3597, metadata !DIExpression()), !dbg !3602
  call void @ira_copy_iter_init(%struct.ira_copy_iterator* %ci), !dbg !3603
  br label %for.cond, !dbg !3603

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @ira_copy_iter_cond(%struct.ira_copy_iterator* %ci, %struct.ira_allocno_copy** %cp), !dbg !3605
  %tobool = icmp ne i8 %call, 0, !dbg !3603
  br i1 %tobool, label %for.body, label %for.end, !dbg !3603

for.body:                                         ; preds = %for.cond
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3607
  %1 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3608
  call void @print_copy(%struct._IO_FILE* %0, %struct.ira_allocno_copy* %1), !dbg !3609
  br label %for.cond, !dbg !3605, !llvm.loop !3610

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3612
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_debug_allocno_copies(%struct.ira_allocno* %a) #0 !dbg !3613 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !3614, metadata !DIExpression()), !dbg !3615
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3616
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3617
  call void @print_allocno_copies(%struct._IO_FILE* %0, %struct.ira_allocno* %1), !dbg !3618
  ret void, !dbg !3619
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_allocno_copies(%struct._IO_FILE* %f, %struct.ira_allocno* %a) #0 !dbg !3620 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %a.addr = alloca %struct.ira_allocno*, align 8
  %another_a = alloca %struct.ira_allocno*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !3623, metadata !DIExpression()), !dbg !3624
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !3625, metadata !DIExpression()), !dbg !3626
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %another_a, metadata !3627, metadata !DIExpression()), !dbg !3628
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3629, metadata !DIExpression()), !dbg !3630
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !3631, metadata !DIExpression()), !dbg !3632
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3633
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3634
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 0, !dbg !3634
  %2 = load i32, i32* %num, align 8, !dbg !3634
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3635
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 1, !dbg !3635
  %4 = load i32, i32* %regno, align 4, !dbg !3635
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0), i32 %2, i32 %4), !dbg !3636
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3637
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 15, !dbg !3637
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !3637
  store %struct.ira_allocno_copy* %6, %struct.ira_allocno_copy** %cp, align 8, !dbg !3639
  br label %for.cond, !dbg !3640

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3641
  %cmp = icmp ne %struct.ira_allocno_copy* %7, null, !dbg !3643
  br i1 %cmp, label %for.body, label %for.end, !dbg !3644

for.body:                                         ; preds = %for.cond
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3645
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 1, !dbg !3648
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3648
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3649
  %cmp1 = icmp eq %struct.ira_allocno* %9, %10, !dbg !3650
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3651

if.then:                                          ; preds = %for.body
  %11 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3652
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %11, i32 0, i32 7, !dbg !3654
  %12 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !3654
  store %struct.ira_allocno_copy* %12, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3655
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3656
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %13, i32 0, i32 2, !dbg !3657
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3657
  store %struct.ira_allocno* %14, %struct.ira_allocno** %another_a, align 8, !dbg !3658
  br label %if.end7, !dbg !3659

if.else:                                          ; preds = %for.body
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3660
  %second2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 2, !dbg !3662
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %second2, align 8, !dbg !3662
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !3663
  %cmp3 = icmp eq %struct.ira_allocno* %16, %17, !dbg !3664
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !3665

if.then4:                                         ; preds = %if.else
  %18 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3666
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %18, i32 0, i32 9, !dbg !3668
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !3668
  store %struct.ira_allocno_copy* %19, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3669
  %20 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3670
  %first5 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %20, i32 0, i32 1, !dbg !3671
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %first5, align 8, !dbg !3671
  store %struct.ira_allocno* %21, %struct.ira_allocno** %another_a, align 8, !dbg !3672
  br label %if.end, !dbg !3673

if.else6:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 1268, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !3674
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then4
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3675
  %23 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3676
  %num8 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %23, i32 0, i32 0, !dbg !3677
  %24 = load i32, i32* %num8, align 8, !dbg !3677
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %another_a, align 8, !dbg !3678
  %num9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 0, !dbg !3678
  %26 = load i32, i32* %num9, align 8, !dbg !3678
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %another_a, align 8, !dbg !3679
  %regno10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 1, !dbg !3679
  %28 = load i32, i32* %regno10, align 4, !dbg !3679
  %29 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3680
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %29, i32 0, i32 3, !dbg !3681
  %30 = load i32, i32* %freq, align 8, !dbg !3681
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i64 0, i64 0), i32 %24, i32 %26, i32 %28, i32 %30), !dbg !3682
  br label %for.inc, !dbg !3683

for.inc:                                          ; preds = %if.end7
  %31 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3684
  store %struct.ira_allocno_copy* %31, %struct.ira_allocno_copy** %cp, align 8, !dbg !3685
  br label %for.cond, !dbg !3686, !llvm.loop !3687

for.end:                                          ; preds = %for.cond
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !3689
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !3690
  ret void, !dbg !3691
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32* @ira_allocate_cost_vector(i32 %cover_class) #0 !dbg !3692 {
entry:
  %cover_class.addr = alloca i32, align 4
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !3695, metadata !DIExpression()), !dbg !3696
  %0 = load i32, i32* %cover_class.addr, align 4, !dbg !3697
  %idxprom = zext i32 %0 to i64, !dbg !3698
  %arrayidx = getelementptr inbounds [27 x %struct.alloc_pool_def*], [27 x %struct.alloc_pool_def*]* @cost_vector_pool, i64 0, i64 %idxprom, !dbg !3698
  %1 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %arrayidx, align 8, !dbg !3698
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %1), !dbg !3699
  %2 = bitcast i8* %call to i32*, !dbg !3700
  ret i32* %2, !dbg !3701
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_traverse_loop_tree(i8 zeroext %bb_p, %struct.ira_loop_tree_node* %loop_node, void (%struct.ira_loop_tree_node*)* %preorder_func, void (%struct.ira_loop_tree_node*)* %postorder_func) #0 !dbg !3702 {
entry:
  %bb_p.addr = alloca i8, align 1
  %loop_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %preorder_func.addr = alloca void (%struct.ira_loop_tree_node*)*, align 8
  %postorder_func.addr = alloca void (%struct.ira_loop_tree_node*)*, align 8
  %subloop_node = alloca %struct.ira_loop_tree_node*, align 8
  store i8 %bb_p, i8* %bb_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %bb_p.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  store %struct.ira_loop_tree_node* %loop_node, %struct.ira_loop_tree_node** %loop_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node.addr, metadata !3710, metadata !DIExpression()), !dbg !3711
  store void (%struct.ira_loop_tree_node*)* %preorder_func, void (%struct.ira_loop_tree_node*)** %preorder_func.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.ira_loop_tree_node*)** %preorder_func.addr, metadata !3712, metadata !DIExpression()), !dbg !3713
  store void (%struct.ira_loop_tree_node*)* %postorder_func, void (%struct.ira_loop_tree_node*)** %postorder_func.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.ira_loop_tree_node*)** %postorder_func.addr, metadata !3714, metadata !DIExpression()), !dbg !3715
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %subloop_node, metadata !3716, metadata !DIExpression()), !dbg !3717
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !3718
  store %struct.ira_loop_tree_node* %0, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !3719
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !3720
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %1, i32 0, i32 9, !dbg !3721
  %2 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !3721
  store %struct.ira_allocno** %2, %struct.ira_allocno*** @ira_curr_regno_allocno_map, align 8, !dbg !3722
  %3 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %preorder_func.addr, align 8, !dbg !3723
  %cmp = icmp ne void (%struct.ira_loop_tree_node*)* %3, null, !dbg !3725
  br i1 %cmp, label %if.then, label %if.end, !dbg !3726

if.then:                                          ; preds = %entry
  %4 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %preorder_func.addr, align 8, !dbg !3727
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !3728
  call void %4(%struct.ira_loop_tree_node* %5), !dbg !3729
  br label %if.end, !dbg !3729

if.end:                                           ; preds = %if.then, %entry
  %6 = load i8, i8* %bb_p.addr, align 1, !dbg !3730
  %tobool = icmp ne i8 %6, 0, !dbg !3730
  br i1 %tobool, label %if.then1, label %if.end12, !dbg !3732

if.then1:                                         ; preds = %if.end
  %7 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !3733
  %children = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %7, i32 0, i32 5, !dbg !3735
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children, align 8, !dbg !3735
  store %struct.ira_loop_tree_node* %8, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3736
  br label %for.cond, !dbg !3737

for.cond:                                         ; preds = %for.inc, %if.then1
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3738
  %cmp2 = icmp ne %struct.ira_loop_tree_node* %9, null, !dbg !3740
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3741

for.body:                                         ; preds = %for.cond
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3742
  %bb = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 0, !dbg !3744
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3744
  %cmp3 = icmp ne %struct.basic_block_def* %11, null, !dbg !3745
  br i1 %cmp3, label %if.then4, label %if.end11, !dbg !3746

if.then4:                                         ; preds = %for.body
  %12 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %preorder_func.addr, align 8, !dbg !3747
  %cmp5 = icmp ne void (%struct.ira_loop_tree_node*)* %12, null, !dbg !3750
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !3751

if.then6:                                         ; preds = %if.then4
  %13 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %preorder_func.addr, align 8, !dbg !3752
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3753
  call void %13(%struct.ira_loop_tree_node* %14), !dbg !3754
  br label %if.end7, !dbg !3754

if.end7:                                          ; preds = %if.then6, %if.then4
  %15 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %postorder_func.addr, align 8, !dbg !3755
  %cmp8 = icmp ne void (%struct.ira_loop_tree_node*)* %15, null, !dbg !3757
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3758

if.then9:                                         ; preds = %if.end7
  %16 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %postorder_func.addr, align 8, !dbg !3759
  %17 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3760
  call void %16(%struct.ira_loop_tree_node* %17), !dbg !3761
  br label %if.end10, !dbg !3761

if.end10:                                         ; preds = %if.then9, %if.end7
  br label %if.end11, !dbg !3762

if.end11:                                         ; preds = %if.end10, %for.body
  br label %for.inc, !dbg !3763

for.inc:                                          ; preds = %if.end11
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3764
  %next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i32 0, i32 3, !dbg !3765
  %19 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %next, align 8, !dbg !3765
  store %struct.ira_loop_tree_node* %19, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3766
  br label %for.cond, !dbg !3767, !llvm.loop !3768

for.end:                                          ; preds = %for.cond
  br label %if.end12, !dbg !3769

if.end12:                                         ; preds = %for.end, %if.end
  %20 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !3770
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %20, i32 0, i32 4, !dbg !3772
  %21 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !3772
  store %struct.ira_loop_tree_node* %21, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3773
  br label %for.cond13, !dbg !3774

for.cond13:                                       ; preds = %for.inc16, %if.end12
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3775
  %cmp14 = icmp ne %struct.ira_loop_tree_node* %22, null, !dbg !3777
  br i1 %cmp14, label %for.body15, label %for.end17, !dbg !3778

for.body15:                                       ; preds = %for.cond13
  %23 = load i8, i8* %bb_p.addr, align 1, !dbg !3779
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3781
  %25 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %preorder_func.addr, align 8, !dbg !3782
  %26 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %postorder_func.addr, align 8, !dbg !3783
  call void @ira_traverse_loop_tree(i8 zeroext %23, %struct.ira_loop_tree_node* %24, void (%struct.ira_loop_tree_node*)* %25, void (%struct.ira_loop_tree_node*)* %26), !dbg !3784
  br label %for.inc16, !dbg !3785

for.inc16:                                        ; preds = %for.body15
  %27 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3786
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %27, i32 0, i32 2, !dbg !3787
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !3787
  store %struct.ira_loop_tree_node* %28, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !3788
  br label %for.cond13, !dbg !3789, !llvm.loop !3790

for.end17:                                        ; preds = %for.cond13
  %29 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !3792
  store %struct.ira_loop_tree_node* %29, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !3793
  %30 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !3794
  %regno_allocno_map18 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %30, i32 0, i32 9, !dbg !3795
  %31 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map18, align 8, !dbg !3795
  store %struct.ira_allocno** %31, %struct.ira_allocno*** @ira_curr_regno_allocno_map, align 8, !dbg !3796
  %32 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %postorder_func.addr, align 8, !dbg !3797
  %cmp19 = icmp ne void (%struct.ira_loop_tree_node*)* %32, null, !dbg !3799
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !3800

if.then20:                                        ; preds = %for.end17
  %33 = load void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)** %postorder_func.addr, align 8, !dbg !3801
  %34 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !3802
  call void %33(%struct.ira_loop_tree_node* %34), !dbg !3803
  br label %if.end21, !dbg !3803

if.end21:                                         ; preds = %if.then20, %for.end17
  ret void, !dbg !3804
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_flattening(i32 %max_regno_before_emit, i32 %ira_max_point_before_emit) #0 !dbg !3805 {
entry:
  %max_regno_before_emit.addr = alloca i32, align 4
  %ira_max_point_before_emit.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %num = alloca i32, align 4
  %keep_p = alloca i8, align 1
  %hard_regs_num = alloca i32, align 4
  %new_pseudos_p = alloca i8, align 1
  %merged_p = alloca i8, align 1
  %mem_dest_p = alloca i8, align 1
  %n = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %parent_a = alloca %struct.ira_allocno*, align 8
  %first = alloca %struct.ira_allocno*, align 8
  %second = alloca %struct.ira_allocno*, align 8
  %node_first = alloca %struct.ira_allocno*, align 8
  %node_second = alloca %struct.ira_allocno*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %node = alloca %struct.ira_loop_tree_node*, align 8
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %ci = alloca %struct.ira_copy_iterator, align 4
  %allocnos_live = alloca %struct.sparseset_def*, align 8
  %live_a = alloca %struct.ira_allocno*, align 8
  store i32 %max_regno_before_emit, i32* %max_regno_before_emit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_regno_before_emit.addr, metadata !3808, metadata !DIExpression()), !dbg !3809
  store i32 %ira_max_point_before_emit, i32* %ira_max_point_before_emit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ira_max_point_before_emit.addr, metadata !3810, metadata !DIExpression()), !dbg !3811
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3812, metadata !DIExpression()), !dbg !3813
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3814, metadata !DIExpression()), !dbg !3815
  call void @llvm.dbg.declare(metadata i32* %num, metadata !3816, metadata !DIExpression()), !dbg !3817
  call void @llvm.dbg.declare(metadata i8* %keep_p, metadata !3818, metadata !DIExpression()), !dbg !3819
  call void @llvm.dbg.declare(metadata i32* %hard_regs_num, metadata !3820, metadata !DIExpression()), !dbg !3821
  call void @llvm.dbg.declare(metadata i8* %new_pseudos_p, metadata !3822, metadata !DIExpression()), !dbg !3823
  call void @llvm.dbg.declare(metadata i8* %merged_p, metadata !3824, metadata !DIExpression()), !dbg !3825
  call void @llvm.dbg.declare(metadata i8* %mem_dest_p, metadata !3826, metadata !DIExpression()), !dbg !3827
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3828, metadata !DIExpression()), !dbg !3829
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !3830, metadata !DIExpression()), !dbg !3831
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !3832, metadata !DIExpression()), !dbg !3833
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_a, metadata !3834, metadata !DIExpression()), !dbg !3835
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first, metadata !3836, metadata !DIExpression()), !dbg !3837
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %second, metadata !3838, metadata !DIExpression()), !dbg !3839
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %node_first, metadata !3840, metadata !DIExpression()), !dbg !3841
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %node_second, metadata !3842, metadata !DIExpression()), !dbg !3843
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3844, metadata !DIExpression()), !dbg !3845
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !3846, metadata !DIExpression()), !dbg !3847
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %node, metadata !3848, metadata !DIExpression()), !dbg !3849
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !3850, metadata !DIExpression()), !dbg !3851
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !3852, metadata !DIExpression()), !dbg !3857
  call void @llvm.dbg.declare(metadata %struct.ira_copy_iterator* %ci, metadata !3858, metadata !DIExpression()), !dbg !3859
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %allocnos_live, metadata !3860, metadata !DIExpression()), !dbg !3875
  %call = call i32 @max_reg_num(), !dbg !3876
  %conv = sext i32 %call to i64, !dbg !3876
  %mul = mul i64 %conv, 8, !dbg !3877
  %call1 = call i8* @ira_allocate(i64 %mul), !dbg !3878
  %0 = bitcast i8* %call1 to %struct.ira_allocno**, !dbg !3879
  store %struct.ira_allocno** %0, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !3880
  %1 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !3881
  %2 = bitcast %struct.ira_allocno** %1 to i8*, !dbg !3882
  %call2 = call i32 @max_reg_num(), !dbg !3883
  %conv3 = sext i32 %call2 to i64, !dbg !3883
  %mul4 = mul i64 %conv3, 8, !dbg !3884
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 %mul4, i1 false), !dbg !3882
  store i8 0, i8* %merged_p, align 1, !dbg !3885
  store i8 0, i8* %new_pseudos_p, align 1, !dbg !3886
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !3887
  br label %for.cond, !dbg !3887

for.cond:                                         ; preds = %if.end, %if.then, %entry
  %call5 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !3889
  %tobool = icmp ne i8 %call5, 0, !dbg !3887
  br i1 %tobool, label %for.body, label %for.end, !dbg !3887

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3891
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 17, !dbg !3891
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !3891
  %cmp = icmp ne %struct.ira_allocno* %4, null, !dbg !3894
  br i1 %cmp, label %if.then, label %if.end, !dbg !3895

if.then:                                          ; preds = %for.body
  br label %for.cond, !dbg !3896, !llvm.loop !3897

if.end:                                           ; preds = %for.body
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3899
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 26, !dbg !3899
  %6 = load i64, i64* %conflict_hard_regs, align 8, !dbg !3899
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3899
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 27, !dbg !3899
  store i64 %6, i64* %total_conflict_hard_regs, align 8, !dbg !3899
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3900
  %no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 31, !dbg !3900
  %bf.load = load i16, i16* %no_stack_reg_p, align 4, !dbg !3900
  %bf.lshr = lshr i16 %bf.load, 4, !dbg !3900
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3900
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3900
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3901
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 31, !dbg !3901
  %10 = trunc i32 %bf.cast to i16, !dbg !3902
  %bf.load7 = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !3902
  %bf.value = and i16 %10, 1, !dbg !3902
  %bf.shl = shl i16 %bf.value, 5, !dbg !3902
  %bf.clear8 = and i16 %bf.load7, -33, !dbg !3902
  %bf.set = or i16 %bf.clear8, %bf.shl, !dbg !3902
  store i16 %bf.set, i16* %total_no_stack_reg_p, align 4, !dbg !3902
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !3902
  br label %for.cond, !dbg !3889, !llvm.loop !3897

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %max_regno_before_emit.addr, align 4, !dbg !3903
  %sub = sub nsw i32 %11, 1, !dbg !3905
  store i32 %sub, i32* %i, align 4, !dbg !3906
  br label %for.cond9, !dbg !3907

for.cond9:                                        ; preds = %for.inc192, %for.end
  %12 = load i32, i32* %i, align 4, !dbg !3908
  %cmp10 = icmp sge i32 %12, 53, !dbg !3910
  br i1 %cmp10, label %for.body12, label %for.end193, !dbg !3911

for.body12:                                       ; preds = %for.cond9
  store i8 0, i8* %mem_dest_p, align 1, !dbg !3912
  %13 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !3914
  %14 = load i32, i32* %i, align 4, !dbg !3916
  %idxprom = sext i32 %14 to i64, !dbg !3914
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %13, i64 %idxprom, !dbg !3914
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !3914
  store %struct.ira_allocno* %15, %struct.ira_allocno** %a, align 8, !dbg !3917
  br label %for.cond13, !dbg !3918

for.cond13:                                       ; preds = %for.inc182, %for.body12
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3919
  %cmp14 = icmp ne %struct.ira_allocno* %16, null, !dbg !3921
  br i1 %cmp14, label %for.body16, label %for.end183, !dbg !3922

for.body16:                                       ; preds = %for.cond13
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3923
  %somewhere_renamed_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 31, !dbg !3923
  %bf.load17 = load i16, i16* %somewhere_renamed_p, align 4, !dbg !3923
  %bf.lshr18 = lshr i16 %bf.load17, 1, !dbg !3923
  %bf.clear19 = and i16 %bf.lshr18, 1, !dbg !3923
  %bf.cast20 = zext i16 %bf.clear19 to i32, !dbg !3923
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !3923
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !3926

if.then22:                                        ; preds = %for.body16
  store i8 1, i8* %new_pseudos_p, align 1, !dbg !3927
  br label %if.end23, !dbg !3928

if.end23:                                         ; preds = %if.then22, %for.body16
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3929
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 16, !dbg !3929
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !3929
  %cmp24 = icmp ne %struct.ira_allocno* %19, null, !dbg !3931
  br i1 %cmp24, label %if.then34, label %lor.lhs.false, !dbg !3932

lor.lhs.false:                                    ; preds = %if.end23
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3933
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 6, !dbg !3933
  %21 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !3933
  %parent26 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %21, i32 0, i32 6, !dbg !3934
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent26, align 8, !dbg !3934
  store %struct.ira_loop_tree_node* %22, %struct.ira_loop_tree_node** %parent, align 8, !dbg !3935
  %cmp27 = icmp eq %struct.ira_loop_tree_node* %22, null, !dbg !3936
  br i1 %cmp27, label %if.then34, label %lor.lhs.false29, !dbg !3937

lor.lhs.false29:                                  ; preds = %lor.lhs.false
  %23 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !3938
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %23, i32 0, i32 9, !dbg !3939
  %24 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !3939
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3940
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 1, !dbg !3940
  %26 = load i32, i32* %regno, align 4, !dbg !3940
  %idxprom30 = sext i32 %26 to i64, !dbg !3938
  %arrayidx31 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %24, i64 %idxprom30, !dbg !3938
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx31, align 8, !dbg !3938
  store %struct.ira_allocno* %27, %struct.ira_allocno** %parent_a, align 8, !dbg !3941
  %cmp32 = icmp eq %struct.ira_allocno* %27, null, !dbg !3942
  br i1 %cmp32, label %if.then34, label %if.end38, !dbg !3943

if.then34:                                        ; preds = %lor.lhs.false29, %lor.lhs.false, %if.end23
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3944
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 15, !dbg !3944
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !3946
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3947
  %30 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !3948
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3949
  %reg = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 4, !dbg !3949
  %32 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3949
  %call35 = call i32 @rhs_regno(%struct.rtx_def* %32), !dbg !3949
  %idxprom36 = zext i32 %call35 to i64, !dbg !3948
  %arrayidx37 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %30, i64 %idxprom36, !dbg !3948
  store %struct.ira_allocno* %29, %struct.ira_allocno** %arrayidx37, align 8, !dbg !3950
  br label %for.inc182, !dbg !3951

if.end38:                                         ; preds = %lor.lhs.false29
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3952
  %mem_optimized_dest = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %33, i32 0, i32 32, !dbg !3952
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %mem_optimized_dest, align 8, !dbg !3952
  %cmp39 = icmp ne %struct.ira_allocno* %34, null, !dbg !3954
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !3955

if.then41:                                        ; preds = %if.end38
  store i8 1, i8* %mem_dest_p, align 1, !dbg !3956
  br label %if.end42, !dbg !3957

if.end42:                                         ; preds = %if.then41, %if.end38
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3958
  %reg43 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 4, !dbg !3958
  %36 = load %struct.rtx_def*, %struct.rtx_def** %reg43, align 8, !dbg !3958
  %call44 = call i32 @rhs_regno(%struct.rtx_def* %36), !dbg !3958
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3960
  %reg45 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 4, !dbg !3960
  %38 = load %struct.rtx_def*, %struct.rtx_def** %reg45, align 8, !dbg !3960
  %call46 = call i32 @rhs_regno(%struct.rtx_def* %38), !dbg !3960
  %cmp47 = icmp eq i32 %call44, %call46, !dbg !3961
  br i1 %cmp47, label %if.then49, label %if.end98, !dbg !3962

if.then49:                                        ; preds = %if.end42
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3963
  %total_conflict_hard_regs50 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 27, !dbg !3963
  %40 = load i64, i64* %total_conflict_hard_regs50, align 8, !dbg !3963
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3963
  %total_conflict_hard_regs51 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 27, !dbg !3963
  %42 = load i64, i64* %total_conflict_hard_regs51, align 8, !dbg !3963
  %or = or i64 %42, %40, !dbg !3963
  store i64 %or, i64* %total_conflict_hard_regs51, align 8, !dbg !3963
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3965
  %total_no_stack_reg_p52 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 31, !dbg !3965
  %bf.load53 = load i16, i16* %total_no_stack_reg_p52, align 4, !dbg !3965
  %bf.lshr54 = lshr i16 %bf.load53, 5, !dbg !3965
  %bf.clear55 = and i16 %bf.lshr54, 1, !dbg !3965
  %bf.cast56 = zext i16 %bf.clear55 to i32, !dbg !3965
  %tobool57 = icmp ne i32 %bf.cast56, 0, !dbg !3965
  br i1 %tobool57, label %if.then58, label %if.end63, !dbg !3967

if.then58:                                        ; preds = %if.then49
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3968
  %total_no_stack_reg_p59 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 31, !dbg !3968
  %bf.load60 = load i16, i16* %total_no_stack_reg_p59, align 4, !dbg !3969
  %bf.clear61 = and i16 %bf.load60, -33, !dbg !3969
  %bf.set62 = or i16 %bf.clear61, 32, !dbg !3969
  store i16 %bf.set62, i16* %total_no_stack_reg_p59, align 4, !dbg !3969
  br label %if.end63, !dbg !3968

if.end63:                                         ; preds = %if.then58, %if.then49
  %45 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3970
  %cmp64 = icmp sgt i32 %45, 4, !dbg !3972
  br i1 %cmp64, label %land.lhs.true, label %if.end76, !dbg !3973

land.lhs.true:                                    ; preds = %if.end63
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3974
  %cmp66 = icmp ne %struct._IO_FILE* %46, null, !dbg !3975
  br i1 %cmp66, label %if.then68, label %if.end76, !dbg !3976

if.then68:                                        ; preds = %land.lhs.true
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3977
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3979
  %num69 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 0, !dbg !3979
  %49 = load i32, i32* %num69, align 8, !dbg !3979
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3980
  %reg70 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 4, !dbg !3980
  %51 = load %struct.rtx_def*, %struct.rtx_def** %reg70, align 8, !dbg !3980
  %call71 = call i32 @rhs_regno(%struct.rtx_def* %51), !dbg !3980
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3981
  %num72 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 0, !dbg !3981
  %53 = load i32, i32* %num72, align 8, !dbg !3981
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3982
  %reg73 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %54, i32 0, i32 4, !dbg !3982
  %55 = load %struct.rtx_def*, %struct.rtx_def** %reg73, align 8, !dbg !3982
  %call74 = call i32 @rhs_regno(%struct.rtx_def* %55), !dbg !3982
  %call75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5, i64 0, i64 0), i32 %49, i32 %call71, i32 %53, i32 %call74), !dbg !3983
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3984
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3985
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 20, !dbg !3985
  %58 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !3985
  call void @ira_print_live_range_list(%struct._IO_FILE* %56, %struct.ira_allocno_live_range* %58), !dbg !3986
  br label %if.end76, !dbg !3987

if.end76:                                         ; preds = %if.then68, %land.lhs.true, %if.end63
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3988
  %live_ranges77 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 20, !dbg !3988
  %60 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges77, align 8, !dbg !3988
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3989
  call void @change_allocno_in_range_list(%struct.ira_allocno_live_range* %60, %struct.ira_allocno* %61), !dbg !3990
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3991
  %live_ranges78 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 20, !dbg !3991
  %63 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges78, align 8, !dbg !3991
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3992
  %live_ranges79 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 20, !dbg !3992
  %65 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges79, align 8, !dbg !3992
  %call80 = call %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range* %63, %struct.ira_allocno_live_range* %65), !dbg !3993
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3994
  %live_ranges81 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 20, !dbg !3994
  store %struct.ira_allocno_live_range* %call80, %struct.ira_allocno_live_range** %live_ranges81, align 8, !dbg !3995
  store i8 1, i8* %merged_p, align 1, !dbg !3996
  %67 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3997
  %live_ranges82 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %67, i32 0, i32 20, !dbg !3997
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %live_ranges82, align 8, !dbg !3998
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !3999
  %mem_optimized_dest_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %68, i32 0, i32 31, !dbg !3999
  %bf.load83 = load i16, i16* %mem_optimized_dest_p, align 4, !dbg !3999
  %bf.clear84 = and i16 %bf.load83, 1, !dbg !3999
  %bf.cast85 = zext i16 %bf.clear84 to i32, !dbg !3999
  %tobool86 = icmp ne i32 %bf.cast85, 0, !dbg !3999
  br i1 %tobool86, label %lor.end, label %lor.rhs, !dbg !4000

lor.rhs:                                          ; preds = %if.end76
  %69 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4001
  %mem_optimized_dest_p87 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %69, i32 0, i32 31, !dbg !4001
  %bf.load88 = load i16, i16* %mem_optimized_dest_p87, align 4, !dbg !4001
  %bf.clear89 = and i16 %bf.load88, 1, !dbg !4001
  %bf.cast90 = zext i16 %bf.clear89 to i32, !dbg !4001
  %tobool91 = icmp ne i32 %bf.cast90, 0, !dbg !4000
  br label %lor.end, !dbg !4000

lor.end:                                          ; preds = %lor.rhs, %if.end76
  %70 = phi i1 [ true, %if.end76 ], [ %tobool91, %lor.rhs ]
  %lor.ext = zext i1 %70 to i32, !dbg !4000
  %71 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4002
  %mem_optimized_dest_p92 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %71, i32 0, i32 31, !dbg !4002
  %72 = trunc i32 %lor.ext to i16, !dbg !4003
  %bf.load93 = load i16, i16* %mem_optimized_dest_p92, align 4, !dbg !4003
  %bf.value94 = and i16 %72, 1, !dbg !4003
  %bf.clear95 = and i16 %bf.load93, -2, !dbg !4003
  %bf.set96 = or i16 %bf.clear95, %bf.value94, !dbg !4003
  store i16 %bf.set96, i16* %mem_optimized_dest_p92, align 4, !dbg !4003
  %bf.result.cast97 = zext i16 %bf.value94 to i32, !dbg !4003
  br label %for.inc182, !dbg !4004

if.end98:                                         ; preds = %if.end42
  store i8 1, i8* %new_pseudos_p, align 1, !dbg !4005
  br label %for.cond99, !dbg !4006

for.cond99:                                       ; preds = %if.end175, %if.end98
  %73 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4007
  %nrefs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %73, i32 0, i32 7, !dbg !4007
  %74 = load i32, i32* %nrefs, align 8, !dbg !4007
  %75 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4011
  %nrefs100 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %75, i32 0, i32 7, !dbg !4011
  %76 = load i32, i32* %nrefs100, align 8, !dbg !4012
  %sub101 = sub nsw i32 %76, %74, !dbg !4012
  store i32 %sub101, i32* %nrefs100, align 8, !dbg !4012
  %77 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4013
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %77, i32 0, i32 8, !dbg !4013
  %78 = load i32, i32* %freq, align 4, !dbg !4013
  %79 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4014
  %freq102 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %79, i32 0, i32 8, !dbg !4014
  %80 = load i32, i32* %freq102, align 4, !dbg !4015
  %sub103 = sub nsw i32 %80, %78, !dbg !4015
  store i32 %sub103, i32* %freq102, align 4, !dbg !4015
  %81 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4016
  %call_freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %81, i32 0, i32 29, !dbg !4016
  %82 = load i32, i32* %call_freq, align 4, !dbg !4016
  %83 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4017
  %call_freq104 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %83, i32 0, i32 29, !dbg !4017
  %84 = load i32, i32* %call_freq104, align 4, !dbg !4018
  %sub105 = sub nsw i32 %84, %82, !dbg !4018
  store i32 %sub105, i32* %call_freq104, align 4, !dbg !4018
  %85 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4019
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %85, i32 0, i32 30, !dbg !4019
  %86 = load i32, i32* %calls_crossed_num, align 8, !dbg !4019
  %87 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4020
  %calls_crossed_num106 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %87, i32 0, i32 30, !dbg !4020
  %88 = load i32, i32* %calls_crossed_num106, align 8, !dbg !4021
  %sub107 = sub nsw i32 %88, %86, !dbg !4021
  store i32 %sub107, i32* %calls_crossed_num106, align 8, !dbg !4021
  %89 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4022
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %89, i32 0, i32 14, !dbg !4022
  %90 = load i32, i32* %excess_pressure_points_num, align 4, !dbg !4022
  %91 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4023
  %excess_pressure_points_num108 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %91, i32 0, i32 14, !dbg !4023
  %92 = load i32, i32* %excess_pressure_points_num108, align 4, !dbg !4024
  %sub109 = sub nsw i32 %92, %90, !dbg !4024
  store i32 %sub109, i32* %excess_pressure_points_num108, align 4, !dbg !4024
  %93 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4025
  %cover_class110 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %93, i32 0, i32 9, !dbg !4025
  %94 = load i32, i32* %cover_class110, align 8, !dbg !4025
  store i32 %94, i32* %cover_class, align 4, !dbg !4026
  %95 = load i32, i32* %cover_class, align 4, !dbg !4027
  %idxprom111 = zext i32 %95 to i64, !dbg !4028
  %arrayidx112 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom111, !dbg !4028
  %96 = load i32, i32* %arrayidx112, align 4, !dbg !4028
  store i32 %96, i32* %hard_regs_num, align 4, !dbg !4029
  %97 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4030
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %97, i32 0, i32 33, !dbg !4030
  %98 = load i32*, i32** %hard_reg_costs, align 8, !dbg !4030
  %cmp113 = icmp ne i32* %98, null, !dbg !4032
  br i1 %cmp113, label %land.lhs.true115, label %if.end132, !dbg !4033

land.lhs.true115:                                 ; preds = %for.cond99
  %99 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4034
  %hard_reg_costs116 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %99, i32 0, i32 33, !dbg !4034
  %100 = load i32*, i32** %hard_reg_costs116, align 8, !dbg !4034
  %cmp117 = icmp ne i32* %100, null, !dbg !4035
  br i1 %cmp117, label %if.then119, label %if.end132, !dbg !4036

if.then119:                                       ; preds = %land.lhs.true115
  store i32 0, i32* %j, align 4, !dbg !4037
  br label %for.cond120, !dbg !4039

for.cond120:                                      ; preds = %for.inc, %if.then119
  %101 = load i32, i32* %j, align 4, !dbg !4040
  %102 = load i32, i32* %hard_regs_num, align 4, !dbg !4042
  %cmp121 = icmp slt i32 %101, %102, !dbg !4043
  br i1 %cmp121, label %for.body123, label %for.end131, !dbg !4044

for.body123:                                      ; preds = %for.cond120
  %103 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4045
  %hard_reg_costs124 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %103, i32 0, i32 33, !dbg !4045
  %104 = load i32*, i32** %hard_reg_costs124, align 8, !dbg !4045
  %105 = load i32, i32* %j, align 4, !dbg !4046
  %idxprom125 = sext i32 %105 to i64, !dbg !4045
  %arrayidx126 = getelementptr inbounds i32, i32* %104, i64 %idxprom125, !dbg !4045
  %106 = load i32, i32* %arrayidx126, align 4, !dbg !4045
  %107 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4047
  %hard_reg_costs127 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %107, i32 0, i32 33, !dbg !4047
  %108 = load i32*, i32** %hard_reg_costs127, align 8, !dbg !4047
  %109 = load i32, i32* %j, align 4, !dbg !4048
  %idxprom128 = sext i32 %109 to i64, !dbg !4047
  %arrayidx129 = getelementptr inbounds i32, i32* %108, i64 %idxprom128, !dbg !4047
  %110 = load i32, i32* %arrayidx129, align 4, !dbg !4049
  %sub130 = sub nsw i32 %110, %106, !dbg !4049
  store i32 %sub130, i32* %arrayidx129, align 4, !dbg !4049
  br label %for.inc, !dbg !4047

for.inc:                                          ; preds = %for.body123
  %111 = load i32, i32* %j, align 4, !dbg !4050
  %inc = add nsw i32 %111, 1, !dbg !4050
  store i32 %inc, i32* %j, align 4, !dbg !4050
  br label %for.cond120, !dbg !4051, !llvm.loop !4052

for.end131:                                       ; preds = %for.cond120
  br label %if.end132, !dbg !4053

if.end132:                                        ; preds = %for.end131, %land.lhs.true115, %for.cond99
  %112 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4054
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %112, i32 0, i32 35, !dbg !4054
  %113 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !4054
  %cmp133 = icmp ne i32* %113, null, !dbg !4056
  br i1 %cmp133, label %land.lhs.true135, label %if.end154, !dbg !4057

land.lhs.true135:                                 ; preds = %if.end132
  %114 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4058
  %conflict_hard_reg_costs136 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %114, i32 0, i32 35, !dbg !4058
  %115 = load i32*, i32** %conflict_hard_reg_costs136, align 8, !dbg !4058
  %cmp137 = icmp ne i32* %115, null, !dbg !4059
  br i1 %cmp137, label %if.then139, label %if.end154, !dbg !4060

if.then139:                                       ; preds = %land.lhs.true135
  store i32 0, i32* %j, align 4, !dbg !4061
  br label %for.cond140, !dbg !4063

for.cond140:                                      ; preds = %for.inc151, %if.then139
  %116 = load i32, i32* %j, align 4, !dbg !4064
  %117 = load i32, i32* %hard_regs_num, align 4, !dbg !4066
  %cmp141 = icmp slt i32 %116, %117, !dbg !4067
  br i1 %cmp141, label %for.body143, label %for.end153, !dbg !4068

for.body143:                                      ; preds = %for.cond140
  %118 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4069
  %conflict_hard_reg_costs144 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %118, i32 0, i32 35, !dbg !4069
  %119 = load i32*, i32** %conflict_hard_reg_costs144, align 8, !dbg !4069
  %120 = load i32, i32* %j, align 4, !dbg !4070
  %idxprom145 = sext i32 %120 to i64, !dbg !4069
  %arrayidx146 = getelementptr inbounds i32, i32* %119, i64 %idxprom145, !dbg !4069
  %121 = load i32, i32* %arrayidx146, align 4, !dbg !4069
  %122 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4071
  %conflict_hard_reg_costs147 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %122, i32 0, i32 35, !dbg !4071
  %123 = load i32*, i32** %conflict_hard_reg_costs147, align 8, !dbg !4071
  %124 = load i32, i32* %j, align 4, !dbg !4072
  %idxprom148 = sext i32 %124 to i64, !dbg !4071
  %arrayidx149 = getelementptr inbounds i32, i32* %123, i64 %idxprom148, !dbg !4071
  %125 = load i32, i32* %arrayidx149, align 4, !dbg !4073
  %sub150 = sub nsw i32 %125, %121, !dbg !4073
  store i32 %sub150, i32* %arrayidx149, align 4, !dbg !4073
  br label %for.inc151, !dbg !4071

for.inc151:                                       ; preds = %for.body143
  %126 = load i32, i32* %j, align 4, !dbg !4074
  %inc152 = add nsw i32 %126, 1, !dbg !4074
  store i32 %inc152, i32* %j, align 4, !dbg !4074
  br label %for.cond140, !dbg !4075, !llvm.loop !4076

for.end153:                                       ; preds = %for.cond140
  br label %if.end154, !dbg !4077

if.end154:                                        ; preds = %for.end153, %land.lhs.true135, %if.end132
  %127 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4078
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %127, i32 0, i32 10, !dbg !4078
  %128 = load i32, i32* %cover_class_cost, align 4, !dbg !4078
  %129 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4079
  %cover_class_cost155 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %129, i32 0, i32 10, !dbg !4079
  %130 = load i32, i32* %cover_class_cost155, align 4, !dbg !4080
  %sub156 = sub nsw i32 %130, %128, !dbg !4080
  store i32 %sub156, i32* %cover_class_cost155, align 4, !dbg !4080
  %131 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4081
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %131, i32 0, i32 12, !dbg !4081
  %132 = load i32, i32* %memory_cost, align 4, !dbg !4081
  %133 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4082
  %memory_cost157 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %133, i32 0, i32 12, !dbg !4082
  %134 = load i32, i32* %memory_cost157, align 4, !dbg !4083
  %sub158 = sub nsw i32 %134, %132, !dbg !4083
  store i32 %sub158, i32* %memory_cost157, align 4, !dbg !4083
  %135 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4084
  %cap159 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %135, i32 0, i32 16, !dbg !4084
  %136 = load %struct.ira_allocno*, %struct.ira_allocno** %cap159, align 8, !dbg !4084
  %cmp160 = icmp ne %struct.ira_allocno* %136, null, !dbg !4086
  br i1 %cmp160, label %if.then174, label %lor.lhs.false162, !dbg !4087

lor.lhs.false162:                                 ; preds = %if.end154
  %137 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4088
  %loop_tree_node163 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %137, i32 0, i32 6, !dbg !4088
  %138 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node163, align 8, !dbg !4088
  %parent164 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %138, i32 0, i32 6, !dbg !4089
  %139 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent164, align 8, !dbg !4089
  store %struct.ira_loop_tree_node* %139, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4090
  %cmp165 = icmp eq %struct.ira_loop_tree_node* %139, null, !dbg !4091
  br i1 %cmp165, label %if.then174, label %lor.lhs.false167, !dbg !4092

lor.lhs.false167:                                 ; preds = %lor.lhs.false162
  %140 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4093
  %regno_allocno_map168 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %140, i32 0, i32 9, !dbg !4094
  %141 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map168, align 8, !dbg !4094
  %142 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4095
  %regno169 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %142, i32 0, i32 1, !dbg !4095
  %143 = load i32, i32* %regno169, align 4, !dbg !4095
  %idxprom170 = sext i32 %143 to i64, !dbg !4093
  %arrayidx171 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %141, i64 %idxprom170, !dbg !4093
  %144 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx171, align 8, !dbg !4093
  store %struct.ira_allocno* %144, %struct.ira_allocno** %parent_a, align 8, !dbg !4096
  %cmp172 = icmp eq %struct.ira_allocno* %144, null, !dbg !4097
  br i1 %cmp172, label %if.then174, label %if.end175, !dbg !4098

if.then174:                                       ; preds = %lor.lhs.false167, %lor.lhs.false162, %if.end154
  br label %for.end176, !dbg !4099

if.end175:                                        ; preds = %lor.lhs.false167
  br label %for.cond99, !dbg !4100, !llvm.loop !4101

for.end176:                                       ; preds = %if.then174
  %145 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4104
  %allocno_copies177 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %145, i32 0, i32 15, !dbg !4104
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %allocno_copies177, align 8, !dbg !4105
  %146 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4106
  %147 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4107
  %148 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4108
  %reg178 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %148, i32 0, i32 4, !dbg !4108
  %149 = load %struct.rtx_def*, %struct.rtx_def** %reg178, align 8, !dbg !4108
  %call179 = call i32 @rhs_regno(%struct.rtx_def* %149), !dbg !4108
  %idxprom180 = zext i32 %call179 to i64, !dbg !4107
  %arrayidx181 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %147, i64 %idxprom180, !dbg !4107
  store %struct.ira_allocno* %146, %struct.ira_allocno** %arrayidx181, align 8, !dbg !4109
  br label %for.inc182, !dbg !4110

for.inc182:                                       ; preds = %for.end176, %lor.end, %if.then34
  %150 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4111
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %150, i32 0, i32 5, !dbg !4111
  %151 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !4111
  store %struct.ira_allocno* %151, %struct.ira_allocno** %a, align 8, !dbg !4112
  br label %for.cond13, !dbg !4113, !llvm.loop !4114

for.end183:                                       ; preds = %for.cond13
  %152 = load i8, i8* %mem_dest_p, align 1, !dbg !4116
  %conv184 = zext i8 %152 to i32, !dbg !4116
  %tobool185 = icmp ne i32 %conv184, 0, !dbg !4116
  br i1 %tobool185, label %land.lhs.true186, label %if.end191, !dbg !4118

land.lhs.true186:                                 ; preds = %for.end183
  %153 = load i32, i32* %i, align 4, !dbg !4119
  %call187 = call zeroext i8 @copy_info_to_removed_store_destinations(i32 %153), !dbg !4120
  %conv188 = zext i8 %call187 to i32, !dbg !4120
  %tobool189 = icmp ne i32 %conv188, 0, !dbg !4120
  br i1 %tobool189, label %if.then190, label %if.end191, !dbg !4121

if.then190:                                       ; preds = %land.lhs.true186
  store i8 1, i8* %merged_p, align 1, !dbg !4122
  br label %if.end191, !dbg !4123

if.end191:                                        ; preds = %if.then190, %land.lhs.true186, %for.end183
  br label %for.inc192, !dbg !4124

for.inc192:                                       ; preds = %if.end191
  %154 = load i32, i32* %i, align 4, !dbg !4125
  %dec = add nsw i32 %154, -1, !dbg !4125
  store i32 %dec, i32* %i, align 4, !dbg !4125
  br label %for.cond9, !dbg !4126, !llvm.loop !4127

for.end193:                                       ; preds = %for.cond9
  %155 = load i8, i8* %merged_p, align 1, !dbg !4129
  %conv194 = zext i8 %155 to i32, !dbg !4129
  %tobool195 = icmp ne i32 %conv194, 0, !dbg !4129
  br i1 %tobool195, label %if.then199, label %lor.lhs.false196, !dbg !4131

lor.lhs.false196:                                 ; preds = %for.end193
  %156 = load i32, i32* %ira_max_point_before_emit.addr, align 4, !dbg !4132
  %157 = load i32, i32* @ira_max_point, align 4, !dbg !4133
  %cmp197 = icmp ne i32 %156, %157, !dbg !4134
  br i1 %cmp197, label %if.then199, label %if.end200, !dbg !4135

if.then199:                                       ; preds = %lor.lhs.false196, %for.end193
  call void @ira_rebuild_start_finish_chains(), !dbg !4136
  br label %if.end200, !dbg !4136

if.end200:                                        ; preds = %if.then199, %lor.lhs.false196
  %158 = load i8, i8* %new_pseudos_p, align 1, !dbg !4137
  %tobool201 = icmp ne i8 %158, 0, !dbg !4137
  br i1 %tobool201, label %if.then202, label %if.end293, !dbg !4139

if.then202:                                       ; preds = %if.end200
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !4140
  br label %for.cond203, !dbg !4140

for.cond203:                                      ; preds = %for.end225, %if.then217, %if.then202
  %call204 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !4143
  %tobool205 = icmp ne i8 %call204, 0, !dbg !4140
  br i1 %tobool205, label %for.body206, label %for.end226, !dbg !4140

for.body206:                                      ; preds = %for.cond203
  %159 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4145
  %160 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4148
  %161 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4149
  %reg207 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %161, i32 0, i32 4, !dbg !4149
  %162 = load %struct.rtx_def*, %struct.rtx_def** %reg207, align 8, !dbg !4149
  %call208 = call i32 @rhs_regno(%struct.rtx_def* %162), !dbg !4149
  %idxprom209 = zext i32 %call208 to i64, !dbg !4148
  %arrayidx210 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %160, i64 %idxprom209, !dbg !4148
  %163 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx210, align 8, !dbg !4148
  %cmp211 = icmp ne %struct.ira_allocno* %159, %163, !dbg !4150
  br i1 %cmp211, label %if.then217, label %lor.lhs.false213, !dbg !4151

lor.lhs.false213:                                 ; preds = %for.body206
  %164 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4152
  %cap_member214 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %164, i32 0, i32 17, !dbg !4152
  %165 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member214, align 8, !dbg !4152
  %cmp215 = icmp ne %struct.ira_allocno* %165, null, !dbg !4153
  br i1 %cmp215, label %if.then217, label %if.end218, !dbg !4154

if.then217:                                       ; preds = %lor.lhs.false213, %for.body206
  br label %for.cond203, !dbg !4155, !llvm.loop !4156

if.end218:                                        ; preds = %lor.lhs.false213
  %166 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4158
  %live_ranges219 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %166, i32 0, i32 20, !dbg !4158
  %167 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges219, align 8, !dbg !4158
  store %struct.ira_allocno_live_range* %167, %struct.ira_allocno_live_range** %r, align 8, !dbg !4160
  br label %for.cond220, !dbg !4161

for.cond220:                                      ; preds = %for.inc224, %if.end218
  %168 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4162
  %cmp221 = icmp ne %struct.ira_allocno_live_range* %168, null, !dbg !4164
  br i1 %cmp221, label %for.body223, label %for.end225, !dbg !4165

for.body223:                                      ; preds = %for.cond220
  br label %for.inc224, !dbg !4166

for.inc224:                                       ; preds = %for.body223
  %169 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4167
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %169, i32 0, i32 3, !dbg !4168
  %170 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !4168
  store %struct.ira_allocno_live_range* %170, %struct.ira_allocno_live_range** %r, align 8, !dbg !4169
  br label %for.cond220, !dbg !4170, !llvm.loop !4171

for.end225:                                       ; preds = %for.cond220
  %171 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4173
  call void @clear_allocno_conflicts(%struct.ira_allocno* %171), !dbg !4174
  br label %for.cond203, !dbg !4143, !llvm.loop !4156

for.end226:                                       ; preds = %for.cond203
  %172 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4175
  %call227 = call %struct.sparseset_def* @sparseset_alloc(i32 %172), !dbg !4176
  store %struct.sparseset_def* %call227, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4177
  store i32 0, i32* %i, align 4, !dbg !4178
  br label %for.cond228, !dbg !4180

for.cond228:                                      ; preds = %for.inc290, %for.end226
  %173 = load i32, i32* %i, align 4, !dbg !4181
  %174 = load i32, i32* @ira_max_point, align 4, !dbg !4183
  %cmp229 = icmp slt i32 %173, %174, !dbg !4184
  br i1 %cmp229, label %for.body231, label %for.end292, !dbg !4185

for.body231:                                      ; preds = %for.cond228
  %175 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @ira_start_point_ranges, align 8, !dbg !4186
  %176 = load i32, i32* %i, align 4, !dbg !4189
  %idxprom232 = sext i32 %176 to i64, !dbg !4186
  %arrayidx233 = getelementptr inbounds %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %175, i64 %idxprom232, !dbg !4186
  %177 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %arrayidx233, align 8, !dbg !4186
  store %struct.ira_allocno_live_range* %177, %struct.ira_allocno_live_range** %r, align 8, !dbg !4190
  br label %for.cond234, !dbg !4191

for.cond234:                                      ; preds = %for.inc278, %for.body231
  %178 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4192
  %cmp235 = icmp ne %struct.ira_allocno_live_range* %178, null, !dbg !4194
  br i1 %cmp235, label %for.body237, label %for.end279, !dbg !4195

for.body237:                                      ; preds = %for.cond234
  %179 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4196
  %allocno = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %179, i32 0, i32 0, !dbg !4198
  %180 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4198
  store %struct.ira_allocno* %180, %struct.ira_allocno** %a, align 8, !dbg !4199
  %181 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4200
  %182 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4202
  %183 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4203
  %reg238 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %183, i32 0, i32 4, !dbg !4203
  %184 = load %struct.rtx_def*, %struct.rtx_def** %reg238, align 8, !dbg !4203
  %call239 = call i32 @rhs_regno(%struct.rtx_def* %184), !dbg !4203
  %idxprom240 = zext i32 %call239 to i64, !dbg !4202
  %arrayidx241 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %182, i64 %idxprom240, !dbg !4202
  %185 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx241, align 8, !dbg !4202
  %cmp242 = icmp ne %struct.ira_allocno* %181, %185, !dbg !4204
  br i1 %cmp242, label %if.then248, label %lor.lhs.false244, !dbg !4205

lor.lhs.false244:                                 ; preds = %for.body237
  %186 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4206
  %cap_member245 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %186, i32 0, i32 17, !dbg !4206
  %187 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member245, align 8, !dbg !4206
  %cmp246 = icmp ne %struct.ira_allocno* %187, null, !dbg !4207
  br i1 %cmp246, label %if.then248, label %if.end249, !dbg !4208

if.then248:                                       ; preds = %lor.lhs.false244, %for.body237
  br label %for.inc278, !dbg !4209

if.end249:                                        ; preds = %lor.lhs.false244
  %188 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4210
  %num250 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %188, i32 0, i32 0, !dbg !4210
  %189 = load i32, i32* %num250, align 8, !dbg !4210
  store i32 %189, i32* %num, align 4, !dbg !4211
  %190 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4212
  %cover_class251 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %190, i32 0, i32 9, !dbg !4212
  %191 = load i32, i32* %cover_class251, align 8, !dbg !4212
  store i32 %191, i32* %cover_class, align 4, !dbg !4213
  %192 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4214
  %193 = load i32, i32* %num, align 4, !dbg !4215
  call void @sparseset_set_bit(%struct.sparseset_def* %192, i32 %193), !dbg !4216
  %194 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4217
  call void @sparseset_iter_init(%struct.sparseset_def* %194), !dbg !4217
  br label %for.cond252, !dbg !4217

for.cond252:                                      ; preds = %for.inc276, %if.end249
  %195 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4219
  %call253 = call zeroext i8 @sparseset_iter_p(%struct.sparseset_def* %195), !dbg !4219
  %conv254 = zext i8 %call253 to i32, !dbg !4219
  %tobool255 = icmp ne i32 %conv254, 0, !dbg !4219
  br i1 %tobool255, label %land.rhs, label %land.end, !dbg !4219

land.rhs:                                         ; preds = %for.cond252
  %196 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4219
  %call256 = call i32 @sparseset_iter_elm(%struct.sparseset_def* %196), !dbg !4219
  store i32 %call256, i32* %n, align 4, !dbg !4219
  %tobool257 = icmp ne i32 %call256, 0, !dbg !4219
  br i1 %tobool257, label %lor.end259, label %lor.rhs258, !dbg !4219

lor.rhs258:                                       ; preds = %land.rhs
  br label %lor.end259, !dbg !4219

lor.end259:                                       ; preds = %lor.rhs258, %land.rhs
  %197 = phi i1 [ true, %land.rhs ], [ true, %lor.rhs258 ]
  br label %land.end

land.end:                                         ; preds = %lor.end259, %for.cond252
  %198 = phi i1 [ false, %for.cond252 ], [ %197, %lor.end259 ], !dbg !4221
  br i1 %198, label %for.body261, label %for.end277, !dbg !4217

for.body261:                                      ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %live_a, metadata !4222, metadata !DIExpression()), !dbg !4224
  %199 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !4225
  %200 = load i32, i32* %n, align 4, !dbg !4226
  %idxprom262 = zext i32 %200 to i64, !dbg !4225
  %arrayidx263 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %199, i64 %idxprom262, !dbg !4225
  %201 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx263, align 8, !dbg !4225
  store %struct.ira_allocno* %201, %struct.ira_allocno** %live_a, align 8, !dbg !4224
  %202 = load i32, i32* %cover_class, align 4, !dbg !4227
  %idxprom264 = zext i32 %202 to i64, !dbg !4229
  %arrayidx265 = getelementptr inbounds [27 x [27 x i8]], [27 x [27 x i8]]* @ira_reg_classes_intersect_p, i64 0, i64 %idxprom264, !dbg !4229
  %203 = load %struct.ira_allocno*, %struct.ira_allocno** %live_a, align 8, !dbg !4230
  %cover_class266 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %203, i32 0, i32 9, !dbg !4230
  %204 = load i32, i32* %cover_class266, align 8, !dbg !4230
  %idxprom267 = zext i32 %204 to i64, !dbg !4229
  %arrayidx268 = getelementptr inbounds [27 x i8], [27 x i8]* %arrayidx265, i64 0, i64 %idxprom267, !dbg !4229
  %205 = load i8, i8* %arrayidx268, align 1, !dbg !4229
  %conv269 = zext i8 %205 to i32, !dbg !4229
  %tobool270 = icmp ne i32 %conv269, 0, !dbg !4229
  br i1 %tobool270, label %land.lhs.true271, label %if.end275, !dbg !4231

land.lhs.true271:                                 ; preds = %for.body261
  %206 = load i32, i32* %num, align 4, !dbg !4232
  %207 = load i32, i32* %n, align 4, !dbg !4233
  %cmp272 = icmp ne i32 %206, %207, !dbg !4234
  br i1 %cmp272, label %if.then274, label %if.end275, !dbg !4235

if.then274:                                       ; preds = %land.lhs.true271
  %208 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4236
  %209 = load %struct.ira_allocno*, %struct.ira_allocno** %live_a, align 8, !dbg !4237
  call void @ira_add_allocno_conflict(%struct.ira_allocno* %208, %struct.ira_allocno* %209), !dbg !4238
  br label %if.end275, !dbg !4238

if.end275:                                        ; preds = %if.then274, %land.lhs.true271, %for.body261
  br label %for.inc276, !dbg !4239

for.inc276:                                       ; preds = %if.end275
  %210 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4219
  call void @sparseset_iter_next(%struct.sparseset_def* %210), !dbg !4219
  br label %for.cond252, !dbg !4219, !llvm.loop !4240

for.end277:                                       ; preds = %land.end
  br label %for.inc278, !dbg !4242

for.inc278:                                       ; preds = %for.end277, %if.then248
  %211 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4243
  %start_next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %211, i32 0, i32 4, !dbg !4244
  %212 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %start_next, align 8, !dbg !4244
  store %struct.ira_allocno_live_range* %212, %struct.ira_allocno_live_range** %r, align 8, !dbg !4245
  br label %for.cond234, !dbg !4246, !llvm.loop !4247

for.end279:                                       ; preds = %for.cond234
  %213 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @ira_finish_point_ranges, align 8, !dbg !4249
  %214 = load i32, i32* %i, align 4, !dbg !4251
  %idxprom280 = sext i32 %214 to i64, !dbg !4249
  %arrayidx281 = getelementptr inbounds %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %213, i64 %idxprom280, !dbg !4249
  %215 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %arrayidx281, align 8, !dbg !4249
  store %struct.ira_allocno_live_range* %215, %struct.ira_allocno_live_range** %r, align 8, !dbg !4252
  br label %for.cond282, !dbg !4253

for.cond282:                                      ; preds = %for.inc288, %for.end279
  %216 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4254
  %cmp283 = icmp ne %struct.ira_allocno_live_range* %216, null, !dbg !4256
  br i1 %cmp283, label %for.body285, label %for.end289, !dbg !4257

for.body285:                                      ; preds = %for.cond282
  %217 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4258
  %218 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4259
  %allocno286 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %218, i32 0, i32 0, !dbg !4259
  %219 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno286, align 8, !dbg !4259
  %num287 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %219, i32 0, i32 0, !dbg !4259
  %220 = load i32, i32* %num287, align 8, !dbg !4259
  call void @sparseset_clear_bit(%struct.sparseset_def* %217, i32 %220), !dbg !4260
  br label %for.inc288, !dbg !4260

for.inc288:                                       ; preds = %for.body285
  %221 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4261
  %finish_next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %221, i32 0, i32 5, !dbg !4262
  %222 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %finish_next, align 8, !dbg !4262
  store %struct.ira_allocno_live_range* %222, %struct.ira_allocno_live_range** %r, align 8, !dbg !4263
  br label %for.cond282, !dbg !4264, !llvm.loop !4265

for.end289:                                       ; preds = %for.cond282
  br label %for.inc290, !dbg !4267

for.inc290:                                       ; preds = %for.end289
  %223 = load i32, i32* %i, align 4, !dbg !4268
  %inc291 = add nsw i32 %223, 1, !dbg !4268
  store i32 %inc291, i32* %i, align 4, !dbg !4268
  br label %for.cond228, !dbg !4269, !llvm.loop !4270

for.end292:                                       ; preds = %for.cond228
  %224 = load %struct.sparseset_def*, %struct.sparseset_def** %allocnos_live, align 8, !dbg !4272
  %225 = bitcast %struct.sparseset_def* %224 to i8*, !dbg !4272
  call void @free(i8* %225), !dbg !4272
  call void @compress_conflict_vecs(), !dbg !4273
  br label %if.end293, !dbg !4274

if.end293:                                        ; preds = %for.end292, %if.end200
  call void @ira_copy_iter_init(%struct.ira_copy_iterator* %ci), !dbg !4275
  br label %for.cond294, !dbg !4275

for.cond294:                                      ; preds = %if.end404, %if.end335, %if.end293
  %call295 = call zeroext i8 @ira_copy_iter_cond(%struct.ira_copy_iterator* %ci, %struct.ira_allocno_copy** %cp), !dbg !4277
  %tobool296 = icmp ne i8 %call295, 0, !dbg !4275
  br i1 %tobool296, label %for.body297, label %for.end405, !dbg !4275

for.body297:                                      ; preds = %for.cond294
  %226 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4279
  %first298 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %226, i32 0, i32 1, !dbg !4279
  %227 = load %struct.ira_allocno*, %struct.ira_allocno** %first298, align 8, !dbg !4279
  %cap_member299 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %227, i32 0, i32 17, !dbg !4279
  %228 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member299, align 8, !dbg !4279
  %cmp300 = icmp ne %struct.ira_allocno* %228, null, !dbg !4282
  br i1 %cmp300, label %if.then307, label %lor.lhs.false302, !dbg !4283

lor.lhs.false302:                                 ; preds = %for.body297
  %229 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4284
  %second303 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %229, i32 0, i32 2, !dbg !4284
  %230 = load %struct.ira_allocno*, %struct.ira_allocno** %second303, align 8, !dbg !4284
  %cap_member304 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %230, i32 0, i32 17, !dbg !4284
  %231 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member304, align 8, !dbg !4284
  %cmp305 = icmp ne %struct.ira_allocno* %231, null, !dbg !4285
  br i1 %cmp305, label %if.then307, label %if.end337, !dbg !4286

if.then307:                                       ; preds = %lor.lhs.false302, %for.body297
  %232 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4287
  %cmp308 = icmp sgt i32 %232, 4, !dbg !4290
  br i1 %cmp308, label %land.lhs.true310, label %if.end335, !dbg !4291

land.lhs.true310:                                 ; preds = %if.then307
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4292
  %cmp311 = icmp ne %struct._IO_FILE* %233, null, !dbg !4293
  br i1 %cmp311, label %if.then313, label %if.end335, !dbg !4294

if.then313:                                       ; preds = %land.lhs.true310
  %234 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4295
  %235 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4296
  %num314 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %235, i32 0, i32 0, !dbg !4297
  %236 = load i32, i32* %num314, align 8, !dbg !4297
  %237 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4298
  %first315 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %237, i32 0, i32 1, !dbg !4298
  %238 = load %struct.ira_allocno*, %struct.ira_allocno** %first315, align 8, !dbg !4298
  %cap_member316 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %238, i32 0, i32 17, !dbg !4298
  %239 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member316, align 8, !dbg !4298
  %cmp317 = icmp ne %struct.ira_allocno* %239, null, !dbg !4299
  %240 = zext i1 %cmp317 to i64, !dbg !4298
  %cond = select i1 %cmp317, i32 99, i32 97, !dbg !4298
  %241 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4300
  %first319 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %241, i32 0, i32 1, !dbg !4300
  %242 = load %struct.ira_allocno*, %struct.ira_allocno** %first319, align 8, !dbg !4300
  %num320 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %242, i32 0, i32 0, !dbg !4300
  %243 = load i32, i32* %num320, align 8, !dbg !4300
  %244 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4301
  %first321 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %244, i32 0, i32 1, !dbg !4301
  %245 = load %struct.ira_allocno*, %struct.ira_allocno** %first321, align 8, !dbg !4301
  %reg322 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %245, i32 0, i32 4, !dbg !4301
  %246 = load %struct.rtx_def*, %struct.rtx_def** %reg322, align 8, !dbg !4301
  %call323 = call i32 @rhs_regno(%struct.rtx_def* %246), !dbg !4301
  %247 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4302
  %second324 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %247, i32 0, i32 2, !dbg !4302
  %248 = load %struct.ira_allocno*, %struct.ira_allocno** %second324, align 8, !dbg !4302
  %cap_member325 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %248, i32 0, i32 17, !dbg !4302
  %249 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member325, align 8, !dbg !4302
  %cmp326 = icmp ne %struct.ira_allocno* %249, null, !dbg !4303
  %250 = zext i1 %cmp326 to i64, !dbg !4302
  %cond328 = select i1 %cmp326, i32 99, i32 97, !dbg !4302
  %251 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4304
  %second329 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %251, i32 0, i32 2, !dbg !4304
  %252 = load %struct.ira_allocno*, %struct.ira_allocno** %second329, align 8, !dbg !4304
  %num330 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %252, i32 0, i32 0, !dbg !4304
  %253 = load i32, i32* %num330, align 8, !dbg !4304
  %254 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4305
  %second331 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %254, i32 0, i32 2, !dbg !4305
  %255 = load %struct.ira_allocno*, %struct.ira_allocno** %second331, align 8, !dbg !4305
  %reg332 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %255, i32 0, i32 4, !dbg !4305
  %256 = load %struct.rtx_def*, %struct.rtx_def** %reg332, align 8, !dbg !4305
  %call333 = call i32 @rhs_regno(%struct.rtx_def* %256), !dbg !4305
  %call334 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %234, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0), i32 %236, i32 %cond, i32 %243, i32 %call323, i32 %cond328, i32 %253, i32 %call333), !dbg !4306
  br label %if.end335, !dbg !4306

if.end335:                                        ; preds = %if.then313, %land.lhs.true310, %if.then307
  %257 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4307
  %loop_tree_node336 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %257, i32 0, i32 10, !dbg !4308
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %loop_tree_node336, align 8, !dbg !4309
  br label %for.cond294, !dbg !4310, !llvm.loop !4311

if.end337:                                        ; preds = %lor.lhs.false302
  %258 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4313
  %259 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4314
  %first338 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %259, i32 0, i32 1, !dbg !4314
  %260 = load %struct.ira_allocno*, %struct.ira_allocno** %first338, align 8, !dbg !4314
  %reg339 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %260, i32 0, i32 4, !dbg !4314
  %261 = load %struct.rtx_def*, %struct.rtx_def** %reg339, align 8, !dbg !4314
  %call340 = call i32 @rhs_regno(%struct.rtx_def* %261), !dbg !4314
  %idxprom341 = zext i32 %call340 to i64, !dbg !4313
  %arrayidx342 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %258, i64 %idxprom341, !dbg !4313
  %262 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx342, align 8, !dbg !4313
  store %struct.ira_allocno* %262, %struct.ira_allocno** %first, align 8, !dbg !4315
  %263 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4316
  %264 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4317
  %second343 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %264, i32 0, i32 2, !dbg !4317
  %265 = load %struct.ira_allocno*, %struct.ira_allocno** %second343, align 8, !dbg !4317
  %reg344 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %265, i32 0, i32 4, !dbg !4317
  %266 = load %struct.rtx_def*, %struct.rtx_def** %reg344, align 8, !dbg !4317
  %call345 = call i32 @rhs_regno(%struct.rtx_def* %266), !dbg !4317
  %idxprom346 = zext i32 %call345 to i64, !dbg !4316
  %arrayidx347 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %263, i64 %idxprom346, !dbg !4316
  %267 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx347, align 8, !dbg !4316
  store %struct.ira_allocno* %267, %struct.ira_allocno** %second, align 8, !dbg !4318
  %268 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4319
  %loop_tree_node348 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %268, i32 0, i32 10, !dbg !4320
  %269 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node348, align 8, !dbg !4320
  store %struct.ira_loop_tree_node* %269, %struct.ira_loop_tree_node** %node, align 8, !dbg !4321
  %270 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node, align 8, !dbg !4322
  %cmp349 = icmp eq %struct.ira_loop_tree_node* %270, null, !dbg !4324
  br i1 %cmp349, label %if.then351, label %if.else, !dbg !4325

if.then351:                                       ; preds = %if.end337
  store i8 1, i8* %keep_p, align 1, !dbg !4326
  br label %if.end377, !dbg !4327

if.else:                                          ; preds = %if.end337
  %271 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node, align 8, !dbg !4328
  %regno_allocno_map352 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %271, i32 0, i32 9, !dbg !4330
  %272 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map352, align 8, !dbg !4330
  %273 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4331
  %first353 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %273, i32 0, i32 1, !dbg !4331
  %274 = load %struct.ira_allocno*, %struct.ira_allocno** %first353, align 8, !dbg !4331
  %regno354 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %274, i32 0, i32 1, !dbg !4331
  %275 = load i32, i32* %regno354, align 4, !dbg !4331
  %idxprom355 = sext i32 %275 to i64, !dbg !4328
  %arrayidx356 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %272, i64 %idxprom355, !dbg !4328
  %276 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx356, align 8, !dbg !4328
  store %struct.ira_allocno* %276, %struct.ira_allocno** %node_first, align 8, !dbg !4332
  %277 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node, align 8, !dbg !4333
  %regno_allocno_map357 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %277, i32 0, i32 9, !dbg !4334
  %278 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map357, align 8, !dbg !4334
  %279 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4335
  %second358 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %279, i32 0, i32 2, !dbg !4335
  %280 = load %struct.ira_allocno*, %struct.ira_allocno** %second358, align 8, !dbg !4335
  %regno359 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %280, i32 0, i32 1, !dbg !4335
  %281 = load i32, i32* %regno359, align 4, !dbg !4335
  %idxprom360 = sext i32 %281 to i64, !dbg !4333
  %arrayidx361 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %278, i64 %idxprom360, !dbg !4333
  %282 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx361, align 8, !dbg !4333
  store %struct.ira_allocno* %282, %struct.ira_allocno** %node_second, align 8, !dbg !4336
  %283 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !4337
  %reg362 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %283, i32 0, i32 4, !dbg !4337
  %284 = load %struct.rtx_def*, %struct.rtx_def** %reg362, align 8, !dbg !4337
  %call363 = call i32 @rhs_regno(%struct.rtx_def* %284), !dbg !4337
  %285 = load %struct.ira_allocno*, %struct.ira_allocno** %node_first, align 8, !dbg !4338
  %reg364 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %285, i32 0, i32 4, !dbg !4338
  %286 = load %struct.rtx_def*, %struct.rtx_def** %reg364, align 8, !dbg !4338
  %call365 = call i32 @rhs_regno(%struct.rtx_def* %286), !dbg !4338
  %cmp366 = icmp eq i32 %call363, %call365, !dbg !4339
  br i1 %cmp366, label %land.rhs368, label %land.end375, !dbg !4340

land.rhs368:                                      ; preds = %if.else
  %287 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !4341
  %reg369 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %287, i32 0, i32 4, !dbg !4341
  %288 = load %struct.rtx_def*, %struct.rtx_def** %reg369, align 8, !dbg !4341
  %call370 = call i32 @rhs_regno(%struct.rtx_def* %288), !dbg !4341
  %289 = load %struct.ira_allocno*, %struct.ira_allocno** %node_second, align 8, !dbg !4342
  %reg371 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %289, i32 0, i32 4, !dbg !4342
  %290 = load %struct.rtx_def*, %struct.rtx_def** %reg371, align 8, !dbg !4342
  %call372 = call i32 @rhs_regno(%struct.rtx_def* %290), !dbg !4342
  %cmp373 = icmp eq i32 %call370, %call372, !dbg !4343
  br label %land.end375

land.end375:                                      ; preds = %land.rhs368, %if.else
  %291 = phi i1 [ false, %if.else ], [ %cmp373, %land.rhs368 ], !dbg !4344
  %land.ext = zext i1 %291 to i32, !dbg !4340
  %conv376 = trunc i32 %land.ext to i8, !dbg !4345
  store i8 %conv376, i8* %keep_p, align 1, !dbg !4346
  br label %if.end377

if.end377:                                        ; preds = %land.end375, %if.then351
  %292 = load i8, i8* %keep_p, align 1, !dbg !4347
  %tobool378 = icmp ne i8 %292, 0, !dbg !4347
  br i1 %tobool378, label %if.then379, label %if.else383, !dbg !4349

if.then379:                                       ; preds = %if.end377
  %293 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !4350
  %294 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4352
  %loop_tree_node380 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %294, i32 0, i32 10, !dbg !4353
  store %struct.ira_loop_tree_node* %293, %struct.ira_loop_tree_node** %loop_tree_node380, align 8, !dbg !4354
  %295 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !4355
  %296 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4356
  %first381 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %296, i32 0, i32 1, !dbg !4357
  store %struct.ira_allocno* %295, %struct.ira_allocno** %first381, align 8, !dbg !4358
  %297 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !4359
  %298 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4360
  %second382 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %298, i32 0, i32 2, !dbg !4361
  store %struct.ira_allocno* %297, %struct.ira_allocno** %second382, align 8, !dbg !4362
  br label %if.end404, !dbg !4363

if.else383:                                       ; preds = %if.end377
  %299 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4364
  %loop_tree_node384 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %299, i32 0, i32 10, !dbg !4366
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %loop_tree_node384, align 8, !dbg !4367
  %300 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4368
  %cmp385 = icmp sgt i32 %300, 4, !dbg !4370
  br i1 %cmp385, label %land.lhs.true387, label %if.end403, !dbg !4371

land.lhs.true387:                                 ; preds = %if.else383
  %301 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4372
  %cmp388 = icmp ne %struct._IO_FILE* %301, null, !dbg !4373
  br i1 %cmp388, label %if.then390, label %if.end403, !dbg !4374

if.then390:                                       ; preds = %land.lhs.true387
  %302 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4375
  %303 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4376
  %num391 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %303, i32 0, i32 0, !dbg !4377
  %304 = load i32, i32* %num391, align 8, !dbg !4377
  %305 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4378
  %first392 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %305, i32 0, i32 1, !dbg !4378
  %306 = load %struct.ira_allocno*, %struct.ira_allocno** %first392, align 8, !dbg !4378
  %num393 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %306, i32 0, i32 0, !dbg !4378
  %307 = load i32, i32* %num393, align 8, !dbg !4378
  %308 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4379
  %first394 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %308, i32 0, i32 1, !dbg !4379
  %309 = load %struct.ira_allocno*, %struct.ira_allocno** %first394, align 8, !dbg !4379
  %reg395 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %309, i32 0, i32 4, !dbg !4379
  %310 = load %struct.rtx_def*, %struct.rtx_def** %reg395, align 8, !dbg !4379
  %call396 = call i32 @rhs_regno(%struct.rtx_def* %310), !dbg !4379
  %311 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4380
  %second397 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %311, i32 0, i32 2, !dbg !4380
  %312 = load %struct.ira_allocno*, %struct.ira_allocno** %second397, align 8, !dbg !4380
  %num398 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %312, i32 0, i32 0, !dbg !4380
  %313 = load i32, i32* %num398, align 8, !dbg !4380
  %314 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4381
  %second399 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %314, i32 0, i32 2, !dbg !4381
  %315 = load %struct.ira_allocno*, %struct.ira_allocno** %second399, align 8, !dbg !4381
  %reg400 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %315, i32 0, i32 4, !dbg !4381
  %316 = load %struct.rtx_def*, %struct.rtx_def** %reg400, align 8, !dbg !4381
  %call401 = call i32 @rhs_regno(%struct.rtx_def* %316), !dbg !4381
  %call402 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %302, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i64 0, i64 0), i32 %304, i32 %307, i32 %call396, i32 %313, i32 %call401), !dbg !4382
  br label %if.end403, !dbg !4382

if.end403:                                        ; preds = %if.then390, %land.lhs.true387, %if.else383
  br label %if.end404

if.end404:                                        ; preds = %if.end403, %if.then379
  br label %for.cond294, !dbg !4277, !llvm.loop !4311

for.end405:                                       ; preds = %for.cond294
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !4383
  br label %for.cond406, !dbg !4383

for.cond406:                                      ; preds = %if.end446, %if.end431, %for.end405
  %call407 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !4385
  %tobool408 = icmp ne i8 %call407, 0, !dbg !4383
  br i1 %tobool408, label %for.body409, label %for.end447, !dbg !4383

for.body409:                                      ; preds = %for.cond406
  %317 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4387
  %318 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4390
  %319 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4391
  %reg410 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %319, i32 0, i32 4, !dbg !4391
  %320 = load %struct.rtx_def*, %struct.rtx_def** %reg410, align 8, !dbg !4391
  %call411 = call i32 @rhs_regno(%struct.rtx_def* %320), !dbg !4391
  %idxprom412 = zext i32 %call411 to i64, !dbg !4390
  %arrayidx413 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %318, i64 %idxprom412, !dbg !4390
  %321 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx413, align 8, !dbg !4390
  %cmp414 = icmp ne %struct.ira_allocno* %317, %321, !dbg !4392
  br i1 %cmp414, label %if.then420, label %lor.lhs.false416, !dbg !4393

lor.lhs.false416:                                 ; preds = %for.body409
  %322 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4394
  %cap_member417 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %322, i32 0, i32 17, !dbg !4394
  %323 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member417, align 8, !dbg !4394
  %cmp418 = icmp ne %struct.ira_allocno* %323, null, !dbg !4395
  br i1 %cmp418, label %if.then420, label %if.end432, !dbg !4396

if.then420:                                       ; preds = %lor.lhs.false416, %for.body409
  %324 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4397
  %cmp421 = icmp sgt i32 %324, 4, !dbg !4400
  br i1 %cmp421, label %land.lhs.true423, label %if.end431, !dbg !4401

land.lhs.true423:                                 ; preds = %if.then420
  %325 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4402
  %cmp424 = icmp ne %struct._IO_FILE* %325, null, !dbg !4403
  br i1 %cmp424, label %if.then426, label %if.end431, !dbg !4404

if.then426:                                       ; preds = %land.lhs.true423
  %326 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4405
  %327 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4406
  %num427 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %327, i32 0, i32 0, !dbg !4406
  %328 = load i32, i32* %num427, align 8, !dbg !4406
  %329 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4407
  %reg428 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %329, i32 0, i32 4, !dbg !4407
  %330 = load %struct.rtx_def*, %struct.rtx_def** %reg428, align 8, !dbg !4407
  %call429 = call i32 @rhs_regno(%struct.rtx_def* %330), !dbg !4407
  %call430 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %326, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i32 %328, i32 %call429), !dbg !4408
  br label %if.end431, !dbg !4408

if.end431:                                        ; preds = %if.then426, %land.lhs.true423, %if.then420
  %331 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4409
  call void @finish_allocno(%struct.ira_allocno* %331), !dbg !4410
  br label %for.cond406, !dbg !4411, !llvm.loop !4412

if.end432:                                        ; preds = %lor.lhs.false416
  %332 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !4414
  %333 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4415
  %loop_tree_node433 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %333, i32 0, i32 6, !dbg !4415
  store %struct.ira_loop_tree_node* %332, %struct.ira_loop_tree_node** %loop_tree_node433, align 8, !dbg !4416
  %334 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4417
  %reg434 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %334, i32 0, i32 4, !dbg !4417
  %335 = load %struct.rtx_def*, %struct.rtx_def** %reg434, align 8, !dbg !4417
  %call435 = call i32 @rhs_regno(%struct.rtx_def* %335), !dbg !4417
  %336 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4418
  %regno436 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %336, i32 0, i32 1, !dbg !4418
  store i32 %call435, i32* %regno436, align 4, !dbg !4419
  %337 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4420
  %cap437 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %337, i32 0, i32 16, !dbg !4420
  store %struct.ira_allocno* null, %struct.ira_allocno** %cap437, align 8, !dbg !4421
  %338 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4422
  %memory_cost438 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %338, i32 0, i32 12, !dbg !4422
  %339 = load i32, i32* %memory_cost438, align 4, !dbg !4422
  %340 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4423
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %340, i32 0, i32 13, !dbg !4423
  store i32 %339, i32* %updated_memory_cost, align 8, !dbg !4424
  %341 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4425
  %cover_class_cost439 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %341, i32 0, i32 10, !dbg !4425
  %342 = load i32, i32* %cover_class_cost439, align 4, !dbg !4425
  %343 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4426
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %343, i32 0, i32 11, !dbg !4426
  store i32 %342, i32* %updated_cover_class_cost, align 8, !dbg !4427
  %344 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4428
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %344, i32 0, i32 31, !dbg !4428
  %bf.load440 = load i16, i16* %assigned_p, align 4, !dbg !4428
  %bf.lshr441 = lshr i16 %bf.load440, 8, !dbg !4428
  %bf.clear442 = and i16 %bf.lshr441, 1, !dbg !4428
  %bf.cast443 = zext i16 %bf.clear442 to i32, !dbg !4428
  %tobool444 = icmp ne i32 %bf.cast443, 0, !dbg !4428
  br i1 %tobool444, label %if.end446, label %if.then445, !dbg !4430

if.then445:                                       ; preds = %if.end432
  %345 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4431
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %345), !dbg !4432
  br label %if.end446, !dbg !4432

if.end446:                                        ; preds = %if.then445, %if.end432
  br label %for.cond406, !dbg !4385, !llvm.loop !4412

for.end447:                                       ; preds = %for.cond406
  call void @ira_copy_iter_init(%struct.ira_copy_iterator* %ci), !dbg !4433
  br label %for.cond448, !dbg !4433

for.cond448:                                      ; preds = %if.end459, %if.then455, %for.end447
  %call449 = call zeroext i8 @ira_copy_iter_cond(%struct.ira_copy_iterator* %ci, %struct.ira_allocno_copy** %cp), !dbg !4435
  %tobool450 = icmp ne i8 %call449, 0, !dbg !4433
  br i1 %tobool450, label %for.body451, label %for.end460, !dbg !4433

for.body451:                                      ; preds = %for.cond448
  %346 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4437
  %loop_tree_node452 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %346, i32 0, i32 10, !dbg !4440
  %347 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node452, align 8, !dbg !4440
  %cmp453 = icmp eq %struct.ira_loop_tree_node* %347, null, !dbg !4441
  br i1 %cmp453, label %if.then455, label %if.end459, !dbg !4442

if.then455:                                       ; preds = %for.body451
  %348 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** @ira_copies, align 8, !dbg !4443
  %349 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4445
  %num456 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %349, i32 0, i32 0, !dbg !4446
  %350 = load i32, i32* %num456, align 8, !dbg !4446
  %idxprom457 = sext i32 %350 to i64, !dbg !4443
  %arrayidx458 = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %348, i64 %idxprom457, !dbg !4443
  store %struct.ira_allocno_copy* null, %struct.ira_allocno_copy** %arrayidx458, align 8, !dbg !4447
  %351 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4448
  call void @finish_copy(%struct.ira_allocno_copy* %351), !dbg !4449
  br label %for.cond448, !dbg !4450, !llvm.loop !4451

if.end459:                                        ; preds = %for.body451
  %352 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4453
  call void @ira_add_allocno_copy_to_list(%struct.ira_allocno_copy* %352), !dbg !4454
  %353 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4455
  call void @ira_swap_allocno_copy_ends_if_necessary(%struct.ira_allocno_copy* %353), !dbg !4456
  br label %for.cond448, !dbg !4435, !llvm.loop !4451

for.end460:                                       ; preds = %for.cond448
  call void @rebuild_regno_allocno_maps(), !dbg !4457
  %354 = load i32, i32* @ira_max_point, align 4, !dbg !4458
  %355 = load i32, i32* %ira_max_point_before_emit.addr, align 4, !dbg !4460
  %cmp461 = icmp ne i32 %354, %355, !dbg !4461
  br i1 %cmp461, label %if.then463, label %if.end464, !dbg !4462

if.then463:                                       ; preds = %for.end460
  call void @ira_compress_allocno_live_ranges(), !dbg !4463
  br label %if.end464, !dbg !4463

if.end464:                                        ; preds = %if.then463, %for.end460
  %356 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4464
  %357 = bitcast %struct.ira_allocno** %356 to i8*, !dbg !4464
  call void @ira_free(i8* %357), !dbg !4465
  ret void, !dbg !4466
}

declare dso_local i32 @max_reg_num() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %i) #0 !dbg !4467 {
entry:
  %i.addr = alloca %struct.ira_allocno_iterator*, align 8
  store %struct.ira_allocno_iterator* %i, %struct.ira_allocno_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator** %i.addr, metadata !4471, metadata !DIExpression()), !dbg !4472
  %0 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !4473
  %n = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %0, i32 0, i32 0, !dbg !4474
  store i32 0, i32* %n, align 4, !dbg !4475
  ret void, !dbg !4476
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %i, %struct.ira_allocno** %a) #0 !dbg !4477 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.ira_allocno_iterator*, align 8
  %a.addr = alloca %struct.ira_allocno**, align 8
  %n = alloca i32, align 4
  store %struct.ira_allocno_iterator* %i, %struct.ira_allocno_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator** %i.addr, metadata !4480, metadata !DIExpression()), !dbg !4481
  store %struct.ira_allocno** %a, %struct.ira_allocno*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %a.addr, metadata !4482, metadata !DIExpression()), !dbg !4483
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4484, metadata !DIExpression()), !dbg !4485
  %0 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !4486
  %n1 = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %0, i32 0, i32 0, !dbg !4488
  %1 = load i32, i32* %n1, align 4, !dbg !4488
  store i32 %1, i32* %n, align 4, !dbg !4489
  br label %for.cond, !dbg !4490

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %n, align 4, !dbg !4491
  %3 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4493
  %cmp = icmp slt i32 %2, %3, !dbg !4494
  br i1 %cmp, label %for.body, label %for.end, !dbg !4495

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !4496
  %5 = load i32, i32* %n, align 4, !dbg !4498
  %idxprom = sext i32 %5 to i64, !dbg !4496
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !4496
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !4496
  %cmp2 = icmp ne %struct.ira_allocno* %6, null, !dbg !4499
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4500

if.then:                                          ; preds = %for.body
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !4501
  %8 = load i32, i32* %n, align 4, !dbg !4503
  %idxprom3 = sext i32 %8 to i64, !dbg !4501
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 %idxprom3, !dbg !4501
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx4, align 8, !dbg !4501
  %10 = load %struct.ira_allocno**, %struct.ira_allocno*** %a.addr, align 8, !dbg !4504
  store %struct.ira_allocno* %9, %struct.ira_allocno** %10, align 8, !dbg !4505
  %11 = load i32, i32* %n, align 4, !dbg !4506
  %add = add nsw i32 %11, 1, !dbg !4507
  %12 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !4508
  %n5 = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %12, i32 0, i32 0, !dbg !4509
  store i32 %add, i32* %n5, align 4, !dbg !4510
  store i8 1, i8* %retval, align 1, !dbg !4511
  br label %return, !dbg !4511

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4512

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %n, align 4, !dbg !4513
  %inc = add nsw i32 %13, 1, !dbg !4513
  store i32 %inc, i32* %n, align 4, !dbg !4513
  br label %for.cond, !dbg !4514, !llvm.loop !4515

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4517
  br label %return, !dbg !4517

return:                                           ; preds = %for.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !4518
  ret i8 %14, !dbg !4518
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !4519 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4525, metadata !DIExpression()), !dbg !4526
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4527
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4527
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4527
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4527
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4527
  %1 = load i32, i32* %rt_uint, align 8, !dbg !4527
  ret i32 %1, !dbg !4528
}

declare dso_local void @ira_print_live_range_list(%struct._IO_FILE*, %struct.ira_allocno_live_range*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @change_allocno_in_range_list(%struct.ira_allocno_live_range* %r, %struct.ira_allocno* %a) #0 !dbg !4529 {
entry:
  %r.addr = alloca %struct.ira_allocno_live_range*, align 8
  %a.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno_live_range* %r, %struct.ira_allocno_live_range** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r.addr, metadata !4532, metadata !DIExpression()), !dbg !4533
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !4534, metadata !DIExpression()), !dbg !4535
  br label %for.cond, !dbg !4536

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !4537
  %cmp = icmp ne %struct.ira_allocno_live_range* %0, null, !dbg !4540
  br i1 %cmp, label %for.body, label %for.end, !dbg !4541

for.body:                                         ; preds = %for.cond
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4542
  %2 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !4543
  %allocno = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %2, i32 0, i32 0, !dbg !4544
  store %struct.ira_allocno* %1, %struct.ira_allocno** %allocno, align 8, !dbg !4545
  br label %for.inc, !dbg !4543

for.inc:                                          ; preds = %for.body
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !4546
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %3, i32 0, i32 3, !dbg !4547
  %4 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !4547
  store %struct.ira_allocno_live_range* %4, %struct.ira_allocno_live_range** %r.addr, align 8, !dbg !4548
  br label %for.cond, !dbg !4549, !llvm.loop !4550

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4552
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @copy_info_to_removed_store_destinations(i32 %regno) #0 !dbg !4553 {
entry:
  %regno.addr = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %parent_a = alloca %struct.ira_allocno*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %merged_p = alloca i8, align 1
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !4556, metadata !DIExpression()), !dbg !4557
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !4558, metadata !DIExpression()), !dbg !4559
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_a, metadata !4560, metadata !DIExpression()), !dbg !4561
  store %struct.ira_allocno* null, %struct.ira_allocno** %parent_a, align 8, !dbg !4561
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !4562, metadata !DIExpression()), !dbg !4563
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !4564, metadata !DIExpression()), !dbg !4565
  call void @llvm.dbg.declare(metadata i8* %merged_p, metadata !4566, metadata !DIExpression()), !dbg !4567
  store i8 0, i8* %merged_p, align 1, !dbg !4568
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4569
  %1 = load i32, i32* %regno.addr, align 4, !dbg !4571
  %idxprom = sext i32 %1 to i64, !dbg !4569
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %0, i64 %idxprom, !dbg !4569
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !4569
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a, align 8, !dbg !4572
  br label %for.cond, !dbg !4573

for.cond:                                         ; preds = %for.inc55, %entry
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4574
  %cmp = icmp ne %struct.ira_allocno* %3, null, !dbg !4576
  br i1 %cmp, label %for.body, label %for.end56, !dbg !4577

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4578
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4581
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4582
  %reg = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 4, !dbg !4582
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !4582
  %call = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !4582
  %idxprom1 = zext i32 %call to i64, !dbg !4581
  %arrayidx2 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %5, i64 %idxprom1, !dbg !4581
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx2, align 8, !dbg !4581
  %cmp3 = icmp ne %struct.ira_allocno* %4, %8, !dbg !4583
  br i1 %cmp3, label %if.then, label %if.end, !dbg !4584

if.then:                                          ; preds = %for.body
  br label %for.inc55, !dbg !4585

if.end:                                           ; preds = %for.body
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4586
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 6, !dbg !4586
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !4586
  %parent4 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 6, !dbg !4588
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent4, align 8, !dbg !4588
  store %struct.ira_loop_tree_node* %11, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4589
  br label %for.cond5, !dbg !4590

for.cond5:                                        ; preds = %for.inc, %if.end
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4591
  %cmp6 = icmp ne %struct.ira_loop_tree_node* %12, null, !dbg !4593
  br i1 %cmp6, label %for.body7, label %for.end, !dbg !4594

for.body7:                                        ; preds = %for.cond5
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4595
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i32 0, i32 9, !dbg !4597
  %14 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !4597
  %15 = load i32, i32* %regno.addr, align 4, !dbg !4598
  %idxprom8 = sext i32 %15 to i64, !dbg !4595
  %arrayidx9 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %14, i64 %idxprom8, !dbg !4595
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx9, align 8, !dbg !4595
  store %struct.ira_allocno* %16, %struct.ira_allocno** %parent_a, align 8, !dbg !4599
  %cmp10 = icmp eq %struct.ira_allocno* %16, null, !dbg !4600
  br i1 %cmp10, label %if.then16, label %lor.lhs.false, !dbg !4601

lor.lhs.false:                                    ; preds = %for.body7
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4602
  %18 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_top_level_allocno_map, align 8, !dbg !4603
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4604
  %reg11 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 4, !dbg !4604
  %20 = load %struct.rtx_def*, %struct.rtx_def** %reg11, align 8, !dbg !4604
  %call12 = call i32 @rhs_regno(%struct.rtx_def* %20), !dbg !4604
  %idxprom13 = zext i32 %call12 to i64, !dbg !4603
  %arrayidx14 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %18, i64 %idxprom13, !dbg !4603
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx14, align 8, !dbg !4603
  %cmp15 = icmp eq %struct.ira_allocno* %17, %21, !dbg !4605
  br i1 %cmp15, label %land.lhs.true, label %if.end17, !dbg !4606

land.lhs.true:                                    ; preds = %lor.lhs.false
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4607
  %mem_optimized_dest_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 31, !dbg !4607
  %bf.load = load i16, i16* %mem_optimized_dest_p, align 4, !dbg !4607
  %bf.clear = and i16 %bf.load, 1, !dbg !4607
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4607
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4607
  br i1 %tobool, label %if.then16, label %if.end17, !dbg !4608

if.then16:                                        ; preds = %land.lhs.true, %for.body7
  br label %for.end, !dbg !4609

if.end17:                                         ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc, !dbg !4610

for.inc:                                          ; preds = %if.end17
  %23 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4611
  %parent18 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %23, i32 0, i32 6, !dbg !4612
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent18, align 8, !dbg !4612
  store %struct.ira_loop_tree_node* %24, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4613
  br label %for.cond5, !dbg !4614, !llvm.loop !4615

for.end:                                          ; preds = %if.then16, %for.cond5
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !4617
  %cmp19 = icmp eq %struct.ira_loop_tree_node* %25, null, !dbg !4619
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20, !dbg !4620

lor.lhs.false20:                                  ; preds = %for.end
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4621
  %cmp21 = icmp eq %struct.ira_allocno* %26, null, !dbg !4622
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !4623

if.then22:                                        ; preds = %lor.lhs.false20, %for.end
  br label %for.inc55, !dbg !4624

if.end23:                                         ; preds = %lor.lhs.false20
  %27 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4625
  %cmp24 = icmp sgt i32 %27, 4, !dbg !4627
  br i1 %cmp24, label %land.lhs.true25, label %if.end34, !dbg !4628

land.lhs.true25:                                  ; preds = %if.end23
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4629
  %cmp26 = icmp ne %struct._IO_FILE* %28, null, !dbg !4630
  br i1 %cmp26, label %if.then27, label %if.end34, !dbg !4631

if.then27:                                        ; preds = %land.lhs.true25
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4632
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4634
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 0, !dbg !4634
  %31 = load i32, i32* %num, align 8, !dbg !4634
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4635
  %reg28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 4, !dbg !4635
  %33 = load %struct.rtx_def*, %struct.rtx_def** %reg28, align 8, !dbg !4635
  %call29 = call i32 @rhs_regno(%struct.rtx_def* %33), !dbg !4635
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4636
  %num30 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 0, !dbg !4636
  %35 = load i32, i32* %num30, align 8, !dbg !4636
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4637
  %reg31 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 4, !dbg !4637
  %37 = load %struct.rtx_def*, %struct.rtx_def** %reg31, align 8, !dbg !4637
  %call32 = call i32 @rhs_regno(%struct.rtx_def* %37), !dbg !4637
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i64 0, i64 0), i32 %31, i32 %call29, i32 %35, i32 %call32), !dbg !4638
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4639
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4640
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 20, !dbg !4640
  %40 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !4640
  call void @ira_print_live_range_list(%struct._IO_FILE* %38, %struct.ira_allocno_live_range* %40), !dbg !4641
  br label %if.end34, !dbg !4642

if.end34:                                         ; preds = %if.then27, %land.lhs.true25, %if.end23
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4643
  %live_ranges35 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 20, !dbg !4643
  %42 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges35, align 8, !dbg !4643
  %call36 = call %struct.ira_allocno_live_range* @ira_copy_allocno_live_range_list(%struct.ira_allocno_live_range* %42), !dbg !4644
  store %struct.ira_allocno_live_range* %call36, %struct.ira_allocno_live_range** %r, align 8, !dbg !4645
  %43 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4646
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4647
  call void @change_allocno_in_range_list(%struct.ira_allocno_live_range* %43, %struct.ira_allocno* %44), !dbg !4648
  %45 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !4649
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4650
  %live_ranges37 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 20, !dbg !4650
  %47 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges37, align 8, !dbg !4650
  %call38 = call %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range* %45, %struct.ira_allocno_live_range* %47), !dbg !4651
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4652
  %live_ranges39 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 20, !dbg !4652
  store %struct.ira_allocno_live_range* %call38, %struct.ira_allocno_live_range** %live_ranges39, align 8, !dbg !4653
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4654
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %49, i32 0, i32 27, !dbg !4654
  %50 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !4654
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4654
  %total_conflict_hard_regs40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 27, !dbg !4654
  %52 = load i64, i64* %total_conflict_hard_regs40, align 8, !dbg !4654
  %or = or i64 %52, %50, !dbg !4654
  store i64 %or, i64* %total_conflict_hard_regs40, align 8, !dbg !4654
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4655
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 31, !dbg !4655
  %bf.load41 = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !4655
  %bf.lshr = lshr i16 %bf.load41, 5, !dbg !4655
  %bf.clear42 = and i16 %bf.lshr, 1, !dbg !4655
  %bf.cast43 = zext i16 %bf.clear42 to i32, !dbg !4655
  %tobool44 = icmp ne i32 %bf.cast43, 0, !dbg !4655
  br i1 %tobool44, label %if.then45, label %if.end49, !dbg !4657

if.then45:                                        ; preds = %if.end34
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4658
  %total_no_stack_reg_p46 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %54, i32 0, i32 31, !dbg !4658
  %bf.load47 = load i16, i16* %total_no_stack_reg_p46, align 4, !dbg !4659
  %bf.clear48 = and i16 %bf.load47, -33, !dbg !4659
  %bf.set = or i16 %bf.clear48, 32, !dbg !4659
  store i16 %bf.set, i16* %total_no_stack_reg_p46, align 4, !dbg !4659
  br label %if.end49, !dbg !4658

if.end49:                                         ; preds = %if.then45, %if.end34
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4660
  %call_freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 29, !dbg !4660
  %56 = load i32, i32* %call_freq, align 4, !dbg !4660
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4661
  %call_freq50 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 29, !dbg !4661
  %58 = load i32, i32* %call_freq50, align 4, !dbg !4662
  %add = add nsw i32 %58, %56, !dbg !4662
  store i32 %add, i32* %call_freq50, align 4, !dbg !4662
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4663
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 30, !dbg !4663
  %60 = load i32, i32* %calls_crossed_num, align 8, !dbg !4663
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4664
  %calls_crossed_num51 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 30, !dbg !4664
  %62 = load i32, i32* %calls_crossed_num51, align 8, !dbg !4665
  %add52 = add nsw i32 %62, %60, !dbg !4665
  store i32 %add52, i32* %calls_crossed_num51, align 8, !dbg !4665
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4666
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %63, i32 0, i32 14, !dbg !4666
  %64 = load i32, i32* %excess_pressure_points_num, align 4, !dbg !4666
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !4667
  %excess_pressure_points_num53 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 14, !dbg !4667
  %66 = load i32, i32* %excess_pressure_points_num53, align 4, !dbg !4668
  %add54 = add nsw i32 %66, %64, !dbg !4668
  store i32 %add54, i32* %excess_pressure_points_num53, align 4, !dbg !4668
  store i8 1, i8* %merged_p, align 1, !dbg !4669
  br label %for.inc55, !dbg !4670

for.inc55:                                        ; preds = %if.end49, %if.then22, %if.then
  %67 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4671
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %67, i32 0, i32 5, !dbg !4671
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !4671
  store %struct.ira_allocno* %68, %struct.ira_allocno** %a, align 8, !dbg !4672
  br label %for.cond, !dbg !4673, !llvm.loop !4674

for.end56:                                        ; preds = %for.cond
  %69 = load i8, i8* %merged_p, align 1, !dbg !4676
  ret i8 %69, !dbg !4677
}

declare dso_local void @ira_rebuild_start_finish_chains() #2

; Function Attrs: noinline nounwind uwtable
define internal void @clear_allocno_conflicts(%struct.ira_allocno* %a) #0 !dbg !4678 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %nw = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !4679, metadata !DIExpression()), !dbg !4680
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4681
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !4681
  %bf.load = load i16, i16* %conflict_vec_p, align 4, !dbg !4681
  %bf.lshr = lshr i16 %bf.load, 11, !dbg !4681
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4681
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4681
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4681
  br i1 %tobool, label %if.then, label %if.else, !dbg !4683

if.then:                                          ; preds = %entry
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4684
  %conflict_allocnos_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 28, !dbg !4684
  store i32 0, i32* %conflict_allocnos_num, align 8, !dbg !4686
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4687
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 23, !dbg !4687
  %3 = load i8*, i8** %conflict_allocno_array, align 8, !dbg !4687
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !4688
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 0, !dbg !4689
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx, align 8, !dbg !4690
  br label %if.end3, !dbg !4691

if.else:                                          ; preds = %entry
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4692
  %conflict_allocno_array_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 25, !dbg !4692
  %6 = load i32, i32* %conflict_allocno_array_size, align 4, !dbg !4692
  %cmp = icmp ne i32 %6, 0, !dbg !4694
  br i1 %cmp, label %if.then1, label %if.end, !dbg !4695

if.then1:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %nw, metadata !4696, metadata !DIExpression()), !dbg !4698
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4699
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 22, !dbg !4699
  %8 = load i32, i32* %max, align 4, !dbg !4699
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4700
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 21, !dbg !4700
  %10 = load i32, i32* %min, align 8, !dbg !4700
  %sub = sub nsw i32 %8, %10, !dbg !4701
  %div = sdiv i32 %sub, 64, !dbg !4702
  %add = add nsw i32 %div, 1, !dbg !4703
  store i32 %add, i32* %nw, align 4, !dbg !4704
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4705
  %conflict_allocno_array2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 23, !dbg !4705
  %12 = load i8*, i8** %conflict_allocno_array2, align 8, !dbg !4705
  %13 = load i32, i32* %nw, align 4, !dbg !4706
  %conv = sext i32 %13 to i64, !dbg !4706
  %mul = mul i64 %conv, 8, !dbg !4707
  call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %mul, i1 false), !dbg !4708
  br label %if.end, !dbg !4709

if.end:                                           ; preds = %if.then1, %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then
  ret void, !dbg !4710
}

declare dso_local %struct.sparseset_def* @sparseset_alloc(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sparseset_set_bit(%struct.sparseset_def* %s, i32 %e) #0 !dbg !4711 {
entry:
  %s.addr = alloca %struct.sparseset_def*, align 8
  %e.addr = alloca i32, align 4
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !4714, metadata !DIExpression()), !dbg !4715
  store i32 %e, i32* %e.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %e.addr, metadata !4716, metadata !DIExpression()), !dbg !4717
  %0 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4718
  %1 = load i32, i32* %e.addr, align 4, !dbg !4720
  %call = call zeroext i8 @sparseset_bit_p(%struct.sparseset_def* %0, i32 %1), !dbg !4721
  %tobool = icmp ne i8 %call, 0, !dbg !4721
  br i1 %tobool, label %if.end, label %if.then, !dbg !4722

if.then:                                          ; preds = %entry
  %2 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4723
  %3 = load i32, i32* %e.addr, align 4, !dbg !4724
  %4 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4725
  %members = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %4, i32 0, i32 2, !dbg !4726
  %5 = load i32, i32* %members, align 8, !dbg !4727
  %inc = add i32 %5, 1, !dbg !4727
  store i32 %inc, i32* %members, align 8, !dbg !4727
  call void @sparseset_insert_bit(%struct.sparseset_def* %2, i32 %3, i32 %5), !dbg !4728
  br label %if.end, !dbg !4728

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4729
}

; Function Attrs: noinline nounwind uwtable
define internal void @sparseset_iter_init(%struct.sparseset_def* %s) #0 !dbg !4730 {
entry:
  %s.addr = alloca %struct.sparseset_def*, align 8
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !4733, metadata !DIExpression()), !dbg !4734
  %0 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4735
  %iter = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %0, i32 0, i32 4, !dbg !4736
  store i32 0, i32* %iter, align 8, !dbg !4737
  %1 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4738
  %iter_inc = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %1, i32 0, i32 5, !dbg !4739
  store i8 1, i8* %iter_inc, align 4, !dbg !4740
  %2 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4741
  %iterating = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %2, i32 0, i32 6, !dbg !4742
  store i8 1, i8* %iterating, align 1, !dbg !4743
  ret void, !dbg !4744
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sparseset_iter_p(%struct.sparseset_def* %s) #0 !dbg !4745 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %struct.sparseset_def*, align 8
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !4748, metadata !DIExpression()), !dbg !4749
  %0 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4750
  %iterating = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %0, i32 0, i32 6, !dbg !4752
  %1 = load i8, i8* %iterating, align 1, !dbg !4752
  %conv = zext i8 %1 to i32, !dbg !4750
  %tobool = icmp ne i32 %conv, 0, !dbg !4750
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4753

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4754
  %iter = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %2, i32 0, i32 4, !dbg !4755
  %3 = load i32, i32* %iter, align 8, !dbg !4755
  %4 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4756
  %members = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %4, i32 0, i32 2, !dbg !4757
  %5 = load i32, i32* %members, align 8, !dbg !4757
  %cmp = icmp ult i32 %3, %5, !dbg !4758
  br i1 %cmp, label %if.then, label %if.else, !dbg !4759

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4760
  br label %return, !dbg !4760

if.else:                                          ; preds = %land.lhs.true, %entry
  %6 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4761
  %iterating2 = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %6, i32 0, i32 6, !dbg !4762
  store i8 0, i8* %iterating2, align 1, !dbg !4763
  store i8 0, i8* %retval, align 1, !dbg !4764
  br label %return, !dbg !4764

return:                                           ; preds = %if.else, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !4765
  ret i8 %7, !dbg !4765
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sparseset_iter_elm(%struct.sparseset_def* %s) #0 !dbg !4766 {
entry:
  %s.addr = alloca %struct.sparseset_def*, align 8
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !4769, metadata !DIExpression()), !dbg !4770
  %0 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4771
  %dense = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %0, i32 0, i32 0, !dbg !4772
  %1 = load i32*, i32** %dense, align 8, !dbg !4772
  %2 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4773
  %iter = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %2, i32 0, i32 4, !dbg !4774
  %3 = load i32, i32* %iter, align 8, !dbg !4774
  %idxprom = zext i32 %3 to i64, !dbg !4771
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !4771
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4771
  ret i32 %4, !dbg !4775
}

; Function Attrs: noinline nounwind uwtable
define internal void @sparseset_iter_next(%struct.sparseset_def* %s) #0 !dbg !4776 {
entry:
  %s.addr = alloca %struct.sparseset_def*, align 8
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !4777, metadata !DIExpression()), !dbg !4778
  %0 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4779
  %iter_inc = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %0, i32 0, i32 5, !dbg !4780
  %1 = load i8, i8* %iter_inc, align 4, !dbg !4780
  %conv = zext i8 %1 to i32, !dbg !4779
  %2 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4781
  %iter = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %2, i32 0, i32 4, !dbg !4782
  %3 = load i32, i32* %iter, align 8, !dbg !4783
  %add = add i32 %3, %conv, !dbg !4783
  store i32 %add, i32* %iter, align 8, !dbg !4783
  %4 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !4784
  %iter_inc1 = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %4, i32 0, i32 5, !dbg !4785
  store i8 1, i8* %iter_inc1, align 4, !dbg !4786
  ret void, !dbg !4787
}

declare dso_local void @sparseset_clear_bit(%struct.sparseset_def*, i32) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compress_conflict_vecs() #0 !dbg !4788 {
entry:
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !4789, metadata !DIExpression()), !dbg !4790
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !4791, metadata !DIExpression()), !dbg !4792
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4793
  %conv = sext i32 %0 to i64, !dbg !4793
  %mul = mul i64 4, %conv, !dbg !4794
  %call = call i8* @ira_allocate(i64 %mul), !dbg !4795
  %1 = bitcast i8* %call to i32*, !dbg !4796
  store i32* %1, i32** @allocno_conflict_check, align 8, !dbg !4797
  %2 = load i32*, i32** @allocno_conflict_check, align 8, !dbg !4798
  %3 = bitcast i32* %2 to i8*, !dbg !4799
  %4 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4800
  %conv1 = sext i32 %4 to i64, !dbg !4800
  %mul2 = mul i64 4, %conv1, !dbg !4801
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 %mul2, i1 false), !dbg !4799
  store i32 0, i32* @curr_allocno_conflict_check_tick, align 4, !dbg !4802
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !4803
  br label %for.cond, !dbg !4803

for.cond:                                         ; preds = %if.end, %entry
  %call3 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !4805
  %tobool = icmp ne i8 %call3, 0, !dbg !4803
  br i1 %tobool, label %for.body, label %for.end, !dbg !4803

for.body:                                         ; preds = %for.cond
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4807
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 31, !dbg !4807
  %bf.load = load i16, i16* %conflict_vec_p, align 4, !dbg !4807
  %bf.lshr = lshr i16 %bf.load, 11, !dbg !4807
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4807
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4807
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !4807
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4809

if.then:                                          ; preds = %for.body
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4810
  call void @compress_allocno_conflict_vec(%struct.ira_allocno* %6), !dbg !4811
  br label %if.end, !dbg !4811

if.end:                                           ; preds = %if.then, %for.body
  br label %for.cond, !dbg !4805, !llvm.loop !4812

for.end:                                          ; preds = %for.cond
  %7 = load i32*, i32** @allocno_conflict_check, align 8, !dbg !4814
  %8 = bitcast i32* %7 to i8*, !dbg !4814
  call void @ira_free(i8* %8), !dbg !4815
  ret void, !dbg !4816
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_copy_iter_init(%struct.ira_copy_iterator* %i) #0 !dbg !4817 {
entry:
  %i.addr = alloca %struct.ira_copy_iterator*, align 8
  store %struct.ira_copy_iterator* %i, %struct.ira_copy_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_copy_iterator** %i.addr, metadata !4821, metadata !DIExpression()), !dbg !4822
  %0 = load %struct.ira_copy_iterator*, %struct.ira_copy_iterator** %i.addr, align 8, !dbg !4823
  %n = getelementptr inbounds %struct.ira_copy_iterator, %struct.ira_copy_iterator* %0, i32 0, i32 0, !dbg !4824
  store i32 0, i32* %n, align 4, !dbg !4825
  ret void, !dbg !4826
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_copy_iter_cond(%struct.ira_copy_iterator* %i, %struct.ira_allocno_copy** %cp) #0 !dbg !4827 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.ira_copy_iterator*, align 8
  %cp.addr = alloca %struct.ira_allocno_copy**, align 8
  %n = alloca i32, align 4
  store %struct.ira_copy_iterator* %i, %struct.ira_copy_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_copy_iterator** %i.addr, metadata !4830, metadata !DIExpression()), !dbg !4831
  store %struct.ira_allocno_copy** %cp, %struct.ira_allocno_copy*** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy*** %cp.addr, metadata !4832, metadata !DIExpression()), !dbg !4833
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4834, metadata !DIExpression()), !dbg !4835
  %0 = load %struct.ira_copy_iterator*, %struct.ira_copy_iterator** %i.addr, align 8, !dbg !4836
  %n1 = getelementptr inbounds %struct.ira_copy_iterator, %struct.ira_copy_iterator* %0, i32 0, i32 0, !dbg !4838
  %1 = load i32, i32* %n1, align 4, !dbg !4838
  store i32 %1, i32* %n, align 4, !dbg !4839
  br label %for.cond, !dbg !4840

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %n, align 4, !dbg !4841
  %3 = load i32, i32* @ira_copies_num, align 4, !dbg !4843
  %cmp = icmp slt i32 %2, %3, !dbg !4844
  br i1 %cmp, label %for.body, label %for.end, !dbg !4845

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** @ira_copies, align 8, !dbg !4846
  %5 = load i32, i32* %n, align 4, !dbg !4848
  %idxprom = sext i32 %5 to i64, !dbg !4846
  %arrayidx = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %4, i64 %idxprom, !dbg !4846
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %arrayidx, align 8, !dbg !4846
  %cmp2 = icmp ne %struct.ira_allocno_copy* %6, null, !dbg !4849
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4850

if.then:                                          ; preds = %for.body
  %7 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** @ira_copies, align 8, !dbg !4851
  %8 = load i32, i32* %n, align 4, !dbg !4853
  %idxprom3 = sext i32 %8 to i64, !dbg !4851
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %7, i64 %idxprom3, !dbg !4851
  %9 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %arrayidx4, align 8, !dbg !4851
  %10 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %cp.addr, align 8, !dbg !4854
  store %struct.ira_allocno_copy* %9, %struct.ira_allocno_copy** %10, align 8, !dbg !4855
  %11 = load i32, i32* %n, align 4, !dbg !4856
  %add = add nsw i32 %11, 1, !dbg !4857
  %12 = load %struct.ira_copy_iterator*, %struct.ira_copy_iterator** %i.addr, align 8, !dbg !4858
  %n5 = getelementptr inbounds %struct.ira_copy_iterator, %struct.ira_copy_iterator* %12, i32 0, i32 0, !dbg !4859
  store i32 %add, i32* %n5, align 4, !dbg !4860
  store i8 1, i8* %retval, align 1, !dbg !4861
  br label %return, !dbg !4861

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4862

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %n, align 4, !dbg !4863
  %inc = add nsw i32 %13, 1, !dbg !4863
  store i32 %inc, i32* %n, align 4, !dbg !4863
  br label %for.cond, !dbg !4864, !llvm.loop !4865

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4867
  br label %return, !dbg !4867

return:                                           ; preds = %for.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !4868
  ret i8 %14, !dbg !4868
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_allocno(%struct.ira_allocno* %a) #0 !dbg !4869 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !4870, metadata !DIExpression()), !dbg !4871
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !4872, metadata !DIExpression()), !dbg !4873
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4874
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !4874
  %1 = load i32, i32* %cover_class1, align 8, !dbg !4874
  store i32 %1, i32* %cover_class, align 4, !dbg !4873
  %2 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !4875
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4876
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 0, !dbg !4876
  %4 = load i32, i32* %num, align 8, !dbg !4876
  %idxprom = sext i32 %4 to i64, !dbg !4875
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %2, i64 %idxprom, !dbg !4875
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx, align 8, !dbg !4877
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !4878
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4879
  %conflict_id = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 24, !dbg !4879
  %7 = load i32, i32* %conflict_id, align 8, !dbg !4879
  %idxprom2 = sext i32 %7 to i64, !dbg !4878
  %arrayidx3 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %5, i64 %idxprom2, !dbg !4878
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx3, align 8, !dbg !4880
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4881
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 23, !dbg !4881
  %9 = load i8*, i8** %conflict_allocno_array, align 8, !dbg !4881
  %cmp = icmp ne i8* %9, null, !dbg !4883
  br i1 %cmp, label %if.then, label %if.end, !dbg !4884

if.then:                                          ; preds = %entry
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4885
  %conflict_allocno_array4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 23, !dbg !4885
  %11 = load i8*, i8** %conflict_allocno_array4, align 8, !dbg !4885
  call void @ira_free(i8* %11), !dbg !4886
  br label %if.end, !dbg !4886

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4887
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 33, !dbg !4887
  %13 = load i32*, i32** %hard_reg_costs, align 8, !dbg !4887
  %cmp5 = icmp ne i32* %13, null, !dbg !4889
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !4890

if.then6:                                         ; preds = %if.end
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4891
  %hard_reg_costs7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 33, !dbg !4891
  %15 = load i32*, i32** %hard_reg_costs7, align 8, !dbg !4891
  %16 = load i32, i32* %cover_class, align 4, !dbg !4892
  call void @ira_free_cost_vector(i32* %15, i32 %16), !dbg !4893
  br label %if.end8, !dbg !4893

if.end8:                                          ; preds = %if.then6, %if.end
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4894
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 35, !dbg !4894
  %18 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !4894
  %cmp9 = icmp ne i32* %18, null, !dbg !4896
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !4897

if.then10:                                        ; preds = %if.end8
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4898
  %conflict_hard_reg_costs11 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 35, !dbg !4898
  %20 = load i32*, i32** %conflict_hard_reg_costs11, align 8, !dbg !4898
  %21 = load i32, i32* %cover_class, align 4, !dbg !4899
  call void @ira_free_cost_vector(i32* %20, i32 %21), !dbg !4900
  br label %if.end12, !dbg !4900

if.end12:                                         ; preds = %if.then10, %if.end8
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4901
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 34, !dbg !4901
  %23 = load i32*, i32** %updated_hard_reg_costs, align 8, !dbg !4901
  %cmp13 = icmp ne i32* %23, null, !dbg !4903
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !4904

if.then14:                                        ; preds = %if.end12
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4905
  %updated_hard_reg_costs15 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 34, !dbg !4905
  %25 = load i32*, i32** %updated_hard_reg_costs15, align 8, !dbg !4905
  %26 = load i32, i32* %cover_class, align 4, !dbg !4906
  call void @ira_free_cost_vector(i32* %25, i32 %26), !dbg !4907
  br label %if.end16, !dbg !4907

if.end16:                                         ; preds = %if.then14, %if.end12
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4908
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 36, !dbg !4908
  %28 = load i32*, i32** %updated_conflict_hard_reg_costs, align 8, !dbg !4908
  %cmp17 = icmp ne i32* %28, null, !dbg !4910
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !4911

if.then18:                                        ; preds = %if.end16
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4912
  %updated_conflict_hard_reg_costs19 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 36, !dbg !4912
  %30 = load i32*, i32** %updated_conflict_hard_reg_costs19, align 8, !dbg !4912
  %31 = load i32, i32* %cover_class, align 4, !dbg !4913
  call void @ira_free_cost_vector(i32* %30, i32 %31), !dbg !4914
  br label %if.end20, !dbg !4914

if.end20:                                         ; preds = %if.then18, %if.end16
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4915
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 20, !dbg !4915
  %33 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !4915
  call void @ira_finish_allocno_live_range_list(%struct.ira_allocno_live_range* %33), !dbg !4916
  %34 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_pool, align 8, !dbg !4917
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4918
  %36 = bitcast %struct.ira_allocno* %35 to i8*, !dbg !4918
  call void @pool_free(%struct.alloc_pool_def* %34, i8* %36), !dbg !4919
  ret void, !dbg !4920
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_copy(%struct.ira_allocno_copy* %cp) #0 !dbg !4921 {
entry:
  %cp.addr = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno_copy* %cp, %struct.ira_allocno_copy** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp.addr, metadata !4922, metadata !DIExpression()), !dbg !4923
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @copy_pool, align 8, !dbg !4924
  %1 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp.addr, align 8, !dbg !4925
  %2 = bitcast %struct.ira_allocno_copy* %1 to i8*, !dbg !4925
  call void @pool_free(%struct.alloc_pool_def* %0, i8* %2), !dbg !4926
  ret void, !dbg !4927
}

; Function Attrs: noinline nounwind uwtable
define internal void @rebuild_regno_allocno_maps() #0 !dbg !4928 {
entry:
  %l = alloca i32, align 4
  %max_regno = alloca i32, align 4
  %regno = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %loop_tree_node = alloca %struct.ira_loop_tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %l, metadata !4929, metadata !DIExpression()), !dbg !4930
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !4931, metadata !DIExpression()), !dbg !4932
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4933, metadata !DIExpression()), !dbg !4934
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !4935, metadata !DIExpression()), !dbg !4936
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node, metadata !4937, metadata !DIExpression()), !dbg !4938
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4939, metadata !DIExpression()), !dbg !4940
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !4941, metadata !DIExpression()), !dbg !4942
  %call = call i32 @max_reg_num(), !dbg !4943
  store i32 %call, i32* %max_regno, align 4, !dbg !4944
  store i32 0, i32* %l, align 4, !dbg !4945
  br label %for.cond, !dbg !4947

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !4948
  %tobool = icmp ne %struct.VEC_loop_p_gc* %0, null, !dbg !4948
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4948

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !4948
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i32 0, i32 0, !dbg !4948
  br label %cond.end, !dbg !4948

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4948

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4948
  %2 = load i32, i32* %l, align 4, !dbg !4948
  %call1 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %2, %struct.loop** %loop), !dbg !4948
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4950
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4950

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !4951
  %4 = load i32, i32* %l, align 4, !dbg !4953
  %idxprom = zext i32 %4 to i64, !dbg !4951
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i64 %idxprom, !dbg !4951
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !4954
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !4954
  %cmp = icmp ne %struct.ira_allocno** %5, null, !dbg !4955
  br i1 %cmp, label %if.then, label %if.end, !dbg !4956

if.then:                                          ; preds = %for.body
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !4957
  %7 = load i32, i32* %l, align 4, !dbg !4959
  %idxprom3 = zext i32 %7 to i64, !dbg !4957
  %arrayidx4 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i64 %idxprom3, !dbg !4957
  %regno_allocno_map5 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx4, i32 0, i32 9, !dbg !4960
  %8 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map5, align 8, !dbg !4960
  %9 = bitcast %struct.ira_allocno** %8 to i8*, !dbg !4957
  call void @ira_free(i8* %9), !dbg !4961
  %10 = load i32, i32* %max_regno, align 4, !dbg !4962
  %conv = sext i32 %10 to i64, !dbg !4962
  %mul = mul i64 8, %conv, !dbg !4963
  %call6 = call i8* @ira_allocate(i64 %mul), !dbg !4964
  %11 = bitcast i8* %call6 to %struct.ira_allocno**, !dbg !4965
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !4966
  %13 = load i32, i32* %l, align 4, !dbg !4967
  %idxprom7 = zext i32 %13 to i64, !dbg !4966
  %arrayidx8 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %12, i64 %idxprom7, !dbg !4966
  %regno_allocno_map9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx8, i32 0, i32 9, !dbg !4968
  store %struct.ira_allocno** %11, %struct.ira_allocno*** %regno_allocno_map9, align 8, !dbg !4969
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !4970
  %15 = load i32, i32* %l, align 4, !dbg !4971
  %idxprom10 = zext i32 %15 to i64, !dbg !4970
  %arrayidx11 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i64 %idxprom10, !dbg !4970
  %regno_allocno_map12 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx11, i32 0, i32 9, !dbg !4972
  %16 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map12, align 8, !dbg !4972
  %17 = bitcast %struct.ira_allocno** %16 to i8*, !dbg !4973
  %18 = load i32, i32* %max_regno, align 4, !dbg !4974
  %conv13 = sext i32 %18 to i64, !dbg !4974
  %mul14 = mul i64 8, %conv13, !dbg !4975
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %mul14, i1 false), !dbg !4973
  br label %if.end, !dbg !4976

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4977

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %l, align 4, !dbg !4978
  %inc = add i32 %19, 1, !dbg !4978
  store i32 %inc, i32* %l, align 4, !dbg !4978
  br label %for.cond, !dbg !4979, !llvm.loop !4980

for.end:                                          ; preds = %cond.end
  %20 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4982
  %21 = bitcast %struct.ira_allocno** %20 to i8*, !dbg !4982
  call void @ira_free(i8* %21), !dbg !4983
  %22 = load i32, i32* %max_regno, align 4, !dbg !4984
  %conv15 = sext i32 %22 to i64, !dbg !4984
  %mul16 = mul i64 %conv15, 8, !dbg !4985
  %call17 = call i8* @ira_allocate(i64 %mul16), !dbg !4986
  %23 = bitcast i8* %call17 to %struct.ira_allocno**, !dbg !4987
  store %struct.ira_allocno** %23, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4988
  %24 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4989
  %25 = bitcast %struct.ira_allocno** %24 to i8*, !dbg !4990
  %26 = load i32, i32* %max_regno, align 4, !dbg !4991
  %conv18 = sext i32 %26 to i64, !dbg !4991
  %mul19 = mul i64 %conv18, 8, !dbg !4992
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 %mul19, i1 false), !dbg !4990
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !4993
  br label %for.cond20, !dbg !4993

for.cond20:                                       ; preds = %if.end43, %if.then26, %for.end
  %call21 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !4995
  %tobool22 = icmp ne i8 %call21, 0, !dbg !4993
  br i1 %tobool22, label %for.body23, label %for.end44, !dbg !4993

for.body23:                                       ; preds = %for.cond20
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4997
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 17, !dbg !4997
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !4997
  %cmp24 = icmp ne %struct.ira_allocno* %28, null, !dbg !5000
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !5001

if.then26:                                        ; preds = %for.body23
  br label %for.cond20, !dbg !5002, !llvm.loop !5003

if.end27:                                         ; preds = %for.body23
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5005
  %regno28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 1, !dbg !5005
  %30 = load i32, i32* %regno28, align 4, !dbg !5005
  store i32 %30, i32* %regno, align 4, !dbg !5006
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5007
  %loop_tree_node29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 6, !dbg !5007
  %32 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node29, align 8, !dbg !5007
  store %struct.ira_loop_tree_node* %32, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !5008
  %33 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5009
  %34 = load i32, i32* %regno, align 4, !dbg !5010
  %idxprom30 = sext i32 %34 to i64, !dbg !5009
  %arrayidx31 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %33, i64 %idxprom30, !dbg !5009
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx31, align 8, !dbg !5009
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5011
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 5, !dbg !5011
  store %struct.ira_allocno* %35, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !5012
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5013
  %38 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5014
  %39 = load i32, i32* %regno, align 4, !dbg !5015
  %idxprom32 = sext i32 %39 to i64, !dbg !5014
  %arrayidx33 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %38, i64 %idxprom32, !dbg !5014
  store %struct.ira_allocno* %37, %struct.ira_allocno** %arrayidx33, align 8, !dbg !5016
  %40 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !5017
  %regno_allocno_map34 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %40, i32 0, i32 9, !dbg !5019
  %41 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map34, align 8, !dbg !5019
  %42 = load i32, i32* %regno, align 4, !dbg !5020
  %idxprom35 = sext i32 %42 to i64, !dbg !5017
  %arrayidx36 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %41, i64 %idxprom35, !dbg !5017
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx36, align 8, !dbg !5017
  %cmp37 = icmp eq %struct.ira_allocno* %43, null, !dbg !5021
  br i1 %cmp37, label %if.then39, label %if.end43, !dbg !5022

if.then39:                                        ; preds = %if.end27
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5023
  %45 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !5024
  %regno_allocno_map40 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %45, i32 0, i32 9, !dbg !5025
  %46 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map40, align 8, !dbg !5025
  %47 = load i32, i32* %regno, align 4, !dbg !5026
  %idxprom41 = sext i32 %47 to i64, !dbg !5024
  %arrayidx42 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %46, i64 %idxprom41, !dbg !5024
  store %struct.ira_allocno* %44, %struct.ira_allocno** %arrayidx42, align 8, !dbg !5027
  br label %if.end43, !dbg !5024

if.end43:                                         ; preds = %if.then39, %if.end27
  br label %for.cond20, !dbg !4995, !llvm.loop !5003

for.end44:                                        ; preds = %for.cond20
  ret void, !dbg !5028
}

declare dso_local void @ira_compress_allocno_live_ranges() #2

declare dso_local void @ira_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ira_build(i8 zeroext %loops_p) #0 !dbg !5029 {
entry:
  %loops_p.addr = alloca i8, align 1
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %n = alloca i32, align 4
  %nr = alloca i32, align 4
  %a20 = alloca %struct.ira_allocno*, align 8
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %ai21 = alloca %struct.ira_allocno_iterator, align 4
  store i8 %loops_p, i8* %loops_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %loops_p.addr, metadata !5032, metadata !DIExpression()), !dbg !5033
  call void @df_analyze(), !dbg !5034
  call void @initiate_cost_vectors(), !dbg !5035
  call void @initiate_allocnos(), !dbg !5036
  call void @initiate_copies(), !dbg !5037
  %0 = load i8, i8* %loops_p.addr, align 1, !dbg !5038
  call void @create_loop_tree_nodes(i8 zeroext %0), !dbg !5039
  call void @form_loop_tree(), !dbg !5040
  call void @create_allocnos(), !dbg !5041
  call void @ira_costs(), !dbg !5042
  call void @ira_create_allocno_live_ranges(), !dbg !5043
  call void @remove_unnecessary_regions(i8 zeroext 0), !dbg !5044
  call void @ira_compress_allocno_live_ranges(), !dbg !5045
  call void @update_bad_spill_attribute(), !dbg !5046
  %call = call zeroext i8 @more_one_region_p(), !dbg !5047
  store i8 %call, i8* %loops_p.addr, align 1, !dbg !5048
  %1 = load i8, i8* %loops_p.addr, align 1, !dbg !5049
  %tobool = icmp ne i8 %1, 0, !dbg !5049
  br i1 %tobool, label %if.then, label %if.end, !dbg !5051

if.then:                                          ; preds = %entry
  call void @propagate_allocno_info(), !dbg !5052
  call void @create_caps(), !dbg !5054
  br label %if.end, !dbg !5055

if.end:                                           ; preds = %if.then, %entry
  call void @ira_tune_allocno_costs_and_cover_classes(), !dbg !5056
  call void @setup_min_max_allocno_live_range_point(), !dbg !5057
  call void @sort_conflict_id_allocno_map(), !dbg !5058
  call void @setup_min_max_conflict_allocno_ids(), !dbg !5059
  call void @ira_build_conflicts(), !dbg !5060
  %2 = load i8, i8* @ira_conflicts_p, align 1, !dbg !5061
  %tobool1 = icmp ne i8 %2, 0, !dbg !5061
  br i1 %tobool1, label %if.end11, label %if.then2, !dbg !5063

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5064, metadata !DIExpression()), !dbg !5066
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !5067, metadata !DIExpression()), !dbg !5068
  %3 = load i8, i8* %loops_p.addr, align 1, !dbg !5069
  %tobool3 = icmp ne i8 %3, 0, !dbg !5069
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !5071

if.then4:                                         ; preds = %if.then2
  call void @remove_unnecessary_regions(i8 zeroext 1), !dbg !5072
  store i8 0, i8* %loops_p.addr, align 1, !dbg !5074
  br label %if.end5, !dbg !5075

if.end5:                                          ; preds = %if.then4, %if.then2
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5076
  br label %for.cond, !dbg !5076

for.cond:                                         ; preds = %if.end10, %if.end5
  %call6 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5078
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5076
  br i1 %tobool7, label %for.body, label %for.end, !dbg !5076

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5080
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 30, !dbg !5080
  %5 = load i32, i32* %calls_crossed_num, align 8, !dbg !5080
  %cmp = icmp ne i32 %5, 0, !dbg !5082
  br i1 %cmp, label %if.then8, label %if.end10, !dbg !5083

if.then8:                                         ; preds = %for.body
  %6 = load i64, i64* @call_used_reg_set, align 8, !dbg !5084
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5084
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 27, !dbg !5084
  %8 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !5084
  %or = or i64 %8, %6, !dbg !5084
  store i64 %or, i64* %total_conflict_hard_regs, align 8, !dbg !5084
  %9 = load i64, i64* @call_used_reg_set, align 8, !dbg !5086
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5086
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 26, !dbg !5086
  %11 = load i64, i64* %conflict_hard_regs, align 8, !dbg !5086
  %or9 = or i64 %11, %9, !dbg !5086
  store i64 %or9, i64* %conflict_hard_regs, align 8, !dbg !5086
  br label %if.end10, !dbg !5087

if.end10:                                         ; preds = %if.then8, %for.body
  br label %for.cond, !dbg !5078, !llvm.loop !5088

for.end:                                          ; preds = %for.cond
  br label %if.end11, !dbg !5090

if.end11:                                         ; preds = %for.end, %if.end
  %12 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !5091
  %cmp12 = icmp sgt i32 %12, 2, !dbg !5093
  br i1 %cmp12, label %land.lhs.true, label %if.end15, !dbg !5094

land.lhs.true:                                    ; preds = %if.end11
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5095
  %cmp13 = icmp ne %struct._IO_FILE* %13, null, !dbg !5096
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !5097

if.then14:                                        ; preds = %land.lhs.true
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5098
  call void @print_copies(%struct._IO_FILE* %14), !dbg !5099
  br label %if.end15, !dbg !5099

if.end15:                                         ; preds = %if.then14, %land.lhs.true, %if.end11
  %15 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !5100
  %cmp16 = icmp sgt i32 %15, 0, !dbg !5102
  br i1 %cmp16, label %land.lhs.true17, label %if.end40, !dbg !5103

land.lhs.true17:                                  ; preds = %if.end15
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5104
  %cmp18 = icmp ne %struct._IO_FILE* %16, null, !dbg !5105
  br i1 %cmp18, label %if.then19, label %if.end40, !dbg !5106

if.then19:                                        ; preds = %land.lhs.true17
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5107, metadata !DIExpression()), !dbg !5109
  call void @llvm.dbg.declare(metadata i32* %nr, metadata !5110, metadata !DIExpression()), !dbg !5111
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a20, metadata !5112, metadata !DIExpression()), !dbg !5113
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !5114, metadata !DIExpression()), !dbg !5115
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai21, metadata !5116, metadata !DIExpression()), !dbg !5117
  store i32 0, i32* %n, align 4, !dbg !5118
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai21), !dbg !5119
  br label %for.cond22, !dbg !5119

for.cond22:                                       ; preds = %for.body25, %if.then19
  %call23 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai21, %struct.ira_allocno** %a20), !dbg !5121
  %tobool24 = icmp ne i8 %call23, 0, !dbg !5119
  br i1 %tobool24, label %for.body25, label %for.end26, !dbg !5119

for.body25:                                       ; preds = %for.cond22
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a20, align 8, !dbg !5123
  %conflict_allocnos_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 28, !dbg !5123
  %18 = load i32, i32* %conflict_allocnos_num, align 8, !dbg !5123
  %19 = load i32, i32* %n, align 4, !dbg !5124
  %add = add nsw i32 %19, %18, !dbg !5124
  store i32 %add, i32* %n, align 4, !dbg !5124
  br label %for.cond22, !dbg !5121, !llvm.loop !5125

for.end26:                                        ; preds = %for.cond22
  store i32 0, i32* %nr, align 4, !dbg !5127
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai21), !dbg !5128
  br label %for.cond27, !dbg !5128

for.cond27:                                       ; preds = %for.end34, %for.end26
  %call28 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai21, %struct.ira_allocno** %a20), !dbg !5130
  %tobool29 = icmp ne i8 %call28, 0, !dbg !5128
  br i1 %tobool29, label %for.body30, label %for.end35, !dbg !5128

for.body30:                                       ; preds = %for.cond27
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a20, align 8, !dbg !5132
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 20, !dbg !5132
  %21 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !5132
  store %struct.ira_allocno_live_range* %21, %struct.ira_allocno_live_range** %r, align 8, !dbg !5134
  br label %for.cond31, !dbg !5135

for.cond31:                                       ; preds = %for.inc, %for.body30
  %22 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5136
  %cmp32 = icmp ne %struct.ira_allocno_live_range* %22, null, !dbg !5138
  br i1 %cmp32, label %for.body33, label %for.end34, !dbg !5139

for.body33:                                       ; preds = %for.cond31
  %23 = load i32, i32* %nr, align 4, !dbg !5140
  %inc = add nsw i32 %23, 1, !dbg !5140
  store i32 %inc, i32* %nr, align 4, !dbg !5140
  br label %for.inc, !dbg !5141

for.inc:                                          ; preds = %for.body33
  %24 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5142
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %24, i32 0, i32 3, !dbg !5143
  %25 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !5143
  store %struct.ira_allocno_live_range* %25, %struct.ira_allocno_live_range** %r, align 8, !dbg !5144
  br label %for.cond31, !dbg !5145, !llvm.loop !5146

for.end34:                                        ; preds = %for.cond31
  br label %for.cond27, !dbg !5130, !llvm.loop !5148

for.end35:                                        ; preds = %for.cond27
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5150
  %27 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5151
  %tobool36 = icmp ne %struct.VEC_loop_p_gc* %27, null, !dbg !5151
  br i1 %tobool36, label %cond.true, label %cond.false, !dbg !5151

cond.true:                                        ; preds = %for.end35
  %28 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5151
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %28, i32 0, i32 0, !dbg !5151
  br label %cond.end, !dbg !5151

cond.false:                                       ; preds = %for.end35
  br label %cond.end, !dbg !5151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5151
  %call37 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5151
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5152
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !5152
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5152
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5152
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 3, !dbg !5152
  %31 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5152
  %32 = load i32, i32* @ira_max_point, align 4, !dbg !5153
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0), i32 %call37, i32 %31, i32 %32), !dbg !5154
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5155
  %34 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5156
  %35 = load i32, i32* @ira_copies_num, align 4, !dbg !5157
  %36 = load i32, i32* %n, align 4, !dbg !5158
  %37 = load i32, i32* %nr, align 4, !dbg !5159
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.10, i64 0, i64 0), i32 %34, i32 %35, i32 %36, i32 %37), !dbg !5160
  br label %if.end40, !dbg !5161

if.end40:                                         ; preds = %cond.end, %land.lhs.true17, %if.end15
  %38 = load i8, i8* %loops_p.addr, align 1, !dbg !5162
  ret i8 %38, !dbg !5163
}

declare dso_local void @df_analyze() #2

; Function Attrs: noinline nounwind uwtable
define internal void @initiate_cost_vectors() #0 !dbg !5164 {
entry:
  %i = alloca i32, align 4
  %cover_class = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5165, metadata !DIExpression()), !dbg !5166
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5167, metadata !DIExpression()), !dbg !5168
  store i32 0, i32* %i, align 4, !dbg !5169
  br label %for.cond, !dbg !5171

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5172
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5174
  %cmp = icmp slt i32 %0, %1, !dbg !5175
  br i1 %cmp, label %for.body, label %for.end, !dbg !5176

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !5177
  %idxprom = sext i32 %2 to i64, !dbg !5179
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !5179
  %3 = load i32, i32* %arrayidx, align 4, !dbg !5179
  store i32 %3, i32* %cover_class, align 4, !dbg !5180
  %4 = load i32, i32* %cover_class, align 4, !dbg !5181
  %idxprom1 = zext i32 %4 to i64, !dbg !5182
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom1, !dbg !5182
  %5 = load i32, i32* %arrayidx2, align 4, !dbg !5182
  %conv = sext i32 %5 to i64, !dbg !5182
  %mul = mul i64 4, %conv, !dbg !5183
  %call = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0), i64 %mul, i64 100), !dbg !5184
  %6 = load i32, i32* %cover_class, align 4, !dbg !5185
  %idxprom3 = zext i32 %6 to i64, !dbg !5186
  %arrayidx4 = getelementptr inbounds [27 x %struct.alloc_pool_def*], [27 x %struct.alloc_pool_def*]* @cost_vector_pool, i64 0, i64 %idxprom3, !dbg !5186
  store %struct.alloc_pool_def* %call, %struct.alloc_pool_def** %arrayidx4, align 8, !dbg !5187
  br label %for.inc, !dbg !5188

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !5189
  %inc = add nsw i32 %7, 1, !dbg !5189
  store i32 %inc, i32* %i, align 4, !dbg !5189
  br label %for.cond, !dbg !5190, !llvm.loop !5191

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5193
}

; Function Attrs: noinline nounwind uwtable
define internal void @initiate_allocnos() #0 !dbg !5194 {
entry:
  %call = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i64 0, i64 0), i64 40, i64 100), !dbg !5195
  store %struct.alloc_pool_def* %call, %struct.alloc_pool_def** @allocno_live_range_pool, align 8, !dbg !5196
  %call1 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i64 0, i64 0), i64 248, i64 100), !dbg !5197
  store %struct.alloc_pool_def* %call1, %struct.alloc_pool_def** @allocno_pool, align 8, !dbg !5198
  %call2 = call i32 @max_reg_num(), !dbg !5199
  %mul = mul nsw i32 %call2, 2, !dbg !5199
  %call3 = call %struct.VEC_ira_allocno_t_heap* @VEC_ira_allocno_t_heap_alloc(i32 %mul), !dbg !5199
  store %struct.VEC_ira_allocno_t_heap* %call3, %struct.VEC_ira_allocno_t_heap** @allocno_vec, align 8, !dbg !5200
  store %struct.ira_allocno** null, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !5201
  store i32 0, i32* @ira_allocnos_num, align 4, !dbg !5202
  %call4 = call i32 @max_reg_num(), !dbg !5203
  %mul5 = mul nsw i32 %call4, 2, !dbg !5203
  %call6 = call %struct.VEC_ira_allocno_t_heap* @VEC_ira_allocno_t_heap_alloc(i32 %mul5), !dbg !5203
  store %struct.VEC_ira_allocno_t_heap* %call6, %struct.VEC_ira_allocno_t_heap** @ira_conflict_id_allocno_map_vec, align 8, !dbg !5204
  store %struct.ira_allocno** null, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !5205
  %call7 = call i32 @max_reg_num(), !dbg !5206
  %conv = sext i32 %call7 to i64, !dbg !5206
  %mul8 = mul i64 %conv, 8, !dbg !5207
  %call9 = call i8* @ira_allocate(i64 %mul8), !dbg !5208
  %0 = bitcast i8* %call9 to %struct.ira_allocno**, !dbg !5209
  store %struct.ira_allocno** %0, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5210
  %1 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5211
  %2 = bitcast %struct.ira_allocno** %1 to i8*, !dbg !5212
  %call10 = call i32 @max_reg_num(), !dbg !5213
  %conv11 = sext i32 %call10 to i64, !dbg !5213
  %mul12 = mul i64 %conv11, 8, !dbg !5214
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 %mul12, i1 false), !dbg !5212
  ret void, !dbg !5215
}

; Function Attrs: noinline nounwind uwtable
define internal void @initiate_copies() #0 !dbg !5216 {
entry:
  %call = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0), i64 80, i64 100), !dbg !5217
  store %struct.alloc_pool_def* %call, %struct.alloc_pool_def** @copy_pool, align 8, !dbg !5218
  %call1 = call i32 @get_max_uid(), !dbg !5219
  %call2 = call %struct.VEC_ira_copy_t_heap* @VEC_ira_copy_t_heap_alloc(i32 %call1), !dbg !5219
  store %struct.VEC_ira_copy_t_heap* %call2, %struct.VEC_ira_copy_t_heap** @copy_vec, align 8, !dbg !5220
  store %struct.ira_allocno_copy** null, %struct.ira_allocno_copy*** @ira_copies, align 8, !dbg !5221
  store i32 0, i32* @ira_copies_num, align 4, !dbg !5222
  ret void, !dbg !5223
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_loop_tree_nodes(i8 zeroext %loops_p) #0 !dbg !5224 {
entry:
  %loops_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %max_regno = alloca i32, align 4
  %skip_p = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %edges = alloca %struct.VEC_edge_heap*, align 8
  %loop = alloca %struct.loop*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store i8 %loops_p, i8* %loops_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %loops_p.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5229, metadata !DIExpression()), !dbg !5230
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5231, metadata !DIExpression()), !dbg !5232
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !5233, metadata !DIExpression()), !dbg !5234
  call void @llvm.dbg.declare(metadata i8* %skip_p, metadata !5235, metadata !DIExpression()), !dbg !5236
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5237, metadata !DIExpression()), !dbg !5244
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5245, metadata !DIExpression()), !dbg !5246
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %edges, metadata !5247, metadata !DIExpression()), !dbg !5253
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5254, metadata !DIExpression()), !dbg !5255
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5256
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5256
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5256
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5256
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !5256
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !5256
  %conv = sext i32 %2 to i64, !dbg !5256
  %mul = mul i64 216, %conv, !dbg !5257
  %call = call i8* @ira_allocate(i64 %mul), !dbg !5258
  %3 = bitcast i8* %call to %struct.ira_loop_tree_node*, !dbg !5259
  store %struct.ira_loop_tree_node* %3, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5260
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5261
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5261
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5261
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5261
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !5261
  %6 = load i32, i32* %x_last_basic_block3, align 8, !dbg !5261
  store i32 %6, i32* @last_basic_block_before_change, align 4, !dbg !5262
  store i32 0, i32* %i, align 4, !dbg !5263
  br label %for.cond, !dbg !5265

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4, !dbg !5266
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5268
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5268
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !5268
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !5268
  %x_last_basic_block6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 5, !dbg !5268
  %10 = load i32, i32* %x_last_basic_block6, align 8, !dbg !5268
  %cmp = icmp ult i32 %7, %10, !dbg !5269
  br i1 %cmp, label %for.body, label %for.end, !dbg !5270

for.body:                                         ; preds = %for.cond
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5271
  %12 = load i32, i32* %i, align 4, !dbg !5273
  %idxprom = zext i32 %12 to i64, !dbg !5271
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %11, i64 %idxprom, !dbg !5271
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !5274
  store %struct.ira_allocno** null, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !5275
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5276
  %14 = load i32, i32* %i, align 4, !dbg !5277
  %idxprom8 = zext i32 %14 to i64, !dbg !5276
  %arrayidx9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i64 %idxprom8, !dbg !5276
  %reg_pressure = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx9, i32 0, i32 11, !dbg !5278
  %arraydecay = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure, i64 0, i64 0, !dbg !5279
  %15 = bitcast i32* %arraydecay to i8*, !dbg !5279
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 108, i1 false), !dbg !5279
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5280
  %17 = load i32, i32* %i, align 4, !dbg !5281
  %idxprom10 = zext i32 %17 to i64, !dbg !5280
  %arrayidx11 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %16, i64 %idxprom10, !dbg !5280
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx11, i32 0, i32 12, !dbg !5282
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !5283
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5284
  %19 = load i32, i32* %i, align 4, !dbg !5285
  %idxprom12 = zext i32 %19 to i64, !dbg !5284
  %arrayidx13 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i64 %idxprom12, !dbg !5284
  %modified_regnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx13, i32 0, i32 14, !dbg !5286
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %modified_regnos, align 8, !dbg !5287
  %20 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5288
  %21 = load i32, i32* %i, align 4, !dbg !5289
  %idxprom14 = zext i32 %21 to i64, !dbg !5288
  %arrayidx15 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %20, i64 %idxprom14, !dbg !5288
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx15, i32 0, i32 13, !dbg !5290
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !5291
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5292
  %23 = load i32, i32* %i, align 4, !dbg !5293
  %idxprom16 = zext i32 %23 to i64, !dbg !5292
  %arrayidx17 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %22, i64 %idxprom16, !dbg !5292
  %local_copies = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx17, i32 0, i32 15, !dbg !5294
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %local_copies, align 8, !dbg !5295
  br label %for.inc, !dbg !5296

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %i, align 4, !dbg !5297
  %inc = add i32 %24, 1, !dbg !5297
  store i32 %inc, i32* %i, align 4, !dbg !5297
  br label %for.cond, !dbg !5298, !llvm.loop !5299

for.end:                                          ; preds = %for.cond
  %25 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5301
  %tobool = icmp ne %struct.VEC_loop_p_gc* %25, null, !dbg !5301
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5301

cond.true:                                        ; preds = %for.end
  %26 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5301
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %26, i32 0, i32 0, !dbg !5301
  br label %cond.end, !dbg !5301

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !5301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5301
  %call18 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5301
  %conv19 = zext i32 %call18 to i64, !dbg !5301
  %mul20 = mul i64 216, %conv19, !dbg !5302
  %call21 = call i8* @ira_allocate(i64 %mul20), !dbg !5303
  %27 = bitcast i8* %call21 to %struct.ira_loop_tree_node*, !dbg !5304
  store %struct.ira_loop_tree_node* %27, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5305
  %call22 = call i32 @max_reg_num(), !dbg !5306
  store i32 %call22, i32* %max_regno, align 4, !dbg !5307
  store i32 0, i32* %i, align 4, !dbg !5308
  br label %for.cond23, !dbg !5310

for.cond23:                                       ; preds = %for.inc163, %cond.end
  %28 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5311
  %tobool24 = icmp ne %struct.VEC_loop_p_gc* %28, null, !dbg !5311
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5311

cond.true25:                                      ; preds = %for.cond23
  %29 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5311
  %base26 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %29, i32 0, i32 0, !dbg !5311
  br label %cond.end28, !dbg !5311

cond.false27:                                     ; preds = %for.cond23
  br label %cond.end28, !dbg !5311

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_loop_p_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5311
  %30 = load i32, i32* %i, align 4, !dbg !5311
  %call30 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond29, i32 %30, %struct.loop** %loop), !dbg !5311
  %tobool31 = icmp ne i32 %call30, 0, !dbg !5313
  br i1 %tobool31, label %for.body32, label %for.end165, !dbg !5313

for.body32:                                       ; preds = %cond.end28
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5314
  %32 = load %struct.loop*, %struct.loop** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 3), align 8, !dbg !5317
  %cmp33 = icmp ne %struct.loop* %31, %32, !dbg !5318
  br i1 %cmp33, label %if.then, label %if.end131, !dbg !5319

if.then:                                          ; preds = %for.body32
  %33 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5320
  %34 = load i32, i32* %i, align 4, !dbg !5322
  %idxprom35 = zext i32 %34 to i64, !dbg !5320
  %arrayidx36 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %33, i64 %idxprom35, !dbg !5320
  %regno_allocno_map37 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx36, i32 0, i32 9, !dbg !5323
  store %struct.ira_allocno** null, %struct.ira_allocno*** %regno_allocno_map37, align 8, !dbg !5324
  %35 = load i8, i8* %loops_p.addr, align 1, !dbg !5325
  %tobool38 = icmp ne i8 %35, 0, !dbg !5325
  br i1 %tobool38, label %if.end, label %if.then39, !dbg !5327

if.then39:                                        ; preds = %if.then
  br label %for.inc163, !dbg !5328

if.end:                                           ; preds = %if.then
  store i8 0, i8* %skip_p, align 1, !dbg !5329
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5330
  %header = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 2, !dbg !5330
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5330
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 0, !dbg !5330
  %call40 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5330
  %38 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5330
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !5330
  %40 = extractvalue { i32, %struct.VEC_edge_gc** } %call40, 0, !dbg !5330
  store i32 %40, i32* %39, align 8, !dbg !5330
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !5330
  %42 = extractvalue { i32, %struct.VEC_edge_gc** } %call40, 1, !dbg !5330
  store %struct.VEC_edge_gc** %42, %struct.VEC_edge_gc*** %41, align 8, !dbg !5330
  %43 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5330
  %44 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5330
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false), !dbg !5330
  br label %for.cond41, !dbg !5330

for.cond41:                                       ; preds = %for.inc76, %if.end
  %45 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5332
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 0, !dbg !5332
  %47 = load i32, i32* %46, align 8, !dbg !5332
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 1, !dbg !5332
  %49 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %48, align 8, !dbg !5332
  %call42 = call zeroext i8 @ei_cond(i32 %47, %struct.VEC_edge_gc** %49, %struct.edge_def** %e), !dbg !5332
  %tobool43 = icmp ne i8 %call42, 0, !dbg !5330
  br i1 %tobool43, label %for.body44, label %for.end77, !dbg !5330

for.body44:                                       ; preds = %for.cond41
  %50 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5334
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 0, !dbg !5336
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5336
  %52 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5337
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 3, !dbg !5338
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5338
  %cmp45 = icmp ne %struct.basic_block_def* %51, %53, !dbg !5339
  br i1 %cmp45, label %land.lhs.true, label %if.end75, !dbg !5340

land.lhs.true:                                    ; preds = %for.body44
  %54 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5341
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 7, !dbg !5342
  %55 = load i32, i32* %flags, align 8, !dbg !5342
  %and = and i32 %55, 2, !dbg !5343
  %tobool47 = icmp ne i32 %and, 0, !dbg !5343
  br i1 %tobool47, label %land.lhs.true48, label %if.end75, !dbg !5344

land.lhs.true48:                                  ; preds = %land.lhs.true
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5345
  %src49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 0, !dbg !5345
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %src49, align 8, !dbg !5345
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 1, !dbg !5345
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5345
  %tobool50 = icmp ne %struct.VEC_edge_gc* %58, null, !dbg !5345
  br i1 %tobool50, label %cond.true51, label %cond.false55, !dbg !5345

cond.true51:                                      ; preds = %land.lhs.true48
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5345
  %src52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 0, !dbg !5345
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %src52, align 8, !dbg !5345
  %succs53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 1, !dbg !5345
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs53, align 8, !dbg !5345
  %base54 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %61, i32 0, i32 0, !dbg !5345
  br label %cond.end56, !dbg !5345

cond.false55:                                     ; preds = %land.lhs.true48
  br label %cond.end56, !dbg !5345

cond.end56:                                       ; preds = %cond.false55, %cond.true51
  %cond57 = phi %struct.VEC_edge_base* [ %base54, %cond.true51 ], [ null, %cond.false55 ], !dbg !5345
  %call58 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond57), !dbg !5345
  %cmp59 = icmp uge i32 %call58, 2, !dbg !5345
  br i1 %cmp59, label %land.lhs.true61, label %if.end75, !dbg !5345

land.lhs.true61:                                  ; preds = %cond.end56
  %62 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5345
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 1, !dbg !5345
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5345
  %preds62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 0, !dbg !5345
  %64 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds62, align 8, !dbg !5345
  %tobool63 = icmp ne %struct.VEC_edge_gc* %64, null, !dbg !5345
  br i1 %tobool63, label %cond.true64, label %cond.false68, !dbg !5345

cond.true64:                                      ; preds = %land.lhs.true61
  %65 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5345
  %dest65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 1, !dbg !5345
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %dest65, align 8, !dbg !5345
  %preds66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 0, !dbg !5345
  %67 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds66, align 8, !dbg !5345
  %base67 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %67, i32 0, i32 0, !dbg !5345
  br label %cond.end69, !dbg !5345

cond.false68:                                     ; preds = %land.lhs.true61
  br label %cond.end69, !dbg !5345

cond.end69:                                       ; preds = %cond.false68, %cond.true64
  %cond70 = phi %struct.VEC_edge_base* [ %base67, %cond.true64 ], [ null, %cond.false68 ], !dbg !5345
  %call71 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond70), !dbg !5345
  %cmp72 = icmp uge i32 %call71, 2, !dbg !5345
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !5346

if.then74:                                        ; preds = %cond.end69
  store i8 1, i8* %skip_p, align 1, !dbg !5347
  br label %for.end77, !dbg !5349

if.end75:                                         ; preds = %cond.end69, %cond.end56, %land.lhs.true, %for.body44
  br label %for.inc76, !dbg !5345

for.inc76:                                        ; preds = %if.end75
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5332
  br label %for.cond41, !dbg !5332, !llvm.loop !5350

for.end77:                                        ; preds = %if.then74, %for.cond41
  %68 = load i8, i8* %skip_p, align 1, !dbg !5352
  %tobool78 = icmp ne i8 %68, 0, !dbg !5352
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !5354

if.then79:                                        ; preds = %for.end77
  br label %for.inc163, !dbg !5355

if.end80:                                         ; preds = %for.end77
  %69 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5356
  %call81 = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %69), !dbg !5357
  store %struct.VEC_edge_heap* %call81, %struct.VEC_edge_heap** %edges, align 8, !dbg !5358
  store i32 0, i32* %j, align 4, !dbg !5359
  br label %for.cond82, !dbg !5361

for.cond82:                                       ; preds = %for.inc125, %if.end80
  %70 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !5362
  %tobool83 = icmp ne %struct.VEC_edge_heap* %70, null, !dbg !5362
  br i1 %tobool83, label %cond.true84, label %cond.false86, !dbg !5362

cond.true84:                                      ; preds = %for.cond82
  %71 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !5362
  %base85 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %71, i32 0, i32 0, !dbg !5362
  br label %cond.end87, !dbg !5362

cond.false86:                                     ; preds = %for.cond82
  br label %cond.end87, !dbg !5362

cond.end87:                                       ; preds = %cond.false86, %cond.true84
  %cond88 = phi %struct.VEC_edge_base* [ %base85, %cond.true84 ], [ null, %cond.false86 ], !dbg !5362
  %72 = load i32, i32* %j, align 4, !dbg !5362
  %call89 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond88, i32 %72, %struct.edge_def** %e), !dbg !5362
  %tobool90 = icmp ne i32 %call89, 0, !dbg !5364
  br i1 %tobool90, label %for.body91, label %for.end127, !dbg !5364

for.body91:                                       ; preds = %cond.end87
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5365
  %flags92 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 7, !dbg !5367
  %74 = load i32, i32* %flags92, align 8, !dbg !5367
  %and93 = and i32 %74, 2, !dbg !5368
  %tobool94 = icmp ne i32 %and93, 0, !dbg !5368
  br i1 %tobool94, label %land.lhs.true95, label %if.end124, !dbg !5369

land.lhs.true95:                                  ; preds = %for.body91
  %75 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5370
  %src96 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 0, !dbg !5370
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %src96, align 8, !dbg !5370
  %succs97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 1, !dbg !5370
  %77 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs97, align 8, !dbg !5370
  %tobool98 = icmp ne %struct.VEC_edge_gc* %77, null, !dbg !5370
  br i1 %tobool98, label %cond.true99, label %cond.false103, !dbg !5370

cond.true99:                                      ; preds = %land.lhs.true95
  %78 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5370
  %src100 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 0, !dbg !5370
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %src100, align 8, !dbg !5370
  %succs101 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 1, !dbg !5370
  %80 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs101, align 8, !dbg !5370
  %base102 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %80, i32 0, i32 0, !dbg !5370
  br label %cond.end104, !dbg !5370

cond.false103:                                    ; preds = %land.lhs.true95
  br label %cond.end104, !dbg !5370

cond.end104:                                      ; preds = %cond.false103, %cond.true99
  %cond105 = phi %struct.VEC_edge_base* [ %base102, %cond.true99 ], [ null, %cond.false103 ], !dbg !5370
  %call106 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond105), !dbg !5370
  %cmp107 = icmp uge i32 %call106, 2, !dbg !5370
  br i1 %cmp107, label %land.lhs.true109, label %if.end124, !dbg !5370

land.lhs.true109:                                 ; preds = %cond.end104
  %81 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5370
  %dest110 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %81, i32 0, i32 1, !dbg !5370
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %dest110, align 8, !dbg !5370
  %preds111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 0, !dbg !5370
  %83 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds111, align 8, !dbg !5370
  %tobool112 = icmp ne %struct.VEC_edge_gc* %83, null, !dbg !5370
  br i1 %tobool112, label %cond.true113, label %cond.false117, !dbg !5370

cond.true113:                                     ; preds = %land.lhs.true109
  %84 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5370
  %dest114 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 1, !dbg !5370
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %dest114, align 8, !dbg !5370
  %preds115 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 0, !dbg !5370
  %86 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds115, align 8, !dbg !5370
  %base116 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %86, i32 0, i32 0, !dbg !5370
  br label %cond.end118, !dbg !5370

cond.false117:                                    ; preds = %land.lhs.true109
  br label %cond.end118, !dbg !5370

cond.end118:                                      ; preds = %cond.false117, %cond.true113
  %cond119 = phi %struct.VEC_edge_base* [ %base116, %cond.true113 ], [ null, %cond.false117 ], !dbg !5370
  %call120 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond119), !dbg !5370
  %cmp121 = icmp uge i32 %call120, 2, !dbg !5370
  br i1 %cmp121, label %if.then123, label %if.end124, !dbg !5371

if.then123:                                       ; preds = %cond.end118
  store i8 1, i8* %skip_p, align 1, !dbg !5372
  br label %for.end127, !dbg !5374

if.end124:                                        ; preds = %cond.end118, %cond.end104, %for.body91
  br label %for.inc125, !dbg !5370

for.inc125:                                       ; preds = %if.end124
  %87 = load i32, i32* %j, align 4, !dbg !5375
  %inc126 = add i32 %87, 1, !dbg !5375
  store i32 %inc126, i32* %j, align 4, !dbg !5375
  br label %for.cond82, !dbg !5376, !llvm.loop !5377

for.end127:                                       ; preds = %if.then123, %cond.end87
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %edges), !dbg !5379
  %88 = load i8, i8* %skip_p, align 1, !dbg !5380
  %tobool128 = icmp ne i8 %88, 0, !dbg !5380
  br i1 %tobool128, label %if.then129, label %if.end130, !dbg !5382

if.then129:                                       ; preds = %for.end127
  br label %for.inc163, !dbg !5383

if.end130:                                        ; preds = %for.end127
  br label %if.end131, !dbg !5384

if.end131:                                        ; preds = %if.end130, %for.body32
  %89 = load i32, i32* %max_regno, align 4, !dbg !5385
  %conv132 = sext i32 %89 to i64, !dbg !5385
  %mul133 = mul i64 8, %conv132, !dbg !5386
  %call134 = call i8* @ira_allocate(i64 %mul133), !dbg !5387
  %90 = bitcast i8* %call134 to %struct.ira_allocno**, !dbg !5388
  %91 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5389
  %92 = load i32, i32* %i, align 4, !dbg !5390
  %idxprom135 = zext i32 %92 to i64, !dbg !5389
  %arrayidx136 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %91, i64 %idxprom135, !dbg !5389
  %regno_allocno_map137 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx136, i32 0, i32 9, !dbg !5391
  store %struct.ira_allocno** %90, %struct.ira_allocno*** %regno_allocno_map137, align 8, !dbg !5392
  %93 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5393
  %94 = load i32, i32* %i, align 4, !dbg !5394
  %idxprom138 = zext i32 %94 to i64, !dbg !5393
  %arrayidx139 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %93, i64 %idxprom138, !dbg !5393
  %regno_allocno_map140 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx139, i32 0, i32 9, !dbg !5395
  %95 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map140, align 8, !dbg !5395
  %96 = bitcast %struct.ira_allocno** %95 to i8*, !dbg !5396
  %97 = load i32, i32* %max_regno, align 4, !dbg !5397
  %conv141 = sext i32 %97 to i64, !dbg !5397
  %mul142 = mul i64 8, %conv141, !dbg !5398
  call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 %mul142, i1 false), !dbg !5396
  %98 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5399
  %99 = load i32, i32* %i, align 4, !dbg !5400
  %idxprom143 = zext i32 %99 to i64, !dbg !5399
  %arrayidx144 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %98, i64 %idxprom143, !dbg !5399
  %reg_pressure145 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx144, i32 0, i32 11, !dbg !5401
  %arraydecay146 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure145, i64 0, i64 0, !dbg !5402
  %100 = bitcast i32* %arraydecay146 to i8*, !dbg !5402
  call void @llvm.memset.p0i8.i64(i8* align 4 %100, i8 0, i64 108, i1 false), !dbg !5402
  %call147 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !5403
  %101 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5404
  %102 = load i32, i32* %i, align 4, !dbg !5405
  %idxprom148 = zext i32 %102 to i64, !dbg !5404
  %arrayidx149 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %101, i64 %idxprom148, !dbg !5404
  %all_allocnos150 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx149, i32 0, i32 12, !dbg !5406
  store %struct.bitmap_head_def* %call147, %struct.bitmap_head_def** %all_allocnos150, align 8, !dbg !5407
  %call151 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !5408
  %103 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5409
  %104 = load i32, i32* %i, align 4, !dbg !5410
  %idxprom152 = zext i32 %104 to i64, !dbg !5409
  %arrayidx153 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %103, i64 %idxprom152, !dbg !5409
  %modified_regnos154 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx153, i32 0, i32 14, !dbg !5411
  store %struct.bitmap_head_def* %call151, %struct.bitmap_head_def** %modified_regnos154, align 8, !dbg !5412
  %call155 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !5413
  %105 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5414
  %106 = load i32, i32* %i, align 4, !dbg !5415
  %idxprom156 = zext i32 %106 to i64, !dbg !5414
  %arrayidx157 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %105, i64 %idxprom156, !dbg !5414
  %border_allocnos158 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx157, i32 0, i32 13, !dbg !5416
  store %struct.bitmap_head_def* %call155, %struct.bitmap_head_def** %border_allocnos158, align 8, !dbg !5417
  %call159 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !5418
  %107 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5419
  %108 = load i32, i32* %i, align 4, !dbg !5420
  %idxprom160 = zext i32 %108 to i64, !dbg !5419
  %arrayidx161 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %107, i64 %idxprom160, !dbg !5419
  %local_copies162 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx161, i32 0, i32 15, !dbg !5421
  store %struct.bitmap_head_def* %call159, %struct.bitmap_head_def** %local_copies162, align 8, !dbg !5422
  br label %for.inc163, !dbg !5423

for.inc163:                                       ; preds = %if.end131, %if.then129, %if.then79, %if.then39
  %109 = load i32, i32* %i, align 4, !dbg !5424
  %inc164 = add i32 %109, 1, !dbg !5424
  store i32 %inc164, i32* %i, align 4, !dbg !5424
  br label %for.cond23, !dbg !5425, !llvm.loop !5426

for.end165:                                       ; preds = %cond.end28
  ret void, !dbg !5428
}

; Function Attrs: noinline nounwind uwtable
define internal void @form_loop_tree() #0 !dbg !5429 {
entry:
  %i = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %parent = alloca %struct.loop*, align 8
  %bb_node = alloca %struct.ira_loop_tree_node*, align 8
  %loop_node = alloca %struct.ira_loop_tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5430, metadata !DIExpression()), !dbg !5431
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5432, metadata !DIExpression()), !dbg !5433
  call void @llvm.dbg.declare(metadata %struct.loop** %parent, metadata !5434, metadata !DIExpression()), !dbg !5435
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %bb_node, metadata !5436, metadata !DIExpression()), !dbg !5437
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node, metadata !5438, metadata !DIExpression()), !dbg !5439
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5440, metadata !DIExpression()), !dbg !5441
  store i32 0, i32* %i, align 4, !dbg !5442
  br label %for.cond, !dbg !5444

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5445
  %tobool = icmp ne %struct.VEC_loop_p_gc* %0, null, !dbg !5445
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5445

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5445
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i32 0, i32 0, !dbg !5445
  br label %cond.end, !dbg !5445

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5445

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5445
  %2 = load i32, i32* %i, align 4, !dbg !5445
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %2, %struct.loop** %loop), !dbg !5445
  %tobool1 = icmp ne i32 %call, 0, !dbg !5447
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5447

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5448
  %4 = load i32, i32* %i, align 4, !dbg !5450
  %idxprom = zext i32 %4 to i64, !dbg !5448
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i64 %idxprom, !dbg !5448
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !5451
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !5451
  %cmp = icmp ne %struct.ira_allocno** %5, null, !dbg !5452
  br i1 %cmp, label %if.then, label %if.end, !dbg !5453

if.then:                                          ; preds = %for.body
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5454
  %7 = load i32, i32* %i, align 4, !dbg !5456
  %idxprom2 = zext i32 %7 to i64, !dbg !5454
  %arrayidx3 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i64 %idxprom2, !dbg !5454
  %children = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx3, i32 0, i32 5, !dbg !5457
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %children, align 8, !dbg !5458
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5459
  %9 = load i32, i32* %i, align 4, !dbg !5460
  %idxprom4 = zext i32 %9 to i64, !dbg !5459
  %arrayidx5 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %8, i64 %idxprom4, !dbg !5459
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx5, i32 0, i32 4, !dbg !5461
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !5462
  br label %if.end, !dbg !5463

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5464

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !5465
  %inc = add i32 %10, 1, !dbg !5465
  store i32 %inc, i32* %i, align 4, !dbg !5465
  br label %for.cond, !dbg !5466, !llvm.loop !5467

for.end:                                          ; preds = %cond.end
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5469
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5469
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5469
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5469
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 0, !dbg !5469
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5469
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !5469
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5469
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !5469
  br label %for.cond6, !dbg !5469

for.cond6:                                        ; preds = %for.inc36, %for.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5471
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5471
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5471
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !5471
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !5471
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 1, !dbg !5471
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5471
  %cmp9 = icmp ne %struct.basic_block_def* %15, %18, !dbg !5471
  br i1 %cmp9, label %for.body10, label %for.end38, !dbg !5469

for.body10:                                       ; preds = %for.cond6
  %19 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !5473
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5475
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 9, !dbg !5476
  %21 = load i32, i32* %index, align 8, !dbg !5476
  %idxprom11 = sext i32 %21 to i64, !dbg !5473
  %arrayidx12 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %19, i64 %idxprom11, !dbg !5473
  store %struct.ira_loop_tree_node* %arrayidx12, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5477
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5478
  %23 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5479
  %bb13 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %23, i32 0, i32 0, !dbg !5480
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb13, align 8, !dbg !5481
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5482
  %loop14 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %24, i32 0, i32 1, !dbg !5483
  store %struct.loop* null, %struct.loop** %loop14, align 8, !dbg !5484
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5485
  %subloops15 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i32 0, i32 4, !dbg !5486
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %subloops15, align 8, !dbg !5487
  %26 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5488
  %children16 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %26, i32 0, i32 5, !dbg !5489
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %children16, align 8, !dbg !5490
  %27 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5491
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %27, i32 0, i32 2, !dbg !5492
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !5493
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5494
  %next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %28, i32 0, i32 3, !dbg !5495
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %next, align 8, !dbg !5496
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5497
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 3, !dbg !5499
  %30 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5499
  store %struct.loop* %30, %struct.loop** %parent, align 8, !dbg !5500
  br label %for.cond17, !dbg !5501

for.cond17:                                       ; preds = %for.inc26, %for.body10
  %31 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !5502
  %cmp18 = icmp ne %struct.loop* %31, null, !dbg !5504
  br i1 %cmp18, label %for.body19, label %for.end28, !dbg !5505

for.body19:                                       ; preds = %for.cond17
  %32 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5506
  %33 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !5508
  %num = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 0, !dbg !5509
  %34 = load i32, i32* %num, align 8, !dbg !5509
  %idxprom20 = sext i32 %34 to i64, !dbg !5506
  %arrayidx21 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %32, i64 %idxprom20, !dbg !5506
  %regno_allocno_map22 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx21, i32 0, i32 9, !dbg !5510
  %35 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map22, align 8, !dbg !5510
  %cmp23 = icmp ne %struct.ira_allocno** %35, null, !dbg !5511
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !5512

if.then24:                                        ; preds = %for.body19
  br label %for.end28, !dbg !5513

if.end25:                                         ; preds = %for.body19
  br label %for.inc26, !dbg !5514

for.inc26:                                        ; preds = %if.end25
  %36 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !5515
  %call27 = call %struct.loop* @loop_outer(%struct.loop* %36), !dbg !5516
  store %struct.loop* %call27, %struct.loop** %parent, align 8, !dbg !5517
  br label %for.cond17, !dbg !5518, !llvm.loop !5519

for.end28:                                        ; preds = %if.then24, %for.cond17
  %37 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !5521
  call void @add_loop_to_tree(%struct.loop* %37), !dbg !5522
  %38 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5523
  %39 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !5524
  %num29 = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 0, !dbg !5525
  %40 = load i32, i32* %num29, align 8, !dbg !5525
  %idxprom30 = sext i32 %40 to i64, !dbg !5523
  %arrayidx31 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %38, i64 %idxprom30, !dbg !5523
  store %struct.ira_loop_tree_node* %arrayidx31, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !5526
  %41 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !5527
  %children32 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %41, i32 0, i32 5, !dbg !5528
  %42 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children32, align 8, !dbg !5528
  %43 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5529
  %next33 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %43, i32 0, i32 3, !dbg !5530
  store %struct.ira_loop_tree_node* %42, %struct.ira_loop_tree_node** %next33, align 8, !dbg !5531
  %44 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !5532
  %45 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5533
  %parent34 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %45, i32 0, i32 6, !dbg !5534
  store %struct.ira_loop_tree_node* %44, %struct.ira_loop_tree_node** %parent34, align 8, !dbg !5535
  %46 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node, align 8, !dbg !5536
  %47 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !5537
  %children35 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %47, i32 0, i32 5, !dbg !5538
  store %struct.ira_loop_tree_node* %46, %struct.ira_loop_tree_node** %children35, align 8, !dbg !5539
  br label %for.inc36, !dbg !5540

for.inc36:                                        ; preds = %for.end28
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5471
  %next_bb37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 6, !dbg !5471
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb37, align 8, !dbg !5471
  store %struct.basic_block_def* %49, %struct.basic_block_def** %bb, align 8, !dbg !5471
  br label %for.cond6, !dbg !5471, !llvm.loop !5541

for.end38:                                        ; preds = %for.cond6
  %50 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5543
  %51 = load %struct.loop*, %struct.loop** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 3), align 8, !dbg !5543
  %num39 = getelementptr inbounds %struct.loop, %struct.loop* %51, i32 0, i32 0, !dbg !5543
  %52 = load i32, i32* %num39, align 8, !dbg !5543
  %idxprom40 = sext i32 %52 to i64, !dbg !5543
  %arrayidx41 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %50, i64 %idxprom40, !dbg !5543
  store %struct.ira_loop_tree_node* %arrayidx41, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5544
  %53 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5545
  %call42 = call i32 @setup_loop_tree_level(%struct.ira_loop_tree_node* %53, i32 0), !dbg !5546
  store i32 %call42, i32* @ira_loop_tree_height, align 4, !dbg !5547
  ret void, !dbg !5548
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_allocnos() #0 !dbg !5549 {
entry:
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5550
  call void @ira_traverse_loop_tree(i8 zeroext 1, %struct.ira_loop_tree_node* %0, void (%struct.ira_loop_tree_node*)* @create_loop_tree_node_allocnos, void (%struct.ira_loop_tree_node*)* null), !dbg !5551
  %1 = load i32, i32* @optimize, align 4, !dbg !5552
  %tobool = icmp ne i32 %1, 0, !dbg !5552
  br i1 %tobool, label %if.then, label %if.end, !dbg !5554

if.then:                                          ; preds = %entry
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5555
  call void @ira_traverse_loop_tree(i8 zeroext 0, %struct.ira_loop_tree_node* %2, void (%struct.ira_loop_tree_node*)* null, void (%struct.ira_loop_tree_node*)* @propagate_modified_regnos), !dbg !5556
  br label %if.end, !dbg !5556

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5557
}

declare dso_local void @ira_costs() #2

declare dso_local void @ira_create_allocno_live_ranges() #2

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unnecessary_regions(i8 zeroext %all_p) #0 !dbg !5558 {
entry:
  %all_p.addr = alloca i8, align 1
  store i8 %all_p, i8* %all_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %all_p.addr, metadata !5559, metadata !DIExpression()), !dbg !5560
  %0 = load i8, i8* %all_p.addr, align 1, !dbg !5561
  %tobool = icmp ne i8 %0, 0, !dbg !5561
  br i1 %tobool, label %if.then, label %if.else, !dbg !5563

if.then:                                          ; preds = %entry
  call void @mark_all_loops_for_removal(), !dbg !5564
  br label %if.end, !dbg !5564

if.else:                                          ; preds = %entry
  call void @mark_loops_for_removal(), !dbg !5565
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5566
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5566
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5566
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5566
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !5566
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !5566
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5566
  %tobool1 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !5566
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5566

cond.true:                                        ; preds = %if.end
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5566
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !5566
  br label %cond.end, !dbg !5566

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5566

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5566
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5566
  %add = add i32 %3, %call, !dbg !5566
  %call2 = call %struct.VEC_ira_loop_tree_node_t_heap* @VEC_ira_loop_tree_node_t_heap_alloc(i32 %add), !dbg !5566
  store %struct.VEC_ira_loop_tree_node_t_heap* %call2, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !5567
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5568
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !5568
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !5568
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !5568
  %x_last_basic_block5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 5, !dbg !5568
  %8 = load i32, i32* %x_last_basic_block5, align 8, !dbg !5568
  %9 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5568
  %tobool6 = icmp ne %struct.VEC_loop_p_gc* %9, null, !dbg !5568
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !5568

cond.true7:                                       ; preds = %cond.end
  %10 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5568
  %base8 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %10, i32 0, i32 0, !dbg !5568
  br label %cond.end10, !dbg !5568

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !5568

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_loop_p_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !5568
  %call12 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond11), !dbg !5568
  %add13 = add i32 %8, %call12, !dbg !5568
  %call14 = call %struct.VEC_ira_loop_tree_node_t_heap* @VEC_ira_loop_tree_node_t_heap_alloc(i32 %add13), !dbg !5568
  store %struct.VEC_ira_loop_tree_node_t_heap* %call14, %struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec, align 8, !dbg !5569
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5570
  call void @remove_uneccesary_loop_nodes_from_loop_tree(%struct.ira_loop_tree_node* %11), !dbg !5571
  call void @VEC_ira_loop_tree_node_t_heap_free(%struct.VEC_ira_loop_tree_node_t_heap** @children_vec), !dbg !5572
  %12 = load i8, i8* %all_p.addr, align 1, !dbg !5573
  %tobool15 = icmp ne i8 %12, 0, !dbg !5573
  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !5575

if.then16:                                        ; preds = %cond.end10
  call void @remove_low_level_allocnos(), !dbg !5576
  br label %if.end18, !dbg !5576

if.else17:                                        ; preds = %cond.end10
  call void @remove_unnecessary_allocnos(), !dbg !5577
  br label %if.end18

if.end18:                                         ; preds = %if.else17, %if.then16
  br label %while.cond, !dbg !5578

while.cond:                                       ; preds = %cond.end30, %if.end18
  %13 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec, align 8, !dbg !5579
  %tobool19 = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %13, null, !dbg !5579
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !5579

cond.true20:                                      ; preds = %while.cond
  %14 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec, align 8, !dbg !5579
  %base21 = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %14, i32 0, i32 0, !dbg !5579
  br label %cond.end23, !dbg !5579

cond.false22:                                     ; preds = %while.cond
  br label %cond.end23, !dbg !5579

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !5579
  %call25 = call i32 @VEC_ira_loop_tree_node_t_base_length(%struct.VEC_ira_loop_tree_node_t_base* %cond24), !dbg !5579
  %cmp = icmp ugt i32 %call25, 0, !dbg !5580
  br i1 %cmp, label %while.body, label %while.end, !dbg !5578

while.body:                                       ; preds = %cond.end23
  %15 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec, align 8, !dbg !5581
  %tobool26 = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %15, null, !dbg !5581
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !5581

cond.true27:                                      ; preds = %while.body
  %16 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec, align 8, !dbg !5581
  %base28 = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %16, i32 0, i32 0, !dbg !5581
  br label %cond.end30, !dbg !5581

cond.false29:                                     ; preds = %while.body
  br label %cond.end30, !dbg !5581

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !5581
  %call32 = call %struct.ira_loop_tree_node* @VEC_ira_loop_tree_node_t_base_pop(%struct.VEC_ira_loop_tree_node_t_base* %cond31), !dbg !5581
  call void @finish_loop_tree_node(%struct.ira_loop_tree_node* %call32), !dbg !5582
  br label %while.cond, !dbg !5578, !llvm.loop !5583

while.end:                                        ; preds = %cond.end23
  call void @VEC_ira_loop_tree_node_t_heap_free(%struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec), !dbg !5585
  ret void, !dbg !5586
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_bad_spill_attribute() #0 !dbg !5587 {
entry:
  %i = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %cover_class = alloca i32, align 4
  %dead_points = alloca [27 x %struct.bitmap_head_def], align 16
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5588, metadata !DIExpression()), !dbg !5589
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5590, metadata !DIExpression()), !dbg !5591
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !5592, metadata !DIExpression()), !dbg !5593
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !5594, metadata !DIExpression()), !dbg !5595
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5596, metadata !DIExpression()), !dbg !5597
  call void @llvm.dbg.declare(metadata [27 x %struct.bitmap_head_def]* %dead_points, metadata !5598, metadata !DIExpression()), !dbg !5601
  store i32 0, i32* %i, align 4, !dbg !5602
  br label %for.cond, !dbg !5604

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5605
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5607
  %cmp = icmp slt i32 %0, %1, !dbg !5608
  br i1 %cmp, label %for.body, label %for.end, !dbg !5609

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !5610
  %idxprom = sext i32 %2 to i64, !dbg !5612
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !5612
  %3 = load i32, i32* %arrayidx, align 4, !dbg !5612
  store i32 %3, i32* %cover_class, align 4, !dbg !5613
  %4 = load i32, i32* %cover_class, align 4, !dbg !5614
  %idxprom1 = zext i32 %4 to i64, !dbg !5614
  %arrayidx2 = getelementptr inbounds [27 x %struct.bitmap_head_def], [27 x %struct.bitmap_head_def]* %dead_points, i64 0, i64 %idxprom1, !dbg !5614
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %arrayidx2, %struct.bitmap_obstack* @reg_obstack), !dbg !5614
  br label %for.inc, !dbg !5615

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !5616
  %inc = add nsw i32 %5, 1, !dbg !5616
  store i32 %inc, i32* %i, align 4, !dbg !5616
  br label %for.cond, !dbg !5617, !llvm.loop !5618

for.end:                                          ; preds = %for.cond
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5620
  br label %for.cond3, !dbg !5620

for.cond3:                                        ; preds = %for.end14, %if.then, %for.end
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5622
  %tobool = icmp ne i8 %call, 0, !dbg !5620
  br i1 %tobool, label %for.body4, label %for.end15, !dbg !5620

for.body4:                                        ; preds = %for.cond3
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5624
  %cover_class5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 9, !dbg !5624
  %7 = load i32, i32* %cover_class5, align 8, !dbg !5624
  store i32 %7, i32* %cover_class, align 4, !dbg !5626
  %8 = load i32, i32* %cover_class, align 4, !dbg !5627
  %cmp6 = icmp eq i32 %8, 0, !dbg !5629
  br i1 %cmp6, label %if.then, label %if.end, !dbg !5630

if.then:                                          ; preds = %for.body4
  br label %for.cond3, !dbg !5631, !llvm.loop !5632

if.end:                                           ; preds = %for.body4
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5634
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 20, !dbg !5634
  %10 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !5634
  store %struct.ira_allocno_live_range* %10, %struct.ira_allocno_live_range** %r, align 8, !dbg !5636
  br label %for.cond7, !dbg !5637

for.cond7:                                        ; preds = %for.inc13, %if.end
  %11 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5638
  %cmp8 = icmp ne %struct.ira_allocno_live_range* %11, null, !dbg !5640
  br i1 %cmp8, label %for.body9, label %for.end14, !dbg !5641

for.body9:                                        ; preds = %for.cond7
  %12 = load i32, i32* %cover_class, align 4, !dbg !5642
  %idxprom10 = zext i32 %12 to i64, !dbg !5643
  %arrayidx11 = getelementptr inbounds [27 x %struct.bitmap_head_def], [27 x %struct.bitmap_head_def]* %dead_points, i64 0, i64 %idxprom10, !dbg !5643
  %13 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5644
  %finish = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %13, i32 0, i32 2, !dbg !5645
  %14 = load i32, i32* %finish, align 4, !dbg !5645
  %call12 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %arrayidx11, i32 %14), !dbg !5646
  br label %for.inc13, !dbg !5646

for.inc13:                                        ; preds = %for.body9
  %15 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5647
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %15, i32 0, i32 3, !dbg !5648
  %16 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !5648
  store %struct.ira_allocno_live_range* %16, %struct.ira_allocno_live_range** %r, align 8, !dbg !5649
  br label %for.cond7, !dbg !5650, !llvm.loop !5651

for.end14:                                        ; preds = %for.cond7
  br label %for.cond3, !dbg !5622, !llvm.loop !5632

for.end15:                                        ; preds = %for.cond3
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5653
  br label %for.cond16, !dbg !5653

for.cond16:                                       ; preds = %if.end56, %if.then25, %if.then22, %for.end15
  %call17 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5655
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5653
  br i1 %tobool18, label %for.body19, label %for.end57, !dbg !5653

for.body19:                                       ; preds = %for.cond16
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5657
  %cover_class20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 9, !dbg !5657
  %18 = load i32, i32* %cover_class20, align 8, !dbg !5657
  store i32 %18, i32* %cover_class, align 4, !dbg !5659
  %19 = load i32, i32* %cover_class, align 4, !dbg !5660
  %cmp21 = icmp eq i32 %19, 0, !dbg !5662
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !5663

if.then22:                                        ; preds = %for.body19
  br label %for.cond16, !dbg !5664, !llvm.loop !5665

if.end23:                                         ; preds = %for.body19
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5667
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 31, !dbg !5667
  %bf.load = load i16, i16* %bad_spill_p, align 4, !dbg !5667
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !5667
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5667
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5667
  %tobool24 = icmp ne i32 %bf.cast, 0, !dbg !5667
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5669

if.then25:                                        ; preds = %if.end23
  br label %for.cond16, !dbg !5670, !llvm.loop !5665

if.end26:                                         ; preds = %if.end23
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5671
  %live_ranges27 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 20, !dbg !5671
  %22 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges27, align 8, !dbg !5671
  store %struct.ira_allocno_live_range* %22, %struct.ira_allocno_live_range** %r, align 8, !dbg !5673
  br label %for.cond28, !dbg !5674

for.cond28:                                       ; preds = %for.inc48, %if.end26
  %23 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5675
  %cmp29 = icmp ne %struct.ira_allocno_live_range* %23, null, !dbg !5677
  br i1 %cmp29, label %for.body30, label %for.end50, !dbg !5678

for.body30:                                       ; preds = %for.cond28
  %24 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5679
  %start = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %24, i32 0, i32 1, !dbg !5682
  %25 = load i32, i32* %start, align 8, !dbg !5682
  %add = add nsw i32 %25, 1, !dbg !5683
  store i32 %add, i32* %i, align 4, !dbg !5684
  br label %for.cond31, !dbg !5685

for.cond31:                                       ; preds = %for.inc41, %for.body30
  %26 = load i32, i32* %i, align 4, !dbg !5686
  %27 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5688
  %finish32 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %27, i32 0, i32 2, !dbg !5689
  %28 = load i32, i32* %finish32, align 4, !dbg !5689
  %cmp33 = icmp slt i32 %26, %28, !dbg !5690
  br i1 %cmp33, label %for.body34, label %for.end43, !dbg !5691

for.body34:                                       ; preds = %for.cond31
  %29 = load i32, i32* %cover_class, align 4, !dbg !5692
  %idxprom35 = zext i32 %29 to i64, !dbg !5694
  %arrayidx36 = getelementptr inbounds [27 x %struct.bitmap_head_def], [27 x %struct.bitmap_head_def]* %dead_points, i64 0, i64 %idxprom35, !dbg !5694
  %30 = load i32, i32* %i, align 4, !dbg !5695
  %call37 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %arrayidx36, i32 %30), !dbg !5696
  %tobool38 = icmp ne i32 %call37, 0, !dbg !5696
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !5697

if.then39:                                        ; preds = %for.body34
  br label %for.end43, !dbg !5698

if.end40:                                         ; preds = %for.body34
  br label %for.inc41, !dbg !5699

for.inc41:                                        ; preds = %if.end40
  %31 = load i32, i32* %i, align 4, !dbg !5700
  %inc42 = add nsw i32 %31, 1, !dbg !5700
  store i32 %inc42, i32* %i, align 4, !dbg !5700
  br label %for.cond31, !dbg !5701, !llvm.loop !5702

for.end43:                                        ; preds = %if.then39, %for.cond31
  %32 = load i32, i32* %i, align 4, !dbg !5704
  %33 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5706
  %finish44 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %33, i32 0, i32 2, !dbg !5707
  %34 = load i32, i32* %finish44, align 4, !dbg !5707
  %cmp45 = icmp slt i32 %32, %34, !dbg !5708
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !5709

if.then46:                                        ; preds = %for.end43
  br label %for.end50, !dbg !5710

if.end47:                                         ; preds = %for.end43
  br label %for.inc48, !dbg !5711

for.inc48:                                        ; preds = %if.end47
  %35 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5712
  %next49 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %35, i32 0, i32 3, !dbg !5713
  %36 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next49, align 8, !dbg !5713
  store %struct.ira_allocno_live_range* %36, %struct.ira_allocno_live_range** %r, align 8, !dbg !5714
  br label %for.cond28, !dbg !5715, !llvm.loop !5716

for.end50:                                        ; preds = %if.then46, %for.cond28
  %37 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5718
  %cmp51 = icmp ne %struct.ira_allocno_live_range* %37, null, !dbg !5720
  br i1 %cmp51, label %if.then52, label %if.end56, !dbg !5721

if.then52:                                        ; preds = %for.end50
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5722
  %bad_spill_p53 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 31, !dbg !5722
  %bf.load54 = load i16, i16* %bad_spill_p53, align 4, !dbg !5723
  %bf.clear55 = and i16 %bf.load54, -65, !dbg !5723
  store i16 %bf.clear55, i16* %bad_spill_p53, align 4, !dbg !5723
  br label %if.end56, !dbg !5722

if.end56:                                         ; preds = %if.then52, %for.end50
  br label %for.cond16, !dbg !5655, !llvm.loop !5665

for.end57:                                        ; preds = %for.cond16
  store i32 0, i32* %i, align 4, !dbg !5724
  br label %for.cond58, !dbg !5726

for.cond58:                                       ; preds = %for.inc65, %for.end57
  %39 = load i32, i32* %i, align 4, !dbg !5727
  %40 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5729
  %cmp59 = icmp slt i32 %39, %40, !dbg !5730
  br i1 %cmp59, label %for.body60, label %for.end67, !dbg !5731

for.body60:                                       ; preds = %for.cond58
  %41 = load i32, i32* %i, align 4, !dbg !5732
  %idxprom61 = sext i32 %41 to i64, !dbg !5734
  %arrayidx62 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom61, !dbg !5734
  %42 = load i32, i32* %arrayidx62, align 4, !dbg !5734
  store i32 %42, i32* %cover_class, align 4, !dbg !5735
  %43 = load i32, i32* %cover_class, align 4, !dbg !5736
  %idxprom63 = zext i32 %43 to i64, !dbg !5737
  %arrayidx64 = getelementptr inbounds [27 x %struct.bitmap_head_def], [27 x %struct.bitmap_head_def]* %dead_points, i64 0, i64 %idxprom63, !dbg !5737
  call void @bitmap_clear(%struct.bitmap_head_def* %arrayidx64), !dbg !5738
  br label %for.inc65, !dbg !5739

for.inc65:                                        ; preds = %for.body60
  %44 = load i32, i32* %i, align 4, !dbg !5740
  %inc66 = add nsw i32 %44, 1, !dbg !5740
  store i32 %inc66, i32* %i, align 4, !dbg !5740
  br label %for.cond58, !dbg !5741, !llvm.loop !5742

for.end67:                                        ; preds = %for.cond58
  ret void, !dbg !5744
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @more_one_region_p() #0 !dbg !5745 {
entry:
  %retval = alloca i8, align 1
  %i = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5748, metadata !DIExpression()), !dbg !5749
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5750, metadata !DIExpression()), !dbg !5751
  store i32 0, i32* %i, align 4, !dbg !5752
  br label %for.cond, !dbg !5754

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5755
  %tobool = icmp ne %struct.VEC_loop_p_gc* %0, null, !dbg !5755
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5755

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !5755
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i32 0, i32 0, !dbg !5755
  br label %cond.end, !dbg !5755

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5755

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5755
  %2 = load i32, i32* %i, align 4, !dbg !5755
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %2, %struct.loop** %loop), !dbg !5755
  %tobool1 = icmp ne i32 %call, 0, !dbg !5757
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5757

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5758
  %4 = load i32, i32* %i, align 4, !dbg !5760
  %idxprom = zext i32 %4 to i64, !dbg !5758
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i64 %idxprom, !dbg !5758
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !5761
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !5761
  %cmp = icmp ne %struct.ira_allocno** %5, null, !dbg !5762
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5763

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5764
  %7 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !5765
  %8 = load i32, i32* %i, align 4, !dbg !5766
  %idxprom2 = zext i32 %8 to i64, !dbg !5765
  %arrayidx3 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %7, i64 %idxprom2, !dbg !5765
  %cmp4 = icmp ne %struct.ira_loop_tree_node* %6, %arrayidx3, !dbg !5767
  br i1 %cmp4, label %if.then, label %if.end, !dbg !5768

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !5769
  br label %return, !dbg !5769

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !5770

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !5771
  %inc = add i32 %9, 1, !dbg !5771
  store i32 %inc, i32* %i, align 4, !dbg !5771
  br label %for.cond, !dbg !5772, !llvm.loop !5773

for.end:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !5775
  br label %return, !dbg !5775

return:                                           ; preds = %for.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !5776
  ret i8 %10, !dbg !5776
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_allocno_info() #0 !dbg !5777 {
entry:
  %i = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %parent_a = alloca %struct.ira_allocno*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %cover_class = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5778, metadata !DIExpression()), !dbg !5779
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5780, metadata !DIExpression()), !dbg !5781
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_a, metadata !5782, metadata !DIExpression()), !dbg !5783
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !5784, metadata !DIExpression()), !dbg !5785
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5786, metadata !DIExpression()), !dbg !5787
  %0 = load i32, i32* @flag_ira_region, align 4, !dbg !5788
  %cmp = icmp ne i32 %0, 1, !dbg !5790
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5791

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_ira_region, align 4, !dbg !5792
  %cmp1 = icmp ne i32 %1, 2, !dbg !5793
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5794

if.then:                                          ; preds = %land.lhs.true
  br label %for.end51, !dbg !5795

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call i32 @max_reg_num(), !dbg !5796
  %sub = sub nsw i32 %call, 1, !dbg !5798
  store i32 %sub, i32* %i, align 4, !dbg !5799
  br label %for.cond, !dbg !5800

for.cond:                                         ; preds = %for.inc50, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !5801
  %cmp2 = icmp sge i32 %2, 53, !dbg !5803
  br i1 %cmp2, label %for.body, label %for.end51, !dbg !5804

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5805
  %4 = load i32, i32* %i, align 4, !dbg !5807
  %idxprom = sext i32 %4 to i64, !dbg !5805
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %3, i64 %idxprom, !dbg !5805
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !5805
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a, align 8, !dbg !5808
  br label %for.cond3, !dbg !5809

for.cond3:                                        ; preds = %for.inc, %for.body
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5810
  %cmp4 = icmp ne %struct.ira_allocno* %6, null, !dbg !5812
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !5813

for.body5:                                        ; preds = %for.cond3
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5814
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 6, !dbg !5814
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !5814
  %parent6 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %8, i32 0, i32 6, !dbg !5816
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent6, align 8, !dbg !5816
  store %struct.ira_loop_tree_node* %9, %struct.ira_loop_tree_node** %parent, align 8, !dbg !5817
  %cmp7 = icmp ne %struct.ira_loop_tree_node* %9, null, !dbg !5818
  br i1 %cmp7, label %land.lhs.true8, label %if.end49, !dbg !5819

land.lhs.true8:                                   ; preds = %for.body5
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !5820
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 9, !dbg !5821
  %11 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !5821
  %12 = load i32, i32* %i, align 4, !dbg !5822
  %idxprom9 = sext i32 %12 to i64, !dbg !5820
  %arrayidx10 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %11, i64 %idxprom9, !dbg !5820
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx10, align 8, !dbg !5820
  store %struct.ira_allocno* %13, %struct.ira_allocno** %parent_a, align 8, !dbg !5823
  %cmp11 = icmp ne %struct.ira_allocno* %13, null, !dbg !5824
  br i1 %cmp11, label %land.lhs.true12, label %if.end49, !dbg !5825

land.lhs.true12:                                  ; preds = %land.lhs.true8
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5826
  %loop_tree_node13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 6, !dbg !5826
  %15 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node13, align 8, !dbg !5826
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %15, i32 0, i32 13, !dbg !5827
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !5827
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5828
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 0, !dbg !5828
  %18 = load i32, i32* %num, align 8, !dbg !5828
  %call14 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %16, i32 %18), !dbg !5829
  %tobool = icmp ne i32 %call14, 0, !dbg !5829
  br i1 %tobool, label %if.then15, label %if.end49, !dbg !5830

if.then15:                                        ; preds = %land.lhs.true12
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5831
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 31, !dbg !5831
  %bf.load = load i16, i16* %bad_spill_p, align 4, !dbg !5831
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !5831
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5831
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5831
  %tobool16 = icmp ne i32 %bf.cast, 0, !dbg !5831
  br i1 %tobool16, label %if.end21, label %if.then17, !dbg !5834

if.then17:                                        ; preds = %if.then15
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5835
  %bad_spill_p18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 31, !dbg !5835
  %bf.load19 = load i16, i16* %bad_spill_p18, align 4, !dbg !5836
  %bf.clear20 = and i16 %bf.load19, -65, !dbg !5836
  store i16 %bf.clear20, i16* %bad_spill_p18, align 4, !dbg !5836
  br label %if.end21, !dbg !5835

if.end21:                                         ; preds = %if.then17, %if.then15
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5837
  %nrefs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 7, !dbg !5837
  %22 = load i32, i32* %nrefs, align 8, !dbg !5837
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5838
  %nrefs22 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 7, !dbg !5838
  %24 = load i32, i32* %nrefs22, align 8, !dbg !5839
  %add = add nsw i32 %24, %22, !dbg !5839
  store i32 %add, i32* %nrefs22, align 8, !dbg !5839
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5840
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 8, !dbg !5840
  %26 = load i32, i32* %freq, align 4, !dbg !5840
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5841
  %freq23 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 8, !dbg !5841
  %28 = load i32, i32* %freq23, align 4, !dbg !5842
  %add24 = add nsw i32 %28, %26, !dbg !5842
  store i32 %add24, i32* %freq23, align 4, !dbg !5842
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5843
  %call_freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 29, !dbg !5843
  %30 = load i32, i32* %call_freq, align 4, !dbg !5843
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5844
  %call_freq25 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 29, !dbg !5844
  %32 = load i32, i32* %call_freq25, align 4, !dbg !5845
  %add26 = add nsw i32 %32, %30, !dbg !5845
  store i32 %add26, i32* %call_freq25, align 4, !dbg !5845
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5846
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %33, i32 0, i32 31, !dbg !5846
  %bf.load27 = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !5846
  %bf.lshr28 = lshr i16 %bf.load27, 5, !dbg !5846
  %bf.clear29 = and i16 %bf.lshr28, 1, !dbg !5846
  %bf.cast30 = zext i16 %bf.clear29 to i32, !dbg !5846
  %tobool31 = icmp ne i32 %bf.cast30, 0, !dbg !5846
  br i1 %tobool31, label %if.then32, label %if.end36, !dbg !5848

if.then32:                                        ; preds = %if.end21
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5849
  %total_no_stack_reg_p33 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 31, !dbg !5849
  %bf.load34 = load i16, i16* %total_no_stack_reg_p33, align 4, !dbg !5850
  %bf.clear35 = and i16 %bf.load34, -33, !dbg !5850
  %bf.set = or i16 %bf.clear35, 32, !dbg !5850
  store i16 %bf.set, i16* %total_no_stack_reg_p33, align 4, !dbg !5850
  br label %if.end36, !dbg !5849

if.end36:                                         ; preds = %if.then32, %if.end21
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5851
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 27, !dbg !5851
  %36 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !5851
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5851
  %total_conflict_hard_regs37 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 27, !dbg !5851
  %38 = load i64, i64* %total_conflict_hard_regs37, align 8, !dbg !5851
  %or = or i64 %38, %36, !dbg !5851
  store i64 %or, i64* %total_conflict_hard_regs37, align 8, !dbg !5851
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5852
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 30, !dbg !5852
  %40 = load i32, i32* %calls_crossed_num, align 8, !dbg !5852
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5853
  %calls_crossed_num38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 30, !dbg !5853
  %42 = load i32, i32* %calls_crossed_num38, align 8, !dbg !5854
  %add39 = add nsw i32 %42, %40, !dbg !5854
  store i32 %add39, i32* %calls_crossed_num38, align 8, !dbg !5854
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5855
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 14, !dbg !5855
  %44 = load i32, i32* %excess_pressure_points_num, align 4, !dbg !5855
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5856
  %excess_pressure_points_num40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 14, !dbg !5856
  %46 = load i32, i32* %excess_pressure_points_num40, align 4, !dbg !5857
  %add41 = add nsw i32 %46, %44, !dbg !5857
  store i32 %add41, i32* %excess_pressure_points_num40, align 4, !dbg !5857
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5858
  %cover_class42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %47, i32 0, i32 9, !dbg !5858
  %48 = load i32, i32* %cover_class42, align 8, !dbg !5858
  store i32 %48, i32* %cover_class, align 4, !dbg !5859
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5860
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %49, i32 0, i32 33, !dbg !5860
  %50 = load i32, i32* %cover_class, align 4, !dbg !5861
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5862
  %hard_reg_costs43 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 33, !dbg !5862
  %52 = load i32*, i32** %hard_reg_costs43, align 8, !dbg !5862
  call void @ira_allocate_and_accumulate_costs(i32** %hard_reg_costs, i32 %50, i32* %52), !dbg !5863
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5864
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 35, !dbg !5864
  %54 = load i32, i32* %cover_class, align 4, !dbg !5865
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5866
  %conflict_hard_reg_costs44 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 35, !dbg !5866
  %56 = load i32*, i32** %conflict_hard_reg_costs44, align 8, !dbg !5866
  call void @ira_allocate_and_accumulate_costs(i32** %conflict_hard_reg_costs, i32 %54, i32* %56), !dbg !5867
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5868
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 10, !dbg !5868
  %58 = load i32, i32* %cover_class_cost, align 4, !dbg !5868
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5869
  %cover_class_cost45 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 10, !dbg !5869
  %60 = load i32, i32* %cover_class_cost45, align 4, !dbg !5870
  %add46 = add nsw i32 %60, %58, !dbg !5870
  store i32 %add46, i32* %cover_class_cost45, align 4, !dbg !5870
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5871
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 12, !dbg !5871
  %62 = load i32, i32* %memory_cost, align 4, !dbg !5871
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !5872
  %memory_cost47 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %63, i32 0, i32 12, !dbg !5872
  %64 = load i32, i32* %memory_cost47, align 4, !dbg !5873
  %add48 = add nsw i32 %64, %62, !dbg !5873
  store i32 %add48, i32* %memory_cost47, align 4, !dbg !5873
  br label %if.end49, !dbg !5874

if.end49:                                         ; preds = %if.end36, %land.lhs.true12, %land.lhs.true8, %for.body5
  br label %for.inc, !dbg !5875

for.inc:                                          ; preds = %if.end49
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5876
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 5, !dbg !5876
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !5876
  store %struct.ira_allocno* %66, %struct.ira_allocno** %a, align 8, !dbg !5877
  br label %for.cond3, !dbg !5878, !llvm.loop !5879

for.end:                                          ; preds = %for.cond3
  br label %for.inc50, !dbg !5880

for.inc50:                                        ; preds = %for.end
  %67 = load i32, i32* %i, align 4, !dbg !5881
  %dec = add nsw i32 %67, -1, !dbg !5881
  store i32 %dec, i32* %i, align 4, !dbg !5881
  br label %for.cond, !dbg !5882, !llvm.loop !5883

for.end51:                                        ; preds = %if.then, %for.cond
  ret void, !dbg !5885
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_caps() #0 !dbg !5886 {
entry:
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %loop_tree_node = alloca %struct.ira_loop_tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5887, metadata !DIExpression()), !dbg !5888
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !5889, metadata !DIExpression()), !dbg !5890
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node, metadata !5891, metadata !DIExpression()), !dbg !5892
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5893
  br label %for.cond, !dbg !5893

for.cond:                                         ; preds = %if.end14, %if.then, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5895
  %tobool = icmp ne i8 %call, 0, !dbg !5893
  br i1 %tobool, label %for.body, label %for.end, !dbg !5893

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5897
  %loop_tree_node1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 6, !dbg !5897
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node1, align 8, !dbg !5897
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !5900
  %cmp = icmp eq %struct.ira_loop_tree_node* %1, %2, !dbg !5901
  br i1 %cmp, label %if.then, label %if.end, !dbg !5902

if.then:                                          ; preds = %for.body
  br label %for.cond, !dbg !5903, !llvm.loop !5904

if.end:                                           ; preds = %for.body
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5906
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 17, !dbg !5906
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !5906
  %cmp2 = icmp ne %struct.ira_allocno* %4, null, !dbg !5908
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !5909

if.then3:                                         ; preds = %if.end
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5910
  %call4 = call %struct.ira_allocno* @create_cap_allocno(%struct.ira_allocno* %5), !dbg !5911
  br label %if.end14, !dbg !5911

if.else:                                          ; preds = %if.end
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5912
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 16, !dbg !5912
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !5912
  %cmp5 = icmp eq %struct.ira_allocno* %7, null, !dbg !5914
  br i1 %cmp5, label %if.then6, label %if.end13, !dbg !5915

if.then6:                                         ; preds = %if.else
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5916
  %loop_tree_node7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 6, !dbg !5916
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node7, align 8, !dbg !5916
  store %struct.ira_loop_tree_node* %9, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !5918
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !5919
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 13, !dbg !5921
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !5921
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5922
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 0, !dbg !5922
  %13 = load i32, i32* %num, align 8, !dbg !5922
  %call8 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %11, i32 %13), !dbg !5923
  %tobool9 = icmp ne i32 %call8, 0, !dbg !5923
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !5924

if.then10:                                        ; preds = %if.then6
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5925
  %call11 = call %struct.ira_allocno* @create_cap_allocno(%struct.ira_allocno* %14), !dbg !5926
  br label %if.end12, !dbg !5926

if.end12:                                         ; preds = %if.then10, %if.then6
  br label %if.end13, !dbg !5927

if.end13:                                         ; preds = %if.end12, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then3
  br label %for.cond, !dbg !5895, !llvm.loop !5904

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5928
}

declare dso_local void @ira_tune_allocno_costs_and_cover_classes() #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_min_max_allocno_live_range_point() #0 !dbg !5929 {
entry:
  %i = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %parent_a = alloca %struct.ira_allocno*, align 8
  %cap = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5930, metadata !DIExpression()), !dbg !5931
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5932, metadata !DIExpression()), !dbg !5933
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_a, metadata !5934, metadata !DIExpression()), !dbg !5935
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %cap, metadata !5936, metadata !DIExpression()), !dbg !5937
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !5938, metadata !DIExpression()), !dbg !5939
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !5940, metadata !DIExpression()), !dbg !5941
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !5942, metadata !DIExpression()), !dbg !5943
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5944
  br label %for.cond, !dbg !5944

for.cond:                                         ; preds = %for.end, %if.then, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5946
  %tobool = icmp ne i8 %call, 0, !dbg !5944
  br i1 %tobool, label %for.body, label %for.end5, !dbg !5944

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5948
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 20, !dbg !5948
  %1 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !5948
  store %struct.ira_allocno_live_range* %1, %struct.ira_allocno_live_range** %r, align 8, !dbg !5950
  %2 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5951
  %cmp = icmp eq %struct.ira_allocno_live_range* %2, null, !dbg !5953
  br i1 %cmp, label %if.then, label %if.end, !dbg !5954

if.then:                                          ; preds = %for.body
  br label %for.cond, !dbg !5955, !llvm.loop !5956

if.end:                                           ; preds = %for.body
  %3 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5958
  %finish = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %3, i32 0, i32 2, !dbg !5959
  %4 = load i32, i32* %finish, align 4, !dbg !5959
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5960
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 22, !dbg !5960
  store i32 %4, i32* %max, align 4, !dbg !5961
  br label %for.cond1, !dbg !5962

for.cond1:                                        ; preds = %for.inc, %if.end
  %6 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5963
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %6, i32 0, i32 3, !dbg !5966
  %7 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !5966
  %cmp2 = icmp ne %struct.ira_allocno_live_range* %7, null, !dbg !5967
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !5968

for.body3:                                        ; preds = %for.cond1
  br label %for.inc, !dbg !5968

for.inc:                                          ; preds = %for.body3
  %8 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5969
  %next4 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %8, i32 0, i32 3, !dbg !5970
  %9 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next4, align 8, !dbg !5970
  store %struct.ira_allocno_live_range* %9, %struct.ira_allocno_live_range** %r, align 8, !dbg !5971
  br label %for.cond1, !dbg !5972, !llvm.loop !5973

for.end:                                          ; preds = %for.cond1
  %10 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !5975
  %start = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %10, i32 0, i32 1, !dbg !5976
  %11 = load i32, i32* %start, align 8, !dbg !5976
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5977
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 21, !dbg !5977
  store i32 %11, i32* %min, align 8, !dbg !5978
  br label %for.cond, !dbg !5946, !llvm.loop !5956

for.end5:                                         ; preds = %for.cond
  %call6 = call i32 @max_reg_num(), !dbg !5979
  %sub = sub nsw i32 %call6, 1, !dbg !5981
  store i32 %sub, i32* %i, align 4, !dbg !5982
  br label %for.cond7, !dbg !5983

for.cond7:                                        ; preds = %for.inc64, %for.end5
  %13 = load i32, i32* %i, align 4, !dbg !5984
  %cmp8 = icmp sge i32 %13, 53, !dbg !5986
  br i1 %cmp8, label %for.body9, label %for.end65, !dbg !5987

for.body9:                                        ; preds = %for.cond7
  %14 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5988
  %15 = load i32, i32* %i, align 4, !dbg !5990
  %idxprom = sext i32 %15 to i64, !dbg !5988
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %14, i64 %idxprom, !dbg !5988
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !5988
  store %struct.ira_allocno* %16, %struct.ira_allocno** %a, align 8, !dbg !5991
  br label %for.cond10, !dbg !5992

for.cond10:                                       ; preds = %for.inc62, %for.body9
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5993
  %cmp11 = icmp ne %struct.ira_allocno* %17, null, !dbg !5995
  br i1 %cmp11, label %for.body12, label %for.end63, !dbg !5996

for.body12:                                       ; preds = %for.cond10
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5997
  %max13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 22, !dbg !5997
  %19 = load i32, i32* %max13, align 4, !dbg !5997
  %cmp14 = icmp slt i32 %19, 0, !dbg !6000
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6001

if.then15:                                        ; preds = %for.body12
  br label %for.inc62, !dbg !6002

if.end16:                                         ; preds = %for.body12
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6003
  %cap17 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 16, !dbg !6003
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %cap17, align 8, !dbg !6003
  %cmp18 = icmp ne %struct.ira_allocno* %21, null, !dbg !6005
  br i1 %cmp18, label %if.then19, label %if.end41, !dbg !6006

if.then19:                                        ; preds = %if.end16
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6007
  %cap20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 16, !dbg !6007
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %cap20, align 8, !dbg !6007
  store %struct.ira_allocno* %23, %struct.ira_allocno** %cap, align 8, !dbg !6010
  br label %for.cond21, !dbg !6011

for.cond21:                                       ; preds = %for.inc38, %if.then19
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !6012
  %cmp22 = icmp ne %struct.ira_allocno* %24, null, !dbg !6014
  br i1 %cmp22, label %for.body23, label %for.end40, !dbg !6015

for.body23:                                       ; preds = %for.cond21
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !6016
  %max24 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 22, !dbg !6016
  %26 = load i32, i32* %max24, align 4, !dbg !6016
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6019
  %max25 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 22, !dbg !6019
  %28 = load i32, i32* %max25, align 4, !dbg !6019
  %cmp26 = icmp slt i32 %26, %28, !dbg !6020
  br i1 %cmp26, label %if.then27, label %if.end30, !dbg !6021

if.then27:                                        ; preds = %for.body23
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6022
  %max28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 22, !dbg !6022
  %30 = load i32, i32* %max28, align 4, !dbg !6022
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !6023
  %max29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 22, !dbg !6023
  store i32 %30, i32* %max29, align 4, !dbg !6024
  br label %if.end30, !dbg !6023

if.end30:                                         ; preds = %if.then27, %for.body23
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !6025
  %min31 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 21, !dbg !6025
  %33 = load i32, i32* %min31, align 8, !dbg !6025
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6027
  %min32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 21, !dbg !6027
  %35 = load i32, i32* %min32, align 8, !dbg !6027
  %cmp33 = icmp sgt i32 %33, %35, !dbg !6028
  br i1 %cmp33, label %if.then34, label %if.end37, !dbg !6029

if.then34:                                        ; preds = %if.end30
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6030
  %min35 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 21, !dbg !6030
  %37 = load i32, i32* %min35, align 8, !dbg !6030
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !6031
  %min36 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 21, !dbg !6031
  store i32 %37, i32* %min36, align 8, !dbg !6032
  br label %if.end37, !dbg !6031

if.end37:                                         ; preds = %if.then34, %if.end30
  br label %for.inc38, !dbg !6033

for.inc38:                                        ; preds = %if.end37
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !6034
  %cap39 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 16, !dbg !6034
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %cap39, align 8, !dbg !6034
  store %struct.ira_allocno* %40, %struct.ira_allocno** %cap, align 8, !dbg !6035
  br label %for.cond21, !dbg !6036, !llvm.loop !6037

for.end40:                                        ; preds = %for.cond21
  br label %for.inc62, !dbg !6039

if.end41:                                         ; preds = %if.end16
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6040
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 6, !dbg !6040
  %42 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !6040
  %parent42 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %42, i32 0, i32 6, !dbg !6042
  %43 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent42, align 8, !dbg !6042
  store %struct.ira_loop_tree_node* %43, %struct.ira_loop_tree_node** %parent, align 8, !dbg !6043
  %cmp43 = icmp eq %struct.ira_loop_tree_node* %43, null, !dbg !6044
  br i1 %cmp43, label %if.then44, label %if.end45, !dbg !6045

if.then44:                                        ; preds = %if.end41
  br label %for.inc62, !dbg !6046

if.end45:                                         ; preds = %if.end41
  %44 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !6047
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %44, i32 0, i32 9, !dbg !6048
  %45 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !6048
  %46 = load i32, i32* %i, align 4, !dbg !6049
  %idxprom46 = sext i32 %46 to i64, !dbg !6047
  %arrayidx47 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %45, i64 %idxprom46, !dbg !6047
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx47, align 8, !dbg !6047
  store %struct.ira_allocno* %47, %struct.ira_allocno** %parent_a, align 8, !dbg !6050
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !6051
  %max48 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 22, !dbg !6051
  %49 = load i32, i32* %max48, align 4, !dbg !6051
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6053
  %max49 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 22, !dbg !6053
  %51 = load i32, i32* %max49, align 4, !dbg !6053
  %cmp50 = icmp slt i32 %49, %51, !dbg !6054
  br i1 %cmp50, label %if.then51, label %if.end54, !dbg !6055

if.then51:                                        ; preds = %if.end45
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6056
  %max52 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 22, !dbg !6056
  %53 = load i32, i32* %max52, align 4, !dbg !6056
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !6057
  %max53 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %54, i32 0, i32 22, !dbg !6057
  store i32 %53, i32* %max53, align 4, !dbg !6058
  br label %if.end54, !dbg !6057

if.end54:                                         ; preds = %if.then51, %if.end45
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !6059
  %min55 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 21, !dbg !6059
  %56 = load i32, i32* %min55, align 8, !dbg !6059
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6061
  %min56 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 21, !dbg !6061
  %58 = load i32, i32* %min56, align 8, !dbg !6061
  %cmp57 = icmp sgt i32 %56, %58, !dbg !6062
  br i1 %cmp57, label %if.then58, label %if.end61, !dbg !6063

if.then58:                                        ; preds = %if.end54
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6064
  %min59 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 21, !dbg !6064
  %60 = load i32, i32* %min59, align 8, !dbg !6064
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !6065
  %min60 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 21, !dbg !6065
  store i32 %60, i32* %min60, align 8, !dbg !6066
  br label %if.end61, !dbg !6065

if.end61:                                         ; preds = %if.then58, %if.end54
  br label %for.inc62, !dbg !6067

for.inc62:                                        ; preds = %if.end61, %if.then44, %for.end40, %if.then15
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6068
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 5, !dbg !6068
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !6068
  store %struct.ira_allocno* %63, %struct.ira_allocno** %a, align 8, !dbg !6069
  br label %for.cond10, !dbg !6070, !llvm.loop !6071

for.end63:                                        ; preds = %for.cond10
  br label %for.inc64, !dbg !6072

for.inc64:                                        ; preds = %for.end63
  %64 = load i32, i32* %i, align 4, !dbg !6073
  %dec = add nsw i32 %64, -1, !dbg !6073
  store i32 %dec, i32* %i, align 4, !dbg !6073
  br label %for.cond7, !dbg !6074, !llvm.loop !6075

for.end65:                                        ; preds = %for.cond7
  ret void, !dbg !6077
}

; Function Attrs: noinline nounwind uwtable
define internal void @sort_conflict_id_allocno_map() #0 !dbg !6078 {
entry:
  %i = alloca i32, align 4
  %num = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6079, metadata !DIExpression()), !dbg !6080
  call void @llvm.dbg.declare(metadata i32* %num, metadata !6081, metadata !DIExpression()), !dbg !6082
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6083, metadata !DIExpression()), !dbg !6084
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !6085, metadata !DIExpression()), !dbg !6086
  store i32 0, i32* %num, align 4, !dbg !6087
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !6088
  br label %for.cond, !dbg !6088

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !6090
  %tobool = icmp ne i8 %call, 0, !dbg !6088
  br i1 %tobool, label %for.body, label %for.end, !dbg !6088

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6092
  %1 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6093
  %2 = load i32, i32* %num, align 4, !dbg !6094
  %inc = add nsw i32 %2, 1, !dbg !6094
  store i32 %inc, i32* %num, align 4, !dbg !6094
  %idxprom = sext i32 %2 to i64, !dbg !6093
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %1, i64 %idxprom, !dbg !6093
  store %struct.ira_allocno* %0, %struct.ira_allocno** %arrayidx, align 8, !dbg !6095
  br label %for.cond, !dbg !6090, !llvm.loop !6096

for.end:                                          ; preds = %for.cond
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6098
  %4 = bitcast %struct.ira_allocno** %3 to i8*, !dbg !6098
  %5 = load i32, i32* %num, align 4, !dbg !6099
  %conv = sext i32 %5 to i64, !dbg !6099
  call void @spec_qsort(i8* %4, i64 %conv, i64 8, i32 (i8*, i8*)* @allocno_range_compare_func), !dbg !6100
  store i32 0, i32* %i, align 4, !dbg !6101
  br label %for.cond1, !dbg !6103

for.cond1:                                        ; preds = %for.inc, %for.end
  %6 = load i32, i32* %i, align 4, !dbg !6104
  %7 = load i32, i32* %num, align 4, !dbg !6106
  %cmp = icmp slt i32 %6, %7, !dbg !6107
  br i1 %cmp, label %for.body3, label %for.end9, !dbg !6108

for.body3:                                        ; preds = %for.cond1
  %8 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6109
  %9 = load i32, i32* %i, align 4, !dbg !6111
  %idxprom4 = sext i32 %9 to i64, !dbg !6109
  %arrayidx5 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %8, i64 %idxprom4, !dbg !6109
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx5, align 8, !dbg !6109
  store %struct.ira_allocno* %10, %struct.ira_allocno** %a, align 8, !dbg !6112
  %cmp6 = icmp ne %struct.ira_allocno* %10, null, !dbg !6113
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6114

if.then:                                          ; preds = %for.body3
  %11 = load i32, i32* %i, align 4, !dbg !6115
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6116
  %conflict_id = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 24, !dbg !6116
  store i32 %11, i32* %conflict_id, align 8, !dbg !6117
  br label %if.end, !dbg !6116

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !6118

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4, !dbg !6119
  %inc8 = add nsw i32 %13, 1, !dbg !6119
  store i32 %inc8, i32* %i, align 4, !dbg !6119
  br label %for.cond1, !dbg !6120, !llvm.loop !6121

for.end9:                                         ; preds = %for.cond1
  %14 = load i32, i32* %num, align 4, !dbg !6123
  store i32 %14, i32* %i, align 4, !dbg !6125
  br label %for.cond10, !dbg !6126

for.cond10:                                       ; preds = %for.inc16, %for.end9
  %15 = load i32, i32* %i, align 4, !dbg !6127
  %16 = load i32, i32* @ira_allocnos_num, align 4, !dbg !6129
  %cmp11 = icmp slt i32 %15, %16, !dbg !6130
  br i1 %cmp11, label %for.body13, label %for.end18, !dbg !6131

for.body13:                                       ; preds = %for.cond10
  %17 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6132
  %18 = load i32, i32* %i, align 4, !dbg !6133
  %idxprom14 = sext i32 %18 to i64, !dbg !6132
  %arrayidx15 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %17, i64 %idxprom14, !dbg !6132
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx15, align 8, !dbg !6134
  br label %for.inc16, !dbg !6132

for.inc16:                                        ; preds = %for.body13
  %19 = load i32, i32* %i, align 4, !dbg !6135
  %inc17 = add nsw i32 %19, 1, !dbg !6135
  store i32 %inc17, i32* %i, align 4, !dbg !6135
  br label %for.cond10, !dbg !6136, !llvm.loop !6137

for.end18:                                        ; preds = %for.cond10
  ret void, !dbg !6139
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_min_max_conflict_allocno_ids() #0 !dbg !6140 {
entry:
  %cover_class = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %start = alloca i32, align 4
  %finish = alloca i32, align 4
  %first_not_finished = alloca i32, align 4
  %filled_area_start = alloca i32, align 4
  %live_range_min = alloca i32*, align 8
  %last_lived = alloca i32*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !6141, metadata !DIExpression()), !dbg !6142
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6143, metadata !DIExpression()), !dbg !6144
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6145, metadata !DIExpression()), !dbg !6146
  call void @llvm.dbg.declare(metadata i32* %min, metadata !6147, metadata !DIExpression()), !dbg !6148
  call void @llvm.dbg.declare(metadata i32* %max, metadata !6149, metadata !DIExpression()), !dbg !6150
  call void @llvm.dbg.declare(metadata i32* %start, metadata !6151, metadata !DIExpression()), !dbg !6152
  call void @llvm.dbg.declare(metadata i32* %finish, metadata !6153, metadata !DIExpression()), !dbg !6154
  call void @llvm.dbg.declare(metadata i32* %first_not_finished, metadata !6155, metadata !DIExpression()), !dbg !6156
  call void @llvm.dbg.declare(metadata i32* %filled_area_start, metadata !6157, metadata !DIExpression()), !dbg !6158
  call void @llvm.dbg.declare(metadata i32** %live_range_min, metadata !6159, metadata !DIExpression()), !dbg !6160
  call void @llvm.dbg.declare(metadata i32** %last_lived, metadata !6161, metadata !DIExpression()), !dbg !6162
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6163, metadata !DIExpression()), !dbg !6164
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !6165
  %conv = sext i32 %0 to i64, !dbg !6165
  %mul = mul i64 4, %conv, !dbg !6166
  %call = call i8* @ira_allocate(i64 %mul), !dbg !6167
  %1 = bitcast i8* %call to i32*, !dbg !6168
  store i32* %1, i32** %live_range_min, align 8, !dbg !6169
  store i32 -1, i32* %cover_class, align 4, !dbg !6170
  store i32 -1, i32* %first_not_finished, align 4, !dbg !6171
  store i32 0, i32* %i, align 4, !dbg !6172
  br label %for.cond, !dbg !6174

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !6175
  %3 = load i32, i32* @ira_allocnos_num, align 4, !dbg !6177
  %cmp = icmp slt i32 %2, %3, !dbg !6178
  br i1 %cmp, label %for.body, label %for.end, !dbg !6179

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6180
  %5 = load i32, i32* %i, align 4, !dbg !6182
  %idxprom = sext i32 %5 to i64, !dbg !6180
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !6180
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !6180
  store %struct.ira_allocno* %6, %struct.ira_allocno** %a, align 8, !dbg !6183
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6184
  %cmp2 = icmp eq %struct.ira_allocno* %7, null, !dbg !6186
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6187

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6188

if.end:                                           ; preds = %for.body
  %8 = load i32, i32* %cover_class, align 4, !dbg !6189
  %cmp4 = icmp slt i32 %8, 0, !dbg !6191
  br i1 %cmp4, label %if.then11, label %lor.lhs.false, !dbg !6192

lor.lhs.false:                                    ; preds = %if.end
  %9 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !6193
  %cmp6 = icmp ne i32 %9, 1, !dbg !6194
  br i1 %cmp6, label %land.lhs.true, label %if.else, !dbg !6195

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i32, i32* %cover_class, align 4, !dbg !6196
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6197
  %cover_class8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 9, !dbg !6197
  %12 = load i32, i32* %cover_class8, align 8, !dbg !6197
  %cmp9 = icmp ne i32 %10, %12, !dbg !6198
  br i1 %cmp9, label %if.then11, label %if.else, !dbg !6199

if.then11:                                        ; preds = %land.lhs.true, %if.end
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6200
  %cover_class12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 9, !dbg !6200
  %14 = load i32, i32* %cover_class12, align 8, !dbg !6200
  store i32 %14, i32* %cover_class, align 4, !dbg !6202
  %15 = load i32, i32* %i, align 4, !dbg !6203
  store i32 %15, i32* %min, align 4, !dbg !6204
  %16 = load i32, i32* %i, align 4, !dbg !6205
  store i32 %16, i32* %first_not_finished, align 4, !dbg !6206
  br label %if.end21, !dbg !6207

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6208
  %min13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 21, !dbg !6208
  %18 = load i32, i32* %min13, align 8, !dbg !6208
  store i32 %18, i32* %start, align 4, !dbg !6210
  br label %while.cond, !dbg !6211

while.cond:                                       ; preds = %while.body, %if.else
  %19 = load i32, i32* %first_not_finished, align 4, !dbg !6212
  %20 = load i32, i32* %i, align 4, !dbg !6213
  %cmp14 = icmp slt i32 %19, %20, !dbg !6214
  br i1 %cmp14, label %land.rhs, label %land.end, !dbg !6215

land.rhs:                                         ; preds = %while.cond
  %21 = load i32, i32* %start, align 4, !dbg !6216
  %22 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6217
  %23 = load i32, i32* %first_not_finished, align 4, !dbg !6217
  %idxprom16 = sext i32 %23 to i64, !dbg !6217
  %arrayidx17 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %22, i64 %idxprom16, !dbg !6217
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx17, align 8, !dbg !6217
  %max18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 22, !dbg !6217
  %25 = load i32, i32* %max18, align 4, !dbg !6217
  %cmp19 = icmp sgt i32 %21, %25, !dbg !6218
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %26 = phi i1 [ false, %while.cond ], [ %cmp19, %land.rhs ], !dbg !6219
  br i1 %26, label %while.body, label %while.end, !dbg !6211

while.body:                                       ; preds = %land.end
  %27 = load i32, i32* %first_not_finished, align 4, !dbg !6220
  %inc = add nsw i32 %27, 1, !dbg !6220
  store i32 %inc, i32* %first_not_finished, align 4, !dbg !6220
  br label %while.cond, !dbg !6211, !llvm.loop !6221

while.end:                                        ; preds = %land.end
  %28 = load i32, i32* %first_not_finished, align 4, !dbg !6222
  store i32 %28, i32* %min, align 4, !dbg !6223
  br label %if.end21

if.end21:                                         ; preds = %while.end, %if.then11
  %29 = load i32, i32* %min, align 4, !dbg !6224
  %30 = load i32, i32* %i, align 4, !dbg !6226
  %cmp22 = icmp eq i32 %29, %30, !dbg !6227
  br i1 %cmp22, label %if.then24, label %if.end26, !dbg !6228

if.then24:                                        ; preds = %if.end21
  %31 = load i32, i32* %min, align 4, !dbg !6229
  %inc25 = add nsw i32 %31, 1, !dbg !6229
  store i32 %inc25, i32* %min, align 4, !dbg !6229
  br label %if.end26, !dbg !6230

if.end26:                                         ; preds = %if.then24, %if.end21
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6231
  %min27 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 21, !dbg !6231
  %33 = load i32, i32* %min27, align 8, !dbg !6231
  %34 = load i32*, i32** %live_range_min, align 8, !dbg !6232
  %35 = load i32, i32* %i, align 4, !dbg !6233
  %idxprom28 = sext i32 %35 to i64, !dbg !6232
  %arrayidx29 = getelementptr inbounds i32, i32* %34, i64 %idxprom28, !dbg !6232
  store i32 %33, i32* %arrayidx29, align 4, !dbg !6234
  %36 = load i32, i32* %min, align 4, !dbg !6235
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6236
  %min30 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 21, !dbg !6236
  store i32 %36, i32* %min30, align 8, !dbg !6237
  br label %for.inc, !dbg !6238

for.inc:                                          ; preds = %if.end26, %if.then
  %38 = load i32, i32* %i, align 4, !dbg !6239
  %inc31 = add nsw i32 %38, 1, !dbg !6239
  store i32 %inc31, i32* %i, align 4, !dbg !6239
  br label %for.cond, !dbg !6240, !llvm.loop !6241

for.end:                                          ; preds = %for.cond
  %39 = load i32, i32* @ira_max_point, align 4, !dbg !6243
  %conv32 = sext i32 %39 to i64, !dbg !6243
  %mul33 = mul i64 4, %conv32, !dbg !6244
  %call34 = call i8* @ira_allocate(i64 %mul33), !dbg !6245
  %40 = bitcast i8* %call34 to i32*, !dbg !6246
  store i32* %40, i32** %last_lived, align 8, !dbg !6247
  store i32 -1, i32* %cover_class, align 4, !dbg !6248
  store i32 -1, i32* %filled_area_start, align 4, !dbg !6249
  %41 = load i32, i32* @ira_allocnos_num, align 4, !dbg !6250
  %sub = sub nsw i32 %41, 1, !dbg !6252
  store i32 %sub, i32* %i, align 4, !dbg !6253
  br label %for.cond35, !dbg !6254

for.cond35:                                       ; preds = %for.inc86, %for.end
  %42 = load i32, i32* %i, align 4, !dbg !6255
  %cmp36 = icmp sge i32 %42, 0, !dbg !6257
  br i1 %cmp36, label %for.body38, label %for.end87, !dbg !6258

for.body38:                                       ; preds = %for.cond35
  %43 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !6259
  %44 = load i32, i32* %i, align 4, !dbg !6261
  %idxprom39 = sext i32 %44 to i64, !dbg !6259
  %arrayidx40 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %43, i64 %idxprom39, !dbg !6259
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx40, align 8, !dbg !6259
  store %struct.ira_allocno* %45, %struct.ira_allocno** %a, align 8, !dbg !6262
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6263
  %cmp41 = icmp eq %struct.ira_allocno* %46, null, !dbg !6265
  br i1 %cmp41, label %if.then43, label %if.end44, !dbg !6266

if.then43:                                        ; preds = %for.body38
  br label %for.inc86, !dbg !6267

if.end44:                                         ; preds = %for.body38
  %47 = load i32, i32* %cover_class, align 4, !dbg !6268
  %cmp45 = icmp slt i32 %47, 0, !dbg !6270
  br i1 %cmp45, label %if.then54, label %lor.lhs.false47, !dbg !6271

lor.lhs.false47:                                  ; preds = %if.end44
  %48 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !6272
  %cmp48 = icmp ne i32 %48, 1, !dbg !6273
  br i1 %cmp48, label %land.lhs.true50, label %if.end65, !dbg !6274

land.lhs.true50:                                  ; preds = %lor.lhs.false47
  %49 = load i32, i32* %cover_class, align 4, !dbg !6275
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6276
  %cover_class51 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 9, !dbg !6276
  %51 = load i32, i32* %cover_class51, align 8, !dbg !6276
  %cmp52 = icmp ne i32 %49, %51, !dbg !6277
  br i1 %cmp52, label %if.then54, label %if.end65, !dbg !6278

if.then54:                                        ; preds = %land.lhs.true50, %if.end44
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6279
  %cover_class55 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 9, !dbg !6279
  %53 = load i32, i32* %cover_class55, align 8, !dbg !6279
  store i32 %53, i32* %cover_class, align 4, !dbg !6281
  store i32 0, i32* %j, align 4, !dbg !6282
  br label %for.cond56, !dbg !6284

for.cond56:                                       ; preds = %for.inc62, %if.then54
  %54 = load i32, i32* %j, align 4, !dbg !6285
  %55 = load i32, i32* @ira_max_point, align 4, !dbg !6287
  %cmp57 = icmp slt i32 %54, %55, !dbg !6288
  br i1 %cmp57, label %for.body59, label %for.end64, !dbg !6289

for.body59:                                       ; preds = %for.cond56
  %56 = load i32*, i32** %last_lived, align 8, !dbg !6290
  %57 = load i32, i32* %j, align 4, !dbg !6291
  %idxprom60 = sext i32 %57 to i64, !dbg !6290
  %arrayidx61 = getelementptr inbounds i32, i32* %56, i64 %idxprom60, !dbg !6290
  store i32 -1, i32* %arrayidx61, align 4, !dbg !6292
  br label %for.inc62, !dbg !6290

for.inc62:                                        ; preds = %for.body59
  %58 = load i32, i32* %j, align 4, !dbg !6293
  %inc63 = add nsw i32 %58, 1, !dbg !6293
  store i32 %inc63, i32* %j, align 4, !dbg !6293
  br label %for.cond56, !dbg !6294, !llvm.loop !6295

for.end64:                                        ; preds = %for.cond56
  %59 = load i32, i32* @ira_max_point, align 4, !dbg !6297
  store i32 %59, i32* %filled_area_start, align 4, !dbg !6298
  br label %if.end65, !dbg !6299

if.end65:                                         ; preds = %for.end64, %land.lhs.true50, %lor.lhs.false47
  %60 = load i32*, i32** %live_range_min, align 8, !dbg !6300
  %61 = load i32, i32* %i, align 4, !dbg !6301
  %idxprom66 = sext i32 %61 to i64, !dbg !6300
  %arrayidx67 = getelementptr inbounds i32, i32* %60, i64 %idxprom66, !dbg !6300
  %62 = load i32, i32* %arrayidx67, align 4, !dbg !6300
  store i32 %62, i32* %min, align 4, !dbg !6302
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6303
  %max68 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %63, i32 0, i32 22, !dbg !6303
  %64 = load i32, i32* %max68, align 4, !dbg !6303
  store i32 %64, i32* %finish, align 4, !dbg !6304
  %65 = load i32*, i32** %last_lived, align 8, !dbg !6305
  %66 = load i32, i32* %finish, align 4, !dbg !6306
  %idxprom69 = sext i32 %66 to i64, !dbg !6305
  %arrayidx70 = getelementptr inbounds i32, i32* %65, i64 %idxprom69, !dbg !6305
  %67 = load i32, i32* %arrayidx70, align 4, !dbg !6305
  store i32 %67, i32* %max, align 4, !dbg !6307
  %68 = load i32, i32* %max, align 4, !dbg !6308
  %cmp71 = icmp slt i32 %68, 0, !dbg !6310
  br i1 %cmp71, label %if.then73, label %if.end75, !dbg !6311

if.then73:                                        ; preds = %if.end65
  %69 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6312
  %conflict_id = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %69, i32 0, i32 24, !dbg !6312
  %70 = load i32, i32* %conflict_id, align 8, !dbg !6312
  %sub74 = sub nsw i32 %70, 1, !dbg !6313
  store i32 %sub74, i32* %max, align 4, !dbg !6314
  br label %if.end75, !dbg !6315

if.end75:                                         ; preds = %if.then73, %if.end65
  %71 = load i32, i32* %max, align 4, !dbg !6316
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6317
  %max76 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 22, !dbg !6317
  store i32 %71, i32* %max76, align 4, !dbg !6318
  %73 = load i32, i32* %min, align 4, !dbg !6319
  store i32 %73, i32* %j, align 4, !dbg !6321
  br label %for.cond77, !dbg !6322

for.cond77:                                       ; preds = %for.inc83, %if.end75
  %74 = load i32, i32* %j, align 4, !dbg !6323
  %75 = load i32, i32* %filled_area_start, align 4, !dbg !6325
  %cmp78 = icmp slt i32 %74, %75, !dbg !6326
  br i1 %cmp78, label %for.body80, label %for.end85, !dbg !6327

for.body80:                                       ; preds = %for.cond77
  %76 = load i32, i32* %i, align 4, !dbg !6328
  %77 = load i32*, i32** %last_lived, align 8, !dbg !6329
  %78 = load i32, i32* %j, align 4, !dbg !6330
  %idxprom81 = sext i32 %78 to i64, !dbg !6329
  %arrayidx82 = getelementptr inbounds i32, i32* %77, i64 %idxprom81, !dbg !6329
  store i32 %76, i32* %arrayidx82, align 4, !dbg !6331
  br label %for.inc83, !dbg !6329

for.inc83:                                        ; preds = %for.body80
  %79 = load i32, i32* %j, align 4, !dbg !6332
  %inc84 = add nsw i32 %79, 1, !dbg !6332
  store i32 %inc84, i32* %j, align 4, !dbg !6332
  br label %for.cond77, !dbg !6333, !llvm.loop !6334

for.end85:                                        ; preds = %for.cond77
  %80 = load i32, i32* %min, align 4, !dbg !6336
  store i32 %80, i32* %filled_area_start, align 4, !dbg !6337
  br label %for.inc86, !dbg !6338

for.inc86:                                        ; preds = %for.end85, %if.then43
  %81 = load i32, i32* %i, align 4, !dbg !6339
  %dec = add nsw i32 %81, -1, !dbg !6339
  store i32 %dec, i32* %i, align 4, !dbg !6339
  br label %for.cond35, !dbg !6340, !llvm.loop !6341

for.end87:                                        ; preds = %for.cond35
  %82 = load i32*, i32** %last_lived, align 8, !dbg !6343
  %83 = bitcast i32* %82 to i8*, !dbg !6343
  call void @ira_free(i8* %83), !dbg !6344
  %84 = load i32*, i32** %live_range_min, align 8, !dbg !6345
  %85 = bitcast i32* %84 to i8*, !dbg !6345
  call void @ira_free(i8* %85), !dbg !6346
  ret void, !dbg !6347
}

declare dso_local void @ira_build_conflicts() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !6348 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6353, metadata !DIExpression()), !dbg !6354
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6354
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6354
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6354

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6354
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !6354
  %2 = load i32, i32* %num, align 8, !dbg !6354
  br label %cond.end, !dbg !6354

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6354

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6354
  ret i32 %cond, !dbg !6354
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_destroy() #0 !dbg !6355 {
entry:
  call void @finish_loop_tree_nodes(), !dbg !6356
  call void @finish_copies(), !dbg !6357
  call void @finish_allocnos(), !dbg !6358
  call void @finish_cost_vectors(), !dbg !6359
  call void @ira_finish_allocno_live_ranges(), !dbg !6360
  ret void, !dbg !6361
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_loop_tree_nodes() #0 !dbg !6362 {
entry:
  %i = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6363, metadata !DIExpression()), !dbg !6364
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6365, metadata !DIExpression()), !dbg !6366
  store i32 0, i32* %i, align 4, !dbg !6367
  br label %for.cond, !dbg !6369

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !6370
  %tobool = icmp ne %struct.VEC_loop_p_gc* %0, null, !dbg !6370
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6370

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !6370
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i32 0, i32 0, !dbg !6370
  br label %cond.end, !dbg !6370

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6370

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6370
  %2 = load i32, i32* %i, align 4, !dbg !6370
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %2, %struct.loop** %loop), !dbg !6370
  %tobool1 = icmp ne i32 %call, 0, !dbg !6372
  br i1 %tobool1, label %for.body, label %for.end, !dbg !6372

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6373
  %4 = load i32, i32* %i, align 4, !dbg !6374
  %idxprom = zext i32 %4 to i64, !dbg !6373
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i64 %idxprom, !dbg !6373
  call void @finish_loop_tree_node(%struct.ira_loop_tree_node* %arrayidx), !dbg !6375
  br label %for.inc, !dbg !6375

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !6376
  %inc = add i32 %5, 1, !dbg !6376
  store i32 %inc, i32* %i, align 4, !dbg !6376
  br label %for.cond, !dbg !6377, !llvm.loop !6378

for.end:                                          ; preds = %cond.end
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6380
  %7 = bitcast %struct.ira_loop_tree_node* %6 to i8*, !dbg !6380
  call void @ira_free(i8* %7), !dbg !6381
  store i32 0, i32* %i, align 4, !dbg !6382
  br label %for.cond2, !dbg !6384

for.cond2:                                        ; preds = %for.inc42, %for.end
  %8 = load i32, i32* %i, align 4, !dbg !6385
  %9 = load i32, i32* @last_basic_block_before_change, align 4, !dbg !6387
  %cmp = icmp ult i32 %8, %9, !dbg !6388
  br i1 %cmp, label %for.body3, label %for.end44, !dbg !6389

for.body3:                                        ; preds = %for.cond2
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6390
  %11 = load i32, i32* %i, align 4, !dbg !6393
  %idxprom4 = zext i32 %11 to i64, !dbg !6390
  %arrayidx5 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i64 %idxprom4, !dbg !6390
  %local_copies = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx5, i32 0, i32 15, !dbg !6394
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %local_copies, align 8, !dbg !6394
  %cmp6 = icmp ne %struct.bitmap_head_def* %12, null, !dbg !6395
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6396

if.then:                                          ; preds = %for.body3
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6397
  %14 = load i32, i32* %i, align 4, !dbg !6398
  %idxprom7 = zext i32 %14 to i64, !dbg !6397
  %arrayidx8 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i64 %idxprom7, !dbg !6397
  %local_copies9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx8, i32 0, i32 15, !dbg !6399
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %local_copies9, align 8, !dbg !6399
  call void @ira_free_bitmap(%struct.bitmap_head_def* %15), !dbg !6400
  br label %if.end, !dbg !6400

if.end:                                           ; preds = %if.then, %for.body3
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6401
  %17 = load i32, i32* %i, align 4, !dbg !6403
  %idxprom10 = zext i32 %17 to i64, !dbg !6401
  %arrayidx11 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %16, i64 %idxprom10, !dbg !6401
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx11, i32 0, i32 13, !dbg !6404
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !6404
  %cmp12 = icmp ne %struct.bitmap_head_def* %18, null, !dbg !6405
  br i1 %cmp12, label %if.then13, label %if.end17, !dbg !6406

if.then13:                                        ; preds = %if.end
  %19 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6407
  %20 = load i32, i32* %i, align 4, !dbg !6408
  %idxprom14 = zext i32 %20 to i64, !dbg !6407
  %arrayidx15 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %19, i64 %idxprom14, !dbg !6407
  %border_allocnos16 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx15, i32 0, i32 13, !dbg !6409
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos16, align 8, !dbg !6409
  call void @ira_free_bitmap(%struct.bitmap_head_def* %21), !dbg !6410
  br label %if.end17, !dbg !6410

if.end17:                                         ; preds = %if.then13, %if.end
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6411
  %23 = load i32, i32* %i, align 4, !dbg !6413
  %idxprom18 = zext i32 %23 to i64, !dbg !6411
  %arrayidx19 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %22, i64 %idxprom18, !dbg !6411
  %modified_regnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx19, i32 0, i32 14, !dbg !6414
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos, align 8, !dbg !6414
  %cmp20 = icmp ne %struct.bitmap_head_def* %24, null, !dbg !6415
  br i1 %cmp20, label %if.then21, label %if.end25, !dbg !6416

if.then21:                                        ; preds = %if.end17
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6417
  %26 = load i32, i32* %i, align 4, !dbg !6418
  %idxprom22 = zext i32 %26 to i64, !dbg !6417
  %arrayidx23 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i64 %idxprom22, !dbg !6417
  %modified_regnos24 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx23, i32 0, i32 14, !dbg !6419
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos24, align 8, !dbg !6419
  call void @ira_free_bitmap(%struct.bitmap_head_def* %27), !dbg !6420
  br label %if.end25, !dbg !6420

if.end25:                                         ; preds = %if.then21, %if.end17
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6421
  %29 = load i32, i32* %i, align 4, !dbg !6423
  %idxprom26 = zext i32 %29 to i64, !dbg !6421
  %arrayidx27 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %28, i64 %idxprom26, !dbg !6421
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx27, i32 0, i32 12, !dbg !6424
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !6424
  %cmp28 = icmp ne %struct.bitmap_head_def* %30, null, !dbg !6425
  br i1 %cmp28, label %if.then29, label %if.end33, !dbg !6426

if.then29:                                        ; preds = %if.end25
  %31 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6427
  %32 = load i32, i32* %i, align 4, !dbg !6428
  %idxprom30 = zext i32 %32 to i64, !dbg !6427
  %arrayidx31 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %31, i64 %idxprom30, !dbg !6427
  %all_allocnos32 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx31, i32 0, i32 12, !dbg !6429
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos32, align 8, !dbg !6429
  call void @ira_free_bitmap(%struct.bitmap_head_def* %33), !dbg !6430
  br label %if.end33, !dbg !6430

if.end33:                                         ; preds = %if.then29, %if.end25
  %34 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6431
  %35 = load i32, i32* %i, align 4, !dbg !6433
  %idxprom34 = zext i32 %35 to i64, !dbg !6431
  %arrayidx35 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %34, i64 %idxprom34, !dbg !6431
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx35, i32 0, i32 9, !dbg !6434
  %36 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !6434
  %cmp36 = icmp ne %struct.ira_allocno** %36, null, !dbg !6435
  br i1 %cmp36, label %if.then37, label %if.end41, !dbg !6436

if.then37:                                        ; preds = %if.end33
  %37 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6437
  %38 = load i32, i32* %i, align 4, !dbg !6438
  %idxprom38 = zext i32 %38 to i64, !dbg !6437
  %arrayidx39 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %37, i64 %idxprom38, !dbg !6437
  %regno_allocno_map40 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx39, i32 0, i32 9, !dbg !6439
  %39 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map40, align 8, !dbg !6439
  %40 = bitcast %struct.ira_allocno** %39 to i8*, !dbg !6437
  call void @ira_free(i8* %40), !dbg !6440
  br label %if.end41, !dbg !6440

if.end41:                                         ; preds = %if.then37, %if.end33
  br label %for.inc42, !dbg !6441

for.inc42:                                        ; preds = %if.end41
  %41 = load i32, i32* %i, align 4, !dbg !6442
  %inc43 = add i32 %41, 1, !dbg !6442
  store i32 %inc43, i32* %i, align 4, !dbg !6442
  br label %for.cond2, !dbg !6443, !llvm.loop !6444

for.end44:                                        ; preds = %for.cond2
  %42 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !6446
  %43 = bitcast %struct.ira_loop_tree_node* %42 to i8*, !dbg !6446
  call void @ira_free(i8* %43), !dbg !6447
  ret void, !dbg !6448
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_copies() #0 !dbg !6449 {
entry:
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %ci = alloca %struct.ira_copy_iterator, align 4
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !6450, metadata !DIExpression()), !dbg !6451
  call void @llvm.dbg.declare(metadata %struct.ira_copy_iterator* %ci, metadata !6452, metadata !DIExpression()), !dbg !6453
  call void @ira_copy_iter_init(%struct.ira_copy_iterator* %ci), !dbg !6454
  br label %for.cond, !dbg !6454

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @ira_copy_iter_cond(%struct.ira_copy_iterator* %ci, %struct.ira_allocno_copy** %cp), !dbg !6456
  %tobool = icmp ne i8 %call, 0, !dbg !6454
  br i1 %tobool, label %for.body, label %for.end, !dbg !6454

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6458
  call void @finish_copy(%struct.ira_allocno_copy* %0), !dbg !6459
  br label %for.cond, !dbg !6456, !llvm.loop !6460

for.end:                                          ; preds = %for.cond
  call void @VEC_ira_copy_t_heap_free(%struct.VEC_ira_copy_t_heap** @copy_vec), !dbg !6462
  %1 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @copy_pool, align 8, !dbg !6463
  call void @free_alloc_pool(%struct.alloc_pool_def* %1), !dbg !6464
  ret void, !dbg !6465
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_allocnos() #0 !dbg !6466 {
entry:
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6467, metadata !DIExpression()), !dbg !6468
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !6469, metadata !DIExpression()), !dbg !6470
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !6471
  br label %for.cond, !dbg !6471

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !6473
  %tobool = icmp ne i8 %call, 0, !dbg !6471
  br i1 %tobool, label %for.body, label %for.end, !dbg !6471

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6475
  call void @finish_allocno(%struct.ira_allocno* %0), !dbg !6476
  br label %for.cond, !dbg !6473, !llvm.loop !6477

for.end:                                          ; preds = %for.cond
  %1 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !6479
  %2 = bitcast %struct.ira_allocno** %1 to i8*, !dbg !6479
  call void @ira_free(i8* %2), !dbg !6480
  call void @VEC_ira_allocno_t_heap_free(%struct.VEC_ira_allocno_t_heap** @ira_conflict_id_allocno_map_vec), !dbg !6481
  call void @VEC_ira_allocno_t_heap_free(%struct.VEC_ira_allocno_t_heap** @allocno_vec), !dbg !6482
  %3 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_pool, align 8, !dbg !6483
  call void @free_alloc_pool(%struct.alloc_pool_def* %3), !dbg !6484
  %4 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @allocno_live_range_pool, align 8, !dbg !6485
  call void @free_alloc_pool(%struct.alloc_pool_def* %4), !dbg !6486
  ret void, !dbg !6487
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_cost_vectors() #0 !dbg !6488 {
entry:
  %i = alloca i32, align 4
  %cover_class = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6489, metadata !DIExpression()), !dbg !6490
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !6491, metadata !DIExpression()), !dbg !6492
  store i32 0, i32* %i, align 4, !dbg !6493
  br label %for.cond, !dbg !6495

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6496
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !6498
  %cmp = icmp slt i32 %0, %1, !dbg !6499
  br i1 %cmp, label %for.body, label %for.end, !dbg !6500

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !6501
  %idxprom = sext i32 %2 to i64, !dbg !6503
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !6503
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6503
  store i32 %3, i32* %cover_class, align 4, !dbg !6504
  %4 = load i32, i32* %cover_class, align 4, !dbg !6505
  %idxprom1 = zext i32 %4 to i64, !dbg !6506
  %arrayidx2 = getelementptr inbounds [27 x %struct.alloc_pool_def*], [27 x %struct.alloc_pool_def*]* @cost_vector_pool, i64 0, i64 %idxprom1, !dbg !6506
  %5 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %arrayidx2, align 8, !dbg !6506
  call void @free_alloc_pool(%struct.alloc_pool_def* %5), !dbg !6507
  br label %for.inc, !dbg !6508

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !6509
  %inc = add nsw i32 %6, 1, !dbg !6509
  store i32 %inc, i32* %i, align 4, !dbg !6509
  br label %for.cond, !dbg !6510, !llvm.loop !6511

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6513
}

declare dso_local void @ira_finish_allocno_live_ranges() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_allocno_t_heap_reserve(%struct.VEC_ira_allocno_t_heap** %vec_, i32 %alloc_) #0 !dbg !6514 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ira_allocno_t_heap** %vec_, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_heap*** %vec_.addr, metadata !6517, metadata !DIExpression()), !dbg !6518
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6519, metadata !DIExpression()), !dbg !6518
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6520, metadata !DIExpression()), !dbg !6518
  %0 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6518
  %1 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %0, align 8, !dbg !6518
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %1, null, !dbg !6518
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6518

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6518
  %3 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %2, align 8, !dbg !6518
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %3, i32 0, i32 0, !dbg !6518
  br label %cond.end, !dbg !6518

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6518

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6518
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6518
  %call = call i32 @VEC_ira_allocno_t_base_space(%struct.VEC_ira_allocno_t_base* %cond, i32 %4), !dbg !6518
  %tobool1 = icmp ne i32 %call, 0, !dbg !6518
  %lnot = xor i1 %tobool1, true, !dbg !6518
  %lnot.ext = zext i1 %lnot to i32, !dbg !6518
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6518
  %5 = load i32, i32* %extend, align 4, !dbg !6521
  %tobool2 = icmp ne i32 %5, 0, !dbg !6521
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6518

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6521
  %7 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %6, align 8, !dbg !6521
  %8 = bitcast %struct.VEC_ira_allocno_t_heap* %7 to i8*, !dbg !6521
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6521
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6521
  %10 = bitcast i8* %call3 to %struct.VEC_ira_allocno_t_heap*, !dbg !6521
  %11 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6521
  store %struct.VEC_ira_allocno_t_heap* %10, %struct.VEC_ira_allocno_t_heap** %11, align 8, !dbg !6521
  br label %if.end, !dbg !6521

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6518
  ret i32 %12, !dbg !6518
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno** @VEC_ira_allocno_t_base_quick_push(%struct.VEC_ira_allocno_t_base* %vec_, %struct.ira_allocno* %obj_) #0 !dbg !6523 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  %obj_.addr = alloca %struct.ira_allocno*, align 8
  %slot_ = alloca %struct.ira_allocno**, align 8
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !6526, metadata !DIExpression()), !dbg !6527
  store %struct.ira_allocno* %obj_, %struct.ira_allocno** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %obj_.addr, metadata !6528, metadata !DIExpression()), !dbg !6527
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %slot_, metadata !6529, metadata !DIExpression()), !dbg !6527
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6527
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %0, i32 0, i32 0, !dbg !6527
  %1 = load i32, i32* %num, align 8, !dbg !6527
  %2 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6527
  %alloc = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %2, i32 0, i32 1, !dbg !6527
  %3 = load i32, i32* %alloc, align 4, !dbg !6527
  %cmp = icmp ult i32 %1, %3, !dbg !6527
  %conv = zext i1 %cmp to i32, !dbg !6527
  %4 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6527
  %vec = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %4, i32 0, i32 2, !dbg !6527
  %5 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6527
  %num1 = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %5, i32 0, i32 0, !dbg !6527
  %6 = load i32, i32* %num1, align 8, !dbg !6527
  %inc = add i32 %6, 1, !dbg !6527
  store i32 %inc, i32* %num1, align 8, !dbg !6527
  %idxprom = zext i32 %6 to i64, !dbg !6527
  %arrayidx = getelementptr inbounds [1 x %struct.ira_allocno*], [1 x %struct.ira_allocno*]* %vec, i64 0, i64 %idxprom, !dbg !6527
  store %struct.ira_allocno** %arrayidx, %struct.ira_allocno*** %slot_, align 8, !dbg !6527
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %obj_.addr, align 8, !dbg !6527
  %8 = load %struct.ira_allocno**, %struct.ira_allocno*** %slot_, align 8, !dbg !6527
  store %struct.ira_allocno* %7, %struct.ira_allocno** %8, align 8, !dbg !6527
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** %slot_, align 8, !dbg !6527
  ret %struct.ira_allocno** %9, !dbg !6527
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_allocno_t_base_space(%struct.VEC_ira_allocno_t_base* %vec_, i32 %alloc_) #0 !dbg !6530 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !6533, metadata !DIExpression()), !dbg !6534
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6535, metadata !DIExpression()), !dbg !6534
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6534
  %cmp = icmp sge i32 %0, 0, !dbg !6534
  %conv = zext i1 %cmp to i32, !dbg !6534
  %1 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6534
  %tobool = icmp ne %struct.VEC_ira_allocno_t_base* %1, null, !dbg !6534
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6534

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6534
  %alloc = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %2, i32 0, i32 1, !dbg !6534
  %3 = load i32, i32* %alloc, align 4, !dbg !6534
  %4 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6534
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %4, i32 0, i32 0, !dbg !6534
  %5 = load i32, i32* %num, align 8, !dbg !6534
  %sub = sub i32 %3, %5, !dbg !6534
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6534
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6534
  %conv2 = zext i1 %cmp1 to i32, !dbg !6534
  br label %cond.end, !dbg !6534

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6534
  %tobool3 = icmp ne i32 %7, 0, !dbg !6534
  %lnot = xor i1 %tobool3, true, !dbg !6534
  %lnot.ext = zext i1 %lnot to i32, !dbg !6534
  br label %cond.end, !dbg !6534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6534
  ret i32 %cond, !dbg !6534
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_copy_t_heap_reserve(%struct.VEC_ira_copy_t_heap** %vec_, i32 %alloc_) #0 !dbg !6536 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ira_copy_t_heap** %vec_, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_heap*** %vec_.addr, metadata !6539, metadata !DIExpression()), !dbg !6540
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6541, metadata !DIExpression()), !dbg !6540
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6542, metadata !DIExpression()), !dbg !6540
  %0 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !6540
  %1 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %0, align 8, !dbg !6540
  %tobool = icmp ne %struct.VEC_ira_copy_t_heap* %1, null, !dbg !6540
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6540

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !6540
  %3 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %2, align 8, !dbg !6540
  %base = getelementptr inbounds %struct.VEC_ira_copy_t_heap, %struct.VEC_ira_copy_t_heap* %3, i32 0, i32 0, !dbg !6540
  br label %cond.end, !dbg !6540

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6540

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_copy_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6540
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6540
  %call = call i32 @VEC_ira_copy_t_base_space(%struct.VEC_ira_copy_t_base* %cond, i32 %4), !dbg !6540
  %tobool1 = icmp ne i32 %call, 0, !dbg !6540
  %lnot = xor i1 %tobool1, true, !dbg !6540
  %lnot.ext = zext i1 %lnot to i32, !dbg !6540
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6540
  %5 = load i32, i32* %extend, align 4, !dbg !6543
  %tobool2 = icmp ne i32 %5, 0, !dbg !6543
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6540

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !6543
  %7 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %6, align 8, !dbg !6543
  %8 = bitcast %struct.VEC_ira_copy_t_heap* %7 to i8*, !dbg !6543
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6543
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6543
  %10 = bitcast i8* %call3 to %struct.VEC_ira_copy_t_heap*, !dbg !6543
  %11 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !6543
  store %struct.VEC_ira_copy_t_heap* %10, %struct.VEC_ira_copy_t_heap** %11, align 8, !dbg !6543
  br label %if.end, !dbg !6543

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6540
  ret i32 %12, !dbg !6540
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno_copy** @VEC_ira_copy_t_base_quick_push(%struct.VEC_ira_copy_t_base* %vec_, %struct.ira_allocno_copy* %obj_) #0 !dbg !6545 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_base*, align 8
  %obj_.addr = alloca %struct.ira_allocno_copy*, align 8
  %slot_ = alloca %struct.ira_allocno_copy**, align 8
  store %struct.VEC_ira_copy_t_base* %vec_, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_base** %vec_.addr, metadata !6548, metadata !DIExpression()), !dbg !6549
  store %struct.ira_allocno_copy* %obj_, %struct.ira_allocno_copy** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %obj_.addr, metadata !6550, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy*** %slot_, metadata !6551, metadata !DIExpression()), !dbg !6549
  %0 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6549
  %num = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %0, i32 0, i32 0, !dbg !6549
  %1 = load i32, i32* %num, align 8, !dbg !6549
  %2 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6549
  %alloc = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %2, i32 0, i32 1, !dbg !6549
  %3 = load i32, i32* %alloc, align 4, !dbg !6549
  %cmp = icmp ult i32 %1, %3, !dbg !6549
  %conv = zext i1 %cmp to i32, !dbg !6549
  %4 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6549
  %vec = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %4, i32 0, i32 2, !dbg !6549
  %5 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6549
  %num1 = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %5, i32 0, i32 0, !dbg !6549
  %6 = load i32, i32* %num1, align 8, !dbg !6549
  %inc = add i32 %6, 1, !dbg !6549
  store i32 %inc, i32* %num1, align 8, !dbg !6549
  %idxprom = zext i32 %6 to i64, !dbg !6549
  %arrayidx = getelementptr inbounds [1 x %struct.ira_allocno_copy*], [1 x %struct.ira_allocno_copy*]* %vec, i64 0, i64 %idxprom, !dbg !6549
  store %struct.ira_allocno_copy** %arrayidx, %struct.ira_allocno_copy*** %slot_, align 8, !dbg !6549
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %obj_.addr, align 8, !dbg !6549
  %8 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %slot_, align 8, !dbg !6549
  store %struct.ira_allocno_copy* %7, %struct.ira_allocno_copy** %8, align 8, !dbg !6549
  %9 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %slot_, align 8, !dbg !6549
  ret %struct.ira_allocno_copy** %9, !dbg !6549
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_copy_t_base_space(%struct.VEC_ira_copy_t_base* %vec_, i32 %alloc_) #0 !dbg !6552 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ira_copy_t_base* %vec_, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_base** %vec_.addr, metadata !6555, metadata !DIExpression()), !dbg !6556
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6557, metadata !DIExpression()), !dbg !6556
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6556
  %cmp = icmp sge i32 %0, 0, !dbg !6556
  %conv = zext i1 %cmp to i32, !dbg !6556
  %1 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6556
  %tobool = icmp ne %struct.VEC_ira_copy_t_base* %1, null, !dbg !6556
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6556

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6556
  %alloc = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %2, i32 0, i32 1, !dbg !6556
  %3 = load i32, i32* %alloc, align 4, !dbg !6556
  %4 = load %struct.VEC_ira_copy_t_base*, %struct.VEC_ira_copy_t_base** %vec_.addr, align 8, !dbg !6556
  %num = getelementptr inbounds %struct.VEC_ira_copy_t_base, %struct.VEC_ira_copy_t_base* %4, i32 0, i32 0, !dbg !6556
  %5 = load i32, i32* %num, align 8, !dbg !6556
  %sub = sub i32 %3, %5, !dbg !6556
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6556
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6556
  %conv2 = zext i1 %cmp1 to i32, !dbg !6556
  br label %cond.end, !dbg !6556

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6556
  %tobool3 = icmp ne i32 %7, 0, !dbg !6556
  %lnot = xor i1 %tobool3, true, !dbg !6556
  %lnot.ext = zext i1 %lnot to i32, !dbg !6556
  br label %cond.end, !dbg !6556

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6556
  ret i32 %cond, !dbg !6556
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sparseset_bit_p(%struct.sparseset_def* %s, i32 %e) #0 !dbg !6558 {
entry:
  %s.addr = alloca %struct.sparseset_def*, align 8
  %e.addr = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !6561, metadata !DIExpression()), !dbg !6562
  store i32 %e, i32* %e.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %e.addr, metadata !6563, metadata !DIExpression()), !dbg !6564
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6565, metadata !DIExpression()), !dbg !6566
  %0 = load i32, i32* %e.addr, align 4, !dbg !6567
  %1 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !6567
  %size = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %1, i32 0, i32 3, !dbg !6567
  %2 = load i32, i32* %size, align 4, !dbg !6567
  %cmp = icmp ult i32 %0, %2, !dbg !6567
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6567

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !6567
  br label %cond.end, !dbg !6567

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6567

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6567
  %3 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !6568
  %sparse = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %3, i32 0, i32 1, !dbg !6569
  %4 = load i32*, i32** %sparse, align 8, !dbg !6569
  %5 = load i32, i32* %e.addr, align 4, !dbg !6570
  %idxprom = zext i32 %5 to i64, !dbg !6568
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !6568
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6568
  store i32 %6, i32* %idx, align 4, !dbg !6571
  %7 = load i32, i32* %idx, align 4, !dbg !6572
  %8 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !6573
  %members = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %8, i32 0, i32 2, !dbg !6574
  %9 = load i32, i32* %members, align 8, !dbg !6574
  %cmp1 = icmp ult i32 %7, %9, !dbg !6575
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !6576

land.rhs:                                         ; preds = %cond.end
  %10 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !6577
  %dense = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %10, i32 0, i32 0, !dbg !6578
  %11 = load i32*, i32** %dense, align 8, !dbg !6578
  %12 = load i32, i32* %idx, align 4, !dbg !6579
  %idxprom2 = zext i32 %12 to i64, !dbg !6577
  %arrayidx3 = getelementptr inbounds i32, i32* %11, i64 %idxprom2, !dbg !6577
  %13 = load i32, i32* %arrayidx3, align 4, !dbg !6577
  %14 = load i32, i32* %e.addr, align 4, !dbg !6580
  %cmp4 = icmp eq i32 %13, %14, !dbg !6581
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %15 = phi i1 [ false, %cond.end ], [ %cmp4, %land.rhs ], !dbg !6582
  %land.ext = zext i1 %15 to i32, !dbg !6576
  %conv = trunc i32 %land.ext to i8, !dbg !6572
  ret i8 %conv, !dbg !6583
}

; Function Attrs: noinline nounwind uwtable
define internal void @sparseset_insert_bit(%struct.sparseset_def* %s, i32 %e, i32 %idx) #0 !dbg !6584 {
entry:
  %s.addr = alloca %struct.sparseset_def*, align 8
  %e.addr = alloca i32, align 4
  %idx.addr = alloca i32, align 4
  store %struct.sparseset_def* %s, %struct.sparseset_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sparseset_def** %s.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  store i32 %e, i32* %e.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %e.addr, metadata !6589, metadata !DIExpression()), !dbg !6590
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !6591, metadata !DIExpression()), !dbg !6592
  %0 = load i32, i32* %idx.addr, align 4, !dbg !6593
  %1 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !6594
  %sparse = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %1, i32 0, i32 1, !dbg !6595
  %2 = load i32*, i32** %sparse, align 8, !dbg !6595
  %3 = load i32, i32* %e.addr, align 4, !dbg !6596
  %idxprom = zext i32 %3 to i64, !dbg !6594
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !6594
  store i32 %0, i32* %arrayidx, align 4, !dbg !6597
  %4 = load i32, i32* %e.addr, align 4, !dbg !6598
  %5 = load %struct.sparseset_def*, %struct.sparseset_def** %s.addr, align 8, !dbg !6599
  %dense = getelementptr inbounds %struct.sparseset_def, %struct.sparseset_def* %5, i32 0, i32 0, !dbg !6600
  %6 = load i32*, i32** %dense, align 8, !dbg !6600
  %7 = load i32, i32* %idx.addr, align 4, !dbg !6601
  %idxprom1 = zext i32 %7 to i64, !dbg !6599
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 %idxprom1, !dbg !6599
  store i32 %4, i32* %arrayidx2, align 4, !dbg !6602
  ret void, !dbg !6603
}

; Function Attrs: noinline nounwind uwtable
define internal void @compress_allocno_conflict_vec(%struct.ira_allocno* %a) #0 !dbg !6604 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %vec = alloca %struct.ira_allocno**, align 8
  %conflict_a = alloca %struct.ira_allocno*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !6605, metadata !DIExpression()), !dbg !6606
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %vec, metadata !6607, metadata !DIExpression()), !dbg !6608
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_a, metadata !6609, metadata !DIExpression()), !dbg !6610
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6611, metadata !DIExpression()), !dbg !6612
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6613, metadata !DIExpression()), !dbg !6614
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !6615
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 23, !dbg !6615
  %1 = load i8*, i8** %conflict_allocno_array, align 8, !dbg !6615
  %2 = bitcast i8* %1 to %struct.ira_allocno**, !dbg !6616
  store %struct.ira_allocno** %2, %struct.ira_allocno*** %vec, align 8, !dbg !6617
  %3 = load i32, i32* @curr_allocno_conflict_check_tick, align 4, !dbg !6618
  %inc = add nsw i32 %3, 1, !dbg !6618
  store i32 %inc, i32* @curr_allocno_conflict_check_tick, align 4, !dbg !6618
  store i32 0, i32* %j, align 4, !dbg !6619
  store i32 0, i32* %i, align 4, !dbg !6621
  br label %for.cond, !dbg !6622

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !6623
  %5 = load i32, i32* %i, align 4, !dbg !6625
  %idxprom = sext i32 %5 to i64, !dbg !6623
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !6623
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !6623
  store %struct.ira_allocno* %6, %struct.ira_allocno** %conflict_a, align 8, !dbg !6626
  %cmp = icmp ne %struct.ira_allocno* %6, null, !dbg !6627
  br i1 %cmp, label %for.body, label %for.end, !dbg !6628

for.body:                                         ; preds = %for.cond
  %7 = load i32*, i32** @allocno_conflict_check, align 8, !dbg !6629
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !6632
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 0, !dbg !6632
  %9 = load i32, i32* %num, align 8, !dbg !6632
  %idxprom1 = sext i32 %9 to i64, !dbg !6629
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i64 %idxprom1, !dbg !6629
  %10 = load i32, i32* %arrayidx2, align 4, !dbg !6629
  %11 = load i32, i32* @curr_allocno_conflict_check_tick, align 4, !dbg !6633
  %cmp3 = icmp ne i32 %10, %11, !dbg !6634
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6635

if.then:                                          ; preds = %for.body
  %12 = load i32, i32* @curr_allocno_conflict_check_tick, align 4, !dbg !6636
  %13 = load i32*, i32** @allocno_conflict_check, align 8, !dbg !6638
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !6639
  %num4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 0, !dbg !6639
  %15 = load i32, i32* %num4, align 8, !dbg !6639
  %idxprom5 = sext i32 %15 to i64, !dbg !6638
  %arrayidx6 = getelementptr inbounds i32, i32* %13, i64 %idxprom5, !dbg !6638
  store i32 %12, i32* %arrayidx6, align 4, !dbg !6640
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !6641
  %17 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !6642
  %18 = load i32, i32* %j, align 4, !dbg !6643
  %inc7 = add nsw i32 %18, 1, !dbg !6643
  store i32 %inc7, i32* %j, align 4, !dbg !6643
  %idxprom8 = sext i32 %18 to i64, !dbg !6642
  %arrayidx9 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %17, i64 %idxprom8, !dbg !6642
  store %struct.ira_allocno* %16, %struct.ira_allocno** %arrayidx9, align 8, !dbg !6644
  br label %if.end, !dbg !6645

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6646

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %i, align 4, !dbg !6647
  %inc10 = add nsw i32 %19, 1, !dbg !6647
  store i32 %inc10, i32* %i, align 4, !dbg !6647
  br label %for.cond, !dbg !6648, !llvm.loop !6649

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %j, align 4, !dbg !6651
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !6652
  %conflict_allocnos_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 28, !dbg !6652
  store i32 %20, i32* %conflict_allocnos_num, align 8, !dbg !6653
  %22 = load %struct.ira_allocno**, %struct.ira_allocno*** %vec, align 8, !dbg !6654
  %23 = load i32, i32* %j, align 4, !dbg !6655
  %idxprom11 = sext i32 %23 to i64, !dbg !6654
  %arrayidx12 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %22, i64 %idxprom11, !dbg !6654
  store %struct.ira_allocno* null, %struct.ira_allocno** %arrayidx12, align 8, !dbg !6656
  ret void, !dbg !6657
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !6658 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6662, metadata !DIExpression()), !dbg !6663
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6664, metadata !DIExpression()), !dbg !6663
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !6665, metadata !DIExpression()), !dbg !6663
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6666
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6666
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6666

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6666
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6666
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !6666
  %3 = load i32, i32* %num, align 8, !dbg !6666
  %cmp = icmp ult i32 %1, %3, !dbg !6666
  br i1 %cmp, label %if.then, label %if.else, !dbg !6663

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6668
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !6668
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6668
  %idxprom = zext i32 %5 to i64, !dbg !6668
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !6668
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !6668
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !6668
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !6668
  store i32 1, i32* %retval, align 4, !dbg !6668
  br label %return, !dbg !6668

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !6670
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !6670
  store i32 0, i32* %retval, align 4, !dbg !6670
  br label %return, !dbg !6670

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6663
  ret i32 %9, !dbg !6663
}

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ira_allocno_t_heap* @VEC_ira_allocno_t_heap_alloc(i32 %alloc_) #0 !dbg !6672 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6676
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6676
  %1 = bitcast i8* %call to %struct.VEC_ira_allocno_t_heap*, !dbg !6676
  ret %struct.VEC_ira_allocno_t_heap* %1, !dbg !6676
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ira_copy_t_heap* @VEC_ira_copy_t_heap_alloc(i32 %alloc_) #0 !dbg !6677 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6680, metadata !DIExpression()), !dbg !6681
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6681
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6681
  %1 = bitcast i8* %call to %struct.VEC_ira_copy_t_heap*, !dbg !6681
  ret %struct.VEC_ira_copy_t_heap* %1, !dbg !6681
}

declare dso_local i32 @get_max_uid() #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6682 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6685, metadata !DIExpression()), !dbg !6686
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6687, metadata !DIExpression()), !dbg !6688
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6689
  store i32 0, i32* %index, align 8, !dbg !6690
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6691
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6692
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6693
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6694
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6694
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6694
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6695 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6699, metadata !DIExpression()), !dbg !6700
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6701, metadata !DIExpression()), !dbg !6702
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6703
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6703
  %5 = load i32, i32* %4, align 8, !dbg !6703
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6703
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6703
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6703
  %tobool = icmp ne i8 %call, 0, !dbg !6703
  br i1 %tobool, label %if.else, label %if.then, !dbg !6705

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6706
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6706
  %10 = load i32, i32* %9, align 8, !dbg !6706
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6706
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6706
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6706
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6708
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6709
  store i8 1, i8* %retval, align 1, !dbg !6710
  br label %return, !dbg !6710

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6711
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6713
  store i8 0, i8* %retval, align 1, !dbg !6714
  br label %return, !dbg !6714

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6715
  ret i8 %15, !dbg !6715
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6716 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6721, metadata !DIExpression()), !dbg !6722
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6722
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6722
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6722

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6722
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6722
  %2 = load i32, i32* %num, align 8, !dbg !6722
  br label %cond.end, !dbg !6722

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6722

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6722
  ret i32 %cond, !dbg !6722
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6723 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6727, metadata !DIExpression()), !dbg !6728
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6729
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6729
  %1 = load i32, i32* %index, align 8, !dbg !6729
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6729
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6729
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6729
  %5 = load i32, i32* %4, align 8, !dbg !6729
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6729
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6729
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6729
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6729
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6729

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6729
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6729
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6729
  %11 = load i32, i32* %10, align 8, !dbg !6729
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6729
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6729
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6729
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6729
  br label %cond.end, !dbg !6729

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6729

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6729
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6729
  %cmp = icmp ult i32 %1, %call2, !dbg !6729
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6729

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !6729
  br label %cond.end5, !dbg !6729

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6729

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6729
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6730
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6731
  %15 = load i32, i32* %index7, align 8, !dbg !6732
  %inc = add i32 %15, 1, !dbg !6732
  store i32 %inc, i32* %index7, align 8, !dbg !6732
  ret void, !dbg !6733
}

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !6734 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6737, metadata !DIExpression()), !dbg !6738
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6739, metadata !DIExpression()), !dbg !6738
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !6740, metadata !DIExpression()), !dbg !6738
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6741
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6741
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6741

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6741
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6741
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6741
  %3 = load i32, i32* %num, align 8, !dbg !6741
  %cmp = icmp ult i32 %1, %3, !dbg !6741
  br i1 %cmp, label %if.then, label %if.else, !dbg !6738

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6743
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !6743
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6743
  %idxprom = zext i32 %5 to i64, !dbg !6743
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6743
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6743
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !6743
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !6743
  store i32 1, i32* %retval, align 4, !dbg !6743
  br label %return, !dbg !6743

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !6745
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !6745
  store i32 0, i32* %retval, align 4, !dbg !6745
  br label %return, !dbg !6745

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6738
  ret i32 %9, !dbg !6738
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !6747 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !6751, metadata !DIExpression()), !dbg !6752
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6753
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !6753
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !6753
  br i1 %tobool, label %if.then, label %if.end, !dbg !6752

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6753
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !6753
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !6753
  call void @free(i8* %4), !dbg !6753
  br label %if.end, !dbg !6753

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6752
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !6752
  ret void, !dbg !6752
}

declare dso_local %struct.bitmap_head_def* @ira_allocate_bitmap() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6755 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6758, metadata !DIExpression()), !dbg !6759
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6760
  %3 = load i32, i32* %index, align 8, !dbg !6760
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6761
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6761
  %6 = load i32, i32* %5, align 8, !dbg !6761
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6761
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !6761
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !6761
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6761
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6761

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6761
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6761
  %11 = load i32, i32* %10, align 8, !dbg !6761
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6761
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6761
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6761
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6761
  br label %cond.end, !dbg !6761

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6761

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6761
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6761
  %cmp = icmp eq i32 %3, %call2, !dbg !6762
  %conv = zext i1 %cmp to i32, !dbg !6762
  %conv3 = trunc i32 %conv to i8, !dbg !6763
  ret i8 %conv3, !dbg !6764
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6765 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6768, metadata !DIExpression()), !dbg !6769
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6770
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6770
  %5 = load i32, i32* %4, align 8, !dbg !6770
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6770
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6770
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6770
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6770
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6770

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6770
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6770
  %10 = load i32, i32* %9, align 8, !dbg !6770
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6770
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6770
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6770
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6770
  br label %cond.end, !dbg !6770

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6770
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6770
  %13 = load i32, i32* %index, align 8, !dbg !6770
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !6770
  ret %struct.edge_def* %call2, !dbg !6771
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6772 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6775, metadata !DIExpression()), !dbg !6776
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6777
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !6777
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !6777
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6777

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !6777
  br label %cond.end, !dbg !6777

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6777

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6777
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6778
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !6778
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !6779
  ret %struct.VEC_edge_gc* %5, !dbg !6780
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6781 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6784, metadata !DIExpression()), !dbg !6785
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6786, metadata !DIExpression()), !dbg !6785
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6785
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6785
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6785

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6785
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6785
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6785
  %3 = load i32, i32* %num, align 8, !dbg !6785
  %cmp = icmp ult i32 %1, %3, !dbg !6785
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6787
  %land.ext = zext i1 %4 to i32, !dbg !6785
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6785
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6785
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6785
  %idxprom = zext i32 %6 to i64, !dbg !6785
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6785
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6785
  ret %struct.edge_def* %7, !dbg !6785
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !6788 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6793, metadata !DIExpression()), !dbg !6794
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6795, metadata !DIExpression()), !dbg !6796
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6797
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !6797
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !6797
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !6797
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6797

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6797
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !6797
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !6797
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !6797
  br label %cond.end, !dbg !6797

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6797

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6797
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !6797
  store i32 %call, i32* %n, align 4, !dbg !6796
  %4 = load i32, i32* %n, align 4, !dbg !6798
  %cmp = icmp eq i32 %4, 0, !dbg !6800
  br i1 %cmp, label %if.then, label %if.end, !dbg !6801

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !6802
  br label %return, !dbg !6802

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6803
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !6803
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !6803
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !6803
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !6803

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6803
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !6803
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !6803
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !6803
  br label %cond.end8, !dbg !6803

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !6803

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !6803
  %9 = load i32, i32* %n, align 4, !dbg !6803
  %sub = sub i32 %9, 1, !dbg !6803
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !6803
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !6804
  br label %return, !dbg !6804

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !6805
  ret %struct.loop* %10, !dbg !6805
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_loop_to_tree(%struct.loop* %loop) #0 !dbg !6806 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %parent = alloca %struct.loop*, align 8
  %loop_node = alloca %struct.ira_loop_tree_node*, align 8
  %parent_node = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6809, metadata !DIExpression()), !dbg !6810
  call void @llvm.dbg.declare(metadata %struct.loop** %parent, metadata !6811, metadata !DIExpression()), !dbg !6812
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node, metadata !6813, metadata !DIExpression()), !dbg !6814
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent_node, metadata !6815, metadata !DIExpression()), !dbg !6816
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6817
  %call = call %struct.loop* @loop_outer(%struct.loop* %0), !dbg !6819
  %cmp = icmp ne %struct.loop* %call, null, !dbg !6820
  br i1 %cmp, label %if.then, label %if.end, !dbg !6821

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6822
  %call1 = call %struct.loop* @loop_outer(%struct.loop* %1), !dbg !6823
  call void @add_loop_to_tree(%struct.loop* %call1), !dbg !6824
  br label %if.end, !dbg !6824

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6825
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6827
  %num = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 0, !dbg !6828
  %4 = load i32, i32* %num, align 8, !dbg !6828
  %idxprom = sext i32 %4 to i64, !dbg !6825
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %2, i64 %idxprom, !dbg !6825
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !6829
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !6829
  %cmp2 = icmp ne %struct.ira_allocno** %5, null, !dbg !6830
  br i1 %cmp2, label %land.lhs.true, label %if.end35, !dbg !6831

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6832
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6833
  %num3 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 0, !dbg !6834
  %8 = load i32, i32* %num3, align 8, !dbg !6834
  %idxprom4 = sext i32 %8 to i64, !dbg !6832
  %arrayidx5 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i64 %idxprom4, !dbg !6832
  %children = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx5, i32 0, i32 5, !dbg !6835
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children, align 8, !dbg !6835
  %cmp6 = icmp eq %struct.ira_loop_tree_node* %9, null, !dbg !6836
  br i1 %cmp6, label %if.then7, label %if.end35, !dbg !6837

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6838
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6840
  %num8 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 0, !dbg !6841
  %12 = load i32, i32* %num8, align 8, !dbg !6841
  %idxprom9 = sext i32 %12 to i64, !dbg !6838
  %arrayidx10 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i64 %idxprom9, !dbg !6838
  store %struct.ira_loop_tree_node* %arrayidx10, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6842
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6843
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6844
  %loop11 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i32 0, i32 1, !dbg !6845
  store %struct.loop* %13, %struct.loop** %loop11, align 8, !dbg !6846
  %15 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6847
  %bb = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %15, i32 0, i32 0, !dbg !6848
  store %struct.basic_block_def* null, %struct.basic_block_def** %bb, align 8, !dbg !6849
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6850
  %call12 = call %struct.loop* @loop_outer(%struct.loop* %16), !dbg !6852
  store %struct.loop* %call12, %struct.loop** %parent, align 8, !dbg !6853
  br label %for.cond, !dbg !6854

for.cond:                                         ; preds = %for.inc, %if.then7
  %17 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !6855
  %cmp13 = icmp ne %struct.loop* %17, null, !dbg !6857
  br i1 %cmp13, label %for.body, label %for.end, !dbg !6858

for.body:                                         ; preds = %for.cond
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6859
  %19 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !6861
  %num14 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !6862
  %20 = load i32, i32* %num14, align 8, !dbg !6862
  %idxprom15 = sext i32 %20 to i64, !dbg !6859
  %arrayidx16 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i64 %idxprom15, !dbg !6859
  %regno_allocno_map17 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx16, i32 0, i32 9, !dbg !6863
  %21 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map17, align 8, !dbg !6863
  %cmp18 = icmp ne %struct.ira_allocno** %21, null, !dbg !6864
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !6865

if.then19:                                        ; preds = %for.body
  br label %for.end, !dbg !6866

if.end20:                                         ; preds = %for.body
  br label %for.inc, !dbg !6867

for.inc:                                          ; preds = %if.end20
  %22 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !6868
  %call21 = call %struct.loop* @loop_outer(%struct.loop* %22), !dbg !6869
  store %struct.loop* %call21, %struct.loop** %parent, align 8, !dbg !6870
  br label %for.cond, !dbg !6871, !llvm.loop !6872

for.end:                                          ; preds = %if.then19, %for.cond
  %23 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !6874
  %cmp22 = icmp eq %struct.loop* %23, null, !dbg !6876
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !6877

if.then23:                                        ; preds = %for.end
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6878
  %next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %24, i32 0, i32 3, !dbg !6880
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %next, align 8, !dbg !6881
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6882
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i32 0, i32 2, !dbg !6883
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !6884
  %26 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6885
  %parent24 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %26, i32 0, i32 6, !dbg !6886
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %parent24, align 8, !dbg !6887
  br label %if.end34, !dbg !6888

if.else:                                          ; preds = %for.end
  %27 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !6889
  %28 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !6891
  %num25 = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 0, !dbg !6892
  %29 = load i32, i32* %num25, align 8, !dbg !6892
  %idxprom26 = sext i32 %29 to i64, !dbg !6889
  %arrayidx27 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %27, i64 %idxprom26, !dbg !6889
  store %struct.ira_loop_tree_node* %arrayidx27, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !6893
  %30 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !6894
  %children28 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %30, i32 0, i32 5, !dbg !6895
  %31 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children28, align 8, !dbg !6895
  %32 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6896
  %next29 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %32, i32 0, i32 3, !dbg !6897
  store %struct.ira_loop_tree_node* %31, %struct.ira_loop_tree_node** %next29, align 8, !dbg !6898
  %33 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6899
  %34 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !6900
  %children30 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %34, i32 0, i32 5, !dbg !6901
  store %struct.ira_loop_tree_node* %33, %struct.ira_loop_tree_node** %children30, align 8, !dbg !6902
  %35 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !6903
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %35, i32 0, i32 4, !dbg !6904
  %36 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !6904
  %37 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6905
  %subloop_next31 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %37, i32 0, i32 2, !dbg !6906
  store %struct.ira_loop_tree_node* %36, %struct.ira_loop_tree_node** %subloop_next31, align 8, !dbg !6907
  %38 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6908
  %39 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !6909
  %subloops32 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %39, i32 0, i32 4, !dbg !6910
  store %struct.ira_loop_tree_node* %38, %struct.ira_loop_tree_node** %subloops32, align 8, !dbg !6911
  %40 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !6912
  %41 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !6913
  %parent33 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %41, i32 0, i32 6, !dbg !6914
  store %struct.ira_loop_tree_node* %40, %struct.ira_loop_tree_node** %parent33, align 8, !dbg !6915
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.then23
  br label %if.end35, !dbg !6916

if.end35:                                         ; preds = %if.end34, %land.lhs.true, %if.end
  ret void, !dbg !6917
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @setup_loop_tree_level(%struct.ira_loop_tree_node* %loop_node, i32 %level) #0 !dbg !6918 {
entry:
  %loop_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %level.addr = alloca i32, align 4
  %height = alloca i32, align 4
  %max_height = alloca i32, align 4
  %subloop_node = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_loop_tree_node* %loop_node, %struct.ira_loop_tree_node** %loop_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node.addr, metadata !6921, metadata !DIExpression()), !dbg !6922
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !6923, metadata !DIExpression()), !dbg !6924
  call void @llvm.dbg.declare(metadata i32* %height, metadata !6925, metadata !DIExpression()), !dbg !6926
  call void @llvm.dbg.declare(metadata i32* %max_height, metadata !6927, metadata !DIExpression()), !dbg !6928
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %subloop_node, metadata !6929, metadata !DIExpression()), !dbg !6930
  %0 = load i32, i32* %level.addr, align 4, !dbg !6931
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !6932
  %level1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %1, i32 0, i32 7, !dbg !6933
  store i32 %0, i32* %level1, align 8, !dbg !6934
  %2 = load i32, i32* %level.addr, align 4, !dbg !6935
  %add = add nsw i32 %2, 1, !dbg !6936
  store i32 %add, i32* %max_height, align 4, !dbg !6937
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !6938
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i32 0, i32 4, !dbg !6940
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !6940
  store %struct.ira_loop_tree_node* %4, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !6941
  br label %for.cond, !dbg !6942

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !6943
  %cmp = icmp ne %struct.ira_loop_tree_node* %5, null, !dbg !6945
  br i1 %cmp, label %for.body, label %for.end, !dbg !6946

for.body:                                         ; preds = %for.cond
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !6947
  %7 = load i32, i32* %level.addr, align 4, !dbg !6949
  %add2 = add nsw i32 %7, 1, !dbg !6950
  %call = call i32 @setup_loop_tree_level(%struct.ira_loop_tree_node* %6, i32 %add2), !dbg !6951
  store i32 %call, i32* %height, align 4, !dbg !6952
  %8 = load i32, i32* %height, align 4, !dbg !6953
  %9 = load i32, i32* %max_height, align 4, !dbg !6955
  %cmp3 = icmp sgt i32 %8, %9, !dbg !6956
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6957

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %height, align 4, !dbg !6958
  store i32 %10, i32* %max_height, align 4, !dbg !6959
  br label %if.end, !dbg !6960

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6961

for.inc:                                          ; preds = %if.end
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !6962
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %11, i32 0, i32 2, !dbg !6963
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !6963
  store %struct.ira_loop_tree_node* %12, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !6964
  br label %for.cond, !dbg !6965, !llvm.loop !6966

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %max_height, align 4, !dbg !6968
  ret i32 %13, !dbg !6969
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !6970 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6973, metadata !DIExpression()), !dbg !6974
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6975, metadata !DIExpression()), !dbg !6974
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6974
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6974
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6974

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6974
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6974
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !6974
  %3 = load i32, i32* %num, align 8, !dbg !6974
  %cmp = icmp ult i32 %1, %3, !dbg !6974
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6976
  %land.ext = zext i1 %4 to i32, !dbg !6974
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6974
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !6974
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6974
  %idxprom = zext i32 %6 to i64, !dbg !6974
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !6974
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !6974
  ret %struct.loop* %7, !dbg !6974
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_loop_tree_node_allocnos(%struct.ira_loop_tree_node* %loop_node) #0 !dbg !6977 {
entry:
  %loop_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %i = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %edges = alloca %struct.VEC_edge_heap*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.ira_loop_tree_node* %loop_node, %struct.ira_loop_tree_node** %loop_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node.addr, metadata !6978, metadata !DIExpression()), !dbg !6979
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !6980
  %bb = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %0, i32 0, i32 0, !dbg !6982
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6982
  %cmp = icmp ne %struct.basic_block_def* %1, null, !dbg !6983
  br i1 %cmp, label %if.then, label %if.else, !dbg !6984

if.then:                                          ; preds = %entry
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !6985
  call void @create_bb_allocnos(%struct.ira_loop_tree_node* %2), !dbg !6986
  br label %if.end17, !dbg !6986

if.else:                                          ; preds = %entry
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !6987
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !6989
  %cmp1 = icmp ne %struct.ira_loop_tree_node* %3, %4, !dbg !6990
  br i1 %cmp1, label %if.then2, label %if.end16, !dbg !6991

if.then2:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6992, metadata !DIExpression()), !dbg !6994
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6995, metadata !DIExpression()), !dbg !6996
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6997, metadata !DIExpression()), !dbg !6998
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %edges, metadata !6999, metadata !DIExpression()), !dbg !7000
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !7001
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %5, i32 0, i32 1, !dbg !7001
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7001
  %header = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 2, !dbg !7001
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !7001
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 0, !dbg !7001
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !7001
  %8 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7001
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7001
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !7001
  store i32 %10, i32* %9, align 8, !dbg !7001
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7001
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !7001
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !7001
  %13 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7001
  %14 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7001
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !7001
  br label %for.cond, !dbg !7001

for.cond:                                         ; preds = %for.inc, %if.then2
  %15 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7003
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !7003
  %17 = load i32, i32* %16, align 8, !dbg !7003
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !7003
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %18, align 8, !dbg !7003
  %call3 = call zeroext i8 @ei_cond(i32 %17, %struct.VEC_edge_gc** %19, %struct.edge_def** %e), !dbg !7003
  %tobool = icmp ne i8 %call3, 0, !dbg !7001
  br i1 %tobool, label %for.body, label %for.end, !dbg !7001

for.body:                                         ; preds = %for.cond
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7005
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 0, !dbg !7007
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7007
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !7008
  %loop4 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %22, i32 0, i32 1, !dbg !7009
  %23 = load %struct.loop*, %struct.loop** %loop4, align 8, !dbg !7009
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 3, !dbg !7010
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !7010
  %cmp5 = icmp ne %struct.basic_block_def* %21, %24, !dbg !7011
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !7012

if.then6:                                         ; preds = %for.body
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7013
  call void @create_loop_allocnos(%struct.edge_def* %25), !dbg !7014
  br label %if.end, !dbg !7014

if.end:                                           ; preds = %if.then6, %for.body
  br label %for.inc, !dbg !7010

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7003
  br label %for.cond, !dbg !7003, !llvm.loop !7015

for.end:                                          ; preds = %for.cond
  %26 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !7017
  %loop7 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %26, i32 0, i32 1, !dbg !7018
  %27 = load %struct.loop*, %struct.loop** %loop7, align 8, !dbg !7018
  %call8 = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %27), !dbg !7019
  store %struct.VEC_edge_heap* %call8, %struct.VEC_edge_heap** %edges, align 8, !dbg !7020
  store i32 0, i32* %i, align 4, !dbg !7021
  br label %for.cond9, !dbg !7023

for.cond9:                                        ; preds = %for.inc14, %for.end
  %28 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !7024
  %tobool10 = icmp ne %struct.VEC_edge_heap* %28, null, !dbg !7024
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !7024

cond.true:                                        ; preds = %for.cond9
  %29 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !7024
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %29, i32 0, i32 0, !dbg !7024
  br label %cond.end, !dbg !7024

cond.false:                                       ; preds = %for.cond9
  br label %cond.end, !dbg !7024

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7024
  %30 = load i32, i32* %i, align 4, !dbg !7024
  %call11 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %30, %struct.edge_def** %e), !dbg !7024
  %tobool12 = icmp ne i32 %call11, 0, !dbg !7026
  br i1 %tobool12, label %for.body13, label %for.end15, !dbg !7026

for.body13:                                       ; preds = %cond.end
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7027
  call void @create_loop_allocnos(%struct.edge_def* %31), !dbg !7028
  br label %for.inc14, !dbg !7028

for.inc14:                                        ; preds = %for.body13
  %32 = load i32, i32* %i, align 4, !dbg !7029
  %inc = add nsw i32 %32, 1, !dbg !7029
  store i32 %inc, i32* %i, align 4, !dbg !7029
  br label %for.cond9, !dbg !7030, !llvm.loop !7031

for.end15:                                        ; preds = %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %edges), !dbg !7033
  br label %if.end16, !dbg !7034

if.end16:                                         ; preds = %for.end15, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then
  ret void, !dbg !7035
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_modified_regnos(%struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !7036 {
entry:
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !7037, metadata !DIExpression()), !dbg !7038
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7039
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7041
  %cmp = icmp eq %struct.ira_loop_tree_node* %0, %1, !dbg !7042
  br i1 %cmp, label %if.then, label %if.end, !dbg !7043

if.then:                                          ; preds = %entry
  br label %return, !dbg !7044

if.end:                                           ; preds = %entry
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7045
  %parent = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %2, i32 0, i32 6, !dbg !7046
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7046
  %modified_regnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i32 0, i32 14, !dbg !7047
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos, align 8, !dbg !7047
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7048
  %modified_regnos1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %5, i32 0, i32 14, !dbg !7049
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos1, align 8, !dbg !7049
  %call = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %4, %struct.bitmap_head_def* %6), !dbg !7050
  br label %return, !dbg !7051

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7051
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_bb_allocnos(%struct.ira_loop_tree_node* %bb_node) #0 !dbg !7052 {
entry:
  %bb_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.ira_loop_tree_node* %bb_node, %struct.ira_loop_tree_node** %bb_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %bb_node.addr, metadata !7053, metadata !DIExpression()), !dbg !7054
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7055, metadata !DIExpression()), !dbg !7056
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7057, metadata !DIExpression()), !dbg !7058
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7059, metadata !DIExpression()), !dbg !7060
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7061, metadata !DIExpression()), !dbg !7069
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %bb_node.addr, align 8, !dbg !7070
  %bb1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %0, i32 0, i32 0, !dbg !7071
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !7071
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !7072
  store %struct.basic_block_def* %1, %struct.basic_block_def** @curr_bb, align 8, !dbg !7073
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7074
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !7074
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7074
  %3 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7074
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %3, i32 0, i32 1, !dbg !7074
  %4 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7074
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8, !dbg !7074
  br label %for.cond, !dbg !7074

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7076
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !7076
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7076

land.rhs:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7076
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7076
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !7076
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !7076
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !7076
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 0, !dbg !7076
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !7076
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7076
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7076
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7076
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7076
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7076
  %cmp = icmp ne %struct.rtx_def* %6, %10, !dbg !7076
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !7078
  br i1 %11, label %for.body, label %for.end, !dbg !7074

for.body:                                         ; preds = %land.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7079
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7079
  %bf.load = load i32, i32* %13, align 8, !dbg !7079
  %bf.clear = and i32 %bf.load, 65535, !dbg !7079
  %cmp4 = icmp eq i32 %bf.clear, 8, !dbg !7079
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false, !dbg !7079

lor.lhs.false:                                    ; preds = %for.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7079
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !7079
  %bf.load5 = load i32, i32* %15, align 8, !dbg !7079
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7079
  %cmp7 = icmp eq i32 %bf.clear6, 7, !dbg !7079
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8, !dbg !7079

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7079
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !7079
  %bf.load9 = load i32, i32* %17, align 8, !dbg !7079
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !7079
  %cmp11 = icmp eq i32 %bf.clear10, 9, !dbg !7079
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false12, !dbg !7079

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7079
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !7079
  %bf.load13 = load i32, i32* %19, align 8, !dbg !7079
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !7079
  %cmp15 = icmp eq i32 %bf.clear14, 10, !dbg !7079
  br i1 %cmp15, label %land.lhs.true, label %if.end, !dbg !7079

land.lhs.true:                                    ; preds = %lor.lhs.false12, %lor.lhs.false8, %lor.lhs.false, %for.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7079
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !7079
  %bf.load16 = load i32, i32* %21, align 8, !dbg !7079
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !7079
  %cmp18 = icmp eq i32 %bf.clear17, 7, !dbg !7079
  br i1 %cmp18, label %if.end, label %if.then, !dbg !7081

if.then:                                          ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7082
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7082
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7082
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !7082
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !7082
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !7082
  call void @create_insn_allocnos(%struct.rtx_def* %23, i8 zeroext 0), !dbg !7083
  br label %if.end, !dbg !7083

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.lhs.false12
  br label %for.inc, !dbg !7079

for.inc:                                          ; preds = %if.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7076
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7076
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !7076
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 1, !dbg !7076
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !7076
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !7076
  store %struct.rtx_def* %25, %struct.rtx_def** %insn, align 8, !dbg !7076
  br label %for.cond, !dbg !7076, !llvm.loop !7084

for.end:                                          ; preds = %land.end
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7086
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !7086
  %27 = load i32, i32* %index, align 8, !dbg !7086
  %call = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %27), !dbg !7086
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call, i32 0, i32 2, !dbg !7086
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !7086
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %28, i32 53, i32* %i), !dbg !7086
  br label %for.cond27, !dbg !7086

for.cond27:                                       ; preds = %for.inc36, %for.end
  %call28 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7088
  %tobool29 = icmp ne i8 %call28, 0, !dbg !7086
  br i1 %tobool29, label %for.body30, label %for.end37, !dbg !7086

for.body30:                                       ; preds = %for.cond27
  %29 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_curr_regno_allocno_map, align 8, !dbg !7090
  %30 = load i32, i32* %i, align 4, !dbg !7092
  %idxprom = zext i32 %30 to i64, !dbg !7090
  %arrayidx31 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %29, i64 %idxprom, !dbg !7090
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx31, align 8, !dbg !7090
  %cmp32 = icmp eq %struct.ira_allocno* %31, null, !dbg !7093
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !7094

if.then33:                                        ; preds = %for.body30
  %32 = load i32, i32* %i, align 4, !dbg !7095
  %33 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !7096
  %call34 = call %struct.ira_allocno* @ira_create_allocno(i32 %32, i8 zeroext 0, %struct.ira_loop_tree_node* %33), !dbg !7097
  br label %if.end35, !dbg !7097

if.end35:                                         ; preds = %if.then33, %for.body30
  br label %for.inc36, !dbg !7098

for.inc36:                                        ; preds = %if.end35
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7088
  br label %for.cond27, !dbg !7088, !llvm.loop !7099

for.end37:                                        ; preds = %for.cond27
  ret void, !dbg !7101
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_loop_allocnos(%struct.edge_def* %e) #0 !dbg !7102 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %live_in_regs = alloca %struct.bitmap_head_def*, align 8
  %border_allocnos = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7105, metadata !DIExpression()), !dbg !7106
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7107, metadata !DIExpression()), !dbg !7108
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %live_in_regs, metadata !7109, metadata !DIExpression()), !dbg !7110
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %border_allocnos, metadata !7111, metadata !DIExpression()), !dbg !7112
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7113, metadata !DIExpression()), !dbg !7114
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !7115, metadata !DIExpression()), !dbg !7116
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7117
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !7117
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7117
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !7117
  %2 = load i32, i32* %index, align 8, !dbg !7117
  %call = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %2), !dbg !7117
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call, i32 0, i32 2, !dbg !7117
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !7117
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %live_in_regs, align 8, !dbg !7118
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !7119
  %border_allocnos1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %4, i32 0, i32 13, !dbg !7120
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos1, align 8, !dbg !7120
  store %struct.bitmap_head_def* %5, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !7121
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7122
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 0, !dbg !7122
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7122
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !7122
  %8 = load i32, i32* %index2, align 8, !dbg !7122
  %call3 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %8), !dbg !7122
  %out = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call3, i32 0, i32 3, !dbg !7122
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out, align 8, !dbg !7122
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %9, i32 53, i32* %i), !dbg !7122
  br label %for.cond, !dbg !7122

for.cond:                                         ; preds = %for.inc, %entry
  %call4 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7124
  %tobool = icmp ne i8 %call4, 0, !dbg !7122
  br i1 %tobool, label %for.body, label %for.end, !dbg !7122

for.body:                                         ; preds = %for.cond
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_in_regs, align 8, !dbg !7126
  %11 = load i32, i32* %i, align 4, !dbg !7128
  %call5 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %10, i32 %11), !dbg !7129
  %tobool6 = icmp ne i32 %call5, 0, !dbg !7129
  br i1 %tobool6, label %if.then, label %if.end20, !dbg !7130

if.then:                                          ; preds = %for.body
  %12 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_curr_regno_allocno_map, align 8, !dbg !7131
  %13 = load i32, i32* %i, align 4, !dbg !7134
  %idxprom = zext i32 %13 to i64, !dbg !7131
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %12, i64 %idxprom, !dbg !7131
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !7131
  %cmp = icmp eq %struct.ira_allocno* %14, null, !dbg !7135
  br i1 %cmp, label %if.then7, label %if.end16, !dbg !7136

if.then7:                                         ; preds = %if.then
  %15 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !7137
  %parent8 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %15, i32 0, i32 6, !dbg !7140
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent8, align 8, !dbg !7140
  store %struct.ira_loop_tree_node* %16, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7141
  %cmp9 = icmp ne %struct.ira_loop_tree_node* %16, null, !dbg !7142
  br i1 %cmp9, label %land.lhs.true, label %if.end, !dbg !7143

land.lhs.true:                                    ; preds = %if.then7
  %17 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7144
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %17, i32 0, i32 9, !dbg !7145
  %18 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !7145
  %19 = load i32, i32* %i, align 4, !dbg !7146
  %idxprom10 = zext i32 %19 to i64, !dbg !7144
  %arrayidx11 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %18, i64 %idxprom10, !dbg !7144
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx11, align 8, !dbg !7144
  %cmp12 = icmp eq %struct.ira_allocno* %20, null, !dbg !7147
  br i1 %cmp12, label %if.then13, label %if.end, !dbg !7148

if.then13:                                        ; preds = %land.lhs.true
  %21 = load i32, i32* %i, align 4, !dbg !7149
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7150
  %call14 = call %struct.ira_allocno* @ira_create_allocno(i32 %21, i8 zeroext 0, %struct.ira_loop_tree_node* %22), !dbg !7151
  br label %if.end, !dbg !7151

if.end:                                           ; preds = %if.then13, %land.lhs.true, %if.then7
  %23 = load i32, i32* %i, align 4, !dbg !7152
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !7153
  %call15 = call %struct.ira_allocno* @ira_create_allocno(i32 %23, i8 zeroext 0, %struct.ira_loop_tree_node* %24), !dbg !7154
  br label %if.end16, !dbg !7155

if.end16:                                         ; preds = %if.end, %if.then
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !7156
  %26 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_curr_regno_allocno_map, align 8, !dbg !7157
  %27 = load i32, i32* %i, align 4, !dbg !7157
  %idxprom17 = zext i32 %27 to i64, !dbg !7157
  %arrayidx18 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %26, i64 %idxprom17, !dbg !7157
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx18, align 8, !dbg !7157
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 0, !dbg !7157
  %29 = load i32, i32* %num, align 8, !dbg !7157
  %call19 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %25, i32 %29), !dbg !7158
  br label %if.end20, !dbg !7159

if.end20:                                         ; preds = %if.end16, %for.body
  br label %for.inc, !dbg !7160

for.inc:                                          ; preds = %if.end20
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7124
  br label %for.cond, !dbg !7124, !llvm.loop !7161

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7163
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_insn_allocnos(%struct.rtx_def* %x, i8 zeroext %output_p) #0 !dbg !7164 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %output_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %code = alloca i32, align 4
  %regno = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7167, metadata !DIExpression()), !dbg !7168
  store i8 %output_p, i8* %output_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %output_p.addr, metadata !7169, metadata !DIExpression()), !dbg !7170
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7171, metadata !DIExpression()), !dbg !7172
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7173, metadata !DIExpression()), !dbg !7174
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7175, metadata !DIExpression()), !dbg !7176
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7177, metadata !DIExpression()), !dbg !7178
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7179
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7179
  %bf.load = load i32, i32* %1, align 8, !dbg !7179
  %bf.clear = and i32 %bf.load, 65535, !dbg !7179
  store i32 %bf.clear, i32* %code, align 4, !dbg !7178
  %2 = load i32, i32* %code, align 4, !dbg !7180
  %cmp = icmp eq i32 %2, 37, !dbg !7182
  br i1 %cmp, label %if.then, label %if.else, !dbg !7183

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7184, metadata !DIExpression()), !dbg !7186
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7187
  %call = call i32 @rhs_regno(%struct.rtx_def* %3), !dbg !7187
  store i32 %call, i32* %regno, align 4, !dbg !7189
  %cmp1 = icmp sge i32 %call, 53, !dbg !7190
  br i1 %cmp1, label %if.then2, label %if.end20, !dbg !7191

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !7192, metadata !DIExpression()), !dbg !7194
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_curr_regno_allocno_map, align 8, !dbg !7195
  %5 = load i32, i32* %regno, align 4, !dbg !7197
  %idxprom = sext i32 %5 to i64, !dbg !7195
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !7195
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !7195
  store %struct.ira_allocno* %6, %struct.ira_allocno** %a, align 8, !dbg !7198
  %cmp3 = icmp eq %struct.ira_allocno* %6, null, !dbg !7199
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !7200

if.then4:                                         ; preds = %if.then2
  %7 = load i32, i32* %regno, align 4, !dbg !7201
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !7202
  %call5 = call %struct.ira_allocno* @ira_create_allocno(i32 %7, i8 zeroext 0, %struct.ira_loop_tree_node* %8), !dbg !7203
  store %struct.ira_allocno* %call5, %struct.ira_allocno** %a, align 8, !dbg !7204
  br label %if.end, !dbg !7205

if.end:                                           ; preds = %if.then4, %if.then2
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7206
  %nrefs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 7, !dbg !7206
  %10 = load i32, i32* %nrefs, align 8, !dbg !7207
  %inc = add nsw i32 %10, 1, !dbg !7207
  store i32 %inc, i32* %nrefs, align 8, !dbg !7207
  %11 = load i32, i32* @optimize_size, align 4, !dbg !7208
  %tobool = icmp ne i32 %11, 0, !dbg !7208
  br i1 %tobool, label %cond.true, label %lor.lhs.false, !dbg !7208

lor.lhs.false:                                    ; preds = %if.end
  %12 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !7208
  %tobool6 = icmp ne i32 %12, 0, !dbg !7208
  br i1 %tobool6, label %land.lhs.true, label %cond.false, !dbg !7208

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7208
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !7208
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7208
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7208
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !7208
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7208
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 8, !dbg !7208
  %16 = load i64, i64* %count, align 8, !dbg !7208
  %tobool7 = icmp ne i64 %16, 0, !dbg !7208
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7208

cond.true:                                        ; preds = %land.lhs.true, %if.end
  br label %cond.end14, !dbg !7208

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** @curr_bb, align 8, !dbg !7208
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 11, !dbg !7208
  %18 = load i32, i32* %frequency, align 8, !dbg !7208
  %mul = mul nsw i32 %18, 1000, !dbg !7208
  %div = sdiv i32 %mul, 10000, !dbg !7208
  %tobool8 = icmp ne i32 %div, 0, !dbg !7208
  br i1 %tobool8, label %cond.true9, label %cond.false13, !dbg !7208

cond.true9:                                       ; preds = %cond.false
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** @curr_bb, align 8, !dbg !7208
  %frequency10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 11, !dbg !7208
  %20 = load i32, i32* %frequency10, align 8, !dbg !7208
  %mul11 = mul nsw i32 %20, 1000, !dbg !7208
  %div12 = sdiv i32 %mul11, 10000, !dbg !7208
  br label %cond.end, !dbg !7208

cond.false13:                                     ; preds = %cond.false
  br label %cond.end, !dbg !7208

cond.end:                                         ; preds = %cond.false13, %cond.true9
  %cond = phi i32 [ %div12, %cond.true9 ], [ 1, %cond.false13 ], !dbg !7208
  br label %cond.end14, !dbg !7208

cond.end14:                                       ; preds = %cond.end, %cond.true
  %cond15 = phi i32 [ 1000, %cond.true ], [ %cond, %cond.end ], !dbg !7208
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7209
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 8, !dbg !7209
  %22 = load i32, i32* %freq, align 4, !dbg !7210
  %add = add nsw i32 %22, %cond15, !dbg !7210
  store i32 %add, i32* %freq, align 4, !dbg !7210
  %23 = load i8, i8* %output_p.addr, align 1, !dbg !7211
  %tobool16 = icmp ne i8 %23, 0, !dbg !7211
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !7213

if.then17:                                        ; preds = %cond.end14
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_curr_loop_tree_node, align 8, !dbg !7214
  %modified_regnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %24, i32 0, i32 14, !dbg !7215
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos, align 8, !dbg !7215
  %26 = load i32, i32* %regno, align 4, !dbg !7216
  %call18 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %25, i32 %26), !dbg !7217
  br label %if.end19, !dbg !7217

if.end19:                                         ; preds = %if.then17, %cond.end14
  br label %if.end20, !dbg !7218

if.end20:                                         ; preds = %if.end19, %if.then
  br label %for.end111, !dbg !7219

if.else:                                          ; preds = %entry
  %27 = load i32, i32* %code, align 4, !dbg !7220
  %cmp21 = icmp eq i32 %27, 23, !dbg !7222
  br i1 %cmp21, label %if.then22, label %if.else28, !dbg !7223

if.then22:                                        ; preds = %if.else
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7224
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !7224
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7224
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7224
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !7224
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7224
  call void @create_insn_allocnos(%struct.rtx_def* %29, i8 zeroext 1), !dbg !7226
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7227
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !7227
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !7227
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !7227
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !7227
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !7227
  call void @create_insn_allocnos(%struct.rtx_def* %31, i8 zeroext 0), !dbg !7228
  br label %for.end111, !dbg !7229

if.else28:                                        ; preds = %if.else
  %32 = load i32, i32* %code, align 4, !dbg !7230
  %cmp29 = icmp eq i32 %32, 25, !dbg !7232
  br i1 %cmp29, label %if.then30, label %if.else35, !dbg !7233

if.then30:                                        ; preds = %if.else28
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7234
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !7234
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !7234
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !7234
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !7234
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !7234
  call void @create_insn_allocnos(%struct.rtx_def* %34, i8 zeroext 1), !dbg !7236
  br label %for.end111, !dbg !7237

if.else35:                                        ; preds = %if.else28
  %35 = load i32, i32* %code, align 4, !dbg !7238
  %cmp36 = icmp eq i32 %35, 43, !dbg !7240
  br i1 %cmp36, label %if.then37, label %if.else42, !dbg !7241

if.then37:                                        ; preds = %if.else35
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7242
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !7242
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !7242
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 0, !dbg !7242
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !7242
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !7242
  call void @create_insn_allocnos(%struct.rtx_def* %37, i8 zeroext 0), !dbg !7244
  br label %for.end111, !dbg !7245

if.else42:                                        ; preds = %if.else35
  %38 = load i32, i32* %code, align 4, !dbg !7246
  %cmp43 = icmp eq i32 %38, 74, !dbg !7248
  br i1 %cmp43, label %if.then54, label %lor.lhs.false44, !dbg !7249

lor.lhs.false44:                                  ; preds = %if.else42
  %39 = load i32, i32* %code, align 4, !dbg !7250
  %cmp45 = icmp eq i32 %39, 76, !dbg !7251
  br i1 %cmp45, label %if.then54, label %lor.lhs.false46, !dbg !7252

lor.lhs.false46:                                  ; preds = %lor.lhs.false44
  %40 = load i32, i32* %code, align 4, !dbg !7253
  %cmp47 = icmp eq i32 %40, 75, !dbg !7254
  br i1 %cmp47, label %if.then54, label %lor.lhs.false48, !dbg !7255

lor.lhs.false48:                                  ; preds = %lor.lhs.false46
  %41 = load i32, i32* %code, align 4, !dbg !7256
  %cmp49 = icmp eq i32 %41, 77, !dbg !7257
  br i1 %cmp49, label %if.then54, label %lor.lhs.false50, !dbg !7258

lor.lhs.false50:                                  ; preds = %lor.lhs.false48
  %42 = load i32, i32* %code, align 4, !dbg !7259
  %cmp51 = icmp eq i32 %42, 79, !dbg !7260
  br i1 %cmp51, label %if.then54, label %lor.lhs.false52, !dbg !7261

lor.lhs.false52:                                  ; preds = %lor.lhs.false50
  %43 = load i32, i32* %code, align 4, !dbg !7262
  %cmp53 = icmp eq i32 %43, 78, !dbg !7263
  br i1 %cmp53, label %if.then54, label %if.end63, !dbg !7264

if.then54:                                        ; preds = %lor.lhs.false52, %lor.lhs.false50, %lor.lhs.false48, %lor.lhs.false46, %lor.lhs.false44, %if.else42
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7265
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !7265
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !7265
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !7265
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !7265
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !7265
  call void @create_insn_allocnos(%struct.rtx_def* %45, i8 zeroext 1), !dbg !7267
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7268
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !7268
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !7268
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !7268
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !7268
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !7268
  call void @create_insn_allocnos(%struct.rtx_def* %47, i8 zeroext 0), !dbg !7269
  br label %for.end111, !dbg !7270

if.end63:                                         ; preds = %lor.lhs.false52
  br label %if.end64

if.end64:                                         ; preds = %if.end63
  br label %if.end65

if.end65:                                         ; preds = %if.end64
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  br label %if.end67

if.end67:                                         ; preds = %if.end66
  %48 = load i32, i32* %code, align 4, !dbg !7271
  %idxprom68 = sext i32 %48 to i64, !dbg !7271
  %arrayidx69 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom68, !dbg !7271
  %49 = load i8*, i8** %arrayidx69, align 8, !dbg !7271
  store i8* %49, i8** %fmt, align 8, !dbg !7272
  %50 = load i32, i32* %code, align 4, !dbg !7273
  %idxprom70 = sext i32 %50 to i64, !dbg !7273
  %arrayidx71 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom70, !dbg !7273
  %51 = load i8, i8* %arrayidx71, align 1, !dbg !7273
  %conv = zext i8 %51 to i32, !dbg !7273
  %sub = sub nsw i32 %conv, 1, !dbg !7275
  store i32 %sub, i32* %i, align 4, !dbg !7276
  br label %for.cond, !dbg !7277

for.cond:                                         ; preds = %for.inc110, %if.end67
  %52 = load i32, i32* %i, align 4, !dbg !7278
  %cmp72 = icmp sge i32 %52, 0, !dbg !7280
  br i1 %cmp72, label %for.body, label %for.end111, !dbg !7281

for.body:                                         ; preds = %for.cond
  %53 = load i8*, i8** %fmt, align 8, !dbg !7282
  %54 = load i32, i32* %i, align 4, !dbg !7285
  %idxprom74 = sext i32 %54 to i64, !dbg !7282
  %arrayidx75 = getelementptr inbounds i8, i8* %53, i64 %idxprom74, !dbg !7282
  %55 = load i8, i8* %arrayidx75, align 1, !dbg !7282
  %conv76 = sext i8 %55 to i32, !dbg !7282
  %cmp77 = icmp eq i32 %conv76, 101, !dbg !7286
  br i1 %cmp77, label %if.then79, label %if.else85, !dbg !7287

if.then79:                                        ; preds = %for.body
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7288
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !7288
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !7288
  %57 = load i32, i32* %i, align 4, !dbg !7288
  %idxprom82 = sext i32 %57 to i64, !dbg !7288
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 %idxprom82, !dbg !7288
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !7288
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !7288
  %59 = load i8, i8* %output_p.addr, align 1, !dbg !7289
  call void @create_insn_allocnos(%struct.rtx_def* %58, i8 zeroext %59), !dbg !7290
  br label %if.end109, !dbg !7290

if.else85:                                        ; preds = %for.body
  %60 = load i8*, i8** %fmt, align 8, !dbg !7291
  %61 = load i32, i32* %i, align 4, !dbg !7293
  %idxprom86 = sext i32 %61 to i64, !dbg !7291
  %arrayidx87 = getelementptr inbounds i8, i8* %60, i64 %idxprom86, !dbg !7291
  %62 = load i8, i8* %arrayidx87, align 1, !dbg !7291
  %conv88 = sext i8 %62 to i32, !dbg !7291
  %cmp89 = icmp eq i32 %conv88, 69, !dbg !7294
  br i1 %cmp89, label %if.then91, label %if.end108, !dbg !7295

if.then91:                                        ; preds = %if.else85
  store i32 0, i32* %j, align 4, !dbg !7296
  br label %for.cond92, !dbg !7298

for.cond92:                                       ; preds = %for.inc, %if.then91
  %63 = load i32, i32* %j, align 4, !dbg !7299
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7301
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !7301
  %fld94 = bitcast %union.u* %u93 to [1 x %union.rtunion_def]*, !dbg !7301
  %65 = load i32, i32* %i, align 4, !dbg !7301
  %idxprom95 = sext i32 %65 to i64, !dbg !7301
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i64 0, i64 %idxprom95, !dbg !7301
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtvec_def**, !dbg !7301
  %66 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7301
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %66, i32 0, i32 0, !dbg !7301
  %67 = load i32, i32* %num_elem, align 8, !dbg !7301
  %cmp97 = icmp slt i32 %63, %67, !dbg !7302
  br i1 %cmp97, label %for.body99, label %for.end, !dbg !7303

for.body99:                                       ; preds = %for.cond92
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7304
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !7304
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !7304
  %69 = load i32, i32* %i, align 4, !dbg !7304
  %idxprom102 = sext i32 %69 to i64, !dbg !7304
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 %idxprom102, !dbg !7304
  %rt_rtvec104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtvec_def**, !dbg !7304
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec104, align 8, !dbg !7304
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1, !dbg !7304
  %71 = load i32, i32* %j, align 4, !dbg !7304
  %idxprom105 = sext i32 %71 to i64, !dbg !7304
  %arrayidx106 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom105, !dbg !7304
  %72 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx106, align 8, !dbg !7304
  %73 = load i8, i8* %output_p.addr, align 1, !dbg !7305
  call void @create_insn_allocnos(%struct.rtx_def* %72, i8 zeroext %73), !dbg !7306
  br label %for.inc, !dbg !7306

for.inc:                                          ; preds = %for.body99
  %74 = load i32, i32* %j, align 4, !dbg !7307
  %inc107 = add nsw i32 %74, 1, !dbg !7307
  store i32 %inc107, i32* %j, align 4, !dbg !7307
  br label %for.cond92, !dbg !7308, !llvm.loop !7309

for.end:                                          ; preds = %for.cond92
  br label %if.end108, !dbg !7310

if.end108:                                        ; preds = %for.end, %if.else85
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then79
  br label %for.inc110, !dbg !7311

for.inc110:                                       ; preds = %if.end109
  %75 = load i32, i32* %i, align 4, !dbg !7312
  %dec = add nsw i32 %75, -1, !dbg !7312
  store i32 %dec, i32* %i, align 4, !dbg !7312
  br label %for.cond, !dbg !7313, !llvm.loop !7314

for.end111:                                       ; preds = %if.end20, %if.then22, %if.then30, %if.then37, %if.then54, %for.cond
  ret void, !dbg !7316
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !7317 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7324, metadata !DIExpression()), !dbg !7325
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !7326, metadata !DIExpression()), !dbg !7327
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !7328, metadata !DIExpression()), !dbg !7329
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7330, metadata !DIExpression()), !dbg !7331
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !7332
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !7333
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !7333
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7334
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !7335
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !7336
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7337
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !7338
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !7339
  br label %while.body, !dbg !7340

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7341
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !7344
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !7344
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !7341
  br i1 %tobool, label %if.end, label %if.then, !dbg !7345

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7346
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !7348
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !7349
  br label %while.end, !dbg !7350

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7351
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !7353
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !7353
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !7354
  %9 = load i32, i32* %indx, align 8, !dbg !7354
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !7355
  %div = udiv i32 %10, 128, !dbg !7356
  %cmp = icmp uge i32 %9, %div, !dbg !7357
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !7358

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !7359

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7360
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !7361
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !7361
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !7362
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7362
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7363
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !7364
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !7365
  br label %while.body, !dbg !7340, !llvm.loop !7366

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7368
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7370
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !7370
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !7371
  %17 = load i32, i32* %indx9, align 8, !dbg !7371
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !7372
  %div10 = udiv i32 %18, 128, !dbg !7373
  %cmp11 = icmp ne i32 %17, %div10, !dbg !7374
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !7375

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7376
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !7377
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !7377
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !7378
  %21 = load i32, i32* %indx14, align 8, !dbg !7378
  %mul = mul i32 %21, 128, !dbg !7379
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !7380
  br label %if.end15, !dbg !7381

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !7382
  %div16 = udiv i32 %22, 64, !dbg !7383
  %rem = urem i32 %div16, 2, !dbg !7384
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7385
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !7386
  store i32 %rem, i32* %word_no, align 8, !dbg !7387
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7388
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !7389
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !7389
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !7390
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7391
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !7392
  %27 = load i32, i32* %word_no18, align 8, !dbg !7392
  %idxprom = zext i32 %27 to i64, !dbg !7388
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !7388
  %28 = load i64, i64* %arrayidx, align 8, !dbg !7388
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7393
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !7394
  store i64 %28, i64* %bits19, align 8, !dbg !7395
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !7396
  %rem20 = urem i32 %30, 64, !dbg !7397
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7398
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !7399
  %32 = load i64, i64* %bits21, align 8, !dbg !7400
  %sh_prom = zext i32 %rem20 to i64, !dbg !7400
  %shr = lshr i64 %32, %sh_prom, !dbg !7400
  store i64 %shr, i64* %bits21, align 8, !dbg !7400
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7401
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !7402
  %34 = load i64, i64* %bits22, align 8, !dbg !7402
  %tobool23 = icmp ne i64 %34, 0, !dbg !7403
  %lnot = xor i1 %tobool23, true, !dbg !7403
  %lnot.ext = zext i1 %lnot to i32, !dbg !7403
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !7404
  %add = add i32 %35, %lnot.ext, !dbg !7404
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !7404
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !7405
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !7406
  store i32 %36, i32* %37, align 4, !dbg !7407
  ret void, !dbg !7408
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %index) #0 !dbg !7409 {
entry:
  %retval = alloca %struct.df_lr_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7412, metadata !DIExpression()), !dbg !7413
  %0 = load i32, i32* %index.addr, align 4, !dbg !7414
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !7416
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !7416
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 1, !dbg !7416
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !7416
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !7417
  %3 = load i32, i32* %block_info_size, align 8, !dbg !7417
  %cmp = icmp ult i32 %0, %3, !dbg !7418
  br i1 %cmp, label %if.then, label %if.else, !dbg !7419

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !7420
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !7420
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 1, !dbg !7420
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !7420
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !7421
  %6 = load i8**, i8*** %block_info, align 8, !dbg !7421
  %7 = load i32, i32* %index.addr, align 4, !dbg !7422
  %idxprom = zext i32 %7 to i64, !dbg !7420
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !7420
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !7420
  %9 = bitcast i8* %8 to %struct.df_lr_bb_info*, !dbg !7423
  store %struct.df_lr_bb_info* %9, %struct.df_lr_bb_info** %retval, align 8, !dbg !7424
  br label %return, !dbg !7424

if.else:                                          ; preds = %entry
  store %struct.df_lr_bb_info* null, %struct.df_lr_bb_info** %retval, align 8, !dbg !7425
  br label %return, !dbg !7425

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_lr_bb_info*, %struct.df_lr_bb_info** %retval, align 8, !dbg !7426
  ret %struct.df_lr_bb_info* %10, !dbg !7426
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !7427 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7430, metadata !DIExpression()), !dbg !7431
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7432, metadata !DIExpression()), !dbg !7433
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7434
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !7436
  %1 = load i64, i64* %bits, align 8, !dbg !7436
  %tobool = icmp ne i64 %1, 0, !dbg !7434
  br i1 %tobool, label %if.then, label %if.end, !dbg !7437

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !7438

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !7439), !dbg !7441
  br label %while.cond, !dbg !7442

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7443
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !7444
  %3 = load i64, i64* %bits1, align 8, !dbg !7444
  %and = and i64 %3, 1, !dbg !7445
  %tobool2 = icmp ne i64 %and, 0, !dbg !7446
  %lnot = xor i1 %tobool2, true, !dbg !7446
  br i1 %lnot, label %while.body, label %while.end, !dbg !7442

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7447
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !7449
  %5 = load i64, i64* %bits3, align 8, !dbg !7450
  %shr = lshr i64 %5, 1, !dbg !7450
  store i64 %shr, i64* %bits3, align 8, !dbg !7450
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !7451
  %7 = load i32, i32* %6, align 4, !dbg !7452
  %add = add i32 %7, 1, !dbg !7452
  store i32 %add, i32* %6, align 4, !dbg !7452
  br label %while.cond, !dbg !7442, !llvm.loop !7453

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !7455
  br label %return, !dbg !7455

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !7456
  %9 = load i32, i32* %8, align 4, !dbg !7457
  %add4 = add i32 %9, 64, !dbg !7458
  %sub = sub i32 %add4, 1, !dbg !7459
  %div = udiv i32 %sub, 64, !dbg !7460
  %mul = mul i32 %div, 64, !dbg !7461
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !7462
  store i32 %mul, i32* %10, align 4, !dbg !7463
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7464
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !7465
  %12 = load i32, i32* %word_no, align 8, !dbg !7466
  %inc = add i32 %12, 1, !dbg !7466
  store i32 %inc, i32* %word_no, align 8, !dbg !7466
  br label %while.body6, !dbg !7467

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !7468

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7470
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !7471
  %14 = load i32, i32* %word_no8, align 8, !dbg !7471
  %cmp = icmp ne i32 %14, 2, !dbg !7472
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !7468

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7473
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7475
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !7475
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !7476
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7477
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !7478
  %18 = load i32, i32* %word_no11, align 8, !dbg !7478
  %idxprom = zext i32 %18 to i64, !dbg !7473
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !7473
  %19 = load i64, i64* %arrayidx, align 8, !dbg !7473
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7479
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !7480
  store i64 %19, i64* %bits12, align 8, !dbg !7481
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7482
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !7484
  %22 = load i64, i64* %bits13, align 8, !dbg !7484
  %tobool14 = icmp ne i64 %22, 0, !dbg !7482
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !7485

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !7486

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !7487
  %24 = load i32, i32* %23, align 4, !dbg !7488
  %add17 = add i32 %24, 64, !dbg !7488
  store i32 %add17, i32* %23, align 4, !dbg !7488
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7489
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !7490
  %26 = load i32, i32* %word_no18, align 8, !dbg !7491
  %inc19 = add i32 %26, 1, !dbg !7491
  store i32 %inc19, i32* %word_no18, align 8, !dbg !7491
  br label %while.cond7, !dbg !7468, !llvm.loop !7492

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7494
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !7495
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !7495
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !7496
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7496
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7497
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !7498
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !7499
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7500
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !7502
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !7502
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !7500
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !7503

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !7504
  br label %return, !dbg !7504

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7505
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !7506
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !7506
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !7507
  %35 = load i32, i32* %indx, align 8, !dbg !7507
  %mul28 = mul i32 %35, 128, !dbg !7508
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !7509
  store i32 %mul28, i32* %36, align 4, !dbg !7510
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7511
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !7512
  store i32 0, i32* %word_no29, align 8, !dbg !7513
  br label %while.body6, !dbg !7467, !llvm.loop !7514

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !7516
  ret i8 %38, !dbg !7516
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !7517 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7520, metadata !DIExpression()), !dbg !7521
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7522, metadata !DIExpression()), !dbg !7523
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7524
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !7525
  %1 = load i64, i64* %bits, align 8, !dbg !7526
  %shr = lshr i64 %1, 1, !dbg !7526
  store i64 %shr, i64* %bits, align 8, !dbg !7526
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !7527
  %3 = load i32, i32* %2, align 4, !dbg !7528
  %add = add i32 %3, 1, !dbg !7528
  store i32 %add, i32* %2, align 4, !dbg !7528
  ret void, !dbg !7529
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_all_loops_for_removal() #0 !dbg !7530 {
entry:
  %i = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7531, metadata !DIExpression()), !dbg !7532
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !7533, metadata !DIExpression()), !dbg !7534
  store i32 0, i32* %i, align 4, !dbg !7535
  br label %for.cond, !dbg !7537

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !7538
  %tobool = icmp ne %struct.VEC_loop_p_gc* %0, null, !dbg !7538
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7538

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !7538
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i32 0, i32 0, !dbg !7538
  br label %cond.end, !dbg !7538

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7538

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7538
  %2 = load i32, i32* %i, align 4, !dbg !7538
  %call = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond, i32 %2, %struct.loop** %loop), !dbg !7538
  %tobool1 = icmp ne i32 %call, 0, !dbg !7540
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7540

for.body:                                         ; preds = %cond.end
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7541
  %4 = load i32, i32* %i, align 4, !dbg !7543
  %idxprom = sext i32 %4 to i64, !dbg !7541
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %3, i64 %idxprom, !dbg !7541
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !7544
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !7544
  %cmp = icmp ne %struct.ira_allocno** %5, null, !dbg !7545
  br i1 %cmp, label %if.then, label %if.end30, !dbg !7546

if.then:                                          ; preds = %for.body
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7547
  %7 = load i32, i32* %i, align 4, !dbg !7550
  %idxprom2 = sext i32 %7 to i64, !dbg !7547
  %arrayidx3 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i64 %idxprom2, !dbg !7547
  %parent = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx3, i32 0, i32 6, !dbg !7551
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7551
  %cmp4 = icmp eq %struct.ira_loop_tree_node* %8, null, !dbg !7552
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !7553

if.then5:                                         ; preds = %if.then
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7554
  %10 = load i32, i32* %i, align 4, !dbg !7556
  %idxprom6 = sext i32 %10 to i64, !dbg !7554
  %arrayidx7 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %9, i64 %idxprom6, !dbg !7554
  %to_remove_p = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx7, i32 0, i32 8, !dbg !7557
  store i8 0, i8* %to_remove_p, align 4, !dbg !7558
  br label %for.inc, !dbg !7559

if.end:                                           ; preds = %if.then
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7560
  %12 = load i32, i32* %i, align 4, !dbg !7561
  %idxprom8 = sext i32 %12 to i64, !dbg !7560
  %arrayidx9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %11, i64 %idxprom8, !dbg !7560
  %to_remove_p10 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx9, i32 0, i32 8, !dbg !7562
  store i8 1, i8* %to_remove_p10, align 4, !dbg !7563
  %13 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7564
  %cmp11 = icmp sgt i32 %13, 1, !dbg !7566
  br i1 %cmp11, label %land.lhs.true, label %if.end29, !dbg !7567

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7568
  %cmp12 = icmp ne %struct._IO_FILE* %14, null, !dbg !7569
  br i1 %cmp12, label %if.then13, label %if.end29, !dbg !7570

if.then13:                                        ; preds = %land.lhs.true
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7571
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7572
  %17 = load i32, i32* %i, align 4, !dbg !7573
  %idxprom14 = sext i32 %17 to i64, !dbg !7572
  %arrayidx15 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %16, i64 %idxprom14, !dbg !7572
  %loop16 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx15, i32 0, i32 1, !dbg !7574
  %18 = load %struct.loop*, %struct.loop** %loop16, align 8, !dbg !7574
  %num = getelementptr inbounds %struct.loop, %struct.loop* %18, i32 0, i32 0, !dbg !7575
  %19 = load i32, i32* %num, align 8, !dbg !7575
  %20 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7576
  %21 = load i32, i32* %i, align 4, !dbg !7577
  %idxprom17 = sext i32 %21 to i64, !dbg !7576
  %arrayidx18 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %20, i64 %idxprom17, !dbg !7576
  %loop19 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx18, i32 0, i32 1, !dbg !7578
  %22 = load %struct.loop*, %struct.loop** %loop19, align 8, !dbg !7578
  %header = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 2, !dbg !7579
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !7579
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !7580
  %24 = load i32, i32* %index, align 8, !dbg !7580
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7581
  %26 = load i32, i32* %i, align 4, !dbg !7582
  %idxprom20 = sext i32 %26 to i64, !dbg !7581
  %arrayidx21 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i64 %idxprom20, !dbg !7581
  %loop22 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx21, i32 0, i32 1, !dbg !7583
  %27 = load %struct.loop*, %struct.loop** %loop22, align 8, !dbg !7583
  %header23 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 2, !dbg !7584
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %header23, align 8, !dbg !7584
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 11, !dbg !7585
  %29 = load i32, i32* %frequency, align 8, !dbg !7585
  %30 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7586
  %31 = load i32, i32* %i, align 4, !dbg !7587
  %idxprom24 = sext i32 %31 to i64, !dbg !7586
  %arrayidx25 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %30, i64 %idxprom24, !dbg !7586
  %loop26 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx25, i32 0, i32 1, !dbg !7588
  %32 = load %struct.loop*, %struct.loop** %loop26, align 8, !dbg !7588
  %call27 = call i32 @loop_depth(%struct.loop* %32), !dbg !7589
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.27, i64 0, i64 0), i32 %19, i32 %24, i32 %29, i32 %call27), !dbg !7590
  br label %if.end29, !dbg !7590

if.end29:                                         ; preds = %if.then13, %land.lhs.true, %if.end
  br label %if.end30, !dbg !7591

if.end30:                                         ; preds = %if.end29, %for.body
  br label %for.inc, !dbg !7592

for.inc:                                          ; preds = %if.end30, %if.then5
  %33 = load i32, i32* %i, align 4, !dbg !7593
  %inc = add nsw i32 %33, 1, !dbg !7593
  store i32 %inc, i32* %i, align 4, !dbg !7593
  br label %for.cond, !dbg !7594, !llvm.loop !7595

for.end:                                          ; preds = %cond.end
  ret void, !dbg !7597
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_loops_for_removal() #0 !dbg !7598 {
entry:
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %sorted_loops = alloca %struct.ira_loop_tree_node**, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7599, metadata !DIExpression()), !dbg !7600
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7601, metadata !DIExpression()), !dbg !7602
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node*** %sorted_loops, metadata !7603, metadata !DIExpression()), !dbg !7604
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !7605, metadata !DIExpression()), !dbg !7606
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !7607
  %tobool = icmp ne %struct.VEC_loop_p_gc* %0, null, !dbg !7607
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7607

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !7607
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i32 0, i32 0, !dbg !7607
  br label %cond.end, !dbg !7607

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7607

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7607
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !7607
  %conv = zext i32 %call to i64, !dbg !7607
  %mul = mul i64 8, %conv, !dbg !7608
  %call1 = call i8* @ira_allocate(i64 %mul), !dbg !7609
  %2 = bitcast i8* %call1 to %struct.ira_loop_tree_node**, !dbg !7610
  store %struct.ira_loop_tree_node** %2, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7611
  store i32 0, i32* %i, align 4, !dbg !7612
  store i32 0, i32* %n, align 4, !dbg !7614
  br label %for.cond, !dbg !7615

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !7616
  %tobool2 = icmp ne %struct.VEC_loop_p_gc* %3, null, !dbg !7616
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !7616

cond.true3:                                       ; preds = %for.cond
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** getelementptr inbounds (%struct.loops, %struct.loops* @ira_loops, i32 0, i32 1), align 8, !dbg !7616
  %base4 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %4, i32 0, i32 0, !dbg !7616
  br label %cond.end6, !dbg !7616

cond.false5:                                      ; preds = %for.cond
  br label %cond.end6, !dbg !7616

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_loop_p_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !7616
  %5 = load i32, i32* %i, align 4, !dbg !7616
  %call8 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond7, i32 %5, %struct.loop** %loop), !dbg !7616
  %tobool9 = icmp ne i32 %call8, 0, !dbg !7618
  br i1 %tobool9, label %for.body, label %for.end, !dbg !7618

for.body:                                         ; preds = %cond.end6
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7619
  %7 = load i32, i32* %i, align 4, !dbg !7621
  %idxprom = sext i32 %7 to i64, !dbg !7619
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i64 %idxprom, !dbg !7619
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 9, !dbg !7622
  %8 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !7622
  %cmp = icmp ne %struct.ira_allocno** %8, null, !dbg !7623
  br i1 %cmp, label %if.then, label %if.end37, !dbg !7624

if.then:                                          ; preds = %for.body
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7625
  %10 = load i32, i32* %i, align 4, !dbg !7628
  %idxprom11 = sext i32 %10 to i64, !dbg !7625
  %arrayidx12 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %9, i64 %idxprom11, !dbg !7625
  %parent = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx12, i32 0, i32 6, !dbg !7629
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7629
  %cmp13 = icmp eq %struct.ira_loop_tree_node* %11, null, !dbg !7630
  br i1 %cmp13, label %if.then15, label %if.end, !dbg !7631

if.then15:                                        ; preds = %if.then
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7632
  %13 = load i32, i32* %i, align 4, !dbg !7634
  %idxprom16 = sext i32 %13 to i64, !dbg !7632
  %arrayidx17 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %12, i64 %idxprom16, !dbg !7632
  %to_remove_p = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx17, i32 0, i32 8, !dbg !7635
  store i8 0, i8* %to_remove_p, align 4, !dbg !7636
  br label %for.inc, !dbg !7637

if.end:                                           ; preds = %if.then
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7638
  %15 = load i32, i32* %i, align 4, !dbg !7639
  %idxprom18 = sext i32 %15 to i64, !dbg !7638
  %arrayidx19 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i64 %idxprom18, !dbg !7638
  %16 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7640
  %17 = load i32, i32* %n, align 4, !dbg !7641
  %inc = add nsw i32 %17, 1, !dbg !7641
  store i32 %inc, i32* %n, align 4, !dbg !7641
  %idxprom20 = sext i32 %17 to i64, !dbg !7640
  %arrayidx21 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %16, i64 %idxprom20, !dbg !7640
  store %struct.ira_loop_tree_node* %arrayidx19, %struct.ira_loop_tree_node** %arrayidx21, align 8, !dbg !7642
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7643
  %19 = load i32, i32* %i, align 4, !dbg !7644
  %idxprom22 = sext i32 %19 to i64, !dbg !7643
  %arrayidx23 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i64 %idxprom22, !dbg !7643
  %parent24 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx23, i32 0, i32 6, !dbg !7645
  %20 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent24, align 8, !dbg !7645
  %call25 = call zeroext i8 @low_pressure_loop_node_p(%struct.ira_loop_tree_node* %20), !dbg !7646
  %conv26 = zext i8 %call25 to i32, !dbg !7646
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !7646
  br i1 %tobool27, label %land.rhs, label %land.end, !dbg !7647

land.rhs:                                         ; preds = %if.end
  %21 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7648
  %22 = load i32, i32* %i, align 4, !dbg !7649
  %idxprom28 = sext i32 %22 to i64, !dbg !7648
  %arrayidx29 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %21, i64 %idxprom28, !dbg !7648
  %call30 = call zeroext i8 @low_pressure_loop_node_p(%struct.ira_loop_tree_node* %arrayidx29), !dbg !7650
  %conv31 = zext i8 %call30 to i32, !dbg !7650
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !7647
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %23 = phi i1 [ false, %if.end ], [ %tobool32, %land.rhs ], !dbg !7651
  %land.ext = zext i1 %23 to i32, !dbg !7647
  %conv33 = trunc i32 %land.ext to i8, !dbg !7652
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_nodes, align 8, !dbg !7653
  %25 = load i32, i32* %i, align 4, !dbg !7654
  %idxprom34 = sext i32 %25 to i64, !dbg !7653
  %arrayidx35 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %24, i64 %idxprom34, !dbg !7653
  %to_remove_p36 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx35, i32 0, i32 8, !dbg !7655
  store i8 %conv33, i8* %to_remove_p36, align 4, !dbg !7656
  br label %if.end37, !dbg !7657

if.end37:                                         ; preds = %land.end, %for.body
  br label %for.inc, !dbg !7658

for.inc:                                          ; preds = %if.end37, %if.then15
  %26 = load i32, i32* %i, align 4, !dbg !7659
  %inc38 = add nsw i32 %26, 1, !dbg !7659
  store i32 %inc38, i32* %i, align 4, !dbg !7659
  br label %for.cond, !dbg !7660, !llvm.loop !7661

for.end:                                          ; preds = %cond.end6
  %27 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7663
  %28 = bitcast %struct.ira_loop_tree_node** %27 to i8*, !dbg !7663
  %29 = load i32, i32* %n, align 4, !dbg !7664
  %conv39 = sext i32 %29 to i64, !dbg !7664
  call void @spec_qsort(i8* %28, i64 %conv39, i64 8, i32 (i8*, i8*)* @loop_compare_func), !dbg !7665
  store i32 0, i32* %i, align 4, !dbg !7666
  br label %for.cond40, !dbg !7668

for.cond40:                                       ; preds = %for.inc84, %for.end
  %30 = load i32, i32* %n, align 4, !dbg !7669
  %31 = load i32, i32* %i, align 4, !dbg !7671
  %sub = sub nsw i32 %30, %31, !dbg !7672
  %add = add nsw i32 %sub, 1, !dbg !7673
  %32 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7674
  %arrayidx41 = getelementptr inbounds %struct.param_info, %struct.param_info* %32, i64 105, !dbg !7674
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx41, i32 0, i32 1, !dbg !7674
  %33 = load i32, i32* %value, align 8, !dbg !7674
  %cmp42 = icmp sgt i32 %add, %33, !dbg !7675
  br i1 %cmp42, label %for.body44, label %for.end86, !dbg !7676

for.body44:                                       ; preds = %for.cond40
  %34 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7677
  %35 = load i32, i32* %i, align 4, !dbg !7679
  %idxprom45 = sext i32 %35 to i64, !dbg !7677
  %arrayidx46 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %34, i64 %idxprom45, !dbg !7677
  %36 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx46, align 8, !dbg !7677
  %to_remove_p47 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %36, i32 0, i32 8, !dbg !7680
  store i8 1, i8* %to_remove_p47, align 4, !dbg !7681
  %37 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7682
  %cmp48 = icmp sgt i32 %37, 1, !dbg !7684
  br i1 %cmp48, label %land.lhs.true, label %if.end83, !dbg !7685

land.lhs.true:                                    ; preds = %for.body44
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7686
  %cmp50 = icmp ne %struct._IO_FILE* %38, null, !dbg !7687
  br i1 %cmp50, label %if.then52, label %if.end83, !dbg !7688

if.then52:                                        ; preds = %land.lhs.true
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7689
  %40 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7690
  %41 = load i32, i32* %i, align 4, !dbg !7691
  %idxprom53 = sext i32 %41 to i64, !dbg !7690
  %arrayidx54 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %40, i64 %idxprom53, !dbg !7690
  %42 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx54, align 8, !dbg !7690
  %loop55 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %42, i32 0, i32 1, !dbg !7692
  %43 = load %struct.loop*, %struct.loop** %loop55, align 8, !dbg !7692
  %num = getelementptr inbounds %struct.loop, %struct.loop* %43, i32 0, i32 0, !dbg !7693
  %44 = load i32, i32* %num, align 8, !dbg !7693
  %45 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7694
  %46 = load i32, i32* %i, align 4, !dbg !7695
  %idxprom56 = sext i32 %46 to i64, !dbg !7694
  %arrayidx57 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %45, i64 %idxprom56, !dbg !7694
  %47 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx57, align 8, !dbg !7694
  %loop58 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %47, i32 0, i32 1, !dbg !7696
  %48 = load %struct.loop*, %struct.loop** %loop58, align 8, !dbg !7696
  %header = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 2, !dbg !7697
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !7697
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 9, !dbg !7698
  %50 = load i32, i32* %index, align 8, !dbg !7698
  %51 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7699
  %52 = load i32, i32* %i, align 4, !dbg !7700
  %idxprom59 = sext i32 %52 to i64, !dbg !7699
  %arrayidx60 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %51, i64 %idxprom59, !dbg !7699
  %53 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx60, align 8, !dbg !7699
  %loop61 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %53, i32 0, i32 1, !dbg !7701
  %54 = load %struct.loop*, %struct.loop** %loop61, align 8, !dbg !7701
  %header62 = getelementptr inbounds %struct.loop, %struct.loop* %54, i32 0, i32 2, !dbg !7702
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %header62, align 8, !dbg !7702
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 11, !dbg !7703
  %56 = load i32, i32* %frequency, align 8, !dbg !7703
  %57 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7704
  %58 = load i32, i32* %i, align 4, !dbg !7705
  %idxprom63 = sext i32 %58 to i64, !dbg !7704
  %arrayidx64 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %57, i64 %idxprom63, !dbg !7704
  %59 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx64, align 8, !dbg !7704
  %loop65 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %59, i32 0, i32 1, !dbg !7706
  %60 = load %struct.loop*, %struct.loop** %loop65, align 8, !dbg !7706
  %call66 = call i32 @loop_depth(%struct.loop* %60), !dbg !7707
  %61 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7708
  %62 = load i32, i32* %i, align 4, !dbg !7709
  %idxprom67 = sext i32 %62 to i64, !dbg !7708
  %arrayidx68 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %61, i64 %idxprom67, !dbg !7708
  %63 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx68, align 8, !dbg !7708
  %parent69 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %63, i32 0, i32 6, !dbg !7710
  %64 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent69, align 8, !dbg !7710
  %call70 = call zeroext i8 @low_pressure_loop_node_p(%struct.ira_loop_tree_node* %64), !dbg !7711
  %conv71 = zext i8 %call70 to i32, !dbg !7711
  %tobool72 = icmp ne i32 %conv71, 0, !dbg !7711
  br i1 %tobool72, label %land.rhs73, label %land.end79, !dbg !7712

land.rhs73:                                       ; preds = %if.then52
  %65 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7713
  %66 = load i32, i32* %i, align 4, !dbg !7714
  %idxprom74 = sext i32 %66 to i64, !dbg !7713
  %arrayidx75 = getelementptr inbounds %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %65, i64 %idxprom74, !dbg !7713
  %67 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx75, align 8, !dbg !7713
  %call76 = call zeroext i8 @low_pressure_loop_node_p(%struct.ira_loop_tree_node* %67), !dbg !7715
  %conv77 = zext i8 %call76 to i32, !dbg !7715
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !7712
  br label %land.end79

land.end79:                                       ; preds = %land.rhs73, %if.then52
  %68 = phi i1 [ false, %if.then52 ], [ %tobool78, %land.rhs73 ], !dbg !7716
  %69 = zext i1 %68 to i64, !dbg !7711
  %cond81 = select i1 %68, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0), !dbg !7711
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.28, i64 0, i64 0), i32 %44, i32 %50, i32 %56, i32 %call66, i8* %cond81), !dbg !7717
  br label %if.end83, !dbg !7717

if.end83:                                         ; preds = %land.end79, %land.lhs.true, %for.body44
  br label %for.inc84, !dbg !7718

for.inc84:                                        ; preds = %if.end83
  %70 = load i32, i32* %i, align 4, !dbg !7719
  %inc85 = add nsw i32 %70, 1, !dbg !7719
  store i32 %inc85, i32* %i, align 4, !dbg !7719
  br label %for.cond40, !dbg !7720, !llvm.loop !7721

for.end86:                                        ; preds = %for.cond40
  %71 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %sorted_loops, align 8, !dbg !7723
  %72 = bitcast %struct.ira_loop_tree_node** %71 to i8*, !dbg !7723
  call void @ira_free(i8* %72), !dbg !7724
  ret void, !dbg !7725
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ira_loop_tree_node_t_heap* @VEC_ira_loop_tree_node_t_heap_alloc(i32 %alloc_) #0 !dbg !7726 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7729, metadata !DIExpression()), !dbg !7730
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7730
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7730
  %1 = bitcast i8* %call to %struct.VEC_ira_loop_tree_node_t_heap*, !dbg !7730
  ret %struct.VEC_ira_loop_tree_node_t_heap* %1, !dbg !7730
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_uneccesary_loop_nodes_from_loop_tree(%struct.ira_loop_tree_node* %node) #0 !dbg !7731 {
entry:
  %node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %start = alloca i32, align 4
  %remove_p = alloca i8, align 1
  %subnode = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_loop_tree_node* %node, %struct.ira_loop_tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %node.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  call void @llvm.dbg.declare(metadata i32* %start, metadata !7734, metadata !DIExpression()), !dbg !7735
  call void @llvm.dbg.declare(metadata i8* %remove_p, metadata !7736, metadata !DIExpression()), !dbg !7737
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %subnode, metadata !7738, metadata !DIExpression()), !dbg !7739
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7740
  %to_remove_p = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %0, i32 0, i32 8, !dbg !7741
  %1 = load i8, i8* %to_remove_p, align 4, !dbg !7741
  store i8 %1, i8* %remove_p, align 1, !dbg !7742
  %2 = load i8, i8* %remove_p, align 1, !dbg !7743
  %tobool = icmp ne i8 %2, 0, !dbg !7743
  br i1 %tobool, label %if.end, label %if.then, !dbg !7745

if.then:                                          ; preds = %entry
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7746
  %call = call %struct.ira_loop_tree_node** @VEC_ira_loop_tree_node_t_heap_safe_push(%struct.VEC_ira_loop_tree_node_t_heap** @children_vec, %struct.ira_loop_tree_node* %3), !dbg !7746
  br label %if.end, !dbg !7746

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !7747
  %tobool1 = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %4, null, !dbg !7747
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7747

cond.true:                                        ; preds = %if.end
  %5 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !7747
  %base = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %5, i32 0, i32 0, !dbg !7747
  br label %cond.end, !dbg !7747

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7747

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7747
  %call2 = call i32 @VEC_ira_loop_tree_node_t_base_length(%struct.VEC_ira_loop_tree_node_t_base* %cond), !dbg !7747
  store i32 %call2, i32* %start, align 4, !dbg !7748
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7749
  %children = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i32 0, i32 5, !dbg !7751
  %7 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children, align 8, !dbg !7751
  store %struct.ira_loop_tree_node* %7, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7752
  br label %for.cond, !dbg !7753

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7754
  %cmp = icmp ne %struct.ira_loop_tree_node* %8, null, !dbg !7756
  br i1 %cmp, label %for.body, label %for.end, !dbg !7757

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7758
  %bb = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %9, i32 0, i32 0, !dbg !7760
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7760
  %cmp3 = icmp eq %struct.basic_block_def* %10, null, !dbg !7761
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !7762

if.then4:                                         ; preds = %for.body
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7763
  call void @remove_uneccesary_loop_nodes_from_loop_tree(%struct.ira_loop_tree_node* %11), !dbg !7764
  br label %if.end6, !dbg !7764

if.else:                                          ; preds = %for.body
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7765
  %call5 = call %struct.ira_loop_tree_node** @VEC_ira_loop_tree_node_t_heap_safe_push(%struct.VEC_ira_loop_tree_node_t_heap** @children_vec, %struct.ira_loop_tree_node* %12), !dbg !7765
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  br label %for.inc, !dbg !7766

for.inc:                                          ; preds = %if.end6
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7767
  %next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i32 0, i32 3, !dbg !7768
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %next, align 8, !dbg !7768
  store %struct.ira_loop_tree_node* %14, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7769
  br label %for.cond, !dbg !7770, !llvm.loop !7771

for.end:                                          ; preds = %for.cond
  %15 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7773
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %15, i32 0, i32 4, !dbg !7774
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !7775
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7776
  %children7 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %16, i32 0, i32 5, !dbg !7777
  store %struct.ira_loop_tree_node* null, %struct.ira_loop_tree_node** %children7, align 8, !dbg !7778
  %17 = load i8, i8* %remove_p, align 1, !dbg !7779
  %tobool8 = icmp ne i8 %17, 0, !dbg !7779
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !7781

if.then9:                                         ; preds = %for.end
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7782
  %call10 = call %struct.ira_loop_tree_node** @VEC_ira_loop_tree_node_t_heap_safe_push(%struct.VEC_ira_loop_tree_node_t_heap** @removed_loop_vec, %struct.ira_loop_tree_node* %18), !dbg !7782
  br label %while.end, !dbg !7784

if.end11:                                         ; preds = %for.end
  br label %while.cond, !dbg !7785

while.cond:                                       ; preds = %if.end35, %if.end11
  %19 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !7786
  %tobool12 = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %19, null, !dbg !7786
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !7786

cond.true13:                                      ; preds = %while.cond
  %20 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !7786
  %base14 = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %20, i32 0, i32 0, !dbg !7786
  br label %cond.end16, !dbg !7786

cond.false15:                                     ; preds = %while.cond
  br label %cond.end16, !dbg !7786

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !7786
  %call18 = call i32 @VEC_ira_loop_tree_node_t_base_length(%struct.VEC_ira_loop_tree_node_t_base* %cond17), !dbg !7786
  %21 = load i32, i32* %start, align 4, !dbg !7787
  %cmp19 = icmp ugt i32 %call18, %21, !dbg !7788
  br i1 %cmp19, label %while.body, label %while.end, !dbg !7785

while.body:                                       ; preds = %cond.end16
  %22 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !7789
  %tobool20 = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %22, null, !dbg !7789
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !7789

cond.true21:                                      ; preds = %while.body
  %23 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** @children_vec, align 8, !dbg !7789
  %base22 = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %23, i32 0, i32 0, !dbg !7789
  br label %cond.end24, !dbg !7789

cond.false23:                                     ; preds = %while.body
  br label %cond.end24, !dbg !7789

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !7789
  %call26 = call %struct.ira_loop_tree_node* @VEC_ira_loop_tree_node_t_base_pop(%struct.VEC_ira_loop_tree_node_t_base* %cond25), !dbg !7789
  store %struct.ira_loop_tree_node* %call26, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7791
  %24 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7792
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7793
  %parent = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i32 0, i32 6, !dbg !7794
  store %struct.ira_loop_tree_node* %24, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7795
  %26 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7796
  %children27 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %26, i32 0, i32 5, !dbg !7797
  %27 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children27, align 8, !dbg !7797
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7798
  %next28 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %28, i32 0, i32 3, !dbg !7799
  store %struct.ira_loop_tree_node* %27, %struct.ira_loop_tree_node** %next28, align 8, !dbg !7800
  %29 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7801
  %30 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7802
  %children29 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %30, i32 0, i32 5, !dbg !7803
  store %struct.ira_loop_tree_node* %29, %struct.ira_loop_tree_node** %children29, align 8, !dbg !7804
  %31 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7805
  %bb30 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %31, i32 0, i32 0, !dbg !7807
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb30, align 8, !dbg !7807
  %cmp31 = icmp eq %struct.basic_block_def* %32, null, !dbg !7808
  br i1 %cmp31, label %if.then32, label %if.end35, !dbg !7809

if.then32:                                        ; preds = %cond.end24
  %33 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7810
  %subloops33 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %33, i32 0, i32 4, !dbg !7812
  %34 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloops33, align 8, !dbg !7812
  %35 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7813
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %35, i32 0, i32 2, !dbg !7814
  store %struct.ira_loop_tree_node* %34, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !7815
  %36 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subnode, align 8, !dbg !7816
  %37 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !7817
  %subloops34 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %37, i32 0, i32 4, !dbg !7818
  store %struct.ira_loop_tree_node* %36, %struct.ira_loop_tree_node** %subloops34, align 8, !dbg !7819
  br label %if.end35, !dbg !7820

if.end35:                                         ; preds = %if.then32, %cond.end24
  br label %while.cond, !dbg !7785, !llvm.loop !7821

while.end:                                        ; preds = %if.then9, %cond.end16
  ret void, !dbg !7823
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ira_loop_tree_node_t_heap_free(%struct.VEC_ira_loop_tree_node_t_heap** %vec_) #0 !dbg !7824 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_heap**, align 8
  store %struct.VEC_ira_loop_tree_node_t_heap** %vec_, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, metadata !7828, metadata !DIExpression()), !dbg !7829
  %0 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !7830
  %1 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %0, align 8, !dbg !7830
  %tobool = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %1, null, !dbg !7830
  br i1 %tobool, label %if.then, label %if.end, !dbg !7829

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !7830
  %3 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %2, align 8, !dbg !7830
  %4 = bitcast %struct.VEC_ira_loop_tree_node_t_heap* %3 to i8*, !dbg !7830
  call void @free(i8* %4), !dbg !7830
  br label %if.end, !dbg !7830

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !7829
  store %struct.VEC_ira_loop_tree_node_t_heap* null, %struct.VEC_ira_loop_tree_node_t_heap** %5, align 8, !dbg !7829
  ret void, !dbg !7829
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_low_level_allocnos() #0 !dbg !7832 {
entry:
  %regno = alloca i32, align 4
  %merged_p = alloca i8, align 1
  %propagate_p = alloca i8, align 1
  %a = alloca %struct.ira_allocno*, align 8
  %top_a = alloca %struct.ira_allocno*, align 8
  %a_node = alloca %struct.ira_loop_tree_node*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7833, metadata !DIExpression()), !dbg !7834
  call void @llvm.dbg.declare(metadata i8* %merged_p, metadata !7835, metadata !DIExpression()), !dbg !7836
  call void @llvm.dbg.declare(metadata i8* %propagate_p, metadata !7837, metadata !DIExpression()), !dbg !7838
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !7839, metadata !DIExpression()), !dbg !7840
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %top_a, metadata !7841, metadata !DIExpression()), !dbg !7842
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %a_node, metadata !7843, metadata !DIExpression()), !dbg !7844
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !7845, metadata !DIExpression()), !dbg !7846
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !7847, metadata !DIExpression()), !dbg !7848
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !7849, metadata !DIExpression()), !dbg !7850
  store i8 0, i8* %merged_p, align 1, !dbg !7851
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !7852
  br label %for.cond, !dbg !7852

for.cond:                                         ; preds = %if.end22, %if.then4, %if.then, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !7854
  %tobool = icmp ne i8 %call, 0, !dbg !7852
  br i1 %tobool, label %for.body, label %for.end, !dbg !7852

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7856
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 6, !dbg !7856
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !7856
  store %struct.ira_loop_tree_node* %1, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !7858
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !7859
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7861
  %cmp = icmp eq %struct.ira_loop_tree_node* %2, %3, !dbg !7862
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7863

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7864
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 17, !dbg !7864
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !7864
  %cmp1 = icmp ne %struct.ira_allocno* %5, null, !dbg !7865
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7866

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.cond, !dbg !7867, !llvm.loop !7868

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7870
  %regno2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 1, !dbg !7870
  %7 = load i32, i32* %regno2, align 4, !dbg !7870
  store i32 %7, i32* %regno, align 4, !dbg !7871
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7872
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %8, i32 0, i32 9, !dbg !7874
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !7874
  %10 = load i32, i32* %regno, align 4, !dbg !7875
  %idxprom = sext i32 %10 to i64, !dbg !7872
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %9, i64 %idxprom, !dbg !7872
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !7872
  store %struct.ira_allocno* %11, %struct.ira_allocno** %top_a, align 8, !dbg !7876
  %cmp3 = icmp eq %struct.ira_allocno* %11, null, !dbg !7877
  br i1 %cmp3, label %if.then4, label %if.end9, !dbg !7878

if.then4:                                         ; preds = %if.end
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7879
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7881
  %loop_tree_node5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 6, !dbg !7881
  store %struct.ira_loop_tree_node* %12, %struct.ira_loop_tree_node** %loop_tree_node5, align 8, !dbg !7882
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7883
  %15 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7884
  %regno_allocno_map6 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %15, i32 0, i32 9, !dbg !7885
  %16 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map6, align 8, !dbg !7885
  %17 = load i32, i32* %regno, align 4, !dbg !7886
  %idxprom7 = sext i32 %17 to i64, !dbg !7884
  %arrayidx8 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %16, i64 %idxprom7, !dbg !7884
  store %struct.ira_allocno* %14, %struct.ira_allocno** %arrayidx8, align 8, !dbg !7887
  br label %for.cond, !dbg !7888, !llvm.loop !7868

if.end9:                                          ; preds = %if.end
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !7889
  %parent10 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i32 0, i32 6, !dbg !7890
  %19 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent10, align 8, !dbg !7890
  %regno_allocno_map11 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %19, i32 0, i32 9, !dbg !7891
  %20 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map11, align 8, !dbg !7891
  %21 = load i32, i32* %regno, align 4, !dbg !7892
  %idxprom12 = sext i32 %21 to i64, !dbg !7889
  %arrayidx13 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %20, i64 %idxprom12, !dbg !7889
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx13, align 8, !dbg !7889
  %cmp14 = icmp eq %struct.ira_allocno* %22, null, !dbg !7893
  %conv = zext i1 %cmp14 to i32, !dbg !7893
  %conv15 = trunc i32 %conv to i8, !dbg !7889
  store i8 %conv15, i8* %propagate_p, align 1, !dbg !7894
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7895
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 20, !dbg !7895
  %24 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !7895
  store %struct.ira_allocno_live_range* %24, %struct.ira_allocno_live_range** %r, align 8, !dbg !7896
  %25 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !7897
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %top_a, align 8, !dbg !7898
  call void @change_allocno_in_range_list(%struct.ira_allocno_live_range* %25, %struct.ira_allocno* %26), !dbg !7899
  %27 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !7900
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %top_a, align 8, !dbg !7901
  %live_ranges16 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 20, !dbg !7901
  %29 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges16, align 8, !dbg !7901
  %call17 = call %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range* %27, %struct.ira_allocno_live_range* %29), !dbg !7902
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %top_a, align 8, !dbg !7903
  %live_ranges18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 20, !dbg !7903
  store %struct.ira_allocno_live_range* %call17, %struct.ira_allocno_live_range** %live_ranges18, align 8, !dbg !7904
  store i8 1, i8* %merged_p, align 1, !dbg !7905
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7906
  %live_ranges19 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 20, !dbg !7906
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %live_ranges19, align 8, !dbg !7907
  %32 = load i8, i8* %propagate_p, align 1, !dbg !7908
  %tobool20 = icmp ne i8 %32, 0, !dbg !7908
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !7910

if.then21:                                        ; preds = %if.end9
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %top_a, align 8, !dbg !7911
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7912
  call void @propagate_some_info_from_allocno(%struct.ira_allocno* %33, %struct.ira_allocno* %34), !dbg !7913
  br label %if.end22, !dbg !7913

if.end22:                                         ; preds = %if.then21, %if.end9
  br label %for.cond, !dbg !7854, !llvm.loop !7868

for.end:                                          ; preds = %for.cond
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !7914
  br label %for.cond23, !dbg !7914

for.cond23:                                       ; preds = %if.end42, %if.then30, %for.end
  %call24 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !7916
  %tobool25 = icmp ne i8 %call24, 0, !dbg !7914
  br i1 %tobool25, label %for.body26, label %for.end43, !dbg !7914

for.body26:                                       ; preds = %for.cond23
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7918
  %loop_tree_node27 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 6, !dbg !7918
  %36 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node27, align 8, !dbg !7918
  store %struct.ira_loop_tree_node* %36, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !7920
  %37 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !7921
  %38 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7923
  %cmp28 = icmp eq %struct.ira_loop_tree_node* %37, %38, !dbg !7924
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !7925

if.then30:                                        ; preds = %for.body26
  br label %for.cond23, !dbg !7926, !llvm.loop !7927

if.end31:                                         ; preds = %for.body26
  %39 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !7929
  %parent32 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %39, i32 0, i32 6, !dbg !7930
  %40 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent32, align 8, !dbg !7930
  store %struct.ira_loop_tree_node* %40, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7931
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7932
  %regno33 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 1, !dbg !7932
  %42 = load i32, i32* %regno33, align 4, !dbg !7932
  store i32 %42, i32* %regno, align 4, !dbg !7933
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7934
  %cap_member34 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 17, !dbg !7934
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member34, align 8, !dbg !7934
  %cmp35 = icmp ne %struct.ira_allocno* %44, null, !dbg !7936
  br i1 %cmp35, label %if.then37, label %if.else, !dbg !7937

if.then37:                                        ; preds = %if.end31
  br label %if.end42, !dbg !7938

if.else:                                          ; preds = %if.end31
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7939
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 16, !dbg !7939
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !7939
  %cmp38 = icmp eq %struct.ira_allocno* %46, null, !dbg !7941
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !7942

if.then40:                                        ; preds = %if.else
  br label %if.end41, !dbg !7943

if.end41:                                         ; preds = %if.then40, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then37
  br label %for.cond23, !dbg !7916, !llvm.loop !7927

for.end43:                                        ; preds = %for.cond23
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !7944
  br label %for.cond44, !dbg !7944

for.cond44:                                       ; preds = %if.end64, %for.end43
  %call45 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !7946
  %tobool46 = icmp ne i8 %call45, 0, !dbg !7944
  br i1 %tobool46, label %for.body47, label %for.end65, !dbg !7944

for.body47:                                       ; preds = %for.cond44
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7948
  %regno48 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %47, i32 0, i32 1, !dbg !7948
  %48 = load i32, i32* %regno48, align 4, !dbg !7948
  store i32 %48, i32* %regno, align 4, !dbg !7950
  %49 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7951
  %regno_allocno_map49 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %49, i32 0, i32 9, !dbg !7953
  %50 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map49, align 8, !dbg !7953
  %51 = load i32, i32* %regno, align 4, !dbg !7954
  %idxprom50 = sext i32 %51 to i64, !dbg !7951
  %arrayidx51 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %50, i64 %idxprom50, !dbg !7951
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx51, align 8, !dbg !7951
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7955
  %cmp52 = icmp eq %struct.ira_allocno* %52, %53, !dbg !7956
  br i1 %cmp52, label %if.then54, label %if.else63, !dbg !7957

if.then54:                                        ; preds = %for.body47
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7958
  %55 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !7960
  %56 = load i32, i32* %regno, align 4, !dbg !7961
  %idxprom55 = sext i32 %56 to i64, !dbg !7960
  %arrayidx56 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %55, i64 %idxprom55, !dbg !7960
  store %struct.ira_allocno* %54, %struct.ira_allocno** %arrayidx56, align 8, !dbg !7962
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7963
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 5, !dbg !7963
  store %struct.ira_allocno* null, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !7964
  %58 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7965
  %cap_member57 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %58, i32 0, i32 17, !dbg !7965
  store %struct.ira_allocno* null, %struct.ira_allocno** %cap_member57, align 8, !dbg !7966
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7967
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 27, !dbg !7967
  %60 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !7967
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7967
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 26, !dbg !7967
  store i64 %60, i64* %conflict_hard_regs, align 8, !dbg !7967
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7968
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 31, !dbg !7968
  %bf.load = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !7968
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !7968
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7968
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7968
  %tobool58 = icmp ne i32 %bf.cast, 0, !dbg !7968
  br i1 %tobool58, label %if.then59, label %if.end62, !dbg !7970

if.then59:                                        ; preds = %if.then54
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7971
  %no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %63, i32 0, i32 31, !dbg !7971
  %bf.load60 = load i16, i16* %no_stack_reg_p, align 4, !dbg !7972
  %bf.clear61 = and i16 %bf.load60, -17, !dbg !7972
  %bf.set = or i16 %bf.clear61, 16, !dbg !7972
  store i16 %bf.set, i16* %no_stack_reg_p, align 4, !dbg !7972
  br label %if.end62, !dbg !7971

if.end62:                                         ; preds = %if.then59, %if.then54
  br label %if.end64, !dbg !7973

if.else63:                                        ; preds = %for.body47
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7974
  call void @finish_allocno(%struct.ira_allocno* %64), !dbg !7975
  br label %if.end64

if.end64:                                         ; preds = %if.else63, %if.end62
  br label %for.cond44, !dbg !7946, !llvm.loop !7976

for.end65:                                        ; preds = %for.cond44
  %65 = load i8, i8* %merged_p, align 1, !dbg !7978
  %tobool66 = icmp ne i8 %65, 0, !dbg !7978
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !7980

if.then67:                                        ; preds = %for.end65
  call void @ira_rebuild_start_finish_chains(), !dbg !7981
  br label %if.end68, !dbg !7981

if.end68:                                         ; preds = %if.then67, %for.end65
  ret void, !dbg !7982
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unnecessary_allocnos() #0 !dbg !7983 {
entry:
  %regno = alloca i32, align 4
  %merged_p = alloca i8, align 1
  %rebuild_p = alloca i8, align 1
  %a = alloca %struct.ira_allocno*, align 8
  %prev_a = alloca %struct.ira_allocno*, align 8
  %next_a = alloca %struct.ira_allocno*, align 8
  %parent_a = alloca %struct.ira_allocno*, align 8
  %a_node = alloca %struct.ira_loop_tree_node*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %r = alloca %struct.ira_allocno_live_range*, align 8
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7984, metadata !DIExpression()), !dbg !7985
  call void @llvm.dbg.declare(metadata i8* %merged_p, metadata !7986, metadata !DIExpression()), !dbg !7987
  call void @llvm.dbg.declare(metadata i8* %rebuild_p, metadata !7988, metadata !DIExpression()), !dbg !7989
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !7990, metadata !DIExpression()), !dbg !7991
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %prev_a, metadata !7992, metadata !DIExpression()), !dbg !7993
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %next_a, metadata !7994, metadata !DIExpression()), !dbg !7995
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_a, metadata !7996, metadata !DIExpression()), !dbg !7997
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %a_node, metadata !7998, metadata !DIExpression()), !dbg !7999
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !8000, metadata !DIExpression()), !dbg !8001
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !8002, metadata !DIExpression()), !dbg !8003
  store i8 0, i8* %merged_p, align 1, !dbg !8004
  store %struct.ira_allocno** null, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8005
  %call = call i32 @max_reg_num(), !dbg !8006
  %sub = sub nsw i32 %call, 1, !dbg !8008
  store i32 %sub, i32* %regno, align 4, !dbg !8009
  br label %for.cond, !dbg !8010

for.cond:                                         ; preds = %for.inc46, %entry
  %0 = load i32, i32* %regno, align 4, !dbg !8011
  %cmp = icmp sge i32 %0, 53, !dbg !8013
  br i1 %cmp, label %for.body, label %for.end47, !dbg !8014

for.body:                                         ; preds = %for.cond
  store i8 0, i8* %rebuild_p, align 1, !dbg !8015
  store %struct.ira_allocno* null, %struct.ira_allocno** %prev_a, align 8, !dbg !8017
  %1 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !8019
  %2 = load i32, i32* %regno, align 4, !dbg !8020
  %idxprom = sext i32 %2 to i64, !dbg !8019
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %1, i64 %idxprom, !dbg !8019
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !8019
  store %struct.ira_allocno* %3, %struct.ira_allocno** %a, align 8, !dbg !8021
  br label %for.cond1, !dbg !8022

for.cond1:                                        ; preds = %for.inc35, %for.body
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8023
  %cmp2 = icmp ne %struct.ira_allocno* %4, null, !dbg !8025
  br i1 %cmp2, label %for.body3, label %for.end36, !dbg !8026

for.body3:                                        ; preds = %for.cond1
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8027
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 5, !dbg !8027
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !8027
  store %struct.ira_allocno* %6, %struct.ira_allocno** %next_a, align 8, !dbg !8029
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8030
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 6, !dbg !8030
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !8030
  store %struct.ira_loop_tree_node* %8, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !8031
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !8032
  %to_remove_p = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %9, i32 0, i32 8, !dbg !8034
  %10 = load i8, i8* %to_remove_p, align 4, !dbg !8034
  %tobool = icmp ne i8 %10, 0, !dbg !8032
  br i1 %tobool, label %if.else, label %if.then, !dbg !8035

if.then:                                          ; preds = %for.body3
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8036
  store %struct.ira_allocno* %11, %struct.ira_allocno** %prev_a, align 8, !dbg !8037
  br label %if.end34, !dbg !8038

if.else:                                          ; preds = %for.body3
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %a_node, align 8, !dbg !8039
  %parent4 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %12, i32 0, i32 6, !dbg !8042
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent4, align 8, !dbg !8042
  store %struct.ira_loop_tree_node* %13, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8043
  br label %for.cond5, !dbg !8044

for.cond5:                                        ; preds = %for.inc, %if.else
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8045
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i32 0, i32 9, !dbg !8047
  %15 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !8047
  %16 = load i32, i32* %regno, align 4, !dbg !8048
  %idxprom6 = sext i32 %16 to i64, !dbg !8045
  %arrayidx7 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %15, i64 %idxprom6, !dbg !8045
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx7, align 8, !dbg !8045
  store %struct.ira_allocno* %17, %struct.ira_allocno** %parent_a, align 8, !dbg !8049
  %cmp8 = icmp eq %struct.ira_allocno* %17, null, !dbg !8050
  br i1 %cmp8, label %land.rhs, label %land.end, !dbg !8051

land.rhs:                                         ; preds = %for.cond5
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8052
  %to_remove_p9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i32 0, i32 8, !dbg !8053
  %19 = load i8, i8* %to_remove_p9, align 4, !dbg !8053
  %conv = zext i8 %19 to i32, !dbg !8052
  %tobool10 = icmp ne i32 %conv, 0, !dbg !8051
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %20 = phi i1 [ false, %for.cond5 ], [ %tobool10, %land.rhs ], !dbg !8054
  br i1 %20, label %for.body11, label %for.end, !dbg !8055

for.body11:                                       ; preds = %land.end
  br label %for.inc, !dbg !8055

for.inc:                                          ; preds = %for.body11
  %21 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8056
  %parent12 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %21, i32 0, i32 6, !dbg !8057
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent12, align 8, !dbg !8057
  store %struct.ira_loop_tree_node* %22, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8058
  br label %for.cond5, !dbg !8059, !llvm.loop !8060

for.end:                                          ; preds = %land.end
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !8062
  %cmp13 = icmp eq %struct.ira_allocno* %23, null, !dbg !8064
  br i1 %cmp13, label %if.then15, label %if.else21, !dbg !8065

if.then15:                                        ; preds = %for.end
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8066
  store %struct.ira_allocno* %24, %struct.ira_allocno** %prev_a, align 8, !dbg !8068
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8069
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8070
  %loop_tree_node16 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 6, !dbg !8070
  store %struct.ira_loop_tree_node* %25, %struct.ira_loop_tree_node** %loop_tree_node16, align 8, !dbg !8071
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8072
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8073
  %regno_allocno_map17 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %28, i32 0, i32 9, !dbg !8074
  %29 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map17, align 8, !dbg !8074
  %30 = load i32, i32* %regno, align 4, !dbg !8075
  %idxprom18 = sext i32 %30 to i64, !dbg !8073
  %arrayidx19 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %29, i64 %idxprom18, !dbg !8073
  store %struct.ira_allocno* %27, %struct.ira_allocno** %arrayidx19, align 8, !dbg !8076
  %31 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8077
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %31, i32 0, i32 12, !dbg !8078
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !8078
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8079
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %33, i32 0, i32 0, !dbg !8079
  %34 = load i32, i32* %num, align 8, !dbg !8079
  %call20 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %32, i32 %34), !dbg !8080
  store i8 1, i8* %rebuild_p, align 1, !dbg !8081
  br label %if.end33, !dbg !8082

if.else21:                                        ; preds = %for.end
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %prev_a, align 8, !dbg !8083
  %cmp22 = icmp eq %struct.ira_allocno* %35, null, !dbg !8086
  br i1 %cmp22, label %if.then24, label %if.else27, !dbg !8087

if.then24:                                        ; preds = %if.else21
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %next_a, align 8, !dbg !8088
  %37 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !8089
  %38 = load i32, i32* %regno, align 4, !dbg !8090
  %idxprom25 = sext i32 %38 to i64, !dbg !8089
  %arrayidx26 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %37, i64 %idxprom25, !dbg !8089
  store %struct.ira_allocno* %36, %struct.ira_allocno** %arrayidx26, align 8, !dbg !8091
  br label %if.end, !dbg !8089

if.else27:                                        ; preds = %if.else21
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %next_a, align 8, !dbg !8092
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %prev_a, align 8, !dbg !8093
  %next_regno_allocno28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 5, !dbg !8093
  store %struct.ira_allocno* %39, %struct.ira_allocno** %next_regno_allocno28, align 8, !dbg !8094
  br label %if.end

if.end:                                           ; preds = %if.else27, %if.then24
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8095
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 20, !dbg !8095
  %42 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !8095
  store %struct.ira_allocno_live_range* %42, %struct.ira_allocno_live_range** %r, align 8, !dbg !8096
  %43 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !8097
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !8098
  call void @change_allocno_in_range_list(%struct.ira_allocno_live_range* %43, %struct.ira_allocno* %44), !dbg !8099
  %45 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !8100
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !8101
  %live_ranges29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 20, !dbg !8101
  %47 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges29, align 8, !dbg !8101
  %call30 = call %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range* %45, %struct.ira_allocno_live_range* %47), !dbg !8102
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !8103
  %live_ranges31 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 20, !dbg !8103
  store %struct.ira_allocno_live_range* %call30, %struct.ira_allocno_live_range** %live_ranges31, align 8, !dbg !8104
  store i8 1, i8* %merged_p, align 1, !dbg !8105
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8106
  %live_ranges32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %49, i32 0, i32 20, !dbg !8106
  store %struct.ira_allocno_live_range* null, %struct.ira_allocno_live_range** %live_ranges32, align 8, !dbg !8107
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_a, align 8, !dbg !8108
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8109
  call void @propagate_some_info_from_allocno(%struct.ira_allocno* %50, %struct.ira_allocno* %51), !dbg !8110
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8111
  call void @finish_allocno(%struct.ira_allocno* %52), !dbg !8112
  br label %if.end33

if.end33:                                         ; preds = %if.end, %if.then15
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then
  br label %for.inc35, !dbg !8113

for.inc35:                                        ; preds = %if.end34
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %next_a, align 8, !dbg !8114
  store %struct.ira_allocno* %53, %struct.ira_allocno** %a, align 8, !dbg !8115
  br label %for.cond1, !dbg !8116, !llvm.loop !8117

for.end36:                                        ; preds = %for.cond1
  %54 = load i8, i8* %rebuild_p, align 1, !dbg !8119
  %tobool37 = icmp ne i8 %54, 0, !dbg !8119
  br i1 %tobool37, label %if.then38, label %if.end45, !dbg !8121

if.then38:                                        ; preds = %for.end36
  %55 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8122
  %cmp39 = icmp eq %struct.ira_allocno** %55, null, !dbg !8125
  br i1 %cmp39, label %if.then41, label %if.end44, !dbg !8126

if.then41:                                        ; preds = %if.then38
  %56 = load i32, i32* @ira_allocnos_num, align 4, !dbg !8127
  %conv42 = sext i32 %56 to i64, !dbg !8127
  %mul = mul i64 8, %conv42, !dbg !8128
  %call43 = call i8* @ira_allocate(i64 %mul), !dbg !8129
  %57 = bitcast i8* %call43 to %struct.ira_allocno**, !dbg !8130
  store %struct.ira_allocno** %57, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8131
  br label %if.end44, !dbg !8132

if.end44:                                         ; preds = %if.then41, %if.then38
  %58 = load i32, i32* %regno, align 4, !dbg !8133
  call void @ira_rebuild_regno_allocno_list(i32 %58), !dbg !8134
  br label %if.end45, !dbg !8135

if.end45:                                         ; preds = %if.end44, %for.end36
  br label %for.inc46, !dbg !8136

for.inc46:                                        ; preds = %if.end45
  %59 = load i32, i32* %regno, align 4, !dbg !8137
  %dec = add nsw i32 %59, -1, !dbg !8137
  store i32 %dec, i32* %regno, align 4, !dbg !8137
  br label %for.cond, !dbg !8138, !llvm.loop !8139

for.end47:                                        ; preds = %for.cond
  %60 = load i8, i8* %merged_p, align 1, !dbg !8141
  %tobool48 = icmp ne i8 %60, 0, !dbg !8141
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !8143

if.then49:                                        ; preds = %for.end47
  call void @ira_rebuild_start_finish_chains(), !dbg !8144
  br label %if.end50, !dbg !8144

if.end50:                                         ; preds = %if.then49, %for.end47
  %61 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8145
  %cmp51 = icmp ne %struct.ira_allocno** %61, null, !dbg !8147
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !8148

if.then53:                                        ; preds = %if.end50
  %62 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8149
  %63 = bitcast %struct.ira_allocno** %62 to i8*, !dbg !8149
  call void @ira_free(i8* %63), !dbg !8150
  br label %if.end54, !dbg !8150

if.end54:                                         ; preds = %if.then53, %if.end50
  ret void, !dbg !8151
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_loop_tree_node_t_base_length(%struct.VEC_ira_loop_tree_node_t_base* %vec_) #0 !dbg !8152 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_base*, align 8
  store %struct.VEC_ira_loop_tree_node_t_base* %vec_, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, metadata !8157, metadata !DIExpression()), !dbg !8158
  %0 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8158
  %tobool = icmp ne %struct.VEC_ira_loop_tree_node_t_base* %0, null, !dbg !8158
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8158

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8158
  %num = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %1, i32 0, i32 0, !dbg !8158
  %2 = load i32, i32* %num, align 8, !dbg !8158
  br label %cond.end, !dbg !8158

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8158

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8158
  ret i32 %cond, !dbg !8158
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_loop_tree_node(%struct.ira_loop_tree_node* %loop) #0 !dbg !8159 {
entry:
  %loop.addr = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_loop_tree_node* %loop, %struct.ira_loop_tree_node** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop.addr, metadata !8160, metadata !DIExpression()), !dbg !8161
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8162
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %0, i32 0, i32 9, !dbg !8164
  %1 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !8164
  %cmp = icmp ne %struct.ira_allocno** %1, null, !dbg !8165
  br i1 %cmp, label %if.then, label %if.end, !dbg !8166

if.then:                                          ; preds = %entry
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8167
  %local_copies = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %2, i32 0, i32 15, !dbg !8169
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %local_copies, align 8, !dbg !8169
  call void @ira_free_bitmap(%struct.bitmap_head_def* %3), !dbg !8170
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8171
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %4, i32 0, i32 13, !dbg !8172
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !8172
  call void @ira_free_bitmap(%struct.bitmap_head_def* %5), !dbg !8173
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8174
  %modified_regnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i32 0, i32 14, !dbg !8175
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos, align 8, !dbg !8175
  call void @ira_free_bitmap(%struct.bitmap_head_def* %7), !dbg !8176
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8177
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %8, i32 0, i32 12, !dbg !8178
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !8178
  call void @ira_free_bitmap(%struct.bitmap_head_def* %9), !dbg !8179
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8180
  %regno_allocno_map1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 9, !dbg !8181
  %11 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map1, align 8, !dbg !8181
  %12 = bitcast %struct.ira_allocno** %11 to i8*, !dbg !8180
  call void @ira_free(i8* %12), !dbg !8182
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop.addr, align 8, !dbg !8183
  %regno_allocno_map2 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i32 0, i32 9, !dbg !8184
  store %struct.ira_allocno** null, %struct.ira_allocno*** %regno_allocno_map2, align 8, !dbg !8185
  br label %if.end, !dbg !8186

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8187
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_loop_tree_node* @VEC_ira_loop_tree_node_t_base_pop(%struct.VEC_ira_loop_tree_node_t_base* %vec_) #0 !dbg !8188 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_base*, align 8
  %obj_ = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.VEC_ira_loop_tree_node_t_base* %vec_, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, metadata !8192, metadata !DIExpression()), !dbg !8193
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %obj_, metadata !8194, metadata !DIExpression()), !dbg !8193
  %0 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8193
  %num = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %0, i32 0, i32 0, !dbg !8193
  %1 = load i32, i32* %num, align 8, !dbg !8193
  %2 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8193
  %vec = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %2, i32 0, i32 2, !dbg !8193
  %3 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8193
  %num1 = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %3, i32 0, i32 0, !dbg !8193
  %4 = load i32, i32* %num1, align 8, !dbg !8193
  %dec = add i32 %4, -1, !dbg !8193
  store i32 %dec, i32* %num1, align 8, !dbg !8193
  %idxprom = zext i32 %dec to i64, !dbg !8193
  %arrayidx = getelementptr inbounds [1 x %struct.ira_loop_tree_node*], [1 x %struct.ira_loop_tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8193
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %arrayidx, align 8, !dbg !8193
  store %struct.ira_loop_tree_node* %5, %struct.ira_loop_tree_node** %obj_, align 8, !dbg !8193
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %obj_, align 8, !dbg !8193
  ret %struct.ira_loop_tree_node* %6, !dbg !8193
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !8195 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8198, metadata !DIExpression()), !dbg !8199
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8200
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !8200
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !8200
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !8200
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8200

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8200
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !8200
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !8200
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !8200
  br label %cond.end, !dbg !8200

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8200
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !8200
  ret i32 %call, !dbg !8201
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @low_pressure_loop_node_p(%struct.ira_loop_tree_node* %node) #0 !dbg !8202 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %i = alloca i32, align 4
  %cover_class = alloca i32, align 4
  store %struct.ira_loop_tree_node* %node, %struct.ira_loop_tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %node.addr, metadata !8205, metadata !DIExpression()), !dbg !8206
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8207, metadata !DIExpression()), !dbg !8208
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8209, metadata !DIExpression()), !dbg !8210
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8211
  %bb = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %0, i32 0, i32 0, !dbg !8213
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8213
  %cmp = icmp ne %struct.basic_block_def* %1, null, !dbg !8214
  br i1 %cmp, label %if.then, label %if.end, !dbg !8215

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8216
  br label %return, !dbg !8216

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !8217
  br label %for.cond, !dbg !8219

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4, !dbg !8220
  %3 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !8222
  %cmp1 = icmp slt i32 %2, %3, !dbg !8223
  br i1 %cmp1, label %for.body, label %for.end, !dbg !8224

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !8225
  %idxprom = sext i32 %4 to i64, !dbg !8227
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !8227
  %5 = load i32, i32* %arrayidx, align 4, !dbg !8227
  store i32 %5, i32* %cover_class, align 4, !dbg !8228
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8229
  %reg_pressure = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i32 0, i32 11, !dbg !8231
  %7 = load i32, i32* %cover_class, align 4, !dbg !8232
  %idxprom2 = zext i32 %7 to i64, !dbg !8229
  %arrayidx3 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure, i64 0, i64 %idxprom2, !dbg !8229
  %8 = load i32, i32* %arrayidx3, align 4, !dbg !8229
  %9 = load i32, i32* %cover_class, align 4, !dbg !8233
  %idxprom4 = zext i32 %9 to i64, !dbg !8234
  %arrayidx5 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom4, !dbg !8234
  %10 = load i32, i32* %arrayidx5, align 4, !dbg !8234
  %cmp6 = icmp sgt i32 %8, %10, !dbg !8235
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !8236

if.then7:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !8237
  br label %return, !dbg !8237

if.end8:                                          ; preds = %for.body
  br label %for.inc, !dbg !8238

for.inc:                                          ; preds = %if.end8
  %11 = load i32, i32* %i, align 4, !dbg !8239
  %inc = add nsw i32 %11, 1, !dbg !8239
  store i32 %inc, i32* %i, align 4, !dbg !8239
  br label %for.cond, !dbg !8240, !llvm.loop !8241

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !8243
  br label %return, !dbg !8243

return:                                           ; preds = %for.end, %if.then7, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !8244
  ret i8 %12, !dbg !8244
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !8245 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %diff = alloca i32, align 4
  %l1 = alloca %struct.ira_loop_tree_node*, align 8
  %l2 = alloca %struct.ira_loop_tree_node*, align 8
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !8246, metadata !DIExpression()), !dbg !8247
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !8248, metadata !DIExpression()), !dbg !8249
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !8250, metadata !DIExpression()), !dbg !8251
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %l1, metadata !8252, metadata !DIExpression()), !dbg !8253
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !8254
  %1 = bitcast i8* %0 to %struct.ira_loop_tree_node**, !dbg !8255
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %1, align 8, !dbg !8256
  store %struct.ira_loop_tree_node* %2, %struct.ira_loop_tree_node** %l1, align 8, !dbg !8253
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %l2, metadata !8257, metadata !DIExpression()), !dbg !8258
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !8259
  %4 = bitcast i8* %3 to %struct.ira_loop_tree_node**, !dbg !8260
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %4, align 8, !dbg !8261
  store %struct.ira_loop_tree_node* %5, %struct.ira_loop_tree_node** %l2, align 8, !dbg !8258
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l1, align 8, !dbg !8262
  %to_remove_p = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i32 0, i32 8, !dbg !8264
  %7 = load i8, i8* %to_remove_p, align 4, !dbg !8264
  %conv = zext i8 %7 to i32, !dbg !8262
  %tobool = icmp ne i32 %conv, 0, !dbg !8262
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8265

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l2, align 8, !dbg !8266
  %to_remove_p1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %8, i32 0, i32 8, !dbg !8267
  %9 = load i8, i8* %to_remove_p1, align 4, !dbg !8267
  %tobool2 = icmp ne i8 %9, 0, !dbg !8266
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8268

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval, align 4, !dbg !8269
  br label %return, !dbg !8269

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l1, align 8, !dbg !8270
  %to_remove_p3 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 8, !dbg !8272
  %11 = load i8, i8* %to_remove_p3, align 4, !dbg !8272
  %tobool4 = icmp ne i8 %11, 0, !dbg !8270
  br i1 %tobool4, label %if.end10, label %land.lhs.true5, !dbg !8273

land.lhs.true5:                                   ; preds = %if.end
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l2, align 8, !dbg !8274
  %to_remove_p6 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %12, i32 0, i32 8, !dbg !8275
  %13 = load i8, i8* %to_remove_p6, align 4, !dbg !8275
  %conv7 = zext i8 %13 to i32, !dbg !8274
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !8274
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !8276

if.then9:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %retval, align 4, !dbg !8277
  br label %return, !dbg !8277

if.end10:                                         ; preds = %land.lhs.true5, %if.end
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l1, align 8, !dbg !8278
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i32 0, i32 1, !dbg !8280
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8280
  %header = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 2, !dbg !8281
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8281
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 11, !dbg !8282
  %17 = load i32, i32* %frequency, align 8, !dbg !8282
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l2, align 8, !dbg !8283
  %loop11 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i32 0, i32 1, !dbg !8284
  %19 = load %struct.loop*, %struct.loop** %loop11, align 8, !dbg !8284
  %header12 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 2, !dbg !8285
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %header12, align 8, !dbg !8285
  %frequency13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 11, !dbg !8286
  %21 = load i32, i32* %frequency13, align 8, !dbg !8286
  %sub = sub nsw i32 %17, %21, !dbg !8287
  store i32 %sub, i32* %diff, align 4, !dbg !8288
  %cmp = icmp ne i32 %sub, 0, !dbg !8289
  br i1 %cmp, label %if.then15, label %if.end16, !dbg !8290

if.then15:                                        ; preds = %if.end10
  %22 = load i32, i32* %diff, align 4, !dbg !8291
  store i32 %22, i32* %retval, align 4, !dbg !8292
  br label %return, !dbg !8292

if.end16:                                         ; preds = %if.end10
  %23 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l1, align 8, !dbg !8293
  %loop17 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %23, i32 0, i32 1, !dbg !8295
  %24 = load %struct.loop*, %struct.loop** %loop17, align 8, !dbg !8295
  %call = call i32 @loop_depth(%struct.loop* %24), !dbg !8296
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l2, align 8, !dbg !8297
  %loop18 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i32 0, i32 1, !dbg !8298
  %26 = load %struct.loop*, %struct.loop** %loop18, align 8, !dbg !8298
  %call19 = call i32 @loop_depth(%struct.loop* %26), !dbg !8299
  %sub20 = sub nsw i32 %call, %call19, !dbg !8300
  store i32 %sub20, i32* %diff, align 4, !dbg !8301
  %cmp21 = icmp ne i32 %sub20, 0, !dbg !8302
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !8303

if.then23:                                        ; preds = %if.end16
  %27 = load i32, i32* %diff, align 4, !dbg !8304
  store i32 %27, i32* %retval, align 4, !dbg !8305
  br label %return, !dbg !8305

if.end24:                                         ; preds = %if.end16
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l1, align 8, !dbg !8306
  %loop25 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %28, i32 0, i32 1, !dbg !8307
  %29 = load %struct.loop*, %struct.loop** %loop25, align 8, !dbg !8307
  %num = getelementptr inbounds %struct.loop, %struct.loop* %29, i32 0, i32 0, !dbg !8308
  %30 = load i32, i32* %num, align 8, !dbg !8308
  %31 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %l2, align 8, !dbg !8309
  %loop26 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %31, i32 0, i32 1, !dbg !8310
  %32 = load %struct.loop*, %struct.loop** %loop26, align 8, !dbg !8310
  %num27 = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 0, !dbg !8311
  %33 = load i32, i32* %num27, align 8, !dbg !8311
  %sub28 = sub nsw i32 %30, %33, !dbg !8312
  store i32 %sub28, i32* %retval, align 4, !dbg !8313
  br label %return, !dbg !8313

return:                                           ; preds = %if.end24, %if.then23, %if.then15, %if.then9, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !8314
  ret i32 %34, !dbg !8314
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_loop_tree_node** @VEC_ira_loop_tree_node_t_heap_safe_push(%struct.VEC_ira_loop_tree_node_t_heap** %vec_, %struct.ira_loop_tree_node* %obj_) #0 !dbg !8315 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_heap**, align 8
  %obj_.addr = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.VEC_ira_loop_tree_node_t_heap** %vec_, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, metadata !8318, metadata !DIExpression()), !dbg !8319
  store %struct.ira_loop_tree_node* %obj_, %struct.ira_loop_tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %obj_.addr, metadata !8320, metadata !DIExpression()), !dbg !8319
  %0 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8319
  %call = call i32 @VEC_ira_loop_tree_node_t_heap_reserve(%struct.VEC_ira_loop_tree_node_t_heap** %0, i32 1), !dbg !8319
  %1 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8319
  %2 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %1, align 8, !dbg !8319
  %tobool = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %2, null, !dbg !8319
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8319

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8319
  %4 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %3, align 8, !dbg !8319
  %base = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %4, i32 0, i32 0, !dbg !8319
  br label %cond.end, !dbg !8319

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8319

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8319
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %obj_.addr, align 8, !dbg !8319
  %call1 = call %struct.ira_loop_tree_node** @VEC_ira_loop_tree_node_t_base_quick_push(%struct.VEC_ira_loop_tree_node_t_base* %cond, %struct.ira_loop_tree_node* %5), !dbg !8319
  ret %struct.ira_loop_tree_node** %call1, !dbg !8319
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_loop_tree_node_t_heap_reserve(%struct.VEC_ira_loop_tree_node_t_heap** %vec_, i32 %alloc_) #0 !dbg !8321 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ira_loop_tree_node_t_heap** %vec_, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, metadata !8324, metadata !DIExpression()), !dbg !8325
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8326, metadata !DIExpression()), !dbg !8325
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8327, metadata !DIExpression()), !dbg !8325
  %0 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8325
  %1 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %0, align 8, !dbg !8325
  %tobool = icmp ne %struct.VEC_ira_loop_tree_node_t_heap* %1, null, !dbg !8325
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8325

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8325
  %3 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %2, align 8, !dbg !8325
  %base = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_heap, %struct.VEC_ira_loop_tree_node_t_heap* %3, i32 0, i32 0, !dbg !8325
  br label %cond.end, !dbg !8325

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8325

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_loop_tree_node_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8325
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8325
  %call = call i32 @VEC_ira_loop_tree_node_t_base_space(%struct.VEC_ira_loop_tree_node_t_base* %cond, i32 %4), !dbg !8325
  %tobool1 = icmp ne i32 %call, 0, !dbg !8325
  %lnot = xor i1 %tobool1, true, !dbg !8325
  %lnot.ext = zext i1 %lnot to i32, !dbg !8325
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8325
  %5 = load i32, i32* %extend, align 4, !dbg !8328
  %tobool2 = icmp ne i32 %5, 0, !dbg !8328
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8325

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8328
  %7 = load %struct.VEC_ira_loop_tree_node_t_heap*, %struct.VEC_ira_loop_tree_node_t_heap** %6, align 8, !dbg !8328
  %8 = bitcast %struct.VEC_ira_loop_tree_node_t_heap* %7 to i8*, !dbg !8328
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8328
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8328
  %10 = bitcast i8* %call3 to %struct.VEC_ira_loop_tree_node_t_heap*, !dbg !8328
  %11 = load %struct.VEC_ira_loop_tree_node_t_heap**, %struct.VEC_ira_loop_tree_node_t_heap*** %vec_.addr, align 8, !dbg !8328
  store %struct.VEC_ira_loop_tree_node_t_heap* %10, %struct.VEC_ira_loop_tree_node_t_heap** %11, align 8, !dbg !8328
  br label %if.end, !dbg !8328

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8325
  ret i32 %12, !dbg !8325
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_loop_tree_node** @VEC_ira_loop_tree_node_t_base_quick_push(%struct.VEC_ira_loop_tree_node_t_base* %vec_, %struct.ira_loop_tree_node* %obj_) #0 !dbg !8330 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_base*, align 8
  %obj_.addr = alloca %struct.ira_loop_tree_node*, align 8
  %slot_ = alloca %struct.ira_loop_tree_node**, align 8
  store %struct.VEC_ira_loop_tree_node_t_base* %vec_, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, metadata !8333, metadata !DIExpression()), !dbg !8334
  store %struct.ira_loop_tree_node* %obj_, %struct.ira_loop_tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %obj_.addr, metadata !8335, metadata !DIExpression()), !dbg !8334
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node*** %slot_, metadata !8336, metadata !DIExpression()), !dbg !8334
  %0 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8334
  %num = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %0, i32 0, i32 0, !dbg !8334
  %1 = load i32, i32* %num, align 8, !dbg !8334
  %2 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8334
  %alloc = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %2, i32 0, i32 1, !dbg !8334
  %3 = load i32, i32* %alloc, align 4, !dbg !8334
  %cmp = icmp ult i32 %1, %3, !dbg !8334
  %conv = zext i1 %cmp to i32, !dbg !8334
  %4 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8334
  %vec = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %4, i32 0, i32 2, !dbg !8334
  %5 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8334
  %num1 = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %5, i32 0, i32 0, !dbg !8334
  %6 = load i32, i32* %num1, align 8, !dbg !8334
  %inc = add i32 %6, 1, !dbg !8334
  store i32 %inc, i32* %num1, align 8, !dbg !8334
  %idxprom = zext i32 %6 to i64, !dbg !8334
  %arrayidx = getelementptr inbounds [1 x %struct.ira_loop_tree_node*], [1 x %struct.ira_loop_tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8334
  store %struct.ira_loop_tree_node** %arrayidx, %struct.ira_loop_tree_node*** %slot_, align 8, !dbg !8334
  %7 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %obj_.addr, align 8, !dbg !8334
  %8 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %slot_, align 8, !dbg !8334
  store %struct.ira_loop_tree_node* %7, %struct.ira_loop_tree_node** %8, align 8, !dbg !8334
  %9 = load %struct.ira_loop_tree_node**, %struct.ira_loop_tree_node*** %slot_, align 8, !dbg !8334
  ret %struct.ira_loop_tree_node** %9, !dbg !8334
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_loop_tree_node_t_base_space(%struct.VEC_ira_loop_tree_node_t_base* %vec_, i32 %alloc_) #0 !dbg !8337 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_loop_tree_node_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ira_loop_tree_node_t_base* %vec_, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, metadata !8340, metadata !DIExpression()), !dbg !8341
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8342, metadata !DIExpression()), !dbg !8341
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8341
  %cmp = icmp sge i32 %0, 0, !dbg !8341
  %conv = zext i1 %cmp to i32, !dbg !8341
  %1 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8341
  %tobool = icmp ne %struct.VEC_ira_loop_tree_node_t_base* %1, null, !dbg !8341
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8341

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8341
  %alloc = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %2, i32 0, i32 1, !dbg !8341
  %3 = load i32, i32* %alloc, align 4, !dbg !8341
  %4 = load %struct.VEC_ira_loop_tree_node_t_base*, %struct.VEC_ira_loop_tree_node_t_base** %vec_.addr, align 8, !dbg !8341
  %num = getelementptr inbounds %struct.VEC_ira_loop_tree_node_t_base, %struct.VEC_ira_loop_tree_node_t_base* %4, i32 0, i32 0, !dbg !8341
  %5 = load i32, i32* %num, align 8, !dbg !8341
  %sub = sub i32 %3, %5, !dbg !8341
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8341
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8341
  %conv2 = zext i1 %cmp1 to i32, !dbg !8341
  br label %cond.end, !dbg !8341

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8341
  %tobool3 = icmp ne i32 %7, 0, !dbg !8341
  %lnot = xor i1 %tobool3, true, !dbg !8341
  %lnot.ext = zext i1 %lnot to i32, !dbg !8341
  br label %cond.end, !dbg !8341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8341
  ret i32 %cond, !dbg !8341
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_some_info_from_allocno(%struct.ira_allocno* %a, %struct.ira_allocno* %from_a) #0 !dbg !8343 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %from_a.addr = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !8344, metadata !DIExpression()), !dbg !8345
  store %struct.ira_allocno* %from_a, %struct.ira_allocno** %from_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %from_a.addr, metadata !8346, metadata !DIExpression()), !dbg !8347
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8348, metadata !DIExpression()), !dbg !8349
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8350
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 26, !dbg !8350
  %1 = load i64, i64* %conflict_hard_regs, align 8, !dbg !8350
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8350
  %conflict_hard_regs1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 26, !dbg !8350
  %3 = load i64, i64* %conflict_hard_regs1, align 8, !dbg !8350
  %or = or i64 %3, %1, !dbg !8350
  store i64 %or, i64* %conflict_hard_regs1, align 8, !dbg !8350
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8351
  %no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 31, !dbg !8351
  %bf.load = load i16, i16* %no_stack_reg_p, align 4, !dbg !8351
  %bf.lshr = lshr i16 %bf.load, 4, !dbg !8351
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8351
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8351
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8351
  br i1 %tobool, label %if.then, label %if.end, !dbg !8353

if.then:                                          ; preds = %entry
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8354
  %no_stack_reg_p2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 31, !dbg !8354
  %bf.load3 = load i16, i16* %no_stack_reg_p2, align 4, !dbg !8355
  %bf.clear4 = and i16 %bf.load3, -17, !dbg !8355
  %bf.set = or i16 %bf.clear4, 16, !dbg !8355
  store i16 %bf.set, i16* %no_stack_reg_p2, align 4, !dbg !8355
  br label %if.end, !dbg !8354

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8356
  %nrefs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 7, !dbg !8356
  %7 = load i32, i32* %nrefs, align 8, !dbg !8356
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8357
  %nrefs5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 7, !dbg !8357
  %9 = load i32, i32* %nrefs5, align 8, !dbg !8358
  %add = add nsw i32 %9, %7, !dbg !8358
  store i32 %add, i32* %nrefs5, align 8, !dbg !8358
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8359
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 8, !dbg !8359
  %11 = load i32, i32* %freq, align 4, !dbg !8359
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8360
  %freq6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 8, !dbg !8360
  %13 = load i32, i32* %freq6, align 4, !dbg !8361
  %add7 = add nsw i32 %13, %11, !dbg !8361
  store i32 %add7, i32* %freq6, align 4, !dbg !8361
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8362
  %call_freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 29, !dbg !8362
  %15 = load i32, i32* %call_freq, align 4, !dbg !8362
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8363
  %call_freq8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 29, !dbg !8363
  %17 = load i32, i32* %call_freq8, align 4, !dbg !8364
  %add9 = add nsw i32 %17, %15, !dbg !8364
  store i32 %add9, i32* %call_freq8, align 4, !dbg !8364
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8365
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 27, !dbg !8365
  %19 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !8365
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8365
  %total_conflict_hard_regs10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 27, !dbg !8365
  %21 = load i64, i64* %total_conflict_hard_regs10, align 8, !dbg !8365
  %or11 = or i64 %21, %19, !dbg !8365
  store i64 %or11, i64* %total_conflict_hard_regs10, align 8, !dbg !8365
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8366
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 30, !dbg !8366
  %23 = load i32, i32* %calls_crossed_num, align 8, !dbg !8366
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8367
  %calls_crossed_num12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 30, !dbg !8367
  %25 = load i32, i32* %calls_crossed_num12, align 8, !dbg !8368
  %add13 = add nsw i32 %25, %23, !dbg !8368
  store i32 %add13, i32* %calls_crossed_num12, align 8, !dbg !8368
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8369
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 14, !dbg !8369
  %27 = load i32, i32* %excess_pressure_points_num, align 4, !dbg !8369
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8370
  %excess_pressure_points_num14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 14, !dbg !8370
  %29 = load i32, i32* %excess_pressure_points_num14, align 4, !dbg !8371
  %add15 = add nsw i32 %29, %27, !dbg !8371
  store i32 %add15, i32* %excess_pressure_points_num14, align 4, !dbg !8371
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8372
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 31, !dbg !8372
  %bf.load16 = load i16, i16* %bad_spill_p, align 4, !dbg !8372
  %bf.lshr17 = lshr i16 %bf.load16, 6, !dbg !8372
  %bf.clear18 = and i16 %bf.lshr17, 1, !dbg !8372
  %bf.cast19 = zext i16 %bf.clear18 to i32, !dbg !8372
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !8372
  br i1 %tobool20, label %if.end25, label %if.then21, !dbg !8374

if.then21:                                        ; preds = %if.end
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8375
  %bad_spill_p22 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 31, !dbg !8375
  %bf.load23 = load i16, i16* %bad_spill_p22, align 4, !dbg !8376
  %bf.clear24 = and i16 %bf.load23, -65, !dbg !8376
  store i16 %bf.clear24, i16* %bad_spill_p22, align 4, !dbg !8376
  br label %if.end25, !dbg !8375

if.end25:                                         ; preds = %if.then21, %if.end
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8377
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 31, !dbg !8377
  %bf.load26 = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !8377
  %bf.lshr27 = lshr i16 %bf.load26, 5, !dbg !8377
  %bf.clear28 = and i16 %bf.lshr27, 1, !dbg !8377
  %bf.cast29 = zext i16 %bf.clear28 to i32, !dbg !8377
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !8377
  br i1 %tobool30, label %if.then31, label %if.end36, !dbg !8379

if.then31:                                        ; preds = %if.end25
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8380
  %total_no_stack_reg_p32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %33, i32 0, i32 31, !dbg !8380
  %bf.load33 = load i16, i16* %total_no_stack_reg_p32, align 4, !dbg !8381
  %bf.clear34 = and i16 %bf.load33, -33, !dbg !8381
  %bf.set35 = or i16 %bf.clear34, 32, !dbg !8381
  store i16 %bf.set35, i16* %total_no_stack_reg_p32, align 4, !dbg !8381
  br label %if.end36, !dbg !8380

if.end36:                                         ; preds = %if.then31, %if.end25
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8382
  %cover_class37 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 9, !dbg !8382
  %35 = load i32, i32* %cover_class37, align 8, !dbg !8382
  store i32 %35, i32* %cover_class, align 4, !dbg !8383
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8384
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 33, !dbg !8384
  %37 = load i32, i32* %cover_class, align 4, !dbg !8385
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8386
  %hard_reg_costs38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 33, !dbg !8386
  %39 = load i32*, i32** %hard_reg_costs38, align 8, !dbg !8386
  call void @ira_allocate_and_accumulate_costs(i32** %hard_reg_costs, i32 %37, i32* %39), !dbg !8387
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8388
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 35, !dbg !8388
  %41 = load i32, i32* %cover_class, align 4, !dbg !8389
  %42 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8390
  %conflict_hard_reg_costs39 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %42, i32 0, i32 35, !dbg !8390
  %43 = load i32*, i32** %conflict_hard_reg_costs39, align 8, !dbg !8390
  call void @ira_allocate_and_accumulate_costs(i32** %conflict_hard_reg_costs, i32 %41, i32* %43), !dbg !8391
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8392
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 10, !dbg !8392
  %45 = load i32, i32* %cover_class_cost, align 4, !dbg !8392
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8393
  %cover_class_cost40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 10, !dbg !8393
  %47 = load i32, i32* %cover_class_cost40, align 4, !dbg !8394
  %add41 = add nsw i32 %47, %45, !dbg !8394
  store i32 %add41, i32* %cover_class_cost40, align 4, !dbg !8394
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %from_a.addr, align 8, !dbg !8395
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 12, !dbg !8395
  %49 = load i32, i32* %memory_cost, align 4, !dbg !8395
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8396
  %memory_cost42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 12, !dbg !8396
  %51 = load i32, i32* %memory_cost42, align 4, !dbg !8397
  %add43 = add nsw i32 %51, %49, !dbg !8397
  store i32 %add43, i32* %memory_cost42, align 4, !dbg !8397
  ret void, !dbg !8398
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocate_and_accumulate_costs(i32** %vec, i32 %cover_class, i32* %src) #0 !dbg !8399 {
entry:
  %vec.addr = alloca i32**, align 8
  %cover_class.addr = alloca i32, align 4
  %src.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32** %vec, i32*** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %vec.addr, metadata !8403, metadata !DIExpression()), !dbg !8404
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !8405, metadata !DIExpression()), !dbg !8406
  store i32* %src, i32** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %src.addr, metadata !8407, metadata !DIExpression()), !dbg !8408
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8409, metadata !DIExpression()), !dbg !8410
  call void @llvm.dbg.declare(metadata i32* %len, metadata !8411, metadata !DIExpression()), !dbg !8412
  %0 = load i32*, i32** %src.addr, align 8, !dbg !8413
  %cmp = icmp eq i32* %0, null, !dbg !8415
  br i1 %cmp, label %if.then, label %if.end, !dbg !8416

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !8417

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %cover_class.addr, align 4, !dbg !8418
  %idxprom = zext i32 %1 to i64, !dbg !8419
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom, !dbg !8419
  %2 = load i32, i32* %arrayidx, align 4, !dbg !8419
  store i32 %2, i32* %len, align 4, !dbg !8420
  %3 = load i32**, i32*** %vec.addr, align 8, !dbg !8421
  %4 = load i32*, i32** %3, align 8, !dbg !8423
  %cmp1 = icmp eq i32* %4, null, !dbg !8424
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !8425

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %cover_class.addr, align 4, !dbg !8426
  %call = call i32* @ira_allocate_cost_vector(i32 %5), !dbg !8428
  %6 = load i32**, i32*** %vec.addr, align 8, !dbg !8429
  store i32* %call, i32** %6, align 8, !dbg !8430
  %7 = load i32**, i32*** %vec.addr, align 8, !dbg !8431
  %8 = load i32*, i32** %7, align 8, !dbg !8432
  %9 = bitcast i32* %8 to i8*, !dbg !8433
  %10 = load i32, i32* %len, align 4, !dbg !8434
  %conv = sext i32 %10 to i64, !dbg !8434
  %mul = mul i64 4, %conv, !dbg !8435
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 %mul, i1 false), !dbg !8433
  br label %if.end3, !dbg !8436

if.end3:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %i, align 4, !dbg !8437
  br label %for.cond, !dbg !8439

for.cond:                                         ; preds = %for.inc, %if.end3
  %11 = load i32, i32* %i, align 4, !dbg !8440
  %12 = load i32, i32* %len, align 4, !dbg !8442
  %cmp4 = icmp slt i32 %11, %12, !dbg !8443
  br i1 %cmp4, label %for.body, label %for.end, !dbg !8444

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** %src.addr, align 8, !dbg !8445
  %14 = load i32, i32* %i, align 4, !dbg !8446
  %idxprom6 = sext i32 %14 to i64, !dbg !8445
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i64 %idxprom6, !dbg !8445
  %15 = load i32, i32* %arrayidx7, align 4, !dbg !8445
  %16 = load i32**, i32*** %vec.addr, align 8, !dbg !8447
  %17 = load i32*, i32** %16, align 8, !dbg !8448
  %18 = load i32, i32* %i, align 4, !dbg !8449
  %idxprom8 = sext i32 %18 to i64, !dbg !8450
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i64 %idxprom8, !dbg !8450
  %19 = load i32, i32* %arrayidx9, align 4, !dbg !8451
  %add = add nsw i32 %19, %15, !dbg !8451
  store i32 %add, i32* %arrayidx9, align 4, !dbg !8451
  br label %for.inc, !dbg !8450

for.inc:                                          ; preds = %for.body
  %20 = load i32, i32* %i, align 4, !dbg !8452
  %inc = add nsw i32 %20, 1, !dbg !8452
  store i32 %inc, i32* %i, align 4, !dbg !8452
  br label %for.cond, !dbg !8453, !llvm.loop !8454

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !8456
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_rebuild_regno_allocno_list(i32 %regno) #0 !dbg !8457 {
entry:
  %regno.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !8460, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8462, metadata !DIExpression()), !dbg !8463
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8464, metadata !DIExpression()), !dbg !8465
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !8466, metadata !DIExpression()), !dbg !8467
  store i32 0, i32* %n, align 4, !dbg !8468
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !8470
  %1 = load i32, i32* %regno.addr, align 4, !dbg !8471
  %idxprom = sext i32 %1 to i64, !dbg !8470
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %0, i64 %idxprom, !dbg !8470
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !8470
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a, align 8, !dbg !8472
  br label %for.cond, !dbg !8473

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8474
  %cmp = icmp ne %struct.ira_allocno* %3, null, !dbg !8476
  br i1 %cmp, label %for.body, label %for.end, !dbg !8477

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8478
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8479
  %6 = load i32, i32* %n, align 4, !dbg !8480
  %inc = add nsw i32 %6, 1, !dbg !8480
  store i32 %inc, i32* %n, align 4, !dbg !8480
  %idxprom1 = sext i32 %6 to i64, !dbg !8479
  %arrayidx2 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %5, i64 %idxprom1, !dbg !8479
  store %struct.ira_allocno* %4, %struct.ira_allocno** %arrayidx2, align 8, !dbg !8481
  br label %for.inc, !dbg !8479

for.inc:                                          ; preds = %for.body
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8482
  %next_regno_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 5, !dbg !8482
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %next_regno_allocno, align 8, !dbg !8482
  store %struct.ira_allocno* %8, %struct.ira_allocno** %a, align 8, !dbg !8483
  br label %for.cond, !dbg !8484, !llvm.loop !8485

for.end:                                          ; preds = %for.cond
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8487
  %10 = bitcast %struct.ira_allocno** %9 to i8*, !dbg !8487
  %11 = load i32, i32* %n, align 4, !dbg !8488
  %conv = sext i32 %11 to i64, !dbg !8488
  call void @spec_qsort(i8* %10, i64 %conv, i64 8, i32 (i8*, i8*)* @regno_allocno_order_compare_func), !dbg !8489
  store i32 1, i32* %i, align 4, !dbg !8490
  br label %for.cond3, !dbg !8492

for.cond3:                                        ; preds = %for.inc12, %for.end
  %12 = load i32, i32* %i, align 4, !dbg !8493
  %13 = load i32, i32* %n, align 4, !dbg !8495
  %cmp4 = icmp slt i32 %12, %13, !dbg !8496
  br i1 %cmp4, label %for.body6, label %for.end14, !dbg !8497

for.body6:                                        ; preds = %for.cond3
  %14 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8498
  %15 = load i32, i32* %i, align 4, !dbg !8499
  %idxprom7 = sext i32 %15 to i64, !dbg !8498
  %arrayidx8 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %14, i64 %idxprom7, !dbg !8498
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx8, align 8, !dbg !8498
  %17 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8500
  %18 = load i32, i32* %i, align 4, !dbg !8500
  %sub = sub nsw i32 %18, 1, !dbg !8500
  %idxprom9 = sext i32 %sub to i64, !dbg !8500
  %arrayidx10 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %17, i64 %idxprom9, !dbg !8500
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx10, align 8, !dbg !8500
  %next_regno_allocno11 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 5, !dbg !8500
  store %struct.ira_allocno* %16, %struct.ira_allocno** %next_regno_allocno11, align 8, !dbg !8501
  br label %for.inc12, !dbg !8500

for.inc12:                                        ; preds = %for.body6
  %20 = load i32, i32* %i, align 4, !dbg !8502
  %inc13 = add nsw i32 %20, 1, !dbg !8502
  store i32 %inc13, i32* %i, align 4, !dbg !8502
  br label %for.cond3, !dbg !8503, !llvm.loop !8504

for.end14:                                        ; preds = %for.cond3
  %21 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8506
  %22 = load i32, i32* %n, align 4, !dbg !8506
  %sub15 = sub nsw i32 %22, 1, !dbg !8506
  %idxprom16 = sext i32 %sub15 to i64, !dbg !8506
  %arrayidx17 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %21, i64 %idxprom16, !dbg !8506
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx17, align 8, !dbg !8506
  %next_regno_allocno18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 5, !dbg !8506
  store %struct.ira_allocno* null, %struct.ira_allocno** %next_regno_allocno18, align 8, !dbg !8507
  %24 = load %struct.ira_allocno**, %struct.ira_allocno*** @regno_allocnos, align 8, !dbg !8508
  %arrayidx19 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %24, i64 0, !dbg !8508
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx19, align 8, !dbg !8508
  %26 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !8509
  %27 = load i32, i32* %regno.addr, align 4, !dbg !8510
  %idxprom20 = sext i32 %27 to i64, !dbg !8509
  %arrayidx21 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %26, i64 %idxprom20, !dbg !8509
  store %struct.ira_allocno* %25, %struct.ira_allocno** %arrayidx21, align 8, !dbg !8511
  %28 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8512
  %cmp22 = icmp sgt i32 %28, 1, !dbg !8514
  br i1 %cmp22, label %land.lhs.true, label %if.end, !dbg !8515

land.lhs.true:                                    ; preds = %for.end14
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8516
  %cmp24 = icmp ne %struct._IO_FILE* %29, null, !dbg !8517
  br i1 %cmp24, label %if.then, label %if.end, !dbg !8518

if.then:                                          ; preds = %land.lhs.true
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8519
  %31 = load i32, i32* %regno.addr, align 4, !dbg !8520
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.31, i64 0, i64 0), i32 %31), !dbg !8521
  br label %if.end, !dbg !8521

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.end14
  ret void, !dbg !8522
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @regno_allocno_order_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !8523 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %a1 = alloca %struct.ira_allocno*, align 8
  %a2 = alloca %struct.ira_allocno*, align 8
  %n1 = alloca %struct.ira_loop_tree_node*, align 8
  %n2 = alloca %struct.ira_loop_tree_node*, align 8
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !8524, metadata !DIExpression()), !dbg !8525
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !8526, metadata !DIExpression()), !dbg !8527
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1, metadata !8528, metadata !DIExpression()), !dbg !8529
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !8530
  %1 = bitcast i8* %0 to %struct.ira_allocno**, !dbg !8531
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %1, align 8, !dbg !8532
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a1, align 8, !dbg !8529
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2, metadata !8533, metadata !DIExpression()), !dbg !8534
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !8535
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !8536
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %4, align 8, !dbg !8537
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a2, align 8, !dbg !8534
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %n1, metadata !8538, metadata !DIExpression()), !dbg !8539
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !8540
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 6, !dbg !8540
  %7 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !8540
  store %struct.ira_loop_tree_node* %7, %struct.ira_loop_tree_node** %n1, align 8, !dbg !8539
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %n2, metadata !8541, metadata !DIExpression()), !dbg !8542
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !8543
  %loop_tree_node1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 6, !dbg !8543
  %9 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node1, align 8, !dbg !8543
  store %struct.ira_loop_tree_node* %9, %struct.ira_loop_tree_node** %n2, align 8, !dbg !8542
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %n1, align 8, !dbg !8544
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %n2, align 8, !dbg !8546
  %call = call zeroext i8 @loop_is_inside_p(%struct.ira_loop_tree_node* %10, %struct.ira_loop_tree_node* %11), !dbg !8547
  %tobool = icmp ne i8 %call, 0, !dbg !8547
  br i1 %tobool, label %if.then, label %if.else, !dbg !8548

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !8549
  br label %return, !dbg !8549

if.else:                                          ; preds = %entry
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %n2, align 8, !dbg !8550
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %n1, align 8, !dbg !8552
  %call2 = call zeroext i8 @loop_is_inside_p(%struct.ira_loop_tree_node* %12, %struct.ira_loop_tree_node* %13), !dbg !8553
  %tobool3 = icmp ne i8 %call2, 0, !dbg !8553
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !8554

if.then4:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !8555
  br label %return, !dbg !8555

if.end:                                           ; preds = %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !8556
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 0, !dbg !8556
  %15 = load i32, i32* %num, align 8, !dbg !8556
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !8557
  %num6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 0, !dbg !8557
  %17 = load i32, i32* %num6, align 8, !dbg !8557
  %sub = sub nsw i32 %15, %17, !dbg !8558
  store i32 %sub, i32* %retval, align 4, !dbg !8559
  br label %return, !dbg !8559

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !8560
  ret i32 %18, !dbg !8560
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_is_inside_p(%struct.ira_loop_tree_node* %node, %struct.ira_loop_tree_node* %parent) #0 !dbg !8561 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %parent.addr = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_loop_tree_node* %node, %struct.ira_loop_tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %node.addr, metadata !8564, metadata !DIExpression()), !dbg !8565
  store %struct.ira_loop_tree_node* %parent, %struct.ira_loop_tree_node** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent.addr, metadata !8566, metadata !DIExpression()), !dbg !8567
  %0 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8568
  %parent1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %0, i32 0, i32 6, !dbg !8570
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent1, align 8, !dbg !8570
  store %struct.ira_loop_tree_node* %1, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8571
  br label %for.cond, !dbg !8572

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8573
  %cmp = icmp ne %struct.ira_loop_tree_node* %2, null, !dbg !8575
  br i1 %cmp, label %for.body, label %for.end, !dbg !8576

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8577
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent.addr, align 8, !dbg !8579
  %cmp2 = icmp eq %struct.ira_loop_tree_node* %3, %4, !dbg !8580
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8581

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !8582
  br label %return, !dbg !8582

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !8579

for.inc:                                          ; preds = %if.end
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8583
  %parent3 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %5, i32 0, i32 6, !dbg !8584
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent3, align 8, !dbg !8584
  store %struct.ira_loop_tree_node* %6, %struct.ira_loop_tree_node** %node.addr, align 8, !dbg !8585
  br label %for.cond, !dbg !8586, !llvm.loop !8587

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !8589
  br label %return, !dbg !8589

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !8590
  ret i8 %7, !dbg !8590
}

declare dso_local void @ira_free_bitmap(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_initialize_stat(%struct.bitmap_head_def* %head, %struct.bitmap_obstack* %obstack) #0 !dbg !8591 {
entry:
  %head.addr = alloca %struct.bitmap_head_def*, align 8
  %obstack.addr = alloca %struct.bitmap_obstack*, align 8
  store %struct.bitmap_head_def* %head, %struct.bitmap_head_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %head.addr, metadata !8594, metadata !DIExpression()), !dbg !8595
  store %struct.bitmap_obstack* %obstack, %struct.bitmap_obstack** %obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_obstack** %obstack.addr, metadata !8596, metadata !DIExpression()), !dbg !8597
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !8598
  %current = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 1, !dbg !8599
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %current, align 8, !dbg !8600
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !8601
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1, i32 0, i32 0, !dbg !8602
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %first, align 8, !dbg !8603
  %2 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** %obstack.addr, align 8, !dbg !8604
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !8605
  %obstack1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 3, !dbg !8606
  store %struct.bitmap_obstack* %2, %struct.bitmap_obstack** %obstack1, align 8, !dbg !8607
  ret void, !dbg !8608
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno* @create_cap_allocno(%struct.ira_allocno* %a) #0 !dbg !8609 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %cap = alloca %struct.ira_allocno*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !8612, metadata !DIExpression()), !dbg !8613
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %cap, metadata !8614, metadata !DIExpression()), !dbg !8615
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !8616, metadata !DIExpression()), !dbg !8617
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8618, metadata !DIExpression()), !dbg !8619
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8620
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 6, !dbg !8620
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !8620
  %parent1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %1, i32 0, i32 6, !dbg !8621
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent1, align 8, !dbg !8621
  store %struct.ira_loop_tree_node* %2, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8622
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8623
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 1, !dbg !8623
  %4 = load i32, i32* %regno, align 4, !dbg !8623
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !8624
  %call = call %struct.ira_allocno* @ira_create_allocno(i32 %4, i8 zeroext 1, %struct.ira_loop_tree_node* %5), !dbg !8625
  store %struct.ira_allocno* %call, %struct.ira_allocno** %cap, align 8, !dbg !8626
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8627
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 2, !dbg !8627
  %7 = load i32, i32* %mode, align 8, !dbg !8627
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8628
  %mode2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 2, !dbg !8628
  store i32 %7, i32* %mode2, align 8, !dbg !8629
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8630
  %cover_class3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 9, !dbg !8630
  %10 = load i32, i32* %cover_class3, align 8, !dbg !8630
  store i32 %10, i32* %cover_class, align 4, !dbg !8631
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8632
  %12 = load i32, i32* %cover_class, align 4, !dbg !8633
  call void @ira_set_allocno_cover_class(%struct.ira_allocno* %11, i32 %12), !dbg !8634
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8635
  %available_regs_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 38, !dbg !8635
  %14 = load i32, i32* %available_regs_num, align 4, !dbg !8635
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8636
  %available_regs_num4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 38, !dbg !8636
  store i32 %14, i32* %available_regs_num4, align 4, !dbg !8637
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8638
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8639
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 17, !dbg !8639
  store %struct.ira_allocno* %16, %struct.ira_allocno** %cap_member, align 8, !dbg !8640
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8641
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8642
  %cap5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 16, !dbg !8642
  store %struct.ira_allocno* %18, %struct.ira_allocno** %cap5, align 8, !dbg !8643
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8644
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 10, !dbg !8644
  %21 = load i32, i32* %cover_class_cost, align 4, !dbg !8644
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8645
  %cover_class_cost6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 10, !dbg !8645
  store i32 %21, i32* %cover_class_cost6, align 4, !dbg !8646
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8647
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 12, !dbg !8647
  %24 = load i32, i32* %memory_cost, align 4, !dbg !8647
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8648
  %memory_cost7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 12, !dbg !8648
  store i32 %24, i32* %memory_cost7, align 4, !dbg !8649
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8650
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 33, !dbg !8650
  %27 = load i32, i32* %cover_class, align 4, !dbg !8651
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8652
  %hard_reg_costs8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 33, !dbg !8652
  %29 = load i32*, i32** %hard_reg_costs8, align 8, !dbg !8652
  call void @ira_allocate_and_copy_costs(i32** %hard_reg_costs, i32 %27, i32* %29), !dbg !8653
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8654
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 35, !dbg !8654
  %31 = load i32, i32* %cover_class, align 4, !dbg !8655
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8656
  %conflict_hard_reg_costs9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 35, !dbg !8656
  %33 = load i32*, i32** %conflict_hard_reg_costs9, align 8, !dbg !8656
  call void @ira_allocate_and_copy_costs(i32** %conflict_hard_reg_costs, i32 %31, i32* %33), !dbg !8657
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8658
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 31, !dbg !8658
  %bf.load = load i16, i16* %bad_spill_p, align 4, !dbg !8658
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !8658
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8658
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8658
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8659
  %bad_spill_p10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 31, !dbg !8659
  %36 = trunc i32 %bf.cast to i16, !dbg !8660
  %bf.load11 = load i16, i16* %bad_spill_p10, align 4, !dbg !8660
  %bf.value = and i16 %36, 1, !dbg !8660
  %bf.shl = shl i16 %bf.value, 6, !dbg !8660
  %bf.clear12 = and i16 %bf.load11, -65, !dbg !8660
  %bf.set = or i16 %bf.clear12, %bf.shl, !dbg !8660
  store i16 %bf.set, i16* %bad_spill_p10, align 4, !dbg !8660
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !8660
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8661
  %nrefs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 7, !dbg !8661
  %38 = load i32, i32* %nrefs, align 8, !dbg !8661
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8662
  %nrefs13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 7, !dbg !8662
  store i32 %38, i32* %nrefs13, align 8, !dbg !8663
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8664
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 8, !dbg !8664
  %41 = load i32, i32* %freq, align 4, !dbg !8664
  %42 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8665
  %freq14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %42, i32 0, i32 8, !dbg !8665
  store i32 %41, i32* %freq14, align 4, !dbg !8666
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8667
  %call_freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 29, !dbg !8667
  %44 = load i32, i32* %call_freq, align 4, !dbg !8667
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8668
  %call_freq15 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 29, !dbg !8668
  store i32 %44, i32* %call_freq15, align 4, !dbg !8669
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8670
  %conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 26, !dbg !8670
  %47 = load i64, i64* %conflict_hard_regs, align 8, !dbg !8670
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8670
  %conflict_hard_regs16 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 26, !dbg !8670
  %49 = load i64, i64* %conflict_hard_regs16, align 8, !dbg !8670
  %or = or i64 %49, %47, !dbg !8670
  store i64 %or, i64* %conflict_hard_regs16, align 8, !dbg !8670
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8671
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 27, !dbg !8671
  %51 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !8671
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8671
  %total_conflict_hard_regs17 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 27, !dbg !8671
  %53 = load i64, i64* %total_conflict_hard_regs17, align 8, !dbg !8671
  %or18 = or i64 %53, %51, !dbg !8671
  store i64 %or18, i64* %total_conflict_hard_regs17, align 8, !dbg !8671
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8672
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %54, i32 0, i32 30, !dbg !8672
  %55 = load i32, i32* %calls_crossed_num, align 8, !dbg !8672
  %56 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8673
  %calls_crossed_num19 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %56, i32 0, i32 30, !dbg !8673
  store i32 %55, i32* %calls_crossed_num19, align 8, !dbg !8674
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8675
  %no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 31, !dbg !8675
  %bf.load20 = load i16, i16* %no_stack_reg_p, align 4, !dbg !8675
  %bf.lshr21 = lshr i16 %bf.load20, 4, !dbg !8675
  %bf.clear22 = and i16 %bf.lshr21, 1, !dbg !8675
  %bf.cast23 = zext i16 %bf.clear22 to i32, !dbg !8675
  %58 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8676
  %no_stack_reg_p24 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %58, i32 0, i32 31, !dbg !8676
  %59 = trunc i32 %bf.cast23 to i16, !dbg !8677
  %bf.load25 = load i16, i16* %no_stack_reg_p24, align 4, !dbg !8677
  %bf.value26 = and i16 %59, 1, !dbg !8677
  %bf.shl27 = shl i16 %bf.value26, 4, !dbg !8677
  %bf.clear28 = and i16 %bf.load25, -17, !dbg !8677
  %bf.set29 = or i16 %bf.clear28, %bf.shl27, !dbg !8677
  store i16 %bf.set29, i16* %no_stack_reg_p24, align 4, !dbg !8677
  %bf.result.cast30 = zext i16 %bf.value26 to i32, !dbg !8677
  %60 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8678
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %60, i32 0, i32 31, !dbg !8678
  %bf.load31 = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !8678
  %bf.lshr32 = lshr i16 %bf.load31, 5, !dbg !8678
  %bf.clear33 = and i16 %bf.lshr32, 1, !dbg !8678
  %bf.cast34 = zext i16 %bf.clear33 to i32, !dbg !8678
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8679
  %total_no_stack_reg_p35 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 31, !dbg !8679
  %62 = trunc i32 %bf.cast34 to i16, !dbg !8680
  %bf.load36 = load i16, i16* %total_no_stack_reg_p35, align 4, !dbg !8680
  %bf.value37 = and i16 %62, 1, !dbg !8680
  %bf.shl38 = shl i16 %bf.value37, 5, !dbg !8680
  %bf.clear39 = and i16 %bf.load36, -33, !dbg !8680
  %bf.set40 = or i16 %bf.clear39, %bf.shl38, !dbg !8680
  store i16 %bf.set40, i16* %total_no_stack_reg_p35, align 4, !dbg !8680
  %bf.result.cast41 = zext i16 %bf.value37 to i32, !dbg !8680
  %63 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8681
  %cmp = icmp sgt i32 %63, 2, !dbg !8683
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8684

land.lhs.true:                                    ; preds = %entry
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8685
  %cmp42 = icmp ne %struct._IO_FILE* %64, null, !dbg !8686
  br i1 %cmp42, label %if.then, label %if.end, !dbg !8687

if.then:                                          ; preds = %land.lhs.true
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8688
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)), !dbg !8690
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8691
  call void @ira_print_expanded_allocno(%struct.ira_allocno* %66), !dbg !8692
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8693
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !8694
  br label %if.end, !dbg !8695

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8696
  ret %struct.ira_allocno* %68, !dbg !8697
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocate_and_copy_costs(i32** %vec, i32 %cover_class, i32* %src) #0 !dbg !8698 {
entry:
  %vec.addr = alloca i32**, align 8
  %cover_class.addr = alloca i32, align 4
  %src.addr = alloca i32*, align 8
  %len = alloca i32, align 4
  store i32** %vec, i32*** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %vec.addr, metadata !8699, metadata !DIExpression()), !dbg !8700
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !8701, metadata !DIExpression()), !dbg !8702
  store i32* %src, i32** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %src.addr, metadata !8703, metadata !DIExpression()), !dbg !8704
  call void @llvm.dbg.declare(metadata i32* %len, metadata !8705, metadata !DIExpression()), !dbg !8706
  %0 = load i32**, i32*** %vec.addr, align 8, !dbg !8707
  %1 = load i32*, i32** %0, align 8, !dbg !8709
  %cmp = icmp ne i32* %1, null, !dbg !8710
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8711

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32*, i32** %src.addr, align 8, !dbg !8712
  %cmp1 = icmp eq i32* %2, null, !dbg !8713
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8714

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !8715

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %cover_class.addr, align 4, !dbg !8716
  %call = call i32* @ira_allocate_cost_vector(i32 %3), !dbg !8717
  %4 = load i32**, i32*** %vec.addr, align 8, !dbg !8718
  store i32* %call, i32** %4, align 8, !dbg !8719
  %5 = load i32, i32* %cover_class.addr, align 4, !dbg !8720
  %idxprom = zext i32 %5 to i64, !dbg !8721
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom, !dbg !8721
  %6 = load i32, i32* %arrayidx, align 4, !dbg !8721
  store i32 %6, i32* %len, align 4, !dbg !8722
  %7 = load i32**, i32*** %vec.addr, align 8, !dbg !8723
  %8 = load i32*, i32** %7, align 8, !dbg !8724
  %9 = bitcast i32* %8 to i8*, !dbg !8725
  %10 = load i32*, i32** %src.addr, align 8, !dbg !8726
  %11 = bitcast i32* %10 to i8*, !dbg !8725
  %12 = load i32, i32* %len, align 4, !dbg !8727
  %conv = sext i32 %12 to i64, !dbg !8727
  %mul = mul i64 4, %conv, !dbg !8728
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %11, i64 %mul, i1 false), !dbg !8725
  br label %return, !dbg !8729

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8729
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @allocno_range_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !8730 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %diff = alloca i32, align 4
  %a1 = alloca %struct.ira_allocno*, align 8
  %a2 = alloca %struct.ira_allocno*, align 8
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !8731, metadata !DIExpression()), !dbg !8732
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !8733, metadata !DIExpression()), !dbg !8734
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !8735, metadata !DIExpression()), !dbg !8736
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1, metadata !8737, metadata !DIExpression()), !dbg !8738
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !8739
  %1 = bitcast i8* %0 to %struct.ira_allocno**, !dbg !8740
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %1, align 8, !dbg !8741
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a1, align 8, !dbg !8738
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2, metadata !8742, metadata !DIExpression()), !dbg !8743
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !8744
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !8745
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %4, align 8, !dbg !8746
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a2, align 8, !dbg !8743
  %6 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !8747
  %cmp = icmp ne i32 %6, 1, !dbg !8749
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8750

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !8751
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 9, !dbg !8751
  %8 = load i32, i32* %cover_class, align 8, !dbg !8751
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !8752
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 9, !dbg !8752
  %10 = load i32, i32* %cover_class1, align 8, !dbg !8752
  %sub = sub i32 %8, %10, !dbg !8753
  store i32 %sub, i32* %diff, align 4, !dbg !8754
  %cmp2 = icmp ne i32 %sub, 0, !dbg !8755
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8756

if.then:                                          ; preds = %land.lhs.true
  %11 = load i32, i32* %diff, align 4, !dbg !8757
  store i32 %11, i32* %retval, align 4, !dbg !8758
  br label %return, !dbg !8758

if.end:                                           ; preds = %land.lhs.true, %entry
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !8759
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 21, !dbg !8759
  %13 = load i32, i32* %min, align 8, !dbg !8759
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !8761
  %min3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 21, !dbg !8761
  %15 = load i32, i32* %min3, align 8, !dbg !8761
  %sub4 = sub nsw i32 %13, %15, !dbg !8762
  store i32 %sub4, i32* %diff, align 4, !dbg !8763
  %cmp5 = icmp ne i32 %sub4, 0, !dbg !8764
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !8765

if.then6:                                         ; preds = %if.end
  %16 = load i32, i32* %diff, align 4, !dbg !8766
  store i32 %16, i32* %retval, align 4, !dbg !8767
  br label %return, !dbg !8767

if.end7:                                          ; preds = %if.end
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !8768
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 22, !dbg !8768
  %18 = load i32, i32* %max, align 4, !dbg !8768
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !8770
  %max8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 22, !dbg !8770
  %20 = load i32, i32* %max8, align 4, !dbg !8770
  %sub9 = sub nsw i32 %18, %20, !dbg !8771
  store i32 %sub9, i32* %diff, align 4, !dbg !8772
  %cmp10 = icmp ne i32 %sub9, 0, !dbg !8773
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !8774

if.then11:                                        ; preds = %if.end7
  %21 = load i32, i32* %diff, align 4, !dbg !8775
  store i32 %21, i32* %retval, align 4, !dbg !8776
  br label %return, !dbg !8776

if.end12:                                         ; preds = %if.end7
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !8777
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 0, !dbg !8777
  %23 = load i32, i32* %num, align 8, !dbg !8777
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !8778
  %num13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 0, !dbg !8778
  %25 = load i32, i32* %num13, align 8, !dbg !8778
  %sub14 = sub nsw i32 %23, %25, !dbg !8779
  store i32 %sub14, i32* %retval, align 4, !dbg !8780
  br label %return, !dbg !8780

return:                                           ; preds = %if.end12, %if.then11, %if.then6, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !8781
  ret i32 %26, !dbg !8781
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ira_copy_t_heap_free(%struct.VEC_ira_copy_t_heap** %vec_) #0 !dbg !8782 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_copy_t_heap**, align 8
  store %struct.VEC_ira_copy_t_heap** %vec_, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_copy_t_heap*** %vec_.addr, metadata !8785, metadata !DIExpression()), !dbg !8786
  %0 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !8787
  %1 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %0, align 8, !dbg !8787
  %tobool = icmp ne %struct.VEC_ira_copy_t_heap* %1, null, !dbg !8787
  br i1 %tobool, label %if.then, label %if.end, !dbg !8786

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !8787
  %3 = load %struct.VEC_ira_copy_t_heap*, %struct.VEC_ira_copy_t_heap** %2, align 8, !dbg !8787
  %4 = bitcast %struct.VEC_ira_copy_t_heap* %3 to i8*, !dbg !8787
  call void @free(i8* %4), !dbg !8787
  br label %if.end, !dbg !8787

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ira_copy_t_heap**, %struct.VEC_ira_copy_t_heap*** %vec_.addr, align 8, !dbg !8786
  store %struct.VEC_ira_copy_t_heap* null, %struct.VEC_ira_copy_t_heap** %5, align 8, !dbg !8786
  ret void, !dbg !8786
}

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ira_allocno_t_heap_free(%struct.VEC_ira_allocno_t_heap** %vec_) #0 !dbg !8789 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_heap**, align 8
  store %struct.VEC_ira_allocno_t_heap** %vec_, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_heap*** %vec_.addr, metadata !8792, metadata !DIExpression()), !dbg !8793
  %0 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !8794
  %1 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %0, align 8, !dbg !8794
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %1, null, !dbg !8794
  br i1 %tobool, label %if.then, label %if.end, !dbg !8793

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !8794
  %3 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %2, align 8, !dbg !8794
  %4 = bitcast %struct.VEC_ira_allocno_t_heap* %3 to i8*, !dbg !8794
  call void @free(i8* %4), !dbg !8794
  br label %if.end, !dbg !8794

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !8793
  store %struct.VEC_ira_allocno_t_heap* null, %struct.VEC_ira_allocno_t_heap** %5, align 8, !dbg !8793
  ret void, !dbg !8793
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2069, !2070, !2071}
!llvm.ident = !{!2072}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "allocno_pool", scope: !2, file: !3, line: 386, type: !2017, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !696, globals: !1993, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ira-build.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !143, !147, !153, !158, !163, !182, !189, !196, !390, !420, !563, !686, !692}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !135, line: 31, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142}
!137 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!143 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !135, line: 91, baseType: !7, size: 32, elements: !144)
!144 = !{!145, !146}
!145 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!146 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !148, line: 363, baseType: !7, size: 32, elements: !149)
!148 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!149 = !{!150, !151, !152}
!150 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!151 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!152 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!153 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !148, line: 355, baseType: !7, size: 32, elements: !154)
!154 = !{!155, !156, !157}
!155 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!156 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!157 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !159, line: 1188, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419}
!392 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!396 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!397 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!398 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!399 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!400 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!401 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!402 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!403 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!404 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!405 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!406 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!407 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!408 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!409 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!410 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!411 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!412 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!413 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!414 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!415 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!416 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!417 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!418 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!419 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!420 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !421, line: 45, baseType: !7, size: 32, elements: !422)
!421 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!422 = !{!423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562}
!423 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!424 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!425 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!426 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!427 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!428 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!429 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!430 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!431 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!432 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!433 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!434 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!435 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!436 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!437 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!438 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!439 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!440 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!441 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!442 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!443 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!444 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!445 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!446 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!447 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!448 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!449 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!450 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!451 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!452 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!453 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!454 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!455 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!456 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!457 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!458 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!459 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!460 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!461 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!462 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!463 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!464 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!465 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!466 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!467 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!468 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!469 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!470 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!471 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!472 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!473 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!474 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!475 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!476 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!477 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!478 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!479 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!480 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!481 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!482 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!483 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!484 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!485 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!486 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!487 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!488 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!489 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!490 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!491 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!492 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!493 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!494 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!495 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!496 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!497 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!498 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!499 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!500 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!501 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!502 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!503 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!504 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!505 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!506 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!507 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!508 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!509 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!510 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!511 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!512 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!513 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!514 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!515 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!516 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!517 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!518 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!519 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!520 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!521 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!522 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!523 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!524 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!525 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!526 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!527 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!528 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!529 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!530 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!531 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!532 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!533 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!534 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!535 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!536 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!537 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!538 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!539 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!540 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!541 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!542 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!543 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!544 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!545 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!546 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!547 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!548 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!549 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!550 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!551 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!552 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!553 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!554 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!555 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!556 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!557 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!558 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!559 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!560 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!561 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!562 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!563 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !564, line: 82, baseType: !7, size: 32, elements: !565)
!564 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!565 = !{!566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685}
!566 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!567 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!568 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!569 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!570 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!571 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!572 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!573 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!574 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!575 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!576 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!577 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!578 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!579 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!580 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!581 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!582 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!583 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!584 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!585 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!586 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!587 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!588 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!589 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!590 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!591 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!592 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!593 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!594 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!595 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!596 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!597 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!598 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!599 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!600 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!601 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!602 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!603 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!604 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!605 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!606 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!608 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!609 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!613 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!614 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!615 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!616 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!617 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!618 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!619 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!620 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!621 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!622 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!623 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!625 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!626 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!627 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!628 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!629 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!630 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!631 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!632 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!633 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!634 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!635 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!636 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!637 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!638 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!639 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!640 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!641 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!643 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!644 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!645 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!646 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!648 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!685 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!686 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_region", file: !687, line: 228, baseType: !7, size: 32, elements: !688)
!687 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!688 = !{!689, !690, !691}
!689 = !DIEnumerator(name: "IRA_REGION_ONE", value: 0, isUnsigned: true)
!690 = !DIEnumerator(name: "IRA_REGION_ALL", value: 1, isUnsigned: true)
!691 = !DIEnumerator(name: "IRA_REGION_MIXED", value: 2, isUnsigned: true)
!692 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_algorithm", file: !687, line: 219, baseType: !7, size: 32, elements: !693)
!693 = !{!694, !695}
!694 = !DIEnumerator(name: "IRA_ALGORITHM_CB", value: 0, isUnsigned: true)
!695 = !DIEnumerator(name: "IRA_ALGORITHM_PRIORITY", value: 1, isUnsigned: true)
!696 = !{!697, !819, !5, !1858, !1898, !1878, !1934, !703, !1943, !7, !1955, !804, !798, !1956, !1156, !1845, !1104, !420, !1968, !1976, !1977, !1979, !1991}
!697 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_t", file: !698, line: 63, baseType: !699)
!698 = !DIFile(filename: "./ira-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !700, size: 64)
!700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno", file: !698, line: 232, size: 1984, elements: !701)
!701 = !{!702, !704, !705, !706, !707, !1842, !1843, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1893, !1894, !1895, !1896, !1897, !1908, !1909, !1910, !1911, !1912, !1913, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942}
!702 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !700, file: !698, line: 237, baseType: !703, size: 32)
!703 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !700, file: !698, line: 239, baseType: !703, size: 32, offset: 32)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !700, file: !698, line: 242, baseType: !5, size: 32, offset: 64)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "hard_regno", scope: !700, file: !698, line: 249, baseType: !703, size: 32, offset: 96)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !700, file: !698, line: 251, baseType: !708, size: 64, offset: 128)
!708 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !709, line: 50, baseType: !710)
!709 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !711, size: 64)
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !421, line: 240, size: 384, elements: !712)
!712 = !{!713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723}
!713 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !711, file: !421, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !711, file: !421, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !711, file: !421, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !711, file: !421, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !711, file: !421, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !711, file: !421, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !711, file: !421, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !711, file: !421, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !711, file: !421, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !711, file: !421, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !711, file: !421, line: 321, baseType: !724, size: 320, offset: 64)
!724 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !421, line: 315, size: 320, elements: !725)
!725 = !{!726, !1777, !1779, !1840, !1841}
!726 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !724, file: !421, line: 316, baseType: !727, size: 64)
!727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !728, size: 64, elements: !746)
!728 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !421, line: 183, baseType: !729)
!729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !421, line: 166, size: 64, elements: !730)
!730 = !{!731, !732, !733, !737, !738, !748, !749, !761, !764, !828, !1755, !1756, !1767, !1774}
!731 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !729, file: !421, line: 168, baseType: !703, size: 32)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !729, file: !421, line: 169, baseType: !7, size: 32)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !729, file: !421, line: 170, baseType: !734, size: 64)
!734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !735, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !736)
!736 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !729, file: !421, line: 171, baseType: !708, size: 64)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !729, file: !421, line: 172, baseType: !739, size: 64)
!739 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !709, line: 53, baseType: !740)
!740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !741, size: 64)
!741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !421, line: 359, size: 128, elements: !742)
!742 = !{!743, !744}
!743 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !741, file: !421, line: 360, baseType: !703, size: 32)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !741, file: !421, line: 361, baseType: !745, size: 64, offset: 64)
!745 = !DICompositeType(tag: DW_TAG_array_type, baseType: !708, size: 64, elements: !746)
!746 = !{!747}
!747 = !DISubrange(count: 1)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !729, file: !421, line: 173, baseType: !5, size: 32)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !729, file: !421, line: 174, baseType: !750, size: 32)
!750 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !421, line: 133, baseType: !751)
!751 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !421, line: 115, size: 32, elements: !752)
!752 = !{!753, !754, !755, !756, !757, !758, !759, !760}
!753 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !751, file: !421, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !751, file: !421, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !751, file: !421, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !751, file: !421, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !751, file: !421, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !751, file: !421, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !751, file: !421, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !751, file: !421, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !729, file: !421, line: 175, baseType: !762, size: 64)
!762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !763, size: 64)
!763 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !421, line: 175, flags: DIFlagFwdDecl)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !729, file: !421, line: 176, baseType: !765, size: 64)
!765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !766, size: 64)
!766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !767, line: 75, size: 256, elements: !768)
!767 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!768 = !{!769, !784, !785, !786}
!769 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !766, file: !767, line: 76, baseType: !770, size: 64)
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !771, size: 64)
!771 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !767, line: 68, baseType: !772)
!772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !767, line: 63, size: 320, elements: !773)
!773 = !{!774, !776, !777, !778}
!774 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !772, file: !767, line: 64, baseType: !775, size: 64)
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !772, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !772, file: !767, line: 65, baseType: !775, size: 64, offset: 64)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !772, file: !767, line: 66, baseType: !7, size: 32, offset: 128)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !772, file: !767, line: 67, baseType: !779, size: 128, offset: 192)
!779 = !DICompositeType(tag: DW_TAG_array_type, baseType: !780, size: 128, elements: !782)
!780 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !767, line: 29, baseType: !781)
!781 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!782 = !{!783}
!783 = !DISubrange(count: 2)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !766, file: !767, line: 77, baseType: !770, size: 64, offset: 64)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !766, file: !767, line: 78, baseType: !7, size: 32, offset: 128)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !766, file: !767, line: 79, baseType: !787, size: 64, offset: 192)
!787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !788, size: 64)
!788 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !767, line: 49, baseType: !789)
!789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !767, line: 45, size: 832, elements: !790)
!790 = !{!791, !792, !793}
!791 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !789, file: !767, line: 46, baseType: !775, size: 64)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !789, file: !767, line: 47, baseType: !765, size: 64, offset: 64)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !789, file: !767, line: 48, baseType: !794, size: 704, offset: 128)
!794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !795, line: 164, size: 704, elements: !796)
!795 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!796 = !{!797, !799, !810, !811, !812, !813, !814, !815, !820, !824, !825, !826, !827}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !794, file: !795, line: 166, baseType: !798, size: 64)
!798 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !794, file: !795, line: 167, baseType: !800, size: 64, offset: 64)
!800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !801, size: 64)
!801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !795, line: 157, size: 192, elements: !802)
!802 = !{!803, !805, !806}
!803 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !801, file: !795, line: 159, baseType: !804, size: 64)
!804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !736, size: 64)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !801, file: !795, line: 160, baseType: !800, size: 64, offset: 64)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !801, file: !795, line: 161, baseType: !807, size: 32, offset: 128)
!807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !736, size: 32, elements: !808)
!808 = !{!809}
!809 = !DISubrange(count: 4)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !794, file: !795, line: 168, baseType: !804, size: 64, offset: 128)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !794, file: !795, line: 169, baseType: !804, size: 64, offset: 192)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !794, file: !795, line: 170, baseType: !804, size: 64, offset: 256)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !794, file: !795, line: 171, baseType: !798, size: 64, offset: 320)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !794, file: !795, line: 172, baseType: !703, size: 32, offset: 384)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !794, file: !795, line: 176, baseType: !816, size: 64, offset: 448)
!816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !817, size: 64)
!817 = !DISubroutineType(types: !818)
!818 = !{!800, !819, !798}
!819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !794, file: !795, line: 177, baseType: !821, size: 64, offset: 512)
!821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !822, size: 64)
!822 = !DISubroutineType(types: !823)
!823 = !{null, !819, !800}
!824 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !794, file: !795, line: 178, baseType: !819, size: 64, offset: 576)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !794, file: !795, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !794, file: !795, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !794, file: !795, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !729, file: !421, line: 177, baseType: !829, size: 64)
!829 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !709, line: 56, baseType: !830)
!830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !831, size: 64)
!831 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !832)
!832 = !{!833, !866, !872, !883, !902, !913, !918, !925, !931, !945, !957, !995, !1000, !1028, !1036, !1037, !1042, !1051, !1057, !1062, !1066, !1070, !1382, !1431, !1437, !1444, !1451, !1474, !1499, !1516, !1528, !1550, !1565, !1737}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !831, file: !164, line: 3372, baseType: !834, size: 64)
!834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !835)
!835 = !{!836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865}
!836 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !834, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !834, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !834, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !834, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !834, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !834, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !834, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !834, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !834, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !834, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !834, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !834, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !834, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !834, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !834, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !834, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !834, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !834, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !834, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !834, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !834, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !834, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !834, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !834, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !834, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !834, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !834, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !834, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !834, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !834, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !831, file: !164, line: 3373, baseType: !867, size: 192)
!867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !868)
!868 = !{!869, !870, !871}
!869 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !867, file: !164, line: 403, baseType: !834, size: 64)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !867, file: !164, line: 404, baseType: !829, size: 64, offset: 64)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !867, file: !164, line: 405, baseType: !829, size: 64, offset: 128)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !831, file: !164, line: 3374, baseType: !873, size: 320)
!873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !874)
!874 = !{!875, !876}
!875 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !873, file: !164, line: 1385, baseType: !867, size: 192)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !873, file: !164, line: 1386, baseType: !877, size: 128, offset: 192)
!877 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !878, line: 58, baseType: !879)
!878 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!879 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !878, line: 54, size: 128, elements: !880)
!880 = !{!881, !882}
!881 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !879, file: !878, line: 56, baseType: !781, size: 64)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !879, file: !878, line: 57, baseType: !798, size: 64, offset: 64)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !831, file: !164, line: 3375, baseType: !884, size: 256)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !885)
!885 = !{!886, !887}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !884, file: !164, line: 1398, baseType: !867, size: 192)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !884, file: !164, line: 1399, baseType: !888, size: 64, offset: 192)
!888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !889, size: 64)
!889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !890, line: 52, size: 256, elements: !891)
!890 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!891 = !{!892, !893, !894, !895, !896, !897, !898}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !889, file: !890, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !889, file: !890, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !889, file: !890, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !889, file: !890, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !889, file: !890, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !889, file: !890, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !889, file: !890, line: 62, baseType: !899, size: 192, offset: 64)
!899 = !DICompositeType(tag: DW_TAG_array_type, baseType: !781, size: 192, elements: !900)
!900 = !{!901}
!901 = !DISubrange(count: 3)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !831, file: !164, line: 3376, baseType: !903, size: 256)
!903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !904)
!904 = !{!905, !906}
!905 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !903, file: !164, line: 1409, baseType: !867, size: 192)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !903, file: !164, line: 1410, baseType: !907, size: 64, offset: 192)
!907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !908, size: 64)
!908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !909, line: 27, size: 192, elements: !910)
!909 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!910 = !{!911, !912}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !908, file: !909, line: 29, baseType: !877, size: 128)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !908, file: !909, line: 30, baseType: !5, size: 32, offset: 128)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !831, file: !164, line: 3377, baseType: !914, size: 256)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !915)
!915 = !{!916, !917}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !914, file: !164, line: 1438, baseType: !867, size: 192)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !914, file: !164, line: 1439, baseType: !829, size: 64, offset: 192)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !831, file: !164, line: 3378, baseType: !919, size: 256)
!919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !920)
!920 = !{!921, !922, !923}
!921 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !919, file: !164, line: 1419, baseType: !867, size: 192)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !919, file: !164, line: 1420, baseType: !703, size: 32, offset: 192)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !919, file: !164, line: 1421, baseType: !924, size: 8, offset: 224)
!924 = !DICompositeType(tag: DW_TAG_array_type, baseType: !736, size: 8, elements: !746)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !831, file: !164, line: 3379, baseType: !926, size: 320)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !927)
!927 = !{!928, !929, !930}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !926, file: !164, line: 1429, baseType: !867, size: 192)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !926, file: !164, line: 1430, baseType: !829, size: 64, offset: 192)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !926, file: !164, line: 1431, baseType: !829, size: 64, offset: 256)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !831, file: !164, line: 3380, baseType: !932, size: 320)
!932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !933)
!933 = !{!934, !935}
!934 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !932, file: !164, line: 1461, baseType: !867, size: 192)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !932, file: !164, line: 1462, baseType: !936, size: 128, offset: 192)
!936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !937, line: 31, size: 128, elements: !938)
!937 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!938 = !{!939, !943, !944}
!939 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !936, file: !937, line: 32, baseType: !940, size: 64)
!940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !941, size: 64)
!941 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !942)
!942 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !936, file: !937, line: 33, baseType: !7, size: 32, offset: 64)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !936, file: !937, line: 34, baseType: !7, size: 32, offset: 96)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !831, file: !164, line: 3381, baseType: !946, size: 384)
!946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !947)
!947 = !{!948, !949, !954, !955, !956}
!948 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !946, file: !164, line: 2508, baseType: !867, size: 192)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !946, file: !164, line: 2509, baseType: !950, size: 32, offset: 192)
!950 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !951, line: 58, baseType: !952)
!951 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!952 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !953, line: 44, baseType: !7)
!953 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!954 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !946, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !946, file: !164, line: 2511, baseType: !829, size: 64, offset: 256)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !946, file: !164, line: 2512, baseType: !829, size: 64, offset: 320)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !831, file: !164, line: 3382, baseType: !958, size: 896)
!958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !959)
!959 = !{!960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992}
!960 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !958, file: !164, line: 2653, baseType: !946, size: 384)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !958, file: !164, line: 2654, baseType: !829, size: 64, offset: 384)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !958, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !958, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !958, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !958, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !958, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !958, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !958, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !958, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !958, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !958, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !958, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !958, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !958, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !958, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !958, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !958, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !958, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !958, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !958, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !958, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !958, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !958, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !958, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !958, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !958, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !958, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !958, file: !164, line: 2705, baseType: !829, size: 64, offset: 576)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !958, file: !164, line: 2706, baseType: !829, size: 64, offset: 640)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !958, file: !164, line: 2707, baseType: !829, size: 64, offset: 704)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !958, file: !164, line: 2708, baseType: !829, size: 64, offset: 768)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !958, file: !164, line: 2711, baseType: !993, size: 64, offset: 832)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64)
!994 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !831, file: !164, line: 3383, baseType: !996, size: 960)
!996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !997)
!997 = !{!998, !999}
!998 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !996, file: !164, line: 2757, baseType: !958, size: 896)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !996, file: !164, line: 2758, baseType: !708, size: 64, offset: 896)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !831, file: !164, line: 3384, baseType: !1001, size: 1472)
!1001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !1002)
!1002 = !{!1003, !1024, !1025, !1026, !1027}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1001, file: !164, line: 3115, baseType: !1004, size: 1216)
!1004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !1005)
!1005 = !{!1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1004, file: !164, line: 2985, baseType: !996, size: 960)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1004, file: !164, line: 2986, baseType: !829, size: 64, offset: 960)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1004, file: !164, line: 2987, baseType: !829, size: 64, offset: 1024)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1004, file: !164, line: 2988, baseType: !829, size: 64, offset: 1088)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1004, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1004, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1004, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1004, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1004, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1004, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1004, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1004, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1004, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1004, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1004, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1004, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1004, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1004, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1001, file: !164, line: 3117, baseType: !829, size: 64, offset: 1216)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1001, file: !164, line: 3119, baseType: !829, size: 64, offset: 1280)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1001, file: !164, line: 3121, baseType: !829, size: 64, offset: 1344)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1001, file: !164, line: 3123, baseType: !829, size: 64, offset: 1408)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !831, file: !164, line: 3385, baseType: !1029, size: 1088)
!1029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !1030)
!1030 = !{!1031, !1032, !1033}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1029, file: !164, line: 2875, baseType: !996, size: 960)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1029, file: !164, line: 2876, baseType: !708, size: 64, offset: 960)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1029, file: !164, line: 2877, baseType: !1034, size: 64, offset: 1024)
!1034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1035, size: 64)
!1035 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !164, line: 2856, flags: DIFlagFwdDecl)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !831, file: !164, line: 3386, baseType: !1004, size: 1216)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !831, file: !164, line: 3387, baseType: !1038, size: 1280)
!1038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !1039)
!1039 = !{!1040, !1041}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1038, file: !164, line: 3094, baseType: !1004, size: 1216)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1038, file: !164, line: 3095, baseType: !1034, size: 64, offset: 1216)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !831, file: !164, line: 3388, baseType: !1043, size: 1216)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !1044)
!1044 = !{!1045, !1046, !1047, !1048, !1049, !1050}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1043, file: !164, line: 2825, baseType: !958, size: 896)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1043, file: !164, line: 2827, baseType: !829, size: 64, offset: 896)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1043, file: !164, line: 2828, baseType: !829, size: 64, offset: 960)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1043, file: !164, line: 2829, baseType: !829, size: 64, offset: 1024)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1043, file: !164, line: 2830, baseType: !829, size: 64, offset: 1088)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1043, file: !164, line: 2831, baseType: !829, size: 64, offset: 1152)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !831, file: !164, line: 3389, baseType: !1052, size: 1024)
!1052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !1053)
!1053 = !{!1054, !1055, !1056}
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1052, file: !164, line: 2851, baseType: !996, size: 960)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1052, file: !164, line: 2852, baseType: !703, size: 32, offset: 960)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1052, file: !164, line: 2853, baseType: !703, size: 32, offset: 992)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !831, file: !164, line: 3390, baseType: !1058, size: 1024)
!1058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !1059)
!1059 = !{!1060, !1061}
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1058, file: !164, line: 2858, baseType: !996, size: 960)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1058, file: !164, line: 2859, baseType: !1034, size: 64, offset: 960)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !831, file: !164, line: 3391, baseType: !1063, size: 960)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !1064)
!1064 = !{!1065}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1063, file: !164, line: 2863, baseType: !996, size: 960)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !831, file: !164, line: 3392, baseType: !1067, size: 1472)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !1068)
!1068 = !{!1069}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1067, file: !164, line: 3305, baseType: !1001, size: 1472)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !831, file: !164, line: 3393, baseType: !1071, size: 1792)
!1071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !1072)
!1072 = !{!1073, !1074, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1071, file: !164, line: 3249, baseType: !1001, size: 1472)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1071, file: !164, line: 3251, baseType: !1075, size: 64, offset: 1472)
!1075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1076, size: 64)
!1076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1077, line: 463, size: 1152, elements: !1078)
!1077 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1078 = !{!1079, !1082, !1242, !1243, !1246, !1305, !1306, !1307, !1308, !1309, !1310, !1334, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1076, file: !1077, line: 464, baseType: !1080, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1081, size: 64)
!1081 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1077, line: 464, flags: DIFlagFwdDecl)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1076, file: !1077, line: 467, baseType: !1083, size: 64, offset: 64)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !148, line: 374, size: 640, elements: !1085)
!1085 = !{!1086, !1217, !1218, !1231, !1232, !1233, !1234, !1235, !1236, !1238, !1240, !1241}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1084, file: !148, line: 377, baseType: !1087, size: 64)
!1087 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !709, line: 111, baseType: !1088)
!1088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1089, size: 64)
!1089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !148, line: 217, size: 832, elements: !1090)
!1090 = !{!1091, !1126, !1127, !1128, !1187, !1191, !1192, !1193, !1211, !1212, !1213, !1214, !1215, !1216}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1089, file: !148, line: 219, baseType: !1092, size: 64)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !148, line: 151, baseType: !1094)
!1094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !148, line: 151, size: 128, elements: !1095)
!1095 = !{!1096}
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1094, file: !148, line: 151, baseType: !1097, size: 128)
!1097 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !148, line: 150, baseType: !1098)
!1098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !148, line: 150, size: 128, elements: !1099)
!1099 = !{!1100, !1101, !1102}
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1098, file: !148, line: 150, baseType: !7, size: 32)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1098, file: !148, line: 150, baseType: !7, size: 32, offset: 32)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1098, file: !148, line: 150, baseType: !1103, size: 64, offset: 64)
!1103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1104, size: 64, elements: !746)
!1104 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !709, line: 108, baseType: !1105)
!1105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1106, size: 64)
!1106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !148, line: 122, size: 512, elements: !1107)
!1107 = !{!1108, !1109, !1110, !1118, !1119, !1120, !1121, !1122, !1123, !1124}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1106, file: !148, line: 124, baseType: !1088, size: 64)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1106, file: !148, line: 125, baseType: !1088, size: 64, offset: 64)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1106, file: !148, line: 131, baseType: !1111, size: 64, offset: 128)
!1111 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !148, line: 128, size: 64, elements: !1112)
!1112 = !{!1113, !1117}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1111, file: !148, line: 129, baseType: !1114, size: 64)
!1114 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !709, line: 66, baseType: !1115)
!1115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1116, size: 64)
!1116 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !709, line: 65, flags: DIFlagFwdDecl)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1111, file: !148, line: 130, baseType: !708, size: 64)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1106, file: !148, line: 134, baseType: !819, size: 64, offset: 192)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1106, file: !148, line: 137, baseType: !829, size: 64, offset: 256)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1106, file: !148, line: 138, baseType: !950, size: 32, offset: 320)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1106, file: !148, line: 142, baseType: !7, size: 32, offset: 352)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1106, file: !148, line: 144, baseType: !703, size: 32, offset: 384)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1106, file: !148, line: 145, baseType: !703, size: 32, offset: 416)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1106, file: !148, line: 146, baseType: !1125, size: 64, offset: 448)
!1125 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !148, line: 119, baseType: !798)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1089, file: !148, line: 220, baseType: !1092, size: 64, offset: 64)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1089, file: !148, line: 223, baseType: !819, size: 64, offset: 128)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1089, file: !148, line: 226, baseType: !1129, size: 64, offset: 192)
!1129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1130, size: 64)
!1130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 100, size: 1216, elements: !1131)
!1131 = !{!1132, !1133, !1134, !1135, !1136, !1141, !1142, !1143, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1177, !1185, !1186}
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1130, file: !135, line: 102, baseType: !703, size: 32)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1130, file: !135, line: 105, baseType: !7, size: 32, offset: 32)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1130, file: !135, line: 108, baseType: !1088, size: 64, offset: 64)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1130, file: !135, line: 111, baseType: !1088, size: 64, offset: 128)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1130, file: !135, line: 114, baseType: !1137, size: 64, offset: 192)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !135, line: 41, size: 64, elements: !1138)
!1138 = !{!1139, !1140}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1137, file: !135, line: 42, baseType: !134, size: 32)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1137, file: !135, line: 43, baseType: !7, size: 32, offset: 32)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1130, file: !135, line: 117, baseType: !7, size: 32, offset: 256)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1130, file: !135, line: 120, baseType: !7, size: 32, offset: 288)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1130, file: !135, line: 123, baseType: !1144, size: 64, offset: 320)
!1144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1145, size: 64)
!1145 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !135, line: 87, baseType: !1146)
!1146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !135, line: 87, size: 128, elements: !1147)
!1147 = !{!1148}
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1146, file: !135, line: 87, baseType: !1149, size: 128)
!1149 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !135, line: 85, baseType: !1150)
!1150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !135, line: 85, size: 128, elements: !1151)
!1151 = !{!1152, !1153, !1154}
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1150, file: !135, line: 85, baseType: !7, size: 32)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1150, file: !135, line: 85, baseType: !7, size: 32, offset: 32)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1150, file: !135, line: 85, baseType: !1155, size: 64, offset: 64)
!1155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1156, size: 64, elements: !746)
!1156 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !135, line: 84, baseType: !1129)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1130, file: !135, line: 126, baseType: !1129, size: 64, offset: 384)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1130, file: !135, line: 129, baseType: !1129, size: 64, offset: 448)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1130, file: !135, line: 132, baseType: !819, size: 64, offset: 512)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1130, file: !135, line: 139, baseType: !829, size: 64, offset: 576)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1130, file: !135, line: 143, baseType: !877, size: 128, offset: 640)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1130, file: !135, line: 146, baseType: !877, size: 128, offset: 768)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1130, file: !135, line: 148, baseType: !942, size: 8, offset: 896)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1130, file: !135, line: 149, baseType: !942, size: 8, offset: 904)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1130, file: !135, line: 153, baseType: !143, size: 32, offset: 928)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1130, file: !135, line: 156, baseType: !1167, size: 64, offset: 960)
!1167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1168, size: 64)
!1168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !135, line: 48, size: 320, elements: !1169)
!1169 = !{!1170, !1174, !1175, !1176}
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1168, file: !135, line: 50, baseType: !1171, size: 64)
!1171 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !709, line: 58, baseType: !1172)
!1172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 64)
!1173 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !709, line: 57, flags: DIFlagFwdDecl)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1168, file: !135, line: 59, baseType: !877, size: 128, offset: 64)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1168, file: !135, line: 64, baseType: !942, size: 8, offset: 192)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1168, file: !135, line: 67, baseType: !1167, size: 64, offset: 256)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1130, file: !135, line: 159, baseType: !1178, size: 64, offset: 1024)
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1179, size: 64)
!1179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !135, line: 72, size: 256, elements: !1180)
!1180 = !{!1181, !1182, !1183, !1184}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1179, file: !135, line: 74, baseType: !1105, size: 64)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1179, file: !135, line: 77, baseType: !1178, size: 64, offset: 64)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1179, file: !135, line: 78, baseType: !1178, size: 64, offset: 128)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1179, file: !135, line: 81, baseType: !1178, size: 64, offset: 192)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1130, file: !135, line: 162, baseType: !942, size: 8, offset: 1088)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1130, file: !135, line: 166, baseType: !829, size: 64, offset: 1152)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1089, file: !148, line: 229, baseType: !1188, size: 128, offset: 256)
!1188 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1189, size: 128, elements: !782)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !148, line: 229, flags: DIFlagFwdDecl)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1089, file: !148, line: 232, baseType: !1088, size: 64, offset: 384)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1089, file: !148, line: 233, baseType: !1088, size: 64, offset: 448)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1089, file: !148, line: 238, baseType: !1194, size: 64, offset: 512)
!1194 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !148, line: 235, size: 64, elements: !1195)
!1195 = !{!1196, !1202}
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1194, file: !148, line: 236, baseType: !1197, size: 64)
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64)
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !148, line: 273, size: 128, elements: !1199)
!1199 = !{!1200, !1201}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1198, file: !148, line: 275, baseType: !1114, size: 64)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1198, file: !148, line: 278, baseType: !1114, size: 64, offset: 64)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1194, file: !148, line: 237, baseType: !1203, size: 64)
!1203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !148, line: 259, size: 320, elements: !1205)
!1205 = !{!1206, !1207, !1208, !1209, !1210}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1204, file: !148, line: 261, baseType: !708, size: 64)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1204, file: !148, line: 262, baseType: !708, size: 64, offset: 64)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1204, file: !148, line: 266, baseType: !708, size: 64, offset: 128)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1204, file: !148, line: 267, baseType: !708, size: 64, offset: 192)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1204, file: !148, line: 270, baseType: !703, size: 32, offset: 256)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1089, file: !148, line: 241, baseType: !1125, size: 64, offset: 576)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1089, file: !148, line: 244, baseType: !703, size: 32, offset: 640)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1089, file: !148, line: 247, baseType: !703, size: 32, offset: 672)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1089, file: !148, line: 250, baseType: !703, size: 32, offset: 704)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1089, file: !148, line: 253, baseType: !703, size: 32, offset: 736)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1089, file: !148, line: 256, baseType: !703, size: 32, offset: 768)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1084, file: !148, line: 378, baseType: !1087, size: 64, offset: 64)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1084, file: !148, line: 381, baseType: !1219, size: 64, offset: 128)
!1219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1220, size: 64)
!1220 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !148, line: 282, baseType: !1221)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !148, line: 282, size: 128, elements: !1222)
!1222 = !{!1223}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1221, file: !148, line: 282, baseType: !1224, size: 128)
!1224 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !148, line: 281, baseType: !1225)
!1225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !148, line: 281, size: 128, elements: !1226)
!1226 = !{!1227, !1228, !1229}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1225, file: !148, line: 281, baseType: !7, size: 32)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1225, file: !148, line: 281, baseType: !7, size: 32, offset: 32)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1225, file: !148, line: 281, baseType: !1230, size: 64, offset: 64)
!1230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1087, size: 64, elements: !746)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1084, file: !148, line: 384, baseType: !703, size: 32, offset: 192)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1084, file: !148, line: 387, baseType: !703, size: 32, offset: 224)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1084, file: !148, line: 390, baseType: !703, size: 32, offset: 256)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1084, file: !148, line: 394, baseType: !1219, size: 64, offset: 320)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1084, file: !148, line: 396, baseType: !147, size: 32, offset: 384)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1084, file: !148, line: 399, baseType: !1237, size: 64, offset: 416)
!1237 = !DICompositeType(tag: DW_TAG_array_type, baseType: !153, size: 64, elements: !782)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1084, file: !148, line: 402, baseType: !1239, size: 64, offset: 480)
!1239 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !782)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1084, file: !148, line: 406, baseType: !703, size: 32, offset: 544)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1084, file: !148, line: 409, baseType: !703, size: 32, offset: 576)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1076, file: !1077, line: 470, baseType: !1115, size: 64, offset: 128)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1076, file: !1077, line: 473, baseType: !1244, size: 64, offset: 192)
!1244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1245, size: 64)
!1245 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1077, line: 166, flags: DIFlagFwdDecl)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1076, file: !1077, line: 476, baseType: !1247, size: 64, offset: 256)
!1247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!1248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !135, line: 187, size: 256, elements: !1249)
!1249 = !{!1250, !1251, !1252, !1304}
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1248, file: !135, line: 189, baseType: !703, size: 32)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1248, file: !135, line: 192, baseType: !1144, size: 64, offset: 64)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1248, file: !135, line: 197, baseType: !1253, size: 64, offset: 128)
!1253 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1254, line: 144, baseType: !1255)
!1254 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1256, size: 64)
!1256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1254, line: 100, size: 896, elements: !1257)
!1257 = !{!1258, !1266, !1271, !1276, !1278, !1281, !1282, !1283, !1284, !1285, !1290, !1292, !1293, !1298, !1303}
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1256, file: !1254, line: 102, baseType: !1259, size: 64)
!1259 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1254, line: 52, baseType: !1260)
!1260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1261, size: 64)
!1261 = !DISubroutineType(types: !1262)
!1262 = !{!1263, !1264}
!1263 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1254, line: 47, baseType: !7)
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1256, file: !1254, line: 105, baseType: !1267, size: 64, offset: 64)
!1267 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1254, line: 59, baseType: !1268)
!1268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1269, size: 64)
!1269 = !DISubroutineType(types: !1270)
!1270 = !{!703, !1264, !1264}
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1256, file: !1254, line: 108, baseType: !1272, size: 64, offset: 128)
!1272 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1254, line: 63, baseType: !1273)
!1273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1274, size: 64)
!1274 = !DISubroutineType(types: !1275)
!1275 = !{null, !819}
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1256, file: !1254, line: 111, baseType: !1277, size: 64, offset: 192)
!1277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !819, size: 64)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1256, file: !1254, line: 114, baseType: !1279, size: 64, offset: 256)
!1279 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1280, line: 46, baseType: !781)
!1280 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1256, file: !1254, line: 117, baseType: !1279, size: 64, offset: 320)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1256, file: !1254, line: 120, baseType: !1279, size: 64, offset: 384)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1256, file: !1254, line: 124, baseType: !7, size: 32, offset: 448)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1256, file: !1254, line: 128, baseType: !7, size: 32, offset: 480)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1256, file: !1254, line: 131, baseType: !1286, size: 64, offset: 512)
!1286 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1254, line: 75, baseType: !1287)
!1287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1288, size: 64)
!1288 = !DISubroutineType(types: !1289)
!1289 = !{!819, !1279, !1279}
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1256, file: !1254, line: 132, baseType: !1291, size: 64, offset: 576)
!1291 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1254, line: 78, baseType: !1273)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1256, file: !1254, line: 135, baseType: !819, size: 64, offset: 640)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1256, file: !1254, line: 136, baseType: !1294, size: 64, offset: 704)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1254, line: 82, baseType: !1295)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = !DISubroutineType(types: !1297)
!1297 = !{!819, !819, !1279, !1279}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1256, file: !1254, line: 137, baseType: !1299, size: 64, offset: 768)
!1299 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1254, line: 83, baseType: !1300)
!1300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1301, size: 64)
!1301 = !DISubroutineType(types: !1302)
!1302 = !{null, !819, !819}
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1256, file: !1254, line: 141, baseType: !7, size: 32, offset: 832)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1248, file: !135, line: 200, baseType: !1129, size: 64, offset: 192)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1076, file: !1077, line: 479, baseType: !1253, size: 64, offset: 320)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1076, file: !1077, line: 484, baseType: !829, size: 64, offset: 384)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1076, file: !1077, line: 488, baseType: !829, size: 64, offset: 448)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1076, file: !1077, line: 493, baseType: !829, size: 64, offset: 512)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1076, file: !1077, line: 496, baseType: !829, size: 64, offset: 576)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1076, file: !1077, line: 501, baseType: !1311, size: 64, offset: 640)
!1311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1312, size: 64)
!1312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !1313)
!1313 = !{!1314, !1317, !1318, !1319, !1320, !1322, !1323, !1328, !1329, !1330, !1331, !1332, !1333}
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1312, file: !159, line: 2356, baseType: !1315, size: 64)
!1315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1316, size: 64)
!1316 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1312, file: !159, line: 2357, baseType: !734, size: 64, offset: 64)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1312, file: !159, line: 2358, baseType: !703, size: 32, offset: 128)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1312, file: !159, line: 2359, baseType: !703, size: 32, offset: 160)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1312, file: !159, line: 2360, baseType: !1321, size: 128, offset: 192)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !703, size: 128, elements: !808)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1312, file: !159, line: 2364, baseType: !703, size: 32, offset: 320)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1312, file: !159, line: 2367, baseType: !1324, size: 128, offset: 384)
!1324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !1325)
!1325 = !{!1326, !1327}
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1324, file: !159, line: 2351, baseType: !708, size: 64)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1324, file: !159, line: 2352, baseType: !798, size: 64, offset: 64)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1312, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1312, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1312, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1312, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1312, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1312, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1076, file: !1077, line: 504, baseType: !1335, size: 64, offset: 704)
!1335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1336, size: 64)
!1336 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1077, line: 504, flags: DIFlagFwdDecl)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1076, file: !1077, line: 507, baseType: !1253, size: 64, offset: 768)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1076, file: !1077, line: 510, baseType: !703, size: 32, offset: 832)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1076, file: !1077, line: 513, baseType: !703, size: 32, offset: 864)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1076, file: !1077, line: 516, baseType: !950, size: 32, offset: 896)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1076, file: !1077, line: 519, baseType: !950, size: 32, offset: 928)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1076, file: !1077, line: 522, baseType: !7, size: 32, offset: 960)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1076, file: !1077, line: 523, baseType: !7, size: 32, offset: 992)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1076, file: !1077, line: 528, baseType: !734, size: 64, offset: 1024)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1076, file: !1077, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1076, file: !1077, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1076, file: !1077, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1076, file: !1077, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1076, file: !1077, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1076, file: !1077, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1076, file: !1077, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1076, file: !1077, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1076, file: !1077, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1076, file: !1077, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1076, file: !1077, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1076, file: !1077, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1076, file: !1077, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1076, file: !1077, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1076, file: !1077, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1076, file: !1077, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1071, file: !164, line: 3254, baseType: !829, size: 64, offset: 1536)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1071, file: !164, line: 3257, baseType: !829, size: 64, offset: 1600)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1071, file: !164, line: 3258, baseType: !829, size: 64, offset: 1664)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1071, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1071, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1071, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1071, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1071, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1071, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1071, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1071, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1071, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1071, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1071, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1071, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1071, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1071, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1071, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1071, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1071, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1071, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !831, file: !164, line: 3394, baseType: !1383, size: 1344)
!1383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !1384)
!1384 = !{!1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1410, !1411, !1412, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1383, file: !164, line: 2280, baseType: !867, size: 192)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1383, file: !164, line: 2281, baseType: !829, size: 64, offset: 192)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1383, file: !164, line: 2282, baseType: !829, size: 64, offset: 256)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1383, file: !164, line: 2283, baseType: !829, size: 64, offset: 320)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1383, file: !164, line: 2284, baseType: !829, size: 64, offset: 384)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1383, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1383, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1383, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1383, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1383, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1383, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1383, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1383, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1383, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1383, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1383, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1383, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1383, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1383, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1383, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1383, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1383, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1383, file: !164, line: 2306, baseType: !1408, size: 32, offset: 544)
!1408 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1409, line: 31, baseType: !703)
!1409 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1383, file: !164, line: 2307, baseType: !829, size: 64, offset: 576)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1383, file: !164, line: 2308, baseType: !829, size: 64, offset: 640)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1383, file: !164, line: 2314, baseType: !1413, size: 64, offset: 704)
!1413 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !1414)
!1414 = !{!1415, !1416, !1417}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1413, file: !164, line: 2310, baseType: !703, size: 32)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1413, file: !164, line: 2311, baseType: !734, size: 64)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1413, file: !164, line: 2312, baseType: !1418, size: 64)
!1418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1419, size: 64)
!1419 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1383, file: !164, line: 2315, baseType: !829, size: 64, offset: 768)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1383, file: !164, line: 2316, baseType: !829, size: 64, offset: 832)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1383, file: !164, line: 2317, baseType: !829, size: 64, offset: 896)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1383, file: !164, line: 2318, baseType: !829, size: 64, offset: 960)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1383, file: !164, line: 2319, baseType: !829, size: 64, offset: 1024)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1383, file: !164, line: 2320, baseType: !829, size: 64, offset: 1088)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1383, file: !164, line: 2321, baseType: !829, size: 64, offset: 1152)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1383, file: !164, line: 2322, baseType: !829, size: 64, offset: 1216)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1383, file: !164, line: 2324, baseType: !1429, size: 64, offset: 1280)
!1429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1430, size: 64)
!1430 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !831, file: !164, line: 3395, baseType: !1432, size: 320)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !1433)
!1433 = !{!1434, !1435, !1436}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1432, file: !164, line: 1470, baseType: !867, size: 192)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1432, file: !164, line: 1471, baseType: !829, size: 64, offset: 192)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1432, file: !164, line: 1472, baseType: !829, size: 64, offset: 256)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !831, file: !164, line: 3396, baseType: !1438, size: 320)
!1438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !1439)
!1439 = !{!1440, !1441, !1442}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1438, file: !164, line: 1483, baseType: !867, size: 192)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1438, file: !164, line: 1484, baseType: !703, size: 32, offset: 192)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1438, file: !164, line: 1485, baseType: !1443, size: 64, offset: 256)
!1443 = !DICompositeType(tag: DW_TAG_array_type, baseType: !829, size: 64, elements: !746)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !831, file: !164, line: 3397, baseType: !1445, size: 384)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !1446)
!1446 = !{!1447, !1448, !1449, !1450}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1445, file: !164, line: 1830, baseType: !867, size: 192)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1445, file: !164, line: 1831, baseType: !950, size: 32, offset: 192)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1445, file: !164, line: 1832, baseType: !829, size: 64, offset: 256)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1445, file: !164, line: 1835, baseType: !1443, size: 64, offset: 320)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !831, file: !164, line: 3398, baseType: !1452, size: 704)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !1453)
!1453 = !{!1454, !1455, !1456, !1457, !1458, !1461}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1452, file: !164, line: 1899, baseType: !867, size: 192)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1452, file: !164, line: 1902, baseType: !829, size: 64, offset: 192)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1452, file: !164, line: 1905, baseType: !1171, size: 64, offset: 256)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1452, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1452, file: !164, line: 1911, baseType: !1459, size: 64, offset: 384)
!1459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1460, size: 64)
!1460 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !164, line: 1876, flags: DIFlagFwdDecl)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1452, file: !164, line: 1914, baseType: !1462, size: 256, offset: 448)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1463)
!1463 = !{!1464, !1466, !1467, !1472}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1462, file: !164, line: 1884, baseType: !1465, size: 64)
!1465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1462, size: 64)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1462, file: !164, line: 1885, baseType: !1465, size: 64, offset: 64)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1462, file: !164, line: 1891, baseType: !1468, size: 64, offset: 128)
!1468 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1462, file: !164, line: 1891, size: 64, elements: !1469)
!1469 = !{!1470, !1471}
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1468, file: !164, line: 1891, baseType: !1171, size: 64)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1468, file: !164, line: 1891, baseType: !829, size: 64)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1462, file: !164, line: 1892, baseType: !1473, size: 64, offset: 192)
!1473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !831, file: !164, line: 3399, baseType: !1475, size: 704)
!1475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !1476)
!1476 = !{!1477, !1478, !1479, !1480, !1481, !1482, !1494, !1495, !1496, !1497, !1498}
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1475, file: !164, line: 2009, baseType: !867, size: 192)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1475, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1475, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1475, file: !164, line: 2014, baseType: !950, size: 32, offset: 224)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1475, file: !164, line: 2016, baseType: !829, size: 64, offset: 256)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1475, file: !164, line: 2017, baseType: !1483, size: 64, offset: 320)
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1484, size: 64)
!1484 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1485)
!1485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1486)
!1486 = !{!1487}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1485, file: !164, line: 183, baseType: !1488, size: 128)
!1488 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1489)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1490)
!1490 = !{!1491, !1492, !1493}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1489, file: !164, line: 182, baseType: !7, size: 32)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1489, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1489, file: !164, line: 182, baseType: !1443, size: 64, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1475, file: !164, line: 2019, baseType: !829, size: 64, offset: 384)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1475, file: !164, line: 2020, baseType: !829, size: 64, offset: 448)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1475, file: !164, line: 2021, baseType: !829, size: 64, offset: 512)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1475, file: !164, line: 2022, baseType: !829, size: 64, offset: 576)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1475, file: !164, line: 2023, baseType: !829, size: 64, offset: 640)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !831, file: !164, line: 3400, baseType: !1500, size: 832)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !1501)
!1501 = !{!1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1500, file: !164, line: 2431, baseType: !867, size: 192)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1500, file: !164, line: 2433, baseType: !829, size: 64, offset: 192)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1500, file: !164, line: 2434, baseType: !829, size: 64, offset: 256)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1500, file: !164, line: 2435, baseType: !829, size: 64, offset: 320)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1500, file: !164, line: 2436, baseType: !829, size: 64, offset: 384)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1500, file: !164, line: 2437, baseType: !1483, size: 64, offset: 448)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1500, file: !164, line: 2438, baseType: !829, size: 64, offset: 512)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1500, file: !164, line: 2440, baseType: !829, size: 64, offset: 576)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1500, file: !164, line: 2441, baseType: !829, size: 64, offset: 640)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1500, file: !164, line: 2443, baseType: !1512, size: 128, offset: 704)
!1512 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !1513)
!1513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !1514)
!1514 = !{!1515}
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1513, file: !164, line: 182, baseType: !1488, size: 128)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !831, file: !164, line: 3401, baseType: !1517, size: 320)
!1517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !1518)
!1518 = !{!1519, !1520, !1527}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1517, file: !164, line: 3329, baseType: !867, size: 192)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1517, file: !164, line: 3330, baseType: !1521, size: 64, offset: 192)
!1521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1522, size: 64)
!1522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !1523)
!1523 = !{!1524, !1525, !1526}
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1522, file: !164, line: 3322, baseType: !1521, size: 64)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1522, file: !164, line: 3323, baseType: !1521, size: 64, offset: 64)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1522, file: !164, line: 3324, baseType: !829, size: 64, offset: 128)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1517, file: !164, line: 3331, baseType: !1521, size: 64, offset: 256)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !831, file: !164, line: 3402, baseType: !1529, size: 256)
!1529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !1530)
!1530 = !{!1531, !1532}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1529, file: !164, line: 1541, baseType: !867, size: 192)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1529, file: !164, line: 1542, baseType: !1533, size: 64, offset: 192)
!1533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1534, size: 64)
!1534 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !1535)
!1535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !1536)
!1536 = !{!1537}
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1535, file: !164, line: 1538, baseType: !1538, size: 192)
!1538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !1539)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !1540)
!1540 = !{!1541, !1542, !1543}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1539, file: !164, line: 1537, baseType: !7, size: 32)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1539, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1539, file: !164, line: 1537, baseType: !1544, size: 128, offset: 64)
!1544 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1545, size: 128, elements: !746)
!1545 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !1546)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !1547)
!1547 = !{!1548, !1549}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1546, file: !164, line: 1533, baseType: !829, size: 64)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1546, file: !164, line: 1534, baseType: !829, size: 64, offset: 64)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !831, file: !164, line: 3403, baseType: !1551, size: 512)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !1552)
!1552 = !{!1553, !1554, !1555, !1556, !1562, !1563, !1564}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1551, file: !164, line: 1939, baseType: !867, size: 192)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1551, file: !164, line: 1940, baseType: !950, size: 32, offset: 192)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1551, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1551, file: !164, line: 1946, baseType: !1557, size: 32, offset: 256)
!1557 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !1558)
!1558 = !{!1559, !1560, !1561}
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1557, file: !164, line: 1943, baseType: !182, size: 32)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1557, file: !164, line: 1944, baseType: !189, size: 32)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1557, file: !164, line: 1945, baseType: !196, size: 32)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1551, file: !164, line: 1950, baseType: !1114, size: 64, offset: 320)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1551, file: !164, line: 1951, baseType: !1114, size: 64, offset: 384)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1551, file: !164, line: 1953, baseType: !1443, size: 64, offset: 448)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !831, file: !164, line: 3404, baseType: !1566, size: 1664)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !1567)
!1567 = !{!1568, !1569}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1566, file: !164, line: 3338, baseType: !867, size: 192)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1566, file: !164, line: 3341, baseType: !1570, size: 1472, offset: 192)
!1570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1571, line: 410, size: 1472, elements: !1572)
!1571 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1572 = !{!1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1570, file: !1571, line: 412, baseType: !703, size: 32)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1570, file: !1571, line: 413, baseType: !703, size: 32, offset: 32)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1570, file: !1571, line: 414, baseType: !703, size: 32, offset: 64)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1570, file: !1571, line: 415, baseType: !703, size: 32, offset: 96)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1570, file: !1571, line: 416, baseType: !703, size: 32, offset: 128)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1570, file: !1571, line: 417, baseType: !703, size: 32, offset: 160)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1570, file: !1571, line: 418, baseType: !942, size: 8, offset: 192)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1570, file: !1571, line: 419, baseType: !942, size: 8, offset: 200)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1570, file: !1571, line: 420, baseType: !1582, size: 8, offset: 208)
!1582 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1570, file: !1571, line: 421, baseType: !1582, size: 8, offset: 216)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1570, file: !1571, line: 422, baseType: !1582, size: 8, offset: 224)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1570, file: !1571, line: 423, baseType: !1582, size: 8, offset: 232)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1570, file: !1571, line: 424, baseType: !1582, size: 8, offset: 240)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1570, file: !1571, line: 425, baseType: !1582, size: 8, offset: 248)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1570, file: !1571, line: 426, baseType: !1582, size: 8, offset: 256)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1570, file: !1571, line: 427, baseType: !1582, size: 8, offset: 264)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1570, file: !1571, line: 428, baseType: !1582, size: 8, offset: 272)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1570, file: !1571, line: 429, baseType: !1582, size: 8, offset: 280)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1570, file: !1571, line: 430, baseType: !1582, size: 8, offset: 288)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1570, file: !1571, line: 431, baseType: !1582, size: 8, offset: 296)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1570, file: !1571, line: 432, baseType: !1582, size: 8, offset: 304)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1570, file: !1571, line: 433, baseType: !1582, size: 8, offset: 312)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1570, file: !1571, line: 434, baseType: !1582, size: 8, offset: 320)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1570, file: !1571, line: 435, baseType: !1582, size: 8, offset: 328)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1570, file: !1571, line: 436, baseType: !1582, size: 8, offset: 336)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1570, file: !1571, line: 437, baseType: !1582, size: 8, offset: 344)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1570, file: !1571, line: 438, baseType: !1582, size: 8, offset: 352)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1570, file: !1571, line: 439, baseType: !1582, size: 8, offset: 360)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1570, file: !1571, line: 440, baseType: !1582, size: 8, offset: 368)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1570, file: !1571, line: 441, baseType: !1582, size: 8, offset: 376)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1570, file: !1571, line: 442, baseType: !1582, size: 8, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1570, file: !1571, line: 443, baseType: !1582, size: 8, offset: 392)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1570, file: !1571, line: 444, baseType: !1582, size: 8, offset: 400)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1570, file: !1571, line: 445, baseType: !1582, size: 8, offset: 408)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1570, file: !1571, line: 446, baseType: !1582, size: 8, offset: 416)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1570, file: !1571, line: 447, baseType: !1582, size: 8, offset: 424)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1570, file: !1571, line: 448, baseType: !1582, size: 8, offset: 432)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1570, file: !1571, line: 449, baseType: !1582, size: 8, offset: 440)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1570, file: !1571, line: 450, baseType: !1582, size: 8, offset: 448)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1570, file: !1571, line: 451, baseType: !1582, size: 8, offset: 456)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1570, file: !1571, line: 452, baseType: !1582, size: 8, offset: 464)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1570, file: !1571, line: 453, baseType: !1582, size: 8, offset: 472)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1570, file: !1571, line: 454, baseType: !1582, size: 8, offset: 480)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1570, file: !1571, line: 455, baseType: !1582, size: 8, offset: 488)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1570, file: !1571, line: 456, baseType: !1582, size: 8, offset: 496)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1570, file: !1571, line: 457, baseType: !1582, size: 8, offset: 504)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1570, file: !1571, line: 458, baseType: !1582, size: 8, offset: 512)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1570, file: !1571, line: 459, baseType: !1582, size: 8, offset: 520)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1570, file: !1571, line: 460, baseType: !1582, size: 8, offset: 528)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1570, file: !1571, line: 461, baseType: !1582, size: 8, offset: 536)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1570, file: !1571, line: 462, baseType: !1582, size: 8, offset: 544)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1570, file: !1571, line: 463, baseType: !1582, size: 8, offset: 552)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1570, file: !1571, line: 464, baseType: !1582, size: 8, offset: 560)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1570, file: !1571, line: 465, baseType: !1582, size: 8, offset: 568)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1570, file: !1571, line: 466, baseType: !1582, size: 8, offset: 576)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1570, file: !1571, line: 467, baseType: !1582, size: 8, offset: 584)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1570, file: !1571, line: 468, baseType: !1582, size: 8, offset: 592)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1570, file: !1571, line: 469, baseType: !1582, size: 8, offset: 600)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1570, file: !1571, line: 470, baseType: !1582, size: 8, offset: 608)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1570, file: !1571, line: 471, baseType: !1582, size: 8, offset: 616)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1570, file: !1571, line: 472, baseType: !1582, size: 8, offset: 624)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1570, file: !1571, line: 473, baseType: !1582, size: 8, offset: 632)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1570, file: !1571, line: 474, baseType: !1582, size: 8, offset: 640)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1570, file: !1571, line: 475, baseType: !1582, size: 8, offset: 648)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1570, file: !1571, line: 476, baseType: !1582, size: 8, offset: 656)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1570, file: !1571, line: 477, baseType: !1582, size: 8, offset: 664)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1570, file: !1571, line: 478, baseType: !1582, size: 8, offset: 672)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1570, file: !1571, line: 479, baseType: !1582, size: 8, offset: 680)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1570, file: !1571, line: 480, baseType: !1582, size: 8, offset: 688)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1570, file: !1571, line: 481, baseType: !1582, size: 8, offset: 696)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1570, file: !1571, line: 482, baseType: !1582, size: 8, offset: 704)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1570, file: !1571, line: 483, baseType: !1582, size: 8, offset: 712)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1570, file: !1571, line: 484, baseType: !1582, size: 8, offset: 720)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1570, file: !1571, line: 485, baseType: !1582, size: 8, offset: 728)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1570, file: !1571, line: 486, baseType: !1582, size: 8, offset: 736)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1570, file: !1571, line: 487, baseType: !1582, size: 8, offset: 744)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1570, file: !1571, line: 488, baseType: !1582, size: 8, offset: 752)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1570, file: !1571, line: 489, baseType: !1582, size: 8, offset: 760)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1570, file: !1571, line: 490, baseType: !1582, size: 8, offset: 768)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1570, file: !1571, line: 491, baseType: !1582, size: 8, offset: 776)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1570, file: !1571, line: 492, baseType: !1582, size: 8, offset: 784)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1570, file: !1571, line: 493, baseType: !1582, size: 8, offset: 792)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1570, file: !1571, line: 494, baseType: !1582, size: 8, offset: 800)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1570, file: !1571, line: 495, baseType: !1582, size: 8, offset: 808)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1570, file: !1571, line: 496, baseType: !1582, size: 8, offset: 816)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1570, file: !1571, line: 497, baseType: !1582, size: 8, offset: 824)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1570, file: !1571, line: 498, baseType: !1582, size: 8, offset: 832)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1570, file: !1571, line: 499, baseType: !1582, size: 8, offset: 840)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1570, file: !1571, line: 500, baseType: !1582, size: 8, offset: 848)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1570, file: !1571, line: 501, baseType: !1582, size: 8, offset: 856)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1570, file: !1571, line: 502, baseType: !1582, size: 8, offset: 864)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1570, file: !1571, line: 503, baseType: !1582, size: 8, offset: 872)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1570, file: !1571, line: 504, baseType: !1582, size: 8, offset: 880)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1570, file: !1571, line: 505, baseType: !1582, size: 8, offset: 888)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1570, file: !1571, line: 506, baseType: !1582, size: 8, offset: 896)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1570, file: !1571, line: 507, baseType: !1582, size: 8, offset: 904)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1570, file: !1571, line: 508, baseType: !1582, size: 8, offset: 912)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1570, file: !1571, line: 509, baseType: !1582, size: 8, offset: 920)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1570, file: !1571, line: 510, baseType: !1582, size: 8, offset: 928)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1570, file: !1571, line: 511, baseType: !1582, size: 8, offset: 936)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1570, file: !1571, line: 512, baseType: !1582, size: 8, offset: 944)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1570, file: !1571, line: 513, baseType: !1582, size: 8, offset: 952)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1570, file: !1571, line: 514, baseType: !1582, size: 8, offset: 960)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1570, file: !1571, line: 515, baseType: !1582, size: 8, offset: 968)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1570, file: !1571, line: 516, baseType: !1582, size: 8, offset: 976)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1570, file: !1571, line: 517, baseType: !1582, size: 8, offset: 984)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1570, file: !1571, line: 518, baseType: !1582, size: 8, offset: 992)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1570, file: !1571, line: 519, baseType: !1582, size: 8, offset: 1000)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1570, file: !1571, line: 520, baseType: !1582, size: 8, offset: 1008)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1570, file: !1571, line: 521, baseType: !1582, size: 8, offset: 1016)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1570, file: !1571, line: 522, baseType: !1582, size: 8, offset: 1024)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1570, file: !1571, line: 523, baseType: !1582, size: 8, offset: 1032)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1570, file: !1571, line: 524, baseType: !1582, size: 8, offset: 1040)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1570, file: !1571, line: 525, baseType: !1582, size: 8, offset: 1048)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1570, file: !1571, line: 526, baseType: !1582, size: 8, offset: 1056)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1570, file: !1571, line: 527, baseType: !1582, size: 8, offset: 1064)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1570, file: !1571, line: 528, baseType: !1582, size: 8, offset: 1072)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1570, file: !1571, line: 529, baseType: !1582, size: 8, offset: 1080)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1570, file: !1571, line: 530, baseType: !1582, size: 8, offset: 1088)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1570, file: !1571, line: 531, baseType: !1582, size: 8, offset: 1096)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1570, file: !1571, line: 532, baseType: !1582, size: 8, offset: 1104)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1570, file: !1571, line: 533, baseType: !1582, size: 8, offset: 1112)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1570, file: !1571, line: 534, baseType: !1582, size: 8, offset: 1120)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1570, file: !1571, line: 535, baseType: !1582, size: 8, offset: 1128)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1570, file: !1571, line: 536, baseType: !1582, size: 8, offset: 1136)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1570, file: !1571, line: 537, baseType: !1582, size: 8, offset: 1144)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1570, file: !1571, line: 538, baseType: !1582, size: 8, offset: 1152)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1570, file: !1571, line: 539, baseType: !1582, size: 8, offset: 1160)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1570, file: !1571, line: 540, baseType: !1582, size: 8, offset: 1168)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1570, file: !1571, line: 541, baseType: !1582, size: 8, offset: 1176)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1570, file: !1571, line: 542, baseType: !1582, size: 8, offset: 1184)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1570, file: !1571, line: 543, baseType: !1582, size: 8, offset: 1192)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1570, file: !1571, line: 544, baseType: !1582, size: 8, offset: 1200)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1570, file: !1571, line: 545, baseType: !1582, size: 8, offset: 1208)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1570, file: !1571, line: 546, baseType: !1582, size: 8, offset: 1216)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1570, file: !1571, line: 547, baseType: !1582, size: 8, offset: 1224)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1570, file: !1571, line: 548, baseType: !1582, size: 8, offset: 1232)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1570, file: !1571, line: 549, baseType: !1582, size: 8, offset: 1240)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1570, file: !1571, line: 550, baseType: !1582, size: 8, offset: 1248)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1570, file: !1571, line: 551, baseType: !1582, size: 8, offset: 1256)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1570, file: !1571, line: 552, baseType: !1582, size: 8, offset: 1264)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1570, file: !1571, line: 553, baseType: !1582, size: 8, offset: 1272)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1570, file: !1571, line: 554, baseType: !1582, size: 8, offset: 1280)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1570, file: !1571, line: 555, baseType: !1582, size: 8, offset: 1288)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1570, file: !1571, line: 556, baseType: !1582, size: 8, offset: 1296)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1570, file: !1571, line: 557, baseType: !1582, size: 8, offset: 1304)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1570, file: !1571, line: 558, baseType: !1582, size: 8, offset: 1312)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1570, file: !1571, line: 559, baseType: !1582, size: 8, offset: 1320)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1570, file: !1571, line: 560, baseType: !1582, size: 8, offset: 1328)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1570, file: !1571, line: 561, baseType: !1582, size: 8, offset: 1336)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1570, file: !1571, line: 562, baseType: !1582, size: 8, offset: 1344)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1570, file: !1571, line: 563, baseType: !1582, size: 8, offset: 1352)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1570, file: !1571, line: 564, baseType: !1582, size: 8, offset: 1360)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1570, file: !1571, line: 565, baseType: !1582, size: 8, offset: 1368)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1570, file: !1571, line: 566, baseType: !1582, size: 8, offset: 1376)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1570, file: !1571, line: 567, baseType: !1582, size: 8, offset: 1384)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1570, file: !1571, line: 568, baseType: !1582, size: 8, offset: 1392)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1570, file: !1571, line: 569, baseType: !1582, size: 8, offset: 1400)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1570, file: !1571, line: 570, baseType: !1582, size: 8, offset: 1408)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1570, file: !1571, line: 571, baseType: !1582, size: 8, offset: 1416)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1570, file: !1571, line: 572, baseType: !1582, size: 8, offset: 1424)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1570, file: !1571, line: 573, baseType: !1582, size: 8, offset: 1432)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1570, file: !1571, line: 574, baseType: !1582, size: 8, offset: 1440)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !831, file: !164, line: 3405, baseType: !1738, size: 384)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !1739)
!1739 = !{!1740, !1741}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1738, file: !164, line: 3353, baseType: !867, size: 192)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1738, file: !164, line: 3356, baseType: !1742, size: 192, offset: 192)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1571, line: 578, size: 192, elements: !1743)
!1743 = !{!1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1742, file: !1571, line: 580, baseType: !703, size: 32)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1742, file: !1571, line: 581, baseType: !703, size: 32, offset: 32)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1742, file: !1571, line: 582, baseType: !703, size: 32, offset: 64)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1742, file: !1571, line: 583, baseType: !703, size: 32, offset: 96)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1742, file: !1571, line: 584, baseType: !942, size: 8, offset: 128)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1742, file: !1571, line: 585, baseType: !942, size: 8, offset: 136)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1742, file: !1571, line: 586, baseType: !942, size: 8, offset: 144)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1742, file: !1571, line: 587, baseType: !942, size: 8, offset: 152)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1742, file: !1571, line: 588, baseType: !942, size: 8, offset: 160)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1742, file: !1571, line: 589, baseType: !942, size: 8, offset: 168)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1742, file: !1571, line: 590, baseType: !942, size: 8, offset: 176)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !729, file: !421, line: 178, baseType: !1088, size: 64)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !729, file: !421, line: 179, baseType: !1757, size: 64)
!1757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1758, size: 64)
!1758 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !421, line: 150, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !421, line: 142, size: 320, elements: !1760)
!1760 = !{!1761, !1762, !1763, !1764, !1765, !1766}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1759, file: !421, line: 144, baseType: !829, size: 64)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1759, file: !421, line: 145, baseType: !708, size: 64, offset: 64)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1759, file: !421, line: 146, baseType: !708, size: 64, offset: 128)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1759, file: !421, line: 147, baseType: !1408, size: 32, offset: 192)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1759, file: !421, line: 148, baseType: !7, size: 32, offset: 224)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1759, file: !421, line: 149, baseType: !942, size: 8, offset: 256)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !729, file: !421, line: 180, baseType: !1768, size: 64)
!1768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1769, size: 64)
!1769 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !421, line: 162, baseType: !1770)
!1770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !421, line: 159, size: 128, elements: !1771)
!1771 = !{!1772, !1773}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1770, file: !421, line: 160, baseType: !829, size: 64)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1770, file: !421, line: 161, baseType: !798, size: 64, offset: 64)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !729, file: !421, line: 181, baseType: !1775, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1776, size: 64)
!1776 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !421, line: 181, flags: DIFlagFwdDecl)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !724, file: !421, line: 317, baseType: !1778, size: 64)
!1778 = !DICompositeType(tag: DW_TAG_array_type, baseType: !798, size: 64, elements: !746)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !724, file: !421, line: 318, baseType: !1780, size: 320)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !421, line: 188, size: 320, elements: !1781)
!1781 = !{!1782, !1784, !1839}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1780, file: !421, line: 190, baseType: !1783, size: 192)
!1783 = !DICompositeType(tag: DW_TAG_array_type, baseType: !728, size: 192, elements: !900)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1780, file: !421, line: 193, baseType: !1785, size: 64, offset: 192)
!1785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1786, size: 64)
!1786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !421, line: 206, size: 320, elements: !1787)
!1787 = !{!1788, !1824, !1825, !1826, !1838}
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1786, file: !421, line: 208, baseType: !1789, size: 64)
!1789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1790, size: 64)
!1790 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !709, line: 62, baseType: !1791)
!1791 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1792, line: 538, size: 256, elements: !1793)
!1792 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1793 = !{!1794, !1798, !1804, !1815}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1791, file: !1792, line: 539, baseType: !1795, size: 32)
!1795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1792, line: 482, size: 32, elements: !1796)
!1796 = !{!1797}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1795, file: !1792, line: 484, baseType: !7, size: 32)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1791, file: !1792, line: 540, baseType: !1799, size: 192)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1792, line: 488, size: 192, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1799, file: !1792, line: 489, baseType: !1795, size: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1799, file: !1792, line: 492, baseType: !734, size: 64, offset: 64)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1799, file: !1792, line: 496, baseType: !829, size: 64, offset: 128)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1791, file: !1792, line: 541, baseType: !1805, size: 256)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1792, line: 504, size: 256, elements: !1806)
!1806 = !{!1807, !1808, !1813, !1814}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1805, file: !1792, line: 505, baseType: !1795, size: 32)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1805, file: !1792, line: 509, baseType: !1809, size: 64, offset: 64)
!1809 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1792, line: 501, baseType: !1810)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = !DISubroutineType(types: !1812)
!1812 = !{null, !1264}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1805, file: !1792, line: 510, baseType: !1264, size: 64, offset: 128)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1805, file: !1792, line: 513, baseType: !1789, size: 64, offset: 192)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1791, file: !1792, line: 542, baseType: !1816, size: 128)
!1816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1792, line: 530, size: 128, elements: !1817)
!1817 = !{!1818, !1819}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1816, file: !1792, line: 531, baseType: !1795, size: 32)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1816, file: !1792, line: 534, baseType: !1820, size: 64, offset: 64)
!1820 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1792, line: 525, baseType: !1821)
!1821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1822, size: 64)
!1822 = !DISubroutineType(types: !1823)
!1823 = !{!942, !829, !734, !781, !781}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1786, file: !421, line: 211, baseType: !7, size: 32, offset: 64)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1786, file: !421, line: 214, baseType: !798, size: 64, offset: 128)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1786, file: !421, line: 224, baseType: !1827, size: 64, offset: 192)
!1827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1828, size: 64)
!1828 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !421, line: 202, baseType: !1829)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !421, line: 202, size: 128, elements: !1830)
!1830 = !{!1831}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1829, file: !421, line: 202, baseType: !1832, size: 128)
!1832 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !421, line: 200, baseType: !1833)
!1833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !421, line: 200, size: 128, elements: !1834)
!1834 = !{!1835, !1836, !1837}
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1833, file: !421, line: 200, baseType: !7, size: 32)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1833, file: !421, line: 200, baseType: !7, size: 32, offset: 32)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1833, file: !421, line: 200, baseType: !745, size: 64, offset: 64)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1786, file: !421, line: 234, baseType: !1827, size: 64, offset: 256)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1780, file: !421, line: 197, baseType: !798, size: 64, offset: 256)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !724, file: !421, line: 319, baseType: !889, size: 256)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !724, file: !421, line: 320, baseType: !908, size: 192)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "next_regno_allocno", scope: !700, file: !698, line: 255, baseType: !697, size: 64, offset: 192)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "loop_tree_node", scope: !700, file: !698, line: 260, baseType: !1844, size: 64, offset: 256)
!1844 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_loop_tree_node_t", file: !698, line: 73, baseType: !1845)
!1845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1846, size: 64)
!1846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_loop_tree_node", file: !698, line: 83, size: 1728, elements: !1847)
!1847 = !{!1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1859, !1860, !1864, !1866, !1867, !1868}
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1846, file: !698, line: 86, baseType: !1087, size: 64)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !1846, file: !698, line: 87, baseType: !1129, size: 64, offset: 64)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "subloop_next", scope: !1846, file: !698, line: 90, baseType: !1844, size: 64, offset: 128)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1846, file: !698, line: 90, baseType: !1844, size: 64, offset: 192)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "subloops", scope: !1846, file: !698, line: 93, baseType: !1844, size: 64, offset: 256)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !1846, file: !698, line: 93, baseType: !1844, size: 64, offset: 320)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !1846, file: !698, line: 95, baseType: !1844, size: 64, offset: 384)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1846, file: !698, line: 98, baseType: !703, size: 32, offset: 448)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "to_remove_p", scope: !1846, file: !698, line: 105, baseType: !942, size: 8, offset: 480)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "regno_allocno_map", scope: !1846, file: !698, line: 114, baseType: !1858, size: 64, offset: 512)
!1858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "entered_from_non_parent_p", scope: !1846, file: !698, line: 119, baseType: !942, size: 8, offset: 576)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure", scope: !1846, file: !698, line: 123, baseType: !1861, size: 864, offset: 608)
!1861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !703, size: 864, elements: !1862)
!1862 = !{!1863}
!1863 = !DISubrange(count: 27)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "all_allocnos", scope: !1846, file: !698, line: 127, baseType: !1865, size: 64, offset: 1472)
!1865 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !709, line: 47, baseType: !765)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "border_allocnos", scope: !1846, file: !698, line: 130, baseType: !1865, size: 64, offset: 1536)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "modified_regnos", scope: !1846, file: !698, line: 134, baseType: !1865, size: 64, offset: 1600)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "local_copies", scope: !1846, file: !698, line: 137, baseType: !1865, size: 64, offset: 1664)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "nrefs", scope: !700, file: !698, line: 266, baseType: !703, size: 32, offset: 320)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !700, file: !698, line: 268, baseType: !703, size: 32, offset: 352)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "cover_class", scope: !700, file: !698, line: 271, baseType: !390, size: 32, offset: 384)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "cover_class_cost", scope: !700, file: !698, line: 274, baseType: !703, size: 32, offset: 416)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "updated_cover_class_cost", scope: !700, file: !698, line: 274, baseType: !703, size: 32, offset: 448)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "memory_cost", scope: !700, file: !698, line: 282, baseType: !703, size: 32, offset: 480)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "updated_memory_cost", scope: !700, file: !698, line: 282, baseType: !703, size: 32, offset: 512)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "excess_pressure_points_num", scope: !700, file: !698, line: 288, baseType: !703, size: 32, offset: 544)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "allocno_copies", scope: !700, file: !698, line: 292, baseType: !1878, size: 64, offset: 576)
!1878 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_copy_t", file: !698, line: 64, baseType: !1879)
!1879 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1880, size: 64)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno_copy", file: !698, line: 506, size: 640, elements: !1881)
!1881 = !{!1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1880, file: !698, line: 509, baseType: !703, size: 32)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1880, file: !698, line: 512, baseType: !697, size: 64, offset: 64)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "second", scope: !1880, file: !698, line: 512, baseType: !697, size: 64, offset: 128)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !1880, file: !698, line: 514, baseType: !703, size: 32, offset: 192)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "constraint_p", scope: !1880, file: !698, line: 515, baseType: !942, size: 8, offset: 224)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !1880, file: !698, line: 521, baseType: !708, size: 64, offset: 256)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "prev_first_allocno_copy", scope: !1880, file: !698, line: 524, baseType: !1878, size: 64, offset: 320)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "next_first_allocno_copy", scope: !1880, file: !698, line: 524, baseType: !1878, size: 64, offset: 384)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "prev_second_allocno_copy", scope: !1880, file: !698, line: 527, baseType: !1878, size: 64, offset: 448)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "next_second_allocno_copy", scope: !1880, file: !698, line: 527, baseType: !1878, size: 64, offset: 512)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "loop_tree_node", scope: !1880, file: !698, line: 529, baseType: !1844, size: 64, offset: 576)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !700, file: !698, line: 295, baseType: !697, size: 64, offset: 640)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "cap_member", scope: !700, file: !698, line: 298, baseType: !697, size: 64, offset: 704)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "first_coalesced_allocno", scope: !700, file: !698, line: 302, baseType: !697, size: 64, offset: 768)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "next_coalesced_allocno", scope: !700, file: !698, line: 303, baseType: !697, size: 64, offset: 832)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "live_ranges", scope: !700, file: !698, line: 308, baseType: !1898, size: 64, offset: 896)
!1898 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocno_live_range_t", file: !698, line: 62, baseType: !1899)
!1899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1900, size: 64)
!1900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno_live_range", file: !698, line: 199, size: 320, elements: !1901)
!1901 = !{!1902, !1903, !1904, !1905, !1906, !1907}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "allocno", scope: !1900, file: !698, line: 202, baseType: !697, size: 64)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1900, file: !698, line: 204, baseType: !703, size: 32, offset: 64)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "finish", scope: !1900, file: !698, line: 204, baseType: !703, size: 32, offset: 96)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1900, file: !698, line: 207, baseType: !1898, size: 64, offset: 128)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "start_next", scope: !1900, file: !698, line: 209, baseType: !1898, size: 64, offset: 192)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "finish_next", scope: !1900, file: !698, line: 209, baseType: !1898, size: 64, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !700, file: !698, line: 314, baseType: !703, size: 32, offset: 960)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !700, file: !698, line: 314, baseType: !703, size: 32, offset: 992)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocno_array", scope: !700, file: !698, line: 319, baseType: !819, size: 64, offset: 1024)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_id", scope: !700, file: !698, line: 322, baseType: !703, size: 32, offset: 1088)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocno_array_size", scope: !700, file: !698, line: 324, baseType: !7, size: 32, offset: 1120)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_hard_regs", scope: !700, file: !698, line: 329, baseType: !1914, size: 64, offset: 1152)
!1914 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !1915, line: 42, baseType: !781)
!1915 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "total_conflict_hard_regs", scope: !700, file: !698, line: 329, baseType: !1914, size: 64, offset: 1216)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocnos_num", scope: !700, file: !698, line: 332, baseType: !703, size: 32, offset: 1280)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "call_freq", scope: !700, file: !698, line: 335, baseType: !703, size: 32, offset: 1312)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "calls_crossed_num", scope: !700, file: !698, line: 337, baseType: !703, size: 32, offset: 1344)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "mem_optimized_dest_p", scope: !700, file: !698, line: 342, baseType: !7, size: 1, offset: 1376, flags: DIFlagBitField, extraData: i64 1376)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "somewhere_renamed_p", scope: !700, file: !698, line: 346, baseType: !7, size: 1, offset: 1377, flags: DIFlagBitField, extraData: i64 1376)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "child_renamed_p", scope: !700, file: !698, line: 349, baseType: !7, size: 1, offset: 1378, flags: DIFlagBitField, extraData: i64 1376)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "dont_reassign_p", scope: !700, file: !698, line: 354, baseType: !7, size: 1, offset: 1379, flags: DIFlagBitField, extraData: i64 1376)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "no_stack_reg_p", scope: !700, file: !698, line: 359, baseType: !7, size: 1, offset: 1380, flags: DIFlagBitField, extraData: i64 1376)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "total_no_stack_reg_p", scope: !700, file: !698, line: 359, baseType: !7, size: 1, offset: 1381, flags: DIFlagBitField, extraData: i64 1376)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "bad_spill_p", scope: !700, file: !698, line: 364, baseType: !7, size: 1, offset: 1382, flags: DIFlagBitField, extraData: i64 1376)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "in_graph_p", scope: !700, file: !698, line: 367, baseType: !7, size: 1, offset: 1383, flags: DIFlagBitField, extraData: i64 1376)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "assigned_p", scope: !700, file: !698, line: 370, baseType: !7, size: 1, offset: 1384, flags: DIFlagBitField, extraData: i64 1376)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_spilled_p", scope: !700, file: !698, line: 373, baseType: !7, size: 1, offset: 1385, flags: DIFlagBitField, extraData: i64 1376)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "splay_removed_p", scope: !700, file: !698, line: 376, baseType: !7, size: 1, offset: 1386, flags: DIFlagBitField, extraData: i64 1376)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_vec_p", scope: !700, file: !698, line: 381, baseType: !7, size: 1, offset: 1387, flags: DIFlagBitField, extraData: i64 1376)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "mem_optimized_dest", scope: !700, file: !698, line: 385, baseType: !697, size: 64, offset: 1408)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "hard_reg_costs", scope: !700, file: !698, line: 400, baseType: !1934, size: 64, offset: 1472)
!1934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !703, size: 64)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "updated_hard_reg_costs", scope: !700, file: !698, line: 400, baseType: !1934, size: 64, offset: 1536)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_hard_reg_costs", scope: !700, file: !698, line: 407, baseType: !1934, size: 64, offset: 1600)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "updated_conflict_hard_reg_costs", scope: !700, file: !698, line: 407, baseType: !1934, size: 64, offset: 1664)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "left_conflicts_size", scope: !700, file: !698, line: 411, baseType: !703, size: 32, offset: 1728)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "available_regs_num", scope: !700, file: !698, line: 414, baseType: !703, size: 32, offset: 1760)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "next_bucket_allocno", scope: !700, file: !698, line: 417, baseType: !697, size: 64, offset: 1792)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bucket_allocno", scope: !700, file: !698, line: 418, baseType: !697, size: 64, offset: 1856)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !700, file: !698, line: 420, baseType: !703, size: 32, offset: 1920)
!1943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1944, size: 64)
!1944 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_allocno_t_heap", file: !698, line: 68, baseType: !1945)
!1945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_allocno_t_heap", file: !698, line: 68, size: 128, elements: !1946)
!1946 = !{!1947}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1945, file: !698, line: 68, baseType: !1948, size: 128)
!1948 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_allocno_t_base", file: !698, line: 67, baseType: !1949)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_allocno_t_base", file: !698, line: 67, size: 128, elements: !1950)
!1950 = !{!1951, !1952, !1953}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1949, file: !698, line: 67, baseType: !7, size: 32)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1949, file: !698, line: 67, baseType: !7, size: 32, offset: 32)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1949, file: !698, line: 67, baseType: !1954, size: 64, offset: 64)
!1954 = !DICompositeType(tag: DW_TAG_array_type, baseType: !697, size: 64, elements: !746)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !798, size: 64)
!1956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1957, size: 64)
!1957 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_copy_t_heap", file: !698, line: 70, baseType: !1958)
!1958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_copy_t_heap", file: !698, line: 70, size: 128, elements: !1959)
!1959 = !{!1960}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1958, file: !698, line: 70, baseType: !1961, size: 128)
!1961 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_copy_t_base", file: !698, line: 69, baseType: !1962)
!1962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_copy_t_base", file: !698, line: 69, size: 128, elements: !1963)
!1963 = !{!1964, !1965, !1966}
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1962, file: !698, line: 69, baseType: !7, size: 32)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1962, file: !698, line: 69, baseType: !7, size: 32, offset: 32)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1962, file: !698, line: 69, baseType: !1967, size: 64, offset: 64)
!1967 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1878, size: 64, elements: !746)
!1968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1969, size: 64)
!1969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_lr_bb_info", file: !1970, line: 826, size: 256, elements: !1971)
!1970 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1971 = !{!1972, !1973, !1974, !1975}
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1969, file: !1970, line: 829, baseType: !1865, size: 64)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1969, file: !1970, line: 831, baseType: !1865, size: 64, offset: 64)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !1969, file: !1970, line: 834, baseType: !1865, size: 64, offset: 128)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !1969, file: !1970, line: 835, baseType: !1865, size: 64, offset: 192)
!1976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1978, size: 64)
!1978 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1844)
!1979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1980, size: 64)
!1980 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_loop_tree_node_t_heap", file: !3, line: 1788, baseType: !1981)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_loop_tree_node_t_heap", file: !3, line: 1788, size: 128, elements: !1982)
!1982 = !{!1983}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1981, file: !3, line: 1788, baseType: !1984, size: 128)
!1984 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_loop_tree_node_t_base", file: !3, line: 1787, baseType: !1985)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_loop_tree_node_t_base", file: !3, line: 1787, size: 128, elements: !1986)
!1986 = !{!1987, !1988, !1989}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1985, file: !3, line: 1787, baseType: !7, size: 32)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1985, file: !3, line: 1787, baseType: !7, size: 32, offset: 32)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1985, file: !3, line: 1787, baseType: !1990, size: 64, offset: 64)
!1990 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1844, size: 64, elements: !746)
!1991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1992, size: 64)
!1992 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !697)
!1993 = !{!1994, !1996, !1998, !2000, !2002, !2004, !2006, !2008, !2010, !2013, !0, !2015, !2038, !2040, !2042, !2044, !2046, !2049, !2051, !2053, !2055, !2057, !2059, !2061, !2063, !2065, !2067}
!1994 = !DIGlobalVariableExpression(var: !1995, expr: !DIExpression())
!1995 = distinct !DIGlobalVariable(name: "ira_loop_tree_root", scope: !2, file: !3, line: 47, type: !1844, isLocal: false, isDefinition: true)
!1996 = !DIGlobalVariableExpression(var: !1997, expr: !DIExpression())
!1997 = distinct !DIGlobalVariable(name: "ira_loop_tree_height", scope: !2, file: !3, line: 50, type: !703, isLocal: false, isDefinition: true)
!1998 = !DIGlobalVariableExpression(var: !1999, expr: !DIExpression())
!1999 = distinct !DIGlobalVariable(name: "ira_bb_nodes", scope: !2, file: !3, line: 55, type: !1844, isLocal: false, isDefinition: true)
!2000 = !DIGlobalVariableExpression(var: !2001, expr: !DIExpression())
!2001 = distinct !DIGlobalVariable(name: "ira_loop_nodes", scope: !2, file: !3, line: 59, type: !1844, isLocal: false, isDefinition: true)
!2002 = !DIGlobalVariableExpression(var: !2003, expr: !DIExpression())
!2003 = distinct !DIGlobalVariable(name: "ira_regno_allocno_map", scope: !2, file: !3, line: 63, type: !1858, isLocal: false, isDefinition: true)
!2004 = !DIGlobalVariableExpression(var: !2005, expr: !DIExpression())
!2005 = distinct !DIGlobalVariable(name: "ira_allocnos", scope: !2, file: !3, line: 68, type: !1858, isLocal: false, isDefinition: true)
!2006 = !DIGlobalVariableExpression(var: !2007, expr: !DIExpression())
!2007 = distinct !DIGlobalVariable(name: "ira_allocnos_num", scope: !2, file: !3, line: 71, type: !703, isLocal: false, isDefinition: true)
!2008 = !DIGlobalVariableExpression(var: !2009, expr: !DIExpression())
!2009 = distinct !DIGlobalVariable(name: "ira_conflict_id_allocno_map", scope: !2, file: !3, line: 75, type: !1858, isLocal: false, isDefinition: true)
!2010 = !DIGlobalVariableExpression(var: !2011, expr: !DIExpression())
!2011 = distinct !DIGlobalVariable(name: "ira_copies", scope: !2, file: !3, line: 80, type: !2012, isLocal: false, isDefinition: true)
!2012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1878, size: 64)
!2013 = !DIGlobalVariableExpression(var: !2014, expr: !DIExpression())
!2014 = distinct !DIGlobalVariable(name: "ira_copies_num", scope: !2, file: !3, line: 83, type: !703, isLocal: false, isDefinition: true)
!2015 = !DIGlobalVariableExpression(var: !2016, expr: !DIExpression())
!2016 = distinct !DIGlobalVariable(name: "allocno_live_range_pool", scope: !2, file: !3, line: 386, type: !2017, isLocal: true, isDefinition: true)
!2017 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2018, line: 58, baseType: !2019)
!2018 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2020, size: 64)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2018, line: 32, size: 704, elements: !2021)
!2021 = !{!2022, !2023, !2024, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2020, file: !2018, line: 34, baseType: !734, size: 64)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2020, file: !2018, line: 38, baseType: !1279, size: 64, offset: 64)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2020, file: !2018, line: 41, baseType: !2025, size: 64, offset: 128)
!2025 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2018, line: 30, baseType: !2026)
!2026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2018, line: 26, size: 64, elements: !2028)
!2028 = !{!2029}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2027, file: !2018, line: 28, baseType: !2026, size: 64)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2020, file: !2018, line: 45, baseType: !804, size: 64, offset: 192)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2020, file: !2018, line: 49, baseType: !1279, size: 64, offset: 256)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2020, file: !2018, line: 51, baseType: !1279, size: 64, offset: 320)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2020, file: !2018, line: 52, baseType: !1279, size: 64, offset: 384)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2020, file: !2018, line: 53, baseType: !1279, size: 64, offset: 448)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2020, file: !2018, line: 54, baseType: !2025, size: 64, offset: 512)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2020, file: !2018, line: 55, baseType: !1279, size: 64, offset: 576)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2020, file: !2018, line: 56, baseType: !1279, size: 64, offset: 640)
!2038 = !DIGlobalVariableExpression(var: !2039, expr: !DIExpression())
!2039 = distinct !DIGlobalVariable(name: "allocno_vec", scope: !2, file: !3, line: 390, type: !1943, isLocal: true, isDefinition: true)
!2040 = !DIGlobalVariableExpression(var: !2041, expr: !DIExpression())
!2041 = distinct !DIGlobalVariable(name: "ira_conflict_id_allocno_map_vec", scope: !2, file: !3, line: 394, type: !1943, isLocal: true, isDefinition: true)
!2042 = !DIGlobalVariableExpression(var: !2043, expr: !DIExpression())
!2043 = distinct !DIGlobalVariable(name: "copy_pool", scope: !2, file: !3, line: 1023, type: !2017, isLocal: true, isDefinition: true)
!2044 = !DIGlobalVariableExpression(var: !2045, expr: !DIExpression())
!2045 = distinct !DIGlobalVariable(name: "copy_vec", scope: !2, file: !3, line: 1027, type: !1956, isLocal: true, isDefinition: true)
!2046 = !DIGlobalVariableExpression(var: !2047, expr: !DIExpression())
!2047 = distinct !DIGlobalVariable(name: "cost_vector_pool", scope: !2, file: !3, line: 1306, type: !2048, isLocal: true, isDefinition: true)
!2048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2017, size: 1728, elements: !1862)
!2049 = !DIGlobalVariableExpression(var: !2050, expr: !DIExpression())
!2050 = distinct !DIGlobalVariable(name: "ira_curr_loop_tree_node", scope: !2, file: !3, line: 1360, type: !1844, isLocal: false, isDefinition: true)
!2051 = !DIGlobalVariableExpression(var: !2052, expr: !DIExpression())
!2052 = distinct !DIGlobalVariable(name: "ira_curr_regno_allocno_map", scope: !2, file: !3, line: 1361, type: !1858, isLocal: false, isDefinition: true)
!2053 = !DIGlobalVariableExpression(var: !2054, expr: !DIExpression())
!2054 = distinct !DIGlobalVariable(name: "regno_top_level_allocno_map", scope: !2, file: !3, line: 2401, type: !1858, isLocal: true, isDefinition: true)
!2055 = !DIGlobalVariableExpression(var: !2056, expr: !DIExpression())
!2056 = distinct !DIGlobalVariable(name: "allocno_conflict_check", scope: !2, file: !3, line: 686, type: !1934, isLocal: true, isDefinition: true)
!2057 = !DIGlobalVariableExpression(var: !2058, expr: !DIExpression())
!2058 = distinct !DIGlobalVariable(name: "curr_allocno_conflict_check_tick", scope: !2, file: !3, line: 690, type: !703, isLocal: true, isDefinition: true)
!2059 = !DIGlobalVariableExpression(var: !2060, expr: !DIExpression())
!2060 = distinct !DIGlobalVariable(name: "last_basic_block_before_change", scope: !2, file: !3, line: 90, type: !703, isLocal: true, isDefinition: true)
!2061 = !DIGlobalVariableExpression(var: !2062, expr: !DIExpression())
!2062 = distinct !DIGlobalVariable(name: "curr_bb", scope: !2, file: !3, line: 1415, type: !1087, isLocal: true, isDefinition: true)
!2063 = !DIGlobalVariableExpression(var: !2064, expr: !DIExpression())
!2064 = distinct !DIGlobalVariable(name: "children_vec", scope: !2, file: !3, line: 1794, type: !1979, isLocal: true, isDefinition: true)
!2065 = !DIGlobalVariableExpression(var: !2066, expr: !DIExpression())
!2066 = distinct !DIGlobalVariable(name: "removed_loop_vec", scope: !2, file: !3, line: 1791, type: !1979, isLocal: true, isDefinition: true)
!2067 = !DIGlobalVariableExpression(var: !2068, expr: !DIExpression())
!2068 = distinct !DIGlobalVariable(name: "regno_allocnos", scope: !2, file: !3, line: 1866, type: !1858, isLocal: true, isDefinition: true)
!2069 = !{i32 7, !"Dwarf Version", i32 4}
!2070 = !{i32 2, !"Debug Info Version", i32 3}
!2071 = !{i32 1, !"wchar_size", i32 4}
!2072 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2073 = distinct !DISubprogram(name: "ira_create_allocno", scope: !3, file: !3, line: 420, type: !2074, scopeLine: 421, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2074 = !DISubroutineType(types: !2075)
!2075 = !{!697, !703, !942, !1844}
!2076 = !{}
!2077 = !DILocalVariable(name: "regno", arg: 1, scope: !2073, file: !3, line: 420, type: !703)
!2078 = !DILocation(line: 420, column: 25, scope: !2073)
!2079 = !DILocalVariable(name: "cap_p", arg: 2, scope: !2073, file: !3, line: 420, type: !942)
!2080 = !DILocation(line: 420, column: 37, scope: !2073)
!2081 = !DILocalVariable(name: "loop_tree_node", arg: 3, scope: !2073, file: !3, line: 420, type: !1844)
!2082 = !DILocation(line: 420, column: 65, scope: !2073)
!2083 = !DILocalVariable(name: "a", scope: !2073, file: !3, line: 422, type: !697)
!2084 = !DILocation(line: 422, column: 17, scope: !2073)
!2085 = !DILocation(line: 424, column: 35, scope: !2073)
!2086 = !DILocation(line: 424, column: 23, scope: !2073)
!2087 = !DILocation(line: 424, column: 7, scope: !2073)
!2088 = !DILocation(line: 424, column: 5, scope: !2073)
!2089 = !DILocation(line: 425, column: 23, scope: !2073)
!2090 = !DILocation(line: 425, column: 3, scope: !2073)
!2091 = !DILocation(line: 425, column: 21, scope: !2073)
!2092 = !DILocation(line: 426, column: 32, scope: !2073)
!2093 = !DILocation(line: 426, column: 3, scope: !2073)
!2094 = !DILocation(line: 426, column: 30, scope: !2073)
!2095 = !DILocation(line: 427, column: 9, scope: !2096)
!2096 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 427, column: 7)
!2097 = !DILocation(line: 427, column: 7, scope: !2073)
!2098 = !DILocation(line: 429, column: 40, scope: !2099)
!2099 = distinct !DILexicalBlock(scope: !2096, file: !3, line: 428, column: 5)
!2100 = !DILocation(line: 429, column: 62, scope: !2099)
!2101 = !DILocation(line: 429, column: 7, scope: !2099)
!2102 = !DILocation(line: 429, column: 38, scope: !2099)
!2103 = !DILocation(line: 430, column: 38, scope: !2099)
!2104 = !DILocation(line: 430, column: 7, scope: !2099)
!2105 = !DILocation(line: 430, column: 29, scope: !2099)
!2106 = !DILocation(line: 430, column: 36, scope: !2099)
!2107 = !DILocation(line: 431, column: 11, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !2099, file: !3, line: 431, column: 11)
!2109 = !DILocation(line: 431, column: 27, scope: !2108)
!2110 = !DILocation(line: 431, column: 45, scope: !2108)
!2111 = !DILocation(line: 431, column: 52, scope: !2108)
!2112 = !DILocation(line: 431, column: 11, scope: !2099)
!2113 = !DILocation(line: 435, column: 45, scope: !2108)
!2114 = !DILocation(line: 435, column: 2, scope: !2108)
!2115 = !DILocation(line: 435, column: 18, scope: !2108)
!2116 = !DILocation(line: 435, column: 36, scope: !2108)
!2117 = !DILocation(line: 435, column: 43, scope: !2108)
!2118 = !DILocation(line: 436, column: 5, scope: !2099)
!2119 = !DILocation(line: 437, column: 3, scope: !2073)
!2120 = !DILocation(line: 437, column: 19, scope: !2073)
!2121 = !DILocation(line: 438, column: 3, scope: !2073)
!2122 = !DILocation(line: 438, column: 26, scope: !2073)
!2123 = !DILocation(line: 439, column: 21, scope: !2073)
!2124 = !DILocation(line: 439, column: 3, scope: !2073)
!2125 = !DILocation(line: 439, column: 19, scope: !2073)
!2126 = !DILocation(line: 440, column: 19, scope: !2073)
!2127 = !DILocation(line: 440, column: 35, scope: !2073)
!2128 = !DILocation(line: 440, column: 49, scope: !2073)
!2129 = !DILocation(line: 440, column: 3, scope: !2073)
!2130 = !DILocation(line: 441, column: 3, scope: !2073)
!2131 = !DILocation(line: 441, column: 38, scope: !2073)
!2132 = !DILocation(line: 442, column: 3, scope: !2073)
!2133 = !DILocation(line: 442, column: 37, scope: !2073)
!2134 = !DILocation(line: 443, column: 3, scope: !2073)
!2135 = !DILocation(line: 444, column: 3, scope: !2073)
!2136 = !DILocation(line: 445, column: 3, scope: !2073)
!2137 = !DILocation(line: 445, column: 21, scope: !2073)
!2138 = !DILocation(line: 446, column: 3, scope: !2073)
!2139 = !DILocation(line: 446, column: 20, scope: !2073)
!2140 = !DILocation(line: 447, column: 3, scope: !2073)
!2141 = !DILocation(line: 447, column: 26, scope: !2073)
!2142 = !DILocation(line: 448, column: 3, scope: !2073)
!2143 = !DILocation(line: 448, column: 25, scope: !2073)
!2144 = !DILocation(line: 449, column: 3, scope: !2073)
!2145 = !DILocation(line: 449, column: 33, scope: !2073)
!2146 = !DILocation(line: 451, column: 3, scope: !2073)
!2147 = !DILocation(line: 451, column: 30, scope: !2073)
!2148 = !DILocation(line: 452, column: 3, scope: !2073)
!2149 = !DILocation(line: 452, column: 36, scope: !2073)
!2150 = !DILocation(line: 454, column: 3, scope: !2073)
!2151 = !DILocation(line: 454, column: 34, scope: !2073)
!2152 = !DILocation(line: 455, column: 3, scope: !2073)
!2153 = !DILocation(line: 455, column: 36, scope: !2073)
!2154 = !DILocation(line: 456, column: 3, scope: !2073)
!2155 = !DILocation(line: 456, column: 35, scope: !2073)
!2156 = !DILocation(line: 457, column: 3, scope: !2073)
!2157 = !DILocation(line: 457, column: 31, scope: !2073)
!2158 = !DILocation(line: 458, column: 3, scope: !2073)
!2159 = !DILocation(line: 458, column: 31, scope: !2073)
!2160 = !DILocation(line: 459, column: 3, scope: !2073)
!2161 = !DILocation(line: 459, column: 27, scope: !2073)
!2162 = !DILocation(line: 460, column: 3, scope: !2073)
!2163 = !DILocation(line: 460, column: 26, scope: !2073)
!2164 = !DILocation(line: 461, column: 3, scope: !2073)
!2165 = !DILocation(line: 461, column: 26, scope: !2073)
!2166 = !DILocation(line: 462, column: 3, scope: !2073)
!2167 = !DILocation(line: 462, column: 32, scope: !2073)
!2168 = !DILocation(line: 463, column: 3, scope: !2073)
!2169 = !DILocation(line: 463, column: 31, scope: !2073)
!2170 = !DILocation(line: 464, column: 3, scope: !2073)
!2171 = !DILocation(line: 464, column: 30, scope: !2073)
!2172 = !DILocation(line: 465, column: 23, scope: !2073)
!2173 = !DILocation(line: 465, column: 29, scope: !2073)
!2174 = !DILocation(line: 465, column: 46, scope: !2073)
!2175 = !DILocation(line: 465, column: 3, scope: !2073)
!2176 = !DILocation(line: 465, column: 20, scope: !2073)
!2177 = !DILocation(line: 466, column: 3, scope: !2073)
!2178 = !DILocation(line: 466, column: 22, scope: !2073)
!2179 = !DILocation(line: 467, column: 3, scope: !2073)
!2180 = !DILocation(line: 467, column: 30, scope: !2073)
!2181 = !DILocation(line: 468, column: 3, scope: !2073)
!2182 = !DILocation(line: 468, column: 39, scope: !2073)
!2183 = !DILocation(line: 469, column: 3, scope: !2073)
!2184 = !DILocation(line: 469, column: 38, scope: !2073)
!2185 = !DILocation(line: 470, column: 3, scope: !2073)
!2186 = !DILocation(line: 470, column: 47, scope: !2073)
!2187 = !DILocation(line: 471, column: 3, scope: !2073)
!2188 = !DILocation(line: 471, column: 35, scope: !2073)
!2189 = !DILocation(line: 472, column: 3, scope: !2073)
!2190 = !DILocation(line: 472, column: 27, scope: !2073)
!2191 = !DILocation(line: 473, column: 3, scope: !2073)
!2192 = !DILocation(line: 473, column: 40, scope: !2073)
!2193 = !DILocation(line: 474, column: 3, scope: !2073)
!2194 = !DILocation(line: 474, column: 32, scope: !2073)
!2195 = !DILocation(line: 475, column: 3, scope: !2073)
!2196 = !DILocation(line: 475, column: 27, scope: !2073)
!2197 = !DILocation(line: 476, column: 3, scope: !2073)
!2198 = !DILocation(line: 476, column: 35, scope: !2073)
!2199 = !DILocation(line: 477, column: 3, scope: !2073)
!2200 = !DILocation(line: 477, column: 42, scope: !2073)
!2201 = !DILocation(line: 478, column: 3, scope: !2073)
!2202 = !DILocation(line: 478, column: 35, scope: !2073)
!2203 = !DILocation(line: 479, column: 3, scope: !2073)
!2204 = !DILocation(line: 479, column: 35, scope: !2073)
!2205 = !DILocation(line: 480, column: 41, scope: !2073)
!2206 = !DILocation(line: 480, column: 3, scope: !2073)
!2207 = !DILocation(line: 480, column: 39, scope: !2073)
!2208 = !DILocation(line: 481, column: 40, scope: !2073)
!2209 = !DILocation(line: 481, column: 3, scope: !2073)
!2210 = !DILocation(line: 481, column: 38, scope: !2073)
!2211 = !DILocation(line: 482, column: 3, scope: !2073)
!2212 = !DILocation(line: 482, column: 27, scope: !2073)
!2213 = !DILocation(line: 483, column: 3, scope: !2073)
!2214 = !DILocation(line: 483, column: 19, scope: !2073)
!2215 = !DILocation(line: 484, column: 3, scope: !2073)
!2216 = !DILocation(line: 484, column: 19, scope: !2073)
!2217 = !DILocation(line: 485, column: 29, scope: !2073)
!2218 = !DILocation(line: 485, column: 3, scope: !2073)
!2219 = !DILocation(line: 485, column: 27, scope: !2073)
!2220 = !DILocation(line: 486, column: 3, scope: !2073)
!2221 = !DILocation(line: 487, column: 18, scope: !2073)
!2222 = !DILocation(line: 487, column: 16, scope: !2073)
!2223 = !DILocation(line: 488, column: 22, scope: !2073)
!2224 = !DILocation(line: 488, column: 20, scope: !2073)
!2225 = !DILocation(line: 489, column: 3, scope: !2073)
!2226 = !DILocation(line: 491, column: 7, scope: !2073)
!2227 = !DILocation(line: 491, column: 5, scope: !2073)
!2228 = !DILocation(line: 492, column: 10, scope: !2073)
!2229 = !DILocation(line: 492, column: 3, scope: !2073)
!2230 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_safe_push", scope: !698, file: !698, line: 68, type: !2231, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2231 = !DISubroutineType(types: !2232)
!2232 = !{!1858, !2233, !697}
!2233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1943, size: 64)
!2234 = !DILocalVariable(name: "vec_", arg: 1, scope: !2230, file: !698, line: 68, type: !2233)
!2235 = !DILocation(line: 68, column: 1, scope: !2230)
!2236 = !DILocalVariable(name: "obj_", arg: 2, scope: !2230, file: !698, line: 68, type: !697)
!2237 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_address", scope: !698, file: !698, line: 67, type: !2238, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2238 = !DISubroutineType(types: !2239)
!2239 = !{!1858, !2240}
!2240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1948, size: 64)
!2241 = !DILocalVariable(name: "vec_", arg: 1, scope: !2237, file: !698, line: 67, type: !2240)
!2242 = !DILocation(line: 67, column: 1, scope: !2237)
!2243 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_length", scope: !698, file: !698, line: 67, type: !2244, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2244 = !DISubroutineType(types: !2245)
!2245 = !{!7, !2246}
!2246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2247, size: 64)
!2247 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1948)
!2248 = !DILocalVariable(name: "vec_", arg: 1, scope: !2243, file: !698, line: 67, type: !2246)
!2249 = !DILocation(line: 67, column: 1, scope: !2243)
!2250 = distinct !DISubprogram(name: "ira_set_allocno_cover_class", scope: !3, file: !3, line: 497, type: !2251, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2251 = !DISubroutineType(types: !2252)
!2252 = !{null, !697, !390}
!2253 = !DILocalVariable(name: "a", arg: 1, scope: !2250, file: !3, line: 497, type: !697)
!2254 = !DILocation(line: 497, column: 44, scope: !2250)
!2255 = !DILocalVariable(name: "cover_class", arg: 2, scope: !2250, file: !3, line: 497, type: !390)
!2256 = !DILocation(line: 497, column: 62, scope: !2250)
!2257 = !DILocation(line: 499, column: 29, scope: !2250)
!2258 = !DILocation(line: 499, column: 3, scope: !2250)
!2259 = !DILocation(line: 499, column: 27, scope: !2250)
!2260 = !DILocation(line: 500, column: 3, scope: !2250)
!2261 = !DILocation(line: 502, column: 3, scope: !2250)
!2262 = !DILocation(line: 504, column: 1, scope: !2250)
!2263 = distinct !DISubprogram(name: "ira_conflict_vector_profitable_p", scope: !3, file: !3, line: 509, type: !2264, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2264 = !DISubroutineType(types: !2265)
!2265 = !{!942, !697, !703}
!2266 = !DILocalVariable(name: "a", arg: 1, scope: !2263, file: !3, line: 509, type: !697)
!2267 = !DILocation(line: 509, column: 49, scope: !2263)
!2268 = !DILocalVariable(name: "num", arg: 2, scope: !2263, file: !3, line: 509, type: !703)
!2269 = !DILocation(line: 509, column: 56, scope: !2263)
!2270 = !DILocalVariable(name: "nw", scope: !2263, file: !3, line: 511, type: !703)
!2271 = !DILocation(line: 511, column: 7, scope: !2263)
!2272 = !DILocation(line: 513, column: 7, scope: !2273)
!2273 = distinct !DILexicalBlock(scope: !2263, file: !3, line: 513, column: 7)
!2274 = !DILocation(line: 513, column: 25, scope: !2273)
!2275 = !DILocation(line: 513, column: 23, scope: !2273)
!2276 = !DILocation(line: 513, column: 7, scope: !2263)
!2277 = !DILocation(line: 516, column: 5, scope: !2273)
!2278 = !DILocation(line: 518, column: 9, scope: !2263)
!2279 = !DILocation(line: 518, column: 27, scope: !2263)
!2280 = !DILocation(line: 518, column: 25, scope: !2263)
!2281 = !DILocation(line: 518, column: 43, scope: !2263)
!2282 = !DILocation(line: 518, column: 59, scope: !2263)
!2283 = !DILocation(line: 518, column: 6, scope: !2263)
!2284 = !DILocation(line: 519, column: 41, scope: !2263)
!2285 = !DILocation(line: 519, column: 45, scope: !2263)
!2286 = !DILocation(line: 519, column: 40, scope: !2263)
!2287 = !DILocation(line: 519, column: 38, scope: !2263)
!2288 = !DILocation(line: 520, column: 10, scope: !2263)
!2289 = !DILocation(line: 520, column: 8, scope: !2263)
!2290 = !DILocation(line: 520, column: 6, scope: !2263)
!2291 = !DILocation(line: 520, column: 13, scope: !2263)
!2292 = !DILocation(line: 520, column: 4, scope: !2263)
!2293 = !DILocation(line: 519, column: 10, scope: !2263)
!2294 = !DILocation(line: 519, column: 3, scope: !2263)
!2295 = !DILocation(line: 521, column: 1, scope: !2263)
!2296 = distinct !DISubprogram(name: "ira_allocate_allocno_conflict_vec", scope: !3, file: !3, line: 526, type: !2297, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2297 = !DISubroutineType(types: !2298)
!2298 = !{null, !697, !703}
!2299 = !DILocalVariable(name: "a", arg: 1, scope: !2296, file: !3, line: 526, type: !697)
!2300 = !DILocation(line: 526, column: 50, scope: !2296)
!2301 = !DILocalVariable(name: "num", arg: 2, scope: !2296, file: !3, line: 526, type: !703)
!2302 = !DILocation(line: 526, column: 57, scope: !2296)
!2303 = !DILocalVariable(name: "size", scope: !2296, file: !3, line: 528, type: !703)
!2304 = !DILocation(line: 528, column: 7, scope: !2296)
!2305 = !DILocalVariable(name: "vec", scope: !2296, file: !3, line: 529, type: !1858)
!2306 = !DILocation(line: 529, column: 18, scope: !2296)
!2307 = !DILocation(line: 532, column: 6, scope: !2296)
!2308 = !DILocation(line: 533, column: 35, scope: !2296)
!2309 = !DILocation(line: 533, column: 33, scope: !2296)
!2310 = !DILocation(line: 533, column: 10, scope: !2296)
!2311 = !DILocation(line: 533, column: 8, scope: !2296)
!2312 = !DILocation(line: 534, column: 54, scope: !2296)
!2313 = !DILocation(line: 534, column: 40, scope: !2296)
!2314 = !DILocation(line: 534, column: 3, scope: !2296)
!2315 = !DILocation(line: 534, column: 38, scope: !2296)
!2316 = !DILocation(line: 535, column: 27, scope: !2296)
!2317 = !DILocation(line: 535, column: 9, scope: !2296)
!2318 = !DILocation(line: 535, column: 7, scope: !2296)
!2319 = !DILocation(line: 536, column: 3, scope: !2296)
!2320 = !DILocation(line: 536, column: 10, scope: !2296)
!2321 = !DILocation(line: 537, column: 3, scope: !2296)
!2322 = !DILocation(line: 537, column: 37, scope: !2296)
!2323 = !DILocation(line: 538, column: 45, scope: !2296)
!2324 = !DILocation(line: 538, column: 3, scope: !2296)
!2325 = !DILocation(line: 538, column: 43, scope: !2296)
!2326 = !DILocation(line: 539, column: 3, scope: !2296)
!2327 = !DILocation(line: 539, column: 30, scope: !2296)
!2328 = !DILocation(line: 540, column: 1, scope: !2296)
!2329 = distinct !DISubprogram(name: "ira_allocate_allocno_conflicts", scope: !3, file: !3, line: 560, type: !2297, scopeLine: 561, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2330 = !DILocalVariable(name: "a", arg: 1, scope: !2329, file: !3, line: 560, type: !697)
!2331 = !DILocation(line: 560, column: 47, scope: !2329)
!2332 = !DILocalVariable(name: "num", arg: 2, scope: !2329, file: !3, line: 560, type: !703)
!2333 = !DILocation(line: 560, column: 54, scope: !2329)
!2334 = !DILocation(line: 562, column: 41, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2329, file: !3, line: 562, column: 7)
!2336 = !DILocation(line: 562, column: 44, scope: !2335)
!2337 = !DILocation(line: 562, column: 7, scope: !2335)
!2338 = !DILocation(line: 562, column: 7, scope: !2329)
!2339 = !DILocation(line: 563, column: 40, scope: !2335)
!2340 = !DILocation(line: 563, column: 43, scope: !2335)
!2341 = !DILocation(line: 563, column: 5, scope: !2335)
!2342 = !DILocation(line: 565, column: 40, scope: !2335)
!2343 = !DILocation(line: 565, column: 5, scope: !2335)
!2344 = !DILocation(line: 566, column: 1, scope: !2329)
!2345 = distinct !DISubprogram(name: "allocate_allocno_conflict_bit_vec", scope: !3, file: !3, line: 544, type: !2346, scopeLine: 545, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2346 = !DISubroutineType(types: !2347)
!2347 = !{null, !697}
!2348 = !DILocalVariable(name: "a", arg: 1, scope: !2345, file: !3, line: 544, type: !697)
!2349 = !DILocation(line: 544, column: 50, scope: !2345)
!2350 = !DILocalVariable(name: "size", scope: !2345, file: !3, line: 546, type: !7)
!2351 = !DILocation(line: 546, column: 16, scope: !2345)
!2352 = !DILocation(line: 549, column: 12, scope: !2345)
!2353 = !DILocation(line: 549, column: 30, scope: !2345)
!2354 = !DILocation(line: 549, column: 28, scope: !2345)
!2355 = !DILocation(line: 549, column: 46, scope: !2345)
!2356 = !DILocation(line: 550, column: 4, scope: !2345)
!2357 = !DILocation(line: 549, column: 11, scope: !2345)
!2358 = !DILocation(line: 550, column: 19, scope: !2345)
!2359 = !DILocation(line: 549, column: 10, scope: !2345)
!2360 = !DILocation(line: 549, column: 8, scope: !2345)
!2361 = !DILocation(line: 551, column: 54, scope: !2345)
!2362 = !DILocation(line: 551, column: 40, scope: !2345)
!2363 = !DILocation(line: 551, column: 3, scope: !2345)
!2364 = !DILocation(line: 551, column: 38, scope: !2345)
!2365 = !DILocation(line: 552, column: 11, scope: !2345)
!2366 = !DILocation(line: 552, column: 50, scope: !2345)
!2367 = !DILocation(line: 552, column: 3, scope: !2345)
!2368 = !DILocation(line: 553, column: 45, scope: !2345)
!2369 = !DILocation(line: 553, column: 3, scope: !2345)
!2370 = !DILocation(line: 553, column: 43, scope: !2345)
!2371 = !DILocation(line: 554, column: 3, scope: !2345)
!2372 = !DILocation(line: 554, column: 30, scope: !2345)
!2373 = !DILocation(line: 555, column: 1, scope: !2345)
!2374 = distinct !DISubprogram(name: "ira_add_allocno_conflict", scope: !3, file: !3, line: 659, type: !2375, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2375 = !DISubroutineType(types: !2376)
!2376 = !{null, !697, !697}
!2377 = !DILocalVariable(name: "a1", arg: 1, scope: !2374, file: !3, line: 659, type: !697)
!2378 = !DILocation(line: 659, column: 41, scope: !2374)
!2379 = !DILocalVariable(name: "a2", arg: 2, scope: !2374, file: !3, line: 659, type: !697)
!2380 = !DILocation(line: 659, column: 59, scope: !2374)
!2381 = !DILocation(line: 661, column: 29, scope: !2374)
!2382 = !DILocation(line: 661, column: 33, scope: !2374)
!2383 = !DILocation(line: 661, column: 3, scope: !2374)
!2384 = !DILocation(line: 662, column: 29, scope: !2374)
!2385 = !DILocation(line: 662, column: 33, scope: !2374)
!2386 = !DILocation(line: 662, column: 3, scope: !2374)
!2387 = !DILocation(line: 663, column: 1, scope: !2374)
!2388 = distinct !DISubprogram(name: "add_to_allocno_conflicts", scope: !3, file: !3, line: 570, type: !2375, scopeLine: 571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2389 = !DILocalVariable(name: "a1", arg: 1, scope: !2388, file: !3, line: 570, type: !697)
!2390 = !DILocation(line: 570, column: 41, scope: !2388)
!2391 = !DILocalVariable(name: "a2", arg: 2, scope: !2388, file: !3, line: 570, type: !697)
!2392 = !DILocation(line: 570, column: 59, scope: !2388)
!2393 = !DILocalVariable(name: "num", scope: !2388, file: !3, line: 572, type: !703)
!2394 = !DILocation(line: 572, column: 7, scope: !2388)
!2395 = !DILocalVariable(name: "size", scope: !2388, file: !3, line: 573, type: !7)
!2396 = !DILocation(line: 573, column: 16, scope: !2388)
!2397 = !DILocation(line: 575, column: 7, scope: !2398)
!2398 = distinct !DILexicalBlock(scope: !2388, file: !3, line: 575, column: 7)
!2399 = !DILocation(line: 575, column: 7, scope: !2388)
!2400 = !DILocalVariable(name: "vec", scope: !2401, file: !3, line: 577, type: !1858)
!2401 = distinct !DILexicalBlock(scope: !2398, file: !3, line: 576, column: 5)
!2402 = !DILocation(line: 577, column: 22, scope: !2401)
!2403 = !DILocation(line: 579, column: 13, scope: !2401)
!2404 = !DILocation(line: 579, column: 48, scope: !2401)
!2405 = !DILocation(line: 579, column: 11, scope: !2401)
!2406 = !DILocation(line: 580, column: 11, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2401, file: !3, line: 580, column: 11)
!2408 = !DILocation(line: 581, column: 8, scope: !2407)
!2409 = !DILocation(line: 581, column: 12, scope: !2407)
!2410 = !DILocation(line: 581, column: 4, scope: !2407)
!2411 = !DILocation(line: 580, column: 11, scope: !2401)
!2412 = !DILocation(line: 582, column: 26, scope: !2407)
!2413 = !DILocation(line: 582, column: 8, scope: !2407)
!2414 = !DILocation(line: 582, column: 6, scope: !2407)
!2415 = !DILocation(line: 582, column: 2, scope: !2407)
!2416 = !DILocation(line: 585, column: 16, scope: !2417)
!2417 = distinct !DILexicalBlock(scope: !2407, file: !3, line: 584, column: 2)
!2418 = !DILocation(line: 585, column: 14, scope: !2417)
!2419 = !DILocation(line: 585, column: 20, scope: !2417)
!2420 = !DILocation(line: 585, column: 24, scope: !2417)
!2421 = !DILocation(line: 585, column: 11, scope: !2417)
!2422 = !DILocation(line: 585, column: 29, scope: !2417)
!2423 = !DILocation(line: 585, column: 9, scope: !2417)
!2424 = !DILocation(line: 586, column: 42, scope: !2417)
!2425 = !DILocation(line: 586, column: 28, scope: !2417)
!2426 = !DILocation(line: 586, column: 10, scope: !2417)
!2427 = !DILocation(line: 586, column: 8, scope: !2417)
!2428 = !DILocation(line: 587, column: 12, scope: !2417)
!2429 = !DILocation(line: 587, column: 4, scope: !2417)
!2430 = !DILocation(line: 587, column: 17, scope: !2417)
!2431 = !DILocation(line: 588, column: 30, scope: !2417)
!2432 = !DILocation(line: 588, column: 28, scope: !2417)
!2433 = !DILocation(line: 589, column: 14, scope: !2417)
!2434 = !DILocation(line: 589, column: 4, scope: !2417)
!2435 = !DILocation(line: 590, column: 42, scope: !2417)
!2436 = !DILocation(line: 590, column: 4, scope: !2417)
!2437 = !DILocation(line: 590, column: 40, scope: !2417)
!2438 = !DILocation(line: 591, column: 47, scope: !2417)
!2439 = !DILocation(line: 591, column: 4, scope: !2417)
!2440 = !DILocation(line: 591, column: 45, scope: !2417)
!2441 = !DILocation(line: 593, column: 22, scope: !2401)
!2442 = !DILocation(line: 593, column: 7, scope: !2401)
!2443 = !DILocation(line: 593, column: 11, scope: !2401)
!2444 = !DILocation(line: 593, column: 15, scope: !2401)
!2445 = !DILocation(line: 593, column: 20, scope: !2401)
!2446 = !DILocation(line: 594, column: 7, scope: !2401)
!2447 = !DILocation(line: 594, column: 11, scope: !2401)
!2448 = !DILocation(line: 594, column: 15, scope: !2401)
!2449 = !DILocation(line: 594, column: 20, scope: !2401)
!2450 = !DILocation(line: 595, column: 7, scope: !2401)
!2451 = !DILocation(line: 595, column: 41, scope: !2401)
!2452 = !DILocation(line: 596, column: 5, scope: !2401)
!2453 = !DILocalVariable(name: "nw", scope: !2454, file: !3, line: 599, type: !703)
!2454 = distinct !DILexicalBlock(scope: !2398, file: !3, line: 598, column: 5)
!2455 = !DILocation(line: 599, column: 11, scope: !2454)
!2456 = !DILocalVariable(name: "added_head_nw", scope: !2454, file: !3, line: 599, type: !703)
!2457 = !DILocation(line: 599, column: 15, scope: !2454)
!2458 = !DILocalVariable(name: "id", scope: !2454, file: !3, line: 599, type: !703)
!2459 = !DILocation(line: 599, column: 30, scope: !2454)
!2460 = !DILocalVariable(name: "vec", scope: !2454, file: !3, line: 600, type: !1955)
!2461 = !DILocation(line: 600, column: 21, scope: !2454)
!2462 = !DILocation(line: 602, column: 12, scope: !2454)
!2463 = !DILocation(line: 602, column: 10, scope: !2454)
!2464 = !DILocation(line: 603, column: 30, scope: !2454)
!2465 = !DILocation(line: 603, column: 13, scope: !2454)
!2466 = !DILocation(line: 603, column: 11, scope: !2454)
!2467 = !DILocation(line: 604, column: 11, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2454, file: !3, line: 604, column: 11)
!2469 = !DILocation(line: 604, column: 30, scope: !2468)
!2470 = !DILocation(line: 604, column: 28, scope: !2468)
!2471 = !DILocation(line: 604, column: 11, scope: !2454)
!2472 = !DILocation(line: 607, column: 21, scope: !2473)
!2473 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 605, column: 2)
!2474 = !DILocation(line: 607, column: 40, scope: !2473)
!2475 = !DILocation(line: 607, column: 38, scope: !2473)
!2476 = !DILocation(line: 607, column: 43, scope: !2473)
!2477 = !DILocation(line: 607, column: 48, scope: !2473)
!2478 = !DILocation(line: 607, column: 63, scope: !2473)
!2479 = !DILocation(line: 607, column: 18, scope: !2473)
!2480 = !DILocation(line: 608, column: 10, scope: !2473)
!2481 = !DILocation(line: 608, column: 29, scope: !2473)
!2482 = !DILocation(line: 608, column: 27, scope: !2473)
!2483 = !DILocation(line: 608, column: 47, scope: !2473)
!2484 = !DILocation(line: 608, column: 62, scope: !2473)
!2485 = !DILocation(line: 608, column: 7, scope: !2473)
!2486 = !DILocation(line: 609, column: 12, scope: !2473)
!2487 = !DILocation(line: 609, column: 17, scope: !2473)
!2488 = !DILocation(line: 609, column: 15, scope: !2473)
!2489 = !DILocation(line: 609, column: 11, scope: !2473)
!2490 = !DILocation(line: 609, column: 32, scope: !2473)
!2491 = !DILocation(line: 609, column: 9, scope: !2473)
!2492 = !DILocation(line: 610, column: 8, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2473, file: !3, line: 610, column: 8)
!2494 = !DILocation(line: 610, column: 52, scope: !2493)
!2495 = !DILocation(line: 610, column: 49, scope: !2493)
!2496 = !DILocation(line: 610, column: 8, scope: !2473)
!2497 = !DILocation(line: 612, column: 26, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2493, file: !3, line: 611, column: 6)
!2499 = !DILocation(line: 612, column: 17, scope: !2498)
!2500 = !DILocation(line: 612, column: 32, scope: !2498)
!2501 = !DILocation(line: 612, column: 46, scope: !2498)
!2502 = !DILocation(line: 612, column: 30, scope: !2498)
!2503 = !DILocation(line: 613, column: 10, scope: !2498)
!2504 = !DILocation(line: 612, column: 8, scope: !2498)
!2505 = !DILocation(line: 613, column: 15, scope: !2498)
!2506 = !DILocation(line: 613, column: 18, scope: !2498)
!2507 = !DILocation(line: 614, column: 16, scope: !2498)
!2508 = !DILocation(line: 614, column: 8, scope: !2498)
!2509 = !DILocation(line: 614, column: 24, scope: !2498)
!2510 = !DILocation(line: 614, column: 38, scope: !2498)
!2511 = !DILocation(line: 615, column: 6, scope: !2498)
!2512 = !DILocation(line: 619, column: 11, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2493, file: !3, line: 617, column: 6)
!2514 = !DILocation(line: 619, column: 16, scope: !2513)
!2515 = !DILocation(line: 619, column: 14, scope: !2513)
!2516 = !DILocation(line: 619, column: 8, scope: !2513)
!2517 = !DILocation(line: 619, column: 31, scope: !2513)
!2518 = !DILocation(line: 619, column: 35, scope: !2513)
!2519 = !DILocation(line: 619, column: 5, scope: !2513)
!2520 = !DILocation(line: 619, column: 40, scope: !2513)
!2521 = !DILocation(line: 619, column: 3, scope: !2513)
!2522 = !DILocation(line: 620, column: 45, scope: !2513)
!2523 = !DILocation(line: 620, column: 31, scope: !2513)
!2524 = !DILocation(line: 620, column: 14, scope: !2513)
!2525 = !DILocation(line: 620, column: 12, scope: !2513)
!2526 = !DILocation(line: 621, column: 25, scope: !2513)
!2527 = !DILocation(line: 621, column: 16, scope: !2513)
!2528 = !DILocation(line: 621, column: 31, scope: !2513)
!2529 = !DILocation(line: 621, column: 45, scope: !2513)
!2530 = !DILocation(line: 621, column: 29, scope: !2513)
!2531 = !DILocation(line: 622, column: 9, scope: !2513)
!2532 = !DILocation(line: 623, column: 9, scope: !2513)
!2533 = !DILocation(line: 623, column: 12, scope: !2513)
!2534 = !DILocation(line: 621, column: 8, scope: !2513)
!2535 = !DILocation(line: 624, column: 16, scope: !2513)
!2536 = !DILocation(line: 624, column: 8, scope: !2513)
!2537 = !DILocation(line: 624, column: 24, scope: !2513)
!2538 = !DILocation(line: 624, column: 38, scope: !2513)
!2539 = !DILocation(line: 625, column: 25, scope: !2513)
!2540 = !DILocation(line: 625, column: 16, scope: !2513)
!2541 = !DILocation(line: 626, column: 12, scope: !2513)
!2542 = !DILocation(line: 626, column: 17, scope: !2513)
!2543 = !DILocation(line: 626, column: 15, scope: !2513)
!2544 = !DILocation(line: 626, column: 11, scope: !2513)
!2545 = !DILocation(line: 626, column: 32, scope: !2513)
!2546 = !DILocation(line: 626, column: 9, scope: !2513)
!2547 = !DILocation(line: 627, column: 12, scope: !2513)
!2548 = !DILocation(line: 627, column: 20, scope: !2513)
!2549 = !DILocation(line: 627, column: 25, scope: !2513)
!2550 = !DILocation(line: 627, column: 23, scope: !2513)
!2551 = !DILocation(line: 627, column: 19, scope: !2513)
!2552 = !DILocation(line: 627, column: 40, scope: !2513)
!2553 = !DILocation(line: 627, column: 17, scope: !2513)
!2554 = !DILocation(line: 625, column: 8, scope: !2513)
!2555 = !DILocation(line: 628, column: 18, scope: !2513)
!2556 = !DILocation(line: 628, column: 8, scope: !2513)
!2557 = !DILocation(line: 629, column: 46, scope: !2513)
!2558 = !DILocation(line: 629, column: 8, scope: !2513)
!2559 = !DILocation(line: 629, column: 44, scope: !2513)
!2560 = !DILocation(line: 630, column: 51, scope: !2513)
!2561 = !DILocation(line: 630, column: 8, scope: !2513)
!2562 = !DILocation(line: 630, column: 49, scope: !2513)
!2563 = !DILocation(line: 632, column: 24, scope: !2473)
!2564 = !DILocation(line: 632, column: 38, scope: !2473)
!2565 = !DILocation(line: 632, column: 4, scope: !2473)
!2566 = !DILocation(line: 632, column: 21, scope: !2473)
!2567 = !DILocation(line: 633, column: 2, scope: !2473)
!2568 = !DILocation(line: 634, column: 16, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 634, column: 16)
!2570 = !DILocation(line: 634, column: 35, scope: !2569)
!2571 = !DILocation(line: 634, column: 33, scope: !2569)
!2572 = !DILocation(line: 634, column: 16, scope: !2468)
!2573 = !DILocation(line: 636, column: 10, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 635, column: 2)
!2575 = !DILocation(line: 636, column: 15, scope: !2574)
!2576 = !DILocation(line: 636, column: 13, scope: !2574)
!2577 = !DILocation(line: 636, column: 33, scope: !2574)
!2578 = !DILocation(line: 636, column: 48, scope: !2574)
!2579 = !DILocation(line: 636, column: 7, scope: !2574)
!2580 = !DILocation(line: 637, column: 11, scope: !2574)
!2581 = !DILocation(line: 637, column: 14, scope: !2574)
!2582 = !DILocation(line: 637, column: 9, scope: !2574)
!2583 = !DILocation(line: 638, column: 8, scope: !2584)
!2584 = distinct !DILexicalBlock(scope: !2574, file: !3, line: 638, column: 8)
!2585 = !DILocation(line: 638, column: 51, scope: !2584)
!2586 = !DILocation(line: 638, column: 49, scope: !2584)
!2587 = !DILocation(line: 638, column: 8, scope: !2574)
!2588 = !DILocation(line: 641, column: 20, scope: !2589)
!2589 = distinct !DILexicalBlock(scope: !2584, file: !3, line: 639, column: 6)
!2590 = !DILocation(line: 641, column: 18, scope: !2589)
!2591 = !DILocation(line: 641, column: 23, scope: !2589)
!2592 = !DILocation(line: 641, column: 27, scope: !2589)
!2593 = !DILocation(line: 641, column: 15, scope: !2589)
!2594 = !DILocation(line: 641, column: 32, scope: !2589)
!2595 = !DILocation(line: 641, column: 13, scope: !2589)
!2596 = !DILocation(line: 642, column: 45, scope: !2589)
!2597 = !DILocation(line: 642, column: 31, scope: !2589)
!2598 = !DILocation(line: 642, column: 14, scope: !2589)
!2599 = !DILocation(line: 642, column: 12, scope: !2589)
!2600 = !DILocation(line: 643, column: 16, scope: !2589)
!2601 = !DILocation(line: 643, column: 8, scope: !2589)
!2602 = !DILocation(line: 643, column: 21, scope: !2589)
!2603 = !DILocation(line: 644, column: 9, scope: !2589)
!2604 = !DILocation(line: 645, column: 25, scope: !2589)
!2605 = !DILocation(line: 645, column: 16, scope: !2589)
!2606 = !DILocation(line: 645, column: 31, scope: !2589)
!2607 = !DILocation(line: 645, column: 29, scope: !2589)
!2608 = !DILocation(line: 646, column: 12, scope: !2589)
!2609 = !DILocation(line: 646, column: 19, scope: !2589)
!2610 = !DILocation(line: 646, column: 17, scope: !2589)
!2611 = !DILocation(line: 645, column: 8, scope: !2589)
!2612 = !DILocation(line: 647, column: 18, scope: !2589)
!2613 = !DILocation(line: 647, column: 8, scope: !2589)
!2614 = !DILocation(line: 648, column: 46, scope: !2589)
!2615 = !DILocation(line: 648, column: 8, scope: !2589)
!2616 = !DILocation(line: 648, column: 44, scope: !2589)
!2617 = !DILocation(line: 649, column: 51, scope: !2589)
!2618 = !DILocation(line: 649, column: 8, scope: !2589)
!2619 = !DILocation(line: 649, column: 49, scope: !2589)
!2620 = !DILocation(line: 650, column: 6, scope: !2589)
!2621 = !DILocation(line: 651, column: 23, scope: !2574)
!2622 = !DILocation(line: 651, column: 4, scope: !2574)
!2623 = !DILocation(line: 651, column: 21, scope: !2574)
!2624 = !DILocation(line: 652, column: 2, scope: !2574)
!2625 = !DILocation(line: 653, column: 7, scope: !2454)
!2626 = !DILocation(line: 655, column: 1, scope: !2388)
!2627 = distinct !DISubprogram(name: "ira_print_expanded_allocno", scope: !3, file: !3, line: 736, type: !2346, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2628 = !DILocalVariable(name: "a", arg: 1, scope: !2627, file: !3, line: 736, type: !697)
!2629 = !DILocation(line: 736, column: 43, scope: !2627)
!2630 = !DILocalVariable(name: "bb", scope: !2627, file: !3, line: 738, type: !1087)
!2631 = !DILocation(line: 738, column: 15, scope: !2627)
!2632 = !DILocation(line: 740, column: 12, scope: !2627)
!2633 = !DILocation(line: 740, column: 39, scope: !2627)
!2634 = !DILocation(line: 740, column: 56, scope: !2627)
!2635 = !DILocation(line: 740, column: 3, scope: !2627)
!2636 = !DILocation(line: 741, column: 13, scope: !2637)
!2637 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 741, column: 7)
!2638 = !DILocation(line: 741, column: 41, scope: !2637)
!2639 = !DILocation(line: 741, column: 11, scope: !2637)
!2640 = !DILocation(line: 741, column: 45, scope: !2637)
!2641 = !DILocation(line: 741, column: 7, scope: !2627)
!2642 = !DILocation(line: 742, column: 14, scope: !2637)
!2643 = !DILocation(line: 742, column: 37, scope: !2637)
!2644 = !DILocation(line: 742, column: 41, scope: !2637)
!2645 = !DILocation(line: 742, column: 5, scope: !2637)
!2646 = !DILocation(line: 744, column: 14, scope: !2637)
!2647 = !DILocation(line: 744, column: 37, scope: !2637)
!2648 = !DILocation(line: 744, column: 65, scope: !2637)
!2649 = !DILocation(line: 744, column: 71, scope: !2637)
!2650 = !DILocation(line: 744, column: 5, scope: !2637)
!2651 = !DILocation(line: 745, column: 7, scope: !2652)
!2652 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 745, column: 7)
!2653 = !DILocation(line: 745, column: 30, scope: !2652)
!2654 = !DILocation(line: 745, column: 7, scope: !2627)
!2655 = !DILocation(line: 747, column: 16, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2652, file: !3, line: 746, column: 5)
!2657 = !DILocation(line: 747, column: 7, scope: !2656)
!2658 = !DILocation(line: 748, column: 35, scope: !2656)
!2659 = !DILocation(line: 748, column: 7, scope: !2656)
!2660 = !DILocation(line: 749, column: 5, scope: !2656)
!2661 = !DILocation(line: 750, column: 12, scope: !2627)
!2662 = !DILocation(line: 750, column: 3, scope: !2627)
!2663 = !DILocation(line: 751, column: 1, scope: !2627)
!2664 = distinct !DISubprogram(name: "ira_create_allocno_live_range", scope: !3, file: !3, line: 803, type: !2665, scopeLine: 805, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2665 = !DISubroutineType(types: !2666)
!2666 = !{!1898, !697, !703, !703, !1898}
!2667 = !DILocalVariable(name: "a", arg: 1, scope: !2664, file: !3, line: 803, type: !697)
!2668 = !DILocation(line: 803, column: 46, scope: !2664)
!2669 = !DILocalVariable(name: "start", arg: 2, scope: !2664, file: !3, line: 803, type: !703)
!2670 = !DILocation(line: 803, column: 53, scope: !2664)
!2671 = !DILocalVariable(name: "finish", arg: 3, scope: !2664, file: !3, line: 803, type: !703)
!2672 = !DILocation(line: 803, column: 64, scope: !2664)
!2673 = !DILocalVariable(name: "next", arg: 4, scope: !2664, file: !3, line: 804, type: !1898)
!2674 = !DILocation(line: 804, column: 32, scope: !2664)
!2675 = !DILocalVariable(name: "p", scope: !2664, file: !3, line: 806, type: !1898)
!2676 = !DILocation(line: 806, column: 24, scope: !2664)
!2677 = !DILocation(line: 808, column: 42, scope: !2664)
!2678 = !DILocation(line: 808, column: 30, scope: !2664)
!2679 = !DILocation(line: 808, column: 7, scope: !2664)
!2680 = !DILocation(line: 808, column: 5, scope: !2664)
!2681 = !DILocation(line: 809, column: 16, scope: !2664)
!2682 = !DILocation(line: 809, column: 3, scope: !2664)
!2683 = !DILocation(line: 809, column: 6, scope: !2664)
!2684 = !DILocation(line: 809, column: 14, scope: !2664)
!2685 = !DILocation(line: 810, column: 14, scope: !2664)
!2686 = !DILocation(line: 810, column: 3, scope: !2664)
!2687 = !DILocation(line: 810, column: 6, scope: !2664)
!2688 = !DILocation(line: 810, column: 12, scope: !2664)
!2689 = !DILocation(line: 811, column: 15, scope: !2664)
!2690 = !DILocation(line: 811, column: 3, scope: !2664)
!2691 = !DILocation(line: 811, column: 6, scope: !2664)
!2692 = !DILocation(line: 811, column: 13, scope: !2664)
!2693 = !DILocation(line: 812, column: 13, scope: !2664)
!2694 = !DILocation(line: 812, column: 3, scope: !2664)
!2695 = !DILocation(line: 812, column: 6, scope: !2664)
!2696 = !DILocation(line: 812, column: 11, scope: !2664)
!2697 = !DILocation(line: 813, column: 10, scope: !2664)
!2698 = !DILocation(line: 813, column: 3, scope: !2664)
!2699 = distinct !DISubprogram(name: "ira_copy_allocno_live_range_list", scope: !3, file: !3, line: 830, type: !2700, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2700 = !DISubroutineType(types: !2701)
!2701 = !{!1898, !1898}
!2702 = !DILocalVariable(name: "r", arg: 1, scope: !2699, file: !3, line: 830, type: !1898)
!2703 = !DILocation(line: 830, column: 56, scope: !2699)
!2704 = !DILocalVariable(name: "p", scope: !2699, file: !3, line: 832, type: !1898)
!2705 = !DILocation(line: 832, column: 24, scope: !2699)
!2706 = !DILocalVariable(name: "first", scope: !2699, file: !3, line: 832, type: !1898)
!2707 = !DILocation(line: 832, column: 27, scope: !2699)
!2708 = !DILocalVariable(name: "last", scope: !2699, file: !3, line: 832, type: !1898)
!2709 = !DILocation(line: 832, column: 34, scope: !2699)
!2710 = !DILocation(line: 834, column: 7, scope: !2711)
!2711 = distinct !DILexicalBlock(scope: !2699, file: !3, line: 834, column: 7)
!2712 = !DILocation(line: 834, column: 9, scope: !2711)
!2713 = !DILocation(line: 834, column: 7, scope: !2699)
!2714 = !DILocation(line: 835, column: 5, scope: !2711)
!2715 = !DILocation(line: 836, column: 21, scope: !2716)
!2716 = distinct !DILexicalBlock(scope: !2699, file: !3, line: 836, column: 3)
!2717 = !DILocation(line: 836, column: 14, scope: !2716)
!2718 = !DILocation(line: 836, column: 8, scope: !2716)
!2719 = !DILocation(line: 836, column: 29, scope: !2720)
!2720 = distinct !DILexicalBlock(scope: !2716, file: !3, line: 836, column: 3)
!2721 = !DILocation(line: 836, column: 31, scope: !2720)
!2722 = !DILocation(line: 836, column: 3, scope: !2716)
!2723 = !DILocation(line: 838, column: 36, scope: !2724)
!2724 = distinct !DILexicalBlock(scope: !2720, file: !3, line: 837, column: 5)
!2725 = !DILocation(line: 838, column: 11, scope: !2724)
!2726 = !DILocation(line: 838, column: 9, scope: !2724)
!2727 = !DILocation(line: 839, column: 11, scope: !2728)
!2728 = distinct !DILexicalBlock(scope: !2724, file: !3, line: 839, column: 11)
!2729 = !DILocation(line: 839, column: 17, scope: !2728)
!2730 = !DILocation(line: 839, column: 11, scope: !2724)
!2731 = !DILocation(line: 840, column: 10, scope: !2728)
!2732 = !DILocation(line: 840, column: 8, scope: !2728)
!2733 = !DILocation(line: 840, column: 2, scope: !2728)
!2734 = !DILocation(line: 842, column: 15, scope: !2728)
!2735 = !DILocation(line: 842, column: 2, scope: !2728)
!2736 = !DILocation(line: 842, column: 8, scope: !2728)
!2737 = !DILocation(line: 842, column: 13, scope: !2728)
!2738 = !DILocation(line: 843, column: 14, scope: !2724)
!2739 = !DILocation(line: 843, column: 12, scope: !2724)
!2740 = !DILocation(line: 844, column: 5, scope: !2724)
!2741 = !DILocation(line: 836, column: 44, scope: !2720)
!2742 = !DILocation(line: 836, column: 47, scope: !2720)
!2743 = !DILocation(line: 836, column: 42, scope: !2720)
!2744 = !DILocation(line: 836, column: 3, scope: !2720)
!2745 = distinct !{!2745, !2722, !2746}
!2746 = !DILocation(line: 844, column: 5, scope: !2716)
!2747 = !DILocation(line: 845, column: 10, scope: !2699)
!2748 = !DILocation(line: 845, column: 3, scope: !2699)
!2749 = !DILocation(line: 846, column: 1, scope: !2699)
!2750 = distinct !DISubprogram(name: "copy_allocno_live_range", scope: !3, file: !3, line: 818, type: !2700, scopeLine: 819, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2751 = !DILocalVariable(name: "r", arg: 1, scope: !2750, file: !3, line: 818, type: !1898)
!2752 = !DILocation(line: 818, column: 47, scope: !2750)
!2753 = !DILocalVariable(name: "p", scope: !2750, file: !3, line: 820, type: !1898)
!2754 = !DILocation(line: 820, column: 24, scope: !2750)
!2755 = !DILocation(line: 822, column: 42, scope: !2750)
!2756 = !DILocation(line: 822, column: 30, scope: !2750)
!2757 = !DILocation(line: 822, column: 7, scope: !2750)
!2758 = !DILocation(line: 822, column: 5, scope: !2750)
!2759 = !DILocation(line: 823, column: 4, scope: !2750)
!2760 = !DILocation(line: 823, column: 9, scope: !2750)
!2761 = !DILocation(line: 823, column: 8, scope: !2750)
!2762 = !DILocation(line: 824, column: 10, scope: !2750)
!2763 = !DILocation(line: 824, column: 3, scope: !2750)
!2764 = distinct !DISubprogram(name: "ira_merge_allocno_live_ranges", scope: !3, file: !3, line: 852, type: !2765, scopeLine: 854, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2765 = !DISubroutineType(types: !2766)
!2766 = !{!1898, !1898, !1898}
!2767 = !DILocalVariable(name: "r1", arg: 1, scope: !2764, file: !3, line: 852, type: !1898)
!2768 = !DILocation(line: 852, column: 53, scope: !2764)
!2769 = !DILocalVariable(name: "r2", arg: 2, scope: !2764, file: !3, line: 853, type: !1898)
!2770 = !DILocation(line: 853, column: 32, scope: !2764)
!2771 = !DILocalVariable(name: "first", scope: !2764, file: !3, line: 855, type: !1898)
!2772 = !DILocation(line: 855, column: 24, scope: !2764)
!2773 = !DILocalVariable(name: "last", scope: !2764, file: !3, line: 855, type: !1898)
!2774 = !DILocation(line: 855, column: 31, scope: !2764)
!2775 = !DILocalVariable(name: "temp", scope: !2764, file: !3, line: 855, type: !1898)
!2776 = !DILocation(line: 855, column: 37, scope: !2764)
!2777 = !DILocation(line: 857, column: 7, scope: !2778)
!2778 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 857, column: 7)
!2779 = !DILocation(line: 857, column: 10, scope: !2778)
!2780 = !DILocation(line: 857, column: 7, scope: !2764)
!2781 = !DILocation(line: 858, column: 12, scope: !2778)
!2782 = !DILocation(line: 858, column: 5, scope: !2778)
!2783 = !DILocation(line: 859, column: 7, scope: !2784)
!2784 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 859, column: 7)
!2785 = !DILocation(line: 859, column: 10, scope: !2784)
!2786 = !DILocation(line: 859, column: 7, scope: !2764)
!2787 = !DILocation(line: 860, column: 12, scope: !2784)
!2788 = !DILocation(line: 860, column: 5, scope: !2784)
!2789 = !DILocation(line: 861, column: 21, scope: !2790)
!2790 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 861, column: 3)
!2791 = !DILocation(line: 861, column: 14, scope: !2790)
!2792 = !DILocation(line: 861, column: 8, scope: !2790)
!2793 = !DILocation(line: 861, column: 29, scope: !2794)
!2794 = distinct !DILexicalBlock(scope: !2790, file: !3, line: 861, column: 3)
!2795 = !DILocation(line: 861, column: 32, scope: !2794)
!2796 = !DILocation(line: 861, column: 40, scope: !2794)
!2797 = !DILocation(line: 861, column: 43, scope: !2794)
!2798 = !DILocation(line: 861, column: 46, scope: !2794)
!2799 = !DILocation(line: 0, scope: !2794)
!2800 = !DILocation(line: 861, column: 3, scope: !2790)
!2801 = !DILocation(line: 863, column: 11, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 863, column: 11)
!2803 = distinct !DILexicalBlock(scope: !2794, file: !3, line: 862, column: 5)
!2804 = !DILocation(line: 863, column: 15, scope: !2802)
!2805 = !DILocation(line: 863, column: 23, scope: !2802)
!2806 = !DILocation(line: 863, column: 27, scope: !2802)
!2807 = !DILocation(line: 863, column: 21, scope: !2802)
!2808 = !DILocation(line: 863, column: 11, scope: !2803)
!2809 = !DILocation(line: 865, column: 11, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2802, file: !3, line: 864, column: 2)
!2811 = !DILocation(line: 865, column: 9, scope: !2810)
!2812 = !DILocation(line: 866, column: 9, scope: !2810)
!2813 = !DILocation(line: 866, column: 7, scope: !2810)
!2814 = !DILocation(line: 867, column: 9, scope: !2810)
!2815 = !DILocation(line: 867, column: 7, scope: !2810)
!2816 = !DILocation(line: 868, column: 2, scope: !2810)
!2817 = !DILocation(line: 869, column: 11, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2803, file: !3, line: 869, column: 11)
!2819 = !DILocation(line: 869, column: 15, scope: !2818)
!2820 = !DILocation(line: 869, column: 24, scope: !2818)
!2821 = !DILocation(line: 869, column: 28, scope: !2818)
!2822 = !DILocation(line: 869, column: 35, scope: !2818)
!2823 = !DILocation(line: 869, column: 21, scope: !2818)
!2824 = !DILocation(line: 869, column: 11, scope: !2803)
!2825 = !DILocation(line: 872, column: 16, scope: !2826)
!2826 = distinct !DILexicalBlock(scope: !2818, file: !3, line: 870, column: 2)
!2827 = !DILocation(line: 872, column: 20, scope: !2826)
!2828 = !DILocation(line: 872, column: 4, scope: !2826)
!2829 = !DILocation(line: 872, column: 8, scope: !2826)
!2830 = !DILocation(line: 872, column: 14, scope: !2826)
!2831 = !DILocation(line: 873, column: 8, scope: !2832)
!2832 = distinct !DILexicalBlock(scope: !2826, file: !3, line: 873, column: 8)
!2833 = !DILocation(line: 873, column: 12, scope: !2832)
!2834 = !DILocation(line: 873, column: 21, scope: !2832)
!2835 = !DILocation(line: 873, column: 25, scope: !2832)
!2836 = !DILocation(line: 873, column: 19, scope: !2832)
!2837 = !DILocation(line: 873, column: 8, scope: !2826)
!2838 = !DILocation(line: 874, column: 19, scope: !2832)
!2839 = !DILocation(line: 874, column: 23, scope: !2832)
!2840 = !DILocation(line: 874, column: 6, scope: !2832)
!2841 = !DILocation(line: 874, column: 10, scope: !2832)
!2842 = !DILocation(line: 874, column: 17, scope: !2832)
!2843 = !DILocation(line: 875, column: 11, scope: !2826)
!2844 = !DILocation(line: 875, column: 9, scope: !2826)
!2845 = !DILocation(line: 876, column: 9, scope: !2826)
!2846 = !DILocation(line: 876, column: 13, scope: !2826)
!2847 = !DILocation(line: 876, column: 7, scope: !2826)
!2848 = !DILocation(line: 877, column: 35, scope: !2826)
!2849 = !DILocation(line: 877, column: 4, scope: !2826)
!2850 = !DILocation(line: 878, column: 8, scope: !2851)
!2851 = distinct !DILexicalBlock(scope: !2826, file: !3, line: 878, column: 8)
!2852 = !DILocation(line: 878, column: 11, scope: !2851)
!2853 = !DILocation(line: 878, column: 8, scope: !2826)
!2854 = !DILocation(line: 881, column: 13, scope: !2855)
!2855 = distinct !DILexicalBlock(scope: !2851, file: !3, line: 879, column: 6)
!2856 = !DILocation(line: 881, column: 17, scope: !2855)
!2857 = !DILocation(line: 881, column: 11, scope: !2855)
!2858 = !DILocation(line: 882, column: 8, scope: !2855)
!2859 = !DILocation(line: 882, column: 12, scope: !2855)
!2860 = !DILocation(line: 882, column: 17, scope: !2855)
!2861 = !DILocation(line: 883, column: 6, scope: !2855)
!2862 = !DILocation(line: 884, column: 2, scope: !2826)
!2863 = !DILocation(line: 888, column: 8, scope: !2864)
!2864 = distinct !DILexicalBlock(scope: !2865, file: !3, line: 888, column: 8)
!2865 = distinct !DILexicalBlock(scope: !2818, file: !3, line: 886, column: 2)
!2866 = !DILocation(line: 888, column: 14, scope: !2864)
!2867 = !DILocation(line: 888, column: 8, scope: !2865)
!2868 = !DILocation(line: 889, column: 21, scope: !2864)
!2869 = !DILocation(line: 889, column: 19, scope: !2864)
!2870 = !DILocation(line: 889, column: 12, scope: !2864)
!2871 = !DILocation(line: 889, column: 6, scope: !2864)
!2872 = !DILocation(line: 892, column: 21, scope: !2873)
!2873 = distinct !DILexicalBlock(scope: !2864, file: !3, line: 891, column: 6)
!2874 = !DILocation(line: 892, column: 8, scope: !2873)
!2875 = !DILocation(line: 892, column: 14, scope: !2873)
!2876 = !DILocation(line: 892, column: 19, scope: !2873)
!2877 = !DILocation(line: 893, column: 15, scope: !2873)
!2878 = !DILocation(line: 893, column: 13, scope: !2873)
!2879 = !DILocation(line: 895, column: 9, scope: !2865)
!2880 = !DILocation(line: 895, column: 13, scope: !2865)
!2881 = !DILocation(line: 895, column: 7, scope: !2865)
!2882 = !DILocation(line: 896, column: 8, scope: !2883)
!2883 = distinct !DILexicalBlock(scope: !2865, file: !3, line: 896, column: 8)
!2884 = !DILocation(line: 896, column: 11, scope: !2883)
!2885 = !DILocation(line: 896, column: 8, scope: !2865)
!2886 = !DILocation(line: 899, column: 13, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2883, file: !3, line: 897, column: 6)
!2888 = !DILocation(line: 899, column: 17, scope: !2887)
!2889 = !DILocation(line: 899, column: 11, scope: !2887)
!2890 = !DILocation(line: 900, column: 8, scope: !2887)
!2891 = !DILocation(line: 900, column: 12, scope: !2887)
!2892 = !DILocation(line: 900, column: 17, scope: !2887)
!2893 = !DILocation(line: 901, column: 6, scope: !2887)
!2894 = !DILocation(line: 861, column: 3, scope: !2794)
!2895 = distinct !{!2895, !2800, !2896}
!2896 = !DILocation(line: 903, column: 5, scope: !2790)
!2897 = !DILocation(line: 904, column: 7, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 904, column: 7)
!2899 = !DILocation(line: 904, column: 10, scope: !2898)
!2900 = !DILocation(line: 904, column: 7, scope: !2764)
!2901 = !DILocation(line: 906, column: 11, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2903, file: !3, line: 906, column: 11)
!2903 = distinct !DILexicalBlock(scope: !2898, file: !3, line: 905, column: 5)
!2904 = !DILocation(line: 906, column: 17, scope: !2902)
!2905 = !DILocation(line: 906, column: 11, scope: !2903)
!2906 = !DILocation(line: 907, column: 10, scope: !2902)
!2907 = !DILocation(line: 907, column: 8, scope: !2902)
!2908 = !DILocation(line: 907, column: 2, scope: !2902)
!2909 = !DILocation(line: 909, column: 15, scope: !2902)
!2910 = !DILocation(line: 909, column: 2, scope: !2902)
!2911 = !DILocation(line: 909, column: 8, scope: !2902)
!2912 = !DILocation(line: 909, column: 13, scope: !2902)
!2913 = !DILocation(line: 911, column: 5, scope: !2903)
!2914 = !DILocation(line: 912, column: 12, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2898, file: !3, line: 912, column: 12)
!2916 = !DILocation(line: 912, column: 15, scope: !2915)
!2917 = !DILocation(line: 912, column: 12, scope: !2898)
!2918 = !DILocation(line: 914, column: 11, scope: !2919)
!2919 = distinct !DILexicalBlock(scope: !2920, file: !3, line: 914, column: 11)
!2920 = distinct !DILexicalBlock(scope: !2915, file: !3, line: 913, column: 5)
!2921 = !DILocation(line: 914, column: 17, scope: !2919)
!2922 = !DILocation(line: 914, column: 11, scope: !2920)
!2923 = !DILocation(line: 915, column: 10, scope: !2919)
!2924 = !DILocation(line: 915, column: 8, scope: !2919)
!2925 = !DILocation(line: 915, column: 2, scope: !2919)
!2926 = !DILocation(line: 917, column: 15, scope: !2919)
!2927 = !DILocation(line: 917, column: 2, scope: !2919)
!2928 = !DILocation(line: 917, column: 8, scope: !2919)
!2929 = !DILocation(line: 917, column: 13, scope: !2919)
!2930 = !DILocation(line: 919, column: 5, scope: !2920)
!2931 = !DILocation(line: 924, column: 10, scope: !2764)
!2932 = !DILocation(line: 924, column: 3, scope: !2764)
!2933 = !DILocation(line: 925, column: 1, scope: !2764)
!2934 = distinct !DISubprogram(name: "ira_finish_allocno_live_range", scope: !3, file: !3, line: 947, type: !2935, scopeLine: 948, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2935 = !DISubroutineType(types: !2936)
!2936 = !{null, !1898}
!2937 = !DILocalVariable(name: "r", arg: 1, scope: !2934, file: !3, line: 947, type: !1898)
!2938 = !DILocation(line: 947, column: 53, scope: !2934)
!2939 = !DILocation(line: 949, column: 14, scope: !2934)
!2940 = !DILocation(line: 949, column: 39, scope: !2934)
!2941 = !DILocation(line: 949, column: 3, scope: !2934)
!2942 = !DILocation(line: 950, column: 1, scope: !2934)
!2943 = distinct !DISubprogram(name: "ira_allocno_live_ranges_intersect_p", scope: !3, file: !3, line: 929, type: !2944, scopeLine: 931, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2944 = !DISubroutineType(types: !2945)
!2945 = !{!942, !1898, !1898}
!2946 = !DILocalVariable(name: "r1", arg: 1, scope: !2943, file: !3, line: 929, type: !1898)
!2947 = !DILocation(line: 929, column: 59, scope: !2943)
!2948 = !DILocalVariable(name: "r2", arg: 2, scope: !2943, file: !3, line: 930, type: !1898)
!2949 = !DILocation(line: 930, column: 31, scope: !2943)
!2950 = !DILocation(line: 933, column: 3, scope: !2943)
!2951 = !DILocation(line: 933, column: 10, scope: !2943)
!2952 = !DILocation(line: 933, column: 13, scope: !2943)
!2953 = !DILocation(line: 933, column: 21, scope: !2943)
!2954 = !DILocation(line: 933, column: 24, scope: !2943)
!2955 = !DILocation(line: 933, column: 27, scope: !2943)
!2956 = !DILocation(line: 0, scope: !2943)
!2957 = !DILocation(line: 935, column: 11, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 935, column: 11)
!2959 = distinct !DILexicalBlock(scope: !2943, file: !3, line: 934, column: 5)
!2960 = !DILocation(line: 935, column: 15, scope: !2958)
!2961 = !DILocation(line: 935, column: 23, scope: !2958)
!2962 = !DILocation(line: 935, column: 27, scope: !2958)
!2963 = !DILocation(line: 935, column: 21, scope: !2958)
!2964 = !DILocation(line: 935, column: 11, scope: !2959)
!2965 = !DILocation(line: 936, column: 7, scope: !2958)
!2966 = !DILocation(line: 936, column: 11, scope: !2958)
!2967 = !DILocation(line: 936, column: 5, scope: !2958)
!2968 = !DILocation(line: 936, column: 2, scope: !2958)
!2969 = !DILocation(line: 937, column: 16, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2958, file: !3, line: 937, column: 16)
!2971 = !DILocation(line: 937, column: 20, scope: !2970)
!2972 = !DILocation(line: 937, column: 28, scope: !2970)
!2973 = !DILocation(line: 937, column: 32, scope: !2970)
!2974 = !DILocation(line: 937, column: 26, scope: !2970)
!2975 = !DILocation(line: 937, column: 16, scope: !2958)
!2976 = !DILocation(line: 938, column: 7, scope: !2970)
!2977 = !DILocation(line: 938, column: 11, scope: !2970)
!2978 = !DILocation(line: 938, column: 5, scope: !2970)
!2979 = !DILocation(line: 938, column: 2, scope: !2970)
!2980 = !DILocation(line: 940, column: 2, scope: !2970)
!2981 = distinct !{!2981, !2950, !2982}
!2982 = !DILocation(line: 941, column: 5, scope: !2943)
!2983 = !DILocation(line: 942, column: 3, scope: !2943)
!2984 = !DILocation(line: 943, column: 1, scope: !2943)
!2985 = distinct !DISubprogram(name: "ira_finish_allocno_live_range_list", scope: !3, file: !3, line: 954, type: !2935, scopeLine: 955, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2986 = !DILocalVariable(name: "r", arg: 1, scope: !2985, file: !3, line: 954, type: !1898)
!2987 = !DILocation(line: 954, column: 58, scope: !2985)
!2988 = !DILocalVariable(name: "next_r", scope: !2985, file: !3, line: 956, type: !1898)
!2989 = !DILocation(line: 956, column: 24, scope: !2985)
!2990 = !DILocation(line: 958, column: 3, scope: !2985)
!2991 = !DILocation(line: 958, column: 10, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2993, file: !3, line: 958, column: 3)
!2993 = distinct !DILexicalBlock(scope: !2985, file: !3, line: 958, column: 3)
!2994 = !DILocation(line: 958, column: 12, scope: !2992)
!2995 = !DILocation(line: 958, column: 3, scope: !2993)
!2996 = !DILocation(line: 960, column: 16, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2992, file: !3, line: 959, column: 5)
!2998 = !DILocation(line: 960, column: 19, scope: !2997)
!2999 = !DILocation(line: 960, column: 14, scope: !2997)
!3000 = !DILocation(line: 961, column: 38, scope: !2997)
!3001 = !DILocation(line: 961, column: 7, scope: !2997)
!3002 = !DILocation(line: 962, column: 5, scope: !2997)
!3003 = !DILocation(line: 958, column: 25, scope: !2992)
!3004 = !DILocation(line: 958, column: 23, scope: !2992)
!3005 = !DILocation(line: 958, column: 3, scope: !2992)
!3006 = distinct !{!3006, !2995, !3007}
!3007 = !DILocation(line: 962, column: 5, scope: !2993)
!3008 = !DILocation(line: 963, column: 1, scope: !2985)
!3009 = distinct !DISubprogram(name: "ira_free_allocno_updated_costs", scope: !3, file: !3, line: 967, type: !2346, scopeLine: 968, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3010 = !DILocalVariable(name: "a", arg: 1, scope: !3009, file: !3, line: 967, type: !697)
!3011 = !DILocation(line: 967, column: 47, scope: !3009)
!3012 = !DILocalVariable(name: "cover_class", scope: !3009, file: !3, line: 969, type: !390)
!3013 = !DILocation(line: 969, column: 18, scope: !3009)
!3014 = !DILocation(line: 971, column: 17, scope: !3009)
!3015 = !DILocation(line: 971, column: 15, scope: !3009)
!3016 = !DILocation(line: 972, column: 7, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 972, column: 7)
!3018 = !DILocation(line: 972, column: 42, scope: !3017)
!3019 = !DILocation(line: 972, column: 7, scope: !3009)
!3020 = !DILocation(line: 973, column: 27, scope: !3017)
!3021 = !DILocation(line: 973, column: 63, scope: !3017)
!3022 = !DILocation(line: 973, column: 5, scope: !3017)
!3023 = !DILocation(line: 974, column: 3, scope: !3009)
!3024 = !DILocation(line: 974, column: 38, scope: !3009)
!3025 = !DILocation(line: 975, column: 7, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 975, column: 7)
!3027 = !DILocation(line: 975, column: 51, scope: !3026)
!3028 = !DILocation(line: 975, column: 7, scope: !3009)
!3029 = !DILocation(line: 976, column: 27, scope: !3026)
!3030 = !DILocation(line: 977, column: 6, scope: !3026)
!3031 = !DILocation(line: 976, column: 5, scope: !3026)
!3032 = !DILocation(line: 978, column: 3, scope: !3009)
!3033 = !DILocation(line: 978, column: 47, scope: !3009)
!3034 = !DILocation(line: 979, column: 1, scope: !3009)
!3035 = distinct !DISubprogram(name: "ira_free_cost_vector", scope: !3, file: !3, line: 1336, type: !3036, scopeLine: 1337, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3036 = !DISubroutineType(types: !3037)
!3037 = !{null, !1934, !390}
!3038 = !DILocalVariable(name: "vec", arg: 1, scope: !3035, file: !3, line: 1336, type: !1934)
!3039 = !DILocation(line: 1336, column: 28, scope: !3035)
!3040 = !DILocalVariable(name: "cover_class", arg: 2, scope: !3035, file: !3, line: 1336, type: !390)
!3041 = !DILocation(line: 1336, column: 48, scope: !3035)
!3042 = !DILocation(line: 1339, column: 31, scope: !3035)
!3043 = !DILocation(line: 1339, column: 14, scope: !3035)
!3044 = !DILocation(line: 1339, column: 45, scope: !3035)
!3045 = !DILocation(line: 1339, column: 3, scope: !3035)
!3046 = !DILocation(line: 1340, column: 1, scope: !3035)
!3047 = distinct !DISubprogram(name: "ira_create_copy", scope: !3, file: !3, line: 1073, type: !3048, scopeLine: 1076, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3048 = !DISubroutineType(types: !3049)
!3049 = !{!1878, !697, !697, !703, !942, !708, !1844}
!3050 = !DILocalVariable(name: "first", arg: 1, scope: !3047, file: !3, line: 1073, type: !697)
!3051 = !DILocation(line: 1073, column: 32, scope: !3047)
!3052 = !DILocalVariable(name: "second", arg: 2, scope: !3047, file: !3, line: 1073, type: !697)
!3053 = !DILocation(line: 1073, column: 53, scope: !3047)
!3054 = !DILocalVariable(name: "freq", arg: 3, scope: !3047, file: !3, line: 1073, type: !703)
!3055 = !DILocation(line: 1073, column: 65, scope: !3047)
!3056 = !DILocalVariable(name: "constraint_p", arg: 4, scope: !3047, file: !3, line: 1074, type: !942)
!3057 = !DILocation(line: 1074, column: 9, scope: !3047)
!3058 = !DILocalVariable(name: "insn", arg: 5, scope: !3047, file: !3, line: 1074, type: !708)
!3059 = !DILocation(line: 1074, column: 27, scope: !3047)
!3060 = !DILocalVariable(name: "loop_tree_node", arg: 6, scope: !3047, file: !3, line: 1075, type: !1844)
!3061 = !DILocation(line: 1075, column: 25, scope: !3047)
!3062 = !DILocalVariable(name: "cp", scope: !3047, file: !3, line: 1077, type: !1878)
!3063 = !DILocation(line: 1077, column: 14, scope: !3047)
!3064 = !DILocation(line: 1079, column: 33, scope: !3047)
!3065 = !DILocation(line: 1079, column: 21, scope: !3047)
!3066 = !DILocation(line: 1079, column: 8, scope: !3047)
!3067 = !DILocation(line: 1079, column: 6, scope: !3047)
!3068 = !DILocation(line: 1080, column: 13, scope: !3047)
!3069 = !DILocation(line: 1080, column: 3, scope: !3047)
!3070 = !DILocation(line: 1080, column: 7, scope: !3047)
!3071 = !DILocation(line: 1080, column: 11, scope: !3047)
!3072 = !DILocation(line: 1081, column: 15, scope: !3047)
!3073 = !DILocation(line: 1081, column: 3, scope: !3047)
!3074 = !DILocation(line: 1081, column: 7, scope: !3047)
!3075 = !DILocation(line: 1081, column: 13, scope: !3047)
!3076 = !DILocation(line: 1082, column: 16, scope: !3047)
!3077 = !DILocation(line: 1082, column: 3, scope: !3047)
!3078 = !DILocation(line: 1082, column: 7, scope: !3047)
!3079 = !DILocation(line: 1082, column: 14, scope: !3047)
!3080 = !DILocation(line: 1083, column: 14, scope: !3047)
!3081 = !DILocation(line: 1083, column: 3, scope: !3047)
!3082 = !DILocation(line: 1083, column: 7, scope: !3047)
!3083 = !DILocation(line: 1083, column: 12, scope: !3047)
!3084 = !DILocation(line: 1084, column: 22, scope: !3047)
!3085 = !DILocation(line: 1084, column: 3, scope: !3047)
!3086 = !DILocation(line: 1084, column: 7, scope: !3047)
!3087 = !DILocation(line: 1084, column: 20, scope: !3047)
!3088 = !DILocation(line: 1085, column: 14, scope: !3047)
!3089 = !DILocation(line: 1085, column: 3, scope: !3047)
!3090 = !DILocation(line: 1085, column: 7, scope: !3047)
!3091 = !DILocation(line: 1085, column: 12, scope: !3047)
!3092 = !DILocation(line: 1086, column: 24, scope: !3047)
!3093 = !DILocation(line: 1086, column: 3, scope: !3047)
!3094 = !DILocation(line: 1086, column: 7, scope: !3047)
!3095 = !DILocation(line: 1086, column: 22, scope: !3047)
!3096 = !DILocation(line: 1087, column: 3, scope: !3047)
!3097 = !DILocation(line: 1088, column: 16, scope: !3047)
!3098 = !DILocation(line: 1088, column: 14, scope: !3047)
!3099 = !DILocation(line: 1089, column: 20, scope: !3047)
!3100 = !DILocation(line: 1089, column: 18, scope: !3047)
!3101 = !DILocation(line: 1090, column: 10, scope: !3047)
!3102 = !DILocation(line: 1090, column: 3, scope: !3047)
!3103 = distinct !DISubprogram(name: "VEC_ira_copy_t_heap_safe_push", scope: !698, file: !698, line: 70, type: !3104, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3104 = !DISubroutineType(types: !3105)
!3105 = !{!2012, !3106, !1878}
!3106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1956, size: 64)
!3107 = !DILocalVariable(name: "vec_", arg: 1, scope: !3103, file: !698, line: 70, type: !3106)
!3108 = !DILocation(line: 70, column: 1, scope: !3103)
!3109 = !DILocalVariable(name: "obj_", arg: 2, scope: !3103, file: !698, line: 70, type: !1878)
!3110 = distinct !DISubprogram(name: "VEC_ira_copy_t_base_address", scope: !698, file: !698, line: 69, type: !3111, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3111 = !DISubroutineType(types: !3112)
!3112 = !{!2012, !3113}
!3113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1961, size: 64)
!3114 = !DILocalVariable(name: "vec_", arg: 1, scope: !3110, file: !698, line: 69, type: !3113)
!3115 = !DILocation(line: 69, column: 1, scope: !3110)
!3116 = distinct !DISubprogram(name: "VEC_ira_copy_t_base_length", scope: !698, file: !698, line: 69, type: !3117, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3117 = !DISubroutineType(types: !3118)
!3118 = !{!7, !3119}
!3119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3120, size: 64)
!3120 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1961)
!3121 = !DILocalVariable(name: "vec_", arg: 1, scope: !3116, file: !698, line: 69, type: !3119)
!3122 = !DILocation(line: 69, column: 1, scope: !3116)
!3123 = distinct !DISubprogram(name: "ira_add_allocno_copy_to_list", scope: !3, file: !3, line: 1095, type: !3124, scopeLine: 1096, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3124 = !DISubroutineType(types: !3125)
!3125 = !{null, !1878}
!3126 = !DILocalVariable(name: "cp", arg: 1, scope: !3123, file: !3, line: 1095, type: !1878)
!3127 = !DILocation(line: 1095, column: 42, scope: !3123)
!3128 = !DILocalVariable(name: "first", scope: !3123, file: !3, line: 1097, type: !697)
!3129 = !DILocation(line: 1097, column: 17, scope: !3123)
!3130 = !DILocation(line: 1097, column: 25, scope: !3123)
!3131 = !DILocation(line: 1097, column: 29, scope: !3123)
!3132 = !DILocalVariable(name: "second", scope: !3123, file: !3, line: 1097, type: !697)
!3133 = !DILocation(line: 1097, column: 36, scope: !3123)
!3134 = !DILocation(line: 1097, column: 45, scope: !3123)
!3135 = !DILocation(line: 1097, column: 49, scope: !3123)
!3136 = !DILocation(line: 1099, column: 3, scope: !3123)
!3137 = !DILocation(line: 1099, column: 7, scope: !3123)
!3138 = !DILocation(line: 1099, column: 31, scope: !3123)
!3139 = !DILocation(line: 1100, column: 3, scope: !3123)
!3140 = !DILocation(line: 1100, column: 7, scope: !3123)
!3141 = !DILocation(line: 1100, column: 32, scope: !3123)
!3142 = !DILocation(line: 1101, column: 33, scope: !3123)
!3143 = !DILocation(line: 1101, column: 3, scope: !3123)
!3144 = !DILocation(line: 1101, column: 7, scope: !3123)
!3145 = !DILocation(line: 1101, column: 31, scope: !3123)
!3146 = !DILocation(line: 1102, column: 7, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 1102, column: 7)
!3148 = !DILocation(line: 1102, column: 11, scope: !3147)
!3149 = !DILocation(line: 1102, column: 35, scope: !3147)
!3150 = !DILocation(line: 1102, column: 7, scope: !3123)
!3151 = !DILocation(line: 1104, column: 11, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 1104, column: 11)
!3153 = distinct !DILexicalBlock(scope: !3147, file: !3, line: 1103, column: 5)
!3154 = !DILocation(line: 1104, column: 15, scope: !3152)
!3155 = !DILocation(line: 1104, column: 40, scope: !3152)
!3156 = !DILocation(line: 1104, column: 49, scope: !3152)
!3157 = !DILocation(line: 1104, column: 46, scope: !3152)
!3158 = !DILocation(line: 1104, column: 11, scope: !3153)
!3159 = !DILocation(line: 1105, column: 57, scope: !3152)
!3160 = !DILocation(line: 1105, column: 2, scope: !3152)
!3161 = !DILocation(line: 1105, column: 6, scope: !3152)
!3162 = !DILocation(line: 1105, column: 31, scope: !3152)
!3163 = !DILocation(line: 1105, column: 55, scope: !3152)
!3164 = !DILocation(line: 1107, column: 58, scope: !3152)
!3165 = !DILocation(line: 1107, column: 2, scope: !3152)
!3166 = !DILocation(line: 1107, column: 6, scope: !3152)
!3167 = !DILocation(line: 1107, column: 31, scope: !3152)
!3168 = !DILocation(line: 1107, column: 56, scope: !3152)
!3169 = !DILocation(line: 1108, column: 5, scope: !3153)
!3170 = !DILocation(line: 1109, column: 34, scope: !3123)
!3171 = !DILocation(line: 1109, column: 3, scope: !3123)
!3172 = !DILocation(line: 1109, column: 7, scope: !3123)
!3173 = !DILocation(line: 1109, column: 32, scope: !3123)
!3174 = !DILocation(line: 1110, column: 7, scope: !3175)
!3175 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 1110, column: 7)
!3176 = !DILocation(line: 1110, column: 11, scope: !3175)
!3177 = !DILocation(line: 1110, column: 36, scope: !3175)
!3178 = !DILocation(line: 1110, column: 7, scope: !3123)
!3179 = !DILocation(line: 1112, column: 11, scope: !3180)
!3180 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 1112, column: 11)
!3181 = distinct !DILexicalBlock(scope: !3175, file: !3, line: 1111, column: 5)
!3182 = !DILocation(line: 1112, column: 15, scope: !3180)
!3183 = !DILocation(line: 1112, column: 41, scope: !3180)
!3184 = !DILocation(line: 1112, column: 51, scope: !3180)
!3185 = !DILocation(line: 1112, column: 48, scope: !3180)
!3186 = !DILocation(line: 1112, column: 11, scope: !3181)
!3187 = !DILocation(line: 1113, column: 59, scope: !3180)
!3188 = !DILocation(line: 1113, column: 2, scope: !3180)
!3189 = !DILocation(line: 1113, column: 6, scope: !3180)
!3190 = !DILocation(line: 1113, column: 32, scope: !3180)
!3191 = !DILocation(line: 1113, column: 57, scope: !3180)
!3192 = !DILocation(line: 1115, column: 58, scope: !3180)
!3193 = !DILocation(line: 1115, column: 2, scope: !3180)
!3194 = !DILocation(line: 1115, column: 6, scope: !3180)
!3195 = !DILocation(line: 1115, column: 32, scope: !3180)
!3196 = !DILocation(line: 1115, column: 56, scope: !3180)
!3197 = !DILocation(line: 1116, column: 5, scope: !3181)
!3198 = !DILocation(line: 1117, column: 28, scope: !3123)
!3199 = !DILocation(line: 1117, column: 3, scope: !3123)
!3200 = !DILocation(line: 1117, column: 26, scope: !3123)
!3201 = !DILocation(line: 1118, column: 29, scope: !3123)
!3202 = !DILocation(line: 1118, column: 3, scope: !3123)
!3203 = !DILocation(line: 1118, column: 27, scope: !3123)
!3204 = !DILocation(line: 1119, column: 1, scope: !3123)
!3205 = distinct !DISubprogram(name: "ira_remove_allocno_copy_from_list", scope: !3, file: !3, line: 1123, type: !3124, scopeLine: 1124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3206 = !DILocalVariable(name: "cp", arg: 1, scope: !3205, file: !3, line: 1123, type: !1878)
!3207 = !DILocation(line: 1123, column: 47, scope: !3205)
!3208 = !DILocalVariable(name: "first", scope: !3205, file: !3, line: 1125, type: !697)
!3209 = !DILocation(line: 1125, column: 17, scope: !3205)
!3210 = !DILocation(line: 1125, column: 25, scope: !3205)
!3211 = !DILocation(line: 1125, column: 29, scope: !3205)
!3212 = !DILocalVariable(name: "second", scope: !3205, file: !3, line: 1125, type: !697)
!3213 = !DILocation(line: 1125, column: 36, scope: !3205)
!3214 = !DILocation(line: 1125, column: 45, scope: !3205)
!3215 = !DILocation(line: 1125, column: 49, scope: !3205)
!3216 = !DILocalVariable(name: "prev", scope: !3205, file: !3, line: 1126, type: !1878)
!3217 = !DILocation(line: 1126, column: 14, scope: !3205)
!3218 = !DILocalVariable(name: "next", scope: !3205, file: !3, line: 1126, type: !1878)
!3219 = !DILocation(line: 1126, column: 20, scope: !3205)
!3220 = !DILocation(line: 1128, column: 10, scope: !3205)
!3221 = !DILocation(line: 1128, column: 14, scope: !3205)
!3222 = !DILocation(line: 1128, column: 8, scope: !3205)
!3223 = !DILocation(line: 1129, column: 10, scope: !3205)
!3224 = !DILocation(line: 1129, column: 14, scope: !3205)
!3225 = !DILocation(line: 1129, column: 8, scope: !3205)
!3226 = !DILocation(line: 1130, column: 7, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1130, column: 7)
!3228 = !DILocation(line: 1130, column: 12, scope: !3227)
!3229 = !DILocation(line: 1130, column: 7, scope: !3205)
!3230 = !DILocation(line: 1131, column: 30, scope: !3227)
!3231 = !DILocation(line: 1131, column: 5, scope: !3227)
!3232 = !DILocation(line: 1131, column: 28, scope: !3227)
!3233 = !DILocation(line: 1132, column: 12, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3227, file: !3, line: 1132, column: 12)
!3235 = !DILocation(line: 1132, column: 18, scope: !3234)
!3236 = !DILocation(line: 1132, column: 27, scope: !3234)
!3237 = !DILocation(line: 1132, column: 24, scope: !3234)
!3238 = !DILocation(line: 1132, column: 12, scope: !3227)
!3239 = !DILocation(line: 1133, column: 37, scope: !3234)
!3240 = !DILocation(line: 1133, column: 5, scope: !3234)
!3241 = !DILocation(line: 1133, column: 11, scope: !3234)
!3242 = !DILocation(line: 1133, column: 35, scope: !3234)
!3243 = !DILocation(line: 1135, column: 38, scope: !3234)
!3244 = !DILocation(line: 1135, column: 5, scope: !3234)
!3245 = !DILocation(line: 1135, column: 11, scope: !3234)
!3246 = !DILocation(line: 1135, column: 36, scope: !3234)
!3247 = !DILocation(line: 1136, column: 7, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1136, column: 7)
!3249 = !DILocation(line: 1136, column: 12, scope: !3248)
!3250 = !DILocation(line: 1136, column: 7, scope: !3205)
!3251 = !DILocation(line: 1138, column: 11, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3253, file: !3, line: 1138, column: 11)
!3253 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 1137, column: 5)
!3254 = !DILocation(line: 1138, column: 17, scope: !3252)
!3255 = !DILocation(line: 1138, column: 26, scope: !3252)
!3256 = !DILocation(line: 1138, column: 23, scope: !3252)
!3257 = !DILocation(line: 1138, column: 11, scope: !3253)
!3258 = !DILocation(line: 1139, column: 34, scope: !3252)
!3259 = !DILocation(line: 1139, column: 2, scope: !3252)
!3260 = !DILocation(line: 1139, column: 8, scope: !3252)
!3261 = !DILocation(line: 1139, column: 32, scope: !3252)
!3262 = !DILocation(line: 1141, column: 35, scope: !3252)
!3263 = !DILocation(line: 1141, column: 2, scope: !3252)
!3264 = !DILocation(line: 1141, column: 8, scope: !3252)
!3265 = !DILocation(line: 1141, column: 33, scope: !3252)
!3266 = !DILocation(line: 1142, column: 5, scope: !3253)
!3267 = !DILocation(line: 1143, column: 33, scope: !3205)
!3268 = !DILocation(line: 1143, column: 37, scope: !3205)
!3269 = !DILocation(line: 1143, column: 61, scope: !3205)
!3270 = !DILocation(line: 1143, column: 3, scope: !3205)
!3271 = !DILocation(line: 1143, column: 7, scope: !3205)
!3272 = !DILocation(line: 1143, column: 31, scope: !3205)
!3273 = !DILocation(line: 1145, column: 10, scope: !3205)
!3274 = !DILocation(line: 1145, column: 14, scope: !3205)
!3275 = !DILocation(line: 1145, column: 8, scope: !3205)
!3276 = !DILocation(line: 1146, column: 10, scope: !3205)
!3277 = !DILocation(line: 1146, column: 14, scope: !3205)
!3278 = !DILocation(line: 1146, column: 8, scope: !3205)
!3279 = !DILocation(line: 1147, column: 7, scope: !3280)
!3280 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1147, column: 7)
!3281 = !DILocation(line: 1147, column: 12, scope: !3280)
!3282 = !DILocation(line: 1147, column: 7, scope: !3205)
!3283 = !DILocation(line: 1148, column: 31, scope: !3280)
!3284 = !DILocation(line: 1148, column: 5, scope: !3280)
!3285 = !DILocation(line: 1148, column: 29, scope: !3280)
!3286 = !DILocation(line: 1149, column: 12, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3280, file: !3, line: 1149, column: 12)
!3288 = !DILocation(line: 1149, column: 18, scope: !3287)
!3289 = !DILocation(line: 1149, column: 28, scope: !3287)
!3290 = !DILocation(line: 1149, column: 25, scope: !3287)
!3291 = !DILocation(line: 1149, column: 12, scope: !3280)
!3292 = !DILocation(line: 1150, column: 38, scope: !3287)
!3293 = !DILocation(line: 1150, column: 5, scope: !3287)
!3294 = !DILocation(line: 1150, column: 11, scope: !3287)
!3295 = !DILocation(line: 1150, column: 36, scope: !3287)
!3296 = !DILocation(line: 1152, column: 37, scope: !3287)
!3297 = !DILocation(line: 1152, column: 5, scope: !3287)
!3298 = !DILocation(line: 1152, column: 11, scope: !3287)
!3299 = !DILocation(line: 1152, column: 35, scope: !3287)
!3300 = !DILocation(line: 1153, column: 7, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1153, column: 7)
!3302 = !DILocation(line: 1153, column: 12, scope: !3301)
!3303 = !DILocation(line: 1153, column: 7, scope: !3205)
!3304 = !DILocation(line: 1155, column: 11, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3306, file: !3, line: 1155, column: 11)
!3306 = distinct !DILexicalBlock(scope: !3301, file: !3, line: 1154, column: 5)
!3307 = !DILocation(line: 1155, column: 17, scope: !3305)
!3308 = !DILocation(line: 1155, column: 27, scope: !3305)
!3309 = !DILocation(line: 1155, column: 24, scope: !3305)
!3310 = !DILocation(line: 1155, column: 11, scope: !3306)
!3311 = !DILocation(line: 1156, column: 35, scope: !3305)
!3312 = !DILocation(line: 1156, column: 2, scope: !3305)
!3313 = !DILocation(line: 1156, column: 8, scope: !3305)
!3314 = !DILocation(line: 1156, column: 33, scope: !3305)
!3315 = !DILocation(line: 1158, column: 34, scope: !3305)
!3316 = !DILocation(line: 1158, column: 2, scope: !3305)
!3317 = !DILocation(line: 1158, column: 8, scope: !3305)
!3318 = !DILocation(line: 1158, column: 32, scope: !3305)
!3319 = !DILocation(line: 1159, column: 5, scope: !3306)
!3320 = !DILocation(line: 1160, column: 34, scope: !3205)
!3321 = !DILocation(line: 1160, column: 38, scope: !3205)
!3322 = !DILocation(line: 1160, column: 63, scope: !3205)
!3323 = !DILocation(line: 1160, column: 3, scope: !3205)
!3324 = !DILocation(line: 1160, column: 7, scope: !3205)
!3325 = !DILocation(line: 1160, column: 32, scope: !3205)
!3326 = !DILocation(line: 1161, column: 1, scope: !3205)
!3327 = distinct !DISubprogram(name: "ira_swap_allocno_copy_ends_if_necessary", scope: !3, file: !3, line: 1166, type: !3124, scopeLine: 1167, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3328 = !DILocalVariable(name: "cp", arg: 1, scope: !3327, file: !3, line: 1166, type: !1878)
!3329 = !DILocation(line: 1166, column: 53, scope: !3327)
!3330 = !DILocalVariable(name: "temp", scope: !3327, file: !3, line: 1168, type: !697)
!3331 = !DILocation(line: 1168, column: 17, scope: !3327)
!3332 = !DILocalVariable(name: "temp_cp", scope: !3327, file: !3, line: 1169, type: !1878)
!3333 = !DILocation(line: 1169, column: 14, scope: !3327)
!3334 = !DILocation(line: 1171, column: 7, scope: !3335)
!3335 = distinct !DILexicalBlock(scope: !3327, file: !3, line: 1171, column: 7)
!3336 = !DILocation(line: 1171, column: 34, scope: !3335)
!3337 = !DILocation(line: 1171, column: 31, scope: !3335)
!3338 = !DILocation(line: 1171, column: 7, scope: !3327)
!3339 = !DILocation(line: 1172, column: 5, scope: !3335)
!3340 = !DILocation(line: 1174, column: 10, scope: !3327)
!3341 = !DILocation(line: 1174, column: 14, scope: !3327)
!3342 = !DILocation(line: 1174, column: 8, scope: !3327)
!3343 = !DILocation(line: 1175, column: 15, scope: !3327)
!3344 = !DILocation(line: 1175, column: 19, scope: !3327)
!3345 = !DILocation(line: 1175, column: 3, scope: !3327)
!3346 = !DILocation(line: 1175, column: 7, scope: !3327)
!3347 = !DILocation(line: 1175, column: 13, scope: !3327)
!3348 = !DILocation(line: 1176, column: 16, scope: !3327)
!3349 = !DILocation(line: 1176, column: 3, scope: !3327)
!3350 = !DILocation(line: 1176, column: 7, scope: !3327)
!3351 = !DILocation(line: 1176, column: 14, scope: !3327)
!3352 = !DILocation(line: 1178, column: 13, scope: !3327)
!3353 = !DILocation(line: 1178, column: 17, scope: !3327)
!3354 = !DILocation(line: 1178, column: 11, scope: !3327)
!3355 = !DILocation(line: 1179, column: 33, scope: !3327)
!3356 = !DILocation(line: 1179, column: 37, scope: !3327)
!3357 = !DILocation(line: 1179, column: 3, scope: !3327)
!3358 = !DILocation(line: 1179, column: 7, scope: !3327)
!3359 = !DILocation(line: 1179, column: 31, scope: !3327)
!3360 = !DILocation(line: 1180, column: 34, scope: !3327)
!3361 = !DILocation(line: 1180, column: 3, scope: !3327)
!3362 = !DILocation(line: 1180, column: 7, scope: !3327)
!3363 = !DILocation(line: 1180, column: 32, scope: !3327)
!3364 = !DILocation(line: 1182, column: 13, scope: !3327)
!3365 = !DILocation(line: 1182, column: 17, scope: !3327)
!3366 = !DILocation(line: 1182, column: 11, scope: !3327)
!3367 = !DILocation(line: 1183, column: 33, scope: !3327)
!3368 = !DILocation(line: 1183, column: 37, scope: !3327)
!3369 = !DILocation(line: 1183, column: 3, scope: !3327)
!3370 = !DILocation(line: 1183, column: 7, scope: !3327)
!3371 = !DILocation(line: 1183, column: 31, scope: !3327)
!3372 = !DILocation(line: 1184, column: 34, scope: !3327)
!3373 = !DILocation(line: 1184, column: 3, scope: !3327)
!3374 = !DILocation(line: 1184, column: 7, scope: !3327)
!3375 = !DILocation(line: 1184, column: 32, scope: !3327)
!3376 = !DILocation(line: 1185, column: 1, scope: !3327)
!3377 = distinct !DISubprogram(name: "ira_add_allocno_copy", scope: !3, file: !3, line: 1192, type: !3048, scopeLine: 1195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3378 = !DILocalVariable(name: "first", arg: 1, scope: !3377, file: !3, line: 1192, type: !697)
!3379 = !DILocation(line: 1192, column: 37, scope: !3377)
!3380 = !DILocalVariable(name: "second", arg: 2, scope: !3377, file: !3, line: 1192, type: !697)
!3381 = !DILocation(line: 1192, column: 58, scope: !3377)
!3382 = !DILocalVariable(name: "freq", arg: 3, scope: !3377, file: !3, line: 1192, type: !703)
!3383 = !DILocation(line: 1192, column: 70, scope: !3377)
!3384 = !DILocalVariable(name: "constraint_p", arg: 4, scope: !3377, file: !3, line: 1193, type: !942)
!3385 = !DILocation(line: 1193, column: 14, scope: !3377)
!3386 = !DILocalVariable(name: "insn", arg: 5, scope: !3377, file: !3, line: 1193, type: !708)
!3387 = !DILocation(line: 1193, column: 32, scope: !3377)
!3388 = !DILocalVariable(name: "loop_tree_node", arg: 6, scope: !3377, file: !3, line: 1194, type: !1844)
!3389 = !DILocation(line: 1194, column: 30, scope: !3377)
!3390 = !DILocalVariable(name: "cp", scope: !3377, file: !3, line: 1196, type: !1878)
!3391 = !DILocation(line: 1196, column: 14, scope: !3377)
!3392 = !DILocation(line: 1198, column: 32, scope: !3393)
!3393 = distinct !DILexicalBlock(scope: !3377, file: !3, line: 1198, column: 7)
!3394 = !DILocation(line: 1198, column: 39, scope: !3393)
!3395 = !DILocation(line: 1198, column: 47, scope: !3393)
!3396 = !DILocation(line: 1198, column: 53, scope: !3393)
!3397 = !DILocation(line: 1198, column: 13, scope: !3393)
!3398 = !DILocation(line: 1198, column: 11, scope: !3393)
!3399 = !DILocation(line: 1198, column: 70, scope: !3393)
!3400 = !DILocation(line: 1198, column: 7, scope: !3377)
!3401 = !DILocation(line: 1200, column: 19, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3393, file: !3, line: 1199, column: 5)
!3403 = !DILocation(line: 1200, column: 7, scope: !3402)
!3404 = !DILocation(line: 1200, column: 11, scope: !3402)
!3405 = !DILocation(line: 1200, column: 16, scope: !3402)
!3406 = !DILocation(line: 1201, column: 14, scope: !3402)
!3407 = !DILocation(line: 1201, column: 7, scope: !3402)
!3408 = !DILocation(line: 1203, column: 25, scope: !3377)
!3409 = !DILocation(line: 1203, column: 32, scope: !3377)
!3410 = !DILocation(line: 1203, column: 40, scope: !3377)
!3411 = !DILocation(line: 1203, column: 46, scope: !3377)
!3412 = !DILocation(line: 1203, column: 60, scope: !3377)
!3413 = !DILocation(line: 1204, column: 4, scope: !3377)
!3414 = !DILocation(line: 1203, column: 8, scope: !3377)
!3415 = !DILocation(line: 1203, column: 6, scope: !3377)
!3416 = !DILocation(line: 1206, column: 33, scope: !3377)
!3417 = !DILocation(line: 1206, column: 3, scope: !3377)
!3418 = !DILocation(line: 1207, column: 44, scope: !3377)
!3419 = !DILocation(line: 1207, column: 3, scope: !3377)
!3420 = !DILocation(line: 1208, column: 10, scope: !3377)
!3421 = !DILocation(line: 1208, column: 3, scope: !3377)
!3422 = !DILocation(line: 1209, column: 1, scope: !3377)
!3423 = distinct !DISubprogram(name: "find_allocno_copy", scope: !3, file: !3, line: 1043, type: !3424, scopeLine: 1045, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3424 = !DISubroutineType(types: !3425)
!3425 = !{!1878, !697, !697, !708, !1844}
!3426 = !DILocalVariable(name: "a1", arg: 1, scope: !3423, file: !3, line: 1043, type: !697)
!3427 = !DILocation(line: 1043, column: 34, scope: !3423)
!3428 = !DILocalVariable(name: "a2", arg: 2, scope: !3423, file: !3, line: 1043, type: !697)
!3429 = !DILocation(line: 1043, column: 52, scope: !3423)
!3430 = !DILocalVariable(name: "insn", arg: 3, scope: !3423, file: !3, line: 1043, type: !708)
!3431 = !DILocation(line: 1043, column: 60, scope: !3423)
!3432 = !DILocalVariable(name: "loop_tree_node", arg: 4, scope: !3423, file: !3, line: 1044, type: !1844)
!3433 = !DILocation(line: 1044, column: 27, scope: !3423)
!3434 = !DILocalVariable(name: "cp", scope: !3423, file: !3, line: 1046, type: !1878)
!3435 = !DILocation(line: 1046, column: 14, scope: !3423)
!3436 = !DILocalVariable(name: "next_cp", scope: !3423, file: !3, line: 1046, type: !1878)
!3437 = !DILocation(line: 1046, column: 18, scope: !3423)
!3438 = !DILocalVariable(name: "another_a", scope: !3423, file: !3, line: 1047, type: !697)
!3439 = !DILocation(line: 1047, column: 17, scope: !3423)
!3440 = !DILocation(line: 1049, column: 13, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3423, file: !3, line: 1049, column: 3)
!3442 = !DILocation(line: 1049, column: 11, scope: !3441)
!3443 = !DILocation(line: 1049, column: 8, scope: !3441)
!3444 = !DILocation(line: 1049, column: 34, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 1049, column: 3)
!3446 = !DILocation(line: 1049, column: 37, scope: !3445)
!3447 = !DILocation(line: 1049, column: 3, scope: !3441)
!3448 = !DILocation(line: 1051, column: 11, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 1051, column: 11)
!3450 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1050, column: 5)
!3451 = !DILocation(line: 1051, column: 15, scope: !3449)
!3452 = !DILocation(line: 1051, column: 24, scope: !3449)
!3453 = !DILocation(line: 1051, column: 21, scope: !3449)
!3454 = !DILocation(line: 1051, column: 11, scope: !3450)
!3455 = !DILocation(line: 1053, column: 14, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1052, column: 2)
!3457 = !DILocation(line: 1053, column: 18, scope: !3456)
!3458 = !DILocation(line: 1053, column: 12, scope: !3456)
!3459 = !DILocation(line: 1054, column: 16, scope: !3456)
!3460 = !DILocation(line: 1054, column: 20, scope: !3456)
!3461 = !DILocation(line: 1054, column: 14, scope: !3456)
!3462 = !DILocation(line: 1055, column: 2, scope: !3456)
!3463 = !DILocation(line: 1056, column: 16, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1056, column: 16)
!3465 = !DILocation(line: 1056, column: 20, scope: !3464)
!3466 = !DILocation(line: 1056, column: 30, scope: !3464)
!3467 = !DILocation(line: 1056, column: 27, scope: !3464)
!3468 = !DILocation(line: 1056, column: 16, scope: !3449)
!3469 = !DILocation(line: 1058, column: 14, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3464, file: !3, line: 1057, column: 2)
!3471 = !DILocation(line: 1058, column: 18, scope: !3470)
!3472 = !DILocation(line: 1058, column: 12, scope: !3470)
!3473 = !DILocation(line: 1059, column: 16, scope: !3470)
!3474 = !DILocation(line: 1059, column: 20, scope: !3470)
!3475 = !DILocation(line: 1059, column: 14, scope: !3470)
!3476 = !DILocation(line: 1060, column: 2, scope: !3470)
!3477 = !DILocation(line: 1062, column: 2, scope: !3464)
!3478 = !DILocation(line: 1063, column: 11, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3450, file: !3, line: 1063, column: 11)
!3480 = !DILocation(line: 1063, column: 24, scope: !3479)
!3481 = !DILocation(line: 1063, column: 21, scope: !3479)
!3482 = !DILocation(line: 1063, column: 27, scope: !3479)
!3483 = !DILocation(line: 1063, column: 30, scope: !3479)
!3484 = !DILocation(line: 1063, column: 34, scope: !3479)
!3485 = !DILocation(line: 1063, column: 42, scope: !3479)
!3486 = !DILocation(line: 1063, column: 39, scope: !3479)
!3487 = !DILocation(line: 1064, column: 4, scope: !3479)
!3488 = !DILocation(line: 1064, column: 7, scope: !3479)
!3489 = !DILocation(line: 1064, column: 11, scope: !3479)
!3490 = !DILocation(line: 1064, column: 29, scope: !3479)
!3491 = !DILocation(line: 1064, column: 26, scope: !3479)
!3492 = !DILocation(line: 1063, column: 11, scope: !3450)
!3493 = !DILocation(line: 1065, column: 9, scope: !3479)
!3494 = !DILocation(line: 1065, column: 2, scope: !3479)
!3495 = !DILocation(line: 1066, column: 5, scope: !3450)
!3496 = !DILocation(line: 1049, column: 51, scope: !3445)
!3497 = !DILocation(line: 1049, column: 49, scope: !3445)
!3498 = !DILocation(line: 1049, column: 3, scope: !3445)
!3499 = distinct !{!3499, !3447, !3500}
!3500 = !DILocation(line: 1066, column: 5, scope: !3441)
!3501 = !DILocation(line: 1067, column: 3, scope: !3423)
!3502 = !DILocation(line: 1068, column: 1, scope: !3423)
!3503 = distinct !DISubprogram(name: "ira_debug_copy", scope: !3, file: !3, line: 1224, type: !3124, scopeLine: 1225, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3504 = !DILocalVariable(name: "cp", arg: 1, scope: !3503, file: !3, line: 1224, type: !1878)
!3505 = !DILocation(line: 1224, column: 28, scope: !3503)
!3506 = !DILocation(line: 1226, column: 15, scope: !3503)
!3507 = !DILocation(line: 1226, column: 23, scope: !3503)
!3508 = !DILocation(line: 1226, column: 3, scope: !3503)
!3509 = !DILocation(line: 1227, column: 1, scope: !3503)
!3510 = distinct !DISubprogram(name: "print_copy", scope: !3, file: !3, line: 1213, type: !3511, scopeLine: 1214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3511 = !DISubroutineType(types: !3512)
!3512 = !{null, !3513, !1878}
!3513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3514, size: 64)
!3514 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3515, line: 7, baseType: !3516)
!3515 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3517, line: 49, size: 1728, elements: !3518)
!3517 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3518 = !{!3519, !3520, !3521, !3522, !3523, !3524, !3525, !3526, !3527, !3528, !3529, !3530, !3531, !3534, !3536, !3537, !3538, !3541, !3543, !3544, !3545, !3548, !3550, !3553, !3556, !3557, !3558, !3559, !3560}
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3516, file: !3517, line: 51, baseType: !703, size: 32)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3516, file: !3517, line: 54, baseType: !804, size: 64, offset: 64)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3516, file: !3517, line: 55, baseType: !804, size: 64, offset: 128)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3516, file: !3517, line: 56, baseType: !804, size: 64, offset: 192)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3516, file: !3517, line: 57, baseType: !804, size: 64, offset: 256)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3516, file: !3517, line: 58, baseType: !804, size: 64, offset: 320)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3516, file: !3517, line: 59, baseType: !804, size: 64, offset: 384)
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3516, file: !3517, line: 60, baseType: !804, size: 64, offset: 448)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3516, file: !3517, line: 61, baseType: !804, size: 64, offset: 512)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3516, file: !3517, line: 64, baseType: !804, size: 64, offset: 576)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3516, file: !3517, line: 65, baseType: !804, size: 64, offset: 640)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3516, file: !3517, line: 66, baseType: !804, size: 64, offset: 704)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3516, file: !3517, line: 68, baseType: !3532, size: 64, offset: 768)
!3532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3533, size: 64)
!3533 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3517, line: 36, flags: DIFlagFwdDecl)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3516, file: !3517, line: 70, baseType: !3535, size: 64, offset: 832)
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3516, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3516, file: !3517, line: 72, baseType: !703, size: 32, offset: 896)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3516, file: !3517, line: 73, baseType: !703, size: 32, offset: 928)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3516, file: !3517, line: 74, baseType: !3539, size: 64, offset: 960)
!3539 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3540, line: 152, baseType: !798)
!3540 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3516, file: !3517, line: 77, baseType: !3542, size: 16, offset: 1024)
!3542 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3516, file: !3517, line: 78, baseType: !1582, size: 8, offset: 1040)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3516, file: !3517, line: 79, baseType: !924, size: 8, offset: 1048)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3516, file: !3517, line: 81, baseType: !3546, size: 64, offset: 1088)
!3546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3547, size: 64)
!3547 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3517, line: 43, baseType: null)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3516, file: !3517, line: 89, baseType: !3549, size: 64, offset: 1152)
!3549 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3540, line: 153, baseType: !798)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3516, file: !3517, line: 91, baseType: !3551, size: 64, offset: 1216)
!3551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3552, size: 64)
!3552 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3517, line: 37, flags: DIFlagFwdDecl)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3516, file: !3517, line: 92, baseType: !3554, size: 64, offset: 1280)
!3554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3555, size: 64)
!3555 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3517, line: 38, flags: DIFlagFwdDecl)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3516, file: !3517, line: 93, baseType: !3535, size: 64, offset: 1344)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3516, file: !3517, line: 94, baseType: !819, size: 64, offset: 1408)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3516, file: !3517, line: 95, baseType: !1279, size: 64, offset: 1472)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3516, file: !3517, line: 96, baseType: !703, size: 32, offset: 1536)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3516, file: !3517, line: 98, baseType: !3561, size: 160, offset: 1568)
!3561 = !DICompositeType(tag: DW_TAG_array_type, baseType: !736, size: 160, elements: !3562)
!3562 = !{!3563}
!3563 = !DISubrange(count: 20)
!3564 = !DILocalVariable(name: "f", arg: 1, scope: !3510, file: !3, line: 1213, type: !3513)
!3565 = !DILocation(line: 1213, column: 19, scope: !3510)
!3566 = !DILocalVariable(name: "cp", arg: 2, scope: !3510, file: !3, line: 1213, type: !1878)
!3567 = !DILocation(line: 1213, column: 33, scope: !3510)
!3568 = !DILocation(line: 1215, column: 12, scope: !3510)
!3569 = !DILocation(line: 1215, column: 53, scope: !3510)
!3570 = !DILocation(line: 1215, column: 57, scope: !3510)
!3571 = !DILocation(line: 1216, column: 5, scope: !3510)
!3572 = !DILocation(line: 1216, column: 30, scope: !3510)
!3573 = !DILocation(line: 1217, column: 5, scope: !3510)
!3574 = !DILocation(line: 1217, column: 31, scope: !3510)
!3575 = !DILocation(line: 1217, column: 59, scope: !3510)
!3576 = !DILocation(line: 1217, column: 63, scope: !3510)
!3577 = !DILocation(line: 1218, column: 5, scope: !3510)
!3578 = !DILocation(line: 1218, column: 9, scope: !3510)
!3579 = !DILocation(line: 1218, column: 14, scope: !3510)
!3580 = !DILocation(line: 1219, column: 16, scope: !3510)
!3581 = !DILocation(line: 1219, column: 20, scope: !3510)
!3582 = !DILocation(line: 1215, column: 3, scope: !3510)
!3583 = !DILocation(line: 1220, column: 1, scope: !3510)
!3584 = distinct !DISubprogram(name: "ira_debug_copies", scope: !3, file: !3, line: 1242, type: !3585, scopeLine: 1243, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3585 = !DISubroutineType(types: !3586)
!3586 = !{null}
!3587 = !DILocation(line: 1244, column: 17, scope: !3584)
!3588 = !DILocation(line: 1244, column: 3, scope: !3584)
!3589 = !DILocation(line: 1245, column: 1, scope: !3584)
!3590 = distinct !DISubprogram(name: "print_copies", scope: !3, file: !3, line: 1231, type: !3591, scopeLine: 1232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3591 = !DISubroutineType(types: !3592)
!3592 = !{null, !3513}
!3593 = !DILocalVariable(name: "f", arg: 1, scope: !3590, file: !3, line: 1231, type: !3513)
!3594 = !DILocation(line: 1231, column: 21, scope: !3590)
!3595 = !DILocalVariable(name: "cp", scope: !3590, file: !3, line: 1233, type: !1878)
!3596 = !DILocation(line: 1233, column: 14, scope: !3590)
!3597 = !DILocalVariable(name: "ci", scope: !3590, file: !3, line: 1234, type: !3598)
!3598 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_copy_iterator", file: !698, line: 975, baseType: !3599)
!3599 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !698, line: 972, size: 32, elements: !3600)
!3600 = !{!3601}
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !3599, file: !698, line: 974, baseType: !703, size: 32)
!3602 = !DILocation(line: 1234, column: 21, scope: !3590)
!3603 = !DILocation(line: 1236, column: 3, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3590, file: !3, line: 1236, column: 3)
!3605 = !DILocation(line: 1236, column: 3, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !3604, file: !3, line: 1236, column: 3)
!3607 = !DILocation(line: 1237, column: 17, scope: !3606)
!3608 = !DILocation(line: 1237, column: 20, scope: !3606)
!3609 = !DILocation(line: 1237, column: 5, scope: !3606)
!3610 = distinct !{!3610, !3603, !3611}
!3611 = !DILocation(line: 1237, column: 22, scope: !3604)
!3612 = !DILocation(line: 1238, column: 1, scope: !3590)
!3613 = distinct !DISubprogram(name: "ira_debug_allocno_copies", scope: !3, file: !3, line: 1277, type: !2346, scopeLine: 1278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3614 = !DILocalVariable(name: "a", arg: 1, scope: !3613, file: !3, line: 1277, type: !697)
!3615 = !DILocation(line: 1277, column: 41, scope: !3613)
!3616 = !DILocation(line: 1279, column: 25, scope: !3613)
!3617 = !DILocation(line: 1279, column: 33, scope: !3613)
!3618 = !DILocation(line: 1279, column: 3, scope: !3613)
!3619 = !DILocation(line: 1280, column: 1, scope: !3613)
!3620 = distinct !DISubprogram(name: "print_allocno_copies", scope: !3, file: !3, line: 1249, type: !3621, scopeLine: 1250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3621 = !DISubroutineType(types: !3622)
!3622 = !{null, !3513, !697}
!3623 = !DILocalVariable(name: "f", arg: 1, scope: !3620, file: !3, line: 1249, type: !3513)
!3624 = !DILocation(line: 1249, column: 29, scope: !3620)
!3625 = !DILocalVariable(name: "a", arg: 2, scope: !3620, file: !3, line: 1249, type: !697)
!3626 = !DILocation(line: 1249, column: 46, scope: !3620)
!3627 = !DILocalVariable(name: "another_a", scope: !3620, file: !3, line: 1251, type: !697)
!3628 = !DILocation(line: 1251, column: 17, scope: !3620)
!3629 = !DILocalVariable(name: "cp", scope: !3620, file: !3, line: 1252, type: !1878)
!3630 = !DILocation(line: 1252, column: 14, scope: !3620)
!3631 = !DILocalVariable(name: "next_cp", scope: !3620, file: !3, line: 1252, type: !1878)
!3632 = !DILocation(line: 1252, column: 18, scope: !3620)
!3633 = !DILocation(line: 1254, column: 12, scope: !3620)
!3634 = !DILocation(line: 1254, column: 29, scope: !3620)
!3635 = !DILocation(line: 1254, column: 46, scope: !3620)
!3636 = !DILocation(line: 1254, column: 3, scope: !3620)
!3637 = !DILocation(line: 1255, column: 13, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 1255, column: 3)
!3639 = !DILocation(line: 1255, column: 11, scope: !3638)
!3640 = !DILocation(line: 1255, column: 8, scope: !3638)
!3641 = !DILocation(line: 1255, column: 33, scope: !3642)
!3642 = distinct !DILexicalBlock(scope: !3638, file: !3, line: 1255, column: 3)
!3643 = !DILocation(line: 1255, column: 36, scope: !3642)
!3644 = !DILocation(line: 1255, column: 3, scope: !3638)
!3645 = !DILocation(line: 1257, column: 11, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3647, file: !3, line: 1257, column: 11)
!3647 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 1256, column: 5)
!3648 = !DILocation(line: 1257, column: 15, scope: !3646)
!3649 = !DILocation(line: 1257, column: 24, scope: !3646)
!3650 = !DILocation(line: 1257, column: 21, scope: !3646)
!3651 = !DILocation(line: 1257, column: 11, scope: !3647)
!3652 = !DILocation(line: 1259, column: 14, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 1258, column: 2)
!3654 = !DILocation(line: 1259, column: 18, scope: !3653)
!3655 = !DILocation(line: 1259, column: 12, scope: !3653)
!3656 = !DILocation(line: 1260, column: 16, scope: !3653)
!3657 = !DILocation(line: 1260, column: 20, scope: !3653)
!3658 = !DILocation(line: 1260, column: 14, scope: !3653)
!3659 = !DILocation(line: 1261, column: 2, scope: !3653)
!3660 = !DILocation(line: 1262, column: 16, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 1262, column: 16)
!3662 = !DILocation(line: 1262, column: 20, scope: !3661)
!3663 = !DILocation(line: 1262, column: 30, scope: !3661)
!3664 = !DILocation(line: 1262, column: 27, scope: !3661)
!3665 = !DILocation(line: 1262, column: 16, scope: !3646)
!3666 = !DILocation(line: 1264, column: 14, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 1263, column: 2)
!3668 = !DILocation(line: 1264, column: 18, scope: !3667)
!3669 = !DILocation(line: 1264, column: 12, scope: !3667)
!3670 = !DILocation(line: 1265, column: 16, scope: !3667)
!3671 = !DILocation(line: 1265, column: 20, scope: !3667)
!3672 = !DILocation(line: 1265, column: 14, scope: !3667)
!3673 = !DILocation(line: 1266, column: 2, scope: !3667)
!3674 = !DILocation(line: 1268, column: 2, scope: !3661)
!3675 = !DILocation(line: 1269, column: 16, scope: !3647)
!3676 = !DILocation(line: 1269, column: 40, scope: !3647)
!3677 = !DILocation(line: 1269, column: 44, scope: !3647)
!3678 = !DILocation(line: 1270, column: 9, scope: !3647)
!3679 = !DILocation(line: 1270, column: 34, scope: !3647)
!3680 = !DILocation(line: 1270, column: 61, scope: !3647)
!3681 = !DILocation(line: 1270, column: 65, scope: !3647)
!3682 = !DILocation(line: 1269, column: 7, scope: !3647)
!3683 = !DILocation(line: 1271, column: 5, scope: !3647)
!3684 = !DILocation(line: 1255, column: 50, scope: !3642)
!3685 = !DILocation(line: 1255, column: 48, scope: !3642)
!3686 = !DILocation(line: 1255, column: 3, scope: !3642)
!3687 = distinct !{!3687, !3644, !3688}
!3688 = !DILocation(line: 1271, column: 5, scope: !3638)
!3689 = !DILocation(line: 1272, column: 12, scope: !3620)
!3690 = !DILocation(line: 1272, column: 3, scope: !3620)
!3691 = !DILocation(line: 1273, column: 1, scope: !3620)
!3692 = distinct !DISubprogram(name: "ira_allocate_cost_vector", scope: !3, file: !3, line: 1329, type: !3693, scopeLine: 1330, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3693 = !DISubroutineType(types: !3694)
!3694 = !{!1934, !390}
!3695 = !DILocalVariable(name: "cover_class", arg: 1, scope: !3692, file: !3, line: 1329, type: !390)
!3696 = !DILocation(line: 1329, column: 42, scope: !3692)
!3697 = !DILocation(line: 1331, column: 47, scope: !3692)
!3698 = !DILocation(line: 1331, column: 30, scope: !3692)
!3699 = !DILocation(line: 1331, column: 18, scope: !3692)
!3700 = !DILocation(line: 1331, column: 10, scope: !3692)
!3701 = !DILocation(line: 1331, column: 3, scope: !3692)
!3702 = distinct !DISubprogram(name: "ira_traverse_loop_tree", scope: !3, file: !3, line: 1370, type: !3703, scopeLine: 1373, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3703 = !DISubroutineType(types: !3704)
!3704 = !{null, !942, !1844, !3705, !3705}
!3705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3706, size: 64)
!3706 = !DISubroutineType(types: !3707)
!3707 = !{null, !1844}
!3708 = !DILocalVariable(name: "bb_p", arg: 1, scope: !3702, file: !3, line: 1370, type: !942)
!3709 = !DILocation(line: 1370, column: 30, scope: !3702)
!3710 = !DILocalVariable(name: "loop_node", arg: 2, scope: !3702, file: !3, line: 1370, type: !1844)
!3711 = !DILocation(line: 1370, column: 57, scope: !3702)
!3712 = !DILocalVariable(name: "preorder_func", arg: 3, scope: !3702, file: !3, line: 1371, type: !3705)
!3713 = !DILocation(line: 1371, column: 11, scope: !3702)
!3714 = !DILocalVariable(name: "postorder_func", arg: 4, scope: !3702, file: !3, line: 1372, type: !3705)
!3715 = !DILocation(line: 1372, column: 11, scope: !3702)
!3716 = !DILocalVariable(name: "subloop_node", scope: !3702, file: !3, line: 1374, type: !1844)
!3717 = !DILocation(line: 1374, column: 24, scope: !3702)
!3718 = !DILocation(line: 1377, column: 29, scope: !3702)
!3719 = !DILocation(line: 1377, column: 27, scope: !3702)
!3720 = !DILocation(line: 1378, column: 32, scope: !3702)
!3721 = !DILocation(line: 1378, column: 57, scope: !3702)
!3722 = !DILocation(line: 1378, column: 30, scope: !3702)
!3723 = !DILocation(line: 1380, column: 7, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 1380, column: 7)
!3725 = !DILocation(line: 1380, column: 21, scope: !3724)
!3726 = !DILocation(line: 1380, column: 7, scope: !3702)
!3727 = !DILocation(line: 1381, column: 7, scope: !3724)
!3728 = !DILocation(line: 1381, column: 23, scope: !3724)
!3729 = !DILocation(line: 1381, column: 5, scope: !3724)
!3730 = !DILocation(line: 1383, column: 7, scope: !3731)
!3731 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 1383, column: 7)
!3732 = !DILocation(line: 1383, column: 7, scope: !3702)
!3733 = !DILocation(line: 1384, column: 25, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3731, file: !3, line: 1384, column: 5)
!3735 = !DILocation(line: 1384, column: 36, scope: !3734)
!3736 = !DILocation(line: 1384, column: 23, scope: !3734)
!3737 = !DILocation(line: 1384, column: 10, scope: !3734)
!3738 = !DILocation(line: 1385, column: 3, scope: !3739)
!3739 = distinct !DILexicalBlock(scope: !3734, file: !3, line: 1384, column: 5)
!3740 = !DILocation(line: 1385, column: 16, scope: !3739)
!3741 = !DILocation(line: 1384, column: 5, scope: !3734)
!3742 = !DILocation(line: 1387, column: 11, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 1387, column: 11)
!3744 = !DILocation(line: 1387, column: 25, scope: !3743)
!3745 = !DILocation(line: 1387, column: 28, scope: !3743)
!3746 = !DILocation(line: 1387, column: 11, scope: !3739)
!3747 = !DILocation(line: 1389, column: 8, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 1389, column: 8)
!3749 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 1388, column: 2)
!3750 = !DILocation(line: 1389, column: 22, scope: !3748)
!3751 = !DILocation(line: 1389, column: 8, scope: !3749)
!3752 = !DILocation(line: 1390, column: 8, scope: !3748)
!3753 = !DILocation(line: 1390, column: 24, scope: !3748)
!3754 = !DILocation(line: 1390, column: 6, scope: !3748)
!3755 = !DILocation(line: 1392, column: 8, scope: !3756)
!3756 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 1392, column: 8)
!3757 = !DILocation(line: 1392, column: 23, scope: !3756)
!3758 = !DILocation(line: 1392, column: 8, scope: !3749)
!3759 = !DILocation(line: 1393, column: 8, scope: !3756)
!3760 = !DILocation(line: 1393, column: 25, scope: !3756)
!3761 = !DILocation(line: 1393, column: 6, scope: !3756)
!3762 = !DILocation(line: 1394, column: 2, scope: !3749)
!3763 = !DILocation(line: 1387, column: 31, scope: !3743)
!3764 = !DILocation(line: 1386, column: 18, scope: !3739)
!3765 = !DILocation(line: 1386, column: 32, scope: !3739)
!3766 = !DILocation(line: 1386, column: 16, scope: !3739)
!3767 = !DILocation(line: 1384, column: 5, scope: !3739)
!3768 = distinct !{!3768, !3741, !3769}
!3769 = !DILocation(line: 1394, column: 2, scope: !3734)
!3770 = !DILocation(line: 1396, column: 23, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 1396, column: 3)
!3772 = !DILocation(line: 1396, column: 34, scope: !3771)
!3773 = !DILocation(line: 1396, column: 21, scope: !3771)
!3774 = !DILocation(line: 1396, column: 8, scope: !3771)
!3775 = !DILocation(line: 1397, column: 8, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3771, file: !3, line: 1396, column: 3)
!3777 = !DILocation(line: 1397, column: 21, scope: !3776)
!3778 = !DILocation(line: 1396, column: 3, scope: !3771)
!3779 = !DILocation(line: 1401, column: 31, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3776, file: !3, line: 1399, column: 5)
!3781 = !DILocation(line: 1401, column: 37, scope: !3780)
!3782 = !DILocation(line: 1402, column: 10, scope: !3780)
!3783 = !DILocation(line: 1402, column: 25, scope: !3780)
!3784 = !DILocation(line: 1401, column: 7, scope: !3780)
!3785 = !DILocation(line: 1403, column: 5, scope: !3780)
!3786 = !DILocation(line: 1398, column: 23, scope: !3776)
!3787 = !DILocation(line: 1398, column: 37, scope: !3776)
!3788 = !DILocation(line: 1398, column: 21, scope: !3776)
!3789 = !DILocation(line: 1396, column: 3, scope: !3776)
!3790 = distinct !{!3790, !3778, !3791}
!3791 = !DILocation(line: 1403, column: 5, scope: !3771)
!3792 = !DILocation(line: 1405, column: 29, scope: !3702)
!3793 = !DILocation(line: 1405, column: 27, scope: !3702)
!3794 = !DILocation(line: 1406, column: 32, scope: !3702)
!3795 = !DILocation(line: 1406, column: 57, scope: !3702)
!3796 = !DILocation(line: 1406, column: 30, scope: !3702)
!3797 = !DILocation(line: 1408, column: 7, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3702, file: !3, line: 1408, column: 7)
!3799 = !DILocation(line: 1408, column: 22, scope: !3798)
!3800 = !DILocation(line: 1408, column: 7, scope: !3702)
!3801 = !DILocation(line: 1409, column: 7, scope: !3798)
!3802 = !DILocation(line: 1409, column: 24, scope: !3798)
!3803 = !DILocation(line: 1409, column: 5, scope: !3798)
!3804 = !DILocation(line: 1410, column: 1, scope: !3702)
!3805 = distinct !DISubprogram(name: "ira_flattening", scope: !3, file: !3, line: 2474, type: !3806, scopeLine: 2475, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3806 = !DISubroutineType(types: !3807)
!3807 = !{null, !703, !703}
!3808 = !DILocalVariable(name: "max_regno_before_emit", arg: 1, scope: !3805, file: !3, line: 2474, type: !703)
!3809 = !DILocation(line: 2474, column: 21, scope: !3805)
!3810 = !DILocalVariable(name: "ira_max_point_before_emit", arg: 2, scope: !3805, file: !3, line: 2474, type: !703)
!3811 = !DILocation(line: 2474, column: 48, scope: !3805)
!3812 = !DILocalVariable(name: "i", scope: !3805, file: !3, line: 2476, type: !703)
!3813 = !DILocation(line: 2476, column: 7, scope: !3805)
!3814 = !DILocalVariable(name: "j", scope: !3805, file: !3, line: 2476, type: !703)
!3815 = !DILocation(line: 2476, column: 10, scope: !3805)
!3816 = !DILocalVariable(name: "num", scope: !3805, file: !3, line: 2476, type: !703)
!3817 = !DILocation(line: 2476, column: 13, scope: !3805)
!3818 = !DILocalVariable(name: "keep_p", scope: !3805, file: !3, line: 2477, type: !942)
!3819 = !DILocation(line: 2477, column: 8, scope: !3805)
!3820 = !DILocalVariable(name: "hard_regs_num", scope: !3805, file: !3, line: 2478, type: !703)
!3821 = !DILocation(line: 2478, column: 7, scope: !3805)
!3822 = !DILocalVariable(name: "new_pseudos_p", scope: !3805, file: !3, line: 2479, type: !942)
!3823 = !DILocation(line: 2479, column: 8, scope: !3805)
!3824 = !DILocalVariable(name: "merged_p", scope: !3805, file: !3, line: 2479, type: !942)
!3825 = !DILocation(line: 2479, column: 23, scope: !3805)
!3826 = !DILocalVariable(name: "mem_dest_p", scope: !3805, file: !3, line: 2479, type: !942)
!3827 = !DILocation(line: 2479, column: 33, scope: !3805)
!3828 = !DILocalVariable(name: "n", scope: !3805, file: !3, line: 2480, type: !7)
!3829 = !DILocation(line: 2480, column: 16, scope: !3805)
!3830 = !DILocalVariable(name: "cover_class", scope: !3805, file: !3, line: 2481, type: !390)
!3831 = !DILocation(line: 2481, column: 18, scope: !3805)
!3832 = !DILocalVariable(name: "a", scope: !3805, file: !3, line: 2482, type: !697)
!3833 = !DILocation(line: 2482, column: 17, scope: !3805)
!3834 = !DILocalVariable(name: "parent_a", scope: !3805, file: !3, line: 2482, type: !697)
!3835 = !DILocation(line: 2482, column: 20, scope: !3805)
!3836 = !DILocalVariable(name: "first", scope: !3805, file: !3, line: 2482, type: !697)
!3837 = !DILocation(line: 2482, column: 30, scope: !3805)
!3838 = !DILocalVariable(name: "second", scope: !3805, file: !3, line: 2482, type: !697)
!3839 = !DILocation(line: 2482, column: 37, scope: !3805)
!3840 = !DILocalVariable(name: "node_first", scope: !3805, file: !3, line: 2482, type: !697)
!3841 = !DILocation(line: 2482, column: 45, scope: !3805)
!3842 = !DILocalVariable(name: "node_second", scope: !3805, file: !3, line: 2482, type: !697)
!3843 = !DILocation(line: 2482, column: 57, scope: !3805)
!3844 = !DILocalVariable(name: "cp", scope: !3805, file: !3, line: 2483, type: !1878)
!3845 = !DILocation(line: 2483, column: 14, scope: !3805)
!3846 = !DILocalVariable(name: "parent", scope: !3805, file: !3, line: 2484, type: !1844)
!3847 = !DILocation(line: 2484, column: 24, scope: !3805)
!3848 = !DILocalVariable(name: "node", scope: !3805, file: !3, line: 2484, type: !1844)
!3849 = !DILocation(line: 2484, column: 32, scope: !3805)
!3850 = !DILocalVariable(name: "r", scope: !3805, file: !3, line: 2485, type: !1898)
!3851 = !DILocation(line: 2485, column: 24, scope: !3805)
!3852 = !DILocalVariable(name: "ai", scope: !3805, file: !3, line: 2486, type: !3853)
!3853 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_iterator", file: !698, line: 935, baseType: !3854)
!3854 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !698, line: 932, size: 32, elements: !3855)
!3855 = !{!3856}
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !3854, file: !698, line: 934, baseType: !703, size: 32)
!3857 = !DILocation(line: 2486, column: 24, scope: !3805)
!3858 = !DILocalVariable(name: "ci", scope: !3805, file: !3, line: 2487, type: !3598)
!3859 = !DILocation(line: 2487, column: 21, scope: !3805)
!3860 = !DILocalVariable(name: "allocnos_live", scope: !3805, file: !3, line: 2488, type: !3861)
!3861 = !DIDerivedType(tag: DW_TAG_typedef, name: "sparseset", file: !3862, line: 41, baseType: !3863)
!3862 = !DIFile(filename: "./sparseset.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3864, size: 64)
!3864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sparseset_def", file: !3862, line: 31, size: 320, elements: !3865)
!3865 = !{!3866, !3868, !3869, !3870, !3871, !3872, !3873, !3874}
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "dense", scope: !3864, file: !3862, line: 33, baseType: !3867, size: 64)
!3867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "sparse", scope: !3864, file: !3862, line: 34, baseType: !3867, size: 64, offset: 64)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "members", scope: !3864, file: !3862, line: 35, baseType: !7, size: 32, offset: 128)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3864, file: !3862, line: 36, baseType: !7, size: 32, offset: 160)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !3864, file: !3862, line: 37, baseType: !7, size: 32, offset: 192)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "iter_inc", scope: !3864, file: !3862, line: 38, baseType: !942, size: 8, offset: 224)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "iterating", scope: !3864, file: !3862, line: 39, baseType: !942, size: 8, offset: 232)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3864, file: !3862, line: 40, baseType: !1239, size: 64, offset: 256)
!3875 = !DILocation(line: 2488, column: 13, scope: !3805)
!3876 = !DILocation(line: 2491, column: 39, scope: !3805)
!3877 = !DILocation(line: 2491, column: 54, scope: !3805)
!3878 = !DILocation(line: 2491, column: 25, scope: !3805)
!3879 = !DILocation(line: 2491, column: 7, scope: !3805)
!3880 = !DILocation(line: 2491, column: 5, scope: !3805)
!3881 = !DILocation(line: 2492, column: 11, scope: !3805)
!3882 = !DILocation(line: 2492, column: 3, scope: !3805)
!3883 = !DILocation(line: 2493, column: 4, scope: !3805)
!3884 = !DILocation(line: 2493, column: 19, scope: !3805)
!3885 = !DILocation(line: 2494, column: 28, scope: !3805)
!3886 = !DILocation(line: 2494, column: 17, scope: !3805)
!3887 = !DILocation(line: 2495, column: 3, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2495, column: 3)
!3889 = !DILocation(line: 2495, column: 3, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3888, file: !3, line: 2495, column: 3)
!3891 = !DILocation(line: 2497, column: 11, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 2497, column: 11)
!3893 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 2496, column: 5)
!3894 = !DILocation(line: 2497, column: 34, scope: !3892)
!3895 = !DILocation(line: 2497, column: 11, scope: !3893)
!3896 = !DILocation(line: 2501, column: 2, scope: !3892)
!3897 = distinct !{!3897, !3887, !3898}
!3898 = !DILocation(line: 2507, column: 5, scope: !3888)
!3899 = !DILocation(line: 2502, column: 7, scope: !3893)
!3900 = !DILocation(line: 2505, column: 42, scope: !3893)
!3901 = !DILocation(line: 2505, column: 7, scope: !3893)
!3902 = !DILocation(line: 2505, column: 40, scope: !3893)
!3903 = !DILocation(line: 2509, column: 12, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2509, column: 3)
!3905 = !DILocation(line: 2509, column: 34, scope: !3904)
!3906 = !DILocation(line: 2509, column: 10, scope: !3904)
!3907 = !DILocation(line: 2509, column: 8, scope: !3904)
!3908 = !DILocation(line: 2509, column: 39, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 2509, column: 3)
!3910 = !DILocation(line: 2509, column: 41, scope: !3909)
!3911 = !DILocation(line: 2509, column: 3, scope: !3904)
!3912 = !DILocation(line: 2511, column: 18, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 2510, column: 5)
!3914 = !DILocation(line: 2512, column: 16, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 2512, column: 7)
!3916 = !DILocation(line: 2512, column: 38, scope: !3915)
!3917 = !DILocation(line: 2512, column: 14, scope: !3915)
!3918 = !DILocation(line: 2512, column: 12, scope: !3915)
!3919 = !DILocation(line: 2513, column: 5, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 2512, column: 7)
!3921 = !DILocation(line: 2513, column: 7, scope: !3920)
!3922 = !DILocation(line: 2512, column: 7, scope: !3915)
!3923 = !DILocation(line: 2517, column: 8, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 2517, column: 8)
!3925 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 2515, column: 2)
!3926 = !DILocation(line: 2517, column: 8, scope: !3925)
!3927 = !DILocation(line: 2518, column: 20, scope: !3924)
!3928 = !DILocation(line: 2518, column: 6, scope: !3924)
!3929 = !DILocation(line: 2519, column: 8, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 2519, column: 8)
!3931 = !DILocation(line: 2519, column: 24, scope: !3930)
!3932 = !DILocation(line: 2520, column: 8, scope: !3930)
!3933 = !DILocation(line: 2520, column: 21, scope: !3930)
!3934 = !DILocation(line: 2520, column: 49, scope: !3930)
!3935 = !DILocation(line: 2520, column: 19, scope: !3930)
!3936 = !DILocation(line: 2520, column: 57, scope: !3930)
!3937 = !DILocation(line: 2521, column: 8, scope: !3930)
!3938 = !DILocation(line: 2521, column: 24, scope: !3930)
!3939 = !DILocation(line: 2521, column: 32, scope: !3930)
!3940 = !DILocation(line: 2521, column: 50, scope: !3930)
!3941 = !DILocation(line: 2521, column: 22, scope: !3930)
!3942 = !DILocation(line: 2522, column: 5, scope: !3930)
!3943 = !DILocation(line: 2519, column: 8, scope: !3925)
!3944 = !DILocation(line: 2524, column: 8, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3930, file: !3, line: 2523, column: 6)
!3946 = !DILocation(line: 2524, column: 27, scope: !3945)
!3947 = !DILocation(line: 2525, column: 63, scope: !3945)
!3948 = !DILocation(line: 2525, column: 8, scope: !3945)
!3949 = !DILocation(line: 2525, column: 36, scope: !3945)
!3950 = !DILocation(line: 2525, column: 61, scope: !3945)
!3951 = !DILocation(line: 2526, column: 8, scope: !3945)
!3952 = !DILocation(line: 2530, column: 8, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 2530, column: 8)
!3954 = !DILocation(line: 2530, column: 39, scope: !3953)
!3955 = !DILocation(line: 2530, column: 8, scope: !3925)
!3956 = !DILocation(line: 2531, column: 17, scope: !3953)
!3957 = !DILocation(line: 2531, column: 6, scope: !3953)
!3958 = !DILocation(line: 2532, column: 8, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 2532, column: 8)
!3960 = !DILocation(line: 2532, column: 35, scope: !3959)
!3961 = !DILocation(line: 2532, column: 32, scope: !3959)
!3962 = !DILocation(line: 2532, column: 8, scope: !3925)
!3963 = !DILocation(line: 2534, column: 8, scope: !3964)
!3964 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 2533, column: 6)
!3965 = !DILocation(line: 2537, column: 12, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 2537, column: 12)
!3967 = !DILocation(line: 2537, column: 12, scope: !3964)
!3968 = !DILocation(line: 2538, column: 3, scope: !3966)
!3969 = !DILocation(line: 2538, column: 43, scope: !3966)
!3970 = !DILocation(line: 2540, column: 12, scope: !3971)
!3971 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 2540, column: 12)
!3972 = !DILocation(line: 2540, column: 38, scope: !3971)
!3973 = !DILocation(line: 2540, column: 42, scope: !3971)
!3974 = !DILocation(line: 2540, column: 45, scope: !3971)
!3975 = !DILocation(line: 2540, column: 59, scope: !3971)
!3976 = !DILocation(line: 2540, column: 12, scope: !3964)
!3977 = !DILocation(line: 2542, column: 14, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 2541, column: 3)
!3979 = !DILocation(line: 2544, column: 7, scope: !3978)
!3980 = !DILocation(line: 2544, column: 24, scope: !3978)
!3981 = !DILocation(line: 2545, column: 7, scope: !3978)
!3982 = !DILocation(line: 2546, column: 7, scope: !3978)
!3983 = !DILocation(line: 2542, column: 5, scope: !3978)
!3984 = !DILocation(line: 2547, column: 32, scope: !3978)
!3985 = !DILocation(line: 2548, column: 11, scope: !3978)
!3986 = !DILocation(line: 2547, column: 5, scope: !3978)
!3987 = !DILocation(line: 2549, column: 3, scope: !3978)
!3988 = !DILocation(line: 2550, column: 38, scope: !3964)
!3989 = !DILocation(line: 2550, column: 63, scope: !3964)
!3990 = !DILocation(line: 2550, column: 8, scope: !3964)
!3991 = !DILocation(line: 2553, column: 6, scope: !3964)
!3992 = !DILocation(line: 2553, column: 31, scope: !3964)
!3993 = !DILocation(line: 2552, column: 5, scope: !3964)
!3994 = !DILocation(line: 2551, column: 8, scope: !3964)
!3995 = !DILocation(line: 2552, column: 3, scope: !3964)
!3996 = !DILocation(line: 2554, column: 17, scope: !3964)
!3997 = !DILocation(line: 2555, column: 8, scope: !3964)
!3998 = !DILocation(line: 2555, column: 32, scope: !3964)
!3999 = !DILocation(line: 2557, column: 6, scope: !3964)
!4000 = !DILocation(line: 2558, column: 6, scope: !3964)
!4001 = !DILocation(line: 2558, column: 9, scope: !3964)
!4002 = !DILocation(line: 2556, column: 8, scope: !3964)
!4003 = !DILocation(line: 2557, column: 3, scope: !3964)
!4004 = !DILocation(line: 2559, column: 8, scope: !3964)
!4005 = !DILocation(line: 2561, column: 18, scope: !3925)
!4006 = !DILocation(line: 2562, column: 4, scope: !3925)
!4007 = !DILocation(line: 2564, column: 36, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !4009, file: !3, line: 2563, column: 6)
!4009 = distinct !DILexicalBlock(scope: !4010, file: !3, line: 2562, column: 4)
!4010 = distinct !DILexicalBlock(scope: !3925, file: !3, line: 2562, column: 4)
!4011 = !DILocation(line: 2564, column: 8, scope: !4008)
!4012 = !DILocation(line: 2564, column: 33, scope: !4008)
!4013 = !DILocation(line: 2565, column: 35, scope: !4008)
!4014 = !DILocation(line: 2565, column: 8, scope: !4008)
!4015 = !DILocation(line: 2565, column: 32, scope: !4008)
!4016 = !DILocation(line: 2566, column: 40, scope: !4008)
!4017 = !DILocation(line: 2566, column: 8, scope: !4008)
!4018 = !DILocation(line: 2566, column: 37, scope: !4008)
!4019 = !DILocation(line: 2568, column: 6, scope: !4008)
!4020 = !DILocation(line: 2567, column: 8, scope: !4008)
!4021 = !DILocation(line: 2568, column: 3, scope: !4008)
!4022 = !DILocation(line: 2570, column: 6, scope: !4008)
!4023 = !DILocation(line: 2569, column: 8, scope: !4008)
!4024 = !DILocation(line: 2570, column: 3, scope: !4008)
!4025 = !DILocation(line: 2574, column: 22, scope: !4008)
!4026 = !DILocation(line: 2574, column: 20, scope: !4008)
!4027 = !DILocation(line: 2575, column: 48, scope: !4008)
!4028 = !DILocation(line: 2575, column: 24, scope: !4008)
!4029 = !DILocation(line: 2575, column: 22, scope: !4008)
!4030 = !DILocation(line: 2576, column: 12, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 2576, column: 12)
!4032 = !DILocation(line: 2576, column: 39, scope: !4031)
!4033 = !DILocation(line: 2577, column: 5, scope: !4031)
!4034 = !DILocation(line: 2577, column: 8, scope: !4031)
!4035 = !DILocation(line: 2577, column: 42, scope: !4031)
!4036 = !DILocation(line: 2576, column: 12, scope: !4008)
!4037 = !DILocation(line: 2578, column: 10, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4031, file: !3, line: 2578, column: 3)
!4039 = !DILocation(line: 2578, column: 8, scope: !4038)
!4040 = !DILocation(line: 2578, column: 15, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 2578, column: 3)
!4042 = !DILocation(line: 2578, column: 19, scope: !4041)
!4043 = !DILocation(line: 2578, column: 17, scope: !4041)
!4044 = !DILocation(line: 2578, column: 3, scope: !4038)
!4045 = !DILocation(line: 2580, column: 10, scope: !4041)
!4046 = !DILocation(line: 2580, column: 37, scope: !4041)
!4047 = !DILocation(line: 2579, column: 5, scope: !4041)
!4048 = !DILocation(line: 2579, column: 39, scope: !4041)
!4049 = !DILocation(line: 2580, column: 7, scope: !4041)
!4050 = !DILocation(line: 2578, column: 35, scope: !4041)
!4051 = !DILocation(line: 2578, column: 3, scope: !4041)
!4052 = distinct !{!4052, !4044, !4053}
!4053 = !DILocation(line: 2580, column: 38, scope: !4038)
!4054 = !DILocation(line: 2581, column: 12, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 2581, column: 12)
!4056 = !DILocation(line: 2581, column: 48, scope: !4055)
!4057 = !DILocation(line: 2582, column: 5, scope: !4055)
!4058 = !DILocation(line: 2582, column: 8, scope: !4055)
!4059 = !DILocation(line: 2582, column: 51, scope: !4055)
!4060 = !DILocation(line: 2581, column: 12, scope: !4008)
!4061 = !DILocation(line: 2583, column: 10, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4055, file: !3, line: 2583, column: 3)
!4063 = !DILocation(line: 2583, column: 8, scope: !4062)
!4064 = !DILocation(line: 2583, column: 15, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4062, file: !3, line: 2583, column: 3)
!4066 = !DILocation(line: 2583, column: 19, scope: !4065)
!4067 = !DILocation(line: 2583, column: 17, scope: !4065)
!4068 = !DILocation(line: 2583, column: 3, scope: !4062)
!4069 = !DILocation(line: 2585, column: 10, scope: !4065)
!4070 = !DILocation(line: 2585, column: 46, scope: !4065)
!4071 = !DILocation(line: 2584, column: 5, scope: !4065)
!4072 = !DILocation(line: 2584, column: 48, scope: !4065)
!4073 = !DILocation(line: 2585, column: 7, scope: !4065)
!4074 = !DILocation(line: 2583, column: 35, scope: !4065)
!4075 = !DILocation(line: 2583, column: 3, scope: !4065)
!4076 = distinct !{!4076, !4068, !4077}
!4077 = !DILocation(line: 2585, column: 47, scope: !4062)
!4078 = !DILocation(line: 2587, column: 6, scope: !4008)
!4079 = !DILocation(line: 2586, column: 8, scope: !4008)
!4080 = !DILocation(line: 2587, column: 3, scope: !4008)
!4081 = !DILocation(line: 2588, column: 42, scope: !4008)
!4082 = !DILocation(line: 2588, column: 8, scope: !4008)
!4083 = !DILocation(line: 2588, column: 39, scope: !4008)
!4084 = !DILocation(line: 2589, column: 12, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 2589, column: 12)
!4086 = !DILocation(line: 2589, column: 35, scope: !4085)
!4087 = !DILocation(line: 2590, column: 5, scope: !4085)
!4088 = !DILocation(line: 2591, column: 11, scope: !4085)
!4089 = !DILocation(line: 2591, column: 46, scope: !4085)
!4090 = !DILocation(line: 2591, column: 9, scope: !4085)
!4091 = !DILocation(line: 2591, column: 54, scope: !4085)
!4092 = !DILocation(line: 2592, column: 5, scope: !4085)
!4093 = !DILocation(line: 2592, column: 21, scope: !4085)
!4094 = !DILocation(line: 2592, column: 29, scope: !4085)
!4095 = !DILocation(line: 2593, column: 8, scope: !4085)
!4096 = !DILocation(line: 2592, column: 18, scope: !4085)
!4097 = !DILocation(line: 2593, column: 36, scope: !4085)
!4098 = !DILocation(line: 2589, column: 12, scope: !4008)
!4099 = !DILocation(line: 2594, column: 3, scope: !4085)
!4100 = !DILocation(line: 2562, column: 4, scope: !4009)
!4101 = distinct !{!4101, !4102, !4103}
!4102 = !DILocation(line: 2562, column: 4, scope: !4010)
!4103 = !DILocation(line: 2595, column: 6, scope: !4010)
!4104 = !DILocation(line: 2596, column: 4, scope: !3925)
!4105 = !DILocation(line: 2596, column: 23, scope: !3925)
!4106 = !DILocation(line: 2597, column: 59, scope: !3925)
!4107 = !DILocation(line: 2597, column: 4, scope: !3925)
!4108 = !DILocation(line: 2597, column: 32, scope: !3925)
!4109 = !DILocation(line: 2597, column: 57, scope: !3925)
!4110 = !DILocation(line: 2598, column: 2, scope: !3925)
!4111 = !DILocation(line: 2514, column: 9, scope: !3920)
!4112 = !DILocation(line: 2514, column: 7, scope: !3920)
!4113 = !DILocation(line: 2512, column: 7, scope: !3920)
!4114 = distinct !{!4114, !3922, !4115}
!4115 = !DILocation(line: 2598, column: 2, scope: !3915)
!4116 = !DILocation(line: 2599, column: 11, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 2599, column: 11)
!4118 = !DILocation(line: 2599, column: 22, scope: !4117)
!4119 = !DILocation(line: 2599, column: 66, scope: !4117)
!4120 = !DILocation(line: 2599, column: 25, scope: !4117)
!4121 = !DILocation(line: 2599, column: 11, scope: !3913)
!4122 = !DILocation(line: 2600, column: 11, scope: !4117)
!4123 = !DILocation(line: 2600, column: 2, scope: !4117)
!4124 = !DILocation(line: 2601, column: 5, scope: !3913)
!4125 = !DILocation(line: 2509, column: 68, scope: !3909)
!4126 = !DILocation(line: 2509, column: 3, scope: !3909)
!4127 = distinct !{!4127, !3911, !4128}
!4128 = !DILocation(line: 2601, column: 5, scope: !3904)
!4129 = !DILocation(line: 2603, column: 7, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2603, column: 7)
!4131 = !DILocation(line: 2603, column: 16, scope: !4130)
!4132 = !DILocation(line: 2603, column: 19, scope: !4130)
!4133 = !DILocation(line: 2603, column: 48, scope: !4130)
!4134 = !DILocation(line: 2603, column: 45, scope: !4130)
!4135 = !DILocation(line: 2603, column: 7, scope: !3805)
!4136 = !DILocation(line: 2604, column: 5, scope: !4130)
!4137 = !DILocation(line: 2605, column: 7, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2605, column: 7)
!4139 = !DILocation(line: 2605, column: 7, scope: !3805)
!4140 = !DILocation(line: 2608, column: 7, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 2608, column: 7)
!4142 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2606, column: 5)
!4143 = !DILocation(line: 2608, column: 7, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4141, file: !3, line: 2608, column: 7)
!4145 = !DILocation(line: 2610, column: 8, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 2610, column: 8)
!4147 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 2609, column: 2)
!4148 = !DILocation(line: 2610, column: 13, scope: !4146)
!4149 = !DILocation(line: 2610, column: 41, scope: !4146)
!4150 = !DILocation(line: 2610, column: 10, scope: !4146)
!4151 = !DILocation(line: 2611, column: 8, scope: !4146)
!4152 = !DILocation(line: 2611, column: 11, scope: !4146)
!4153 = !DILocation(line: 2611, column: 34, scope: !4146)
!4154 = !DILocation(line: 2610, column: 8, scope: !4147)
!4155 = !DILocation(line: 2612, column: 6, scope: !4146)
!4156 = distinct !{!4156, !4140, !4157}
!4157 = !DILocation(line: 2616, column: 2, scope: !4141)
!4158 = !DILocation(line: 2613, column: 13, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 2613, column: 4)
!4160 = !DILocation(line: 2613, column: 11, scope: !4159)
!4161 = !DILocation(line: 2613, column: 9, scope: !4159)
!4162 = !DILocation(line: 2613, column: 38, scope: !4163)
!4163 = distinct !DILexicalBlock(scope: !4159, file: !3, line: 2613, column: 4)
!4164 = !DILocation(line: 2613, column: 40, scope: !4163)
!4165 = !DILocation(line: 2613, column: 4, scope: !4159)
!4166 = !DILocation(line: 2614, column: 6, scope: !4163)
!4167 = !DILocation(line: 2613, column: 53, scope: !4163)
!4168 = !DILocation(line: 2613, column: 56, scope: !4163)
!4169 = !DILocation(line: 2613, column: 51, scope: !4163)
!4170 = !DILocation(line: 2613, column: 4, scope: !4163)
!4171 = distinct !{!4171, !4165, !4172}
!4172 = !DILocation(line: 2614, column: 6, scope: !4159)
!4173 = !DILocation(line: 2615, column: 29, scope: !4147)
!4174 = !DILocation(line: 2615, column: 4, scope: !4147)
!4175 = !DILocation(line: 2617, column: 40, scope: !4142)
!4176 = !DILocation(line: 2617, column: 23, scope: !4142)
!4177 = !DILocation(line: 2617, column: 21, scope: !4142)
!4178 = !DILocation(line: 2618, column: 14, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 2618, column: 7)
!4180 = !DILocation(line: 2618, column: 12, scope: !4179)
!4181 = !DILocation(line: 2618, column: 19, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4179, file: !3, line: 2618, column: 7)
!4183 = !DILocation(line: 2618, column: 23, scope: !4182)
!4184 = !DILocation(line: 2618, column: 21, scope: !4182)
!4185 = !DILocation(line: 2618, column: 7, scope: !4179)
!4186 = !DILocation(line: 2620, column: 13, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 2620, column: 4)
!4188 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 2619, column: 2)
!4189 = !DILocation(line: 2620, column: 36, scope: !4187)
!4190 = !DILocation(line: 2620, column: 11, scope: !4187)
!4191 = !DILocation(line: 2620, column: 9, scope: !4187)
!4192 = !DILocation(line: 2620, column: 40, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4187, file: !3, line: 2620, column: 4)
!4194 = !DILocation(line: 2620, column: 42, scope: !4193)
!4195 = !DILocation(line: 2620, column: 4, scope: !4187)
!4196 = !DILocation(line: 2622, column: 12, scope: !4197)
!4197 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 2621, column: 6)
!4198 = !DILocation(line: 2622, column: 15, scope: !4197)
!4199 = !DILocation(line: 2622, column: 10, scope: !4197)
!4200 = !DILocation(line: 2623, column: 12, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 2623, column: 12)
!4202 = !DILocation(line: 2623, column: 17, scope: !4201)
!4203 = !DILocation(line: 2623, column: 45, scope: !4201)
!4204 = !DILocation(line: 2623, column: 14, scope: !4201)
!4205 = !DILocation(line: 2624, column: 5, scope: !4201)
!4206 = !DILocation(line: 2624, column: 8, scope: !4201)
!4207 = !DILocation(line: 2624, column: 31, scope: !4201)
!4208 = !DILocation(line: 2623, column: 12, scope: !4197)
!4209 = !DILocation(line: 2625, column: 3, scope: !4201)
!4210 = !DILocation(line: 2626, column: 14, scope: !4197)
!4211 = !DILocation(line: 2626, column: 12, scope: !4197)
!4212 = !DILocation(line: 2627, column: 22, scope: !4197)
!4213 = !DILocation(line: 2627, column: 20, scope: !4197)
!4214 = !DILocation(line: 2628, column: 27, scope: !4197)
!4215 = !DILocation(line: 2628, column: 42, scope: !4197)
!4216 = !DILocation(line: 2628, column: 8, scope: !4197)
!4217 = !DILocation(line: 2629, column: 8, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 2629, column: 8)
!4219 = !DILocation(line: 2629, column: 8, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 2629, column: 8)
!4221 = !DILocation(line: 0, scope: !4220)
!4222 = !DILocalVariable(name: "live_a", scope: !4223, file: !3, line: 2631, type: !697)
!4223 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 2630, column: 3)
!4224 = !DILocation(line: 2631, column: 19, scope: !4223)
!4225 = !DILocation(line: 2631, column: 28, scope: !4223)
!4226 = !DILocation(line: 2631, column: 41, scope: !4223)
!4227 = !DILocation(line: 2634, column: 10, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 2633, column: 9)
!4229 = !DILocation(line: 2633, column: 9, scope: !4228)
!4230 = !DILocation(line: 2634, column: 23, scope: !4228)
!4231 = !DILocation(line: 2636, column: 9, scope: !4228)
!4232 = !DILocation(line: 2636, column: 12, scope: !4228)
!4233 = !DILocation(line: 2636, column: 25, scope: !4228)
!4234 = !DILocation(line: 2636, column: 16, scope: !4228)
!4235 = !DILocation(line: 2633, column: 9, scope: !4223)
!4236 = !DILocation(line: 2637, column: 33, scope: !4228)
!4237 = !DILocation(line: 2637, column: 36, scope: !4228)
!4238 = !DILocation(line: 2637, column: 7, scope: !4228)
!4239 = !DILocation(line: 2638, column: 3, scope: !4223)
!4240 = distinct !{!4240, !4217, !4241}
!4241 = !DILocation(line: 2638, column: 3, scope: !4218)
!4242 = !DILocation(line: 2639, column: 6, scope: !4197)
!4243 = !DILocation(line: 2620, column: 55, scope: !4193)
!4244 = !DILocation(line: 2620, column: 58, scope: !4193)
!4245 = !DILocation(line: 2620, column: 53, scope: !4193)
!4246 = !DILocation(line: 2620, column: 4, scope: !4193)
!4247 = distinct !{!4247, !4195, !4248}
!4248 = !DILocation(line: 2639, column: 6, scope: !4187)
!4249 = !DILocation(line: 2641, column: 13, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 2641, column: 4)
!4251 = !DILocation(line: 2641, column: 37, scope: !4250)
!4252 = !DILocation(line: 2641, column: 11, scope: !4250)
!4253 = !DILocation(line: 2641, column: 9, scope: !4250)
!4254 = !DILocation(line: 2641, column: 41, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4250, file: !3, line: 2641, column: 4)
!4256 = !DILocation(line: 2641, column: 43, scope: !4255)
!4257 = !DILocation(line: 2641, column: 4, scope: !4250)
!4258 = !DILocation(line: 2642, column: 27, scope: !4255)
!4259 = !DILocation(line: 2642, column: 42, scope: !4255)
!4260 = !DILocation(line: 2642, column: 6, scope: !4255)
!4261 = !DILocation(line: 2641, column: 56, scope: !4255)
!4262 = !DILocation(line: 2641, column: 59, scope: !4255)
!4263 = !DILocation(line: 2641, column: 54, scope: !4255)
!4264 = !DILocation(line: 2641, column: 4, scope: !4255)
!4265 = distinct !{!4265, !4257, !4266}
!4266 = !DILocation(line: 2642, column: 66, scope: !4250)
!4267 = !DILocation(line: 2643, column: 2, scope: !4188)
!4268 = !DILocation(line: 2618, column: 39, scope: !4182)
!4269 = !DILocation(line: 2618, column: 7, scope: !4182)
!4270 = distinct !{!4270, !4185, !4271}
!4271 = !DILocation(line: 2643, column: 2, scope: !4179)
!4272 = !DILocation(line: 2644, column: 7, scope: !4142)
!4273 = !DILocation(line: 2645, column: 7, scope: !4142)
!4274 = !DILocation(line: 2646, column: 5, scope: !4142)
!4275 = !DILocation(line: 2649, column: 3, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2649, column: 3)
!4277 = !DILocation(line: 2649, column: 3, scope: !4278)
!4278 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 2649, column: 3)
!4279 = !DILocation(line: 2651, column: 11, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 2651, column: 11)
!4281 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 2650, column: 5)
!4282 = !DILocation(line: 2651, column: 42, scope: !4280)
!4283 = !DILocation(line: 2652, column: 4, scope: !4280)
!4284 = !DILocation(line: 2652, column: 7, scope: !4280)
!4285 = !DILocation(line: 2652, column: 39, scope: !4280)
!4286 = !DILocation(line: 2651, column: 11, scope: !4281)
!4287 = !DILocation(line: 2654, column: 8, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4289, file: !3, line: 2654, column: 8)
!4289 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2653, column: 2)
!4290 = !DILocation(line: 2654, column: 34, scope: !4288)
!4291 = !DILocation(line: 2654, column: 38, scope: !4288)
!4292 = !DILocation(line: 2654, column: 41, scope: !4288)
!4293 = !DILocation(line: 2654, column: 55, scope: !4288)
!4294 = !DILocation(line: 2654, column: 8, scope: !4289)
!4295 = !DILocation(line: 2656, column: 9, scope: !4288)
!4296 = !DILocation(line: 2657, column: 9, scope: !4288)
!4297 = !DILocation(line: 2657, column: 13, scope: !4288)
!4298 = !DILocation(line: 2657, column: 18, scope: !4288)
!4299 = !DILocation(line: 2657, column: 49, scope: !4288)
!4300 = !DILocation(line: 2658, column: 9, scope: !4288)
!4301 = !DILocation(line: 2658, column: 34, scope: !4288)
!4302 = !DILocation(line: 2659, column: 9, scope: !4288)
!4303 = !DILocation(line: 2659, column: 41, scope: !4288)
!4304 = !DILocation(line: 2660, column: 9, scope: !4288)
!4305 = !DILocation(line: 2660, column: 35, scope: !4288)
!4306 = !DILocation(line: 2655, column: 6, scope: !4288)
!4307 = !DILocation(line: 2661, column: 4, scope: !4289)
!4308 = !DILocation(line: 2661, column: 8, scope: !4289)
!4309 = !DILocation(line: 2661, column: 23, scope: !4289)
!4310 = !DILocation(line: 2662, column: 4, scope: !4289)
!4311 = distinct !{!4311, !4275, !4312}
!4312 = !DILocation(line: 2695, column: 5, scope: !4276)
!4313 = !DILocation(line: 2664, column: 15, scope: !4281)
!4314 = !DILocation(line: 2664, column: 43, scope: !4281)
!4315 = !DILocation(line: 2664, column: 13, scope: !4281)
!4316 = !DILocation(line: 2665, column: 16, scope: !4281)
!4317 = !DILocation(line: 2665, column: 44, scope: !4281)
!4318 = !DILocation(line: 2665, column: 14, scope: !4281)
!4319 = !DILocation(line: 2666, column: 14, scope: !4281)
!4320 = !DILocation(line: 2666, column: 18, scope: !4281)
!4321 = !DILocation(line: 2666, column: 12, scope: !4281)
!4322 = !DILocation(line: 2667, column: 11, scope: !4323)
!4323 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 2667, column: 11)
!4324 = !DILocation(line: 2667, column: 16, scope: !4323)
!4325 = !DILocation(line: 2667, column: 11, scope: !4281)
!4326 = !DILocation(line: 2668, column: 9, scope: !4323)
!4327 = !DILocation(line: 2668, column: 2, scope: !4323)
!4328 = !DILocation(line: 2673, column: 17, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !4323, file: !3, line: 2670, column: 2)
!4330 = !DILocation(line: 2673, column: 23, scope: !4329)
!4331 = !DILocation(line: 2673, column: 41, scope: !4329)
!4332 = !DILocation(line: 2673, column: 15, scope: !4329)
!4333 = !DILocation(line: 2674, column: 18, scope: !4329)
!4334 = !DILocation(line: 2674, column: 24, scope: !4329)
!4335 = !DILocation(line: 2674, column: 42, scope: !4329)
!4336 = !DILocation(line: 2674, column: 16, scope: !4329)
!4337 = !DILocation(line: 2675, column: 15, scope: !4329)
!4338 = !DILocation(line: 2676, column: 11, scope: !4329)
!4339 = !DILocation(line: 2676, column: 8, scope: !4329)
!4340 = !DILocation(line: 2677, column: 8, scope: !4329)
!4341 = !DILocation(line: 2677, column: 12, scope: !4329)
!4342 = !DILocation(line: 2678, column: 8, scope: !4329)
!4343 = !DILocation(line: 2678, column: 5, scope: !4329)
!4344 = !DILocation(line: 0, scope: !4329)
!4345 = !DILocation(line: 2675, column: 13, scope: !4329)
!4346 = !DILocation(line: 2675, column: 11, scope: !4329)
!4347 = !DILocation(line: 2680, column: 11, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 2680, column: 11)
!4349 = !DILocation(line: 2680, column: 11, scope: !4281)
!4350 = !DILocation(line: 2682, column: 25, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 2681, column: 2)
!4352 = !DILocation(line: 2682, column: 4, scope: !4351)
!4353 = !DILocation(line: 2682, column: 8, scope: !4351)
!4354 = !DILocation(line: 2682, column: 23, scope: !4351)
!4355 = !DILocation(line: 2683, column: 16, scope: !4351)
!4356 = !DILocation(line: 2683, column: 4, scope: !4351)
!4357 = !DILocation(line: 2683, column: 8, scope: !4351)
!4358 = !DILocation(line: 2683, column: 14, scope: !4351)
!4359 = !DILocation(line: 2684, column: 17, scope: !4351)
!4360 = !DILocation(line: 2684, column: 4, scope: !4351)
!4361 = !DILocation(line: 2684, column: 8, scope: !4351)
!4362 = !DILocation(line: 2684, column: 15, scope: !4351)
!4363 = !DILocation(line: 2685, column: 2, scope: !4351)
!4364 = !DILocation(line: 2688, column: 4, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 2687, column: 2)
!4366 = !DILocation(line: 2688, column: 8, scope: !4365)
!4367 = !DILocation(line: 2688, column: 23, scope: !4365)
!4368 = !DILocation(line: 2689, column: 8, scope: !4369)
!4369 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 2689, column: 8)
!4370 = !DILocation(line: 2689, column: 34, scope: !4369)
!4371 = !DILocation(line: 2689, column: 38, scope: !4369)
!4372 = !DILocation(line: 2689, column: 41, scope: !4369)
!4373 = !DILocation(line: 2689, column: 55, scope: !4369)
!4374 = !DILocation(line: 2689, column: 8, scope: !4365)
!4375 = !DILocation(line: 2690, column: 15, scope: !4369)
!4376 = !DILocation(line: 2691, column: 8, scope: !4369)
!4377 = !DILocation(line: 2691, column: 12, scope: !4369)
!4378 = !DILocation(line: 2691, column: 17, scope: !4369)
!4379 = !DILocation(line: 2692, column: 8, scope: !4369)
!4380 = !DILocation(line: 2692, column: 41, scope: !4369)
!4381 = !DILocation(line: 2693, column: 8, scope: !4369)
!4382 = !DILocation(line: 2690, column: 6, scope: !4369)
!4383 = !DILocation(line: 2697, column: 3, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2697, column: 3)
!4385 = !DILocation(line: 2697, column: 3, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4384, file: !3, line: 2697, column: 3)
!4387 = !DILocation(line: 2699, column: 11, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 2699, column: 11)
!4389 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 2698, column: 5)
!4390 = !DILocation(line: 2699, column: 16, scope: !4388)
!4391 = !DILocation(line: 2699, column: 44, scope: !4388)
!4392 = !DILocation(line: 2699, column: 13, scope: !4388)
!4393 = !DILocation(line: 2700, column: 4, scope: !4388)
!4394 = !DILocation(line: 2700, column: 7, scope: !4388)
!4395 = !DILocation(line: 2700, column: 30, scope: !4388)
!4396 = !DILocation(line: 2699, column: 11, scope: !4389)
!4397 = !DILocation(line: 2702, column: 8, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 2702, column: 8)
!4399 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 2701, column: 2)
!4400 = !DILocation(line: 2702, column: 34, scope: !4398)
!4401 = !DILocation(line: 2702, column: 38, scope: !4398)
!4402 = !DILocation(line: 2702, column: 41, scope: !4398)
!4403 = !DILocation(line: 2702, column: 55, scope: !4398)
!4404 = !DILocation(line: 2702, column: 8, scope: !4399)
!4405 = !DILocation(line: 2703, column: 15, scope: !4398)
!4406 = !DILocation(line: 2704, column: 8, scope: !4398)
!4407 = !DILocation(line: 2704, column: 25, scope: !4398)
!4408 = !DILocation(line: 2703, column: 6, scope: !4398)
!4409 = !DILocation(line: 2705, column: 20, scope: !4399)
!4410 = !DILocation(line: 2705, column: 4, scope: !4399)
!4411 = !DILocation(line: 2706, column: 4, scope: !4399)
!4412 = distinct !{!4412, !4383, !4413}
!4413 = !DILocation(line: 2718, column: 5, scope: !4384)
!4414 = !DILocation(line: 2708, column: 36, scope: !4389)
!4415 = !DILocation(line: 2708, column: 7, scope: !4389)
!4416 = !DILocation(line: 2708, column: 34, scope: !4389)
!4417 = !DILocation(line: 2709, column: 27, scope: !4389)
!4418 = !DILocation(line: 2709, column: 7, scope: !4389)
!4419 = !DILocation(line: 2709, column: 25, scope: !4389)
!4420 = !DILocation(line: 2710, column: 7, scope: !4389)
!4421 = !DILocation(line: 2710, column: 23, scope: !4389)
!4422 = !DILocation(line: 2712, column: 41, scope: !4389)
!4423 = !DILocation(line: 2712, column: 7, scope: !4389)
!4424 = !DILocation(line: 2712, column: 39, scope: !4389)
!4425 = !DILocation(line: 2713, column: 46, scope: !4389)
!4426 = !DILocation(line: 2713, column: 7, scope: !4389)
!4427 = !DILocation(line: 2713, column: 44, scope: !4389)
!4428 = !DILocation(line: 2714, column: 13, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 2714, column: 11)
!4430 = !DILocation(line: 2714, column: 11, scope: !4389)
!4431 = !DILocation(line: 2715, column: 34, scope: !4429)
!4432 = !DILocation(line: 2715, column: 2, scope: !4429)
!4433 = !DILocation(line: 2720, column: 3, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2720, column: 3)
!4435 = !DILocation(line: 2720, column: 3, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 2720, column: 3)
!4437 = !DILocation(line: 2722, column: 11, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 2722, column: 11)
!4439 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 2721, column: 5)
!4440 = !DILocation(line: 2722, column: 15, scope: !4438)
!4441 = !DILocation(line: 2722, column: 30, scope: !4438)
!4442 = !DILocation(line: 2722, column: 11, scope: !4439)
!4443 = !DILocation(line: 2724, column: 4, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 2723, column: 2)
!4445 = !DILocation(line: 2724, column: 15, scope: !4444)
!4446 = !DILocation(line: 2724, column: 19, scope: !4444)
!4447 = !DILocation(line: 2724, column: 24, scope: !4444)
!4448 = !DILocation(line: 2725, column: 17, scope: !4444)
!4449 = !DILocation(line: 2725, column: 4, scope: !4444)
!4450 = !DILocation(line: 2726, column: 4, scope: !4444)
!4451 = distinct !{!4451, !4433, !4452}
!4452 = !DILocation(line: 2733, column: 5, scope: !4434)
!4453 = !DILocation(line: 2731, column: 37, scope: !4439)
!4454 = !DILocation(line: 2731, column: 7, scope: !4439)
!4455 = !DILocation(line: 2732, column: 48, scope: !4439)
!4456 = !DILocation(line: 2732, column: 7, scope: !4439)
!4457 = !DILocation(line: 2734, column: 3, scope: !3805)
!4458 = !DILocation(line: 2735, column: 7, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 2735, column: 7)
!4460 = !DILocation(line: 2735, column: 24, scope: !4459)
!4461 = !DILocation(line: 2735, column: 21, scope: !4459)
!4462 = !DILocation(line: 2735, column: 7, scope: !3805)
!4463 = !DILocation(line: 2736, column: 5, scope: !4459)
!4464 = !DILocation(line: 2737, column: 13, scope: !3805)
!4465 = !DILocation(line: 2737, column: 3, scope: !3805)
!4466 = !DILocation(line: 2738, column: 1, scope: !3805)
!4467 = distinct !DISubprogram(name: "ira_allocno_iter_init", scope: !698, file: !698, line: 939, type: !4468, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4468 = !DISubroutineType(types: !4469)
!4469 = !{null, !4470}
!4470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3853, size: 64)
!4471 = !DILocalVariable(name: "i", arg: 1, scope: !4467, file: !698, line: 939, type: !4470)
!4472 = !DILocation(line: 939, column: 46, scope: !4467)
!4473 = !DILocation(line: 941, column: 3, scope: !4467)
!4474 = !DILocation(line: 941, column: 6, scope: !4467)
!4475 = !DILocation(line: 941, column: 8, scope: !4467)
!4476 = !DILocation(line: 942, column: 1, scope: !4467)
!4477 = distinct !DISubprogram(name: "ira_allocno_iter_cond", scope: !698, file: !698, line: 947, type: !4478, scopeLine: 948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4478 = !DISubroutineType(types: !4479)
!4479 = !{!942, !4470, !1858}
!4480 = !DILocalVariable(name: "i", arg: 1, scope: !4477, file: !698, line: 947, type: !4470)
!4481 = !DILocation(line: 947, column: 46, scope: !4477)
!4482 = !DILocalVariable(name: "a", arg: 2, scope: !4477, file: !698, line: 947, type: !1858)
!4483 = !DILocation(line: 947, column: 64, scope: !4477)
!4484 = !DILocalVariable(name: "n", scope: !4477, file: !698, line: 949, type: !703)
!4485 = !DILocation(line: 949, column: 7, scope: !4477)
!4486 = !DILocation(line: 951, column: 12, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4477, file: !698, line: 951, column: 3)
!4488 = !DILocation(line: 951, column: 15, scope: !4487)
!4489 = !DILocation(line: 951, column: 10, scope: !4487)
!4490 = !DILocation(line: 951, column: 8, scope: !4487)
!4491 = !DILocation(line: 951, column: 18, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4487, file: !698, line: 951, column: 3)
!4493 = !DILocation(line: 951, column: 22, scope: !4492)
!4494 = !DILocation(line: 951, column: 20, scope: !4492)
!4495 = !DILocation(line: 951, column: 3, scope: !4487)
!4496 = !DILocation(line: 952, column: 9, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4492, file: !698, line: 952, column: 9)
!4498 = !DILocation(line: 952, column: 22, scope: !4497)
!4499 = !DILocation(line: 952, column: 25, scope: !4497)
!4500 = !DILocation(line: 952, column: 9, scope: !4492)
!4501 = !DILocation(line: 954, column: 7, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4497, file: !698, line: 953, column: 7)
!4503 = !DILocation(line: 954, column: 20, scope: !4502)
!4504 = !DILocation(line: 954, column: 3, scope: !4502)
!4505 = !DILocation(line: 954, column: 5, scope: !4502)
!4506 = !DILocation(line: 955, column: 9, scope: !4502)
!4507 = !DILocation(line: 955, column: 11, scope: !4502)
!4508 = !DILocation(line: 955, column: 2, scope: !4502)
!4509 = !DILocation(line: 955, column: 5, scope: !4502)
!4510 = !DILocation(line: 955, column: 7, scope: !4502)
!4511 = !DILocation(line: 956, column: 2, scope: !4502)
!4512 = !DILocation(line: 952, column: 28, scope: !4497)
!4513 = !DILocation(line: 951, column: 41, scope: !4492)
!4514 = !DILocation(line: 951, column: 3, scope: !4492)
!4515 = distinct !{!4515, !4495, !4516}
!4516 = !DILocation(line: 957, column: 7, scope: !4487)
!4517 = !DILocation(line: 958, column: 3, scope: !4477)
!4518 = !DILocation(line: 959, column: 1, scope: !4477)
!4519 = distinct !DISubprogram(name: "rhs_regno", scope: !421, file: !421, line: 1051, type: !4520, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4520 = !DISubroutineType(types: !4521)
!4521 = !{!7, !4522}
!4522 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !709, line: 51, baseType: !4523)
!4523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4524, size: 64)
!4524 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !711)
!4525 = !DILocalVariable(name: "x", arg: 1, scope: !4519, file: !421, line: 1051, type: !4522)
!4526 = !DILocation(line: 1051, column: 22, scope: !4519)
!4527 = !DILocation(line: 1053, column: 10, scope: !4519)
!4528 = !DILocation(line: 1053, column: 3, scope: !4519)
!4529 = distinct !DISubprogram(name: "change_allocno_in_range_list", scope: !3, file: !3, line: 1653, type: !4530, scopeLine: 1654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4530 = !DISubroutineType(types: !4531)
!4531 = !{null, !1898, !697}
!4532 = !DILocalVariable(name: "r", arg: 1, scope: !4529, file: !3, line: 1653, type: !1898)
!4533 = !DILocation(line: 1653, column: 52, scope: !4529)
!4534 = !DILocalVariable(name: "a", arg: 2, scope: !4529, file: !3, line: 1653, type: !697)
!4535 = !DILocation(line: 1653, column: 69, scope: !4529)
!4536 = !DILocation(line: 1655, column: 3, scope: !4529)
!4537 = !DILocation(line: 1655, column: 10, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 1655, column: 3)
!4539 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1655, column: 3)
!4540 = !DILocation(line: 1655, column: 12, scope: !4538)
!4541 = !DILocation(line: 1655, column: 3, scope: !4539)
!4542 = !DILocation(line: 1656, column: 18, scope: !4538)
!4543 = !DILocation(line: 1656, column: 5, scope: !4538)
!4544 = !DILocation(line: 1656, column: 8, scope: !4538)
!4545 = !DILocation(line: 1656, column: 16, scope: !4538)
!4546 = !DILocation(line: 1655, column: 25, scope: !4538)
!4547 = !DILocation(line: 1655, column: 28, scope: !4538)
!4548 = !DILocation(line: 1655, column: 23, scope: !4538)
!4549 = !DILocation(line: 1655, column: 3, scope: !4538)
!4550 = distinct !{!4550, !4541, !4551}
!4551 = !DILocation(line: 1656, column: 18, scope: !4539)
!4552 = !DILocation(line: 1657, column: 1, scope: !4529)
!4553 = distinct !DISubprogram(name: "copy_info_to_removed_store_destinations", scope: !3, file: !3, line: 2409, type: !4554, scopeLine: 2410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4554 = !DISubroutineType(types: !4555)
!4555 = !{!942, !703}
!4556 = !DILocalVariable(name: "regno", arg: 1, scope: !4553, file: !3, line: 2409, type: !703)
!4557 = !DILocation(line: 2409, column: 46, scope: !4553)
!4558 = !DILocalVariable(name: "a", scope: !4553, file: !3, line: 2411, type: !697)
!4559 = !DILocation(line: 2411, column: 17, scope: !4553)
!4560 = !DILocalVariable(name: "parent_a", scope: !4553, file: !3, line: 2412, type: !697)
!4561 = !DILocation(line: 2412, column: 17, scope: !4553)
!4562 = !DILocalVariable(name: "parent", scope: !4553, file: !3, line: 2413, type: !1844)
!4563 = !DILocation(line: 2413, column: 24, scope: !4553)
!4564 = !DILocalVariable(name: "r", scope: !4553, file: !3, line: 2414, type: !1898)
!4565 = !DILocation(line: 2414, column: 24, scope: !4553)
!4566 = !DILocalVariable(name: "merged_p", scope: !4553, file: !3, line: 2415, type: !942)
!4567 = !DILocation(line: 2415, column: 8, scope: !4553)
!4568 = !DILocation(line: 2417, column: 12, scope: !4553)
!4569 = !DILocation(line: 2418, column: 12, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 2418, column: 3)
!4571 = !DILocation(line: 2418, column: 34, scope: !4570)
!4572 = !DILocation(line: 2418, column: 10, scope: !4570)
!4573 = !DILocation(line: 2418, column: 8, scope: !4570)
!4574 = !DILocation(line: 2419, column: 8, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4570, file: !3, line: 2418, column: 3)
!4576 = !DILocation(line: 2419, column: 10, scope: !4575)
!4577 = !DILocation(line: 2418, column: 3, scope: !4570)
!4578 = !DILocation(line: 2422, column: 11, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2422, column: 11)
!4580 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 2421, column: 5)
!4581 = !DILocation(line: 2422, column: 16, scope: !4579)
!4582 = !DILocation(line: 2422, column: 44, scope: !4579)
!4583 = !DILocation(line: 2422, column: 13, scope: !4579)
!4584 = !DILocation(line: 2422, column: 11, scope: !4580)
!4585 = !DILocation(line: 2424, column: 2, scope: !4579)
!4586 = !DILocation(line: 2427, column: 21, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2427, column: 7)
!4588 = !DILocation(line: 2427, column: 49, scope: !4587)
!4589 = !DILocation(line: 2427, column: 19, scope: !4587)
!4590 = !DILocation(line: 2427, column: 12, scope: !4587)
!4591 = !DILocation(line: 2428, column: 5, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 2427, column: 7)
!4593 = !DILocation(line: 2428, column: 12, scope: !4592)
!4594 = !DILocation(line: 2427, column: 7, scope: !4587)
!4595 = !DILocation(line: 2430, column: 18, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 2430, column: 6)
!4597 = !DILocation(line: 2430, column: 26, scope: !4596)
!4598 = !DILocation(line: 2430, column: 44, scope: !4596)
!4599 = !DILocation(line: 2430, column: 16, scope: !4596)
!4600 = !DILocation(line: 2430, column: 52, scope: !4596)
!4601 = !DILocation(line: 2431, column: 6, scope: !4596)
!4602 = !DILocation(line: 2431, column: 10, scope: !4596)
!4603 = !DILocation(line: 2431, column: 22, scope: !4596)
!4604 = !DILocation(line: 2431, column: 50, scope: !4596)
!4605 = !DILocation(line: 2431, column: 19, scope: !4596)
!4606 = !DILocation(line: 2433, column: 3, scope: !4596)
!4607 = !DILocation(line: 2433, column: 6, scope: !4596)
!4608 = !DILocation(line: 2430, column: 6, scope: !4592)
!4609 = !DILocation(line: 2434, column: 4, scope: !4596)
!4610 = !DILocation(line: 2433, column: 45, scope: !4596)
!4611 = !DILocation(line: 2429, column: 14, scope: !4592)
!4612 = !DILocation(line: 2429, column: 22, scope: !4592)
!4613 = !DILocation(line: 2429, column: 12, scope: !4592)
!4614 = !DILocation(line: 2427, column: 7, scope: !4592)
!4615 = distinct !{!4615, !4594, !4616}
!4616 = !DILocation(line: 2434, column: 4, scope: !4587)
!4617 = !DILocation(line: 2435, column: 11, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2435, column: 11)
!4619 = !DILocation(line: 2435, column: 18, scope: !4618)
!4620 = !DILocation(line: 2435, column: 26, scope: !4618)
!4621 = !DILocation(line: 2435, column: 29, scope: !4618)
!4622 = !DILocation(line: 2435, column: 38, scope: !4618)
!4623 = !DILocation(line: 2435, column: 11, scope: !4580)
!4624 = !DILocation(line: 2436, column: 2, scope: !4618)
!4625 = !DILocation(line: 2437, column: 11, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2437, column: 11)
!4627 = !DILocation(line: 2437, column: 37, scope: !4626)
!4628 = !DILocation(line: 2437, column: 41, scope: !4626)
!4629 = !DILocation(line: 2437, column: 44, scope: !4626)
!4630 = !DILocation(line: 2437, column: 58, scope: !4626)
!4631 = !DILocation(line: 2437, column: 11, scope: !4580)
!4632 = !DILocation(line: 2440, column: 7, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 2438, column: 2)
!4634 = !DILocation(line: 2442, column: 7, scope: !4633)
!4635 = !DILocation(line: 2442, column: 24, scope: !4633)
!4636 = !DILocation(line: 2443, column: 7, scope: !4633)
!4637 = !DILocation(line: 2443, column: 31, scope: !4633)
!4638 = !DILocation(line: 2439, column: 4, scope: !4633)
!4639 = !DILocation(line: 2444, column: 31, scope: !4633)
!4640 = !DILocation(line: 2445, column: 10, scope: !4633)
!4641 = !DILocation(line: 2444, column: 4, scope: !4633)
!4642 = !DILocation(line: 2446, column: 2, scope: !4633)
!4643 = !DILocation(line: 2447, column: 45, scope: !4580)
!4644 = !DILocation(line: 2447, column: 11, scope: !4580)
!4645 = !DILocation(line: 2447, column: 9, scope: !4580)
!4646 = !DILocation(line: 2448, column: 37, scope: !4580)
!4647 = !DILocation(line: 2448, column: 40, scope: !4580)
!4648 = !DILocation(line: 2448, column: 7, scope: !4580)
!4649 = !DILocation(line: 2450, column: 35, scope: !4580)
!4650 = !DILocation(line: 2450, column: 38, scope: !4580)
!4651 = !DILocation(line: 2450, column: 4, scope: !4580)
!4652 = !DILocation(line: 2449, column: 7, scope: !4580)
!4653 = !DILocation(line: 2450, column: 2, scope: !4580)
!4654 = !DILocation(line: 2451, column: 7, scope: !4580)
!4655 = !DILocation(line: 2454, column: 11, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2454, column: 11)
!4657 = !DILocation(line: 2454, column: 11, scope: !4580)
!4658 = !DILocation(line: 2455, column: 2, scope: !4656)
!4659 = !DILocation(line: 2455, column: 42, scope: !4656)
!4660 = !DILocation(line: 2457, column: 39, scope: !4580)
!4661 = !DILocation(line: 2457, column: 7, scope: !4580)
!4662 = !DILocation(line: 2457, column: 36, scope: !4580)
!4663 = !DILocation(line: 2459, column: 5, scope: !4580)
!4664 = !DILocation(line: 2458, column: 7, scope: !4580)
!4665 = !DILocation(line: 2459, column: 2, scope: !4580)
!4666 = !DILocation(line: 2461, column: 5, scope: !4580)
!4667 = !DILocation(line: 2460, column: 7, scope: !4580)
!4668 = !DILocation(line: 2461, column: 2, scope: !4580)
!4669 = !DILocation(line: 2462, column: 16, scope: !4580)
!4670 = !DILocation(line: 2463, column: 5, scope: !4580)
!4671 = !DILocation(line: 2420, column: 12, scope: !4575)
!4672 = !DILocation(line: 2420, column: 10, scope: !4575)
!4673 = !DILocation(line: 2418, column: 3, scope: !4575)
!4674 = distinct !{!4674, !4577, !4675}
!4675 = !DILocation(line: 2463, column: 5, scope: !4570)
!4676 = !DILocation(line: 2464, column: 10, scope: !4553)
!4677 = !DILocation(line: 2464, column: 3, scope: !4553)
!4678 = distinct !DISubprogram(name: "clear_allocno_conflicts", scope: !3, file: !3, line: 667, type: !2346, scopeLine: 668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4679 = !DILocalVariable(name: "a", arg: 1, scope: !4678, file: !3, line: 667, type: !697)
!4680 = !DILocation(line: 667, column: 40, scope: !4678)
!4681 = !DILocation(line: 669, column: 7, scope: !4682)
!4682 = distinct !DILexicalBlock(scope: !4678, file: !3, line: 669, column: 7)
!4683 = !DILocation(line: 669, column: 7, scope: !4678)
!4684 = !DILocation(line: 671, column: 7, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4682, file: !3, line: 670, column: 5)
!4686 = !DILocation(line: 671, column: 41, scope: !4685)
!4687 = !DILocation(line: 672, column: 26, scope: !4685)
!4688 = !DILocation(line: 672, column: 8, scope: !4685)
!4689 = !DILocation(line: 672, column: 7, scope: !4685)
!4690 = !DILocation(line: 672, column: 65, scope: !4685)
!4691 = !DILocation(line: 673, column: 5, scope: !4685)
!4692 = !DILocation(line: 674, column: 12, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4682, file: !3, line: 674, column: 12)
!4694 = !DILocation(line: 674, column: 52, scope: !4693)
!4695 = !DILocation(line: 674, column: 12, scope: !4682)
!4696 = !DILocalVariable(name: "nw", scope: !4697, file: !3, line: 676, type: !703)
!4697 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 675, column: 5)
!4698 = !DILocation(line: 676, column: 11, scope: !4697)
!4699 = !DILocation(line: 678, column: 13, scope: !4697)
!4700 = !DILocation(line: 678, column: 31, scope: !4697)
!4701 = !DILocation(line: 678, column: 29, scope: !4697)
!4702 = !DILocation(line: 678, column: 48, scope: !4697)
!4703 = !DILocation(line: 678, column: 63, scope: !4697)
!4704 = !DILocation(line: 678, column: 10, scope: !4697)
!4705 = !DILocation(line: 679, column: 15, scope: !4697)
!4706 = !DILocation(line: 680, column: 8, scope: !4697)
!4707 = !DILocation(line: 680, column: 11, scope: !4697)
!4708 = !DILocation(line: 679, column: 7, scope: !4697)
!4709 = !DILocation(line: 681, column: 5, scope: !4697)
!4710 = !DILocation(line: 682, column: 1, scope: !4678)
!4711 = distinct !DISubprogram(name: "sparseset_set_bit", scope: !3862, file: !3862, line: 106, type: !4712, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4712 = !DISubroutineType(types: !4713)
!4713 = !{null, !3861, !7}
!4714 = !DILocalVariable(name: "s", arg: 1, scope: !4711, file: !3862, line: 106, type: !3861)
!4715 = !DILocation(line: 106, column: 30, scope: !4711)
!4716 = !DILocalVariable(name: "e", arg: 2, scope: !4711, file: !3862, line: 106, type: !7)
!4717 = !DILocation(line: 106, column: 52, scope: !4711)
!4718 = !DILocation(line: 108, column: 25, scope: !4719)
!4719 = distinct !DILexicalBlock(scope: !4711, file: !3862, line: 108, column: 7)
!4720 = !DILocation(line: 108, column: 28, scope: !4719)
!4721 = !DILocation(line: 108, column: 8, scope: !4719)
!4722 = !DILocation(line: 108, column: 7, scope: !4711)
!4723 = !DILocation(line: 109, column: 27, scope: !4719)
!4724 = !DILocation(line: 109, column: 30, scope: !4719)
!4725 = !DILocation(line: 109, column: 33, scope: !4719)
!4726 = !DILocation(line: 109, column: 36, scope: !4719)
!4727 = !DILocation(line: 109, column: 43, scope: !4719)
!4728 = !DILocation(line: 109, column: 5, scope: !4719)
!4729 = !DILocation(line: 110, column: 1, scope: !4711)
!4730 = distinct !DISubprogram(name: "sparseset_iter_init", scope: !3862, file: !3862, line: 126, type: !4731, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4731 = !DISubroutineType(types: !4732)
!4732 = !{null, !3861}
!4733 = !DILocalVariable(name: "s", arg: 1, scope: !4730, file: !3862, line: 126, type: !3861)
!4734 = !DILocation(line: 126, column: 32, scope: !4730)
!4735 = !DILocation(line: 128, column: 3, scope: !4730)
!4736 = !DILocation(line: 128, column: 6, scope: !4730)
!4737 = !DILocation(line: 128, column: 11, scope: !4730)
!4738 = !DILocation(line: 129, column: 3, scope: !4730)
!4739 = !DILocation(line: 129, column: 6, scope: !4730)
!4740 = !DILocation(line: 129, column: 15, scope: !4730)
!4741 = !DILocation(line: 130, column: 3, scope: !4730)
!4742 = !DILocation(line: 130, column: 6, scope: !4730)
!4743 = !DILocation(line: 130, column: 16, scope: !4730)
!4744 = !DILocation(line: 131, column: 1, scope: !4730)
!4745 = distinct !DISubprogram(name: "sparseset_iter_p", scope: !3862, file: !3862, line: 134, type: !4746, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4746 = !DISubroutineType(types: !4747)
!4747 = !{!942, !3861}
!4748 = !DILocalVariable(name: "s", arg: 1, scope: !4745, file: !3862, line: 134, type: !3861)
!4749 = !DILocation(line: 134, column: 29, scope: !4745)
!4750 = !DILocation(line: 136, column: 7, scope: !4751)
!4751 = distinct !DILexicalBlock(scope: !4745, file: !3862, line: 136, column: 7)
!4752 = !DILocation(line: 136, column: 10, scope: !4751)
!4753 = !DILocation(line: 136, column: 20, scope: !4751)
!4754 = !DILocation(line: 136, column: 23, scope: !4751)
!4755 = !DILocation(line: 136, column: 26, scope: !4751)
!4756 = !DILocation(line: 136, column: 33, scope: !4751)
!4757 = !DILocation(line: 136, column: 36, scope: !4751)
!4758 = !DILocation(line: 136, column: 31, scope: !4751)
!4759 = !DILocation(line: 136, column: 7, scope: !4745)
!4760 = !DILocation(line: 137, column: 5, scope: !4751)
!4761 = !DILocation(line: 139, column: 12, scope: !4751)
!4762 = !DILocation(line: 139, column: 15, scope: !4751)
!4763 = !DILocation(line: 139, column: 25, scope: !4751)
!4764 = !DILocation(line: 139, column: 5, scope: !4751)
!4765 = !DILocation(line: 140, column: 1, scope: !4745)
!4766 = distinct !DISubprogram(name: "sparseset_iter_elm", scope: !3862, file: !3862, line: 143, type: !4767, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4767 = !DISubroutineType(types: !4768)
!4768 = !{!7, !3861}
!4769 = !DILocalVariable(name: "s", arg: 1, scope: !4766, file: !3862, line: 143, type: !3861)
!4770 = !DILocation(line: 143, column: 31, scope: !4766)
!4771 = !DILocation(line: 145, column: 10, scope: !4766)
!4772 = !DILocation(line: 145, column: 13, scope: !4766)
!4773 = !DILocation(line: 145, column: 19, scope: !4766)
!4774 = !DILocation(line: 145, column: 22, scope: !4766)
!4775 = !DILocation(line: 145, column: 3, scope: !4766)
!4776 = distinct !DISubprogram(name: "sparseset_iter_next", scope: !3862, file: !3862, line: 149, type: !4731, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4777 = !DILocalVariable(name: "s", arg: 1, scope: !4776, file: !3862, line: 149, type: !3861)
!4778 = !DILocation(line: 149, column: 32, scope: !4776)
!4779 = !DILocation(line: 151, column: 14, scope: !4776)
!4780 = !DILocation(line: 151, column: 17, scope: !4776)
!4781 = !DILocation(line: 151, column: 3, scope: !4776)
!4782 = !DILocation(line: 151, column: 6, scope: !4776)
!4783 = !DILocation(line: 151, column: 11, scope: !4776)
!4784 = !DILocation(line: 152, column: 3, scope: !4776)
!4785 = !DILocation(line: 152, column: 6, scope: !4776)
!4786 = !DILocation(line: 152, column: 15, scope: !4776)
!4787 = !DILocation(line: 153, column: 1, scope: !4776)
!4788 = distinct !DISubprogram(name: "compress_conflict_vecs", scope: !3, file: !3, line: 718, type: !3585, scopeLine: 719, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4789 = !DILocalVariable(name: "a", scope: !4788, file: !3, line: 720, type: !697)
!4790 = !DILocation(line: 720, column: 17, scope: !4788)
!4791 = !DILocalVariable(name: "ai", scope: !4788, file: !3, line: 721, type: !3853)
!4792 = !DILocation(line: 721, column: 24, scope: !4788)
!4793 = !DILocation(line: 724, column: 44, scope: !4788)
!4794 = !DILocation(line: 724, column: 42, scope: !4788)
!4795 = !DILocation(line: 724, column: 15, scope: !4788)
!4796 = !DILocation(line: 724, column: 7, scope: !4788)
!4797 = !DILocation(line: 724, column: 5, scope: !4788)
!4798 = !DILocation(line: 725, column: 11, scope: !4788)
!4799 = !DILocation(line: 725, column: 3, scope: !4788)
!4800 = !DILocation(line: 725, column: 53, scope: !4788)
!4801 = !DILocation(line: 725, column: 51, scope: !4788)
!4802 = !DILocation(line: 726, column: 36, scope: !4788)
!4803 = !DILocation(line: 727, column: 3, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 727, column: 3)
!4805 = !DILocation(line: 727, column: 3, scope: !4806)
!4806 = distinct !DILexicalBlock(scope: !4804, file: !3, line: 727, column: 3)
!4807 = !DILocation(line: 728, column: 9, scope: !4808)
!4808 = distinct !DILexicalBlock(scope: !4806, file: !3, line: 728, column: 9)
!4809 = !DILocation(line: 728, column: 9, scope: !4806)
!4810 = !DILocation(line: 729, column: 38, scope: !4808)
!4811 = !DILocation(line: 729, column: 7, scope: !4808)
!4812 = distinct !{!4812, !4803, !4813}
!4813 = !DILocation(line: 729, column: 39, scope: !4804)
!4814 = !DILocation(line: 730, column: 13, scope: !4788)
!4815 = !DILocation(line: 730, column: 3, scope: !4788)
!4816 = !DILocation(line: 731, column: 1, scope: !4788)
!4817 = distinct !DISubprogram(name: "ira_copy_iter_init", scope: !698, file: !698, line: 979, type: !4818, scopeLine: 980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4818 = !DISubroutineType(types: !4819)
!4819 = !{null, !4820}
!4820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3598, size: 64)
!4821 = !DILocalVariable(name: "i", arg: 1, scope: !4817, file: !698, line: 979, type: !4820)
!4822 = !DILocation(line: 979, column: 40, scope: !4817)
!4823 = !DILocation(line: 981, column: 3, scope: !4817)
!4824 = !DILocation(line: 981, column: 6, scope: !4817)
!4825 = !DILocation(line: 981, column: 8, scope: !4817)
!4826 = !DILocation(line: 982, column: 1, scope: !4817)
!4827 = distinct !DISubprogram(name: "ira_copy_iter_cond", scope: !698, file: !698, line: 987, type: !4828, scopeLine: 988, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4828 = !DISubroutineType(types: !4829)
!4829 = !{!942, !4820, !2012}
!4830 = !DILocalVariable(name: "i", arg: 1, scope: !4827, file: !698, line: 987, type: !4820)
!4831 = !DILocation(line: 987, column: 40, scope: !4827)
!4832 = !DILocalVariable(name: "cp", arg: 2, scope: !4827, file: !698, line: 987, type: !2012)
!4833 = !DILocation(line: 987, column: 55, scope: !4827)
!4834 = !DILocalVariable(name: "n", scope: !4827, file: !698, line: 989, type: !703)
!4835 = !DILocation(line: 989, column: 7, scope: !4827)
!4836 = !DILocation(line: 991, column: 12, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4827, file: !698, line: 991, column: 3)
!4838 = !DILocation(line: 991, column: 15, scope: !4837)
!4839 = !DILocation(line: 991, column: 10, scope: !4837)
!4840 = !DILocation(line: 991, column: 8, scope: !4837)
!4841 = !DILocation(line: 991, column: 18, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4837, file: !698, line: 991, column: 3)
!4843 = !DILocation(line: 991, column: 22, scope: !4842)
!4844 = !DILocation(line: 991, column: 20, scope: !4842)
!4845 = !DILocation(line: 991, column: 3, scope: !4837)
!4846 = !DILocation(line: 992, column: 9, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4842, file: !698, line: 992, column: 9)
!4848 = !DILocation(line: 992, column: 20, scope: !4847)
!4849 = !DILocation(line: 992, column: 23, scope: !4847)
!4850 = !DILocation(line: 992, column: 9, scope: !4842)
!4851 = !DILocation(line: 994, column: 8, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4847, file: !698, line: 993, column: 7)
!4853 = !DILocation(line: 994, column: 19, scope: !4852)
!4854 = !DILocation(line: 994, column: 3, scope: !4852)
!4855 = !DILocation(line: 994, column: 6, scope: !4852)
!4856 = !DILocation(line: 995, column: 9, scope: !4852)
!4857 = !DILocation(line: 995, column: 11, scope: !4852)
!4858 = !DILocation(line: 995, column: 2, scope: !4852)
!4859 = !DILocation(line: 995, column: 5, scope: !4852)
!4860 = !DILocation(line: 995, column: 7, scope: !4852)
!4861 = !DILocation(line: 996, column: 2, scope: !4852)
!4862 = !DILocation(line: 992, column: 26, scope: !4847)
!4863 = !DILocation(line: 991, column: 39, scope: !4842)
!4864 = !DILocation(line: 991, column: 3, scope: !4842)
!4865 = distinct !{!4865, !4845, !4866}
!4866 = !DILocation(line: 997, column: 7, scope: !4837)
!4867 = !DILocation(line: 998, column: 3, scope: !4827)
!4868 = !DILocation(line: 999, column: 1, scope: !4827)
!4869 = distinct !DISubprogram(name: "finish_allocno", scope: !3, file: !3, line: 983, type: !2346, scopeLine: 984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4870 = !DILocalVariable(name: "a", arg: 1, scope: !4869, file: !3, line: 983, type: !697)
!4871 = !DILocation(line: 983, column: 31, scope: !4869)
!4872 = !DILocalVariable(name: "cover_class", scope: !4869, file: !3, line: 985, type: !390)
!4873 = !DILocation(line: 985, column: 18, scope: !4869)
!4874 = !DILocation(line: 985, column: 32, scope: !4869)
!4875 = !DILocation(line: 987, column: 3, scope: !4869)
!4876 = !DILocation(line: 987, column: 16, scope: !4869)
!4877 = !DILocation(line: 987, column: 33, scope: !4869)
!4878 = !DILocation(line: 988, column: 3, scope: !4869)
!4879 = !DILocation(line: 988, column: 31, scope: !4869)
!4880 = !DILocation(line: 988, column: 56, scope: !4869)
!4881 = !DILocation(line: 989, column: 7, scope: !4882)
!4882 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 989, column: 7)
!4883 = !DILocation(line: 989, column: 42, scope: !4882)
!4884 = !DILocation(line: 989, column: 7, scope: !4869)
!4885 = !DILocation(line: 990, column: 15, scope: !4882)
!4886 = !DILocation(line: 990, column: 5, scope: !4882)
!4887 = !DILocation(line: 991, column: 7, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 991, column: 7)
!4889 = !DILocation(line: 991, column: 34, scope: !4888)
!4890 = !DILocation(line: 991, column: 7, scope: !4869)
!4891 = !DILocation(line: 992, column: 27, scope: !4888)
!4892 = !DILocation(line: 992, column: 55, scope: !4888)
!4893 = !DILocation(line: 992, column: 5, scope: !4888)
!4894 = !DILocation(line: 993, column: 7, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 993, column: 7)
!4896 = !DILocation(line: 993, column: 43, scope: !4895)
!4897 = !DILocation(line: 993, column: 7, scope: !4869)
!4898 = !DILocation(line: 994, column: 27, scope: !4895)
!4899 = !DILocation(line: 994, column: 64, scope: !4895)
!4900 = !DILocation(line: 994, column: 5, scope: !4895)
!4901 = !DILocation(line: 995, column: 7, scope: !4902)
!4902 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 995, column: 7)
!4903 = !DILocation(line: 995, column: 42, scope: !4902)
!4904 = !DILocation(line: 995, column: 7, scope: !4869)
!4905 = !DILocation(line: 996, column: 27, scope: !4902)
!4906 = !DILocation(line: 996, column: 63, scope: !4902)
!4907 = !DILocation(line: 996, column: 5, scope: !4902)
!4908 = !DILocation(line: 997, column: 7, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 997, column: 7)
!4910 = !DILocation(line: 997, column: 51, scope: !4909)
!4911 = !DILocation(line: 997, column: 7, scope: !4869)
!4912 = !DILocation(line: 998, column: 27, scope: !4909)
!4913 = !DILocation(line: 999, column: 6, scope: !4909)
!4914 = !DILocation(line: 998, column: 5, scope: !4909)
!4915 = !DILocation(line: 1000, column: 39, scope: !4869)
!4916 = !DILocation(line: 1000, column: 3, scope: !4869)
!4917 = !DILocation(line: 1001, column: 14, scope: !4869)
!4918 = !DILocation(line: 1001, column: 28, scope: !4869)
!4919 = !DILocation(line: 1001, column: 3, scope: !4869)
!4920 = !DILocation(line: 1002, column: 1, scope: !4869)
!4921 = distinct !DISubprogram(name: "finish_copy", scope: !3, file: !3, line: 1284, type: !3124, scopeLine: 1285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4922 = !DILocalVariable(name: "cp", arg: 1, scope: !4921, file: !3, line: 1284, type: !1878)
!4923 = !DILocation(line: 1284, column: 25, scope: !4921)
!4924 = !DILocation(line: 1286, column: 14, scope: !4921)
!4925 = !DILocation(line: 1286, column: 25, scope: !4921)
!4926 = !DILocation(line: 1286, column: 3, scope: !4921)
!4927 = !DILocation(line: 1287, column: 1, scope: !4921)
!4928 = distinct !DISubprogram(name: "rebuild_regno_allocno_maps", scope: !3, file: !3, line: 343, type: !3585, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4929 = !DILocalVariable(name: "l", scope: !4928, file: !3, line: 345, type: !7)
!4930 = !DILocation(line: 345, column: 16, scope: !4928)
!4931 = !DILocalVariable(name: "max_regno", scope: !4928, file: !3, line: 346, type: !703)
!4932 = !DILocation(line: 346, column: 7, scope: !4928)
!4933 = !DILocalVariable(name: "regno", scope: !4928, file: !3, line: 346, type: !703)
!4934 = !DILocation(line: 346, column: 18, scope: !4928)
!4935 = !DILocalVariable(name: "a", scope: !4928, file: !3, line: 347, type: !697)
!4936 = !DILocation(line: 347, column: 17, scope: !4928)
!4937 = !DILocalVariable(name: "loop_tree_node", scope: !4928, file: !3, line: 348, type: !1844)
!4938 = !DILocation(line: 348, column: 24, scope: !4928)
!4939 = !DILocalVariable(name: "loop", scope: !4928, file: !3, line: 349, type: !1156)
!4940 = !DILocation(line: 349, column: 10, scope: !4928)
!4941 = !DILocalVariable(name: "ai", scope: !4928, file: !3, line: 350, type: !3853)
!4942 = !DILocation(line: 350, column: 24, scope: !4928)
!4943 = !DILocation(line: 352, column: 15, scope: !4928)
!4944 = !DILocation(line: 352, column: 13, scope: !4928)
!4945 = !DILocation(line: 353, column: 10, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !4928, file: !3, line: 353, column: 3)
!4947 = !DILocation(line: 353, column: 8, scope: !4946)
!4948 = !DILocation(line: 353, column: 15, scope: !4949)
!4949 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 353, column: 3)
!4950 = !DILocation(line: 353, column: 3, scope: !4946)
!4951 = !DILocation(line: 354, column: 9, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4949, file: !3, line: 354, column: 9)
!4953 = !DILocation(line: 354, column: 24, scope: !4952)
!4954 = !DILocation(line: 354, column: 27, scope: !4952)
!4955 = !DILocation(line: 354, column: 45, scope: !4952)
!4956 = !DILocation(line: 354, column: 9, scope: !4949)
!4957 = !DILocation(line: 356, column: 12, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4952, file: !3, line: 355, column: 7)
!4959 = !DILocation(line: 356, column: 27, scope: !4958)
!4960 = !DILocation(line: 356, column: 30, scope: !4958)
!4961 = !DILocation(line: 356, column: 2, scope: !4958)
!4962 = !DILocation(line: 359, column: 12, scope: !4958)
!4963 = !DILocation(line: 359, column: 10, scope: !4958)
!4964 = !DILocation(line: 358, column: 24, scope: !4958)
!4965 = !DILocation(line: 358, column: 6, scope: !4958)
!4966 = !DILocation(line: 357, column: 2, scope: !4958)
!4967 = !DILocation(line: 357, column: 17, scope: !4958)
!4968 = !DILocation(line: 357, column: 20, scope: !4958)
!4969 = !DILocation(line: 358, column: 4, scope: !4958)
!4970 = !DILocation(line: 360, column: 10, scope: !4958)
!4971 = !DILocation(line: 360, column: 25, scope: !4958)
!4972 = !DILocation(line: 360, column: 28, scope: !4958)
!4973 = !DILocation(line: 360, column: 2, scope: !4958)
!4974 = !DILocation(line: 361, column: 28, scope: !4958)
!4975 = !DILocation(line: 361, column: 26, scope: !4958)
!4976 = !DILocation(line: 362, column: 7, scope: !4958)
!4977 = !DILocation(line: 354, column: 48, scope: !4952)
!4978 = !DILocation(line: 353, column: 65, scope: !4949)
!4979 = !DILocation(line: 353, column: 3, scope: !4949)
!4980 = distinct !{!4980, !4950, !4981}
!4981 = !DILocation(line: 362, column: 7, scope: !4946)
!4982 = !DILocation(line: 363, column: 13, scope: !4928)
!4983 = !DILocation(line: 363, column: 3, scope: !4928)
!4984 = !DILocation(line: 365, column: 39, scope: !4928)
!4985 = !DILocation(line: 365, column: 49, scope: !4928)
!4986 = !DILocation(line: 365, column: 25, scope: !4928)
!4987 = !DILocation(line: 365, column: 7, scope: !4928)
!4988 = !DILocation(line: 365, column: 5, scope: !4928)
!4989 = !DILocation(line: 366, column: 11, scope: !4928)
!4990 = !DILocation(line: 366, column: 3, scope: !4928)
!4991 = !DILocation(line: 366, column: 37, scope: !4928)
!4992 = !DILocation(line: 366, column: 47, scope: !4928)
!4993 = !DILocation(line: 367, column: 3, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4928, file: !3, line: 367, column: 3)
!4995 = !DILocation(line: 367, column: 3, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 367, column: 3)
!4997 = !DILocation(line: 369, column: 11, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 369, column: 11)
!4999 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 368, column: 5)
!5000 = !DILocation(line: 369, column: 34, scope: !4998)
!5001 = !DILocation(line: 369, column: 11, scope: !4999)
!5002 = !DILocation(line: 371, column: 2, scope: !4998)
!5003 = distinct !{!5003, !4993, !5004}
!5004 = !DILocation(line: 380, column: 5, scope: !4994)
!5005 = !DILocation(line: 372, column: 15, scope: !4999)
!5006 = !DILocation(line: 372, column: 13, scope: !4999)
!5007 = !DILocation(line: 373, column: 24, scope: !4999)
!5008 = !DILocation(line: 373, column: 22, scope: !4999)
!5009 = !DILocation(line: 374, column: 40, scope: !4999)
!5010 = !DILocation(line: 374, column: 62, scope: !4999)
!5011 = !DILocation(line: 374, column: 7, scope: !4999)
!5012 = !DILocation(line: 374, column: 38, scope: !4999)
!5013 = !DILocation(line: 375, column: 38, scope: !4999)
!5014 = !DILocation(line: 375, column: 7, scope: !4999)
!5015 = !DILocation(line: 375, column: 29, scope: !4999)
!5016 = !DILocation(line: 375, column: 36, scope: !4999)
!5017 = !DILocation(line: 376, column: 11, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 376, column: 11)
!5019 = !DILocation(line: 376, column: 27, scope: !5018)
!5020 = !DILocation(line: 376, column: 45, scope: !5018)
!5021 = !DILocation(line: 376, column: 52, scope: !5018)
!5022 = !DILocation(line: 376, column: 11, scope: !4999)
!5023 = !DILocation(line: 379, column: 45, scope: !5018)
!5024 = !DILocation(line: 379, column: 2, scope: !5018)
!5025 = !DILocation(line: 379, column: 18, scope: !5018)
!5026 = !DILocation(line: 379, column: 36, scope: !5018)
!5027 = !DILocation(line: 379, column: 43, scope: !5018)
!5028 = !DILocation(line: 381, column: 1, scope: !4928)
!5029 = distinct !DISubprogram(name: "ira_build", scope: !3, file: !3, line: 2780, type: !5030, scopeLine: 2781, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5030 = !DISubroutineType(types: !5031)
!5031 = !{!942, !942}
!5032 = !DILocalVariable(name: "loops_p", arg: 1, scope: !5029, file: !3, line: 2780, type: !942)
!5033 = !DILocation(line: 2780, column: 17, scope: !5029)
!5034 = !DILocation(line: 2782, column: 3, scope: !5029)
!5035 = !DILocation(line: 2784, column: 3, scope: !5029)
!5036 = !DILocation(line: 2785, column: 3, scope: !5029)
!5037 = !DILocation(line: 2786, column: 3, scope: !5029)
!5038 = !DILocation(line: 2787, column: 27, scope: !5029)
!5039 = !DILocation(line: 2787, column: 3, scope: !5029)
!5040 = !DILocation(line: 2788, column: 3, scope: !5029)
!5041 = !DILocation(line: 2789, column: 3, scope: !5029)
!5042 = !DILocation(line: 2790, column: 3, scope: !5029)
!5043 = !DILocation(line: 2791, column: 3, scope: !5029)
!5044 = !DILocation(line: 2792, column: 3, scope: !5029)
!5045 = !DILocation(line: 2793, column: 3, scope: !5029)
!5046 = !DILocation(line: 2794, column: 3, scope: !5029)
!5047 = !DILocation(line: 2795, column: 13, scope: !5029)
!5048 = !DILocation(line: 2795, column: 11, scope: !5029)
!5049 = !DILocation(line: 2796, column: 7, scope: !5050)
!5050 = distinct !DILexicalBlock(scope: !5029, file: !3, line: 2796, column: 7)
!5051 = !DILocation(line: 2796, column: 7, scope: !5029)
!5052 = !DILocation(line: 2798, column: 7, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5050, file: !3, line: 2797, column: 5)
!5054 = !DILocation(line: 2799, column: 7, scope: !5053)
!5055 = !DILocation(line: 2800, column: 5, scope: !5053)
!5056 = !DILocation(line: 2801, column: 3, scope: !5029)
!5057 = !DILocation(line: 2805, column: 3, scope: !5029)
!5058 = !DILocation(line: 2806, column: 3, scope: !5029)
!5059 = !DILocation(line: 2807, column: 3, scope: !5029)
!5060 = !DILocation(line: 2808, column: 3, scope: !5029)
!5061 = !DILocation(line: 2809, column: 9, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5029, file: !3, line: 2809, column: 7)
!5063 = !DILocation(line: 2809, column: 7, scope: !5029)
!5064 = !DILocalVariable(name: "a", scope: !5065, file: !3, line: 2811, type: !697)
!5065 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 2810, column: 5)
!5066 = !DILocation(line: 2811, column: 21, scope: !5065)
!5067 = !DILocalVariable(name: "ai", scope: !5065, file: !3, line: 2812, type: !3853)
!5068 = !DILocation(line: 2812, column: 28, scope: !5065)
!5069 = !DILocation(line: 2815, column: 11, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 2815, column: 11)
!5071 = !DILocation(line: 2815, column: 11, scope: !5065)
!5072 = !DILocation(line: 2817, column: 4, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5070, file: !3, line: 2816, column: 2)
!5074 = !DILocation(line: 2818, column: 12, scope: !5073)
!5075 = !DILocation(line: 2819, column: 2, scope: !5073)
!5076 = !DILocation(line: 2823, column: 7, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 2823, column: 7)
!5078 = !DILocation(line: 2823, column: 7, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5077, file: !3, line: 2823, column: 7)
!5080 = !DILocation(line: 2824, column: 6, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5079, file: !3, line: 2824, column: 6)
!5082 = !DILocation(line: 2824, column: 36, scope: !5081)
!5083 = !DILocation(line: 2824, column: 6, scope: !5079)
!5084 = !DILocation(line: 2826, column: 6, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 2825, column: 4)
!5086 = !DILocation(line: 2828, column: 6, scope: !5085)
!5087 = !DILocation(line: 2830, column: 4, scope: !5085)
!5088 = distinct !{!5088, !5076, !5089}
!5089 = !DILocation(line: 2830, column: 4, scope: !5077)
!5090 = !DILocation(line: 2831, column: 5, scope: !5065)
!5091 = !DILocation(line: 2832, column: 7, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5029, file: !3, line: 2832, column: 7)
!5093 = !DILocation(line: 2832, column: 33, scope: !5092)
!5094 = !DILocation(line: 2832, column: 37, scope: !5092)
!5095 = !DILocation(line: 2832, column: 40, scope: !5092)
!5096 = !DILocation(line: 2832, column: 54, scope: !5092)
!5097 = !DILocation(line: 2832, column: 7, scope: !5029)
!5098 = !DILocation(line: 2833, column: 19, scope: !5092)
!5099 = !DILocation(line: 2833, column: 5, scope: !5092)
!5100 = !DILocation(line: 2834, column: 7, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5029, file: !3, line: 2834, column: 7)
!5102 = !DILocation(line: 2834, column: 33, scope: !5101)
!5103 = !DILocation(line: 2834, column: 37, scope: !5101)
!5104 = !DILocation(line: 2834, column: 40, scope: !5101)
!5105 = !DILocation(line: 2834, column: 54, scope: !5101)
!5106 = !DILocation(line: 2834, column: 7, scope: !5029)
!5107 = !DILocalVariable(name: "n", scope: !5108, file: !3, line: 2836, type: !703)
!5108 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 2835, column: 5)
!5109 = !DILocation(line: 2836, column: 11, scope: !5108)
!5110 = !DILocalVariable(name: "nr", scope: !5108, file: !3, line: 2836, type: !703)
!5111 = !DILocation(line: 2836, column: 14, scope: !5108)
!5112 = !DILocalVariable(name: "a", scope: !5108, file: !3, line: 2837, type: !697)
!5113 = !DILocation(line: 2837, column: 21, scope: !5108)
!5114 = !DILocalVariable(name: "r", scope: !5108, file: !3, line: 2838, type: !1898)
!5115 = !DILocation(line: 2838, column: 28, scope: !5108)
!5116 = !DILocalVariable(name: "ai", scope: !5108, file: !3, line: 2839, type: !3853)
!5117 = !DILocation(line: 2839, column: 28, scope: !5108)
!5118 = !DILocation(line: 2841, column: 9, scope: !5108)
!5119 = !DILocation(line: 2842, column: 7, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 2842, column: 7)
!5121 = !DILocation(line: 2842, column: 7, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5120, file: !3, line: 2842, column: 7)
!5123 = !DILocation(line: 2843, column: 7, scope: !5122)
!5124 = !DILocation(line: 2843, column: 4, scope: !5122)
!5125 = distinct !{!5125, !5119, !5126}
!5126 = !DILocation(line: 2843, column: 7, scope: !5120)
!5127 = !DILocation(line: 2844, column: 10, scope: !5108)
!5128 = !DILocation(line: 2845, column: 7, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 2845, column: 7)
!5130 = !DILocation(line: 2845, column: 7, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5129, file: !3, line: 2845, column: 7)
!5132 = !DILocation(line: 2846, column: 11, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 2846, column: 2)
!5134 = !DILocation(line: 2846, column: 9, scope: !5133)
!5135 = !DILocation(line: 2846, column: 7, scope: !5133)
!5136 = !DILocation(line: 2846, column: 36, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5133, file: !3, line: 2846, column: 2)
!5138 = !DILocation(line: 2846, column: 38, scope: !5137)
!5139 = !DILocation(line: 2846, column: 2, scope: !5133)
!5140 = !DILocation(line: 2847, column: 6, scope: !5137)
!5141 = !DILocation(line: 2847, column: 4, scope: !5137)
!5142 = !DILocation(line: 2846, column: 51, scope: !5137)
!5143 = !DILocation(line: 2846, column: 54, scope: !5137)
!5144 = !DILocation(line: 2846, column: 49, scope: !5137)
!5145 = !DILocation(line: 2846, column: 2, scope: !5137)
!5146 = distinct !{!5146, !5139, !5147}
!5147 = !DILocation(line: 2847, column: 6, scope: !5133)
!5148 = distinct !{!5148, !5128, !5149}
!5149 = !DILocation(line: 2847, column: 6, scope: !5129)
!5150 = !DILocation(line: 2848, column: 16, scope: !5108)
!5151 = !DILocation(line: 2849, column: 9, scope: !5108)
!5152 = !DILocation(line: 2849, column: 48, scope: !5108)
!5153 = !DILocation(line: 2850, column: 9, scope: !5108)
!5154 = !DILocation(line: 2848, column: 7, scope: !5108)
!5155 = !DILocation(line: 2851, column: 16, scope: !5108)
!5156 = !DILocation(line: 2853, column: 9, scope: !5108)
!5157 = !DILocation(line: 2853, column: 27, scope: !5108)
!5158 = !DILocation(line: 2853, column: 43, scope: !5108)
!5159 = !DILocation(line: 2853, column: 46, scope: !5108)
!5160 = !DILocation(line: 2851, column: 7, scope: !5108)
!5161 = !DILocation(line: 2854, column: 5, scope: !5108)
!5162 = !DILocation(line: 2855, column: 10, scope: !5029)
!5163 = !DILocation(line: 2855, column: 3, scope: !5029)
!5164 = distinct !DISubprogram(name: "initiate_cost_vectors", scope: !3, file: !3, line: 1311, type: !3585, scopeLine: 1312, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5165 = !DILocalVariable(name: "i", scope: !5164, file: !3, line: 1313, type: !703)
!5166 = !DILocation(line: 1313, column: 7, scope: !5164)
!5167 = !DILocalVariable(name: "cover_class", scope: !5164, file: !3, line: 1314, type: !390)
!5168 = !DILocation(line: 1314, column: 18, scope: !5164)
!5169 = !DILocation(line: 1316, column: 10, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 1316, column: 3)
!5171 = !DILocation(line: 1316, column: 8, scope: !5170)
!5172 = !DILocation(line: 1316, column: 15, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 1316, column: 3)
!5174 = !DILocation(line: 1316, column: 19, scope: !5173)
!5175 = !DILocation(line: 1316, column: 17, scope: !5173)
!5176 = !DILocation(line: 1316, column: 3, scope: !5170)
!5177 = !DILocation(line: 1318, column: 41, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5173, file: !3, line: 1317, column: 5)
!5179 = !DILocation(line: 1318, column: 21, scope: !5178)
!5180 = !DILocation(line: 1318, column: 19, scope: !5178)
!5181 = !DILocation(line: 1322, column: 35, scope: !5178)
!5182 = !DILocation(line: 1322, column: 11, scope: !5178)
!5183 = !DILocation(line: 1322, column: 9, scope: !5178)
!5184 = !DILocation(line: 1320, column: 4, scope: !5178)
!5185 = !DILocation(line: 1319, column: 24, scope: !5178)
!5186 = !DILocation(line: 1319, column: 7, scope: !5178)
!5187 = !DILocation(line: 1320, column: 2, scope: !5178)
!5188 = !DILocation(line: 1324, column: 5, scope: !5178)
!5189 = !DILocation(line: 1316, column: 46, scope: !5173)
!5190 = !DILocation(line: 1316, column: 3, scope: !5173)
!5191 = distinct !{!5191, !5176, !5192}
!5192 = !DILocation(line: 1324, column: 5, scope: !5170)
!5193 = !DILocation(line: 1325, column: 1, scope: !5164)
!5194 = distinct !DISubprogram(name: "initiate_allocnos", scope: !3, file: !3, line: 398, type: !3585, scopeLine: 399, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5195 = !DILocation(line: 401, column: 7, scope: !5194)
!5196 = !DILocation(line: 401, column: 5, scope: !5194)
!5197 = !DILocation(line: 404, column: 7, scope: !5194)
!5198 = !DILocation(line: 404, column: 5, scope: !5194)
!5199 = !DILocation(line: 405, column: 17, scope: !5194)
!5200 = !DILocation(line: 405, column: 15, scope: !5194)
!5201 = !DILocation(line: 406, column: 16, scope: !5194)
!5202 = !DILocation(line: 407, column: 20, scope: !5194)
!5203 = !DILocation(line: 409, column: 7, scope: !5194)
!5204 = !DILocation(line: 409, column: 5, scope: !5194)
!5205 = !DILocation(line: 410, column: 31, scope: !5194)
!5206 = !DILocation(line: 412, column: 39, scope: !5194)
!5207 = !DILocation(line: 412, column: 54, scope: !5194)
!5208 = !DILocation(line: 412, column: 25, scope: !5194)
!5209 = !DILocation(line: 412, column: 7, scope: !5194)
!5210 = !DILocation(line: 412, column: 5, scope: !5194)
!5211 = !DILocation(line: 413, column: 11, scope: !5194)
!5212 = !DILocation(line: 413, column: 3, scope: !5194)
!5213 = !DILocation(line: 413, column: 37, scope: !5194)
!5214 = !DILocation(line: 413, column: 52, scope: !5194)
!5215 = !DILocation(line: 414, column: 1, scope: !5194)
!5216 = distinct !DISubprogram(name: "initiate_copies", scope: !3, file: !3, line: 1031, type: !3585, scopeLine: 1032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5217 = !DILocation(line: 1034, column: 7, scope: !5216)
!5218 = !DILocation(line: 1034, column: 5, scope: !5216)
!5219 = !DILocation(line: 1035, column: 14, scope: !5216)
!5220 = !DILocation(line: 1035, column: 12, scope: !5216)
!5221 = !DILocation(line: 1036, column: 14, scope: !5216)
!5222 = !DILocation(line: 1037, column: 18, scope: !5216)
!5223 = !DILocation(line: 1038, column: 1, scope: !5216)
!5224 = distinct !DISubprogram(name: "create_loop_tree_nodes", scope: !3, file: !3, line: 97, type: !5225, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5225 = !DISubroutineType(types: !5226)
!5226 = !{null, !942}
!5227 = !DILocalVariable(name: "loops_p", arg: 1, scope: !5224, file: !3, line: 97, type: !942)
!5228 = !DILocation(line: 97, column: 30, scope: !5224)
!5229 = !DILocalVariable(name: "i", scope: !5224, file: !3, line: 99, type: !7)
!5230 = !DILocation(line: 99, column: 16, scope: !5224)
!5231 = !DILocalVariable(name: "j", scope: !5224, file: !3, line: 99, type: !7)
!5232 = !DILocation(line: 99, column: 19, scope: !5224)
!5233 = !DILocalVariable(name: "max_regno", scope: !5224, file: !3, line: 100, type: !703)
!5234 = !DILocation(line: 100, column: 7, scope: !5224)
!5235 = !DILocalVariable(name: "skip_p", scope: !5224, file: !3, line: 101, type: !942)
!5236 = !DILocation(line: 101, column: 8, scope: !5224)
!5237 = !DILocalVariable(name: "ei", scope: !5224, file: !3, line: 102, type: !5238)
!5238 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !148, line: 682, baseType: !5239)
!5239 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !148, line: 679, size: 128, elements: !5240)
!5240 = !{!5241, !5242}
!5241 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5239, file: !148, line: 680, baseType: !7, size: 32)
!5242 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5239, file: !148, line: 681, baseType: !5243, size: 64, offset: 64)
!5243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1092, size: 64)
!5244 = !DILocation(line: 102, column: 17, scope: !5224)
!5245 = !DILocalVariable(name: "e", scope: !5224, file: !3, line: 103, type: !1104)
!5246 = !DILocation(line: 103, column: 8, scope: !5224)
!5247 = !DILocalVariable(name: "edges", scope: !5224, file: !3, line: 104, type: !5248)
!5248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5249, size: 64)
!5249 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !148, line: 152, baseType: !5250)
!5250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !148, line: 152, size: 128, elements: !5251)
!5251 = !{!5252}
!5252 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5250, file: !148, line: 152, baseType: !1097, size: 128)
!5253 = !DILocation(line: 104, column: 21, scope: !5224)
!5254 = !DILocalVariable(name: "loop", scope: !5224, file: !3, line: 105, type: !1156)
!5255 = !DILocation(line: 105, column: 10, scope: !5224)
!5256 = !DILocation(line: 109, column: 59, scope: !5224)
!5257 = !DILocation(line: 109, column: 57, scope: !5224)
!5258 = !DILocation(line: 109, column: 8, scope: !5224)
!5259 = !DILocation(line: 108, column: 8, scope: !5224)
!5260 = !DILocation(line: 108, column: 5, scope: !5224)
!5261 = !DILocation(line: 110, column: 36, scope: !5224)
!5262 = !DILocation(line: 110, column: 34, scope: !5224)
!5263 = !DILocation(line: 111, column: 10, scope: !5264)
!5264 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 111, column: 3)
!5265 = !DILocation(line: 111, column: 8, scope: !5264)
!5266 = !DILocation(line: 111, column: 15, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5264, file: !3, line: 111, column: 3)
!5268 = !DILocation(line: 111, column: 34, scope: !5267)
!5269 = !DILocation(line: 111, column: 17, scope: !5267)
!5270 = !DILocation(line: 111, column: 3, scope: !5264)
!5271 = !DILocation(line: 113, column: 7, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 112, column: 5)
!5273 = !DILocation(line: 113, column: 20, scope: !5272)
!5274 = !DILocation(line: 113, column: 23, scope: !5272)
!5275 = !DILocation(line: 113, column: 41, scope: !5272)
!5276 = !DILocation(line: 114, column: 15, scope: !5272)
!5277 = !DILocation(line: 114, column: 28, scope: !5272)
!5278 = !DILocation(line: 114, column: 31, scope: !5272)
!5279 = !DILocation(line: 114, column: 7, scope: !5272)
!5280 = !DILocation(line: 116, column: 7, scope: !5272)
!5281 = !DILocation(line: 116, column: 20, scope: !5272)
!5282 = !DILocation(line: 116, column: 23, scope: !5272)
!5283 = !DILocation(line: 116, column: 36, scope: !5272)
!5284 = !DILocation(line: 117, column: 7, scope: !5272)
!5285 = !DILocation(line: 117, column: 20, scope: !5272)
!5286 = !DILocation(line: 117, column: 23, scope: !5272)
!5287 = !DILocation(line: 117, column: 39, scope: !5272)
!5288 = !DILocation(line: 118, column: 7, scope: !5272)
!5289 = !DILocation(line: 118, column: 20, scope: !5272)
!5290 = !DILocation(line: 118, column: 23, scope: !5272)
!5291 = !DILocation(line: 118, column: 39, scope: !5272)
!5292 = !DILocation(line: 119, column: 7, scope: !5272)
!5293 = !DILocation(line: 119, column: 20, scope: !5272)
!5294 = !DILocation(line: 119, column: 23, scope: !5272)
!5295 = !DILocation(line: 119, column: 36, scope: !5272)
!5296 = !DILocation(line: 120, column: 5, scope: !5272)
!5297 = !DILocation(line: 111, column: 53, scope: !5267)
!5298 = !DILocation(line: 111, column: 3, scope: !5267)
!5299 = distinct !{!5299, !5270, !5300}
!5300 = !DILocation(line: 120, column: 5, scope: !5264)
!5301 = !DILocation(line: 123, column: 9, scope: !5224)
!5302 = !DILocation(line: 123, column: 7, scope: !5224)
!5303 = !DILocation(line: 122, column: 7, scope: !5224)
!5304 = !DILocation(line: 121, column: 21, scope: !5224)
!5305 = !DILocation(line: 121, column: 18, scope: !5224)
!5306 = !DILocation(line: 124, column: 15, scope: !5224)
!5307 = !DILocation(line: 124, column: 13, scope: !5224)
!5308 = !DILocation(line: 125, column: 10, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 125, column: 3)
!5310 = !DILocation(line: 125, column: 8, scope: !5309)
!5311 = !DILocation(line: 125, column: 15, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 125, column: 3)
!5313 = !DILocation(line: 125, column: 3, scope: !5309)
!5314 = !DILocation(line: 127, column: 11, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 127, column: 11)
!5316 = distinct !DILexicalBlock(scope: !5312, file: !3, line: 126, column: 5)
!5317 = !DILocation(line: 127, column: 29, scope: !5315)
!5318 = !DILocation(line: 127, column: 16, scope: !5315)
!5319 = !DILocation(line: 127, column: 11, scope: !5316)
!5320 = !DILocation(line: 129, column: 4, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 128, column: 2)
!5322 = !DILocation(line: 129, column: 19, scope: !5321)
!5323 = !DILocation(line: 129, column: 22, scope: !5321)
!5324 = !DILocation(line: 129, column: 40, scope: !5321)
!5325 = !DILocation(line: 130, column: 10, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 130, column: 8)
!5327 = !DILocation(line: 130, column: 8, scope: !5321)
!5328 = !DILocation(line: 131, column: 6, scope: !5326)
!5329 = !DILocation(line: 132, column: 11, scope: !5321)
!5330 = !DILocation(line: 133, column: 4, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 133, column: 4)
!5332 = !DILocation(line: 133, column: 4, scope: !5333)
!5333 = distinct !DILexicalBlock(scope: !5331, file: !3, line: 133, column: 4)
!5334 = !DILocation(line: 134, column: 10, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5333, file: !3, line: 134, column: 10)
!5336 = !DILocation(line: 134, column: 13, scope: !5335)
!5337 = !DILocation(line: 134, column: 20, scope: !5335)
!5338 = !DILocation(line: 134, column: 26, scope: !5335)
!5339 = !DILocation(line: 134, column: 17, scope: !5335)
!5340 = !DILocation(line: 135, column: 3, scope: !5335)
!5341 = !DILocation(line: 135, column: 7, scope: !5335)
!5342 = !DILocation(line: 135, column: 10, scope: !5335)
!5343 = !DILocation(line: 135, column: 16, scope: !5335)
!5344 = !DILocation(line: 135, column: 33, scope: !5335)
!5345 = !DILocation(line: 135, column: 36, scope: !5335)
!5346 = !DILocation(line: 134, column: 10, scope: !5333)
!5347 = !DILocation(line: 137, column: 10, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5335, file: !3, line: 136, column: 8)
!5349 = !DILocation(line: 138, column: 3, scope: !5348)
!5350 = distinct !{!5350, !5330, !5351}
!5351 = !DILocation(line: 139, column: 8, scope: !5331)
!5352 = !DILocation(line: 140, column: 8, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 140, column: 8)
!5354 = !DILocation(line: 140, column: 8, scope: !5321)
!5355 = !DILocation(line: 141, column: 6, scope: !5353)
!5356 = !DILocation(line: 142, column: 33, scope: !5321)
!5357 = !DILocation(line: 142, column: 12, scope: !5321)
!5358 = !DILocation(line: 142, column: 10, scope: !5321)
!5359 = !DILocation(line: 143, column: 11, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 143, column: 4)
!5361 = !DILocation(line: 143, column: 9, scope: !5360)
!5362 = !DILocation(line: 143, column: 16, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5360, file: !3, line: 143, column: 4)
!5364 = !DILocation(line: 143, column: 4, scope: !5360)
!5365 = !DILocation(line: 144, column: 11, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5363, file: !3, line: 144, column: 10)
!5367 = !DILocation(line: 144, column: 14, scope: !5366)
!5368 = !DILocation(line: 144, column: 20, scope: !5366)
!5369 = !DILocation(line: 144, column: 37, scope: !5366)
!5370 = !DILocation(line: 144, column: 40, scope: !5366)
!5371 = !DILocation(line: 144, column: 10, scope: !5363)
!5372 = !DILocation(line: 146, column: 10, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5366, file: !3, line: 145, column: 8)
!5374 = !DILocation(line: 147, column: 3, scope: !5373)
!5375 = !DILocation(line: 143, column: 50, scope: !5363)
!5376 = !DILocation(line: 143, column: 4, scope: !5363)
!5377 = distinct !{!5377, !5364, !5378}
!5378 = !DILocation(line: 148, column: 8, scope: !5360)
!5379 = !DILocation(line: 149, column: 4, scope: !5321)
!5380 = !DILocation(line: 150, column: 8, scope: !5381)
!5381 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 150, column: 8)
!5382 = !DILocation(line: 150, column: 8, scope: !5321)
!5383 = !DILocation(line: 151, column: 6, scope: !5381)
!5384 = !DILocation(line: 152, column: 2, scope: !5321)
!5385 = !DILocation(line: 154, column: 61, scope: !5316)
!5386 = !DILocation(line: 154, column: 59, scope: !5316)
!5387 = !DILocation(line: 154, column: 22, scope: !5316)
!5388 = !DILocation(line: 154, column: 4, scope: !5316)
!5389 = !DILocation(line: 153, column: 7, scope: !5316)
!5390 = !DILocation(line: 153, column: 22, scope: !5316)
!5391 = !DILocation(line: 153, column: 25, scope: !5316)
!5392 = !DILocation(line: 154, column: 2, scope: !5316)
!5393 = !DILocation(line: 155, column: 15, scope: !5316)
!5394 = !DILocation(line: 155, column: 30, scope: !5316)
!5395 = !DILocation(line: 155, column: 33, scope: !5316)
!5396 = !DILocation(line: 155, column: 7, scope: !5316)
!5397 = !DILocation(line: 156, column: 33, scope: !5316)
!5398 = !DILocation(line: 156, column: 31, scope: !5316)
!5399 = !DILocation(line: 157, column: 15, scope: !5316)
!5400 = !DILocation(line: 157, column: 30, scope: !5316)
!5401 = !DILocation(line: 157, column: 33, scope: !5316)
!5402 = !DILocation(line: 157, column: 7, scope: !5316)
!5403 = !DILocation(line: 159, column: 40, scope: !5316)
!5404 = !DILocation(line: 159, column: 7, scope: !5316)
!5405 = !DILocation(line: 159, column: 22, scope: !5316)
!5406 = !DILocation(line: 159, column: 25, scope: !5316)
!5407 = !DILocation(line: 159, column: 38, scope: !5316)
!5408 = !DILocation(line: 160, column: 43, scope: !5316)
!5409 = !DILocation(line: 160, column: 7, scope: !5316)
!5410 = !DILocation(line: 160, column: 22, scope: !5316)
!5411 = !DILocation(line: 160, column: 25, scope: !5316)
!5412 = !DILocation(line: 160, column: 41, scope: !5316)
!5413 = !DILocation(line: 161, column: 43, scope: !5316)
!5414 = !DILocation(line: 161, column: 7, scope: !5316)
!5415 = !DILocation(line: 161, column: 22, scope: !5316)
!5416 = !DILocation(line: 161, column: 25, scope: !5316)
!5417 = !DILocation(line: 161, column: 41, scope: !5316)
!5418 = !DILocation(line: 162, column: 40, scope: !5316)
!5419 = !DILocation(line: 162, column: 7, scope: !5316)
!5420 = !DILocation(line: 162, column: 22, scope: !5316)
!5421 = !DILocation(line: 162, column: 25, scope: !5316)
!5422 = !DILocation(line: 162, column: 38, scope: !5316)
!5423 = !DILocation(line: 163, column: 5, scope: !5316)
!5424 = !DILocation(line: 125, column: 65, scope: !5312)
!5425 = !DILocation(line: 125, column: 3, scope: !5312)
!5426 = distinct !{!5426, !5313, !5427}
!5427 = !DILocation(line: 163, column: 5, scope: !5309)
!5428 = !DILocation(line: 164, column: 1, scope: !5224)
!5429 = distinct !DISubprogram(name: "form_loop_tree", scope: !3, file: !3, line: 296, type: !3585, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5430 = !DILocalVariable(name: "i", scope: !5429, file: !3, line: 298, type: !7)
!5431 = !DILocation(line: 298, column: 16, scope: !5429)
!5432 = !DILocalVariable(name: "bb", scope: !5429, file: !3, line: 299, type: !1087)
!5433 = !DILocation(line: 299, column: 15, scope: !5429)
!5434 = !DILocalVariable(name: "parent", scope: !5429, file: !3, line: 300, type: !1129)
!5435 = !DILocation(line: 300, column: 16, scope: !5429)
!5436 = !DILocalVariable(name: "bb_node", scope: !5429, file: !3, line: 301, type: !1844)
!5437 = !DILocation(line: 301, column: 24, scope: !5429)
!5438 = !DILocalVariable(name: "loop_node", scope: !5429, file: !3, line: 301, type: !1844)
!5439 = !DILocation(line: 301, column: 33, scope: !5429)
!5440 = !DILocalVariable(name: "loop", scope: !5429, file: !3, line: 302, type: !1156)
!5441 = !DILocation(line: 302, column: 10, scope: !5429)
!5442 = !DILocation(line: 307, column: 10, scope: !5443)
!5443 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 307, column: 3)
!5444 = !DILocation(line: 307, column: 8, scope: !5443)
!5445 = !DILocation(line: 307, column: 15, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 307, column: 3)
!5447 = !DILocation(line: 307, column: 3, scope: !5443)
!5448 = !DILocation(line: 308, column: 10, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5446, file: !3, line: 308, column: 10)
!5450 = !DILocation(line: 308, column: 25, scope: !5449)
!5451 = !DILocation(line: 308, column: 28, scope: !5449)
!5452 = !DILocation(line: 308, column: 46, scope: !5449)
!5453 = !DILocation(line: 308, column: 10, scope: !5446)
!5454 = !DILocation(line: 310, column: 3, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 309, column: 8)
!5456 = !DILocation(line: 310, column: 18, scope: !5455)
!5457 = !DILocation(line: 310, column: 21, scope: !5455)
!5458 = !DILocation(line: 310, column: 30, scope: !5455)
!5459 = !DILocation(line: 311, column: 3, scope: !5455)
!5460 = !DILocation(line: 311, column: 18, scope: !5455)
!5461 = !DILocation(line: 311, column: 21, scope: !5455)
!5462 = !DILocation(line: 311, column: 30, scope: !5455)
!5463 = !DILocation(line: 312, column: 8, scope: !5455)
!5464 = !DILocation(line: 308, column: 49, scope: !5449)
!5465 = !DILocation(line: 307, column: 65, scope: !5446)
!5466 = !DILocation(line: 307, column: 3, scope: !5446)
!5467 = distinct !{!5467, !5447, !5468}
!5468 = !DILocation(line: 312, column: 8, scope: !5443)
!5469 = !DILocation(line: 313, column: 3, scope: !5470)
!5470 = distinct !DILexicalBlock(scope: !5429, file: !3, line: 313, column: 3)
!5471 = !DILocation(line: 313, column: 3, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5470, file: !3, line: 313, column: 3)
!5473 = !DILocation(line: 315, column: 18, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5472, file: !3, line: 314, column: 5)
!5475 = !DILocation(line: 315, column: 31, scope: !5474)
!5476 = !DILocation(line: 315, column: 35, scope: !5474)
!5477 = !DILocation(line: 315, column: 15, scope: !5474)
!5478 = !DILocation(line: 316, column: 21, scope: !5474)
!5479 = !DILocation(line: 316, column: 7, scope: !5474)
!5480 = !DILocation(line: 316, column: 16, scope: !5474)
!5481 = !DILocation(line: 316, column: 19, scope: !5474)
!5482 = !DILocation(line: 317, column: 7, scope: !5474)
!5483 = !DILocation(line: 317, column: 16, scope: !5474)
!5484 = !DILocation(line: 317, column: 21, scope: !5474)
!5485 = !DILocation(line: 318, column: 7, scope: !5474)
!5486 = !DILocation(line: 318, column: 16, scope: !5474)
!5487 = !DILocation(line: 318, column: 25, scope: !5474)
!5488 = !DILocation(line: 319, column: 7, scope: !5474)
!5489 = !DILocation(line: 319, column: 16, scope: !5474)
!5490 = !DILocation(line: 319, column: 25, scope: !5474)
!5491 = !DILocation(line: 320, column: 7, scope: !5474)
!5492 = !DILocation(line: 320, column: 16, scope: !5474)
!5493 = !DILocation(line: 320, column: 29, scope: !5474)
!5494 = !DILocation(line: 321, column: 7, scope: !5474)
!5495 = !DILocation(line: 321, column: 16, scope: !5474)
!5496 = !DILocation(line: 321, column: 21, scope: !5474)
!5497 = !DILocation(line: 322, column: 21, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5474, file: !3, line: 322, column: 7)
!5499 = !DILocation(line: 322, column: 25, scope: !5498)
!5500 = !DILocation(line: 322, column: 19, scope: !5498)
!5501 = !DILocation(line: 322, column: 12, scope: !5498)
!5502 = !DILocation(line: 323, column: 5, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5498, file: !3, line: 322, column: 7)
!5504 = !DILocation(line: 323, column: 12, scope: !5503)
!5505 = !DILocation(line: 322, column: 7, scope: !5498)
!5506 = !DILocation(line: 325, column: 6, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 325, column: 6)
!5508 = !DILocation(line: 325, column: 21, scope: !5507)
!5509 = !DILocation(line: 325, column: 29, scope: !5507)
!5510 = !DILocation(line: 325, column: 34, scope: !5507)
!5511 = !DILocation(line: 325, column: 52, scope: !5507)
!5512 = !DILocation(line: 325, column: 6, scope: !5503)
!5513 = !DILocation(line: 326, column: 4, scope: !5507)
!5514 = !DILocation(line: 325, column: 55, scope: !5507)
!5515 = !DILocation(line: 324, column: 26, scope: !5503)
!5516 = !DILocation(line: 324, column: 14, scope: !5503)
!5517 = !DILocation(line: 324, column: 12, scope: !5503)
!5518 = !DILocation(line: 322, column: 7, scope: !5503)
!5519 = distinct !{!5519, !5505, !5520}
!5520 = !DILocation(line: 326, column: 4, scope: !5498)
!5521 = !DILocation(line: 327, column: 25, scope: !5474)
!5522 = !DILocation(line: 327, column: 7, scope: !5474)
!5523 = !DILocation(line: 328, column: 20, scope: !5474)
!5524 = !DILocation(line: 328, column: 35, scope: !5474)
!5525 = !DILocation(line: 328, column: 43, scope: !5474)
!5526 = !DILocation(line: 328, column: 17, scope: !5474)
!5527 = !DILocation(line: 329, column: 23, scope: !5474)
!5528 = !DILocation(line: 329, column: 34, scope: !5474)
!5529 = !DILocation(line: 329, column: 7, scope: !5474)
!5530 = !DILocation(line: 329, column: 16, scope: !5474)
!5531 = !DILocation(line: 329, column: 21, scope: !5474)
!5532 = !DILocation(line: 330, column: 25, scope: !5474)
!5533 = !DILocation(line: 330, column: 7, scope: !5474)
!5534 = !DILocation(line: 330, column: 16, scope: !5474)
!5535 = !DILocation(line: 330, column: 23, scope: !5474)
!5536 = !DILocation(line: 331, column: 29, scope: !5474)
!5537 = !DILocation(line: 331, column: 7, scope: !5474)
!5538 = !DILocation(line: 331, column: 18, scope: !5474)
!5539 = !DILocation(line: 331, column: 27, scope: !5474)
!5540 = !DILocation(line: 332, column: 5, scope: !5474)
!5541 = distinct !{!5541, !5469, !5542}
!5542 = !DILocation(line: 332, column: 5, scope: !5470)
!5543 = !DILocation(line: 333, column: 24, scope: !5429)
!5544 = !DILocation(line: 333, column: 22, scope: !5429)
!5545 = !DILocation(line: 334, column: 49, scope: !5429)
!5546 = !DILocation(line: 334, column: 26, scope: !5429)
!5547 = !DILocation(line: 334, column: 24, scope: !5429)
!5548 = !DILocation(line: 336, column: 1, scope: !5429)
!5549 = distinct !DISubprogram(name: "create_allocnos", scope: !3, file: !3, line: 1633, type: !3585, scopeLine: 1634, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5550 = !DILocation(line: 1637, column: 33, scope: !5549)
!5551 = !DILocation(line: 1637, column: 3, scope: !5549)
!5552 = !DILocation(line: 1639, column: 7, scope: !5553)
!5553 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1639, column: 7)
!5554 = !DILocation(line: 1639, column: 7, scope: !5549)
!5555 = !DILocation(line: 1640, column: 36, scope: !5553)
!5556 = !DILocation(line: 1640, column: 5, scope: !5553)
!5557 = !DILocation(line: 1642, column: 1, scope: !5549)
!5558 = distinct !DISubprogram(name: "remove_unnecessary_regions", scope: !3, file: !3, line: 2086, type: !5225, scopeLine: 2087, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5559 = !DILocalVariable(name: "all_p", arg: 1, scope: !5558, file: !3, line: 2086, type: !942)
!5560 = !DILocation(line: 2086, column: 34, scope: !5558)
!5561 = !DILocation(line: 2088, column: 7, scope: !5562)
!5562 = distinct !DILexicalBlock(scope: !5558, file: !3, line: 2088, column: 7)
!5563 = !DILocation(line: 2088, column: 7, scope: !5558)
!5564 = !DILocation(line: 2089, column: 5, scope: !5562)
!5565 = !DILocation(line: 2091, column: 5, scope: !5562)
!5566 = !DILocation(line: 2093, column: 7, scope: !5558)
!5567 = !DILocation(line: 2093, column: 5, scope: !5558)
!5568 = !DILocation(line: 2096, column: 7, scope: !5558)
!5569 = !DILocation(line: 2096, column: 5, scope: !5558)
!5570 = !DILocation(line: 2098, column: 48, scope: !5558)
!5571 = !DILocation(line: 2098, column: 3, scope: !5558)
!5572 = !DILocation(line: 2099, column: 3, scope: !5558)
!5573 = !DILocation(line: 2100, column: 7, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5558, file: !3, line: 2100, column: 7)
!5575 = !DILocation(line: 2100, column: 7, scope: !5558)
!5576 = !DILocation(line: 2101, column: 5, scope: !5574)
!5577 = !DILocation(line: 2103, column: 5, scope: !5574)
!5578 = !DILocation(line: 2104, column: 3, scope: !5558)
!5579 = !DILocation(line: 2104, column: 10, scope: !5558)
!5580 = !DILocation(line: 2104, column: 62, scope: !5558)
!5581 = !DILocation(line: 2105, column: 28, scope: !5558)
!5582 = !DILocation(line: 2105, column: 5, scope: !5558)
!5583 = distinct !{!5583, !5578, !5584}
!5584 = !DILocation(line: 2105, column: 76, scope: !5558)
!5585 = !DILocation(line: 2106, column: 3, scope: !5558)
!5586 = !DILocation(line: 2107, column: 1, scope: !5558)
!5587 = distinct !DISubprogram(name: "update_bad_spill_attribute", scope: !3, file: !3, line: 2125, type: !3585, scopeLine: 2126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5588 = !DILocalVariable(name: "i", scope: !5587, file: !3, line: 2127, type: !703)
!5589 = !DILocation(line: 2127, column: 7, scope: !5587)
!5590 = !DILocalVariable(name: "a", scope: !5587, file: !3, line: 2128, type: !697)
!5591 = !DILocation(line: 2128, column: 17, scope: !5587)
!5592 = !DILocalVariable(name: "ai", scope: !5587, file: !3, line: 2129, type: !3853)
!5593 = !DILocation(line: 2129, column: 24, scope: !5587)
!5594 = !DILocalVariable(name: "r", scope: !5587, file: !3, line: 2130, type: !1898)
!5595 = !DILocation(line: 2130, column: 24, scope: !5587)
!5596 = !DILocalVariable(name: "cover_class", scope: !5587, file: !3, line: 2131, type: !390)
!5597 = !DILocation(line: 2131, column: 18, scope: !5587)
!5598 = !DILocalVariable(name: "dead_points", scope: !5587, file: !3, line: 2132, type: !5599)
!5599 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5600, size: 6912, elements: !1862)
!5600 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !767, line: 84, baseType: !766)
!5601 = !DILocation(line: 2132, column: 15, scope: !5587)
!5602 = !DILocation(line: 2134, column: 10, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 2134, column: 3)
!5604 = !DILocation(line: 2134, column: 8, scope: !5603)
!5605 = !DILocation(line: 2134, column: 15, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5603, file: !3, line: 2134, column: 3)
!5607 = !DILocation(line: 2134, column: 19, scope: !5606)
!5608 = !DILocation(line: 2134, column: 17, scope: !5606)
!5609 = !DILocation(line: 2134, column: 3, scope: !5603)
!5610 = !DILocation(line: 2136, column: 41, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 2135, column: 5)
!5612 = !DILocation(line: 2136, column: 21, scope: !5611)
!5613 = !DILocation(line: 2136, column: 19, scope: !5611)
!5614 = !DILocation(line: 2137, column: 7, scope: !5611)
!5615 = !DILocation(line: 2138, column: 5, scope: !5611)
!5616 = !DILocation(line: 2134, column: 46, scope: !5606)
!5617 = !DILocation(line: 2134, column: 3, scope: !5606)
!5618 = distinct !{!5618, !5609, !5619}
!5619 = !DILocation(line: 2138, column: 5, scope: !5603)
!5620 = !DILocation(line: 2139, column: 3, scope: !5621)
!5621 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 2139, column: 3)
!5622 = !DILocation(line: 2139, column: 3, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 2139, column: 3)
!5624 = !DILocation(line: 2141, column: 21, scope: !5625)
!5625 = distinct !DILexicalBlock(scope: !5623, file: !3, line: 2140, column: 5)
!5626 = !DILocation(line: 2141, column: 19, scope: !5625)
!5627 = !DILocation(line: 2142, column: 11, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 2142, column: 11)
!5629 = !DILocation(line: 2142, column: 23, scope: !5628)
!5630 = !DILocation(line: 2142, column: 11, scope: !5625)
!5631 = !DILocation(line: 2143, column: 2, scope: !5628)
!5632 = distinct !{!5632, !5620, !5633}
!5633 = !DILocation(line: 2146, column: 5, scope: !5621)
!5634 = !DILocation(line: 2144, column: 16, scope: !5635)
!5635 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 2144, column: 7)
!5636 = !DILocation(line: 2144, column: 14, scope: !5635)
!5637 = !DILocation(line: 2144, column: 12, scope: !5635)
!5638 = !DILocation(line: 2144, column: 41, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5635, file: !3, line: 2144, column: 7)
!5640 = !DILocation(line: 2144, column: 43, scope: !5639)
!5641 = !DILocation(line: 2144, column: 7, scope: !5635)
!5642 = !DILocation(line: 2145, column: 31, scope: !5639)
!5643 = !DILocation(line: 2145, column: 19, scope: !5639)
!5644 = !DILocation(line: 2145, column: 45, scope: !5639)
!5645 = !DILocation(line: 2145, column: 48, scope: !5639)
!5646 = !DILocation(line: 2145, column: 2, scope: !5639)
!5647 = !DILocation(line: 2144, column: 56, scope: !5639)
!5648 = !DILocation(line: 2144, column: 59, scope: !5639)
!5649 = !DILocation(line: 2144, column: 54, scope: !5639)
!5650 = !DILocation(line: 2144, column: 7, scope: !5639)
!5651 = distinct !{!5651, !5641, !5652}
!5652 = !DILocation(line: 2145, column: 54, scope: !5635)
!5653 = !DILocation(line: 2147, column: 3, scope: !5654)
!5654 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 2147, column: 3)
!5655 = !DILocation(line: 2147, column: 3, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5654, file: !3, line: 2147, column: 3)
!5657 = !DILocation(line: 2149, column: 21, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 2148, column: 5)
!5659 = !DILocation(line: 2149, column: 19, scope: !5658)
!5660 = !DILocation(line: 2150, column: 11, scope: !5661)
!5661 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 2150, column: 11)
!5662 = !DILocation(line: 2150, column: 23, scope: !5661)
!5663 = !DILocation(line: 2150, column: 11, scope: !5658)
!5664 = !DILocation(line: 2151, column: 2, scope: !5661)
!5665 = distinct !{!5665, !5653, !5666}
!5666 = !DILocation(line: 2164, column: 5, scope: !5654)
!5667 = !DILocation(line: 2152, column: 13, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 2152, column: 11)
!5669 = !DILocation(line: 2152, column: 11, scope: !5658)
!5670 = !DILocation(line: 2153, column: 2, scope: !5668)
!5671 = !DILocation(line: 2154, column: 16, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 2154, column: 7)
!5673 = !DILocation(line: 2154, column: 14, scope: !5672)
!5674 = !DILocation(line: 2154, column: 12, scope: !5672)
!5675 = !DILocation(line: 2154, column: 41, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 2154, column: 7)
!5677 = !DILocation(line: 2154, column: 43, scope: !5676)
!5678 = !DILocation(line: 2154, column: 7, scope: !5672)
!5679 = !DILocation(line: 2156, column: 13, scope: !5680)
!5680 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 2156, column: 4)
!5681 = distinct !DILexicalBlock(scope: !5676, file: !3, line: 2155, column: 2)
!5682 = !DILocation(line: 2156, column: 16, scope: !5680)
!5683 = !DILocation(line: 2156, column: 22, scope: !5680)
!5684 = !DILocation(line: 2156, column: 11, scope: !5680)
!5685 = !DILocation(line: 2156, column: 9, scope: !5680)
!5686 = !DILocation(line: 2156, column: 27, scope: !5687)
!5687 = distinct !DILexicalBlock(scope: !5680, file: !3, line: 2156, column: 4)
!5688 = !DILocation(line: 2156, column: 31, scope: !5687)
!5689 = !DILocation(line: 2156, column: 34, scope: !5687)
!5690 = !DILocation(line: 2156, column: 29, scope: !5687)
!5691 = !DILocation(line: 2156, column: 4, scope: !5680)
!5692 = !DILocation(line: 2157, column: 37, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5687, file: !3, line: 2157, column: 10)
!5694 = !DILocation(line: 2157, column: 25, scope: !5693)
!5695 = !DILocation(line: 2157, column: 51, scope: !5693)
!5696 = !DILocation(line: 2157, column: 10, scope: !5693)
!5697 = !DILocation(line: 2157, column: 10, scope: !5687)
!5698 = !DILocation(line: 2158, column: 8, scope: !5693)
!5699 = !DILocation(line: 2157, column: 52, scope: !5693)
!5700 = !DILocation(line: 2156, column: 43, scope: !5687)
!5701 = !DILocation(line: 2156, column: 4, scope: !5687)
!5702 = distinct !{!5702, !5691, !5703}
!5703 = !DILocation(line: 2158, column: 8, scope: !5680)
!5704 = !DILocation(line: 2159, column: 8, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 2159, column: 8)
!5706 = !DILocation(line: 2159, column: 12, scope: !5705)
!5707 = !DILocation(line: 2159, column: 15, scope: !5705)
!5708 = !DILocation(line: 2159, column: 10, scope: !5705)
!5709 = !DILocation(line: 2159, column: 8, scope: !5681)
!5710 = !DILocation(line: 2160, column: 6, scope: !5705)
!5711 = !DILocation(line: 2161, column: 2, scope: !5681)
!5712 = !DILocation(line: 2154, column: 56, scope: !5676)
!5713 = !DILocation(line: 2154, column: 59, scope: !5676)
!5714 = !DILocation(line: 2154, column: 54, scope: !5676)
!5715 = !DILocation(line: 2154, column: 7, scope: !5676)
!5716 = distinct !{!5716, !5678, !5717}
!5717 = !DILocation(line: 2161, column: 2, scope: !5672)
!5718 = !DILocation(line: 2162, column: 11, scope: !5719)
!5719 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 2162, column: 11)
!5720 = !DILocation(line: 2162, column: 13, scope: !5719)
!5721 = !DILocation(line: 2162, column: 11, scope: !5658)
!5722 = !DILocation(line: 2163, column: 2, scope: !5719)
!5723 = !DILocation(line: 2163, column: 26, scope: !5719)
!5724 = !DILocation(line: 2165, column: 10, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 2165, column: 3)
!5726 = !DILocation(line: 2165, column: 8, scope: !5725)
!5727 = !DILocation(line: 2165, column: 15, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5725, file: !3, line: 2165, column: 3)
!5729 = !DILocation(line: 2165, column: 19, scope: !5728)
!5730 = !DILocation(line: 2165, column: 17, scope: !5728)
!5731 = !DILocation(line: 2165, column: 3, scope: !5725)
!5732 = !DILocation(line: 2167, column: 41, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 2166, column: 5)
!5734 = !DILocation(line: 2167, column: 21, scope: !5733)
!5735 = !DILocation(line: 2167, column: 19, scope: !5733)
!5736 = !DILocation(line: 2168, column: 34, scope: !5733)
!5737 = !DILocation(line: 2168, column: 22, scope: !5733)
!5738 = !DILocation(line: 2168, column: 7, scope: !5733)
!5739 = !DILocation(line: 2169, column: 5, scope: !5733)
!5740 = !DILocation(line: 2165, column: 46, scope: !5728)
!5741 = !DILocation(line: 2165, column: 3, scope: !5728)
!5742 = distinct !{!5742, !5731, !5743}
!5743 = !DILocation(line: 2169, column: 5, scope: !5725)
!5744 = !DILocation(line: 2170, column: 1, scope: !5587)
!5745 = distinct !DISubprogram(name: "more_one_region_p", scope: !3, file: !3, line: 169, type: !5746, scopeLine: 170, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5746 = !DISubroutineType(types: !5747)
!5747 = !{!942}
!5748 = !DILocalVariable(name: "i", scope: !5745, file: !3, line: 171, type: !7)
!5749 = !DILocation(line: 171, column: 16, scope: !5745)
!5750 = !DILocalVariable(name: "loop", scope: !5745, file: !3, line: 172, type: !1156)
!5751 = !DILocation(line: 172, column: 10, scope: !5745)
!5752 = !DILocation(line: 174, column: 10, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5745, file: !3, line: 174, column: 3)
!5754 = !DILocation(line: 174, column: 8, scope: !5753)
!5755 = !DILocation(line: 174, column: 15, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5753, file: !3, line: 174, column: 3)
!5757 = !DILocation(line: 174, column: 3, scope: !5753)
!5758 = !DILocation(line: 175, column: 9, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5756, file: !3, line: 175, column: 9)
!5760 = !DILocation(line: 175, column: 24, scope: !5759)
!5761 = !DILocation(line: 175, column: 27, scope: !5759)
!5762 = !DILocation(line: 175, column: 45, scope: !5759)
!5763 = !DILocation(line: 176, column: 2, scope: !5759)
!5764 = !DILocation(line: 176, column: 5, scope: !5759)
!5765 = !DILocation(line: 176, column: 28, scope: !5759)
!5766 = !DILocation(line: 176, column: 43, scope: !5759)
!5767 = !DILocation(line: 176, column: 24, scope: !5759)
!5768 = !DILocation(line: 175, column: 9, scope: !5756)
!5769 = !DILocation(line: 177, column: 7, scope: !5759)
!5770 = !DILocation(line: 176, column: 44, scope: !5759)
!5771 = !DILocation(line: 174, column: 65, scope: !5756)
!5772 = !DILocation(line: 174, column: 3, scope: !5756)
!5773 = distinct !{!5773, !5757, !5774}
!5774 = !DILocation(line: 177, column: 14, scope: !5753)
!5775 = !DILocation(line: 178, column: 3, scope: !5745)
!5776 = !DILocation(line: 179, column: 1, scope: !5745)
!5777 = distinct !DISubprogram(name: "propagate_allocno_info", scope: !3, file: !3, line: 1579, type: !3585, scopeLine: 1580, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5778 = !DILocalVariable(name: "i", scope: !5777, file: !3, line: 1581, type: !703)
!5779 = !DILocation(line: 1581, column: 7, scope: !5777)
!5780 = !DILocalVariable(name: "a", scope: !5777, file: !3, line: 1582, type: !697)
!5781 = !DILocation(line: 1582, column: 17, scope: !5777)
!5782 = !DILocalVariable(name: "parent_a", scope: !5777, file: !3, line: 1582, type: !697)
!5783 = !DILocation(line: 1582, column: 20, scope: !5777)
!5784 = !DILocalVariable(name: "parent", scope: !5777, file: !3, line: 1583, type: !1844)
!5785 = !DILocation(line: 1583, column: 24, scope: !5777)
!5786 = !DILocalVariable(name: "cover_class", scope: !5777, file: !3, line: 1584, type: !390)
!5787 = !DILocation(line: 1584, column: 18, scope: !5777)
!5788 = !DILocation(line: 1586, column: 7, scope: !5789)
!5789 = distinct !DILexicalBlock(scope: !5777, file: !3, line: 1586, column: 7)
!5790 = !DILocation(line: 1586, column: 23, scope: !5789)
!5791 = !DILocation(line: 1587, column: 7, scope: !5789)
!5792 = !DILocation(line: 1587, column: 10, scope: !5789)
!5793 = !DILocation(line: 1587, column: 26, scope: !5789)
!5794 = !DILocation(line: 1586, column: 7, scope: !5777)
!5795 = !DILocation(line: 1588, column: 5, scope: !5789)
!5796 = !DILocation(line: 1589, column: 12, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5777, file: !3, line: 1589, column: 3)
!5798 = !DILocation(line: 1589, column: 27, scope: !5797)
!5799 = !DILocation(line: 1589, column: 10, scope: !5797)
!5800 = !DILocation(line: 1589, column: 8, scope: !5797)
!5801 = !DILocation(line: 1589, column: 32, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !5797, file: !3, line: 1589, column: 3)
!5803 = !DILocation(line: 1589, column: 34, scope: !5802)
!5804 = !DILocation(line: 1589, column: 3, scope: !5797)
!5805 = !DILocation(line: 1590, column: 14, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 1590, column: 5)
!5807 = !DILocation(line: 1590, column: 36, scope: !5806)
!5808 = !DILocation(line: 1590, column: 12, scope: !5806)
!5809 = !DILocation(line: 1590, column: 10, scope: !5806)
!5810 = !DILocation(line: 1591, column: 3, scope: !5811)
!5811 = distinct !DILexicalBlock(scope: !5806, file: !3, line: 1590, column: 5)
!5812 = !DILocation(line: 1591, column: 5, scope: !5811)
!5813 = !DILocation(line: 1590, column: 5, scope: !5806)
!5814 = !DILocation(line: 1593, column: 21, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5811, file: !3, line: 1593, column: 11)
!5816 = !DILocation(line: 1593, column: 49, scope: !5815)
!5817 = !DILocation(line: 1593, column: 19, scope: !5815)
!5818 = !DILocation(line: 1593, column: 57, scope: !5815)
!5819 = !DILocation(line: 1594, column: 4, scope: !5815)
!5820 = !DILocation(line: 1594, column: 19, scope: !5815)
!5821 = !DILocation(line: 1594, column: 27, scope: !5815)
!5822 = !DILocation(line: 1594, column: 45, scope: !5815)
!5823 = !DILocation(line: 1594, column: 17, scope: !5815)
!5824 = !DILocation(line: 1594, column: 49, scope: !5815)
!5825 = !DILocation(line: 1597, column: 4, scope: !5815)
!5826 = !DILocation(line: 1597, column: 21, scope: !5815)
!5827 = !DILocation(line: 1597, column: 49, scope: !5815)
!5828 = !DILocation(line: 1598, column: 7, scope: !5815)
!5829 = !DILocation(line: 1597, column: 7, scope: !5815)
!5830 = !DILocation(line: 1593, column: 11, scope: !5811)
!5831 = !DILocation(line: 1600, column: 10, scope: !5832)
!5832 = distinct !DILexicalBlock(scope: !5833, file: !3, line: 1600, column: 8)
!5833 = distinct !DILexicalBlock(scope: !5815, file: !3, line: 1599, column: 2)
!5834 = !DILocation(line: 1600, column: 8, scope: !5833)
!5835 = !DILocation(line: 1601, column: 6, scope: !5832)
!5836 = !DILocation(line: 1601, column: 37, scope: !5832)
!5837 = !DILocation(line: 1602, column: 32, scope: !5833)
!5838 = !DILocation(line: 1602, column: 4, scope: !5833)
!5839 = !DILocation(line: 1602, column: 29, scope: !5833)
!5840 = !DILocation(line: 1603, column: 31, scope: !5833)
!5841 = !DILocation(line: 1603, column: 4, scope: !5833)
!5842 = !DILocation(line: 1603, column: 28, scope: !5833)
!5843 = !DILocation(line: 1604, column: 36, scope: !5833)
!5844 = !DILocation(line: 1604, column: 4, scope: !5833)
!5845 = !DILocation(line: 1604, column: 33, scope: !5833)
!5846 = !DILocation(line: 1606, column: 8, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5833, file: !3, line: 1606, column: 8)
!5848 = !DILocation(line: 1606, column: 8, scope: !5833)
!5849 = !DILocation(line: 1607, column: 6, scope: !5847)
!5850 = !DILocation(line: 1607, column: 46, scope: !5847)
!5851 = !DILocation(line: 1609, column: 4, scope: !5833)
!5852 = !DILocation(line: 1612, column: 9, scope: !5833)
!5853 = !DILocation(line: 1611, column: 4, scope: !5833)
!5854 = !DILocation(line: 1612, column: 6, scope: !5833)
!5855 = !DILocation(line: 1614, column: 9, scope: !5833)
!5856 = !DILocation(line: 1613, column: 4, scope: !5833)
!5857 = !DILocation(line: 1614, column: 6, scope: !5833)
!5858 = !DILocation(line: 1615, column: 18, scope: !5833)
!5859 = !DILocation(line: 1615, column: 16, scope: !5833)
!5860 = !DILocation(line: 1618, column: 8, scope: !5833)
!5861 = !DILocation(line: 1618, column: 43, scope: !5833)
!5862 = !DILocation(line: 1619, column: 7, scope: !5833)
!5863 = !DILocation(line: 1617, column: 4, scope: !5833)
!5864 = !DILocation(line: 1621, column: 8, scope: !5833)
!5865 = !DILocation(line: 1622, column: 7, scope: !5833)
!5866 = !DILocation(line: 1623, column: 7, scope: !5833)
!5867 = !DILocation(line: 1620, column: 4, scope: !5833)
!5868 = !DILocation(line: 1625, column: 9, scope: !5833)
!5869 = !DILocation(line: 1624, column: 4, scope: !5833)
!5870 = !DILocation(line: 1625, column: 6, scope: !5833)
!5871 = !DILocation(line: 1626, column: 38, scope: !5833)
!5872 = !DILocation(line: 1626, column: 4, scope: !5833)
!5873 = !DILocation(line: 1626, column: 35, scope: !5833)
!5874 = !DILocation(line: 1627, column: 2, scope: !5833)
!5875 = !DILocation(line: 1598, column: 22, scope: !5815)
!5876 = !DILocation(line: 1592, column: 7, scope: !5811)
!5877 = !DILocation(line: 1592, column: 5, scope: !5811)
!5878 = !DILocation(line: 1590, column: 5, scope: !5811)
!5879 = distinct !{!5879, !5813, !5880}
!5880 = !DILocation(line: 1627, column: 2, scope: !5806)
!5881 = !DILocation(line: 1589, column: 61, scope: !5802)
!5882 = !DILocation(line: 1589, column: 3, scope: !5802)
!5883 = distinct !{!5883, !5804, !5884}
!5884 = !DILocation(line: 1627, column: 2, scope: !5797)
!5885 = !DILocation(line: 1628, column: 1, scope: !5777)
!5886 = distinct !DISubprogram(name: "create_caps", scope: !3, file: !3, line: 2370, type: !3585, scopeLine: 2371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5887 = !DILocalVariable(name: "a", scope: !5886, file: !3, line: 2372, type: !697)
!5888 = !DILocation(line: 2372, column: 17, scope: !5886)
!5889 = !DILocalVariable(name: "ai", scope: !5886, file: !3, line: 2373, type: !3853)
!5890 = !DILocation(line: 2373, column: 24, scope: !5886)
!5891 = !DILocalVariable(name: "loop_tree_node", scope: !5886, file: !3, line: 2374, type: !1844)
!5892 = !DILocation(line: 2374, column: 24, scope: !5886)
!5893 = !DILocation(line: 2376, column: 3, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5886, file: !3, line: 2376, column: 3)
!5895 = !DILocation(line: 2376, column: 3, scope: !5896)
!5896 = distinct !DILexicalBlock(scope: !5894, file: !3, line: 2376, column: 3)
!5897 = !DILocation(line: 2378, column: 11, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 2378, column: 11)
!5899 = distinct !DILexicalBlock(scope: !5896, file: !3, line: 2377, column: 5)
!5900 = !DILocation(line: 2378, column: 41, scope: !5898)
!5901 = !DILocation(line: 2378, column: 38, scope: !5898)
!5902 = !DILocation(line: 2378, column: 11, scope: !5899)
!5903 = !DILocation(line: 2379, column: 2, scope: !5898)
!5904 = distinct !{!5904, !5893, !5905}
!5905 = !DILocation(line: 2388, column: 5, scope: !5894)
!5906 = !DILocation(line: 2380, column: 11, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 2380, column: 11)
!5908 = !DILocation(line: 2380, column: 34, scope: !5907)
!5909 = !DILocation(line: 2380, column: 11, scope: !5899)
!5910 = !DILocation(line: 2381, column: 22, scope: !5907)
!5911 = !DILocation(line: 2381, column: 2, scope: !5907)
!5912 = !DILocation(line: 2382, column: 16, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 2382, column: 16)
!5914 = !DILocation(line: 2382, column: 32, scope: !5913)
!5915 = !DILocation(line: 2382, column: 16, scope: !5907)
!5916 = !DILocation(line: 2384, column: 21, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5913, file: !3, line: 2383, column: 2)
!5918 = !DILocation(line: 2384, column: 19, scope: !5917)
!5919 = !DILocation(line: 2385, column: 23, scope: !5920)
!5920 = distinct !DILexicalBlock(scope: !5917, file: !3, line: 2385, column: 8)
!5921 = !DILocation(line: 2385, column: 39, scope: !5920)
!5922 = !DILocation(line: 2385, column: 56, scope: !5920)
!5923 = !DILocation(line: 2385, column: 9, scope: !5920)
!5924 = !DILocation(line: 2385, column: 8, scope: !5917)
!5925 = !DILocation(line: 2386, column: 26, scope: !5920)
!5926 = !DILocation(line: 2386, column: 6, scope: !5920)
!5927 = !DILocation(line: 2387, column: 2, scope: !5917)
!5928 = !DILocation(line: 2389, column: 1, scope: !5886)
!5929 = distinct !DISubprogram(name: "setup_min_max_allocno_live_range_point", scope: !3, file: !3, line: 2176, type: !3585, scopeLine: 2177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5930 = !DILocalVariable(name: "i", scope: !5929, file: !3, line: 2178, type: !703)
!5931 = !DILocation(line: 2178, column: 7, scope: !5929)
!5932 = !DILocalVariable(name: "a", scope: !5929, file: !3, line: 2179, type: !697)
!5933 = !DILocation(line: 2179, column: 17, scope: !5929)
!5934 = !DILocalVariable(name: "parent_a", scope: !5929, file: !3, line: 2179, type: !697)
!5935 = !DILocation(line: 2179, column: 20, scope: !5929)
!5936 = !DILocalVariable(name: "cap", scope: !5929, file: !3, line: 2179, type: !697)
!5937 = !DILocation(line: 2179, column: 30, scope: !5929)
!5938 = !DILocalVariable(name: "ai", scope: !5929, file: !3, line: 2180, type: !3853)
!5939 = !DILocation(line: 2180, column: 24, scope: !5929)
!5940 = !DILocalVariable(name: "r", scope: !5929, file: !3, line: 2181, type: !1898)
!5941 = !DILocation(line: 2181, column: 24, scope: !5929)
!5942 = !DILocalVariable(name: "parent", scope: !5929, file: !3, line: 2182, type: !1844)
!5943 = !DILocation(line: 2182, column: 24, scope: !5929)
!5944 = !DILocation(line: 2184, column: 3, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 2184, column: 3)
!5946 = !DILocation(line: 2184, column: 3, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5945, file: !3, line: 2184, column: 3)
!5948 = !DILocation(line: 2186, column: 11, scope: !5949)
!5949 = distinct !DILexicalBlock(scope: !5947, file: !3, line: 2185, column: 5)
!5950 = !DILocation(line: 2186, column: 9, scope: !5949)
!5951 = !DILocation(line: 2187, column: 11, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !5949, file: !3, line: 2187, column: 11)
!5953 = !DILocation(line: 2187, column: 13, scope: !5952)
!5954 = !DILocation(line: 2187, column: 11, scope: !5949)
!5955 = !DILocation(line: 2188, column: 2, scope: !5952)
!5956 = distinct !{!5956, !5944, !5957}
!5957 = !DILocation(line: 2193, column: 5, scope: !5945)
!5958 = !DILocation(line: 2189, column: 25, scope: !5949)
!5959 = !DILocation(line: 2189, column: 28, scope: !5949)
!5960 = !DILocation(line: 2189, column: 7, scope: !5949)
!5961 = !DILocation(line: 2189, column: 23, scope: !5949)
!5962 = !DILocation(line: 2190, column: 7, scope: !5949)
!5963 = !DILocation(line: 2190, column: 14, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5965, file: !3, line: 2190, column: 7)
!5965 = distinct !DILexicalBlock(scope: !5949, file: !3, line: 2190, column: 7)
!5966 = !DILocation(line: 2190, column: 17, scope: !5964)
!5967 = !DILocation(line: 2190, column: 22, scope: !5964)
!5968 = !DILocation(line: 2190, column: 7, scope: !5965)
!5969 = !DILocation(line: 2190, column: 35, scope: !5964)
!5970 = !DILocation(line: 2190, column: 38, scope: !5964)
!5971 = !DILocation(line: 2190, column: 33, scope: !5964)
!5972 = !DILocation(line: 2190, column: 7, scope: !5964)
!5973 = distinct !{!5973, !5968, !5974}
!5974 = !DILocation(line: 2191, column: 2, scope: !5965)
!5975 = !DILocation(line: 2192, column: 25, scope: !5949)
!5976 = !DILocation(line: 2192, column: 28, scope: !5949)
!5977 = !DILocation(line: 2192, column: 7, scope: !5949)
!5978 = !DILocation(line: 2192, column: 23, scope: !5949)
!5979 = !DILocation(line: 2194, column: 12, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 2194, column: 3)
!5981 = !DILocation(line: 2194, column: 27, scope: !5980)
!5982 = !DILocation(line: 2194, column: 10, scope: !5980)
!5983 = !DILocation(line: 2194, column: 8, scope: !5980)
!5984 = !DILocation(line: 2194, column: 32, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 2194, column: 3)
!5986 = !DILocation(line: 2194, column: 34, scope: !5985)
!5987 = !DILocation(line: 2194, column: 3, scope: !5980)
!5988 = !DILocation(line: 2195, column: 14, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 2195, column: 5)
!5990 = !DILocation(line: 2195, column: 36, scope: !5989)
!5991 = !DILocation(line: 2195, column: 12, scope: !5989)
!5992 = !DILocation(line: 2195, column: 10, scope: !5989)
!5993 = !DILocation(line: 2196, column: 3, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 2195, column: 5)
!5995 = !DILocation(line: 2196, column: 5, scope: !5994)
!5996 = !DILocation(line: 2195, column: 5, scope: !5989)
!5997 = !DILocation(line: 2199, column: 6, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2199, column: 6)
!5999 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 2198, column: 7)
!6000 = !DILocation(line: 2199, column: 22, scope: !5998)
!6001 = !DILocation(line: 2199, column: 6, scope: !5999)
!6002 = !DILocation(line: 2200, column: 4, scope: !5998)
!6003 = !DILocation(line: 2203, column: 6, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2203, column: 6)
!6005 = !DILocation(line: 2203, column: 22, scope: !6004)
!6006 = !DILocation(line: 2203, column: 6, scope: !5999)
!6007 = !DILocation(line: 2205, column: 17, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !6009, file: !3, line: 2205, column: 6)
!6009 = distinct !DILexicalBlock(scope: !6004, file: !3, line: 2204, column: 4)
!6010 = !DILocation(line: 2205, column: 15, scope: !6008)
!6011 = !DILocation(line: 2205, column: 11, scope: !6008)
!6012 = !DILocation(line: 2205, column: 34, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !6008, file: !3, line: 2205, column: 6)
!6014 = !DILocation(line: 2205, column: 38, scope: !6013)
!6015 = !DILocation(line: 2205, column: 6, scope: !6008)
!6016 = !DILocation(line: 2207, column: 7, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 2207, column: 7)
!6018 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 2206, column: 8)
!6019 = !DILocation(line: 2207, column: 27, scope: !6017)
!6020 = !DILocation(line: 2207, column: 25, scope: !6017)
!6021 = !DILocation(line: 2207, column: 7, scope: !6018)
!6022 = !DILocation(line: 2208, column: 25, scope: !6017)
!6023 = !DILocation(line: 2208, column: 5, scope: !6017)
!6024 = !DILocation(line: 2208, column: 23, scope: !6017)
!6025 = !DILocation(line: 2209, column: 7, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 2209, column: 7)
!6027 = !DILocation(line: 2209, column: 27, scope: !6026)
!6028 = !DILocation(line: 2209, column: 25, scope: !6026)
!6029 = !DILocation(line: 2209, column: 7, scope: !6018)
!6030 = !DILocation(line: 2210, column: 25, scope: !6026)
!6031 = !DILocation(line: 2210, column: 5, scope: !6026)
!6032 = !DILocation(line: 2210, column: 23, scope: !6026)
!6033 = !DILocation(line: 2211, column: 8, scope: !6018)
!6034 = !DILocation(line: 2205, column: 53, scope: !6013)
!6035 = !DILocation(line: 2205, column: 51, scope: !6013)
!6036 = !DILocation(line: 2205, column: 6, scope: !6013)
!6037 = distinct !{!6037, !6015, !6038}
!6038 = !DILocation(line: 2211, column: 8, scope: !6008)
!6039 = !DILocation(line: 2212, column: 6, scope: !6009)
!6040 = !DILocation(line: 2214, column: 16, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2214, column: 6)
!6042 = !DILocation(line: 2214, column: 44, scope: !6041)
!6043 = !DILocation(line: 2214, column: 14, scope: !6041)
!6044 = !DILocation(line: 2214, column: 52, scope: !6041)
!6045 = !DILocation(line: 2214, column: 6, scope: !5999)
!6046 = !DILocation(line: 2215, column: 4, scope: !6041)
!6047 = !DILocation(line: 2216, column: 13, scope: !5999)
!6048 = !DILocation(line: 2216, column: 21, scope: !5999)
!6049 = !DILocation(line: 2216, column: 39, scope: !5999)
!6050 = !DILocation(line: 2216, column: 11, scope: !5999)
!6051 = !DILocation(line: 2217, column: 6, scope: !6052)
!6052 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2217, column: 6)
!6053 = !DILocation(line: 2217, column: 31, scope: !6052)
!6054 = !DILocation(line: 2217, column: 29, scope: !6052)
!6055 = !DILocation(line: 2217, column: 6, scope: !5999)
!6056 = !DILocation(line: 2218, column: 29, scope: !6052)
!6057 = !DILocation(line: 2218, column: 4, scope: !6052)
!6058 = !DILocation(line: 2218, column: 27, scope: !6052)
!6059 = !DILocation(line: 2219, column: 6, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2219, column: 6)
!6061 = !DILocation(line: 2219, column: 31, scope: !6060)
!6062 = !DILocation(line: 2219, column: 29, scope: !6060)
!6063 = !DILocation(line: 2219, column: 6, scope: !5999)
!6064 = !DILocation(line: 2220, column: 29, scope: !6060)
!6065 = !DILocation(line: 2220, column: 4, scope: !6060)
!6066 = !DILocation(line: 2220, column: 27, scope: !6060)
!6067 = !DILocation(line: 2221, column: 7, scope: !5999)
!6068 = !DILocation(line: 2197, column: 7, scope: !5994)
!6069 = !DILocation(line: 2197, column: 5, scope: !5994)
!6070 = !DILocation(line: 2195, column: 5, scope: !5994)
!6071 = distinct !{!6071, !5996, !6072}
!6072 = !DILocation(line: 2221, column: 7, scope: !5989)
!6073 = !DILocation(line: 2194, column: 61, scope: !5985)
!6074 = !DILocation(line: 2194, column: 3, scope: !5985)
!6075 = distinct !{!6075, !5987, !6076}
!6076 = !DILocation(line: 2221, column: 7, scope: !5980)
!6077 = !DILocation(line: 2231, column: 1, scope: !5929)
!6078 = distinct !DISubprogram(name: "sort_conflict_id_allocno_map", scope: !3, file: !3, line: 2258, type: !3585, scopeLine: 2259, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6079 = !DILocalVariable(name: "i", scope: !6078, file: !3, line: 2260, type: !703)
!6080 = !DILocation(line: 2260, column: 7, scope: !6078)
!6081 = !DILocalVariable(name: "num", scope: !6078, file: !3, line: 2260, type: !703)
!6082 = !DILocation(line: 2260, column: 10, scope: !6078)
!6083 = !DILocalVariable(name: "a", scope: !6078, file: !3, line: 2261, type: !697)
!6084 = !DILocation(line: 2261, column: 17, scope: !6078)
!6085 = !DILocalVariable(name: "ai", scope: !6078, file: !3, line: 2262, type: !3853)
!6086 = !DILocation(line: 2262, column: 24, scope: !6078)
!6087 = !DILocation(line: 2264, column: 7, scope: !6078)
!6088 = !DILocation(line: 2265, column: 3, scope: !6089)
!6089 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 2265, column: 3)
!6090 = !DILocation(line: 2265, column: 3, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6089, file: !3, line: 2265, column: 3)
!6092 = !DILocation(line: 2266, column: 42, scope: !6091)
!6093 = !DILocation(line: 2266, column: 5, scope: !6091)
!6094 = !DILocation(line: 2266, column: 36, scope: !6091)
!6095 = !DILocation(line: 2266, column: 40, scope: !6091)
!6096 = distinct !{!6096, !6088, !6097}
!6097 = !DILocation(line: 2266, column: 42, scope: !6089)
!6098 = !DILocation(line: 2268, column: 15, scope: !6078)
!6099 = !DILocation(line: 2268, column: 44, scope: !6078)
!6100 = !DILocation(line: 2268, column: 3, scope: !6078)
!6101 = !DILocation(line: 2274, column: 10, scope: !6102)
!6102 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 2274, column: 3)
!6103 = !DILocation(line: 2274, column: 8, scope: !6102)
!6104 = !DILocation(line: 2274, column: 15, scope: !6105)
!6105 = distinct !DILexicalBlock(scope: !6102, file: !3, line: 2274, column: 3)
!6106 = !DILocation(line: 2274, column: 19, scope: !6105)
!6107 = !DILocation(line: 2274, column: 17, scope: !6105)
!6108 = !DILocation(line: 2274, column: 3, scope: !6102)
!6109 = !DILocation(line: 2275, column: 14, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 2275, column: 9)
!6111 = !DILocation(line: 2275, column: 42, scope: !6110)
!6112 = !DILocation(line: 2275, column: 12, scope: !6110)
!6113 = !DILocation(line: 2275, column: 46, scope: !6110)
!6114 = !DILocation(line: 2275, column: 9, scope: !6105)
!6115 = !DILocation(line: 2276, column: 33, scope: !6110)
!6116 = !DILocation(line: 2276, column: 7, scope: !6110)
!6117 = !DILocation(line: 2276, column: 31, scope: !6110)
!6118 = !DILocation(line: 2275, column: 49, scope: !6110)
!6119 = !DILocation(line: 2274, column: 25, scope: !6105)
!6120 = !DILocation(line: 2274, column: 3, scope: !6105)
!6121 = distinct !{!6121, !6108, !6122}
!6122 = !DILocation(line: 2276, column: 33, scope: !6102)
!6123 = !DILocation(line: 2277, column: 12, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 2277, column: 3)
!6125 = !DILocation(line: 2277, column: 10, scope: !6124)
!6126 = !DILocation(line: 2277, column: 8, scope: !6124)
!6127 = !DILocation(line: 2277, column: 17, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6124, file: !3, line: 2277, column: 3)
!6129 = !DILocation(line: 2277, column: 21, scope: !6128)
!6130 = !DILocation(line: 2277, column: 19, scope: !6128)
!6131 = !DILocation(line: 2277, column: 3, scope: !6124)
!6132 = !DILocation(line: 2278, column: 5, scope: !6128)
!6133 = !DILocation(line: 2278, column: 33, scope: !6128)
!6134 = !DILocation(line: 2278, column: 36, scope: !6128)
!6135 = !DILocation(line: 2277, column: 40, scope: !6128)
!6136 = !DILocation(line: 2277, column: 3, scope: !6128)
!6137 = distinct !{!6137, !6131, !6138}
!6138 = !DILocation(line: 2278, column: 38, scope: !6124)
!6139 = !DILocation(line: 2279, column: 1, scope: !6078)
!6140 = distinct !DISubprogram(name: "setup_min_max_conflict_allocno_ids", scope: !3, file: !3, line: 2284, type: !3585, scopeLine: 2285, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6141 = !DILocalVariable(name: "cover_class", scope: !6140, file: !3, line: 2286, type: !703)
!6142 = !DILocation(line: 2286, column: 7, scope: !6140)
!6143 = !DILocalVariable(name: "i", scope: !6140, file: !3, line: 2287, type: !703)
!6144 = !DILocation(line: 2287, column: 7, scope: !6140)
!6145 = !DILocalVariable(name: "j", scope: !6140, file: !3, line: 2287, type: !703)
!6146 = !DILocation(line: 2287, column: 10, scope: !6140)
!6147 = !DILocalVariable(name: "min", scope: !6140, file: !3, line: 2287, type: !703)
!6148 = !DILocation(line: 2287, column: 13, scope: !6140)
!6149 = !DILocalVariable(name: "max", scope: !6140, file: !3, line: 2287, type: !703)
!6150 = !DILocation(line: 2287, column: 18, scope: !6140)
!6151 = !DILocalVariable(name: "start", scope: !6140, file: !3, line: 2287, type: !703)
!6152 = !DILocation(line: 2287, column: 23, scope: !6140)
!6153 = !DILocalVariable(name: "finish", scope: !6140, file: !3, line: 2287, type: !703)
!6154 = !DILocation(line: 2287, column: 30, scope: !6140)
!6155 = !DILocalVariable(name: "first_not_finished", scope: !6140, file: !3, line: 2287, type: !703)
!6156 = !DILocation(line: 2287, column: 38, scope: !6140)
!6157 = !DILocalVariable(name: "filled_area_start", scope: !6140, file: !3, line: 2287, type: !703)
!6158 = !DILocation(line: 2287, column: 58, scope: !6140)
!6159 = !DILocalVariable(name: "live_range_min", scope: !6140, file: !3, line: 2288, type: !1934)
!6160 = !DILocation(line: 2288, column: 8, scope: !6140)
!6161 = !DILocalVariable(name: "last_lived", scope: !6140, file: !3, line: 2288, type: !1934)
!6162 = !DILocation(line: 2288, column: 25, scope: !6140)
!6163 = !DILocalVariable(name: "a", scope: !6140, file: !3, line: 2289, type: !697)
!6164 = !DILocation(line: 2289, column: 17, scope: !6140)
!6165 = !DILocation(line: 2291, column: 57, scope: !6140)
!6166 = !DILocation(line: 2291, column: 55, scope: !6140)
!6167 = !DILocation(line: 2291, column: 28, scope: !6140)
!6168 = !DILocation(line: 2291, column: 20, scope: !6140)
!6169 = !DILocation(line: 2291, column: 18, scope: !6140)
!6170 = !DILocation(line: 2292, column: 15, scope: !6140)
!6171 = !DILocation(line: 2293, column: 22, scope: !6140)
!6172 = !DILocation(line: 2294, column: 10, scope: !6173)
!6173 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 2294, column: 3)
!6174 = !DILocation(line: 2294, column: 8, scope: !6173)
!6175 = !DILocation(line: 2294, column: 15, scope: !6176)
!6176 = distinct !DILexicalBlock(scope: !6173, file: !3, line: 2294, column: 3)
!6177 = !DILocation(line: 2294, column: 19, scope: !6176)
!6178 = !DILocation(line: 2294, column: 17, scope: !6176)
!6179 = !DILocation(line: 2294, column: 3, scope: !6173)
!6180 = !DILocation(line: 2296, column: 11, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6176, file: !3, line: 2295, column: 5)
!6182 = !DILocation(line: 2296, column: 39, scope: !6181)
!6183 = !DILocation(line: 2296, column: 9, scope: !6181)
!6184 = !DILocation(line: 2297, column: 11, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 2297, column: 11)
!6186 = !DILocation(line: 2297, column: 13, scope: !6185)
!6187 = !DILocation(line: 2297, column: 11, scope: !6181)
!6188 = !DILocation(line: 2298, column: 2, scope: !6185)
!6189 = !DILocation(line: 2299, column: 11, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 2299, column: 11)
!6191 = !DILocation(line: 2299, column: 23, scope: !6190)
!6192 = !DILocation(line: 2300, column: 4, scope: !6190)
!6193 = !DILocation(line: 2300, column: 8, scope: !6190)
!6194 = !DILocation(line: 2300, column: 27, scope: !6190)
!6195 = !DILocation(line: 2301, column: 8, scope: !6190)
!6196 = !DILocation(line: 2301, column: 11, scope: !6190)
!6197 = !DILocation(line: 2301, column: 32, scope: !6190)
!6198 = !DILocation(line: 2301, column: 23, scope: !6190)
!6199 = !DILocation(line: 2299, column: 11, scope: !6181)
!6200 = !DILocation(line: 2303, column: 18, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 2302, column: 2)
!6202 = !DILocation(line: 2303, column: 16, scope: !6201)
!6203 = !DILocation(line: 2304, column: 10, scope: !6201)
!6204 = !DILocation(line: 2304, column: 8, scope: !6201)
!6205 = !DILocation(line: 2305, column: 25, scope: !6201)
!6206 = !DILocation(line: 2305, column: 23, scope: !6201)
!6207 = !DILocation(line: 2306, column: 2, scope: !6201)
!6208 = !DILocation(line: 2309, column: 12, scope: !6209)
!6209 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 2308, column: 2)
!6210 = !DILocation(line: 2309, column: 10, scope: !6209)
!6211 = !DILocation(line: 2314, column: 4, scope: !6209)
!6212 = !DILocation(line: 2314, column: 11, scope: !6209)
!6213 = !DILocation(line: 2314, column: 32, scope: !6209)
!6214 = !DILocation(line: 2314, column: 30, scope: !6209)
!6215 = !DILocation(line: 2315, column: 4, scope: !6209)
!6216 = !DILocation(line: 2315, column: 7, scope: !6209)
!6217 = !DILocation(line: 2315, column: 15, scope: !6209)
!6218 = !DILocation(line: 2315, column: 13, scope: !6209)
!6219 = !DILocation(line: 0, scope: !6209)
!6220 = !DILocation(line: 2317, column: 24, scope: !6209)
!6221 = distinct !{!6221, !6211, !6220}
!6222 = !DILocation(line: 2318, column: 10, scope: !6209)
!6223 = !DILocation(line: 2318, column: 8, scope: !6209)
!6224 = !DILocation(line: 2320, column: 11, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 2320, column: 11)
!6226 = !DILocation(line: 2320, column: 18, scope: !6225)
!6227 = !DILocation(line: 2320, column: 15, scope: !6225)
!6228 = !DILocation(line: 2320, column: 11, scope: !6181)
!6229 = !DILocation(line: 2323, column: 5, scope: !6225)
!6230 = !DILocation(line: 2323, column: 2, scope: !6225)
!6231 = !DILocation(line: 2324, column: 27, scope: !6181)
!6232 = !DILocation(line: 2324, column: 7, scope: !6181)
!6233 = !DILocation(line: 2324, column: 22, scope: !6181)
!6234 = !DILocation(line: 2324, column: 25, scope: !6181)
!6235 = !DILocation(line: 2325, column: 25, scope: !6181)
!6236 = !DILocation(line: 2325, column: 7, scope: !6181)
!6237 = !DILocation(line: 2325, column: 23, scope: !6181)
!6238 = !DILocation(line: 2326, column: 5, scope: !6181)
!6239 = !DILocation(line: 2294, column: 38, scope: !6176)
!6240 = !DILocation(line: 2294, column: 3, scope: !6176)
!6241 = distinct !{!6241, !6179, !6242}
!6242 = !DILocation(line: 2326, column: 5, scope: !6173)
!6243 = !DILocation(line: 2327, column: 53, scope: !6140)
!6244 = !DILocation(line: 2327, column: 51, scope: !6140)
!6245 = !DILocation(line: 2327, column: 24, scope: !6140)
!6246 = !DILocation(line: 2327, column: 16, scope: !6140)
!6247 = !DILocation(line: 2327, column: 14, scope: !6140)
!6248 = !DILocation(line: 2328, column: 15, scope: !6140)
!6249 = !DILocation(line: 2329, column: 21, scope: !6140)
!6250 = !DILocation(line: 2330, column: 12, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 2330, column: 3)
!6252 = !DILocation(line: 2330, column: 29, scope: !6251)
!6253 = !DILocation(line: 2330, column: 10, scope: !6251)
!6254 = !DILocation(line: 2330, column: 8, scope: !6251)
!6255 = !DILocation(line: 2330, column: 34, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 2330, column: 3)
!6257 = !DILocation(line: 2330, column: 36, scope: !6256)
!6258 = !DILocation(line: 2330, column: 3, scope: !6251)
!6259 = !DILocation(line: 2332, column: 11, scope: !6260)
!6260 = distinct !DILexicalBlock(scope: !6256, file: !3, line: 2331, column: 5)
!6261 = !DILocation(line: 2332, column: 39, scope: !6260)
!6262 = !DILocation(line: 2332, column: 9, scope: !6260)
!6263 = !DILocation(line: 2333, column: 11, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6260, file: !3, line: 2333, column: 11)
!6265 = !DILocation(line: 2333, column: 13, scope: !6264)
!6266 = !DILocation(line: 2333, column: 11, scope: !6260)
!6267 = !DILocation(line: 2334, column: 2, scope: !6264)
!6268 = !DILocation(line: 2335, column: 11, scope: !6269)
!6269 = distinct !DILexicalBlock(scope: !6260, file: !3, line: 2335, column: 11)
!6270 = !DILocation(line: 2335, column: 23, scope: !6269)
!6271 = !DILocation(line: 2336, column: 4, scope: !6269)
!6272 = !DILocation(line: 2336, column: 8, scope: !6269)
!6273 = !DILocation(line: 2336, column: 27, scope: !6269)
!6274 = !DILocation(line: 2337, column: 8, scope: !6269)
!6275 = !DILocation(line: 2337, column: 11, scope: !6269)
!6276 = !DILocation(line: 2337, column: 32, scope: !6269)
!6277 = !DILocation(line: 2337, column: 23, scope: !6269)
!6278 = !DILocation(line: 2335, column: 11, scope: !6260)
!6279 = !DILocation(line: 2339, column: 18, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 2338, column: 2)
!6281 = !DILocation(line: 2339, column: 16, scope: !6280)
!6282 = !DILocation(line: 2340, column: 11, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6280, file: !3, line: 2340, column: 4)
!6284 = !DILocation(line: 2340, column: 9, scope: !6283)
!6285 = !DILocation(line: 2340, column: 16, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6283, file: !3, line: 2340, column: 4)
!6287 = !DILocation(line: 2340, column: 20, scope: !6286)
!6288 = !DILocation(line: 2340, column: 18, scope: !6286)
!6289 = !DILocation(line: 2340, column: 4, scope: !6283)
!6290 = !DILocation(line: 2341, column: 6, scope: !6286)
!6291 = !DILocation(line: 2341, column: 17, scope: !6286)
!6292 = !DILocation(line: 2341, column: 20, scope: !6286)
!6293 = !DILocation(line: 2340, column: 36, scope: !6286)
!6294 = !DILocation(line: 2340, column: 4, scope: !6286)
!6295 = distinct !{!6295, !6289, !6296}
!6296 = !DILocation(line: 2341, column: 23, scope: !6283)
!6297 = !DILocation(line: 2342, column: 24, scope: !6280)
!6298 = !DILocation(line: 2342, column: 22, scope: !6280)
!6299 = !DILocation(line: 2343, column: 2, scope: !6280)
!6300 = !DILocation(line: 2344, column: 13, scope: !6260)
!6301 = !DILocation(line: 2344, column: 28, scope: !6260)
!6302 = !DILocation(line: 2344, column: 11, scope: !6260)
!6303 = !DILocation(line: 2345, column: 16, scope: !6260)
!6304 = !DILocation(line: 2345, column: 14, scope: !6260)
!6305 = !DILocation(line: 2346, column: 13, scope: !6260)
!6306 = !DILocation(line: 2346, column: 24, scope: !6260)
!6307 = !DILocation(line: 2346, column: 11, scope: !6260)
!6308 = !DILocation(line: 2347, column: 11, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !6260, file: !3, line: 2347, column: 11)
!6310 = !DILocation(line: 2347, column: 15, scope: !6309)
!6311 = !DILocation(line: 2347, column: 11, scope: !6260)
!6312 = !DILocation(line: 2350, column: 8, scope: !6309)
!6313 = !DILocation(line: 2350, column: 32, scope: !6309)
!6314 = !DILocation(line: 2350, column: 6, scope: !6309)
!6315 = !DILocation(line: 2350, column: 2, scope: !6309)
!6316 = !DILocation(line: 2351, column: 25, scope: !6260)
!6317 = !DILocation(line: 2351, column: 7, scope: !6260)
!6318 = !DILocation(line: 2351, column: 23, scope: !6260)
!6319 = !DILocation(line: 2359, column: 16, scope: !6320)
!6320 = distinct !DILexicalBlock(scope: !6260, file: !3, line: 2359, column: 7)
!6321 = !DILocation(line: 2359, column: 14, scope: !6320)
!6322 = !DILocation(line: 2359, column: 12, scope: !6320)
!6323 = !DILocation(line: 2359, column: 21, scope: !6324)
!6324 = distinct !DILexicalBlock(scope: !6320, file: !3, line: 2359, column: 7)
!6325 = !DILocation(line: 2359, column: 25, scope: !6324)
!6326 = !DILocation(line: 2359, column: 23, scope: !6324)
!6327 = !DILocation(line: 2359, column: 7, scope: !6320)
!6328 = !DILocation(line: 2360, column: 18, scope: !6324)
!6329 = !DILocation(line: 2360, column: 2, scope: !6324)
!6330 = !DILocation(line: 2360, column: 13, scope: !6324)
!6331 = !DILocation(line: 2360, column: 16, scope: !6324)
!6332 = !DILocation(line: 2359, column: 45, scope: !6324)
!6333 = !DILocation(line: 2359, column: 7, scope: !6324)
!6334 = distinct !{!6334, !6327, !6335}
!6335 = !DILocation(line: 2360, column: 18, scope: !6320)
!6336 = !DILocation(line: 2361, column: 27, scope: !6260)
!6337 = !DILocation(line: 2361, column: 25, scope: !6260)
!6338 = !DILocation(line: 2362, column: 5, scope: !6260)
!6339 = !DILocation(line: 2330, column: 43, scope: !6256)
!6340 = !DILocation(line: 2330, column: 3, scope: !6256)
!6341 = distinct !{!6341, !6258, !6342}
!6342 = !DILocation(line: 2362, column: 5, scope: !6251)
!6343 = !DILocation(line: 2363, column: 13, scope: !6140)
!6344 = !DILocation(line: 2363, column: 3, scope: !6140)
!6345 = !DILocation(line: 2364, column: 13, scope: !6140)
!6346 = !DILocation(line: 2364, column: 3, scope: !6140)
!6347 = !DILocation(line: 2365, column: 1, scope: !6140)
!6348 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !135, file: !135, line: 85, type: !6349, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6349 = !DISubroutineType(types: !6350)
!6350 = !{!7, !6351}
!6351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6352, size: 64)
!6352 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1149)
!6353 = !DILocalVariable(name: "vec_", arg: 1, scope: !6348, file: !135, line: 85, type: !6351)
!6354 = !DILocation(line: 85, column: 1, scope: !6348)
!6355 = distinct !DISubprogram(name: "ira_destroy", scope: !3, file: !3, line: 2860, type: !3585, scopeLine: 2861, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6356 = !DILocation(line: 2862, column: 3, scope: !6355)
!6357 = !DILocation(line: 2863, column: 3, scope: !6355)
!6358 = !DILocation(line: 2864, column: 3, scope: !6355)
!6359 = !DILocation(line: 2865, column: 3, scope: !6355)
!6360 = !DILocation(line: 2866, column: 3, scope: !6355)
!6361 = !DILocation(line: 2867, column: 1, scope: !6355)
!6362 = distinct !DISubprogram(name: "finish_loop_tree_nodes", scope: !3, file: !3, line: 199, type: !3585, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6363 = !DILocalVariable(name: "i", scope: !6362, file: !3, line: 201, type: !7)
!6364 = !DILocation(line: 201, column: 16, scope: !6362)
!6365 = !DILocalVariable(name: "loop", scope: !6362, file: !3, line: 202, type: !1156)
!6366 = !DILocation(line: 202, column: 10, scope: !6362)
!6367 = !DILocation(line: 204, column: 10, scope: !6368)
!6368 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 204, column: 3)
!6369 = !DILocation(line: 204, column: 8, scope: !6368)
!6370 = !DILocation(line: 204, column: 15, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6368, file: !3, line: 204, column: 3)
!6372 = !DILocation(line: 204, column: 3, scope: !6368)
!6373 = !DILocation(line: 205, column: 29, scope: !6371)
!6374 = !DILocation(line: 205, column: 44, scope: !6371)
!6375 = !DILocation(line: 205, column: 5, scope: !6371)
!6376 = !DILocation(line: 204, column: 65, scope: !6371)
!6377 = !DILocation(line: 204, column: 3, scope: !6371)
!6378 = distinct !{!6378, !6372, !6379}
!6379 = !DILocation(line: 205, column: 46, scope: !6368)
!6380 = !DILocation(line: 206, column: 13, scope: !6362)
!6381 = !DILocation(line: 206, column: 3, scope: !6362)
!6382 = !DILocation(line: 207, column: 10, scope: !6383)
!6383 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 207, column: 3)
!6384 = !DILocation(line: 207, column: 8, scope: !6383)
!6385 = !DILocation(line: 207, column: 15, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6383, file: !3, line: 207, column: 3)
!6387 = !DILocation(line: 207, column: 34, scope: !6386)
!6388 = !DILocation(line: 207, column: 17, scope: !6386)
!6389 = !DILocation(line: 207, column: 3, scope: !6383)
!6390 = !DILocation(line: 209, column: 11, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 209, column: 11)
!6392 = distinct !DILexicalBlock(scope: !6386, file: !3, line: 208, column: 5)
!6393 = !DILocation(line: 209, column: 24, scope: !6391)
!6394 = !DILocation(line: 209, column: 27, scope: !6391)
!6395 = !DILocation(line: 209, column: 40, scope: !6391)
!6396 = !DILocation(line: 209, column: 11, scope: !6392)
!6397 = !DILocation(line: 210, column: 19, scope: !6391)
!6398 = !DILocation(line: 210, column: 32, scope: !6391)
!6399 = !DILocation(line: 210, column: 35, scope: !6391)
!6400 = !DILocation(line: 210, column: 2, scope: !6391)
!6401 = !DILocation(line: 211, column: 11, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 211, column: 11)
!6403 = !DILocation(line: 211, column: 24, scope: !6402)
!6404 = !DILocation(line: 211, column: 27, scope: !6402)
!6405 = !DILocation(line: 211, column: 43, scope: !6402)
!6406 = !DILocation(line: 211, column: 11, scope: !6392)
!6407 = !DILocation(line: 212, column: 19, scope: !6402)
!6408 = !DILocation(line: 212, column: 32, scope: !6402)
!6409 = !DILocation(line: 212, column: 35, scope: !6402)
!6410 = !DILocation(line: 212, column: 2, scope: !6402)
!6411 = !DILocation(line: 213, column: 11, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 213, column: 11)
!6413 = !DILocation(line: 213, column: 24, scope: !6412)
!6414 = !DILocation(line: 213, column: 27, scope: !6412)
!6415 = !DILocation(line: 213, column: 43, scope: !6412)
!6416 = !DILocation(line: 213, column: 11, scope: !6392)
!6417 = !DILocation(line: 214, column: 19, scope: !6412)
!6418 = !DILocation(line: 214, column: 32, scope: !6412)
!6419 = !DILocation(line: 214, column: 35, scope: !6412)
!6420 = !DILocation(line: 214, column: 2, scope: !6412)
!6421 = !DILocation(line: 215, column: 11, scope: !6422)
!6422 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 215, column: 11)
!6423 = !DILocation(line: 215, column: 24, scope: !6422)
!6424 = !DILocation(line: 215, column: 27, scope: !6422)
!6425 = !DILocation(line: 215, column: 40, scope: !6422)
!6426 = !DILocation(line: 215, column: 11, scope: !6392)
!6427 = !DILocation(line: 216, column: 19, scope: !6422)
!6428 = !DILocation(line: 216, column: 32, scope: !6422)
!6429 = !DILocation(line: 216, column: 35, scope: !6422)
!6430 = !DILocation(line: 216, column: 2, scope: !6422)
!6431 = !DILocation(line: 217, column: 11, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 217, column: 11)
!6433 = !DILocation(line: 217, column: 24, scope: !6432)
!6434 = !DILocation(line: 217, column: 27, scope: !6432)
!6435 = !DILocation(line: 217, column: 45, scope: !6432)
!6436 = !DILocation(line: 217, column: 11, scope: !6392)
!6437 = !DILocation(line: 218, column: 12, scope: !6432)
!6438 = !DILocation(line: 218, column: 25, scope: !6432)
!6439 = !DILocation(line: 218, column: 28, scope: !6432)
!6440 = !DILocation(line: 218, column: 2, scope: !6432)
!6441 = !DILocation(line: 219, column: 5, scope: !6392)
!6442 = !DILocation(line: 207, column: 67, scope: !6386)
!6443 = !DILocation(line: 207, column: 3, scope: !6386)
!6444 = distinct !{!6444, !6389, !6445}
!6445 = !DILocation(line: 219, column: 5, scope: !6383)
!6446 = !DILocation(line: 220, column: 13, scope: !6362)
!6447 = !DILocation(line: 220, column: 3, scope: !6362)
!6448 = !DILocation(line: 221, column: 1, scope: !6362)
!6449 = distinct !DISubprogram(name: "finish_copies", scope: !3, file: !3, line: 1292, type: !3585, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6450 = !DILocalVariable(name: "cp", scope: !6449, file: !3, line: 1294, type: !1878)
!6451 = !DILocation(line: 1294, column: 14, scope: !6449)
!6452 = !DILocalVariable(name: "ci", scope: !6449, file: !3, line: 1295, type: !3598)
!6453 = !DILocation(line: 1295, column: 21, scope: !6449)
!6454 = !DILocation(line: 1297, column: 3, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6449, file: !3, line: 1297, column: 3)
!6456 = !DILocation(line: 1297, column: 3, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 1297, column: 3)
!6458 = !DILocation(line: 1298, column: 18, scope: !6457)
!6459 = !DILocation(line: 1298, column: 5, scope: !6457)
!6460 = distinct !{!6460, !6454, !6461}
!6461 = !DILocation(line: 1298, column: 20, scope: !6455)
!6462 = !DILocation(line: 1299, column: 3, scope: !6449)
!6463 = !DILocation(line: 1300, column: 20, scope: !6449)
!6464 = !DILocation(line: 1300, column: 3, scope: !6449)
!6465 = !DILocation(line: 1301, column: 1, scope: !6449)
!6466 = distinct !DISubprogram(name: "finish_allocnos", scope: !3, file: !3, line: 1006, type: !3585, scopeLine: 1007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6467 = !DILocalVariable(name: "a", scope: !6466, file: !3, line: 1008, type: !697)
!6468 = !DILocation(line: 1008, column: 17, scope: !6466)
!6469 = !DILocalVariable(name: "ai", scope: !6466, file: !3, line: 1009, type: !3853)
!6470 = !DILocation(line: 1009, column: 24, scope: !6466)
!6471 = !DILocation(line: 1011, column: 3, scope: !6472)
!6472 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 1011, column: 3)
!6473 = !DILocation(line: 1011, column: 3, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 1011, column: 3)
!6475 = !DILocation(line: 1012, column: 21, scope: !6474)
!6476 = !DILocation(line: 1012, column: 5, scope: !6474)
!6477 = distinct !{!6477, !6471, !6478}
!6478 = !DILocation(line: 1012, column: 22, scope: !6472)
!6479 = !DILocation(line: 1013, column: 13, scope: !6466)
!6480 = !DILocation(line: 1013, column: 3, scope: !6466)
!6481 = !DILocation(line: 1014, column: 3, scope: !6466)
!6482 = !DILocation(line: 1015, column: 3, scope: !6466)
!6483 = !DILocation(line: 1016, column: 20, scope: !6466)
!6484 = !DILocation(line: 1016, column: 3, scope: !6466)
!6485 = !DILocation(line: 1017, column: 20, scope: !6466)
!6486 = !DILocation(line: 1017, column: 3, scope: !6466)
!6487 = !DILocation(line: 1018, column: 1, scope: !6466)
!6488 = distinct !DISubprogram(name: "finish_cost_vectors", scope: !3, file: !3, line: 1345, type: !3585, scopeLine: 1346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6489 = !DILocalVariable(name: "i", scope: !6488, file: !3, line: 1347, type: !703)
!6490 = !DILocation(line: 1347, column: 7, scope: !6488)
!6491 = !DILocalVariable(name: "cover_class", scope: !6488, file: !3, line: 1348, type: !390)
!6492 = !DILocation(line: 1348, column: 18, scope: !6488)
!6493 = !DILocation(line: 1350, column: 10, scope: !6494)
!6494 = distinct !DILexicalBlock(scope: !6488, file: !3, line: 1350, column: 3)
!6495 = !DILocation(line: 1350, column: 8, scope: !6494)
!6496 = !DILocation(line: 1350, column: 15, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6494, file: !3, line: 1350, column: 3)
!6498 = !DILocation(line: 1350, column: 19, scope: !6497)
!6499 = !DILocation(line: 1350, column: 17, scope: !6497)
!6500 = !DILocation(line: 1350, column: 3, scope: !6494)
!6501 = !DILocation(line: 1352, column: 41, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 1351, column: 5)
!6503 = !DILocation(line: 1352, column: 21, scope: !6502)
!6504 = !DILocation(line: 1352, column: 19, scope: !6502)
!6505 = !DILocation(line: 1353, column: 41, scope: !6502)
!6506 = !DILocation(line: 1353, column: 24, scope: !6502)
!6507 = !DILocation(line: 1353, column: 7, scope: !6502)
!6508 = !DILocation(line: 1354, column: 5, scope: !6502)
!6509 = !DILocation(line: 1350, column: 46, scope: !6497)
!6510 = !DILocation(line: 1350, column: 3, scope: !6497)
!6511 = distinct !{!6511, !6500, !6512}
!6512 = !DILocation(line: 1354, column: 5, scope: !6494)
!6513 = !DILocation(line: 1355, column: 1, scope: !6488)
!6514 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_reserve", scope: !698, file: !698, line: 68, type: !6515, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6515 = !DISubroutineType(types: !6516)
!6516 = !{!703, !2233, !703}
!6517 = !DILocalVariable(name: "vec_", arg: 1, scope: !6514, file: !698, line: 68, type: !2233)
!6518 = !DILocation(line: 68, column: 1, scope: !6514)
!6519 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6514, file: !698, line: 68, type: !703)
!6520 = !DILocalVariable(name: "extend", scope: !6514, file: !698, line: 68, type: !703)
!6521 = !DILocation(line: 68, column: 1, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6514, file: !698, line: 68, column: 1)
!6523 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_quick_push", scope: !698, file: !698, line: 67, type: !6524, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6524 = !DISubroutineType(types: !6525)
!6525 = !{!1858, !2240, !697}
!6526 = !DILocalVariable(name: "vec_", arg: 1, scope: !6523, file: !698, line: 67, type: !2240)
!6527 = !DILocation(line: 67, column: 1, scope: !6523)
!6528 = !DILocalVariable(name: "obj_", arg: 2, scope: !6523, file: !698, line: 67, type: !697)
!6529 = !DILocalVariable(name: "slot_", scope: !6523, file: !698, line: 67, type: !1858)
!6530 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_space", scope: !698, file: !698, line: 67, type: !6531, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6531 = !DISubroutineType(types: !6532)
!6532 = !{!703, !2240, !703}
!6533 = !DILocalVariable(name: "vec_", arg: 1, scope: !6530, file: !698, line: 67, type: !2240)
!6534 = !DILocation(line: 67, column: 1, scope: !6530)
!6535 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6530, file: !698, line: 67, type: !703)
!6536 = distinct !DISubprogram(name: "VEC_ira_copy_t_heap_reserve", scope: !698, file: !698, line: 70, type: !6537, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6537 = !DISubroutineType(types: !6538)
!6538 = !{!703, !3106, !703}
!6539 = !DILocalVariable(name: "vec_", arg: 1, scope: !6536, file: !698, line: 70, type: !3106)
!6540 = !DILocation(line: 70, column: 1, scope: !6536)
!6541 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6536, file: !698, line: 70, type: !703)
!6542 = !DILocalVariable(name: "extend", scope: !6536, file: !698, line: 70, type: !703)
!6543 = !DILocation(line: 70, column: 1, scope: !6544)
!6544 = distinct !DILexicalBlock(scope: !6536, file: !698, line: 70, column: 1)
!6545 = distinct !DISubprogram(name: "VEC_ira_copy_t_base_quick_push", scope: !698, file: !698, line: 69, type: !6546, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6546 = !DISubroutineType(types: !6547)
!6547 = !{!2012, !3113, !1878}
!6548 = !DILocalVariable(name: "vec_", arg: 1, scope: !6545, file: !698, line: 69, type: !3113)
!6549 = !DILocation(line: 69, column: 1, scope: !6545)
!6550 = !DILocalVariable(name: "obj_", arg: 2, scope: !6545, file: !698, line: 69, type: !1878)
!6551 = !DILocalVariable(name: "slot_", scope: !6545, file: !698, line: 69, type: !2012)
!6552 = distinct !DISubprogram(name: "VEC_ira_copy_t_base_space", scope: !698, file: !698, line: 69, type: !6553, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6553 = !DISubroutineType(types: !6554)
!6554 = !{!703, !3113, !703}
!6555 = !DILocalVariable(name: "vec_", arg: 1, scope: !6552, file: !698, line: 69, type: !3113)
!6556 = !DILocation(line: 69, column: 1, scope: !6552)
!6557 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6552, file: !698, line: 69, type: !703)
!6558 = distinct !DISubprogram(name: "sparseset_bit_p", scope: !3862, file: !3862, line: 81, type: !6559, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6559 = !DISubroutineType(types: !6560)
!6560 = !{!942, !3861, !7}
!6561 = !DILocalVariable(name: "s", arg: 1, scope: !6558, file: !3862, line: 81, type: !3861)
!6562 = !DILocation(line: 81, column: 28, scope: !6558)
!6563 = !DILocalVariable(name: "e", arg: 2, scope: !6558, file: !3862, line: 81, type: !7)
!6564 = !DILocation(line: 81, column: 50, scope: !6558)
!6565 = !DILocalVariable(name: "idx", scope: !6558, file: !3862, line: 83, type: !7)
!6566 = !DILocation(line: 83, column: 22, scope: !6558)
!6567 = !DILocation(line: 85, column: 3, scope: !6558)
!6568 = !DILocation(line: 87, column: 9, scope: !6558)
!6569 = !DILocation(line: 87, column: 12, scope: !6558)
!6570 = !DILocation(line: 87, column: 19, scope: !6558)
!6571 = !DILocation(line: 87, column: 7, scope: !6558)
!6572 = !DILocation(line: 89, column: 10, scope: !6558)
!6573 = !DILocation(line: 89, column: 16, scope: !6558)
!6574 = !DILocation(line: 89, column: 19, scope: !6558)
!6575 = !DILocation(line: 89, column: 14, scope: !6558)
!6576 = !DILocation(line: 89, column: 27, scope: !6558)
!6577 = !DILocation(line: 89, column: 30, scope: !6558)
!6578 = !DILocation(line: 89, column: 33, scope: !6558)
!6579 = !DILocation(line: 89, column: 39, scope: !6558)
!6580 = !DILocation(line: 89, column: 47, scope: !6558)
!6581 = !DILocation(line: 89, column: 44, scope: !6558)
!6582 = !DILocation(line: 0, scope: !6558)
!6583 = !DILocation(line: 89, column: 3, scope: !6558)
!6584 = distinct !DISubprogram(name: "sparseset_insert_bit", scope: !3862, file: !3862, line: 96, type: !6585, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6585 = !DISubroutineType(types: !6586)
!6586 = !{null, !3861, !7, !7}
!6587 = !DILocalVariable(name: "s", arg: 1, scope: !6584, file: !3862, line: 96, type: !3861)
!6588 = !DILocation(line: 96, column: 33, scope: !6584)
!6589 = !DILocalVariable(name: "e", arg: 2, scope: !6584, file: !3862, line: 96, type: !7)
!6590 = !DILocation(line: 96, column: 55, scope: !6584)
!6591 = !DILocalVariable(name: "idx", arg: 3, scope: !6584, file: !3862, line: 96, type: !7)
!6592 = !DILocation(line: 96, column: 77, scope: !6584)
!6593 = !DILocation(line: 98, column: 18, scope: !6584)
!6594 = !DILocation(line: 98, column: 3, scope: !6584)
!6595 = !DILocation(line: 98, column: 6, scope: !6584)
!6596 = !DILocation(line: 98, column: 13, scope: !6584)
!6597 = !DILocation(line: 98, column: 16, scope: !6584)
!6598 = !DILocation(line: 99, column: 19, scope: !6584)
!6599 = !DILocation(line: 99, column: 3, scope: !6584)
!6600 = !DILocation(line: 99, column: 6, scope: !6584)
!6601 = !DILocation(line: 99, column: 12, scope: !6584)
!6602 = !DILocation(line: 99, column: 17, scope: !6584)
!6603 = !DILocation(line: 100, column: 1, scope: !6584)
!6604 = distinct !DISubprogram(name: "compress_allocno_conflict_vec", scope: !3, file: !3, line: 694, type: !2346, scopeLine: 695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6605 = !DILocalVariable(name: "a", arg: 1, scope: !6604, file: !3, line: 694, type: !697)
!6606 = !DILocation(line: 694, column: 46, scope: !6604)
!6607 = !DILocalVariable(name: "vec", scope: !6604, file: !3, line: 696, type: !1858)
!6608 = !DILocation(line: 696, column: 18, scope: !6604)
!6609 = !DILocalVariable(name: "conflict_a", scope: !6604, file: !3, line: 696, type: !697)
!6610 = !DILocation(line: 696, column: 23, scope: !6604)
!6611 = !DILocalVariable(name: "i", scope: !6604, file: !3, line: 697, type: !703)
!6612 = !DILocation(line: 697, column: 7, scope: !6604)
!6613 = !DILocalVariable(name: "j", scope: !6604, file: !3, line: 697, type: !703)
!6614 = !DILocation(line: 697, column: 10, scope: !6604)
!6615 = !DILocation(line: 700, column: 27, scope: !6604)
!6616 = !DILocation(line: 700, column: 9, scope: !6604)
!6617 = !DILocation(line: 700, column: 7, scope: !6604)
!6618 = !DILocation(line: 701, column: 35, scope: !6604)
!6619 = !DILocation(line: 702, column: 14, scope: !6620)
!6620 = distinct !DILexicalBlock(scope: !6604, file: !3, line: 702, column: 3)
!6621 = !DILocation(line: 702, column: 10, scope: !6620)
!6622 = !DILocation(line: 702, column: 8, scope: !6620)
!6623 = !DILocation(line: 702, column: 33, scope: !6624)
!6624 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 702, column: 3)
!6625 = !DILocation(line: 702, column: 37, scope: !6624)
!6626 = !DILocation(line: 702, column: 31, scope: !6624)
!6627 = !DILocation(line: 702, column: 41, scope: !6624)
!6628 = !DILocation(line: 702, column: 3, scope: !6620)
!6629 = !DILocation(line: 704, column: 11, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6631, file: !3, line: 704, column: 11)
!6631 = distinct !DILexicalBlock(scope: !6624, file: !3, line: 703, column: 5)
!6632 = !DILocation(line: 704, column: 34, scope: !6630)
!6633 = !DILocation(line: 705, column: 7, scope: !6630)
!6634 = !DILocation(line: 705, column: 4, scope: !6630)
!6635 = !DILocation(line: 704, column: 11, scope: !6631)
!6636 = !DILocation(line: 708, column: 8, scope: !6637)
!6637 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 706, column: 2)
!6638 = !DILocation(line: 707, column: 4, scope: !6637)
!6639 = !DILocation(line: 707, column: 27, scope: !6637)
!6640 = !DILocation(line: 708, column: 6, scope: !6637)
!6641 = !DILocation(line: 709, column: 15, scope: !6637)
!6642 = !DILocation(line: 709, column: 4, scope: !6637)
!6643 = !DILocation(line: 709, column: 9, scope: !6637)
!6644 = !DILocation(line: 709, column: 13, scope: !6637)
!6645 = !DILocation(line: 710, column: 2, scope: !6637)
!6646 = !DILocation(line: 711, column: 5, scope: !6631)
!6647 = !DILocation(line: 702, column: 51, scope: !6624)
!6648 = !DILocation(line: 702, column: 3, scope: !6624)
!6649 = distinct !{!6649, !6628, !6650}
!6650 = !DILocation(line: 711, column: 5, scope: !6620)
!6651 = !DILocation(line: 712, column: 39, scope: !6604)
!6652 = !DILocation(line: 712, column: 3, scope: !6604)
!6653 = !DILocation(line: 712, column: 37, scope: !6604)
!6654 = !DILocation(line: 713, column: 3, scope: !6604)
!6655 = !DILocation(line: 713, column: 7, scope: !6604)
!6656 = !DILocation(line: 713, column: 10, scope: !6604)
!6657 = !DILocation(line: 714, column: 1, scope: !6604)
!6658 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !135, file: !135, line: 85, type: !6659, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6659 = !DISubroutineType(types: !6660)
!6660 = !{!703, !6351, !7, !6661}
!6661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1156, size: 64)
!6662 = !DILocalVariable(name: "vec_", arg: 1, scope: !6658, file: !135, line: 85, type: !6351)
!6663 = !DILocation(line: 85, column: 1, scope: !6658)
!6664 = !DILocalVariable(name: "ix_", arg: 2, scope: !6658, file: !135, line: 85, type: !7)
!6665 = !DILocalVariable(name: "ptr", arg: 3, scope: !6658, file: !135, line: 85, type: !6661)
!6666 = !DILocation(line: 85, column: 1, scope: !6667)
!6667 = distinct !DILexicalBlock(scope: !6658, file: !135, line: 85, column: 1)
!6668 = !DILocation(line: 85, column: 1, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6667, file: !135, line: 85, column: 1)
!6670 = !DILocation(line: 85, column: 1, scope: !6671)
!6671 = distinct !DILexicalBlock(scope: !6667, file: !135, line: 85, column: 1)
!6672 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_alloc", scope: !698, file: !698, line: 68, type: !6673, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6673 = !DISubroutineType(types: !6674)
!6674 = !{!1943, !703}
!6675 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6672, file: !698, line: 68, type: !703)
!6676 = !DILocation(line: 68, column: 1, scope: !6672)
!6677 = distinct !DISubprogram(name: "VEC_ira_copy_t_heap_alloc", scope: !698, file: !698, line: 70, type: !6678, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6678 = !DISubroutineType(types: !6679)
!6679 = !{!1956, !703}
!6680 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6677, file: !698, line: 70, type: !703)
!6681 = !DILocation(line: 70, column: 1, scope: !6677)
!6682 = distinct !DISubprogram(name: "ei_start_1", scope: !148, file: !148, line: 696, type: !6683, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6683 = !DISubroutineType(types: !6684)
!6684 = !{!5238, !5243}
!6685 = !DILocalVariable(name: "ev", arg: 1, scope: !6682, file: !148, line: 696, type: !5243)
!6686 = !DILocation(line: 696, column: 28, scope: !6682)
!6687 = !DILocalVariable(name: "i", scope: !6682, file: !148, line: 698, type: !5238)
!6688 = !DILocation(line: 698, column: 17, scope: !6682)
!6689 = !DILocation(line: 700, column: 5, scope: !6682)
!6690 = !DILocation(line: 700, column: 11, scope: !6682)
!6691 = !DILocation(line: 701, column: 17, scope: !6682)
!6692 = !DILocation(line: 701, column: 5, scope: !6682)
!6693 = !DILocation(line: 701, column: 15, scope: !6682)
!6694 = !DILocation(line: 703, column: 3, scope: !6682)
!6695 = distinct !DISubprogram(name: "ei_cond", scope: !148, file: !148, line: 771, type: !6696, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6696 = !DISubroutineType(types: !6697)
!6697 = !{!942, !5238, !6698}
!6698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1104, size: 64)
!6699 = !DILocalVariable(name: "ei", arg: 1, scope: !6695, file: !148, line: 771, type: !5238)
!6700 = !DILocation(line: 771, column: 24, scope: !6695)
!6701 = !DILocalVariable(name: "p", arg: 2, scope: !6695, file: !148, line: 771, type: !6698)
!6702 = !DILocation(line: 771, column: 34, scope: !6695)
!6703 = !DILocation(line: 773, column: 8, scope: !6704)
!6704 = distinct !DILexicalBlock(scope: !6695, file: !148, line: 773, column: 7)
!6705 = !DILocation(line: 773, column: 7, scope: !6695)
!6706 = !DILocation(line: 775, column: 12, scope: !6707)
!6707 = distinct !DILexicalBlock(scope: !6704, file: !148, line: 774, column: 5)
!6708 = !DILocation(line: 775, column: 8, scope: !6707)
!6709 = !DILocation(line: 775, column: 10, scope: !6707)
!6710 = !DILocation(line: 776, column: 7, scope: !6707)
!6711 = !DILocation(line: 780, column: 8, scope: !6712)
!6712 = distinct !DILexicalBlock(scope: !6704, file: !148, line: 779, column: 5)
!6713 = !DILocation(line: 780, column: 10, scope: !6712)
!6714 = !DILocation(line: 781, column: 7, scope: !6712)
!6715 = !DILocation(line: 783, column: 1, scope: !6695)
!6716 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !148, file: !148, line: 150, type: !6717, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6717 = !DISubroutineType(types: !6718)
!6718 = !{!7, !6719}
!6719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6720, size: 64)
!6720 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1097)
!6721 = !DILocalVariable(name: "vec_", arg: 1, scope: !6716, file: !148, line: 150, type: !6719)
!6722 = !DILocation(line: 150, column: 1, scope: !6716)
!6723 = distinct !DISubprogram(name: "ei_next", scope: !148, file: !148, line: 736, type: !6724, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6724 = !DISubroutineType(types: !6725)
!6725 = !{null, !6726}
!6726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5238, size: 64)
!6727 = !DILocalVariable(name: "i", arg: 1, scope: !6723, file: !148, line: 736, type: !6726)
!6728 = !DILocation(line: 736, column: 25, scope: !6723)
!6729 = !DILocation(line: 738, column: 3, scope: !6723)
!6730 = !DILocation(line: 739, column: 3, scope: !6723)
!6731 = !DILocation(line: 739, column: 6, scope: !6723)
!6732 = !DILocation(line: 739, column: 11, scope: !6723)
!6733 = !DILocation(line: 740, column: 1, scope: !6723)
!6734 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !148, file: !148, line: 150, type: !6735, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6735 = !DISubroutineType(types: !6736)
!6736 = !{!703, !6719, !7, !6698}
!6737 = !DILocalVariable(name: "vec_", arg: 1, scope: !6734, file: !148, line: 150, type: !6719)
!6738 = !DILocation(line: 150, column: 1, scope: !6734)
!6739 = !DILocalVariable(name: "ix_", arg: 2, scope: !6734, file: !148, line: 150, type: !7)
!6740 = !DILocalVariable(name: "ptr", arg: 3, scope: !6734, file: !148, line: 150, type: !6698)
!6741 = !DILocation(line: 150, column: 1, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6734, file: !148, line: 150, column: 1)
!6743 = !DILocation(line: 150, column: 1, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6742, file: !148, line: 150, column: 1)
!6745 = !DILocation(line: 150, column: 1, scope: !6746)
!6746 = distinct !DILexicalBlock(scope: !6742, file: !148, line: 150, column: 1)
!6747 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !148, file: !148, line: 152, type: !6748, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6748 = !DISubroutineType(types: !6749)
!6749 = !{null, !6750}
!6750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5248, size: 64)
!6751 = !DILocalVariable(name: "vec_", arg: 1, scope: !6747, file: !148, line: 152, type: !6750)
!6752 = !DILocation(line: 152, column: 1, scope: !6747)
!6753 = !DILocation(line: 152, column: 1, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6747, file: !148, line: 152, column: 1)
!6755 = distinct !DISubprogram(name: "ei_end_p", scope: !148, file: !148, line: 721, type: !6756, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6756 = !DISubroutineType(types: !6757)
!6757 = !{!942, !5238}
!6758 = !DILocalVariable(name: "i", arg: 1, scope: !6755, file: !148, line: 721, type: !5238)
!6759 = !DILocation(line: 721, column: 25, scope: !6755)
!6760 = !DILocation(line: 723, column: 13, scope: !6755)
!6761 = !DILocation(line: 723, column: 22, scope: !6755)
!6762 = !DILocation(line: 723, column: 19, scope: !6755)
!6763 = !DILocation(line: 723, column: 10, scope: !6755)
!6764 = !DILocation(line: 723, column: 3, scope: !6755)
!6765 = distinct !DISubprogram(name: "ei_edge", scope: !148, file: !148, line: 752, type: !6766, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6766 = !DISubroutineType(types: !6767)
!6767 = !{!1104, !5238}
!6768 = !DILocalVariable(name: "i", arg: 1, scope: !6765, file: !148, line: 752, type: !5238)
!6769 = !DILocation(line: 752, column: 24, scope: !6765)
!6770 = !DILocation(line: 754, column: 10, scope: !6765)
!6771 = !DILocation(line: 754, column: 3, scope: !6765)
!6772 = distinct !DISubprogram(name: "ei_container", scope: !148, file: !148, line: 685, type: !6773, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6773 = !DISubroutineType(types: !6774)
!6774 = !{!1092, !5238}
!6775 = !DILocalVariable(name: "i", arg: 1, scope: !6772, file: !148, line: 685, type: !5238)
!6776 = !DILocation(line: 685, column: 29, scope: !6772)
!6777 = !DILocation(line: 687, column: 3, scope: !6772)
!6778 = !DILocation(line: 688, column: 13, scope: !6772)
!6779 = !DILocation(line: 688, column: 10, scope: !6772)
!6780 = !DILocation(line: 688, column: 3, scope: !6772)
!6781 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !148, file: !148, line: 150, type: !6782, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6782 = !DISubroutineType(types: !6783)
!6783 = !{!1104, !6719, !7}
!6784 = !DILocalVariable(name: "vec_", arg: 1, scope: !6781, file: !148, line: 150, type: !6719)
!6785 = !DILocation(line: 150, column: 1, scope: !6781)
!6786 = !DILocalVariable(name: "ix_", arg: 2, scope: !6781, file: !148, line: 150, type: !7)
!6787 = !DILocation(line: 0, scope: !6781)
!6788 = distinct !DISubprogram(name: "loop_outer", scope: !135, file: !135, line: 434, type: !6789, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6789 = !DISubroutineType(types: !6790)
!6790 = !{!1129, !6791}
!6791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6792, size: 64)
!6792 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1130)
!6793 = !DILocalVariable(name: "loop", arg: 1, scope: !6788, file: !135, line: 434, type: !6791)
!6794 = !DILocation(line: 434, column: 32, scope: !6788)
!6795 = !DILocalVariable(name: "n", scope: !6788, file: !135, line: 436, type: !7)
!6796 = !DILocation(line: 436, column: 12, scope: !6788)
!6797 = !DILocation(line: 436, column: 16, scope: !6788)
!6798 = !DILocation(line: 438, column: 7, scope: !6799)
!6799 = distinct !DILexicalBlock(scope: !6788, file: !135, line: 438, column: 7)
!6800 = !DILocation(line: 438, column: 9, scope: !6799)
!6801 = !DILocation(line: 438, column: 7, scope: !6788)
!6802 = !DILocation(line: 439, column: 5, scope: !6799)
!6803 = !DILocation(line: 441, column: 10, scope: !6788)
!6804 = !DILocation(line: 441, column: 3, scope: !6788)
!6805 = !DILocation(line: 442, column: 1, scope: !6788)
!6806 = distinct !DISubprogram(name: "add_loop_to_tree", scope: !3, file: !3, line: 228, type: !6807, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6807 = !DISubroutineType(types: !6808)
!6808 = !{null, !1129}
!6809 = !DILocalVariable(name: "loop", arg: 1, scope: !6806, file: !3, line: 228, type: !1129)
!6810 = !DILocation(line: 228, column: 32, scope: !6806)
!6811 = !DILocalVariable(name: "parent", scope: !6806, file: !3, line: 230, type: !1129)
!6812 = !DILocation(line: 230, column: 16, scope: !6806)
!6813 = !DILocalVariable(name: "loop_node", scope: !6806, file: !3, line: 231, type: !1844)
!6814 = !DILocation(line: 231, column: 24, scope: !6806)
!6815 = !DILocalVariable(name: "parent_node", scope: !6806, file: !3, line: 231, type: !1844)
!6816 = !DILocation(line: 231, column: 35, scope: !6806)
!6817 = !DILocation(line: 236, column: 19, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6806, file: !3, line: 236, column: 7)
!6819 = !DILocation(line: 236, column: 7, scope: !6818)
!6820 = !DILocation(line: 236, column: 25, scope: !6818)
!6821 = !DILocation(line: 236, column: 7, scope: !6806)
!6822 = !DILocation(line: 237, column: 35, scope: !6818)
!6823 = !DILocation(line: 237, column: 23, scope: !6818)
!6824 = !DILocation(line: 237, column: 5, scope: !6818)
!6825 = !DILocation(line: 238, column: 7, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6806, file: !3, line: 238, column: 7)
!6827 = !DILocation(line: 238, column: 22, scope: !6826)
!6828 = !DILocation(line: 238, column: 28, scope: !6826)
!6829 = !DILocation(line: 238, column: 33, scope: !6826)
!6830 = !DILocation(line: 238, column: 51, scope: !6826)
!6831 = !DILocation(line: 239, column: 7, scope: !6826)
!6832 = !DILocation(line: 239, column: 10, scope: !6826)
!6833 = !DILocation(line: 239, column: 25, scope: !6826)
!6834 = !DILocation(line: 239, column: 31, scope: !6826)
!6835 = !DILocation(line: 239, column: 36, scope: !6826)
!6836 = !DILocation(line: 239, column: 45, scope: !6826)
!6837 = !DILocation(line: 238, column: 7, scope: !6806)
!6838 = !DILocation(line: 242, column: 20, scope: !6839)
!6839 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 240, column: 5)
!6840 = !DILocation(line: 242, column: 35, scope: !6839)
!6841 = !DILocation(line: 242, column: 41, scope: !6839)
!6842 = !DILocation(line: 242, column: 17, scope: !6839)
!6843 = !DILocation(line: 243, column: 25, scope: !6839)
!6844 = !DILocation(line: 243, column: 7, scope: !6839)
!6845 = !DILocation(line: 243, column: 18, scope: !6839)
!6846 = !DILocation(line: 243, column: 23, scope: !6839)
!6847 = !DILocation(line: 244, column: 7, scope: !6839)
!6848 = !DILocation(line: 244, column: 18, scope: !6839)
!6849 = !DILocation(line: 244, column: 21, scope: !6839)
!6850 = !DILocation(line: 245, column: 33, scope: !6851)
!6851 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 245, column: 7)
!6852 = !DILocation(line: 245, column: 21, scope: !6851)
!6853 = !DILocation(line: 245, column: 19, scope: !6851)
!6854 = !DILocation(line: 245, column: 12, scope: !6851)
!6855 = !DILocation(line: 246, column: 5, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6851, file: !3, line: 245, column: 7)
!6857 = !DILocation(line: 246, column: 12, scope: !6856)
!6858 = !DILocation(line: 245, column: 7, scope: !6851)
!6859 = !DILocation(line: 248, column: 6, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 248, column: 6)
!6861 = !DILocation(line: 248, column: 21, scope: !6860)
!6862 = !DILocation(line: 248, column: 29, scope: !6860)
!6863 = !DILocation(line: 248, column: 34, scope: !6860)
!6864 = !DILocation(line: 248, column: 52, scope: !6860)
!6865 = !DILocation(line: 248, column: 6, scope: !6856)
!6866 = !DILocation(line: 249, column: 4, scope: !6860)
!6867 = !DILocation(line: 248, column: 55, scope: !6860)
!6868 = !DILocation(line: 247, column: 26, scope: !6856)
!6869 = !DILocation(line: 247, column: 14, scope: !6856)
!6870 = !DILocation(line: 247, column: 12, scope: !6856)
!6871 = !DILocation(line: 245, column: 7, scope: !6856)
!6872 = distinct !{!6872, !6858, !6873}
!6873 = !DILocation(line: 249, column: 4, scope: !6851)
!6874 = !DILocation(line: 250, column: 11, scope: !6875)
!6875 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 250, column: 11)
!6876 = !DILocation(line: 250, column: 18, scope: !6875)
!6877 = !DILocation(line: 250, column: 11, scope: !6839)
!6878 = !DILocation(line: 252, column: 4, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6875, file: !3, line: 251, column: 2)
!6880 = !DILocation(line: 252, column: 15, scope: !6879)
!6881 = !DILocation(line: 252, column: 20, scope: !6879)
!6882 = !DILocation(line: 253, column: 4, scope: !6879)
!6883 = !DILocation(line: 253, column: 15, scope: !6879)
!6884 = !DILocation(line: 253, column: 28, scope: !6879)
!6885 = !DILocation(line: 254, column: 4, scope: !6879)
!6886 = !DILocation(line: 254, column: 15, scope: !6879)
!6887 = !DILocation(line: 254, column: 22, scope: !6879)
!6888 = !DILocation(line: 255, column: 2, scope: !6879)
!6889 = !DILocation(line: 258, column: 19, scope: !6890)
!6890 = distinct !DILexicalBlock(scope: !6875, file: !3, line: 257, column: 2)
!6891 = !DILocation(line: 258, column: 34, scope: !6890)
!6892 = !DILocation(line: 258, column: 42, scope: !6890)
!6893 = !DILocation(line: 258, column: 16, scope: !6890)
!6894 = !DILocation(line: 259, column: 22, scope: !6890)
!6895 = !DILocation(line: 259, column: 35, scope: !6890)
!6896 = !DILocation(line: 259, column: 4, scope: !6890)
!6897 = !DILocation(line: 259, column: 15, scope: !6890)
!6898 = !DILocation(line: 259, column: 20, scope: !6890)
!6899 = !DILocation(line: 260, column: 28, scope: !6890)
!6900 = !DILocation(line: 260, column: 4, scope: !6890)
!6901 = !DILocation(line: 260, column: 17, scope: !6890)
!6902 = !DILocation(line: 260, column: 26, scope: !6890)
!6903 = !DILocation(line: 261, column: 30, scope: !6890)
!6904 = !DILocation(line: 261, column: 43, scope: !6890)
!6905 = !DILocation(line: 261, column: 4, scope: !6890)
!6906 = !DILocation(line: 261, column: 15, scope: !6890)
!6907 = !DILocation(line: 261, column: 28, scope: !6890)
!6908 = !DILocation(line: 262, column: 28, scope: !6890)
!6909 = !DILocation(line: 262, column: 4, scope: !6890)
!6910 = !DILocation(line: 262, column: 17, scope: !6890)
!6911 = !DILocation(line: 262, column: 26, scope: !6890)
!6912 = !DILocation(line: 263, column: 24, scope: !6890)
!6913 = !DILocation(line: 263, column: 4, scope: !6890)
!6914 = !DILocation(line: 263, column: 15, scope: !6890)
!6915 = !DILocation(line: 263, column: 22, scope: !6890)
!6916 = !DILocation(line: 265, column: 5, scope: !6839)
!6917 = !DILocation(line: 266, column: 1, scope: !6806)
!6918 = distinct !DISubprogram(name: "setup_loop_tree_level", scope: !3, file: !3, line: 272, type: !6919, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6919 = !DISubroutineType(types: !6920)
!6920 = !{!703, !1844, !703}
!6921 = !DILocalVariable(name: "loop_node", arg: 1, scope: !6918, file: !3, line: 272, type: !1844)
!6922 = !DILocation(line: 272, column: 45, scope: !6918)
!6923 = !DILocalVariable(name: "level", arg: 2, scope: !6918, file: !3, line: 272, type: !703)
!6924 = !DILocation(line: 272, column: 60, scope: !6918)
!6925 = !DILocalVariable(name: "height", scope: !6918, file: !3, line: 274, type: !703)
!6926 = !DILocation(line: 274, column: 7, scope: !6918)
!6927 = !DILocalVariable(name: "max_height", scope: !6918, file: !3, line: 274, type: !703)
!6928 = !DILocation(line: 274, column: 15, scope: !6918)
!6929 = !DILocalVariable(name: "subloop_node", scope: !6918, file: !3, line: 275, type: !1844)
!6930 = !DILocation(line: 275, column: 24, scope: !6918)
!6931 = !DILocation(line: 278, column: 22, scope: !6918)
!6932 = !DILocation(line: 278, column: 3, scope: !6918)
!6933 = !DILocation(line: 278, column: 14, scope: !6918)
!6934 = !DILocation(line: 278, column: 20, scope: !6918)
!6935 = !DILocation(line: 279, column: 16, scope: !6918)
!6936 = !DILocation(line: 279, column: 22, scope: !6918)
!6937 = !DILocation(line: 279, column: 14, scope: !6918)
!6938 = !DILocation(line: 280, column: 23, scope: !6939)
!6939 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 280, column: 3)
!6940 = !DILocation(line: 280, column: 34, scope: !6939)
!6941 = !DILocation(line: 280, column: 21, scope: !6939)
!6942 = !DILocation(line: 280, column: 8, scope: !6939)
!6943 = !DILocation(line: 281, column: 8, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 280, column: 3)
!6945 = !DILocation(line: 281, column: 21, scope: !6944)
!6946 = !DILocation(line: 280, column: 3, scope: !6939)
!6947 = !DILocation(line: 285, column: 39, scope: !6948)
!6948 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 283, column: 5)
!6949 = !DILocation(line: 285, column: 53, scope: !6948)
!6950 = !DILocation(line: 285, column: 59, scope: !6948)
!6951 = !DILocation(line: 285, column: 16, scope: !6948)
!6952 = !DILocation(line: 285, column: 14, scope: !6948)
!6953 = !DILocation(line: 286, column: 11, scope: !6954)
!6954 = distinct !DILexicalBlock(scope: !6948, file: !3, line: 286, column: 11)
!6955 = !DILocation(line: 286, column: 20, scope: !6954)
!6956 = !DILocation(line: 286, column: 18, scope: !6954)
!6957 = !DILocation(line: 286, column: 11, scope: !6948)
!6958 = !DILocation(line: 287, column: 15, scope: !6954)
!6959 = !DILocation(line: 287, column: 13, scope: !6954)
!6960 = !DILocation(line: 287, column: 2, scope: !6954)
!6961 = !DILocation(line: 288, column: 5, scope: !6948)
!6962 = !DILocation(line: 282, column: 23, scope: !6944)
!6963 = !DILocation(line: 282, column: 37, scope: !6944)
!6964 = !DILocation(line: 282, column: 21, scope: !6944)
!6965 = !DILocation(line: 280, column: 3, scope: !6944)
!6966 = distinct !{!6966, !6946, !6967}
!6967 = !DILocation(line: 288, column: 5, scope: !6939)
!6968 = !DILocation(line: 289, column: 10, scope: !6918)
!6969 = !DILocation(line: 289, column: 3, scope: !6918)
!6970 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !135, file: !135, line: 85, type: !6971, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6971 = !DISubroutineType(types: !6972)
!6972 = !{!1156, !6351, !7}
!6973 = !DILocalVariable(name: "vec_", arg: 1, scope: !6970, file: !135, line: 85, type: !6351)
!6974 = !DILocation(line: 85, column: 1, scope: !6970)
!6975 = !DILocalVariable(name: "ix_", arg: 2, scope: !6970, file: !135, line: 85, type: !7)
!6976 = !DILocation(line: 0, scope: !6970)
!6977 = distinct !DISubprogram(name: "create_loop_tree_node_allocnos", scope: !3, file: !3, line: 1538, type: !3706, scopeLine: 1539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6978 = !DILocalVariable(name: "loop_node", arg: 1, scope: !6977, file: !3, line: 1538, type: !1844)
!6979 = !DILocation(line: 1538, column: 54, scope: !6977)
!6980 = !DILocation(line: 1540, column: 7, scope: !6981)
!6981 = distinct !DILexicalBlock(scope: !6977, file: !3, line: 1540, column: 7)
!6982 = !DILocation(line: 1540, column: 18, scope: !6981)
!6983 = !DILocation(line: 1540, column: 21, scope: !6981)
!6984 = !DILocation(line: 1540, column: 7, scope: !6977)
!6985 = !DILocation(line: 1541, column: 25, scope: !6981)
!6986 = !DILocation(line: 1541, column: 5, scope: !6981)
!6987 = !DILocation(line: 1542, column: 12, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6981, file: !3, line: 1542, column: 12)
!6989 = !DILocation(line: 1542, column: 25, scope: !6988)
!6990 = !DILocation(line: 1542, column: 22, scope: !6988)
!6991 = !DILocation(line: 1542, column: 12, scope: !6981)
!6992 = !DILocalVariable(name: "i", scope: !6993, file: !3, line: 1544, type: !703)
!6993 = distinct !DILexicalBlock(scope: !6988, file: !3, line: 1543, column: 5)
!6994 = !DILocation(line: 1544, column: 11, scope: !6993)
!6995 = !DILocalVariable(name: "ei", scope: !6993, file: !3, line: 1545, type: !5238)
!6996 = !DILocation(line: 1545, column: 21, scope: !6993)
!6997 = !DILocalVariable(name: "e", scope: !6993, file: !3, line: 1546, type: !1104)
!6998 = !DILocation(line: 1546, column: 12, scope: !6993)
!6999 = !DILocalVariable(name: "edges", scope: !6993, file: !3, line: 1547, type: !5248)
!7000 = !DILocation(line: 1547, column: 25, scope: !6993)
!7001 = !DILocation(line: 1549, column: 7, scope: !7002)
!7002 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 1549, column: 7)
!7003 = !DILocation(line: 1549, column: 7, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !7002, file: !3, line: 1549, column: 7)
!7005 = !DILocation(line: 1550, column: 6, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !7004, file: !3, line: 1550, column: 6)
!7007 = !DILocation(line: 1550, column: 9, scope: !7006)
!7008 = !DILocation(line: 1550, column: 16, scope: !7006)
!7009 = !DILocation(line: 1550, column: 27, scope: !7006)
!7010 = !DILocation(line: 1550, column: 33, scope: !7006)
!7011 = !DILocation(line: 1550, column: 13, scope: !7006)
!7012 = !DILocation(line: 1550, column: 6, scope: !7004)
!7013 = !DILocation(line: 1551, column: 26, scope: !7006)
!7014 = !DILocation(line: 1551, column: 4, scope: !7006)
!7015 = distinct !{!7015, !7001, !7016}
!7016 = !DILocation(line: 1551, column: 27, scope: !7002)
!7017 = !DILocation(line: 1553, column: 36, scope: !6993)
!7018 = !DILocation(line: 1553, column: 47, scope: !6993)
!7019 = !DILocation(line: 1553, column: 15, scope: !6993)
!7020 = !DILocation(line: 1553, column: 13, scope: !6993)
!7021 = !DILocation(line: 1554, column: 14, scope: !7022)
!7022 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 1554, column: 7)
!7023 = !DILocation(line: 1554, column: 12, scope: !7022)
!7024 = !DILocation(line: 1554, column: 19, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7022, file: !3, line: 1554, column: 7)
!7026 = !DILocation(line: 1554, column: 7, scope: !7022)
!7027 = !DILocation(line: 1555, column: 24, scope: !7025)
!7028 = !DILocation(line: 1555, column: 2, scope: !7025)
!7029 = !DILocation(line: 1554, column: 53, scope: !7025)
!7030 = !DILocation(line: 1554, column: 7, scope: !7025)
!7031 = distinct !{!7031, !7026, !7032}
!7032 = !DILocation(line: 1555, column: 25, scope: !7022)
!7033 = !DILocation(line: 1556, column: 7, scope: !6993)
!7034 = !DILocation(line: 1557, column: 5, scope: !6993)
!7035 = !DILocation(line: 1558, column: 1, scope: !6977)
!7036 = distinct !DISubprogram(name: "propagate_modified_regnos", scope: !3, file: !3, line: 1563, type: !3706, scopeLine: 1564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7037 = !DILocalVariable(name: "loop_tree_node", arg: 1, scope: !7036, file: !3, line: 1563, type: !1844)
!7038 = !DILocation(line: 1563, column: 49, scope: !7036)
!7039 = !DILocation(line: 1565, column: 7, scope: !7040)
!7040 = distinct !DILexicalBlock(scope: !7036, file: !3, line: 1565, column: 7)
!7041 = !DILocation(line: 1565, column: 25, scope: !7040)
!7042 = !DILocation(line: 1565, column: 22, scope: !7040)
!7043 = !DILocation(line: 1565, column: 7, scope: !7036)
!7044 = !DILocation(line: 1566, column: 5, scope: !7040)
!7045 = !DILocation(line: 1568, column: 20, scope: !7036)
!7046 = !DILocation(line: 1568, column: 36, scope: !7036)
!7047 = !DILocation(line: 1568, column: 44, scope: !7036)
!7048 = !DILocation(line: 1569, column: 6, scope: !7036)
!7049 = !DILocation(line: 1569, column: 22, scope: !7036)
!7050 = !DILocation(line: 1568, column: 3, scope: !7036)
!7051 = !DILocation(line: 1570, column: 1, scope: !7036)
!7052 = distinct !DISubprogram(name: "create_bb_allocnos", scope: !3, file: !3, line: 1484, type: !3706, scopeLine: 1485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7053 = !DILocalVariable(name: "bb_node", arg: 1, scope: !7052, file: !3, line: 1484, type: !1844)
!7054 = !DILocation(line: 1484, column: 42, scope: !7052)
!7055 = !DILocalVariable(name: "bb", scope: !7052, file: !3, line: 1486, type: !1087)
!7056 = !DILocation(line: 1486, column: 15, scope: !7052)
!7057 = !DILocalVariable(name: "insn", scope: !7052, file: !3, line: 1487, type: !708)
!7058 = !DILocation(line: 1487, column: 7, scope: !7052)
!7059 = !DILocalVariable(name: "i", scope: !7052, file: !3, line: 1488, type: !7)
!7060 = !DILocation(line: 1488, column: 16, scope: !7052)
!7061 = !DILocalVariable(name: "bi", scope: !7052, file: !3, line: 1489, type: !7062)
!7062 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !767, line: 218, baseType: !7063)
!7063 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !767, line: 203, size: 256, elements: !7064)
!7064 = !{!7065, !7066, !7067, !7068}
!7065 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !7063, file: !767, line: 206, baseType: !770, size: 64)
!7066 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !7063, file: !767, line: 209, baseType: !770, size: 64, offset: 64)
!7067 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !7063, file: !767, line: 212, baseType: !7, size: 32, offset: 128)
!7068 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !7063, file: !767, line: 217, baseType: !780, size: 64, offset: 192)
!7069 = !DILocation(line: 1489, column: 19, scope: !7052)
!7070 = !DILocation(line: 1491, column: 18, scope: !7052)
!7071 = !DILocation(line: 1491, column: 27, scope: !7052)
!7072 = !DILocation(line: 1491, column: 16, scope: !7052)
!7073 = !DILocation(line: 1491, column: 11, scope: !7052)
!7074 = !DILocation(line: 1493, column: 3, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 1493, column: 3)
!7076 = !DILocation(line: 1493, column: 3, scope: !7077)
!7077 = distinct !DILexicalBlock(scope: !7075, file: !3, line: 1493, column: 3)
!7078 = !DILocation(line: 0, scope: !7077)
!7079 = !DILocation(line: 1494, column: 9, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7077, file: !3, line: 1494, column: 9)
!7081 = !DILocation(line: 1494, column: 9, scope: !7077)
!7082 = !DILocation(line: 1495, column: 29, scope: !7080)
!7083 = !DILocation(line: 1495, column: 7, scope: !7080)
!7084 = distinct !{!7084, !7074, !7085}
!7085 = !DILocation(line: 1495, column: 50, scope: !7075)
!7086 = !DILocation(line: 1498, column: 3, scope: !7087)
!7087 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 1498, column: 3)
!7088 = !DILocation(line: 1498, column: 3, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !7087, file: !3, line: 1498, column: 3)
!7090 = !DILocation(line: 1499, column: 9, scope: !7091)
!7091 = distinct !DILexicalBlock(scope: !7089, file: !3, line: 1499, column: 9)
!7092 = !DILocation(line: 1499, column: 36, scope: !7091)
!7093 = !DILocation(line: 1499, column: 39, scope: !7091)
!7094 = !DILocation(line: 1499, column: 9, scope: !7089)
!7095 = !DILocation(line: 1500, column: 27, scope: !7091)
!7096 = !DILocation(line: 1500, column: 37, scope: !7091)
!7097 = !DILocation(line: 1500, column: 7, scope: !7091)
!7098 = !DILocation(line: 1499, column: 42, scope: !7091)
!7099 = distinct !{!7099, !7086, !7100}
!7100 = !DILocation(line: 1500, column: 60, scope: !7087)
!7101 = !DILocation(line: 1501, column: 1, scope: !7052)
!7102 = distinct !DISubprogram(name: "create_loop_allocnos", scope: !3, file: !3, line: 1507, type: !7103, scopeLine: 1508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7103 = !DISubroutineType(types: !7104)
!7104 = !{null, !1104}
!7105 = !DILocalVariable(name: "e", arg: 1, scope: !7102, file: !3, line: 1507, type: !1104)
!7106 = !DILocation(line: 1507, column: 28, scope: !7102)
!7107 = !DILocalVariable(name: "i", scope: !7102, file: !3, line: 1509, type: !7)
!7108 = !DILocation(line: 1509, column: 16, scope: !7102)
!7109 = !DILocalVariable(name: "live_in_regs", scope: !7102, file: !3, line: 1510, type: !1865)
!7110 = !DILocation(line: 1510, column: 10, scope: !7102)
!7111 = !DILocalVariable(name: "border_allocnos", scope: !7102, file: !3, line: 1510, type: !1865)
!7112 = !DILocation(line: 1510, column: 24, scope: !7102)
!7113 = !DILocalVariable(name: "bi", scope: !7102, file: !3, line: 1511, type: !7062)
!7114 = !DILocation(line: 1511, column: 19, scope: !7102)
!7115 = !DILocalVariable(name: "parent", scope: !7102, file: !3, line: 1512, type: !1844)
!7116 = !DILocation(line: 1512, column: 24, scope: !7102)
!7117 = !DILocation(line: 1514, column: 18, scope: !7102)
!7118 = !DILocation(line: 1514, column: 16, scope: !7102)
!7119 = !DILocation(line: 1515, column: 21, scope: !7102)
!7120 = !DILocation(line: 1515, column: 46, scope: !7102)
!7121 = !DILocation(line: 1515, column: 19, scope: !7102)
!7122 = !DILocation(line: 1516, column: 3, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 1516, column: 3)
!7124 = !DILocation(line: 1516, column: 3, scope: !7125)
!7125 = distinct !DILexicalBlock(scope: !7123, file: !3, line: 1516, column: 3)
!7126 = !DILocation(line: 1518, column: 23, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7125, file: !3, line: 1518, column: 9)
!7128 = !DILocation(line: 1518, column: 37, scope: !7127)
!7129 = !DILocation(line: 1518, column: 9, scope: !7127)
!7130 = !DILocation(line: 1518, column: 9, scope: !7125)
!7131 = !DILocation(line: 1520, column: 6, scope: !7132)
!7132 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 1520, column: 6)
!7133 = distinct !DILexicalBlock(scope: !7127, file: !3, line: 1519, column: 7)
!7134 = !DILocation(line: 1520, column: 33, scope: !7132)
!7135 = !DILocation(line: 1520, column: 36, scope: !7132)
!7136 = !DILocation(line: 1520, column: 6, scope: !7133)
!7137 = !DILocation(line: 1524, column: 20, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7139, file: !3, line: 1524, column: 10)
!7139 = distinct !DILexicalBlock(scope: !7132, file: !3, line: 1521, column: 4)
!7140 = !DILocation(line: 1524, column: 45, scope: !7138)
!7141 = !DILocation(line: 1524, column: 18, scope: !7138)
!7142 = !DILocation(line: 1524, column: 53, scope: !7138)
!7143 = !DILocation(line: 1525, column: 3, scope: !7138)
!7144 = !DILocation(line: 1525, column: 6, scope: !7138)
!7145 = !DILocation(line: 1525, column: 14, scope: !7138)
!7146 = !DILocation(line: 1525, column: 32, scope: !7138)
!7147 = !DILocation(line: 1525, column: 35, scope: !7138)
!7148 = !DILocation(line: 1524, column: 10, scope: !7139)
!7149 = !DILocation(line: 1526, column: 28, scope: !7138)
!7150 = !DILocation(line: 1526, column: 38, scope: !7138)
!7151 = !DILocation(line: 1526, column: 8, scope: !7138)
!7152 = !DILocation(line: 1527, column: 26, scope: !7139)
!7153 = !DILocation(line: 1527, column: 36, scope: !7139)
!7154 = !DILocation(line: 1527, column: 6, scope: !7139)
!7155 = !DILocation(line: 1528, column: 4, scope: !7139)
!7156 = !DILocation(line: 1529, column: 18, scope: !7133)
!7157 = !DILocation(line: 1530, column: 4, scope: !7133)
!7158 = !DILocation(line: 1529, column: 2, scope: !7133)
!7159 = !DILocation(line: 1531, column: 7, scope: !7133)
!7160 = !DILocation(line: 1518, column: 38, scope: !7127)
!7161 = distinct !{!7161, !7122, !7162}
!7162 = !DILocation(line: 1531, column: 7, scope: !7123)
!7163 = !DILocation(line: 1532, column: 1, scope: !7102)
!7164 = distinct !DISubprogram(name: "create_insn_allocnos", scope: !3, file: !3, line: 1421, type: !7165, scopeLine: 1422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7165 = !DISubroutineType(types: !7166)
!7166 = !{null, !708, !942}
!7167 = !DILocalVariable(name: "x", arg: 1, scope: !7164, file: !3, line: 1421, type: !708)
!7168 = !DILocation(line: 1421, column: 27, scope: !7164)
!7169 = !DILocalVariable(name: "output_p", arg: 2, scope: !7164, file: !3, line: 1421, type: !942)
!7170 = !DILocation(line: 1421, column: 35, scope: !7164)
!7171 = !DILocalVariable(name: "i", scope: !7164, file: !3, line: 1423, type: !703)
!7172 = !DILocation(line: 1423, column: 7, scope: !7164)
!7173 = !DILocalVariable(name: "j", scope: !7164, file: !3, line: 1423, type: !703)
!7174 = !DILocation(line: 1423, column: 10, scope: !7164)
!7175 = !DILocalVariable(name: "fmt", scope: !7164, file: !3, line: 1424, type: !734)
!7176 = !DILocation(line: 1424, column: 15, scope: !7164)
!7177 = !DILocalVariable(name: "code", scope: !7164, file: !3, line: 1425, type: !420)
!7178 = !DILocation(line: 1425, column: 17, scope: !7164)
!7179 = !DILocation(line: 1425, column: 24, scope: !7164)
!7180 = !DILocation(line: 1427, column: 7, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7164, file: !3, line: 1427, column: 7)
!7182 = !DILocation(line: 1427, column: 12, scope: !7181)
!7183 = !DILocation(line: 1427, column: 7, scope: !7164)
!7184 = !DILocalVariable(name: "regno", scope: !7185, file: !3, line: 1429, type: !703)
!7185 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 1428, column: 5)
!7186 = !DILocation(line: 1429, column: 11, scope: !7185)
!7187 = !DILocation(line: 1431, column: 20, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7185, file: !3, line: 1431, column: 11)
!7189 = !DILocation(line: 1431, column: 18, scope: !7188)
!7190 = !DILocation(line: 1431, column: 31, scope: !7188)
!7191 = !DILocation(line: 1431, column: 11, scope: !7185)
!7192 = !DILocalVariable(name: "a", scope: !7193, file: !3, line: 1433, type: !697)
!7193 = distinct !DILexicalBlock(scope: !7188, file: !3, line: 1432, column: 2)
!7194 = !DILocation(line: 1433, column: 18, scope: !7193)
!7195 = !DILocation(line: 1435, column: 13, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 1435, column: 8)
!7197 = !DILocation(line: 1435, column: 40, scope: !7196)
!7198 = !DILocation(line: 1435, column: 11, scope: !7196)
!7199 = !DILocation(line: 1435, column: 48, scope: !7196)
!7200 = !DILocation(line: 1435, column: 8, scope: !7193)
!7201 = !DILocation(line: 1436, column: 30, scope: !7196)
!7202 = !DILocation(line: 1436, column: 44, scope: !7196)
!7203 = !DILocation(line: 1436, column: 10, scope: !7196)
!7204 = !DILocation(line: 1436, column: 8, scope: !7196)
!7205 = !DILocation(line: 1436, column: 6, scope: !7196)
!7206 = !DILocation(line: 1438, column: 4, scope: !7193)
!7207 = !DILocation(line: 1438, column: 21, scope: !7193)
!7208 = !DILocation(line: 1439, column: 24, scope: !7193)
!7209 = !DILocation(line: 1439, column: 4, scope: !7193)
!7210 = !DILocation(line: 1439, column: 21, scope: !7193)
!7211 = !DILocation(line: 1440, column: 8, scope: !7212)
!7212 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 1440, column: 8)
!7213 = !DILocation(line: 1440, column: 8, scope: !7193)
!7214 = !DILocation(line: 1441, column: 22, scope: !7212)
!7215 = !DILocation(line: 1441, column: 47, scope: !7212)
!7216 = !DILocation(line: 1441, column: 64, scope: !7212)
!7217 = !DILocation(line: 1441, column: 6, scope: !7212)
!7218 = !DILocation(line: 1442, column: 2, scope: !7193)
!7219 = !DILocation(line: 1443, column: 7, scope: !7185)
!7220 = !DILocation(line: 1445, column: 12, scope: !7221)
!7221 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 1445, column: 12)
!7222 = !DILocation(line: 1445, column: 17, scope: !7221)
!7223 = !DILocation(line: 1445, column: 12, scope: !7181)
!7224 = !DILocation(line: 1447, column: 29, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7221, file: !3, line: 1446, column: 5)
!7226 = !DILocation(line: 1447, column: 7, scope: !7225)
!7227 = !DILocation(line: 1448, column: 29, scope: !7225)
!7228 = !DILocation(line: 1448, column: 7, scope: !7225)
!7229 = !DILocation(line: 1449, column: 7, scope: !7225)
!7230 = !DILocation(line: 1451, column: 12, scope: !7231)
!7231 = distinct !DILexicalBlock(scope: !7221, file: !3, line: 1451, column: 12)
!7232 = !DILocation(line: 1451, column: 17, scope: !7231)
!7233 = !DILocation(line: 1451, column: 12, scope: !7221)
!7234 = !DILocation(line: 1453, column: 29, scope: !7235)
!7235 = distinct !DILexicalBlock(scope: !7231, file: !3, line: 1452, column: 5)
!7236 = !DILocation(line: 1453, column: 7, scope: !7235)
!7237 = !DILocation(line: 1454, column: 7, scope: !7235)
!7238 = !DILocation(line: 1456, column: 12, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7231, file: !3, line: 1456, column: 12)
!7240 = !DILocation(line: 1456, column: 17, scope: !7239)
!7241 = !DILocation(line: 1456, column: 12, scope: !7231)
!7242 = !DILocation(line: 1458, column: 29, scope: !7243)
!7243 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 1457, column: 5)
!7244 = !DILocation(line: 1458, column: 7, scope: !7243)
!7245 = !DILocation(line: 1459, column: 7, scope: !7243)
!7246 = !DILocation(line: 1461, column: 12, scope: !7247)
!7247 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 1461, column: 12)
!7248 = !DILocation(line: 1461, column: 17, scope: !7247)
!7249 = !DILocation(line: 1461, column: 28, scope: !7247)
!7250 = !DILocation(line: 1461, column: 31, scope: !7247)
!7251 = !DILocation(line: 1461, column: 36, scope: !7247)
!7252 = !DILocation(line: 1461, column: 48, scope: !7247)
!7253 = !DILocation(line: 1461, column: 51, scope: !7247)
!7254 = !DILocation(line: 1461, column: 56, scope: !7247)
!7255 = !DILocation(line: 1461, column: 67, scope: !7247)
!7256 = !DILocation(line: 1462, column: 5, scope: !7247)
!7257 = !DILocation(line: 1462, column: 10, scope: !7247)
!7258 = !DILocation(line: 1462, column: 22, scope: !7247)
!7259 = !DILocation(line: 1462, column: 25, scope: !7247)
!7260 = !DILocation(line: 1462, column: 30, scope: !7247)
!7261 = !DILocation(line: 1462, column: 45, scope: !7247)
!7262 = !DILocation(line: 1462, column: 48, scope: !7247)
!7263 = !DILocation(line: 1462, column: 53, scope: !7247)
!7264 = !DILocation(line: 1461, column: 12, scope: !7239)
!7265 = !DILocation(line: 1464, column: 29, scope: !7266)
!7266 = distinct !DILexicalBlock(scope: !7247, file: !3, line: 1463, column: 5)
!7267 = !DILocation(line: 1464, column: 7, scope: !7266)
!7268 = !DILocation(line: 1465, column: 29, scope: !7266)
!7269 = !DILocation(line: 1465, column: 7, scope: !7266)
!7270 = !DILocation(line: 1466, column: 7, scope: !7266)
!7271 = !DILocation(line: 1469, column: 9, scope: !7164)
!7272 = !DILocation(line: 1469, column: 7, scope: !7164)
!7273 = !DILocation(line: 1470, column: 12, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !7164, file: !3, line: 1470, column: 3)
!7275 = !DILocation(line: 1470, column: 34, scope: !7274)
!7276 = !DILocation(line: 1470, column: 10, scope: !7274)
!7277 = !DILocation(line: 1470, column: 8, scope: !7274)
!7278 = !DILocation(line: 1470, column: 39, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7274, file: !3, line: 1470, column: 3)
!7280 = !DILocation(line: 1470, column: 41, scope: !7279)
!7281 = !DILocation(line: 1470, column: 3, scope: !7274)
!7282 = !DILocation(line: 1472, column: 11, scope: !7283)
!7283 = distinct !DILexicalBlock(scope: !7284, file: !3, line: 1472, column: 11)
!7284 = distinct !DILexicalBlock(scope: !7279, file: !3, line: 1471, column: 5)
!7285 = !DILocation(line: 1472, column: 15, scope: !7283)
!7286 = !DILocation(line: 1472, column: 18, scope: !7283)
!7287 = !DILocation(line: 1472, column: 11, scope: !7284)
!7288 = !DILocation(line: 1473, column: 24, scope: !7283)
!7289 = !DILocation(line: 1473, column: 37, scope: !7283)
!7290 = !DILocation(line: 1473, column: 2, scope: !7283)
!7291 = !DILocation(line: 1474, column: 16, scope: !7292)
!7292 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 1474, column: 16)
!7293 = !DILocation(line: 1474, column: 20, scope: !7292)
!7294 = !DILocation(line: 1474, column: 23, scope: !7292)
!7295 = !DILocation(line: 1474, column: 16, scope: !7283)
!7296 = !DILocation(line: 1475, column: 9, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7292, file: !3, line: 1475, column: 2)
!7298 = !DILocation(line: 1475, column: 7, scope: !7297)
!7299 = !DILocation(line: 1475, column: 14, scope: !7300)
!7300 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 1475, column: 2)
!7301 = !DILocation(line: 1475, column: 18, scope: !7300)
!7302 = !DILocation(line: 1475, column: 16, scope: !7300)
!7303 = !DILocation(line: 1475, column: 2, scope: !7297)
!7304 = !DILocation(line: 1476, column: 26, scope: !7300)
!7305 = !DILocation(line: 1476, column: 45, scope: !7300)
!7306 = !DILocation(line: 1476, column: 4, scope: !7300)
!7307 = !DILocation(line: 1475, column: 35, scope: !7300)
!7308 = !DILocation(line: 1475, column: 2, scope: !7300)
!7309 = distinct !{!7309, !7303, !7310}
!7310 = !DILocation(line: 1476, column: 53, scope: !7297)
!7311 = !DILocation(line: 1477, column: 5, scope: !7284)
!7312 = !DILocation(line: 1470, column: 48, scope: !7279)
!7313 = !DILocation(line: 1470, column: 3, scope: !7279)
!7314 = distinct !{!7314, !7281, !7315}
!7315 = !DILocation(line: 1477, column: 5, scope: !7274)
!7316 = !DILocation(line: 1478, column: 1, scope: !7164)
!7317 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !767, file: !767, line: 224, type: !7318, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7318 = !DISubroutineType(types: !7319)
!7319 = !{null, !7320, !7321, !7, !3867}
!7320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7062, size: 64)
!7321 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !709, line: 48, baseType: !7322)
!7322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7323, size: 64)
!7323 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !766)
!7324 = !DILocalVariable(name: "bi", arg: 1, scope: !7317, file: !767, line: 224, type: !7320)
!7325 = !DILocation(line: 224, column: 37, scope: !7317)
!7326 = !DILocalVariable(name: "map", arg: 2, scope: !7317, file: !767, line: 224, type: !7321)
!7327 = !DILocation(line: 224, column: 54, scope: !7317)
!7328 = !DILocalVariable(name: "start_bit", arg: 3, scope: !7317, file: !767, line: 225, type: !7)
!7329 = !DILocation(line: 225, column: 15, scope: !7317)
!7330 = !DILocalVariable(name: "bit_no", arg: 4, scope: !7317, file: !767, line: 225, type: !3867)
!7331 = !DILocation(line: 225, column: 36, scope: !7317)
!7332 = !DILocation(line: 227, column: 14, scope: !7317)
!7333 = !DILocation(line: 227, column: 19, scope: !7317)
!7334 = !DILocation(line: 227, column: 3, scope: !7317)
!7335 = !DILocation(line: 227, column: 7, scope: !7317)
!7336 = !DILocation(line: 227, column: 12, scope: !7317)
!7337 = !DILocation(line: 228, column: 3, scope: !7317)
!7338 = !DILocation(line: 228, column: 7, scope: !7317)
!7339 = !DILocation(line: 228, column: 12, scope: !7317)
!7340 = !DILocation(line: 231, column: 3, scope: !7317)
!7341 = !DILocation(line: 233, column: 12, scope: !7342)
!7342 = distinct !DILexicalBlock(scope: !7343, file: !767, line: 233, column: 11)
!7343 = distinct !DILexicalBlock(scope: !7317, file: !767, line: 232, column: 5)
!7344 = !DILocation(line: 233, column: 16, scope: !7342)
!7345 = !DILocation(line: 233, column: 11, scope: !7343)
!7346 = !DILocation(line: 235, column: 4, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7342, file: !767, line: 234, column: 2)
!7348 = !DILocation(line: 235, column: 8, scope: !7347)
!7349 = !DILocation(line: 235, column: 13, scope: !7347)
!7350 = !DILocation(line: 236, column: 4, scope: !7347)
!7351 = !DILocation(line: 239, column: 11, scope: !7352)
!7352 = distinct !DILexicalBlock(scope: !7343, file: !767, line: 239, column: 11)
!7353 = !DILocation(line: 239, column: 15, scope: !7352)
!7354 = !DILocation(line: 239, column: 21, scope: !7352)
!7355 = !DILocation(line: 239, column: 29, scope: !7352)
!7356 = !DILocation(line: 239, column: 39, scope: !7352)
!7357 = !DILocation(line: 239, column: 26, scope: !7352)
!7358 = !DILocation(line: 239, column: 11, scope: !7343)
!7359 = !DILocation(line: 240, column: 2, scope: !7352)
!7360 = !DILocation(line: 241, column: 18, scope: !7343)
!7361 = !DILocation(line: 241, column: 22, scope: !7343)
!7362 = !DILocation(line: 241, column: 28, scope: !7343)
!7363 = !DILocation(line: 241, column: 7, scope: !7343)
!7364 = !DILocation(line: 241, column: 11, scope: !7343)
!7365 = !DILocation(line: 241, column: 16, scope: !7343)
!7366 = distinct !{!7366, !7340, !7367}
!7367 = !DILocation(line: 242, column: 5, scope: !7317)
!7368 = !DILocation(line: 245, column: 7, scope: !7369)
!7369 = distinct !DILexicalBlock(scope: !7317, file: !767, line: 245, column: 7)
!7370 = !DILocation(line: 245, column: 11, scope: !7369)
!7371 = !DILocation(line: 245, column: 17, scope: !7369)
!7372 = !DILocation(line: 245, column: 25, scope: !7369)
!7373 = !DILocation(line: 245, column: 35, scope: !7369)
!7374 = !DILocation(line: 245, column: 22, scope: !7369)
!7375 = !DILocation(line: 245, column: 7, scope: !7317)
!7376 = !DILocation(line: 246, column: 17, scope: !7369)
!7377 = !DILocation(line: 246, column: 21, scope: !7369)
!7378 = !DILocation(line: 246, column: 27, scope: !7369)
!7379 = !DILocation(line: 246, column: 32, scope: !7369)
!7380 = !DILocation(line: 246, column: 15, scope: !7369)
!7381 = !DILocation(line: 246, column: 5, scope: !7369)
!7382 = !DILocation(line: 249, column: 17, scope: !7317)
!7383 = !DILocation(line: 249, column: 27, scope: !7317)
!7384 = !DILocation(line: 249, column: 46, scope: !7317)
!7385 = !DILocation(line: 249, column: 3, scope: !7317)
!7386 = !DILocation(line: 249, column: 7, scope: !7317)
!7387 = !DILocation(line: 249, column: 15, scope: !7317)
!7388 = !DILocation(line: 250, column: 14, scope: !7317)
!7389 = !DILocation(line: 250, column: 18, scope: !7317)
!7390 = !DILocation(line: 250, column: 24, scope: !7317)
!7391 = !DILocation(line: 250, column: 29, scope: !7317)
!7392 = !DILocation(line: 250, column: 33, scope: !7317)
!7393 = !DILocation(line: 250, column: 3, scope: !7317)
!7394 = !DILocation(line: 250, column: 7, scope: !7317)
!7395 = !DILocation(line: 250, column: 12, scope: !7317)
!7396 = !DILocation(line: 251, column: 16, scope: !7317)
!7397 = !DILocation(line: 251, column: 26, scope: !7317)
!7398 = !DILocation(line: 251, column: 3, scope: !7317)
!7399 = !DILocation(line: 251, column: 7, scope: !7317)
!7400 = !DILocation(line: 251, column: 12, scope: !7317)
!7401 = !DILocation(line: 257, column: 17, scope: !7317)
!7402 = !DILocation(line: 257, column: 21, scope: !7317)
!7403 = !DILocation(line: 257, column: 16, scope: !7317)
!7404 = !DILocation(line: 257, column: 13, scope: !7317)
!7405 = !DILocation(line: 259, column: 13, scope: !7317)
!7406 = !DILocation(line: 259, column: 4, scope: !7317)
!7407 = !DILocation(line: 259, column: 11, scope: !7317)
!7408 = !DILocation(line: 260, column: 1, scope: !7317)
!7409 = distinct !DISubprogram(name: "df_lr_get_bb_info", scope: !1970, file: !1970, line: 1052, type: !7410, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7410 = !DISubroutineType(types: !7411)
!7411 = !{!1968, !7}
!7412 = !DILocalVariable(name: "index", arg: 1, scope: !7409, file: !1970, line: 1052, type: !7)
!7413 = !DILocation(line: 1052, column: 33, scope: !7409)
!7414 = !DILocation(line: 1054, column: 7, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7409, file: !1970, line: 1054, column: 7)
!7416 = !DILocation(line: 1054, column: 15, scope: !7415)
!7417 = !DILocation(line: 1054, column: 22, scope: !7415)
!7418 = !DILocation(line: 1054, column: 13, scope: !7415)
!7419 = !DILocation(line: 1054, column: 7, scope: !7409)
!7420 = !DILocation(line: 1055, column: 37, scope: !7415)
!7421 = !DILocation(line: 1055, column: 44, scope: !7415)
!7422 = !DILocation(line: 1055, column: 55, scope: !7415)
!7423 = !DILocation(line: 1055, column: 12, scope: !7415)
!7424 = !DILocation(line: 1055, column: 5, scope: !7415)
!7425 = !DILocation(line: 1057, column: 5, scope: !7415)
!7426 = !DILocation(line: 1058, column: 1, scope: !7409)
!7427 = distinct !DISubprogram(name: "bmp_iter_set", scope: !767, file: !767, line: 393, type: !7428, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7428 = !DISubroutineType(types: !7429)
!7429 = !{!942, !7320, !3867}
!7430 = !DILocalVariable(name: "bi", arg: 1, scope: !7427, file: !767, line: 393, type: !7320)
!7431 = !DILocation(line: 393, column: 32, scope: !7427)
!7432 = !DILocalVariable(name: "bit_no", arg: 2, scope: !7427, file: !767, line: 393, type: !3867)
!7433 = !DILocation(line: 393, column: 46, scope: !7427)
!7434 = !DILocation(line: 396, column: 7, scope: !7435)
!7435 = distinct !DILexicalBlock(scope: !7427, file: !767, line: 396, column: 7)
!7436 = !DILocation(line: 396, column: 11, scope: !7435)
!7437 = !DILocation(line: 396, column: 7, scope: !7427)
!7438 = !DILocation(line: 397, column: 5, scope: !7435)
!7439 = !DILabel(scope: !7440, name: "next_bit", file: !767, line: 398)
!7440 = distinct !DILexicalBlock(scope: !7435, file: !767, line: 397, column: 5)
!7441 = !DILocation(line: 398, column: 5, scope: !7440)
!7442 = !DILocation(line: 399, column: 7, scope: !7440)
!7443 = !DILocation(line: 399, column: 16, scope: !7440)
!7444 = !DILocation(line: 399, column: 20, scope: !7440)
!7445 = !DILocation(line: 399, column: 25, scope: !7440)
!7446 = !DILocation(line: 399, column: 14, scope: !7440)
!7447 = !DILocation(line: 401, column: 4, scope: !7448)
!7448 = distinct !DILexicalBlock(scope: !7440, file: !767, line: 400, column: 2)
!7449 = !DILocation(line: 401, column: 8, scope: !7448)
!7450 = !DILocation(line: 401, column: 13, scope: !7448)
!7451 = !DILocation(line: 402, column: 5, scope: !7448)
!7452 = !DILocation(line: 402, column: 12, scope: !7448)
!7453 = distinct !{!7453, !7442, !7454}
!7454 = !DILocation(line: 403, column: 2, scope: !7440)
!7455 = !DILocation(line: 404, column: 7, scope: !7440)
!7456 = !DILocation(line: 410, column: 16, scope: !7427)
!7457 = !DILocation(line: 410, column: 15, scope: !7427)
!7458 = !DILocation(line: 410, column: 23, scope: !7427)
!7459 = !DILocation(line: 410, column: 42, scope: !7427)
!7460 = !DILocation(line: 411, column: 7, scope: !7427)
!7461 = !DILocation(line: 411, column: 26, scope: !7427)
!7462 = !DILocation(line: 410, column: 4, scope: !7427)
!7463 = !DILocation(line: 410, column: 11, scope: !7427)
!7464 = !DILocation(line: 412, column: 3, scope: !7427)
!7465 = !DILocation(line: 412, column: 7, scope: !7427)
!7466 = !DILocation(line: 412, column: 14, scope: !7427)
!7467 = !DILocation(line: 414, column: 3, scope: !7427)
!7468 = !DILocation(line: 417, column: 7, scope: !7469)
!7469 = distinct !DILexicalBlock(scope: !7427, file: !767, line: 415, column: 5)
!7470 = !DILocation(line: 417, column: 14, scope: !7469)
!7471 = !DILocation(line: 417, column: 18, scope: !7469)
!7472 = !DILocation(line: 417, column: 26, scope: !7469)
!7473 = !DILocation(line: 419, column: 15, scope: !7474)
!7474 = distinct !DILexicalBlock(scope: !7469, file: !767, line: 418, column: 2)
!7475 = !DILocation(line: 419, column: 19, scope: !7474)
!7476 = !DILocation(line: 419, column: 25, scope: !7474)
!7477 = !DILocation(line: 419, column: 30, scope: !7474)
!7478 = !DILocation(line: 419, column: 34, scope: !7474)
!7479 = !DILocation(line: 419, column: 4, scope: !7474)
!7480 = !DILocation(line: 419, column: 8, scope: !7474)
!7481 = !DILocation(line: 419, column: 13, scope: !7474)
!7482 = !DILocation(line: 420, column: 8, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !7474, file: !767, line: 420, column: 8)
!7484 = !DILocation(line: 420, column: 12, scope: !7483)
!7485 = !DILocation(line: 420, column: 8, scope: !7474)
!7486 = !DILocation(line: 421, column: 6, scope: !7483)
!7487 = !DILocation(line: 422, column: 5, scope: !7474)
!7488 = !DILocation(line: 422, column: 12, scope: !7474)
!7489 = !DILocation(line: 423, column: 4, scope: !7474)
!7490 = !DILocation(line: 423, column: 8, scope: !7474)
!7491 = !DILocation(line: 423, column: 15, scope: !7474)
!7492 = distinct !{!7492, !7468, !7493}
!7493 = !DILocation(line: 424, column: 2, scope: !7469)
!7494 = !DILocation(line: 427, column: 18, scope: !7469)
!7495 = !DILocation(line: 427, column: 22, scope: !7469)
!7496 = !DILocation(line: 427, column: 28, scope: !7469)
!7497 = !DILocation(line: 427, column: 7, scope: !7469)
!7498 = !DILocation(line: 427, column: 11, scope: !7469)
!7499 = !DILocation(line: 427, column: 16, scope: !7469)
!7500 = !DILocation(line: 428, column: 12, scope: !7501)
!7501 = distinct !DILexicalBlock(scope: !7469, file: !767, line: 428, column: 11)
!7502 = !DILocation(line: 428, column: 16, scope: !7501)
!7503 = !DILocation(line: 428, column: 11, scope: !7469)
!7504 = !DILocation(line: 429, column: 2, scope: !7501)
!7505 = !DILocation(line: 430, column: 17, scope: !7469)
!7506 = !DILocation(line: 430, column: 21, scope: !7469)
!7507 = !DILocation(line: 430, column: 27, scope: !7469)
!7508 = !DILocation(line: 430, column: 32, scope: !7469)
!7509 = !DILocation(line: 430, column: 8, scope: !7469)
!7510 = !DILocation(line: 430, column: 15, scope: !7469)
!7511 = !DILocation(line: 431, column: 7, scope: !7469)
!7512 = !DILocation(line: 431, column: 11, scope: !7469)
!7513 = !DILocation(line: 431, column: 19, scope: !7469)
!7514 = distinct !{!7514, !7467, !7515}
!7515 = !DILocation(line: 432, column: 5, scope: !7427)
!7516 = !DILocation(line: 433, column: 1, scope: !7427)
!7517 = distinct !DISubprogram(name: "bmp_iter_next", scope: !767, file: !767, line: 382, type: !7518, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7518 = !DISubroutineType(types: !7519)
!7519 = !{null, !7320, !3867}
!7520 = !DILocalVariable(name: "bi", arg: 1, scope: !7517, file: !767, line: 382, type: !7320)
!7521 = !DILocation(line: 382, column: 33, scope: !7517)
!7522 = !DILocalVariable(name: "bit_no", arg: 2, scope: !7517, file: !767, line: 382, type: !3867)
!7523 = !DILocation(line: 382, column: 47, scope: !7517)
!7524 = !DILocation(line: 384, column: 3, scope: !7517)
!7525 = !DILocation(line: 384, column: 7, scope: !7517)
!7526 = !DILocation(line: 384, column: 12, scope: !7517)
!7527 = !DILocation(line: 385, column: 4, scope: !7517)
!7528 = !DILocation(line: 385, column: 11, scope: !7517)
!7529 = !DILocation(line: 386, column: 1, scope: !7517)
!7530 = distinct !DISubprogram(name: "mark_all_loops_for_removal", scope: !3, file: !3, line: 1760, type: !3585, scopeLine: 1761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7531 = !DILocalVariable(name: "i", scope: !7530, file: !3, line: 1762, type: !703)
!7532 = !DILocation(line: 1762, column: 7, scope: !7530)
!7533 = !DILocalVariable(name: "loop", scope: !7530, file: !3, line: 1763, type: !1156)
!7534 = !DILocation(line: 1763, column: 10, scope: !7530)
!7535 = !DILocation(line: 1765, column: 10, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7530, file: !3, line: 1765, column: 3)
!7537 = !DILocation(line: 1765, column: 8, scope: !7536)
!7538 = !DILocation(line: 1765, column: 15, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 1765, column: 3)
!7540 = !DILocation(line: 1765, column: 3, scope: !7536)
!7541 = !DILocation(line: 1766, column: 9, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 1766, column: 9)
!7543 = !DILocation(line: 1766, column: 24, scope: !7542)
!7544 = !DILocation(line: 1766, column: 27, scope: !7542)
!7545 = !DILocation(line: 1766, column: 45, scope: !7542)
!7546 = !DILocation(line: 1766, column: 9, scope: !7539)
!7547 = !DILocation(line: 1768, column: 6, scope: !7548)
!7548 = distinct !DILexicalBlock(scope: !7549, file: !3, line: 1768, column: 6)
!7549 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 1767, column: 7)
!7550 = !DILocation(line: 1768, column: 21, scope: !7548)
!7551 = !DILocation(line: 1768, column: 24, scope: !7548)
!7552 = !DILocation(line: 1768, column: 31, scope: !7548)
!7553 = !DILocation(line: 1768, column: 6, scope: !7549)
!7554 = !DILocation(line: 1771, column: 6, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 1769, column: 4)
!7556 = !DILocation(line: 1771, column: 21, scope: !7555)
!7557 = !DILocation(line: 1771, column: 24, scope: !7555)
!7558 = !DILocation(line: 1771, column: 36, scope: !7555)
!7559 = !DILocation(line: 1772, column: 6, scope: !7555)
!7560 = !DILocation(line: 1774, column: 2, scope: !7549)
!7561 = !DILocation(line: 1774, column: 17, scope: !7549)
!7562 = !DILocation(line: 1774, column: 20, scope: !7549)
!7563 = !DILocation(line: 1774, column: 32, scope: !7549)
!7564 = !DILocation(line: 1775, column: 6, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7549, file: !3, line: 1775, column: 6)
!7566 = !DILocation(line: 1775, column: 32, scope: !7565)
!7567 = !DILocation(line: 1775, column: 36, scope: !7565)
!7568 = !DILocation(line: 1775, column: 39, scope: !7565)
!7569 = !DILocation(line: 1775, column: 53, scope: !7565)
!7570 = !DILocation(line: 1775, column: 6, scope: !7549)
!7571 = !DILocation(line: 1777, column: 7, scope: !7565)
!7572 = !DILocation(line: 1779, column: 7, scope: !7565)
!7573 = !DILocation(line: 1779, column: 22, scope: !7565)
!7574 = !DILocation(line: 1779, column: 25, scope: !7565)
!7575 = !DILocation(line: 1779, column: 31, scope: !7565)
!7576 = !DILocation(line: 1780, column: 7, scope: !7565)
!7577 = !DILocation(line: 1780, column: 22, scope: !7565)
!7578 = !DILocation(line: 1780, column: 25, scope: !7565)
!7579 = !DILocation(line: 1780, column: 31, scope: !7565)
!7580 = !DILocation(line: 1780, column: 39, scope: !7565)
!7581 = !DILocation(line: 1781, column: 7, scope: !7565)
!7582 = !DILocation(line: 1781, column: 22, scope: !7565)
!7583 = !DILocation(line: 1781, column: 25, scope: !7565)
!7584 = !DILocation(line: 1781, column: 31, scope: !7565)
!7585 = !DILocation(line: 1781, column: 39, scope: !7565)
!7586 = !DILocation(line: 1782, column: 19, scope: !7565)
!7587 = !DILocation(line: 1782, column: 34, scope: !7565)
!7588 = !DILocation(line: 1782, column: 37, scope: !7565)
!7589 = !DILocation(line: 1782, column: 7, scope: !7565)
!7590 = !DILocation(line: 1776, column: 4, scope: !7565)
!7591 = !DILocation(line: 1783, column: 7, scope: !7549)
!7592 = !DILocation(line: 1766, column: 48, scope: !7542)
!7593 = !DILocation(line: 1765, column: 65, scope: !7539)
!7594 = !DILocation(line: 1765, column: 3, scope: !7539)
!7595 = distinct !{!7595, !7540, !7596}
!7596 = !DILocation(line: 1783, column: 7, scope: !7536)
!7597 = !DILocation(line: 1784, column: 1, scope: !7530)
!7598 = distinct !DISubprogram(name: "mark_loops_for_removal", scope: !3, file: !3, line: 1712, type: !3585, scopeLine: 1713, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7599 = !DILocalVariable(name: "i", scope: !7598, file: !3, line: 1714, type: !703)
!7600 = !DILocation(line: 1714, column: 7, scope: !7598)
!7601 = !DILocalVariable(name: "n", scope: !7598, file: !3, line: 1714, type: !703)
!7602 = !DILocation(line: 1714, column: 10, scope: !7598)
!7603 = !DILocalVariable(name: "sorted_loops", scope: !7598, file: !3, line: 1715, type: !1976)
!7604 = !DILocation(line: 1715, column: 25, scope: !7598)
!7605 = !DILocalVariable(name: "loop", scope: !7598, file: !3, line: 1716, type: !1156)
!7606 = !DILocation(line: 1716, column: 10, scope: !7598)
!7607 = !DILocation(line: 1720, column: 13, scope: !7598)
!7608 = !DILocation(line: 1720, column: 11, scope: !7598)
!7609 = !DILocation(line: 1719, column: 32, scope: !7598)
!7610 = !DILocation(line: 1719, column: 7, scope: !7598)
!7611 = !DILocation(line: 1719, column: 5, scope: !7598)
!7612 = !DILocation(line: 1722, column: 14, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7598, file: !3, line: 1722, column: 3)
!7614 = !DILocation(line: 1722, column: 10, scope: !7613)
!7615 = !DILocation(line: 1722, column: 8, scope: !7613)
!7616 = !DILocation(line: 1722, column: 19, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 1722, column: 3)
!7618 = !DILocation(line: 1722, column: 3, scope: !7613)
!7619 = !DILocation(line: 1723, column: 9, scope: !7620)
!7620 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 1723, column: 9)
!7621 = !DILocation(line: 1723, column: 24, scope: !7620)
!7622 = !DILocation(line: 1723, column: 27, scope: !7620)
!7623 = !DILocation(line: 1723, column: 45, scope: !7620)
!7624 = !DILocation(line: 1723, column: 9, scope: !7617)
!7625 = !DILocation(line: 1725, column: 6, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7627, file: !3, line: 1725, column: 6)
!7627 = distinct !DILexicalBlock(scope: !7620, file: !3, line: 1724, column: 7)
!7628 = !DILocation(line: 1725, column: 21, scope: !7626)
!7629 = !DILocation(line: 1725, column: 24, scope: !7626)
!7630 = !DILocation(line: 1725, column: 31, scope: !7626)
!7631 = !DILocation(line: 1725, column: 6, scope: !7627)
!7632 = !DILocation(line: 1728, column: 6, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7626, file: !3, line: 1726, column: 4)
!7634 = !DILocation(line: 1728, column: 21, scope: !7633)
!7635 = !DILocation(line: 1728, column: 24, scope: !7633)
!7636 = !DILocation(line: 1728, column: 36, scope: !7633)
!7637 = !DILocation(line: 1729, column: 6, scope: !7633)
!7638 = !DILocation(line: 1731, column: 23, scope: !7627)
!7639 = !DILocation(line: 1731, column: 38, scope: !7627)
!7640 = !DILocation(line: 1731, column: 2, scope: !7627)
!7641 = !DILocation(line: 1731, column: 16, scope: !7627)
!7642 = !DILocation(line: 1731, column: 20, scope: !7627)
!7643 = !DILocation(line: 1733, column: 33, scope: !7627)
!7644 = !DILocation(line: 1733, column: 48, scope: !7627)
!7645 = !DILocation(line: 1733, column: 51, scope: !7627)
!7646 = !DILocation(line: 1733, column: 7, scope: !7627)
!7647 = !DILocation(line: 1734, column: 7, scope: !7627)
!7648 = !DILocation(line: 1734, column: 37, scope: !7627)
!7649 = !DILocation(line: 1734, column: 52, scope: !7627)
!7650 = !DILocation(line: 1734, column: 10, scope: !7627)
!7651 = !DILocation(line: 0, scope: !7627)
!7652 = !DILocation(line: 1733, column: 6, scope: !7627)
!7653 = !DILocation(line: 1732, column: 2, scope: !7627)
!7654 = !DILocation(line: 1732, column: 17, scope: !7627)
!7655 = !DILocation(line: 1732, column: 20, scope: !7627)
!7656 = !DILocation(line: 1733, column: 4, scope: !7627)
!7657 = !DILocation(line: 1735, column: 7, scope: !7627)
!7658 = !DILocation(line: 1723, column: 48, scope: !7620)
!7659 = !DILocation(line: 1722, column: 69, scope: !7617)
!7660 = !DILocation(line: 1722, column: 3, scope: !7617)
!7661 = distinct !{!7661, !7618, !7662}
!7662 = !DILocation(line: 1735, column: 7, scope: !7613)
!7663 = !DILocation(line: 1737, column: 15, scope: !7598)
!7664 = !DILocation(line: 1737, column: 29, scope: !7598)
!7665 = !DILocation(line: 1737, column: 3, scope: !7598)
!7666 = !DILocation(line: 1741, column: 10, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7598, file: !3, line: 1741, column: 3)
!7668 = !DILocation(line: 1741, column: 8, scope: !7667)
!7669 = !DILocation(line: 1741, column: 15, scope: !7670)
!7670 = distinct !DILexicalBlock(scope: !7667, file: !3, line: 1741, column: 3)
!7671 = !DILocation(line: 1741, column: 19, scope: !7670)
!7672 = !DILocation(line: 1741, column: 17, scope: !7670)
!7673 = !DILocation(line: 1741, column: 21, scope: !7670)
!7674 = !DILocation(line: 1741, column: 27, scope: !7670)
!7675 = !DILocation(line: 1741, column: 25, scope: !7670)
!7676 = !DILocation(line: 1741, column: 3, scope: !7667)
!7677 = !DILocation(line: 1743, column: 7, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7670, file: !3, line: 1742, column: 5)
!7679 = !DILocation(line: 1743, column: 20, scope: !7678)
!7680 = !DILocation(line: 1743, column: 24, scope: !7678)
!7681 = !DILocation(line: 1743, column: 36, scope: !7678)
!7682 = !DILocation(line: 1744, column: 11, scope: !7683)
!7683 = distinct !DILexicalBlock(scope: !7678, file: !3, line: 1744, column: 11)
!7684 = !DILocation(line: 1744, column: 37, scope: !7683)
!7685 = !DILocation(line: 1744, column: 41, scope: !7683)
!7686 = !DILocation(line: 1744, column: 44, scope: !7683)
!7687 = !DILocation(line: 1744, column: 58, scope: !7683)
!7688 = !DILocation(line: 1744, column: 11, scope: !7678)
!7689 = !DILocation(line: 1746, column: 5, scope: !7683)
!7690 = !DILocation(line: 1748, column: 5, scope: !7683)
!7691 = !DILocation(line: 1748, column: 18, scope: !7683)
!7692 = !DILocation(line: 1748, column: 22, scope: !7683)
!7693 = !DILocation(line: 1748, column: 28, scope: !7683)
!7694 = !DILocation(line: 1748, column: 33, scope: !7683)
!7695 = !DILocation(line: 1748, column: 46, scope: !7683)
!7696 = !DILocation(line: 1748, column: 50, scope: !7683)
!7697 = !DILocation(line: 1748, column: 56, scope: !7683)
!7698 = !DILocation(line: 1748, column: 64, scope: !7683)
!7699 = !DILocation(line: 1749, column: 5, scope: !7683)
!7700 = !DILocation(line: 1749, column: 18, scope: !7683)
!7701 = !DILocation(line: 1749, column: 22, scope: !7683)
!7702 = !DILocation(line: 1749, column: 28, scope: !7683)
!7703 = !DILocation(line: 1749, column: 36, scope: !7683)
!7704 = !DILocation(line: 1750, column: 17, scope: !7683)
!7705 = !DILocation(line: 1750, column: 30, scope: !7683)
!7706 = !DILocation(line: 1750, column: 34, scope: !7683)
!7707 = !DILocation(line: 1750, column: 5, scope: !7683)
!7708 = !DILocation(line: 1751, column: 31, scope: !7683)
!7709 = !DILocation(line: 1751, column: 44, scope: !7683)
!7710 = !DILocation(line: 1751, column: 48, scope: !7683)
!7711 = !DILocation(line: 1751, column: 5, scope: !7683)
!7712 = !DILocation(line: 1752, column: 5, scope: !7683)
!7713 = !DILocation(line: 1752, column: 34, scope: !7683)
!7714 = !DILocation(line: 1752, column: 47, scope: !7683)
!7715 = !DILocation(line: 1752, column: 8, scope: !7683)
!7716 = !DILocation(line: 0, scope: !7683)
!7717 = !DILocation(line: 1745, column: 2, scope: !7683)
!7718 = !DILocation(line: 1754, column: 5, scope: !7678)
!7719 = !DILocation(line: 1741, column: 47, scope: !7670)
!7720 = !DILocation(line: 1741, column: 3, scope: !7670)
!7721 = distinct !{!7721, !7676, !7722}
!7722 = !DILocation(line: 1754, column: 5, scope: !7667)
!7723 = !DILocation(line: 1755, column: 13, scope: !7598)
!7724 = !DILocation(line: 1755, column: 3, scope: !7598)
!7725 = !DILocation(line: 1756, column: 1, scope: !7598)
!7726 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_heap_alloc", scope: !3, file: !3, line: 1788, type: !7727, scopeLine: 1788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7727 = !DISubroutineType(types: !7728)
!7728 = !{!1979, !703}
!7729 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7726, file: !3, line: 1788, type: !703)
!7730 = !DILocation(line: 1788, column: 1, scope: !7726)
!7731 = distinct !DISubprogram(name: "remove_uneccesary_loop_nodes_from_loop_tree", scope: !3, file: !3, line: 1799, type: !3706, scopeLine: 1800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7732 = !DILocalVariable(name: "node", arg: 1, scope: !7731, file: !3, line: 1799, type: !1844)
!7733 = !DILocation(line: 1799, column: 67, scope: !7731)
!7734 = !DILocalVariable(name: "start", scope: !7731, file: !3, line: 1801, type: !7)
!7735 = !DILocation(line: 1801, column: 16, scope: !7731)
!7736 = !DILocalVariable(name: "remove_p", scope: !7731, file: !3, line: 1802, type: !942)
!7737 = !DILocation(line: 1802, column: 8, scope: !7731)
!7738 = !DILocalVariable(name: "subnode", scope: !7731, file: !3, line: 1803, type: !1844)
!7739 = !DILocation(line: 1803, column: 24, scope: !7731)
!7740 = !DILocation(line: 1805, column: 14, scope: !7731)
!7741 = !DILocation(line: 1805, column: 20, scope: !7731)
!7742 = !DILocation(line: 1805, column: 12, scope: !7731)
!7743 = !DILocation(line: 1806, column: 9, scope: !7744)
!7744 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 1806, column: 7)
!7745 = !DILocation(line: 1806, column: 7, scope: !7731)
!7746 = !DILocation(line: 1807, column: 5, scope: !7744)
!7747 = !DILocation(line: 1808, column: 11, scope: !7731)
!7748 = !DILocation(line: 1808, column: 9, scope: !7731)
!7749 = !DILocation(line: 1809, column: 18, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 1809, column: 3)
!7751 = !DILocation(line: 1809, column: 24, scope: !7750)
!7752 = !DILocation(line: 1809, column: 16, scope: !7750)
!7753 = !DILocation(line: 1809, column: 8, scope: !7750)
!7754 = !DILocation(line: 1809, column: 34, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 1809, column: 3)
!7756 = !DILocation(line: 1809, column: 42, scope: !7755)
!7757 = !DILocation(line: 1809, column: 3, scope: !7750)
!7758 = !DILocation(line: 1810, column: 9, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 1810, column: 9)
!7760 = !DILocation(line: 1810, column: 18, scope: !7759)
!7761 = !DILocation(line: 1810, column: 21, scope: !7759)
!7762 = !DILocation(line: 1810, column: 9, scope: !7755)
!7763 = !DILocation(line: 1811, column: 52, scope: !7759)
!7764 = !DILocation(line: 1811, column: 7, scope: !7759)
!7765 = !DILocation(line: 1813, column: 7, scope: !7759)
!7766 = !DILocation(line: 1810, column: 24, scope: !7759)
!7767 = !DILocation(line: 1809, column: 61, scope: !7755)
!7768 = !DILocation(line: 1809, column: 70, scope: !7755)
!7769 = !DILocation(line: 1809, column: 59, scope: !7755)
!7770 = !DILocation(line: 1809, column: 3, scope: !7755)
!7771 = distinct !{!7771, !7757, !7772}
!7772 = !DILocation(line: 1813, column: 7, scope: !7750)
!7773 = !DILocation(line: 1814, column: 20, scope: !7731)
!7774 = !DILocation(line: 1814, column: 26, scope: !7731)
!7775 = !DILocation(line: 1814, column: 35, scope: !7731)
!7776 = !DILocation(line: 1814, column: 3, scope: !7731)
!7777 = !DILocation(line: 1814, column: 9, scope: !7731)
!7778 = !DILocation(line: 1814, column: 18, scope: !7731)
!7779 = !DILocation(line: 1815, column: 7, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 1815, column: 7)
!7781 = !DILocation(line: 1815, column: 7, scope: !7731)
!7782 = !DILocation(line: 1817, column: 7, scope: !7783)
!7783 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 1816, column: 5)
!7784 = !DILocation(line: 1818, column: 7, scope: !7783)
!7785 = !DILocation(line: 1820, column: 3, scope: !7731)
!7786 = !DILocation(line: 1820, column: 10, scope: !7731)
!7787 = !DILocation(line: 1820, column: 60, scope: !7731)
!7788 = !DILocation(line: 1820, column: 58, scope: !7731)
!7789 = !DILocation(line: 1822, column: 17, scope: !7790)
!7790 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 1821, column: 5)
!7791 = !DILocation(line: 1822, column: 15, scope: !7790)
!7792 = !DILocation(line: 1823, column: 25, scope: !7790)
!7793 = !DILocation(line: 1823, column: 7, scope: !7790)
!7794 = !DILocation(line: 1823, column: 16, scope: !7790)
!7795 = !DILocation(line: 1823, column: 23, scope: !7790)
!7796 = !DILocation(line: 1824, column: 23, scope: !7790)
!7797 = !DILocation(line: 1824, column: 29, scope: !7790)
!7798 = !DILocation(line: 1824, column: 7, scope: !7790)
!7799 = !DILocation(line: 1824, column: 16, scope: !7790)
!7800 = !DILocation(line: 1824, column: 21, scope: !7790)
!7801 = !DILocation(line: 1825, column: 24, scope: !7790)
!7802 = !DILocation(line: 1825, column: 7, scope: !7790)
!7803 = !DILocation(line: 1825, column: 13, scope: !7790)
!7804 = !DILocation(line: 1825, column: 22, scope: !7790)
!7805 = !DILocation(line: 1826, column: 11, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 1826, column: 11)
!7807 = !DILocation(line: 1826, column: 20, scope: !7806)
!7808 = !DILocation(line: 1826, column: 23, scope: !7806)
!7809 = !DILocation(line: 1826, column: 11, scope: !7790)
!7810 = !DILocation(line: 1828, column: 28, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 1827, column: 2)
!7812 = !DILocation(line: 1828, column: 34, scope: !7811)
!7813 = !DILocation(line: 1828, column: 4, scope: !7811)
!7814 = !DILocation(line: 1828, column: 13, scope: !7811)
!7815 = !DILocation(line: 1828, column: 26, scope: !7811)
!7816 = !DILocation(line: 1829, column: 21, scope: !7811)
!7817 = !DILocation(line: 1829, column: 4, scope: !7811)
!7818 = !DILocation(line: 1829, column: 10, scope: !7811)
!7819 = !DILocation(line: 1829, column: 19, scope: !7811)
!7820 = !DILocation(line: 1830, column: 2, scope: !7811)
!7821 = distinct !{!7821, !7785, !7822}
!7822 = !DILocation(line: 1831, column: 5, scope: !7731)
!7823 = !DILocation(line: 1832, column: 1, scope: !7731)
!7824 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_heap_free", scope: !3, file: !3, line: 1788, type: !7825, scopeLine: 1788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7825 = !DISubroutineType(types: !7826)
!7826 = !{null, !7827}
!7827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!7828 = !DILocalVariable(name: "vec_", arg: 1, scope: !7824, file: !3, line: 1788, type: !7827)
!7829 = !DILocation(line: 1788, column: 1, scope: !7824)
!7830 = !DILocation(line: 1788, column: 1, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7824, file: !3, line: 1788, column: 1)
!7832 = distinct !DISubprogram(name: "remove_low_level_allocnos", scope: !3, file: !3, line: 2012, type: !3585, scopeLine: 2013, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7833 = !DILocalVariable(name: "regno", scope: !7832, file: !3, line: 2014, type: !703)
!7834 = !DILocation(line: 2014, column: 7, scope: !7832)
!7835 = !DILocalVariable(name: "merged_p", scope: !7832, file: !3, line: 2015, type: !942)
!7836 = !DILocation(line: 2015, column: 8, scope: !7832)
!7837 = !DILocalVariable(name: "propagate_p", scope: !7832, file: !3, line: 2015, type: !942)
!7838 = !DILocation(line: 2015, column: 18, scope: !7832)
!7839 = !DILocalVariable(name: "a", scope: !7832, file: !3, line: 2016, type: !697)
!7840 = !DILocation(line: 2016, column: 17, scope: !7832)
!7841 = !DILocalVariable(name: "top_a", scope: !7832, file: !3, line: 2016, type: !697)
!7842 = !DILocation(line: 2016, column: 20, scope: !7832)
!7843 = !DILocalVariable(name: "a_node", scope: !7832, file: !3, line: 2017, type: !1844)
!7844 = !DILocation(line: 2017, column: 24, scope: !7832)
!7845 = !DILocalVariable(name: "parent", scope: !7832, file: !3, line: 2017, type: !1844)
!7846 = !DILocation(line: 2017, column: 32, scope: !7832)
!7847 = !DILocalVariable(name: "r", scope: !7832, file: !3, line: 2018, type: !1898)
!7848 = !DILocation(line: 2018, column: 24, scope: !7832)
!7849 = !DILocalVariable(name: "ai", scope: !7832, file: !3, line: 2019, type: !3853)
!7850 = !DILocation(line: 2019, column: 24, scope: !7832)
!7851 = !DILocation(line: 2021, column: 12, scope: !7832)
!7852 = !DILocation(line: 2022, column: 3, scope: !7853)
!7853 = distinct !DILexicalBlock(scope: !7832, file: !3, line: 2022, column: 3)
!7854 = !DILocation(line: 2022, column: 3, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7853, file: !3, line: 2022, column: 3)
!7856 = !DILocation(line: 2024, column: 16, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 2023, column: 5)
!7858 = !DILocation(line: 2024, column: 14, scope: !7857)
!7859 = !DILocation(line: 2025, column: 11, scope: !7860)
!7860 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 2025, column: 11)
!7861 = !DILocation(line: 2025, column: 21, scope: !7860)
!7862 = !DILocation(line: 2025, column: 18, scope: !7860)
!7863 = !DILocation(line: 2025, column: 40, scope: !7860)
!7864 = !DILocation(line: 2025, column: 43, scope: !7860)
!7865 = !DILocation(line: 2025, column: 66, scope: !7860)
!7866 = !DILocation(line: 2025, column: 11, scope: !7857)
!7867 = !DILocation(line: 2026, column: 2, scope: !7860)
!7868 = distinct !{!7868, !7852, !7869}
!7869 = !DILocation(line: 2045, column: 5, scope: !7853)
!7870 = !DILocation(line: 2027, column: 15, scope: !7857)
!7871 = !DILocation(line: 2027, column: 13, scope: !7857)
!7872 = !DILocation(line: 2028, column: 20, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 2028, column: 11)
!7874 = !DILocation(line: 2028, column: 40, scope: !7873)
!7875 = !DILocation(line: 2028, column: 58, scope: !7873)
!7876 = !DILocation(line: 2028, column: 18, scope: !7873)
!7877 = !DILocation(line: 2028, column: 66, scope: !7873)
!7878 = !DILocation(line: 2028, column: 11, scope: !7857)
!7879 = !DILocation(line: 2030, column: 33, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7873, file: !3, line: 2029, column: 2)
!7881 = !DILocation(line: 2030, column: 4, scope: !7880)
!7882 = !DILocation(line: 2030, column: 31, scope: !7880)
!7883 = !DILocation(line: 2031, column: 51, scope: !7880)
!7884 = !DILocation(line: 2031, column: 4, scope: !7880)
!7885 = !DILocation(line: 2031, column: 24, scope: !7880)
!7886 = !DILocation(line: 2031, column: 42, scope: !7880)
!7887 = !DILocation(line: 2031, column: 49, scope: !7880)
!7888 = !DILocation(line: 2032, column: 4, scope: !7880)
!7889 = !DILocation(line: 2034, column: 21, scope: !7857)
!7890 = !DILocation(line: 2034, column: 29, scope: !7857)
!7891 = !DILocation(line: 2034, column: 37, scope: !7857)
!7892 = !DILocation(line: 2034, column: 55, scope: !7857)
!7893 = !DILocation(line: 2034, column: 62, scope: !7857)
!7894 = !DILocation(line: 2034, column: 19, scope: !7857)
!7895 = !DILocation(line: 2037, column: 11, scope: !7857)
!7896 = !DILocation(line: 2037, column: 9, scope: !7857)
!7897 = !DILocation(line: 2038, column: 37, scope: !7857)
!7898 = !DILocation(line: 2038, column: 40, scope: !7857)
!7899 = !DILocation(line: 2038, column: 7, scope: !7857)
!7900 = !DILocation(line: 2040, column: 35, scope: !7857)
!7901 = !DILocation(line: 2040, column: 38, scope: !7857)
!7902 = !DILocation(line: 2040, column: 4, scope: !7857)
!7903 = !DILocation(line: 2039, column: 7, scope: !7857)
!7904 = !DILocation(line: 2040, column: 2, scope: !7857)
!7905 = !DILocation(line: 2041, column: 16, scope: !7857)
!7906 = !DILocation(line: 2042, column: 7, scope: !7857)
!7907 = !DILocation(line: 2042, column: 31, scope: !7857)
!7908 = !DILocation(line: 2043, column: 11, scope: !7909)
!7909 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 2043, column: 11)
!7910 = !DILocation(line: 2043, column: 11, scope: !7857)
!7911 = !DILocation(line: 2044, column: 36, scope: !7909)
!7912 = !DILocation(line: 2044, column: 43, scope: !7909)
!7913 = !DILocation(line: 2044, column: 2, scope: !7909)
!7914 = !DILocation(line: 2046, column: 3, scope: !7915)
!7915 = distinct !DILexicalBlock(scope: !7832, file: !3, line: 2046, column: 3)
!7916 = !DILocation(line: 2046, column: 3, scope: !7917)
!7917 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 2046, column: 3)
!7918 = !DILocation(line: 2048, column: 16, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7917, file: !3, line: 2047, column: 5)
!7920 = !DILocation(line: 2048, column: 14, scope: !7919)
!7921 = !DILocation(line: 2049, column: 11, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !7919, file: !3, line: 2049, column: 11)
!7923 = !DILocation(line: 2049, column: 21, scope: !7922)
!7924 = !DILocation(line: 2049, column: 18, scope: !7922)
!7925 = !DILocation(line: 2049, column: 11, scope: !7919)
!7926 = !DILocation(line: 2050, column: 2, scope: !7922)
!7927 = distinct !{!7927, !7914, !7928}
!7928 = !DILocation(line: 2057, column: 5, scope: !7915)
!7929 = !DILocation(line: 2051, column: 16, scope: !7919)
!7930 = !DILocation(line: 2051, column: 24, scope: !7919)
!7931 = !DILocation(line: 2051, column: 14, scope: !7919)
!7932 = !DILocation(line: 2052, column: 15, scope: !7919)
!7933 = !DILocation(line: 2052, column: 13, scope: !7919)
!7934 = !DILocation(line: 2053, column: 11, scope: !7935)
!7935 = distinct !DILexicalBlock(scope: !7919, file: !3, line: 2053, column: 11)
!7936 = !DILocation(line: 2053, column: 34, scope: !7935)
!7937 = !DILocation(line: 2053, column: 11, scope: !7919)
!7938 = !DILocation(line: 2054, column: 2, scope: !7935)
!7939 = !DILocation(line: 2055, column: 16, scope: !7940)
!7940 = distinct !DILexicalBlock(scope: !7935, file: !3, line: 2055, column: 16)
!7941 = !DILocation(line: 2055, column: 32, scope: !7940)
!7942 = !DILocation(line: 2055, column: 16, scope: !7935)
!7943 = !DILocation(line: 2056, column: 3, scope: !7940)
!7944 = !DILocation(line: 2058, column: 3, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7832, file: !3, line: 2058, column: 3)
!7946 = !DILocation(line: 2058, column: 3, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 2058, column: 3)
!7948 = !DILocation(line: 2060, column: 15, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 2059, column: 5)
!7950 = !DILocation(line: 2060, column: 13, scope: !7949)
!7951 = !DILocation(line: 2061, column: 11, scope: !7952)
!7952 = distinct !DILexicalBlock(scope: !7949, file: !3, line: 2061, column: 11)
!7953 = !DILocation(line: 2061, column: 31, scope: !7952)
!7954 = !DILocation(line: 2061, column: 49, scope: !7952)
!7955 = !DILocation(line: 2061, column: 59, scope: !7952)
!7956 = !DILocation(line: 2061, column: 56, scope: !7952)
!7957 = !DILocation(line: 2061, column: 11, scope: !7949)
!7958 = !DILocation(line: 2063, column: 35, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7952, file: !3, line: 2062, column: 2)
!7960 = !DILocation(line: 2063, column: 4, scope: !7959)
!7961 = !DILocation(line: 2063, column: 26, scope: !7959)
!7962 = !DILocation(line: 2063, column: 33, scope: !7959)
!7963 = !DILocation(line: 2064, column: 4, scope: !7959)
!7964 = !DILocation(line: 2064, column: 35, scope: !7959)
!7965 = !DILocation(line: 2065, column: 4, scope: !7959)
!7966 = !DILocation(line: 2065, column: 27, scope: !7959)
!7967 = !DILocation(line: 2066, column: 4, scope: !7959)
!7968 = !DILocation(line: 2069, column: 8, scope: !7969)
!7969 = distinct !DILexicalBlock(scope: !7959, file: !3, line: 2069, column: 8)
!7970 = !DILocation(line: 2069, column: 8, scope: !7959)
!7971 = !DILocation(line: 2070, column: 6, scope: !7969)
!7972 = !DILocation(line: 2070, column: 33, scope: !7969)
!7973 = !DILocation(line: 2072, column: 2, scope: !7959)
!7974 = !DILocation(line: 2074, column: 18, scope: !7952)
!7975 = !DILocation(line: 2074, column: 2, scope: !7952)
!7976 = distinct !{!7976, !7944, !7977}
!7977 = !DILocation(line: 2075, column: 5, scope: !7945)
!7978 = !DILocation(line: 2076, column: 7, scope: !7979)
!7979 = distinct !DILexicalBlock(scope: !7832, file: !3, line: 2076, column: 7)
!7980 = !DILocation(line: 2076, column: 7, scope: !7832)
!7981 = !DILocation(line: 2077, column: 5, scope: !7979)
!7982 = !DILocation(line: 2078, column: 1, scope: !7832)
!7983 = distinct !DISubprogram(name: "remove_unnecessary_allocnos", scope: !3, file: !3, line: 1935, type: !3585, scopeLine: 1936, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!7984 = !DILocalVariable(name: "regno", scope: !7983, file: !3, line: 1937, type: !703)
!7985 = !DILocation(line: 1937, column: 7, scope: !7983)
!7986 = !DILocalVariable(name: "merged_p", scope: !7983, file: !3, line: 1938, type: !942)
!7987 = !DILocation(line: 1938, column: 8, scope: !7983)
!7988 = !DILocalVariable(name: "rebuild_p", scope: !7983, file: !3, line: 1938, type: !942)
!7989 = !DILocation(line: 1938, column: 18, scope: !7983)
!7990 = !DILocalVariable(name: "a", scope: !7983, file: !3, line: 1939, type: !697)
!7991 = !DILocation(line: 1939, column: 17, scope: !7983)
!7992 = !DILocalVariable(name: "prev_a", scope: !7983, file: !3, line: 1939, type: !697)
!7993 = !DILocation(line: 1939, column: 20, scope: !7983)
!7994 = !DILocalVariable(name: "next_a", scope: !7983, file: !3, line: 1939, type: !697)
!7995 = !DILocation(line: 1939, column: 28, scope: !7983)
!7996 = !DILocalVariable(name: "parent_a", scope: !7983, file: !3, line: 1939, type: !697)
!7997 = !DILocation(line: 1939, column: 36, scope: !7983)
!7998 = !DILocalVariable(name: "a_node", scope: !7983, file: !3, line: 1940, type: !1844)
!7999 = !DILocation(line: 1940, column: 24, scope: !7983)
!8000 = !DILocalVariable(name: "parent", scope: !7983, file: !3, line: 1940, type: !1844)
!8001 = !DILocation(line: 1940, column: 32, scope: !7983)
!8002 = !DILocalVariable(name: "r", scope: !7983, file: !3, line: 1941, type: !1898)
!8003 = !DILocation(line: 1941, column: 24, scope: !7983)
!8004 = !DILocation(line: 1943, column: 12, scope: !7983)
!8005 = !DILocation(line: 1944, column: 18, scope: !7983)
!8006 = !DILocation(line: 1945, column: 16, scope: !8007)
!8007 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 1945, column: 3)
!8008 = !DILocation(line: 1945, column: 31, scope: !8007)
!8009 = !DILocation(line: 1945, column: 14, scope: !8007)
!8010 = !DILocation(line: 1945, column: 8, scope: !8007)
!8011 = !DILocation(line: 1945, column: 36, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 1945, column: 3)
!8013 = !DILocation(line: 1945, column: 42, scope: !8012)
!8014 = !DILocation(line: 1945, column: 3, scope: !8007)
!8015 = !DILocation(line: 1947, column: 17, scope: !8016)
!8016 = distinct !DILexicalBlock(scope: !8012, file: !3, line: 1946, column: 5)
!8017 = !DILocation(line: 1948, column: 19, scope: !8018)
!8018 = distinct !DILexicalBlock(scope: !8016, file: !3, line: 1948, column: 7)
!8019 = !DILocation(line: 1948, column: 31, scope: !8018)
!8020 = !DILocation(line: 1948, column: 53, scope: !8018)
!8021 = !DILocation(line: 1948, column: 29, scope: !8018)
!8022 = !DILocation(line: 1948, column: 12, scope: !8018)
!8023 = !DILocation(line: 1949, column: 5, scope: !8024)
!8024 = distinct !DILexicalBlock(scope: !8018, file: !3, line: 1948, column: 7)
!8025 = !DILocation(line: 1949, column: 7, scope: !8024)
!8026 = !DILocation(line: 1948, column: 7, scope: !8018)
!8027 = !DILocation(line: 1952, column: 13, scope: !8028)
!8028 = distinct !DILexicalBlock(scope: !8024, file: !3, line: 1951, column: 2)
!8029 = !DILocation(line: 1952, column: 11, scope: !8028)
!8030 = !DILocation(line: 1953, column: 13, scope: !8028)
!8031 = !DILocation(line: 1953, column: 11, scope: !8028)
!8032 = !DILocation(line: 1954, column: 10, scope: !8033)
!8033 = distinct !DILexicalBlock(scope: !8028, file: !3, line: 1954, column: 8)
!8034 = !DILocation(line: 1954, column: 18, scope: !8033)
!8035 = !DILocation(line: 1954, column: 8, scope: !8028)
!8036 = !DILocation(line: 1955, column: 15, scope: !8033)
!8037 = !DILocation(line: 1955, column: 13, scope: !8033)
!8038 = !DILocation(line: 1955, column: 6, scope: !8033)
!8039 = !DILocation(line: 1958, column: 22, scope: !8040)
!8040 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 1958, column: 8)
!8041 = distinct !DILexicalBlock(scope: !8033, file: !3, line: 1957, column: 6)
!8042 = !DILocation(line: 1958, column: 30, scope: !8040)
!8043 = !DILocation(line: 1958, column: 20, scope: !8040)
!8044 = !DILocation(line: 1958, column: 13, scope: !8040)
!8045 = !DILocation(line: 1959, column: 18, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 1958, column: 8)
!8047 = !DILocation(line: 1959, column: 26, scope: !8046)
!8048 = !DILocation(line: 1959, column: 44, scope: !8046)
!8049 = !DILocation(line: 1959, column: 16, scope: !8046)
!8050 = !DILocation(line: 1959, column: 52, scope: !8046)
!8051 = !DILocation(line: 1960, column: 8, scope: !8046)
!8052 = !DILocation(line: 1960, column: 11, scope: !8046)
!8053 = !DILocation(line: 1960, column: 19, scope: !8046)
!8054 = !DILocation(line: 0, scope: !8046)
!8055 = !DILocation(line: 1958, column: 8, scope: !8040)
!8056 = !DILocation(line: 1961, column: 15, scope: !8046)
!8057 = !DILocation(line: 1961, column: 23, scope: !8046)
!8058 = !DILocation(line: 1961, column: 13, scope: !8046)
!8059 = !DILocation(line: 1958, column: 8, scope: !8046)
!8060 = distinct !{!8060, !8055, !8061}
!8061 = !DILocation(line: 1962, column: 3, scope: !8040)
!8062 = !DILocation(line: 1963, column: 12, scope: !8063)
!8063 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 1963, column: 12)
!8064 = !DILocation(line: 1963, column: 21, scope: !8063)
!8065 = !DILocation(line: 1963, column: 12, scope: !8041)
!8066 = !DILocation(line: 1968, column: 14, scope: !8067)
!8067 = distinct !DILexicalBlock(scope: !8063, file: !3, line: 1964, column: 3)
!8068 = !DILocation(line: 1968, column: 12, scope: !8067)
!8069 = !DILocation(line: 1969, column: 34, scope: !8067)
!8070 = !DILocation(line: 1969, column: 5, scope: !8067)
!8071 = !DILocation(line: 1969, column: 32, scope: !8067)
!8072 = !DILocation(line: 1970, column: 40, scope: !8067)
!8073 = !DILocation(line: 1970, column: 5, scope: !8067)
!8074 = !DILocation(line: 1970, column: 13, scope: !8067)
!8075 = !DILocation(line: 1970, column: 31, scope: !8067)
!8076 = !DILocation(line: 1970, column: 38, scope: !8067)
!8077 = !DILocation(line: 1971, column: 21, scope: !8067)
!8078 = !DILocation(line: 1971, column: 29, scope: !8067)
!8079 = !DILocation(line: 1971, column: 43, scope: !8067)
!8080 = !DILocation(line: 1971, column: 5, scope: !8067)
!8081 = !DILocation(line: 1972, column: 15, scope: !8067)
!8082 = !DILocation(line: 1973, column: 3, scope: !8067)
!8083 = !DILocation(line: 1978, column: 9, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 1978, column: 9)
!8085 = distinct !DILexicalBlock(scope: !8063, file: !3, line: 1975, column: 3)
!8086 = !DILocation(line: 1978, column: 16, scope: !8084)
!8087 = !DILocation(line: 1978, column: 9, scope: !8085)
!8088 = !DILocation(line: 1979, column: 38, scope: !8084)
!8089 = !DILocation(line: 1979, column: 7, scope: !8084)
!8090 = !DILocation(line: 1979, column: 29, scope: !8084)
!8091 = !DILocation(line: 1979, column: 36, scope: !8084)
!8092 = !DILocation(line: 1981, column: 45, scope: !8084)
!8093 = !DILocation(line: 1981, column: 7, scope: !8084)
!8094 = !DILocation(line: 1981, column: 43, scope: !8084)
!8095 = !DILocation(line: 1982, column: 9, scope: !8085)
!8096 = !DILocation(line: 1982, column: 7, scope: !8085)
!8097 = !DILocation(line: 1983, column: 35, scope: !8085)
!8098 = !DILocation(line: 1983, column: 38, scope: !8085)
!8099 = !DILocation(line: 1983, column: 5, scope: !8085)
!8100 = !DILocation(line: 1986, column: 10, scope: !8085)
!8101 = !DILocation(line: 1986, column: 13, scope: !8085)
!8102 = !DILocation(line: 1985, column: 9, scope: !8085)
!8103 = !DILocation(line: 1984, column: 5, scope: !8085)
!8104 = !DILocation(line: 1985, column: 7, scope: !8085)
!8105 = !DILocation(line: 1987, column: 14, scope: !8085)
!8106 = !DILocation(line: 1988, column: 5, scope: !8085)
!8107 = !DILocation(line: 1988, column: 29, scope: !8085)
!8108 = !DILocation(line: 1989, column: 39, scope: !8085)
!8109 = !DILocation(line: 1989, column: 49, scope: !8085)
!8110 = !DILocation(line: 1989, column: 5, scope: !8085)
!8111 = !DILocation(line: 1990, column: 21, scope: !8085)
!8112 = !DILocation(line: 1990, column: 5, scope: !8085)
!8113 = !DILocation(line: 1993, column: 2, scope: !8028)
!8114 = !DILocation(line: 1950, column: 9, scope: !8024)
!8115 = !DILocation(line: 1950, column: 7, scope: !8024)
!8116 = !DILocation(line: 1948, column: 7, scope: !8024)
!8117 = distinct !{!8117, !8026, !8118}
!8118 = !DILocation(line: 1993, column: 2, scope: !8018)
!8119 = !DILocation(line: 1994, column: 11, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8016, file: !3, line: 1994, column: 11)
!8121 = !DILocation(line: 1994, column: 11, scope: !8016)
!8122 = !DILocation(line: 1997, column: 8, scope: !8123)
!8123 = distinct !DILexicalBlock(scope: !8124, file: !3, line: 1997, column: 8)
!8124 = distinct !DILexicalBlock(scope: !8120, file: !3, line: 1996, column: 2)
!8125 = !DILocation(line: 1997, column: 23, scope: !8123)
!8126 = !DILocation(line: 1997, column: 8, scope: !8124)
!8127 = !DILocation(line: 2000, column: 9, scope: !8123)
!8128 = !DILocation(line: 2000, column: 7, scope: !8123)
!8129 = !DILocation(line: 1999, column: 28, scope: !8123)
!8130 = !DILocation(line: 1999, column: 10, scope: !8123)
!8131 = !DILocation(line: 1999, column: 8, scope: !8123)
!8132 = !DILocation(line: 1998, column: 6, scope: !8123)
!8133 = !DILocation(line: 2001, column: 36, scope: !8124)
!8134 = !DILocation(line: 2001, column: 4, scope: !8124)
!8135 = !DILocation(line: 2002, column: 2, scope: !8124)
!8136 = !DILocation(line: 2003, column: 5, scope: !8016)
!8137 = !DILocation(line: 1945, column: 73, scope: !8012)
!8138 = !DILocation(line: 1945, column: 3, scope: !8012)
!8139 = distinct !{!8139, !8014, !8140}
!8140 = !DILocation(line: 2003, column: 5, scope: !8007)
!8141 = !DILocation(line: 2004, column: 7, scope: !8142)
!8142 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 2004, column: 7)
!8143 = !DILocation(line: 2004, column: 7, scope: !7983)
!8144 = !DILocation(line: 2005, column: 5, scope: !8142)
!8145 = !DILocation(line: 2006, column: 7, scope: !8146)
!8146 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 2006, column: 7)
!8147 = !DILocation(line: 2006, column: 22, scope: !8146)
!8148 = !DILocation(line: 2006, column: 7, scope: !7983)
!8149 = !DILocation(line: 2007, column: 15, scope: !8146)
!8150 = !DILocation(line: 2007, column: 5, scope: !8146)
!8151 = !DILocation(line: 2008, column: 1, scope: !7983)
!8152 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_base_length", scope: !3, file: !3, line: 1787, type: !8153, scopeLine: 1787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8153 = !DISubroutineType(types: !8154)
!8154 = !{!7, !8155}
!8155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8156, size: 64)
!8156 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1984)
!8157 = !DILocalVariable(name: "vec_", arg: 1, scope: !8152, file: !3, line: 1787, type: !8155)
!8158 = !DILocation(line: 1787, column: 1, scope: !8152)
!8159 = distinct !DISubprogram(name: "finish_loop_tree_node", scope: !3, file: !3, line: 183, type: !3706, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8160 = !DILocalVariable(name: "loop", arg: 1, scope: !8159, file: !3, line: 183, type: !1844)
!8161 = !DILocation(line: 183, column: 45, scope: !8159)
!8162 = !DILocation(line: 185, column: 7, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8159, file: !3, line: 185, column: 7)
!8164 = !DILocation(line: 185, column: 13, scope: !8163)
!8165 = !DILocation(line: 185, column: 31, scope: !8163)
!8166 = !DILocation(line: 185, column: 7, scope: !8159)
!8167 = !DILocation(line: 188, column: 24, scope: !8168)
!8168 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 186, column: 5)
!8169 = !DILocation(line: 188, column: 30, scope: !8168)
!8170 = !DILocation(line: 188, column: 7, scope: !8168)
!8171 = !DILocation(line: 189, column: 24, scope: !8168)
!8172 = !DILocation(line: 189, column: 30, scope: !8168)
!8173 = !DILocation(line: 189, column: 7, scope: !8168)
!8174 = !DILocation(line: 190, column: 24, scope: !8168)
!8175 = !DILocation(line: 190, column: 30, scope: !8168)
!8176 = !DILocation(line: 190, column: 7, scope: !8168)
!8177 = !DILocation(line: 191, column: 24, scope: !8168)
!8178 = !DILocation(line: 191, column: 30, scope: !8168)
!8179 = !DILocation(line: 191, column: 7, scope: !8168)
!8180 = !DILocation(line: 192, column: 17, scope: !8168)
!8181 = !DILocation(line: 192, column: 23, scope: !8168)
!8182 = !DILocation(line: 192, column: 7, scope: !8168)
!8183 = !DILocation(line: 193, column: 7, scope: !8168)
!8184 = !DILocation(line: 193, column: 13, scope: !8168)
!8185 = !DILocation(line: 193, column: 31, scope: !8168)
!8186 = !DILocation(line: 194, column: 5, scope: !8168)
!8187 = !DILocation(line: 195, column: 1, scope: !8159)
!8188 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_base_pop", scope: !3, file: !3, line: 1787, type: !8189, scopeLine: 1787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8189 = !DISubroutineType(types: !8190)
!8190 = !{!1844, !8191}
!8191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1984, size: 64)
!8192 = !DILocalVariable(name: "vec_", arg: 1, scope: !8188, file: !3, line: 1787, type: !8191)
!8193 = !DILocation(line: 1787, column: 1, scope: !8188)
!8194 = !DILocalVariable(name: "obj_", scope: !8188, file: !3, line: 1787, type: !1844)
!8195 = distinct !DISubprogram(name: "loop_depth", scope: !135, file: !135, line: 425, type: !8196, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8196 = !DISubroutineType(types: !8197)
!8197 = !{!7, !6791}
!8198 = !DILocalVariable(name: "loop", arg: 1, scope: !8195, file: !135, line: 425, type: !6791)
!8199 = !DILocation(line: 425, column: 32, scope: !8195)
!8200 = !DILocation(line: 427, column: 10, scope: !8195)
!8201 = !DILocation(line: 427, column: 3, scope: !8195)
!8202 = distinct !DISubprogram(name: "low_pressure_loop_node_p", scope: !3, file: !3, line: 1662, type: !8203, scopeLine: 1663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8203 = !DISubroutineType(types: !8204)
!8204 = !{!942, !1844}
!8205 = !DILocalVariable(name: "node", arg: 1, scope: !8202, file: !3, line: 1662, type: !1844)
!8206 = !DILocation(line: 1662, column: 48, scope: !8202)
!8207 = !DILocalVariable(name: "i", scope: !8202, file: !3, line: 1664, type: !703)
!8208 = !DILocation(line: 1664, column: 7, scope: !8202)
!8209 = !DILocalVariable(name: "cover_class", scope: !8202, file: !3, line: 1665, type: !390)
!8210 = !DILocation(line: 1665, column: 18, scope: !8202)
!8211 = !DILocation(line: 1667, column: 7, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 1667, column: 7)
!8213 = !DILocation(line: 1667, column: 13, scope: !8212)
!8214 = !DILocation(line: 1667, column: 16, scope: !8212)
!8215 = !DILocation(line: 1667, column: 7, scope: !8202)
!8216 = !DILocation(line: 1668, column: 5, scope: !8212)
!8217 = !DILocation(line: 1670, column: 10, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8202, file: !3, line: 1670, column: 3)
!8219 = !DILocation(line: 1670, column: 8, scope: !8218)
!8220 = !DILocation(line: 1670, column: 15, scope: !8221)
!8221 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 1670, column: 3)
!8222 = !DILocation(line: 1670, column: 19, scope: !8221)
!8223 = !DILocation(line: 1670, column: 17, scope: !8221)
!8224 = !DILocation(line: 1670, column: 3, scope: !8218)
!8225 = !DILocation(line: 1672, column: 41, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 1671, column: 5)
!8227 = !DILocation(line: 1672, column: 21, scope: !8226)
!8228 = !DILocation(line: 1672, column: 19, scope: !8226)
!8229 = !DILocation(line: 1673, column: 11, scope: !8230)
!8230 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 1673, column: 11)
!8231 = !DILocation(line: 1673, column: 17, scope: !8230)
!8232 = !DILocation(line: 1673, column: 30, scope: !8230)
!8233 = !DILocation(line: 1674, column: 31, scope: !8230)
!8234 = !DILocation(line: 1674, column: 6, scope: !8230)
!8235 = !DILocation(line: 1674, column: 4, scope: !8230)
!8236 = !DILocation(line: 1673, column: 11, scope: !8226)
!8237 = !DILocation(line: 1675, column: 2, scope: !8230)
!8238 = !DILocation(line: 1676, column: 5, scope: !8226)
!8239 = !DILocation(line: 1670, column: 46, scope: !8221)
!8240 = !DILocation(line: 1670, column: 3, scope: !8221)
!8241 = distinct !{!8241, !8224, !8242}
!8242 = !DILocation(line: 1676, column: 5, scope: !8218)
!8243 = !DILocation(line: 1677, column: 3, scope: !8202)
!8244 = !DILocation(line: 1678, column: 1, scope: !8202)
!8245 = distinct !DISubprogram(name: "loop_compare_func", scope: !3, file: !3, line: 1684, type: !1269, scopeLine: 1685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8246 = !DILocalVariable(name: "v1p", arg: 1, scope: !8245, file: !3, line: 1684, type: !1264)
!8247 = !DILocation(line: 1684, column: 32, scope: !8245)
!8248 = !DILocalVariable(name: "v2p", arg: 2, scope: !8245, file: !3, line: 1684, type: !1264)
!8249 = !DILocation(line: 1684, column: 49, scope: !8245)
!8250 = !DILocalVariable(name: "diff", scope: !8245, file: !3, line: 1686, type: !703)
!8251 = !DILocation(line: 1686, column: 7, scope: !8245)
!8252 = !DILocalVariable(name: "l1", scope: !8245, file: !3, line: 1687, type: !1844)
!8253 = !DILocation(line: 1687, column: 24, scope: !8245)
!8254 = !DILocation(line: 1687, column: 61, scope: !8245)
!8255 = !DILocation(line: 1687, column: 30, scope: !8245)
!8256 = !DILocation(line: 1687, column: 29, scope: !8245)
!8257 = !DILocalVariable(name: "l2", scope: !8245, file: !3, line: 1688, type: !1844)
!8258 = !DILocation(line: 1688, column: 24, scope: !8245)
!8259 = !DILocation(line: 1688, column: 61, scope: !8245)
!8260 = !DILocation(line: 1688, column: 30, scope: !8245)
!8261 = !DILocation(line: 1688, column: 29, scope: !8245)
!8262 = !DILocation(line: 1691, column: 7, scope: !8263)
!8263 = distinct !DILexicalBlock(scope: !8245, file: !3, line: 1691, column: 7)
!8264 = !DILocation(line: 1691, column: 11, scope: !8263)
!8265 = !DILocation(line: 1691, column: 23, scope: !8263)
!8266 = !DILocation(line: 1691, column: 28, scope: !8263)
!8267 = !DILocation(line: 1691, column: 32, scope: !8263)
!8268 = !DILocation(line: 1691, column: 7, scope: !8245)
!8269 = !DILocation(line: 1692, column: 5, scope: !8263)
!8270 = !DILocation(line: 1693, column: 9, scope: !8271)
!8271 = distinct !DILexicalBlock(scope: !8245, file: !3, line: 1693, column: 7)
!8272 = !DILocation(line: 1693, column: 13, scope: !8271)
!8273 = !DILocation(line: 1693, column: 25, scope: !8271)
!8274 = !DILocation(line: 1693, column: 28, scope: !8271)
!8275 = !DILocation(line: 1693, column: 32, scope: !8271)
!8276 = !DILocation(line: 1693, column: 7, scope: !8245)
!8277 = !DILocation(line: 1694, column: 5, scope: !8271)
!8278 = !DILocation(line: 1695, column: 15, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8245, file: !3, line: 1695, column: 7)
!8280 = !DILocation(line: 1695, column: 19, scope: !8279)
!8281 = !DILocation(line: 1695, column: 25, scope: !8279)
!8282 = !DILocation(line: 1695, column: 33, scope: !8279)
!8283 = !DILocation(line: 1695, column: 45, scope: !8279)
!8284 = !DILocation(line: 1695, column: 49, scope: !8279)
!8285 = !DILocation(line: 1695, column: 55, scope: !8279)
!8286 = !DILocation(line: 1695, column: 63, scope: !8279)
!8287 = !DILocation(line: 1695, column: 43, scope: !8279)
!8288 = !DILocation(line: 1695, column: 13, scope: !8279)
!8289 = !DILocation(line: 1695, column: 74, scope: !8279)
!8290 = !DILocation(line: 1695, column: 7, scope: !8245)
!8291 = !DILocation(line: 1696, column: 12, scope: !8279)
!8292 = !DILocation(line: 1696, column: 5, scope: !8279)
!8293 = !DILocation(line: 1697, column: 33, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8245, file: !3, line: 1697, column: 7)
!8295 = !DILocation(line: 1697, column: 37, scope: !8294)
!8296 = !DILocation(line: 1697, column: 21, scope: !8294)
!8297 = !DILocation(line: 1697, column: 63, scope: !8294)
!8298 = !DILocation(line: 1697, column: 67, scope: !8294)
!8299 = !DILocation(line: 1697, column: 51, scope: !8294)
!8300 = !DILocation(line: 1697, column: 43, scope: !8294)
!8301 = !DILocation(line: 1697, column: 13, scope: !8294)
!8302 = !DILocation(line: 1697, column: 74, scope: !8294)
!8303 = !DILocation(line: 1697, column: 7, scope: !8245)
!8304 = !DILocation(line: 1698, column: 12, scope: !8294)
!8305 = !DILocation(line: 1698, column: 5, scope: !8294)
!8306 = !DILocation(line: 1700, column: 10, scope: !8245)
!8307 = !DILocation(line: 1700, column: 14, scope: !8245)
!8308 = !DILocation(line: 1700, column: 20, scope: !8245)
!8309 = !DILocation(line: 1700, column: 26, scope: !8245)
!8310 = !DILocation(line: 1700, column: 30, scope: !8245)
!8311 = !DILocation(line: 1700, column: 36, scope: !8245)
!8312 = !DILocation(line: 1700, column: 24, scope: !8245)
!8313 = !DILocation(line: 1700, column: 3, scope: !8245)
!8314 = !DILocation(line: 1701, column: 1, scope: !8245)
!8315 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_heap_safe_push", scope: !3, file: !3, line: 1788, type: !8316, scopeLine: 1788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8316 = !DISubroutineType(types: !8317)
!8317 = !{!1976, !7827, !1844}
!8318 = !DILocalVariable(name: "vec_", arg: 1, scope: !8315, file: !3, line: 1788, type: !7827)
!8319 = !DILocation(line: 1788, column: 1, scope: !8315)
!8320 = !DILocalVariable(name: "obj_", arg: 2, scope: !8315, file: !3, line: 1788, type: !1844)
!8321 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_heap_reserve", scope: !3, file: !3, line: 1788, type: !8322, scopeLine: 1788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8322 = !DISubroutineType(types: !8323)
!8323 = !{!703, !7827, !703}
!8324 = !DILocalVariable(name: "vec_", arg: 1, scope: !8321, file: !3, line: 1788, type: !7827)
!8325 = !DILocation(line: 1788, column: 1, scope: !8321)
!8326 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8321, file: !3, line: 1788, type: !703)
!8327 = !DILocalVariable(name: "extend", scope: !8321, file: !3, line: 1788, type: !703)
!8328 = !DILocation(line: 1788, column: 1, scope: !8329)
!8329 = distinct !DILexicalBlock(scope: !8321, file: !3, line: 1788, column: 1)
!8330 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_base_quick_push", scope: !3, file: !3, line: 1787, type: !8331, scopeLine: 1787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8331 = !DISubroutineType(types: !8332)
!8332 = !{!1976, !8191, !1844}
!8333 = !DILocalVariable(name: "vec_", arg: 1, scope: !8330, file: !3, line: 1787, type: !8191)
!8334 = !DILocation(line: 1787, column: 1, scope: !8330)
!8335 = !DILocalVariable(name: "obj_", arg: 2, scope: !8330, file: !3, line: 1787, type: !1844)
!8336 = !DILocalVariable(name: "slot_", scope: !8330, file: !3, line: 1787, type: !1976)
!8337 = distinct !DISubprogram(name: "VEC_ira_loop_tree_node_t_base_space", scope: !3, file: !3, line: 1787, type: !8338, scopeLine: 1787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8338 = !DISubroutineType(types: !8339)
!8339 = !{!703, !8191, !703}
!8340 = !DILocalVariable(name: "vec_", arg: 1, scope: !8337, file: !3, line: 1787, type: !8191)
!8341 = !DILocation(line: 1787, column: 1, scope: !8337)
!8342 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8337, file: !3, line: 1787, type: !703)
!8343 = distinct !DISubprogram(name: "propagate_some_info_from_allocno", scope: !3, file: !3, line: 1897, type: !2375, scopeLine: 1898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8344 = !DILocalVariable(name: "a", arg: 1, scope: !8343, file: !3, line: 1897, type: !697)
!8345 = !DILocation(line: 1897, column: 49, scope: !8343)
!8346 = !DILocalVariable(name: "from_a", arg: 2, scope: !8343, file: !3, line: 1897, type: !697)
!8347 = !DILocation(line: 1897, column: 66, scope: !8343)
!8348 = !DILocalVariable(name: "cover_class", scope: !8343, file: !3, line: 1899, type: !390)
!8349 = !DILocation(line: 1899, column: 18, scope: !8343)
!8350 = !DILocation(line: 1901, column: 3, scope: !8343)
!8351 = !DILocation(line: 1904, column: 7, scope: !8352)
!8352 = distinct !DILexicalBlock(scope: !8343, file: !3, line: 1904, column: 7)
!8353 = !DILocation(line: 1904, column: 7, scope: !8343)
!8354 = !DILocation(line: 1905, column: 5, scope: !8352)
!8355 = !DILocation(line: 1905, column: 32, scope: !8352)
!8356 = !DILocation(line: 1907, column: 24, scope: !8343)
!8357 = !DILocation(line: 1907, column: 3, scope: !8343)
!8358 = !DILocation(line: 1907, column: 21, scope: !8343)
!8359 = !DILocation(line: 1908, column: 23, scope: !8343)
!8360 = !DILocation(line: 1908, column: 3, scope: !8343)
!8361 = !DILocation(line: 1908, column: 20, scope: !8343)
!8362 = !DILocation(line: 1909, column: 28, scope: !8343)
!8363 = !DILocation(line: 1909, column: 3, scope: !8343)
!8364 = !DILocation(line: 1909, column: 25, scope: !8343)
!8365 = !DILocation(line: 1910, column: 3, scope: !8343)
!8366 = !DILocation(line: 1912, column: 36, scope: !8343)
!8367 = !DILocation(line: 1912, column: 3, scope: !8343)
!8368 = !DILocation(line: 1912, column: 33, scope: !8343)
!8369 = !DILocation(line: 1914, column: 8, scope: !8343)
!8370 = !DILocation(line: 1913, column: 3, scope: !8343)
!8371 = !DILocation(line: 1914, column: 5, scope: !8343)
!8372 = !DILocation(line: 1915, column: 9, scope: !8373)
!8373 = distinct !DILexicalBlock(scope: !8343, file: !3, line: 1915, column: 7)
!8374 = !DILocation(line: 1915, column: 7, scope: !8343)
!8375 = !DILocation(line: 1916, column: 5, scope: !8373)
!8376 = !DILocation(line: 1916, column: 29, scope: !8373)
!8377 = !DILocation(line: 1918, column: 7, scope: !8378)
!8378 = distinct !DILexicalBlock(scope: !8343, file: !3, line: 1918, column: 7)
!8379 = !DILocation(line: 1918, column: 7, scope: !8343)
!8380 = !DILocation(line: 1919, column: 5, scope: !8378)
!8381 = !DILocation(line: 1919, column: 38, scope: !8378)
!8382 = !DILocation(line: 1921, column: 17, scope: !8343)
!8383 = !DILocation(line: 1921, column: 15, scope: !8343)
!8384 = !DILocation(line: 1923, column: 39, scope: !8343)
!8385 = !DILocation(line: 1923, column: 67, scope: !8343)
!8386 = !DILocation(line: 1924, column: 10, scope: !8343)
!8387 = !DILocation(line: 1923, column: 3, scope: !8343)
!8388 = !DILocation(line: 1925, column: 39, scope: !8343)
!8389 = !DILocation(line: 1926, column: 10, scope: !8343)
!8390 = !DILocation(line: 1927, column: 10, scope: !8343)
!8391 = !DILocation(line: 1925, column: 3, scope: !8343)
!8392 = !DILocation(line: 1928, column: 35, scope: !8343)
!8393 = !DILocation(line: 1928, column: 3, scope: !8343)
!8394 = !DILocation(line: 1928, column: 32, scope: !8343)
!8395 = !DILocation(line: 1929, column: 30, scope: !8343)
!8396 = !DILocation(line: 1929, column: 3, scope: !8343)
!8397 = !DILocation(line: 1929, column: 27, scope: !8343)
!8398 = !DILocation(line: 1930, column: 1, scope: !8343)
!8399 = distinct !DISubprogram(name: "ira_allocate_and_accumulate_costs", scope: !698, file: !698, line: 1186, type: !8400, scopeLine: 1188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8400 = !DISubroutineType(types: !8401)
!8401 = !{null, !8402, !390, !1934}
!8402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1934, size: 64)
!8403 = !DILocalVariable(name: "vec", arg: 1, scope: !8399, file: !698, line: 1186, type: !8402)
!8404 = !DILocation(line: 1186, column: 42, scope: !8399)
!8405 = !DILocalVariable(name: "cover_class", arg: 2, scope: !8399, file: !698, line: 1186, type: !390)
!8406 = !DILocation(line: 1186, column: 62, scope: !8399)
!8407 = !DILocalVariable(name: "src", arg: 3, scope: !8399, file: !698, line: 1187, type: !1934)
!8408 = !DILocation(line: 1187, column: 13, scope: !8399)
!8409 = !DILocalVariable(name: "i", scope: !8399, file: !698, line: 1189, type: !703)
!8410 = !DILocation(line: 1189, column: 7, scope: !8399)
!8411 = !DILocalVariable(name: "len", scope: !8399, file: !698, line: 1189, type: !703)
!8412 = !DILocation(line: 1189, column: 10, scope: !8399)
!8413 = !DILocation(line: 1191, column: 7, scope: !8414)
!8414 = distinct !DILexicalBlock(scope: !8399, file: !698, line: 1191, column: 7)
!8415 = !DILocation(line: 1191, column: 11, scope: !8414)
!8416 = !DILocation(line: 1191, column: 7, scope: !8399)
!8417 = !DILocation(line: 1192, column: 5, scope: !8414)
!8418 = !DILocation(line: 1193, column: 33, scope: !8399)
!8419 = !DILocation(line: 1193, column: 9, scope: !8399)
!8420 = !DILocation(line: 1193, column: 7, scope: !8399)
!8421 = !DILocation(line: 1194, column: 8, scope: !8422)
!8422 = distinct !DILexicalBlock(scope: !8399, file: !698, line: 1194, column: 7)
!8423 = !DILocation(line: 1194, column: 7, scope: !8422)
!8424 = !DILocation(line: 1194, column: 12, scope: !8422)
!8425 = !DILocation(line: 1194, column: 7, scope: !8399)
!8426 = !DILocation(line: 1196, column: 40, scope: !8427)
!8427 = distinct !DILexicalBlock(scope: !8422, file: !698, line: 1195, column: 5)
!8428 = !DILocation(line: 1196, column: 14, scope: !8427)
!8429 = !DILocation(line: 1196, column: 8, scope: !8427)
!8430 = !DILocation(line: 1196, column: 12, scope: !8427)
!8431 = !DILocation(line: 1197, column: 16, scope: !8427)
!8432 = !DILocation(line: 1197, column: 15, scope: !8427)
!8433 = !DILocation(line: 1197, column: 7, scope: !8427)
!8434 = !DILocation(line: 1197, column: 39, scope: !8427)
!8435 = !DILocation(line: 1197, column: 37, scope: !8427)
!8436 = !DILocation(line: 1198, column: 5, scope: !8427)
!8437 = !DILocation(line: 1199, column: 10, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8399, file: !698, line: 1199, column: 3)
!8439 = !DILocation(line: 1199, column: 8, scope: !8438)
!8440 = !DILocation(line: 1199, column: 15, scope: !8441)
!8441 = distinct !DILexicalBlock(scope: !8438, file: !698, line: 1199, column: 3)
!8442 = !DILocation(line: 1199, column: 19, scope: !8441)
!8443 = !DILocation(line: 1199, column: 17, scope: !8441)
!8444 = !DILocation(line: 1199, column: 3, scope: !8438)
!8445 = !DILocation(line: 1200, column: 18, scope: !8441)
!8446 = !DILocation(line: 1200, column: 22, scope: !8441)
!8447 = !DILocation(line: 1200, column: 7, scope: !8441)
!8448 = !DILocation(line: 1200, column: 6, scope: !8441)
!8449 = !DILocation(line: 1200, column: 12, scope: !8441)
!8450 = !DILocation(line: 1200, column: 5, scope: !8441)
!8451 = !DILocation(line: 1200, column: 15, scope: !8441)
!8452 = !DILocation(line: 1199, column: 25, scope: !8441)
!8453 = !DILocation(line: 1199, column: 3, scope: !8441)
!8454 = distinct !{!8454, !8444, !8455}
!8455 = !DILocation(line: 1200, column: 23, scope: !8438)
!8456 = !DILocation(line: 1201, column: 1, scope: !8399)
!8457 = distinct !DISubprogram(name: "ira_rebuild_regno_allocno_list", scope: !3, file: !3, line: 1870, type: !8458, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8458 = !DISubroutineType(types: !8459)
!8459 = !{null, !703}
!8460 = !DILocalVariable(name: "regno", arg: 1, scope: !8457, file: !3, line: 1870, type: !703)
!8461 = !DILocation(line: 1870, column: 37, scope: !8457)
!8462 = !DILocalVariable(name: "i", scope: !8457, file: !3, line: 1872, type: !703)
!8463 = !DILocation(line: 1872, column: 7, scope: !8457)
!8464 = !DILocalVariable(name: "n", scope: !8457, file: !3, line: 1872, type: !703)
!8465 = !DILocation(line: 1872, column: 10, scope: !8457)
!8466 = !DILocalVariable(name: "a", scope: !8457, file: !3, line: 1873, type: !697)
!8467 = !DILocation(line: 1873, column: 17, scope: !8457)
!8468 = !DILocation(line: 1875, column: 10, scope: !8469)
!8469 = distinct !DILexicalBlock(scope: !8457, file: !3, line: 1875, column: 3)
!8470 = !DILocation(line: 1875, column: 19, scope: !8469)
!8471 = !DILocation(line: 1875, column: 41, scope: !8469)
!8472 = !DILocation(line: 1875, column: 17, scope: !8469)
!8473 = !DILocation(line: 1875, column: 8, scope: !8469)
!8474 = !DILocation(line: 1876, column: 8, scope: !8475)
!8475 = distinct !DILexicalBlock(scope: !8469, file: !3, line: 1875, column: 3)
!8476 = !DILocation(line: 1876, column: 10, scope: !8475)
!8477 = !DILocation(line: 1875, column: 3, scope: !8469)
!8478 = !DILocation(line: 1878, column: 27, scope: !8475)
!8479 = !DILocation(line: 1878, column: 5, scope: !8475)
!8480 = !DILocation(line: 1878, column: 21, scope: !8475)
!8481 = !DILocation(line: 1878, column: 25, scope: !8475)
!8482 = !DILocation(line: 1877, column: 12, scope: !8475)
!8483 = !DILocation(line: 1877, column: 10, scope: !8475)
!8484 = !DILocation(line: 1875, column: 3, scope: !8475)
!8485 = distinct !{!8485, !8477, !8486}
!8486 = !DILocation(line: 1878, column: 27, scope: !8469)
!8487 = !DILocation(line: 1881, column: 15, scope: !8457)
!8488 = !DILocation(line: 1881, column: 31, scope: !8457)
!8489 = !DILocation(line: 1881, column: 3, scope: !8457)
!8490 = !DILocation(line: 1887, column: 10, scope: !8491)
!8491 = distinct !DILexicalBlock(scope: !8457, file: !3, line: 1887, column: 3)
!8492 = !DILocation(line: 1887, column: 8, scope: !8491)
!8493 = !DILocation(line: 1887, column: 15, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 1887, column: 3)
!8495 = !DILocation(line: 1887, column: 19, scope: !8494)
!8496 = !DILocation(line: 1887, column: 17, scope: !8494)
!8497 = !DILocation(line: 1887, column: 3, scope: !8491)
!8498 = !DILocation(line: 1888, column: 58, scope: !8494)
!8499 = !DILocation(line: 1888, column: 73, scope: !8494)
!8500 = !DILocation(line: 1888, column: 5, scope: !8494)
!8501 = !DILocation(line: 1888, column: 56, scope: !8494)
!8502 = !DILocation(line: 1887, column: 23, scope: !8494)
!8503 = !DILocation(line: 1887, column: 3, scope: !8494)
!8504 = distinct !{!8504, !8497, !8505}
!8505 = !DILocation(line: 1888, column: 74, scope: !8491)
!8506 = !DILocation(line: 1889, column: 3, scope: !8457)
!8507 = !DILocation(line: 1889, column: 54, scope: !8457)
!8508 = !DILocation(line: 1890, column: 34, scope: !8457)
!8509 = !DILocation(line: 1890, column: 3, scope: !8457)
!8510 = !DILocation(line: 1890, column: 25, scope: !8457)
!8511 = !DILocation(line: 1890, column: 32, scope: !8457)
!8512 = !DILocation(line: 1891, column: 7, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8457, file: !3, line: 1891, column: 7)
!8514 = !DILocation(line: 1891, column: 33, scope: !8513)
!8515 = !DILocation(line: 1891, column: 37, scope: !8513)
!8516 = !DILocation(line: 1891, column: 40, scope: !8513)
!8517 = !DILocation(line: 1891, column: 54, scope: !8513)
!8518 = !DILocation(line: 1891, column: 7, scope: !8457)
!8519 = !DILocation(line: 1892, column: 14, scope: !8513)
!8520 = !DILocation(line: 1892, column: 72, scope: !8513)
!8521 = !DILocation(line: 1892, column: 5, scope: !8513)
!8522 = !DILocation(line: 1893, column: 1, scope: !8457)
!8523 = distinct !DISubprogram(name: "regno_allocno_order_compare_func", scope: !3, file: !3, line: 1846, type: !1269, scopeLine: 1847, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8524 = !DILocalVariable(name: "v1p", arg: 1, scope: !8523, file: !3, line: 1846, type: !1264)
!8525 = !DILocation(line: 1846, column: 47, scope: !8523)
!8526 = !DILocalVariable(name: "v2p", arg: 2, scope: !8523, file: !3, line: 1846, type: !1264)
!8527 = !DILocation(line: 1846, column: 64, scope: !8523)
!8528 = !DILocalVariable(name: "a1", scope: !8523, file: !3, line: 1848, type: !697)
!8529 = !DILocation(line: 1848, column: 17, scope: !8523)
!8530 = !DILocation(line: 1848, column: 47, scope: !8523)
!8531 = !DILocation(line: 1848, column: 23, scope: !8523)
!8532 = !DILocation(line: 1848, column: 22, scope: !8523)
!8533 = !DILocalVariable(name: "a2", scope: !8523, file: !3, line: 1849, type: !697)
!8534 = !DILocation(line: 1849, column: 17, scope: !8523)
!8535 = !DILocation(line: 1849, column: 47, scope: !8523)
!8536 = !DILocation(line: 1849, column: 23, scope: !8523)
!8537 = !DILocation(line: 1849, column: 22, scope: !8523)
!8538 = !DILocalVariable(name: "n1", scope: !8523, file: !3, line: 1850, type: !1844)
!8539 = !DILocation(line: 1850, column: 24, scope: !8523)
!8540 = !DILocation(line: 1850, column: 29, scope: !8523)
!8541 = !DILocalVariable(name: "n2", scope: !8523, file: !3, line: 1851, type: !1844)
!8542 = !DILocation(line: 1851, column: 24, scope: !8523)
!8543 = !DILocation(line: 1851, column: 29, scope: !8523)
!8544 = !DILocation(line: 1853, column: 25, scope: !8545)
!8545 = distinct !DILexicalBlock(scope: !8523, file: !3, line: 1853, column: 7)
!8546 = !DILocation(line: 1853, column: 29, scope: !8545)
!8547 = !DILocation(line: 1853, column: 7, scope: !8545)
!8548 = !DILocation(line: 1853, column: 7, scope: !8523)
!8549 = !DILocation(line: 1854, column: 5, scope: !8545)
!8550 = !DILocation(line: 1855, column: 30, scope: !8551)
!8551 = distinct !DILexicalBlock(scope: !8545, file: !3, line: 1855, column: 12)
!8552 = !DILocation(line: 1855, column: 34, scope: !8551)
!8553 = !DILocation(line: 1855, column: 12, scope: !8551)
!8554 = !DILocation(line: 1855, column: 12, scope: !8545)
!8555 = !DILocation(line: 1856, column: 5, scope: !8551)
!8556 = !DILocation(line: 1861, column: 10, scope: !8523)
!8557 = !DILocation(line: 1861, column: 29, scope: !8523)
!8558 = !DILocation(line: 1861, column: 27, scope: !8523)
!8559 = !DILocation(line: 1861, column: 3, scope: !8523)
!8560 = !DILocation(line: 1862, column: 1, scope: !8523)
!8561 = distinct !DISubprogram(name: "loop_is_inside_p", scope: !3, file: !3, line: 1836, type: !8562, scopeLine: 1837, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8562 = !DISubroutineType(types: !8563)
!8563 = !{!942, !1844, !1844}
!8564 = !DILocalVariable(name: "node", arg: 1, scope: !8561, file: !3, line: 1836, type: !1844)
!8565 = !DILocation(line: 1836, column: 40, scope: !8561)
!8566 = !DILocalVariable(name: "parent", arg: 2, scope: !8561, file: !3, line: 1836, type: !1844)
!8567 = !DILocation(line: 1836, column: 67, scope: !8561)
!8568 = !DILocation(line: 1838, column: 15, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8561, file: !3, line: 1838, column: 3)
!8570 = !DILocation(line: 1838, column: 21, scope: !8569)
!8571 = !DILocation(line: 1838, column: 13, scope: !8569)
!8572 = !DILocation(line: 1838, column: 8, scope: !8569)
!8573 = !DILocation(line: 1838, column: 29, scope: !8574)
!8574 = distinct !DILexicalBlock(scope: !8569, file: !3, line: 1838, column: 3)
!8575 = !DILocation(line: 1838, column: 34, scope: !8574)
!8576 = !DILocation(line: 1838, column: 3, scope: !8569)
!8577 = !DILocation(line: 1839, column: 9, scope: !8578)
!8578 = distinct !DILexicalBlock(scope: !8574, file: !3, line: 1839, column: 9)
!8579 = !DILocation(line: 1839, column: 17, scope: !8578)
!8580 = !DILocation(line: 1839, column: 14, scope: !8578)
!8581 = !DILocation(line: 1839, column: 9, scope: !8574)
!8582 = !DILocation(line: 1840, column: 7, scope: !8578)
!8583 = !DILocation(line: 1838, column: 50, scope: !8574)
!8584 = !DILocation(line: 1838, column: 56, scope: !8574)
!8585 = !DILocation(line: 1838, column: 48, scope: !8574)
!8586 = !DILocation(line: 1838, column: 3, scope: !8574)
!8587 = distinct !{!8587, !8576, !8588}
!8588 = !DILocation(line: 1840, column: 14, scope: !8569)
!8589 = !DILocation(line: 1841, column: 3, scope: !8561)
!8590 = !DILocation(line: 1842, column: 1, scope: !8561)
!8591 = distinct !DISubprogram(name: "bitmap_initialize_stat", scope: !767, file: !767, line: 165, type: !8592, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8592 = !DISubroutineType(types: !8593)
!8593 = !{null, !1865, !787}
!8594 = !DILocalVariable(name: "head", arg: 1, scope: !8591, file: !767, line: 165, type: !1865)
!8595 = !DILocation(line: 165, column: 32, scope: !8591)
!8596 = !DILocalVariable(name: "obstack", arg: 2, scope: !8591, file: !767, line: 165, type: !787)
!8597 = !DILocation(line: 165, column: 54, scope: !8591)
!8598 = !DILocation(line: 167, column: 17, scope: !8591)
!8599 = !DILocation(line: 167, column: 23, scope: !8591)
!8600 = !DILocation(line: 167, column: 31, scope: !8591)
!8601 = !DILocation(line: 167, column: 3, scope: !8591)
!8602 = !DILocation(line: 167, column: 9, scope: !8591)
!8603 = !DILocation(line: 167, column: 15, scope: !8591)
!8604 = !DILocation(line: 168, column: 19, scope: !8591)
!8605 = !DILocation(line: 168, column: 3, scope: !8591)
!8606 = !DILocation(line: 168, column: 9, scope: !8591)
!8607 = !DILocation(line: 168, column: 17, scope: !8591)
!8608 = !DILocation(line: 172, column: 1, scope: !8591)
!8609 = distinct !DISubprogram(name: "create_cap_allocno", scope: !3, file: !3, line: 756, type: !8610, scopeLine: 757, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8610 = !DISubroutineType(types: !8611)
!8611 = !{!697, !697}
!8612 = !DILocalVariable(name: "a", arg: 1, scope: !8609, file: !3, line: 756, type: !697)
!8613 = !DILocation(line: 756, column: 35, scope: !8609)
!8614 = !DILocalVariable(name: "cap", scope: !8609, file: !3, line: 758, type: !697)
!8615 = !DILocation(line: 758, column: 17, scope: !8609)
!8616 = !DILocalVariable(name: "parent", scope: !8609, file: !3, line: 759, type: !1844)
!8617 = !DILocation(line: 759, column: 24, scope: !8609)
!8618 = !DILocalVariable(name: "cover_class", scope: !8609, file: !3, line: 760, type: !390)
!8619 = !DILocation(line: 760, column: 18, scope: !8609)
!8620 = !DILocation(line: 764, column: 12, scope: !8609)
!8621 = !DILocation(line: 764, column: 40, scope: !8609)
!8622 = !DILocation(line: 764, column: 10, scope: !8609)
!8623 = !DILocation(line: 765, column: 29, scope: !8609)
!8624 = !DILocation(line: 765, column: 54, scope: !8609)
!8625 = !DILocation(line: 765, column: 9, scope: !8609)
!8626 = !DILocation(line: 765, column: 7, scope: !8609)
!8627 = !DILocation(line: 766, column: 24, scope: !8609)
!8628 = !DILocation(line: 766, column: 3, scope: !8609)
!8629 = !DILocation(line: 766, column: 22, scope: !8609)
!8630 = !DILocation(line: 767, column: 17, scope: !8609)
!8631 = !DILocation(line: 767, column: 15, scope: !8609)
!8632 = !DILocation(line: 768, column: 32, scope: !8609)
!8633 = !DILocation(line: 768, column: 37, scope: !8609)
!8634 = !DILocation(line: 768, column: 3, scope: !8609)
!8635 = !DILocation(line: 769, column: 38, scope: !8609)
!8636 = !DILocation(line: 769, column: 3, scope: !8609)
!8637 = !DILocation(line: 769, column: 36, scope: !8609)
!8638 = !DILocation(line: 770, column: 30, scope: !8609)
!8639 = !DILocation(line: 770, column: 3, scope: !8609)
!8640 = !DILocation(line: 770, column: 28, scope: !8609)
!8641 = !DILocation(line: 771, column: 21, scope: !8609)
!8642 = !DILocation(line: 771, column: 3, scope: !8609)
!8643 = !DILocation(line: 771, column: 19, scope: !8609)
!8644 = !DILocation(line: 772, column: 36, scope: !8609)
!8645 = !DILocation(line: 772, column: 3, scope: !8609)
!8646 = !DILocation(line: 772, column: 34, scope: !8609)
!8647 = !DILocation(line: 773, column: 31, scope: !8609)
!8648 = !DILocation(line: 773, column: 3, scope: !8609)
!8649 = !DILocation(line: 773, column: 29, scope: !8609)
!8650 = !DILocation(line: 775, column: 7, scope: !8609)
!8651 = !DILocation(line: 775, column: 37, scope: !8609)
!8652 = !DILocation(line: 775, column: 50, scope: !8609)
!8653 = !DILocation(line: 774, column: 3, scope: !8609)
!8654 = !DILocation(line: 777, column: 7, scope: !8609)
!8655 = !DILocation(line: 777, column: 46, scope: !8609)
!8656 = !DILocation(line: 778, column: 6, scope: !8609)
!8657 = !DILocation(line: 776, column: 3, scope: !8609)
!8658 = !DILocation(line: 779, column: 31, scope: !8609)
!8659 = !DILocation(line: 779, column: 3, scope: !8609)
!8660 = !DILocation(line: 779, column: 29, scope: !8609)
!8661 = !DILocation(line: 780, column: 25, scope: !8609)
!8662 = !DILocation(line: 780, column: 3, scope: !8609)
!8663 = !DILocation(line: 780, column: 23, scope: !8609)
!8664 = !DILocation(line: 781, column: 24, scope: !8609)
!8665 = !DILocation(line: 781, column: 3, scope: !8609)
!8666 = !DILocation(line: 781, column: 22, scope: !8609)
!8667 = !DILocation(line: 782, column: 29, scope: !8609)
!8668 = !DILocation(line: 782, column: 3, scope: !8609)
!8669 = !DILocation(line: 782, column: 27, scope: !8609)
!8670 = !DILocation(line: 783, column: 3, scope: !8609)
!8671 = !DILocation(line: 785, column: 3, scope: !8609)
!8672 = !DILocation(line: 787, column: 37, scope: !8609)
!8673 = !DILocation(line: 787, column: 3, scope: !8609)
!8674 = !DILocation(line: 787, column: 35, scope: !8609)
!8675 = !DILocation(line: 789, column: 34, scope: !8609)
!8676 = !DILocation(line: 789, column: 3, scope: !8609)
!8677 = !DILocation(line: 789, column: 32, scope: !8609)
!8678 = !DILocation(line: 790, column: 40, scope: !8609)
!8679 = !DILocation(line: 790, column: 3, scope: !8609)
!8680 = !DILocation(line: 790, column: 38, scope: !8609)
!8681 = !DILocation(line: 792, column: 7, scope: !8682)
!8682 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 792, column: 7)
!8683 = !DILocation(line: 792, column: 33, scope: !8682)
!8684 = !DILocation(line: 792, column: 37, scope: !8682)
!8685 = !DILocation(line: 792, column: 40, scope: !8682)
!8686 = !DILocation(line: 792, column: 54, scope: !8682)
!8687 = !DILocation(line: 792, column: 7, scope: !8609)
!8688 = !DILocation(line: 794, column: 16, scope: !8689)
!8689 = distinct !DILexicalBlock(scope: !8682, file: !3, line: 793, column: 5)
!8690 = !DILocation(line: 794, column: 7, scope: !8689)
!8691 = !DILocation(line: 795, column: 35, scope: !8689)
!8692 = !DILocation(line: 795, column: 7, scope: !8689)
!8693 = !DILocation(line: 796, column: 16, scope: !8689)
!8694 = !DILocation(line: 796, column: 7, scope: !8689)
!8695 = !DILocation(line: 797, column: 5, scope: !8689)
!8696 = !DILocation(line: 798, column: 10, scope: !8609)
!8697 = !DILocation(line: 798, column: 3, scope: !8609)
!8698 = distinct !DISubprogram(name: "ira_allocate_and_copy_costs", scope: !698, file: !698, line: 1172, type: !8400, scopeLine: 1173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8699 = !DILocalVariable(name: "vec", arg: 1, scope: !8698, file: !698, line: 1172, type: !8402)
!8700 = !DILocation(line: 1172, column: 36, scope: !8698)
!8701 = !DILocalVariable(name: "cover_class", arg: 2, scope: !8698, file: !698, line: 1172, type: !390)
!8702 = !DILocation(line: 1172, column: 56, scope: !8698)
!8703 = !DILocalVariable(name: "src", arg: 3, scope: !8698, file: !698, line: 1172, type: !1934)
!8704 = !DILocation(line: 1172, column: 74, scope: !8698)
!8705 = !DILocalVariable(name: "len", scope: !8698, file: !698, line: 1174, type: !703)
!8706 = !DILocation(line: 1174, column: 7, scope: !8698)
!8707 = !DILocation(line: 1176, column: 8, scope: !8708)
!8708 = distinct !DILexicalBlock(scope: !8698, file: !698, line: 1176, column: 7)
!8709 = !DILocation(line: 1176, column: 7, scope: !8708)
!8710 = !DILocation(line: 1176, column: 12, scope: !8708)
!8711 = !DILocation(line: 1176, column: 20, scope: !8708)
!8712 = !DILocation(line: 1176, column: 23, scope: !8708)
!8713 = !DILocation(line: 1176, column: 27, scope: !8708)
!8714 = !DILocation(line: 1176, column: 7, scope: !8698)
!8715 = !DILocation(line: 1177, column: 5, scope: !8708)
!8716 = !DILocation(line: 1178, column: 36, scope: !8698)
!8717 = !DILocation(line: 1178, column: 10, scope: !8698)
!8718 = !DILocation(line: 1178, column: 4, scope: !8698)
!8719 = !DILocation(line: 1178, column: 8, scope: !8698)
!8720 = !DILocation(line: 1179, column: 33, scope: !8698)
!8721 = !DILocation(line: 1179, column: 9, scope: !8698)
!8722 = !DILocation(line: 1179, column: 7, scope: !8698)
!8723 = !DILocation(line: 1180, column: 12, scope: !8698)
!8724 = !DILocation(line: 1180, column: 11, scope: !8698)
!8725 = !DILocation(line: 1180, column: 3, scope: !8698)
!8726 = !DILocation(line: 1180, column: 17, scope: !8698)
!8727 = !DILocation(line: 1180, column: 37, scope: !8698)
!8728 = !DILocation(line: 1180, column: 35, scope: !8698)
!8729 = !DILocation(line: 1181, column: 1, scope: !8698)
!8730 = distinct !DISubprogram(name: "allocno_range_compare_func", scope: !3, file: !3, line: 2239, type: !1269, scopeLine: 2240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8731 = !DILocalVariable(name: "v1p", arg: 1, scope: !8730, file: !3, line: 2239, type: !1264)
!8732 = !DILocation(line: 2239, column: 41, scope: !8730)
!8733 = !DILocalVariable(name: "v2p", arg: 2, scope: !8730, file: !3, line: 2239, type: !1264)
!8734 = !DILocation(line: 2239, column: 58, scope: !8730)
!8735 = !DILocalVariable(name: "diff", scope: !8730, file: !3, line: 2241, type: !703)
!8736 = !DILocation(line: 2241, column: 7, scope: !8730)
!8737 = !DILocalVariable(name: "a1", scope: !8730, file: !3, line: 2242, type: !697)
!8738 = !DILocation(line: 2242, column: 17, scope: !8730)
!8739 = !DILocation(line: 2242, column: 47, scope: !8730)
!8740 = !DILocation(line: 2242, column: 23, scope: !8730)
!8741 = !DILocation(line: 2242, column: 22, scope: !8730)
!8742 = !DILocalVariable(name: "a2", scope: !8730, file: !3, line: 2243, type: !697)
!8743 = !DILocation(line: 2243, column: 17, scope: !8730)
!8744 = !DILocation(line: 2243, column: 47, scope: !8730)
!8745 = !DILocation(line: 2243, column: 23, scope: !8730)
!8746 = !DILocation(line: 2243, column: 22, scope: !8730)
!8747 = !DILocation(line: 2245, column: 7, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8730, file: !3, line: 2245, column: 7)
!8749 = !DILocation(line: 2245, column: 26, scope: !8748)
!8750 = !DILocation(line: 2246, column: 7, scope: !8748)
!8751 = !DILocation(line: 2246, column: 18, scope: !8748)
!8752 = !DILocation(line: 2246, column: 45, scope: !8748)
!8753 = !DILocation(line: 2246, column: 43, scope: !8748)
!8754 = !DILocation(line: 2246, column: 16, scope: !8748)
!8755 = !DILocation(line: 2246, column: 71, scope: !8748)
!8756 = !DILocation(line: 2245, column: 7, scope: !8730)
!8757 = !DILocation(line: 2247, column: 12, scope: !8748)
!8758 = !DILocation(line: 2247, column: 5, scope: !8748)
!8759 = !DILocation(line: 2248, column: 15, scope: !8760)
!8760 = distinct !DILexicalBlock(scope: !8730, file: !3, line: 2248, column: 7)
!8761 = !DILocation(line: 2248, column: 34, scope: !8760)
!8762 = !DILocation(line: 2248, column: 32, scope: !8760)
!8763 = !DILocation(line: 2248, column: 13, scope: !8760)
!8764 = !DILocation(line: 2248, column: 52, scope: !8760)
!8765 = !DILocation(line: 2248, column: 7, scope: !8730)
!8766 = !DILocation(line: 2249, column: 12, scope: !8760)
!8767 = !DILocation(line: 2249, column: 5, scope: !8760)
!8768 = !DILocation(line: 2250, column: 15, scope: !8769)
!8769 = distinct !DILexicalBlock(scope: !8730, file: !3, line: 2250, column: 7)
!8770 = !DILocation(line: 2250, column: 34, scope: !8769)
!8771 = !DILocation(line: 2250, column: 32, scope: !8769)
!8772 = !DILocation(line: 2250, column: 13, scope: !8769)
!8773 = !DILocation(line: 2250, column: 52, scope: !8769)
!8774 = !DILocation(line: 2250, column: 7, scope: !8730)
!8775 = !DILocation(line: 2251, column: 13, scope: !8769)
!8776 = !DILocation(line: 2251, column: 6, scope: !8769)
!8777 = !DILocation(line: 2252, column: 10, scope: !8730)
!8778 = !DILocation(line: 2252, column: 29, scope: !8730)
!8779 = !DILocation(line: 2252, column: 27, scope: !8730)
!8780 = !DILocation(line: 2252, column: 3, scope: !8730)
!8781 = !DILocation(line: 2253, column: 1, scope: !8730)
!8782 = distinct !DISubprogram(name: "VEC_ira_copy_t_heap_free", scope: !698, file: !698, line: 70, type: !8783, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8783 = !DISubroutineType(types: !8784)
!8784 = !{null, !3106}
!8785 = !DILocalVariable(name: "vec_", arg: 1, scope: !8782, file: !698, line: 70, type: !3106)
!8786 = !DILocation(line: 70, column: 1, scope: !8782)
!8787 = !DILocation(line: 70, column: 1, scope: !8788)
!8788 = distinct !DILexicalBlock(scope: !8782, file: !698, line: 70, column: 1)
!8789 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_free", scope: !698, file: !698, line: 68, type: !8790, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!8790 = !DISubroutineType(types: !8791)
!8791 = !{null, !2233}
!8792 = !DILocalVariable(name: "vec_", arg: 1, scope: !8789, file: !698, line: 68, type: !2233)
!8793 = !DILocation(line: 68, column: 1, scope: !8789)
!8794 = !DILocation(line: 68, column: 1, scope: !8795)
!8795 = distinct !DILexicalBlock(scope: !8789, file: !698, line: 68, column: 1)
