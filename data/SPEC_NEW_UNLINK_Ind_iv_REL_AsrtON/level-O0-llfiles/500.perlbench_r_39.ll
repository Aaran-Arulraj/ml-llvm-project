; ModuleID = 'pp_sys.c'
source_filename = "pp_sys.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%struct.op = type { %struct.op*, %struct.op*, {}*, i64, i16, i8, i8 }
%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.4 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.8, %union._xivu, %union._xnvu }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.5 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union.anon.5 = type { i8* }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.0 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.0 = type { i8* }
%union.anon.8 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.4 = type { i8* }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.18, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.18 = type { i64 }
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.19 }
%union.anon.19 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.7 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.6, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union.anon.6 = type { i64 }
%struct.regexp_engine = type { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.3 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.9, %struct.hv*, %union.anon.10, %union.anon.11, %union.anon.12, i8*, %union.anon.13, %struct.cv*, i32, i32, i32 }
%union.anon.9 = type { i64 }
%union.anon.10 = type { %struct.op* }
%union.anon.11 = type { %struct.op* }
%union.anon.12 = type { %struct.gv* }
%union.anon.13 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.3 = type { i8* }
%union.anon.7 = type { i8* }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.20, %union.anon.21, %struct.op* }
%union.anon.20 = type { %struct.op* }
%union.anon.21 = type { %struct.op* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct._PerlIO = type opaque
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.16 }
%union.anon.16 = type { i64 }
%struct.xpvmg = type { %struct.hv*, %union._xmgu, i64, %union.anon.17, %union._xivu, %union._xnvu }
%union.anon.17 = type { i64 }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.sv* }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.2 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.14, %union._xivu, %struct._PerlIO**, %union.anon.15, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.14 = type { i64 }
%union.anon.15 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.2 = type { i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.28, %union._xivu }
%union.anon.28 = type { i64 }
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.1 }
%union.anon.1 = type { %struct.sv* }
%struct.xpvlv = type { %struct.hv*, %union._xmgu, i64, %union.anon.29, %union._xivu, %union._xnvu, %union.anon.30, i64, %struct.sv*, i8, i8 }
%union.anon.29 = type { i64 }
%union.anon.30 = type { i64 }
%struct.timeval = type { i64, i64 }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.31, %union._xivu, %union._xnvu }
%union.anon.31 = type { i64 }
%struct.fd_set = type { [16 x i64] }
%struct.xpvhv_aux = type { %union._xhvnameu, %struct.av*, %struct.he*, i32, i32, %struct.mro_meta*, i32, i32, i32, i32 }
%union._xhvnameu = type { %struct.hek* }
%struct.mro_meta = type { %struct.hv*, %struct.sv*, %struct.hv*, i32, i32, %struct.mro_alg*, %struct.hv*, %struct.hv*, i32 }
%struct.mro_alg = type { %struct.av* (%struct.hv*, i32)*, i8*, i16, i16, i32 }
%struct.block = type { i8, i8, i16, i32, %struct.cop*, i32, i32, %struct.pmop*, %union.anon.22 }
%union.anon.22 = type { %struct.block_sub }
%struct.block_sub = type { %struct.op*, %struct.cv*, %struct.av*, %struct.av*, i32, %struct.av* }
%struct.block_format = type { %struct.op*, %struct.cv*, %struct.gv*, %struct.gv* }
%union.XOPRETANY = type { i8* }
%struct.xpvuv = type { %struct.hv*, %union._xmgu, i64, %union.anon.32, %union._xivu }
%union.anon.32 = type { i64 }
%struct.TM64 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }

@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_curpad = external dso_local global %struct.sv**, align 8
@PL_op = external dso_local global %struct.op*, align 8
@PL_Sv = external dso_local global %struct.sv*, align 8
@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@PL_tainting = external dso_local global i8, align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"``\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"rt\00", align 1
@PL_rs = external dso_local global %struct.sv*, align 8
@PL_sv_undef = external dso_local global %struct.sv, align 8
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_stack_max = external dso_local global %struct.sv**, align 8
@PL_statusvalue_posix = external dso_local global i32, align 4
@PL_statusvalue = external dso_local global i32, align 4
@PL_tainted = external dso_local global i8, align 1
@PL_markstack_ptr = external dso_local global i32*, align 8
@PL_globhook = external dso_local global void ()*, align 8
@PL_no_security = external dso_local constant [0 x i8], align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"glob\00", align 1
@PL_last_in_gv = external dso_local global %struct.gv*, align 8
@.str.6 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_sv_no = external dso_local global %struct.sv, align 8
@PL_errgv = external dso_local global %struct.gv*, align 8
@.str.7 = private unnamed_addr constant [11 x i8] c"\09...caught\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"Warning: something's wrong\00", align 1
@PL_warnhook = external dso_local global %struct.sv*, align 8
@.str.9 = private unnamed_addr constant [4 x i8] c"%-p\00", align 1
@PL_sv_yes = external dso_local global %struct.sv, align 8
@.str.10 = private unnamed_addr constant [10 x i8] c"PROPAGATE\00", align 1
@PL_curcop = external dso_local global %struct.cop*, align 8
@PL_markstack_max = external dso_local global i32*, align 8
@.str.11 = private unnamed_addr constant [15 x i8] c"\09...propagated\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"Died\00", align 1
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@PL_curstack = external dso_local global %struct.av*, align 8
@PL_ors_sv = external dso_local global %struct.sv*, align 8
@.str.13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_no_usym = external dso_local constant [0 x i8], align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"filehandle\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c"Opening dirhandle %2p also as a file\00", align 1
@PL_sv_consts = external dso_local global [35 x %struct.sv*], align 16
@.str.16 = private unnamed_addr constant [5 x i8] c"OPEN\00", align 1
@PL_forkprocess = external dso_local global i32, align 4
@PL_defoutgv = external dso_local global %struct.gv*, align 8
@.str.17 = private unnamed_addr constant [6 x i8] c"CLOSE\00", align 1
@PL_no_func = external dso_local constant [0 x i8], align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"pipe\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"FILENO\00", align 1
@.str.20 = private unnamed_addr constant [22 x i8] c"umask not implemented\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"BINMODE\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"TIEHASH\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"TIEARRAY\00", align 1
@.str.24 = private unnamed_addr constant [29 x i8] c"Cannot tie unreifiable array\00", align 1
@.str.25 = private unnamed_addr constant [10 x i8] c"TIEHANDLE\00", align 1
@.str.26 = private unnamed_addr constant [10 x i8] c"TIESCALAR\00", align 1
@.str.27 = private unnamed_addr constant [50 x i8] c"Can't locate object method \22%s\22 via package \22%-p\22\00", align 1
@.str.28 = private unnamed_addr constant [49 x i8] c"Self-ties of arrays and hashes are not supported\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"UNTIE\00", align 1
@.str.30 = private unnamed_addr constant [55 x i8] c"untie attempted while %lu inner references still exist\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"AnyDBM_File\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"AnyDBM_File.pm\00", align 1
@.str.33 = private unnamed_addr constant [23 x i8] c"No dbm on this machine\00", align 1
@.str.34 = private unnamed_addr constant [29 x i8] c"Non-string passed as bitmask\00", align 1
@PL_stdingv = external dso_local global %struct.gv*, align 8
@.str.35 = private unnamed_addr constant [5 x i8] c"GETC\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c" \00", align 1
@PL_utf8skip = external dso_local constant [0 x i8], align 1
@.str.37 = private unnamed_addr constant [30 x i8] c"Undefined format \22%-p\22 called\00", align 1
@PL_formtarget = external dso_local global %struct.sv*, align 8
@PL_toptarget = external dso_local global %struct.sv*, align 8
@.str.38 = private unnamed_addr constant [8 x i8] c"%2p_TOP\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"top\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"\0C\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"Undefined top format \22%-p\22 called\00", align 1
@PL_markstack = external dso_local global i32*, align 8
@PL_scopestack_ix = external dso_local global i32, align 4
@PL_curpm = external dso_local global %struct.pmop*, align 8
@PL_savestack_ix = external dso_local global i32, align 4
@PL_scopestack = external dso_local global i32*, align 8
@.str.42 = private unnamed_addr constant [14 x i8] c"page overflow\00", align 1
@PL_bodytarget = external dso_local global %struct.sv*, align 8
@.str.43 = private unnamed_addr constant [7 x i8] c"PRINTF\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"READ\00", align 1
@.str.45 = private unnamed_addr constant [16 x i8] c"Negative length\00", align 1
@.str.46 = private unnamed_addr constant [22 x i8] c"Offset outside string\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"WRITE\00", align 1
@.str.48 = private unnamed_addr constant [21 x i8] c"Wide character in %s\00", align 1
@PL_op_desc = external dso_local constant [0 x i8*], align 8
@PL_argvgv = external dso_local global %struct.gv*, align 8
@.str.49 = private unnamed_addr constant [4 x i8] c"EOF\00", align 1
@.str.50 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"TELL\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"SEEK\00", align 1
@zero_but_true = internal constant [11 x i8] c"0 but true\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"truncate\00", align 1
@.str.54 = private unnamed_addr constant [55 x i8] c"Possible memory corruption: %s overflowed 3rd argument\00", align 1
@PL_op_name = external dso_local constant [0 x i8*], align 8
@.str.55 = private unnamed_addr constant [6 x i8] c"flock\00", align 1
@PL_no_sock_func = external dso_local constant [0 x i8], align 1
@.str.56 = private unnamed_addr constant [11 x i8] c"socketpair\00", align 1
@PL_defgv = external dso_local global %struct.gv*, align 8
@.str.57 = private unnamed_addr constant [27 x i8] c"lstat() on filehandle%s%-p\00", align 1
@PL_laststype = external dso_local global i16, align 2
@.str.58 = private unnamed_addr constant [43 x i8] c"The stat preceding lstat() wasn't an lstat\00", align 1
@PL_statgv = external dso_local global %struct.gv*, align 8
@PL_statname = external dso_local global %struct.sv*, align 8
@PL_laststatval = external dso_local global i32, align 4
@PL_statcache = external dso_local global %struct.stat, align 8
@PL_warn_nl = external dso_local constant [0 x i8], align 1
@.str.59 = private unnamed_addr constant [5 x i8] c"stat\00", align 1
@PL_tmps_ix = external dso_local global i64, align 8
@PL_tmps_max = external dso_local global i64, align 8
@PL_basetime = external dso_local global i64, align 8
@PL_charclass = external dso_local constant [0 x i32], align 4
@.str.60 = private unnamed_addr constant [41 x i8] c"-T and -B not implemented on filehandles\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@PL_envgv = external dso_local global %struct.gv*, align 8
@.str.62 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"LOGDIR\00", align 1
@.str.64 = private unnamed_addr constant [58 x i8] c"Use of chdir('') or chdir(undef) as chdir() is deprecated\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"chdir\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"fchdir\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"chroot\00", align 1
@.str.68 = private unnamed_addr constant [7 x i8] c"rename\00", align 1
@PL_statbuf = external dso_local global %struct.stat, align 8
@.str.69 = private unnamed_addr constant [6 x i8] c"mkdir\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c"rmdir\00", align 1
@PL_no_dir_func = external dso_local constant [0 x i8], align 1
@.str.71 = private unnamed_addr constant [8 x i8] c"opendir\00", align 1
@.str.72 = private unnamed_addr constant [8 x i8] c"readdir\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"telldir\00", align 1
@.str.74 = private unnamed_addr constant [8 x i8] c"seekdir\00", align 1
@.str.75 = private unnamed_addr constant [10 x i8] c"rewinddir\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c"closedir\00", align 1
@PL_sig_pending = external dso_local global i32, align 4
@PL_psig_pend = external dso_local global i32*, align 8
@PL_signals = external dso_local global i32, align 4
@PL_signalhook = external dso_local global void ()*, align 8
@.str.77 = private unnamed_addr constant [7 x i8] c"system\00", align 1
@.str.78 = private unnamed_addr constant [34 x i8] c"panic: kid popen errno read, n=%u\00", align 1
@.str.79 = private unnamed_addr constant [5 x i8] c"exec\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"getppid\00", align 1
@.str.81 = private unnamed_addr constant [8 x i8] c"getpgrp\00", align 1
@.str.82 = private unnamed_addr constant [8 x i8] c"setpgrp\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"getpriority\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"setpriority\00", align 1
@.str.85 = private unnamed_addr constant [22 x i8] c"times not implemented\00", align 1
@.str.86 = private unnamed_addr constant [10 x i8] c"localtime\00", align 1
@.str.87 = private unnamed_addr constant [7 x i8] c"gmtime\00", align 1
@Perl_pp_gmtime.dayname = internal constant [7 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.94, i32 0, i32 0)], align 16
@.str.88 = private unnamed_addr constant [4 x i8] c"Sun\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"Mon\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"Tue\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c"Wed\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"Thu\00", align 1
@.str.93 = private unnamed_addr constant [4 x i8] c"Fri\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"Sat\00", align 1
@Perl_pp_gmtime.monname = internal constant [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.106, i32 0, i32 0)], align 16
@.str.95 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.96 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.97 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.98 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.100 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.101 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.102 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.103 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.104 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@.str.107 = private unnamed_addr constant [19 x i8] c"%s(%.0f) too large\00", align 1
@.str.108 = private unnamed_addr constant [19 x i8] c"%s(%.0f) too small\00", align 1
@.str.109 = private unnamed_addr constant [16 x i8] c"%s(%.0f) failed\00", align 1
@.str.110 = private unnamed_addr constant [29 x i8] c"%s %s %2d %02d:%02d:%02d %ld\00", align 1
@.str.111 = private unnamed_addr constant [6 x i8] c"alarm\00", align 1
@.str.112 = private unnamed_addr constant [48 x i8] c"System V IPC is not implemented on this machine\00", align 1
@.str.113 = private unnamed_addr constant [9 x i8] c"getlogin\00", align 1
@.str.114 = private unnamed_addr constant [8 x i8] c"syscall\00", align 1
@PL_tmps_floor = external dso_local global i64, align 8
@PL_comppad = external dso_local global %struct.av*, align 8
@safe_years = internal constant [28 x i16] [i16 2016, i16 2017, i16 2018, i16 2019, i16 2020, i16 2021, i16 2022, i16 2023, i16 2024, i16 2025, i16 2026, i16 2027, i16 2028, i16 2029, i16 2030, i16 2031, i16 2032, i16 2033, i16 2034, i16 2035, i16 2036, i16 2037, i16 2010, i16 2011, i16 2012, i16 2013, i16 2014, i16 2015], align 16
@length_of_year = internal constant [2 x i16] [i16 365, i16 366], align 2
@julian_days_by_month = internal constant [2 x [12 x i16]] [[12 x i16] [i16 0, i16 31, i16 59, i16 90, i16 120, i16 151, i16 181, i16 212, i16 243, i16 273, i16 304, i16 334], [12 x i16] [i16 0, i16 31, i16 60, i16 91, i16 121, i16 152, i16 182, i16 213, i16 244, i16 274, i16 305, i16 335]], align 16
@days_in_month = internal constant [2 x [12 x i8]] [[12 x i8] c"\1F\1C\1F\1E\1F\1E\1F\1F\1E\1F\1E\1F", [12 x i8] c"\1F\1D\1F\1E\1F\1E\1F\1F\1E\1F\1E\1F"], align 16

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_backtick() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %tmps = alloca i8*, align 8
  %gimme = alloca i32, align 4
  %mode = alloca i8*, align 8
  %type = alloca i8*, align 8
  %tmpbuf = alloca [256 x i8], align 16
  %sv = alloca %struct.sv*, align 8
  %_lEnGtH = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** @PL_Sv, align 8
  %7 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* null, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %tmps, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and1 = and i32 %conv, 3
  %tobool = icmp ne i32 %and1, 0
  br i1 %tobool, label %cond.true2, label %cond.false6

cond.true2:                                       ; preds = %cond.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags3 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 5
  %15 = load i8, i8* %op_flags3, align 2
  %conv4 = zext i8 %15 to i32
  %and5 = and i32 %conv4, 3
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %call7 = call i32 @Perl_block_gimme()
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true2
  %cond9 = phi i32 [ %and5, %cond.true2 ], [ %call7, %cond.false6 ]
  store i32 %cond9, i32* %gimme, align 4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** %mode, align 8
  %16 = load i8, i8* @PL_tainting, align 1
  %tobool10 = trunc i8 %16 to i1
  br i1 %tobool10, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %cond.end8
  br i1 true, label %if.then, label %if.end

cond.false13:                                     ; preds = %cond.end8
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false13, %cond.true12
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false13, %cond.true12
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private, align 1
  %conv14 = zext i8 %18 to i32
  %and15 = and i32 %conv14, 16
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %mode, align 8
  br label %if.end24

if.else:                                          ; preds = %if.end
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private18 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 6
  %20 = load i8, i8* %op_private18, align 1
  %conv19 = zext i8 %20 to i32
  %and20 = and i32 %conv19, 32
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8** %mode, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then17
  %21 = load i8*, i8** %tmps, align 8
  %22 = load i8*, i8** %mode, align 8
  %call25 = call %struct._PerlIO** @Perl_my_popen(i8* %21, i8* %22)
  store %struct._PerlIO** %call25, %struct._PerlIO*** %fp, align 8
  %23 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %tobool26 = icmp ne %struct._PerlIO** %23, null
  br i1 %tobool26, label %if.then27, label %if.else158

if.then27:                                        ; preds = %if.end24
  %call28 = call i8* @Perl_PerlIO_context_layers(i8* null)
  store i8* %call28, i8** %type, align 8
  %24 = load i8*, i8** %type, align 8
  %tobool29 = icmp ne i8* %24, null
  br i1 %tobool29, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %if.then27
  %25 = load i8*, i8** %type, align 8
  %26 = load i8, i8* %25, align 1
  %conv30 = sext i8 %26 to i32
  %tobool31 = icmp ne i32 %conv30, 0
  br i1 %tobool31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %land.lhs.true
  %27 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %28 = load i8*, i8** %mode, align 8
  %29 = load i8*, i8** %type, align 8
  %call33 = call i32 @PerlIO_apply_layers(%struct._PerlIO** %27, i8* %28, i8* %29)
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %land.lhs.true, %if.then27
  %30 = load i32, i32* %gimme, align 4
  %cmp35 = icmp eq i32 %30, 1
  br i1 %cmp35, label %if.then37, label %if.else41

if.then37:                                        ; preds = %if.end34
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then37
  %31 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %tmpbuf, i64 0, i64 0
  %call38 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %31, i8* %arraydecay, i64 256)
  %cmp39 = icmp sgt i64 %call38, 0
  br i1 %cmp39, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end128

if.else41:                                        ; preds = %if.end34
  %32 = load i32, i32* %gimme, align 4
  %cmp42 = icmp eq i32 %32, 2
  br i1 %cmp42, label %if.then44, label %if.else70

if.then44:                                        ; preds = %if.else41
  call void @Perl_push_scope()
  call void @Perl_save_sptr(%struct.sv** @PL_rs)
  store %struct.sv* @PL_sv_undef, %struct.sv** @PL_rs, align 8
  %33 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setpvn(%struct.sv* %33, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0)
  br label %while.cond45

while.cond45:                                     ; preds = %while.body50, %if.then44
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %35 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %36 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any, align 8
  %38 = bitcast i8* %37 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %38, i32 0, i32 2
  %39 = load i64, i64* %xpv_cur, align 8
  %conv46 = trunc i64 %39 to i32
  %call47 = call i8* @Perl_sv_gets(%struct.sv* %34, %struct._PerlIO** %35, i32 %conv46)
  %cmp48 = icmp ne i8* %call47, null
  br i1 %cmp48, label %while.body50, label %while.end51

while.body50:                                     ; preds = %while.cond45
  br label %while.cond45

while.end51:                                      ; preds = %while.cond45
  call void @Perl_pop_scope()
  br label %do.body

do.body:                                          ; preds = %while.end51
  br label %do.body52

do.body52:                                        ; preds = %do.body
  %40 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %41 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp53 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp53, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %do.body52
  br i1 true, label %if.then57, label %if.end59

cond.false56:                                     ; preds = %do.body52
  br i1 false, label %if.then57, label %if.end59

if.then57:                                        ; preds = %cond.false56, %cond.true55
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call58 = call %struct.sv** @Perl_stack_grow(%struct.sv** %42, %struct.sv** %43, i64 1)
  store %struct.sv** %call58, %struct.sv*** %sp, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %cond.false56, %cond.true55
  br label %do.end

do.end:                                           ; preds = %if.end59
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i32 1
  store %struct.sv** %incdec.ptr60, %struct.sv*** %sp, align 8
  store %struct.sv* %45, %struct.sv** %incdec.ptr60, align 8
  br label %do.end61

do.end61:                                         ; preds = %do.end
  br label %do.body62

do.body62:                                        ; preds = %do.end61
  %47 = load i8, i8* @PL_tainting, align 1
  %tobool63 = trunc i8 %47 to i1
  br i1 %tobool63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %do.body62
  br i1 true, label %if.then67, label %if.end68

cond.false66:                                     ; preds = %do.body62
  br i1 false, label %if.then67, label %if.end68

if.then67:                                        ; preds = %cond.false66, %cond.true65
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_magic(%struct.sv* %48, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %cond.false66, %cond.true65
  br label %do.end69

do.end69:                                         ; preds = %if.end68
  br label %if.end127

if.else70:                                        ; preds = %if.else41
  br label %for.cond

for.cond:                                         ; preds = %do.end126, %if.else70
  %call71 = call %struct.sv* @Perl_newSV(i64 79)
  store %struct.sv* %call71, %struct.sv** %sv, align 8
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %50 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call72 = call i8* @Perl_sv_gets(%struct.sv* %49, %struct._PerlIO** %50, i32 0)
  %cmp73 = icmp eq i8* %call72, null
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %for.cond
  %51 = load %struct.sv*, %struct.sv** %sv, align 8
  %52 = bitcast %struct.sv* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %53)
  br label %for.end

if.end76:                                         ; preds = %for.cond
  br label %do.body77

do.body77:                                        ; preds = %if.end76
  br label %do.body78

do.body78:                                        ; preds = %do.body77
  %54 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast79 = ptrtoint %struct.sv** %54 to i64
  %sub.ptr.rhs.cast80 = ptrtoint %struct.sv** %55 to i64
  %sub.ptr.sub81 = sub i64 %sub.ptr.lhs.cast79, %sub.ptr.rhs.cast80
  %sub.ptr.div82 = sdiv exact i64 %sub.ptr.sub81, 8
  %cmp83 = icmp slt i64 %sub.ptr.div82, 1
  br i1 %cmp83, label %cond.true85, label %cond.false86

cond.true85:                                      ; preds = %do.body78
  br i1 true, label %if.then87, label %if.end89

cond.false86:                                     ; preds = %do.body78
  br i1 false, label %if.then87, label %if.end89

if.then87:                                        ; preds = %cond.false86, %cond.true85
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call88 = call %struct.sv** @Perl_stack_grow(%struct.sv** %56, %struct.sv** %57, i64 1)
  store %struct.sv** %call88, %struct.sv*** %sp, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end89

if.end89:                                         ; preds = %if.then87, %cond.false86, %cond.true85
  br label %do.end90

do.end90:                                         ; preds = %if.end89
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %call91 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %59)
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr92 = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 1
  store %struct.sv** %incdec.ptr92, %struct.sv*** %sp, align 8
  store %struct.sv* %call91, %struct.sv** %incdec.ptr92, align 8
  br label %do.end93

do.end93:                                         ; preds = %do.end90
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any94 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any94, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.16* %xpv_len_u to i64*
  %64 = load i64, i64* %xpvlenu_len, align 8
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 0
  %66 = load i8*, i8** %sv_any95, align 8
  %67 = bitcast i8* %66 to %struct.xpv*
  %xpv_cur96 = getelementptr inbounds %struct.xpv, %struct.xpv* %67, i32 0, i32 2
  %68 = load i64, i64* %xpv_cur96, align 8
  %sub = sub i64 %64, %68
  %cmp97 = icmp ugt i64 %sub, 20
  br i1 %cmp97, label %if.then99, label %if.end118

if.then99:                                        ; preds = %do.end93
  br label %do.body100

do.body100:                                       ; preds = %if.then99
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any101 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any101, align 8
  %71 = bitcast i8* %70 to %struct.xpv*
  %xpv_cur102 = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 2
  %72 = load i64, i64* %xpv_cur102, align 8
  %add = add i64 %72, 1
  store i64 %add, i64* %_lEnGtH, align 8
  br label %do.body103

do.body103:                                       ; preds = %do.body100
  br label %do.body104

do.body104:                                       ; preds = %do.body103
  %73 = load i64, i64* %_lEnGtH, align 8
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any105 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any105, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_len_u106 = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 3
  %xpvlenu_len107 = bitcast %union.anon.16* %xpv_len_u106 to i64*
  store i64 %73, i64* %xpvlenu_len107, align 8
  br label %do.end108

do.end108:                                        ; preds = %do.body104
  br label %do.body109

do.body109:                                       ; preds = %do.end108
  %77 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u110 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 3
  %svu_pv111 = bitcast %union.anon* %sv_u110 to i8**
  %78 = load i8*, i8** %svu_pv111, align 8
  %79 = load i64, i64* %_lEnGtH, align 8
  %call112 = call i8* @Perl_safesysrealloc(i8* %78, i64 %79)
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u113 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 3
  %svu_pv114 = bitcast %union.anon* %sv_u113 to i8**
  store i8* %call112, i8** %svu_pv114, align 8
  br label %do.end115

do.end115:                                        ; preds = %do.body109
  br label %do.end116

do.end116:                                        ; preds = %do.end115
  br label %do.end117

do.end117:                                        ; preds = %do.end116
  br label %if.end118

if.end118:                                        ; preds = %do.end117, %do.end93
  br label %do.body119

do.body119:                                       ; preds = %if.end118
  %81 = load i8, i8* @PL_tainting, align 1
  %tobool120 = trunc i8 %81 to i1
  br i1 %tobool120, label %cond.true122, label %cond.false123

cond.true122:                                     ; preds = %do.body119
  br i1 true, label %if.then124, label %if.end125

cond.false123:                                    ; preds = %do.body119
  br i1 false, label %if.then124, label %if.end125

if.then124:                                       ; preds = %cond.false123, %cond.true122
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_magic(%struct.sv* %82, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end125

if.end125:                                        ; preds = %if.then124, %cond.false123, %cond.true122
  br label %do.end126

do.end126:                                        ; preds = %if.end125
  br label %for.cond

for.end:                                          ; preds = %if.then75
  br label %if.end127

if.end127:                                        ; preds = %for.end, %do.end69
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %while.end
  br label %do.body129

do.body129:                                       ; preds = %if.end128
  %83 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call130 = call i32 @Perl_my_pclose(%struct._PerlIO** %83)
  store i32 %call130, i32* @PL_statusvalue_posix, align 4
  %84 = load i32, i32* @PL_statusvalue_posix, align 4
  %cmp131 = icmp eq i32 %84, -1
  br i1 %cmp131, label %if.then133, label %if.else134

if.then133:                                       ; preds = %do.body129
  store i32 -1, i32* @PL_statusvalue, align 4
  br label %if.end156

if.else134:                                       ; preds = %do.body129
  %85 = load i32, i32* @PL_statusvalue_posix, align 4
  %and135 = and i32 %85, 127
  %cmp136 = icmp eq i32 %and135, 0
  br i1 %cmp136, label %cond.true138, label %cond.false140

cond.true138:                                     ; preds = %if.else134
  %86 = load i32, i32* @PL_statusvalue_posix, align 4
  %and139 = and i32 %86, 65280
  %shr = ashr i32 %and139, 8
  %shl = shl i32 %shr, 8
  br label %cond.end141

cond.false140:                                    ; preds = %if.else134
  br label %cond.end141

cond.end141:                                      ; preds = %cond.false140, %cond.true138
  %cond142 = phi i32 [ %shl, %cond.true138 ], [ 0, %cond.false140 ]
  %87 = load i32, i32* @PL_statusvalue_posix, align 4
  %and143 = and i32 %87, 127
  %add144 = add nsw i32 %and143, 1
  %conv145 = trunc i32 %add144 to i8
  %conv146 = sext i8 %conv145 to i32
  %shr147 = ashr i32 %conv146, 1
  %cmp148 = icmp sgt i32 %shr147, 0
  br i1 %cmp148, label %cond.true150, label %cond.false153

cond.true150:                                     ; preds = %cond.end141
  %88 = load i32, i32* @PL_statusvalue_posix, align 4
  %and151 = and i32 %88, 127
  %and152 = and i32 %and151, 127
  br label %cond.end154

cond.false153:                                    ; preds = %cond.end141
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false153, %cond.true150
  %cond155 = phi i32 [ %and152, %cond.true150 ], [ 0, %cond.false153 ]
  %or = or i32 %cond142, %cond155
  store i32 %or, i32* @PL_statusvalue, align 4
  br label %if.end156

if.end156:                                        ; preds = %cond.end154, %if.then133
  br label %do.end157

do.end157:                                        ; preds = %if.end156
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end195

if.else158:                                       ; preds = %if.end24
  br label %do.body159

do.body159:                                       ; preds = %if.else158
  store i32 -1, i32* @PL_statusvalue_posix, align 4
  %89 = load i32, i32* @PL_statusvalue_posix, align 4
  %cmp160 = icmp eq i32 %89, -1
  br i1 %cmp160, label %if.then162, label %if.else163

if.then162:                                       ; preds = %do.body159
  store i32 -1, i32* @PL_statusvalue, align 4
  br label %if.end188

if.else163:                                       ; preds = %do.body159
  %90 = load i32, i32* @PL_statusvalue_posix, align 4
  %and164 = and i32 %90, 127
  %cmp165 = icmp eq i32 %and164, 0
  br i1 %cmp165, label %cond.true167, label %cond.false171

cond.true167:                                     ; preds = %if.else163
  %91 = load i32, i32* @PL_statusvalue_posix, align 4
  %and168 = and i32 %91, 65280
  %shr169 = ashr i32 %and168, 8
  %shl170 = shl i32 %shr169, 8
  br label %cond.end172

cond.false171:                                    ; preds = %if.else163
  br label %cond.end172

cond.end172:                                      ; preds = %cond.false171, %cond.true167
  %cond173 = phi i32 [ %shl170, %cond.true167 ], [ 0, %cond.false171 ]
  %92 = load i32, i32* @PL_statusvalue_posix, align 4
  %and174 = and i32 %92, 127
  %add175 = add nsw i32 %and174, 1
  %conv176 = trunc i32 %add175 to i8
  %conv177 = sext i8 %conv176 to i32
  %shr178 = ashr i32 %conv177, 1
  %cmp179 = icmp sgt i32 %shr178, 0
  br i1 %cmp179, label %cond.true181, label %cond.false184

cond.true181:                                     ; preds = %cond.end172
  %93 = load i32, i32* @PL_statusvalue_posix, align 4
  %and182 = and i32 %93, 127
  %and183 = and i32 %and182, 127
  br label %cond.end185

cond.false184:                                    ; preds = %cond.end172
  br label %cond.end185

cond.end185:                                      ; preds = %cond.false184, %cond.true181
  %cond186 = phi i32 [ %and183, %cond.true181 ], [ 0, %cond.false184 ]
  %or187 = or i32 %cond173, %cond186
  store i32 %or187, i32* @PL_statusvalue, align 4
  br label %if.end188

if.end188:                                        ; preds = %cond.end185, %if.then162
  br label %do.end189

do.end189:                                        ; preds = %if.end188
  %94 = load i32, i32* %gimme, align 4
  %cmp190 = icmp eq i32 %94, 2
  br i1 %cmp190, label %if.then192, label %if.end194

if.then192:                                       ; preds = %do.end189
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr193 = getelementptr inbounds %struct.sv*, %struct.sv** %95, i32 1
  store %struct.sv** %incdec.ptr193, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr193, align 8
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %96, %struct.sv*** @PL_stack_sp, align 8
  %97 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 0
  %98 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %98, %struct.op** %retval, align 8
  br label %return

if.end194:                                        ; preds = %do.end189
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %do.end157
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %99, %struct.sv*** @PL_stack_sp, align 8
  %100 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next196 = getelementptr inbounds %struct.op, %struct.op* %100, i32 0, i32 0
  %101 = load %struct.op*, %struct.op** %op_next196, align 8
  store %struct.op* %101, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end195, %if.then192
  %102 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %102
}

declare dso_local i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare dso_local i32 @Perl_block_gimme() #1

declare dso_local void @Perl_taint_proper(i8*, i8*) #1

declare dso_local %struct._PerlIO** @Perl_my_popen(i8*, i8*) #1

declare dso_local i8* @Perl_PerlIO_context_layers(i8*) #1

declare dso_local i32 @PerlIO_apply_layers(%struct._PerlIO**, i8*, i8*) #1

declare dso_local i64 @Perl_PerlIO_read(%struct._PerlIO**, i8*, i64) #1

declare dso_local void @Perl_push_scope() #1

declare dso_local void @Perl_save_sptr(%struct.sv**) #1

declare dso_local void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #1

declare dso_local i8* @Perl_sv_gets(%struct.sv*, %struct._PerlIO**, i32) #1

declare dso_local void @Perl_pop_scope() #1

declare dso_local %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i64) #1

declare dso_local void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #1

declare dso_local %struct.sv* @Perl_newSV(i64) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

declare dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

declare dso_local i8* @Perl_safesysrealloc(i8*, i64) #1

declare dso_local i32 @Perl_my_pclose(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_glob() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %result = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %sp4 = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %gimme = alloca i32, align 4
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %targ = alloca %struct.sv*, align 8
  %jump_o = alloca %struct.op*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %5 = bitcast %struct.sv* %4 to %struct.gv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ null, %cond.true ], [ %5, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %6, %struct.sv*** @PL_stack_sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %9, 2097152
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %call = call %struct.sv* @Perl_newSVsv(%struct.sv* %11)
  %call3 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call3, %struct.sv** %12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  br label %do.body

do.body:                                          ; preds = %if.end
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %13, %struct.sv*** %sp4, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  store %struct.sv* %15, %struct.sv** %arg, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags5 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 5
  %17 = load i8, i8* %op_flags5, align 2
  %conv6 = zext i8 %17 to i32
  %and7 = and i32 %conv6, 3
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true9, label %cond.false13

cond.true9:                                       ; preds = %do.body
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags10 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 5
  %19 = load i8, i8* %op_flags10, align 2
  %conv11 = zext i8 %19 to i32
  %and12 = and i32 %conv11, 3
  br label %cond.end15

cond.false13:                                     ; preds = %do.body
  %call14 = call i32 @Perl_block_gimme()
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false13, %cond.true9
  %cond16 = phi i32 [ %and12, %cond.true9 ], [ %call14, %cond.false13 ]
  store i32 %cond16, i32* %gimme, align 4
  %20 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %21, 2048
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true, label %cond.false33

land.lhs.true:                                    ; preds = %cond.end15
  %22 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %24, 1048576
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %land.lhs.true23, label %cond.false33

land.lhs.true23:                                  ; preds = %land.lhs.true
  %25 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_u24 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_rv25 = bitcast %union.anon* %sv_u24 to %struct.sv**
  %26 = load %struct.sv*, %struct.sv** %svu_rv25, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any, align 8
  %28 = bitcast i8* %27 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %28, i32 0, i32 0
  %29 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags26 = getelementptr inbounds %struct.hv, %struct.hv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %30, 268435456
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %land.lhs.true29, label %cond.false33

land.lhs.true29:                                  ; preds = %land.lhs.true23
  %31 = load %struct.sv*, %struct.sv** %arg, align 8
  %call30 = call %struct.sv* @Perl_amagic_call(%struct.sv* %31, %struct.sv* @PL_sv_undef, i32 15, i32 73)
  store %struct.sv* %call30, %struct.sv** %tmpsv, align 8
  %tobool31 = icmp ne %struct.sv* %call30, null
  br i1 %tobool31, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %land.lhs.true29
  br i1 true, label %if.then34, label %if.end98

cond.false33:                                     ; preds = %land.lhs.true29, %land.lhs.true23, %land.lhs.true, %cond.end15
  br i1 false, label %if.then34, label %if.end98

if.then34:                                        ; preds = %cond.false33, %cond.true32
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %32, %struct.sv*** %sp4, align 8
  %33 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %33, 1
  br i1 %cmp, label %if.then36, label %if.else

if.then36:                                        ; preds = %if.then34
  br label %if.end84

if.else:                                          ; preds = %if.then34
  %34 = load i32, i32* %gimme, align 4
  %cmp37 = icmp eq i32 %34, 3
  br i1 %cmp37, label %if.then39, label %if.else54

if.then39:                                        ; preds = %if.else
  %35 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %36 = bitcast %struct.sv* %35 to %struct.av*
  %call40 = call i64 @S_av_top_index(%struct.av* %36)
  %add = add nsw i64 %call40, 1
  store i64 %add, i64* %len, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %incdec.ptr41 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i32 -1
  store %struct.sv** %incdec.ptr41, %struct.sv*** %sp4, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  br label %do.body42

do.body42:                                        ; preds = %if.then39
  %39 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %41 = load i64, i64* %len, align 8
  %cmp43 = icmp slt i64 %sub.ptr.div, %41
  br i1 %cmp43, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %do.body42
  br i1 true, label %if.then47, label %if.end49

cond.false46:                                     ; preds = %do.body42
  br i1 false, label %if.then47, label %if.end49

if.then47:                                        ; preds = %cond.false46, %cond.true45
  %42 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %44 = load i64, i64* %len, align 8
  %call48 = call %struct.sv** @Perl_stack_grow(%struct.sv** %42, %struct.sv** %43, i64 %44)
  store %struct.sv** %call48, %struct.sv*** %sp4, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp4, align 8
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %cond.false46, %cond.true45
  br label %do.end

do.end:                                           ; preds = %if.end49
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %46 = load i64, i64* %i, align 8
  %47 = load i64, i64* %len, align 8
  %cmp50 = icmp slt i64 %46, %47
  br i1 %cmp50, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %49 = bitcast %struct.sv* %48 to %struct.av*
  %call52 = call %struct.sv* @Perl_av_shift(%struct.av* %49)
  %50 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %incdec.ptr53 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 1
  store %struct.sv** %incdec.ptr53, %struct.sv*** %sp4, align 8
  store %struct.sv* %call52, %struct.sv** %incdec.ptr53, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %51 = load i64, i64* %i, align 8
  %inc = add nsw i64 %51, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end83

if.else54:                                        ; preds = %if.else
  %52 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags55 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 5
  %53 = load i8, i8* %op_flags55, align 2
  %conv56 = zext i8 %53 to i32
  %and57 = and i32 %conv56, 64
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %if.else54
  %54 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %54, i64 -1
  %55 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end62

cond.false60:                                     ; preds = %if.else54
  %56 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 3
  %58 = load i64, i64* %op_targ, align 8
  %arrayidx61 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i64 %58
  %59 = load %struct.sv*, %struct.sv** %arrayidx61, align 8
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false60, %cond.true59
  %cond63 = phi %struct.sv* [ %55, %cond.true59 ], [ %59, %cond.false60 ]
  store %struct.sv* %cond63, %struct.sv** %targ, align 8
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %61 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %60, %struct.sv* %61, i32 1538)
  %62 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags64 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 5
  %63 = load i8, i8* %op_flags64, align 2
  %conv65 = zext i8 %63 to i32
  %and66 = and i32 %conv65, 64
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then68, label %if.end70

if.then68:                                        ; preds = %cond.end62
  %64 = load %struct.sv**, %struct.sv*** %sp4, align 8
  %incdec.ptr69 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i32 -1
  store %struct.sv** %incdec.ptr69, %struct.sv*** %sp4, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %cond.end62
  br label %do.body71

do.body71:                                        ; preds = %if.end70
  br label %do.body72

do.body72:                                        ; preds = %do.body71
  %65 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %66, 4194304
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %cond.true76, label %cond.false77

cond.true76:                                      ; preds = %do.body72
  br i1 true, label %if.then78, label %if.end80

cond.false77:                                     ; preds = %do.body72
  br i1 false, label %if.then78, label %if.end80

if.then78:                                        ; preds = %cond.false77, %cond.true76
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %call79 = call i32 @Perl_mg_set(%struct.sv* %67)
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %cond.false77, %cond.true76
  br label %do.end81

do.end81:                                         ; preds = %if.end80
  %68 = load %struct.sv*, %struct.sv** %targ, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp4, align 8
  store %struct.sv* %68, %struct.sv** %69, align 8
  br label %do.end82

do.end82:                                         ; preds = %do.end81
  br label %if.end83

if.end83:                                         ; preds = %do.end82, %for.end
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then36
  %70 = load %struct.sv**, %struct.sv*** %sp4, align 8
  store %struct.sv** %70, %struct.sv*** @PL_stack_sp, align 8
  %71 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags85 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 5
  %72 = load i8, i8* %op_flags85, align 2
  %conv86 = zext i8 %72 to i32
  %and87 = and i32 %conv86, 128
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then89, label %if.end96

if.then89:                                        ; preds = %if.end84
  %73 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 0
  %74 = load %struct.op*, %struct.op** %op_next, align 8
  %op_next90 = getelementptr inbounds %struct.op, %struct.op* %74, i32 0, i32 0
  %75 = load %struct.op*, %struct.op** %op_next90, align 8
  store %struct.op* %75, %struct.op** %jump_o, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then89
  %76 = load %struct.op*, %struct.op** %jump_o, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp91 = icmp eq i32 %bf.cast, 0
  br i1 %cmp91, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %77 = load %struct.op*, %struct.op** %jump_o, align 8
  %op_next93 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 0
  %78 = load %struct.op*, %struct.op** %op_next93, align 8
  store %struct.op* %78, %struct.op** %jump_o, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %79 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr94 = getelementptr inbounds i32, i32* %79, i32 -1
  store i32* %incdec.ptr94, i32** @PL_markstack_ptr, align 8
  %80 = load %struct.op*, %struct.op** %jump_o, align 8
  %op_next95 = getelementptr inbounds %struct.op, %struct.op* %80, i32 0, i32 0
  %81 = load %struct.op*, %struct.op** %op_next95, align 8
  store %struct.op* %81, %struct.op** %retval, align 8
  br label %return

if.end96:                                         ; preds = %if.end84
  %82 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next97 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 0
  %83 = load %struct.op*, %struct.op** %op_next97, align 8
  store %struct.op* %83, %struct.op** %retval, align 8
  br label %return

if.end98:                                         ; preds = %cond.false33, %cond.true32
  br label %do.end99

do.end99:                                         ; preds = %if.end98
  %84 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags100 = getelementptr inbounds %struct.op, %struct.op* %84, i32 0, i32 5
  %85 = load i8, i8* %op_flags100, align 2
  %conv101 = zext i8 %85 to i32
  %and102 = and i32 %conv101, 128
  %tobool103 = icmp ne i32 %and102, 0
  br i1 %tobool103, label %if.then104, label %if.end106

if.then104:                                       ; preds = %do.end99
  %86 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next105 = getelementptr inbounds %struct.op, %struct.op* %86, i32 0, i32 0
  %87 = load %struct.op*, %struct.op** %op_next105, align 8
  store %struct.op* %87, %struct.op** %retval, align 8
  br label %return

if.end106:                                        ; preds = %do.end99
  %88 = load void ()*, void ()** @PL_globhook, align 8
  %tobool107 = icmp ne void ()* %88, null
  br i1 %tobool107, label %if.then108, label %if.end110

if.then108:                                       ; preds = %if.end106
  %89 = load void ()*, void ()** @PL_globhook, align 8
  call void %89()
  %90 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next109 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 0
  %91 = load %struct.op*, %struct.op** %op_next109, align 8
  store %struct.op* %91, %struct.op** %retval, align 8
  br label %return

if.end110:                                        ; preds = %if.end106
  call void @Perl_push_scope()
  %92 = load i8, i8* @PL_tainting, align 1
  %tobool111 = trunc i8 %92 to i1
  br i1 %tobool111, label %if.then112, label %if.end113

if.then112:                                       ; preds = %if.end110
  store i8 1, i8* @PL_tainted, align 1
  call void @Perl_taint_proper(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_security, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  br label %if.end113

if.end113:                                        ; preds = %if.then112, %if.end110
  call void @Perl_save_sptr(%struct.sv** bitcast (%struct.gv** @PL_last_in_gv to %struct.sv**))
  %93 = load %struct.gv*, %struct.gv** %gv, align 8
  store %struct.gv* %93, %struct.gv** @PL_last_in_gv, align 8
  call void @Perl_save_sptr(%struct.sv** @PL_rs)
  %call114 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i64 1, i32 524288)
  store %struct.sv* %call114, %struct.sv** @PL_rs, align 8
  %call115 = call %struct.op* @Perl_do_readline()
  store %struct.op* %call115, %struct.op** %result, align 8
  call void @Perl_pop_scope()
  %94 = load %struct.op*, %struct.op** %result, align 8
  store %struct.op* %94, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end113, %if.then108, %if.then104, %if.end96, %while.end
  %95 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %95
}

declare dso_local %struct.sv* @Perl_newSVsv(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_av_top_index(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %1 = bitcast %struct.av* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = bitcast %struct.av* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %5)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %6, i32 0, i32 0
  %7 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %7, i32 0, i32 2
  %8 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

declare dso_local %struct.sv* @Perl_av_shift(%struct.av*) #1

declare dso_local void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local i32 @Perl_mg_set(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_newSVpvn_flags(i8*, i64, i32) #1

declare dso_local %struct.op* @Perl_do_readline() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rcatline() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %1 = bitcast %struct.op* %0 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %1, i32 0, i32 7
  %2 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %3 = bitcast %struct.sv* %2 to %struct.gv*
  store %struct.gv* %3, %struct.gv** @PL_last_in_gv, align 8
  %call = call %struct.op* @Perl_do_readline()
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_warn() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %exsv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %targ = alloca %struct.sv*, align 8
  %errsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp sgt i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv*, %struct.sv** %targ, align 8
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  call void @Perl_do_join(%struct.sv* %10, %struct.sv* @PL_sv_no, %struct.sv** %11, %struct.sv** %12)
  %13 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %13, %struct.sv** %exsv, align 8
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %14, i64 1
  store %struct.sv** %add.ptr1, %struct.sv*** %sp, align 8
  br label %if.end16

if.else:                                          ; preds = %entry
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv**, %struct.sv*** %mark, align 8
  %cmp2 = icmp eq %struct.sv** %15, %16
  br i1 %cmp2, label %if.then3, label %if.else11

if.then3:                                         ; preds = %if.else
  store %struct.sv* @PL_sv_no, %struct.sv** %exsv, align 8
  br label %do.body

do.body:                                          ; preds = %if.then3
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast4 = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.rhs.cast5 = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %sub.ptr.div7 = sdiv exact i64 %sub.ptr.sub6, 8
  %cmp8 = icmp slt i64 %sub.ptr.div7, 1
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then9, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then9, label %if.end

if.then9:                                         ; preds = %cond.false, %cond.true
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %19, %struct.sv** %20, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then9, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %22 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr10 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i64 1
  store %struct.sv** %add.ptr10, %struct.sv*** %sp, align 8
  br label %if.end15

if.else11:                                        ; preds = %if.else
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  store %struct.sv* %24, %struct.sv** %exsv, align 8
  %25 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags, align 4
  %and = and i32 %26, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.else11
  %27 = load %struct.sv*, %struct.sv** %exsv, align 8
  %call13 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %27, i32 1538)
  store %struct.sv* %call13, %struct.sv** %exsv, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.else11
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %do.end
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then
  %28 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %29, 2048
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end16
  %30 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %31, 2098176
  %cmp22 = icmp eq i32 %and21, 1024
  br i1 %cmp22, label %cond.true23, label %cond.false25

cond.true23:                                      ; preds = %lor.lhs.false
  %32 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 2
  %35 = load i64, i64* %xpv_cur, align 8
  store i64 %35, i64* %len, align 8
  %36 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %37 = load i8*, i8** %svu_pv, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %37, i64 0
  br label %cond.end

cond.false25:                                     ; preds = %lor.lhs.false
  %38 = load %struct.sv*, %struct.sv** %exsv, align 8
  %call26 = call i8* @Perl_sv_2pv_flags(%struct.sv* %38, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false25, %cond.true23
  %cond = phi i8* [ %add.ptr24, %cond.true23 ], [ %call26, %cond.false25 ]
  %39 = load i64, i64* %len, align 8
  %tobool27 = icmp ne i64 %39, 0
  br i1 %tobool27, label %if.then28, label %if.else29

if.then28:                                        ; preds = %cond.end, %if.end16
  br label %if.end82

if.else29:                                        ; preds = %cond.end
  %40 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u30 = getelementptr inbounds %struct.gv, %struct.gv* %40, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u30 to %struct.gp**
  %41 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr31 = getelementptr inbounds %struct.gp, %struct.gp* %41, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr31, i32 0, i32 0
  %42 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool32 = icmp ne %struct.sv* %42, null
  br i1 %tobool32, label %cond.true33, label %cond.false38

cond.true33:                                      ; preds = %if.else29
  %43 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u34 = getelementptr inbounds %struct.gv, %struct.gv* %43, i32 0, i32 3
  %svu_gp35 = bitcast %union.anon.4* %sv_u34 to %struct.gp**
  %44 = load %struct.gp*, %struct.gp** %svu_gp35, align 8
  %add.ptr36 = getelementptr inbounds %struct.gp, %struct.gp* %44, i64 0
  %gp_sv37 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr36, i32 0, i32 0
  br label %cond.end44

cond.false38:                                     ; preds = %if.else29
  %45 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call39 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %45, i32 0)
  %sv_u40 = getelementptr inbounds %struct.gv, %struct.gv* %call39, i32 0, i32 3
  %svu_gp41 = bitcast %union.anon.4* %sv_u40 to %struct.gp**
  %46 = load %struct.gp*, %struct.gp** %svu_gp41, align 8
  %add.ptr42 = getelementptr inbounds %struct.gp, %struct.gp* %46, i64 0
  %gp_sv43 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr42, i32 0, i32 0
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false38, %cond.true33
  %cond45 = phi %struct.sv** [ %gp_sv37, %cond.true33 ], [ %gp_sv43, %cond.false38 ]
  %47 = load %struct.sv*, %struct.sv** %cond45, align 8
  store %struct.sv* %47, %struct.sv** %errsv, align 8
  %48 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %49, 2097152
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %cond.end44
  br i1 true, label %land.rhs, label %land.end

cond.false50:                                     ; preds = %cond.end44
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false50, %cond.true49
  %50 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call51 = call i32 @Perl_mg_get(%struct.sv* %50)
  %tobool52 = icmp ne i32 %call51, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false50, %cond.true49
  %51 = phi i1 [ false, %cond.false50 ], [ false, %cond.true49 ], [ %tobool52, %land.rhs ]
  %land.ext = zext i1 %51 to i32
  %52 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %53, 2048
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.then56, label %if.else64

if.then56:                                        ; preds = %land.end
  %54 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %55, 2097152
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %if.then60, label %if.else62

if.then60:                                        ; preds = %if.then56
  %call61 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call61, %struct.sv** %exsv, align 8
  %56 = load %struct.sv*, %struct.sv** %exsv, align 8
  %57 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %56, %struct.sv* %57, i32 1536)
  br label %if.end63

if.else62:                                        ; preds = %if.then56
  %58 = load %struct.sv*, %struct.sv** %errsv, align 8
  store %struct.sv* %58, %struct.sv** %exsv, align 8
  br label %if.end63

if.end63:                                         ; preds = %if.else62, %if.then60
  br label %if.end81

if.else64:                                        ; preds = %land.end
  %59 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %60, 16384
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %cond.true68, label %cond.false72

cond.true68:                                      ; preds = %if.else64
  %61 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any69 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any69, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %xpv_cur70 = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 2
  %64 = load i64, i64* %xpv_cur70, align 8
  %tobool71 = icmp ne i64 %64, 0
  br i1 %tobool71, label %if.then76, label %if.else78

cond.false72:                                     ; preds = %if.else64
  %65 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %66, 12288
  %conv = zext i32 %and74 to i64
  %tobool75 = icmp ne i64 %conv, 0
  br i1 %tobool75, label %if.then76, label %if.else78

if.then76:                                        ; preds = %cond.false72, %cond.true68
  %call77 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call77, %struct.sv** %exsv, align 8
  %67 = load %struct.sv*, %struct.sv** %exsv, align 8
  %68 = load %struct.sv*, %struct.sv** %errsv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %67, %struct.sv* %68, i32 1536)
  %69 = load %struct.sv*, %struct.sv** %exsv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %69, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i64 10, i32 2)
  br label %if.end80

if.else78:                                        ; preds = %cond.false72, %cond.true68
  %call79 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i64 26, i32 524288)
  store %struct.sv* %call79, %struct.sv** %exsv, align 8
  br label %if.end80

if.end80:                                         ; preds = %if.else78, %if.then76
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.end63
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then28
  %70 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %71, 2048
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %land.lhs.true, label %if.else88

land.lhs.true:                                    ; preds = %if.end82
  %72 = load %struct.sv*, %struct.sv** @PL_warnhook, align 8
  %tobool86 = icmp ne %struct.sv* %72, null
  br i1 %tobool86, label %if.else88, label %if.then87

if.then87:                                        ; preds = %land.lhs.true
  %73 = load %struct.sv*, %struct.sv** %exsv, align 8
  %74 = bitcast %struct.sv* %73 to i8*
  call void (i8*, ...) @Perl_warn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i8* %74)
  br label %if.end89

if.else88:                                        ; preds = %land.lhs.true, %if.end82
  %75 = load %struct.sv*, %struct.sv** %exsv, align 8
  call void @Perl_warn_sv(%struct.sv* %75)
  br label %if.end89

if.end89:                                         ; preds = %if.else88, %if.then87
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %76, align 8
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %77, %struct.sv*** @PL_stack_sp, align 8
  %78 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 0
  %79 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %79
}

declare dso_local void @Perl_do_join(%struct.sv*, %struct.sv*, %struct.sv**, %struct.sv**) #1

declare dso_local %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv*, i32) #1

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #1

declare dso_local i32 @Perl_mg_get(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_sv_newmortal() #1

declare dso_local void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

declare dso_local void @Perl_warn(i8*, ...) #1

declare dso_local void @Perl_warn_sv(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_die() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %exsv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %targ = alloca %struct.sv*, align 8
  %errsv = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %gv = alloca %struct.gv*, align 8
  %file = alloca %struct.sv*, align 8
  %line = alloca %struct.sv*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp ne i64 %sub.ptr.div, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv*, %struct.sv** %targ, align 8
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  call void @Perl_do_join(%struct.sv* %10, %struct.sv* @PL_sv_no, %struct.sv** %11, %struct.sv** %12)
  %13 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %13, %struct.sv** %exsv, align 8
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %14, i64 1
  store %struct.sv** %add.ptr1, %struct.sv*** %sp, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  store %struct.sv* %16, %struct.sv** %exsv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and = and i32 %18, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %20, 2098176
  %cmp4 = icmp eq i32 %and3, 1024
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false
  %21 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 2
  %24 = load i64, i64* %xpv_cur, align 8
  store i64 %24, i64* %len, align 8
  %25 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %26 = load i8*, i8** %svu_pv, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %26, i64 0
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %27 = load %struct.sv*, %struct.sv** %exsv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %27, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr5, %cond.true ], [ %call, %cond.false ]
  %28 = load i64, i64* %len, align 8
  %tobool6 = icmp ne i64 %28, 0
  br i1 %tobool6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %cond.end, %if.end
  br label %if.end107

if.else8:                                         ; preds = %cond.end
  %29 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %30 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %30, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr10, i32 0, i32 0
  %31 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool11 = icmp ne %struct.sv* %31, null
  br i1 %tobool11, label %cond.true12, label %cond.false17

cond.true12:                                      ; preds = %if.else8
  %32 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %sv_u13 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 3
  %svu_gp14 = bitcast %union.anon.4* %sv_u13 to %struct.gp**
  %33 = load %struct.gp*, %struct.gp** %svu_gp14, align 8
  %add.ptr15 = getelementptr inbounds %struct.gp, %struct.gp* %33, i64 0
  %gp_sv16 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr15, i32 0, i32 0
  br label %cond.end23

cond.false17:                                     ; preds = %if.else8
  %34 = load %struct.gv*, %struct.gv** @PL_errgv, align 8
  %call18 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %34, i32 0)
  %sv_u19 = getelementptr inbounds %struct.gv, %struct.gv* %call18, i32 0, i32 3
  %svu_gp20 = bitcast %union.anon.4* %sv_u19 to %struct.gp**
  %35 = load %struct.gp*, %struct.gp** %svu_gp20, align 8
  %add.ptr21 = getelementptr inbounds %struct.gp, %struct.gp* %35, i64 0
  %gp_sv22 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr21, i32 0, i32 0
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false17, %cond.true12
  %cond24 = phi %struct.sv** [ %gp_sv16, %cond.true12 ], [ %gp_sv22, %cond.false17 ]
  %36 = load %struct.sv*, %struct.sv** %cond24, align 8
  store %struct.sv* %36, %struct.sv** %errsv, align 8
  %37 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %38, 2097152
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %cond.end23
  br i1 true, label %land.rhs, label %land.end

cond.false29:                                     ; preds = %cond.end23
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false29, %cond.true28
  %39 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call30 = call i32 @Perl_mg_get(%struct.sv* %39)
  %tobool31 = icmp ne i32 %call30, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false29, %cond.true28
  %40 = phi i1 [ false, %cond.false29 ], [ false, %cond.true28 ], [ %tobool31, %land.rhs ]
  %land.ext = zext i1 %40 to i32
  %41 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %42, 2048
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %if.then35, label %if.else94

if.then35:                                        ; preds = %land.end
  %43 = load %struct.sv*, %struct.sv** %errsv, align 8
  store %struct.sv* %43, %struct.sv** %exsv, align 8
  %44 = load %struct.sv*, %struct.sv** %exsv, align 8
  %call36 = call i32 @Perl_sv_isobject(%struct.sv* %44)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.end93

if.then38:                                        ; preds = %if.then35
  %45 = load %struct.sv*, %struct.sv** %exsv, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u39 to %struct.sv**
  %46 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any40, align 8
  %48 = bitcast i8* %47 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %48, i32 0, i32 0
  %49 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %49, %struct.hv** %stash, align 8
  %50 = load %struct.hv*, %struct.hv** %stash, align 8
  %call41 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i32 1)
  store %struct.gv* %call41, %struct.gv** %gv, align 8
  %51 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool42 = icmp ne %struct.gv* %51, null
  br i1 %tobool42, label %if.then43, label %if.end92

if.then43:                                        ; preds = %if.then38
  %52 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv = getelementptr inbounds %struct.cop, %struct.cop* %52, i32 0, i32 9
  %53 = load %struct.gv*, %struct.gv** %cop_filegv, align 8
  %tobool44 = icmp ne %struct.gv* %53, null
  br i1 %tobool44, label %cond.true45, label %cond.false49

cond.true45:                                      ; preds = %if.then43
  %54 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_filegv46 = getelementptr inbounds %struct.cop, %struct.cop* %54, i32 0, i32 9
  %55 = load %struct.gv*, %struct.gv** %cop_filegv46, align 8
  %sv_any47 = getelementptr inbounds %struct.gv, %struct.gv* %55, i32 0, i32 0
  %56 = load %struct.xpvgv*, %struct.xpvgv** %sv_any47, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %56, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %57 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %57, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %add.ptr48 = getelementptr inbounds i8, i8* %arraydecay, i64 2
  br label %cond.end50

cond.false49:                                     ; preds = %if.then43
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false49, %cond.true45
  %cond51 = phi i8* [ %add.ptr48, %cond.true45 ], [ null, %cond.false49 ]
  %call52 = call %struct.sv* @Perl_newSVpv(i8* %cond51, i64 0)
  %call53 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call52)
  store %struct.sv* %call53, %struct.sv** %file, align 8
  %58 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %58, i32 0, i32 7
  %59 = load i32, i32* %cop_line, align 4
  %conv = zext i32 %59 to i64
  %call54 = call %struct.sv* @Perl_newSVuv(i64 %conv)
  %call55 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call54)
  store %struct.sv* %call55, %struct.sv** %line, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end50
  %60 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast56 = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.rhs.cast57 = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  %sub.ptr.div59 = sdiv exact i64 %sub.ptr.sub58, 8
  %cmp60 = icmp slt i64 %sub.ptr.div59, 3
  br i1 %cmp60, label %cond.true62, label %cond.false63

cond.true62:                                      ; preds = %do.body
  br i1 true, label %if.then64, label %if.end66

cond.false63:                                     ; preds = %do.body
  br i1 false, label %if.then64, label %if.end66

if.then64:                                        ; preds = %cond.false63, %cond.true62
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call65 = call %struct.sv** @Perl_stack_grow(%struct.sv** %62, %struct.sv** %63, i64 3)
  store %struct.sv** %call65, %struct.sv*** %sp, align 8
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.then64, %cond.false63, %cond.true62
  br label %do.end

do.end:                                           ; preds = %if.end66
  br label %do.body67

do.body67:                                        ; preds = %do.end
  %65 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr68 = getelementptr inbounds i32, i32* %65, i32 1
  store i32* %incdec.ptr68, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr68, i32** %mark_stack_entry, align 8
  %66 = load i32*, i32** @PL_markstack_max, align 8
  %cmp69 = icmp eq i32* %incdec.ptr68, %66
  br i1 %cmp69, label %cond.true71, label %cond.false72

cond.true71:                                      ; preds = %do.body67
  br i1 true, label %if.then73, label %if.end75

cond.false72:                                     ; preds = %do.body67
  br i1 false, label %if.then73, label %if.end75

if.then73:                                        ; preds = %cond.false72, %cond.true71
  %call74 = call i32* @Perl_markstack_grow()
  store i32* %call74, i32** %mark_stack_entry, align 8
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %cond.false72, %cond.true71
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %68 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast76 = ptrtoint %struct.sv** %67 to i64
  %sub.ptr.rhs.cast77 = ptrtoint %struct.sv** %68 to i64
  %sub.ptr.sub78 = sub i64 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub.ptr.div79 = sdiv exact i64 %sub.ptr.sub78, 8
  %conv80 = trunc i64 %sub.ptr.div79 to i32
  %69 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv80, i32* %69, align 4
  br label %do.end81

do.end81:                                         ; preds = %if.end75
  %70 = load %struct.sv*, %struct.sv** %exsv, align 8
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr82 = getelementptr inbounds %struct.sv*, %struct.sv** %71, i32 1
  store %struct.sv** %incdec.ptr82, %struct.sv*** %sp, align 8
  store %struct.sv* %70, %struct.sv** %incdec.ptr82, align 8
  %72 = load %struct.sv*, %struct.sv** %file, align 8
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr83 = getelementptr inbounds %struct.sv*, %struct.sv** %73, i32 1
  store %struct.sv** %incdec.ptr83, %struct.sv*** %sp, align 8
  store %struct.sv* %72, %struct.sv** %incdec.ptr83, align 8
  %74 = load %struct.sv*, %struct.sv** %line, align 8
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i32 1
  store %struct.sv** %incdec.ptr84, %struct.sv*** %sp, align 8
  store %struct.sv* %74, %struct.sv** %incdec.ptr84, align 8
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %76, %struct.sv*** @PL_stack_sp, align 8
  %77 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u85 = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 3
  %svu_gp86 = bitcast %union.anon.4* %sv_u85 to %struct.gp**
  %78 = load %struct.gp*, %struct.gp** %svu_gp86, align 8
  %add.ptr87 = getelementptr inbounds %struct.gp, %struct.gp* %78, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr87, i32 0, i32 2
  %79 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr88 = getelementptr inbounds %struct.cv, %struct.cv* %79, i64 0
  %80 = bitcast %struct.cv* %add.ptr88 to i8*
  %81 = bitcast i8* %80 to %struct.sv*
  %call89 = call i32 @Perl_call_sv(%struct.sv* %81, i32 42)
  %82 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %incdec.ptr90 = getelementptr inbounds %struct.sv*, %struct.sv** %82, i32 -1
  store %struct.sv** %incdec.ptr90, %struct.sv*** @PL_stack_sp, align 8
  %83 = load %struct.sv*, %struct.sv** %82, align 8
  %call91 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %83, i32 1538)
  store %struct.sv* %call91, %struct.sv** %exsv, align 8
  br label %if.end92

if.end92:                                         ; preds = %do.end81, %if.then38
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.then35
  br label %if.end106

if.else94:                                        ; preds = %land.end
  %84 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %85, 1024
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %land.lhs.true, label %if.else103

land.lhs.true:                                    ; preds = %if.else94
  %86 = load %struct.sv*, %struct.sv** %errsv, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any98, align 8
  %88 = bitcast i8* %87 to %struct.xpv*
  %xpv_cur99 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 2
  %89 = load i64, i64* %xpv_cur99, align 8
  %tobool100 = icmp ne i64 %89, 0
  br i1 %tobool100, label %if.then101, label %if.else103

if.then101:                                       ; preds = %land.lhs.true
  %90 = load %struct.sv*, %struct.sv** %errsv, align 8
  %call102 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %90, i32 1538)
  store %struct.sv* %call102, %struct.sv** %exsv, align 8
  %91 = load %struct.sv*, %struct.sv** %exsv, align 8
  call void @Perl_sv_catpvn_flags(%struct.sv* %91, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i64 14, i32 2)
  br label %if.end105

if.else103:                                       ; preds = %land.lhs.true, %if.else94
  %call104 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i64 4, i32 524288)
  store %struct.sv* %call104, %struct.sv** %exsv, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.else103, %if.then101
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.end93
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.then7
  %92 = load %struct.sv*, %struct.sv** %exsv, align 8
  %call108 = call %struct.op* @Perl_die_sv(%struct.sv* %92)
  ret %struct.op* null
}

declare dso_local i32 @Perl_sv_isobject(%struct.sv*) #1

declare dso_local %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv*, i8*, i32) #1

declare dso_local %struct.sv* @Perl_newSVpv(i8*, i64) #1

declare dso_local %struct.sv* @Perl_newSVuv(i64) #1

declare dso_local i32* @Perl_markstack_grow() #1

declare dso_local i32 @Perl_call_sv(%struct.sv*, i32) #1

declare dso_local %struct.op* @Perl_die_sv(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_tied_method(%struct.sv* %methname, %struct.sv** %sp, %struct.sv* %sv, %struct.magic* %mg, i32 %flags, i32 %argc, ...) #0 {
entry:
  %methname.addr = alloca %struct.sv*, align 8
  %sp.addr = alloca %struct.sv**, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %mg.addr = alloca %struct.magic*, align 8
  %flags.addr = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %orig_sp = alloca %struct.sv**, align 8
  %ret_args = alloca i32, align 4
  %next = alloca %struct.stackinfo*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %mortalize_not_needed = alloca i32, align 4
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %arg = alloca %struct.sv*, align 8
  %sp80 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  store %struct.sv* %methname, %struct.sv** %methname.addr, align 8
  store %struct.sv** %sp, %struct.sv*** %sp.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store %struct.magic* %mg, %struct.magic** %mg.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  %0 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  store %struct.sv** %0, %struct.sv*** %orig_sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  store %struct.sv** %1, %struct.sv*** @PL_stack_sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %2, i32 0, i32 3
  %3 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %3, %struct.stackinfo** %next, align 8
  %4 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool = icmp ne %struct.stackinfo* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %do.body
  %call = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call, %struct.stackinfo** %next, align 8
  %5 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %6 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %6, i32 0, i32 2
  store %struct.stackinfo* %5, %struct.stackinfo** %si_prev, align 8
  %7 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %8 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next1 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %8, i32 0, i32 3
  store %struct.stackinfo* %7, %struct.stackinfo** %si_next1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %9 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %9, i32 0, i32 6
  store i32 2, i32* %si_type, align 8
  %10 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %10, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %11 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %11, i32 0, i32 0
  %12 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %12, i32 0, i32 0
  %13 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %13, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body2

do.body2:                                         ; preds = %if.end
  %14 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %15 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %16 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any3 = getelementptr inbounds %struct.av, %struct.av* %16, i32 0, i32 0
  %17 = load %struct.xpvav*, %struct.xpvav** %sv_any3, align 8
  %xav_fill4 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %17, i32 0, i32 2
  store i64 %sub.ptr.div, i64* %xav_fill4, align 8
  %18 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack5 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %18, i32 0, i32 0
  %19 = load %struct.av*, %struct.av** %si_stack5, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %19, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u to %struct.sv***
  %20 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %20, %struct.sv*** @PL_stack_base, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %22 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack6 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %22, i32 0, i32 0
  %23 = load %struct.av*, %struct.av** %si_stack6, align 8
  %sv_any7 = getelementptr inbounds %struct.av, %struct.av* %23, i32 0, i32 0
  %24 = load %struct.xpvav*, %struct.xpvav** %sv_any7, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %24, i32 0, i32 3
  %25 = load i64, i64* %xav_max, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 %25
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8
  %26 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %27 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack8 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %27, i32 0, i32 0
  %28 = load %struct.av*, %struct.av** %si_stack8, align 8
  %sv_any9 = getelementptr inbounds %struct.av, %struct.av* %28, i32 0, i32 0
  %29 = load %struct.xpvav*, %struct.xpvav** %sv_any9, align 8
  %xav_fill10 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %29, i32 0, i32 2
  %30 = load i64, i64* %xav_fill10, align 8
  %add.ptr11 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i64 %30
  store %struct.sv** %add.ptr11, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr11, %struct.sv*** %sp.addr, align 8
  %31 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack12 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %31, i32 0, i32 0
  %32 = load %struct.av*, %struct.av** %si_stack12, align 8
  store %struct.av* %32, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body2
  %33 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %33, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end13

do.end13:                                         ; preds = %do.end
  br label %do.body14

do.body14:                                        ; preds = %do.end13
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %sub.ptr.lhs.cast15 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.rhs.cast16 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast15, %sub.ptr.rhs.cast16
  %sub.ptr.div18 = sdiv exact i64 %sub.ptr.sub17, 8
  %36 = load i32, i32* %argc.addr, align 4
  %add = add i32 %36, 1
  %conv = zext i32 %add to i64
  %cmp = icmp slt i64 %sub.ptr.div18, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body14
  br i1 true, label %if.then20, label %if.end24

cond.false:                                       ; preds = %do.body14
  br i1 false, label %if.then20, label %if.end24

if.then20:                                        ; preds = %cond.false, %cond.true
  %37 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %39 = load i32, i32* %argc.addr, align 4
  %add21 = add i32 %39, 1
  %conv22 = zext i32 %add21 to i64
  %call23 = call %struct.sv** @Perl_stack_grow(%struct.sv** %37, %struct.sv** %38, i64 %conv22)
  store %struct.sv** %call23, %struct.sv*** %sp.addr, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %cond.false, %cond.true
  br label %do.end25

do.end25:                                         ; preds = %if.end24
  br label %do.body26

do.body26:                                        ; preds = %do.end25
  %41 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %41, i32 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr, i32** %mark_stack_entry, align 8
  %42 = load i32*, i32** @PL_markstack_max, align 8
  %cmp27 = icmp eq i32* %incdec.ptr, %42
  br i1 %cmp27, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %do.body26
  br i1 true, label %if.then31, label %if.end33

cond.false30:                                     ; preds = %do.body26
  br i1 false, label %if.then31, label %if.end33

if.then31:                                        ; preds = %cond.false30, %cond.true29
  %call32 = call i32* @Perl_markstack_grow()
  store i32* %call32, i32** %mark_stack_entry, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %cond.false30, %cond.true29
  %43 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %44 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast34 = ptrtoint %struct.sv** %43 to i64
  %sub.ptr.rhs.cast35 = ptrtoint %struct.sv** %44 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %sub.ptr.div37 = sdiv exact i64 %sub.ptr.sub36, 8
  %conv38 = trunc i64 %sub.ptr.div37 to i32
  %45 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv38, i32* %45, align 4
  br label %do.end39

do.end39:                                         ; preds = %if.end33
  %46 = load %struct.magic*, %struct.magic** %mg.addr, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %46, i32 0, i32 6
  %47 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool40 = icmp ne %struct.sv* %47, null
  br i1 %tobool40, label %cond.true41, label %cond.false43

cond.true41:                                      ; preds = %do.end39
  %48 = load %struct.magic*, %struct.magic** %mg.addr, align 8
  %mg_obj42 = getelementptr inbounds %struct.magic, %struct.magic* %48, i32 0, i32 6
  %49 = load %struct.sv*, %struct.sv** %mg_obj42, align 8
  br label %cond.end

cond.false43:                                     ; preds = %do.end39
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call44 = call %struct.sv* @Perl_newRV(%struct.sv* %50)
  %call45 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call44)
  br label %cond.end

cond.end:                                         ; preds = %cond.false43, %cond.true41
  %cond = phi %struct.sv* [ %49, %cond.true41 ], [ %call45, %cond.false43 ]
  %51 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %incdec.ptr46 = getelementptr inbounds %struct.sv*, %struct.sv** %51, i32 1
  store %struct.sv** %incdec.ptr46, %struct.sv*** %sp.addr, align 8
  store %struct.sv* %cond, %struct.sv** %incdec.ptr46, align 8
  %52 = load i32, i32* %flags.addr, align 4
  %and = and i32 %52, 8
  %tobool47 = icmp ne i32 %and, 0
  br i1 %tobool47, label %if.then48, label %if.else

if.then48:                                        ; preds = %cond.end
  %53 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %add.ptr49 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i64 1
  %54 = bitcast %struct.sv** %add.ptr49 to i8*
  %55 = load %struct.sv**, %struct.sv*** %orig_sp, align 8
  %add.ptr50 = getelementptr inbounds %struct.sv*, %struct.sv** %55, i64 2
  %56 = bitcast %struct.sv** %add.ptr50 to i8*
  %57 = load i32, i32* %argc.addr, align 4
  %conv51 = zext i32 %57 to i64
  %mul = mul i64 %conv51, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %56, i64 %mul, i1 false)
  %58 = load i32, i32* %argc.addr, align 4
  %59 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %idx.ext = zext i32 %58 to i64
  %add.ptr52 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i64 %idx.ext
  store %struct.sv** %add.ptr52, %struct.sv*** %sp.addr, align 8
  br label %if.end71

if.else:                                          ; preds = %cond.end
  %60 = load i32, i32* %argc.addr, align 4
  %tobool53 = icmp ne i32 %60, 0
  br i1 %tobool53, label %if.then54, label %if.end70

if.then54:                                        ; preds = %if.else
  %61 = load i32, i32* %flags.addr, align 4
  %and55 = and i32 %61, 4
  store i32 %and55, i32* %mortalize_not_needed, align 4
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay56 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay56)
  br label %do.body57

do.body57:                                        ; preds = %do.cond, %if.then54
  %arraydecay58 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay58, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %do.body57
  %62 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay58, i32 0, i32 3
  %reg_save_area = load i8*, i8** %62, align 16
  %63 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %64 = bitcast i8* %63 to %struct.sv**
  %65 = add i32 %gp_offset, 8
  store i32 %65, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %do.body57
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay58, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %66 = bitcast i8* %overflow_arg_area to %struct.sv**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %struct.sv** [ %64, %vaarg.in_reg ], [ %66, %vaarg.in_mem ]
  %67 = load %struct.sv*, %struct.sv** %vaarg.addr, align 8
  store %struct.sv* %67, %struct.sv** %arg, align 8
  %68 = load i32, i32* %mortalize_not_needed, align 4
  %tobool59 = icmp ne i32 %68, 0
  br i1 %tobool59, label %if.then60, label %if.else62

if.then60:                                        ; preds = %vaarg.end
  %69 = load %struct.sv*, %struct.sv** %arg, align 8
  %70 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %incdec.ptr61 = getelementptr inbounds %struct.sv*, %struct.sv** %70, i32 1
  store %struct.sv** %incdec.ptr61, %struct.sv*** %sp.addr, align 8
  store %struct.sv* %69, %struct.sv** %incdec.ptr61, align 8
  br label %if.end65

if.else62:                                        ; preds = %vaarg.end
  %71 = load %struct.sv*, %struct.sv** %arg, align 8
  %call63 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %71)
  %72 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %incdec.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %72, i32 1
  store %struct.sv** %incdec.ptr64, %struct.sv*** %sp.addr, align 8
  store %struct.sv* %call63, %struct.sv** %incdec.ptr64, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.else62, %if.then60
  br label %do.cond

do.cond:                                          ; preds = %if.end65
  %73 = load i32, i32* %argc.addr, align 4
  %dec = add i32 %73, -1
  store i32 %dec, i32* %argc.addr, align 4
  %tobool66 = icmp ne i32 %dec, 0
  br i1 %tobool66, label %do.body57, label %do.end67

do.end67:                                         ; preds = %do.cond
  %arraydecay68 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %args, i64 0, i64 0
  %arraydecay6869 = bitcast %struct.__va_list_tag* %arraydecay68 to i8*
  call void @llvm.va_end(i8* %arraydecay6869)
  br label %if.end70

if.end70:                                         ; preds = %do.end67, %if.else
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then48
  %74 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  store %struct.sv** %74, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %75 = load i32, i32* %flags.addr, align 4
  %and72 = and i32 %75, 16
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.end76

if.then74:                                        ; preds = %if.end71
  call void @Perl_save_generic_svref(%struct.sv** @PL_ors_sv)
  %call75 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0), i64 1)
  store %struct.sv* %call75, %struct.sv** @PL_ors_sv, align 8
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %if.end71
  %76 = load %struct.sv*, %struct.sv** %methname.addr, align 8
  %77 = load i32, i32* %flags.addr, align 4
  %and77 = and i32 %77, 3
  %or = or i32 %and77, 4096
  %call78 = call i32 @Perl_call_sv(%struct.sv* %76, i32 %or)
  store i32 %call78, i32* %ret_args, align 4
  %78 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %78, %struct.sv*** %sp.addr, align 8
  %79 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  store %struct.sv** %79, %struct.sv*** %orig_sp, align 8
  br label %do.body79

do.body79:                                        ; preds = %if.end76
  %80 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %80, %struct.sv*** %sp80, align 8
  %81 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev81 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %81, i32 0, i32 2
  %82 = load %struct.stackinfo*, %struct.stackinfo** %si_prev81, align 8
  store %struct.stackinfo* %82, %struct.stackinfo** %prev, align 8
  %83 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool82 = icmp ne %struct.stackinfo* %83, null
  br i1 %tobool82, label %if.end84, label %if.then83

if.then83:                                        ; preds = %do.body79
  call void @Perl_croak_popstack()
  br label %if.end84

if.end84:                                         ; preds = %if.then83, %do.body79
  br label %do.body85

do.body85:                                        ; preds = %if.end84
  %84 = load %struct.sv**, %struct.sv*** %sp80, align 8
  %85 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast86 = ptrtoint %struct.sv** %84 to i64
  %sub.ptr.rhs.cast87 = ptrtoint %struct.sv** %85 to i64
  %sub.ptr.sub88 = sub i64 %sub.ptr.lhs.cast86, %sub.ptr.rhs.cast87
  %sub.ptr.div89 = sdiv exact i64 %sub.ptr.sub88, 8
  %86 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any90 = getelementptr inbounds %struct.av, %struct.av* %86, i32 0, i32 0
  %87 = load %struct.xpvav*, %struct.xpvav** %sv_any90, align 8
  %xav_fill91 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %87, i32 0, i32 2
  store i64 %sub.ptr.div89, i64* %xav_fill91, align 8
  %88 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack92 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %88, i32 0, i32 0
  %89 = load %struct.av*, %struct.av** %si_stack92, align 8
  %sv_u93 = getelementptr inbounds %struct.av, %struct.av* %89, i32 0, i32 3
  %svu_array94 = bitcast %union.anon.0* %sv_u93 to %struct.sv***
  %90 = load %struct.sv**, %struct.sv*** %svu_array94, align 8
  store %struct.sv** %90, %struct.sv*** @PL_stack_base, align 8
  %91 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %92 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack95 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %92, i32 0, i32 0
  %93 = load %struct.av*, %struct.av** %si_stack95, align 8
  %sv_any96 = getelementptr inbounds %struct.av, %struct.av* %93, i32 0, i32 0
  %94 = load %struct.xpvav*, %struct.xpvav** %sv_any96, align 8
  %xav_max97 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %94, i32 0, i32 3
  %95 = load i64, i64* %xav_max97, align 8
  %add.ptr98 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i64 %95
  store %struct.sv** %add.ptr98, %struct.sv*** @PL_stack_max, align 8
  %96 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %97 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack99 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %97, i32 0, i32 0
  %98 = load %struct.av*, %struct.av** %si_stack99, align 8
  %sv_any100 = getelementptr inbounds %struct.av, %struct.av* %98, i32 0, i32 0
  %99 = load %struct.xpvav*, %struct.xpvav** %sv_any100, align 8
  %xav_fill101 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %99, i32 0, i32 2
  %100 = load i64, i64* %xav_fill101, align 8
  %add.ptr102 = getelementptr inbounds %struct.sv*, %struct.sv** %96, i64 %100
  store %struct.sv** %add.ptr102, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr102, %struct.sv*** %sp80, align 8
  %101 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack103 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %101, i32 0, i32 0
  %102 = load %struct.av*, %struct.av** %si_stack103, align 8
  store %struct.av* %102, %struct.av** @PL_curstack, align 8
  br label %do.end105

do.end105:                                        ; preds = %do.body85
  %103 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %103, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end107

do.end107:                                        ; preds = %do.end105
  %104 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %104, %struct.sv*** %sp.addr, align 8
  %105 = load i32, i32* %ret_args, align 4
  %tobool108 = icmp ne i32 %105, 0
  br i1 %tobool108, label %if.then109, label %if.end134

if.then109:                                       ; preds = %do.end107
  br label %do.body110

do.body110:                                       ; preds = %if.then109
  %106 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %107 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %sub.ptr.lhs.cast111 = ptrtoint %struct.sv** %106 to i64
  %sub.ptr.rhs.cast112 = ptrtoint %struct.sv** %107 to i64
  %sub.ptr.sub113 = sub i64 %sub.ptr.lhs.cast111, %sub.ptr.rhs.cast112
  %sub.ptr.div114 = sdiv exact i64 %sub.ptr.sub113, 8
  %108 = load i32, i32* %ret_args, align 4
  %conv115 = sext i32 %108 to i64
  %cmp116 = icmp slt i64 %sub.ptr.div114, %conv115
  br i1 %cmp116, label %cond.true118, label %cond.false119

cond.true118:                                     ; preds = %do.body110
  br i1 true, label %if.then120, label %if.end123

cond.false119:                                    ; preds = %do.body110
  br i1 false, label %if.then120, label %if.end123

if.then120:                                       ; preds = %cond.false119, %cond.true118
  %109 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %110 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %111 = load i32, i32* %ret_args, align 4
  %conv121 = sext i32 %111 to i64
  %call122 = call %struct.sv** @Perl_stack_grow(%struct.sv** %109, %struct.sv** %110, i64 %conv121)
  store %struct.sv** %call122, %struct.sv*** %sp.addr, align 8
  %112 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.then120, %cond.false119, %cond.true118
  br label %do.end125

do.end125:                                        ; preds = %if.end123
  %113 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %add.ptr126 = getelementptr inbounds %struct.sv*, %struct.sv** %113, i64 1
  %114 = bitcast %struct.sv** %add.ptr126 to i8*
  %115 = load %struct.sv**, %struct.sv*** %orig_sp, align 8
  %116 = load i32, i32* %ret_args, align 4
  %idx.ext127 = sext i32 %116 to i64
  %idx.neg = sub i64 0, %idx.ext127
  %add.ptr128 = getelementptr inbounds %struct.sv*, %struct.sv** %115, i64 %idx.neg
  %add.ptr129 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr128, i64 1
  %117 = bitcast %struct.sv** %add.ptr129 to i8*
  %118 = load i32, i32* %ret_args, align 4
  %conv130 = sext i32 %118 to i64
  %mul131 = mul i64 %conv130, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %117, i64 %mul131, i1 false)
  %119 = load i32, i32* %ret_args, align 4
  %120 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  %idx.ext132 = sext i32 %119 to i64
  %add.ptr133 = getelementptr inbounds %struct.sv*, %struct.sv** %120, i64 %idx.ext132
  store %struct.sv** %add.ptr133, %struct.sv*** %sp.addr, align 8
  %121 = load %struct.sv**, %struct.sv*** %sp.addr, align 8
  store %struct.sv** %121, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end134

if.end134:                                        ; preds = %do.end125, %do.end107
  call void @Perl_pop_scope()
  %122 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %122, i32 0, i32 0
  %123 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %123
}

declare dso_local %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #1

declare dso_local %struct.sv* @Perl_newRV(%struct.sv*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

declare dso_local void @Perl_save_generic_svref(%struct.sv**) #1

declare dso_local %struct.sv* @Perl_newSVpvn(i8*, i64) #1

declare dso_local void @Perl_croak_popstack() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_open() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %io = alloca %struct.io*, align 8
  %tmps = alloca i8*, align 8
  %len = alloca i64, align 8
  %ok = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  %mg = alloca %struct.magic*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %11 = load %struct.sv*, %struct.sv** %incdec.ptr1, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.gv*
  store %struct.gv* %13, %struct.gv** %gv, align 8
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and = and i32 %15, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags3 = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %17, 255
  %cmp5 = icmp eq i32 %and4, 10
  br i1 %cmp5, label %land.lhs.true7, label %if.then

land.lhs.true7:                                   ; preds = %land.lhs.true
  %18 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags8 = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %19, 49152
  %cmp10 = icmp eq i32 %and9, 32768
  br i1 %cmp10, label %land.lhs.true12, label %if.then

land.lhs.true12:                                  ; preds = %land.lhs.true7
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags13 = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %21, 255
  %cmp15 = icmp eq i32 %and14, 9
  br i1 %cmp15, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true12
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags17 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %23, 255
  %cmp19 = icmp eq i32 %and18, 10
  br i1 %cmp19, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true7, %land.lhs.true
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0))
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true12, %entry
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr21 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr21, i32 0, i32 1
  %26 = load %struct.io*, %struct.io** %gp_io, align 8
  store %struct.io* %26, %struct.io** %io, align 8
  %tobool = icmp ne %struct.io* %26, null
  br i1 %tobool, label %if.then22, label %if.end67

if.then22:                                        ; preds = %if.end
  %27 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u23 = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 3
  %svu_gp24 = bitcast %union.anon.4* %sv_u23 to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp24, align 8
  %add.ptr25 = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %gp_io26 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr25, i32 0, i32 1
  %29 = load %struct.io*, %struct.io** %gp_io26, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %29, i32 0, i32 0
  %30 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %30, i32 0, i32 17
  %31 = load i8, i8* %xio_flags, align 1
  %conv27 = zext i8 %31 to i32
  %and28 = and i32 %conv27, -17
  %conv29 = trunc i32 %and28 to i8
  store i8 %conv29, i8* %xio_flags, align 1
  %32 = load %struct.io*, %struct.io** %io, align 8
  %sv_any30 = getelementptr inbounds %struct.io, %struct.io* %32, i32 0, i32 0
  %33 = load %struct.xpvio*, %struct.xpvio** %sv_any30, align 8
  %xio_dirpu = getelementptr inbounds %struct.xpvio, %struct.xpvio* %33, i32 0, i32 6
  %xiou_dirp = bitcast %union.anon.15* %xio_dirpu to %struct.__dirstream**
  %34 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp, align 8
  %tobool31 = icmp ne %struct.__dirstream* %34, null
  br i1 %tobool31, label %if.then32, label %if.end42

if.then32:                                        ; preds = %if.then22
  %35 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u33 = getelementptr inbounds %struct.gv, %struct.gv* %35, i32 0, i32 3
  %svu_gp34 = bitcast %union.anon.4* %sv_u33 to %struct.gp**
  %36 = load %struct.gp*, %struct.gp** %svu_gp34, align 8
  %add.ptr35 = getelementptr inbounds %struct.gp, %struct.gp* %36, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr35, i32 0, i32 8
  %37 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool36 = icmp ne %struct.gv* %37, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then32
  %38 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u37 = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 3
  %svu_gp38 = bitcast %union.anon.4* %sv_u37 to %struct.gp**
  %39 = load %struct.gp*, %struct.gp** %svu_gp38, align 8
  %add.ptr39 = getelementptr inbounds %struct.gp, %struct.gp* %39, i64 0
  %gp_egv40 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr39, i32 0, i32 8
  %40 = load %struct.gv*, %struct.gv** %gp_egv40, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then32
  %41 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %40, %cond.true ], [ %41, %cond.false ]
  %sv_any41 = getelementptr inbounds %struct.gv, %struct.gv* %cond, i32 0, i32 0
  %42 = load %struct.xpvgv*, %struct.xpvgv** %sv_any41, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %42, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %43 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %44 = bitcast %struct.hek* %43 to i8*
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 517, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0), i8* %44)
  br label %if.end42

if.end42:                                         ; preds = %cond.end, %if.then22
  %45 = load %struct.io*, %struct.io** %io, align 8
  %46 = bitcast %struct.io* %45 to %struct.sv*
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %47, 8388608
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true46, label %cond.false48

cond.true46:                                      ; preds = %if.end42
  %48 = load %struct.io*, %struct.io** %io, align 8
  %49 = bitcast %struct.io* %48 to %struct.sv*
  %call47 = call %struct.magic* @Perl_mg_find(%struct.sv* %49, i32 113)
  br label %cond.end49

cond.false48:                                     ; preds = %if.end42
  br label %cond.end49

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.magic* [ %call47, %cond.true46 ], [ null, %cond.false48 ]
  store %struct.magic* %cond50, %struct.magic** %mg, align 8
  %50 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool51 = icmp ne %struct.magic* %50, null
  br i1 %tobool51, label %if.then52, label %if.end66

if.then52:                                        ; preds = %cond.end49
  %51 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 18), align 16
  %tobool53 = icmp ne %struct.sv* %51, null
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %if.then52
  %52 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 18), align 16
  br label %cond.end57

cond.false55:                                     ; preds = %if.then52
  %call56 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i64 0, i64 0), i32 0)
  store %struct.sv* %call56, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 18), align 16
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false55, %cond.true54
  %cond58 = phi %struct.sv* [ %52, %cond.true54 ], [ %call56, %cond.false55 ]
  %53 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr59 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i64 -1
  %54 = load %struct.io*, %struct.io** %io, align 8
  %55 = bitcast %struct.io* %54 to i8*
  %56 = bitcast i8* %55 to %struct.sv*
  %57 = load %struct.magic*, %struct.magic** %mg, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %59 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast60 = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.rhs.cast61 = ptrtoint %struct.sv** %59 to i64
  %sub.ptr.sub62 = sub i64 %sub.ptr.lhs.cast60, %sub.ptr.rhs.cast61
  %sub.ptr.div63 = sdiv exact i64 %sub.ptr.sub62, 8
  %conv64 = trunc i64 %sub.ptr.div63 to i32
  %call65 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond58, %struct.sv** %add.ptr59, %struct.sv* %56, %struct.magic* %57, i32 10, i32 %conv64)
  store %struct.op* %call65, %struct.op** %retval, align 8
  br label %return

if.end66:                                         ; preds = %cond.end49
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp68 = icmp ult %struct.sv** %60, %61
  br i1 %cmp68, label %if.then70, label %if.else

if.then70:                                        ; preds = %if.end67
  %62 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr71 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i32 1
  store %struct.sv** %incdec.ptr71, %struct.sv*** %mark, align 8
  %63 = load %struct.sv*, %struct.sv** %incdec.ptr71, align 8
  store %struct.sv* %63, %struct.sv** %sv, align 8
  br label %if.end89

if.else:                                          ; preds = %if.end67
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u72 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp73 = bitcast %union.anon.4* %sv_u72 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp73, align 8
  %add.ptr74 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr74, i32 0, i32 0
  %66 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool75 = icmp ne %struct.sv* %66, null
  br i1 %tobool75, label %cond.true76, label %cond.false81

cond.true76:                                      ; preds = %if.else
  %67 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u77 = getelementptr inbounds %struct.gv, %struct.gv* %67, i32 0, i32 3
  %svu_gp78 = bitcast %union.anon.4* %sv_u77 to %struct.gp**
  %68 = load %struct.gp*, %struct.gp** %svu_gp78, align 8
  %add.ptr79 = getelementptr inbounds %struct.gp, %struct.gp* %68, i64 0
  %gp_sv80 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr79, i32 0, i32 0
  br label %cond.end87

cond.false81:                                     ; preds = %if.else
  %69 = load %struct.gv*, %struct.gv** %gv, align 8
  %call82 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %69, i32 0)
  %sv_u83 = getelementptr inbounds %struct.gv, %struct.gv* %call82, i32 0, i32 3
  %svu_gp84 = bitcast %union.anon.4* %sv_u83 to %struct.gp**
  %70 = load %struct.gp*, %struct.gp** %svu_gp84, align 8
  %add.ptr85 = getelementptr inbounds %struct.gp, %struct.gp* %70, i64 0
  %gp_sv86 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr85, i32 0, i32 0
  br label %cond.end87

cond.end87:                                       ; preds = %cond.false81, %cond.true76
  %cond88 = phi %struct.sv** [ %gp_sv80, %cond.true76 ], [ %gp_sv86, %cond.false81 ]
  %71 = load %struct.sv*, %struct.sv** %cond88, align 8
  store %struct.sv* %71, %struct.sv** %sv, align 8
  br label %if.end89

if.end89:                                         ; preds = %cond.end87, %if.then70
  %72 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags90 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags90, align 4
  %and91 = and i32 %73, 2098176
  %cmp92 = icmp eq i32 %and91, 1024
  br i1 %cmp92, label %cond.true94, label %cond.false98

cond.true94:                                      ; preds = %if.end89
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 0
  %75 = load i8*, i8** %sv_any95, align 8
  %76 = bitcast i8* %75 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %76, i32 0, i32 2
  %77 = load i64, i64* %xpv_cur, align 8
  store i64 %77, i64* %len, align 8
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u96 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u96 to i8**
  %79 = load i8*, i8** %svu_pv, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %79, i64 0
  br label %cond.end100

cond.false98:                                     ; preds = %if.end89
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %call99 = call i8* @Perl_sv_2pv_flags(%struct.sv* %80, i64* %len, i32 34)
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false98, %cond.true94
  %cond101 = phi i8* [ %add.ptr97, %cond.true94 ], [ %call99, %cond.false98 ]
  store i8* %cond101, i8** %tmps, align 8
  %81 = load %struct.gv*, %struct.gv** %gv, align 8
  %82 = load i8*, i8** %tmps, align 8
  %83 = load i64, i64* %len, align 8
  %84 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr102 = getelementptr inbounds %struct.sv*, %struct.sv** %84, i64 1
  %85 = load %struct.sv**, %struct.sv*** %sp, align 8
  %86 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast103 = ptrtoint %struct.sv** %85 to i64
  %sub.ptr.rhs.cast104 = ptrtoint %struct.sv** %86 to i64
  %sub.ptr.sub105 = sub i64 %sub.ptr.lhs.cast103, %sub.ptr.rhs.cast104
  %sub.ptr.div106 = sdiv exact i64 %sub.ptr.sub105, 8
  %conv107 = trunc i64 %sub.ptr.div106 to i32
  %call108 = call zeroext i1 @Perl_do_open6(%struct.gv* %81, i8* %82, i64 %83, %struct._PerlIO** null, %struct.sv** %add.ptr102, i32 %conv107)
  %frombool = zext i1 %call108 to i8
  store i8 %frombool, i8* %ok, align 1
  %87 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %88 = load i32, i32* %origmark, align 4
  %idx.ext109 = sext i32 %88 to i64
  %add.ptr110 = getelementptr inbounds %struct.sv*, %struct.sv** %87, i64 %idx.ext109
  store %struct.sv** %add.ptr110, %struct.sv*** %sp, align 8
  %89 = load i8, i8* %ok, align 1
  %tobool111 = trunc i8 %89 to i1
  br i1 %tobool111, label %if.then112, label %if.else127

if.then112:                                       ; preds = %cond.end100
  br label %do.body

do.body:                                          ; preds = %if.then112
  %90 = load %struct.sv*, %struct.sv** %targ, align 8
  %91 = load i32, i32* @PL_forkprocess, align 4
  %conv113 = sext i32 %91 to i64
  call void @Perl_sv_setiv(%struct.sv* %90, i64 %conv113)
  br label %do.body114

do.body114:                                       ; preds = %do.body
  br label %do.body115

do.body115:                                       ; preds = %do.body114
  %92 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %93, 4194304
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %cond.true119, label %cond.false120

cond.true119:                                     ; preds = %do.body115
  br i1 true, label %if.then121, label %if.end123

cond.false120:                                    ; preds = %do.body115
  br i1 false, label %if.then121, label %if.end123

if.then121:                                       ; preds = %cond.false120, %cond.true119
  %94 = load %struct.sv*, %struct.sv** %targ, align 8
  %call122 = call i32 @Perl_mg_set(%struct.sv* %94)
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %cond.false120, %cond.true119
  br label %do.end

do.end:                                           ; preds = %if.end123
  %95 = load %struct.sv*, %struct.sv** %targ, align 8
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr124 = getelementptr inbounds %struct.sv*, %struct.sv** %96, i32 1
  store %struct.sv** %incdec.ptr124, %struct.sv*** %sp, align 8
  store %struct.sv* %95, %struct.sv** %incdec.ptr124, align 8
  br label %do.end125

do.end125:                                        ; preds = %do.end
  br label %do.end126

do.end126:                                        ; preds = %do.end125
  br label %if.end149

if.else127:                                       ; preds = %cond.end100
  %97 = load i32, i32* @PL_forkprocess, align 4
  %cmp128 = icmp eq i32 %97, 0
  br i1 %cmp128, label %if.then130, label %if.else146

if.then130:                                       ; preds = %if.else127
  br label %do.body131

do.body131:                                       ; preds = %if.then130
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %98, i64 0)
  br label %do.body132

do.body132:                                       ; preds = %do.body131
  br label %do.body133

do.body133:                                       ; preds = %do.body132
  %99 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags134 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 2
  %100 = load i32, i32* %sv_flags134, align 4
  %and135 = and i32 %100, 4194304
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %cond.true137, label %cond.false138

cond.true137:                                     ; preds = %do.body133
  br i1 true, label %if.then139, label %if.end141

cond.false138:                                    ; preds = %do.body133
  br i1 false, label %if.then139, label %if.end141

if.then139:                                       ; preds = %cond.false138, %cond.true137
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %call140 = call i32 @Perl_mg_set(%struct.sv* %101)
  br label %if.end141

if.end141:                                        ; preds = %if.then139, %cond.false138, %cond.true137
  br label %do.end142

do.end142:                                        ; preds = %if.end141
  %102 = load %struct.sv*, %struct.sv** %targ, align 8
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr143 = getelementptr inbounds %struct.sv*, %struct.sv** %103, i32 1
  store %struct.sv** %incdec.ptr143, %struct.sv*** %sp, align 8
  store %struct.sv* %102, %struct.sv** %incdec.ptr143, align 8
  br label %do.end144

do.end144:                                        ; preds = %do.end142
  br label %do.end145

do.end145:                                        ; preds = %do.end144
  br label %if.end148

if.else146:                                       ; preds = %if.else127
  %104 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr147 = getelementptr inbounds %struct.sv*, %struct.sv** %104, i32 1
  store %struct.sv** %incdec.ptr147, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr147, align 8
  %105 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %105, %struct.sv*** @PL_stack_sp, align 8
  %106 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %106, i32 0, i32 0
  %107 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %107, %struct.op** %retval, align 8
  br label %return

if.end148:                                        ; preds = %do.end145
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %do.end126
  %108 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %108, %struct.sv*** @PL_stack_sp, align 8
  %109 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next150 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 0
  %110 = load %struct.op*, %struct.op** %op_next150, align 8
  store %struct.op* %110, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end149, %if.else146, %cond.end57, %if.then
  %111 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %111
}

declare dso_local %struct.op* @Perl_die(i8*, ...) #1

declare dso_local void @Perl_ck_warner_d(i32, i8*, ...) #1

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

declare dso_local %struct.sv* @Perl_newSVpv_share(i8*, i32) #1

declare dso_local zeroext i1 @Perl_do_open6(%struct.gv*, i8*, i64, %struct._PerlIO**, %struct.sv**, i32) #1

declare dso_local void @Perl_sv_setiv(%struct.sv*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_close() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %mg = alloca %struct.magic*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %tobool = icmp ne %struct.sv* %4, null
  br i1 %tobool, label %cond.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %tobool2 = icmp ne %struct.sv* %6, null
  br i1 %tobool2, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true, %entry
  %7 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.gv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %7, %cond.true ], [ %11, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private4 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private4, align 1
  %conv5 = zext i8 %13 to i32
  %and6 = and i32 %conv5, 15
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %if.then, label %if.end14

if.then:                                          ; preds = %cond.end
  br label %do.body

do.body:                                          ; preds = %if.then
  %14 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp9 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp9, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.body
  br i1 true, label %if.then13, label %if.end

cond.false12:                                     ; preds = %do.body
  br i1 false, label %if.then13, label %if.end

if.then13:                                        ; preds = %cond.false12, %cond.true11
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %16, %struct.sv** %17, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then13, %cond.false12, %cond.true11
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end14

if.end14:                                         ; preds = %do.end, %cond.end
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool15 = icmp ne %struct.gv* %19, null
  br i1 %tobool15, label %if.then16, label %if.end57

if.then16:                                        ; preds = %if.end14
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool17 = icmp ne %struct.gv* %20, null
  br i1 %tobool17, label %land.lhs.true18, label %cond.false33

land.lhs.true18:                                  ; preds = %if.then16
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %22 = bitcast %struct.gv* %21 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags, align 4
  %and19 = and i32 %23, 255
  %cmp20 = icmp eq i32 %and19, 9
  br i1 %cmp20, label %land.lhs.true27, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %land.lhs.true18
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %25 = bitcast %struct.gv* %24 to %struct.sv*
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %26, 255
  %cmp25 = icmp eq i32 %and24, 10
  br i1 %cmp25, label %land.lhs.true27, label %cond.false33

land.lhs.true27:                                  ; preds = %lor.lhs.false22, %land.lhs.true18
  %27 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %tobool28 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool28, label %cond.true29, label %cond.false33

cond.true29:                                      ; preds = %land.lhs.true27
  %29 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u30 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 3
  %svu_gp31 = bitcast %union.anon.4* %sv_u30 to %struct.gp**
  %30 = load %struct.gp*, %struct.gp** %svu_gp31, align 8
  %add.ptr32 = getelementptr inbounds %struct.gp, %struct.gp* %30, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr32, i32 0, i32 1
  %31 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end34

cond.false33:                                     ; preds = %land.lhs.true27, %lor.lhs.false22, %if.then16
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true29
  %cond35 = phi %struct.io* [ %31, %cond.true29 ], [ null, %cond.false33 ]
  store %struct.io* %cond35, %struct.io** %io, align 8
  %32 = load %struct.io*, %struct.io** %io, align 8
  %tobool36 = icmp ne %struct.io* %32, null
  br i1 %tobool36, label %if.then37, label %if.end56

if.then37:                                        ; preds = %cond.end34
  %33 = load %struct.io*, %struct.io** %io, align 8
  %34 = bitcast %struct.io* %33 to %struct.sv*
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %35, 8388608
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false43

cond.true41:                                      ; preds = %if.then37
  %36 = load %struct.io*, %struct.io** %io, align 8
  %37 = bitcast %struct.io* %36 to %struct.sv*
  %call42 = call %struct.magic* @Perl_mg_find(%struct.sv* %37, i32 113)
  br label %cond.end44

cond.false43:                                     ; preds = %if.then37
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.magic* [ %call42, %cond.true41 ], [ null, %cond.false43 ]
  store %struct.magic* %cond45, %struct.magic** %mg, align 8
  %38 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool46 = icmp ne %struct.magic* %38, null
  br i1 %tobool46, label %if.then47, label %if.end55

if.then47:                                        ; preds = %cond.end44
  %39 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 30), align 16
  %tobool48 = icmp ne %struct.sv* %39, null
  br i1 %tobool48, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %if.then47
  %40 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 30), align 16
  br label %cond.end52

cond.false50:                                     ; preds = %if.then47
  %call51 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0), i32 0)
  store %struct.sv* %call51, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 30), align 16
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true49
  %cond53 = phi %struct.sv* [ %40, %cond.true49 ], [ %call51, %cond.false50 ]
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.io*, %struct.io** %io, align 8
  %43 = bitcast %struct.io* %42 to i8*
  %44 = bitcast i8* %43 to %struct.sv*
  %45 = load %struct.magic*, %struct.magic** %mg, align 8
  %call54 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond53, %struct.sv** %41, %struct.sv* %44, %struct.magic* %45, i32 2, i32 0)
  store %struct.op* %call54, %struct.op** %retval, align 8
  br label %return

if.end55:                                         ; preds = %cond.end44
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %cond.end34
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end14
  %46 = load %struct.gv*, %struct.gv** %gv, align 8
  %call58 = call zeroext i1 @Perl_do_close(%struct.gv* %46, i1 zeroext true)
  %47 = zext i1 %call58 to i64
  %cond60 = select i1 %call58, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr61 = getelementptr inbounds %struct.sv*, %struct.sv** %48, i32 1
  store %struct.sv** %incdec.ptr61, %struct.sv*** %sp, align 8
  store %struct.sv* %cond60, %struct.sv** %incdec.ptr61, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %49, %struct.sv*** @PL_stack_sp, align 8
  %50 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 0
  %51 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %51, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end57, %cond.end52
  %52 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %52
}

declare dso_local zeroext i1 @Perl_do_close(%struct.gv*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_pipe_op() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_fileno() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %mg = alloca %struct.magic*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp slt i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %8, %struct.sv*** @PL_stack_sp, align 8
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 0
  %10 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %10, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %13 = bitcast %struct.sv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %15, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %17 = bitcast %struct.gv* %16 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %18, 255
  %cmp4 = icmp eq i32 %and3, 9
  br i1 %cmp4, label %land.lhs.true10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %20 = bitcast %struct.gv* %19 to %struct.sv*
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %21, 255
  %cmp8 = icmp eq i32 %and7, 10
  br i1 %cmp8, label %land.lhs.true10, label %cond.false

land.lhs.true10:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %tobool11 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true10
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u12 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp13 = bitcast %union.anon.4* %sv_u12 to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp13, align 8
  %add.ptr14 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr14, i32 0, i32 1
  %26 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true10, %lor.lhs.false, %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %26, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %27 = load %struct.io*, %struct.io** %io, align 8
  %tobool15 = icmp ne %struct.io* %27, null
  br i1 %tobool15, label %land.lhs.true16, label %if.end33

land.lhs.true16:                                  ; preds = %cond.end
  %28 = load %struct.io*, %struct.io** %io, align 8
  %29 = bitcast %struct.io* %28 to %struct.sv*
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %30, 8388608
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %land.lhs.true16
  %31 = load %struct.io*, %struct.io** %io, align 8
  %32 = bitcast %struct.io* %31 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %32, i32 113)
  br label %cond.end22

cond.false21:                                     ; preds = %land.lhs.true16
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi %struct.magic* [ %call, %cond.true20 ], [ null, %cond.false21 ]
  store %struct.magic* %cond23, %struct.magic** %mg, align 8
  %tobool24 = icmp ne %struct.magic* %cond23, null
  br i1 %tobool24, label %if.then25, label %if.end33

if.then25:                                        ; preds = %cond.end22
  %33 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 29), align 8
  %tobool26 = icmp ne %struct.sv* %33, null
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %if.then25
  %34 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 29), align 8
  br label %cond.end30

cond.false28:                                     ; preds = %if.then25
  %call29 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0), i32 0)
  store %struct.sv* %call29, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 29), align 8
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false28, %cond.true27
  %cond31 = phi %struct.sv* [ %34, %cond.true27 ], [ %call29, %cond.false28 ]
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.io*, %struct.io** %io, align 8
  %37 = bitcast %struct.io* %36 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  %39 = load %struct.magic*, %struct.magic** %mg, align 8
  %call32 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond31, %struct.sv** %35, %struct.sv* %38, %struct.magic* %39, i32 2, i32 0)
  store %struct.op* %call32, %struct.op** %retval, align 8
  br label %return

if.end33:                                         ; preds = %cond.end22, %cond.end
  %40 = load %struct.io*, %struct.io** %io, align 8
  %tobool34 = icmp ne %struct.io* %40, null
  br i1 %tobool34, label %land.lhs.true35, label %if.end41

land.lhs.true35:                                  ; preds = %if.end33
  %41 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %41, i32 0, i32 0
  %42 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_dirpu = getelementptr inbounds %struct.xpvio, %struct.xpvio* %42, i32 0, i32 6
  %xiou_dirp = bitcast %union.anon.15* %xio_dirpu to %struct.__dirstream**
  %43 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp, align 8
  %tobool36 = icmp ne %struct.__dirstream* %43, null
  br i1 %tobool36, label %if.then37, label %if.end41

if.then37:                                        ; preds = %land.lhs.true35
  %call38 = call i32* @__errno_location() #9
  store i32 95, i32* %call38, align 4
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr39 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i32 1
  store %struct.sv** %incdec.ptr39, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr39, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %45, %struct.sv*** @PL_stack_sp, align 8
  %46 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next40 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 0
  %47 = load %struct.op*, %struct.op** %op_next40, align 8
  store %struct.op* %47, %struct.op** %retval, align 8
  br label %return

if.end41:                                         ; preds = %land.lhs.true35, %if.end33
  %48 = load %struct.io*, %struct.io** %io, align 8
  %tobool42 = icmp ne %struct.io* %48, null
  br i1 %tobool42, label %lor.lhs.false43, label %if.then46

lor.lhs.false43:                                  ; preds = %if.end41
  %49 = load %struct.io*, %struct.io** %io, align 8
  %sv_u44 = getelementptr inbounds %struct.io, %struct.io* %49, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u44 to %struct._PerlIO***
  %50 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  store %struct._PerlIO** %50, %struct._PerlIO*** %fp, align 8
  %tobool45 = icmp ne %struct._PerlIO** %50, null
  br i1 %tobool45, label %if.end49, label %if.then46

if.then46:                                        ; preds = %lor.lhs.false43, %if.end41
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr47 = getelementptr inbounds %struct.sv*, %struct.sv** %51, i32 1
  store %struct.sv** %incdec.ptr47, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr47, align 8
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %52, %struct.sv*** @PL_stack_sp, align 8
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next48 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 0
  %54 = load %struct.op*, %struct.op** %op_next48, align 8
  store %struct.op* %54, %struct.op** %retval, align 8
  br label %return

if.end49:                                         ; preds = %lor.lhs.false43
  br label %do.body

do.body:                                          ; preds = %if.end49
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %56 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call50 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %56)
  %conv51 = sext i32 %call50 to i64
  call void @Perl_sv_setiv(%struct.sv* %55, i64 %conv51)
  br label %do.body52

do.body52:                                        ; preds = %do.body
  br label %do.body53

do.body53:                                        ; preds = %do.body52
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %58, 4194304
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %cond.true57, label %cond.false58

cond.true57:                                      ; preds = %do.body53
  br i1 true, label %if.then59, label %if.end61

cond.false58:                                     ; preds = %do.body53
  br i1 false, label %if.then59, label %if.end61

if.then59:                                        ; preds = %cond.false58, %cond.true57
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %call60 = call i32 @Perl_mg_set(%struct.sv* %59)
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %cond.false58, %cond.true57
  br label %do.end

do.end:                                           ; preds = %if.end61
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr62 = getelementptr inbounds %struct.sv*, %struct.sv** %61, i32 1
  store %struct.sv** %incdec.ptr62, %struct.sv*** %sp, align 8
  store %struct.sv* %60, %struct.sv** %incdec.ptr62, align 8
  br label %do.end63

do.end63:                                         ; preds = %do.end
  br label %do.end64

do.end64:                                         ; preds = %do.end63
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %62, %struct.sv*** @PL_stack_sp, align 8
  %63 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next65 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 0
  %64 = load %struct.op*, %struct.op** %op_next65, align 8
  store %struct.op* %64, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end64, %if.then46, %if.then37, %cond.end30, %if.then
  %65 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %65
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #4

declare dso_local i32 @Perl_PerlIO_fileno(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_umask() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp sge i32 %and, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %tobool = icmp ne %struct.sv* %4, null
  br i1 %tobool, label %land.lhs.true3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %tobool2 = icmp ne %struct.sv* %6, null
  br i1 %tobool2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr4, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** @PL_Sv, align 8
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and5 = and i32 %10, 2097408
  %cmp6 = icmp eq i32 %and5, 256
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true3
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %13, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %14 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true3
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %15, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %14, %cond.true ], [ %call, %cond.false ]
  %and8 = and i64 %cond, 448
  %tobool9 = icmp ne i64 %and8, 0
  br i1 %tobool9, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %call10 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.20, i64 0, i64 0))
  store %struct.op* %call10, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end, %lor.lhs.false, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body11

do.body11:                                        ; preds = %do.body
  %16 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp12 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp12, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %do.body11
  br i1 true, label %if.then16, label %if.end18

cond.false15:                                     ; preds = %do.body11
  br i1 false, label %if.then16, label %if.end18

if.then16:                                        ; preds = %cond.false15, %cond.true14
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call17 = call %struct.sv** @Perl_stack_grow(%struct.sv** %18, %struct.sv** %19, i64 1)
  store %struct.sv** %call17, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %cond.false15, %cond.true14
  br label %do.end

do.end:                                           ; preds = %if.end18
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr19 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i32 1
  store %struct.sv** %incdec.ptr19, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr19, align 8
  br label %do.end20

do.end20:                                         ; preds = %do.end
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %22, %struct.sv*** @PL_stack_sp, align 8
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 0
  %24 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %24, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end20, %if.then
  %25 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %25
}

declare dso_local i64 @Perl_sv_2iv_flags(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_binmode() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %discp = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %len = alloca i64, align 8
  %d = alloca i8*, align 8
  %mode = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store %struct.sv* null, %struct.sv** %discp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp slt i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %4, %struct.sv*** @PL_stack_sp, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 0
  %6 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %6, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private2 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private2, align 1
  %conv3 = zext i8 %8 to i32
  %and4 = and i32 %conv3, 15
  %cmp5 = icmp sgt i32 %and4, 1
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr8, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %discp, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr10 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr10, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %13 = bitcast %struct.sv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %15, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end9
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %17 = bitcast %struct.gv* %16 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and11 = and i32 %18, 255
  %cmp12 = icmp eq i32 %and11, 9
  br i1 %cmp12, label %land.lhs.true18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %20 = bitcast %struct.gv* %19 to %struct.sv*
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %21, 255
  %cmp16 = icmp eq i32 %and15, 10
  br i1 %cmp16, label %land.lhs.true18, label %cond.false

land.lhs.true18:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %tobool19 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true18
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.4* %sv_u20 to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 1
  %26 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true18, %lor.lhs.false, %if.end9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %26, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %27 = load %struct.io*, %struct.io** %io, align 8
  %tobool23 = icmp ne %struct.io* %27, null
  br i1 %tobool23, label %if.then24, label %if.end44

if.then24:                                        ; preds = %cond.end
  %28 = load %struct.io*, %struct.io** %io, align 8
  %29 = bitcast %struct.io* %28 to %struct.sv*
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %30, 8388608
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %if.then24
  %31 = load %struct.io*, %struct.io** %io, align 8
  %32 = bitcast %struct.io* %31 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %32, i32 113)
  br label %cond.end30

cond.false29:                                     ; preds = %if.then24
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi %struct.magic* [ %call, %cond.true28 ], [ null, %cond.false29 ]
  store %struct.magic* %cond31, %struct.magic** %mg, align 8
  %33 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool32 = icmp ne %struct.magic* %33, null
  br i1 %tobool32, label %if.then33, label %if.end43

if.then33:                                        ; preds = %cond.end30
  %34 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 28), align 16
  %tobool34 = icmp ne %struct.sv* %34, null
  br i1 %tobool34, label %cond.true35, label %cond.false36

cond.true35:                                      ; preds = %if.then33
  %35 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 28), align 16
  br label %cond.end38

cond.false36:                                     ; preds = %if.then33
  %call37 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0), i32 0)
  store %struct.sv* %call37, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 28), align 16
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false36, %cond.true35
  %cond39 = phi %struct.sv* [ %35, %cond.true35 ], [ %call37, %cond.false36 ]
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.io*, %struct.io** %io, align 8
  %38 = bitcast %struct.io* %37 to i8*
  %39 = bitcast i8* %38 to %struct.sv*
  %40 = load %struct.magic*, %struct.magic** %mg, align 8
  %41 = load %struct.sv*, %struct.sv** %discp, align 8
  %tobool40 = icmp ne %struct.sv* %41, null
  %42 = zext i1 %tobool40 to i64
  %cond41 = select i1 %tobool40, i32 1, i32 0
  %43 = load %struct.sv*, %struct.sv** %discp, align 8
  %call42 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond39, %struct.sv** %36, %struct.sv* %39, %struct.magic* %40, i32 6, i32 %cond41, %struct.sv* %43)
  store %struct.op* %call42, %struct.op** %retval, align 8
  br label %return

if.end43:                                         ; preds = %cond.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %cond.end
  %44 = load %struct.io*, %struct.io** %io, align 8
  %tobool45 = icmp ne %struct.io* %44, null
  br i1 %tobool45, label %lor.lhs.false46, label %if.then49

lor.lhs.false46:                                  ; preds = %if.end44
  %45 = load %struct.io*, %struct.io** %io, align 8
  %sv_u47 = getelementptr inbounds %struct.io, %struct.io* %45, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u47 to %struct._PerlIO***
  %46 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  store %struct._PerlIO** %46, %struct._PerlIO*** %fp, align 8
  %tobool48 = icmp ne %struct._PerlIO** %46, null
  br i1 %tobool48, label %if.end53, label %if.then49

if.then49:                                        ; preds = %lor.lhs.false46, %if.end44
  %47 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %47)
  %call50 = call i32* @__errno_location() #9
  store i32 9, i32* %call50, align 4
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr51 = getelementptr inbounds %struct.sv*, %struct.sv** %48, i32 1
  store %struct.sv** %incdec.ptr51, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr51, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %49, %struct.sv*** @PL_stack_sp, align 8
  %50 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next52 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 0
  %51 = load %struct.op*, %struct.op** %op_next52, align 8
  store %struct.op* %51, %struct.op** %retval, align 8
  br label %return

if.end53:                                         ; preds = %lor.lhs.false46
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %52, %struct.sv*** @PL_stack_sp, align 8
  store i64 0, i64* %len, align 8
  store i8* null, i8** %d, align 8
  %53 = load %struct.sv*, %struct.sv** %discp, align 8
  %tobool54 = icmp ne %struct.sv* %53, null
  br i1 %tobool54, label %if.then55, label %if.end67

if.then55:                                        ; preds = %if.end53
  %54 = load %struct.sv*, %struct.sv** %discp, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %55, 2098176
  %cmp58 = icmp eq i32 %and57, 1024
  br i1 %cmp58, label %cond.true60, label %cond.false63

cond.true60:                                      ; preds = %if.then55
  %56 = load %struct.sv*, %struct.sv** %discp, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any, align 8
  %58 = bitcast i8* %57 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %58, i32 0, i32 2
  %59 = load i64, i64* %xpv_cur, align 8
  store i64 %59, i64* %len, align 8
  %60 = load %struct.sv*, %struct.sv** %discp, align 8
  %sv_u61 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u61 to i8**
  %61 = load i8*, i8** %svu_pv, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %61, i64 0
  br label %cond.end65

cond.false63:                                     ; preds = %if.then55
  %62 = load %struct.sv*, %struct.sv** %discp, align 8
  %call64 = call i8* @Perl_sv_2pv_flags(%struct.sv* %62, i64* %len, i32 34)
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false63, %cond.true60
  %cond66 = phi i8* [ %add.ptr62, %cond.true60 ], [ %call64, %cond.false63 ]
  store i8* %cond66, i8** %d, align 8
  br label %if.end67

if.end67:                                         ; preds = %cond.end65, %if.end53
  %63 = load i8*, i8** %d, align 8
  %64 = load i64, i64* %len, align 8
  %call68 = call i32 @Perl_mode_from_discipline(i8* %63, i64 %64)
  store i32 %call68, i32* %mode, align 4
  %65 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %66 = load %struct.io*, %struct.io** %io, align 8
  %sv_any69 = getelementptr inbounds %struct.io, %struct.io* %66, i32 0, i32 0
  %67 = load %struct.xpvio*, %struct.xpvio** %sv_any69, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %67, i32 0, i32 16
  %68 = load i8, i8* %xio_type, align 8
  %conv70 = sext i8 %68 to i32
  %69 = load i32, i32* %mode, align 4
  %70 = load i8*, i8** %d, align 8
  %call71 = call i32 @PerlIO_binmode(%struct._PerlIO** %65, i32 %conv70, i32 %69, i8* %70)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.then73, label %if.else

if.then73:                                        ; preds = %if.end67
  %71 = load %struct.io*, %struct.io** %io, align 8
  %sv_any74 = getelementptr inbounds %struct.io, %struct.io* %71, i32 0, i32 0
  %72 = load %struct.xpvio*, %struct.xpvio** %sv_any74, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %72, i32 0, i32 5
  %73 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  %tobool75 = icmp ne %struct._PerlIO** %73, null
  br i1 %tobool75, label %land.lhs.true76, label %if.end95

land.lhs.true76:                                  ; preds = %if.then73
  %74 = load %struct.io*, %struct.io** %io, align 8
  %sv_any77 = getelementptr inbounds %struct.io, %struct.io* %74, i32 0, i32 0
  %75 = load %struct.xpvio*, %struct.xpvio** %sv_any77, align 8
  %xio_ofp78 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %75, i32 0, i32 5
  %76 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp78, align 8
  %77 = load %struct.io*, %struct.io** %io, align 8
  %sv_u79 = getelementptr inbounds %struct.io, %struct.io* %77, i32 0, i32 3
  %svu_fp80 = bitcast %union.anon.2* %sv_u79 to %struct._PerlIO***
  %78 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp80, align 8
  %cmp81 = icmp ne %struct._PerlIO** %76, %78
  br i1 %cmp81, label %if.then83, label %if.end95

if.then83:                                        ; preds = %land.lhs.true76
  %79 = load %struct.io*, %struct.io** %io, align 8
  %sv_any84 = getelementptr inbounds %struct.io, %struct.io* %79, i32 0, i32 0
  %80 = load %struct.xpvio*, %struct.xpvio** %sv_any84, align 8
  %xio_ofp85 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %80, i32 0, i32 5
  %81 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp85, align 8
  %82 = load %struct.io*, %struct.io** %io, align 8
  %sv_any86 = getelementptr inbounds %struct.io, %struct.io* %82, i32 0, i32 0
  %83 = load %struct.xpvio*, %struct.xpvio** %sv_any86, align 8
  %xio_type87 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %83, i32 0, i32 16
  %84 = load i8, i8* %xio_type87, align 8
  %conv88 = sext i8 %84 to i32
  %85 = load i32, i32* %mode, align 4
  %86 = load i8*, i8** %d, align 8
  %call89 = call i32 @PerlIO_binmode(%struct._PerlIO** %81, i32 %conv88, i32 %85, i8* %86)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.end94, label %if.then91

if.then91:                                        ; preds = %if.then83
  %87 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %87, %struct.sv*** %sp, align 8
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr92 = getelementptr inbounds %struct.sv*, %struct.sv** %88, i32 1
  store %struct.sv** %incdec.ptr92, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr92, align 8
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %89, %struct.sv*** @PL_stack_sp, align 8
  %90 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next93 = getelementptr inbounds %struct.op, %struct.op* %90, i32 0, i32 0
  %91 = load %struct.op*, %struct.op** %op_next93, align 8
  store %struct.op* %91, %struct.op** %retval, align 8
  br label %return

if.end94:                                         ; preds = %if.then83
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %land.lhs.true76, %if.then73
  %92 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %92, %struct.sv*** %sp, align 8
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr96 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr96, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr96, align 8
  %94 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %94, %struct.sv*** @PL_stack_sp, align 8
  %95 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next97 = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 0
  %96 = load %struct.op*, %struct.op** %op_next97, align 8
  store %struct.op* %96, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end67
  %97 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %97, %struct.sv*** %sp, align 8
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr98 = getelementptr inbounds %struct.sv*, %struct.sv** %98, i32 1
  store %struct.sv** %incdec.ptr98, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr98, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %99, %struct.sv*** @PL_stack_sp, align 8
  %100 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next99 = getelementptr inbounds %struct.op, %struct.op* %100, i32 0, i32 0
  %101 = load %struct.op*, %struct.op** %op_next99, align 8
  store %struct.op* %101, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end95, %if.then91, %if.then49, %cond.end38, %if.then
  %102 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %102
}

declare dso_local void @Perl_report_evil_fh(%struct.gv*) #1

declare dso_local i32 @Perl_mode_from_discipline(i8*, i64) #1

declare dso_local i32 @PerlIO_binmode(%struct._PerlIO**, i32, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_tie() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %stash = alloca %struct.hv*, align 8
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  %markoff = alloca i32, align 4
  %methname = alloca i8*, align 8
  %how = alloca i32, align 4
  %items = alloca i32, align 4
  %varsv = alloca %struct.sv*, align 8
  %entry2 = alloca %struct.he*, align 8
  %next = alloca %struct.stackinfo*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %next154 = alloca %struct.stackinfo*, align 8
  %mark_stack_entry189 = alloca i32*, align 8
  %sp233 = alloca %struct.sv**, align 8
  %prev = alloca %struct.stackinfo*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %markoff, align 4
  store i32 80, i32* %how, align 4
  %6 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %6, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %7 = load %struct.sv*, %struct.sv** %incdec.ptr1, align 8
  store %struct.sv* %7, %struct.sv** %varsv, align 8
  %8 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 255
  switch i32 %and, label %sw.default [
    i32 12, label %sw.bb
    i32 11, label %sw.bb8
    i32 9, label %sw.bb22
    i32 10, label %sw.bb22
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0), i8** %methname, align 8
  %10 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %11, 1073741824
  %tobool = icmp ne i32 %and4, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb
  %12 = load %struct.sv*, %struct.sv** %varsv, align 8
  %13 = bitcast %struct.sv* %12 to %struct.hv*
  %14 = bitcast %struct.hv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.hv*
  %call = call %struct.he** @Perl_hv_eiter_p(%struct.hv* %15)
  %16 = load %struct.he*, %struct.he** %call, align 8
  store %struct.he* %16, %struct.he** %entry2, align 8
  %tobool5 = icmp ne %struct.he* %16, null
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %17 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %18, -1073741825
  store i32 %and7, i32* %sv_flags6, align 4
  %19 = load %struct.sv*, %struct.sv** %varsv, align 8
  %20 = bitcast %struct.sv* %19 to %struct.hv*
  %21 = load %struct.he*, %struct.he** %entry2, align 8
  call void @Perl_hv_free_ent(%struct.hv* %20, %struct.he* %21)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb
  %22 = load %struct.sv*, %struct.sv** %varsv, align 8
  %23 = bitcast %struct.sv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.hv*
  %25 = bitcast %struct.hv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.hv*
  call void @Perl_hv_eiter_set(%struct.hv* %26, %struct.he* null)
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i64 0, i64 0), i8** %methname, align 8
  %27 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %28, 1073741824
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.end21, label %if.then12

if.then12:                                        ; preds = %sw.bb8
  %29 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %30, -2147483648
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.then12
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.24, i64 0, i64 0))
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.then12
  %31 = load %struct.sv*, %struct.sv** %varsv, align 8
  %32 = bitcast %struct.sv* %31 to %struct.av*
  call void @Perl_av_clear(%struct.av* %32)
  %33 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %34, 2147483647
  store i32 %and19, i32* %sv_flags18, align 4
  %35 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags20, align 4
  %or = or i32 %36, 1073741824
  store i32 %or, i32* %sv_flags20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.end17, %sw.bb8
  br label %sw.epilog

sw.bb22:                                          ; preds = %entry, %entry
  %37 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %38, 49152
  %cmp = icmp eq i32 %and24, 32768
  br i1 %cmp, label %land.lhs.true26, label %if.end53

land.lhs.true26:                                  ; preds = %sw.bb22
  %39 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %40, 255
  %cmp29 = icmp eq i32 %and28, 9
  br i1 %cmp29, label %land.lhs.true35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true26
  %41 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %42, 255
  %cmp33 = icmp eq i32 %and32, 10
  br i1 %cmp33, label %land.lhs.true35, label %if.end53

land.lhs.true35:                                  ; preds = %lor.lhs.false, %land.lhs.true26
  %43 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %44, 16777216
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %if.end53, label %if.then39

if.then39:                                        ; preds = %land.lhs.true35
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i8** %methname, align 8
  store i32 113, i32* %how, align 4
  %45 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %46 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr40 = getelementptr inbounds %struct.gp, %struct.gp* %46, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr40, i32 0, i32 1
  %47 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool41 = icmp ne %struct.io* %47, null
  br i1 %tobool41, label %if.end48, label %if.then42

if.then42:                                        ; preds = %if.then39
  %call43 = call %struct.sv* @Perl_newSV_type(i32 15)
  %48 = bitcast %struct.sv* %call43 to i8*
  %49 = bitcast i8* %48 to %struct.io*
  %50 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_u44 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 3
  %svu_gp45 = bitcast %union.anon* %sv_u44 to %struct.gp**
  %51 = load %struct.gp*, %struct.gp** %svu_gp45, align 8
  %add.ptr46 = getelementptr inbounds %struct.gp, %struct.gp* %51, i64 0
  %gp_io47 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr46, i32 0, i32 1
  store %struct.io* %49, %struct.io** %gp_io47, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.then42, %if.then39
  %52 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_u49 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 3
  %svu_gp50 = bitcast %union.anon* %sv_u49 to %struct.gp**
  %53 = load %struct.gp*, %struct.gp** %svu_gp50, align 8
  %add.ptr51 = getelementptr inbounds %struct.gp, %struct.gp* %53, i64 0
  %gp_io52 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr51, i32 0, i32 1
  %54 = load %struct.io*, %struct.io** %gp_io52, align 8
  %55 = bitcast %struct.io* %54 to i8*
  %56 = bitcast i8* %55 to %struct.sv*
  store %struct.sv* %56, %struct.sv** %varsv, align 8
  br label %sw.epilog

if.end53:                                         ; preds = %land.lhs.true35, %lor.lhs.false, %sw.bb22
  %57 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %58, 255
  %cmp56 = icmp eq i32 %and55, 10
  br i1 %cmp56, label %land.lhs.true58, label %if.end64

land.lhs.true58:                                  ; preds = %if.end53
  %59 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any, align 8
  %61 = bitcast i8* %60 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %61, i32 0, i32 9
  %62 = load i8, i8* %xlv_type, align 8
  %conv59 = sext i8 %62 to i32
  %cmp60 = icmp eq i32 %conv59, 121
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %land.lhs.true58
  %63 = load %struct.sv*, %struct.sv** %varsv, align 8
  call void @Perl_vivify_defelem(%struct.sv* %63)
  %64 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_any63 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any63, align 8
  %66 = bitcast i8* %65 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %66, i32 0, i32 8
  %67 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  store %struct.sv* %67, %struct.sv** %varsv, align 8
  br label %if.end64

if.end64:                                         ; preds = %if.then62, %land.lhs.true58, %if.end53
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end64
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i64 0, i64 0), i8** %methname, align 8
  store i32 113, i32* %how, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end48, %if.end21, %if.end
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %69 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %69, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast66 = ptrtoint %struct.sv** %68 to i64
  %sub.ptr.rhs.cast67 = ptrtoint %struct.sv** %69 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %sub.ptr.div69 = sdiv exact i64 %sub.ptr.sub68, 8
  %conv70 = trunc i64 %sub.ptr.div69 to i32
  store i32 %conv70, i32* %items, align 4
  %70 = load %struct.sv**, %struct.sv*** %mark, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  %call71 = call i32 @Perl_sv_isobject(%struct.sv* %71)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.then73, label %if.else

if.then73:                                        ; preds = %sw.epilog
  call void @Perl_push_scope()
  br label %do.body

do.body:                                          ; preds = %if.then73
  %72 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %72, i32 0, i32 3
  %73 = load %struct.stackinfo*, %struct.stackinfo** %si_next, align 8
  store %struct.stackinfo* %73, %struct.stackinfo** %next, align 8
  %74 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %tobool74 = icmp ne %struct.stackinfo* %74, null
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %do.body
  %call76 = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call76, %struct.stackinfo** %next, align 8
  %75 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %76 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_prev = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %76, i32 0, i32 2
  store %struct.stackinfo* %75, %struct.stackinfo** %si_prev, align 8
  %77 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %78 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next77 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %78, i32 0, i32 3
  store %struct.stackinfo* %77, %struct.stackinfo** %si_next77, align 8
  br label %if.end78

if.end78:                                         ; preds = %if.then75, %do.body
  %79 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_type = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %79, i32 0, i32 6
  store i32 2, i32* %si_type, align 8
  %80 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %80, i32 0, i32 4
  store i32 -1, i32* %si_cxix, align 8
  %81 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %81, i32 0, i32 0
  %82 = load %struct.av*, %struct.av** %si_stack, align 8
  %sv_any79 = getelementptr inbounds %struct.av, %struct.av* %82, i32 0, i32 0
  %83 = load %struct.xpvav*, %struct.xpvav** %sv_any79, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %83, i32 0, i32 2
  store i64 0, i64* %xav_fill, align 8
  br label %do.body80

do.body80:                                        ; preds = %if.end78
  %84 = load %struct.sv**, %struct.sv*** %sp, align 8
  %85 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast81 = ptrtoint %struct.sv** %84 to i64
  %sub.ptr.rhs.cast82 = ptrtoint %struct.sv** %85 to i64
  %sub.ptr.sub83 = sub i64 %sub.ptr.lhs.cast81, %sub.ptr.rhs.cast82
  %sub.ptr.div84 = sdiv exact i64 %sub.ptr.sub83, 8
  %86 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any85 = getelementptr inbounds %struct.av, %struct.av* %86, i32 0, i32 0
  %87 = load %struct.xpvav*, %struct.xpvav** %sv_any85, align 8
  %xav_fill86 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %87, i32 0, i32 2
  store i64 %sub.ptr.div84, i64* %xav_fill86, align 8
  %88 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack87 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %88, i32 0, i32 0
  %89 = load %struct.av*, %struct.av** %si_stack87, align 8
  %sv_u88 = getelementptr inbounds %struct.av, %struct.av* %89, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u88 to %struct.sv***
  %90 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %90, %struct.sv*** @PL_stack_base, align 8
  %91 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %92 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack89 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %92, i32 0, i32 0
  %93 = load %struct.av*, %struct.av** %si_stack89, align 8
  %sv_any90 = getelementptr inbounds %struct.av, %struct.av* %93, i32 0, i32 0
  %94 = load %struct.xpvav*, %struct.xpvav** %sv_any90, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %94, i32 0, i32 3
  %95 = load i64, i64* %xav_max, align 8
  %add.ptr91 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i64 %95
  store %struct.sv** %add.ptr91, %struct.sv*** @PL_stack_max, align 8
  %96 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %97 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack92 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %97, i32 0, i32 0
  %98 = load %struct.av*, %struct.av** %si_stack92, align 8
  %sv_any93 = getelementptr inbounds %struct.av, %struct.av* %98, i32 0, i32 0
  %99 = load %struct.xpvav*, %struct.xpvav** %sv_any93, align 8
  %xav_fill94 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %99, i32 0, i32 2
  %100 = load i64, i64* %xav_fill94, align 8
  %add.ptr95 = getelementptr inbounds %struct.sv*, %struct.sv** %96, i64 %100
  store %struct.sv** %add.ptr95, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr95, %struct.sv*** %sp, align 8
  %101 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  %si_stack96 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %101, i32 0, i32 0
  %102 = load %struct.av*, %struct.av** %si_stack96, align 8
  store %struct.av* %102, %struct.av** @PL_curstack, align 8
  br label %do.end

do.end:                                           ; preds = %do.body80
  %103 = load %struct.stackinfo*, %struct.stackinfo** %next, align 8
  store %struct.stackinfo* %103, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end97

do.end97:                                         ; preds = %do.end
  br label %do.body98

do.body98:                                        ; preds = %do.end97
  %104 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr99 = getelementptr inbounds i32, i32* %104, i32 1
  store i32* %incdec.ptr99, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr99, i32** %mark_stack_entry, align 8
  %105 = load i32*, i32** @PL_markstack_max, align 8
  %cmp100 = icmp eq i32* %incdec.ptr99, %105
  br i1 %cmp100, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body98
  br i1 true, label %if.then102, label %if.end104

cond.false:                                       ; preds = %do.body98
  br i1 false, label %if.then102, label %if.end104

if.then102:                                       ; preds = %cond.false, %cond.true
  %call103 = call i32* @Perl_markstack_grow()
  store i32* %call103, i32** %mark_stack_entry, align 8
  br label %if.end104

if.end104:                                        ; preds = %if.then102, %cond.false, %cond.true
  %106 = load %struct.sv**, %struct.sv*** %sp, align 8
  %107 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast105 = ptrtoint %struct.sv** %106 to i64
  %sub.ptr.rhs.cast106 = ptrtoint %struct.sv** %107 to i64
  %sub.ptr.sub107 = sub i64 %sub.ptr.lhs.cast105, %sub.ptr.rhs.cast106
  %sub.ptr.div108 = sdiv exact i64 %sub.ptr.sub107, 8
  %conv109 = trunc i64 %sub.ptr.div108 to i32
  %108 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv109, i32* %108, align 4
  br label %do.end110

do.end110:                                        ; preds = %if.end104
  br label %do.body111

do.body111:                                       ; preds = %do.end110
  %109 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast112 = ptrtoint %struct.sv** %109 to i64
  %sub.ptr.rhs.cast113 = ptrtoint %struct.sv** %110 to i64
  %sub.ptr.sub114 = sub i64 %sub.ptr.lhs.cast112, %sub.ptr.rhs.cast113
  %sub.ptr.div115 = sdiv exact i64 %sub.ptr.sub114, 8
  %111 = load i32, i32* %items, align 4
  %conv116 = sext i32 %111 to i64
  %cmp117 = icmp slt i64 %sub.ptr.div115, %conv116
  br i1 %cmp117, label %cond.true119, label %cond.false120

cond.true119:                                     ; preds = %do.body111
  br i1 true, label %if.then121, label %if.end124

cond.false120:                                    ; preds = %do.body111
  br i1 false, label %if.then121, label %if.end124

if.then121:                                       ; preds = %cond.false120, %cond.true119
  %112 = load %struct.sv**, %struct.sv*** %sp, align 8
  %113 = load %struct.sv**, %struct.sv*** %sp, align 8
  %114 = load i32, i32* %items, align 4
  %conv122 = sext i32 %114 to i64
  %call123 = call %struct.sv** @Perl_stack_grow(%struct.sv** %112, %struct.sv** %113, i64 %conv122)
  store %struct.sv** %call123, %struct.sv*** %sp, align 8
  %115 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end124

if.end124:                                        ; preds = %if.then121, %cond.false120, %cond.true119
  br label %do.end125

do.end125:                                        ; preds = %if.end124
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end125
  %116 = load i32, i32* %items, align 4
  %dec = add i32 %116, -1
  store i32 %dec, i32* %items, align 4
  %tobool126 = icmp ne i32 %116, 0
  br i1 %tobool126, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %117 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr127 = getelementptr inbounds %struct.sv*, %struct.sv** %117, i32 1
  store %struct.sv** %incdec.ptr127, %struct.sv*** %mark, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr128 = getelementptr inbounds %struct.sv*, %struct.sv** %119, i32 1
  store %struct.sv** %incdec.ptr128, %struct.sv*** %sp, align 8
  store %struct.sv* %118, %struct.sv** %incdec.ptr128, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %120 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %120, %struct.sv*** @PL_stack_sp, align 8
  %121 = load i8*, i8** %methname, align 8
  %call129 = call i32 @Perl_call_method(i8* %121, i32 2)
  br label %if.end231

if.else:                                          ; preds = %sw.epilog
  %122 = load %struct.sv**, %struct.sv*** %mark, align 8
  %123 = load %struct.sv*, %struct.sv** %122, align 8
  %call130 = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %123, i32 0)
  store %struct.hv* %call130, %struct.hv** %stash, align 8
  %124 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool131 = icmp ne %struct.hv* %124, null
  br i1 %tobool131, label %lor.lhs.false132, label %if.then135

lor.lhs.false132:                                 ; preds = %if.else
  %125 = load %struct.hv*, %struct.hv** %stash, align 8
  %126 = load i8*, i8** %methname, align 8
  %call133 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %125, i8* %126, i32 1)
  store %struct.gv* %call133, %struct.gv** %gv, align 8
  %tobool134 = icmp ne %struct.gv* %call133, null
  br i1 %tobool134, label %if.end152, label %if.then135

if.then135:                                       ; preds = %lor.lhs.false132, %if.else
  %127 = load i8*, i8** %methname, align 8
  %128 = load %struct.sv**, %struct.sv*** %mark, align 8
  %129 = load %struct.sv*, %struct.sv** %128, align 8
  %sv_flags136 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 2
  %130 = load i32, i32* %sv_flags136, align 4
  %and137 = and i32 %130, 65280
  %tobool138 = icmp ne i32 %and137, 0
  br i1 %tobool138, label %cond.true149, label %lor.lhs.false139

lor.lhs.false139:                                 ; preds = %if.then135
  %131 = load %struct.sv**, %struct.sv*** %mark, align 8
  %132 = load %struct.sv*, %struct.sv** %131, align 8
  %sv_flags140 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags140, align 4
  %and141 = and i32 %133, 255
  %cmp142 = icmp eq i32 %and141, 8
  br i1 %cmp142, label %cond.true149, label %lor.lhs.false144

lor.lhs.false144:                                 ; preds = %lor.lhs.false139
  %134 = load %struct.sv**, %struct.sv*** %mark, align 8
  %135 = load %struct.sv*, %struct.sv** %134, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %136, 16826623
  %cmp147 = icmp eq i32 %and146, 16777226
  br i1 %cmp147, label %cond.true149, label %cond.false150

cond.true149:                                     ; preds = %lor.lhs.false144, %lor.lhs.false139, %if.then135
  %137 = load %struct.sv**, %struct.sv*** %mark, align 8
  %138 = load %struct.sv*, %struct.sv** %137, align 8
  br label %cond.end

cond.false150:                                    ; preds = %lor.lhs.false144
  br label %cond.end

cond.end:                                         ; preds = %cond.false150, %cond.true149
  %cond = phi %struct.sv* [ %138, %cond.true149 ], [ @PL_sv_no, %cond.false150 ]
  %139 = bitcast %struct.sv* %cond to i8*
  %call151 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.27, i64 0, i64 0), i8* %127, i8* %139)
  store %struct.op* %call151, %struct.op** %retval, align 8
  br label %return

if.end152:                                        ; preds = %lor.lhs.false132
  call void @Perl_push_scope()
  br label %do.body153

do.body153:                                       ; preds = %if.end152
  %140 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next155 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %140, i32 0, i32 3
  %141 = load %struct.stackinfo*, %struct.stackinfo** %si_next155, align 8
  store %struct.stackinfo* %141, %struct.stackinfo** %next154, align 8
  %142 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %tobool156 = icmp ne %struct.stackinfo* %142, null
  br i1 %tobool156, label %if.end161, label %if.then157

if.then157:                                       ; preds = %do.body153
  %call158 = call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 22)
  store %struct.stackinfo* %call158, %struct.stackinfo** %next154, align 8
  %143 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %144 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_prev159 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %144, i32 0, i32 2
  store %struct.stackinfo* %143, %struct.stackinfo** %si_prev159, align 8
  %145 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %146 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_next160 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %146, i32 0, i32 3
  store %struct.stackinfo* %145, %struct.stackinfo** %si_next160, align 8
  br label %if.end161

if.end161:                                        ; preds = %if.then157, %do.body153
  %147 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_type162 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %147, i32 0, i32 6
  store i32 2, i32* %si_type162, align 8
  %148 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_cxix163 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %148, i32 0, i32 4
  store i32 -1, i32* %si_cxix163, align 8
  %149 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_stack164 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %149, i32 0, i32 0
  %150 = load %struct.av*, %struct.av** %si_stack164, align 8
  %sv_any165 = getelementptr inbounds %struct.av, %struct.av* %150, i32 0, i32 0
  %151 = load %struct.xpvav*, %struct.xpvav** %sv_any165, align 8
  %xav_fill166 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %151, i32 0, i32 2
  store i64 0, i64* %xav_fill166, align 8
  br label %do.body167

do.body167:                                       ; preds = %if.end161
  %152 = load %struct.sv**, %struct.sv*** %sp, align 8
  %153 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast168 = ptrtoint %struct.sv** %152 to i64
  %sub.ptr.rhs.cast169 = ptrtoint %struct.sv** %153 to i64
  %sub.ptr.sub170 = sub i64 %sub.ptr.lhs.cast168, %sub.ptr.rhs.cast169
  %sub.ptr.div171 = sdiv exact i64 %sub.ptr.sub170, 8
  %154 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any172 = getelementptr inbounds %struct.av, %struct.av* %154, i32 0, i32 0
  %155 = load %struct.xpvav*, %struct.xpvav** %sv_any172, align 8
  %xav_fill173 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %155, i32 0, i32 2
  store i64 %sub.ptr.div171, i64* %xav_fill173, align 8
  %156 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_stack174 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %156, i32 0, i32 0
  %157 = load %struct.av*, %struct.av** %si_stack174, align 8
  %sv_u175 = getelementptr inbounds %struct.av, %struct.av* %157, i32 0, i32 3
  %svu_array176 = bitcast %union.anon.0* %sv_u175 to %struct.sv***
  %158 = load %struct.sv**, %struct.sv*** %svu_array176, align 8
  store %struct.sv** %158, %struct.sv*** @PL_stack_base, align 8
  %159 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %160 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_stack177 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %160, i32 0, i32 0
  %161 = load %struct.av*, %struct.av** %si_stack177, align 8
  %sv_any178 = getelementptr inbounds %struct.av, %struct.av* %161, i32 0, i32 0
  %162 = load %struct.xpvav*, %struct.xpvav** %sv_any178, align 8
  %xav_max179 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %162, i32 0, i32 3
  %163 = load i64, i64* %xav_max179, align 8
  %add.ptr180 = getelementptr inbounds %struct.sv*, %struct.sv** %159, i64 %163
  store %struct.sv** %add.ptr180, %struct.sv*** @PL_stack_max, align 8
  %164 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %165 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_stack181 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %165, i32 0, i32 0
  %166 = load %struct.av*, %struct.av** %si_stack181, align 8
  %sv_any182 = getelementptr inbounds %struct.av, %struct.av* %166, i32 0, i32 0
  %167 = load %struct.xpvav*, %struct.xpvav** %sv_any182, align 8
  %xav_fill183 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %167, i32 0, i32 2
  %168 = load i64, i64* %xav_fill183, align 8
  %add.ptr184 = getelementptr inbounds %struct.sv*, %struct.sv** %164, i64 %168
  store %struct.sv** %add.ptr184, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr184, %struct.sv*** %sp, align 8
  %169 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  %si_stack185 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %169, i32 0, i32 0
  %170 = load %struct.av*, %struct.av** %si_stack185, align 8
  store %struct.av* %170, %struct.av** @PL_curstack, align 8
  br label %do.end186

do.end186:                                        ; preds = %do.body167
  %171 = load %struct.stackinfo*, %struct.stackinfo** %next154, align 8
  store %struct.stackinfo* %171, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end187

do.end187:                                        ; preds = %do.end186
  br label %do.body188

do.body188:                                       ; preds = %do.end187
  %172 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr190 = getelementptr inbounds i32, i32* %172, i32 1
  store i32* %incdec.ptr190, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr190, i32** %mark_stack_entry189, align 8
  %173 = load i32*, i32** @PL_markstack_max, align 8
  %cmp191 = icmp eq i32* %incdec.ptr190, %173
  br i1 %cmp191, label %cond.true193, label %cond.false194

cond.true193:                                     ; preds = %do.body188
  br i1 true, label %if.then195, label %if.end197

cond.false194:                                    ; preds = %do.body188
  br i1 false, label %if.then195, label %if.end197

if.then195:                                       ; preds = %cond.false194, %cond.true193
  %call196 = call i32* @Perl_markstack_grow()
  store i32* %call196, i32** %mark_stack_entry189, align 8
  br label %if.end197

if.end197:                                        ; preds = %if.then195, %cond.false194, %cond.true193
  %174 = load %struct.sv**, %struct.sv*** %sp, align 8
  %175 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast198 = ptrtoint %struct.sv** %174 to i64
  %sub.ptr.rhs.cast199 = ptrtoint %struct.sv** %175 to i64
  %sub.ptr.sub200 = sub i64 %sub.ptr.lhs.cast198, %sub.ptr.rhs.cast199
  %sub.ptr.div201 = sdiv exact i64 %sub.ptr.sub200, 8
  %conv202 = trunc i64 %sub.ptr.div201 to i32
  %176 = load i32*, i32** %mark_stack_entry189, align 8
  store i32 %conv202, i32* %176, align 4
  br label %do.end203

do.end203:                                        ; preds = %if.end197
  br label %do.body204

do.body204:                                       ; preds = %do.end203
  %177 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %178 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast205 = ptrtoint %struct.sv** %177 to i64
  %sub.ptr.rhs.cast206 = ptrtoint %struct.sv** %178 to i64
  %sub.ptr.sub207 = sub i64 %sub.ptr.lhs.cast205, %sub.ptr.rhs.cast206
  %sub.ptr.div208 = sdiv exact i64 %sub.ptr.sub207, 8
  %179 = load i32, i32* %items, align 4
  %conv209 = sext i32 %179 to i64
  %cmp210 = icmp slt i64 %sub.ptr.div208, %conv209
  br i1 %cmp210, label %cond.true212, label %cond.false213

cond.true212:                                     ; preds = %do.body204
  br i1 true, label %if.then214, label %if.end217

cond.false213:                                    ; preds = %do.body204
  br i1 false, label %if.then214, label %if.end217

if.then214:                                       ; preds = %cond.false213, %cond.true212
  %180 = load %struct.sv**, %struct.sv*** %sp, align 8
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %182 = load i32, i32* %items, align 4
  %conv215 = sext i32 %182 to i64
  %call216 = call %struct.sv** @Perl_stack_grow(%struct.sv** %180, %struct.sv** %181, i64 %conv215)
  store %struct.sv** %call216, %struct.sv*** %sp, align 8
  %183 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end217

if.end217:                                        ; preds = %if.then214, %cond.false213, %cond.true212
  br label %do.end218

do.end218:                                        ; preds = %if.end217
  br label %while.cond219

while.cond219:                                    ; preds = %while.body222, %do.end218
  %184 = load i32, i32* %items, align 4
  %dec220 = add i32 %184, -1
  store i32 %dec220, i32* %items, align 4
  %tobool221 = icmp ne i32 %184, 0
  br i1 %tobool221, label %while.body222, label %while.end225

while.body222:                                    ; preds = %while.cond219
  %185 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr223 = getelementptr inbounds %struct.sv*, %struct.sv** %185, i32 1
  store %struct.sv** %incdec.ptr223, %struct.sv*** %mark, align 8
  %186 = load %struct.sv*, %struct.sv** %185, align 8
  %187 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr224 = getelementptr inbounds %struct.sv*, %struct.sv** %187, i32 1
  store %struct.sv** %incdec.ptr224, %struct.sv*** %sp, align 8
  store %struct.sv* %186, %struct.sv** %incdec.ptr224, align 8
  br label %while.cond219

while.end225:                                     ; preds = %while.cond219
  %188 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %188, %struct.sv*** @PL_stack_sp, align 8
  %189 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u226 = getelementptr inbounds %struct.gv, %struct.gv* %189, i32 0, i32 3
  %svu_gp227 = bitcast %union.anon.4* %sv_u226 to %struct.gp**
  %190 = load %struct.gp*, %struct.gp** %svu_gp227, align 8
  %add.ptr228 = getelementptr inbounds %struct.gp, %struct.gp* %190, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr228, i32 0, i32 2
  %191 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr229 = getelementptr inbounds %struct.cv, %struct.cv* %191, i64 0
  %192 = bitcast %struct.cv* %add.ptr229 to i8*
  %193 = bitcast i8* %192 to %struct.sv*
  %call230 = call i32 @Perl_call_sv(%struct.sv* %193, i32 2)
  br label %if.end231

if.end231:                                        ; preds = %while.end225, %while.end
  %194 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %194, %struct.sv*** %sp, align 8
  %195 = load %struct.sv**, %struct.sv*** %sp, align 8
  %196 = load %struct.sv*, %struct.sv** %195, align 8
  store %struct.sv* %196, %struct.sv** %sv, align 8
  br label %do.body232

do.body232:                                       ; preds = %if.end231
  %197 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %197, %struct.sv*** %sp233, align 8
  %198 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_prev234 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %198, i32 0, i32 2
  %199 = load %struct.stackinfo*, %struct.stackinfo** %si_prev234, align 8
  store %struct.stackinfo* %199, %struct.stackinfo** %prev, align 8
  %200 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %tobool235 = icmp ne %struct.stackinfo* %200, null
  br i1 %tobool235, label %if.end237, label %if.then236

if.then236:                                       ; preds = %do.body232
  call void @Perl_croak_popstack()
  br label %if.end237

if.end237:                                        ; preds = %if.then236, %do.body232
  br label %do.body238

do.body238:                                       ; preds = %if.end237
  %201 = load %struct.sv**, %struct.sv*** %sp233, align 8
  %202 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast239 = ptrtoint %struct.sv** %201 to i64
  %sub.ptr.rhs.cast240 = ptrtoint %struct.sv** %202 to i64
  %sub.ptr.sub241 = sub i64 %sub.ptr.lhs.cast239, %sub.ptr.rhs.cast240
  %sub.ptr.div242 = sdiv exact i64 %sub.ptr.sub241, 8
  %203 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any243 = getelementptr inbounds %struct.av, %struct.av* %203, i32 0, i32 0
  %204 = load %struct.xpvav*, %struct.xpvav** %sv_any243, align 8
  %xav_fill244 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %204, i32 0, i32 2
  store i64 %sub.ptr.div242, i64* %xav_fill244, align 8
  %205 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack245 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %205, i32 0, i32 0
  %206 = load %struct.av*, %struct.av** %si_stack245, align 8
  %sv_u246 = getelementptr inbounds %struct.av, %struct.av* %206, i32 0, i32 3
  %svu_array247 = bitcast %union.anon.0* %sv_u246 to %struct.sv***
  %207 = load %struct.sv**, %struct.sv*** %svu_array247, align 8
  store %struct.sv** %207, %struct.sv*** @PL_stack_base, align 8
  %208 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %209 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack248 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %209, i32 0, i32 0
  %210 = load %struct.av*, %struct.av** %si_stack248, align 8
  %sv_any249 = getelementptr inbounds %struct.av, %struct.av* %210, i32 0, i32 0
  %211 = load %struct.xpvav*, %struct.xpvav** %sv_any249, align 8
  %xav_max250 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %211, i32 0, i32 3
  %212 = load i64, i64* %xav_max250, align 8
  %add.ptr251 = getelementptr inbounds %struct.sv*, %struct.sv** %208, i64 %212
  store %struct.sv** %add.ptr251, %struct.sv*** @PL_stack_max, align 8
  %213 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %214 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack252 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %214, i32 0, i32 0
  %215 = load %struct.av*, %struct.av** %si_stack252, align 8
  %sv_any253 = getelementptr inbounds %struct.av, %struct.av* %215, i32 0, i32 0
  %216 = load %struct.xpvav*, %struct.xpvav** %sv_any253, align 8
  %xav_fill254 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %216, i32 0, i32 2
  %217 = load i64, i64* %xav_fill254, align 8
  %add.ptr255 = getelementptr inbounds %struct.sv*, %struct.sv** %213, i64 %217
  store %struct.sv** %add.ptr255, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr255, %struct.sv*** %sp233, align 8
  %218 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  %si_stack256 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %218, i32 0, i32 0
  %219 = load %struct.av*, %struct.av** %si_stack256, align 8
  store %struct.av* %219, %struct.av** @PL_curstack, align 8
  br label %do.end257

do.end257:                                        ; preds = %do.body238
  %220 = load %struct.stackinfo*, %struct.stackinfo** %prev, align 8
  store %struct.stackinfo* %220, %struct.stackinfo** @PL_curstackinfo, align 8
  br label %do.end258

do.end258:                                        ; preds = %do.end257
  %221 = load %struct.sv*, %struct.sv** %sv, align 8
  %call259 = call i32 @Perl_sv_isobject(%struct.sv* %221)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.then261, label %if.end286

if.then261:                                       ; preds = %do.end258
  %222 = load %struct.sv*, %struct.sv** %varsv, align 8
  %223 = load i32, i32* %how, align 4
  %call262 = call i32 @Perl_sv_unmagic(%struct.sv* %222, i32 %223)
  %224 = load %struct.sv*, %struct.sv** %varsv, align 8
  %225 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u263 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u263 to %struct.sv**
  %226 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %cmp264 = icmp eq %struct.sv* %224, %226
  br i1 %cmp264, label %land.lhs.true266, label %if.end277

land.lhs.true266:                                 ; preds = %if.then261
  %227 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 2
  %228 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %228, 255
  %cmp269 = icmp eq i32 %and268, 11
  br i1 %cmp269, label %if.then276, label %lor.lhs.false271

lor.lhs.false271:                                 ; preds = %land.lhs.true266
  %229 = load %struct.sv*, %struct.sv** %varsv, align 8
  %sv_flags272 = getelementptr inbounds %struct.sv, %struct.sv* %229, i32 0, i32 2
  %230 = load i32, i32* %sv_flags272, align 4
  %and273 = and i32 %230, 255
  %cmp274 = icmp eq i32 %and273, 12
  br i1 %cmp274, label %if.then276, label %if.end277

if.then276:                                       ; preds = %lor.lhs.false271, %land.lhs.true266
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.28, i64 0, i64 0))
  br label %if.end277

if.end277:                                        ; preds = %if.then276, %lor.lhs.false271, %if.then261
  %231 = load %struct.sv*, %struct.sv** %varsv, align 8
  %232 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u278 = getelementptr inbounds %struct.sv, %struct.sv* %232, i32 0, i32 3
  %svu_rv279 = bitcast %union.anon* %sv_u278 to %struct.sv**
  %233 = load %struct.sv*, %struct.sv** %svu_rv279, align 8
  %234 = load %struct.sv*, %struct.sv** %varsv, align 8
  %cmp280 = icmp eq %struct.sv* %233, %234
  br i1 %cmp280, label %cond.true282, label %cond.false283

cond.true282:                                     ; preds = %if.end277
  br label %cond.end284

cond.false283:                                    ; preds = %if.end277
  %235 = load %struct.sv*, %struct.sv** %sv, align 8
  br label %cond.end284

cond.end284:                                      ; preds = %cond.false283, %cond.true282
  %cond285 = phi %struct.sv* [ null, %cond.true282 ], [ %235, %cond.false283 ]
  %236 = load i32, i32* %how, align 4
  call void @Perl_sv_magic(%struct.sv* %231, %struct.sv* %cond285, i32 %236, i8* null, i32 0)
  br label %if.end286

if.end286:                                        ; preds = %cond.end284, %do.end258
  call void @Perl_pop_scope()
  %237 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %238 = load i32, i32* %markoff, align 4
  %idx.ext287 = sext i32 %238 to i64
  %add.ptr288 = getelementptr inbounds %struct.sv*, %struct.sv** %237, i64 %idx.ext287
  store %struct.sv** %add.ptr288, %struct.sv*** %sp, align 8
  %239 = load %struct.sv*, %struct.sv** %sv, align 8
  %240 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr289 = getelementptr inbounds %struct.sv*, %struct.sv** %240, i32 1
  store %struct.sv** %incdec.ptr289, %struct.sv*** %sp, align 8
  store %struct.sv* %239, %struct.sv** %incdec.ptr289, align 8
  %241 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %241, %struct.sv*** @PL_stack_sp, align 8
  %242 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %242, i32 0, i32 0
  %243 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %243, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end286, %cond.end
  %244 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %244
}

declare dso_local %struct.he** @Perl_hv_eiter_p(%struct.hv*) #1

declare dso_local void @Perl_hv_free_ent(%struct.hv*, %struct.he*) #1

declare dso_local void @Perl_hv_eiter_set(%struct.hv*, %struct.he*) #1

declare dso_local void @Perl_croak(i8*, ...) #1

declare dso_local void @Perl_av_clear(%struct.av*) #1

declare dso_local %struct.sv* @Perl_newSV_type(i32) #1

declare dso_local void @Perl_vivify_defelem(%struct.sv*) #1

declare dso_local i32 @Perl_call_method(i8*, i32) #1

declare dso_local %struct.hv* @Perl_gv_stashsv(%struct.sv*, i32) #1

declare dso_local i32 @Perl_sv_unmagic(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_untie() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mg = alloca %struct.magic*, align 8
  %sv = alloca %struct.sv*, align 8
  %how = alloca i8, align 1
  %obj = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %cv = alloca %struct.cv*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %6, 255
  %cmp3 = icmp eq i32 %and2, 11
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %7 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %8 = zext i1 %7 to i64
  %cond = select i1 %7, i32 80, i32 113
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %how, align 1
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %10, 49152
  %cmp6 = icmp eq i32 %and5, 32768
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.end
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %12, 255
  %cmp10 = icmp eq i32 %and9, 9
  br i1 %cmp10, label %land.lhs.true16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %14, 255
  %cmp14 = icmp eq i32 %and13, 10
  br i1 %cmp14, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 16777216
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %18 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %18, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 1
  %19 = load %struct.io*, %struct.io** %gp_io, align 8
  %20 = bitcast %struct.io* %19 to i8*
  %21 = bitcast i8* %20 to %struct.sv*
  store %struct.sv* %21, %struct.sv** %sv, align 8
  %tobool20 = icmp ne %struct.sv* %21, null
  br i1 %tobool20, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true19
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr21 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i32 1
  store %struct.sv** %incdec.ptr21, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr21, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %23, %struct.sv*** @PL_stack_sp, align 8
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 0
  %25 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %25, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true16, %lor.lhs.false, %lor.end
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %27, 255
  %cmp24 = icmp eq i32 %and23, 10
  br i1 %cmp24, label %land.lhs.true26, label %if.end35

land.lhs.true26:                                  ; preds = %if.end
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any, align 8
  %30 = bitcast i8* %29 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %30, i32 0, i32 9
  %31 = load i8, i8* %xlv_type, align 8
  %conv27 = sext i8 %31 to i32
  %cmp28 = icmp eq i32 %conv27, 121
  br i1 %cmp28, label %land.lhs.true30, label %if.end35

land.lhs.true30:                                  ; preds = %land.lhs.true26
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.sv* @Perl_defelem_target(%struct.sv* %32, %struct.magic* null)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %tobool31 = icmp ne %struct.sv* %call, null
  br i1 %tobool31, label %if.end35, label %if.then32

if.then32:                                        ; preds = %land.lhs.true30
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr33 = getelementptr inbounds %struct.sv*, %struct.sv** %33, i32 1
  store %struct.sv** %incdec.ptr33, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next34 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next34, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

if.end35:                                         ; preds = %land.lhs.true30, %land.lhs.true26, %if.end
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %38, 8388608
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end35
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %40 = load i8, i8* %how, align 1
  %conv39 = sext i8 %40 to i32
  %call40 = call %struct.magic* @Perl_mg_find(%struct.sv* %39, i32 %conv39)
  br label %cond.end

cond.false:                                       ; preds = %if.end35
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond41 = phi %struct.magic* [ %call40, %cond.true ], [ null, %cond.false ]
  store %struct.magic* %cond41, %struct.magic** %mg, align 8
  %tobool42 = icmp ne %struct.magic* %cond41, null
  br i1 %tobool42, label %if.then43, label %if.end120

if.then43:                                        ; preds = %cond.end
  %41 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %41, i32 0, i32 6
  %42 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool44 = icmp ne %struct.sv* %42, null
  br i1 %tobool44, label %cond.true45, label %cond.false47

cond.true45:                                      ; preds = %if.then43
  %43 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj46 = getelementptr inbounds %struct.magic, %struct.magic* %43, i32 0, i32 6
  %44 = load %struct.sv*, %struct.sv** %mg_obj46, align 8
  br label %cond.end50

cond.false47:                                     ; preds = %if.then43
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  %call48 = call %struct.sv* @Perl_newRV(%struct.sv* %45)
  %call49 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call48)
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false47, %cond.true45
  %cond51 = phi %struct.sv* [ %44, %cond.true45 ], [ %call49, %cond.false47 ]
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %cond51, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u52 to %struct.sv**
  %46 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %46, %struct.sv** %obj, align 8
  %47 = load %struct.sv*, %struct.sv** %obj, align 8
  %tobool53 = icmp ne %struct.sv* %47, null
  br i1 %tobool53, label %if.then54, label %if.end119

if.then54:                                        ; preds = %cond.end50
  %48 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any55, align 8
  %50 = bitcast i8* %49 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %50, i32 0, i32 0
  %51 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %call56 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %51, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i64 0, i64 0), i32 0)
  store %struct.gv* %call56, %struct.gv** %gv, align 8
  %52 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool57 = icmp ne %struct.gv* %52, null
  br i1 %tobool57, label %land.lhs.true58, label %if.else

land.lhs.true58:                                  ; preds = %if.then54
  %53 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags59 = getelementptr inbounds %struct.gv, %struct.gv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %54, 255
  %cmp61 = icmp eq i32 %and60, 9
  br i1 %cmp61, label %land.lhs.true63, label %if.else

land.lhs.true63:                                  ; preds = %land.lhs.true58
  %55 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u64 = getelementptr inbounds %struct.gv, %struct.gv* %55, i32 0, i32 3
  %svu_gp65 = bitcast %union.anon.4* %sv_u64 to %struct.gp**
  %56 = load %struct.gp*, %struct.gp** %svu_gp65, align 8
  %add.ptr66 = getelementptr inbounds %struct.gp, %struct.gp* %56, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr66, i32 0, i32 2
  %57 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr67 = getelementptr inbounds %struct.cv, %struct.cv* %57, i64 0
  store %struct.cv* %add.ptr67, %struct.cv** %cv, align 8
  %tobool68 = icmp ne %struct.cv* %add.ptr67, null
  br i1 %tobool68, label %if.then69, label %if.else

if.then69:                                        ; preds = %land.lhs.true63
  br label %do.body

do.body:                                          ; preds = %if.then69
  %58 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr70 = getelementptr inbounds i32, i32* %58, i32 1
  store i32* %incdec.ptr70, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr70, i32** %mark_stack_entry, align 8
  %59 = load i32*, i32** @PL_markstack_max, align 8
  %cmp71 = icmp eq i32* %incdec.ptr70, %59
  br i1 %cmp71, label %cond.true73, label %cond.false74

cond.true73:                                      ; preds = %do.body
  br i1 true, label %if.then75, label %if.end77

cond.false74:                                     ; preds = %do.body
  br i1 false, label %if.then75, label %if.end77

if.then75:                                        ; preds = %cond.false74, %cond.true73
  %call76 = call i32* @Perl_markstack_grow()
  store i32* %call76, i32** %mark_stack_entry, align 8
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %cond.false74, %cond.true73
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %61 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv78 = trunc i64 %sub.ptr.div to i32
  %62 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv78, i32* %62, align 4
  br label %do.end

do.end:                                           ; preds = %if.end77
  %63 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj79 = getelementptr inbounds %struct.magic, %struct.magic* %63, i32 0, i32 6
  %64 = load %struct.sv*, %struct.sv** %mg_obj79, align 8
  %tobool80 = icmp ne %struct.sv* %64, null
  br i1 %tobool80, label %cond.true81, label %cond.false83

cond.true81:                                      ; preds = %do.end
  %65 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj82 = getelementptr inbounds %struct.magic, %struct.magic* %65, i32 0, i32 6
  %66 = load %struct.sv*, %struct.sv** %mg_obj82, align 8
  br label %cond.end86

cond.false83:                                     ; preds = %do.end
  %67 = load %struct.gv*, %struct.gv** %gv, align 8
  %68 = bitcast %struct.gv* %67 to i8*
  %69 = bitcast i8* %68 to %struct.sv*
  %call84 = call %struct.sv* @Perl_newRV(%struct.sv* %69)
  %call85 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call84)
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false83, %cond.true81
  %cond87 = phi %struct.sv* [ %66, %cond.true81 ], [ %call85, %cond.false83 ]
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr88 = getelementptr inbounds %struct.sv*, %struct.sv** %70, i32 1
  store %struct.sv** %incdec.ptr88, %struct.sv*** %sp, align 8
  store %struct.sv* %cond87, %struct.sv** %incdec.ptr88, align 8
  br label %do.body89

do.body89:                                        ; preds = %cond.end86
  br label %do.body90

do.body90:                                        ; preds = %do.body89
  %71 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %72 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast91 = ptrtoint %struct.sv** %71 to i64
  %sub.ptr.rhs.cast92 = ptrtoint %struct.sv** %72 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %sub.ptr.div94 = sdiv exact i64 %sub.ptr.sub93, 8
  %cmp95 = icmp slt i64 %sub.ptr.div94, 1
  br i1 %cmp95, label %cond.true97, label %cond.false98

cond.true97:                                      ; preds = %do.body90
  br i1 true, label %if.then99, label %if.end101

cond.false98:                                     ; preds = %do.body90
  br i1 false, label %if.then99, label %if.end101

if.then99:                                        ; preds = %cond.false98, %cond.true97
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call100 = call %struct.sv** @Perl_stack_grow(%struct.sv** %73, %struct.sv** %74, i64 1)
  store %struct.sv** %call100, %struct.sv*** %sp, align 8
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.then99, %cond.false98, %cond.true97
  br label %do.end102

do.end102:                                        ; preds = %if.end101
  %call103 = call %struct.sv* @Perl_sv_newmortal()
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr104 = getelementptr inbounds %struct.sv*, %struct.sv** %76, i32 1
  store %struct.sv** %incdec.ptr104, %struct.sv*** %sp, align 8
  store %struct.sv* %call103, %struct.sv** %incdec.ptr104, align 8
  %77 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 1
  %78 = load i32, i32* %sv_refcnt, align 8
  %sub = sub i32 %78, 1
  %conv105 = zext i32 %sub to i64
  call void @Perl_sv_setiv(%struct.sv* %call103, i64 %conv105)
  br label %do.end106

do.end106:                                        ; preds = %do.end102
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %79, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %80 = load %struct.cv*, %struct.cv** %cv, align 8
  %81 = bitcast %struct.cv* %80 to i8*
  %82 = bitcast i8* %81 to %struct.sv*
  %call107 = call i32 @Perl_call_sv(%struct.sv* %82, i32 1)
  call void @Perl_pop_scope()
  %83 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %83, %struct.sv*** %sp, align 8
  br label %if.end118

if.else:                                          ; preds = %land.lhs.true63, %land.lhs.true58, %if.then54
  %84 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool108 = icmp ne %struct.magic* %84, null
  br i1 %tobool108, label %land.lhs.true109, label %if.end117

land.lhs.true109:                                 ; preds = %if.else
  %85 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_refcnt110 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 1
  %86 = load i32, i32* %sv_refcnt110, align 8
  %cmp111 = icmp ugt i32 %86, 1
  br i1 %cmp111, label %if.then113, label %if.end117

if.then113:                                       ; preds = %land.lhs.true109
  %87 = load %struct.sv*, %struct.sv** %obj, align 8
  %sv_refcnt114 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 1
  %88 = load i32, i32* %sv_refcnt114, align 8
  %conv115 = zext i32 %88 to i64
  %sub116 = sub i64 %conv115, 1
  call void (i32, i8*, ...) @Perl_ck_warner(i32 43, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.30, i64 0, i64 0), i64 %sub116)
  br label %if.end117

if.end117:                                        ; preds = %if.then113, %land.lhs.true109, %if.else
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %do.end106
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %cond.end50
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %cond.end
  %89 = load %struct.sv*, %struct.sv** %sv, align 8
  %90 = load i8, i8* %how, align 1
  %conv121 = sext i8 %90 to i32
  %call122 = call i32 @Perl_sv_unmagic(%struct.sv* %89, i32 %conv121)
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr123 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i32 1
  store %struct.sv** %incdec.ptr123, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr123, align 8
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %92, %struct.sv*** @PL_stack_sp, align 8
  %93 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next124 = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 0
  %94 = load %struct.op*, %struct.op** %op_next124, align 8
  store %struct.op* %94, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end120, %if.then32, %if.then
  %95 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %95
}

declare dso_local %struct.sv* @Perl_defelem_target(%struct.sv*, %struct.magic*) #1

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_tied() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mg = alloca %struct.magic*, align 8
  %sv = alloca %struct.sv*, align 8
  %how = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %6, 255
  %cmp3 = icmp eq i32 %and2, 11
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %7 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %8 = zext i1 %7 to i64
  %cond = select i1 %7, i32 80, i32 113
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %how, align 1
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %10, 49152
  %cmp6 = icmp eq i32 %and5, 32768
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.end
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %12, 255
  %cmp10 = icmp eq i32 %and9, 9
  br i1 %cmp10, label %land.lhs.true16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %14, 255
  %cmp14 = icmp eq i32 %and13, 10
  br i1 %cmp14, label %land.lhs.true16, label %if.end

land.lhs.true16:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %16, 16777216
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_gp = bitcast %union.anon* %sv_u to %struct.gp**
  %18 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %18, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 1
  %19 = load %struct.io*, %struct.io** %gp_io, align 8
  %20 = bitcast %struct.io* %19 to i8*
  %21 = bitcast i8* %20 to %struct.sv*
  store %struct.sv* %21, %struct.sv** %sv, align 8
  %tobool20 = icmp ne %struct.sv* %21, null
  br i1 %tobool20, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true19
  br label %ret_undef

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true16, %lor.lhs.false, %lor.end
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %23, 255
  %cmp23 = icmp eq i32 %and22, 10
  br i1 %cmp23, label %land.lhs.true25, label %if.end32

land.lhs.true25:                                  ; preds = %if.end
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any, align 8
  %26 = bitcast i8* %25 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %26, i32 0, i32 9
  %27 = load i8, i8* %xlv_type, align 8
  %conv26 = sext i8 %27 to i32
  %cmp27 = icmp eq i32 %conv26, 121
  br i1 %cmp27, label %land.lhs.true29, label %if.end32

land.lhs.true29:                                  ; preds = %land.lhs.true25
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.sv* @Perl_defelem_target(%struct.sv* %28, %struct.magic* null)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %tobool30 = icmp ne %struct.sv* %call, null
  br i1 %tobool30, label %if.end32, label %if.then31

if.then31:                                        ; preds = %land.lhs.true29
  br label %ret_undef

if.end32:                                         ; preds = %land.lhs.true29, %land.lhs.true25, %if.end
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %30, 8388608
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end32
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %32 = load i8, i8* %how, align 1
  %conv36 = sext i8 %32 to i32
  %call37 = call %struct.magic* @Perl_mg_find(%struct.sv* %31, i32 %conv36)
  br label %cond.end

cond.false:                                       ; preds = %if.end32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond38 = phi %struct.magic* [ %call37, %cond.true ], [ null, %cond.false ]
  store %struct.magic* %cond38, %struct.magic** %mg, align 8
  %tobool39 = icmp ne %struct.magic* %cond38, null
  br i1 %tobool39, label %if.then40, label %if.end49

if.then40:                                        ; preds = %cond.end
  %33 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %33, i32 0, i32 6
  %34 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool41 = icmp ne %struct.sv* %34, null
  br i1 %tobool41, label %cond.true42, label %cond.false44

cond.true42:                                      ; preds = %if.then40
  %35 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj43 = getelementptr inbounds %struct.magic, %struct.magic* %35, i32 0, i32 6
  %36 = load %struct.sv*, %struct.sv** %mg_obj43, align 8
  br label %cond.end47

cond.false44:                                     ; preds = %if.then40
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %call45 = call %struct.sv* @Perl_newRV(%struct.sv* %37)
  %call46 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call45)
  br label %cond.end47

cond.end47:                                       ; preds = %cond.false44, %cond.true42
  %cond48 = phi %struct.sv* [ %36, %cond.true42 ], [ %call46, %cond.false44 ]
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond48, %struct.sv** %38, align 8
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 0
  %40 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %40, %struct.op** %retval, align 8
  br label %return

if.end49:                                         ; preds = %cond.end
  br label %ret_undef

ret_undef:                                        ; preds = %if.end49, %if.then31, %if.then
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %41, align 8
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next50 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next50, align 8
  store %struct.op* %43, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %ret_undef, %cond.end47
  %44 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_dbmopen() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %gv = alloca %struct.gv*, align 8
  %hv = alloca %struct.hv*, align 8
  %sv = alloca %struct.sv*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %mark_stack_entry68 = alloca i32*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %right, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %left, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %7 = bitcast %struct.sv* %6 to i8*
  %8 = bitcast i8* %7 to %struct.hv*
  store %struct.hv* %8, %struct.hv** %hv, align 8
  %call = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i64 11, i32 524288)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %call3 = call %struct.hv* @Perl_gv_stashsv(%struct.sv* %9, i32 0)
  store %struct.hv* %call3, %struct.hv** %stash, align 8
  %10 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool = icmp ne %struct.hv* %10, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %11 = load %struct.hv*, %struct.hv** %stash, align 8
  %call4 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0), i32 1)
  store %struct.gv* %call4, %struct.gv** %gv, align 8
  %tobool5 = icmp ne %struct.gv* %call4, null
  br i1 %tobool5, label %if.end12, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %12, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_require_pv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0))
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %13, %struct.sv*** %sp, align 8
  %14 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool6 = icmp ne %struct.hv* %14, null
  br i1 %tobool6, label %lor.lhs.false7, label %if.then10

lor.lhs.false7:                                   ; preds = %if.then
  %15 = load %struct.hv*, %struct.hv** %stash, align 8
  %call8 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0), i32 1)
  store %struct.gv* %call8, %struct.gv** %gv, align 8
  %tobool9 = icmp ne %struct.gv* %call8, null
  br i1 %tobool9, label %if.end, label %if.then10

if.then10:                                        ; preds = %lor.lhs.false7, %if.then
  %call11 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0))
  store %struct.op* %call11, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false7
  br label %if.end12

if.end12:                                         ; preds = %if.end, %lor.lhs.false
  call void @Perl_push_scope()
  br label %do.body

do.body:                                          ; preds = %if.end12
  %16 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr13 = getelementptr inbounds i32, i32* %16, i32 1
  store i32* %incdec.ptr13, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr13, i32** %mark_stack_entry, align 8
  %17 = load i32*, i32** @PL_markstack_max, align 8
  %cmp = icmp eq i32* %incdec.ptr13, %17
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then14, label %if.end16

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then14, label %if.end16

if.then14:                                        ; preds = %cond.false, %cond.true
  %call15 = call i32* @Perl_markstack_grow()
  store i32* %call15, i32** %mark_stack_entry, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %cond.false, %cond.true
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  %20 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv, i32* %20, align 4
  br label %do.end

do.end:                                           ; preds = %if.end16
  br label %do.body17

do.body17:                                        ; preds = %do.end
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast18 = ptrtoint %struct.sv** %21 to i64
  %sub.ptr.rhs.cast19 = ptrtoint %struct.sv** %22 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %sub.ptr.div21 = sdiv exact i64 %sub.ptr.sub20, 8
  %cmp22 = icmp slt i64 %sub.ptr.div21, 5
  br i1 %cmp22, label %cond.true24, label %cond.false25

cond.true24:                                      ; preds = %do.body17
  br i1 true, label %if.then26, label %if.end28

cond.false25:                                     ; preds = %do.body17
  br i1 false, label %if.then26, label %if.end28

if.then26:                                        ; preds = %cond.false25, %cond.true24
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call27 = call %struct.sv** @Perl_stack_grow(%struct.sv** %23, %struct.sv** %24, i64 5)
  store %struct.sv** %call27, %struct.sv*** %sp, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %cond.false25, %cond.true24
  br label %do.end29

do.end29:                                         ; preds = %if.end28
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr30 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i32 1
  store %struct.sv** %incdec.ptr30, %struct.sv*** %sp, align 8
  store %struct.sv* %26, %struct.sv** %incdec.ptr30, align 8
  %28 = load %struct.sv*, %struct.sv** %left, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr31 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i32 1
  store %struct.sv** %incdec.ptr31, %struct.sv*** %sp, align 8
  store %struct.sv* %28, %struct.sv** %incdec.ptr31, align 8
  %30 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags, align 4
  %and = and i32 %31, 2097408
  %cmp32 = icmp eq i32 %and, 256
  br i1 %cmp32, label %cond.true34, label %cond.false36

cond.true34:                                      ; preds = %do.end29
  %32 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %35 = load i64, i64* %xivu_iv, align 8
  %tobool35 = icmp ne i64 %35, 0
  br i1 %tobool35, label %if.then39, label %if.else

cond.false36:                                     ; preds = %do.end29
  %36 = load %struct.sv*, %struct.sv** %right, align 8
  %call37 = call i64 @Perl_sv_2iv_flags(%struct.sv* %36, i32 2)
  %tobool38 = icmp ne i64 %call37, 0
  br i1 %tobool38, label %if.then39, label %if.else

if.then39:                                        ; preds = %cond.false36, %cond.true34
  %call40 = call %struct.sv* @Perl_sv_newmortal()
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr41 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i32 1
  store %struct.sv** %incdec.ptr41, %struct.sv*** %sp, align 8
  store %struct.sv* %call40, %struct.sv** %incdec.ptr41, align 8
  call void @Perl_sv_setuv(%struct.sv* %call40, i64 66)
  br label %if.end59

if.else:                                          ; preds = %cond.false36, %cond.true34
  %call42 = call %struct.sv* @Perl_sv_newmortal()
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr43 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 1
  store %struct.sv** %incdec.ptr43, %struct.sv*** %sp, align 8
  store %struct.sv* %call42, %struct.sv** %incdec.ptr43, align 8
  call void @Perl_sv_setuv(%struct.sv* %call42, i64 2)
  %39 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %40, 65280
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.end58, label %lor.lhs.false47

lor.lhs.false47:                                  ; preds = %if.else
  %41 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %42, 255
  %cmp50 = icmp eq i32 %and49, 8
  br i1 %cmp50, label %if.end58, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %lor.lhs.false47
  %43 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %44, 16826623
  %cmp55 = icmp eq i32 %and54, 16777226
  br i1 %cmp55, label %if.end58, label %if.then57

if.then57:                                        ; preds = %lor.lhs.false52
  store %struct.sv* @PL_sv_no, %struct.sv** %right, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %lor.lhs.false52, %lor.lhs.false47, %if.else
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then39
  %45 = load %struct.sv*, %struct.sv** %right, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i32 1
  store %struct.sv** %incdec.ptr60, %struct.sv*** %sp, align 8
  store %struct.sv* %45, %struct.sv** %incdec.ptr60, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %47, %struct.sv*** @PL_stack_sp, align 8
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %48, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %49 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %49, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %50 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr61 = getelementptr inbounds %struct.cv, %struct.cv* %50, i64 0
  %51 = bitcast %struct.cv* %add.ptr61 to i8*
  %52 = bitcast i8* %51 to %struct.sv*
  %call62 = call i32 @Perl_call_sv(%struct.sv* %52, i32 2)
  %53 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %53, %struct.sv*** %sp, align 8
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %call63 = call i32 @Perl_sv_isobject(%struct.sv* %55)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end94, label %if.then65

if.then65:                                        ; preds = %if.end59
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr66 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i32 -1
  store %struct.sv** %incdec.ptr66, %struct.sv*** %sp, align 8
  br label %do.body67

do.body67:                                        ; preds = %if.then65
  %57 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr69 = getelementptr inbounds i32, i32* %57, i32 1
  store i32* %incdec.ptr69, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr69, i32** %mark_stack_entry68, align 8
  %58 = load i32*, i32** @PL_markstack_max, align 8
  %cmp70 = icmp eq i32* %incdec.ptr69, %58
  br i1 %cmp70, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %do.body67
  br i1 true, label %if.then74, label %if.end76

cond.false73:                                     ; preds = %do.body67
  br i1 false, label %if.then74, label %if.end76

if.then74:                                        ; preds = %cond.false73, %cond.true72
  %call75 = call i32* @Perl_markstack_grow()
  store i32* %call75, i32** %mark_stack_entry68, align 8
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %cond.false73, %cond.true72
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %60 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast77 = ptrtoint %struct.sv** %59 to i64
  %sub.ptr.rhs.cast78 = ptrtoint %struct.sv** %60 to i64
  %sub.ptr.sub79 = sub i64 %sub.ptr.lhs.cast77, %sub.ptr.rhs.cast78
  %sub.ptr.div80 = sdiv exact i64 %sub.ptr.sub79, 8
  %conv81 = trunc i64 %sub.ptr.div80 to i32
  %61 = load i32*, i32** %mark_stack_entry68, align 8
  store i32 %conv81, i32* %61, align 4
  br label %do.end82

do.end82:                                         ; preds = %if.end76
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr83 = getelementptr inbounds %struct.sv*, %struct.sv** %63, i32 1
  store %struct.sv** %incdec.ptr83, %struct.sv*** %sp, align 8
  store %struct.sv* %62, %struct.sv** %incdec.ptr83, align 8
  %64 = load %struct.sv*, %struct.sv** %left, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %65, i32 1
  store %struct.sv** %incdec.ptr84, %struct.sv*** %sp, align 8
  store %struct.sv* %64, %struct.sv** %incdec.ptr84, align 8
  %call85 = call %struct.sv* @Perl_sv_newmortal()
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr86 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 1
  store %struct.sv** %incdec.ptr86, %struct.sv*** %sp, align 8
  store %struct.sv* %call85, %struct.sv** %incdec.ptr86, align 8
  call void @Perl_sv_setuv(%struct.sv* %call85, i64 0)
  %67 = load %struct.sv*, %struct.sv** %right, align 8
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr87 = getelementptr inbounds %struct.sv*, %struct.sv** %68, i32 1
  store %struct.sv** %incdec.ptr87, %struct.sv*** %sp, align 8
  store %struct.sv* %67, %struct.sv** %incdec.ptr87, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %69, %struct.sv*** @PL_stack_sp, align 8
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u88 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 3
  %svu_gp89 = bitcast %union.anon.4* %sv_u88 to %struct.gp**
  %71 = load %struct.gp*, %struct.gp** %svu_gp89, align 8
  %add.ptr90 = getelementptr inbounds %struct.gp, %struct.gp* %71, i64 0
  %gp_cv91 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr90, i32 0, i32 2
  %72 = load %struct.cv*, %struct.cv** %gp_cv91, align 8
  %add.ptr92 = getelementptr inbounds %struct.cv, %struct.cv* %72, i64 0
  %73 = bitcast %struct.cv* %add.ptr92 to i8*
  %74 = bitcast i8* %73 to %struct.sv*
  %call93 = call i32 @Perl_call_sv(%struct.sv* %74, i32 2)
  %75 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %75, %struct.sv*** %sp, align 8
  br label %if.end94

if.end94:                                         ; preds = %do.end82, %if.end59
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %call95 = call i32 @Perl_sv_isobject(%struct.sv* %77)
  %tobool96 = icmp ne i32 %call95, 0
  br i1 %tobool96, label %if.then97, label %if.end99

if.then97:                                        ; preds = %if.end94
  %78 = load %struct.hv*, %struct.hv** %hv, align 8
  %79 = bitcast %struct.hv* %78 to i8*
  %80 = bitcast i8* %79 to %struct.sv*
  %call98 = call i32 @Perl_sv_unmagic(%struct.sv* %80, i32 80)
  %81 = load %struct.hv*, %struct.hv** %hv, align 8
  %82 = bitcast %struct.hv* %81 to i8*
  %83 = bitcast i8* %82 to %struct.sv*
  %84 = load %struct.sv**, %struct.sv*** %sp, align 8
  %85 = load %struct.sv*, %struct.sv** %84, align 8
  call void @Perl_sv_magic(%struct.sv* %83, %struct.sv* %85, i32 80, i8* null, i32 0)
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %if.end94
  call void @Perl_pop_scope()
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %86, %struct.sv*** @PL_stack_sp, align 8
  %87 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 0
  %88 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %88, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end99, %if.then10
  %89 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %89
}

declare dso_local void @Perl_require_pv(i8*) #1

declare dso_local void @Perl_sv_setuv(%struct.sv*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sselect() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %value = alloca double, align 8
  %maxlen = alloca i32, align 4
  %nfound = alloca i32, align 4
  %timebuf = alloca %struct.timeval, align 8
  %tbuf = alloca %struct.timeval*, align 8
  %growsize = alloca i32, align 4
  %fd_sets = alloca [4 x i8*], align 16
  %sv1 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i32 0, i32* %maxlen, align 4
  store %struct.timeval* %timebuf, %struct.timeval** %tbuf, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 -4
  store %struct.sv** %add.ptr, %struct.sv*** %sp, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %6, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx2 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 %idxprom
  %9 = load %struct.sv*, %struct.sv** %arrayidx2, align 8
  store %struct.sv* %9, %struct.sv** %sv1, align 8
  %10 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and = and i32 %11, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %for.body
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %12 = load %struct.sv*, %struct.sv** %sv1, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %12)
  %tobool3 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %13 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  %14 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %15, 65280
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %16 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %17, 255
  %cmp9 = icmp eq i32 %and8, 8
  br i1 %cmp9, label %if.end, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %18 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %19, 16826623
  %cmp13 = icmp eq i32 %and12, 16777226
  br i1 %cmp13, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false10
  br label %for.inc

if.end:                                           ; preds = %lor.lhs.false10, %lor.lhs.false, %land.end
  %20 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %21, 134283264
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end
  %22 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %23, 1024
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.lhs.true, label %if.then22

land.lhs.true:                                    ; preds = %if.then17
  %24 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 2
  %27 = load i64, i64* %xpv_cur, align 8
  %cmp21 = icmp eq i64 %27, 0
  br i1 %cmp21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %land.lhs.true, %if.then17
  call void @Perl_croak_no_modify()
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %land.lhs.true
  br label %if.end29

if.else:                                          ; preds = %if.end
  %28 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %29, 268435456
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.else
  %30 = load %struct.sv*, %struct.sv** %sv1, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %30, i32 0)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.else
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end23
  %31 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %32, 1024
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.end45, label %if.then33

if.then33:                                        ; preds = %if.end29
  %33 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %34, 16384
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %if.then33
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.34, i64 0, i64 0))
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.then33
  %35 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %36, 430018304
  %cmp41 = icmp eq i32 %and40, 1024
  br i1 %cmp41, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %if.end38
  %37 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %38 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false43:                                     ; preds = %if.end38
  %39 = load %struct.sv*, %struct.sv** %sv1, align 8
  %call44 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %39, i64* null, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false43, %cond.true42
  %cond = phi i8* [ %38, %cond.true42 ], [ %call44, %cond.false43 ]
  br label %if.end45

if.end45:                                         ; preds = %cond.end, %if.end29
  %40 = load %struct.sv*, %struct.sv** %sv1, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any46, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %xpv_cur47 = getelementptr inbounds %struct.xpv, %struct.xpv* %42, i32 0, i32 2
  %43 = load i64, i64* %xpv_cur47, align 8
  %conv = trunc i64 %43 to i32
  store i32 %conv, i32* %j, align 4
  %44 = load i32, i32* %maxlen, align 4
  %45 = load i32, i32* %j, align 4
  %cmp48 = icmp slt i32 %44, %45
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end45
  %46 = load i32, i32* %j, align 4
  store i32 %46, i32* %maxlen, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %if.end45
  br label %for.inc

for.inc:                                          ; preds = %if.end51, %if.then
  %47 = load i32, i32* %i, align 4
  %inc = add nsw i32 %47, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %48 = load i32, i32* %maxlen, align 4
  %49 = load i32, i32* %maxlen, align 4
  %rem = srem i32 %49, 128
  %sub = sub nsw i32 128, %rem
  %add = add nsw i32 %48, %sub
  store i32 %add, i32* %growsize, align 4
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx52 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i64 4
  %51 = load %struct.sv*, %struct.sv** %arrayidx52, align 8
  store %struct.sv* %51, %struct.sv** %sv, align 8
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %53, 2097152
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %for.end
  br i1 true, label %land.rhs58, label %land.end61

cond.false57:                                     ; preds = %for.end
  br i1 false, label %land.rhs58, label %land.end61

land.rhs58:                                       ; preds = %cond.false57, %cond.true56
  %54 = load %struct.sv*, %struct.sv** %sv, align 8
  %call59 = call i32 @Perl_mg_get(%struct.sv* %54)
  %tobool60 = icmp ne i32 %call59, 0
  br label %land.end61

land.end61:                                       ; preds = %land.rhs58, %cond.false57, %cond.true56
  %55 = phi i1 [ false, %cond.false57 ], [ false, %cond.true56 ], [ %tobool60, %land.rhs58 ]
  %land.ext62 = zext i1 %55 to i32
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %57, 65280
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %if.then76, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %land.end61
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %59, 255
  %cmp69 = icmp eq i32 %and68, 8
  br i1 %cmp69, label %if.then76, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %lor.lhs.false66
  %60 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags72 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %61, 16826623
  %cmp74 = icmp eq i32 %and73, 16777226
  br i1 %cmp74, label %if.then76, label %if.else95

if.then76:                                        ; preds = %lor.lhs.false71, %lor.lhs.false66, %land.end61
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %63, 512
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %cond.true80, label %cond.false82

cond.true80:                                      ; preds = %if.then76
  %64 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any81, align 8
  %66 = bitcast i8* %65 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %66, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %67 = load double, double* %xnv_nv, align 8
  br label %cond.end84

cond.false82:                                     ; preds = %if.then76
  %68 = load %struct.sv*, %struct.sv** %sv, align 8
  %call83 = call double @Perl_sv_2nv_flags(%struct.sv* %68, i32 0)
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true80
  %cond85 = phi double [ %67, %cond.true80 ], [ %call83, %cond.false82 ]
  store double %cond85, double* %value, align 8
  %69 = load double, double* %value, align 8
  %cmp86 = fcmp olt double %69, 0.000000e+00
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %cond.end84
  store double 0.000000e+00, double* %value, align 8
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %cond.end84
  %70 = load double, double* %value, align 8
  %conv90 = fptosi double %70 to i64
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %timebuf, i32 0, i32 0
  store i64 %conv90, i64* %tv_sec, align 8
  %tv_sec91 = getelementptr inbounds %struct.timeval, %struct.timeval* %timebuf, i32 0, i32 0
  %71 = load i64, i64* %tv_sec91, align 8
  %conv92 = sitofp i64 %71 to double
  %72 = load double, double* %value, align 8
  %sub93 = fsub double %72, %conv92
  store double %sub93, double* %value, align 8
  %73 = load double, double* %value, align 8
  %mul = fmul double %73, 1.000000e+06
  %conv94 = fptosi double %mul to i64
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %timebuf, i32 0, i32 1
  store i64 %conv94, i64* %tv_usec, align 8
  br label %if.end96

if.else95:                                        ; preds = %lor.lhs.false71
  store %struct.timeval* null, %struct.timeval** %tbuf, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.else95, %if.end89
  store i32 1, i32* %i, align 4
  br label %for.cond97

for.cond97:                                       ; preds = %for.inc146, %if.end96
  %74 = load i32, i32* %i, align 4
  %cmp98 = icmp sle i32 %74, 3
  br i1 %cmp98, label %for.body100, label %for.end148

for.body100:                                      ; preds = %for.cond97
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %76 = load i32, i32* %i, align 4
  %idxprom101 = sext i32 %76 to i64
  %arrayidx102 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i64 %idxprom101
  %77 = load %struct.sv*, %struct.sv** %arrayidx102, align 8
  store %struct.sv* %77, %struct.sv** %sv, align 8
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %79, 65280
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %lor.lhs.false116, label %lor.lhs.false106

lor.lhs.false106:                                 ; preds = %for.body100
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %81, 255
  %cmp109 = icmp eq i32 %and108, 8
  br i1 %cmp109, label %lor.lhs.false116, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %lor.lhs.false106
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %83, 16826623
  %cmp114 = icmp eq i32 %and113, 16777226
  br i1 %cmp114, label %lor.lhs.false116, label %if.then121

lor.lhs.false116:                                 ; preds = %lor.lhs.false111, %lor.lhs.false106, %for.body100
  %84 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any117 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any117, align 8
  %86 = bitcast i8* %85 to %struct.xpv*
  %xpv_cur118 = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 2
  %87 = load i64, i64* %xpv_cur118, align 8
  %cmp119 = icmp eq i64 %87, 0
  br i1 %cmp119, label %if.then121, label %if.end124

if.then121:                                       ; preds = %lor.lhs.false116, %lor.lhs.false111
  %88 = load i32, i32* %i, align 4
  %idxprom122 = sext i32 %88 to i64
  %arrayidx123 = getelementptr inbounds [4 x i8*], [4 x i8*]* %fd_sets, i64 0, i64 %idxprom122
  store i8* null, i8** %arrayidx123, align 8
  br label %for.inc146

if.end124:                                        ; preds = %lor.lhs.false116
  %89 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any125 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any125, align 8
  %91 = bitcast i8* %90 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %91, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.16* %xpv_len_u to i64*
  %92 = load i64, i64* %xpvlenu_len, align 8
  %conv126 = trunc i64 %92 to i32
  store i32 %conv126, i32* %j, align 4
  %93 = load i32, i32* %j, align 4
  %94 = load i32, i32* %growsize, align 4
  %cmp127 = icmp slt i32 %93, %94
  br i1 %cmp127, label %if.then129, label %if.end132

if.then129:                                       ; preds = %if.end124
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %96 = load i32, i32* %growsize, align 4
  %conv130 = sext i32 %96 to i64
  %call131 = call i8* @Perl_sv_grow(%struct.sv* %95, i64 %conv130)
  br label %if.end132

if.end132:                                        ; preds = %if.then129, %if.end124
  %97 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any133 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 0
  %98 = load i8*, i8** %sv_any133, align 8
  %99 = bitcast i8* %98 to %struct.xpv*
  %xpv_cur134 = getelementptr inbounds %struct.xpv, %struct.xpv* %99, i32 0, i32 2
  %100 = load i64, i64* %xpv_cur134, align 8
  %conv135 = trunc i64 %100 to i32
  store i32 %conv135, i32* %j, align 4
  %101 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u136 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 3
  %svu_pv137 = bitcast %union.anon* %sv_u136 to i8**
  %102 = load i8*, i8** %svu_pv137, align 8
  %103 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %103 to i64
  %add.ptr138 = getelementptr inbounds i8, i8* %102, i64 %idx.ext
  store i8* %add.ptr138, i8** %s, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end132
  %104 = load i32, i32* %j, align 4
  %inc139 = add nsw i32 %104, 1
  store i32 %inc139, i32* %j, align 4
  %105 = load i32, i32* %growsize, align 4
  %cmp140 = icmp sle i32 %inc139, %105
  br i1 %cmp140, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %106 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  store i8 0, i8* %106, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %107 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u142 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 3
  %svu_pv143 = bitcast %union.anon* %sv_u142 to i8**
  %108 = load i8*, i8** %svu_pv143, align 8
  %109 = load i32, i32* %i, align 4
  %idxprom144 = sext i32 %109 to i64
  %arrayidx145 = getelementptr inbounds [4 x i8*], [4 x i8*]* %fd_sets, i64 0, i64 %idxprom144
  store i8* %108, i8** %arrayidx145, align 8
  br label %for.inc146

for.inc146:                                       ; preds = %while.end, %if.then121
  %110 = load i32, i32* %i, align 4
  %inc147 = add nsw i32 %110, 1
  store i32 %inc147, i32* %i, align 4
  br label %for.cond97

for.end148:                                       ; preds = %for.cond97
  %111 = load i32, i32* %maxlen, align 4
  %mul149 = mul nsw i32 %111, 8
  %arrayidx150 = getelementptr inbounds [4 x i8*], [4 x i8*]* %fd_sets, i64 0, i64 1
  %112 = load i8*, i8** %arrayidx150, align 8
  %113 = bitcast i8* %112 to %struct.fd_set*
  %arrayidx151 = getelementptr inbounds [4 x i8*], [4 x i8*]* %fd_sets, i64 0, i64 2
  %114 = load i8*, i8** %arrayidx151, align 16
  %115 = bitcast i8* %114 to %struct.fd_set*
  %arrayidx152 = getelementptr inbounds [4 x i8*], [4 x i8*]* %fd_sets, i64 0, i64 3
  %116 = load i8*, i8** %arrayidx152, align 8
  %117 = bitcast i8* %116 to %struct.fd_set*
  %118 = load %struct.timeval*, %struct.timeval** %tbuf, align 8
  %call153 = call i32 @select(i32 %mul149, %struct.fd_set* %113, %struct.fd_set* %115, %struct.fd_set* %117, %struct.timeval* %118)
  store i32 %call153, i32* %nfound, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond154

for.cond154:                                      ; preds = %for.inc173, %for.end148
  %119 = load i32, i32* %i, align 4
  %cmp155 = icmp sle i32 %119, 3
  br i1 %cmp155, label %for.body157, label %for.end175

for.body157:                                      ; preds = %for.cond154
  %120 = load i32, i32* %i, align 4
  %idxprom158 = sext i32 %120 to i64
  %arrayidx159 = getelementptr inbounds [4 x i8*], [4 x i8*]* %fd_sets, i64 0, i64 %idxprom158
  %121 = load i8*, i8** %arrayidx159, align 8
  %tobool160 = icmp ne i8* %121, null
  br i1 %tobool160, label %if.then161, label %if.end172

if.then161:                                       ; preds = %for.body157
  %122 = load %struct.sv**, %struct.sv*** %sp, align 8
  %123 = load i32, i32* %i, align 4
  %idxprom162 = sext i32 %123 to i64
  %arrayidx163 = getelementptr inbounds %struct.sv*, %struct.sv** %122, i64 %idxprom162
  %124 = load %struct.sv*, %struct.sv** %arrayidx163, align 8
  store %struct.sv* %124, %struct.sv** %sv, align 8
  br label %do.body

do.body:                                          ; preds = %if.then161
  %125 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %126, 4194304
  %tobool166 = icmp ne i32 %and165, 0
  br i1 %tobool166, label %cond.true167, label %cond.false168

cond.true167:                                     ; preds = %do.body
  br i1 true, label %if.then169, label %if.end171

cond.false168:                                    ; preds = %do.body
  br i1 false, label %if.then169, label %if.end171

if.then169:                                       ; preds = %cond.false168, %cond.true167
  %127 = load %struct.sv*, %struct.sv** %sv, align 8
  %call170 = call i32 @Perl_mg_set(%struct.sv* %127)
  br label %if.end171

if.end171:                                        ; preds = %if.then169, %cond.false168, %cond.true167
  br label %do.end

do.end:                                           ; preds = %if.end171
  br label %if.end172

if.end172:                                        ; preds = %do.end, %for.body157
  br label %for.inc173

for.inc173:                                       ; preds = %if.end172
  %128 = load i32, i32* %i, align 4
  %inc174 = add nsw i32 %128, 1
  store i32 %inc174, i32* %i, align 4
  br label %for.cond154

for.end175:                                       ; preds = %for.cond154
  br label %do.body176

do.body176:                                       ; preds = %for.end175
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %130 = load i32, i32* %nfound, align 4
  %conv177 = sext i32 %130 to i64
  call void @Perl_sv_setiv(%struct.sv* %129, i64 %conv177)
  br label %do.body178

do.body178:                                       ; preds = %do.body176
  br label %do.body179

do.body179:                                       ; preds = %do.body178
  %131 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags180 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 2
  %132 = load i32, i32* %sv_flags180, align 4
  %and181 = and i32 %132, 4194304
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %cond.true183, label %cond.false184

cond.true183:                                     ; preds = %do.body179
  br i1 true, label %if.then185, label %if.end187

cond.false184:                                    ; preds = %do.body179
  br i1 false, label %if.then185, label %if.end187

if.then185:                                       ; preds = %cond.false184, %cond.true183
  %133 = load %struct.sv*, %struct.sv** %targ, align 8
  %call186 = call i32 @Perl_mg_set(%struct.sv* %133)
  br label %if.end187

if.end187:                                        ; preds = %if.then185, %cond.false184, %cond.true183
  br label %do.end188

do.end188:                                        ; preds = %if.end187
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr189 = getelementptr inbounds %struct.sv*, %struct.sv** %135, i32 1
  store %struct.sv** %incdec.ptr189, %struct.sv*** %sp, align 8
  store %struct.sv* %134, %struct.sv** %incdec.ptr189, align 8
  br label %do.end190

do.end190:                                        ; preds = %do.end188
  br label %do.end191

do.end191:                                        ; preds = %do.end190
  %136 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 5
  %137 = load i8, i8* %op_flags, align 2
  %conv192 = zext i8 %137 to i32
  %and193 = and i32 %conv192, 3
  %tobool194 = icmp ne i32 %and193, 0
  br i1 %tobool194, label %cond.true195, label %cond.false199

cond.true195:                                     ; preds = %do.end191
  %138 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags196 = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 5
  %139 = load i8, i8* %op_flags196, align 2
  %conv197 = zext i8 %139 to i32
  %and198 = and i32 %conv197, 3
  br label %cond.end201

cond.false199:                                    ; preds = %do.end191
  %call200 = call i32 @Perl_block_gimme()
  br label %cond.end201

cond.end201:                                      ; preds = %cond.false199, %cond.true195
  %cond202 = phi i32 [ %and198, %cond.true195 ], [ %call200, %cond.false199 ]
  %cmp203 = icmp eq i32 %cond202, 3
  br i1 %cmp203, label %land.lhs.true205, label %if.end215

land.lhs.true205:                                 ; preds = %cond.end201
  %140 = load %struct.timeval*, %struct.timeval** %tbuf, align 8
  %tobool206 = icmp ne %struct.timeval* %140, null
  br i1 %tobool206, label %if.then207, label %if.end215

if.then207:                                       ; preds = %land.lhs.true205
  %tv_sec208 = getelementptr inbounds %struct.timeval, %struct.timeval* %timebuf, i32 0, i32 0
  %141 = load i64, i64* %tv_sec208, align 8
  %conv209 = sitofp i64 %141 to double
  %tv_usec210 = getelementptr inbounds %struct.timeval, %struct.timeval* %timebuf, i32 0, i32 1
  %142 = load i64, i64* %tv_usec210, align 8
  %conv211 = sitofp i64 %142 to double
  %div = fdiv double %conv211, 1.000000e+06
  %add212 = fadd double %conv209, %div
  store double %add212, double* %value, align 8
  %call213 = call %struct.sv* @Perl_sv_newmortal()
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr214 = getelementptr inbounds %struct.sv*, %struct.sv** %143, i32 1
  store %struct.sv** %incdec.ptr214, %struct.sv*** %sp, align 8
  store %struct.sv* %call213, %struct.sv** %incdec.ptr214, align 8
  %144 = load double, double* %value, align 8
  call void @Perl_sv_setnv(%struct.sv* %call213, double %144)
  br label %if.end215

if.end215:                                        ; preds = %if.then207, %land.lhs.true205, %cond.end201
  %145 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %145, %struct.sv*** @PL_stack_sp, align 8
  %146 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 0
  %147 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %147
}

declare dso_local void @Perl_croak_no_modify() #1

declare dso_local void @Perl_sv_force_normal_flags(%struct.sv*, i32) #1

declare dso_local i8* @Perl_sv_pvn_force_flags(%struct.sv*, i64*, i32) #1

declare dso_local double @Perl_sv_2nv_flags(%struct.sv*, i32) #1

declare dso_local i8* @Perl_sv_grow(%struct.sv*, i64) #1

declare dso_local i32 @select(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timeval*) #1

declare dso_local void @Perl_sv_setnv(%struct.sv*, double) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @Perl_setdefout(%struct.gv* %gv) #0 {
entry:
  %gv.addr = alloca %struct.gv*, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  %0 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %1 = bitcast %struct.gv* %0 to i8*
  %2 = bitcast i8* %1 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 1
  %3 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %3, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %4 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %5 = bitcast %struct.gv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %6)
  %7 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  store %struct.gv* %7, %struct.gv** @PL_defoutgv, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_select() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %hv = alloca %struct.hv*, align 8
  %newdefout = alloca %struct.gv*, align 8
  %egv = alloca %struct.gv*, align 8
  %gvp = alloca %struct.gv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %9 = bitcast %struct.sv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.gv*
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %10, %cond.true ], [ null, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %newdefout, align 8
  %11 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %and = and i32 %12, 49152
  %cmp2 = icmp eq i32 %and, 32768
  br i1 %cmp2, label %land.lhs.true, label %cond.false13

land.lhs.true:                                    ; preds = %cond.end
  %13 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_flags4 = getelementptr inbounds %struct.gv, %struct.gv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %14, 255
  %cmp6 = icmp eq i32 %and5, 9
  br i1 %cmp6, label %cond.true12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %15 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_flags8 = getelementptr inbounds %struct.gv, %struct.gv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %16, 255
  %cmp10 = icmp eq i32 %and9, 10
  br i1 %cmp10, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %lor.lhs.false, %land.lhs.true
  %17 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %18 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %18, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 8
  %19 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  br label %cond.end14

cond.false13:                                     ; preds = %lor.lhs.false, %cond.end
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi %struct.gv* [ %19, %cond.true12 ], [ null, %cond.false13 ]
  store %struct.gv* %cond15, %struct.gv** %egv, align 8
  %20 = load %struct.gv*, %struct.gv** %egv, align 8
  %tobool = icmp ne %struct.gv* %20, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end14
  %21 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  store %struct.gv* %21, %struct.gv** %egv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end14
  %22 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_flags16 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %23, 49152
  %cmp18 = icmp eq i32 %and17, 32768
  br i1 %cmp18, label %land.lhs.true20, label %cond.false31

land.lhs.true20:                                  ; preds = %if.end
  %24 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_flags21 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %25, 255
  %cmp23 = icmp eq i32 %and22, 9
  br i1 %cmp23, label %cond.true30, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %land.lhs.true20
  %26 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_flags26 = getelementptr inbounds %struct.gv, %struct.gv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %27, 255
  %cmp28 = icmp eq i32 %and27, 10
  br i1 %cmp28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %lor.lhs.false25, %land.lhs.true20
  %28 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %28, i32 0, i32 0
  %29 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %29, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %30 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  br label %cond.end32

cond.false31:                                     ; preds = %lor.lhs.false25, %if.end
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi %struct.hv* [ %30, %cond.true30 ], [ null, %cond.false31 ]
  store %struct.hv* %cond33, %struct.hv** %hv, align 8
  %31 = load %struct.hv*, %struct.hv** %hv, align 8
  %tobool34 = icmp ne %struct.hv* %31, null
  br i1 %tobool34, label %land.lhs.true35, label %cond.false149

land.lhs.true35:                                  ; preds = %cond.end32
  %32 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags36 = getelementptr inbounds %struct.hv, %struct.hv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %33, 33554432
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %land.lhs.true39, label %cond.false119

land.lhs.true39:                                  ; preds = %land.lhs.true35
  %34 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u40 = getelementptr inbounds %struct.hv, %struct.hv* %34, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u40 to %struct.he***
  %35 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %36 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any41 = getelementptr inbounds %struct.hv, %struct.hv* %36, i32 0, i32 0
  %37 = load %struct.xpvhv*, %struct.xpvhv** %sv_any41, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %37, i32 0, i32 3
  %38 = load i64, i64* %xhv_max, align 8
  %add = add i64 %38, 1
  %arrayidx42 = getelementptr inbounds %struct.he*, %struct.he** %35, i64 %add
  %39 = bitcast %struct.he** %arrayidx42 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %39, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %40 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool43 = icmp ne %struct.hek* %40, null
  br i1 %tobool43, label %land.lhs.true44, label %cond.false119

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %41 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u45 = getelementptr inbounds %struct.hv, %struct.hv* %41, i32 0, i32 3
  %svu_hash46 = bitcast %union.anon.5* %sv_u45 to %struct.he***
  %42 = load %struct.he**, %struct.he*** %svu_hash46, align 8
  %43 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any47 = getelementptr inbounds %struct.hv, %struct.hv* %43, i32 0, i32 0
  %44 = load %struct.xpvhv*, %struct.xpvhv** %sv_any47, align 8
  %xhv_max48 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %44, i32 0, i32 3
  %45 = load i64, i64* %xhv_max48, align 8
  %add49 = add i64 %45, 1
  %arrayidx50 = getelementptr inbounds %struct.he*, %struct.he** %42, i64 %add49
  %46 = bitcast %struct.he** %arrayidx50 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %46, i32 0, i32 4
  %47 = load i32, i32* %xhv_name_count, align 4
  %cmp51 = icmp ne i32 %47, -1
  br i1 %cmp51, label %cond.true53, label %cond.false119

cond.true53:                                      ; preds = %land.lhs.true44
  %48 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u54 = getelementptr inbounds %struct.hv, %struct.hv* %48, i32 0, i32 3
  %svu_hash55 = bitcast %union.anon.5* %sv_u54 to %struct.he***
  %49 = load %struct.he**, %struct.he*** %svu_hash55, align 8
  %50 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any56 = getelementptr inbounds %struct.hv, %struct.hv* %50, i32 0, i32 0
  %51 = load %struct.xpvhv*, %struct.xpvhv** %sv_any56, align 8
  %xhv_max57 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %51, i32 0, i32 3
  %52 = load i64, i64* %xhv_max57, align 8
  %add58 = add i64 %52, 1
  %arrayidx59 = getelementptr inbounds %struct.he*, %struct.he** %49, i64 %add58
  %53 = bitcast %struct.he** %arrayidx59 to %struct.xpvhv_aux*
  %xhv_name_count60 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %53, i32 0, i32 4
  %54 = load i32, i32* %xhv_name_count60, align 4
  %cmp61 = icmp sgt i32 %54, 0
  br i1 %cmp61, label %cond.true63, label %cond.false72

cond.true63:                                      ; preds = %cond.true53
  %55 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u64 = getelementptr inbounds %struct.hv, %struct.hv* %55, i32 0, i32 3
  %svu_hash65 = bitcast %union.anon.5* %sv_u64 to %struct.he***
  %56 = load %struct.he**, %struct.he*** %svu_hash65, align 8
  %57 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any66 = getelementptr inbounds %struct.hv, %struct.hv* %57, i32 0, i32 0
  %58 = load %struct.xpvhv*, %struct.xpvhv** %sv_any66, align 8
  %xhv_max67 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %58, i32 0, i32 3
  %59 = load i64, i64* %xhv_max67, align 8
  %add68 = add i64 %59, 1
  %arrayidx69 = getelementptr inbounds %struct.he*, %struct.he** %56, i64 %add68
  %60 = bitcast %struct.he** %arrayidx69 to %struct.xpvhv_aux*
  %xhv_name_u70 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %60, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u70 to %struct.hek***
  %61 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx71 = getelementptr inbounds %struct.hek*, %struct.hek** %61, i64 0
  %62 = load %struct.hek*, %struct.hek** %arrayidx71, align 8
  br label %cond.end116

cond.false72:                                     ; preds = %cond.true53
  %63 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u73 = getelementptr inbounds %struct.hv, %struct.hv* %63, i32 0, i32 3
  %svu_hash74 = bitcast %union.anon.5* %sv_u73 to %struct.he***
  %64 = load %struct.he**, %struct.he*** %svu_hash74, align 8
  %65 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any75 = getelementptr inbounds %struct.hv, %struct.hv* %65, i32 0, i32 0
  %66 = load %struct.xpvhv*, %struct.xpvhv** %sv_any75, align 8
  %xhv_max76 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %66, i32 0, i32 3
  %67 = load i64, i64* %xhv_max76, align 8
  %add77 = add i64 %67, 1
  %arrayidx78 = getelementptr inbounds %struct.he*, %struct.he** %64, i64 %add77
  %68 = bitcast %struct.he** %arrayidx78 to %struct.xpvhv_aux*
  %xhv_name_count79 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %68, i32 0, i32 4
  %69 = load i32, i32* %xhv_name_count79, align 4
  %cmp80 = icmp slt i32 %69, -1
  br i1 %cmp80, label %cond.true82, label %cond.false92

cond.true82:                                      ; preds = %cond.false72
  %70 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u83 = getelementptr inbounds %struct.hv, %struct.hv* %70, i32 0, i32 3
  %svu_hash84 = bitcast %union.anon.5* %sv_u83 to %struct.he***
  %71 = load %struct.he**, %struct.he*** %svu_hash84, align 8
  %72 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any85 = getelementptr inbounds %struct.hv, %struct.hv* %72, i32 0, i32 0
  %73 = load %struct.xpvhv*, %struct.xpvhv** %sv_any85, align 8
  %xhv_max86 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %73, i32 0, i32 3
  %74 = load i64, i64* %xhv_max86, align 8
  %add87 = add i64 %74, 1
  %arrayidx88 = getelementptr inbounds %struct.he*, %struct.he** %71, i64 %add87
  %75 = bitcast %struct.he** %arrayidx88 to %struct.xpvhv_aux*
  %xhv_name_u89 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %75, i32 0, i32 0
  %xhvnameu_names90 = bitcast %union._xhvnameu* %xhv_name_u89 to %struct.hek***
  %76 = load %struct.hek**, %struct.hek*** %xhvnameu_names90, align 8
  %arrayidx91 = getelementptr inbounds %struct.hek*, %struct.hek** %76, i64 1
  %77 = load %struct.hek*, %struct.hek** %arrayidx91, align 8
  br label %cond.end114

cond.false92:                                     ; preds = %cond.false72
  %78 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u93 = getelementptr inbounds %struct.hv, %struct.hv* %78, i32 0, i32 3
  %svu_hash94 = bitcast %union.anon.5* %sv_u93 to %struct.he***
  %79 = load %struct.he**, %struct.he*** %svu_hash94, align 8
  %80 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any95 = getelementptr inbounds %struct.hv, %struct.hv* %80, i32 0, i32 0
  %81 = load %struct.xpvhv*, %struct.xpvhv** %sv_any95, align 8
  %xhv_max96 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %81, i32 0, i32 3
  %82 = load i64, i64* %xhv_max96, align 8
  %add97 = add i64 %82, 1
  %arrayidx98 = getelementptr inbounds %struct.he*, %struct.he** %79, i64 %add97
  %83 = bitcast %struct.he** %arrayidx98 to %struct.xpvhv_aux*
  %xhv_name_count99 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %83, i32 0, i32 4
  %84 = load i32, i32* %xhv_name_count99, align 4
  %cmp100 = icmp eq i32 %84, -1
  br i1 %cmp100, label %cond.true102, label %cond.false103

cond.true102:                                     ; preds = %cond.false92
  br label %cond.end112

cond.false103:                                    ; preds = %cond.false92
  %85 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u104 = getelementptr inbounds %struct.hv, %struct.hv* %85, i32 0, i32 3
  %svu_hash105 = bitcast %union.anon.5* %sv_u104 to %struct.he***
  %86 = load %struct.he**, %struct.he*** %svu_hash105, align 8
  %87 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any106 = getelementptr inbounds %struct.hv, %struct.hv* %87, i32 0, i32 0
  %88 = load %struct.xpvhv*, %struct.xpvhv** %sv_any106, align 8
  %xhv_max107 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %88, i32 0, i32 3
  %89 = load i64, i64* %xhv_max107, align 8
  %add108 = add i64 %89, 1
  %arrayidx109 = getelementptr inbounds %struct.he*, %struct.he** %86, i64 %add108
  %90 = bitcast %struct.he** %arrayidx109 to %struct.xpvhv_aux*
  %xhv_name_u110 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %90, i32 0, i32 0
  %xhvnameu_name111 = bitcast %union._xhvnameu* %xhv_name_u110 to %struct.hek**
  %91 = load %struct.hek*, %struct.hek** %xhvnameu_name111, align 8
  br label %cond.end112

cond.end112:                                      ; preds = %cond.false103, %cond.true102
  %cond113 = phi %struct.hek* [ null, %cond.true102 ], [ %91, %cond.false103 ]
  br label %cond.end114

cond.end114:                                      ; preds = %cond.end112, %cond.true82
  %cond115 = phi %struct.hek* [ %77, %cond.true82 ], [ %cond113, %cond.end112 ]
  br label %cond.end116

cond.end116:                                      ; preds = %cond.end114, %cond.true63
  %cond117 = phi %struct.hek* [ %62, %cond.true63 ], [ %cond115, %cond.end114 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond117, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool118 = icmp ne i8* %arraydecay, null
  br i1 %tobool118, label %cond.true120, label %cond.false149

cond.false119:                                    ; preds = %land.lhs.true44, %land.lhs.true39, %land.lhs.true35
  br i1 false, label %cond.true120, label %cond.false149

cond.true120:                                     ; preds = %cond.false119, %cond.end116
  %92 = load %struct.hv*, %struct.hv** %hv, align 8
  %93 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_any121 = getelementptr inbounds %struct.gv, %struct.gv* %93, i32 0, i32 0
  %94 = load %struct.xpvgv*, %struct.xpvgv** %sv_any121, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %94, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %95 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key122 = getelementptr inbounds %struct.hek, %struct.hek* %95, i32 0, i32 2
  %arraydecay123 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key122, i64 0, i64 0
  %96 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_any124 = getelementptr inbounds %struct.gv, %struct.gv* %96, i32 0, i32 0
  %97 = load %struct.xpvgv*, %struct.xpvgv** %sv_any124, align 8
  %xiv_u125 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %97, i32 0, i32 4
  %xivu_namehek126 = bitcast %union._xivu* %xiv_u125 to %struct.hek**
  %98 = load %struct.hek*, %struct.hek** %xivu_namehek126, align 8
  %hek_key127 = getelementptr inbounds %struct.hek, %struct.hek* %98, i32 0, i32 2
  %arraydecay128 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key127, i64 0, i64 0
  %99 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_any129 = getelementptr inbounds %struct.gv, %struct.gv* %99, i32 0, i32 0
  %100 = load %struct.xpvgv*, %struct.xpvgv** %sv_any129, align 8
  %xiv_u130 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %100, i32 0, i32 4
  %xivu_namehek131 = bitcast %union._xivu* %xiv_u130 to %struct.hek**
  %101 = load %struct.hek*, %struct.hek** %xivu_namehek131, align 8
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %101, i32 0, i32 1
  %102 = load i32, i32* %hek_len, align 4
  %idx.ext = sext i32 %102 to i64
  %add.ptr132 = getelementptr inbounds i8, i8* %arraydecay128, i64 %idx.ext
  %add.ptr133 = getelementptr inbounds i8, i8* %add.ptr132, i64 1
  %103 = load i8, i8* %add.ptr133, align 1
  %conv134 = zext i8 %103 to i32
  %and135 = and i32 %conv134, 1
  %tobool136 = icmp ne i32 %and135, 0
  br i1 %tobool136, label %cond.true137, label %cond.false142

cond.true137:                                     ; preds = %cond.true120
  %104 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_any138 = getelementptr inbounds %struct.gv, %struct.gv* %104, i32 0, i32 0
  %105 = load %struct.xpvgv*, %struct.xpvgv** %sv_any138, align 8
  %xiv_u139 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %105, i32 0, i32 4
  %xivu_namehek140 = bitcast %union._xivu* %xiv_u139 to %struct.hek**
  %106 = load %struct.hek*, %struct.hek** %xivu_namehek140, align 8
  %hek_len141 = getelementptr inbounds %struct.hek, %struct.hek* %106, i32 0, i32 1
  %107 = load i32, i32* %hek_len141, align 4
  %sub = sub nsw i32 0, %107
  br label %cond.end147

cond.false142:                                    ; preds = %cond.true120
  %108 = load %struct.gv*, %struct.gv** %egv, align 8
  %sv_any143 = getelementptr inbounds %struct.gv, %struct.gv* %108, i32 0, i32 0
  %109 = load %struct.xpvgv*, %struct.xpvgv** %sv_any143, align 8
  %xiv_u144 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %109, i32 0, i32 4
  %xivu_namehek145 = bitcast %union._xivu* %xiv_u144 to %struct.hek**
  %110 = load %struct.hek*, %struct.hek** %xivu_namehek145, align 8
  %hek_len146 = getelementptr inbounds %struct.hek, %struct.hek* %110, i32 0, i32 1
  %111 = load i32, i32* %hek_len146, align 4
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false142, %cond.true137
  %cond148 = phi i32 [ %sub, %cond.true137 ], [ %111, %cond.false142 ]
  %call = call i8* @Perl_hv_common_key_len(%struct.hv* %92, i8* %arraydecay123, i32 %cond148, i32 32, %struct.sv* null, i32 0)
  %112 = bitcast i8* %call to %struct.sv**
  %113 = bitcast %struct.sv** %112 to %struct.gv**
  br label %cond.end150

cond.false149:                                    ; preds = %cond.false119, %cond.end116, %cond.end32
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false149, %cond.end147
  %cond151 = phi %struct.gv** [ %113, %cond.end147 ], [ null, %cond.false149 ]
  store %struct.gv** %cond151, %struct.gv*** %gvp, align 8
  %114 = load %struct.gv**, %struct.gv*** %gvp, align 8
  %tobool152 = icmp ne %struct.gv** %114, null
  br i1 %tobool152, label %land.lhs.true153, label %if.else

land.lhs.true153:                                 ; preds = %cond.end150
  %115 = load %struct.gv**, %struct.gv*** %gvp, align 8
  %116 = load %struct.gv*, %struct.gv** %115, align 8
  %117 = load %struct.gv*, %struct.gv** %egv, align 8
  %cmp154 = icmp eq %struct.gv* %116, %117
  br i1 %cmp154, label %if.then156, label %if.else

if.then156:                                       ; preds = %land.lhs.true153
  %118 = load %struct.sv*, %struct.sv** %targ, align 8
  %119 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %118, %struct.gv* %119, i8* null, i1 zeroext true)
  br label %do.body

do.body:                                          ; preds = %if.then156
  br label %do.body157

do.body157:                                       ; preds = %do.body
  %120 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags158 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags158, align 4
  %and159 = and i32 %121, 4194304
  %tobool160 = icmp ne i32 %and159, 0
  br i1 %tobool160, label %cond.true161, label %cond.false162

cond.true161:                                     ; preds = %do.body157
  br i1 true, label %if.then163, label %if.end165

cond.false162:                                    ; preds = %do.body157
  br i1 false, label %if.then163, label %if.end165

if.then163:                                       ; preds = %cond.false162, %cond.true161
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %call164 = call i32 @Perl_mg_set(%struct.sv* %122)
  br label %if.end165

if.end165:                                        ; preds = %if.then163, %cond.false162, %cond.true161
  br label %do.end

do.end:                                           ; preds = %if.end165
  br label %do.body166

do.body166:                                       ; preds = %do.end
  br label %do.body167

do.body167:                                       ; preds = %do.body166
  %123 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %124 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %123 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %124 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp168 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp168, label %cond.true170, label %cond.false171

cond.true170:                                     ; preds = %do.body167
  br i1 true, label %if.then172, label %if.end174

cond.false171:                                    ; preds = %do.body167
  br i1 false, label %if.then172, label %if.end174

if.then172:                                       ; preds = %cond.false171, %cond.true170
  %125 = load %struct.sv**, %struct.sv*** %sp, align 8
  %126 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call173 = call %struct.sv** @Perl_stack_grow(%struct.sv** %125, %struct.sv** %126, i64 1)
  store %struct.sv** %call173, %struct.sv*** %sp, align 8
  %127 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end174

if.end174:                                        ; preds = %if.then172, %cond.false171, %cond.true170
  br label %do.end175

do.end175:                                        ; preds = %if.end174
  %128 = load %struct.sv*, %struct.sv** %targ, align 8
  %129 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr176 = getelementptr inbounds %struct.sv*, %struct.sv** %129, i32 1
  store %struct.sv** %incdec.ptr176, %struct.sv*** %sp, align 8
  store %struct.sv* %128, %struct.sv** %incdec.ptr176, align 8
  br label %do.end177

do.end177:                                        ; preds = %do.end175
  br label %do.end178

do.end178:                                        ; preds = %do.end177
  br label %if.end197

if.else:                                          ; preds = %land.lhs.true153, %cond.end150
  br label %do.body179

do.body179:                                       ; preds = %if.else
  br label %do.body180

do.body180:                                       ; preds = %do.body179
  %130 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %131 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast181 = ptrtoint %struct.sv** %130 to i64
  %sub.ptr.rhs.cast182 = ptrtoint %struct.sv** %131 to i64
  %sub.ptr.sub183 = sub i64 %sub.ptr.lhs.cast181, %sub.ptr.rhs.cast182
  %sub.ptr.div184 = sdiv exact i64 %sub.ptr.sub183, 8
  %cmp185 = icmp slt i64 %sub.ptr.div184, 1
  br i1 %cmp185, label %cond.true187, label %cond.false188

cond.true187:                                     ; preds = %do.body180
  br i1 true, label %if.then189, label %if.end191

cond.false188:                                    ; preds = %do.body180
  br i1 false, label %if.then189, label %if.end191

if.then189:                                       ; preds = %cond.false188, %cond.true187
  %132 = load %struct.sv**, %struct.sv*** %sp, align 8
  %133 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call190 = call %struct.sv** @Perl_stack_grow(%struct.sv** %132, %struct.sv** %133, i64 1)
  store %struct.sv** %call190, %struct.sv*** %sp, align 8
  %134 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end191

if.end191:                                        ; preds = %if.then189, %cond.false188, %cond.true187
  br label %do.end192

do.end192:                                        ; preds = %if.end191
  %135 = load %struct.gv*, %struct.gv** %egv, align 8
  %136 = bitcast %struct.gv* %135 to i8*
  %137 = bitcast i8* %136 to %struct.sv*
  %call193 = call %struct.sv* @Perl_newRV(%struct.sv* %137)
  %call194 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call193)
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr195 = getelementptr inbounds %struct.sv*, %struct.sv** %138, i32 1
  store %struct.sv** %incdec.ptr195, %struct.sv*** %sp, align 8
  store %struct.sv* %call194, %struct.sv** %incdec.ptr195, align 8
  br label %do.end196

do.end196:                                        ; preds = %do.end192
  br label %if.end197

if.end197:                                        ; preds = %do.end196, %do.end178
  %139 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %tobool198 = icmp ne %struct.gv* %139, null
  br i1 %tobool198, label %if.then199, label %if.end225

if.then199:                                       ; preds = %if.end197
  %140 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %tobool200 = icmp ne %struct.gv* %140, null
  br i1 %tobool200, label %land.lhs.true201, label %cond.false221

land.lhs.true201:                                 ; preds = %if.then199
  %141 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %142 = bitcast %struct.gv* %141 to %struct.sv*
  %sv_flags202 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 2
  %143 = load i32, i32* %sv_flags202, align 4
  %and203 = and i32 %143, 255
  %cmp204 = icmp eq i32 %and203, 9
  br i1 %cmp204, label %land.lhs.true211, label %lor.lhs.false206

lor.lhs.false206:                                 ; preds = %land.lhs.true201
  %144 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %145 = bitcast %struct.gv* %144 to %struct.sv*
  %sv_flags207 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 2
  %146 = load i32, i32* %sv_flags207, align 4
  %and208 = and i32 %146, 255
  %cmp209 = icmp eq i32 %and208, 10
  br i1 %cmp209, label %land.lhs.true211, label %cond.false221

land.lhs.true211:                                 ; preds = %lor.lhs.false206, %land.lhs.true201
  %147 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %sv_u212 = getelementptr inbounds %struct.gv, %struct.gv* %147, i32 0, i32 3
  %svu_gp213 = bitcast %union.anon.4* %sv_u212 to %struct.gp**
  %148 = load %struct.gp*, %struct.gp** %svu_gp213, align 8
  %add.ptr214 = getelementptr inbounds %struct.gp, %struct.gp* %148, i64 0
  %tobool215 = icmp ne %struct.gp* %add.ptr214, null
  br i1 %tobool215, label %cond.true216, label %cond.false221

cond.true216:                                     ; preds = %land.lhs.true211
  %149 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %sv_u217 = getelementptr inbounds %struct.gv, %struct.gv* %149, i32 0, i32 3
  %svu_gp218 = bitcast %union.anon.4* %sv_u217 to %struct.gp**
  %150 = load %struct.gp*, %struct.gp** %svu_gp218, align 8
  %add.ptr219 = getelementptr inbounds %struct.gp, %struct.gp* %150, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr219, i32 0, i32 1
  %151 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool220 = icmp ne %struct.io* %151, null
  br i1 %tobool220, label %if.end224, label %if.then222

cond.false221:                                    ; preds = %land.lhs.true211, %lor.lhs.false206, %if.then199
  br i1 false, label %if.end224, label %if.then222

if.then222:                                       ; preds = %cond.false221, %cond.true216
  %152 = load %struct.gv*, %struct.gv** %newdefout, align 8
  %call223 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %152, i32 15)
  br label %if.end224

if.end224:                                        ; preds = %if.then222, %cond.false221, %cond.true216
  %153 = load %struct.gv*, %struct.gv** %newdefout, align 8
  call void @Perl_setdefout(%struct.gv* %153)
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.end197
  %154 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %154, %struct.sv*** @PL_stack_sp, align 8
  %155 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %155, i32 0, i32 0
  %156 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %156
}

declare dso_local i8* @Perl_hv_common_key_len(%struct.hv*, i8*, i32, i32, %struct.sv*, i32) #1

declare dso_local void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_getc() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %mg = alloca %struct.magic*, align 8
  %gimme = alloca i32, align 4
  %len = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %tobool = icmp ne %struct.sv* %8, null
  br i1 %tobool, label %cond.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %tobool2 = icmp ne %struct.sv* %10, null
  br i1 %tobool2, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true, %entry
  %11 = load %struct.gv*, %struct.gv** @PL_stdingv, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %12, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %14 = bitcast %struct.sv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.gv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %11, %cond.true ], [ %15, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool4 = icmp ne %struct.gv* %16, null
  br i1 %tobool4, label %land.lhs.true5, label %cond.false20

land.lhs.true5:                                   ; preds = %cond.end
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %18 = bitcast %struct.gv* %17 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and6 = and i32 %19, 255
  %cmp7 = icmp eq i32 %and6, 9
  br i1 %cmp7, label %land.lhs.true14, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %land.lhs.true5
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %21 = bitcast %struct.gv* %20 to %struct.sv*
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %22, 255
  %cmp12 = icmp eq i32 %and11, 10
  br i1 %cmp12, label %land.lhs.true14, label %cond.false20

land.lhs.true14:                                  ; preds = %lor.lhs.false9, %land.lhs.true5
  %23 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %23, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %24 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %24, i64 0
  %tobool15 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool15, label %cond.true16, label %cond.false20

cond.true16:                                      ; preds = %land.lhs.true14
  %25 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u17 = getelementptr inbounds %struct.gv, %struct.gv* %25, i32 0, i32 3
  %svu_gp18 = bitcast %union.anon.4* %sv_u17 to %struct.gp**
  %26 = load %struct.gp*, %struct.gp** %svu_gp18, align 8
  %add.ptr19 = getelementptr inbounds %struct.gp, %struct.gp* %26, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr19, i32 0, i32 1
  %27 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end21

cond.false20:                                     ; preds = %land.lhs.true14, %lor.lhs.false9, %cond.end
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true16
  %cond22 = phi %struct.io* [ %27, %cond.true16 ], [ null, %cond.false20 ]
  store %struct.io* %cond22, %struct.io** %io, align 8
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private23 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private23, align 1
  %conv24 = zext i8 %29 to i32
  %and25 = and i32 %conv24, 15
  %cmp26 = icmp eq i32 %and25, 0
  br i1 %cmp26, label %if.then, label %if.end33

if.then:                                          ; preds = %cond.end21
  br label %do.body

do.body:                                          ; preds = %if.then
  %30 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %30 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %31 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp28 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %do.body
  br i1 true, label %if.then32, label %if.end

cond.false31:                                     ; preds = %do.body
  br i1 false, label %if.then32, label %if.end

if.then32:                                        ; preds = %cond.false31, %cond.true30
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %32, %struct.sv** %33, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then32, %cond.false31, %cond.true30
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end33

if.end33:                                         ; preds = %do.end, %cond.end21
  %35 = load %struct.io*, %struct.io** %io, align 8
  %tobool34 = icmp ne %struct.io* %35, null
  br i1 %tobool34, label %if.then35, label %if.end87

if.then35:                                        ; preds = %if.end33
  %36 = load %struct.io*, %struct.io** %io, align 8
  %37 = bitcast %struct.io* %36 to %struct.sv*
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %38, 8388608
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false41

cond.true39:                                      ; preds = %if.then35
  %39 = load %struct.io*, %struct.io** %io, align 8
  %40 = bitcast %struct.io* %39 to %struct.sv*
  %call40 = call %struct.magic* @Perl_mg_find(%struct.sv* %40, i32 113)
  br label %cond.end42

cond.false41:                                     ; preds = %if.then35
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false41, %cond.true39
  %cond43 = phi %struct.magic* [ %call40, %cond.true39 ], [ null, %cond.false41 ]
  store %struct.magic* %cond43, %struct.magic** %mg, align 8
  %41 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool44 = icmp ne %struct.magic* %41, null
  br i1 %tobool44, label %if.then45, label %if.end86

if.then45:                                        ; preds = %cond.end42
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 5
  %43 = load i8, i8* %op_flags, align 2
  %conv46 = zext i8 %43 to i32
  %and47 = and i32 %conv46, 3
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %cond.true49, label %cond.false53

cond.true49:                                      ; preds = %if.then45
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags50 = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 5
  %45 = load i8, i8* %op_flags50, align 2
  %conv51 = zext i8 %45 to i32
  %and52 = and i32 %conv51, 3
  br label %cond.end55

cond.false53:                                     ; preds = %if.then45
  %call54 = call i32 @Perl_block_gimme()
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false53, %cond.true49
  %cond56 = phi i32 [ %and52, %cond.true49 ], [ %call54, %cond.false53 ]
  store i32 %cond56, i32* %gimme, align 4
  %46 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 24), align 16
  %tobool57 = icmp ne %struct.sv* %46, null
  br i1 %tobool57, label %cond.true58, label %cond.false59

cond.true58:                                      ; preds = %cond.end55
  %47 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 24), align 16
  br label %cond.end61

cond.false59:                                     ; preds = %cond.end55
  %call60 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0), i32 0)
  store %struct.sv* %call60, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 24), align 16
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false59, %cond.true58
  %cond62 = phi %struct.sv* [ %47, %cond.true58 ], [ %call60, %cond.false59 ]
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %49 = load %struct.io*, %struct.io** %io, align 8
  %50 = bitcast %struct.io* %49 to i8*
  %51 = bitcast i8* %50 to %struct.sv*
  %52 = load %struct.magic*, %struct.magic** %mg, align 8
  %53 = load i32, i32* %gimme, align 4
  %call63 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond62, %struct.sv** %48, %struct.sv* %51, %struct.magic* %52, i32 %53, i32 0)
  %54 = load i32, i32* %gimme, align 4
  %cmp64 = icmp eq i32 %54, 2
  br i1 %cmp64, label %if.then66, label %if.end85

if.then66:                                        ; preds = %cond.end61
  %55 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %55, %struct.sv*** %sp, align 8
  br label %do.body67

do.body67:                                        ; preds = %if.then66
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %58 = load %struct.sv*, %struct.sv** %57, align 8
  %cmp68 = icmp ne %struct.sv* %56, %58
  br i1 %cmp68, label %cond.true70, label %cond.false71

cond.true70:                                      ; preds = %do.body67
  br i1 true, label %if.then72, label %if.end83

cond.false71:                                     ; preds = %do.body67
  br i1 false, label %if.then72, label %if.end83

if.then72:                                        ; preds = %cond.false71, %cond.true70
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %59, %struct.sv* %61, i32 1554)
  br label %do.body73

do.body73:                                        ; preds = %if.then72
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %63, 4194304
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %cond.true77, label %cond.false78

cond.true77:                                      ; preds = %do.body73
  br i1 true, label %if.then79, label %if.end81

cond.false78:                                     ; preds = %do.body73
  br i1 false, label %if.then79, label %if.end81

if.then79:                                        ; preds = %cond.false78, %cond.true77
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %call80 = call i32 @Perl_mg_set(%struct.sv* %64)
  br label %if.end81

if.end81:                                         ; preds = %if.then79, %cond.false78, %cond.true77
  br label %do.end82

do.end82:                                         ; preds = %if.end81
  br label %if.end83

if.end83:                                         ; preds = %do.end82, %cond.false71, %cond.true70
  br label %do.end84

do.end84:                                         ; preds = %if.end83
  br label %if.end85

if.end85:                                         ; preds = %do.end84, %cond.end61
  %65 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 0
  %66 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %66, %struct.op** %retval, align 8
  br label %return

if.end86:                                         ; preds = %cond.end42
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.end33
  %67 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool88 = icmp ne %struct.gv* %67, null
  br i1 %tobool88, label %lor.lhs.false89, label %if.then92

lor.lhs.false89:                                  ; preds = %if.end87
  %68 = load %struct.gv*, %struct.gv** %gv, align 8
  %call90 = call zeroext i1 @Perl_do_eof(%struct.gv* %68)
  br i1 %call90, label %if.then92, label %if.end106

if.then92:                                        ; preds = %lor.lhs.false89, %if.end87
  %69 = load %struct.io*, %struct.io** %io, align 8
  %tobool93 = icmp ne %struct.io* %69, null
  br i1 %tobool93, label %lor.lhs.false94, label %if.then101

lor.lhs.false94:                                  ; preds = %if.then92
  %70 = load %struct.io*, %struct.io** %io, align 8
  %sv_u95 = getelementptr inbounds %struct.io, %struct.io* %70, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u95 to %struct._PerlIO***
  %71 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool96 = icmp ne %struct._PerlIO** %71, null
  br i1 %tobool96, label %if.end102, label %land.lhs.true97

land.lhs.true97:                                  ; preds = %lor.lhs.false94
  %72 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %72, i32 0, i32 0
  %73 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %73, i32 0, i32 16
  %74 = load i8, i8* %xio_type, align 8
  %conv98 = sext i8 %74 to i32
  %cmp99 = icmp ne i32 %conv98, 62
  br i1 %cmp99, label %if.then101, label %if.end102

if.then101:                                       ; preds = %land.lhs.true97, %if.then92
  %75 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %75)
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %land.lhs.true97, %lor.lhs.false94
  %call103 = call i32* @__errno_location() #9
  store i32 9, i32* %call103, align 4
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr104 = getelementptr inbounds %struct.sv*, %struct.sv** %76, i32 1
  store %struct.sv** %incdec.ptr104, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr104, align 8
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %77, %struct.sv*** @PL_stack_sp, align 8
  %78 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next105 = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 0
  %79 = load %struct.op*, %struct.op** %op_next105, align 8
  store %struct.op* %79, %struct.op** %retval, align 8
  br label %return

if.end106:                                        ; preds = %lor.lhs.false89
  store i8 1, i8* @PL_tainted, align 1
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setpvn(%struct.sv* %80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), i64 1)
  %81 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u107 = getelementptr inbounds %struct.gv, %struct.gv* %81, i32 0, i32 3
  %svu_gp108 = bitcast %union.anon.4* %sv_u107 to %struct.gp**
  %82 = load %struct.gp*, %struct.gp** %svu_gp108, align 8
  %add.ptr109 = getelementptr inbounds %struct.gp, %struct.gp* %82, i64 0
  %gp_io110 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr109, i32 0, i32 1
  %83 = load %struct.io*, %struct.io** %gp_io110, align 8
  %sv_u111 = getelementptr inbounds %struct.io, %struct.io* %83, i32 0, i32 3
  %svu_fp112 = bitcast %union.anon.2* %sv_u111 to %struct._PerlIO***
  %84 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp112, align 8
  %call113 = call i32 @PerlIO_getc(%struct._PerlIO** %84)
  %conv114 = trunc i32 %call113 to i8
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u115 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u115 to i8**
  %86 = load i8*, i8** %svu_pv, align 8
  store i8 %conv114, i8* %86, align 1
  %87 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u116 = getelementptr inbounds %struct.gv, %struct.gv* %87, i32 0, i32 3
  %svu_gp117 = bitcast %union.anon.4* %sv_u116 to %struct.gp**
  %88 = load %struct.gp*, %struct.gp** %svu_gp117, align 8
  %add.ptr118 = getelementptr inbounds %struct.gp, %struct.gp* %88, i64 0
  %gp_io119 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr118, i32 0, i32 1
  %89 = load %struct.io*, %struct.io** %gp_io119, align 8
  %sv_u120 = getelementptr inbounds %struct.io, %struct.io* %89, i32 0, i32 3
  %svu_fp121 = bitcast %union.anon.2* %sv_u120 to %struct._PerlIO***
  %90 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp121, align 8
  %call122 = call i32 @PerlIO_isutf8(%struct._PerlIO** %90)
  %tobool123 = icmp ne i32 %call122, 0
  br i1 %tobool123, label %if.then124, label %if.else

if.then124:                                       ; preds = %if.end106
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u125 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 3
  %svu_pv126 = bitcast %union.anon* %sv_u125 to i8**
  %92 = load i8*, i8** %svu_pv126, align 8
  %add.ptr127 = getelementptr inbounds i8, i8* %92, i64 0
  %93 = load i8, i8* %add.ptr127, align 1
  %idxprom = zext i8 %93 to i64
  %arrayidx128 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %94 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %94 to i64
  store i64 %conv129, i64* %len, align 8
  %95 = load i64, i64* %len, align 8
  %cmp130 = icmp ugt i64 %95, 1
  br i1 %cmp130, label %if.then132, label %if.end162

if.then132:                                       ; preds = %if.then124
  %96 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags133 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags133, align 4
  %and134 = and i32 %97, 268435456
  %tobool135 = icmp ne i32 %and134, 0
  br i1 %tobool135, label %cond.true140, label %lor.lhs.false136

lor.lhs.false136:                                 ; preds = %if.then132
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any137 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 0
  %99 = load i8*, i8** %sv_any137, align 8
  %100 = bitcast i8* %99 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %100, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.16* %xpv_len_u to i64*
  %101 = load i64, i64* %xpvlenu_len, align 8
  %102 = load i64, i64* %len, align 8
  %add = add i64 %102, 1
  %cmp138 = icmp ult i64 %101, %add
  br i1 %cmp138, label %cond.true140, label %cond.false143

cond.true140:                                     ; preds = %lor.lhs.false136, %if.then132
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %104 = load i64, i64* %len, align 8
  %add141 = add i64 %104, 1
  %call142 = call i8* @Perl_sv_grow(%struct.sv* %103, i64 %add141)
  br label %cond.end146

cond.false143:                                    ; preds = %lor.lhs.false136
  %105 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u144 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 3
  %svu_pv145 = bitcast %union.anon* %sv_u144 to i8**
  %106 = load i8*, i8** %svu_pv145, align 8
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false143, %cond.true140
  %cond147 = phi i8* [ %call142, %cond.true140 ], [ %106, %cond.false143 ]
  %107 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u148 = getelementptr inbounds %struct.gv, %struct.gv* %107, i32 0, i32 3
  %svu_gp149 = bitcast %union.anon.4* %sv_u148 to %struct.gp**
  %108 = load %struct.gp*, %struct.gp** %svu_gp149, align 8
  %add.ptr150 = getelementptr inbounds %struct.gp, %struct.gp* %108, i64 0
  %gp_io151 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr150, i32 0, i32 1
  %109 = load %struct.io*, %struct.io** %gp_io151, align 8
  %sv_u152 = getelementptr inbounds %struct.io, %struct.io* %109, i32 0, i32 3
  %svu_fp153 = bitcast %union.anon.2* %sv_u152 to %struct._PerlIO***
  %110 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp153, align 8
  %111 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u154 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 3
  %svu_pv155 = bitcast %union.anon* %sv_u154 to i8**
  %112 = load i8*, i8** %svu_pv155, align 8
  %add.ptr156 = getelementptr inbounds i8, i8* %112, i64 1
  %113 = load i64, i64* %len, align 8
  %sub = sub i64 %113, 1
  %call157 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %110, i8* %add.ptr156, i64 %sub)
  store i64 %call157, i64* %len, align 8
  br label %do.body158

do.body158:                                       ; preds = %cond.end146
  %114 = load i64, i64* %len, align 8
  %add159 = add i64 1, %114
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any160 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 0
  %116 = load i8*, i8** %sv_any160, align 8
  %117 = bitcast i8* %116 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %117, i32 0, i32 2
  store i64 %add159, i64* %xpv_cur, align 8
  br label %do.end161

do.end161:                                        ; preds = %do.body158
  br label %if.end162

if.end162:                                        ; preds = %do.end161, %if.then124
  %118 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 2
  %119 = load i32, i32* %sv_flags163, align 4
  %or = or i32 %119, 536870912
  store i32 %or, i32* %sv_flags163, align 4
  br label %if.end166

if.else:                                          ; preds = %if.end106
  %120 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %121, -536870913
  store i32 %and165, i32* %sv_flags164, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.else, %if.end162
  br label %do.body167

do.body167:                                       ; preds = %if.end166
  br label %do.body168

do.body168:                                       ; preds = %do.body167
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags169 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags169, align 4
  %and170 = and i32 %123, 4194304
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %cond.true172, label %cond.false173

cond.true172:                                     ; preds = %do.body168
  br i1 true, label %if.then174, label %if.end176

cond.false173:                                    ; preds = %do.body168
  br i1 false, label %if.then174, label %if.end176

if.then174:                                       ; preds = %cond.false173, %cond.true172
  %124 = load %struct.sv*, %struct.sv** %targ, align 8
  %call175 = call i32 @Perl_mg_set(%struct.sv* %124)
  br label %if.end176

if.end176:                                        ; preds = %if.then174, %cond.false173, %cond.true172
  br label %do.end177

do.end177:                                        ; preds = %if.end176
  %125 = load %struct.sv*, %struct.sv** %targ, align 8
  %126 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr178 = getelementptr inbounds %struct.sv*, %struct.sv** %126, i32 1
  store %struct.sv** %incdec.ptr178, %struct.sv*** %sp, align 8
  store %struct.sv* %125, %struct.sv** %incdec.ptr178, align 8
  br label %do.end179

do.end179:                                        ; preds = %do.end177
  %127 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %127, %struct.sv*** @PL_stack_sp, align 8
  %128 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next180 = getelementptr inbounds %struct.op, %struct.op* %128, i32 0, i32 0
  %129 = load %struct.op*, %struct.op** %op_next180, align 8
  store %struct.op* %129, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end179, %if.end102, %if.end85
  %130 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %130
}

declare dso_local zeroext i1 @Perl_do_eof(%struct.gv*) #1

declare dso_local i32 @PerlIO_getc(%struct._PerlIO**) #1

declare dso_local i32 @PerlIO_isutf8(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_enterwrite() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %fgv = alloca %struct.gv*, align 8
  %cv = alloca %struct.cv*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store %struct.cv* null, %struct.cv** %cv, align 8
  store %struct.sv* null, %struct.sv** %tmpsv, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp2 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then4, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then4, label %if.end

if.then4:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %5, %struct.sv** %6, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %8 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  store %struct.gv* %8, %struct.gv** %gv, align 8
  br label %if.end7

if.else:                                          ; preds = %entry
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %11 = bitcast %struct.sv* %10 to i8*
  %12 = bitcast i8* %11 to %struct.gv*
  store %struct.gv* %12, %struct.gv** %gv, align 8
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %13, null
  br i1 %tobool, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.else
  %14 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  store %struct.gv* %14, %struct.gv** %gv, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %do.end
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool8 = icmp ne %struct.gv* %15, null
  br i1 %tobool8, label %land.lhs.true, label %cond.false22

land.lhs.true:                                    ; preds = %if.end7
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %17 = bitcast %struct.gv* %16 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %18, 255
  %cmp10 = icmp eq i32 %and9, 9
  br i1 %cmp10, label %land.lhs.true16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %20 = bitcast %struct.gv* %19 to %struct.sv*
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %21, 255
  %cmp14 = icmp eq i32 %and13, 10
  br i1 %cmp14, label %land.lhs.true16, label %cond.false22

land.lhs.true16:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %tobool17 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool17, label %cond.true18, label %cond.false22

cond.true18:                                      ; preds = %land.lhs.true16
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u19 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp20 = bitcast %union.anon.4* %sv_u19 to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp20, align 8
  %add.ptr21 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr21, i32 0, i32 1
  %26 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false22:                                     ; preds = %land.lhs.true16, %lor.lhs.false, %if.end7
  br label %cond.end

cond.end:                                         ; preds = %cond.false22, %cond.true18
  %cond = phi %struct.io* [ %26, %cond.true18 ], [ null, %cond.false22 ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %27 = load %struct.io*, %struct.io** %io, align 8
  %tobool23 = icmp ne %struct.io* %27, null
  br i1 %tobool23, label %if.end26, label %if.then24

if.then24:                                        ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr25 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 1
  store %struct.sv** %incdec.ptr25, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr25, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

if.end26:                                         ; preds = %cond.end
  %32 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %32, i32 0, i32 0
  %33 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_fmt_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %33, i32 0, i32 13
  %34 = load %struct.gv*, %struct.gv** %xio_fmt_gv, align 8
  %tobool27 = icmp ne %struct.gv* %34, null
  br i1 %tobool27, label %if.then28, label %if.else31

if.then28:                                        ; preds = %if.end26
  %35 = load %struct.io*, %struct.io** %io, align 8
  %sv_any29 = getelementptr inbounds %struct.io, %struct.io* %35, i32 0, i32 0
  %36 = load %struct.xpvio*, %struct.xpvio** %sv_any29, align 8
  %xio_fmt_gv30 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %36, i32 0, i32 13
  %37 = load %struct.gv*, %struct.gv** %xio_fmt_gv30, align 8
  store %struct.gv* %37, %struct.gv** %fgv, align 8
  br label %if.end32

if.else31:                                        ; preds = %if.end26
  %38 = load %struct.gv*, %struct.gv** %gv, align 8
  store %struct.gv* %38, %struct.gv** %fgv, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.else31, %if.then28
  %39 = load %struct.gv*, %struct.gv** %fgv, align 8
  %sv_u33 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 3
  %svu_gp34 = bitcast %union.anon.4* %sv_u33 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp34, align 8
  %add.ptr35 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr35, i32 0, i32 7
  %41 = load %struct.cv*, %struct.cv** %gp_form, align 8
  store %struct.cv* %41, %struct.cv** %cv, align 8
  %42 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool36 = icmp ne %struct.cv* %42, null
  br i1 %tobool36, label %if.end40, label %if.then37

if.then37:                                        ; preds = %if.end32
  %call38 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call38, %struct.sv** %tmpsv, align 8
  %43 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %44 = load %struct.gv*, %struct.gv** %fgv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %43, %struct.gv* %44, i8* null, i1 zeroext false)
  %45 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %46 = bitcast %struct.sv* %45 to i8*
  %call39 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.37, i64 0, i64 0), i8* %46)
  store %struct.op* %call39, %struct.op** %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.end32
  %47 = load %struct.io*, %struct.io** %io, align 8
  %sv_any41 = getelementptr inbounds %struct.io, %struct.io* %47, i32 0, i32 0
  %48 = load %struct.xpvio*, %struct.xpvio** %sv_any41, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %48, i32 0, i32 17
  %49 = load i8, i8* %xio_flags, align 1
  %conv42 = zext i8 %49 to i32
  %and43 = and i32 %conv42, -9
  %conv44 = trunc i32 %and43 to i8
  store i8 %conv44, i8* %xio_flags, align 1
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %50, %struct.sv*** @PL_stack_sp, align 8
  %51 = load %struct.cv*, %struct.cv** %cv, align 8
  %52 = load %struct.gv*, %struct.gv** %gv, align 8
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next45 = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 0
  %54 = load %struct.op*, %struct.op** %op_next45, align 8
  %call46 = call %struct.op* @S_doform(%struct.cv* %51, %struct.gv* %52, %struct.op* %54)
  store %struct.op* %call46, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end40, %if.then37, %if.then24
  %55 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %55
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_doform(%struct.cv* %cv, %struct.gv* %gv, %struct.op* %retop) #0 {
entry:
  %cv.addr = alloca %struct.cv*, align 8
  %gv.addr = alloca %struct.gv*, align 8
  %retop.addr = alloca %struct.op*, align 8
  %cx = alloca %struct.context*, align 8
  %gimme = alloca i32, align 4
  store %struct.cv* %cv, %struct.cv** %cv.addr, align 8
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store %struct.op* %retop, %struct.op** %retop.addr, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %3 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %4 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %4, i32 0, i32 0
  %5 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %6 = bitcast %struct.xpvcv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %7, i32 0, i32 12
  %8 = load i32, i32* %xcv_flags, align 4
  %and4 = and i32 %8, 32
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %9 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call6 = call %struct.cv* @Perl_cv_clone(%struct.cv* %9)
  %10 = bitcast %struct.cv* %call6 to i8*
  %11 = bitcast i8* %10 to %struct.sv*
  %call7 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %11)
  %12 = bitcast %struct.sv* %call7 to i8*
  %13 = bitcast i8* %12 to %struct.cv*
  store %struct.cv* %13, %struct.cv** %cv.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  call void @Perl_push_scope()
  call void @Perl_save_strlen(i64* @PL_tmps_floor)
  %14 = load i64, i64* @PL_tmps_ix, align 8
  store i64 %14, i64* @PL_tmps_floor, align 8
  %15 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %15, i32 0, i32 4
  %16 = load i32, i32* %si_cxix, align 8
  %17 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxmax = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %17, i32 0, i32 5
  %18 = load i32, i32* %si_cxmax, align 4
  %cmp = icmp slt i32 %16, %18
  br i1 %cmp, label %cond.true9, label %cond.false11

cond.true9:                                       ; preds = %if.end
  %19 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix10 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %19, i32 0, i32 4
  %20 = load i32, i32* %si_cxix10, align 8
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %si_cxix10, align 8
  br label %cond.end14

cond.false11:                                     ; preds = %if.end
  %call12 = call i32 @Perl_cxinc()
  %21 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix13 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %21, i32 0, i32 4
  store i32 %call12, i32* %si_cxix13, align 8
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false11, %cond.true9
  %cond15 = phi i32 [ %inc, %cond.true9 ], [ %call12, %cond.false11 ]
  %22 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %22, i32 0, i32 1
  %23 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %24 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix16 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %24, i32 0, i32 4
  %25 = load i32, i32* %si_cxix16, align 8
  %idxprom = sext i32 %25 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %23, i64 %idxprom
  store %struct.context* %arrayidx, %struct.context** %cx, align 8
  %26 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %26, i32 0, i32 0
  %cx_subst = bitcast %union.anon.19* %cx_u to %struct.subst*
  %sbu_type = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 0
  store i8 9, i8* %sbu_type, align 8
  %27 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %28 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %28 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv17 = trunc i64 %sub.ptr.div to i32
  %29 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u18 = getelementptr inbounds %struct.context, %struct.context* %29, i32 0, i32 0
  %cx_blk = bitcast %union.anon.19* %cx_u18 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 3
  store i32 %conv17, i32* %blku_oldsp, align 4
  %30 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %31 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u19 = getelementptr inbounds %struct.context, %struct.context* %31, i32 0, i32 0
  %cx_blk20 = bitcast %union.anon.19* %cx_u19 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk20, i32 0, i32 4
  store %struct.cop* %30, %struct.cop** %blku_oldcop, align 8
  %32 = load i32*, i32** @PL_markstack_ptr, align 8
  %33 = load i32*, i32** @PL_markstack, align 8
  %sub.ptr.lhs.cast21 = ptrtoint i32* %32 to i64
  %sub.ptr.rhs.cast22 = ptrtoint i32* %33 to i64
  %sub.ptr.sub23 = sub i64 %sub.ptr.lhs.cast21, %sub.ptr.rhs.cast22
  %sub.ptr.div24 = sdiv exact i64 %sub.ptr.sub23, 4
  %conv25 = trunc i64 %sub.ptr.div24 to i32
  %34 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u26 = getelementptr inbounds %struct.context, %struct.context* %34, i32 0, i32 0
  %cx_blk27 = bitcast %union.anon.19* %cx_u26 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk27, i32 0, i32 5
  store i32 %conv25, i32* %blku_oldmarksp, align 8
  %35 = load i32, i32* @PL_scopestack_ix, align 4
  %36 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u28 = getelementptr inbounds %struct.context, %struct.context* %36, i32 0, i32 0
  %cx_blk29 = bitcast %union.anon.19* %cx_u28 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk29, i32 0, i32 6
  store i32 %35, i32* %blku_oldscopesp, align 4
  %37 = load %struct.pmop*, %struct.pmop** @PL_curpm, align 8
  %38 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u30 = getelementptr inbounds %struct.context, %struct.context* %38, i32 0, i32 0
  %cx_blk31 = bitcast %union.anon.19* %cx_u30 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk31, i32 0, i32 7
  store %struct.pmop* %37, %struct.pmop** %blku_oldpm, align 8
  %39 = load i32, i32* %gimme, align 4
  %conv32 = trunc i32 %39 to i8
  %40 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u33 = getelementptr inbounds %struct.context, %struct.context* %40, i32 0, i32 0
  %cx_blk34 = bitcast %union.anon.19* %cx_u33 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk34, i32 0, i32 1
  store i8 %conv32, i8* %blku_gimme, align 1
  %41 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %42 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u35 = getelementptr inbounds %struct.context, %struct.context* %42, i32 0, i32 0
  %cx_blk36 = bitcast %union.anon.19* %cx_u35 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk36, i32 0, i32 8
  %blku_format = bitcast %union.anon.22* %blk_u to %struct.block_format*
  %cv37 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format, i32 0, i32 1
  store %struct.cv* %41, %struct.cv** %cv37, align 8
  %43 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %44 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u38 = getelementptr inbounds %struct.context, %struct.context* %44, i32 0, i32 0
  %cx_blk39 = bitcast %union.anon.19* %cx_u38 to %struct.block*
  %blk_u40 = getelementptr inbounds %struct.block, %struct.block* %cx_blk39, i32 0, i32 8
  %blku_format41 = bitcast %union.anon.22* %blk_u40 to %struct.block_format*
  %gv42 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format41, i32 0, i32 2
  store %struct.gv* %43, %struct.gv** %gv42, align 8
  %45 = load %struct.op*, %struct.op** %retop.addr, align 8
  %46 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u43 = getelementptr inbounds %struct.context, %struct.context* %46, i32 0, i32 0
  %cx_blk44 = bitcast %union.anon.19* %cx_u43 to %struct.block*
  %blk_u45 = getelementptr inbounds %struct.block, %struct.block* %cx_blk44, i32 0, i32 8
  %blku_format46 = bitcast %union.anon.22* %blk_u45 to %struct.block_format*
  %retop47 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format46, i32 0, i32 0
  store %struct.op* %45, %struct.op** %retop47, align 8
  %47 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  %48 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u48 = getelementptr inbounds %struct.context, %struct.context* %48, i32 0, i32 0
  %cx_blk49 = bitcast %union.anon.19* %cx_u48 to %struct.block*
  %blk_u50 = getelementptr inbounds %struct.block, %struct.block* %cx_blk49, i32 0, i32 8
  %blku_format51 = bitcast %union.anon.22* %blk_u50 to %struct.block_format*
  %dfoutgv = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format51, i32 0, i32 3
  store %struct.gv* %47, %struct.gv** %dfoutgv, align 8
  %49 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u52 = getelementptr inbounds %struct.context, %struct.context* %49, i32 0, i32 0
  %cx_blk53 = bitcast %union.anon.19* %cx_u52 to %struct.block*
  %blku_u16 = getelementptr inbounds %struct.block, %struct.block* %cx_blk53, i32 0, i32 2
  store i16 0, i16* %blku_u16, align 2
  %50 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call54 = call i32* @S_CvDEPTHp(%struct.cv* %50)
  %51 = load i32, i32* %call54, align 4
  %tobool55 = icmp ne i32 %51, 0
  br i1 %tobool55, label %if.end58, label %if.then56

if.then56:                                        ; preds = %cond.end14
  %52 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %53 = bitcast %struct.cv* %52 to i8*
  %54 = bitcast i8* %53 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 1
  %55 = load i32, i32* %sv_refcnt, align 8
  %inc57 = add i32 %55, 1
  store i32 %inc57, i32* %sv_refcnt, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %cond.end14
  %56 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call59 = call i32* @S_CvDEPTHp(%struct.cv* %56)
  %57 = load i32, i32* %call59, align 4
  %inc60 = add nsw i32 %57, 1
  store i32 %inc60, i32* %call59, align 4
  %58 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u61 = getelementptr inbounds %struct.context, %struct.context* %58, i32 0, i32 0
  %cx_blk62 = bitcast %union.anon.19* %cx_u61 to %struct.block*
  %blk_u63 = getelementptr inbounds %struct.block, %struct.block* %cx_blk62, i32 0, i32 8
  %blku_format64 = bitcast %union.anon.22* %blk_u63 to %struct.block_format*
  %dfoutgv65 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format64, i32 0, i32 3
  %59 = load %struct.gv*, %struct.gv** %dfoutgv65, align 8
  %60 = bitcast %struct.gv* %59 to i8*
  %61 = bitcast i8* %60 to %struct.sv*
  call void @S_SvREFCNT_inc_void(%struct.sv* %61)
  %62 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call66 = call i32* @S_CvDEPTHp(%struct.cv* %62)
  %63 = load i32, i32* %call66, align 4
  %cmp67 = icmp sge i32 %63, 2
  br i1 %cmp67, label %if.then69, label %if.end72

if.then69:                                        ; preds = %if.end58
  %64 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.cv, %struct.cv* %64, i32 0, i32 0
  %65 = load %struct.xpvcv*, %struct.xpvcv** %sv_any70, align 8
  %66 = bitcast %struct.xpvcv* %65 to i8*
  %67 = bitcast i8* %66 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %67, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.13* %xcv_padlist_u to %struct.padlist**
  %68 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %69 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call71 = call i32* @S_CvDEPTHp(%struct.cv* %69)
  %70 = load i32, i32* %call71, align 4
  call void @Perl_pad_push(%struct.padlist* %68, i32 %70)
  br label %if.end72

if.end72:                                         ; preds = %if.then69, %if.end58
  %71 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %72 = bitcast %struct.av* %71 to i8*
  %73 = bitcast i8* %72 to %struct.sv*
  %74 = bitcast %struct.sv* %73 to i8*
  call void @Perl_save_pushptr(i8* %74, i32 7)
  %75 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any73 = getelementptr inbounds %struct.cv, %struct.cv* %75, i32 0, i32 0
  %76 = load %struct.xpvcv*, %struct.xpvcv** %sv_any73, align 8
  %77 = bitcast %struct.xpvcv* %76 to i8*
  %78 = bitcast i8* %77 to %struct.xpvcv*
  %xcv_padlist_u74 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %78, i32 0, i32 9
  %xcv_padlist75 = bitcast %union.anon.13* %xcv_padlist_u74 to %struct.padlist**
  %79 = load %struct.padlist*, %struct.padlist** %xcv_padlist75, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %79, i32 0, i32 1
  %80 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %81 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %call76 = call i32* @S_CvDEPTHp(%struct.cv* %81)
  %82 = load i32, i32* %call76, align 4
  %idxprom77 = sext i32 %82 to i64
  %arrayidx78 = getelementptr inbounds %struct.av*, %struct.av** %80, i64 %idxprom77
  %83 = load %struct.av*, %struct.av** %arrayidx78, align 8
  store %struct.av* %83, %struct.av** @PL_comppad, align 8
  %84 = load %struct.av*, %struct.av** @PL_comppad, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %84, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u to %struct.sv***
  %85 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %85, %struct.sv*** @PL_curpad, align 8
  %86 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  call void @Perl_setdefout(%struct.gv* %86)
  %87 = load %struct.cv*, %struct.cv** %cv.addr, align 8
  %sv_any79 = getelementptr inbounds %struct.cv, %struct.cv* %87, i32 0, i32 0
  %88 = load %struct.xpvcv*, %struct.xpvcv** %sv_any79, align 8
  %89 = bitcast %struct.xpvcv* %88 to i8*
  %90 = bitcast i8* %89 to %struct.xpvcv*
  %xcv_start_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %90, i32 0, i32 5
  %xcv_start = bitcast %union.anon.10* %xcv_start_u to %struct.op**
  %91 = load %struct.op*, %struct.op** %xcv_start, align 8
  ret %struct.op* %91
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_leavewrite() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %ofp = alloca %struct._PerlIO**, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %newsp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %cx = alloca %struct.context*, align 8
  %retop = alloca %struct.op*, align 8
  %fgv = alloca %struct.gv*, align 8
  %cv = alloca %struct.cv*, align 8
  %topgv = alloca %struct.gv*, align 8
  %topname = alloca %struct.sv*, align 8
  %lines = alloca i32, align 4
  %s = alloca i8*, align 8
  %save = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %cv171 = alloca %struct.cv*, align 8
  %dfuot = alloca %struct.gv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %1, i32 0, i32 1
  %2 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %3 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %3, i32 0, i32 4
  %4 = load i32, i32* %si_cxix, align 8
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds %struct.context, %struct.context* %2, i64 %idxprom
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx, i32 0, i32 0
  %cx_blk = bitcast %union.anon.19* %cx_u to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 8
  %blku_format = bitcast %union.anon.22* %blk_u to %struct.block_format*
  %gv1 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format, i32 0, i32 2
  %5 = load %struct.gv*, %struct.gv** %gv1, align 8
  store %struct.gv* %5, %struct.gv** %gv, align 8
  %6 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %6, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %7 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %7, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 1
  %8 = load %struct.io*, %struct.io** %gp_io, align 8
  store %struct.io* %8, %struct.io** %io, align 8
  %9 = load %struct.io*, %struct.io** %io, align 8
  %tobool = icmp ne %struct.io* %9, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %10 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %10, i32 0, i32 0
  %11 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %11, i32 0, i32 5
  %12 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  store %struct._PerlIO** %12, %struct._PerlIO*** %ofp, align 8
  %tobool2 = icmp ne %struct._PerlIO** %12, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %forget_top

if.end:                                           ; preds = %lor.lhs.false
  %13 = load %struct.io*, %struct.io** %io, align 8
  %sv_any3 = getelementptr inbounds %struct.io, %struct.io* %13, i32 0, i32 0
  %14 = load %struct.xpvio*, %struct.xpvio** %sv_any3, align 8
  %xio_lines_left = getelementptr inbounds %struct.xpvio, %struct.xpvio* %14, i32 0, i32 9
  %15 = load i64, i64* %xio_lines_left, align 8
  %16 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any4 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any4, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %19 = load i64, i64* %xivu_iv, align 8
  %cmp = icmp slt i64 %15, %19
  br i1 %cmp, label %land.lhs.true, label %if.end138

land.lhs.true:                                    ; preds = %if.end
  %20 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %21 = load %struct.sv*, %struct.sv** @PL_toptarget, align 8
  %cmp5 = icmp ne %struct.sv* %20, %21
  br i1 %cmp5, label %if.then6, label %if.end138

if.then6:                                         ; preds = %land.lhs.true
  %22 = load %struct.io*, %struct.io** %io, align 8
  %sv_any7 = getelementptr inbounds %struct.io, %struct.io* %22, i32 0, i32 0
  %23 = load %struct.xpvio*, %struct.xpvio** %sv_any7, align 8
  %xio_top_gv = getelementptr inbounds %struct.xpvio, %struct.xpvio* %23, i32 0, i32 11
  %24 = load %struct.gv*, %struct.gv** %xio_top_gv, align 8
  %tobool8 = icmp ne %struct.gv* %24, null
  br i1 %tobool8, label %if.end62, label %if.then9

if.then9:                                         ; preds = %if.then6
  %25 = load %struct.io*, %struct.io** %io, align 8
  %sv_any10 = getelementptr inbounds %struct.io, %struct.io* %25, i32 0, i32 0
  %26 = load %struct.xpvio*, %struct.xpvio** %sv_any10, align 8
  %xio_top_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %26, i32 0, i32 10
  %27 = load i8*, i8** %xio_top_name, align 8
  %tobool11 = icmp ne i8* %27, null
  br i1 %tobool11, label %if.end44, label %if.then12

if.then12:                                        ; preds = %if.then9
  %28 = load %struct.io*, %struct.io** %io, align 8
  %sv_any13 = getelementptr inbounds %struct.io, %struct.io* %28, i32 0, i32 0
  %29 = load %struct.xpvio*, %struct.xpvio** %sv_any13, align 8
  %xio_fmt_name = getelementptr inbounds %struct.xpvio, %struct.xpvio* %29, i32 0, i32 12
  %30 = load i8*, i8** %xio_fmt_name, align 8
  %tobool14 = icmp ne i8* %30, null
  br i1 %tobool14, label %if.end20, label %if.then15

if.then15:                                        ; preds = %if.then12
  %31 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any16 = getelementptr inbounds %struct.gv, %struct.gv* %31, i32 0, i32 0
  %32 = load %struct.xpvgv*, %struct.xpvgv** %sv_any16, align 8
  %xiv_u17 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %32, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u17 to %struct.hek**
  %33 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %33, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %call = call i8* @Perl_savepv(i8* %arraydecay)
  %34 = load %struct.io*, %struct.io** %io, align 8
  %sv_any18 = getelementptr inbounds %struct.io, %struct.io* %34, i32 0, i32 0
  %35 = load %struct.xpvio*, %struct.xpvio** %sv_any18, align 8
  %xio_fmt_name19 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %35, i32 0, i32 12
  store i8* %call, i8** %xio_fmt_name19, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then15, %if.then12
  %36 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any21 = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 0
  %37 = load %struct.xpvgv*, %struct.xpvgv** %sv_any21, align 8
  %xiv_u22 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %37, i32 0, i32 4
  %xivu_namehek23 = bitcast %union._xivu* %xiv_u22 to %struct.hek**
  %38 = load %struct.hek*, %struct.hek** %xivu_namehek23, align 8
  %39 = bitcast %struct.hek* %38 to i8*
  %call24 = call %struct.sv* (i8*, ...) @Perl_newSVpvf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i64 0, i64 0), i8* %39)
  %call25 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call24)
  store %struct.sv* %call25, %struct.sv** %topname, align 8
  %40 = load %struct.sv*, %struct.sv** %topname, align 8
  %call26 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %40, i32 0, i32 14)
  store %struct.gv* %call26, %struct.gv** %topgv, align 8
  %41 = load %struct.gv*, %struct.gv** %topgv, align 8
  %tobool27 = icmp ne %struct.gv* %41, null
  br i1 %tobool27, label %land.lhs.true28, label %lor.lhs.false33

land.lhs.true28:                                  ; preds = %if.end20
  %42 = load %struct.gv*, %struct.gv** %topgv, align 8
  %sv_u29 = getelementptr inbounds %struct.gv, %struct.gv* %42, i32 0, i32 3
  %svu_gp30 = bitcast %union.anon.4* %sv_u29 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp30, align 8
  %add.ptr31 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr31, i32 0, i32 7
  %44 = load %struct.cv*, %struct.cv** %gp_form, align 8
  %tobool32 = icmp ne %struct.cv* %44, null
  br i1 %tobool32, label %if.then36, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true28, %if.end20
  %call34 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0), i64 3, i32 128, i32 14)
  %tobool35 = icmp ne %struct.gv* %call34, null
  br i1 %tobool35, label %if.else, label %if.then36

if.then36:                                        ; preds = %lor.lhs.false33, %land.lhs.true28
  %45 = load %struct.sv*, %struct.sv** %topname, align 8
  %call37 = call i8* @Perl_savesvpv(%struct.sv* %45)
  %46 = load %struct.io*, %struct.io** %io, align 8
  %sv_any38 = getelementptr inbounds %struct.io, %struct.io* %46, i32 0, i32 0
  %47 = load %struct.xpvio*, %struct.xpvio** %sv_any38, align 8
  %xio_top_name39 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %47, i32 0, i32 10
  store i8* %call37, i8** %xio_top_name39, align 8
  br label %if.end43

if.else:                                          ; preds = %lor.lhs.false33
  %call40 = call i8* @Perl_savepvn(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0), i32 3)
  %48 = load %struct.io*, %struct.io** %io, align 8
  %sv_any41 = getelementptr inbounds %struct.io, %struct.io* %48, i32 0, i32 0
  %49 = load %struct.xpvio*, %struct.xpvio** %sv_any41, align 8
  %xio_top_name42 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %49, i32 0, i32 10
  store i8* %call40, i8** %xio_top_name42, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.then36
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then9
  %50 = load %struct.io*, %struct.io** %io, align 8
  %sv_any45 = getelementptr inbounds %struct.io, %struct.io* %50, i32 0, i32 0
  %51 = load %struct.xpvio*, %struct.xpvio** %sv_any45, align 8
  %xio_top_name46 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %51, i32 0, i32 10
  %52 = load i8*, i8** %xio_top_name46, align 8
  %call47 = call %struct.gv* @Perl_gv_fetchpv(i8* %52, i32 0, i32 14)
  store %struct.gv* %call47, %struct.gv** %topgv, align 8
  %53 = load %struct.gv*, %struct.gv** %topgv, align 8
  %tobool48 = icmp ne %struct.gv* %53, null
  br i1 %tobool48, label %lor.lhs.false49, label %if.then55

lor.lhs.false49:                                  ; preds = %if.end44
  %54 = load %struct.gv*, %struct.gv** %topgv, align 8
  %sv_u50 = getelementptr inbounds %struct.gv, %struct.gv* %54, i32 0, i32 3
  %svu_gp51 = bitcast %union.anon.4* %sv_u50 to %struct.gp**
  %55 = load %struct.gp*, %struct.gp** %svu_gp51, align 8
  %add.ptr52 = getelementptr inbounds %struct.gp, %struct.gp* %55, i64 0
  %gp_form53 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr52, i32 0, i32 7
  %56 = load %struct.cv*, %struct.cv** %gp_form53, align 8
  %tobool54 = icmp ne %struct.cv* %56, null
  br i1 %tobool54, label %if.end59, label %if.then55

if.then55:                                        ; preds = %lor.lhs.false49, %if.end44
  %57 = load %struct.io*, %struct.io** %io, align 8
  %sv_any56 = getelementptr inbounds %struct.io, %struct.io* %57, i32 0, i32 0
  %58 = load %struct.xpvio*, %struct.xpvio** %sv_any56, align 8
  %xio_page_len = getelementptr inbounds %struct.xpvio, %struct.xpvio* %58, i32 0, i32 8
  %59 = load i64, i64* %xio_page_len, align 8
  %60 = load %struct.io*, %struct.io** %io, align 8
  %sv_any57 = getelementptr inbounds %struct.io, %struct.io* %60, i32 0, i32 0
  %61 = load %struct.xpvio*, %struct.xpvio** %sv_any57, align 8
  %xio_lines_left58 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %61, i32 0, i32 9
  store i64 %59, i64* %xio_lines_left58, align 8
  br label %forget_top

if.end59:                                         ; preds = %lor.lhs.false49
  %62 = load %struct.gv*, %struct.gv** %topgv, align 8
  %63 = load %struct.io*, %struct.io** %io, align 8
  %sv_any60 = getelementptr inbounds %struct.io, %struct.io* %63, i32 0, i32 0
  %64 = load %struct.xpvio*, %struct.xpvio** %sv_any60, align 8
  %xio_top_gv61 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %64, i32 0, i32 11
  store %struct.gv* %62, %struct.gv** %xio_top_gv61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.end59, %if.then6
  %65 = load %struct.io*, %struct.io** %io, align 8
  %sv_any63 = getelementptr inbounds %struct.io, %struct.io* %65, i32 0, i32 0
  %66 = load %struct.xpvio*, %struct.xpvio** %sv_any63, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %66, i32 0, i32 17
  %67 = load i8, i8* %xio_flags, align 1
  %conv = zext i8 %67 to i32
  %and = and i32 %conv, 8
  %tobool64 = icmp ne i32 %and, 0
  br i1 %tobool64, label %if.then65, label %if.end100

if.then65:                                        ; preds = %if.end62
  %68 = load %struct.io*, %struct.io** %io, align 8
  %sv_any66 = getelementptr inbounds %struct.io, %struct.io* %68, i32 0, i32 0
  %69 = load %struct.xpvio*, %struct.xpvio** %sv_any66, align 8
  %xio_lines_left67 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %69, i32 0, i32 9
  %70 = load i64, i64* %xio_lines_left67, align 8
  %conv68 = trunc i64 %70 to i32
  store i32 %conv68, i32* %lines, align 4
  %71 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_u69 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u69 to i8**
  %72 = load i8*, i8** %svu_pv, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %72, i64 0
  store i8* %add.ptr70, i8** %s, align 8
  %73 = load i32, i32* %lines, align 4
  %cmp71 = icmp sle i32 %73, 0
  br i1 %cmp71, label %if.then73, label %if.end74

if.then73:                                        ; preds = %if.then65
  br label %forget_top

if.end74:                                         ; preds = %if.then65
  br label %while.cond

while.cond:                                       ; preds = %if.end80, %if.end74
  %74 = load i32, i32* %lines, align 4
  %dec = add nsw i32 %74, -1
  store i32 %dec, i32* %lines, align 4
  %cmp75 = icmp sgt i32 %74, 0
  br i1 %cmp75, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %75 = load i8*, i8** %s, align 8
  %call77 = call i8* @strchr(i8* %75, i32 10) #10
  store i8* %call77, i8** %s, align 8
  %76 = load i8*, i8** %s, align 8
  %tobool78 = icmp ne i8* %76, null
  br i1 %tobool78, label %if.end80, label %if.then79

if.then79:                                        ; preds = %while.body
  br label %while.end

if.end80:                                         ; preds = %while.body
  %77 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then79, %while.cond
  %78 = load i8*, i8** %s, align 8
  %tobool81 = icmp ne i8* %78, null
  br i1 %tobool81, label %if.then82, label %if.end99

if.then82:                                        ; preds = %while.end
  %79 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any83 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any83, align 8
  %81 = bitcast i8* %80 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %81, i32 0, i32 2
  %82 = load i64, i64* %xpv_cur, align 8
  store i64 %82, i64* %save, align 8
  br label %do.body

do.body:                                          ; preds = %if.then82
  %83 = load i8*, i8** %s, align 8
  %84 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_u84 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 3
  %svu_pv85 = bitcast %union.anon* %sv_u84 to i8**
  %85 = load i8*, i8** %svu_pv85, align 8
  %add.ptr86 = getelementptr inbounds i8, i8* %85, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %83 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr86 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %86 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any87, align 8
  %88 = bitcast i8* %87 to %struct.xpv*
  %xpv_cur88 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 2
  store i64 %sub.ptr.sub, i64* %xpv_cur88, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %89 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %90 = load %struct._PerlIO**, %struct._PerlIO*** %ofp, align 8
  %call89 = call zeroext i1 @Perl_do_print(%struct.sv* %89, %struct._PerlIO** %90)
  br label %do.body90

do.body90:                                        ; preds = %do.end
  %91 = load i64, i64* %save, align 8
  %92 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 0
  %93 = load i8*, i8** %sv_any91, align 8
  %94 = bitcast i8* %93 to %struct.xpv*
  %xpv_cur92 = getelementptr inbounds %struct.xpv, %struct.xpv* %94, i32 0, i32 2
  store i64 %91, i64* %xpv_cur92, align 8
  br label %do.end93

do.end93:                                         ; preds = %do.body90
  %95 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %96 = load i8*, i8** %s, align 8
  call void @Perl_sv_chop(%struct.sv* %95, i8* %96)
  %97 = load %struct.io*, %struct.io** %io, align 8
  %sv_any94 = getelementptr inbounds %struct.io, %struct.io* %97, i32 0, i32 0
  %98 = load %struct.xpvio*, %struct.xpvio** %sv_any94, align 8
  %xio_lines_left95 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %98, i32 0, i32 9
  %99 = load i64, i64* %xio_lines_left95, align 8
  %100 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any96, align 8
  %102 = bitcast i8* %101 to %struct.xpviv*
  %xiv_u97 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %102, i32 0, i32 4
  %xivu_iv98 = bitcast %union._xivu* %xiv_u97 to i64*
  %103 = load i64, i64* %xivu_iv98, align 8
  %sub = sub nsw i64 %103, %99
  store i64 %sub, i64* %xivu_iv98, align 8
  br label %if.end99

if.end99:                                         ; preds = %do.end93, %while.end
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end62
  %104 = load %struct.io*, %struct.io** %io, align 8
  %sv_any101 = getelementptr inbounds %struct.io, %struct.io* %104, i32 0, i32 0
  %105 = load %struct.xpvio*, %struct.xpvio** %sv_any101, align 8
  %xio_lines_left102 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %105, i32 0, i32 9
  %106 = load i64, i64* %xio_lines_left102, align 8
  %cmp103 = icmp sge i64 %106, 0
  br i1 %cmp103, label %land.lhs.true105, label %if.end115

land.lhs.true105:                                 ; preds = %if.end100
  %107 = load %struct.io*, %struct.io** %io, align 8
  %sv_any106 = getelementptr inbounds %struct.io, %struct.io* %107, i32 0, i32 0
  %108 = load %struct.xpvio*, %struct.xpvio** %sv_any106, align 8
  %xio_page = getelementptr inbounds %struct.xpvio, %struct.xpvio* %108, i32 0, i32 7
  %109 = load i64, i64* %xio_page, align 8
  %cmp107 = icmp sgt i64 %109, 0
  br i1 %cmp107, label %if.then109, label %if.end115

if.then109:                                       ; preds = %land.lhs.true105
  %call110 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0), i64 1, i32 1, i32 3)
  %sv_u111 = getelementptr inbounds %struct.gv, %struct.gv* %call110, i32 0, i32 3
  %svu_gp112 = bitcast %union.anon.4* %sv_u111 to %struct.gp**
  %110 = load %struct.gp*, %struct.gp** %svu_gp112, align 8
  %add.ptr113 = getelementptr inbounds %struct.gp, %struct.gp* %110, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr113, i32 0, i32 0
  %111 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %112 = load %struct._PerlIO**, %struct._PerlIO*** %ofp, align 8
  %call114 = call zeroext i1 @Perl_do_print(%struct.sv* %111, %struct._PerlIO** %112)
  br label %if.end115

if.end115:                                        ; preds = %if.then109, %land.lhs.true105, %if.end100
  %113 = load %struct.io*, %struct.io** %io, align 8
  %sv_any116 = getelementptr inbounds %struct.io, %struct.io* %113, i32 0, i32 0
  %114 = load %struct.xpvio*, %struct.xpvio** %sv_any116, align 8
  %xio_page_len117 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %114, i32 0, i32 8
  %115 = load i64, i64* %xio_page_len117, align 8
  %116 = load %struct.io*, %struct.io** %io, align 8
  %sv_any118 = getelementptr inbounds %struct.io, %struct.io* %116, i32 0, i32 0
  %117 = load %struct.xpvio*, %struct.xpvio** %sv_any118, align 8
  %xio_lines_left119 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %117, i32 0, i32 9
  store i64 %115, i64* %xio_lines_left119, align 8
  %118 = load %struct.io*, %struct.io** %io, align 8
  %sv_any120 = getelementptr inbounds %struct.io, %struct.io* %118, i32 0, i32 0
  %119 = load %struct.xpvio*, %struct.xpvio** %sv_any120, align 8
  %xio_page121 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %119, i32 0, i32 7
  %120 = load i64, i64* %xio_page121, align 8
  %inc = add nsw i64 %120, 1
  store i64 %inc, i64* %xio_page121, align 8
  %121 = load %struct.sv*, %struct.sv** @PL_toptarget, align 8
  store %struct.sv* %121, %struct.sv** @PL_formtarget, align 8
  %122 = load %struct.io*, %struct.io** %io, align 8
  %sv_any122 = getelementptr inbounds %struct.io, %struct.io* %122, i32 0, i32 0
  %123 = load %struct.xpvio*, %struct.xpvio** %sv_any122, align 8
  %xio_flags123 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %123, i32 0, i32 17
  %124 = load i8, i8* %xio_flags123, align 1
  %conv124 = zext i8 %124 to i32
  %or = or i32 %conv124, 8
  %conv125 = trunc i32 %or to i8
  store i8 %conv125, i8* %xio_flags123, align 1
  %125 = load %struct.io*, %struct.io** %io, align 8
  %sv_any126 = getelementptr inbounds %struct.io, %struct.io* %125, i32 0, i32 0
  %126 = load %struct.xpvio*, %struct.xpvio** %sv_any126, align 8
  %xio_top_gv127 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %126, i32 0, i32 11
  %127 = load %struct.gv*, %struct.gv** %xio_top_gv127, align 8
  store %struct.gv* %127, %struct.gv** %fgv, align 8
  %128 = load %struct.gv*, %struct.gv** %fgv, align 8
  %sv_u128 = getelementptr inbounds %struct.gv, %struct.gv* %128, i32 0, i32 3
  %svu_gp129 = bitcast %union.anon.4* %sv_u128 to %struct.gp**
  %129 = load %struct.gp*, %struct.gp** %svu_gp129, align 8
  %add.ptr130 = getelementptr inbounds %struct.gp, %struct.gp* %129, i64 0
  %gp_form131 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr130, i32 0, i32 7
  %130 = load %struct.cv*, %struct.cv** %gp_form131, align 8
  store %struct.cv* %130, %struct.cv** %cv, align 8
  %131 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool132 = icmp ne %struct.cv* %131, null
  br i1 %tobool132, label %if.end136, label %if.then133

if.then133:                                       ; preds = %if.end115
  %call134 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call134, %struct.sv** %sv, align 8
  %132 = load %struct.sv*, %struct.sv** %sv, align 8
  %133 = load %struct.gv*, %struct.gv** %fgv, align 8
  call void @Perl_gv_efullname4(%struct.sv* %132, %struct.gv* %133, i8* null, i1 zeroext false)
  %134 = load %struct.sv*, %struct.sv** %sv, align 8
  %135 = bitcast %struct.sv* %134 to i8*
  %call135 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i64 0, i64 0), i8* %135)
  store %struct.op* %call135, %struct.op** %retval, align 8
  br label %return

if.end136:                                        ; preds = %if.end115
  %136 = load %struct.cv*, %struct.cv** %cv, align 8
  %137 = load %struct.gv*, %struct.gv** %gv, align 8
  %138 = load %struct.op*, %struct.op** @PL_op, align 8
  %call137 = call %struct.op* @S_doform(%struct.cv* %136, %struct.gv* %137, %struct.op* %138)
  store %struct.op* %call137, %struct.op** %retval, align 8
  br label %return

if.end138:                                        ; preds = %land.lhs.true, %if.end
  br label %forget_top

forget_top:                                       ; preds = %if.end138, %if.then73, %if.then55, %if.then
  %139 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack139 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %139, i32 0, i32 1
  %140 = load %struct.context*, %struct.context** %si_cxstack139, align 8
  %141 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix140 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %141, i32 0, i32 4
  %142 = load i32, i32* %si_cxix140, align 8
  %dec141 = add nsw i32 %142, -1
  store i32 %dec141, i32* %si_cxix140, align 8
  %idxprom142 = sext i32 %142 to i64
  %arrayidx143 = getelementptr inbounds %struct.context, %struct.context* %140, i64 %idxprom142
  store %struct.context* %arrayidx143, %struct.context** %cx, align 8
  %143 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %144 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u144 = getelementptr inbounds %struct.context, %struct.context* %144, i32 0, i32 0
  %cx_blk145 = bitcast %union.anon.19* %cx_u144 to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk145, i32 0, i32 3
  %145 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %145 to i64
  %add.ptr146 = getelementptr inbounds %struct.sv*, %struct.sv** %143, i64 %idx.ext
  store %struct.sv** %add.ptr146, %struct.sv*** %newsp, align 8
  %146 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u147 = getelementptr inbounds %struct.context, %struct.context* %146, i32 0, i32 0
  %cx_blk148 = bitcast %union.anon.19* %cx_u147 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk148, i32 0, i32 4
  %147 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  store %struct.cop* %147, %struct.cop** @PL_curcop, align 8
  %148 = load i32*, i32** @PL_markstack, align 8
  %149 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u149 = getelementptr inbounds %struct.context, %struct.context* %149, i32 0, i32 0
  %cx_blk150 = bitcast %union.anon.19* %cx_u149 to %struct.block*
  %blku_oldmarksp = getelementptr inbounds %struct.block, %struct.block* %cx_blk150, i32 0, i32 5
  %150 = load i32, i32* %blku_oldmarksp, align 8
  %idx.ext151 = sext i32 %150 to i64
  %add.ptr152 = getelementptr inbounds i32, i32* %148, i64 %idx.ext151
  store i32* %add.ptr152, i32** @PL_markstack_ptr, align 8
  %151 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u153 = getelementptr inbounds %struct.context, %struct.context* %151, i32 0, i32 0
  %cx_blk154 = bitcast %union.anon.19* %cx_u153 to %struct.block*
  %blku_oldscopesp = getelementptr inbounds %struct.block, %struct.block* %cx_blk154, i32 0, i32 6
  %152 = load i32, i32* %blku_oldscopesp, align 4
  store i32 %152, i32* @PL_scopestack_ix, align 4
  %153 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u155 = getelementptr inbounds %struct.context, %struct.context* %153, i32 0, i32 0
  %cx_blk156 = bitcast %union.anon.19* %cx_u155 to %struct.block*
  %blku_oldpm = getelementptr inbounds %struct.block, %struct.block* %cx_blk156, i32 0, i32 7
  %154 = load %struct.pmop*, %struct.pmop** %blku_oldpm, align 8
  store %struct.pmop* %154, %struct.pmop** @PL_curpm, align 8
  %155 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u157 = getelementptr inbounds %struct.context, %struct.context* %155, i32 0, i32 0
  %cx_blk158 = bitcast %union.anon.19* %cx_u157 to %struct.block*
  %blku_gimme = getelementptr inbounds %struct.block, %struct.block* %cx_blk158, i32 0, i32 1
  %156 = load i8, i8* %blku_gimme, align 1
  %conv159 = zext i8 %156 to i32
  store i32 %conv159, i32* %gimme, align 4
  %157 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u160 = getelementptr inbounds %struct.context, %struct.context* %157, i32 0, i32 0
  %cx_blk161 = bitcast %union.anon.19* %cx_u160 to %struct.block*
  %blk_u162 = getelementptr inbounds %struct.block, %struct.block* %cx_blk161, i32 0, i32 8
  %blku_sub = bitcast %union.anon.22* %blk_u162 to %struct.block_sub*
  %retop163 = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 0
  %158 = load %struct.op*, %struct.op** %retop163, align 8
  store %struct.op* %158, %struct.op** %retop, align 8
  br label %do.body164

do.body164:                                       ; preds = %forget_top
  %159 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u165 = getelementptr inbounds %struct.context, %struct.context* %159, i32 0, i32 0
  %cx_blk166 = bitcast %union.anon.19* %cx_u165 to %struct.block*
  %blku_u16 = getelementptr inbounds %struct.block, %struct.block* %cx_blk166, i32 0, i32 2
  %160 = load i16, i16* %blku_u16, align 2
  %conv167 = zext i16 %160 to i32
  %and168 = and i32 %conv167, 256
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %if.end215, label %if.then170

if.then170:                                       ; preds = %do.body164
  %161 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u172 = getelementptr inbounds %struct.context, %struct.context* %161, i32 0, i32 0
  %cx_blk173 = bitcast %union.anon.19* %cx_u172 to %struct.block*
  %blk_u174 = getelementptr inbounds %struct.block, %struct.block* %cx_blk173, i32 0, i32 8
  %blku_format175 = bitcast %union.anon.22* %blk_u174 to %struct.block_format*
  %cv176 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format175, i32 0, i32 1
  %162 = load %struct.cv*, %struct.cv** %cv176, align 8
  store %struct.cv* %162, %struct.cv** %cv171, align 8
  %163 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u177 = getelementptr inbounds %struct.context, %struct.context* %163, i32 0, i32 0
  %cx_blk178 = bitcast %union.anon.19* %cx_u177 to %struct.block*
  %blk_u179 = getelementptr inbounds %struct.block, %struct.block* %cx_blk178, i32 0, i32 8
  %blku_format180 = bitcast %union.anon.22* %blk_u179 to %struct.block_format*
  %dfoutgv = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format180, i32 0, i32 3
  %164 = load %struct.gv*, %struct.gv** %dfoutgv, align 8
  store %struct.gv* %164, %struct.gv** %dfuot, align 8
  %165 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u181 = getelementptr inbounds %struct.context, %struct.context* %165, i32 0, i32 0
  %cx_blk182 = bitcast %union.anon.19* %cx_u181 to %struct.block*
  %blku_u16183 = getelementptr inbounds %struct.block, %struct.block* %cx_blk182, i32 0, i32 2
  %166 = load i16, i16* %blku_u16183, align 2
  %conv184 = zext i16 %166 to i32
  %or185 = or i32 %conv184, 256
  %conv186 = trunc i32 %or185 to i16
  store i16 %conv186, i16* %blku_u16183, align 2
  %167 = load %struct.gv*, %struct.gv** %dfuot, align 8
  call void @Perl_setdefout(%struct.gv* %167)
  br label %do.body187

do.body187:                                       ; preds = %if.then170
  %168 = load i32, i32* @PL_savestack_ix, align 4
  %169 = load i32*, i32** @PL_scopestack, align 8
  %170 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u188 = getelementptr inbounds %struct.context, %struct.context* %170, i32 0, i32 0
  %cx_blk189 = bitcast %union.anon.19* %cx_u188 to %struct.block*
  %blku_oldscopesp190 = getelementptr inbounds %struct.block, %struct.block* %cx_blk189, i32 0, i32 6
  %171 = load i32, i32* %blku_oldscopesp190, align 4
  %sub191 = sub nsw i32 %171, 1
  %idxprom192 = sext i32 %sub191 to i64
  %arrayidx193 = getelementptr inbounds i32, i32* %169, i64 %idxprom192
  %172 = load i32, i32* %arrayidx193, align 4
  %cmp194 = icmp sgt i32 %168, %172
  br i1 %cmp194, label %if.then196, label %if.end203

if.then196:                                       ; preds = %do.body187
  %173 = load i32*, i32** @PL_scopestack, align 8
  %174 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u197 = getelementptr inbounds %struct.context, %struct.context* %174, i32 0, i32 0
  %cx_blk198 = bitcast %union.anon.19* %cx_u197 to %struct.block*
  %blku_oldscopesp199 = getelementptr inbounds %struct.block, %struct.block* %cx_blk198, i32 0, i32 6
  %175 = load i32, i32* %blku_oldscopesp199, align 4
  %sub200 = sub nsw i32 %175, 1
  %idxprom201 = sext i32 %sub200 to i64
  %arrayidx202 = getelementptr inbounds i32, i32* %173, i64 %idxprom201
  %176 = load i32, i32* %arrayidx202, align 4
  call void @Perl_leave_scope(i32 %176)
  br label %if.end203

if.end203:                                        ; preds = %if.then196, %do.body187
  br label %do.end204

do.end204:                                        ; preds = %if.end203
  %177 = load %struct.cv*, %struct.cv** %cv171, align 8
  %call205 = call i32* @S_CvDEPTHp(%struct.cv* %177)
  %178 = load i32, i32* %call205, align 4
  %dec206 = add nsw i32 %178, -1
  store i32 %dec206, i32* %call205, align 4
  %tobool207 = icmp ne i32 %dec206, 0
  br i1 %tobool207, label %if.end214, label %if.then208

if.then208:                                       ; preds = %do.end204
  %179 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u209 = getelementptr inbounds %struct.context, %struct.context* %179, i32 0, i32 0
  %cx_blk210 = bitcast %union.anon.19* %cx_u209 to %struct.block*
  %blk_u211 = getelementptr inbounds %struct.block, %struct.block* %cx_blk210, i32 0, i32 8
  %blku_format212 = bitcast %union.anon.22* %blk_u211 to %struct.block_format*
  %cv213 = getelementptr inbounds %struct.block_format, %struct.block_format* %blku_format212, i32 0, i32 1
  %180 = load %struct.cv*, %struct.cv** %cv213, align 8
  %181 = bitcast %struct.cv* %180 to i8*
  %182 = bitcast i8* %181 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %182)
  br label %if.end214

if.end214:                                        ; preds = %if.then208, %do.end204
  %183 = load %struct.gv*, %struct.gv** %dfuot, align 8
  %184 = bitcast %struct.gv* %183 to i8*
  %185 = bitcast i8* %184 to %struct.sv*
  call void @S_SvREFCNT_dec_NN(%struct.sv* %185)
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %do.body164
  br label %do.end216

do.end216:                                        ; preds = %if.end215
  %186 = load %struct.sv**, %struct.sv*** %newsp, align 8
  store %struct.sv** %186, %struct.sv*** %sp, align 8
  call void @Perl_pop_scope()
  %187 = load %struct.io*, %struct.io** %io, align 8
  %tobool217 = icmp ne %struct.io* %187, null
  br i1 %tobool217, label %lor.lhs.false218, label %if.then222

lor.lhs.false218:                                 ; preds = %do.end216
  %188 = load %struct.io*, %struct.io** %io, align 8
  %sv_any219 = getelementptr inbounds %struct.io, %struct.io* %188, i32 0, i32 0
  %189 = load %struct.xpvio*, %struct.xpvio** %sv_any219, align 8
  %xio_ofp220 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %189, i32 0, i32 5
  %190 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp220, align 8
  store %struct._PerlIO** %190, %struct._PerlIO*** %fp, align 8
  %tobool221 = icmp ne %struct._PerlIO** %190, null
  br i1 %tobool221, label %if.else231, label %if.then222

if.then222:                                       ; preds = %lor.lhs.false218, %do.end216
  %191 = load %struct.io*, %struct.io** %io, align 8
  %tobool223 = icmp ne %struct.io* %191, null
  br i1 %tobool223, label %land.lhs.true224, label %if.else228

land.lhs.true224:                                 ; preds = %if.then222
  %192 = load %struct.io*, %struct.io** %io, align 8
  %sv_u225 = getelementptr inbounds %struct.io, %struct.io* %192, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u225 to %struct._PerlIO***
  %193 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool226 = icmp ne %struct._PerlIO** %193, null
  br i1 %tobool226, label %if.then227, label %if.else228

if.then227:                                       ; preds = %land.lhs.true224
  %194 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_wrongway_fh(%struct.gv* %194, i8 signext 60)
  br label %if.end229

if.else228:                                       ; preds = %land.lhs.true224, %if.then222
  %195 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %195)
  br label %if.end229

if.end229:                                        ; preds = %if.else228, %if.then227
  %196 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr230 = getelementptr inbounds %struct.sv*, %struct.sv** %196, i32 1
  store %struct.sv** %incdec.ptr230, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr230, align 8
  br label %if.end268

if.else231:                                       ; preds = %lor.lhs.false218
  %197 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any232 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any232, align 8
  %199 = bitcast i8* %198 to %struct.xpviv*
  %xiv_u233 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %199, i32 0, i32 4
  %xivu_iv234 = bitcast %union._xivu* %xiv_u233 to i64*
  %200 = load i64, i64* %xivu_iv234, align 8
  %201 = load %struct.io*, %struct.io** %io, align 8
  %sv_any235 = getelementptr inbounds %struct.io, %struct.io* %201, i32 0, i32 0
  %202 = load %struct.xpvio*, %struct.xpvio** %sv_any235, align 8
  %xio_lines_left236 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %202, i32 0, i32 9
  %203 = load i64, i64* %xio_lines_left236, align 8
  %sub237 = sub nsw i64 %203, %200
  store i64 %sub237, i64* %xio_lines_left236, align 8
  %cmp238 = icmp slt i64 %sub237, 0
  br i1 %cmp238, label %if.then240, label %if.end241

if.then240:                                       ; preds = %if.else231
  call void (i32, i8*, ...) @Perl_ck_warner(i32 5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.42, i64 0, i64 0))
  br label %if.end241

if.end241:                                        ; preds = %if.then240, %if.else231
  %204 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %205 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call242 = call zeroext i1 @Perl_do_print(%struct.sv* %204, %struct._PerlIO** %205)
  br i1 %call242, label %if.else245, label %if.then243

if.then243:                                       ; preds = %if.end241
  %206 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr244 = getelementptr inbounds %struct.sv*, %struct.sv** %206, i32 1
  store %struct.sv** %incdec.ptr244, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr244, align 8
  br label %if.end267

if.else245:                                       ; preds = %if.end241
  %207 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any246 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 0
  %208 = load i8*, i8** %sv_any246, align 8
  %209 = bitcast i8* %208 to %struct.xpviv*
  %xiv_u247 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %209, i32 0, i32 4
  %xivu_iv248 = bitcast %union._xivu* %xiv_u247 to i64*
  store i64 0, i64* %xivu_iv248, align 8
  br label %do.body249

do.body249:                                       ; preds = %if.else245
  %210 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any250 = getelementptr inbounds %struct.sv, %struct.sv* %210, i32 0, i32 0
  %211 = load i8*, i8** %sv_any250, align 8
  %212 = bitcast i8* %211 to %struct.xpv*
  %xpv_cur251 = getelementptr inbounds %struct.xpv, %struct.xpv* %212, i32 0, i32 2
  store i64 0, i64* %xpv_cur251, align 8
  br label %do.end252

do.end252:                                        ; preds = %do.body249
  %213 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_u253 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 3
  %svu_pv254 = bitcast %union.anon* %sv_u253 to i8**
  %214 = load i8*, i8** %svu_pv254, align 8
  %215 = load %struct.sv*, %struct.sv** @PL_formtarget, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %215, i32 0, i32 0
  %216 = load i8*, i8** %sv_any255, align 8
  %217 = bitcast i8* %216 to %struct.xpv*
  %xpv_cur256 = getelementptr inbounds %struct.xpv, %struct.xpv* %217, i32 0, i32 2
  %218 = load i64, i64* %xpv_cur256, align 8
  %add.ptr257 = getelementptr inbounds i8, i8* %214, i64 %218
  store i8 0, i8* %add.ptr257, align 1
  %219 = load %struct.io*, %struct.io** %io, align 8
  %sv_any258 = getelementptr inbounds %struct.io, %struct.io* %219, i32 0, i32 0
  %220 = load %struct.xpvio*, %struct.xpvio** %sv_any258, align 8
  %xio_flags259 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %220, i32 0, i32 17
  %221 = load i8, i8* %xio_flags259, align 1
  %conv260 = zext i8 %221 to i32
  %and261 = and i32 %conv260, 4
  %tobool262 = icmp ne i32 %and261, 0
  br i1 %tobool262, label %if.then263, label %if.end265

if.then263:                                       ; preds = %do.end252
  %222 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call264 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** %222)
  br label %if.end265

if.end265:                                        ; preds = %if.then263, %do.end252
  %223 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr266 = getelementptr inbounds %struct.sv*, %struct.sv** %223, i32 1
  store %struct.sv** %incdec.ptr266, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr266, align 8
  br label %if.end267

if.end267:                                        ; preds = %if.end265, %if.then243
  br label %if.end268

if.end268:                                        ; preds = %if.end267, %if.end229
  %224 = load %struct.sv*, %struct.sv** @PL_bodytarget, align 8
  store %struct.sv* %224, %struct.sv** @PL_formtarget, align 8
  %225 = load i32, i32* %gimme, align 4
  %226 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %226, %struct.sv*** @PL_stack_sp, align 8
  %227 = load %struct.op*, %struct.op** %retop, align 8
  store %struct.op* %227, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end268, %if.end136, %if.then133
  %228 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %228
}

declare dso_local i8* @Perl_savepv(i8*) #1

declare dso_local %struct.sv* @Perl_newSVpvf(i8*, ...) #1

declare dso_local %struct.gv* @Perl_gv_fetchsv(%struct.sv*, i32, i32) #1

declare dso_local %struct.gv* @Perl_gv_fetchpvn_flags(i8*, i64, i32, i32) #1

declare dso_local i8* @Perl_savesvpv(%struct.sv*) #1

declare dso_local i8* @Perl_savepvn(i8*, i32) #1

declare dso_local %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #1

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #5

declare dso_local zeroext i1 @Perl_do_print(%struct.sv*, %struct._PerlIO**) #1

declare dso_local void @Perl_sv_chop(%struct.sv*, i8*) #1

declare dso_local void @Perl_leave_scope(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32* @S_CvDEPTHp(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %xcv_depth = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %1, i32 0, i32 13
  ret i32* %xcv_depth
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  store i32 %1, i32* %rc, align 4
  %2 = load i32, i32* %rc, align 4
  %cmp = icmp ugt i32 %2, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load i32, i32* %rc, align 4
  %sub = sub i32 %3, 1
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt1, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %6 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare dso_local void @Perl_report_wrongway_fh(%struct.gv*, i8 signext) #1

declare dso_local i32 @Perl_PerlIO_flush(%struct._PerlIO**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_prtf() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %fp = alloca %struct._PerlIO**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %mg = alloca %struct.magic*, align 8
  %markoff = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags, align 2
  %conv1 = zext i8 %7 to i32
  %and = and i32 %conv1, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %mark, align 8
  %9 = load %struct.sv*, %struct.sv** %incdec.ptr2, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.gv*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct.gv*, %struct.gv** @PL_defoutgv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %11, %cond.true ], [ %12, %cond.false ]
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  %13 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool3 = icmp ne %struct.gv* %13, null
  br i1 %tobool3, label %land.lhs.true, label %cond.false17

land.lhs.true:                                    ; preds = %cond.end
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %15 = bitcast %struct.gv* %14 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %16, 255
  %cmp = icmp eq i32 %and4, 9
  br i1 %cmp, label %land.lhs.true10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %18 = bitcast %struct.gv* %17 to %struct.sv*
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %19, 255
  %cmp8 = icmp eq i32 %and7, 10
  br i1 %cmp8, label %land.lhs.true10, label %cond.false17

land.lhs.true10:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %tobool12 = icmp ne %struct.gp* %add.ptr11, null
  br i1 %tobool12, label %cond.true13, label %cond.false17

cond.true13:                                      ; preds = %land.lhs.true10
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u14 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon.4* %sv_u14 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 1
  %24 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end18

cond.false17:                                     ; preds = %land.lhs.true10, %lor.lhs.false, %cond.end
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true13
  %cond19 = phi %struct.io* [ %24, %cond.true13 ], [ null, %cond.false17 ]
  store %struct.io* %cond19, %struct.io** %io, align 8
  %25 = load %struct.sv**, %struct.sv*** %mark, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp20 = icmp eq %struct.sv** %25, %26
  br i1 %cmp20, label %if.then, label %if.end34

if.then:                                          ; preds = %cond.end18
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body22

do.body22:                                        ; preds = %do.body
  %27 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast23 = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.rhs.cast24 = ptrtoint %struct.sv** %28 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %sub.ptr.div26 = sdiv exact i64 %sub.ptr.sub25, 8
  %cmp27 = icmp slt i64 %sub.ptr.div26, 1
  br i1 %cmp27, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %do.body22
  br i1 true, label %if.then31, label %if.end

cond.false30:                                     ; preds = %do.body22
  br i1 false, label %if.then31, label %if.end

if.then31:                                        ; preds = %cond.false30, %cond.true29
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %29, %struct.sv** %30, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then31, %cond.false30, %cond.true29
  br label %do.end

do.end:                                           ; preds = %if.end
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr32 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i32 1
  store %struct.sv** %incdec.ptr32, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr32, align 8
  br label %do.end33

do.end33:                                         ; preds = %do.end
  br label %if.end34

if.end34:                                         ; preds = %do.end33, %cond.end18
  %33 = load %struct.io*, %struct.io** %io, align 8
  %tobool35 = icmp ne %struct.io* %33, null
  br i1 %tobool35, label %if.then36, label %if.end92

if.then36:                                        ; preds = %if.end34
  %34 = load %struct.io*, %struct.io** %io, align 8
  %35 = bitcast %struct.io* %34 to %struct.sv*
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %36, 8388608
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true40, label %cond.false42

cond.true40:                                      ; preds = %if.then36
  %37 = load %struct.io*, %struct.io** %io, align 8
  %38 = bitcast %struct.io* %37 to %struct.sv*
  %call41 = call %struct.magic* @Perl_mg_find(%struct.sv* %38, i32 113)
  br label %cond.end43

cond.false42:                                     ; preds = %if.then36
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.magic* [ %call41, %cond.true40 ], [ null, %cond.false42 ]
  store %struct.magic* %cond44, %struct.magic** %mg, align 8
  %39 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool45 = icmp ne %struct.magic* %39, null
  br i1 %tobool45, label %if.then46, label %if.end91

if.then46:                                        ; preds = %cond.end43
  %40 = load %struct.sv**, %struct.sv*** %mark, align 8
  %41 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %42 = load i32, i32* %origmark, align 4
  %idx.ext47 = sext i32 %42 to i64
  %add.ptr48 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 %idx.ext47
  %cmp49 = icmp eq %struct.sv** %40, %add.ptr48
  br i1 %cmp49, label %if.then51, label %if.end77

if.then51:                                        ; preds = %if.then46
  br label %do.body52

do.body52:                                        ; preds = %if.then51
  %43 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast53 = ptrtoint %struct.sv** %43 to i64
  %sub.ptr.rhs.cast54 = ptrtoint %struct.sv** %44 to i64
  %sub.ptr.sub55 = sub i64 %sub.ptr.lhs.cast53, %sub.ptr.rhs.cast54
  %sub.ptr.div56 = sdiv exact i64 %sub.ptr.sub55, 8
  %cmp57 = icmp slt i64 %sub.ptr.div56, 1
  br i1 %cmp57, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %do.body52
  br i1 true, label %if.then61, label %if.end68

cond.false60:                                     ; preds = %do.body52
  br i1 false, label %if.then61, label %if.end68

if.then61:                                        ; preds = %cond.false60, %cond.true59
  %45 = load %struct.sv**, %struct.sv*** %mark, align 8
  %46 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast62 = ptrtoint %struct.sv** %45 to i64
  %sub.ptr.rhs.cast63 = ptrtoint %struct.sv** %46 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %sub.ptr.div65 = sdiv exact i64 %sub.ptr.sub64, 8
  store i64 %sub.ptr.div65, i64* %markoff, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call66 = call %struct.sv** @Perl_stack_grow(%struct.sv** %47, %struct.sv** %48, i64 1)
  store %struct.sv** %call66, %struct.sv*** %sp, align 8
  %49 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %50 = load i64, i64* %markoff, align 8
  %add.ptr67 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i64 %50
  store %struct.sv** %add.ptr67, %struct.sv*** %mark, align 8
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end68

if.end68:                                         ; preds = %if.then61, %cond.false60, %cond.true59
  br label %do.end69

do.end69:                                         ; preds = %if.end68
  %52 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr70 = getelementptr inbounds %struct.sv*, %struct.sv** %52, i32 1
  store %struct.sv** %incdec.ptr70, %struct.sv*** %mark, align 8
  %53 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr71 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i64 1
  %54 = bitcast %struct.sv** %add.ptr71 to i8*
  %55 = load %struct.sv**, %struct.sv*** %mark, align 8
  %56 = bitcast %struct.sv** %55 to i8*
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %58 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast72 = ptrtoint %struct.sv** %57 to i64
  %sub.ptr.rhs.cast73 = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  %sub.ptr.div75 = sdiv exact i64 %sub.ptr.sub74, 8
  %add = add nsw i64 %sub.ptr.div75, 1
  %mul = mul i64 %add, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %56, i64 %mul, i1 false)
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr76 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i32 1
  store %struct.sv** %incdec.ptr76, %struct.sv*** %sp, align 8
  br label %if.end77

if.end77:                                         ; preds = %do.end69, %if.then46
  %60 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 21), align 8
  %tobool78 = icmp ne %struct.sv* %60, null
  br i1 %tobool78, label %cond.true79, label %cond.false80

cond.true79:                                      ; preds = %if.end77
  %61 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 21), align 8
  br label %cond.end82

cond.false80:                                     ; preds = %if.end77
  %call81 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i64 0, i64 0), i32 0)
  store %struct.sv* %call81, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 21), align 8
  br label %cond.end82

cond.end82:                                       ; preds = %cond.false80, %cond.true79
  %cond83 = phi %struct.sv* [ %61, %cond.true79 ], [ %call81, %cond.false80 ]
  %62 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i64 -1
  %63 = load %struct.io*, %struct.io** %io, align 8
  %64 = bitcast %struct.io* %63 to i8*
  %65 = bitcast i8* %64 to %struct.sv*
  %66 = load %struct.magic*, %struct.magic** %mg, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %68 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast85 = ptrtoint %struct.sv** %67 to i64
  %sub.ptr.rhs.cast86 = ptrtoint %struct.sv** %68 to i64
  %sub.ptr.sub87 = sub i64 %sub.ptr.lhs.cast85, %sub.ptr.rhs.cast86
  %sub.ptr.div88 = sdiv exact i64 %sub.ptr.sub87, 8
  %conv89 = trunc i64 %sub.ptr.div88 to i32
  %call90 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond83, %struct.sv** %add.ptr84, %struct.sv* %65, %struct.magic* %66, i32 10, i32 %conv89)
  store %struct.op* %call90, %struct.op** %retval, align 8
  br label %return

if.end91:                                         ; preds = %cond.end43
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.end34
  %69 = load %struct.io*, %struct.io** %io, align 8
  %tobool93 = icmp ne %struct.io* %69, null
  br i1 %tobool93, label %if.else, label %if.then94

if.then94:                                        ; preds = %if.end92
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %70)
  %call95 = call i32* @__errno_location() #9
  store i32 9, i32* %call95, align 4
  br label %just_say_no

if.else:                                          ; preds = %if.end92
  %71 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %71, i32 0, i32 0
  %72 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_ofp = getelementptr inbounds %struct.xpvio, %struct.xpvio* %72, i32 0, i32 5
  %73 = load %struct._PerlIO**, %struct._PerlIO*** %xio_ofp, align 8
  store %struct._PerlIO** %73, %struct._PerlIO*** %fp, align 8
  %tobool96 = icmp ne %struct._PerlIO** %73, null
  br i1 %tobool96, label %if.else107, label %if.then97

if.then97:                                        ; preds = %if.else
  %74 = load %struct.io*, %struct.io** %io, align 8
  %sv_u98 = getelementptr inbounds %struct.io, %struct.io* %74, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u98 to %struct._PerlIO***
  %75 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool99 = icmp ne %struct._PerlIO** %75, null
  br i1 %tobool99, label %if.then100, label %if.else101

if.then100:                                       ; preds = %if.then97
  %76 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_wrongway_fh(%struct.gv* %76, i8 signext 60)
  br label %if.end105

if.else101:                                       ; preds = %if.then97
  %call102 = call zeroext i1 @Perl_ckwarn(i32 6)
  br i1 %call102, label %if.then103, label %if.end104

if.then103:                                       ; preds = %if.else101
  %77 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %77)
  br label %if.end104

if.end104:                                        ; preds = %if.then103, %if.else101
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then100
  %call106 = call i32* @__errno_location() #9
  store i32 9, i32* %call106, align 4
  br label %just_say_no

if.else107:                                       ; preds = %if.else
  %call108 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call108, %struct.sv** %sv, align 8
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  %80 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast109 = ptrtoint %struct.sv** %79 to i64
  %sub.ptr.rhs.cast110 = ptrtoint %struct.sv** %80 to i64
  %sub.ptr.sub111 = sub i64 %sub.ptr.lhs.cast109, %sub.ptr.rhs.cast110
  %sub.ptr.div112 = sdiv exact i64 %sub.ptr.sub111, 8
  %conv113 = trunc i64 %sub.ptr.div112 to i32
  %81 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr114 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i64 1
  call void @Perl_do_sprintf(%struct.sv* %78, i32 %conv113, %struct.sv** %add.ptr114)
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %83 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call115 = call zeroext i1 @Perl_do_print(%struct.sv* %82, %struct._PerlIO** %83)
  br i1 %call115, label %if.end117, label %if.then116

if.then116:                                       ; preds = %if.else107
  br label %just_say_no

if.end117:                                        ; preds = %if.else107
  %84 = load %struct.io*, %struct.io** %io, align 8
  %sv_any118 = getelementptr inbounds %struct.io, %struct.io* %84, i32 0, i32 0
  %85 = load %struct.xpvio*, %struct.xpvio** %sv_any118, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %85, i32 0, i32 17
  %86 = load i8, i8* %xio_flags, align 1
  %conv119 = zext i8 %86 to i32
  %and120 = and i32 %conv119, 4
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %if.then122, label %if.end128

if.then122:                                       ; preds = %if.end117
  %87 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call123 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** %87)
  %cmp124 = icmp eq i32 %call123, -1
  br i1 %cmp124, label %if.then126, label %if.end127

if.then126:                                       ; preds = %if.then122
  br label %just_say_no

if.end127:                                        ; preds = %if.then122
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.end117
  br label %if.end129

if.end129:                                        ; preds = %if.end128
  br label %if.end130

if.end130:                                        ; preds = %if.end129
  %88 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %89 = load i32, i32* %origmark, align 4
  %idx.ext131 = sext i32 %89 to i64
  %add.ptr132 = getelementptr inbounds %struct.sv*, %struct.sv** %88, i64 %idx.ext131
  store %struct.sv** %add.ptr132, %struct.sv*** %sp, align 8
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr133 = getelementptr inbounds %struct.sv*, %struct.sv** %90, i32 1
  store %struct.sv** %incdec.ptr133, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr133, align 8
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %91, %struct.sv*** @PL_stack_sp, align 8
  %92 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 0
  %93 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %93, %struct.op** %retval, align 8
  br label %return

just_say_no:                                      ; preds = %if.then126, %if.then116, %if.end105, %if.then94
  %94 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %95 = load i32, i32* %origmark, align 4
  %idx.ext134 = sext i32 %95 to i64
  %add.ptr135 = getelementptr inbounds %struct.sv*, %struct.sv** %94, i64 %idx.ext134
  store %struct.sv** %add.ptr135, %struct.sv*** %sp, align 8
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr136 = getelementptr inbounds %struct.sv*, %struct.sv** %96, i32 1
  store %struct.sv** %incdec.ptr136, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr136, align 8
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %97, %struct.sv*** @PL_stack_sp, align 8
  %98 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next137 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 0
  %99 = load %struct.op*, %struct.op** %op_next137, align 8
  store %struct.op* %99, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %just_say_no, %if.end130, %cond.end82
  %100 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %100
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare dso_local zeroext i1 @Perl_ckwarn(i32) #1

declare dso_local void @Perl_do_sprintf(%struct.sv*, i32, %struct.sv**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sysopen() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %perm = alloca i32, align 4
  %mode = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %len = alloca i64, align 8
  %tmps = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp sgt i32 %and, 3
  br i1 %cmp, label %land.lhs.true, label %cond.false8

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %tobool = icmp ne %struct.sv* %4, null
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %tobool2 = icmp ne %struct.sv* %6, null
  br i1 %tobool2, label %cond.true, label %cond.false8

cond.true:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** @PL_Sv, align 8
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %10, 2097408
  %cmp5 = icmp eq i32 %and4, 256
  br i1 %cmp5, label %cond.true7, label %cond.false

cond.true7:                                       ; preds = %cond.true
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %13, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %14 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %15, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true7
  %cond = phi i64 [ %14, %cond.true7 ], [ %call, %cond.false ]
  br label %cond.end9

cond.false8:                                      ; preds = %lor.lhs.false, %entry
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false8, %cond.end
  %cond10 = phi i64 [ %cond, %cond.end ], [ 438, %cond.false8 ]
  %conv11 = trunc i64 %cond10 to i32
  store i32 %conv11, i32* %perm, align 4
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr12 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 -1
  store %struct.sv** %incdec.ptr12, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  store %struct.sv* %17, %struct.sv** @PL_Sv, align 8
  %18 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %19, 2097408
  %cmp15 = icmp eq i32 %and14, 256
  br i1 %cmp15, label %cond.true17, label %cond.false21

cond.true17:                                      ; preds = %cond.end9
  %20 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any18 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any18, align 8
  %22 = bitcast i8* %21 to %struct.xpviv*
  %xiv_u19 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %22, i32 0, i32 4
  %xivu_iv20 = bitcast %union._xivu* %xiv_u19 to i64*
  %23 = load i64, i64* %xivu_iv20, align 8
  br label %cond.end23

cond.false21:                                     ; preds = %cond.end9
  %24 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call22 = call i64 @Perl_sv_2iv_flags(%struct.sv* %24, i32 2)
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false21, %cond.true17
  %cond24 = phi i64 [ %23, %cond.true17 ], [ %call22, %cond.false21 ]
  %conv25 = trunc i64 %cond24 to i32
  store i32 %conv25, i32* %mode, align 4
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr26 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 -1
  store %struct.sv** %incdec.ptr26, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  store %struct.sv* %26, %struct.sv** %sv, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i32 -1
  store %struct.sv** %incdec.ptr27, %struct.sv*** %sp, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  %29 = bitcast %struct.sv* %28 to i8*
  %30 = bitcast i8* %29 to %struct.gv*
  store %struct.gv* %30, %struct.gv** %gv, align 8
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %32, 2098176
  %cmp30 = icmp eq i32 %and29, 1024
  br i1 %cmp30, label %cond.true32, label %cond.false34

cond.true32:                                      ; preds = %cond.end23
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any33 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any33, align 8
  %35 = bitcast i8* %34 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %35, i32 0, i32 2
  %36 = load i64, i64* %xpv_cur, align 8
  store i64 %36, i64* %len, align 8
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %38 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 0
  br label %cond.end36

cond.false34:                                     ; preds = %cond.end23
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %call35 = call i8* @Perl_sv_2pv_flags(%struct.sv* %39, i64* %len, i32 34)
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false34, %cond.true32
  %cond37 = phi i8* [ %add.ptr, %cond.true32 ], [ %call35, %cond.false34 ]
  store i8* %cond37, i8** %tmps, align 8
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  %41 = load i8*, i8** %tmps, align 8
  %42 = load i64, i64* %len, align 8
  %43 = load i32, i32* %mode, align 4
  %44 = load i32, i32* %perm, align 4
  %call38 = call zeroext i1 @Perl_do_open_raw(%struct.gv* %40, i8* %41, i64 %42, i32 %43, i32 %44)
  br i1 %call38, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end36
  %45 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u39 = getelementptr inbounds %struct.gv, %struct.gv* %45, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u39 to %struct.gp**
  %46 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr40 = getelementptr inbounds %struct.gp, %struct.gp* %46, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr40, i32 0, i32 1
  %47 = load %struct.io*, %struct.io** %gp_io, align 8
  %sv_any41 = getelementptr inbounds %struct.io, %struct.io* %47, i32 0, i32 0
  %48 = load %struct.xpvio*, %struct.xpvio** %sv_any41, align 8
  %xiv_u42 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %48, i32 0, i32 4
  %xivu_iv43 = bitcast %union._xivu* %xiv_u42 to i64*
  store i64 0, i64* %xivu_iv43, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr44 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i32 1
  store %struct.sv** %incdec.ptr44, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr44, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end36
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr45 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 1
  store %struct.sv** %incdec.ptr45, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr45, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %51, %struct.sv*** @PL_stack_sp, align 8
  %52 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 0
  %53 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %53
}

declare dso_local zeroext i1 @Perl_do_open_raw(%struct.gv*, i8*, i64, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sysread() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %offset = alloca i64, align 8
  %io = alloca %struct.io*, align 8
  %buffer = alloca i8*, align 8
  %orig_size = alloca i64, align 8
  %length = alloca i64, align 8
  %count = alloca i64, align 8
  %bufsv = alloca %struct.sv*, align 8
  %blen = alloca i64, align 8
  %fp_utf8 = alloca i32, align 4
  %buffer_utf8 = alloca i32, align 4
  %read_target = alloca %struct.sv*, align 8
  %got = alloca i64, align 8
  %wanted = alloca i64, align 8
  %charstart = alloca i8, align 1
  %charskip = alloca i64, align 8
  %skip = alloca i64, align 8
  %gv = alloca %struct.gv*, align 8
  %fd = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %bend = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  store i64 0, i64* %got, align 8
  store i8 0, i8* %charstart, align 1
  store i64 0, i64* %charskip, align 8
  store i64 0, i64* %skip, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %11 = load %struct.sv*, %struct.sv** %incdec.ptr1, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.gv*
  store %struct.gv* %13, %struct.gv** %gv, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 234
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type3 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 4
  %bf.load4 = load i16, i16* %op_type3, align 8
  %bf.clear5 = and i16 %bf.load4, 511
  %bf.cast6 = zext i16 %bf.clear5 to i32
  %cmp7 = icmp eq i32 %bf.cast6, 242
  br i1 %cmp7, label %land.lhs.true, label %if.end48

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %16, null
  br i1 %tobool, label %land.lhs.true9, label %if.end48

land.lhs.true9:                                   ; preds = %land.lhs.true
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool10 = icmp ne %struct.gv* %17, null
  br i1 %tobool10, label %land.lhs.true11, label %cond.false

land.lhs.true11:                                  ; preds = %land.lhs.true9
  %18 = load %struct.gv*, %struct.gv** %gv, align 8
  %19 = bitcast %struct.gv* %18 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags, align 4
  %and = and i32 %20, 255
  %cmp12 = icmp eq i32 %and, 9
  br i1 %cmp12, label %land.lhs.true19, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %land.lhs.true11
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %22 = bitcast %struct.gv* %21 to %struct.sv*
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %23, 255
  %cmp17 = icmp eq i32 %and16, 10
  br i1 %cmp17, label %land.lhs.true19, label %cond.false

land.lhs.true19:                                  ; preds = %lor.lhs.false14, %land.lhs.true11
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr20 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %tobool21 = icmp ne %struct.gp* %add.ptr20, null
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true19
  %26 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u22 = getelementptr inbounds %struct.gv, %struct.gv* %26, i32 0, i32 3
  %svu_gp23 = bitcast %union.anon.4* %sv_u22 to %struct.gp**
  %27 = load %struct.gp*, %struct.gp** %svu_gp23, align 8
  %add.ptr24 = getelementptr inbounds %struct.gp, %struct.gp* %27, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr24, i32 0, i32 1
  %28 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true19, %lor.lhs.false14, %land.lhs.true9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %28, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %tobool25 = icmp ne %struct.io* %cond, null
  br i1 %tobool25, label %if.then, label %if.end48

if.then:                                          ; preds = %cond.end
  %29 = load %struct.io*, %struct.io** %io, align 8
  %30 = bitcast %struct.io* %29 to %struct.sv*
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %31, 8388608
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %if.then
  %32 = load %struct.io*, %struct.io** %io, align 8
  %33 = bitcast %struct.io* %32 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %33, i32 113)
  br label %cond.end31

cond.false30:                                     ; preds = %if.then
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi %struct.magic* [ %call, %cond.true29 ], [ null, %cond.false30 ]
  store %struct.magic* %cond32, %struct.magic** %mg, align 8
  %34 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool33 = icmp ne %struct.magic* %34, null
  br i1 %tobool33, label %if.then34, label %if.end

if.then34:                                        ; preds = %cond.end31
  %35 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 22), align 16
  %tobool35 = icmp ne %struct.sv* %35, null
  br i1 %tobool35, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %if.then34
  %36 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 22), align 16
  br label %cond.end39

cond.false37:                                     ; preds = %if.then34
  %call38 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0), i32 0)
  store %struct.sv* %call38, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 22), align 16
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false37, %cond.true36
  %cond40 = phi %struct.sv* [ %36, %cond.true36 ], [ %call38, %cond.false37 ]
  %37 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr41 = getelementptr inbounds %struct.sv*, %struct.sv** %37, i64 -1
  %38 = load %struct.io*, %struct.io** %io, align 8
  %39 = bitcast %struct.io* %38 to i8*
  %40 = bitcast i8* %39 to %struct.sv*
  %41 = load %struct.magic*, %struct.magic** %mg, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast42 = ptrtoint %struct.sv** %42 to i64
  %sub.ptr.rhs.cast43 = ptrtoint %struct.sv** %43 to i64
  %sub.ptr.sub44 = sub i64 %sub.ptr.lhs.cast42, %sub.ptr.rhs.cast43
  %sub.ptr.div45 = sdiv exact i64 %sub.ptr.sub44, 8
  %conv46 = trunc i64 %sub.ptr.div45 to i32
  %call47 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond40, %struct.sv** %add.ptr41, %struct.sv* %40, %struct.magic* %41, i32 10, i32 %conv46)
  store %struct.op* %call47, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end31
  br label %if.end48

if.end48:                                         ; preds = %if.end, %cond.end, %land.lhs.true, %lor.lhs.false
  %44 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool49 = icmp ne %struct.gv* %44, null
  br i1 %tobool49, label %if.end51, label %if.then50

if.then50:                                        ; preds = %if.end48
  br label %say_undef

if.end51:                                         ; preds = %if.end48
  %45 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr52 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i32 1
  store %struct.sv** %incdec.ptr52, %struct.sv*** %mark, align 8
  %46 = load %struct.sv*, %struct.sv** %incdec.ptr52, align 8
  store %struct.sv* %46, %struct.sv** %bufsv, align 8
  %47 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %48, 65280
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.end67, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %if.end51
  %49 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %50, 255
  %cmp59 = icmp eq i32 %and58, 8
  br i1 %cmp59, label %if.end67, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %lor.lhs.false56
  %51 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %52, 16826623
  %cmp64 = icmp eq i32 %and63, 16777226
  br i1 %cmp64, label %if.end67, label %if.then66

if.then66:                                        ; preds = %lor.lhs.false61
  %53 = load %struct.sv*, %struct.sv** %bufsv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %53, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %lor.lhs.false61, %lor.lhs.false56, %if.end51
  %54 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr68 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i32 1
  store %struct.sv** %incdec.ptr68, %struct.sv*** %mark, align 8
  %55 = load %struct.sv*, %struct.sv** %incdec.ptr68, align 8
  store %struct.sv* %55, %struct.sv** @PL_Sv, align 8
  %56 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %57, 2097408
  %cmp71 = icmp eq i32 %and70, 256
  br i1 %cmp71, label %cond.true73, label %cond.false74

cond.true73:                                      ; preds = %if.end67
  %58 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any, align 8
  %60 = bitcast i8* %59 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %60, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %61 = load i64, i64* %xivu_iv, align 8
  br label %cond.end76

cond.false74:                                     ; preds = %if.end67
  %62 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call75 = call i64 @Perl_sv_2iv_flags(%struct.sv* %62, i32 2)
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false74, %cond.true73
  %cond77 = phi i64 [ %61, %cond.true73 ], [ %call75, %cond.false74 ]
  store i64 %cond77, i64* %length, align 8
  %63 = load i64, i64* %length, align 8
  %cmp78 = icmp slt i64 %63, 0
  br i1 %cmp78, label %if.then80, label %if.end82

if.then80:                                        ; preds = %cond.end76
  %call81 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i64 0, i64 0))
  store %struct.op* %call81, %struct.op** %retval, align 8
  br label %return

if.end82:                                         ; preds = %cond.end76
  %call83 = call i32* @__errno_location() #9
  store i32 0, i32* %call83, align 4
  %64 = load %struct.sv**, %struct.sv*** %mark, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp84 = icmp ult %struct.sv** %64, %65
  br i1 %cmp84, label %if.then86, label %if.else

if.then86:                                        ; preds = %if.end82
  %66 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr87 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 1
  store %struct.sv** %incdec.ptr87, %struct.sv*** %mark, align 8
  %67 = load %struct.sv*, %struct.sv** %incdec.ptr87, align 8
  store %struct.sv* %67, %struct.sv** @PL_Sv, align 8
  %68 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %69, 2097408
  %cmp90 = icmp eq i32 %and89, 256
  br i1 %cmp90, label %cond.true92, label %cond.false96

cond.true92:                                      ; preds = %if.then86
  %70 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any93 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any93, align 8
  %72 = bitcast i8* %71 to %struct.xpviv*
  %xiv_u94 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %72, i32 0, i32 4
  %xivu_iv95 = bitcast %union._xivu* %xiv_u94 to i64*
  %73 = load i64, i64* %xivu_iv95, align 8
  br label %cond.end98

cond.false96:                                     ; preds = %if.then86
  %74 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call97 = call i64 @Perl_sv_2iv_flags(%struct.sv* %74, i32 2)
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false96, %cond.true92
  %cond99 = phi i64 [ %73, %cond.true92 ], [ %call97, %cond.false96 ]
  store i64 %cond99, i64* %offset, align 8
  br label %if.end100

if.else:                                          ; preds = %if.end82
  store i64 0, i64* %offset, align 8
  br label %if.end100

if.end100:                                        ; preds = %if.else, %cond.end98
  %75 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool101 = icmp ne %struct.gv* %75, null
  br i1 %tobool101, label %land.lhs.true102, label %cond.false122

land.lhs.true102:                                 ; preds = %if.end100
  %76 = load %struct.gv*, %struct.gv** %gv, align 8
  %77 = bitcast %struct.gv* %76 to %struct.sv*
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %78, 255
  %cmp105 = icmp eq i32 %and104, 9
  br i1 %cmp105, label %land.lhs.true112, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %land.lhs.true102
  %79 = load %struct.gv*, %struct.gv** %gv, align 8
  %80 = bitcast %struct.gv* %79 to %struct.sv*
  %sv_flags108 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags108, align 4
  %and109 = and i32 %81, 255
  %cmp110 = icmp eq i32 %and109, 10
  br i1 %cmp110, label %land.lhs.true112, label %cond.false122

land.lhs.true112:                                 ; preds = %lor.lhs.false107, %land.lhs.true102
  %82 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u113 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 3
  %svu_gp114 = bitcast %union.anon.4* %sv_u113 to %struct.gp**
  %83 = load %struct.gp*, %struct.gp** %svu_gp114, align 8
  %add.ptr115 = getelementptr inbounds %struct.gp, %struct.gp* %83, i64 0
  %tobool116 = icmp ne %struct.gp* %add.ptr115, null
  br i1 %tobool116, label %cond.true117, label %cond.false122

cond.true117:                                     ; preds = %land.lhs.true112
  %84 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u118 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 3
  %svu_gp119 = bitcast %union.anon.4* %sv_u118 to %struct.gp**
  %85 = load %struct.gp*, %struct.gp** %svu_gp119, align 8
  %add.ptr120 = getelementptr inbounds %struct.gp, %struct.gp* %85, i64 0
  %gp_io121 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr120, i32 0, i32 1
  %86 = load %struct.io*, %struct.io** %gp_io121, align 8
  br label %cond.end123

cond.false122:                                    ; preds = %land.lhs.true112, %lor.lhs.false107, %if.end100
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false122, %cond.true117
  %cond124 = phi %struct.io* [ %86, %cond.true117 ], [ null, %cond.false122 ]
  store %struct.io* %cond124, %struct.io** %io, align 8
  %87 = load %struct.io*, %struct.io** %io, align 8
  %tobool125 = icmp ne %struct.io* %87, null
  br i1 %tobool125, label %lor.lhs.false126, label %if.then129

lor.lhs.false126:                                 ; preds = %cond.end123
  %88 = load %struct.io*, %struct.io** %io, align 8
  %sv_u127 = getelementptr inbounds %struct.io, %struct.io* %88, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u127 to %struct._PerlIO***
  %89 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool128 = icmp ne %struct._PerlIO** %89, null
  br i1 %tobool128, label %if.end131, label %if.then129

if.then129:                                       ; preds = %lor.lhs.false126, %cond.end123
  %90 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %90)
  %call130 = call i32* @__errno_location() #9
  store i32 9, i32* %call130, align 4
  br label %say_undef

if.end131:                                        ; preds = %lor.lhs.false126
  %91 = load %struct.io*, %struct.io** %io, align 8
  %sv_u132 = getelementptr inbounds %struct.io, %struct.io* %91, i32 0, i32 3
  %svu_fp133 = bitcast %union.anon.2* %sv_u132 to %struct._PerlIO***
  %92 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp133, align 8
  %call134 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %92)
  store i32 %call134, i32* %fd, align 4
  %93 = load %struct.io*, %struct.io** %io, align 8
  %sv_u135 = getelementptr inbounds %struct.io, %struct.io* %93, i32 0, i32 3
  %svu_fp136 = bitcast %union.anon.2* %sv_u135 to %struct._PerlIO***
  %94 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp136, align 8
  %call137 = call i32 @PerlIO_isutf8(%struct._PerlIO** %94)
  store i32 %call137, i32* %fp_utf8, align 4
  %tobool138 = icmp ne i32 %call137, 0
  br i1 %tobool138, label %land.lhs.true139, label %if.else155

land.lhs.true139:                                 ; preds = %if.end131
  %95 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %95, i32 0, i32 10
  %96 = load i32, i32* %cop_hints, align 8
  %add = add i32 %96, 0
  %and140 = and i32 %add, 8
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.else155, label %if.then142

if.then142:                                       ; preds = %land.lhs.true139
  %97 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %98, 966889216
  %cmp145 = icmp eq i32 %and144, 536871936
  br i1 %cmp145, label %cond.true147, label %cond.false150

cond.true147:                                     ; preds = %if.then142
  %99 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any148 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any148, align 8
  %101 = bitcast i8* %100 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %101, i32 0, i32 2
  %102 = load i64, i64* %xpv_cur, align 8
  store i64 %102, i64* %blen, align 8
  %103 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u149 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u149 to i8**
  %104 = load i8*, i8** %svu_pv, align 8
  br label %cond.end152

cond.false150:                                    ; preds = %if.then142
  %105 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %call151 = call i8* @Perl_sv_pvutf8n_force(%struct.sv* %105, i64* %blen)
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false150, %cond.true147
  %cond153 = phi i8* [ %104, %cond.true147 ], [ %call151, %cond.false150 ]
  store i8* %cond153, i8** %buffer, align 8
  %106 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags154, align 4
  %or = or i32 %107, 536870912
  store i32 %or, i32* %sv_flags154, align 4
  store i32 0, i32* %buffer_utf8, align 4
  br label %if.end176

if.else155:                                       ; preds = %land.lhs.true139, %if.end131
  %108 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags156 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags156, align 4
  %and157 = and i32 %109, 430018304
  %cmp158 = icmp eq i32 %and157, 1024
  br i1 %cmp158, label %cond.true160, label %cond.false165

cond.true160:                                     ; preds = %if.else155
  %110 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any161 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 0
  %111 = load i8*, i8** %sv_any161, align 8
  %112 = bitcast i8* %111 to %struct.xpv*
  %xpv_cur162 = getelementptr inbounds %struct.xpv, %struct.xpv* %112, i32 0, i32 2
  %113 = load i64, i64* %xpv_cur162, align 8
  store i64 %113, i64* %blen, align 8
  %114 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u163 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 3
  %svu_pv164 = bitcast %union.anon* %sv_u163 to i8**
  %115 = load i8*, i8** %svu_pv164, align 8
  br label %cond.end167

cond.false165:                                    ; preds = %if.else155
  %116 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %call166 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %116, i64* %blen, i32 2)
  br label %cond.end167

cond.end167:                                      ; preds = %cond.false165, %cond.true160
  %cond168 = phi i8* [ %115, %cond.true160 ], [ %call166, %cond.false165 ]
  store i8* %cond168, i8** %buffer, align 8
  %117 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints169 = getelementptr inbounds %struct.cop, %struct.cop* %117, i32 0, i32 10
  %118 = load i32, i32* %cop_hints169, align 8
  %add170 = add i32 %118, 0
  %and171 = and i32 %add170, 8
  %tobool172 = icmp ne i32 %and171, 0
  br i1 %tobool172, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %cond.end167
  %119 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %120, 536870912
  %tobool175 = icmp ne i32 %and174, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end167
  %121 = phi i1 [ false, %cond.end167 ], [ %tobool175, %land.rhs ]
  %land.ext = zext i1 %121 to i32
  store i32 %land.ext, i32* %buffer_utf8, align 4
  br label %if.end176

if.end176:                                        ; preds = %land.end, %cond.end152
  %122 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags177 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags177, align 4
  %and178 = and i32 %123, 536870912
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %land.lhs.true180, label %if.end187

land.lhs.true180:                                 ; preds = %if.end176
  %124 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints181 = getelementptr inbounds %struct.cop, %struct.cop* %124, i32 0, i32 10
  %125 = load i32, i32* %cop_hints181, align 8
  %add182 = add i32 %125, 0
  %and183 = and i32 %add182, 8
  %tobool184 = icmp ne i32 %and183, 0
  br i1 %tobool184, label %if.end187, label %if.then185

if.then185:                                       ; preds = %land.lhs.true180
  %126 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %call186 = call i64 @Perl_sv_len_utf8_nomg(%struct.sv* %126)
  store i64 %call186, i64* %blen, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.then185, %land.lhs.true180, %if.end176
  store i8 1, i8* %charstart, align 1
  store i64 0, i64* %charskip, align 8
  store i64 0, i64* %skip, align 8
  %127 = load i64, i64* %length, align 8
  store i64 %127, i64* %wanted, align 8
  %128 = load i64, i64* %offset, align 8
  %cmp188 = icmp slt i64 %128, 0
  br i1 %cmp188, label %if.then190, label %if.end197

if.then190:                                       ; preds = %if.end187
  %129 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 0, %129
  %130 = load i64, i64* %blen, align 8
  %cmp191 = icmp sgt i64 %sub, %130
  br i1 %cmp191, label %if.then193, label %if.end195

if.then193:                                       ; preds = %if.then190
  %call194 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.46, i64 0, i64 0))
  store %struct.op* %call194, %struct.op** %retval, align 8
  br label %return

if.end195:                                        ; preds = %if.then190
  %131 = load i64, i64* %blen, align 8
  %132 = load i64, i64* %offset, align 8
  %add196 = add i64 %132, %131
  store i64 %add196, i64* %offset, align 8
  br label %if.end197

if.end197:                                        ; preds = %if.end195, %if.end187
  %133 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags198 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags198, align 4
  %and199 = and i32 %134, 536870912
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %land.lhs.true201, label %if.end221

land.lhs.true201:                                 ; preds = %if.end197
  %135 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints202 = getelementptr inbounds %struct.cop, %struct.cop* %135, i32 0, i32 10
  %136 = load i32, i32* %cop_hints202, align 8
  %add203 = add i32 %136, 0
  %and204 = and i32 %add203, 8
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %if.end221, label %if.then206

if.then206:                                       ; preds = %land.lhs.true201
  %137 = load i64, i64* %offset, align 8
  %138 = load i64, i64* %blen, align 8
  %cmp207 = icmp sge i64 %137, %138
  br i1 %cmp207, label %if.then209, label %if.else214

if.then209:                                       ; preds = %if.then206
  %139 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any210 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 0
  %140 = load i8*, i8** %sv_any210, align 8
  %141 = bitcast i8* %140 to %struct.xpv*
  %xpv_cur211 = getelementptr inbounds %struct.xpv, %struct.xpv* %141, i32 0, i32 2
  %142 = load i64, i64* %xpv_cur211, align 8
  %143 = load i64, i64* %blen, align 8
  %sub212 = sub i64 %142, %143
  %144 = load i64, i64* %offset, align 8
  %add213 = add i64 %144, %sub212
  store i64 %add213, i64* %offset, align 8
  br label %if.end220

if.else214:                                       ; preds = %if.then206
  %145 = load i8*, i8** %buffer, align 8
  %146 = load i64, i64* %offset, align 8
  %conv215 = trunc i64 %146 to i32
  %call216 = call i8* @Perl_utf8_hop(i8* %145, i32 %conv215)
  %147 = load i8*, i8** %buffer, align 8
  %sub.ptr.lhs.cast217 = ptrtoint i8* %call216 to i64
  %sub.ptr.rhs.cast218 = ptrtoint i8* %147 to i64
  %sub.ptr.sub219 = sub i64 %sub.ptr.lhs.cast217, %sub.ptr.rhs.cast218
  store i64 %sub.ptr.sub219, i64* %offset, align 8
  br label %if.end220

if.end220:                                        ; preds = %if.else214, %if.then209
  br label %if.end221

if.end221:                                        ; preds = %if.end220, %land.lhs.true201, %if.end197
  br label %more_bytes

more_bytes:                                       ; preds = %if.then381, %if.then361, %if.end221
  %148 = load %struct.io*, %struct.io** %io, align 8
  %sv_u222 = getelementptr inbounds %struct.io, %struct.io* %148, i32 0, i32 3
  %svu_fp223 = bitcast %union.anon.2* %sv_u222 to %struct._PerlIO***
  %149 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp223, align 8
  %call224 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %149)
  store i32 %call224, i32* %fd, align 4
  %150 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any225 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 0
  %151 = load i8*, i8** %sv_any225, align 8
  %152 = bitcast i8* %151 to %struct.xpv*
  %xpv_cur226 = getelementptr inbounds %struct.xpv, %struct.xpv* %152, i32 0, i32 2
  %153 = load i64, i64* %xpv_cur226, align 8
  store i64 %153, i64* %orig_size, align 8
  %154 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags227 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags227, align 4
  %and228 = and i32 %155, 268435456
  %tobool229 = icmp ne i32 %and228, 0
  br i1 %tobool229, label %cond.true236, label %lor.lhs.false230

lor.lhs.false230:                                 ; preds = %more_bytes
  %156 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any231 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any231, align 8
  %158 = bitcast i8* %157 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %158, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.16* %xpv_len_u to i64*
  %159 = load i64, i64* %xpvlenu_len, align 8
  %160 = load i64, i64* %length, align 8
  %161 = load i64, i64* %offset, align 8
  %add232 = add nsw i64 %160, %161
  %add233 = add nsw i64 %add232, 1
  %cmp234 = icmp ult i64 %159, %add233
  br i1 %cmp234, label %cond.true236, label %cond.false240

cond.true236:                                     ; preds = %lor.lhs.false230, %more_bytes
  %162 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %163 = load i64, i64* %length, align 8
  %164 = load i64, i64* %offset, align 8
  %add237 = add nsw i64 %163, %164
  %add238 = add nsw i64 %add237, 1
  %call239 = call i8* @Perl_sv_grow(%struct.sv* %162, i64 %add238)
  br label %cond.end243

cond.false240:                                    ; preds = %lor.lhs.false230
  %165 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u241 = getelementptr inbounds %struct.sv, %struct.sv* %165, i32 0, i32 3
  %svu_pv242 = bitcast %union.anon* %sv_u241 to i8**
  %166 = load i8*, i8** %svu_pv242, align 8
  br label %cond.end243

cond.end243:                                      ; preds = %cond.false240, %cond.true236
  %cond244 = phi i8* [ %call239, %cond.true236 ], [ %166, %cond.false240 ]
  store i8* %cond244, i8** %buffer, align 8
  %167 = load i64, i64* %offset, align 8
  %cmp245 = icmp sgt i64 %167, 0
  br i1 %cmp245, label %land.lhs.true247, label %if.end253

land.lhs.true247:                                 ; preds = %cond.end243
  %168 = load i64, i64* %offset, align 8
  %169 = load i64, i64* %orig_size, align 8
  %cmp248 = icmp sgt i64 %168, %169
  br i1 %cmp248, label %if.then250, label %if.end253

if.then250:                                       ; preds = %land.lhs.true247
  %170 = load i8*, i8** %buffer, align 8
  %171 = load i64, i64* %orig_size, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %170, i64 %171
  %172 = load i64, i64* %offset, align 8
  %173 = load i64, i64* %orig_size, align 8
  %sub252 = sub i64 %172, %173
  %mul = mul i64 %sub252, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr251, i8 0, i64 %mul, i1 false)
  br label %if.end253

if.end253:                                        ; preds = %if.then250, %land.lhs.true247, %cond.end243
  %174 = load i8*, i8** %buffer, align 8
  %175 = load i64, i64* %offset, align 8
  %add.ptr254 = getelementptr inbounds i8, i8* %174, i64 %175
  store i8* %add.ptr254, i8** %buffer, align 8
  %176 = load i32, i32* %buffer_utf8, align 4
  %tobool255 = icmp ne i32 %176, 0
  br i1 %tobool255, label %if.else257, label %if.then256

if.then256:                                       ; preds = %if.end253
  %177 = load %struct.sv*, %struct.sv** %bufsv, align 8
  store %struct.sv* %177, %struct.sv** %read_target, align 8
  br label %if.end283

if.else257:                                       ; preds = %if.end253
  br label %do.body

do.body:                                          ; preds = %if.else257
  %178 = load i64, i64* %offset, align 8
  %179 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any258 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 0
  %180 = load i8*, i8** %sv_any258, align 8
  %181 = bitcast i8* %180 to %struct.xpv*
  %xpv_cur259 = getelementptr inbounds %struct.xpv, %struct.xpv* %181, i32 0, i32 2
  store i64 %178, i64* %xpv_cur259, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %call260 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call260, %struct.sv** %read_target, align 8
  %182 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_flags261 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 2
  %183 = load i32, i32* %sv_flags261, align 4
  %and262 = and i32 %183, 255
  %cmp263 = icmp uge i32 %and262, 3
  br i1 %cmp263, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.end
  %184 = load %struct.sv*, %struct.sv** %read_target, align 8
  call void @Perl_sv_upgrade(%struct.sv* %184, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.end
  %185 = phi i1 [ true, %do.end ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %185 to i32
  %186 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_flags265 = getelementptr inbounds %struct.sv, %struct.sv* %186, i32 0, i32 2
  %187 = load i32, i32* %sv_flags265, align 4
  %and266 = and i32 %187, 268435456
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %cond.true275, label %lor.lhs.false268

lor.lhs.false268:                                 ; preds = %lor.end
  %188 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_any269 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 0
  %189 = load i8*, i8** %sv_any269, align 8
  %190 = bitcast i8* %189 to %struct.xpv*
  %xpv_len_u270 = getelementptr inbounds %struct.xpv, %struct.xpv* %190, i32 0, i32 3
  %xpvlenu_len271 = bitcast %union.anon.16* %xpv_len_u270 to i64*
  %191 = load i64, i64* %xpvlenu_len271, align 8
  %192 = load i64, i64* %length, align 8
  %add272 = add nsw i64 %192, 1
  %cmp273 = icmp ult i64 %191, %add272
  br i1 %cmp273, label %cond.true275, label %cond.false278

cond.true275:                                     ; preds = %lor.lhs.false268, %lor.end
  %193 = load %struct.sv*, %struct.sv** %read_target, align 8
  %194 = load i64, i64* %length, align 8
  %add276 = add nsw i64 %194, 1
  %call277 = call i8* @Perl_sv_grow(%struct.sv* %193, i64 %add276)
  br label %cond.end281

cond.false278:                                    ; preds = %lor.lhs.false268
  %195 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_u279 = getelementptr inbounds %struct.sv, %struct.sv* %195, i32 0, i32 3
  %svu_pv280 = bitcast %union.anon* %sv_u279 to i8**
  %196 = load i8*, i8** %svu_pv280, align 8
  br label %cond.end281

cond.end281:                                      ; preds = %cond.false278, %cond.true275
  %cond282 = phi i8* [ %call277, %cond.true275 ], [ %196, %cond.false278 ]
  store i8* %cond282, i8** %buffer, align 8
  br label %if.end283

if.end283:                                        ; preds = %cond.end281, %if.then256
  %197 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type284 = getelementptr inbounds %struct.op, %struct.op* %197, i32 0, i32 4
  %bf.load285 = load i16, i16* %op_type284, align 8
  %bf.clear286 = and i16 %bf.load285, 511
  %bf.cast287 = zext i16 %bf.clear286 to i32
  %cmp288 = icmp eq i32 %bf.cast287, 242
  br i1 %cmp288, label %if.then290, label %if.else298

if.then290:                                       ; preds = %if.end283
  %198 = load i32, i32* %fd, align 4
  %cmp291 = icmp slt i32 %198, 0
  br i1 %cmp291, label %if.then293, label %if.else295

if.then293:                                       ; preds = %if.then290
  %call294 = call i32* @__errno_location() #9
  store i32 9, i32* %call294, align 4
  store i64 -1, i64* %count, align 8
  br label %if.end297

if.else295:                                       ; preds = %if.then290
  %199 = load i32, i32* %fd, align 4
  %200 = load i8*, i8** %buffer, align 8
  %201 = load i64, i64* %length, align 8
  %call296 = call i64 @read(i32 %199, i8* %200, i64 %201)
  store i64 %call296, i64* %count, align 8
  br label %if.end297

if.end297:                                        ; preds = %if.else295, %if.then293
  br label %if.end311

if.else298:                                       ; preds = %if.end283
  %202 = load %struct.io*, %struct.io** %io, align 8
  %sv_u299 = getelementptr inbounds %struct.io, %struct.io* %202, i32 0, i32 3
  %svu_fp300 = bitcast %union.anon.2* %sv_u299 to %struct._PerlIO***
  %203 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp300, align 8
  %204 = load i8*, i8** %buffer, align 8
  %205 = load i64, i64* %length, align 8
  %call301 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %203, i8* %204, i64 %205)
  store i64 %call301, i64* %count, align 8
  %206 = load i64, i64* %count, align 8
  %cmp302 = icmp eq i64 %206, 0
  br i1 %cmp302, label %land.lhs.true304, label %if.end310

land.lhs.true304:                                 ; preds = %if.else298
  %207 = load %struct.io*, %struct.io** %io, align 8
  %sv_u305 = getelementptr inbounds %struct.io, %struct.io* %207, i32 0, i32 3
  %svu_fp306 = bitcast %union.anon.2* %sv_u305 to %struct._PerlIO***
  %208 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp306, align 8
  %call307 = call i32 @Perl_PerlIO_error(%struct._PerlIO** %208)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.then309, label %if.end310

if.then309:                                       ; preds = %land.lhs.true304
  store i64 -1, i64* %count, align 8
  br label %if.end310

if.end310:                                        ; preds = %if.then309, %land.lhs.true304, %if.else298
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %if.end297
  %209 = load i64, i64* %count, align 8
  %cmp312 = icmp slt i64 %209, 0
  br i1 %cmp312, label %if.then314, label %if.end321

if.then314:                                       ; preds = %if.end311
  %210 = load %struct.io*, %struct.io** %io, align 8
  %sv_any315 = getelementptr inbounds %struct.io, %struct.io* %210, i32 0, i32 0
  %211 = load %struct.xpvio*, %struct.xpvio** %sv_any315, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %211, i32 0, i32 16
  %212 = load i8, i8* %xio_type, align 8
  %conv316 = sext i8 %212 to i32
  %cmp317 = icmp eq i32 %conv316, 62
  br i1 %cmp317, label %if.then319, label %if.end320

if.then319:                                       ; preds = %if.then314
  %213 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_wrongway_fh(%struct.gv* %213, i8 signext 62)
  br label %if.end320

if.end320:                                        ; preds = %if.then319, %if.then314
  br label %say_undef

if.end321:                                        ; preds = %if.end311
  br label %do.body322

do.body322:                                       ; preds = %if.end321
  %214 = load i64, i64* %count, align 8
  %215 = load i8*, i8** %buffer, align 8
  %216 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_u323 = getelementptr inbounds %struct.sv, %struct.sv* %216, i32 0, i32 3
  %svu_pv324 = bitcast %union.anon* %sv_u323 to i8**
  %217 = load i8*, i8** %svu_pv324, align 8
  %add.ptr325 = getelementptr inbounds i8, i8* %217, i64 0
  %sub.ptr.lhs.cast326 = ptrtoint i8* %215 to i64
  %sub.ptr.rhs.cast327 = ptrtoint i8* %add.ptr325 to i64
  %sub.ptr.sub328 = sub i64 %sub.ptr.lhs.cast326, %sub.ptr.rhs.cast327
  %add329 = add nsw i64 %214, %sub.ptr.sub328
  %218 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_any330 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 0
  %219 = load i8*, i8** %sv_any330, align 8
  %220 = bitcast i8* %219 to %struct.xpv*
  %xpv_cur331 = getelementptr inbounds %struct.xpv, %struct.xpv* %220, i32 0, i32 2
  store i64 %add329, i64* %xpv_cur331, align 8
  br label %do.end332

do.end332:                                        ; preds = %do.body322
  %221 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_u333 = getelementptr inbounds %struct.sv, %struct.sv* %221, i32 0, i32 3
  %svu_pv334 = bitcast %union.anon* %sv_u333 to i8**
  %222 = load i8*, i8** %svu_pv334, align 8
  %223 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_any335 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 0
  %224 = load i8*, i8** %sv_any335, align 8
  %225 = bitcast i8* %224 to %struct.xpv*
  %xpv_cur336 = getelementptr inbounds %struct.xpv, %struct.xpv* %225, i32 0, i32 2
  %226 = load i64, i64* %xpv_cur336, align 8
  %add.ptr337 = getelementptr inbounds i8, i8* %222, i64 %226
  store i8 0, i8* %add.ptr337, align 1
  %227 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_flags338 = getelementptr inbounds %struct.sv, %struct.sv* %227, i32 0, i32 2
  %228 = load i32, i32* %sv_flags338, align 4
  %and339 = and i32 %228, 1610547455
  store i32 %and339, i32* %sv_flags338, align 4
  %229 = load %struct.sv*, %struct.sv** %read_target, align 8
  %sv_flags340 = getelementptr inbounds %struct.sv, %struct.sv* %229, i32 0, i32 2
  %230 = load i32, i32* %sv_flags340, align 4
  %or341 = or i32 %230, 17408
  store i32 %or341, i32* %sv_flags340, align 4
  %231 = load i32, i32* %fp_utf8, align 4
  %tobool342 = icmp ne i32 %231, 0
  br i1 %tobool342, label %land.lhs.true343, label %if.else392

land.lhs.true343:                                 ; preds = %do.end332
  %232 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints344 = getelementptr inbounds %struct.cop, %struct.cop* %232, i32 0, i32 10
  %233 = load i32, i32* %cop_hints344, align 8
  %add345 = add i32 %233, 0
  %and346 = and i32 %add345, 8
  %tobool347 = icmp ne i32 %and346, 0
  br i1 %tobool347, label %if.else392, label %if.then348

if.then348:                                       ; preds = %land.lhs.true343
  %234 = load i8*, i8** %buffer, align 8
  %235 = load i64, i64* %count, align 8
  %add.ptr349 = getelementptr inbounds i8, i8* %234, i64 %235
  store i8* %add.ptr349, i8** %bend, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end375, %if.then348
  %236 = load i8*, i8** %buffer, align 8
  %237 = load i8*, i8** %bend, align 8
  %cmp350 = icmp ult i8* %236, %237
  br i1 %cmp350, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %238 = load i8, i8* %charstart, align 1
  %tobool352 = trunc i8 %238 to i1
  br i1 %tobool352, label %if.then353, label %if.end356

if.then353:                                       ; preds = %while.body
  %239 = load i8*, i8** %buffer, align 8
  %240 = load i8, i8* %239, align 1
  %idxprom = zext i8 %240 to i64
  %arrayidx354 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %241 = load i8, i8* %arrayidx354, align 1
  %conv355 = zext i8 %241 to i64
  store i64 %conv355, i64* %skip, align 8
  store i64 0, i64* %charskip, align 8
  br label %if.end356

if.end356:                                        ; preds = %if.then353, %while.body
  %242 = load i8*, i8** %buffer, align 8
  %243 = load i64, i64* %charskip, align 8
  %idx.neg = sub i64 0, %243
  %add.ptr357 = getelementptr inbounds i8, i8* %242, i64 %idx.neg
  %244 = load i64, i64* %skip, align 8
  %add.ptr358 = getelementptr inbounds i8, i8* %add.ptr357, i64 %244
  %245 = load i8*, i8** %bend, align 8
  %cmp359 = icmp ugt i8* %add.ptr358, %245
  br i1 %cmp359, label %if.then361, label %if.else373

if.then361:                                       ; preds = %if.end356
  %246 = load i64, i64* %skip, align 8
  %247 = load i8*, i8** %bend, align 8
  %248 = load i8*, i8** %buffer, align 8
  %sub.ptr.lhs.cast362 = ptrtoint i8* %247 to i64
  %sub.ptr.rhs.cast363 = ptrtoint i8* %248 to i64
  %sub.ptr.sub364 = sub i64 %sub.ptr.lhs.cast362, %sub.ptr.rhs.cast363
  %sub365 = sub i64 %246, %sub.ptr.sub364
  store i64 %sub365, i64* %length, align 8
  %249 = load i8*, i8** %bend, align 8
  %250 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u366 = getelementptr inbounds %struct.sv, %struct.sv* %250, i32 0, i32 3
  %svu_pv367 = bitcast %union.anon* %sv_u366 to i8**
  %251 = load i8*, i8** %svu_pv367, align 8
  %add.ptr368 = getelementptr inbounds i8, i8* %251, i64 0
  %sub.ptr.lhs.cast369 = ptrtoint i8* %249 to i64
  %sub.ptr.rhs.cast370 = ptrtoint i8* %add.ptr368 to i64
  %sub.ptr.sub371 = sub i64 %sub.ptr.lhs.cast369, %sub.ptr.rhs.cast370
  store i64 %sub.ptr.sub371, i64* %offset, align 8
  store i8 0, i8* %charstart, align 1
  %252 = load i64, i64* %count, align 8
  %253 = load i64, i64* %charskip, align 8
  %add372 = add i64 %253, %252
  store i64 %add372, i64* %charskip, align 8
  br label %more_bytes

if.else373:                                       ; preds = %if.end356
  %254 = load i64, i64* %got, align 8
  %inc = add i64 %254, 1
  store i64 %inc, i64* %got, align 8
  %255 = load i64, i64* %skip, align 8
  %256 = load i8*, i8** %buffer, align 8
  %add.ptr374 = getelementptr inbounds i8, i8* %256, i64 %255
  store i8* %add.ptr374, i8** %buffer, align 8
  store i8 1, i8* %charstart, align 1
  store i64 0, i64* %charskip, align 8
  br label %if.end375

if.end375:                                        ; preds = %if.else373
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %257 = load i64, i64* %got, align 8
  %258 = load i64, i64* %wanted, align 8
  %cmp376 = icmp ult i64 %257, %258
  br i1 %cmp376, label %land.lhs.true378, label %if.end389

land.lhs.true378:                                 ; preds = %while.end
  %259 = load i64, i64* %count, align 8
  %260 = load i64, i64* %length, align 8
  %cmp379 = icmp eq i64 %259, %260
  br i1 %cmp379, label %if.then381, label %if.end389

if.then381:                                       ; preds = %land.lhs.true378
  %261 = load i64, i64* %wanted, align 8
  %262 = load i64, i64* %got, align 8
  %sub382 = sub i64 %261, %262
  store i64 %sub382, i64* %length, align 8
  %263 = load i8*, i8** %bend, align 8
  %264 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u383 = getelementptr inbounds %struct.sv, %struct.sv* %264, i32 0, i32 3
  %svu_pv384 = bitcast %union.anon* %sv_u383 to i8**
  %265 = load i8*, i8** %svu_pv384, align 8
  %add.ptr385 = getelementptr inbounds i8, i8* %265, i64 0
  %sub.ptr.lhs.cast386 = ptrtoint i8* %263 to i64
  %sub.ptr.rhs.cast387 = ptrtoint i8* %add.ptr385 to i64
  %sub.ptr.sub388 = sub i64 %sub.ptr.lhs.cast386, %sub.ptr.rhs.cast387
  store i64 %sub.ptr.sub388, i64* %offset, align 8
  br label %more_bytes

if.end389:                                        ; preds = %land.lhs.true378, %while.end
  %266 = load i64, i64* %got, align 8
  store i64 %266, i64* %count, align 8
  %267 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags390 = getelementptr inbounds %struct.sv, %struct.sv* %267, i32 0, i32 2
  %268 = load i32, i32* %sv_flags390, align 4
  %or391 = or i32 %268, 536870912
  store i32 %or391, i32* %sv_flags390, align 4
  br label %if.end396

if.else392:                                       ; preds = %land.lhs.true343, %do.end332
  %269 = load i32, i32* %buffer_utf8, align 4
  %tobool393 = icmp ne i32 %269, 0
  br i1 %tobool393, label %if.then394, label %if.end395

if.then394:                                       ; preds = %if.else392
  %270 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %271 = load %struct.sv*, %struct.sv** %read_target, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %270, %struct.sv* %271, i32 0)
  br label %if.end395

if.end395:                                        ; preds = %if.then394, %if.else392
  br label %if.end396

if.end396:                                        ; preds = %if.end395, %if.end389
  br label %do.body397

do.body397:                                       ; preds = %if.end396
  %272 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags398 = getelementptr inbounds %struct.sv, %struct.sv* %272, i32 0, i32 2
  %273 = load i32, i32* %sv_flags398, align 4
  %and399 = and i32 %273, 4194304
  %tobool400 = icmp ne i32 %and399, 0
  br i1 %tobool400, label %cond.true401, label %cond.false402

cond.true401:                                     ; preds = %do.body397
  br i1 true, label %if.then403, label %if.end405

cond.false402:                                    ; preds = %do.body397
  br i1 false, label %if.then403, label %if.end405

if.then403:                                       ; preds = %cond.false402, %cond.true401
  %274 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %call404 = call i32 @Perl_mg_set(%struct.sv* %274)
  br label %if.end405

if.end405:                                        ; preds = %if.then403, %cond.false402, %cond.true401
  br label %do.end406

do.end406:                                        ; preds = %if.end405
  %275 = load %struct.io*, %struct.io** %io, align 8
  %sv_any407 = getelementptr inbounds %struct.io, %struct.io* %275, i32 0, i32 0
  %276 = load %struct.xpvio*, %struct.xpvio** %sv_any407, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %276, i32 0, i32 17
  %277 = load i8, i8* %xio_flags, align 1
  %conv408 = zext i8 %277 to i32
  %and409 = and i32 %conv408, 16
  %tobool410 = icmp ne i32 %and409, 0
  br i1 %tobool410, label %if.end420, label %if.then411

if.then411:                                       ; preds = %do.end406
  br label %do.body412

do.body412:                                       ; preds = %if.then411
  %278 = load i8, i8* @PL_tainting, align 1
  %tobool413 = trunc i8 %278 to i1
  br i1 %tobool413, label %cond.true415, label %cond.false416

cond.true415:                                     ; preds = %do.body412
  br i1 true, label %if.then417, label %if.end418

cond.false416:                                    ; preds = %do.body412
  br i1 false, label %if.then417, label %if.end418

if.then417:                                       ; preds = %cond.false416, %cond.true415
  %279 = load %struct.sv*, %struct.sv** %bufsv, align 8
  call void @Perl_sv_magic(%struct.sv* %279, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end418

if.end418:                                        ; preds = %if.then417, %cond.false416, %cond.true415
  br label %do.end419

do.end419:                                        ; preds = %if.end418
  br label %if.end420

if.end420:                                        ; preds = %do.end419, %do.end406
  %280 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %281 = load i32, i32* %origmark, align 4
  %idx.ext421 = sext i32 %281 to i64
  %add.ptr422 = getelementptr inbounds %struct.sv*, %struct.sv** %280, i64 %idx.ext421
  store %struct.sv** %add.ptr422, %struct.sv*** %sp, align 8
  br label %do.body423

do.body423:                                       ; preds = %if.end420
  %282 = load %struct.sv*, %struct.sv** %targ, align 8
  %283 = load i64, i64* %count, align 8
  call void @Perl_sv_setiv(%struct.sv* %282, i64 %283)
  br label %do.body424

do.body424:                                       ; preds = %do.body423
  br label %do.body425

do.body425:                                       ; preds = %do.body424
  %284 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags426 = getelementptr inbounds %struct.sv, %struct.sv* %284, i32 0, i32 2
  %285 = load i32, i32* %sv_flags426, align 4
  %and427 = and i32 %285, 4194304
  %tobool428 = icmp ne i32 %and427, 0
  br i1 %tobool428, label %cond.true429, label %cond.false430

cond.true429:                                     ; preds = %do.body425
  br i1 true, label %if.then431, label %if.end433

cond.false430:                                    ; preds = %do.body425
  br i1 false, label %if.then431, label %if.end433

if.then431:                                       ; preds = %cond.false430, %cond.true429
  %286 = load %struct.sv*, %struct.sv** %targ, align 8
  %call432 = call i32 @Perl_mg_set(%struct.sv* %286)
  br label %if.end433

if.end433:                                        ; preds = %if.then431, %cond.false430, %cond.true429
  br label %do.end434

do.end434:                                        ; preds = %if.end433
  %287 = load %struct.sv*, %struct.sv** %targ, align 8
  %288 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr435 = getelementptr inbounds %struct.sv*, %struct.sv** %288, i32 1
  store %struct.sv** %incdec.ptr435, %struct.sv*** %sp, align 8
  store %struct.sv* %287, %struct.sv** %incdec.ptr435, align 8
  br label %do.end436

do.end436:                                        ; preds = %do.end434
  br label %do.end437

do.end437:                                        ; preds = %do.end436
  %289 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %289, %struct.sv*** @PL_stack_sp, align 8
  %290 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %290, i32 0, i32 0
  %291 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %291, %struct.op** %retval, align 8
  br label %return

say_undef:                                        ; preds = %if.end320, %if.then129, %if.then50
  %292 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %293 = load i32, i32* %origmark, align 4
  %idx.ext438 = sext i32 %293 to i64
  %add.ptr439 = getelementptr inbounds %struct.sv*, %struct.sv** %292, i64 %idx.ext438
  store %struct.sv** %add.ptr439, %struct.sv*** %sp, align 8
  %294 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr440 = getelementptr inbounds %struct.sv*, %struct.sv** %294, i32 1
  store %struct.sv** %incdec.ptr440, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr440, align 8
  %295 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %295, %struct.sv*** @PL_stack_sp, align 8
  %296 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next441 = getelementptr inbounds %struct.op, %struct.op* %296, i32 0, i32 0
  %297 = load %struct.op*, %struct.op** %op_next441, align 8
  store %struct.op* %297, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %say_undef, %do.end437, %if.then193, %if.then80, %cond.end39
  %298 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %298
}

declare dso_local i8* @Perl_sv_pvutf8n_force(%struct.sv*, i64*) #1

declare dso_local i64 @Perl_sv_len_utf8_nomg(%struct.sv*) #1

declare dso_local i8* @Perl_utf8_hop(i8*, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local void @Perl_sv_upgrade(%struct.sv*, i32) #1

declare dso_local i64 @read(i32, i8*, i64) #1

declare dso_local i32 @Perl_PerlIO_error(%struct._PerlIO**) #1

declare dso_local void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_syswrite() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %bufsv = alloca %struct.sv*, align 8
  %buffer = alloca i8*, align 8
  %retval1 = alloca i64, align 8
  %blen = alloca i64, align 8
  %orig_blen_bytes = alloca i64, align 8
  %op_type = alloca i32, align 4
  %doing_utf8 = alloca i8, align 1
  %tmpbuf = alloca i8*, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %fd = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %sv = alloca %struct.sv*, align 8
  %tmplen = alloca i64, align 8
  %result = alloca i8*, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  %length = alloca i64, align 8
  %blen_chars = alloca i64, align 8
  %offset = alloca i64, align 8
  %start = alloca i32, align 4
  %len_I32 = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load = load i16, i16* %op_type2, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  store i8* null, i8** %tmpbuf, align 8
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %mark, align 8
  %12 = load %struct.sv*, %struct.sv** %incdec.ptr3, align 8
  %13 = bitcast %struct.sv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  %15 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %15, null
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %16 = load %struct.gv*, %struct.gv** %gv, align 8
  %17 = bitcast %struct.gv* %16 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and = and i32 %18, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %land.lhs.true9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %19 = load %struct.gv*, %struct.gv** %gv, align 8
  %20 = bitcast %struct.gv* %19 to %struct.sv*
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %21, 255
  %cmp7 = icmp eq i32 %and6, 10
  br i1 %cmp7, label %land.lhs.true9, label %cond.false

land.lhs.true9:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr10 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %tobool11 = icmp ne %struct.gp* %add.ptr10, null
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true9
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u12 = getelementptr inbounds %struct.gv, %struct.gv* %24, i32 0, i32 3
  %svu_gp13 = bitcast %union.anon.4* %sv_u12 to %struct.gp**
  %25 = load %struct.gp*, %struct.gp** %svu_gp13, align 8
  %add.ptr14 = getelementptr inbounds %struct.gp, %struct.gp* %25, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr14, i32 0, i32 1
  %26 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true9, %lor.lhs.false, %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.io* [ %26, %cond.true ], [ null, %cond.false ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %27 = load i32, i32* %op_type, align 4
  %cmp15 = icmp eq i32 %27, 243
  br i1 %cmp15, label %land.lhs.true17, label %if.end62

land.lhs.true17:                                  ; preds = %cond.end
  %28 = load %struct.io*, %struct.io** %io, align 8
  %tobool18 = icmp ne %struct.io* %28, null
  br i1 %tobool18, label %if.then, label %if.end62

if.then:                                          ; preds = %land.lhs.true17
  %29 = load %struct.io*, %struct.io** %io, align 8
  %30 = bitcast %struct.io* %29 to %struct.sv*
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %31, 8388608
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false23

cond.true22:                                      ; preds = %if.then
  %32 = load %struct.io*, %struct.io** %io, align 8
  %33 = bitcast %struct.io* %32 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %33, i32 113)
  br label %cond.end24

cond.false23:                                     ; preds = %if.then
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi %struct.magic* [ %call, %cond.true22 ], [ null, %cond.false23 ]
  store %struct.magic* %cond25, %struct.magic** %mg, align 8
  %34 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool26 = icmp ne %struct.magic* %34, null
  br i1 %tobool26, label %if.then27, label %if.end61

if.then27:                                        ; preds = %cond.end24
  %35 = load %struct.sv**, %struct.sv*** %mark, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i64 -1
  %cmp29 = icmp eq %struct.sv** %35, %add.ptr28
  br i1 %cmp29, label %if.then31, label %if.end47

if.then31:                                        ; preds = %if.then27
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  store %struct.sv* %38, %struct.sv** %sv, align 8
  br label %do.body

do.body:                                          ; preds = %if.then31
  br label %do.body32

do.body32:                                        ; preds = %do.body
  %39 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast33 = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.rhs.cast34 = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36 = sdiv exact i64 %sub.ptr.sub35, 8
  %cmp37 = icmp slt i64 %sub.ptr.div36, 1
  br i1 %cmp37, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %do.body32
  br i1 true, label %if.then41, label %if.end

cond.false40:                                     ; preds = %do.body32
  br i1 false, label %if.then41, label %if.end

if.then41:                                        ; preds = %cond.false40, %cond.true39
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call42 = call %struct.sv** @Perl_stack_grow(%struct.sv** %41, %struct.sv** %42, i64 1)
  store %struct.sv** %call42, %struct.sv*** %sp, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then41, %cond.false40, %cond.true39
  br label %do.end

do.end:                                           ; preds = %if.end
  %call43 = call %struct.sv* @Perl_sv_newmortal()
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr44 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i32 1
  store %struct.sv** %incdec.ptr44, %struct.sv*** %sp, align 8
  store %struct.sv* %call43, %struct.sv** %incdec.ptr44, align 8
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  %call45 = call i64 @Perl_sv_len(%struct.sv* %45)
  call void @Perl_sv_setiv(%struct.sv* %call43, i64 %call45)
  br label %do.end46

do.end46:                                         ; preds = %do.end
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %46, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end47

if.end47:                                         ; preds = %do.end46, %if.then27
  %47 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 19), align 8
  %tobool48 = icmp ne %struct.sv* %47, null
  br i1 %tobool48, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %if.end47
  %48 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 19), align 8
  br label %cond.end52

cond.false50:                                     ; preds = %if.end47
  %call51 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0), i32 0)
  store %struct.sv* %call51, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 19), align 8
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true49
  %cond53 = phi %struct.sv* [ %48, %cond.true49 ], [ %call51, %cond.false50 ]
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr54 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i64 -1
  %50 = load %struct.io*, %struct.io** %io, align 8
  %51 = bitcast %struct.io* %50 to i8*
  %52 = bitcast i8* %51 to %struct.sv*
  %53 = load %struct.magic*, %struct.magic** %mg, align 8
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %55 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast55 = ptrtoint %struct.sv** %54 to i64
  %sub.ptr.rhs.cast56 = ptrtoint %struct.sv** %55 to i64
  %sub.ptr.sub57 = sub i64 %sub.ptr.lhs.cast55, %sub.ptr.rhs.cast56
  %sub.ptr.div58 = sdiv exact i64 %sub.ptr.sub57, 8
  %conv59 = trunc i64 %sub.ptr.div58 to i32
  %call60 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond53, %struct.sv** %add.ptr54, %struct.sv* %52, %struct.magic* %53, i32 10, i32 %conv59)
  store %struct.op* %call60, %struct.op** %retval, align 8
  br label %return

if.end61:                                         ; preds = %cond.end24
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %land.lhs.true17, %cond.end
  %56 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool63 = icmp ne %struct.gv* %56, null
  br i1 %tobool63, label %if.end65, label %if.then64

if.then64:                                        ; preds = %if.end62
  br label %say_undef

if.end65:                                         ; preds = %if.end62
  %57 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr66 = getelementptr inbounds %struct.sv*, %struct.sv** %57, i32 1
  store %struct.sv** %incdec.ptr66, %struct.sv*** %mark, align 8
  %58 = load %struct.sv*, %struct.sv** %incdec.ptr66, align 8
  store %struct.sv* %58, %struct.sv** %bufsv, align 8
  %call67 = call i32* @__errno_location() #9
  store i32 0, i32* %call67, align 4
  %59 = load %struct.io*, %struct.io** %io, align 8
  %tobool68 = icmp ne %struct.io* %59, null
  br i1 %tobool68, label %lor.lhs.false69, label %if.then76

lor.lhs.false69:                                  ; preds = %if.end65
  %60 = load %struct.io*, %struct.io** %io, align 8
  %sv_u70 = getelementptr inbounds %struct.io, %struct.io* %60, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u70 to %struct._PerlIO***
  %61 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool71 = icmp ne %struct._PerlIO** %61, null
  br i1 %tobool71, label %lor.lhs.false72, label %if.then76

lor.lhs.false72:                                  ; preds = %lor.lhs.false69
  %62 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %62, i32 0, i32 0
  %63 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_type = getelementptr inbounds %struct.xpvio, %struct.xpvio* %63, i32 0, i32 16
  %64 = load i8, i8* %xio_type, align 8
  %conv73 = sext i8 %64 to i32
  %cmp74 = icmp eq i32 %conv73, 60
  br i1 %cmp74, label %if.then76, label %if.end85

if.then76:                                        ; preds = %lor.lhs.false72, %lor.lhs.false69, %if.end65
  store i64 -1, i64* %retval1, align 8
  %65 = load %struct.io*, %struct.io** %io, align 8
  %tobool77 = icmp ne %struct.io* %65, null
  br i1 %tobool77, label %land.lhs.true78, label %if.else

land.lhs.true78:                                  ; preds = %if.then76
  %66 = load %struct.io*, %struct.io** %io, align 8
  %sv_u79 = getelementptr inbounds %struct.io, %struct.io* %66, i32 0, i32 3
  %svu_fp80 = bitcast %union.anon.2* %sv_u79 to %struct._PerlIO***
  %67 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp80, align 8
  %tobool81 = icmp ne %struct._PerlIO** %67, null
  br i1 %tobool81, label %if.then82, label %if.else

if.then82:                                        ; preds = %land.lhs.true78
  %68 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_wrongway_fh(%struct.gv* %68, i8 signext 60)
  br label %if.end83

if.else:                                          ; preds = %land.lhs.true78, %if.then76
  %69 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %69)
  br label %if.end83

if.end83:                                         ; preds = %if.else, %if.then82
  %call84 = call i32* @__errno_location() #9
  store i32 9, i32* %call84, align 4
  br label %say_undef

if.end85:                                         ; preds = %lor.lhs.false72
  %70 = load %struct.io*, %struct.io** %io, align 8
  %sv_u86 = getelementptr inbounds %struct.io, %struct.io* %70, i32 0, i32 3
  %svu_fp87 = bitcast %union.anon.2* %sv_u86 to %struct._PerlIO***
  %71 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp87, align 8
  %call88 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %71)
  store i32 %call88, i32* %fd, align 4
  %72 = load i32, i32* %fd, align 4
  %cmp89 = icmp slt i32 %72, 0
  br i1 %cmp89, label %if.then91, label %if.end93

if.then91:                                        ; preds = %if.end85
  %call92 = call i32* @__errno_location() #9
  store i32 9, i32* %call92, align 4
  store i64 -1, i64* %retval1, align 8
  br label %say_undef

if.end93:                                         ; preds = %if.end85
  %73 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %74, 2098176
  %cmp96 = icmp eq i32 %and95, 1024
  br i1 %cmp96, label %cond.true98, label %cond.false102

cond.true98:                                      ; preds = %if.end93
  %75 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any99, align 8
  %77 = bitcast i8* %76 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %77, i32 0, i32 2
  %78 = load i64, i64* %xpv_cur, align 8
  store i64 %78, i64* %blen, align 8
  %79 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u100 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u100 to i8**
  %80 = load i8*, i8** %svu_pv, align 8
  %add.ptr101 = getelementptr inbounds i8, i8* %80, i64 0
  br label %cond.end104

cond.false102:                                    ; preds = %if.end93
  %81 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %call103 = call i8* @Perl_sv_2pv_flags(%struct.sv* %81, i64* %blen, i32 34)
  br label %cond.end104

cond.end104:                                      ; preds = %cond.false102, %cond.true98
  %cond105 = phi i8* [ %add.ptr101, %cond.true98 ], [ %call103, %cond.false102 ]
  store i8* %cond105, i8** %buffer, align 8
  %82 = load i64, i64* %blen, align 8
  store i64 %82, i64* %orig_blen_bytes, align 8
  %83 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags106 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags106, align 4
  %and107 = and i32 %84, 536870912
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end104
  %85 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %85, i32 0, i32 10
  %86 = load i32, i32* %cop_hints, align 8
  %add = add i32 %86, 0
  %and109 = and i32 %add, 8
  %tobool110 = icmp ne i32 %and109, 0
  %lnot = xor i1 %tobool110, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end104
  %87 = phi i1 [ false, %cond.end104 ], [ %lnot, %land.rhs ]
  %frombool = zext i1 %87 to i8
  store i8 %frombool, i8* %doing_utf8, align 1
  %88 = load %struct.io*, %struct.io** %io, align 8
  %sv_u111 = getelementptr inbounds %struct.io, %struct.io* %88, i32 0, i32 3
  %svu_fp112 = bitcast %union.anon.2* %sv_u111 to %struct._PerlIO***
  %89 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp112, align 8
  %call113 = call i32 @PerlIO_isutf8(%struct._PerlIO** %89)
  %tobool114 = icmp ne i32 %call113, 0
  br i1 %tobool114, label %if.then115, label %if.else122

if.then115:                                       ; preds = %land.end
  %90 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags116 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags116, align 4
  %and117 = and i32 %91, 536870912
  %tobool118 = icmp ne i32 %and117, 0
  br i1 %tobool118, label %if.end121, label %if.then119

if.then119:                                       ; preds = %if.then115
  %92 = load i8*, i8** %buffer, align 8
  %call120 = call i8* @Perl_bytes_to_utf8(i8* %92, i64* %blen)
  store i8* %call120, i8** %tmpbuf, align 8
  %93 = load i8*, i8** %tmpbuf, align 8
  store i8* %93, i8** %buffer, align 8
  store i8 1, i8* %doing_utf8, align 1
  br label %if.end121

if.end121:                                        ; preds = %if.then119, %if.then115
  br label %if.end147

if.else122:                                       ; preds = %land.end
  %94 = load i8, i8* %doing_utf8, align 1
  %tobool123 = trunc i8 %94 to i1
  br i1 %tobool123, label %if.then124, label %if.end146

if.then124:                                       ; preds = %if.else122
  %95 = load i64, i64* %blen, align 8
  store i64 %95, i64* %tmplen, align 8
  %96 = load i8*, i8** %buffer, align 8
  %call125 = call i8* @Perl_bytes_from_utf8(i8* %96, i64* %tmplen, i8* %doing_utf8)
  store i8* %call125, i8** %result, align 8
  %97 = load i8, i8* %doing_utf8, align 1
  %tobool126 = trunc i8 %97 to i1
  br i1 %tobool126, label %if.else128, label %if.then127

if.then127:                                       ; preds = %if.then124
  %98 = load i8*, i8** %result, align 8
  store i8* %98, i8** %tmpbuf, align 8
  %99 = load i8*, i8** %tmpbuf, align 8
  store i8* %99, i8** %buffer, align 8
  %100 = load i64, i64* %tmplen, align 8
  store i64 %100, i64* %blen, align 8
  br label %if.end145

if.else128:                                       ; preds = %if.then124
  %101 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type129 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 4
  %bf.load130 = load i16, i16* %op_type129, align 8
  %bf.clear131 = and i16 %bf.load130, 511
  %bf.cast132 = zext i16 %bf.clear131 to i32
  %cmp133 = icmp eq i32 %bf.cast132, 380
  br i1 %cmp133, label %cond.true135, label %cond.false137

cond.true135:                                     ; preds = %if.else128
  %102 = load %struct.op*, %struct.op** @PL_op, align 8
  %call136 = call i8* @Perl_custom_op_get_field(%struct.op* %102, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call136, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %103 = load i8*, i8** %xop_desc, align 8
  br label %cond.end143

cond.false137:                                    ; preds = %if.else128
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type138 = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 4
  %bf.load139 = load i16, i16* %op_type138, align 8
  %bf.clear140 = and i16 %bf.load139, 511
  %bf.cast141 = zext i16 %bf.clear140 to i32
  %idxprom = zext i32 %bf.cast141 to i64
  %arrayidx142 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %105 = load i8*, i8** %arrayidx142, align 8
  br label %cond.end143

cond.end143:                                      ; preds = %cond.false137, %cond.true135
  %cond144 = phi i8* [ %103, %cond.true135 ], [ %105, %cond.false137 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.48, i64 0, i64 0), i8* %cond144)
  br label %if.end145

if.end145:                                        ; preds = %cond.end143, %if.then127
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.else122
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.end121
  store i64 0, i64* %length, align 8
  %106 = load i8, i8* %doing_utf8, align 1
  %tobool148 = trunc i8 %106 to i1
  br i1 %tobool148, label %if.then149, label %if.else180

if.then149:                                       ; preds = %if.end147
  %107 = load i8*, i8** %tmpbuf, align 8
  %tobool150 = icmp ne i8* %107, null
  br i1 %tobool150, label %if.then151, label %if.else152

if.then151:                                       ; preds = %if.then149
  %108 = load i64, i64* %orig_blen_bytes, align 8
  store i64 %108, i64* %blen_chars, align 8
  br label %if.end179

if.else152:                                       ; preds = %if.then149
  %109 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags153 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags153, align 4
  %and154 = and i32 %110, 2097152
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %cond.true172, label %lor.lhs.false156

lor.lhs.false156:                                 ; preds = %if.else152
  %111 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %112, 2048
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.lhs.true160, label %cond.false175

land.lhs.true160:                                 ; preds = %lor.lhs.false156
  %113 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u161 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u161 to %struct.sv**
  %114 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags162 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags162, align 4
  %and163 = and i32 %115, 1048576
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %land.lhs.true165, label %cond.false175

land.lhs.true165:                                 ; preds = %land.lhs.true160
  %116 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u166 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 3
  %svu_rv167 = bitcast %union.anon* %sv_u166 to %struct.sv**
  %117 = load %struct.sv*, %struct.sv** %svu_rv167, align 8
  %sv_any168 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 0
  %118 = load i8*, i8** %sv_any168, align 8
  %119 = bitcast i8* %118 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %119, i32 0, i32 0
  %120 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags169 = getelementptr inbounds %struct.hv, %struct.hv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags169, align 4
  %and170 = and i32 %121, 268435456
  %tobool171 = icmp ne i32 %and170, 0
  br i1 %tobool171, label %cond.true172, label %cond.false175

cond.true172:                                     ; preds = %land.lhs.true165, %if.else152
  %122 = load i8*, i8** %buffer, align 8
  %123 = load i8*, i8** %buffer, align 8
  %124 = load i64, i64* %blen, align 8
  %add.ptr173 = getelementptr inbounds i8, i8* %123, i64 %124
  %call174 = call i64 @Perl_utf8_length(i8* %122, i8* %add.ptr173)
  br label %cond.end177

cond.false175:                                    ; preds = %land.lhs.true165, %land.lhs.true160, %lor.lhs.false156
  %125 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %call176 = call i64 @Perl_sv_len_utf8(%struct.sv* %125)
  br label %cond.end177

cond.end177:                                      ; preds = %cond.false175, %cond.true172
  %cond178 = phi i64 [ %call174, %cond.true172 ], [ %call176, %cond.false175 ]
  store i64 %cond178, i64* %blen_chars, align 8
  br label %if.end179

if.end179:                                        ; preds = %cond.end177, %if.then151
  br label %if.end181

if.else180:                                       ; preds = %if.end147
  %126 = load i64, i64* %blen, align 8
  store i64 %126, i64* %blen_chars, align 8
  br label %if.end181

if.end181:                                        ; preds = %if.else180, %if.end179
  %127 = load %struct.sv**, %struct.sv*** %mark, align 8
  %128 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp182 = icmp uge %struct.sv** %127, %128
  br i1 %cmp182, label %if.then184, label %if.else185

if.then184:                                       ; preds = %if.end181
  %129 = load i64, i64* %blen_chars, align 8
  store i64 %129, i64* %length, align 8
  br label %if.end202

if.else185:                                       ; preds = %if.end181
  %130 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr186 = getelementptr inbounds %struct.sv*, %struct.sv** %130, i32 1
  store %struct.sv** %incdec.ptr186, %struct.sv*** %mark, align 8
  %131 = load %struct.sv*, %struct.sv** %incdec.ptr186, align 8
  store %struct.sv* %131, %struct.sv** @PL_Sv, align 8
  %132 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags187 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags187, align 4
  %and188 = and i32 %133, 2097408
  %cmp189 = icmp eq i32 %and188, 256
  br i1 %cmp189, label %cond.true191, label %cond.false193

cond.true191:                                     ; preds = %if.else185
  %134 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any192 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 0
  %135 = load i8*, i8** %sv_any192, align 8
  %136 = bitcast i8* %135 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %136, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %137 = load i64, i64* %xivu_iv, align 8
  br label %cond.end195

cond.false193:                                    ; preds = %if.else185
  %138 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call194 = call i64 @Perl_sv_2iv_flags(%struct.sv* %138, i32 2)
  br label %cond.end195

cond.end195:                                      ; preds = %cond.false193, %cond.true191
  %cond196 = phi i64 [ %137, %cond.true191 ], [ %call194, %cond.false193 ]
  store i64 %cond196, i64* %length, align 8
  %139 = load i64, i64* %length, align 8
  %cmp197 = icmp slt i64 %139, 0
  br i1 %cmp197, label %if.then199, label %if.end201

if.then199:                                       ; preds = %cond.end195
  %140 = load i8*, i8** %tmpbuf, align 8
  call void @Perl_safesysfree(i8* %140)
  %call200 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i64 0, i64 0))
  store %struct.op* %call200, %struct.op** %retval, align 8
  br label %return

if.end201:                                        ; preds = %cond.end195
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.then184
  %141 = load %struct.sv**, %struct.sv*** %mark, align 8
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp203 = icmp ult %struct.sv** %141, %142
  br i1 %cmp203, label %if.then205, label %if.else235

if.then205:                                       ; preds = %if.end202
  %143 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr206 = getelementptr inbounds %struct.sv*, %struct.sv** %143, i32 1
  store %struct.sv** %incdec.ptr206, %struct.sv*** %mark, align 8
  %144 = load %struct.sv*, %struct.sv** %incdec.ptr206, align 8
  store %struct.sv* %144, %struct.sv** @PL_Sv, align 8
  %145 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags207 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 2
  %146 = load i32, i32* %sv_flags207, align 4
  %and208 = and i32 %146, 2097408
  %cmp209 = icmp eq i32 %and208, 256
  br i1 %cmp209, label %cond.true211, label %cond.false215

cond.true211:                                     ; preds = %if.then205
  %147 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any212 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 0
  %148 = load i8*, i8** %sv_any212, align 8
  %149 = bitcast i8* %148 to %struct.xpviv*
  %xiv_u213 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %149, i32 0, i32 4
  %xivu_iv214 = bitcast %union._xivu* %xiv_u213 to i64*
  %150 = load i64, i64* %xivu_iv214, align 8
  br label %cond.end217

cond.false215:                                    ; preds = %if.then205
  %151 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call216 = call i64 @Perl_sv_2iv_flags(%struct.sv* %151, i32 2)
  br label %cond.end217

cond.end217:                                      ; preds = %cond.false215, %cond.true211
  %cond218 = phi i64 [ %150, %cond.true211 ], [ %call216, %cond.false215 ]
  store i64 %cond218, i64* %offset, align 8
  %152 = load i64, i64* %offset, align 8
  %cmp219 = icmp slt i64 %152, 0
  br i1 %cmp219, label %if.then221, label %if.else228

if.then221:                                       ; preds = %cond.end217
  %153 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 0, %153
  %154 = load i64, i64* %blen_chars, align 8
  %cmp222 = icmp sgt i64 %sub, %154
  br i1 %cmp222, label %if.then224, label %if.end226

if.then224:                                       ; preds = %if.then221
  %155 = load i8*, i8** %tmpbuf, align 8
  call void @Perl_safesysfree(i8* %155)
  %call225 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.46, i64 0, i64 0))
  store %struct.op* %call225, %struct.op** %retval, align 8
  br label %return

if.end226:                                        ; preds = %if.then221
  %156 = load i64, i64* %blen_chars, align 8
  %157 = load i64, i64* %offset, align 8
  %add227 = add i64 %157, %156
  store i64 %add227, i64* %offset, align 8
  br label %if.end234

if.else228:                                       ; preds = %cond.end217
  %158 = load i64, i64* %offset, align 8
  %159 = load i64, i64* %blen_chars, align 8
  %cmp229 = icmp sgt i64 %158, %159
  br i1 %cmp229, label %if.then231, label %if.end233

if.then231:                                       ; preds = %if.else228
  %160 = load i8*, i8** %tmpbuf, align 8
  call void @Perl_safesysfree(i8* %160)
  %call232 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.46, i64 0, i64 0))
  store %struct.op* %call232, %struct.op** %retval, align 8
  br label %return

if.end233:                                        ; preds = %if.else228
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %if.end226
  br label %if.end236

if.else235:                                       ; preds = %if.end202
  store i64 0, i64* %offset, align 8
  br label %if.end236

if.end236:                                        ; preds = %if.else235, %if.end234
  %161 = load i64, i64* %length, align 8
  %162 = load i64, i64* %blen_chars, align 8
  %163 = load i64, i64* %offset, align 8
  %sub237 = sub i64 %162, %163
  %cmp238 = icmp ugt i64 %161, %sub237
  br i1 %cmp238, label %if.then240, label %if.end242

if.then240:                                       ; preds = %if.end236
  %164 = load i64, i64* %blen_chars, align 8
  %165 = load i64, i64* %offset, align 8
  %sub241 = sub i64 %164, %165
  store i64 %sub241, i64* %length, align 8
  br label %if.end242

if.end242:                                        ; preds = %if.then240, %if.end236
  %166 = load i8, i8* %doing_utf8, align 1
  %tobool243 = trunc i8 %166 to i1
  br i1 %tobool243, label %if.then244, label %if.else283

if.then244:                                       ; preds = %if.end242
  %167 = load i8*, i8** %tmpbuf, align 8
  %tobool245 = icmp ne i8* %167, null
  br i1 %tobool245, label %if.then268, label %lor.lhs.false246

lor.lhs.false246:                                 ; preds = %if.then244
  %168 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags247 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 2
  %169 = load i32, i32* %sv_flags247, align 4
  %and248 = and i32 %169, 2097152
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %if.then268, label %lor.lhs.false250

lor.lhs.false250:                                 ; preds = %lor.lhs.false246
  %170 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_flags251 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 2
  %171 = load i32, i32* %sv_flags251, align 4
  %and252 = and i32 %171, 2048
  %tobool253 = icmp ne i32 %and252, 0
  br i1 %tobool253, label %land.lhs.true254, label %if.else276

land.lhs.true254:                                 ; preds = %lor.lhs.false250
  %172 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u255 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 3
  %svu_rv256 = bitcast %union.anon* %sv_u255 to %struct.sv**
  %173 = load %struct.sv*, %struct.sv** %svu_rv256, align 8
  %sv_flags257 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 2
  %174 = load i32, i32* %sv_flags257, align 4
  %and258 = and i32 %174, 1048576
  %tobool259 = icmp ne i32 %and258, 0
  br i1 %tobool259, label %land.lhs.true260, label %if.else276

land.lhs.true260:                                 ; preds = %land.lhs.true254
  %175 = load %struct.sv*, %struct.sv** %bufsv, align 8
  %sv_u261 = getelementptr inbounds %struct.sv, %struct.sv* %175, i32 0, i32 3
  %svu_rv262 = bitcast %union.anon* %sv_u261 to %struct.sv**
  %176 = load %struct.sv*, %struct.sv** %svu_rv262, align 8
  %sv_any263 = getelementptr inbounds %struct.sv, %struct.sv* %176, i32 0, i32 0
  %177 = load i8*, i8** %sv_any263, align 8
  %178 = bitcast i8* %177 to %struct.xpvmg*
  %xmg_stash264 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %178, i32 0, i32 0
  %179 = load %struct.hv*, %struct.hv** %xmg_stash264, align 8
  %sv_flags265 = getelementptr inbounds %struct.hv, %struct.hv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags265, align 4
  %and266 = and i32 %180, 268435456
  %tobool267 = icmp ne i32 %and266, 0
  br i1 %tobool267, label %if.then268, label %if.else276

if.then268:                                       ; preds = %land.lhs.true260, %lor.lhs.false246, %if.then244
  %181 = load i8*, i8** %buffer, align 8
  %182 = load i64, i64* %offset, align 8
  %conv269 = trunc i64 %182 to i32
  %call270 = call i8* @Perl_utf8_hop(i8* %181, i32 %conv269)
  store i8* %call270, i8** %buffer, align 8
  %183 = load i8*, i8** %buffer, align 8
  %184 = load i64, i64* %length, align 8
  %conv271 = trunc i64 %184 to i32
  %call272 = call i8* @Perl_utf8_hop(i8* %183, i32 %conv271)
  %185 = load i8*, i8** %buffer, align 8
  %sub.ptr.lhs.cast273 = ptrtoint i8* %call272 to i64
  %sub.ptr.rhs.cast274 = ptrtoint i8* %185 to i64
  %sub.ptr.sub275 = sub i64 %sub.ptr.lhs.cast273, %sub.ptr.rhs.cast274
  store i64 %sub.ptr.sub275, i64* %length, align 8
  br label %if.end282

if.else276:                                       ; preds = %land.lhs.true260, %land.lhs.true254, %lor.lhs.false250
  %186 = load i64, i64* %offset, align 8
  %conv277 = trunc i64 %186 to i32
  store i32 %conv277, i32* %start, align 4
  %187 = load i64, i64* %length, align 8
  %conv278 = trunc i64 %187 to i32
  store i32 %conv278, i32* %len_I32, align 4
  %188 = load %struct.sv*, %struct.sv** %bufsv, align 8
  call void @Perl_sv_pos_u2b(%struct.sv* %188, i32* %start, i32* %len_I32)
  %189 = load i32, i32* %start, align 4
  %190 = load i8*, i8** %buffer, align 8
  %idx.ext279 = sext i32 %189 to i64
  %add.ptr280 = getelementptr inbounds i8, i8* %190, i64 %idx.ext279
  store i8* %add.ptr280, i8** %buffer, align 8
  %191 = load i32, i32* %len_I32, align 4
  %conv281 = sext i32 %191 to i64
  store i64 %conv281, i64* %length, align 8
  br label %if.end282

if.end282:                                        ; preds = %if.else276, %if.then268
  br label %if.end285

if.else283:                                       ; preds = %if.end242
  %192 = load i8*, i8** %buffer, align 8
  %193 = load i64, i64* %offset, align 8
  %add.ptr284 = getelementptr inbounds i8, i8* %192, i64 %193
  store i8* %add.ptr284, i8** %buffer, align 8
  br label %if.end285

if.end285:                                        ; preds = %if.else283, %if.end282
  %194 = load i32, i32* %fd, align 4
  %195 = load i8*, i8** %buffer, align 8
  %196 = load i64, i64* %length, align 8
  %call286 = call i64 @write(i32 %194, i8* %195, i64 %196)
  store i64 %call286, i64* %retval1, align 8
  %197 = load i64, i64* %retval1, align 8
  %cmp287 = icmp slt i64 %197, 0
  br i1 %cmp287, label %if.then289, label %if.end290

if.then289:                                       ; preds = %if.end285
  br label %say_undef

if.end290:                                        ; preds = %if.end285
  %198 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %199 = load i32, i32* %origmark, align 4
  %idx.ext291 = sext i32 %199 to i64
  %add.ptr292 = getelementptr inbounds %struct.sv*, %struct.sv** %198, i64 %idx.ext291
  store %struct.sv** %add.ptr292, %struct.sv*** %sp, align 8
  %200 = load i8, i8* %doing_utf8, align 1
  %tobool293 = trunc i8 %200 to i1
  br i1 %tobool293, label %if.then294, label %if.end297

if.then294:                                       ; preds = %if.end290
  %201 = load i8*, i8** %buffer, align 8
  %202 = load i8*, i8** %buffer, align 8
  %203 = load i64, i64* %retval1, align 8
  %add.ptr295 = getelementptr inbounds i8, i8* %202, i64 %203
  %call296 = call i64 @Perl_utf8_length(i8* %201, i8* %add.ptr295)
  store i64 %call296, i64* %retval1, align 8
  br label %if.end297

if.end297:                                        ; preds = %if.then294, %if.end290
  %204 = load i8*, i8** %tmpbuf, align 8
  call void @Perl_safesysfree(i8* %204)
  br label %do.body298

do.body298:                                       ; preds = %if.end297
  %205 = load %struct.sv*, %struct.sv** %targ, align 8
  %206 = load i64, i64* %retval1, align 8
  call void @Perl_sv_setiv(%struct.sv* %205, i64 %206)
  br label %do.body299

do.body299:                                       ; preds = %do.body298
  br label %do.body300

do.body300:                                       ; preds = %do.body299
  %207 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags301 = getelementptr inbounds %struct.sv, %struct.sv* %207, i32 0, i32 2
  %208 = load i32, i32* %sv_flags301, align 4
  %and302 = and i32 %208, 4194304
  %tobool303 = icmp ne i32 %and302, 0
  br i1 %tobool303, label %cond.true304, label %cond.false305

cond.true304:                                     ; preds = %do.body300
  br i1 true, label %if.then306, label %if.end308

cond.false305:                                    ; preds = %do.body300
  br i1 false, label %if.then306, label %if.end308

if.then306:                                       ; preds = %cond.false305, %cond.true304
  %209 = load %struct.sv*, %struct.sv** %targ, align 8
  %call307 = call i32 @Perl_mg_set(%struct.sv* %209)
  br label %if.end308

if.end308:                                        ; preds = %if.then306, %cond.false305, %cond.true304
  br label %do.end309

do.end309:                                        ; preds = %if.end308
  %210 = load %struct.sv*, %struct.sv** %targ, align 8
  %211 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr310 = getelementptr inbounds %struct.sv*, %struct.sv** %211, i32 1
  store %struct.sv** %incdec.ptr310, %struct.sv*** %sp, align 8
  store %struct.sv* %210, %struct.sv** %incdec.ptr310, align 8
  br label %do.end311

do.end311:                                        ; preds = %do.end309
  br label %do.end312

do.end312:                                        ; preds = %do.end311
  %212 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %212, %struct.sv*** @PL_stack_sp, align 8
  %213 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %213, i32 0, i32 0
  %214 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %214, %struct.op** %retval, align 8
  br label %return

say_undef:                                        ; preds = %if.then289, %if.then91, %if.end83, %if.then64
  %215 = load i8*, i8** %tmpbuf, align 8
  call void @Perl_safesysfree(i8* %215)
  %216 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %217 = load i32, i32* %origmark, align 4
  %idx.ext313 = sext i32 %217 to i64
  %add.ptr314 = getelementptr inbounds %struct.sv*, %struct.sv** %216, i64 %idx.ext313
  store %struct.sv** %add.ptr314, %struct.sv*** %sp, align 8
  %218 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr315 = getelementptr inbounds %struct.sv*, %struct.sv** %218, i32 1
  store %struct.sv** %incdec.ptr315, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr315, align 8
  %219 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %219, %struct.sv*** @PL_stack_sp, align 8
  %220 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next316 = getelementptr inbounds %struct.op, %struct.op* %220, i32 0, i32 0
  %221 = load %struct.op*, %struct.op** %op_next316, align 8
  store %struct.op* %221, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %say_undef, %do.end312, %if.then231, %if.then224, %if.then199, %cond.end52
  %222 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %222
}

declare dso_local i64 @Perl_sv_len(%struct.sv*) #1

declare dso_local i8* @Perl_bytes_to_utf8(i8*, i64*) #1

declare dso_local i8* @Perl_bytes_from_utf8(i8*, i64*, i8*) #1

declare dso_local i8* @Perl_custom_op_get_field(%struct.op*, i32) #1

declare dso_local i64 @Perl_utf8_length(i8*, i8*) #1

declare dso_local i64 @Perl_sv_len_utf8(%struct.sv*) #1

declare dso_local void @Perl_safesysfree(i8*) #1

declare dso_local void @Perl_sv_pos_u2b(%struct.sv*, i32*, i32*) #1

declare dso_local i64 @write(i32, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_eof() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %mg = alloca %struct.magic*, align 8
  %which = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.gv*
  store %struct.gv* %6, %struct.gv** @PL_last_in_gv, align 8
  store %struct.gv* %6, %struct.gv** %gv, align 8
  store i32 1, i32* %which, align 4
  br label %if.end22

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %7 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %7 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then2, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then2, label %if.end

if.then2:                                         ; preds = %cond.false, %cond.true
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %9, %struct.sv** %10, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv3 = zext i8 %13 to i32
  %and4 = and i32 %conv3, 128
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.else20

if.then6:                                         ; preds = %do.end
  %14 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and7 = and i32 %15, 49152
  %cmp8 = icmp eq i32 %and7, 32768
  br i1 %cmp8, label %land.lhs.true, label %cond.false19

land.lhs.true:                                    ; preds = %if.then6
  %16 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_flags10 = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %17, 255
  %cmp12 = icmp eq i32 %and11, 9
  br i1 %cmp12, label %cond.true18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %18 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_flags14 = getelementptr inbounds %struct.gv, %struct.gv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %19, 255
  %cmp16 = icmp eq i32 %and15, 10
  br i1 %cmp16, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %lor.lhs.false, %land.lhs.true
  %20 = load %struct.gv*, %struct.gv** @PL_argvgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %20, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %21 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %21, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 8
  %22 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  br label %cond.end

cond.false19:                                     ; preds = %lor.lhs.false, %if.then6
  br label %cond.end

cond.end:                                         ; preds = %cond.false19, %cond.true18
  %cond = phi %struct.gv* [ %22, %cond.true18 ], [ null, %cond.false19 ]
  store %struct.gv* %cond, %struct.gv** @PL_last_in_gv, align 8
  store %struct.gv* %cond, %struct.gv** %gv, align 8
  store i32 2, i32* %which, align 4
  br label %if.end21

if.else20:                                        ; preds = %do.end
  %23 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  store %struct.gv* %23, %struct.gv** %gv, align 8
  store i32 0, i32* %which, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %cond.end
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool23 = icmp ne %struct.gv* %24, null
  br i1 %tobool23, label %if.end26, label %if.then24

if.then24:                                        ; preds = %if.end22
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr25 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 1
  store %struct.sv** %incdec.ptr25, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr25, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %28, %struct.op** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.end22
  %29 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool27 = icmp ne %struct.gv* %29, null
  br i1 %tobool27, label %land.lhs.true28, label %cond.false47

land.lhs.true28:                                  ; preds = %if.end26
  %30 = load %struct.gv*, %struct.gv** %gv, align 8
  %31 = bitcast %struct.gv* %30 to %struct.sv*
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %32, 255
  %cmp31 = icmp eq i32 %and30, 9
  br i1 %cmp31, label %land.lhs.true38, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true28
  %33 = load %struct.gv*, %struct.gv** %gv, align 8
  %34 = bitcast %struct.gv* %33 to %struct.sv*
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %35, 255
  %cmp36 = icmp eq i32 %and35, 10
  br i1 %cmp36, label %land.lhs.true38, label %cond.false47

land.lhs.true38:                                  ; preds = %lor.lhs.false33, %land.lhs.true28
  %36 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u39 = getelementptr inbounds %struct.gv, %struct.gv* %36, i32 0, i32 3
  %svu_gp40 = bitcast %union.anon.4* %sv_u39 to %struct.gp**
  %37 = load %struct.gp*, %struct.gp** %svu_gp40, align 8
  %add.ptr41 = getelementptr inbounds %struct.gp, %struct.gp* %37, i64 0
  %tobool42 = icmp ne %struct.gp* %add.ptr41, null
  br i1 %tobool42, label %cond.true43, label %cond.false47

cond.true43:                                      ; preds = %land.lhs.true38
  %38 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u44 = getelementptr inbounds %struct.gv, %struct.gv* %38, i32 0, i32 3
  %svu_gp45 = bitcast %union.anon.4* %sv_u44 to %struct.gp**
  %39 = load %struct.gp*, %struct.gp** %svu_gp45, align 8
  %add.ptr46 = getelementptr inbounds %struct.gp, %struct.gp* %39, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr46, i32 0, i32 1
  %40 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end48

cond.false47:                                     ; preds = %land.lhs.true38, %lor.lhs.false33, %if.end26
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.true43
  %cond49 = phi %struct.io* [ %40, %cond.true43 ], [ null, %cond.false47 ]
  store %struct.io* %cond49, %struct.io** %io, align 8
  %tobool50 = icmp ne %struct.io* %cond49, null
  br i1 %tobool50, label %land.lhs.true51, label %if.end71

land.lhs.true51:                                  ; preds = %cond.end48
  %41 = load %struct.io*, %struct.io** %io, align 8
  %42 = bitcast %struct.io* %41 to %struct.sv*
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %43, 8388608
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %cond.true55, label %cond.false57

cond.true55:                                      ; preds = %land.lhs.true51
  %44 = load %struct.io*, %struct.io** %io, align 8
  %45 = bitcast %struct.io* %44 to %struct.sv*
  %call56 = call %struct.magic* @Perl_mg_find(%struct.sv* %45, i32 113)
  br label %cond.end58

cond.false57:                                     ; preds = %land.lhs.true51
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.magic* [ %call56, %cond.true55 ], [ null, %cond.false57 ]
  store %struct.magic* %cond59, %struct.magic** %mg, align 8
  %tobool60 = icmp ne %struct.magic* %cond59, null
  br i1 %tobool60, label %if.then61, label %if.end71

if.then61:                                        ; preds = %cond.end58
  %46 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 27), align 8
  %tobool62 = icmp ne %struct.sv* %46, null
  br i1 %tobool62, label %cond.true63, label %cond.false64

cond.true63:                                      ; preds = %if.then61
  %47 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 27), align 8
  br label %cond.end66

cond.false64:                                     ; preds = %if.then61
  %call65 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i64 0, i64 0), i32 0)
  store %struct.sv* %call65, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 27), align 8
  br label %cond.end66

cond.end66:                                       ; preds = %cond.false64, %cond.true63
  %cond67 = phi %struct.sv* [ %47, %cond.true63 ], [ %call65, %cond.false64 ]
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %49 = load %struct.io*, %struct.io** %io, align 8
  %50 = bitcast %struct.io* %49 to i8*
  %51 = bitcast i8* %50 to %struct.sv*
  %52 = load %struct.magic*, %struct.magic** %mg, align 8
  %53 = load i32, i32* %which, align 4
  %conv68 = zext i32 %53 to i64
  %call69 = call %struct.sv* @Perl_newSVuv(i64 %conv68)
  %call70 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond67, %struct.sv** %48, %struct.sv* %51, %struct.magic* %52, i32 2, i32 1, %struct.sv* %call69)
  store %struct.op* %call70, %struct.op** %retval, align 8
  br label %return

if.end71:                                         ; preds = %cond.end58, %cond.end48
  %54 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private72 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 6
  %55 = load i8, i8* %op_private72, align 1
  %conv73 = zext i8 %55 to i32
  %and74 = and i32 %conv73, 15
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.end146, label %land.lhs.true76

land.lhs.true76:                                  ; preds = %if.end71
  %56 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags77 = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 5
  %57 = load i8, i8* %op_flags77, align 2
  %conv78 = zext i8 %57 to i32
  %and79 = and i32 %conv78, 128
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then81, label %if.end146

if.then81:                                        ; preds = %land.lhs.true76
  %58 = load %struct.io*, %struct.io** %io, align 8
  %tobool82 = icmp ne %struct.io* %58, null
  br i1 %tobool82, label %land.lhs.true83, label %if.end145

land.lhs.true83:                                  ; preds = %if.then81
  %59 = load %struct.io*, %struct.io** %io, align 8
  %sv_u84 = getelementptr inbounds %struct.io, %struct.io* %59, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u84 to %struct._PerlIO***
  %60 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool85 = icmp ne %struct._PerlIO** %60, null
  br i1 %tobool85, label %if.end145, label %if.then86

if.then86:                                        ; preds = %land.lhs.true83
  %61 = load %struct.io*, %struct.io** %io, align 8
  %sv_any = getelementptr inbounds %struct.io, %struct.io* %61, i32 0, i32 0
  %62 = load %struct.xpvio*, %struct.xpvio** %sv_any, align 8
  %xio_flags = getelementptr inbounds %struct.xpvio, %struct.xpvio* %62, i32 0, i32 17
  %63 = load i8, i8* %xio_flags, align 1
  %conv87 = zext i8 %63 to i32
  %and88 = and i32 %conv87, 2
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %land.lhs.true90, label %if.else137

land.lhs.true90:                                  ; preds = %if.then86
  %64 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u91 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp92 = bitcast %union.anon.4* %sv_u91 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp92, align 8
  %add.ptr93 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr93, i32 0, i32 6
  %66 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool94 = icmp ne %struct.av* %66, null
  br i1 %tobool94, label %cond.true95, label %cond.false100

cond.true95:                                      ; preds = %land.lhs.true90
  %67 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u96 = getelementptr inbounds %struct.gv, %struct.gv* %67, i32 0, i32 3
  %svu_gp97 = bitcast %union.anon.4* %sv_u96 to %struct.gp**
  %68 = load %struct.gp*, %struct.gp** %svu_gp97, align 8
  %add.ptr98 = getelementptr inbounds %struct.gp, %struct.gp* %68, i64 0
  %gp_av99 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr98, i32 0, i32 6
  %69 = load %struct.av*, %struct.av** %gp_av99, align 8
  br label %cond.end106

cond.false100:                                    ; preds = %land.lhs.true90
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %call101 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %70, i32 11)
  %sv_u102 = getelementptr inbounds %struct.gv, %struct.gv* %call101, i32 0, i32 3
  %svu_gp103 = bitcast %union.anon.4* %sv_u102 to %struct.gp**
  %71 = load %struct.gp*, %struct.gp** %svu_gp103, align 8
  %add.ptr104 = getelementptr inbounds %struct.gp, %struct.gp* %71, i64 0
  %gp_av105 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr104, i32 0, i32 6
  %72 = load %struct.av*, %struct.av** %gp_av105, align 8
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false100, %cond.true95
  %cond107 = phi %struct.av* [ %69, %cond.true95 ], [ %72, %cond.false100 ]
  %call108 = call i64 @S_av_top_index(%struct.av* %cond107)
  %cmp109 = icmp slt i64 %call108, 0
  br i1 %cmp109, label %if.then111, label %if.else137

if.then111:                                       ; preds = %cond.end106
  %73 = load %struct.io*, %struct.io** %io, align 8
  %sv_any112 = getelementptr inbounds %struct.io, %struct.io* %73, i32 0, i32 0
  %74 = load %struct.xpvio*, %struct.xpvio** %sv_any112, align 8
  %xiv_u = getelementptr inbounds %struct.xpvio, %struct.xpvio* %74, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  store i64 0, i64* %xivu_iv, align 8
  %75 = load %struct.io*, %struct.io** %io, align 8
  %sv_any113 = getelementptr inbounds %struct.io, %struct.io* %75, i32 0, i32 0
  %76 = load %struct.xpvio*, %struct.xpvio** %sv_any113, align 8
  %xio_flags114 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %76, i32 0, i32 17
  %77 = load i8, i8* %xio_flags114, align 1
  %conv115 = zext i8 %77 to i32
  %and116 = and i32 %conv115, -3
  %conv117 = trunc i32 %and116 to i8
  store i8 %conv117, i8* %xio_flags114, align 1
  %78 = load %struct.gv*, %struct.gv** %gv, align 8
  %call118 = call zeroext i1 @Perl_do_open6(%struct.gv* %78, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0), i64 1, %struct._PerlIO** null, %struct.sv** null, i32 0)
  %79 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u119 = getelementptr inbounds %struct.gv, %struct.gv* %79, i32 0, i32 3
  %svu_gp120 = bitcast %union.anon.4* %sv_u119 to %struct.gp**
  %80 = load %struct.gp*, %struct.gp** %svu_gp120, align 8
  %add.ptr121 = getelementptr inbounds %struct.gp, %struct.gp* %80, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr121, i32 0, i32 0
  store %struct.sv** %gp_sv, %struct.sv*** %svp, align 8
  %81 = load %struct.sv**, %struct.sv*** %svp, align 8
  %82 = load %struct.sv*, %struct.sv** %81, align 8
  %tobool122 = icmp ne %struct.sv* %82, null
  br i1 %tobool122, label %if.then123, label %if.else134

if.then123:                                       ; preds = %if.then111
  %83 = load %struct.sv**, %struct.sv*** %svp, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  store %struct.sv* %84, %struct.sv** %sv, align 8
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %85, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0), i64 1)
  br label %do.body124

do.body124:                                       ; preds = %if.then123
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags125 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 2
  %87 = load i32, i32* %sv_flags125, align 4
  %and126 = and i32 %87, 4194304
  %tobool127 = icmp ne i32 %and126, 0
  br i1 %tobool127, label %cond.true128, label %cond.false129

cond.true128:                                     ; preds = %do.body124
  br i1 true, label %if.then130, label %if.end132

cond.false129:                                    ; preds = %do.body124
  br i1 false, label %if.then130, label %if.end132

if.then130:                                       ; preds = %cond.false129, %cond.true128
  %88 = load %struct.sv*, %struct.sv** %sv, align 8
  %call131 = call i32 @Perl_mg_set(%struct.sv* %88)
  br label %if.end132

if.end132:                                        ; preds = %if.then130, %cond.false129, %cond.true128
  br label %do.end133

do.end133:                                        ; preds = %if.end132
  br label %if.end136

if.else134:                                       ; preds = %if.then111
  %call135 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0), i64 1)
  %89 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call135, %struct.sv** %89, align 8
  br label %if.end136

if.end136:                                        ; preds = %if.else134, %do.end133
  br label %if.end144

if.else137:                                       ; preds = %cond.end106, %if.then86
  %90 = load %struct.gv*, %struct.gv** %gv, align 8
  %call138 = call %struct._PerlIO** @Perl_nextargv(%struct.gv* %90, i1 zeroext false)
  %tobool139 = icmp ne %struct._PerlIO** %call138, null
  br i1 %tobool139, label %if.end143, label %if.then140

if.then140:                                       ; preds = %if.else137
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr141 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i32 1
  store %struct.sv** %incdec.ptr141, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr141, align 8
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %92, %struct.sv*** @PL_stack_sp, align 8
  %93 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next142 = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 0
  %94 = load %struct.op*, %struct.op** %op_next142, align 8
  store %struct.op* %94, %struct.op** %retval, align 8
  br label %return

if.end143:                                        ; preds = %if.else137
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.end136
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %land.lhs.true83, %if.then81
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %land.lhs.true76, %if.end71
  %95 = load %struct.gv*, %struct.gv** %gv, align 8
  %call147 = call zeroext i1 @Perl_do_eof(%struct.gv* %95)
  %96 = zext i1 %call147 to i64
  %cond149 = select i1 %call147, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr150 = getelementptr inbounds %struct.sv*, %struct.sv** %97, i32 1
  store %struct.sv** %incdec.ptr150, %struct.sv*** %sp, align 8
  store %struct.sv* %cond149, %struct.sv** %incdec.ptr150, align 8
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %98, %struct.sv*** @PL_stack_sp, align 8
  %99 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next151 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 0
  %100 = load %struct.op*, %struct.op** %op_next151, align 8
  store %struct.op* %100, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end146, %if.then140, %cond.end66, %if.then24
  %101 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %101
}

declare dso_local %struct._PerlIO** @Perl_nextargv(%struct.gv*, i1 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_tell() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %mg = alloca %struct.magic*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %tobool = icmp ne %struct.sv* %8, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %tobool2 = icmp ne %struct.sv* %10, null
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %13 = bitcast %struct.sv* %12 to i8*
  %14 = bitcast i8* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** @PL_last_in_gv, align 8
  br label %if.end7

if.else:                                          ; preds = %lor.lhs.false, %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %15 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp4 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then6, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then6, label %if.end

if.then6:                                         ; preds = %cond.false, %cond.true
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %17, %struct.sv** %18, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then6, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end7

if.end7:                                          ; preds = %do.end, %if.then
  %20 = load %struct.gv*, %struct.gv** @PL_last_in_gv, align 8
  store %struct.gv* %20, %struct.gv** %gv, align 8
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool8 = icmp ne %struct.gv* %21, null
  br i1 %tobool8, label %land.lhs.true9, label %cond.false24

land.lhs.true9:                                   ; preds = %if.end7
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %23 = bitcast %struct.gv* %22 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags, align 4
  %and10 = and i32 %24, 255
  %cmp11 = icmp eq i32 %and10, 9
  br i1 %cmp11, label %land.lhs.true18, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %land.lhs.true9
  %25 = load %struct.gv*, %struct.gv** %gv, align 8
  %26 = bitcast %struct.gv* %25 to %struct.sv*
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %27, 255
  %cmp16 = icmp eq i32 %and15, 10
  br i1 %cmp16, label %land.lhs.true18, label %cond.false24

land.lhs.true18:                                  ; preds = %lor.lhs.false13, %land.lhs.true9
  %28 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %28, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %29 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %29, i64 0
  %tobool19 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool19, label %cond.true20, label %cond.false24

cond.true20:                                      ; preds = %land.lhs.true18
  %30 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u21 = getelementptr inbounds %struct.gv, %struct.gv* %30, i32 0, i32 3
  %svu_gp22 = bitcast %union.anon.4* %sv_u21 to %struct.gp**
  %31 = load %struct.gp*, %struct.gp** %svu_gp22, align 8
  %add.ptr23 = getelementptr inbounds %struct.gp, %struct.gp* %31, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr23, i32 0, i32 1
  %32 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end

cond.false24:                                     ; preds = %land.lhs.true18, %lor.lhs.false13, %if.end7
  br label %cond.end

cond.end:                                         ; preds = %cond.false24, %cond.true20
  %cond = phi %struct.io* [ %32, %cond.true20 ], [ null, %cond.false24 ]
  store %struct.io* %cond, %struct.io** %io, align 8
  %33 = load %struct.io*, %struct.io** %io, align 8
  %tobool25 = icmp ne %struct.io* %33, null
  br i1 %tobool25, label %if.then26, label %if.else45

if.then26:                                        ; preds = %cond.end
  %34 = load %struct.io*, %struct.io** %io, align 8
  %35 = bitcast %struct.io* %34 to %struct.sv*
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %36, 8388608
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %cond.true30, label %cond.false32

cond.true30:                                      ; preds = %if.then26
  %37 = load %struct.io*, %struct.io** %io, align 8
  %38 = bitcast %struct.io* %37 to %struct.sv*
  %call31 = call %struct.magic* @Perl_mg_find(%struct.sv* %38, i32 113)
  br label %cond.end33

cond.false32:                                     ; preds = %if.then26
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.magic* [ %call31, %cond.true30 ], [ null, %cond.false32 ]
  store %struct.magic* %cond34, %struct.magic** %mg, align 8
  %39 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool35 = icmp ne %struct.magic* %39, null
  br i1 %tobool35, label %if.then36, label %if.end44

if.then36:                                        ; preds = %cond.end33
  %40 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 26), align 16
  %tobool37 = icmp ne %struct.sv* %40, null
  br i1 %tobool37, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %if.then36
  %41 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 26), align 16
  br label %cond.end41

cond.false39:                                     ; preds = %if.then36
  %call40 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0), i32 0)
  store %struct.sv* %call40, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 26), align 16
  br label %cond.end41

cond.end41:                                       ; preds = %cond.false39, %cond.true38
  %cond42 = phi %struct.sv* [ %41, %cond.true38 ], [ %call40, %cond.false39 ]
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %43 = load %struct.io*, %struct.io** %io, align 8
  %44 = bitcast %struct.io* %43 to i8*
  %45 = bitcast i8* %44 to %struct.sv*
  %46 = load %struct.magic*, %struct.magic** %mg, align 8
  %call43 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond42, %struct.sv** %42, %struct.sv* %45, %struct.magic* %46, i32 2, i32 0)
  store %struct.op* %call43, %struct.op** %retval, align 8
  br label %return

if.end44:                                         ; preds = %cond.end33
  br label %if.end69

if.else45:                                        ; preds = %cond.end
  %47 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool46 = icmp ne %struct.gv* %47, null
  br i1 %tobool46, label %if.end68, label %if.then47

if.then47:                                        ; preds = %if.else45
  %call48 = call i32* @__errno_location() #9
  %48 = load i32, i32* %call48, align 4
  %tobool49 = icmp ne i32 %48, 0
  br i1 %tobool49, label %if.end52, label %if.then50

if.then50:                                        ; preds = %if.then47
  %call51 = call i32* @__errno_location() #9
  store i32 9, i32* %call51, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %if.then47
  br label %do.body53

do.body53:                                        ; preds = %if.end52
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %49, i64 -1)
  br label %do.body54

do.body54:                                        ; preds = %do.body53
  br label %do.body55

do.body55:                                        ; preds = %do.body54
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %51, 4194304
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %do.body55
  br i1 true, label %if.then61, label %if.end63

cond.false60:                                     ; preds = %do.body55
  br i1 false, label %if.then61, label %if.end63

if.then61:                                        ; preds = %cond.false60, %cond.true59
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %call62 = call i32 @Perl_mg_set(%struct.sv* %52)
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %cond.false60, %cond.true59
  br label %do.end64

do.end64:                                         ; preds = %if.end63
  %53 = load %struct.sv*, %struct.sv** %targ, align 8
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %sp, align 8
  store %struct.sv* %53, %struct.sv** %incdec.ptr65, align 8
  br label %do.end66

do.end66:                                         ; preds = %do.end64
  br label %do.end67

do.end67:                                         ; preds = %do.end66
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %55, %struct.sv*** @PL_stack_sp, align 8
  %56 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %56, i32 0, i32 0
  %57 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %57, %struct.op** %retval, align 8
  br label %return

if.end68:                                         ; preds = %if.else45
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end44
  br label %do.body70

do.body70:                                        ; preds = %if.end69
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %59 = load %struct.gv*, %struct.gv** %gv, align 8
  %call71 = call i64 @Perl_do_tell(%struct.gv* %59)
  call void @Perl_sv_setiv(%struct.sv* %58, i64 %call71)
  br label %do.body72

do.body72:                                        ; preds = %do.body70
  br label %do.body73

do.body73:                                        ; preds = %do.body72
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %61, 4194304
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %cond.true77, label %cond.false78

cond.true77:                                      ; preds = %do.body73
  br i1 true, label %if.then79, label %if.end81

cond.false78:                                     ; preds = %do.body73
  br i1 false, label %if.then79, label %if.end81

if.then79:                                        ; preds = %cond.false78, %cond.true77
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %call80 = call i32 @Perl_mg_set(%struct.sv* %62)
  br label %if.end81

if.end81:                                         ; preds = %if.then79, %cond.false78, %cond.true77
  br label %do.end82

do.end82:                                         ; preds = %if.end81
  %63 = load %struct.sv*, %struct.sv** %targ, align 8
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr83 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i32 1
  store %struct.sv** %incdec.ptr83, %struct.sv*** %sp, align 8
  store %struct.sv* %63, %struct.sv** %incdec.ptr83, align 8
  br label %do.end84

do.end84:                                         ; preds = %do.end82
  br label %do.end85

do.end85:                                         ; preds = %do.end84
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %65, %struct.sv*** @PL_stack_sp, align 8
  %66 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next86 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 0
  %67 = load %struct.op*, %struct.op** %op_next86, align 8
  store %struct.op* %67, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end85, %do.end67, %cond.end41
  %68 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %68
}

declare dso_local i64 @Perl_do_tell(%struct.gv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sysseek() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %whence = alloca i32, align 4
  %offset = alloca i64, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %mg = alloca %struct.magic*, align 8
  %offset_sv = alloca %struct.sv*, align 8
  %sought = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** @PL_Sv, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %8 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %9, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %whence, align 4
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** @PL_Sv, align 8
  %12 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %13, 2097408
  %cmp4 = icmp eq i32 %and3, 256
  br i1 %cmp4, label %cond.true6, label %cond.false10

cond.true6:                                       ; preds = %cond.end
  %14 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any7 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any7, align 8
  %16 = bitcast i8* %15 to %struct.xpviv*
  %xiv_u8 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %16, i32 0, i32 4
  %xivu_iv9 = bitcast %union._xivu* %xiv_u8 to i64*
  %17 = load i64, i64* %xivu_iv9, align 8
  br label %cond.end12

cond.false10:                                     ; preds = %cond.end
  %18 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call11 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 2)
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false10, %cond.true6
  %cond13 = phi i64 [ %17, %cond.true6 ], [ %call11, %cond.false10 ]
  store i64 %cond13, i64* %offset, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr14 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr14, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %21 = bitcast %struct.sv* %20 to i8*
  %22 = bitcast i8* %21 to %struct.gv*
  store %struct.gv* %22, %struct.gv** @PL_last_in_gv, align 8
  store %struct.gv* %22, %struct.gv** %gv, align 8
  %23 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %23, null
  br i1 %tobool, label %land.lhs.true, label %cond.false29

land.lhs.true:                                    ; preds = %cond.end12
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %25 = bitcast %struct.gv* %24 to %struct.sv*
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %26, 255
  %cmp17 = icmp eq i32 %and16, 9
  br i1 %cmp17, label %land.lhs.true23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %27 = load %struct.gv*, %struct.gv** %gv, align 8
  %28 = bitcast %struct.gv* %27 to %struct.sv*
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %29, 255
  %cmp21 = icmp eq i32 %and20, 10
  br i1 %cmp21, label %land.lhs.true23, label %cond.false29

land.lhs.true23:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %30 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %30, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %31 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %31, i64 0
  %tobool24 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool24, label %cond.true25, label %cond.false29

cond.true25:                                      ; preds = %land.lhs.true23
  %32 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u26 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 3
  %svu_gp27 = bitcast %union.anon.4* %sv_u26 to %struct.gp**
  %33 = load %struct.gp*, %struct.gp** %svu_gp27, align 8
  %add.ptr28 = getelementptr inbounds %struct.gp, %struct.gp* %33, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr28, i32 0, i32 1
  %34 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end30

cond.false29:                                     ; preds = %land.lhs.true23, %lor.lhs.false, %cond.end12
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true25
  %cond31 = phi %struct.io* [ %34, %cond.true25 ], [ null, %cond.false29 ]
  store %struct.io* %cond31, %struct.io** %io, align 8
  %35 = load %struct.io*, %struct.io** %io, align 8
  %tobool32 = icmp ne %struct.io* %35, null
  br i1 %tobool32, label %if.then, label %if.end53

if.then:                                          ; preds = %cond.end30
  %36 = load %struct.io*, %struct.io** %io, align 8
  %37 = bitcast %struct.io* %36 to %struct.sv*
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %38, 8388608
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %cond.true36, label %cond.false38

cond.true36:                                      ; preds = %if.then
  %39 = load %struct.io*, %struct.io** %io, align 8
  %40 = bitcast %struct.io* %39 to %struct.sv*
  %call37 = call %struct.magic* @Perl_mg_find(%struct.sv* %40, i32 113)
  br label %cond.end39

cond.false38:                                     ; preds = %if.then
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi %struct.magic* [ %call37, %cond.true36 ], [ null, %cond.false38 ]
  store %struct.magic* %cond40, %struct.magic** %mg, align 8
  %41 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool41 = icmp ne %struct.magic* %41, null
  br i1 %tobool41, label %if.then42, label %if.end

if.then42:                                        ; preds = %cond.end39
  %42 = load i64, i64* %offset, align 8
  %call43 = call %struct.sv* @Perl_newSViv(i64 %42)
  store %struct.sv* %call43, %struct.sv** %offset_sv, align 8
  %43 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 25), align 8
  %tobool44 = icmp ne %struct.sv* %43, null
  br i1 %tobool44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %if.then42
  %44 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 25), align 8
  br label %cond.end48

cond.false46:                                     ; preds = %if.then42
  %call47 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i64 0, i64 0), i32 0)
  store %struct.sv* %call47, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 25), align 8
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false46, %cond.true45
  %cond49 = phi %struct.sv* [ %44, %cond.true45 ], [ %call47, %cond.false46 ]
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %46 = load %struct.io*, %struct.io** %io, align 8
  %47 = bitcast %struct.io* %46 to i8*
  %48 = bitcast i8* %47 to %struct.sv*
  %49 = load %struct.magic*, %struct.magic** %mg, align 8
  %50 = load %struct.sv*, %struct.sv** %offset_sv, align 8
  %51 = load i32, i32* %whence, align 4
  %conv50 = sext i32 %51 to i64
  %call51 = call %struct.sv* @Perl_newSViv(i64 %conv50)
  %call52 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond49, %struct.sv** %45, %struct.sv* %48, %struct.magic* %49, i32 2, i32 2, %struct.sv* %50, %struct.sv* %call51)
  store %struct.op* %call52, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end39
  br label %if.end53

if.end53:                                         ; preds = %if.end, %cond.end30
  %52 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp54 = icmp eq i32 %bf.cast, 246
  br i1 %cmp54, label %if.then56, label %if.else

if.then56:                                        ; preds = %if.end53
  %53 = load %struct.gv*, %struct.gv** %gv, align 8
  %54 = load i64, i64* %offset, align 8
  %55 = load i32, i32* %whence, align 4
  %call57 = call zeroext i1 @Perl_do_seek(%struct.gv* %53, i64 %54, i32 %55)
  %56 = zext i1 %call57 to i64
  %cond59 = select i1 %call57, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %57, i32 1
  store %struct.sv** %incdec.ptr60, %struct.sv*** %sp, align 8
  store %struct.sv* %cond59, %struct.sv** %incdec.ptr60, align 8
  br label %if.end77

if.else:                                          ; preds = %if.end53
  %58 = load %struct.gv*, %struct.gv** %gv, align 8
  %59 = load i64, i64* %offset, align 8
  %60 = load i32, i32* %whence, align 4
  %call61 = call i64 @Perl_do_sysseek(%struct.gv* %58, i64 %59, i32 %60)
  store i64 %call61, i64* %sought, align 8
  %61 = load i64, i64* %sought, align 8
  %cmp62 = icmp slt i64 %61, 0
  br i1 %cmp62, label %if.then64, label %if.else66

if.then64:                                        ; preds = %if.else
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr65, align 8
  br label %if.end76

if.else66:                                        ; preds = %if.else
  %63 = load i64, i64* %sought, align 8
  %tobool67 = icmp ne i64 %63, 0
  br i1 %tobool67, label %cond.true68, label %cond.false70

cond.true68:                                      ; preds = %if.else66
  %64 = load i64, i64* %sought, align 8
  %call69 = call %struct.sv* @Perl_newSViv(i64 %64)
  br label %cond.end72

cond.false70:                                     ; preds = %if.else66
  %call71 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @zero_but_true, i64 0, i64 0), i64 10)
  br label %cond.end72

cond.end72:                                       ; preds = %cond.false70, %cond.true68
  %cond73 = phi %struct.sv* [ %call69, %cond.true68 ], [ %call71, %cond.false70 ]
  store %struct.sv* %cond73, %struct.sv** %sv, align 8
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %call74 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %65)
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 1
  store %struct.sv** %incdec.ptr75, %struct.sv*** %sp, align 8
  store %struct.sv* %call74, %struct.sv** %incdec.ptr75, align 8
  br label %if.end76

if.end76:                                         ; preds = %cond.end72, %if.then64
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then56
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %67, %struct.sv*** @PL_stack_sp, align 8
  %68 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 0
  %69 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %69, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end77, %cond.end48
  %70 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %70
}

declare dso_local %struct.sv* @Perl_newSViv(i64) #1

declare dso_local zeroext i1 @Perl_do_seek(%struct.gv*, i64, i32) #1

declare dso_local i64 @Perl_do_sysseek(%struct.gv*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_truncate() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %len = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %result = alloca i32, align 4
  %tmpgv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %fd = alloca i32, align 4
  %name = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** @PL_Sv, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %8 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %9, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %len, align 8
  %call1 = call i32* @__errno_location() #9
  store i32 0, i32* %call1, align 4
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %sv, align 8
  store i32 1, i32* %result, align 4
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and3 = and i32 %conv, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %call5 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %14, i32 0, i32 15)
  store %struct.gv* %call5, %struct.gv** %tmpgv, align 8
  br i1 true, label %if.then, label %if.else128

cond.false6:                                      ; preds = %cond.end
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %16, 2097152
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.false6
  br i1 true, label %land.rhs, label %land.end

cond.false11:                                     ; preds = %cond.false6
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false11, %cond.true10
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %call12 = call i32 @Perl_mg_get(%struct.sv* %17)
  %tobool13 = icmp ne i32 %call12, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false11, %cond.true10
  %18 = phi i1 [ false, %cond.false11 ], [ false, %cond.true10 ], [ %tobool13, %land.rhs ]
  %land.ext = zext i1 %18 to i32
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %20, 49152
  %cmp16 = icmp eq i32 %and15, 32768
  br i1 %cmp16, label %land.lhs.true, label %cond.false27

land.lhs.true:                                    ; preds = %land.end
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %22, 255
  %cmp20 = icmp eq i32 %and19, 9
  br i1 %cmp20, label %cond.true26, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %24, 255
  %cmp24 = icmp eq i32 %and23, 10
  br i1 %cmp24, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %lor.lhs.false, %land.lhs.true
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %26 = bitcast %struct.sv* %25 to %struct.gv*
  br label %cond.end78

cond.false27:                                     ; preds = %lor.lhs.false, %land.end
  %27 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %28, 2048
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %land.lhs.true31, label %cond.false75

land.lhs.true31:                                  ; preds = %cond.false27
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %30 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %31, 255
  %cmp34 = icmp ule i32 %and33, 10
  br i1 %cmp34, label %land.lhs.true36, label %cond.false75

land.lhs.true36:                                  ; preds = %land.lhs.true31
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u37 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_rv38 = bitcast %union.anon* %sv_u37 to %struct.sv**
  %33 = load %struct.sv*, %struct.sv** %svu_rv38, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %34, 2097152
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %land.lhs.true36
  br i1 true, label %land.rhs44, label %land.end49

cond.false43:                                     ; preds = %land.lhs.true36
  br i1 false, label %land.rhs44, label %land.end49

land.rhs44:                                       ; preds = %cond.false43, %cond.true42
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u45 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_rv46 = bitcast %union.anon* %sv_u45 to %struct.sv**
  %36 = load %struct.sv*, %struct.sv** %svu_rv46, align 8
  %call47 = call i32 @Perl_mg_get(%struct.sv* %36)
  %tobool48 = icmp ne i32 %call47, 0
  br label %land.end49

land.end49:                                       ; preds = %land.rhs44, %cond.false43, %cond.true42
  %37 = phi i1 [ false, %cond.false43 ], [ false, %cond.true42 ], [ %tobool48, %land.rhs44 ]
  %land.ext50 = zext i1 %37 to i32
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u51 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_rv52 = bitcast %union.anon* %sv_u51 to %struct.sv**
  %39 = load %struct.sv*, %struct.sv** %svu_rv52, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %40, 49152
  %cmp55 = icmp eq i32 %and54, 32768
  br i1 %cmp55, label %land.rhs57, label %land.end70

land.rhs57:                                       ; preds = %land.end49
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u58 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_rv59 = bitcast %union.anon* %sv_u58 to %struct.sv**
  %42 = load %struct.sv*, %struct.sv** %svu_rv59, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %43, 255
  %cmp62 = icmp eq i32 %and61, 9
  br i1 %cmp62, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs57
  %44 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u64 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 3
  %svu_rv65 = bitcast %union.anon* %sv_u64 to %struct.sv**
  %45 = load %struct.sv*, %struct.sv** %svu_rv65, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %46, 255
  %cmp68 = icmp eq i32 %and67, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs57
  %47 = phi i1 [ true, %land.rhs57 ], [ %cmp68, %lor.rhs ]
  br label %land.end70

land.end70:                                       ; preds = %lor.end, %land.end49
  %48 = phi i1 [ false, %land.end49 ], [ %47, %lor.end ]
  br i1 %48, label %cond.true72, label %cond.false75

cond.true72:                                      ; preds = %land.end70
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u73 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 3
  %svu_rv74 = bitcast %union.anon* %sv_u73 to %struct.sv**
  %50 = load %struct.sv*, %struct.sv** %svu_rv74, align 8
  %51 = bitcast %struct.sv* %50 to %struct.gv*
  br label %cond.end76

cond.false75:                                     ; preds = %land.end70, %land.lhs.true31, %cond.false27
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false75, %cond.true72
  %cond77 = phi %struct.gv* [ %51, %cond.true72 ], [ null, %cond.false75 ]
  br label %cond.end78

cond.end78:                                       ; preds = %cond.end76, %cond.true26
  %cond79 = phi %struct.gv* [ %26, %cond.true26 ], [ %cond77, %cond.end76 ]
  store %struct.gv* %cond79, %struct.gv** %tmpgv, align 8
  %tobool80 = icmp ne %struct.gv* %cond79, null
  br i1 %tobool80, label %if.then, label %if.else128

if.then:                                          ; preds = %cond.end78, %cond.true4
  %52 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %tobool81 = icmp ne %struct.gv* %52, null
  br i1 %tobool81, label %land.lhs.true82, label %cond.false99

land.lhs.true82:                                  ; preds = %if.then
  %53 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %54 = bitcast %struct.gv* %53 to %struct.sv*
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %55, 255
  %cmp85 = icmp eq i32 %and84, 9
  br i1 %cmp85, label %land.lhs.true92, label %lor.lhs.false87

lor.lhs.false87:                                  ; preds = %land.lhs.true82
  %56 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %57 = bitcast %struct.gv* %56 to %struct.sv*
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %58, 255
  %cmp90 = icmp eq i32 %and89, 10
  br i1 %cmp90, label %land.lhs.true92, label %cond.false99

land.lhs.true92:                                  ; preds = %lor.lhs.false87, %land.lhs.true82
  %59 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u93 = getelementptr inbounds %struct.gv, %struct.gv* %59, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u93 to %struct.gp**
  %60 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %60, i64 0
  %tobool94 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool94, label %cond.true95, label %cond.false99

cond.true95:                                      ; preds = %land.lhs.true92
  %61 = load %struct.gv*, %struct.gv** %tmpgv, align 8
  %sv_u96 = getelementptr inbounds %struct.gv, %struct.gv* %61, i32 0, i32 3
  %svu_gp97 = bitcast %union.anon.4* %sv_u96 to %struct.gp**
  %62 = load %struct.gp*, %struct.gp** %svu_gp97, align 8
  %add.ptr98 = getelementptr inbounds %struct.gp, %struct.gp* %62, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr98, i32 0, i32 1
  %63 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end100

cond.false99:                                     ; preds = %land.lhs.true92, %lor.lhs.false87, %if.then
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true95
  %cond101 = phi %struct.io* [ %63, %cond.true95 ], [ null, %cond.false99 ]
  store %struct.io* %cond101, %struct.io** %io, align 8
  %64 = load %struct.io*, %struct.io** %io, align 8
  %tobool102 = icmp ne %struct.io* %64, null
  br i1 %tobool102, label %if.else, label %if.then103

if.then103:                                       ; preds = %cond.end100
  store i32 0, i32* %result, align 4
  br label %if.end127

if.else:                                          ; preds = %cond.end100
  br label %do_ftruncate_io

do_ftruncate_io:                                  ; preds = %if.then139, %if.else
  %65 = load i8, i8* @PL_tainting, align 1
  %tobool104 = trunc i8 %65 to i1
  br i1 %tobool104, label %cond.true106, label %cond.false107

cond.true106:                                     ; preds = %do_ftruncate_io
  br i1 true, label %if.then108, label %if.end

cond.false107:                                    ; preds = %do_ftruncate_io
  br i1 false, label %if.then108, label %if.end

if.then108:                                       ; preds = %cond.false107, %cond.true106
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then108, %cond.false107, %cond.true106
  %66 = load %struct.io*, %struct.io** %io, align 8
  %sv_u109 = getelementptr inbounds %struct.io, %struct.io* %66, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u109 to %struct._PerlIO***
  %67 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  store %struct._PerlIO** %67, %struct._PerlIO*** %fp, align 8
  %tobool110 = icmp ne %struct._PerlIO** %67, null
  br i1 %tobool110, label %if.else112, label %if.then111

if.then111:                                       ; preds = %if.end
  store i32 0, i32* %result, align 4
  br label %if.end126

if.else112:                                       ; preds = %if.end
  %68 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call113 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %68)
  store i32 %call113, i32* %fd, align 4
  %69 = load i32, i32* %fd, align 4
  %cmp114 = icmp slt i32 %69, 0
  br i1 %cmp114, label %if.then116, label %if.else118

if.then116:                                       ; preds = %if.else112
  %call117 = call i32* @__errno_location() #9
  store i32 9, i32* %call117, align 4
  store i32 0, i32* %result, align 4
  br label %if.end125

if.else118:                                       ; preds = %if.else112
  %70 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call119 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** %70)
  %71 = load i32, i32* %fd, align 4
  %72 = load i64, i64* %len, align 8
  %call120 = call i32 @ftruncate64(i32 %71, i64 %72) #3
  %cmp121 = icmp slt i32 %call120, 0
  br i1 %cmp121, label %if.then123, label %if.end124

if.then123:                                       ; preds = %if.else118
  store i32 0, i32* %result, align 4
  br label %if.end124

if.end124:                                        ; preds = %if.then123, %if.else118
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.then116
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then111
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.then103
  br label %if.end166

if.else128:                                       ; preds = %cond.end78, %cond.true4
  %73 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %74, 2048
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %land.lhs.true132, label %if.else142

land.lhs.true132:                                 ; preds = %if.else128
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u133 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 3
  %svu_rv134 = bitcast %union.anon* %sv_u133 to %struct.sv**
  %76 = load %struct.sv*, %struct.sv** %svu_rv134, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %77, 255
  %cmp137 = icmp eq i32 %and136, 15
  br i1 %cmp137, label %if.then139, label %if.else142

if.then139:                                       ; preds = %land.lhs.true132
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u140 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 3
  %svu_rv141 = bitcast %union.anon* %sv_u140 to %struct.sv**
  %79 = load %struct.sv*, %struct.sv** %svu_rv141, align 8
  %80 = bitcast %struct.sv* %79 to i8*
  %81 = bitcast i8* %80 to %struct.io*
  store %struct.io* %81, %struct.io** %io, align 8
  br label %do_ftruncate_io

if.else142:                                       ; preds = %land.lhs.true132, %if.else128
  %82 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags143 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags143, align 4
  %and144 = and i32 %83, 2098176
  %cmp145 = icmp eq i32 %and144, 1024
  br i1 %cmp145, label %cond.true147, label %cond.false150

cond.true147:                                     ; preds = %if.else142
  %84 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u148 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u148 to i8**
  %85 = load i8*, i8** %svu_pv, align 8
  %add.ptr149 = getelementptr inbounds i8, i8* %85, i64 0
  br label %cond.end152

cond.false150:                                    ; preds = %if.else142
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  %call151 = call i8* @Perl_sv_2pv_flags(%struct.sv* %86, i64* null, i32 32)
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false150, %cond.true147
  %cond153 = phi i8* [ %add.ptr149, %cond.true147 ], [ %call151, %cond.false150 ]
  store i8* %cond153, i8** %name, align 8
  %87 = load i8, i8* @PL_tainting, align 1
  %tobool154 = trunc i8 %87 to i1
  br i1 %tobool154, label %cond.true156, label %cond.false157

cond.true156:                                     ; preds = %cond.end152
  br i1 true, label %if.then158, label %if.end159

cond.false157:                                    ; preds = %cond.end152
  br i1 false, label %if.then158, label %if.end159

if.then158:                                       ; preds = %cond.false157, %cond.true156
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i64 0, i64 0))
  br label %if.end159

if.end159:                                        ; preds = %if.then158, %cond.false157, %cond.true156
  %88 = load i8*, i8** %name, align 8
  %89 = load i64, i64* %len, align 8
  %call160 = call i32 @truncate64(i8* %88, i64 %89) #3
  %cmp161 = icmp slt i32 %call160, 0
  br i1 %cmp161, label %if.then163, label %if.end164

if.then163:                                       ; preds = %if.end159
  store i32 0, i32* %result, align 4
  br label %if.end164

if.end164:                                        ; preds = %if.then163, %if.end159
  br label %if.end165

if.end165:                                        ; preds = %if.end164
  br label %if.end166

if.end166:                                        ; preds = %if.end165, %if.end127
  %90 = load i32, i32* %result, align 4
  %tobool167 = icmp ne i32 %90, 0
  br i1 %tobool167, label %if.then168, label %if.end170

if.then168:                                       ; preds = %if.end166
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr169 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i32 1
  store %struct.sv** %incdec.ptr169, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr169, align 8
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %92, %struct.sv*** @PL_stack_sp, align 8
  %93 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 0
  %94 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %94, %struct.op** %retval, align 8
  br label %return

if.end170:                                        ; preds = %if.end166
  %call171 = call i32* @__errno_location() #9
  %95 = load i32, i32* %call171, align 4
  %tobool172 = icmp ne i32 %95, 0
  br i1 %tobool172, label %if.end175, label %if.then173

if.then173:                                       ; preds = %if.end170
  %call174 = call i32* @__errno_location() #9
  store i32 9, i32* %call174, align 4
  br label %if.end175

if.end175:                                        ; preds = %if.then173, %if.end170
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr176 = getelementptr inbounds %struct.sv*, %struct.sv** %96, i32 1
  store %struct.sv** %incdec.ptr176, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr176, align 8
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %97, %struct.sv*** @PL_stack_sp, align 8
  %98 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next177 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 0
  %99 = load %struct.op*, %struct.op** %op_next177, align 8
  store %struct.op* %99, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end175, %if.then168
  %100 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %100
}

; Function Attrs: nounwind
declare dso_local i32 @ftruncate64(i32, i64) #6

; Function Attrs: nounwind
declare dso_local i32 @truncate64(i8*, i64) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ioctl() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %argsv = alloca %struct.sv*, align 8
  %func = alloca i32, align 4
  %optype = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %s = alloca i8*, align 8
  %retval32 = alloca i64, align 8
  %len = alloca i64, align 8
  %need = alloca i64, align 8
  %coerce = alloca %union.XOPRETANY, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %argsv, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** @PL_Sv, align 8
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and = and i32 %10, -2145386240
  %cmp = icmp eq i32 %and, -2147483392
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %13, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %14 = load i64, i64* %xivu_uv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2uv_flags(%struct.sv* %15, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %14, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %func, align 4
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 -1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %18 = bitcast %struct.sv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.gv*
  store %struct.gv* %19, %struct.gv** %gv, align 8
  %20 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool = icmp ne %struct.gv* %20, null
  br i1 %tobool, label %land.lhs.true, label %cond.false18

land.lhs.true:                                    ; preds = %cond.end
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %22 = bitcast %struct.gv* %21 to %struct.sv*
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %23, 255
  %cmp5 = icmp eq i32 %and4, 9
  br i1 %cmp5, label %land.lhs.true11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %24 = load %struct.gv*, %struct.gv** %gv, align 8
  %25 = bitcast %struct.gv* %24 to %struct.sv*
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %26, 255
  %cmp9 = icmp eq i32 %and8, 10
  br i1 %cmp9, label %land.lhs.true11, label %cond.false18

land.lhs.true11:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %27 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %27, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %28 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %28, i64 0
  %tobool12 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool12, label %cond.true13, label %cond.false18

cond.true13:                                      ; preds = %land.lhs.true11
  %29 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u14 = getelementptr inbounds %struct.gv, %struct.gv* %29, i32 0, i32 3
  %svu_gp15 = bitcast %union.anon.4* %sv_u14 to %struct.gp**
  %30 = load %struct.gp*, %struct.gp** %svu_gp15, align 8
  %add.ptr16 = getelementptr inbounds %struct.gp, %struct.gp* %30, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr16, i32 0, i32 1
  %31 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool17 = icmp ne %struct.io* %31, null
  br i1 %tobool17, label %cond.true19, label %cond.false24

cond.false18:                                     ; preds = %land.lhs.true11, %lor.lhs.false, %cond.end
  br i1 false, label %cond.true19, label %cond.false24

cond.true19:                                      ; preds = %cond.false18, %cond.true13
  %32 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u20 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 3
  %svu_gp21 = bitcast %union.anon.4* %sv_u20 to %struct.gp**
  %33 = load %struct.gp*, %struct.gp** %svu_gp21, align 8
  %add.ptr22 = getelementptr inbounds %struct.gp, %struct.gp* %33, i64 0
  %gp_io23 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr22, i32 0, i32 1
  %34 = load %struct.io*, %struct.io** %gp_io23, align 8
  br label %cond.end30

cond.false24:                                     ; preds = %cond.false18, %cond.true13
  %35 = load %struct.gv*, %struct.gv** %gv, align 8
  %call25 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %35, i32 15)
  %sv_u26 = getelementptr inbounds %struct.gv, %struct.gv* %call25, i32 0, i32 3
  %svu_gp27 = bitcast %union.anon.4* %sv_u26 to %struct.gp**
  %36 = load %struct.gp*, %struct.gp** %svu_gp27, align 8
  %add.ptr28 = getelementptr inbounds %struct.gp, %struct.gp* %36, i64 0
  %gp_io29 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr28, i32 0, i32 1
  %37 = load %struct.io*, %struct.io** %gp_io29, align 8
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false24, %cond.true19
  %cond31 = phi %struct.io* [ %34, %cond.true19 ], [ %37, %cond.false24 ]
  store %struct.io* %cond31, %struct.io** %io, align 8
  %38 = load %struct.io*, %struct.io** %io, align 8
  %sv_u33 = getelementptr inbounds %struct.io, %struct.io* %38, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u33 to %struct._PerlIO***
  %39 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool34 = icmp ne %struct._PerlIO** %39, null
  br i1 %tobool34, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end30
  %40 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %40)
  %call35 = call i32* @__errno_location() #9
  store i32 9, i32* %call35, align 4
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i32 1
  store %struct.sv** %incdec.ptr36, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr36, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %42, %struct.sv*** @PL_stack_sp, align 8
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %44, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end30
  %45 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %46, 1024
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then44, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %if.end
  %47 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %48, 768
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.else, label %if.then44

if.then44:                                        ; preds = %lor.lhs.false40, %if.end
  %49 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %50, 430018304
  %cmp47 = icmp eq i32 %and46, 1024
  br i1 %cmp47, label %cond.true49, label %cond.false52

cond.true49:                                      ; preds = %if.then44
  %51 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any50, align 8
  %53 = bitcast i8* %52 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %53, i32 0, i32 2
  %54 = load i64, i64* %xpv_cur, align 8
  store i64 %54, i64* %len, align 8
  %55 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u51 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u51 to i8**
  %56 = load i8*, i8** %svu_pv, align 8
  br label %cond.end54

cond.false52:                                     ; preds = %if.then44
  %57 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call53 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %57, i64* %len, i32 2)
  br label %cond.end54

cond.end54:                                       ; preds = %cond.false52, %cond.true49
  %cond55 = phi i8* [ %56, %cond.true49 ], [ %call53, %cond.false52 ]
  store i8* %cond55, i8** %s, align 8
  %58 = load i32, i32* %func, align 4
  %shr = lshr i32 %58, 16
  %and56 = and i32 %shr, 16383
  %cmp57 = icmp ult i32 %and56, 256
  br i1 %cmp57, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %cond.end54
  br label %cond.end63

cond.false60:                                     ; preds = %cond.end54
  %59 = load i32, i32* %func, align 4
  %shr61 = lshr i32 %59, 16
  %and62 = and i32 %shr61, 16383
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false60, %cond.true59
  %cond64 = phi i32 [ 256, %cond.true59 ], [ %and62, %cond.false60 ]
  %conv65 = zext i32 %cond64 to i64
  store i64 %conv65, i64* %need, align 8
  %60 = load i64, i64* %len, align 8
  %61 = load i64, i64* %need, align 8
  %cmp66 = icmp ult i64 %60, %61
  br i1 %cmp66, label %if.then68, label %if.end72

if.then68:                                        ; preds = %cond.end63
  %62 = load %struct.sv*, %struct.sv** %argsv, align 8
  %63 = load i64, i64* %need, align 8
  %add = add i64 %63, 1
  %call69 = call i8* @Perl_sv_grow(%struct.sv* %62, i64 %add)
  store i8* %call69, i8** %s, align 8
  br label %do.body

do.body:                                          ; preds = %if.then68
  %64 = load i64, i64* %need, align 8
  %65 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 0
  %66 = load i8*, i8** %sv_any70, align 8
  %67 = bitcast i8* %66 to %struct.xpv*
  %xpv_cur71 = getelementptr inbounds %struct.xpv, %struct.xpv* %67, i32 0, i32 2
  store i64 %64, i64* %xpv_cur71, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end72

if.end72:                                         ; preds = %do.end, %cond.end63
  %68 = load i8*, i8** %s, align 8
  %69 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 0
  %70 = load i8*, i8** %sv_any73, align 8
  %71 = bitcast i8* %70 to %struct.xpv*
  %xpv_cur74 = getelementptr inbounds %struct.xpv, %struct.xpv* %71, i32 0, i32 2
  %72 = load i64, i64* %xpv_cur74, align 8
  %arrayidx75 = getelementptr inbounds i8, i8* %68, i64 %72
  store i8 17, i8* %arrayidx75, align 1
  br label %if.end86

if.else:                                          ; preds = %lor.lhs.false40
  %73 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %74, 2097408
  %cmp78 = icmp eq i32 %and77, 256
  br i1 %cmp78, label %cond.true80, label %cond.false82

cond.true80:                                      ; preds = %if.else
  %75 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any81, align 8
  %77 = bitcast i8* %76 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %77, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %78 = load i64, i64* %xivu_iv, align 8
  br label %cond.end84

cond.false82:                                     ; preds = %if.else
  %79 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call83 = call i64 @Perl_sv_2iv_flags(%struct.sv* %79, i32 2)
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true80
  %cond85 = phi i64 [ %78, %cond.true80 ], [ %call83, %cond.false82 ]
  store i64 %cond85, i64* %retval32, align 8
  %80 = load i64, i64* %retval32, align 8
  %81 = inttoptr i64 %80 to i8*
  store i8* %81, i8** %s, align 8
  br label %if.end86

if.end86:                                         ; preds = %cond.end84, %if.end72
  %82 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %optype, align 4
  %83 = load i8, i8* @PL_tainting, align 1
  %tobool87 = trunc i8 %83 to i1
  br i1 %tobool87, label %cond.true89, label %cond.false90

cond.true89:                                      ; preds = %if.end86
  br i1 true, label %if.then91, label %if.end93

cond.false90:                                     ; preds = %if.end86
  br i1 false, label %if.then91, label %if.end93

if.then91:                                        ; preds = %cond.false90, %cond.true89
  %84 = load i32, i32* %optype, align 4
  %idxprom = sext i32 %84 to i64
  %arrayidx92 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %85 = load i8*, i8** %arrayidx92, align 8
  call void @Perl_taint_proper(i8* null, i8* %85)
  br label %if.end93

if.end93:                                         ; preds = %if.then91, %cond.false90, %cond.true89
  %86 = load i32, i32* %optype, align 4
  %cmp94 = icmp eq i32 %86, 249
  br i1 %cmp94, label %if.then96, label %if.else103

if.then96:                                        ; preds = %if.end93
  %87 = load %struct.io*, %struct.io** %io, align 8
  %sv_u97 = getelementptr inbounds %struct.io, %struct.io* %87, i32 0, i32 3
  %svu_fp98 = bitcast %union.anon.2* %sv_u97 to %struct._PerlIO***
  %88 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp98, align 8
  %call99 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %88)
  %89 = load i32, i32* %func, align 4
  %conv100 = zext i32 %89 to i64
  %90 = load i8*, i8** %s, align 8
  %call101 = call i32 (i32, i64, ...) @ioctl(i32 %call99, i64 %conv100, i8* %90) #3
  %conv102 = sext i32 %call101 to i64
  store i64 %conv102, i64* %retval32, align 8
  br label %if.end109

if.else103:                                       ; preds = %if.end93
  %91 = load %struct.io*, %struct.io** %io, align 8
  %sv_u104 = getelementptr inbounds %struct.io, %struct.io* %91, i32 0, i32 3
  %svu_fp105 = bitcast %union.anon.2* %sv_u104 to %struct._PerlIO***
  %92 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp105, align 8
  %call106 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %92)
  %93 = load i32, i32* %func, align 4
  %94 = load i8*, i8** %s, align 8
  %call107 = call i32 (i32, i32, ...) @fcntl64(i32 %call106, i32 %93, i8* %94)
  %conv108 = sext i32 %call107 to i64
  store i64 %conv108, i64* %retval32, align 8
  br label %if.end109

if.end109:                                        ; preds = %if.else103, %if.then96
  %95 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %96, 1024
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %if.then113, label %if.end153

if.then113:                                       ; preds = %if.end109
  %97 = load i8*, i8** %s, align 8
  %98 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any114 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 0
  %99 = load i8*, i8** %sv_any114, align 8
  %100 = bitcast i8* %99 to %struct.xpv*
  %xpv_cur115 = getelementptr inbounds %struct.xpv, %struct.xpv* %100, i32 0, i32 2
  %101 = load i64, i64* %xpv_cur115, align 8
  %arrayidx116 = getelementptr inbounds i8, i8* %97, i64 %101
  %102 = load i8, i8* %arrayidx116, align 1
  %conv117 = sext i8 %102 to i32
  %cmp118 = icmp ne i32 %conv117, 17
  br i1 %cmp118, label %if.then120, label %if.end139

if.then120:                                       ; preds = %if.then113
  %103 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type121 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 4
  %bf.load122 = load i16, i16* %op_type121, align 8
  %bf.clear123 = and i16 %bf.load122, 511
  %bf.cast124 = zext i16 %bf.clear123 to i32
  %cmp125 = icmp eq i32 %bf.cast124, 380
  br i1 %cmp125, label %cond.true127, label %cond.false129

cond.true127:                                     ; preds = %if.then120
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %call128 = call i8* @Perl_custom_op_get_field(%struct.op* %104, i32 1)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call128, i8** %coerce.dive, align 8
  %xop_name = bitcast %union.XOPRETANY* %coerce to i8**
  %105 = load i8*, i8** %xop_name, align 8
  br label %cond.end136

cond.false129:                                    ; preds = %if.then120
  %106 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type130 = getelementptr inbounds %struct.op, %struct.op* %106, i32 0, i32 4
  %bf.load131 = load i16, i16* %op_type130, align 8
  %bf.clear132 = and i16 %bf.load131, 511
  %bf.cast133 = zext i16 %bf.clear132 to i32
  %idxprom134 = zext i32 %bf.cast133 to i64
  %arrayidx135 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom134
  %107 = load i8*, i8** %arrayidx135, align 8
  br label %cond.end136

cond.end136:                                      ; preds = %cond.false129, %cond.true127
  %cond137 = phi i8* [ %105, %cond.true127 ], [ %107, %cond.false129 ]
  %call138 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.54, i64 0, i64 0), i8* %cond137)
  store %struct.op* %call138, %struct.op** %retval, align 8
  br label %return

if.end139:                                        ; preds = %if.then113
  %108 = load i8*, i8** %s, align 8
  %109 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any140 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 0
  %110 = load i8*, i8** %sv_any140, align 8
  %111 = bitcast i8* %110 to %struct.xpv*
  %xpv_cur141 = getelementptr inbounds %struct.xpv, %struct.xpv* %111, i32 0, i32 2
  %112 = load i64, i64* %xpv_cur141, align 8
  %arrayidx142 = getelementptr inbounds i8, i8* %108, i64 %112
  store i8 0, i8* %arrayidx142, align 1
  br label %do.body143

do.body143:                                       ; preds = %if.end139
  %113 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags144 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags144, align 4
  %and145 = and i32 %114, 4194304
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %cond.true147, label %cond.false148

cond.true147:                                     ; preds = %do.body143
  br i1 true, label %if.then149, label %if.end151

cond.false148:                                    ; preds = %do.body143
  br i1 false, label %if.then149, label %if.end151

if.then149:                                       ; preds = %cond.false148, %cond.true147
  %115 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call150 = call i32 @Perl_mg_set(%struct.sv* %115)
  br label %if.end151

if.end151:                                        ; preds = %if.then149, %cond.false148, %cond.true147
  br label %do.end152

do.end152:                                        ; preds = %if.end151
  br label %if.end153

if.end153:                                        ; preds = %do.end152, %if.end109
  %116 = load i64, i64* %retval32, align 8
  %cmp154 = icmp eq i64 %116, -1
  br i1 %cmp154, label %if.then156, label %if.end159

if.then156:                                       ; preds = %if.end153
  %117 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr157 = getelementptr inbounds %struct.sv*, %struct.sv** %117, i32 1
  store %struct.sv** %incdec.ptr157, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr157, align 8
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %118, %struct.sv*** @PL_stack_sp, align 8
  %119 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next158 = getelementptr inbounds %struct.op, %struct.op* %119, i32 0, i32 0
  %120 = load %struct.op*, %struct.op** %op_next158, align 8
  store %struct.op* %120, %struct.op** %retval, align 8
  br label %return

if.end159:                                        ; preds = %if.end153
  %121 = load i64, i64* %retval32, align 8
  %cmp160 = icmp ne i64 %121, 0
  br i1 %cmp160, label %if.then162, label %if.else178

if.then162:                                       ; preds = %if.end159
  br label %do.body163

do.body163:                                       ; preds = %if.then162
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %123 = load i64, i64* %retval32, align 8
  call void @Perl_sv_setiv(%struct.sv* %122, i64 %123)
  br label %do.body164

do.body164:                                       ; preds = %do.body163
  br label %do.body165

do.body165:                                       ; preds = %do.body164
  %124 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags166 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 2
  %125 = load i32, i32* %sv_flags166, align 4
  %and167 = and i32 %125, 4194304
  %tobool168 = icmp ne i32 %and167, 0
  br i1 %tobool168, label %cond.true169, label %cond.false170

cond.true169:                                     ; preds = %do.body165
  br i1 true, label %if.then171, label %if.end173

cond.false170:                                    ; preds = %do.body165
  br i1 false, label %if.then171, label %if.end173

if.then171:                                       ; preds = %cond.false170, %cond.true169
  %126 = load %struct.sv*, %struct.sv** %targ, align 8
  %call172 = call i32 @Perl_mg_set(%struct.sv* %126)
  br label %if.end173

if.end173:                                        ; preds = %if.then171, %cond.false170, %cond.true169
  br label %do.end174

do.end174:                                        ; preds = %if.end173
  %127 = load %struct.sv*, %struct.sv** %targ, align 8
  %128 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr175 = getelementptr inbounds %struct.sv*, %struct.sv** %128, i32 1
  store %struct.sv** %incdec.ptr175, %struct.sv*** %sp, align 8
  store %struct.sv* %127, %struct.sv** %incdec.ptr175, align 8
  br label %do.end176

do.end176:                                        ; preds = %do.end174
  br label %do.end177

do.end177:                                        ; preds = %do.end176
  br label %if.end194

if.else178:                                       ; preds = %if.end159
  br label %do.body179

do.body179:                                       ; preds = %if.else178
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setpvn(%struct.sv* %129, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @zero_but_true, i64 0, i64 0), i64 10)
  br label %do.body180

do.body180:                                       ; preds = %do.body179
  br label %do.body181

do.body181:                                       ; preds = %do.body180
  %130 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags182 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags182, align 4
  %and183 = and i32 %131, 4194304
  %tobool184 = icmp ne i32 %and183, 0
  br i1 %tobool184, label %cond.true185, label %cond.false186

cond.true185:                                     ; preds = %do.body181
  br i1 true, label %if.then187, label %if.end189

cond.false186:                                    ; preds = %do.body181
  br i1 false, label %if.then187, label %if.end189

if.then187:                                       ; preds = %cond.false186, %cond.true185
  %132 = load %struct.sv*, %struct.sv** %targ, align 8
  %call188 = call i32 @Perl_mg_set(%struct.sv* %132)
  br label %if.end189

if.end189:                                        ; preds = %if.then187, %cond.false186, %cond.true185
  br label %do.end190

do.end190:                                        ; preds = %if.end189
  %133 = load %struct.sv*, %struct.sv** %targ, align 8
  %134 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr191 = getelementptr inbounds %struct.sv*, %struct.sv** %134, i32 1
  store %struct.sv** %incdec.ptr191, %struct.sv*** %sp, align 8
  store %struct.sv* %133, %struct.sv** %incdec.ptr191, align 8
  br label %do.end192

do.end192:                                        ; preds = %do.end190
  br label %do.end193

do.end193:                                        ; preds = %do.end192
  br label %if.end194

if.end194:                                        ; preds = %do.end193, %do.end177
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %135, %struct.sv*** @PL_stack_sp, align 8
  %136 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next195 = getelementptr inbounds %struct.op, %struct.op* %136, i32 0, i32 0
  %137 = load %struct.op*, %struct.op** %op_next195, align 8
  store %struct.op* %137, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end194, %if.then156, %cond.end136, %if.then
  %138 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %138
}

declare dso_local i64 @Perl_sv_2uv_flags(%struct.sv*, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @ioctl(i32, i64, ...) #6

declare dso_local i32 @fcntl64(i32, i32, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_flock() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sockpair() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_stat() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %io = alloca %struct.io*, align 8
  %gimme = alloca i32, align 4
  %max = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %havefp = alloca i8, align 1
  %fd = alloca i32, align 4
  %file = alloca i8*, align 8
  %eMiX = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  store %struct.io* null, %struct.io** %io, align 8
  store i32 13, i32* %max, align 4
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %4 = bitcast %struct.op* %3 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %4, i32 0, i32 7
  %5 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %6 = bitcast %struct.sv* %5 to %struct.gv*
  store %struct.gv* %6, %struct.gv** %gv, align 8
  br i1 true, label %if.then, label %if.else175

cond.false:                                       ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** %sv, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %10, 2097152
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.false
  br i1 true, label %land.rhs, label %land.end

cond.false4:                                      ; preds = %cond.false
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false4, %cond.true3
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %11)
  %tobool5 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false4, %cond.true3
  %12 = phi i1 [ false, %cond.false4 ], [ false, %cond.true3 ], [ %tobool5, %land.rhs ]
  %land.ext = zext i1 %12 to i32
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %14, 49152
  %cmp = icmp eq i32 %and7, 32768
  br i1 %cmp, label %land.lhs.true, label %cond.false18

land.lhs.true:                                    ; preds = %land.end
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %16, 255
  %cmp11 = icmp eq i32 %and10, 9
  br i1 %cmp11, label %cond.true17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %18, 255
  %cmp15 = icmp eq i32 %and14, 10
  br i1 %cmp15, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %lor.lhs.false, %land.lhs.true
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %20 = bitcast %struct.sv* %19 to %struct.gv*
  br label %cond.end67

cond.false18:                                     ; preds = %lor.lhs.false, %land.end
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %22, 2048
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %cond.false66

land.lhs.true22:                                  ; preds = %cond.false18
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %24 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %25, 255
  %cmp25 = icmp ule i32 %and24, 10
  br i1 %cmp25, label %land.lhs.true27, label %cond.false66

land.lhs.true27:                                  ; preds = %land.lhs.true22
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u28 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_rv29 = bitcast %union.anon* %sv_u28 to %struct.sv**
  %27 = load %struct.sv*, %struct.sv** %svu_rv29, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %28, 2097152
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %land.lhs.true27
  br i1 true, label %land.rhs35, label %land.end40

cond.false34:                                     ; preds = %land.lhs.true27
  br i1 false, label %land.rhs35, label %land.end40

land.rhs35:                                       ; preds = %cond.false34, %cond.true33
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 3
  %svu_rv37 = bitcast %union.anon* %sv_u36 to %struct.sv**
  %30 = load %struct.sv*, %struct.sv** %svu_rv37, align 8
  %call38 = call i32 @Perl_mg_get(%struct.sv* %30)
  %tobool39 = icmp ne i32 %call38, 0
  br label %land.end40

land.end40:                                       ; preds = %land.rhs35, %cond.false34, %cond.true33
  %31 = phi i1 [ false, %cond.false34 ], [ false, %cond.true33 ], [ %tobool39, %land.rhs35 ]
  %land.ext41 = zext i1 %31 to i32
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u42 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_rv43 = bitcast %union.anon* %sv_u42 to %struct.sv**
  %33 = load %struct.sv*, %struct.sv** %svu_rv43, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %34, 49152
  %cmp46 = icmp eq i32 %and45, 32768
  br i1 %cmp46, label %land.rhs48, label %land.end61

land.rhs48:                                       ; preds = %land.end40
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u49 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_rv50 = bitcast %union.anon* %sv_u49 to %struct.sv**
  %36 = load %struct.sv*, %struct.sv** %svu_rv50, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %37, 255
  %cmp53 = icmp eq i32 %and52, 9
  br i1 %cmp53, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs48
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u55 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_rv56 = bitcast %union.anon* %sv_u55 to %struct.sv**
  %39 = load %struct.sv*, %struct.sv** %svu_rv56, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %40, 255
  %cmp59 = icmp eq i32 %and58, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs48
  %41 = phi i1 [ true, %land.rhs48 ], [ %cmp59, %lor.rhs ]
  br label %land.end61

land.end61:                                       ; preds = %lor.end, %land.end40
  %42 = phi i1 [ false, %land.end40 ], [ %41, %lor.end ]
  br i1 %42, label %cond.true63, label %cond.false66

cond.true63:                                      ; preds = %land.end61
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u64 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_rv65 = bitcast %union.anon* %sv_u64 to %struct.sv**
  %44 = load %struct.sv*, %struct.sv** %svu_rv65, align 8
  %45 = bitcast %struct.sv* %44 to %struct.gv*
  br label %cond.end

cond.false66:                                     ; preds = %land.end61, %land.lhs.true22, %cond.false18
  br label %cond.end

cond.end:                                         ; preds = %cond.false66, %cond.true63
  %cond = phi %struct.gv* [ %45, %cond.true63 ], [ null, %cond.false66 ]
  br label %cond.end67

cond.end67:                                       ; preds = %cond.end, %cond.true17
  %cond68 = phi %struct.gv* [ %20, %cond.true17 ], [ %cond, %cond.end ]
  store %struct.gv* %cond68, %struct.gv** %gv, align 8
  %tobool69 = icmp ne %struct.gv* %cond68, null
  br i1 %tobool69, label %if.then, label %if.else175

if.then:                                          ; preds = %cond.end67, %cond.true
  %46 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp70 = icmp eq i32 %bf.cast, 264
  br i1 %cmp70, label %if.then72, label %if.end100

if.then72:                                        ; preds = %if.then
  %47 = load %struct.gv*, %struct.gv** %gv, align 8
  %48 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp73 = icmp ne %struct.gv* %47, %48
  br i1 %cmp73, label %if.then75, label %if.else

if.then75:                                        ; preds = %if.then72
  br label %do_fstat_warning_check

do_fstat_warning_check:                           ; preds = %if.then195, %if.then75
  %49 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool76 = icmp ne %struct.gv* %49, null
  %50 = zext i1 %tobool76 to i64
  %cond77 = select i1 %tobool76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)
  %51 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool78 = icmp ne %struct.gv* %51, null
  br i1 %tobool78, label %cond.true79, label %cond.false92

cond.true79:                                      ; preds = %do_fstat_warning_check
  %52 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u80 = getelementptr inbounds %struct.gv, %struct.gv* %52, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u80 to %struct.gp**
  %53 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %53, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 8
  %54 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool81 = icmp ne %struct.gv* %54, null
  br i1 %tobool81, label %cond.true82, label %cond.false87

cond.true82:                                      ; preds = %cond.true79
  %55 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u83 = getelementptr inbounds %struct.gv, %struct.gv* %55, i32 0, i32 3
  %svu_gp84 = bitcast %union.anon.4* %sv_u83 to %struct.gp**
  %56 = load %struct.gp*, %struct.gp** %svu_gp84, align 8
  %add.ptr85 = getelementptr inbounds %struct.gp, %struct.gp* %56, i64 0
  %gp_egv86 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr85, i32 0, i32 8
  %57 = load %struct.gv*, %struct.gv** %gp_egv86, align 8
  br label %cond.end88

cond.false87:                                     ; preds = %cond.true79
  %58 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end88

cond.end88:                                       ; preds = %cond.false87, %cond.true82
  %cond89 = phi %struct.gv* [ %57, %cond.true82 ], [ %58, %cond.false87 ]
  %sv_any = getelementptr inbounds %struct.gv, %struct.gv* %cond89, i32 0, i32 0
  %59 = load %struct.xpvgv*, %struct.xpvgv** %sv_any, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %59, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %60 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %call90 = call %struct.sv* @Perl_newSVhek(%struct.hek* %60)
  %call91 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call90)
  br label %cond.end93

cond.false92:                                     ; preds = %do_fstat_warning_check
  br label %cond.end93

cond.end93:                                       ; preds = %cond.false92, %cond.end88
  %cond94 = phi %struct.sv* [ %call91, %cond.end88 ], [ @PL_sv_no, %cond.false92 ]
  %61 = bitcast %struct.sv* %cond94 to i8*
  call void (i32, i8*, ...) @Perl_ck_warner(i32 5, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.57, i64 0, i64 0), i8* %cond77, i8* %61)
  br label %if.end99

if.else:                                          ; preds = %if.then72
  %62 = load i16, i16* @PL_laststype, align 2
  %conv95 = zext i16 %62 to i32
  %cmp96 = icmp ne i32 %conv95, 264
  br i1 %cmp96, label %if.then98, label %if.end

if.then98:                                        ; preds = %if.else
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.58, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then98, %if.else
  br label %if.end99

if.end99:                                         ; preds = %if.end, %cond.end93
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then
  %63 = load %struct.gv*, %struct.gv** %gv, align 8
  %64 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp101 = icmp ne %struct.gv* %63, %64
  br i1 %cmp101, label %if.then103, label %if.end170

if.then103:                                       ; preds = %if.end100
  br label %do_fstat_have_io

do_fstat_have_io:                                 ; preds = %if.end196, %if.then103
  store i8 0, i8* %havefp, align 1
  store i16 265, i16* @PL_laststype, align 2
  %65 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool104 = icmp ne %struct.gv* %65, null
  br i1 %tobool104, label %cond.true105, label %cond.false106

cond.true105:                                     ; preds = %do_fstat_have_io
  %66 = load %struct.gv*, %struct.gv** %gv, align 8
  br label %cond.end107

cond.false106:                                    ; preds = %do_fstat_have_io
  %67 = load %struct.io*, %struct.io** %io, align 8
  %68 = bitcast %struct.io* %67 to %struct.gv*
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false106, %cond.true105
  %cond108 = phi %struct.gv* [ %66, %cond.true105 ], [ %68, %cond.false106 ]
  store %struct.gv* %cond108, %struct.gv** @PL_statgv, align 8
  %69 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  call void @Perl_sv_setpvn(%struct.sv* %69, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0)
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool109 = icmp ne %struct.gv* %70, null
  br i1 %tobool109, label %if.then110, label %if.end134

if.then110:                                       ; preds = %cond.end107
  %71 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool111 = icmp ne %struct.gv* %71, null
  br i1 %tobool111, label %land.lhs.true112, label %cond.false131

land.lhs.true112:                                 ; preds = %if.then110
  %72 = load %struct.gv*, %struct.gv** %gv, align 8
  %73 = bitcast %struct.gv* %72 to %struct.sv*
  %sv_flags113 = getelementptr inbounds %struct.sv, %struct.sv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags113, align 4
  %and114 = and i32 %74, 255
  %cmp115 = icmp eq i32 %and114, 9
  br i1 %cmp115, label %land.lhs.true122, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %land.lhs.true112
  %75 = load %struct.gv*, %struct.gv** %gv, align 8
  %76 = bitcast %struct.gv* %75 to %struct.sv*
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %77, 255
  %cmp120 = icmp eq i32 %and119, 10
  br i1 %cmp120, label %land.lhs.true122, label %cond.false131

land.lhs.true122:                                 ; preds = %lor.lhs.false117, %land.lhs.true112
  %78 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u123 = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 3
  %svu_gp124 = bitcast %union.anon.4* %sv_u123 to %struct.gp**
  %79 = load %struct.gp*, %struct.gp** %svu_gp124, align 8
  %add.ptr125 = getelementptr inbounds %struct.gp, %struct.gp* %79, i64 0
  %tobool126 = icmp ne %struct.gp* %add.ptr125, null
  br i1 %tobool126, label %cond.true127, label %cond.false131

cond.true127:                                     ; preds = %land.lhs.true122
  %80 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u128 = getelementptr inbounds %struct.gv, %struct.gv* %80, i32 0, i32 3
  %svu_gp129 = bitcast %union.anon.4* %sv_u128 to %struct.gp**
  %81 = load %struct.gp*, %struct.gp** %svu_gp129, align 8
  %add.ptr130 = getelementptr inbounds %struct.gp, %struct.gp* %81, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr130, i32 0, i32 1
  %82 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end132

cond.false131:                                    ; preds = %land.lhs.true122, %lor.lhs.false117, %if.then110
  br label %cond.end132

cond.end132:                                      ; preds = %cond.false131, %cond.true127
  %cond133 = phi %struct.io* [ %82, %cond.true127 ], [ null, %cond.false131 ]
  store %struct.io* %cond133, %struct.io** %io, align 8
  br label %if.end134

if.end134:                                        ; preds = %cond.end132, %cond.end107
  %83 = load %struct.io*, %struct.io** %io, align 8
  %tobool135 = icmp ne %struct.io* %83, null
  br i1 %tobool135, label %if.then136, label %if.else162

if.then136:                                       ; preds = %if.end134
  %84 = load %struct.io*, %struct.io** %io, align 8
  %sv_u137 = getelementptr inbounds %struct.io, %struct.io* %84, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u137 to %struct._PerlIO***
  %85 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool138 = icmp ne %struct._PerlIO** %85, null
  br i1 %tobool138, label %if.then139, label %if.else150

if.then139:                                       ; preds = %if.then136
  %86 = load %struct.io*, %struct.io** %io, align 8
  %sv_u140 = getelementptr inbounds %struct.io, %struct.io* %86, i32 0, i32 3
  %svu_fp141 = bitcast %union.anon.2* %sv_u140 to %struct._PerlIO***
  %87 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp141, align 8
  %call142 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %87)
  store i32 %call142, i32* %fd, align 4
  %88 = load i32, i32* %fd, align 4
  %cmp143 = icmp slt i32 %88, 0
  br i1 %cmp143, label %if.then145, label %if.else147

if.then145:                                       ; preds = %if.then139
  store i32 -1, i32* @PL_laststatval, align 4
  %call146 = call i32* @__errno_location() #9
  store i32 9, i32* %call146, align 4
  br label %if.end149

if.else147:                                       ; preds = %if.then139
  %89 = load i32, i32* %fd, align 4
  %call148 = call i32 @fstat64(i32 %89, %struct.stat* @PL_statcache) #3
  store i32 %call148, i32* @PL_laststatval, align 4
  store i8 1, i8* %havefp, align 1
  br label %if.end149

if.end149:                                        ; preds = %if.else147, %if.then145
  br label %if.end161

if.else150:                                       ; preds = %if.then136
  %90 = load %struct.io*, %struct.io** %io, align 8
  %sv_any151 = getelementptr inbounds %struct.io, %struct.io* %90, i32 0, i32 0
  %91 = load %struct.xpvio*, %struct.xpvio** %sv_any151, align 8
  %xio_dirpu = getelementptr inbounds %struct.xpvio, %struct.xpvio* %91, i32 0, i32 6
  %xiou_dirp = bitcast %union.anon.15* %xio_dirpu to %struct.__dirstream**
  %92 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp, align 8
  %tobool152 = icmp ne %struct.__dirstream* %92, null
  br i1 %tobool152, label %if.then153, label %if.else159

if.then153:                                       ; preds = %if.else150
  %93 = load %struct.io*, %struct.io** %io, align 8
  %sv_any154 = getelementptr inbounds %struct.io, %struct.io* %93, i32 0, i32 0
  %94 = load %struct.xpvio*, %struct.xpvio** %sv_any154, align 8
  %xio_dirpu155 = getelementptr inbounds %struct.xpvio, %struct.xpvio* %94, i32 0, i32 6
  %xiou_dirp156 = bitcast %union.anon.15* %xio_dirpu155 to %struct.__dirstream**
  %95 = load %struct.__dirstream*, %struct.__dirstream** %xiou_dirp156, align 8
  %call157 = call i32 @Perl_my_dirfd(%struct.__dirstream* %95)
  %call158 = call i32 @fstat64(i32 %call157, %struct.stat* @PL_statcache) #3
  store i32 %call158, i32* @PL_laststatval, align 4
  store i8 1, i8* %havefp, align 1
  br label %if.end160

if.else159:                                       ; preds = %if.else150
  store i32 -1, i32* @PL_laststatval, align 4
  br label %if.end160

if.end160:                                        ; preds = %if.else159, %if.then153
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.end149
  br label %if.end163

if.else162:                                       ; preds = %if.end134
  store i32 -1, i32* @PL_laststatval, align 4
  br label %if.end163

if.end163:                                        ; preds = %if.else162, %if.end161
  %96 = load i32, i32* @PL_laststatval, align 4
  %cmp164 = icmp slt i32 %96, 0
  br i1 %cmp164, label %land.lhs.true166, label %if.end169

land.lhs.true166:                                 ; preds = %if.end163
  %97 = load i8, i8* %havefp, align 1
  %tobool167 = trunc i8 %97 to i1
  br i1 %tobool167, label %if.end169, label %if.then168

if.then168:                                       ; preds = %land.lhs.true166
  %98 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %98)
  br label %if.end169

if.end169:                                        ; preds = %if.then168, %land.lhs.true166, %if.end163
  br label %if.end170

if.end170:                                        ; preds = %if.end169, %if.end100
  %99 = load i32, i32* @PL_laststatval, align 4
  %cmp171 = icmp slt i32 %99, 0
  br i1 %cmp171, label %if.then173, label %if.end174

if.then173:                                       ; preds = %if.end170
  store i32 0, i32* %max, align 4
  br label %if.end174

if.end174:                                        ; preds = %if.then173, %if.end170
  br label %if.end254

if.else175:                                       ; preds = %cond.end67, %cond.true
  %100 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags176 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags176, align 4
  %and177 = and i32 %101, 2048
  %tobool178 = icmp ne i32 %and177, 0
  br i1 %tobool178, label %land.lhs.true179, label %if.end197

land.lhs.true179:                                 ; preds = %if.else175
  %102 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u180 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 3
  %svu_rv181 = bitcast %union.anon* %sv_u180 to %struct.sv**
  %103 = load %struct.sv*, %struct.sv** %svu_rv181, align 8
  %sv_flags182 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags182, align 4
  %and183 = and i32 %104, 255
  %cmp184 = icmp eq i32 %and183, 15
  br i1 %cmp184, label %if.then186, label %if.end197

if.then186:                                       ; preds = %land.lhs.true179
  %105 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u187 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 3
  %svu_rv188 = bitcast %union.anon* %sv_u187 to %struct.sv**
  %106 = load %struct.sv*, %struct.sv** %svu_rv188, align 8
  %107 = bitcast %struct.sv* %106 to i8*
  %108 = bitcast i8* %107 to %struct.io*
  store %struct.io* %108, %struct.io** %io, align 8
  %109 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type189 = getelementptr inbounds %struct.op, %struct.op* %109, i32 0, i32 4
  %bf.load190 = load i16, i16* %op_type189, align 8
  %bf.clear191 = and i16 %bf.load190, 511
  %bf.cast192 = zext i16 %bf.clear191 to i32
  %cmp193 = icmp eq i32 %bf.cast192, 264
  br i1 %cmp193, label %if.then195, label %if.end196

if.then195:                                       ; preds = %if.then186
  br label %do_fstat_warning_check

if.end196:                                        ; preds = %if.then186
  br label %do_fstat_have_io

if.end197:                                        ; preds = %land.lhs.true179, %if.else175
  br label %do.body

do.body:                                          ; preds = %if.end197
  %110 = load i8, i8* @PL_tainting, align 1
  %tobool198 = trunc i8 %110 to i1
  br i1 %tobool198, label %cond.true200, label %cond.false201

cond.true200:                                     ; preds = %do.body
  br i1 true, label %if.then202, label %if.end203

cond.false201:                                    ; preds = %do.body
  br i1 false, label %if.then202, label %if.end203

if.then202:                                       ; preds = %cond.false201, %cond.true200
  %111 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  call void @Perl_sv_untaint(%struct.sv* %111)
  br label %if.end203

if.end203:                                        ; preds = %if.then202, %cond.false201, %cond.true200
  br label %do.end

do.end:                                           ; preds = %if.end203
  %112 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %113 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags204 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags204, align 4
  %and205 = and i32 %114, 2098176
  %cmp206 = icmp eq i32 %and205, 1024
  br i1 %cmp206, label %cond.true208, label %cond.false211

cond.true208:                                     ; preds = %do.end
  %115 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u209 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u209 to i8**
  %116 = load i8*, i8** %svu_pv, align 8
  %add.ptr210 = getelementptr inbounds i8, i8* %116, i64 0
  br label %cond.end213

cond.false211:                                    ; preds = %do.end
  %117 = load %struct.sv*, %struct.sv** %sv, align 8
  %call212 = call i8* @Perl_sv_2pv_flags(%struct.sv* %117, i64* null, i32 32)
  br label %cond.end213

cond.end213:                                      ; preds = %cond.false211, %cond.true208
  %cond214 = phi i8* [ %add.ptr210, %cond.true208 ], [ %call212, %cond.false211 ]
  call void @Perl_sv_setpv(%struct.sv* %112, i8* %cond214)
  store %struct.gv* null, %struct.gv** @PL_statgv, align 8
  %118 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type215 = getelementptr inbounds %struct.op, %struct.op* %118, i32 0, i32 4
  %bf.load216 = load i16, i16* %op_type215, align 8
  %bf.clear217 = and i16 %bf.load216, 511
  %bf.cast218 = zext i16 %bf.clear217 to i32
  %conv219 = trunc i32 %bf.cast218 to i16
  store i16 %conv219, i16* @PL_laststype, align 2
  %119 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %sv_flags220 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags220, align 4
  %and221 = and i32 %120, 2098176
  %cmp222 = icmp eq i32 %and221, 1024
  br i1 %cmp222, label %cond.true224, label %cond.false228

cond.true224:                                     ; preds = %cond.end213
  %121 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %sv_u225 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 3
  %svu_pv226 = bitcast %union.anon* %sv_u225 to i8**
  %122 = load i8*, i8** %svu_pv226, align 8
  %add.ptr227 = getelementptr inbounds i8, i8* %122, i64 0
  br label %cond.end230

cond.false228:                                    ; preds = %cond.end213
  %123 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %call229 = call i8* @Perl_sv_2pv_flags(%struct.sv* %123, i64* null, i32 34)
  br label %cond.end230

cond.end230:                                      ; preds = %cond.false228, %cond.true224
  %cond231 = phi i8* [ %add.ptr227, %cond.true224 ], [ %call229, %cond.false228 ]
  store i8* %cond231, i8** %file, align 8
  %124 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type232 = getelementptr inbounds %struct.op, %struct.op* %124, i32 0, i32 4
  %bf.load233 = load i16, i16* %op_type232, align 8
  %bf.clear234 = and i16 %bf.load233, 511
  %bf.cast235 = zext i16 %bf.clear234 to i32
  %cmp236 = icmp eq i32 %bf.cast235, 264
  br i1 %cmp236, label %if.then238, label %if.else240

if.then238:                                       ; preds = %cond.end230
  %125 = load i8*, i8** %file, align 8
  %call239 = call i32 @stat64(i8* %125, %struct.stat* @PL_statcache) #3
  store i32 %call239, i32* @PL_laststatval, align 4
  br label %if.end242

if.else240:                                       ; preds = %cond.end230
  %126 = load i8*, i8** %file, align 8
  %call241 = call i32 @stat64(i8* %126, %struct.stat* @PL_statcache) #3
  store i32 %call241, i32* @PL_laststatval, align 4
  br label %if.end242

if.end242:                                        ; preds = %if.else240, %if.then238
  %127 = load i32, i32* @PL_laststatval, align 4
  %cmp243 = icmp slt i32 %127, 0
  br i1 %cmp243, label %if.then245, label %if.end253

if.then245:                                       ; preds = %if.end242
  %call246 = call zeroext i1 @Perl_ckwarn(i32 9)
  br i1 %call246, label %land.lhs.true248, label %if.end252

land.lhs.true248:                                 ; preds = %if.then245
  %128 = load i8*, i8** %file, align 8
  %call249 = call zeroext i1 @S_should_warn_nl(i8* %128)
  br i1 %call249, label %if.then251, label %if.end252

if.then251:                                       ; preds = %land.lhs.true248
  call void (i32, i8*, ...) @Perl_warner(i32 9, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_warn_nl, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i64 0, i64 0))
  br label %if.end252

if.end252:                                        ; preds = %if.then251, %land.lhs.true248, %if.then245
  store i32 0, i32* %max, align 4
  br label %if.end253

if.end253:                                        ; preds = %if.end252, %if.end242
  br label %if.end254

if.end254:                                        ; preds = %if.end253, %if.end174
  %129 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags255 = getelementptr inbounds %struct.op, %struct.op* %129, i32 0, i32 5
  %130 = load i8, i8* %op_flags255, align 2
  %conv256 = zext i8 %130 to i32
  %and257 = and i32 %conv256, 3
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %cond.true259, label %cond.false263

cond.true259:                                     ; preds = %if.end254
  %131 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags260 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 5
  %132 = load i8, i8* %op_flags260, align 2
  %conv261 = zext i8 %132 to i32
  %and262 = and i32 %conv261, 3
  br label %cond.end265

cond.false263:                                    ; preds = %if.end254
  %call264 = call i32 @Perl_block_gimme()
  br label %cond.end265

cond.end265:                                      ; preds = %cond.false263, %cond.true259
  %cond266 = phi i32 [ %and262, %cond.true259 ], [ %call264, %cond.false263 ]
  store i32 %cond266, i32* %gimme, align 4
  %133 = load i32, i32* %gimme, align 4
  %cmp267 = icmp ne i32 %133, 3
  br i1 %cmp267, label %if.then269, label %if.end288

if.then269:                                       ; preds = %cond.end265
  %134 = load i32, i32* %gimme, align 4
  %cmp270 = icmp ne i32 %134, 1
  br i1 %cmp270, label %if.then272, label %if.end287

if.then272:                                       ; preds = %if.then269
  br label %do.body273

do.body273:                                       ; preds = %if.then272
  br label %do.body274

do.body274:                                       ; preds = %do.body273
  %135 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %136 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %135 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %136 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp275 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp275, label %cond.true277, label %cond.false278

cond.true277:                                     ; preds = %do.body274
  br i1 true, label %if.then279, label %if.end281

cond.false278:                                    ; preds = %do.body274
  br i1 false, label %if.then279, label %if.end281

if.then279:                                       ; preds = %cond.false278, %cond.true277
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call280 = call %struct.sv** @Perl_stack_grow(%struct.sv** %137, %struct.sv** %138, i64 1)
  store %struct.sv** %call280, %struct.sv*** %sp, align 8
  %139 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end281

if.end281:                                        ; preds = %if.then279, %cond.false278, %cond.true277
  br label %do.end282

do.end282:                                        ; preds = %if.end281
  %140 = load i32, i32* %max, align 4
  %tobool283 = icmp ne i32 %140, 0
  %141 = zext i1 %tobool283 to i64
  %cond284 = select i1 %tobool283, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr285 = getelementptr inbounds %struct.sv*, %struct.sv** %142, i32 1
  store %struct.sv** %incdec.ptr285, %struct.sv*** %sp, align 8
  store %struct.sv* %cond284, %struct.sv** %incdec.ptr285, align 8
  br label %do.end286

do.end286:                                        ; preds = %do.end282
  br label %if.end287

if.end287:                                        ; preds = %do.end286, %if.then269
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %143, %struct.sv*** @PL_stack_sp, align 8
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 0
  %145 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %145, %struct.op** %retval, align 8
  br label %return

if.end288:                                        ; preds = %cond.end265
  %146 = load i32, i32* %max, align 4
  %tobool289 = icmp ne i32 %146, 0
  br i1 %tobool289, label %if.then290, label %if.end345

if.then290:                                       ; preds = %if.end288
  br label %do.body291

do.body291:                                       ; preds = %if.then290
  %147 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %148 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast292 = ptrtoint %struct.sv** %147 to i64
  %sub.ptr.rhs.cast293 = ptrtoint %struct.sv** %148 to i64
  %sub.ptr.sub294 = sub i64 %sub.ptr.lhs.cast292, %sub.ptr.rhs.cast293
  %sub.ptr.div295 = sdiv exact i64 %sub.ptr.sub294, 8
  %149 = load i32, i32* %max, align 4
  %conv296 = sext i32 %149 to i64
  %cmp297 = icmp slt i64 %sub.ptr.div295, %conv296
  br i1 %cmp297, label %cond.true299, label %cond.false300

cond.true299:                                     ; preds = %do.body291
  br i1 true, label %if.then301, label %if.end304

cond.false300:                                    ; preds = %do.body291
  br i1 false, label %if.then301, label %if.end304

if.then301:                                       ; preds = %cond.false300, %cond.true299
  %150 = load %struct.sv**, %struct.sv*** %sp, align 8
  %151 = load %struct.sv**, %struct.sv*** %sp, align 8
  %152 = load i32, i32* %max, align 4
  %conv302 = sext i32 %152 to i64
  %call303 = call %struct.sv** @Perl_stack_grow(%struct.sv** %150, %struct.sv** %151, i64 %conv302)
  store %struct.sv** %call303, %struct.sv*** %sp, align 8
  %153 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end304

if.end304:                                        ; preds = %if.then301, %cond.false300, %cond.true299
  br label %do.end305

do.end305:                                        ; preds = %if.end304
  br label %do.body306

do.body306:                                       ; preds = %do.end305
  %154 = load i64, i64* @PL_tmps_ix, align 8
  %155 = load i32, i32* %max, align 4
  %conv307 = sext i32 %155 to i64
  %add = add nsw i64 %154, %conv307
  store i64 %add, i64* %eMiX, align 8
  %156 = load i64, i64* %eMiX, align 8
  %157 = load i64, i64* @PL_tmps_max, align 8
  %cmp308 = icmp sge i64 %156, %157
  br i1 %cmp308, label %cond.true310, label %cond.false311

cond.true310:                                     ; preds = %do.body306
  br i1 true, label %if.then312, label %if.end314

cond.false311:                                    ; preds = %do.body306
  br i1 false, label %if.then312, label %if.end314

if.then312:                                       ; preds = %cond.false311, %cond.true310
  %158 = load i64, i64* %eMiX, align 8
  %call313 = call i64 @Perl_tmps_grow_p(i64 %158)
  br label %if.end314

if.end314:                                        ; preds = %if.then312, %cond.false311, %cond.true310
  br label %do.end315

do.end315:                                        ; preds = %if.end314
  %call316 = call %struct.sv* @Perl_sv_newmortal()
  %159 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr317 = getelementptr inbounds %struct.sv*, %struct.sv** %159, i32 1
  store %struct.sv** %incdec.ptr317, %struct.sv*** %sp, align 8
  store %struct.sv* %call316, %struct.sv** %incdec.ptr317, align 8
  %160 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 0), align 8
  call void @Perl_sv_setiv(%struct.sv* %call316, i64 %160)
  %call318 = call %struct.sv* @Perl_sv_newmortal()
  %161 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr319 = getelementptr inbounds %struct.sv*, %struct.sv** %161, i32 1
  store %struct.sv** %incdec.ptr319, %struct.sv*** %sp, align 8
  store %struct.sv* %call318, %struct.sv** %incdec.ptr319, align 8
  %162 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 1), align 8
  call void @Perl_sv_setiv(%struct.sv* %call318, i64 %162)
  %call320 = call %struct.sv* @Perl_sv_newmortal()
  %163 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr321 = getelementptr inbounds %struct.sv*, %struct.sv** %163, i32 1
  store %struct.sv** %incdec.ptr321, %struct.sv*** %sp, align 8
  store %struct.sv* %call320, %struct.sv** %incdec.ptr321, align 8
  %164 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %conv322 = zext i32 %164 to i64
  call void @Perl_sv_setuv(%struct.sv* %call320, i64 %conv322)
  %call323 = call %struct.sv* @Perl_sv_newmortal()
  %165 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr324 = getelementptr inbounds %struct.sv*, %struct.sv** %165, i32 1
  store %struct.sv** %incdec.ptr324, %struct.sv*** %sp, align 8
  store %struct.sv* %call323, %struct.sv** %incdec.ptr324, align 8
  %166 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 2), align 8
  call void @Perl_sv_setuv(%struct.sv* %call323, i64 %166)
  %call325 = call %struct.sv* @Perl_sv_newmortal()
  %167 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr326 = getelementptr inbounds %struct.sv*, %struct.sv** %167, i32 1
  store %struct.sv** %incdec.ptr326, %struct.sv*** %sp, align 8
  store %struct.sv* %call325, %struct.sv** %incdec.ptr326, align 8
  %168 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 4), align 4
  %conv327 = zext i32 %168 to i64
  call void @Perl_sv_setuv(%struct.sv* %call325, i64 %conv327)
  %call328 = call %struct.sv* @Perl_sv_newmortal()
  %169 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr329 = getelementptr inbounds %struct.sv*, %struct.sv** %169, i32 1
  store %struct.sv** %incdec.ptr329, %struct.sv*** %sp, align 8
  store %struct.sv* %call328, %struct.sv** %incdec.ptr329, align 8
  %170 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 5), align 8
  %conv330 = zext i32 %170 to i64
  call void @Perl_sv_setuv(%struct.sv* %call328, i64 %conv330)
  %call331 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0, i32 524288)
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr332 = getelementptr inbounds %struct.sv*, %struct.sv** %171, i32 1
  store %struct.sv** %incdec.ptr332, %struct.sv*** %sp, align 8
  store %struct.sv* %call331, %struct.sv** %incdec.ptr332, align 8
  %call333 = call %struct.sv* @Perl_sv_newmortal()
  %172 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr334 = getelementptr inbounds %struct.sv*, %struct.sv** %172, i32 1
  store %struct.sv** %incdec.ptr334, %struct.sv*** %sp, align 8
  store %struct.sv* %call333, %struct.sv** %incdec.ptr334, align 8
  %173 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 8), align 8
  call void @Perl_sv_setiv(%struct.sv* %call333, i64 %173)
  %call335 = call %struct.sv* @Perl_sv_newmortal()
  %174 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr336 = getelementptr inbounds %struct.sv*, %struct.sv** %174, i32 1
  store %struct.sv** %incdec.ptr336, %struct.sv*** %sp, align 8
  store %struct.sv* %call335, %struct.sv** %incdec.ptr336, align 8
  %175 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 11, i32 0), align 8
  call void @Perl_sv_setiv(%struct.sv* %call335, i64 %175)
  %call337 = call %struct.sv* @Perl_sv_newmortal()
  %176 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr338 = getelementptr inbounds %struct.sv*, %struct.sv** %176, i32 1
  store %struct.sv** %incdec.ptr338, %struct.sv*** %sp, align 8
  store %struct.sv* %call337, %struct.sv** %incdec.ptr338, align 8
  %177 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 12, i32 0), align 8
  call void @Perl_sv_setiv(%struct.sv* %call337, i64 %177)
  %call339 = call %struct.sv* @Perl_sv_newmortal()
  %178 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr340 = getelementptr inbounds %struct.sv*, %struct.sv** %178, i32 1
  store %struct.sv** %incdec.ptr340, %struct.sv*** %sp, align 8
  store %struct.sv* %call339, %struct.sv** %incdec.ptr340, align 8
  %179 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 13, i32 0), align 8
  call void @Perl_sv_setiv(%struct.sv* %call339, i64 %179)
  %call341 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0, i32 524288)
  %180 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr342 = getelementptr inbounds %struct.sv*, %struct.sv** %180, i32 1
  store %struct.sv** %incdec.ptr342, %struct.sv*** %sp, align 8
  store %struct.sv* %call341, %struct.sv** %incdec.ptr342, align 8
  %call343 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0, i32 524288)
  %181 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr344 = getelementptr inbounds %struct.sv*, %struct.sv** %181, i32 1
  store %struct.sv** %incdec.ptr344, %struct.sv*** %sp, align 8
  store %struct.sv* %call343, %struct.sv** %incdec.ptr344, align 8
  br label %if.end345

if.end345:                                        ; preds = %do.end315, %if.end288
  %182 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %182, %struct.sv*** @PL_stack_sp, align 8
  %183 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next346 = getelementptr inbounds %struct.op, %struct.op* %183, i32 0, i32 0
  %184 = load %struct.op*, %struct.op** %op_next346, align 8
  store %struct.op* %184, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end345, %if.end287
  %185 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %185
}

declare dso_local %struct.sv* @Perl_newSVhek(%struct.hek*) #1

; Function Attrs: nounwind
declare dso_local i32 @fstat64(i32, %struct.stat*) #6

declare dso_local i32 @Perl_my_dirfd(%struct.__dirstream*) #1

declare dso_local void @Perl_sv_untaint(%struct.sv*) #1

declare dso_local void @Perl_sv_setpv(%struct.sv*, i8*) #1

; Function Attrs: nounwind
declare dso_local i32 @stat64(i8*, %struct.stat*) #6

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_should_warn_nl(i8* %pv) #0 {
entry:
  %pv.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  store i8* %pv, i8** %pv.addr, align 8
  %0 = load i8*, i8** %pv.addr, align 8
  %call = call i64 @strlen(i8* %0) #10
  store i64 %call, i64* %len, align 8
  %1 = load i64, i64* %len, align 8
  %cmp = icmp ugt i64 %1, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i8*, i8** %pv.addr, align 8
  %3 = load i64, i64* %len, align 8
  %sub = sub i64 %3, 1
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %sub
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  ret i1 %5
}

declare dso_local void @Perl_warner(i32, i8*, ...) #1

declare dso_local i64 @Perl_tmps_grow_p(i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ftrread() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %result = alloca i32, align 4
  %use_access = alloca i32, align 4
  %stat_mode = alloca i32, align 4
  %effective = alloca i8, align 1
  %opchar = alloca i8, align 1
  %next = alloca %struct.op*, align 8
  store i32 0, i32* %use_access, align 4
  store i32 256, i32* %stat_mode, align 4
  store i8 0, i8* %effective, align 1
  store i8 63, i8* %opchar, align 1
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 266, label %sw.bb
    i32 267, label %sw.bb1
    i32 268, label %sw.bb2
    i32 269, label %sw.bb3
    i32 270, label %sw.bb4
    i32 271, label %sw.bb5
  ]

sw.bb:                                            ; preds = %entry
  store i8 82, i8* %opchar, align 1
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i8 87, i8* %opchar, align 1
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i8 88, i8* %opchar, align 1
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i8 114, i8* %opchar, align 1
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  store i8 119, i8* %opchar, align 1
  br label %sw.epilog

sw.bb5:                                           ; preds = %entry
  store i8 120, i8* %opchar, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 5
  %5 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %5 to i32
  %and6 = and i32 %conv, 4
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then, label %if.end10

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8, i8* %opchar, align 1
  %call = call %struct.op* @S_try_amagic_ftest(i8 signext %6)
  store %struct.op* %call, %struct.op** %next, align 8
  %7 = load %struct.op*, %struct.op** %next, align 8
  %tobool8 = icmp ne %struct.op* %7, null
  br i1 %tobool8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end10

if.end10:                                         ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end10
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type11 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load12 = load i16, i16* %op_type11, align 8
  %bf.clear13 = and i16 %bf.load12, 511
  %bf.cast14 = zext i16 %bf.clear13 to i32
  switch i32 %bf.cast14, label %sw.epilog21 [
    i32 266, label %sw.bb15
    i32 267, label %sw.bb16
    i32 268, label %sw.bb17
    i32 270, label %sw.bb18
    i32 269, label %sw.bb19
    i32 271, label %sw.bb20
  ]

sw.bb15:                                          ; preds = %do.end
  store i32 0, i32* %use_access, align 4
  br label %sw.epilog21

sw.bb16:                                          ; preds = %do.end
  store i32 0, i32* %use_access, align 4
  store i32 128, i32* %stat_mode, align 4
  br label %sw.epilog21

sw.bb17:                                          ; preds = %do.end
  store i32 0, i32* %use_access, align 4
  store i32 64, i32* %stat_mode, align 4
  br label %sw.epilog21

sw.bb18:                                          ; preds = %do.end
  store i32 128, i32* %stat_mode, align 4
  br label %sw.bb19

sw.bb19:                                          ; preds = %do.end, %sw.bb18
  store i32 0, i32* %use_access, align 4
  store i8 1, i8* %effective, align 1
  br label %sw.epilog21

sw.bb20:                                          ; preds = %do.end
  store i32 0, i32* %use_access, align 4
  store i32 64, i32* %stat_mode, align 4
  store i8 1, i8* %effective, align 1
  br label %sw.epilog21

sw.epilog21:                                      ; preds = %do.end, %sw.bb20, %sw.bb19, %sw.bb17, %sw.bb16, %sw.bb15
  %10 = load i32, i32* %use_access, align 4
  %tobool22 = icmp ne i32 %10, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %sw.epilog21
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %sw.epilog21
  %call25 = call i32 @Perl_my_stat_flags(i32 0)
  store i32 %call25, i32* %result, align 4
  %11 = load i32, i32* %result, align 4
  %cmp = icmp slt i32 %11, 0
  br i1 %cmp, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end24
  %call28 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call28, %struct.op** %retval, align 8
  br label %return

if.end29:                                         ; preds = %if.end24
  %12 = load i32, i32* %stat_mode, align 4
  %13 = load i8, i8* %effective, align 1
  %tobool30 = trunc i8 %13 to i1
  %call31 = call zeroext i1 @Perl_cando(i32 %12, i1 zeroext %tobool30, %struct.stat* @PL_statcache)
  br i1 %call31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %call33 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call33, %struct.op** %retval, align 8
  br label %return

if.end34:                                         ; preds = %if.end29
  %call35 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call35, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end34, %if.then32, %if.then27, %if.then9
  %14 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %14
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_try_amagic_ftest(i8 signext %chr) #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %chr.addr = alloca i8, align 1
  %arg = alloca %struct.sv*, align 8
  %tmpchr = alloca i8, align 1
  %tmpsv = alloca %struct.sv*, align 8
  store i8 %chr, i8* %chr.addr, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %1 = load %struct.sv*, %struct.sv** %0, align 8
  store %struct.sv* %1, %struct.sv** %arg, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 6
  %3 = load i8, i8* %op_private, align 1
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %5, 2097152
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %6 = load %struct.sv*, %struct.sv** %arg, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %6)
  %tobool3 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %7 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %entry
  %8 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %9, 2048
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end99

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %11 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %12, 1048576
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end99

land.lhs.true10:                                  ; preds = %land.lhs.true
  %13 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_u11 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_rv12 = bitcast %union.anon* %sv_u11 to %struct.sv**
  %14 = load %struct.sv*, %struct.sv** %svu_rv12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %16, i32 0, i32 0
  %17 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags13 = getelementptr inbounds %struct.hv, %struct.hv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %18, 268435456
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then16, label %if.end99

if.then16:                                        ; preds = %land.lhs.true10
  %19 = load i8, i8* %chr.addr, align 1
  store i8 %19, i8* %tmpchr, align 1
  %20 = load %struct.sv*, %struct.sv** %arg, align 8
  %call17 = call %struct.sv* @Perl_newSVpvn_flags(i8* %tmpchr, i64 1, i32 524288)
  %call18 = call %struct.sv* @Perl_amagic_call(%struct.sv* %20, %struct.sv* %call17, i32 73, i32 8)
  store %struct.sv* %call18, %struct.sv** %tmpsv, align 8
  %21 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %tobool19 = icmp ne %struct.sv* %21, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.then16
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

if.end21:                                         ; preds = %if.then16
  %22 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %tobool22 = icmp ne %struct.sv* %22, null
  br i1 %tobool22, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %if.end21
  br i1 true, label %land.lhs.true25, label %cond.false97

cond.false24:                                     ; preds = %if.end21
  br i1 false, label %land.lhs.true25, label %cond.false97

land.lhs.true25:                                  ; preds = %cond.false24, %cond.true23
  %23 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %24, 2097152
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %land.lhs.true25
  br i1 true, label %cond.true31, label %cond.false34

cond.false30:                                     ; preds = %land.lhs.true25
  br i1 false, label %cond.true31, label %cond.false34

cond.true31:                                      ; preds = %cond.false30, %cond.true29
  %25 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call32 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %25, i32 2)
  br i1 %call32, label %cond.true95, label %cond.false97

cond.false34:                                     ; preds = %cond.false30, %cond.true29
  %26 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %27, 65280
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %cond.false47, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false34
  %28 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %29, 255
  %cmp = icmp eq i32 %and39, 8
  br i1 %cmp, label %cond.false47, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %lor.lhs.false
  %30 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %31, 16826623
  %cmp44 = icmp eq i32 %and43, 16777226
  br i1 %cmp44, label %cond.false47, label %cond.true46

cond.true46:                                      ; preds = %lor.lhs.false41
  br i1 false, label %cond.true95, label %cond.false97

cond.false47:                                     ; preds = %lor.lhs.false41, %lor.lhs.false, %cond.false34
  %32 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %33, 1024
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %cond.true51, label %cond.false67

cond.true51:                                      ; preds = %cond.false47
  %34 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any52 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any52, align 8
  %36 = bitcast i8* %35 to %struct.xpv*
  %tobool53 = icmp ne %struct.xpv* %36, null
  br i1 %tobool53, label %land.lhs.true54, label %cond.false97

land.lhs.true54:                                  ; preds = %cond.true51
  %37 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any55, align 8
  %39 = bitcast i8* %38 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %39, i32 0, i32 2
  %40 = load i64, i64* %xpv_cur, align 8
  %cmp56 = icmp ugt i64 %40, 1
  br i1 %cmp56, label %cond.true95, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %land.lhs.true54
  %41 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any59, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur60 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 2
  %44 = load i64, i64* %xpv_cur60, align 8
  %tobool61 = icmp ne i64 %44, 0
  br i1 %tobool61, label %land.lhs.true62, label %cond.false97

land.lhs.true62:                                  ; preds = %lor.lhs.false58
  %45 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u63 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u63 to i8**
  %46 = load i8*, i8** %svu_pv, align 8
  %47 = load i8, i8* %46, align 1
  %conv64 = sext i8 %47 to i32
  %cmp65 = icmp ne i32 %conv64, 48
  br i1 %cmp65, label %cond.true95, label %cond.false97

cond.false67:                                     ; preds = %cond.false47
  %48 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %49, 768
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %cond.true71, label %cond.false92

cond.true71:                                      ; preds = %cond.false67
  %50 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags72 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %51, 256
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %land.lhs.true75, label %lor.lhs.false79

land.lhs.true75:                                  ; preds = %cond.true71
  %52 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any76 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any76, align 8
  %54 = bitcast i8* %53 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %54, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %55 = load i64, i64* %xivu_iv, align 8
  %cmp77 = icmp ne i64 %55, 0
  br i1 %cmp77, label %cond.true95, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %land.lhs.true75, %cond.true71
  %56 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %57, 512
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %land.lhs.true83, label %cond.false97

land.lhs.true83:                                  ; preds = %lor.lhs.false79
  %58 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any84 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any84, align 8
  %60 = bitcast i8* %59 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %60, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %61 = load double, double* %xnv_nv, align 8
  %cmp85 = fcmp uno double %61, %61
  br i1 %cmp85, label %cond.true95, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %land.lhs.true83
  %62 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any87 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any87, align 8
  %64 = bitcast i8* %63 to %struct.xpvnv*
  %xnv_u88 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %64, i32 0, i32 5
  %xnv_nv89 = bitcast %union._xnvu* %xnv_u88 to double*
  %65 = load double, double* %xnv_nv89, align 8
  %cmp90 = fcmp une double %65, 0.000000e+00
  br i1 %cmp90, label %cond.true95, label %cond.false97

cond.false92:                                     ; preds = %cond.false67
  %66 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call93 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %66, i32 0)
  br i1 %call93, label %cond.true95, label %cond.false97

cond.true95:                                      ; preds = %cond.false92, %lor.lhs.false86, %land.lhs.true83, %land.lhs.true75, %land.lhs.true62, %land.lhs.true54, %cond.true46, %cond.true31
  %67 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call96 = call %struct.op* @S_ft_return_true(%struct.sv* %67)
  br label %cond.end

cond.false97:                                     ; preds = %cond.false92, %lor.lhs.false86, %lor.lhs.false79, %land.lhs.true62, %lor.lhs.false58, %cond.true51, %cond.true46, %cond.true31, %cond.false24, %cond.true23
  %68 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call98 = call %struct.op* @S_ft_return_false(%struct.sv* %68)
  br label %cond.end

cond.end:                                         ; preds = %cond.false97, %cond.true95
  %cond = phi %struct.op* [ %call96, %cond.true95 ], [ %call98, %cond.false97 ]
  store %struct.op* %cond, %struct.op** %retval, align 8
  br label %return

if.end99:                                         ; preds = %land.lhs.true10, %land.lhs.true, %if.end
  store %struct.op* null, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end99, %cond.end, %if.then20
  %69 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %69
}

declare dso_local i32 @Perl_my_stat_flags(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_ft_return_false(%struct.sv* %ret) #0 {
entry:
  %ret.addr = alloca %struct.sv*, align 8
  %next = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  store %struct.sv* %ret, %struct.sv** %ret.addr, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 0
  %1 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %1, %struct.op** %next, align 8
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %2, %struct.sv*** %sp, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then3, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then3, label %if.end

if.then3:                                         ; preds = %cond.false, %cond.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %ret.addr, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %10, %struct.sv** %incdec.ptr, align 8
  br label %do.end4

do.end4:                                          ; preds = %do.end
  br label %if.end5

if.else:                                          ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %ret.addr, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %12, %struct.sv** %13, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.else, %do.end4
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %14, %struct.sv*** @PL_stack_sp, align 8
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private, align 1
  %conv6 = zext i8 %16 to i32
  %and7 = and i32 %conv6, 8
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.end23

if.then9:                                         ; preds = %if.end5
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then9
  %17 = load %struct.op*, %struct.op** %next, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp10 = icmp sge i32 %bf.cast, 266
  br i1 %cmp10, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %18 = load %struct.op*, %struct.op** %next, align 8
  %op_type12 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load13 = load i16, i16* %op_type12, align 8
  %bf.clear14 = and i16 %bf.load13, 511
  %bf.cast15 = zext i16 %bf.clear14 to i32
  %cmp16 = icmp sle i32 %bf.cast15, 292
  br i1 %cmp16, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %19 = load %struct.op*, %struct.op** %next, align 8
  %op_private18 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 6
  %20 = load i8, i8* %op_private18, align 1
  %conv19 = zext i8 %20 to i32
  %and20 = and i32 %conv19, 4
  %tobool21 = icmp ne i32 %and20, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %21 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %tobool21, %land.rhs ]
  br i1 %21, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %22 = load %struct.op*, %struct.op** %next, align 8
  %op_next22 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next22, align 8
  store %struct.op* %23, %struct.op** %next, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end23

if.end23:                                         ; preds = %while.end, %if.end5
  %24 = load %struct.op*, %struct.op** %next, align 8
  ret %struct.op* %24
}

declare dso_local zeroext i1 @Perl_cando(i32, i1 zeroext, %struct.stat*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_ft_return_true(%struct.sv* %ret) #0 {
entry:
  %ret.addr = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  store %struct.sv* %ret, %struct.sv** %ret.addr, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 16
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then3, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then3, label %if.end

if.then3:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %5, %struct.sv** %6, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %9 to i32
  %and5 = and i32 %conv4, 8
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %do.end
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %11 = bitcast %struct.op* %10 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %11, i32 0, i32 7
  %12 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %13 = bitcast %struct.sv* %12 to %struct.gv*
  %14 = bitcast %struct.gv* %13 to %struct.sv*
  br label %cond.end

cond.false8:                                      ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %ret.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true7
  %cond = phi %struct.sv* [ %14, %cond.true7 ], [ %15, %cond.false8 ]
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %incdec.ptr, align 8
  br label %do.end9

do.end9:                                          ; preds = %cond.end
  br label %if.end16

if.else:                                          ; preds = %entry
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private10 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 6
  %18 = load i8, i8* %op_private10, align 1
  %conv11 = zext i8 %18 to i32
  %and12 = and i32 %conv11, 8
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.else
  %19 = load %struct.sv*, %struct.sv** %ret.addr, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %19, %struct.sv** %20, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %do.end9
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ftis() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %result = alloca i32, align 4
  %op_type = alloca i32, align 4
  %opchar = alloca i8, align 1
  %next = alloca %struct.op*, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  store i8 63, i8* %opchar, align 1
  %1 = load i32, i32* %op_type, align 4
  switch i32 %1, label %sw.epilog [
    i32 272, label %sw.bb
    i32 273, label %sw.bb2
    i32 274, label %sw.bb3
    i32 276, label %sw.bb4
    i32 275, label %sw.bb5
  ]

sw.bb:                                            ; preds = %entry
  store i8 101, i8* %opchar, align 1
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i8 115, i8* %opchar, align 1
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i8 77, i8* %opchar, align 1
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  store i8 67, i8* %opchar, align 1
  br label %sw.epilog

sw.bb5:                                           ; preds = %entry
  store i8 65, i8* %opchar, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %3 = load %struct.sv*, %struct.sv** %2, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %do.body
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and6 = and i32 %conv, 4
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then, label %if.end10

if.then:                                          ; preds = %land.lhs.true
  %7 = load i8, i8* %opchar, align 1
  %call = call %struct.op* @S_try_amagic_ftest(i8 signext %7)
  store %struct.op* %call, %struct.op** %next, align 8
  %8 = load %struct.op*, %struct.op** %next, align 8
  %tobool8 = icmp ne %struct.op* %8, null
  br i1 %tobool8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  %9 = load %struct.op*, %struct.op** %next, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end10

if.end10:                                         ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end10
  %call11 = call i32 @Perl_my_stat_flags(i32 0)
  store i32 %call11, i32* %result, align 4
  %10 = load i32, i32* %result, align 4
  %cmp = icmp slt i32 %10, 0
  br i1 %cmp, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.end
  %call14 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call14, %struct.op** %retval, align 8
  br label %return

if.end15:                                         ; preds = %do.end
  %11 = load i32, i32* %op_type, align 4
  %cmp16 = icmp eq i32 %11, 272
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end15
  %call19 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call19, %struct.op** %retval, align 8
  br label %return

if.end20:                                         ; preds = %if.end15
  %12 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 3
  %14 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 %14
  %15 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %15, %struct.sv** %targ, align 8
  %16 = load i32, i32* %op_type, align 4
  switch i32 %16, label %sw.epilog35 [
    i32 273, label %sw.bb21
    i32 274, label %sw.bb22
    i32 275, label %sw.bb25
    i32 276, label %sw.bb30
  ]

sw.bb21:                                          ; preds = %if.end20
  %17 = load %struct.sv*, %struct.sv** %targ, align 8
  %18 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 8), align 8
  call void @Perl_sv_setiv(%struct.sv* %17, i64 %18)
  br label %sw.epilog35

sw.bb22:                                          ; preds = %if.end20
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %20 = load i64, i64* @PL_basetime, align 8
  %conv23 = sitofp i64 %20 to double
  %21 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 12, i32 0), align 8
  %conv24 = sitofp i64 %21 to double
  %sub = fsub double %conv23, %conv24
  %div = fdiv double %sub, 8.640000e+04
  call void @Perl_sv_setnv(%struct.sv* %19, double %div)
  br label %sw.epilog35

sw.bb25:                                          ; preds = %if.end20
  %22 = load %struct.sv*, %struct.sv** %targ, align 8
  %23 = load i64, i64* @PL_basetime, align 8
  %conv26 = sitofp i64 %23 to double
  %24 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 11, i32 0), align 8
  %conv27 = sitofp i64 %24 to double
  %sub28 = fsub double %conv26, %conv27
  %div29 = fdiv double %sub28, 8.640000e+04
  call void @Perl_sv_setnv(%struct.sv* %22, double %div29)
  br label %sw.epilog35

sw.bb30:                                          ; preds = %if.end20
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %26 = load i64, i64* @PL_basetime, align 8
  %conv31 = sitofp i64 %26 to double
  %27 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 13, i32 0), align 8
  %conv32 = sitofp i64 %27 to double
  %sub33 = fsub double %conv31, %conv32
  %div34 = fdiv double %sub33, 8.640000e+04
  call void @Perl_sv_setnv(%struct.sv* %25, double %div34)
  br label %sw.epilog35

sw.epilog35:                                      ; preds = %if.end20, %sw.bb30, %sw.bb25, %sw.bb22, %sw.bb21
  br label %do.body36

do.body36:                                        ; preds = %sw.epilog35
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %29, 4194304
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body36
  br i1 true, label %if.then40, label %if.end42

cond.false:                                       ; preds = %do.body36
  br i1 false, label %if.then40, label %if.end42

if.then40:                                        ; preds = %cond.false, %cond.true
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %call41 = call i32 @Perl_mg_set(%struct.sv* %30)
  br label %if.end42

if.end42:                                         ; preds = %if.then40, %cond.false, %cond.true
  br label %do.end43

do.end43:                                         ; preds = %if.end42
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %tobool44 = icmp ne %struct.sv* %31, null
  br i1 %tobool44, label %cond.true45, label %cond.false46

cond.true45:                                      ; preds = %do.end43
  br i1 true, label %land.lhs.true47, label %cond.false109

cond.false46:                                     ; preds = %do.end43
  br i1 false, label %land.lhs.true47, label %cond.false109

land.lhs.true47:                                  ; preds = %cond.false46, %cond.true45
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %33, 65280
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %cond.false61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true47
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %35, 255
  %cmp53 = icmp eq i32 %and52, 8
  br i1 %cmp53, label %cond.false61, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %lor.lhs.false
  %36 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %37, 16826623
  %cmp58 = icmp eq i32 %and57, 16777226
  br i1 %cmp58, label %cond.false61, label %cond.true60

cond.true60:                                      ; preds = %lor.lhs.false55
  br i1 false, label %cond.true107, label %cond.false109

cond.false61:                                     ; preds = %lor.lhs.false55, %lor.lhs.false, %land.lhs.true47
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %39, 1024
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false79

cond.true65:                                      ; preds = %cond.false61
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any, align 8
  %42 = bitcast i8* %41 to %struct.xpv*
  %tobool66 = icmp ne %struct.xpv* %42, null
  br i1 %tobool66, label %land.lhs.true67, label %cond.false109

land.lhs.true67:                                  ; preds = %cond.true65
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any68 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any68, align 8
  %45 = bitcast i8* %44 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %45, i32 0, i32 2
  %46 = load i64, i64* %xpv_cur, align 8
  %cmp69 = icmp ugt i64 %46, 1
  br i1 %cmp69, label %cond.true107, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %land.lhs.true67
  %47 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any72, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_cur73 = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 2
  %50 = load i64, i64* %xpv_cur73, align 8
  %tobool74 = icmp ne i64 %50, 0
  br i1 %tobool74, label %land.lhs.true75, label %cond.false109

land.lhs.true75:                                  ; preds = %lor.lhs.false71
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %52 = load i8*, i8** %svu_pv, align 8
  %53 = load i8, i8* %52, align 1
  %conv76 = sext i8 %53 to i32
  %cmp77 = icmp ne i32 %conv76, 48
  br i1 %cmp77, label %cond.true107, label %cond.false109

cond.false79:                                     ; preds = %cond.false61
  %54 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %55, 768
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %cond.true83, label %cond.false104

cond.true83:                                      ; preds = %cond.false79
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 2
  %57 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %57, 256
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %land.lhs.true87, label %lor.lhs.false91

land.lhs.true87:                                  ; preds = %cond.true83
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any88 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any88, align 8
  %60 = bitcast i8* %59 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %60, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %61 = load i64, i64* %xivu_iv, align 8
  %cmp89 = icmp ne i64 %61, 0
  br i1 %cmp89, label %cond.true107, label %lor.lhs.false91

lor.lhs.false91:                                  ; preds = %land.lhs.true87, %cond.true83
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %63, 512
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %land.lhs.true95, label %cond.false109

land.lhs.true95:                                  ; preds = %lor.lhs.false91
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any96, align 8
  %66 = bitcast i8* %65 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %66, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %67 = load double, double* %xnv_nv, align 8
  %cmp97 = fcmp uno double %67, %67
  br i1 %cmp97, label %cond.true107, label %lor.lhs.false98

lor.lhs.false98:                                  ; preds = %land.lhs.true95
  %68 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any99 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any99, align 8
  %70 = bitcast i8* %69 to %struct.xpvnv*
  %xnv_u100 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %70, i32 0, i32 5
  %xnv_nv101 = bitcast %union._xnvu* %xnv_u100 to double*
  %71 = load double, double* %xnv_nv101, align 8
  %cmp102 = fcmp une double %71, 0.000000e+00
  br i1 %cmp102, label %cond.true107, label %cond.false109

cond.false104:                                    ; preds = %cond.false79
  %72 = load %struct.sv*, %struct.sv** %targ, align 8
  %call105 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %72, i32 0)
  br i1 %call105, label %cond.true107, label %cond.false109

cond.true107:                                     ; preds = %cond.false104, %lor.lhs.false98, %land.lhs.true95, %land.lhs.true87, %land.lhs.true75, %land.lhs.true67, %cond.true60
  %73 = load %struct.sv*, %struct.sv** %targ, align 8
  %call108 = call %struct.op* @S_ft_return_true(%struct.sv* %73)
  br label %cond.end

cond.false109:                                    ; preds = %cond.false104, %lor.lhs.false98, %lor.lhs.false91, %land.lhs.true75, %lor.lhs.false71, %cond.true65, %cond.true60, %cond.false46, %cond.true45
  %74 = load %struct.sv*, %struct.sv** %targ, align 8
  %call110 = call %struct.op* @S_ft_return_false(%struct.sv* %74)
  br label %cond.end

cond.end:                                         ; preds = %cond.false109, %cond.true107
  %cond = phi %struct.op* [ %call108, %cond.true107 ], [ %call110, %cond.false109 ]
  store %struct.op* %cond, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then18, %if.then13, %if.then9
  %75 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %75
}

declare dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ftrowned() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %result = alloca i32, align 4
  %opchar = alloca i8, align 1
  %next = alloca %struct.op*, align 8
  store i8 63, i8* %opchar, align 1
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 277, label %sw.bb
    i32 278, label %sw.bb1
    i32 279, label %sw.bb2
    i32 280, label %sw.bb3
    i32 281, label %sw.bb4
    i32 282, label %sw.bb5
    i32 283, label %sw.bb6
    i32 284, label %sw.bb7
    i32 285, label %sw.bb8
    i32 286, label %sw.bb9
    i32 287, label %sw.bb10
    i32 288, label %sw.bb11
  ]

sw.bb:                                            ; preds = %entry
  store i8 79, i8* %opchar, align 1
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i8 111, i8* %opchar, align 1
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i8 122, i8* %opchar, align 1
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i8 83, i8* %opchar, align 1
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  store i8 99, i8* %opchar, align 1
  br label %sw.epilog

sw.bb5:                                           ; preds = %entry
  store i8 98, i8* %opchar, align 1
  br label %sw.epilog

sw.bb6:                                           ; preds = %entry
  store i8 102, i8* %opchar, align 1
  br label %sw.epilog

sw.bb7:                                           ; preds = %entry
  store i8 100, i8* %opchar, align 1
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  store i8 112, i8* %opchar, align 1
  br label %sw.epilog

sw.bb9:                                           ; preds = %entry
  store i8 117, i8* %opchar, align 1
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  store i8 103, i8* %opchar, align 1
  br label %sw.epilog

sw.bb11:                                          ; preds = %entry
  store i8 107, i8* %opchar, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %do.body
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 5
  %5 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %5 to i32
  %and12 = and i32 %conv, 4
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then, label %if.end16

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8, i8* %opchar, align 1
  %call = call %struct.op* @S_try_amagic_ftest(i8 signext %6)
  store %struct.op* %call, %struct.op** %next, align 8
  %7 = load %struct.op*, %struct.op** %next, align 8
  %tobool14 = icmp ne %struct.op* %7, null
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end16

if.end16:                                         ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end16
  %call17 = call i32 @Perl_my_stat_flags(i32 0)
  store i32 %call17, i32* %result, align 4
  %9 = load i32, i32* %result, align 4
  %cmp = icmp slt i32 %9, 0
  br i1 %cmp, label %if.then19, label %if.end21

if.then19:                                        ; preds = %do.end
  %call20 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call20, %struct.op** %retval, align 8
  br label %return

if.end21:                                         ; preds = %do.end
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type22 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load23 = load i16, i16* %op_type22, align 8
  %bf.clear24 = and i16 %bf.load23, 511
  %bf.cast25 = zext i16 %bf.clear24 to i32
  switch i32 %bf.cast25, label %sw.epilog106 [
    i32 277, label %sw.bb26
    i32 278, label %sw.bb33
    i32 279, label %sw.bb40
    i32 280, label %sw.bb46
    i32 281, label %sw.bb53
    i32 282, label %sw.bb60
    i32 283, label %sw.bb67
    i32 284, label %sw.bb74
    i32 285, label %sw.bb81
    i32 286, label %sw.bb88
    i32 287, label %sw.bb94
    i32 288, label %sw.bb100
  ]

sw.bb26:                                          ; preds = %if.end21
  %11 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 4), align 4
  %call27 = call i32 @getuid() #3
  %cmp28 = icmp eq i32 %11, %call27
  br i1 %cmp28, label %if.then30, label %if.end32

if.then30:                                        ; preds = %sw.bb26
  %call31 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call31, %struct.op** %retval, align 8
  br label %return

if.end32:                                         ; preds = %sw.bb26
  br label %sw.epilog106

sw.bb33:                                          ; preds = %if.end21
  %12 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 4), align 4
  %call34 = call i32 @geteuid() #3
  %cmp35 = icmp eq i32 %12, %call34
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %sw.bb33
  %call38 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call38, %struct.op** %retval, align 8
  br label %return

if.end39:                                         ; preds = %sw.bb33
  br label %sw.epilog106

sw.bb40:                                          ; preds = %if.end21
  %13 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 8), align 8
  %cmp41 = icmp eq i64 %13, 0
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %sw.bb40
  %call44 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call44, %struct.op** %retval, align 8
  br label %return

if.end45:                                         ; preds = %sw.bb40
  br label %sw.epilog106

sw.bb46:                                          ; preds = %if.end21
  %14 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and47 = and i32 %14, 61440
  %cmp48 = icmp eq i32 %and47, 49152
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %sw.bb46
  %call51 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call51, %struct.op** %retval, align 8
  br label %return

if.end52:                                         ; preds = %sw.bb46
  br label %sw.epilog106

sw.bb53:                                          ; preds = %if.end21
  %15 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and54 = and i32 %15, 61440
  %cmp55 = icmp eq i32 %and54, 8192
  br i1 %cmp55, label %if.then57, label %if.end59

if.then57:                                        ; preds = %sw.bb53
  %call58 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call58, %struct.op** %retval, align 8
  br label %return

if.end59:                                         ; preds = %sw.bb53
  br label %sw.epilog106

sw.bb60:                                          ; preds = %if.end21
  %16 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and61 = and i32 %16, 61440
  %cmp62 = icmp eq i32 %and61, 24576
  br i1 %cmp62, label %if.then64, label %if.end66

if.then64:                                        ; preds = %sw.bb60
  %call65 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call65, %struct.op** %retval, align 8
  br label %return

if.end66:                                         ; preds = %sw.bb60
  br label %sw.epilog106

sw.bb67:                                          ; preds = %if.end21
  %17 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and68 = and i32 %17, 61440
  %cmp69 = icmp eq i32 %and68, 32768
  br i1 %cmp69, label %if.then71, label %if.end73

if.then71:                                        ; preds = %sw.bb67
  %call72 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call72, %struct.op** %retval, align 8
  br label %return

if.end73:                                         ; preds = %sw.bb67
  br label %sw.epilog106

sw.bb74:                                          ; preds = %if.end21
  %18 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and75 = and i32 %18, 61440
  %cmp76 = icmp eq i32 %and75, 16384
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %sw.bb74
  %call79 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call79, %struct.op** %retval, align 8
  br label %return

if.end80:                                         ; preds = %sw.bb74
  br label %sw.epilog106

sw.bb81:                                          ; preds = %if.end21
  %19 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and82 = and i32 %19, 61440
  %cmp83 = icmp eq i32 %and82, 4096
  br i1 %cmp83, label %if.then85, label %if.end87

if.then85:                                        ; preds = %sw.bb81
  %call86 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call86, %struct.op** %retval, align 8
  br label %return

if.end87:                                         ; preds = %sw.bb81
  br label %sw.epilog106

sw.bb88:                                          ; preds = %if.end21
  %20 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and89 = and i32 %20, 2048
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.then91, label %if.end93

if.then91:                                        ; preds = %sw.bb88
  %call92 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call92, %struct.op** %retval, align 8
  br label %return

if.end93:                                         ; preds = %sw.bb88
  br label %sw.epilog106

sw.bb94:                                          ; preds = %if.end21
  %21 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and95 = and i32 %21, 1024
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %if.then97, label %if.end99

if.then97:                                        ; preds = %sw.bb94
  %call98 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call98, %struct.op** %retval, align 8
  br label %return

if.end99:                                         ; preds = %sw.bb94
  br label %sw.epilog106

sw.bb100:                                         ; preds = %if.end21
  %22 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and101 = and i32 %22, 512
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %if.then103, label %if.end105

if.then103:                                       ; preds = %sw.bb100
  %call104 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call104, %struct.op** %retval, align 8
  br label %return

if.end105:                                        ; preds = %sw.bb100
  br label %sw.epilog106

sw.epilog106:                                     ; preds = %if.end21, %if.end105, %if.end99, %if.end93, %if.end87, %if.end80, %if.end73, %if.end66, %if.end59, %if.end52, %if.end45, %if.end39, %if.end32
  %call107 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call107, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog106, %if.then103, %if.then97, %if.then91, %if.then85, %if.then78, %if.then71, %if.then64, %if.then57, %if.then50, %if.then43, %if.then37, %if.then30, %if.then19, %if.then15
  %23 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %23
}

; Function Attrs: nounwind
declare dso_local i32 @getuid() #6

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ftlink() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %result = alloca i32, align 4
  %next = alloca %struct.op*, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %1 = load %struct.sv*, %struct.sv** %0, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %do.body
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and1 = and i32 %conv, 4
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end5

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.op* @S_try_amagic_ftest(i8 signext 108)
  store %struct.op* %call, %struct.op** %next, align 8
  %5 = load %struct.op*, %struct.op** %next, align 8
  %tobool3 = icmp ne %struct.op* %5, null
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %6 = load %struct.op*, %struct.op** %next, align 8
  store %struct.op* %6, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end5
  %call6 = call i32 @Perl_my_lstat_flags(i32 0)
  store i32 %call6, i32* %result, align 4
  %7 = load i32, i32* %result, align 4
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %do.end
  %call9 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call9, %struct.op** %retval, align 8
  br label %return

if.end10:                                         ; preds = %do.end
  %8 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and11 = and i32 %8, 61440
  %cmp12 = icmp eq i32 %and11, 40960
  br i1 %cmp12, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end10
  %call15 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call15, %struct.op** %retval, align 8
  br label %return

if.end16:                                         ; preds = %if.end10
  %call17 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call17, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end16, %if.then14, %if.then8, %if.then4
  %9 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %9
}

declare dso_local i32 @Perl_my_lstat_flags(i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_fttty() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %fd = alloca i32, align 4
  %gv = alloca %struct.gv*, align 8
  %name = alloca i8*, align 8
  %namelen = alloca i64, align 8
  %uv = alloca i64, align 8
  %next = alloca %struct.op*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  store i8* null, i8** %name, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %1 = load %struct.sv*, %struct.sv** %0, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %do.body
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and1 = and i32 %conv, 4
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end5

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.op* @S_try_amagic_ftest(i8 signext 116)
  store %struct.op* %call, %struct.op** %next, align 8
  %5 = load %struct.op*, %struct.op** %next, align 8
  %tobool3 = icmp ne %struct.op* %5, null
  br i1 %tobool3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %6 = load %struct.op*, %struct.op** %next, align 8
  store %struct.op* %6, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end5
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags6 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags6, align 2
  %conv7 = zext i8 %8 to i32
  %and8 = and i32 %conv7, 16
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %do.end
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %10 = bitcast %struct.op* %9 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %10, i32 0, i32 7
  %11 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %12 = bitcast %struct.sv* %11 to %struct.gv*
  store %struct.gv* %12, %struct.gv** %gv, align 8
  br label %if.end86

if.else:                                          ; preds = %do.end
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %tmpsv, align 8
  %15 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %16, 49152
  %cmp = icmp eq i32 %and12, 32768
  br i1 %cmp, label %land.lhs.true14, label %cond.false

land.lhs.true14:                                  ; preds = %if.else
  %17 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %18, 255
  %cmp17 = icmp eq i32 %and16, 9
  br i1 %cmp17, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %19 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %20, 255
  %cmp21 = icmp eq i32 %and20, 10
  br i1 %cmp21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %land.lhs.true14
  %21 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %22 = bitcast %struct.sv* %21 to %struct.gv*
  br label %cond.end68

cond.false:                                       ; preds = %lor.lhs.false, %if.else
  %23 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %24, 2048
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %land.lhs.true26, label %cond.false67

land.lhs.true26:                                  ; preds = %cond.false
  %25 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %26 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %27, 255
  %cmp29 = icmp ule i32 %and28, 10
  br i1 %cmp29, label %land.lhs.true31, label %cond.false67

land.lhs.true31:                                  ; preds = %land.lhs.true26
  %28 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u32 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 3
  %svu_rv33 = bitcast %union.anon* %sv_u32 to %struct.sv**
  %29 = load %struct.sv*, %struct.sv** %svu_rv33, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %30, 2097152
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %land.lhs.true31
  br i1 true, label %land.rhs, label %land.end

cond.false38:                                     ; preds = %land.lhs.true31
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false38, %cond.true37
  %31 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 3
  %svu_rv40 = bitcast %union.anon* %sv_u39 to %struct.sv**
  %32 = load %struct.sv*, %struct.sv** %svu_rv40, align 8
  %call41 = call i32 @Perl_mg_get(%struct.sv* %32)
  %tobool42 = icmp ne i32 %call41, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false38, %cond.true37
  %33 = phi i1 [ false, %cond.false38 ], [ false, %cond.true37 ], [ %tobool42, %land.rhs ]
  %land.ext = zext i1 %33 to i32
  %34 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_rv44 = bitcast %union.anon* %sv_u43 to %struct.sv**
  %35 = load %struct.sv*, %struct.sv** %svu_rv44, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %36, 49152
  %cmp47 = icmp eq i32 %and46, 32768
  br i1 %cmp47, label %land.rhs49, label %land.end62

land.rhs49:                                       ; preds = %land.end
  %37 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u50 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_rv51 = bitcast %union.anon* %sv_u50 to %struct.sv**
  %38 = load %struct.sv*, %struct.sv** %svu_rv51, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %39, 255
  %cmp54 = icmp eq i32 %and53, 9
  br i1 %cmp54, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs49
  %40 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u56 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 3
  %svu_rv57 = bitcast %union.anon* %sv_u56 to %struct.sv**
  %41 = load %struct.sv*, %struct.sv** %svu_rv57, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %42, 255
  %cmp60 = icmp eq i32 %and59, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs49
  %43 = phi i1 [ true, %land.rhs49 ], [ %cmp60, %lor.rhs ]
  br label %land.end62

land.end62:                                       ; preds = %lor.end, %land.end
  %44 = phi i1 [ false, %land.end ], [ %43, %lor.end ]
  br i1 %44, label %cond.true64, label %cond.false67

cond.true64:                                      ; preds = %land.end62
  %45 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u65 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_rv66 = bitcast %union.anon* %sv_u65 to %struct.sv**
  %46 = load %struct.sv*, %struct.sv** %svu_rv66, align 8
  %47 = bitcast %struct.sv* %46 to %struct.gv*
  br label %cond.end

cond.false67:                                     ; preds = %land.end62, %land.lhs.true26, %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false67, %cond.true64
  %cond = phi %struct.gv* [ %47, %cond.true64 ], [ null, %cond.false67 ]
  br label %cond.end68

cond.end68:                                       ; preds = %cond.end, %cond.true
  %cond69 = phi %struct.gv* [ %22, %cond.true ], [ %cond, %cond.end ]
  store %struct.gv* %cond69, %struct.gv** %gv, align 8
  %tobool70 = icmp ne %struct.gv* %cond69, null
  br i1 %tobool70, label %if.end85, label %if.then71

if.then71:                                        ; preds = %cond.end68
  %48 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags72 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %49, 2098176
  %cmp74 = icmp eq i32 %and73, 1024
  br i1 %cmp74, label %cond.true76, label %cond.false78

cond.true76:                                      ; preds = %if.then71
  %50 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any, align 8
  %52 = bitcast i8* %51 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %52, i32 0, i32 2
  %53 = load i64, i64* %xpv_cur, align 8
  store i64 %53, i64* %namelen, align 8
  %54 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_u77 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u77 to i8**
  %55 = load i8*, i8** %svu_pv, align 8
  br label %cond.end80

cond.false78:                                     ; preds = %if.then71
  %56 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call79 = call i8* @Perl_sv_2pv_flags(%struct.sv* %56, i64* %namelen, i32 0)
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false78, %cond.true76
  %cond81 = phi i8* [ %55, %cond.true76 ], [ %call79, %cond.false78 ]
  store i8* %cond81, i8** %name, align 8
  %57 = load i8*, i8** %name, align 8
  %58 = load i64, i64* %namelen, align 8
  %59 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %60, 536870912
  %call84 = call %struct.gv* @Perl_gv_fetchpvn_flags(i8* %57, i64 %58, i32 %and83, i32 15)
  store %struct.gv* %call84, %struct.gv** %gv, align 8
  br label %if.end85

if.end85:                                         ; preds = %cond.end80, %cond.end68
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then10
  %61 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool87 = icmp ne %struct.gv* %61, null
  br i1 %tobool87, label %land.lhs.true88, label %cond.false106

land.lhs.true88:                                  ; preds = %if.end86
  %62 = load %struct.gv*, %struct.gv** %gv, align 8
  %63 = bitcast %struct.gv* %62 to %struct.sv*
  %sv_flags89 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %64, 255
  %cmp91 = icmp eq i32 %and90, 9
  br i1 %cmp91, label %land.lhs.true98, label %lor.lhs.false93

lor.lhs.false93:                                  ; preds = %land.lhs.true88
  %65 = load %struct.gv*, %struct.gv** %gv, align 8
  %66 = bitcast %struct.gv* %65 to %struct.sv*
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %67, 255
  %cmp96 = icmp eq i32 %and95, 10
  br i1 %cmp96, label %land.lhs.true98, label %cond.false106

land.lhs.true98:                                  ; preds = %lor.lhs.false93, %land.lhs.true88
  %68 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u99 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u99 to %struct.gp**
  %69 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %69, i64 0
  %tobool100 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool100, label %cond.true101, label %cond.false106

cond.true101:                                     ; preds = %land.lhs.true98
  %70 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u102 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 3
  %svu_gp103 = bitcast %union.anon.4* %sv_u102 to %struct.gp**
  %71 = load %struct.gp*, %struct.gp** %svu_gp103, align 8
  %add.ptr104 = getelementptr inbounds %struct.gp, %struct.gp* %71, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr104, i32 0, i32 1
  %72 = load %struct.io*, %struct.io** %gp_io, align 8
  %tobool105 = icmp ne %struct.io* %72, null
  br i1 %tobool105, label %land.lhs.true107, label %if.else122

cond.false106:                                    ; preds = %land.lhs.true98, %lor.lhs.false93, %if.end86
  br i1 false, label %land.lhs.true107, label %if.else122

land.lhs.true107:                                 ; preds = %cond.false106, %cond.true101
  %73 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u108 = getelementptr inbounds %struct.gv, %struct.gv* %73, i32 0, i32 3
  %svu_gp109 = bitcast %union.anon.4* %sv_u108 to %struct.gp**
  %74 = load %struct.gp*, %struct.gp** %svu_gp109, align 8
  %add.ptr110 = getelementptr inbounds %struct.gp, %struct.gp* %74, i64 0
  %gp_io111 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr110, i32 0, i32 1
  %75 = load %struct.io*, %struct.io** %gp_io111, align 8
  %sv_u112 = getelementptr inbounds %struct.io, %struct.io* %75, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u112 to %struct._PerlIO***
  %76 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool113 = icmp ne %struct._PerlIO** %76, null
  br i1 %tobool113, label %if.then114, label %if.else122

if.then114:                                       ; preds = %land.lhs.true107
  %77 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u115 = getelementptr inbounds %struct.gv, %struct.gv* %77, i32 0, i32 3
  %svu_gp116 = bitcast %union.anon.4* %sv_u115 to %struct.gp**
  %78 = load %struct.gp*, %struct.gp** %svu_gp116, align 8
  %add.ptr117 = getelementptr inbounds %struct.gp, %struct.gp* %78, i64 0
  %gp_io118 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr117, i32 0, i32 1
  %79 = load %struct.io*, %struct.io** %gp_io118, align 8
  %sv_u119 = getelementptr inbounds %struct.io, %struct.io* %79, i32 0, i32 3
  %svu_fp120 = bitcast %union.anon.2* %sv_u119 to %struct._PerlIO***
  %80 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp120, align 8
  %call121 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %80)
  store i32 %call121, i32* %fd, align 4
  br label %if.end140

if.else122:                                       ; preds = %land.lhs.true107, %cond.false106, %cond.true101
  %81 = load i8*, i8** %name, align 8
  %tobool123 = icmp ne i8* %81, null
  br i1 %tobool123, label %land.lhs.true124, label %if.else137

land.lhs.true124:                                 ; preds = %if.else122
  %82 = load i8*, i8** %name, align 8
  %83 = load i8, i8* %82, align 1
  %idxprom = zext i8 %83 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %84 = load i32, i32* %arrayidx, align 4
  %and125 = and i32 %84, 2
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %cond.true127, label %cond.false128

cond.true127:                                     ; preds = %land.lhs.true124
  br i1 true, label %land.lhs.true129, label %if.else137

cond.false128:                                    ; preds = %land.lhs.true124
  br i1 false, label %land.lhs.true129, label %if.else137

land.lhs.true129:                                 ; preds = %cond.false128, %cond.true127
  %85 = load i8*, i8** %name, align 8
  %call130 = call zeroext i1 @Perl_grok_atoUV(i8* %85, i64* %uv, i8** null)
  br i1 %call130, label %land.lhs.true132, label %if.else137

land.lhs.true132:                                 ; preds = %land.lhs.true129
  %86 = load i64, i64* %uv, align 8
  %cmp133 = icmp ule i64 %86, 2147483647
  br i1 %cmp133, label %if.then135, label %if.else137

if.then135:                                       ; preds = %land.lhs.true132
  %87 = load i64, i64* %uv, align 8
  %conv136 = trunc i64 %87 to i32
  store i32 %conv136, i32* %fd, align 4
  br label %if.end139

if.else137:                                       ; preds = %land.lhs.true132, %land.lhs.true129, %cond.false128, %cond.true127, %if.else122
  %call138 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call138, %struct.op** %retval, align 8
  br label %return

if.end139:                                        ; preds = %if.then135
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.then114
  %88 = load i32, i32* %fd, align 4
  %cmp141 = icmp slt i32 %88, 0
  br i1 %cmp141, label %if.then143, label %if.end146

if.then143:                                       ; preds = %if.end140
  %call144 = call i32* @__errno_location() #9
  store i32 9, i32* %call144, align 4
  %call145 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call145, %struct.op** %retval, align 8
  br label %return

if.end146:                                        ; preds = %if.end140
  %89 = load i32, i32* %fd, align 4
  %call147 = call i32 @isatty(i32 %89) #3
  %tobool148 = icmp ne i32 %call147, 0
  br i1 %tobool148, label %if.then149, label %if.end151

if.then149:                                       ; preds = %if.end146
  %call150 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call150, %struct.op** %retval, align 8
  br label %return

if.end151:                                        ; preds = %if.end146
  %call152 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call152, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end151, %if.then149, %if.then143, %if.else137, %if.then4
  %90 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %90
}

declare dso_local zeroext i1 @Perl_grok_atoUV(i8*, i64*, i8**) #1

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_fttext() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %odd = alloca i32, align 4
  %tbuf = alloca [512 x i8], align 16
  %s = alloca i8*, align 8
  %io = alloca %struct.io*, align 8
  %sv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %fp = alloca %struct._PerlIO**, align 8
  %next = alloca %struct.op*, align 8
  %fd = alloca i32, align 4
  %file = alloca i8*, align 8
  %fd223 = alloca i32, align 4
  %ep = alloca i8*, align 8
  store i32 0, i32* %odd, align 4
  store %struct.sv* null, %struct.sv** %sv, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %1 = load %struct.sv*, %struct.sv** %0, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %do.body
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and1 = and i32 %conv, 4
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 291
  %6 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 84, i32 66
  %conv4 = trunc i32 %cond to i8
  %call = call %struct.op* @S_try_amagic_ftest(i8 signext %conv4)
  store %struct.op* %call, %struct.op** %next, align 8
  %7 = load %struct.op*, %struct.op** %next, align 8
  %tobool5 = icmp ne %struct.op* %7, null
  br i1 %tobool5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  %8 = load %struct.op*, %struct.op** %next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end7

if.end7:                                          ; preds = %if.end, %land.lhs.true, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end7
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags8, align 2
  %conv9 = zext i8 %10 to i32
  %and10 = and i32 %conv9, 16
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %do.end
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %12 = bitcast %struct.op* %11 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %12, i32 0, i32 7
  %13 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %14 = bitcast %struct.sv* %13 to %struct.gv*
  store %struct.gv* %14, %struct.gv** %gv, align 8
  br label %if.end81

if.else:                                          ; preds = %do.end
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private, align 1
  %conv13 = zext i8 %16 to i32
  %and14 = and i32 %conv13, 20
  %cmp15 = icmp eq i32 %and14, 4
  br i1 %cmp15, label %if.then17, label %if.else18

if.then17:                                        ; preds = %if.else
  %17 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  store %struct.gv* %17, %struct.gv** %gv, align 8
  br label %if.end80

if.else18:                                        ; preds = %if.else
  %18 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %19 = load %struct.sv*, %struct.sv** %18, align 8
  store %struct.sv* %19, %struct.sv** %sv, align 8
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %21, 49152
  %cmp21 = icmp eq i32 %and20, 32768
  br i1 %cmp21, label %land.lhs.true23, label %cond.false

land.lhs.true23:                                  ; preds = %if.else18
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %23, 255
  %cmp26 = icmp eq i32 %and25, 9
  br i1 %cmp26, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true23
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %25, 255
  %cmp30 = icmp eq i32 %and29, 10
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %land.lhs.true23
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %27 = bitcast %struct.sv* %26 to %struct.gv*
  br label %cond.end78

cond.false:                                       ; preds = %lor.lhs.false, %if.else18
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %29, 2048
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %land.lhs.true35, label %cond.false76

land.lhs.true35:                                  ; preds = %cond.false
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %31 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %32, 255
  %cmp38 = icmp ule i32 %and37, 10
  br i1 %cmp38, label %land.lhs.true40, label %cond.false76

land.lhs.true40:                                  ; preds = %land.lhs.true35
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u41 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_rv42 = bitcast %union.anon* %sv_u41 to %struct.sv**
  %34 = load %struct.sv*, %struct.sv** %svu_rv42, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %35, 2097152
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true46, label %cond.false47

cond.true46:                                      ; preds = %land.lhs.true40
  br i1 true, label %land.rhs, label %land.end

cond.false47:                                     ; preds = %land.lhs.true40
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false47, %cond.true46
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u48 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_rv49 = bitcast %union.anon* %sv_u48 to %struct.sv**
  %37 = load %struct.sv*, %struct.sv** %svu_rv49, align 8
  %call50 = call i32 @Perl_mg_get(%struct.sv* %37)
  %tobool51 = icmp ne i32 %call50, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false47, %cond.true46
  %38 = phi i1 [ false, %cond.false47 ], [ false, %cond.true46 ], [ %tobool51, %land.rhs ]
  %land.ext = zext i1 %38 to i32
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u52 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 3
  %svu_rv53 = bitcast %union.anon* %sv_u52 to %struct.sv**
  %40 = load %struct.sv*, %struct.sv** %svu_rv53, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %41, 49152
  %cmp56 = icmp eq i32 %and55, 32768
  br i1 %cmp56, label %land.rhs58, label %land.end71

land.rhs58:                                       ; preds = %land.end
  %42 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u59 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 3
  %svu_rv60 = bitcast %union.anon* %sv_u59 to %struct.sv**
  %43 = load %struct.sv*, %struct.sv** %svu_rv60, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %44, 255
  %cmp63 = icmp eq i32 %and62, 9
  br i1 %cmp63, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs58
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u65 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_rv66 = bitcast %union.anon* %sv_u65 to %struct.sv**
  %46 = load %struct.sv*, %struct.sv** %svu_rv66, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %47, 255
  %cmp69 = icmp eq i32 %and68, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs58
  %48 = phi i1 [ true, %land.rhs58 ], [ %cmp69, %lor.rhs ]
  br label %land.end71

land.end71:                                       ; preds = %lor.end, %land.end
  %49 = phi i1 [ false, %land.end ], [ %48, %lor.end ]
  br i1 %49, label %cond.true73, label %cond.false76

cond.true73:                                      ; preds = %land.end71
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u74 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 3
  %svu_rv75 = bitcast %union.anon* %sv_u74 to %struct.sv**
  %51 = load %struct.sv*, %struct.sv** %svu_rv75, align 8
  %52 = bitcast %struct.sv* %51 to %struct.gv*
  br label %cond.end

cond.false76:                                     ; preds = %land.end71, %land.lhs.true35, %cond.false
  br label %cond.end

cond.end:                                         ; preds = %cond.false76, %cond.true73
  %cond77 = phi %struct.gv* [ %52, %cond.true73 ], [ null, %cond.false76 ]
  br label %cond.end78

cond.end78:                                       ; preds = %cond.end, %cond.true
  %cond79 = phi %struct.gv* [ %27, %cond.true ], [ %cond77, %cond.end ]
  store %struct.gv* %cond79, %struct.gv** %gv, align 8
  br label %if.end80

if.end80:                                         ; preds = %cond.end78, %if.then17
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then12
  %53 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool82 = icmp ne %struct.gv* %53, null
  br i1 %tobool82, label %if.then83, label %if.else222

if.then83:                                        ; preds = %if.end81
  %54 = load %struct.gv*, %struct.gv** %gv, align 8
  %55 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %cmp84 = icmp eq %struct.gv* %54, %55
  br i1 %cmp84, label %if.then86, label %if.else120

if.then86:                                        ; preds = %if.then83
  %56 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %tobool87 = icmp ne %struct.gv* %56, null
  br i1 %tobool87, label %if.then88, label %if.else118

if.then88:                                        ; preds = %if.then86
  %57 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %sv_flags89 = getelementptr inbounds %struct.gv, %struct.gv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %58, 255
  %cmp91 = icmp eq i32 %and90, 15
  br i1 %cmp91, label %cond.true93, label %cond.false94

cond.true93:                                      ; preds = %if.then88
  %59 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %60 = bitcast %struct.gv* %59 to %struct.io*
  br label %cond.end116

cond.false94:                                     ; preds = %if.then88
  %61 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %tobool95 = icmp ne %struct.gv* %61, null
  br i1 %tobool95, label %land.lhs.true96, label %cond.false113

land.lhs.true96:                                  ; preds = %cond.false94
  %62 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %63 = bitcast %struct.gv* %62 to %struct.sv*
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %64, 255
  %cmp99 = icmp eq i32 %and98, 9
  br i1 %cmp99, label %land.lhs.true106, label %lor.lhs.false101

lor.lhs.false101:                                 ; preds = %land.lhs.true96
  %65 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %66 = bitcast %struct.gv* %65 to %struct.sv*
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %67, 255
  %cmp104 = icmp eq i32 %and103, 10
  br i1 %cmp104, label %land.lhs.true106, label %cond.false113

land.lhs.true106:                                 ; preds = %lor.lhs.false101, %land.lhs.true96
  %68 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %sv_u107 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u107 to %struct.gp**
  %69 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %69, i64 0
  %tobool108 = icmp ne %struct.gp* %add.ptr, null
  br i1 %tobool108, label %cond.true109, label %cond.false113

cond.true109:                                     ; preds = %land.lhs.true106
  %70 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %sv_u110 = getelementptr inbounds %struct.gv, %struct.gv* %70, i32 0, i32 3
  %svu_gp111 = bitcast %union.anon.4* %sv_u110 to %struct.gp**
  %71 = load %struct.gp*, %struct.gp** %svu_gp111, align 8
  %add.ptr112 = getelementptr inbounds %struct.gp, %struct.gp* %71, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr112, i32 0, i32 1
  %72 = load %struct.io*, %struct.io** %gp_io, align 8
  br label %cond.end114

cond.false113:                                    ; preds = %land.lhs.true106, %lor.lhs.false101, %cond.false94
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false113, %cond.true109
  %cond115 = phi %struct.io* [ %72, %cond.true109 ], [ null, %cond.false113 ]
  br label %cond.end116

cond.end116:                                      ; preds = %cond.end114, %cond.true93
  %cond117 = phi %struct.io* [ %60, %cond.true93 ], [ %cond115, %cond.end114 ]
  store %struct.io* %cond117, %struct.io** %io, align 8
  br label %if.end119

if.else118:                                       ; preds = %if.then86
  br label %really_filename

if.end119:                                        ; preds = %cond.end116
  br label %if.end145

if.else120:                                       ; preds = %if.then83
  %73 = load %struct.gv*, %struct.gv** %gv, align 8
  store %struct.gv* %73, %struct.gv** @PL_statgv, align 8
  %74 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  call void @Perl_sv_setpvn(%struct.sv* %74, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 0)
  %75 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %tobool121 = icmp ne %struct.gv* %75, null
  br i1 %tobool121, label %land.lhs.true122, label %cond.false142

land.lhs.true122:                                 ; preds = %if.else120
  %76 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %77 = bitcast %struct.gv* %76 to %struct.sv*
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %78, 255
  %cmp125 = icmp eq i32 %and124, 9
  br i1 %cmp125, label %land.lhs.true132, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %land.lhs.true122
  %79 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %80 = bitcast %struct.gv* %79 to %struct.sv*
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %81, 255
  %cmp130 = icmp eq i32 %and129, 10
  br i1 %cmp130, label %land.lhs.true132, label %cond.false142

land.lhs.true132:                                 ; preds = %lor.lhs.false127, %land.lhs.true122
  %82 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %sv_u133 = getelementptr inbounds %struct.gv, %struct.gv* %82, i32 0, i32 3
  %svu_gp134 = bitcast %union.anon.4* %sv_u133 to %struct.gp**
  %83 = load %struct.gp*, %struct.gp** %svu_gp134, align 8
  %add.ptr135 = getelementptr inbounds %struct.gp, %struct.gp* %83, i64 0
  %tobool136 = icmp ne %struct.gp* %add.ptr135, null
  br i1 %tobool136, label %cond.true137, label %cond.false142

cond.true137:                                     ; preds = %land.lhs.true132
  %84 = load %struct.gv*, %struct.gv** @PL_statgv, align 8
  %sv_u138 = getelementptr inbounds %struct.gv, %struct.gv* %84, i32 0, i32 3
  %svu_gp139 = bitcast %union.anon.4* %sv_u138 to %struct.gp**
  %85 = load %struct.gp*, %struct.gp** %svu_gp139, align 8
  %add.ptr140 = getelementptr inbounds %struct.gp, %struct.gp* %85, i64 0
  %gp_io141 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr140, i32 0, i32 1
  %86 = load %struct.io*, %struct.io** %gp_io141, align 8
  br label %cond.end143

cond.false142:                                    ; preds = %land.lhs.true132, %lor.lhs.false127, %if.else120
  br label %cond.end143

cond.end143:                                      ; preds = %cond.false142, %cond.true137
  %cond144 = phi %struct.io* [ %86, %cond.true137 ], [ null, %cond.false142 ]
  store %struct.io* %cond144, %struct.io** %io, align 8
  br label %if.end145

if.end145:                                        ; preds = %cond.end143, %if.end119
  store i32 -1, i32* @PL_laststatval, align 4
  store i16 265, i16* @PL_laststype, align 2
  %87 = load %struct.io*, %struct.io** %io, align 8
  %tobool146 = icmp ne %struct.io* %87, null
  br i1 %tobool146, label %land.lhs.true147, label %if.else217

land.lhs.true147:                                 ; preds = %if.end145
  %88 = load %struct.io*, %struct.io** %io, align 8
  %sv_u148 = getelementptr inbounds %struct.io, %struct.io* %88, i32 0, i32 3
  %svu_fp = bitcast %union.anon.2* %sv_u148 to %struct._PerlIO***
  %89 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp, align 8
  %tobool149 = icmp ne %struct._PerlIO** %89, null
  br i1 %tobool149, label %if.then150, label %if.else217

if.then150:                                       ; preds = %land.lhs.true147
  %90 = load %struct.io*, %struct.io** %io, align 8
  %sv_u151 = getelementptr inbounds %struct.io, %struct.io* %90, i32 0, i32 3
  %svu_fp152 = bitcast %union.anon.2* %sv_u151 to %struct._PerlIO***
  %91 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp152, align 8
  %call153 = call i32 @PerlIO_has_base(%struct._PerlIO** %91)
  %tobool154 = icmp ne i32 %call153, 0
  br i1 %tobool154, label %if.end157, label %if.then155

if.then155:                                       ; preds = %if.then150
  %call156 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.60, i64 0, i64 0))
  store %struct.op* %call156, %struct.op** %retval, align 8
  br label %return

if.end157:                                        ; preds = %if.then150
  %92 = load %struct.io*, %struct.io** %io, align 8
  %sv_u158 = getelementptr inbounds %struct.io, %struct.io* %92, i32 0, i32 3
  %svu_fp159 = bitcast %union.anon.2* %sv_u158 to %struct._PerlIO***
  %93 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp159, align 8
  %call160 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %93)
  store i32 %call160, i32* %fd, align 4
  %94 = load i32, i32* %fd, align 4
  %cmp161 = icmp slt i32 %94, 0
  br i1 %cmp161, label %if.then163, label %if.end166

if.then163:                                       ; preds = %if.end157
  %call164 = call i32* @__errno_location() #9
  store i32 9, i32* %call164, align 4
  %call165 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call165, %struct.op** %retval, align 8
  br label %return

if.end166:                                        ; preds = %if.end157
  %95 = load i32, i32* %fd, align 4
  %call167 = call i32 @fstat64(i32 %95, %struct.stat* @PL_statcache) #3
  store i32 %call167, i32* @PL_laststatval, align 4
  %96 = load i32, i32* @PL_laststatval, align 4
  %cmp168 = icmp slt i32 %96, 0
  br i1 %cmp168, label %if.then170, label %if.end172

if.then170:                                       ; preds = %if.end166
  %call171 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call171, %struct.op** %retval, align 8
  br label %return

if.end172:                                        ; preds = %if.end166
  %97 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and173 = and i32 %97, 61440
  %cmp174 = icmp eq i32 %and173, 16384
  br i1 %cmp174, label %if.then176, label %if.end187

if.then176:                                       ; preds = %if.end172
  %98 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type177 = getelementptr inbounds %struct.op, %struct.op* %98, i32 0, i32 4
  %bf.load178 = load i16, i16* %op_type177, align 8
  %bf.clear179 = and i16 %bf.load178, 511
  %bf.cast180 = zext i16 %bf.clear179 to i32
  %cmp181 = icmp eq i32 %bf.cast180, 291
  br i1 %cmp181, label %if.then183, label %if.else185

if.then183:                                       ; preds = %if.then176
  %call184 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call184, %struct.op** %retval, align 8
  br label %return

if.else185:                                       ; preds = %if.then176
  %call186 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call186, %struct.op** %retval, align 8
  br label %return

if.end187:                                        ; preds = %if.end172
  %99 = load %struct.io*, %struct.io** %io, align 8
  %sv_u188 = getelementptr inbounds %struct.io, %struct.io* %99, i32 0, i32 3
  %svu_fp189 = bitcast %union.anon.2* %sv_u188 to %struct._PerlIO***
  %100 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp189, align 8
  %call190 = call i64 @Perl_PerlIO_get_cnt(%struct._PerlIO** %100)
  %cmp191 = icmp sle i64 %call190, 0
  br i1 %cmp191, label %if.then193, label %if.end206

if.then193:                                       ; preds = %if.end187
  %101 = load %struct.io*, %struct.io** %io, align 8
  %sv_u194 = getelementptr inbounds %struct.io, %struct.io* %101, i32 0, i32 3
  %svu_fp195 = bitcast %union.anon.2* %sv_u194 to %struct._PerlIO***
  %102 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp195, align 8
  %call196 = call i32 @PerlIO_getc(%struct._PerlIO** %102)
  store i32 %call196, i32* %i, align 4
  %103 = load i32, i32* %i, align 4
  %cmp197 = icmp ne i32 %103, -1
  br i1 %cmp197, label %if.then199, label %if.else203

if.then199:                                       ; preds = %if.then193
  %104 = load %struct.io*, %struct.io** %io, align 8
  %sv_u200 = getelementptr inbounds %struct.io, %struct.io* %104, i32 0, i32 3
  %svu_fp201 = bitcast %union.anon.2* %sv_u200 to %struct._PerlIO***
  %105 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp201, align 8
  %106 = load i32, i32* %i, align 4
  %call202 = call i32 @PerlIO_ungetc(%struct._PerlIO** %105, i32 %106)
  br label %if.end205

if.else203:                                       ; preds = %if.then193
  %call204 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call204, %struct.op** %retval, align 8
  br label %return

if.end205:                                        ; preds = %if.then199
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.end187
  %107 = load %struct.io*, %struct.io** %io, align 8
  %sv_u207 = getelementptr inbounds %struct.io, %struct.io* %107, i32 0, i32 3
  %svu_fp208 = bitcast %union.anon.2* %sv_u207 to %struct._PerlIO***
  %108 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp208, align 8
  %call209 = call i64 @Perl_PerlIO_get_bufsiz(%struct._PerlIO** %108)
  store i64 %call209, i64* %len, align 8
  %109 = load %struct.io*, %struct.io** %io, align 8
  %sv_u210 = getelementptr inbounds %struct.io, %struct.io* %109, i32 0, i32 3
  %svu_fp211 = bitcast %union.anon.2* %sv_u210 to %struct._PerlIO***
  %110 = load %struct._PerlIO**, %struct._PerlIO*** %svu_fp211, align 8
  %call212 = call i8* @Perl_PerlIO_get_base(%struct._PerlIO** %110)
  store i8* %call212, i8** %s, align 8
  %111 = load i64, i64* %len, align 8
  %cmp213 = icmp sgt i64 %111, 512
  br i1 %cmp213, label %if.then215, label %if.end216

if.then215:                                       ; preds = %if.end206
  store i64 512, i64* %len, align 8
  br label %if.end216

if.end216:                                        ; preds = %if.then215, %if.end206
  br label %if.end221

if.else217:                                       ; preds = %land.lhs.true147, %if.end145
  %call218 = call i32* @__errno_location() #9
  store i32 9, i32* %call218, align 4
  %112 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_report_evil_fh(%struct.gv* %112)
  %call219 = call i32* @__errno_location() #9
  store i32 9, i32* %call219, align 4
  %call220 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call220, %struct.op** %retval, align 8
  br label %return

if.end221:                                        ; preds = %if.end216
  br label %if.end291

if.else222:                                       ; preds = %if.end81
  %113 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %114 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %115, 2098176
  %cmp226 = icmp eq i32 %and225, 1024
  br i1 %cmp226, label %cond.true228, label %cond.false231

cond.true228:                                     ; preds = %if.else222
  %116 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u229 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u229 to i8**
  %117 = load i8*, i8** %svu_pv, align 8
  %add.ptr230 = getelementptr inbounds i8, i8* %117, i64 0
  br label %cond.end233

cond.false231:                                    ; preds = %if.else222
  %118 = load %struct.sv*, %struct.sv** %sv, align 8
  %call232 = call i8* @Perl_sv_2pv_flags(%struct.sv* %118, i64* null, i32 32)
  br label %cond.end233

cond.end233:                                      ; preds = %cond.false231, %cond.true228
  %cond234 = phi i8* [ %add.ptr230, %cond.true228 ], [ %call232, %cond.false231 ]
  call void @Perl_sv_setpv(%struct.sv* %113, i8* %cond234)
  br label %really_filename

really_filename:                                  ; preds = %cond.end233, %if.else118
  %119 = load %struct.sv*, %struct.sv** @PL_statname, align 8
  %sv_u235 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 3
  %svu_pv236 = bitcast %union.anon* %sv_u235 to i8**
  %120 = load i8*, i8** %svu_pv236, align 8
  %add.ptr237 = getelementptr inbounds i8, i8* %120, i64 0
  store i8* %add.ptr237, i8** %file, align 8
  store %struct.gv* null, %struct.gv** @PL_statgv, align 8
  %121 = load i8*, i8** %file, align 8
  %call238 = call %struct._PerlIO** @PerlIO_open(i8* %121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store %struct._PerlIO** %call238, %struct._PerlIO*** %fp, align 8
  %tobool239 = icmp ne %struct._PerlIO** %call238, null
  br i1 %tobool239, label %if.end252, label %if.then240

if.then240:                                       ; preds = %really_filename
  %122 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool241 = icmp ne %struct.gv* %122, null
  br i1 %tobool241, label %if.end243, label %if.then242

if.then242:                                       ; preds = %if.then240
  store i32 -1, i32* @PL_laststatval, align 4
  store i16 265, i16* @PL_laststype, align 2
  br label %if.end243

if.end243:                                        ; preds = %if.then242, %if.then240
  %call244 = call zeroext i1 @Perl_ckwarn(i32 9)
  br i1 %call244, label %land.lhs.true246, label %if.end250

land.lhs.true246:                                 ; preds = %if.end243
  %123 = load i8*, i8** %file, align 8
  %call247 = call zeroext i1 @S_should_warn_nl(i8* %123)
  br i1 %call247, label %if.then249, label %if.end250

if.then249:                                       ; preds = %land.lhs.true246
  call void (i32, i8*, ...) @Perl_warner(i32 9, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_warn_nl, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i64 0, i64 0))
  br label %if.end250

if.end250:                                        ; preds = %if.then249, %land.lhs.true246, %if.end243
  %call251 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call251, %struct.op** %retval, align 8
  br label %return

if.end252:                                        ; preds = %really_filename
  store i16 265, i16* @PL_laststype, align 2
  %124 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call253 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %124)
  store i32 %call253, i32* %fd223, align 4
  %125 = load i32, i32* %fd223, align 4
  %cmp254 = icmp slt i32 %125, 0
  br i1 %cmp254, label %if.then256, label %if.end260

if.then256:                                       ; preds = %if.end252
  %126 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call257 = call i32 @Perl_PerlIO_close(%struct._PerlIO** %126)
  %call258 = call i32* @__errno_location() #9
  store i32 9, i32* %call258, align 4
  %call259 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call259, %struct.op** %retval, align 8
  br label %return

if.end260:                                        ; preds = %if.end252
  %127 = load i32, i32* %fd223, align 4
  %call261 = call i32 @fstat64(i32 %127, %struct.stat* @PL_statcache) #3
  store i32 %call261, i32* @PL_laststatval, align 4
  %128 = load i32, i32* @PL_laststatval, align 4
  %cmp262 = icmp slt i32 %128, 0
  br i1 %cmp262, label %if.then264, label %if.end268

if.then264:                                       ; preds = %if.end260
  %129 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call265 = call i32 @Perl_PerlIO_close(%struct._PerlIO** %129)
  %call266 = call i32* @__errno_location() #9
  store i32 9, i32* %call266, align 4
  %call267 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_undef)
  store %struct.op* %call267, %struct.op** %retval, align 8
  br label %return

if.end268:                                        ; preds = %if.end260
  %130 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call269 = call i32 @PerlIO_binmode(%struct._PerlIO** %130, i32 60, i32 0, i8* null)
  %131 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %tbuf, i64 0, i64 0
  %call270 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %131, i8* %arraydecay, i64 512)
  store i64 %call270, i64* %len, align 8
  %132 = load %struct._PerlIO**, %struct._PerlIO*** %fp, align 8
  %call271 = call i32 @Perl_PerlIO_close(%struct._PerlIO** %132)
  %133 = load i64, i64* %len, align 8
  %cmp272 = icmp sle i64 %133, 0
  br i1 %cmp272, label %if.then274, label %if.end289

if.then274:                                       ; preds = %if.end268
  %134 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statcache, i32 0, i32 3), align 8
  %and275 = and i32 %134, 61440
  %cmp276 = icmp eq i32 %and275, 16384
  br i1 %cmp276, label %land.lhs.true278, label %if.end287

land.lhs.true278:                                 ; preds = %if.then274
  %135 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type279 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 4
  %bf.load280 = load i16, i16* %op_type279, align 8
  %bf.clear281 = and i16 %bf.load280, 511
  %bf.cast282 = zext i16 %bf.clear281 to i32
  %cmp283 = icmp eq i32 %bf.cast282, 291
  br i1 %cmp283, label %if.then285, label %if.end287

if.then285:                                       ; preds = %land.lhs.true278
  %call286 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call286, %struct.op** %retval, align 8
  br label %return

if.end287:                                        ; preds = %land.lhs.true278, %if.then274
  %call288 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call288, %struct.op** %retval, align 8
  br label %return

if.end289:                                        ; preds = %if.end268
  %arraydecay290 = getelementptr inbounds [512 x i8], [512 x i8]* %tbuf, i64 0, i64 0
  store i8* %arraydecay290, i8** %s, align 8
  br label %if.end291

if.end291:                                        ; preds = %if.end289, %if.end221
  %136 = load i8*, i8** %s, align 8
  %137 = load i64, i64* %len, align 8
  %call292 = call zeroext i1 @Perl_is_invariant_string(i8* %136, i64 %137)
  br i1 %call292, label %if.end314, label %if.then293

if.then293:                                       ; preds = %if.end291
  %138 = load i8*, i8** %s, align 8
  %139 = load i64, i64* %len, align 8
  %call294 = call zeroext i1 @Perl_is_utf8_string_loclen(i8* %138, i64 %139, i8** %ep, i64* null)
  br i1 %call294, label %if.then302, label %lor.lhs.false296

lor.lhs.false296:                                 ; preds = %if.then293
  %140 = load i8*, i8** %ep, align 8
  %141 = load i8*, i8** %ep, align 8
  %142 = load i8, i8* %141, align 1
  %idxprom = zext i8 %142 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %143 = load i8, i8* %arrayidx, align 1
  %conv297 = zext i8 %143 to i32
  %idx.ext = sext i32 %conv297 to i64
  %add.ptr298 = getelementptr inbounds i8, i8* %140, i64 %idx.ext
  %144 = load i8*, i8** %s, align 8
  %145 = load i64, i64* %len, align 8
  %add.ptr299 = getelementptr inbounds i8, i8* %144, i64 %145
  %cmp300 = icmp ugt i8* %add.ptr298, %add.ptr299
  br i1 %cmp300, label %if.then302, label %if.end313

if.then302:                                       ; preds = %lor.lhs.false296, %if.then293
  %146 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type303 = getelementptr inbounds %struct.op, %struct.op* %146, i32 0, i32 4
  %bf.load304 = load i16, i16* %op_type303, align 8
  %bf.clear305 = and i16 %bf.load304, 511
  %bf.cast306 = zext i16 %bf.clear305 to i32
  %cmp307 = icmp eq i32 %bf.cast306, 291
  br i1 %cmp307, label %if.then309, label %if.else311

if.then309:                                       ; preds = %if.then302
  %call310 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call310, %struct.op** %retval, align 8
  br label %return

if.else311:                                       ; preds = %if.then302
  %call312 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call312, %struct.op** %retval, align 8
  br label %return

if.end313:                                        ; preds = %lor.lhs.false296
  br label %if.end314

if.end314:                                        ; preds = %if.end313, %if.end291
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end314
  %147 = load i32, i32* %i, align 4
  %conv315 = sext i32 %147 to i64
  %148 = load i64, i64* %len, align 8
  %cmp316 = icmp slt i64 %conv315, %148
  br i1 %cmp316, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %149 = load i8*, i8** %s, align 8
  %150 = load i8, i8* %149, align 1
  %tobool318 = icmp ne i8 %150, 0
  br i1 %tobool318, label %if.end322, label %if.then319

if.then319:                                       ; preds = %for.body
  %151 = load i64, i64* %len, align 8
  %152 = load i32, i32* %odd, align 4
  %conv320 = sext i32 %152 to i64
  %add = add nsw i64 %conv320, %151
  %conv321 = trunc i64 %add to i32
  store i32 %conv321, i32* %odd, align 4
  br label %for.end

if.end322:                                        ; preds = %for.body
  %153 = load i8*, i8** %s, align 8
  %154 = load i8, i8* %153, align 1
  %idxprom323 = zext i8 %154 to i64
  %arrayidx324 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom323
  %155 = load i32, i32* %arrayidx324, align 4
  %and325 = and i32 %155, 16448
  %cmp326 = icmp eq i32 %and325, 16448
  br i1 %cmp326, label %if.then346, label %lor.lhs.false328

lor.lhs.false328:                                 ; preds = %if.end322
  %156 = load i8*, i8** %s, align 8
  %157 = load i8, i8* %156, align 1
  %idxprom329 = zext i8 %157 to i64
  %arrayidx330 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom329
  %158 = load i32, i32* %arrayidx330, align 4
  %and331 = and i32 %158, 17408
  %cmp332 = icmp eq i32 %and331, 17408
  br i1 %cmp332, label %land.lhs.true334, label %lor.lhs.false338

land.lhs.true334:                                 ; preds = %lor.lhs.false328
  %159 = load i8*, i8** %s, align 8
  %160 = load i8, i8* %159, align 1
  %conv335 = sext i8 %160 to i32
  %cmp336 = icmp ne i32 %conv335, 11
  br i1 %cmp336, label %if.then346, label %lor.lhs.false338

lor.lhs.false338:                                 ; preds = %land.lhs.true334, %lor.lhs.false328
  %161 = load i8*, i8** %s, align 8
  %162 = load i8, i8* %161, align 1
  %conv339 = sext i8 %162 to i32
  %cmp340 = icmp eq i32 %conv339, 8
  br i1 %cmp340, label %if.then346, label %lor.lhs.false342

lor.lhs.false342:                                 ; preds = %lor.lhs.false338
  %163 = load i8*, i8** %s, align 8
  %164 = load i8, i8* %163, align 1
  %conv343 = sext i8 %164 to i32
  %cmp344 = icmp eq i32 %conv343, 27
  br i1 %cmp344, label %if.then346, label %if.end347

if.then346:                                       ; preds = %lor.lhs.false342, %lor.lhs.false338, %land.lhs.true334, %if.end322
  br label %for.inc

if.end347:                                        ; preds = %lor.lhs.false342
  %165 = load i32, i32* %odd, align 4
  %inc = add nsw i32 %165, 1
  store i32 %inc, i32* %odd, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end347, %if.then346
  %166 = load i32, i32* %i, align 4
  %inc348 = add nsw i32 %166, 1
  store i32 %inc348, i32* %i, align 4
  %167 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %167, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then319, %for.cond
  %168 = load i32, i32* %odd, align 4
  %mul = mul nsw i32 %168, 3
  %conv349 = sext i32 %mul to i64
  %169 = load i64, i64* %len, align 8
  %cmp350 = icmp sgt i64 %conv349, %169
  %conv351 = zext i1 %cmp350 to i32
  %170 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type352 = getelementptr inbounds %struct.op, %struct.op* %170, i32 0, i32 4
  %bf.load353 = load i16, i16* %op_type352, align 8
  %bf.clear354 = and i16 %bf.load353, 511
  %bf.cast355 = zext i16 %bf.clear354 to i32
  %cmp356 = icmp eq i32 %bf.cast355, 291
  %conv357 = zext i1 %cmp356 to i32
  %cmp358 = icmp eq i32 %conv351, %conv357
  br i1 %cmp358, label %if.then360, label %if.else362

if.then360:                                       ; preds = %for.end
  %call361 = call %struct.op* @S_ft_return_false(%struct.sv* @PL_sv_no)
  store %struct.op* %call361, %struct.op** %retval, align 8
  br label %return

if.else362:                                       ; preds = %for.end
  %call363 = call %struct.op* @S_ft_return_true(%struct.sv* @PL_sv_yes)
  store %struct.op* %call363, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.else362, %if.then360, %if.else311, %if.then309, %if.end287, %if.then285, %if.then264, %if.then256, %if.end250, %if.else217, %if.else203, %if.else185, %if.then183, %if.then170, %if.then163, %if.then155, %if.then6
  %171 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %171
}

declare dso_local i32 @PerlIO_has_base(%struct._PerlIO**) #1

declare dso_local i64 @Perl_PerlIO_get_cnt(%struct._PerlIO**) #1

declare dso_local i32 @PerlIO_ungetc(%struct._PerlIO**, i32) #1

declare dso_local i64 @Perl_PerlIO_get_bufsiz(%struct._PerlIO**) #1

declare dso_local i8* @Perl_PerlIO_get_base(%struct._PerlIO**) #1

declare dso_local %struct._PerlIO** @PerlIO_open(i8*, i8*) #1

declare dso_local i32 @Perl_PerlIO_close(%struct._PerlIO**) #1

declare dso_local zeroext i1 @Perl_is_invariant_string(i8*, i64) #1

declare dso_local zeroext i1 @Perl_is_utf8_string_loclen(i8*, i64, i8**, i64*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_chdir() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmps = alloca i8*, align 8
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  %table = alloca %struct.hv*, align 8
  %svp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i8* null, i8** %tmps, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.end86

if.then:                                          ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** %sv, align 8
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags, align 2
  %conv2 = zext i8 %10 to i32
  %and3 = and i32 %conv2, 128
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %11, i32 0, i32 15)
  store %struct.gv* %call, %struct.gv** %gv, align 8
  br label %if.end85

if.else:                                          ; preds = %if.then
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and5 = and i32 %13, 2097152
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.else
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %call7 = call i32 @Perl_mg_get(%struct.sv* %14)
  %tobool8 = icmp ne i32 %call7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %15 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %15 to i32
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %17, 49152
  %cmp11 = icmp eq i32 %and10, 32768
  br i1 %cmp11, label %land.lhs.true, label %cond.false22

land.lhs.true:                                    ; preds = %land.end
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %19, 255
  %cmp15 = icmp eq i32 %and14, 9
  br i1 %cmp15, label %cond.true21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %21, 255
  %cmp19 = icmp eq i32 %and18, 10
  br i1 %cmp19, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %lor.lhs.false, %land.lhs.true
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %23 = bitcast %struct.sv* %22 to %struct.gv*
  br label %cond.end71

cond.false22:                                     ; preds = %lor.lhs.false, %land.end
  %24 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %25, 2048
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %land.lhs.true26, label %cond.false70

land.lhs.true26:                                  ; preds = %cond.false22
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %27 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %28, 255
  %cmp29 = icmp ule i32 %and28, 10
  br i1 %cmp29, label %land.lhs.true31, label %cond.false70

land.lhs.true31:                                  ; preds = %land.lhs.true26
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u32 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 3
  %svu_rv33 = bitcast %union.anon* %sv_u32 to %struct.sv**
  %30 = load %struct.sv*, %struct.sv** %svu_rv33, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %31, 2097152
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %land.lhs.true31
  br i1 true, label %land.rhs39, label %land.end44

cond.false38:                                     ; preds = %land.lhs.true31
  br i1 false, label %land.rhs39, label %land.end44

land.rhs39:                                       ; preds = %cond.false38, %cond.true37
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_rv41 = bitcast %union.anon* %sv_u40 to %struct.sv**
  %33 = load %struct.sv*, %struct.sv** %svu_rv41, align 8
  %call42 = call i32 @Perl_mg_get(%struct.sv* %33)
  %tobool43 = icmp ne i32 %call42, 0
  br label %land.end44

land.end44:                                       ; preds = %land.rhs39, %cond.false38, %cond.true37
  %34 = phi i1 [ false, %cond.false38 ], [ false, %cond.true37 ], [ %tobool43, %land.rhs39 ]
  %land.ext45 = zext i1 %34 to i32
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u46 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_rv47 = bitcast %union.anon* %sv_u46 to %struct.sv**
  %36 = load %struct.sv*, %struct.sv** %svu_rv47, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %37, 49152
  %cmp50 = icmp eq i32 %and49, 32768
  br i1 %cmp50, label %land.rhs52, label %land.end65

land.rhs52:                                       ; preds = %land.end44
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u53 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_rv54 = bitcast %union.anon* %sv_u53 to %struct.sv**
  %39 = load %struct.sv*, %struct.sv** %svu_rv54, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags55, align 4
  %and56 = and i32 %40, 255
  %cmp57 = icmp eq i32 %and56, 9
  br i1 %cmp57, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs52
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u59 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_rv60 = bitcast %union.anon* %sv_u59 to %struct.sv**
  %42 = load %struct.sv*, %struct.sv** %svu_rv60, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %43, 255
  %cmp63 = icmp eq i32 %and62, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs52
  %44 = phi i1 [ true, %land.rhs52 ], [ %cmp63, %lor.rhs ]
  br label %land.end65

land.end65:                                       ; preds = %lor.end, %land.end44
  %45 = phi i1 [ false, %land.end44 ], [ %44, %lor.end ]
  br i1 %45, label %cond.true67, label %cond.false70

cond.true67:                                      ; preds = %land.end65
  %46 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u68 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 3
  %svu_rv69 = bitcast %union.anon* %sv_u68 to %struct.sv**
  %47 = load %struct.sv*, %struct.sv** %svu_rv69, align 8
  %48 = bitcast %struct.sv* %47 to %struct.gv*
  br label %cond.end

cond.false70:                                     ; preds = %land.end65, %land.lhs.true26, %cond.false22
  br label %cond.end

cond.end:                                         ; preds = %cond.false70, %cond.true67
  %cond = phi %struct.gv* [ %48, %cond.true67 ], [ null, %cond.false70 ]
  br label %cond.end71

cond.end71:                                       ; preds = %cond.end, %cond.true21
  %cond72 = phi %struct.gv* [ %23, %cond.true21 ], [ %cond, %cond.end ]
  store %struct.gv* %cond72, %struct.gv** %gv, align 8
  %tobool73 = icmp ne %struct.gv* %cond72, null
  br i1 %tobool73, label %if.end, label %if.then74

if.then74:                                        ; preds = %cond.end71
  %49 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %50, 2098176
  %cmp77 = icmp eq i32 %and76, 1024
  br i1 %cmp77, label %cond.true79, label %cond.false81

cond.true79:                                      ; preds = %if.then74
  %51 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u80 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u80 to i8**
  %52 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 0
  br label %cond.end83

cond.false81:                                     ; preds = %if.then74
  %53 = load %struct.sv*, %struct.sv** %sv, align 8
  %call82 = call i8* @Perl_sv_2pv_flags(%struct.sv* %53, i64* null, i32 32)
  br label %cond.end83

cond.end83:                                       ; preds = %cond.false81, %cond.true79
  %cond84 = phi i8* [ %add.ptr, %cond.true79 ], [ %call82, %cond.false81 ]
  store i8* %cond84, i8** %tmps, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end83, %cond.end71
  br label %if.end85

if.end85:                                         ; preds = %if.end, %if.then4
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %entry
  %54 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool87 = icmp ne %struct.gv* %54, null
  br i1 %tobool87, label %if.end155, label %land.lhs.true88

land.lhs.true88:                                  ; preds = %if.end86
  %55 = load i8*, i8** %tmps, align 8
  %tobool89 = icmp ne i8* %55, null
  br i1 %tobool89, label %lor.lhs.false90, label %if.then92

lor.lhs.false90:                                  ; preds = %land.lhs.true88
  %56 = load i8*, i8** %tmps, align 8
  %57 = load i8, i8* %56, align 1
  %tobool91 = icmp ne i8 %57, 0
  br i1 %tobool91, label %if.end155, label %if.then92

if.then92:                                        ; preds = %lor.lhs.false90, %land.lhs.true88
  %58 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %sv_u93 = getelementptr inbounds %struct.gv, %struct.gv* %58, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u93 to %struct.gp**
  %59 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr94 = getelementptr inbounds %struct.gp, %struct.gp* %59, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr94, i32 0, i32 5
  %60 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %tobool95 = icmp ne %struct.hv* %60, null
  br i1 %tobool95, label %cond.true96, label %cond.false101

cond.true96:                                      ; preds = %if.then92
  %61 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %sv_u97 = getelementptr inbounds %struct.gv, %struct.gv* %61, i32 0, i32 3
  %svu_gp98 = bitcast %union.anon.4* %sv_u97 to %struct.gp**
  %62 = load %struct.gp*, %struct.gp** %svu_gp98, align 8
  %add.ptr99 = getelementptr inbounds %struct.gp, %struct.gp* %62, i64 0
  %gp_hv100 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr99, i32 0, i32 5
  %63 = load %struct.hv*, %struct.hv** %gp_hv100, align 8
  br label %cond.end107

cond.false101:                                    ; preds = %if.then92
  %64 = load %struct.gv*, %struct.gv** @PL_envgv, align 8
  %call102 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %64, i32 12)
  %sv_u103 = getelementptr inbounds %struct.gv, %struct.gv* %call102, i32 0, i32 3
  %svu_gp104 = bitcast %union.anon.4* %sv_u103 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp104, align 8
  %add.ptr105 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_hv106 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr105, i32 0, i32 5
  %66 = load %struct.hv*, %struct.hv** %gp_hv106, align 8
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false101, %cond.true96
  %cond108 = phi %struct.hv* [ %63, %cond.true96 ], [ %66, %cond.false101 ]
  store %struct.hv* %cond108, %struct.hv** %table, align 8
  %67 = load %struct.hv*, %struct.hv** %table, align 8
  %call109 = call i8* @Perl_hv_common(%struct.hv* %67, %struct.sv* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0), i64 4, i32 0, i32 32, %struct.sv* null, i32 0)
  %68 = bitcast i8* %call109 to %struct.sv**
  store %struct.sv** %68, %struct.sv*** %svp, align 8
  %tobool110 = icmp ne %struct.sv** %68, null
  br i1 %tobool110, label %if.then114, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %cond.end107
  %69 = load %struct.hv*, %struct.hv** %table, align 8
  %call112 = call i8* @Perl_hv_common(%struct.hv* %69, %struct.sv* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i64 0, i64 0), i64 6, i32 0, i32 32, %struct.sv* null, i32 0)
  %70 = bitcast i8* %call112 to %struct.sv**
  store %struct.sv** %70, %struct.sv*** %svp, align 8
  %tobool113 = icmp ne %struct.sv** %70, null
  br i1 %tobool113, label %if.then114, label %if.else134

if.then114:                                       ; preds = %lor.lhs.false111, %cond.end107
  %71 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private115 = getelementptr inbounds %struct.op, %struct.op* %71, i32 0, i32 6
  %72 = load i8, i8* %op_private115, align 1
  %conv116 = zext i8 %72 to i32
  %and117 = and i32 %conv116, 15
  %cmp118 = icmp eq i32 %and117, 1
  br i1 %cmp118, label %if.then120, label %if.end121

if.then120:                                       ; preds = %if.then114
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 2, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.64, i64 0, i64 0))
  br label %if.end121

if.end121:                                        ; preds = %if.then120, %if.then114
  %73 = load %struct.sv**, %struct.sv*** %svp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %sv_flags122 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags122, align 4
  %and123 = and i32 %75, 2098176
  %cmp124 = icmp eq i32 %and123, 1024
  br i1 %cmp124, label %cond.true126, label %cond.false130

cond.true126:                                     ; preds = %if.end121
  %76 = load %struct.sv**, %struct.sv*** %svp, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %sv_u127 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 3
  %svu_pv128 = bitcast %union.anon* %sv_u127 to i8**
  %78 = load i8*, i8** %svu_pv128, align 8
  %add.ptr129 = getelementptr inbounds i8, i8* %78, i64 0
  br label %cond.end132

cond.false130:                                    ; preds = %if.end121
  %79 = load %struct.sv**, %struct.sv*** %svp, align 8
  %80 = load %struct.sv*, %struct.sv** %79, align 8
  %call131 = call i8* @Perl_sv_2pv_flags(%struct.sv* %80, i64* null, i32 34)
  br label %cond.end132

cond.end132:                                      ; preds = %cond.false130, %cond.true126
  %cond133 = phi i8* [ %add.ptr129, %cond.true126 ], [ %call131, %cond.false130 ]
  store i8* %cond133, i8** %tmps, align 8
  br label %if.end154

if.else134:                                       ; preds = %lor.lhs.false111
  br label %do.body

do.body:                                          ; preds = %if.else134
  %81 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %81, i64 0)
  br label %do.body135

do.body135:                                       ; preds = %do.body
  br label %do.body136

do.body136:                                       ; preds = %do.body135
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags137 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags137, align 4
  %and138 = and i32 %83, 4194304
  %tobool139 = icmp ne i32 %and138, 0
  br i1 %tobool139, label %cond.true140, label %cond.false141

cond.true140:                                     ; preds = %do.body136
  br i1 true, label %if.then142, label %if.end144

cond.false141:                                    ; preds = %do.body136
  br i1 false, label %if.then142, label %if.end144

if.then142:                                       ; preds = %cond.false141, %cond.true140
  %84 = load %struct.sv*, %struct.sv** %targ, align 8
  %call143 = call i32 @Perl_mg_set(%struct.sv* %84)
  br label %if.end144

if.end144:                                        ; preds = %if.then142, %cond.false141, %cond.true140
  br label %do.end

do.end:                                           ; preds = %if.end144
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr145 = getelementptr inbounds %struct.sv*, %struct.sv** %86, i32 1
  store %struct.sv** %incdec.ptr145, %struct.sv*** %sp, align 8
  store %struct.sv* %85, %struct.sv** %incdec.ptr145, align 8
  br label %do.end146

do.end146:                                        ; preds = %do.end
  br label %do.end147

do.end147:                                        ; preds = %do.end146
  %87 = load i8, i8* @PL_tainting, align 1
  %tobool148 = trunc i8 %87 to i1
  br i1 %tobool148, label %cond.true150, label %cond.false151

cond.true150:                                     ; preds = %do.end147
  br i1 true, label %if.then152, label %if.end153

cond.false151:                                    ; preds = %do.end147
  br i1 false, label %if.then152, label %if.end153

if.then152:                                       ; preds = %cond.false151, %cond.true150
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end153

if.end153:                                        ; preds = %if.then152, %cond.false151, %cond.true150
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %88, %struct.sv*** @PL_stack_sp, align 8
  %89 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %89, i32 0, i32 0
  %90 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %90, %struct.op** %retval, align 8
  br label %return

if.end154:                                        ; preds = %cond.end132
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %lor.lhs.false90, %if.end86
  %91 = load i8, i8* @PL_tainting, align 1
  %tobool156 = trunc i8 %91 to i1
  br i1 %tobool156, label %cond.true158, label %cond.false159

cond.true158:                                     ; preds = %if.end155
  br i1 true, label %if.then160, label %if.end161

cond.false159:                                    ; preds = %if.end155
  br i1 false, label %if.then160, label %if.end161

if.then160:                                       ; preds = %cond.false159, %cond.true158
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i64 0, i64 0))
  br label %if.end161

if.end161:                                        ; preds = %if.then160, %cond.false159, %cond.true158
  %92 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool162 = icmp ne %struct.gv* %92, null
  br i1 %tobool162, label %if.then163, label %if.else165

if.then163:                                       ; preds = %if.end161
  %call164 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0))
  store %struct.op* %call164, %struct.op** %retval, align 8
  br label %return

if.else165:                                       ; preds = %if.end161
  br label %do.body166

do.body166:                                       ; preds = %if.else165
  %93 = load %struct.sv*, %struct.sv** %targ, align 8
  %94 = load i8*, i8** %tmps, align 8
  %call167 = call i32 @chdir(i8* %94) #3
  %cmp168 = icmp sge i32 %call167, 0
  %conv169 = zext i1 %cmp168 to i32
  %conv170 = sext i32 %conv169 to i64
  call void @Perl_sv_setiv(%struct.sv* %93, i64 %conv170)
  br label %do.body171

do.body171:                                       ; preds = %do.body166
  br label %do.body172

do.body172:                                       ; preds = %do.body171
  %95 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %96, 4194304
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %cond.true176, label %cond.false177

cond.true176:                                     ; preds = %do.body172
  br i1 true, label %if.then178, label %if.end180

cond.false177:                                    ; preds = %do.body172
  br i1 false, label %if.then178, label %if.end180

if.then178:                                       ; preds = %cond.false177, %cond.true176
  %97 = load %struct.sv*, %struct.sv** %targ, align 8
  %call179 = call i32 @Perl_mg_set(%struct.sv* %97)
  br label %if.end180

if.end180:                                        ; preds = %if.then178, %cond.false177, %cond.true176
  br label %do.end181

do.end181:                                        ; preds = %if.end180
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr182 = getelementptr inbounds %struct.sv*, %struct.sv** %99, i32 1
  store %struct.sv** %incdec.ptr182, %struct.sv*** %sp, align 8
  store %struct.sv* %98, %struct.sv** %incdec.ptr182, align 8
  br label %do.end183

do.end183:                                        ; preds = %do.end181
  br label %do.end184

do.end184:                                        ; preds = %do.end183
  br label %if.end185

if.end185:                                        ; preds = %do.end184
  %100 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %100, %struct.sv*** @PL_stack_sp, align 8
  %101 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next186 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 0
  %102 = load %struct.op*, %struct.op** %op_next186, align 8
  store %struct.op* %102, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end185, %if.then163, %if.end153
  %103 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %103
}

declare dso_local i8* @Perl_hv_common(%struct.hv*, %struct.sv*, i8*, i64, i32, i32, %struct.sv*, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_chown() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %value = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 3
  %6 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %4, i64 %6
  %7 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %7, %struct.sv** %targ, align 8
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %9 = load %struct.sv**, %struct.sv*** %mark, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call i32 @Perl_apply(i32 %bf.cast, %struct.sv** %9, %struct.sv** %10)
  store i32 %call, i32* %value, align 4
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %11, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %targ, align 8
  %13 = load i32, i32* %value, align 4
  %conv = sext i32 %13 to i64
  call void @Perl_sv_setiv(%struct.sv* %12, i64 %conv)
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.body1
  %14 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags, align 4
  %and = and i32 %15, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body2
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body2
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %16 = load %struct.sv*, %struct.sv** %targ, align 8
  %call3 = call i32 @Perl_mg_set(%struct.sv* %16)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body4

do.body4:                                         ; preds = %do.end
  br label %do.body5

do.body5:                                         ; preds = %do.body4
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %do.body5
  br i1 true, label %if.then9, label %if.end11

cond.false8:                                      ; preds = %do.body5
  br i1 false, label %if.then9, label %if.end11

if.then9:                                         ; preds = %cond.false8, %cond.true7
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call10 = call %struct.sv** @Perl_stack_grow(%struct.sv** %19, %struct.sv** %20, i64 1)
  store %struct.sv** %call10, %struct.sv*** %sp, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %cond.false8, %cond.true7
  br label %do.end12

do.end12:                                         ; preds = %if.end11
  %22 = load %struct.sv*, %struct.sv** %targ, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr13 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 1
  store %struct.sv** %incdec.ptr13, %struct.sv*** %sp, align 8
  store %struct.sv* %22, %struct.sv** %incdec.ptr13, align 8
  br label %do.end14

do.end14:                                         ; preds = %do.end12
  br label %do.end15

do.end15:                                         ; preds = %do.end14
  br label %do.end16

do.end16:                                         ; preds = %do.end15
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %24, %struct.sv*** @PL_stack_sp, align 8
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 0
  %26 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %26
}

declare dso_local i32 @Perl_apply(i32, %struct.sv**, %struct.sv**) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_chroot() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rename() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %anum = alloca i32, align 4
  %tmps2 = alloca i8*, align 8
  %tmps = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** @PL_Sv, align 8
  %7 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* null, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %tmps2, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %14, 2098176
  %cmp3 = icmp eq i32 %and2, 1024
  br i1 %cmp3, label %cond.true4, label %cond.false8

cond.true4:                                       ; preds = %cond.end
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  %sv_u5 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 3
  %svu_pv6 = bitcast %union.anon* %sv_u5 to i8**
  %17 = load i8*, i8** %svu_pv6, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %17, i64 0
  br label %cond.end10

cond.false8:                                      ; preds = %cond.end
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %19 = load %struct.sv*, %struct.sv** %18, align 8
  %call9 = call i8* @Perl_sv_2pv_flags(%struct.sv* %19, i64* null, i32 34)
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false8, %cond.true4
  %cond11 = phi i8* [ %add.ptr7, %cond.true4 ], [ %call9, %cond.false8 ]
  store i8* %cond11, i8** %tmps, align 8
  %20 = load i8, i8* @PL_tainting, align 1
  %tobool = trunc i8 %20 to i1
  br i1 %tobool, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %cond.end10
  br i1 true, label %if.then, label %if.end

cond.false13:                                     ; preds = %cond.end10
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false13, %cond.true12
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.68, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false13, %cond.true12
  %21 = load i8*, i8** %tmps, align 8
  %call14 = call i32 @stat64(i8* %21, %struct.stat* @PL_statbuf) #3
  store i32 %call14, i32* %anum, align 4
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end36, label %if.then16

if.then16:                                        ; preds = %if.end
  %22 = load i8*, i8** %tmps2, align 8
  %23 = load i8*, i8** %tmps, align 8
  %call17 = call i32 @Perl_same_dirent(i8* %22, i8* %23)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then16
  store i32 1, i32* %anum, align 4
  br label %if.end35

if.else:                                          ; preds = %if.then16
  %call20 = call i32 @geteuid() #3
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %24 = load i8*, i8** %tmps2, align 8
  %call22 = call i32 @stat64(i8* %24, %struct.stat* @PL_statbuf) #3
  %cmp23 = icmp slt i32 %call22, 0
  br i1 %cmp23, label %if.then27, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %25 = load i32, i32* getelementptr inbounds (%struct.stat, %struct.stat* @PL_statbuf, i32 0, i32 3), align 8
  %and25 = and i32 %25, 61440
  %cmp26 = icmp eq i32 %and25, 16384
  br i1 %cmp26, label %if.end29, label %if.then27

if.then27:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %if.else
  %26 = load i8*, i8** %tmps2, align 8
  %call28 = call i32 @unlink(i8* %26) #3
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %lor.lhs.false24
  %27 = load i8*, i8** %tmps, align 8
  %28 = load i8*, i8** %tmps2, align 8
  %call30 = call i32 @link(i8* %27, i8* %28) #3
  store i32 %call30, i32* %anum, align 4
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end34, label %if.then32

if.then32:                                        ; preds = %if.end29
  %29 = load i8*, i8** %tmps, align 8
  %call33 = call i32 @unlink(i8* %29) #3
  store i32 %call33, i32* %anum, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end29
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then19
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end36
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %31 = load i32, i32* %anum, align 4
  %cmp37 = icmp sge i32 %31, 0
  %conv = zext i1 %cmp37 to i32
  %conv38 = sext i32 %conv to i64
  call void @Perl_sv_setiv(%struct.sv* %30, i64 %conv38)
  br label %do.body39

do.body39:                                        ; preds = %do.body
  br label %do.body40

do.body40:                                        ; preds = %do.body39
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %33, 4194304
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %do.body40
  br i1 true, label %if.then46, label %if.end48

cond.false45:                                     ; preds = %do.body40
  br i1 false, label %if.then46, label %if.end48

if.then46:                                        ; preds = %cond.false45, %cond.true44
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %call47 = call i32 @Perl_mg_set(%struct.sv* %34)
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %cond.false45, %cond.true44
  br label %do.end

do.end:                                           ; preds = %if.end48
  %35 = load %struct.sv*, %struct.sv** %targ, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %35, %struct.sv** %36, align 8
  br label %do.end49

do.end49:                                         ; preds = %do.end
  br label %do.end50

do.end50:                                         ; preds = %do.end49
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %37, %struct.sv*** @PL_stack_sp, align 8
  %38 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 0
  %39 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %39
}

declare dso_local i32 @Perl_same_dirent(i8*, i8*) #1

; Function Attrs: nounwind
declare dso_local i32 @unlink(i8*) #6

; Function Attrs: nounwind
declare dso_local i32 @link(i8*, i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_link() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_readlink() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %1 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %4, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %6, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %7, %struct.sv*** @PL_stack_sp, align 8
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_mkdir() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %tmps = alloca i8*, align 8
  %copy = alloca i8, align 1
  %mode = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i8 0, i8* %copy, align 1
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp sgt i32 %and, 1
  br i1 %cmp, label %land.lhs.true, label %cond.false7

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %tobool = icmp ne %struct.sv* %8, null
  br i1 %tobool, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  br i1 false, label %cond.true, label %cond.false7

cond.true:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr2, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** @PL_Sv, align 8
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and3 = and i32 %14, 2097408
  %cmp4 = icmp eq i32 %and3, 256
  br i1 %cmp4, label %cond.true6, label %cond.false

cond.true6:                                       ; preds = %cond.true
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %17, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %18 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %19, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true6
  %cond = phi i64 [ %18, %cond.true6 ], [ %call, %cond.false ]
  br label %cond.end8

cond.false7:                                      ; preds = %lor.lhs.false, %entry
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.end
  %cond9 = phi i64 [ %cond, %cond.end ], [ 511, %cond.false7 ]
  %conv10 = trunc i64 %cond9 to i32
  store i32 %conv10, i32* %mode, align 4
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %22, 2098176
  %cmp13 = icmp eq i32 %and12, 1024
  br i1 %cmp13, label %cond.true15, label %cond.false17

cond.true15:                                      ; preds = %cond.end8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any16 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any16, align 8
  %26 = bitcast i8* %25 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %26, i32 0, i32 2
  %27 = load i64, i64* %xpv_cur, align 8
  store i64 %27, i64* %len, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %30 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 0
  br label %cond.end19

cond.false17:                                     ; preds = %cond.end8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %call18 = call i8* @Perl_sv_2pv_flags(%struct.sv* %32, i64* %len, i32 34)
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false17, %cond.true15
  %cond20 = phi i8* [ %add.ptr, %cond.true15 ], [ %call18, %cond.false17 ]
  store i8* %cond20, i8** %tmps, align 8
  %33 = load i64, i64* %len, align 8
  %cmp21 = icmp ugt i64 %33, 1
  br i1 %cmp21, label %land.lhs.true23, label %if.end

land.lhs.true23:                                  ; preds = %cond.end19
  %34 = load i8*, i8** %tmps, align 8
  %35 = load i64, i64* %len, align 8
  %sub = sub i64 %35, 1
  %arrayidx24 = getelementptr inbounds i8, i8* %34, i64 %sub
  %36 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %36 to i32
  %cmp26 = icmp eq i32 %conv25, 47
  br i1 %cmp26, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true23
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %37 = load i64, i64* %len, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %len, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %38 = load i64, i64* %len, align 8
  %cmp28 = icmp ugt i64 %38, 1
  br i1 %cmp28, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %39 = load i8*, i8** %tmps, align 8
  %40 = load i64, i64* %len, align 8
  %sub30 = sub i64 %40, 1
  %arrayidx31 = getelementptr inbounds i8, i8* %39, i64 %sub30
  %41 = load i8, i8* %arrayidx31, align 1
  %conv32 = sext i8 %41 to i32
  %cmp33 = icmp eq i32 %conv32, 47
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %42 = phi i1 [ false, %do.cond ], [ %cmp33, %land.rhs ]
  br i1 %42, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %43 = load i8*, i8** %tmps, align 8
  %44 = load i64, i64* %len, align 8
  %conv35 = trunc i64 %44 to i32
  %call36 = call i8* @Perl_savepvn(i8* %43, i32 %conv35)
  store i8* %call36, i8** %tmps, align 8
  store i8 1, i8* %copy, align 1
  br label %if.end

if.end:                                           ; preds = %do.end, %land.lhs.true23, %cond.end19
  %45 = load i8, i8* @PL_tainting, align 1
  %tobool37 = trunc i8 %45 to i1
  br i1 %tobool37, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %if.end
  br i1 true, label %if.then41, label %if.end42

cond.false40:                                     ; preds = %if.end
  br i1 false, label %if.then41, label %if.end42

if.then41:                                        ; preds = %cond.false40, %cond.true39
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i64 0, i64 0))
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %cond.false40, %cond.true39
  br label %do.body43

do.body43:                                        ; preds = %if.end42
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load i8*, i8** %tmps, align 8
  %48 = load i32, i32* %mode, align 4
  %call44 = call i32 @mkdir(i8* %47, i32 %48) #3
  %cmp45 = icmp sge i32 %call44, 0
  %conv46 = zext i1 %cmp45 to i32
  %conv47 = sext i32 %conv46 to i64
  call void @Perl_sv_setiv(%struct.sv* %46, i64 %conv47)
  br label %do.body48

do.body48:                                        ; preds = %do.body43
  br label %do.body49

do.body49:                                        ; preds = %do.body48
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %50, 4194304
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %cond.true53, label %cond.false54

cond.true53:                                      ; preds = %do.body49
  br i1 true, label %if.then55, label %if.end57

cond.false54:                                     ; preds = %do.body49
  br i1 false, label %if.then55, label %if.end57

if.then55:                                        ; preds = %cond.false54, %cond.true53
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %call56 = call i32 @Perl_mg_set(%struct.sv* %51)
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %cond.false54, %cond.true53
  br label %do.end59

do.end59:                                         ; preds = %if.end57
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %52, %struct.sv** %53, align 8
  br label %do.end61

do.end61:                                         ; preds = %do.end59
  br label %do.end63

do.end63:                                         ; preds = %do.end61
  %54 = load i8, i8* %copy, align 1
  %tobool64 = trunc i8 %54 to i1
  br i1 %tobool64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %do.end63
  %55 = load i8*, i8** %tmps, align 8
  call void @Perl_safesysfree(i8* %55)
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %do.end63
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %56, %struct.sv*** @PL_stack_sp, align 8
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 0
  %58 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %58
}

; Function Attrs: nounwind
declare dso_local i32 @mkdir(i8*, i32) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rmdir() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %tmps = alloca i8*, align 8
  %copy = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i8 0, i8* %copy, align 1
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 2
  %12 = load i64, i64* %xpv_cur, align 8
  store i64 %12, i64* %len, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %15 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %17, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %tmps, align 8
  %18 = load i64, i64* %len, align 8
  %cmp1 = icmp ugt i64 %18, 1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %19 = load i8*, i8** %tmps, align 8
  %20 = load i64, i64* %len, align 8
  %sub = sub i64 %20, 1
  %arrayidx2 = getelementptr inbounds i8, i8* %19, i64 %sub
  %21 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %21 to i32
  %cmp3 = icmp eq i32 %conv, 47
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %22 = load i64, i64* %len, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %len, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %23 = load i64, i64* %len, align 8
  %cmp5 = icmp ugt i64 %23, 1
  br i1 %cmp5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %24 = load i8*, i8** %tmps, align 8
  %25 = load i64, i64* %len, align 8
  %sub7 = sub i64 %25, 1
  %arrayidx8 = getelementptr inbounds i8, i8* %24, i64 %sub7
  %26 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %26 to i32
  %cmp10 = icmp eq i32 %conv9, 47
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %27 = phi i1 [ false, %do.cond ], [ %cmp10, %land.rhs ]
  br i1 %27, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %28 = load i8*, i8** %tmps, align 8
  %29 = load i64, i64* %len, align 8
  %conv12 = trunc i64 %29 to i32
  %call13 = call i8* @Perl_savepvn(i8* %28, i32 %conv12)
  store i8* %call13, i8** %tmps, align 8
  store i8 1, i8* %copy, align 1
  br label %if.end

if.end:                                           ; preds = %do.end, %land.lhs.true, %cond.end
  %30 = load i8, i8* @PL_tainting, align 1
  %tobool = trunc i8 %30 to i1
  br i1 %tobool, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %if.end
  br i1 true, label %if.then17, label %if.end18

cond.false16:                                     ; preds = %if.end
  br i1 false, label %if.then17, label %if.end18

if.then17:                                        ; preds = %cond.false16, %cond.true15
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0))
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %cond.false16, %cond.true15
  br label %do.body19

do.body19:                                        ; preds = %if.end18
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %32 = load i8*, i8** %tmps, align 8
  %call20 = call i32 @rmdir(i8* %32) #3
  %cmp21 = icmp sge i32 %call20, 0
  %conv22 = zext i1 %cmp21 to i32
  %conv23 = sext i32 %conv22 to i64
  call void @Perl_sv_setiv(%struct.sv* %31, i64 %conv23)
  br label %do.body24

do.body24:                                        ; preds = %do.body19
  br label %do.body25

do.body25:                                        ; preds = %do.body24
  %33 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %34, 4194304
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %do.body25
  br i1 true, label %if.then31, label %if.end33

cond.false30:                                     ; preds = %do.body25
  br i1 false, label %if.then31, label %if.end33

if.then31:                                        ; preds = %cond.false30, %cond.true29
  %35 = load %struct.sv*, %struct.sv** %targ, align 8
  %call32 = call i32 @Perl_mg_set(%struct.sv* %35)
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %cond.false30, %cond.true29
  br label %do.end35

do.end35:                                         ; preds = %if.end33
  %36 = load %struct.sv*, %struct.sv** %targ, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %36, %struct.sv** %37, align 8
  br label %do.end37

do.end37:                                         ; preds = %do.end35
  br label %do.end39

do.end39:                                         ; preds = %do.end37
  %38 = load i8, i8* %copy, align 1
  %tobool40 = trunc i8 %38 to i1
  br i1 %tobool40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %do.end39
  %39 = load i8*, i8** %tmps, align 8
  call void @Perl_safesysfree(i8* %39)
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %do.end39
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %40, %struct.sv*** @PL_stack_sp, align 8
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 0
  %42 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %42
}

; Function Attrs: nounwind
declare dso_local i32 @rmdir(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_open_dir() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_dir_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_readdir() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_dir_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_telldir() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_dir_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_seekdir() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_dir_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.74, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rewinddir() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_dir_func, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.75, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_closedir() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_dir_func, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_fork() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %childpid = alloca i32, align 4
  %sig = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %call1 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** null)
  %call2 = call i32 @Perl_my_fork()
  store i32 %call2, i32* %childpid, align 4
  %10 = load i32, i32* %childpid, align 4
  %cmp3 = icmp eq i32 %10, 0
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %do.end
  store i32 0, i32* @PL_sig_pending, align 4
  %11 = load i32*, i32** @PL_psig_pend, align 8
  %tobool = icmp ne i32* %11, null
  br i1 %tobool, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.then4
  store i32 1, i32* %sig, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then5
  %12 = load i32, i32* %sig, align 4
  %cmp6 = icmp slt i32 %12, 16
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32*, i32** @PL_psig_pend, align 8
  %14 = load i32, i32* %sig, align 4
  %idxprom = sext i32 %14 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i64 %idxprom
  store i32 0, i32* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %sig, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %sig, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end8

if.end8:                                          ; preds = %for.end, %if.then4
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %do.end
  %16 = load i32, i32* %childpid, align 4
  %cmp10 = icmp slt i32 %16, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end9
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %18, %struct.sv*** @PL_stack_sp, align 8
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 0
  %20 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %20, %struct.op** %retval, align 8
  br label %return

if.end12:                                         ; preds = %if.end9
  %21 = load i32, i32* %childpid, align 4
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end12
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.end12
  br label %do.body16

do.body16:                                        ; preds = %if.end15
  %22 = load %struct.sv*, %struct.sv** %targ, align 8
  %23 = load i32, i32* %childpid, align 4
  %conv = sext i32 %23 to i64
  call void @Perl_sv_setiv(%struct.sv* %22, i64 %conv)
  br label %do.body17

do.body17:                                        ; preds = %do.body16
  br label %do.body18

do.body18:                                        ; preds = %do.body17
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags, align 4
  %and = and i32 %25, 4194304
  %tobool19 = icmp ne i32 %and, 0
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %do.body18
  br i1 true, label %if.then22, label %if.end24

cond.false21:                                     ; preds = %do.body18
  br i1 false, label %if.then22, label %if.end24

if.then22:                                        ; preds = %cond.false21, %cond.true20
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %call23 = call i32 @Perl_mg_set(%struct.sv* %26)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %cond.false21, %cond.true20
  br label %do.end25

do.end25:                                         ; preds = %if.end24
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr26 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 1
  store %struct.sv** %incdec.ptr26, %struct.sv*** %sp, align 8
  store %struct.sv* %27, %struct.sv** %incdec.ptr26, align 8
  br label %do.end27

do.end27:                                         ; preds = %do.end25
  br label %do.end28

do.end28:                                         ; preds = %do.end27
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next29 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next29, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end28, %if.then11
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

declare dso_local i32 @Perl_my_fork() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_wait() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %childpid = alloca i32, align 4
  %argflags = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load i32, i32* @PL_signals, align 4
  %and = and i32 %5, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @Perl_wait4pid(i32 -1, i32* %argflags, i32 0)
  store i32 %call, i32* %childpid, align 4
  br label %if.end6

if.else:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %call1 = call i32 @Perl_wait4pid(i32 -1, i32* %argflags, i32 0)
  store i32 %call1, i32* %childpid, align 4
  %cmp = icmp eq i32 %call1, -1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %call2 = call i32* @__errno_location() #9
  %6 = load i32, i32* %call2, align 4
  %cmp3 = icmp eq i32 %6, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i32, i32* @PL_sig_pending, align 4
  %tobool4 = icmp ne i32 %8, 0
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  br i1 true, label %if.then5, label %if.end

cond.false:                                       ; preds = %while.body
  br i1 false, label %if.then5, label %if.end

if.then5:                                         ; preds = %cond.false, %cond.true
  %9 = load void ()*, void ()** @PL_signalhook, align 8
  call void %9()
  br label %if.end

if.end:                                           ; preds = %if.then5, %cond.false, %cond.true
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end6

if.end6:                                          ; preds = %while.end, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end6
  %10 = load i32, i32* %childpid, align 4
  %cmp7 = icmp sgt i32 %10, 0
  br i1 %cmp7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %do.body
  %11 = load i32, i32* %argflags, align 4
  br label %cond.end

cond.false9:                                      ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false9, %cond.true8
  %cond = phi i32 [ %11, %cond.true8 ], [ -1, %cond.false9 ]
  store i32 %cond, i32* @PL_statusvalue_posix, align 4
  %12 = load i32, i32* @PL_statusvalue_posix, align 4
  %cmp10 = icmp eq i32 %12, -1
  br i1 %cmp10, label %if.then11, label %if.else12

if.then11:                                        ; preds = %cond.end
  store i32 -1, i32* @PL_statusvalue, align 4
  br label %if.end31

if.else12:                                        ; preds = %cond.end
  %13 = load i32, i32* @PL_statusvalue_posix, align 4
  %and13 = and i32 %13, 127
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %cond.true15, label %cond.false17

cond.true15:                                      ; preds = %if.else12
  %14 = load i32, i32* @PL_statusvalue_posix, align 4
  %and16 = and i32 %14, 65280
  %shr = ashr i32 %and16, 8
  %shl = shl i32 %shr, 8
  br label %cond.end18

cond.false17:                                     ; preds = %if.else12
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi i32 [ %shl, %cond.true15 ], [ 0, %cond.false17 ]
  %15 = load i32, i32* @PL_statusvalue_posix, align 4
  %and20 = and i32 %15, 127
  %add = add nsw i32 %and20, 1
  %conv = trunc i32 %add to i8
  %conv21 = sext i8 %conv to i32
  %shr22 = ashr i32 %conv21, 1
  %cmp23 = icmp sgt i32 %shr22, 0
  br i1 %cmp23, label %cond.true25, label %cond.false28

cond.true25:                                      ; preds = %cond.end18
  %16 = load i32, i32* @PL_statusvalue_posix, align 4
  %and26 = and i32 %16, 127
  %and27 = and i32 %and26, 127
  br label %cond.end29

cond.false28:                                     ; preds = %cond.end18
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true25
  %cond30 = phi i32 [ %and27, %cond.true25 ], [ 0, %cond.false28 ]
  %or = or i32 %cond19, %cond30
  store i32 %or, i32* @PL_statusvalue, align 4
  br label %if.end31

if.end31:                                         ; preds = %cond.end29, %if.then11
  br label %do.end

do.end:                                           ; preds = %if.end31
  br label %do.body32

do.body32:                                        ; preds = %do.end
  %17 = load %struct.sv*, %struct.sv** %targ, align 8
  %18 = load i32, i32* %childpid, align 4
  %conv33 = sext i32 %18 to i64
  call void @Perl_sv_setiv(%struct.sv* %17, i64 %conv33)
  br label %do.body34

do.body34:                                        ; preds = %do.body32
  br label %do.body35

do.body35:                                        ; preds = %do.body34
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags, align 4
  %and36 = and i32 %20, 4194304
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %do.body35
  br i1 true, label %if.then40, label %if.end42

cond.false39:                                     ; preds = %do.body35
  br i1 false, label %if.then40, label %if.end42

if.then40:                                        ; preds = %cond.false39, %cond.true38
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %call41 = call i32 @Perl_mg_set(%struct.sv* %21)
  br label %if.end42

if.end42:                                         ; preds = %if.then40, %cond.false39, %cond.true38
  br label %do.end43

do.end43:                                         ; preds = %if.end42
  br label %do.body44

do.body44:                                        ; preds = %do.end43
  br label %do.body45

do.body45:                                        ; preds = %do.body44
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %22 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp46 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp46, label %cond.true48, label %cond.false49

cond.true48:                                      ; preds = %do.body45
  br i1 true, label %if.then50, label %if.end52

cond.false49:                                     ; preds = %do.body45
  br i1 false, label %if.then50, label %if.end52

if.then50:                                        ; preds = %cond.false49, %cond.true48
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call51 = call %struct.sv** @Perl_stack_grow(%struct.sv** %24, %struct.sv** %25, i64 1)
  store %struct.sv** %call51, %struct.sv*** %sp, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end52

if.end52:                                         ; preds = %if.then50, %cond.false49, %cond.true48
  br label %do.end53

do.end53:                                         ; preds = %if.end52
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %27, %struct.sv** %incdec.ptr, align 8
  br label %do.end54

do.end54:                                         ; preds = %do.end53
  br label %do.end55

do.end55:                                         ; preds = %do.end54
  br label %do.end56

do.end56:                                         ; preds = %do.end55
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %31
}

declare dso_local i32 @Perl_wait4pid(i32, i32*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_waitpid() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %optype = alloca i32, align 4
  %pid = alloca i32, align 4
  %result = alloca i32, align 4
  %argflags = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** @PL_Sv, align 8
  %7 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %11, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %12 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %13, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %12, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %optype, align 4
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %16, 2097408
  %cmp3 = icmp eq i32 %and2, 256
  br i1 %cmp3, label %cond.true5, label %cond.false9

cond.true5:                                       ; preds = %cond.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any6, align 8
  %20 = bitcast i8* %19 to %struct.xpviv*
  %xiv_u7 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %20, i32 0, i32 4
  %xivu_iv8 = bitcast %union._xivu* %xiv_u7 to i64*
  %21 = load i64, i64* %xivu_iv8, align 8
  br label %cond.end11

cond.false9:                                      ; preds = %cond.end
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %call10 = call i64 @Perl_sv_2iv_flags(%struct.sv* %23, i32 2)
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false9, %cond.true5
  %cond12 = phi i64 [ %21, %cond.true5 ], [ %call10, %cond.false9 ]
  %conv13 = trunc i64 %cond12 to i32
  store i32 %conv13, i32* %pid, align 4
  %24 = load i32, i32* @PL_signals, align 4
  %and14 = and i32 %24, 1
  %tobool = icmp ne i32 %and14, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end11
  %25 = load i32, i32* %pid, align 4
  %26 = load i32, i32* %optype, align 4
  %call15 = call i32 @Perl_wait4pid(i32 %25, i32* %argflags, i32 %26)
  store i32 %call15, i32* %result, align 4
  br label %if.end26

if.else:                                          ; preds = %cond.end11
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.else
  %27 = load i32, i32* %pid, align 4
  %28 = load i32, i32* %optype, align 4
  %call16 = call i32 @Perl_wait4pid(i32 %27, i32* %argflags, i32 %28)
  store i32 %call16, i32* %result, align 4
  %cmp17 = icmp eq i32 %call16, -1
  br i1 %cmp17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %call19 = call i32* @__errno_location() #9
  %29 = load i32, i32* %call19, align 4
  %cmp20 = icmp eq i32 %29, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %30 = phi i1 [ false, %while.cond ], [ %cmp20, %land.rhs ]
  br i1 %30, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %31 = load i32, i32* @PL_sig_pending, align 4
  %tobool22 = icmp ne i32 %31, 0
  br i1 %tobool22, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %while.body
  br i1 true, label %if.then25, label %if.end

cond.false24:                                     ; preds = %while.body
  br i1 false, label %if.then25, label %if.end

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %32 = load void ()*, void ()** @PL_signalhook, align 8
  call void %32()
  br label %if.end

if.end:                                           ; preds = %if.then25, %cond.false24, %cond.true23
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end26

if.end26:                                         ; preds = %while.end, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end26
  %33 = load i32, i32* %result, align 4
  %cmp27 = icmp sgt i32 %33, 0
  br i1 %cmp27, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %do.body
  %34 = load i32, i32* %argflags, align 4
  br label %cond.end31

cond.false30:                                     ; preds = %do.body
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ %34, %cond.true29 ], [ -1, %cond.false30 ]
  store i32 %cond32, i32* @PL_statusvalue_posix, align 4
  %35 = load i32, i32* @PL_statusvalue_posix, align 4
  %cmp33 = icmp eq i32 %35, -1
  br i1 %cmp33, label %if.then35, label %if.else36

if.then35:                                        ; preds = %cond.end31
  store i32 -1, i32* @PL_statusvalue, align 4
  br label %if.end57

if.else36:                                        ; preds = %cond.end31
  %36 = load i32, i32* @PL_statusvalue_posix, align 4
  %and37 = and i32 %36, 127
  %cmp38 = icmp eq i32 %and37, 0
  br i1 %cmp38, label %cond.true40, label %cond.false42

cond.true40:                                      ; preds = %if.else36
  %37 = load i32, i32* @PL_statusvalue_posix, align 4
  %and41 = and i32 %37, 65280
  %shr = ashr i32 %and41, 8
  %shl = shl i32 %shr, 8
  br label %cond.end43

cond.false42:                                     ; preds = %if.else36
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi i32 [ %shl, %cond.true40 ], [ 0, %cond.false42 ]
  %38 = load i32, i32* @PL_statusvalue_posix, align 4
  %and45 = and i32 %38, 127
  %add = add nsw i32 %and45, 1
  %conv46 = trunc i32 %add to i8
  %conv47 = sext i8 %conv46 to i32
  %shr48 = ashr i32 %conv47, 1
  %cmp49 = icmp sgt i32 %shr48, 0
  br i1 %cmp49, label %cond.true51, label %cond.false54

cond.true51:                                      ; preds = %cond.end43
  %39 = load i32, i32* @PL_statusvalue_posix, align 4
  %and52 = and i32 %39, 127
  %and53 = and i32 %and52, 127
  br label %cond.end55

cond.false54:                                     ; preds = %cond.end43
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi i32 [ %and53, %cond.true51 ], [ 0, %cond.false54 ]
  %or = or i32 %cond44, %cond56
  store i32 %or, i32* @PL_statusvalue, align 4
  br label %if.end57

if.end57:                                         ; preds = %cond.end55, %if.then35
  br label %do.end

do.end:                                           ; preds = %if.end57
  br label %do.body58

do.body58:                                        ; preds = %do.end
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %41 = load i32, i32* %result, align 4
  %conv59 = sext i32 %41 to i64
  call void @Perl_sv_setiv(%struct.sv* %40, i64 %conv59)
  br label %do.body60

do.body60:                                        ; preds = %do.body58
  br label %do.body61

do.body61:                                        ; preds = %do.body60
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %43, 4194304
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %do.body61
  br i1 true, label %if.then67, label %if.end69

cond.false66:                                     ; preds = %do.body61
  br i1 false, label %if.then67, label %if.end69

if.then67:                                        ; preds = %cond.false66, %cond.true65
  %44 = load %struct.sv*, %struct.sv** %targ, align 8
  %call68 = call i32 @Perl_mg_set(%struct.sv* %44)
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %cond.false66, %cond.true65
  br label %do.end70

do.end70:                                         ; preds = %if.end69
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %45, %struct.sv** %46, align 8
  br label %do.end71

do.end71:                                         ; preds = %do.end70
  br label %do.end72

do.end72:                                         ; preds = %do.end71
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %47, %struct.sv*** @PL_stack_sp, align 8
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_system() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %value = alloca i32, align 4
  %result = alloca i32, align 4
  %childpid = alloca i32, align 4
  %pp = alloca [2 x i32], align 4
  %did_pipes = alloca i32, align 4
  %ihand = alloca void (i32)*, align 8
  %qhand = alloca void (i32)*, align 8
  %status = alloca i32, align 4
  %errkid = alloca i32, align 4
  %n = alloca i32, align 4
  %n1 = alloca i64, align 8
  %really = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load i8, i8* @PL_tainting, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %if.then, label %if.end22

if.then:                                          ; preds = %entry
  %11 = load i8, i8* @PL_tainting, align 1
  %tobool1 = trunc i8 %11 to i1
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %if.then3, label %if.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %if.then3, label %if.end

if.then3:                                         ; preds = %cond.false, %cond.true
  call void @Perl_taint_env()
  br label %if.end

if.end:                                           ; preds = %if.then3, %cond.false, %cond.true
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %if.end
  %12 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %12, i32 1
  store %struct.sv** %incdec.ptr4, %struct.sv*** %mark, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp = icmp ule %struct.sv** %incdec.ptr4, %13
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 2098176
  %cmp6 = icmp eq i32 %and, 1024
  br i1 %cmp6, label %cond.true8, label %cond.false10

cond.true8:                                       ; preds = %while.body
  %17 = load %struct.sv**, %struct.sv*** %mark, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %19 = load i8*, i8** %svu_pv, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %19, i64 0
  br label %cond.end

cond.false10:                                     ; preds = %while.body
  %20 = load %struct.sv**, %struct.sv*** %mark, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %21, i64* null, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true8
  %cond = phi i8* [ %add.ptr9, %cond.true8 ], [ %call, %cond.false10 ]
  %22 = load i8, i8* @PL_tainted, align 1
  %tobool11 = trunc i8 %22 to i1
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %cond.end
  br label %while.end

if.end13:                                         ; preds = %cond.end
  br label %while.cond

while.end:                                        ; preds = %if.then12, %while.cond
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %24 = load i32, i32* %origmark, align 4
  %idx.ext14 = sext i32 %24 to i64
  %add.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idx.ext14
  store %struct.sv** %add.ptr15, %struct.sv*** %mark, align 8
  %25 = load i8, i8* @PL_tainting, align 1
  %tobool16 = trunc i8 %25 to i1
  br i1 %tobool16, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %while.end
  br i1 true, label %if.then20, label %if.end21

cond.false19:                                     ; preds = %while.end
  br i1 false, label %if.then20, label %if.end21

if.then20:                                        ; preds = %cond.false19, %cond.true18
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i64 0, i64 0))
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %cond.false19, %cond.true18
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %entry
  %call23 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** null)
  store i32 0, i32* %did_pipes, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 0
  %call24 = call i32 @pipe(i32* %arraydecay) #3
  %cmp25 = icmp sge i32 %call24, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end22
  store i32 1, i32* %did_pipes, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.end22
  br label %while.cond29

while.cond29:                                     ; preds = %if.end76, %if.end28
  %call30 = call i32 @Perl_my_fork()
  store i32 %call30, i32* %childpid, align 4
  %cmp31 = icmp eq i32 %call30, -1
  br i1 %cmp31, label %while.body33, label %while.end78

while.body33:                                     ; preds = %while.cond29
  %call34 = call i32* @__errno_location() #9
  %26 = load i32, i32* %call34, align 4
  %cmp35 = icmp ne i32 %26, 11
  br i1 %cmp35, label %if.then37, label %if.end76

if.then37:                                        ; preds = %while.body33
  store i32 -1, i32* %value, align 4
  %27 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %28 = load i32, i32* %origmark, align 4
  %idx.ext38 = sext i32 %28 to i64
  %add.ptr39 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i64 %idx.ext38
  store %struct.sv** %add.ptr39, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %if.then37
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %30 = load i32, i32* %value, align 4
  %conv40 = sext i32 %30 to i64
  call void @Perl_sv_setiv(%struct.sv* %29, i64 %conv40)
  br label %do.body41

do.body41:                                        ; preds = %do.body
  br label %do.body42

do.body42:                                        ; preds = %do.body41
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %32, 4194304
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true46, label %cond.false47

cond.true46:                                      ; preds = %do.body42
  br i1 true, label %if.then48, label %if.end50

cond.false47:                                     ; preds = %do.body42
  br i1 false, label %if.then48, label %if.end50

if.then48:                                        ; preds = %cond.false47, %cond.true46
  %33 = load %struct.sv*, %struct.sv** %targ, align 8
  %call49 = call i32 @Perl_mg_set(%struct.sv* %33)
  br label %if.end50

if.end50:                                         ; preds = %if.then48, %cond.false47, %cond.true46
  br label %do.end

do.end:                                           ; preds = %if.end50
  br label %do.body51

do.body51:                                        ; preds = %do.end
  br label %do.body52

do.body52:                                        ; preds = %do.body51
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast53 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.rhs.cast54 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.sub55 = sub i64 %sub.ptr.lhs.cast53, %sub.ptr.rhs.cast54
  %sub.ptr.div56 = sdiv exact i64 %sub.ptr.sub55, 8
  %cmp57 = icmp slt i64 %sub.ptr.div56, 1
  br i1 %cmp57, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %do.body52
  br i1 true, label %if.then61, label %if.end63

cond.false60:                                     ; preds = %do.body52
  br i1 false, label %if.then61, label %if.end63

if.then61:                                        ; preds = %cond.false60, %cond.true59
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call62 = call %struct.sv** @Perl_stack_grow(%struct.sv** %36, %struct.sv** %37, i64 1)
  store %struct.sv** %call62, %struct.sv*** %sp, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %cond.false60, %cond.true59
  br label %do.end64

do.end64:                                         ; preds = %if.end63
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %40, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %sp, align 8
  store %struct.sv* %39, %struct.sv** %incdec.ptr65, align 8
  br label %do.end66

do.end66:                                         ; preds = %do.end64
  br label %do.end67

do.end67:                                         ; preds = %do.end66
  br label %do.end68

do.end68:                                         ; preds = %do.end67
  %41 = load i32, i32* %did_pipes, align 4
  %tobool69 = icmp ne i32 %41, 0
  br i1 %tobool69, label %if.then70, label %if.end75

if.then70:                                        ; preds = %do.end68
  %arrayidx71 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 0
  %42 = load i32, i32* %arrayidx71, align 4
  %call72 = call i32 @close(i32 %42)
  %arrayidx73 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 1
  %43 = load i32, i32* %arrayidx73, align 4
  %call74 = call i32 @close(i32 %43)
  br label %if.end75

if.end75:                                         ; preds = %if.then70, %do.end68
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %44, %struct.sv*** @PL_stack_sp, align 8
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  %46 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %46, %struct.op** %retval, align 8
  br label %return

if.end76:                                         ; preds = %while.body33
  %call77 = call i32 @sleep(i32 5)
  br label %while.cond29

while.end78:                                      ; preds = %while.cond29
  %47 = load i32, i32* %childpid, align 4
  %cmp79 = icmp sgt i32 %47, 0
  br i1 %cmp79, label %if.then81, label %if.end232

if.then81:                                        ; preds = %while.end78
  %48 = load i32, i32* %did_pipes, align 4
  %tobool82 = icmp ne i32 %48, 0
  br i1 %tobool82, label %if.then83, label %if.end86

if.then83:                                        ; preds = %if.then81
  %arrayidx84 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 1
  %49 = load i32, i32* %arrayidx84, align 4
  %call85 = call i32 @close(i32 %49)
  br label %if.end86

if.end86:                                         ; preds = %if.then83, %if.then81
  br label %do.body87

do.body87:                                        ; preds = %land.end, %if.end86
  %50 = load i32, i32* %childpid, align 4
  %call88 = call i32 @Perl_wait4pid(i32 %50, i32* %status, i32 0)
  store i32 %call88, i32* %result, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body87
  %51 = load i32, i32* %result, align 4
  %cmp89 = icmp eq i32 %51, -1
  br i1 %cmp89, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %call91 = call i32* @__errno_location() #9
  %52 = load i32, i32* %call91, align 4
  %cmp92 = icmp eq i32 %52, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %53 = phi i1 [ false, %do.cond ], [ %cmp92, %land.rhs ]
  br i1 %53, label %do.body87, label %do.end94

do.end94:                                         ; preds = %land.end
  br label %do.body95

do.body95:                                        ; preds = %do.end94
  %54 = load i32, i32* %result, align 4
  %cmp96 = icmp eq i32 %54, -1
  br i1 %cmp96, label %cond.true98, label %cond.false99

cond.true98:                                      ; preds = %do.body95
  br label %cond.end100

cond.false99:                                     ; preds = %do.body95
  %55 = load i32, i32* %status, align 4
  br label %cond.end100

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ -1, %cond.true98 ], [ %55, %cond.false99 ]
  store i32 %cond101, i32* @PL_statusvalue_posix, align 4
  %56 = load i32, i32* @PL_statusvalue_posix, align 4
  %cmp102 = icmp eq i32 %56, -1
  br i1 %cmp102, label %if.then104, label %if.else

if.then104:                                       ; preds = %cond.end100
  store i32 -1, i32* @PL_statusvalue, align 4
  br label %if.end125

if.else:                                          ; preds = %cond.end100
  %57 = load i32, i32* @PL_statusvalue_posix, align 4
  %and105 = and i32 %57, 127
  %cmp106 = icmp eq i32 %and105, 0
  br i1 %cmp106, label %cond.true108, label %cond.false110

cond.true108:                                     ; preds = %if.else
  %58 = load i32, i32* @PL_statusvalue_posix, align 4
  %and109 = and i32 %58, 65280
  %shr = ashr i32 %and109, 8
  %shl = shl i32 %shr, 8
  br label %cond.end111

cond.false110:                                    ; preds = %if.else
  br label %cond.end111

cond.end111:                                      ; preds = %cond.false110, %cond.true108
  %cond112 = phi i32 [ %shl, %cond.true108 ], [ 0, %cond.false110 ]
  %59 = load i32, i32* @PL_statusvalue_posix, align 4
  %and113 = and i32 %59, 127
  %add = add nsw i32 %and113, 1
  %conv114 = trunc i32 %add to i8
  %conv115 = sext i8 %conv114 to i32
  %shr116 = ashr i32 %conv115, 1
  %cmp117 = icmp sgt i32 %shr116, 0
  br i1 %cmp117, label %cond.true119, label %cond.false122

cond.true119:                                     ; preds = %cond.end111
  %60 = load i32, i32* @PL_statusvalue_posix, align 4
  %and120 = and i32 %60, 127
  %and121 = and i32 %and120, 127
  br label %cond.end123

cond.false122:                                    ; preds = %cond.end111
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false122, %cond.true119
  %cond124 = phi i32 [ %and121, %cond.true119 ], [ 0, %cond.false122 ]
  %or = or i32 %cond112, %cond124
  store i32 %or, i32* @PL_statusvalue, align 4
  br label %if.end125

if.end125:                                        ; preds = %cond.end123, %if.then104
  br label %do.end127

do.end127:                                        ; preds = %if.end125
  call void @Perl_do_execfree()
  %61 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %62 = load i32, i32* %origmark, align 4
  %idx.ext128 = sext i32 %62 to i64
  %add.ptr129 = getelementptr inbounds %struct.sv*, %struct.sv** %61, i64 %idx.ext128
  store %struct.sv** %add.ptr129, %struct.sv*** %sp, align 8
  %63 = load i32, i32* %did_pipes, align 4
  %tobool130 = icmp ne i32 %63, 0
  br i1 %tobool130, label %if.then131, label %if.end194

if.then131:                                       ; preds = %do.end127
  store i32 0, i32* %n, align 4
  br label %while.cond132

while.cond132:                                    ; preds = %if.end145, %if.then131
  %64 = load i32, i32* %n, align 4
  %conv133 = zext i32 %64 to i64
  %cmp134 = icmp ult i64 %conv133, 4
  br i1 %cmp134, label %while.body136, label %while.end149

while.body136:                                    ; preds = %while.cond132
  %arrayidx137 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 0
  %65 = load i32, i32* %arrayidx137, align 4
  %66 = bitcast i32* %errkid to i8*
  %67 = load i32, i32* %n, align 4
  %idx.ext138 = zext i32 %67 to i64
  %add.ptr139 = getelementptr inbounds i8, i8* %66, i64 %idx.ext138
  %68 = load i32, i32* %n, align 4
  %conv140 = zext i32 %68 to i64
  %sub = sub i64 4, %conv140
  %call141 = call i64 @read(i32 %65, i8* %add.ptr139, i64 %sub)
  store i64 %call141, i64* %n1, align 8
  %69 = load i64, i64* %n1, align 8
  %cmp142 = icmp sle i64 %69, 0
  br i1 %cmp142, label %if.then144, label %if.end145

if.then144:                                       ; preds = %while.body136
  br label %while.end149

if.end145:                                        ; preds = %while.body136
  %70 = load i64, i64* %n1, align 8
  %71 = load i32, i32* %n, align 4
  %conv146 = zext i32 %71 to i64
  %add147 = add nsw i64 %conv146, %70
  %conv148 = trunc i64 %add147 to i32
  store i32 %conv148, i32* %n, align 4
  br label %while.cond132

while.end149:                                     ; preds = %if.then144, %while.cond132
  %arrayidx150 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 0
  %72 = load i32, i32* %arrayidx150, align 4
  %call151 = call i32 @close(i32 %72)
  %73 = load i32, i32* %n, align 4
  %tobool152 = icmp ne i32 %73, 0
  br i1 %tobool152, label %if.then153, label %if.end193

if.then153:                                       ; preds = %while.end149
  %74 = load i32, i32* %n, align 4
  %conv154 = zext i32 %74 to i64
  %cmp155 = icmp ne i64 %conv154, 4
  br i1 %cmp155, label %if.then157, label %if.end159

if.then157:                                       ; preds = %if.then153
  %75 = load i32, i32* %n, align 4
  %call158 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.78, i64 0, i64 0), i32 %75)
  store %struct.op* %call158, %struct.op** %retval, align 8
  br label %return

if.end159:                                        ; preds = %if.then153
  %76 = load i32, i32* %errkid, align 4
  %call160 = call i32* @__errno_location() #9
  store i32 %76, i32* %call160, align 4
  br label %do.body161

do.body161:                                       ; preds = %if.end159
  store i32 -1, i32* @PL_statusvalue_posix, align 4
  %77 = load i32, i32* @PL_statusvalue_posix, align 4
  %cmp162 = icmp eq i32 %77, -1
  br i1 %cmp162, label %if.then164, label %if.else165

if.then164:                                       ; preds = %do.body161
  store i32 -1, i32* @PL_statusvalue, align 4
  br label %if.end190

if.else165:                                       ; preds = %do.body161
  %78 = load i32, i32* @PL_statusvalue_posix, align 4
  %and166 = and i32 %78, 127
  %cmp167 = icmp eq i32 %and166, 0
  br i1 %cmp167, label %cond.true169, label %cond.false173

cond.true169:                                     ; preds = %if.else165
  %79 = load i32, i32* @PL_statusvalue_posix, align 4
  %and170 = and i32 %79, 65280
  %shr171 = ashr i32 %and170, 8
  %shl172 = shl i32 %shr171, 8
  br label %cond.end174

cond.false173:                                    ; preds = %if.else165
  br label %cond.end174

cond.end174:                                      ; preds = %cond.false173, %cond.true169
  %cond175 = phi i32 [ %shl172, %cond.true169 ], [ 0, %cond.false173 ]
  %80 = load i32, i32* @PL_statusvalue_posix, align 4
  %and176 = and i32 %80, 127
  %add177 = add nsw i32 %and176, 1
  %conv178 = trunc i32 %add177 to i8
  %conv179 = sext i8 %conv178 to i32
  %shr180 = ashr i32 %conv179, 1
  %cmp181 = icmp sgt i32 %shr180, 0
  br i1 %cmp181, label %cond.true183, label %cond.false186

cond.true183:                                     ; preds = %cond.end174
  %81 = load i32, i32* @PL_statusvalue_posix, align 4
  %and184 = and i32 %81, 127
  %and185 = and i32 %and184, 127
  br label %cond.end187

cond.false186:                                    ; preds = %cond.end174
  br label %cond.end187

cond.end187:                                      ; preds = %cond.false186, %cond.true183
  %cond188 = phi i32 [ %and185, %cond.true183 ], [ 0, %cond.false186 ]
  %or189 = or i32 %cond175, %cond188
  store i32 %or189, i32* @PL_statusvalue, align 4
  br label %if.end190

if.end190:                                        ; preds = %cond.end187, %if.then164
  br label %do.end192

do.end192:                                        ; preds = %if.end190
  br label %if.end193

if.end193:                                        ; preds = %do.end192, %while.end149
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %do.end127
  br label %do.body195

do.body195:                                       ; preds = %if.end194
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  %83 = load i32, i32* @PL_statusvalue, align 4
  %conv196 = sext i32 %83 to i64
  call void @Perl_sv_setiv(%struct.sv* %82, i64 %conv196)
  br label %do.body197

do.body197:                                       ; preds = %do.body195
  br label %do.body198

do.body198:                                       ; preds = %do.body197
  %84 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags199 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags199, align 4
  %and200 = and i32 %85, 4194304
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %cond.true202, label %cond.false203

cond.true202:                                     ; preds = %do.body198
  br i1 true, label %if.then204, label %if.end206

cond.false203:                                    ; preds = %do.body198
  br i1 false, label %if.then204, label %if.end206

if.then204:                                       ; preds = %cond.false203, %cond.true202
  %86 = load %struct.sv*, %struct.sv** %targ, align 8
  %call205 = call i32 @Perl_mg_set(%struct.sv* %86)
  br label %if.end206

if.end206:                                        ; preds = %if.then204, %cond.false203, %cond.true202
  br label %do.end208

do.end208:                                        ; preds = %if.end206
  br label %do.body209

do.body209:                                       ; preds = %do.end208
  br label %do.body210

do.body210:                                       ; preds = %do.body209
  %87 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast211 = ptrtoint %struct.sv** %87 to i64
  %sub.ptr.rhs.cast212 = ptrtoint %struct.sv** %88 to i64
  %sub.ptr.sub213 = sub i64 %sub.ptr.lhs.cast211, %sub.ptr.rhs.cast212
  %sub.ptr.div214 = sdiv exact i64 %sub.ptr.sub213, 8
  %cmp215 = icmp slt i64 %sub.ptr.div214, 1
  br i1 %cmp215, label %cond.true217, label %cond.false218

cond.true217:                                     ; preds = %do.body210
  br i1 true, label %if.then219, label %if.end221

cond.false218:                                    ; preds = %do.body210
  br i1 false, label %if.then219, label %if.end221

if.then219:                                       ; preds = %cond.false218, %cond.true217
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call220 = call %struct.sv** @Perl_stack_grow(%struct.sv** %89, %struct.sv** %90, i64 1)
  store %struct.sv** %call220, %struct.sv*** %sp, align 8
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %cond.false218, %cond.true217
  br label %do.end223

do.end223:                                        ; preds = %if.end221
  %92 = load %struct.sv*, %struct.sv** %targ, align 8
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr224 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr224, %struct.sv*** %sp, align 8
  store %struct.sv* %92, %struct.sv** %incdec.ptr224, align 8
  br label %do.end226

do.end226:                                        ; preds = %do.end223
  br label %do.end228

do.end228:                                        ; preds = %do.end226
  br label %do.end230

do.end230:                                        ; preds = %do.end228
  %94 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %94, %struct.sv*** @PL_stack_sp, align 8
  %95 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next231 = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 0
  %96 = load %struct.op*, %struct.op** %op_next231, align 8
  store %struct.op* %96, %struct.op** %retval, align 8
  br label %return

if.end232:                                        ; preds = %while.end78
  %97 = load i32, i32* %did_pipes, align 4
  %tobool233 = icmp ne i32 %97, 0
  br i1 %tobool233, label %if.then234, label %if.end245

if.then234:                                       ; preds = %if.end232
  %arrayidx235 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 0
  %98 = load i32, i32* %arrayidx235, align 4
  %call236 = call i32 @close(i32 %98)
  %arrayidx237 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 1
  %99 = load i32, i32* %arrayidx237, align 4
  %call238 = call i32 (i32, i32, ...) @fcntl64(i32 %99, i32 2, i32 1)
  %cmp239 = icmp slt i32 %call238, 0
  br i1 %cmp239, label %if.then241, label %if.end244

if.then241:                                       ; preds = %if.then234
  %100 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr242 = getelementptr inbounds %struct.sv*, %struct.sv** %100, i32 1
  store %struct.sv** %incdec.ptr242, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr242, align 8
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %101, %struct.sv*** @PL_stack_sp, align 8
  %102 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next243 = getelementptr inbounds %struct.op, %struct.op* %102, i32 0, i32 0
  %103 = load %struct.op*, %struct.op** %op_next243, align 8
  store %struct.op* %103, %struct.op** %retval, align 8
  br label %return

if.end244:                                        ; preds = %if.then234
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %if.end232
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 5
  %105 = load i8, i8* %op_flags, align 2
  %conv246 = zext i8 %105 to i32
  %and247 = and i32 %conv246, 64
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %if.then249, label %if.else254

if.then249:                                       ; preds = %if.end245
  %106 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr250 = getelementptr inbounds %struct.sv*, %struct.sv** %106, i32 1
  store %struct.sv** %incdec.ptr250, %struct.sv*** %mark, align 8
  %107 = load %struct.sv*, %struct.sv** %incdec.ptr250, align 8
  store %struct.sv* %107, %struct.sv** %really, align 8
  %108 = load %struct.sv*, %struct.sv** %really, align 8
  %109 = load %struct.sv**, %struct.sv*** %mark, align 8
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx251 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 1
  %111 = load i32, i32* %arrayidx251, align 4
  %112 = load i32, i32* %did_pipes, align 4
  %call252 = call zeroext i1 @Perl_do_aexec5(%struct.sv* %108, %struct.sv** %109, %struct.sv** %110, i32 %111, i32 %112)
  %conv253 = zext i1 %call252 to i32
  store i32 %conv253, i32* %value, align 4
  br label %if.end282

if.else254:                                       ; preds = %if.end245
  %113 = load %struct.sv**, %struct.sv*** %sp, align 8
  %114 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast255 = ptrtoint %struct.sv** %113 to i64
  %sub.ptr.rhs.cast256 = ptrtoint %struct.sv** %114 to i64
  %sub.ptr.sub257 = sub i64 %sub.ptr.lhs.cast255, %sub.ptr.rhs.cast256
  %sub.ptr.div258 = sdiv exact i64 %sub.ptr.sub257, 8
  %cmp259 = icmp ne i64 %sub.ptr.div258, 1
  br i1 %cmp259, label %if.then261, label %if.else265

if.then261:                                       ; preds = %if.else254
  %115 = load %struct.sv**, %struct.sv*** %mark, align 8
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx262 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 1
  %117 = load i32, i32* %arrayidx262, align 4
  %118 = load i32, i32* %did_pipes, align 4
  %call263 = call zeroext i1 @Perl_do_aexec5(%struct.sv* null, %struct.sv** %115, %struct.sv** %116, i32 %117, i32 %118)
  %conv264 = zext i1 %call263 to i32
  store i32 %conv264, i32* %value, align 4
  br label %if.end281

if.else265:                                       ; preds = %if.else254
  %119 = load %struct.sv**, %struct.sv*** %sp, align 8
  %120 = load %struct.sv*, %struct.sv** %119, align 8
  %call266 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %120, i32 1538)
  store %struct.sv* %call266, %struct.sv** @PL_Sv, align 8
  %121 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %122, 2098176
  %cmp269 = icmp eq i32 %and268, 1024
  br i1 %cmp269, label %cond.true271, label %cond.false274

cond.true271:                                     ; preds = %if.else265
  %123 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_u272 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 3
  %svu_pv273 = bitcast %union.anon* %sv_u272 to i8**
  %124 = load i8*, i8** %svu_pv273, align 8
  br label %cond.end276

cond.false274:                                    ; preds = %if.else265
  %125 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call275 = call i8* @Perl_sv_2pv_flags(%struct.sv* %125, i64* null, i32 2)
  br label %cond.end276

cond.end276:                                      ; preds = %cond.false274, %cond.true271
  %cond277 = phi i8* [ %124, %cond.true271 ], [ %call275, %cond.false274 ]
  %arrayidx278 = getelementptr inbounds [2 x i32], [2 x i32]* %pp, i64 0, i64 1
  %126 = load i32, i32* %arrayidx278, align 4
  %127 = load i32, i32* %did_pipes, align 4
  %call279 = call zeroext i1 @Perl_do_exec3(i8* %cond277, i32 %126, i32 %127)
  %conv280 = zext i1 %call279 to i32
  store i32 %conv280, i32* %value, align 4
  br label %if.end281

if.end281:                                        ; preds = %cond.end276, %if.then261
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %if.then249
  call void @_exit(i32 -1) #11
  unreachable

return:                                           ; preds = %if.then241, %do.end230, %if.then157, %if.end75
  %128 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %128
}

declare dso_local void @Perl_taint_env() #1

; Function Attrs: nounwind
declare dso_local i32 @pipe(i32*) #6

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local void @Perl_do_execfree() #1

declare dso_local zeroext i1 @Perl_do_aexec5(%struct.sv*, %struct.sv**, %struct.sv**, i32, i32) #1

declare dso_local zeroext i1 @Perl_do_exec3(i8*, i32, i32) #1

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #7

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_exec() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %value = alloca i32, align 4
  %really = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load i8, i8* @PL_tainting, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %if.then, label %if.end22

if.then:                                          ; preds = %entry
  %11 = load i8, i8* @PL_tainting, align 1
  %tobool1 = trunc i8 %11 to i1
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %if.then3, label %if.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %if.then3, label %if.end

if.then3:                                         ; preds = %cond.false, %cond.true
  call void @Perl_taint_env()
  br label %if.end

if.end:                                           ; preds = %if.then3, %cond.false, %cond.true
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %if.end
  %12 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %12, i32 1
  store %struct.sv** %incdec.ptr4, %struct.sv*** %mark, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp = icmp ule %struct.sv** %incdec.ptr4, %13
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 2098176
  %cmp6 = icmp eq i32 %and, 1024
  br i1 %cmp6, label %cond.true8, label %cond.false10

cond.true8:                                       ; preds = %while.body
  %17 = load %struct.sv**, %struct.sv*** %mark, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %19 = load i8*, i8** %svu_pv, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %19, i64 0
  br label %cond.end

cond.false10:                                     ; preds = %while.body
  %20 = load %struct.sv**, %struct.sv*** %mark, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %21, i64* null, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true8
  %cond = phi i8* [ %add.ptr9, %cond.true8 ], [ %call, %cond.false10 ]
  %22 = load i8, i8* @PL_tainted, align 1
  %tobool11 = trunc i8 %22 to i1
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %cond.end
  br label %while.end

if.end13:                                         ; preds = %cond.end
  br label %while.cond

while.end:                                        ; preds = %if.then12, %while.cond
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %24 = load i32, i32* %origmark, align 4
  %idx.ext14 = sext i32 %24 to i64
  %add.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idx.ext14
  store %struct.sv** %add.ptr15, %struct.sv*** %mark, align 8
  %25 = load i8, i8* @PL_tainting, align 1
  %tobool16 = trunc i8 %25 to i1
  br i1 %tobool16, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %while.end
  br i1 true, label %if.then20, label %if.end21

cond.false19:                                     ; preds = %while.end
  br i1 false, label %if.then20, label %if.end21

if.then20:                                        ; preds = %cond.false19, %cond.true18
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.79, i64 0, i64 0))
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %cond.false19, %cond.true18
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %entry
  %call23 = call i32 @Perl_PerlIO_flush(%struct._PerlIO** null)
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 5
  %27 = load i8, i8* %op_flags, align 2
  %conv24 = zext i8 %27 to i32
  %and25 = and i32 %conv24, 64
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.end22
  %28 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 1
  store %struct.sv** %incdec.ptr28, %struct.sv*** %mark, align 8
  %29 = load %struct.sv*, %struct.sv** %incdec.ptr28, align 8
  store %struct.sv* %29, %struct.sv** %really, align 8
  %30 = load %struct.sv*, %struct.sv** %really, align 8
  %31 = load %struct.sv**, %struct.sv*** %mark, align 8
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call29 = call zeroext i1 @Perl_do_aexec5(%struct.sv* %30, %struct.sv** %31, %struct.sv** %32, i32 0, i32 0)
  %conv30 = zext i1 %call29 to i32
  store i32 %conv30, i32* %value, align 4
  br label %if.end56

if.else:                                          ; preds = %if.end22
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %34 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast31 = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.rhs.cast32 = ptrtoint %struct.sv** %34 to i64
  %sub.ptr.sub33 = sub i64 %sub.ptr.lhs.cast31, %sub.ptr.rhs.cast32
  %sub.ptr.div34 = sdiv exact i64 %sub.ptr.sub33, 8
  %cmp35 = icmp ne i64 %sub.ptr.div34, 1
  br i1 %cmp35, label %if.then37, label %if.else40

if.then37:                                        ; preds = %if.else
  %35 = load %struct.sv**, %struct.sv*** %mark, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call38 = call zeroext i1 @Perl_do_aexec5(%struct.sv* null, %struct.sv** %35, %struct.sv** %36, i32 0, i32 0)
  %conv39 = zext i1 %call38 to i32
  store i32 %conv39, i32* %value, align 4
  br label %if.end55

if.else40:                                        ; preds = %if.else
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  %call41 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %38, i32 1538)
  store %struct.sv* %call41, %struct.sv** @PL_Sv, align 8
  %39 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %40, 2098176
  %cmp44 = icmp eq i32 %and43, 1024
  br i1 %cmp44, label %cond.true46, label %cond.false49

cond.true46:                                      ; preds = %if.else40
  %41 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_u47 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_pv48 = bitcast %union.anon* %sv_u47 to i8**
  %42 = load i8*, i8** %svu_pv48, align 8
  br label %cond.end51

cond.false49:                                     ; preds = %if.else40
  %43 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call50 = call i8* @Perl_sv_2pv_flags(%struct.sv* %43, i64* null, i32 2)
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false49, %cond.true46
  %cond52 = phi i8* [ %42, %cond.true46 ], [ %call50, %cond.false49 ]
  %call53 = call zeroext i1 @Perl_do_exec3(i8* %cond52, i32 0, i32 0)
  %conv54 = zext i1 %call53 to i32
  store i32 %conv54, i32* %value, align 4
  br label %if.end55

if.end55:                                         ; preds = %cond.end51, %if.then37
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then27
  %44 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %45 = load i32, i32* %origmark, align 4
  %idx.ext57 = sext i32 %45 to i64
  %add.ptr58 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i64 %idx.ext57
  store %struct.sv** %add.ptr58, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end56
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load i32, i32* %value, align 4
  %conv59 = sext i32 %47 to i64
  call void @Perl_sv_setiv(%struct.sv* %46, i64 %conv59)
  br label %do.body60

do.body60:                                        ; preds = %do.body
  br label %do.body61

do.body61:                                        ; preds = %do.body60
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %49, 4194304
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %do.body61
  br i1 true, label %if.then67, label %if.end69

cond.false66:                                     ; preds = %do.body61
  br i1 false, label %if.then67, label %if.end69

if.then67:                                        ; preds = %cond.false66, %cond.true65
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %call68 = call i32 @Perl_mg_set(%struct.sv* %50)
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %cond.false66, %cond.true65
  br label %do.end

do.end:                                           ; preds = %if.end69
  br label %do.body70

do.body70:                                        ; preds = %do.end
  br label %do.body71

do.body71:                                        ; preds = %do.body70
  %51 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast72 = ptrtoint %struct.sv** %51 to i64
  %sub.ptr.rhs.cast73 = ptrtoint %struct.sv** %52 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  %sub.ptr.div75 = sdiv exact i64 %sub.ptr.sub74, 8
  %cmp76 = icmp slt i64 %sub.ptr.div75, 1
  br i1 %cmp76, label %cond.true78, label %cond.false79

cond.true78:                                      ; preds = %do.body71
  br i1 true, label %if.then80, label %if.end82

cond.false79:                                     ; preds = %do.body71
  br i1 false, label %if.then80, label %if.end82

if.then80:                                        ; preds = %cond.false79, %cond.true78
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call81 = call %struct.sv** @Perl_stack_grow(%struct.sv** %53, %struct.sv** %54, i64 1)
  store %struct.sv** %call81, %struct.sv*** %sp, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %cond.false79, %cond.true78
  br label %do.end83

do.end83:                                         ; preds = %if.end82
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %57, i32 1
  store %struct.sv** %incdec.ptr84, %struct.sv*** %sp, align 8
  store %struct.sv* %56, %struct.sv** %incdec.ptr84, align 8
  br label %do.end85

do.end85:                                         ; preds = %do.end83
  br label %do.end86

do.end86:                                         ; preds = %do.end85
  br label %do.end87

do.end87:                                         ; preds = %do.end86
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %58, %struct.sv*** @PL_stack_sp, align 8
  %59 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 0
  %60 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %60
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_getppid() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_getpgrp() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.81, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_setpgrp() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.82, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_getpriority() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_setpriority() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_time() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %targ, align 8
  %call = call i64 @time(i64* null) #3
  call void @Perl_sv_setiv(%struct.sv* %5, i64 %call)
  br label %do.body1

do.body1:                                         ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.body1
  %6 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 4194304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body2
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body2
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %8 = load %struct.sv*, %struct.sv** %targ, align 8
  %call3 = call i32 @Perl_mg_set(%struct.sv* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body4

do.body4:                                         ; preds = %do.end
  br label %do.body5

do.body5:                                         ; preds = %do.body4
  %9 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %do.body5
  br i1 true, label %if.then8, label %if.end10

cond.false7:                                      ; preds = %do.body5
  br i1 false, label %if.then8, label %if.end10

if.then8:                                         ; preds = %cond.false7, %cond.true6
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call9 = call %struct.sv** @Perl_stack_grow(%struct.sv** %11, %struct.sv** %12, i64 1)
  store %struct.sv** %call9, %struct.sv*** %sp, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %cond.false7, %cond.true6
  br label %do.end11

do.end11:                                         ; preds = %if.end10
  %14 = load %struct.sv*, %struct.sv** %targ, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %14, %struct.sv** %incdec.ptr, align 8
  br label %do.end12

do.end12:                                         ; preds = %do.end11
  br label %do.end13

do.end13:                                         ; preds = %do.end12
  br label %do.end14

do.end14:                                         ; preds = %do.end13
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %16, %struct.sv*** @PL_stack_sp, align 8
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 0
  %18 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %18
}

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_tms() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.85, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gmtime() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %when = alloca i64, align 8
  %tmbuf = alloca %struct.TM64, align 4
  %err = alloca %struct.TM64*, align 8
  %opname = alloca i8*, align 8
  %now = alloca i64, align 8
  %input = alloca double, align 8
  %pl_isnan = alloca i8, align 1
  %targ = alloca %struct.sv*, align 8
  %eMiX = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 324
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i64 0, i64 0)
  store i8* %cond, i8** %opname, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_private, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 15
  %cmp1 = icmp slt i32 %and, 1
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %tobool = icmp ne %struct.sv* %6, null
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  br i1 true, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true, %entry
  %call = call i64 @time(i64* %now) #3
  %9 = load i64, i64* %now, align 8
  store i64 %9, i64* %when, align 8
  br label %if.end23

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** @PL_Sv, align 8
  %12 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %13, 2097664
  %cmp5 = icmp eq i32 %and4, 512
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %14 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %16, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %17 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %18 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call7 = call double @Perl_sv_2nv_flags(%struct.sv* %18, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi double [ %17, %cond.true ], [ %call7, %cond.false ]
  %19 = call double @llvm.floor.f64(double %cond8)
  store double %19, double* %input, align 8
  %20 = load double, double* %input, align 8
  %cmp9 = fcmp uno double %20, %20
  %frombool = zext i1 %cmp9 to i8
  store i8 %frombool, i8* %pl_isnan, align 1
  %21 = load double, double* %input, align 8
  %conv10 = fptosi double %21 to i64
  store i64 %conv10, i64* %when, align 8
  %22 = load i8, i8* %pl_isnan, align 1
  %tobool11 = trunc i8 %22 to i1
  br i1 %tobool11, label %cond.true17, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %cond.end
  %23 = load i64, i64* %when, align 8
  %conv14 = sitofp i64 %23 to double
  %24 = load double, double* %input, align 8
  %cmp15 = fcmp une double %conv14, %24
  br i1 %cmp15, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %lor.lhs.false13, %cond.end
  br i1 true, label %if.then19, label %if.end22

cond.false18:                                     ; preds = %lor.lhs.false13
  br i1 false, label %if.then19, label %if.end22

if.then19:                                        ; preds = %cond.false18, %cond.true17
  %25 = load i8*, i8** %opname, align 8
  %26 = load double, double* %input, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 15, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.107, i64 0, i64 0), i8* %25, double %26)
  %27 = load i8, i8* %pl_isnan, align 1
  %tobool20 = trunc i8 %27 to i1
  br i1 %tobool20, label %if.then21, label %if.end

if.then21:                                        ; preds = %if.then19
  store %struct.TM64* null, %struct.TM64** %err, align 8
  br label %failed

if.end:                                           ; preds = %if.then19
  br label %if.end22

if.end22:                                         ; preds = %if.end, %cond.false18, %cond.true17
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then
  %28 = load i64, i64* %when, align 8
  %conv24 = sitofp i64 %28 to double
  %cmp25 = fcmp ogt double 0xC36E18574F2E3538, %conv24
  br i1 %cmp25, label %if.then27, label %if.else28

if.then27:                                        ; preds = %if.end23
  %29 = load i8*, i8** %opname, align 8
  %30 = load i64, i64* %when, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 15, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.108, i64 0, i64 0), i8* %29, i64 %30)
  store %struct.TM64* null, %struct.TM64** %err, align 8
  br label %if.end46

if.else28:                                        ; preds = %if.end23
  %31 = load i64, i64* %when, align 8
  %conv29 = sitofp i64 %31 to double
  %cmp30 = fcmp ogt double %conv29, 0x436E1853B0D11638
  br i1 %cmp30, label %if.then32, label %if.else33

if.then32:                                        ; preds = %if.else28
  %32 = load i8*, i8** %opname, align 8
  %33 = load i64, i64* %when, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 15, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.107, i64 0, i64 0), i8* %32, i64 %33)
  store %struct.TM64* null, %struct.TM64** %err, align 8
  br label %if.end45

if.else33:                                        ; preds = %if.else28
  %34 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type34 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 4
  %bf.load35 = load i16, i16* %op_type34, align 8
  %bf.clear36 = and i16 %bf.load35, 511
  %bf.cast37 = zext i16 %bf.clear36 to i32
  %cmp38 = icmp eq i32 %bf.cast37, 324
  br i1 %cmp38, label %if.then40, label %if.else42

if.then40:                                        ; preds = %if.else33
  %call41 = call %struct.TM64* @S_localtime64_r(i64* %when, %struct.TM64* %tmbuf)
  store %struct.TM64* %call41, %struct.TM64** %err, align 8
  br label %if.end44

if.else42:                                        ; preds = %if.else33
  %call43 = call %struct.TM64* @S_gmtime64_r(i64* %when, %struct.TM64* %tmbuf)
  store %struct.TM64* %call43, %struct.TM64** %err, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then40
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then32
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then27
  %35 = load %struct.TM64*, %struct.TM64** %err, align 8
  %cmp47 = icmp eq %struct.TM64* %35, null
  br i1 %cmp47, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end46
  br label %failed

failed:                                           ; preds = %if.then49, %if.then21
  %36 = load i8*, i8** %opname, align 8
  %37 = load i64, i64* %when, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.109, i64 0, i64 0), i8* %36, i64 %37)
  br label %if.end50

if.end50:                                         ; preds = %failed, %if.end46
  %38 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 5
  %39 = load i8, i8* %op_flags, align 2
  %conv51 = zext i8 %39 to i32
  %and52 = and i32 %conv51, 3
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false58

cond.true54:                                      ; preds = %if.end50
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags55 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 5
  %41 = load i8, i8* %op_flags55, align 2
  %conv56 = zext i8 %41 to i32
  %and57 = and i32 %conv56, 3
  br label %cond.end60

cond.false58:                                     ; preds = %if.end50
  %call59 = call i32 @Perl_block_gimme()
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false58, %cond.true54
  %cond61 = phi i32 [ %and57, %cond.true54 ], [ %call59, %cond.false58 ]
  %cmp62 = icmp ne i32 %cond61, 3
  br i1 %cmp62, label %if.then64, label %if.else83

if.then64:                                        ; preds = %cond.end60
  br label %do.body

do.body:                                          ; preds = %if.then64
  %42 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %42 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %43 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp65 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp65, label %cond.true67, label %cond.false68

cond.true67:                                      ; preds = %do.body
  br i1 true, label %if.then69, label %if.end71

cond.false68:                                     ; preds = %do.body
  br i1 false, label %if.then69, label %if.end71

if.then69:                                        ; preds = %cond.false68, %cond.true67
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call70 = call %struct.sv** @Perl_stack_grow(%struct.sv** %44, %struct.sv** %45, i64 1)
  store %struct.sv** %call70, %struct.sv*** %sp, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.then69, %cond.false68, %cond.true67
  br label %do.end

do.end:                                           ; preds = %if.end71
  %47 = load %struct.TM64*, %struct.TM64** %err, align 8
  %cmp72 = icmp eq %struct.TM64* %47, null
  br i1 %cmp72, label %if.then74, label %if.else76

if.then74:                                        ; preds = %do.end
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %48, i32 1
  store %struct.sv** %incdec.ptr75, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr75, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %49, %struct.sv*** @PL_stack_sp, align 8
  %50 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 0
  %51 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %51, %struct.op** %retval, align 8
  br label %return

if.else76:                                        ; preds = %do.end
  %52 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 3
  %54 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %52, i64 %54
  %55 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %55, %struct.sv** %targ, align 8
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr77 = getelementptr inbounds %struct.sv*, %struct.sv** %57, i32 1
  store %struct.sv** %incdec.ptr77, %struct.sv*** %sp, align 8
  store %struct.sv* %56, %struct.sv** %incdec.ptr77, align 8
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %tm_wday = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 6
  %59 = load i32, i32* %tm_wday, align 4
  %idxprom = sext i32 %59 to i64
  %arrayidx78 = getelementptr inbounds [7 x i8*], [7 x i8*]* @Perl_pp_gmtime.dayname, i64 0, i64 %idxprom
  %60 = load i8*, i8** %arrayidx78, align 8
  %tm_mon = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 4
  %61 = load i32, i32* %tm_mon, align 4
  %idxprom79 = sext i32 %61 to i64
  %arrayidx80 = getelementptr inbounds [12 x i8*], [12 x i8*]* @Perl_pp_gmtime.monname, i64 0, i64 %idxprom79
  %62 = load i8*, i8** %arrayidx80, align 8
  %tm_mday = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 3
  %63 = load i32, i32* %tm_mday, align 4
  %tm_hour = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 2
  %64 = load i32, i32* %tm_hour, align 4
  %tm_min = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 1
  %65 = load i32, i32* %tm_min, align 4
  %tm_sec = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 0
  %66 = load i32, i32* %tm_sec, align 4
  %tm_year = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 5
  %67 = load i32, i32* %tm_year, align 4
  %conv81 = sext i32 %67 to i64
  %add = add nsw i64 %conv81, 1900
  call void (%struct.sv*, i8*, ...) @Perl_sv_setpvf_mg(%struct.sv* %58, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.110, i64 0, i64 0), i8* %60, i8* %62, i32 %63, i32 %64, i32 %65, i32 %66, i64 %add)
  br label %if.end82

if.end82:                                         ; preds = %if.else76
  br label %if.end146

if.else83:                                        ; preds = %cond.end60
  %68 = load %struct.TM64*, %struct.TM64** %err, align 8
  %cmp84 = icmp eq %struct.TM64* %68, null
  br i1 %cmp84, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.else83
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %69, %struct.sv*** @PL_stack_sp, align 8
  %70 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next87 = getelementptr inbounds %struct.op, %struct.op* %70, i32 0, i32 0
  %71 = load %struct.op*, %struct.op** %op_next87, align 8
  store %struct.op* %71, %struct.op** %retval, align 8
  br label %return

if.end88:                                         ; preds = %if.else83
  br label %do.body89

do.body89:                                        ; preds = %if.end88
  %72 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast90 = ptrtoint %struct.sv** %72 to i64
  %sub.ptr.rhs.cast91 = ptrtoint %struct.sv** %73 to i64
  %sub.ptr.sub92 = sub i64 %sub.ptr.lhs.cast90, %sub.ptr.rhs.cast91
  %sub.ptr.div93 = sdiv exact i64 %sub.ptr.sub92, 8
  %cmp94 = icmp slt i64 %sub.ptr.div93, 9
  br i1 %cmp94, label %cond.true96, label %cond.false97

cond.true96:                                      ; preds = %do.body89
  br i1 true, label %if.then98, label %if.end100

cond.false97:                                     ; preds = %do.body89
  br i1 false, label %if.then98, label %if.end100

if.then98:                                        ; preds = %cond.false97, %cond.true96
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call99 = call %struct.sv** @Perl_stack_grow(%struct.sv** %74, %struct.sv** %75, i64 9)
  store %struct.sv** %call99, %struct.sv*** %sp, align 8
  %76 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end100

if.end100:                                        ; preds = %if.then98, %cond.false97, %cond.true96
  br label %do.end101

do.end101:                                        ; preds = %if.end100
  br label %do.body102

do.body102:                                       ; preds = %do.end101
  %77 = load i64, i64* @PL_tmps_ix, align 8
  %add103 = add nsw i64 %77, 9
  store i64 %add103, i64* %eMiX, align 8
  %78 = load i64, i64* %eMiX, align 8
  %79 = load i64, i64* @PL_tmps_max, align 8
  %cmp104 = icmp sge i64 %78, %79
  br i1 %cmp104, label %cond.true106, label %cond.false107

cond.true106:                                     ; preds = %do.body102
  br i1 true, label %if.then108, label %if.end110

cond.false107:                                    ; preds = %do.body102
  br i1 false, label %if.then108, label %if.end110

if.then108:                                       ; preds = %cond.false107, %cond.true106
  %80 = load i64, i64* %eMiX, align 8
  %call109 = call i64 @Perl_tmps_grow_p(i64 %80)
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %cond.false107, %cond.true106
  br label %do.end111

do.end111:                                        ; preds = %if.end110
  %call112 = call %struct.sv* @Perl_sv_newmortal()
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr113 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i32 1
  store %struct.sv** %incdec.ptr113, %struct.sv*** %sp, align 8
  store %struct.sv* %call112, %struct.sv** %incdec.ptr113, align 8
  %tm_sec114 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 0
  %82 = load i32, i32* %tm_sec114, align 4
  %conv115 = sext i32 %82 to i64
  call void @Perl_sv_setiv(%struct.sv* %call112, i64 %conv115)
  %call116 = call %struct.sv* @Perl_sv_newmortal()
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr117 = getelementptr inbounds %struct.sv*, %struct.sv** %83, i32 1
  store %struct.sv** %incdec.ptr117, %struct.sv*** %sp, align 8
  store %struct.sv* %call116, %struct.sv** %incdec.ptr117, align 8
  %tm_min118 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 1
  %84 = load i32, i32* %tm_min118, align 4
  %conv119 = sext i32 %84 to i64
  call void @Perl_sv_setiv(%struct.sv* %call116, i64 %conv119)
  %call120 = call %struct.sv* @Perl_sv_newmortal()
  %85 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr121 = getelementptr inbounds %struct.sv*, %struct.sv** %85, i32 1
  store %struct.sv** %incdec.ptr121, %struct.sv*** %sp, align 8
  store %struct.sv* %call120, %struct.sv** %incdec.ptr121, align 8
  %tm_hour122 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 2
  %86 = load i32, i32* %tm_hour122, align 4
  %conv123 = sext i32 %86 to i64
  call void @Perl_sv_setiv(%struct.sv* %call120, i64 %conv123)
  %call124 = call %struct.sv* @Perl_sv_newmortal()
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr125 = getelementptr inbounds %struct.sv*, %struct.sv** %87, i32 1
  store %struct.sv** %incdec.ptr125, %struct.sv*** %sp, align 8
  store %struct.sv* %call124, %struct.sv** %incdec.ptr125, align 8
  %tm_mday126 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 3
  %88 = load i32, i32* %tm_mday126, align 4
  %conv127 = sext i32 %88 to i64
  call void @Perl_sv_setiv(%struct.sv* %call124, i64 %conv127)
  %call128 = call %struct.sv* @Perl_sv_newmortal()
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr129 = getelementptr inbounds %struct.sv*, %struct.sv** %89, i32 1
  store %struct.sv** %incdec.ptr129, %struct.sv*** %sp, align 8
  store %struct.sv* %call128, %struct.sv** %incdec.ptr129, align 8
  %tm_mon130 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 4
  %90 = load i32, i32* %tm_mon130, align 4
  %conv131 = sext i32 %90 to i64
  call void @Perl_sv_setiv(%struct.sv* %call128, i64 %conv131)
  %call132 = call %struct.sv* @Perl_sv_newmortal()
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr133 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i32 1
  store %struct.sv** %incdec.ptr133, %struct.sv*** %sp, align 8
  store %struct.sv* %call132, %struct.sv** %incdec.ptr133, align 8
  %tm_year134 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 5
  %92 = load i32, i32* %tm_year134, align 4
  %conv135 = sitofp i32 %92 to double
  call void @Perl_sv_setnv(%struct.sv* %call132, double %conv135)
  %call136 = call %struct.sv* @Perl_sv_newmortal()
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr137 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr137, %struct.sv*** %sp, align 8
  store %struct.sv* %call136, %struct.sv** %incdec.ptr137, align 8
  %tm_wday138 = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 6
  %94 = load i32, i32* %tm_wday138, align 4
  %conv139 = sext i32 %94 to i64
  call void @Perl_sv_setiv(%struct.sv* %call136, i64 %conv139)
  %call140 = call %struct.sv* @Perl_sv_newmortal()
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr141 = getelementptr inbounds %struct.sv*, %struct.sv** %95, i32 1
  store %struct.sv** %incdec.ptr141, %struct.sv*** %sp, align 8
  store %struct.sv* %call140, %struct.sv** %incdec.ptr141, align 8
  %tm_yday = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 7
  %96 = load i32, i32* %tm_yday, align 4
  %conv142 = sext i32 %96 to i64
  call void @Perl_sv_setiv(%struct.sv* %call140, i64 %conv142)
  %call143 = call %struct.sv* @Perl_sv_newmortal()
  %97 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr144 = getelementptr inbounds %struct.sv*, %struct.sv** %97, i32 1
  store %struct.sv** %incdec.ptr144, %struct.sv*** %sp, align 8
  store %struct.sv* %call143, %struct.sv** %incdec.ptr144, align 8
  %tm_isdst = getelementptr inbounds %struct.TM64, %struct.TM64* %tmbuf, i32 0, i32 8
  %98 = load i32, i32* %tm_isdst, align 4
  %conv145 = sext i32 %98 to i64
  call void @Perl_sv_setiv(%struct.sv* %call143, i64 %conv145)
  br label %if.end146

if.end146:                                        ; preds = %do.end111, %if.end82
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %99, %struct.sv*** @PL_stack_sp, align 8
  %100 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next147 = getelementptr inbounds %struct.op, %struct.op* %100, i32 0, i32 0
  %101 = load %struct.op*, %struct.op** %op_next147, align 8
  store %struct.op* %101, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end146, %if.then86, %if.then74
  %102 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %102
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #8

; Function Attrs: noinline nounwind uwtable
define internal %struct.TM64* @S_localtime64_r(i64* %time, %struct.TM64* %local_tm) #0 {
entry:
  %retval = alloca %struct.TM64*, align 8
  %time.addr = alloca i64*, align 8
  %local_tm.addr = alloca %struct.TM64*, align 8
  %safe_time = alloca i64, align 8
  %safe_date = alloca %struct.tm, align 8
  %gm_tm = alloca %struct.TM64, align 4
  %orig_year = alloca i32, align 4
  %month_diff = alloca i32, align 4
  store i64* %time, i64** %time.addr, align 8
  store %struct.TM64* %local_tm, %struct.TM64** %local_tm.addr, align 8
  %0 = load i64*, i64** %time.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = sitofp i64 %1 to double
  %cmp = fcmp ole double %conv, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64*, i64** %time.addr, align 8
  %3 = load i64, i64* %2, align 8
  %conv2 = sitofp i64 %3 to double
  %cmp3 = fcmp oge double %conv2, 0.000000e+00
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64*, i64** %time.addr, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %safe_time, align 8
  %call = call %struct.tm* @S_localtime_r(i64* %safe_time, %struct.tm* %safe_date)
  %6 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  call void @S_copy_little_tm_to_big_TM(%struct.tm* %safe_date, %struct.TM64* %6)
  %7 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  store %struct.TM64* %7, %struct.TM64** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load i64*, i64** %time.addr, align 8
  %call5 = call %struct.TM64* @S_gmtime64_r(i64* %8, %struct.TM64* %gm_tm)
  %cmp6 = icmp eq %struct.TM64* %call5, null
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  store %struct.TM64* null, %struct.TM64** %retval, align 8
  br label %return

if.end9:                                          ; preds = %if.end
  %tm_year = getelementptr inbounds %struct.TM64, %struct.TM64* %gm_tm, i32 0, i32 5
  %9 = load i32, i32* %tm_year, align 4
  store i32 %9, i32* %orig_year, align 4
  %tm_year10 = getelementptr inbounds %struct.TM64, %struct.TM64* %gm_tm, i32 0, i32 5
  %10 = load i32, i32* %tm_year10, align 4
  %cmp11 = icmp sgt i32 %10, 137
  br i1 %cmp11, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end9
  %tm_year13 = getelementptr inbounds %struct.TM64, %struct.TM64* %gm_tm, i32 0, i32 5
  %11 = load i32, i32* %tm_year13, align 4
  %cmp14 = icmp slt i32 %11, 70
  br i1 %cmp14, label %if.then16, label %if.end20

if.then16:                                        ; preds = %lor.lhs.false, %if.end9
  %tm_year17 = getelementptr inbounds %struct.TM64, %struct.TM64* %gm_tm, i32 0, i32 5
  %12 = load i32, i32* %tm_year17, align 4
  %add = add nsw i32 %12, 1900
  %call18 = call i32 @S_safe_year(i32 %add)
  %sub = sub nsw i32 %call18, 1900
  %tm_year19 = getelementptr inbounds %struct.TM64, %struct.TM64* %gm_tm, i32 0, i32 5
  store i32 %sub, i32* %tm_year19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %lor.lhs.false
  %call21 = call i64 @S_timegm64(%struct.TM64* %gm_tm)
  store i64 %call21, i64* %safe_time, align 8
  %call22 = call %struct.tm* @S_localtime_r(i64* %safe_time, %struct.tm* %safe_date)
  %cmp23 = icmp eq %struct.tm* %call22, null
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end20
  store %struct.TM64* null, %struct.TM64** %retval, align 8
  br label %return

if.end26:                                         ; preds = %if.end20
  %13 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  call void @S_copy_little_tm_to_big_TM(%struct.tm* %safe_date, %struct.TM64* %13)
  %14 = load i32, i32* %orig_year, align 4
  %15 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year27 = getelementptr inbounds %struct.TM64, %struct.TM64* %15, i32 0, i32 5
  store i32 %14, i32* %tm_year27, align 4
  %16 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year28 = getelementptr inbounds %struct.TM64, %struct.TM64* %16, i32 0, i32 5
  %17 = load i32, i32* %tm_year28, align 4
  %18 = load i32, i32* %orig_year, align 4
  %cmp29 = icmp ne i32 %17, %18
  br i1 %cmp29, label %if.then31, label %if.end33

if.then31:                                        ; preds = %if.end26
  %call32 = call i32* @__errno_location() #9
  store i32 75, i32* %call32, align 4
  store %struct.TM64* null, %struct.TM64** %retval, align 8
  br label %return

if.end33:                                         ; preds = %if.end26
  %19 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_mon = getelementptr inbounds %struct.TM64, %struct.TM64* %19, i32 0, i32 4
  %20 = load i32, i32* %tm_mon, align 4
  %tm_mon34 = getelementptr inbounds %struct.TM64, %struct.TM64* %gm_tm, i32 0, i32 4
  %21 = load i32, i32* %tm_mon34, align 4
  %sub35 = sub nsw i32 %20, %21
  store i32 %sub35, i32* %month_diff, align 4
  %22 = load i32, i32* %month_diff, align 4
  %cmp36 = icmp eq i32 %22, 11
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end33
  %23 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year39 = getelementptr inbounds %struct.TM64, %struct.TM64* %23, i32 0, i32 5
  %24 = load i32, i32* %tm_year39, align 4
  %dec = add nsw i32 %24, -1
  store i32 %dec, i32* %tm_year39, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.end33
  %25 = load i32, i32* %month_diff, align 4
  %cmp41 = icmp eq i32 %25, -11
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end40
  %26 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year44 = getelementptr inbounds %struct.TM64, %struct.TM64* %26, i32 0, i32 5
  %27 = load i32, i32* %tm_year44, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %tm_year44, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %if.end40
  %28 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year46 = getelementptr inbounds %struct.TM64, %struct.TM64* %28, i32 0, i32 5
  %29 = load i32, i32* %tm_year46, align 4
  %add47 = add nsw i32 %29, 1900
  %rem = srem i32 %add47, 400
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end45
  %30 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year48 = getelementptr inbounds %struct.TM64, %struct.TM64* %30, i32 0, i32 5
  %31 = load i32, i32* %tm_year48, align 4
  %add49 = add nsw i32 %31, 1900
  %rem50 = srem i32 %add49, 4
  %tobool51 = icmp ne i32 %rem50, 0
  br i1 %tobool51, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs
  %32 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_year52 = getelementptr inbounds %struct.TM64, %struct.TM64* %32, i32 0, i32 5
  %33 = load i32, i32* %tm_year52, align 4
  %add53 = add nsw i32 %33, 1900
  %rem54 = srem i32 %add53, 100
  %tobool55 = icmp ne i32 %rem54, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %34 = phi i1 [ false, %lor.rhs ], [ %tobool55, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.end45
  %35 = phi i1 [ true, %if.end45 ], [ %34, %land.end ]
  %lor.ext = zext i1 %35 to i32
  %cmp56 = icmp ne i32 %lor.ext, 0
  br i1 %cmp56, label %if.end64, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %lor.end
  %36 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_yday = getelementptr inbounds %struct.TM64, %struct.TM64* %36, i32 0, i32 7
  %37 = load i32, i32* %tm_yday, align 4
  %cmp59 = icmp eq i32 %37, 365
  br i1 %cmp59, label %if.then61, label %if.end64

if.then61:                                        ; preds = %land.lhs.true58
  %38 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  %tm_yday62 = getelementptr inbounds %struct.TM64, %struct.TM64* %38, i32 0, i32 7
  %39 = load i32, i32* %tm_yday62, align 4
  %dec63 = add nsw i32 %39, -1
  store i32 %dec63, i32* %tm_yday62, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then61, %land.lhs.true58, %lor.end
  %40 = load %struct.TM64*, %struct.TM64** %local_tm.addr, align 8
  store %struct.TM64* %40, %struct.TM64** %retval, align 8
  br label %return

return:                                           ; preds = %if.end64, %if.then31, %if.then25, %if.then8, %if.then
  %41 = load %struct.TM64*, %struct.TM64** %retval, align 8
  ret %struct.TM64* %41
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.TM64* @S_gmtime64_r(i64* %in_time, %struct.TM64* %p) #0 {
entry:
  %retval = alloca %struct.TM64*, align 8
  %in_time.addr = alloca i64*, align 8
  %p.addr = alloca %struct.TM64*, align 8
  %v_tm_sec = alloca i32, align 4
  %v_tm_min = alloca i32, align 4
  %v_tm_hour = alloca i32, align 4
  %v_tm_mon = alloca i32, align 4
  %v_tm_wday = alloca i32, align 4
  %v_tm_tday = alloca i64, align 8
  %leap = alloca i32, align 4
  %m = alloca i64, align 8
  %time = alloca i64, align 8
  %year = alloca i32, align 4
  %cycles = alloca i32, align 4
  store i64* %in_time, i64** %in_time.addr, align 8
  store %struct.TM64* %p, %struct.TM64** %p.addr, align 8
  %0 = load i64*, i64** %in_time.addr, align 8
  %1 = load i64, i64* %0, align 8
  store i64 %1, i64* %time, align 8
  store i32 70, i32* %year, align 4
  store i32 0, i32* %cycles, align 4
  %2 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_isdst = getelementptr inbounds %struct.TM64, %struct.TM64* %2, i32 0, i32 8
  store i32 0, i32* %tm_isdst, align 4
  %3 = load i64, i64* %time, align 8
  %rem = srem i64 %3, 60
  %conv = trunc i64 %rem to i32
  store i32 %conv, i32* %v_tm_sec, align 4
  %4 = load i64, i64* %time, align 8
  %div = sdiv i64 %4, 60
  store i64 %div, i64* %time, align 8
  %5 = load i64, i64* %time, align 8
  %rem1 = srem i64 %5, 60
  %conv2 = trunc i64 %rem1 to i32
  store i32 %conv2, i32* %v_tm_min, align 4
  %6 = load i64, i64* %time, align 8
  %div3 = sdiv i64 %6, 60
  store i64 %div3, i64* %time, align 8
  %7 = load i64, i64* %time, align 8
  %rem4 = srem i64 %7, 24
  %conv5 = trunc i64 %rem4 to i32
  store i32 %conv5, i32* %v_tm_hour, align 4
  %8 = load i64, i64* %time, align 8
  %div6 = sdiv i64 %8, 24
  store i64 %div6, i64* %time, align 8
  %9 = load i64, i64* %time, align 8
  store i64 %9, i64* %v_tm_tday, align 8
  %10 = load i32, i32* %v_tm_sec, align 4
  %cmp = icmp slt i32 %10, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i32, i32* %v_tm_min, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %v_tm_min, align 4
  %12 = load i32, i32* %v_tm_sec, align 4
  %add = add nsw i32 %12, 60
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load i32, i32* %v_tm_sec, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %13, %cond.false ]
  store i32 %cond, i32* %v_tm_sec, align 4
  %14 = load i32, i32* %v_tm_min, align 4
  %cmp8 = icmp slt i32 %14, 0
  br i1 %cmp8, label %cond.true10, label %cond.false13

cond.true10:                                      ; preds = %cond.end
  %15 = load i32, i32* %v_tm_hour, align 4
  %dec11 = add nsw i32 %15, -1
  store i32 %dec11, i32* %v_tm_hour, align 4
  %16 = load i32, i32* %v_tm_min, align 4
  %add12 = add nsw i32 %16, 60
  br label %cond.end14

cond.false13:                                     ; preds = %cond.end
  %17 = load i32, i32* %v_tm_min, align 4
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true10
  %cond15 = phi i32 [ %add12, %cond.true10 ], [ %17, %cond.false13 ]
  store i32 %cond15, i32* %v_tm_min, align 4
  %18 = load i32, i32* %v_tm_hour, align 4
  %cmp16 = icmp slt i32 %18, 0
  br i1 %cmp16, label %cond.true18, label %cond.false21

cond.true18:                                      ; preds = %cond.end14
  %19 = load i64, i64* %v_tm_tday, align 8
  %dec19 = add nsw i64 %19, -1
  store i64 %dec19, i64* %v_tm_tday, align 8
  %20 = load i32, i32* %v_tm_hour, align 4
  %add20 = add nsw i32 %20, 24
  br label %cond.end22

cond.false21:                                     ; preds = %cond.end14
  %21 = load i32, i32* %v_tm_hour, align 4
  br label %cond.end22

cond.end22:                                       ; preds = %cond.false21, %cond.true18
  %cond23 = phi i32 [ %add20, %cond.true18 ], [ %21, %cond.false21 ]
  store i32 %cond23, i32* %v_tm_hour, align 4
  %22 = load i64, i64* %v_tm_tday, align 8
  %add24 = add nsw i64 %22, 4
  %rem25 = srem i64 %add24, 7
  %conv26 = trunc i64 %rem25 to i32
  store i32 %conv26, i32* %v_tm_wday, align 4
  %23 = load i32, i32* %v_tm_wday, align 4
  %cmp27 = icmp slt i32 %23, 0
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end22
  %24 = load i32, i32* %v_tm_wday, align 4
  %add29 = add nsw i32 %24, 7
  store i32 %add29, i32* %v_tm_wday, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end22
  %25 = load i64, i64* %v_tm_tday, align 8
  store i64 %25, i64* %m, align 8
  %26 = load i64, i64* %m, align 8
  %cmp30 = icmp sge i64 %26, 13879
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end
  store i32 108, i32* %year, align 4
  %27 = load i64, i64* %m, align 8
  %sub = sub nsw i64 %27, 13879
  store i64 %sub, i64* %m, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %if.end
  %28 = load i64, i64* %m, align 8
  %cmp34 = icmp sge i64 %28, 0
  br i1 %cmp34, label %if.then36, label %if.else

if.then36:                                        ; preds = %if.end33
  %29 = load i64, i64* %m, align 8
  %div37 = sdiv i64 %29, 146097
  %conv38 = trunc i64 %div37 to i32
  store i32 %conv38, i32* %cycles, align 4
  %30 = load i32, i32* %cycles, align 4
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %if.then39, label %if.end44

if.then39:                                        ; preds = %if.then36
  %31 = load i32, i32* %cycles, align 4
  %conv40 = sext i32 %31 to i64
  %mul = mul nsw i64 %conv40, 146097
  %32 = load i64, i64* %m, align 8
  %sub41 = sub nsw i64 %32, %mul
  store i64 %sub41, i64* %m, align 8
  %33 = load i32, i32* %cycles, align 4
  %mul42 = mul nsw i32 %33, 400
  %34 = load i32, i32* %year, align 4
  %add43 = add nsw i32 %34, %mul42
  store i32 %add43, i32* %year, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then39, %if.then36
  %35 = load i32, i32* %year, align 4
  %add45 = add nsw i32 %35, 1900
  %rem46 = srem i32 %add45, 400
  %tobool47 = icmp ne i32 %rem46, 0
  br i1 %tobool47, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end44
  %36 = load i32, i32* %year, align 4
  %add48 = add nsw i32 %36, 1900
  %rem49 = srem i32 %add48, 4
  %tobool50 = icmp ne i32 %rem49, 0
  br i1 %tobool50, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs
  %37 = load i32, i32* %year, align 4
  %add51 = add nsw i32 %37, 1900
  %rem52 = srem i32 %add51, 100
  %tobool53 = icmp ne i32 %rem52, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %38 = phi i1 [ false, %lor.rhs ], [ %tobool53, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %if.end44
  %39 = phi i1 [ true, %if.end44 ], [ %38, %land.end ]
  %lor.ext = zext i1 %39 to i32
  %cmp54 = icmp ne i32 %lor.ext, 0
  %conv55 = zext i1 %cmp54 to i32
  store i32 %conv55, i32* %leap, align 4
  br label %while.cond

while.cond:                                       ; preds = %lor.end75, %lor.end
  %40 = load i64, i64* %m, align 8
  %41 = load i32, i32* %leap, align 4
  %idxprom = sext i32 %41 to i64
  %arrayidx = getelementptr inbounds [2 x i16], [2 x i16]* @length_of_year, i64 0, i64 %idxprom
  %42 = load i16, i16* %arrayidx, align 2
  %conv56 = sext i16 %42 to i64
  %cmp57 = icmp sge i64 %40, %conv56
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %43 = load i32, i32* %leap, align 4
  %idxprom59 = sext i32 %43 to i64
  %arrayidx60 = getelementptr inbounds [2 x i16], [2 x i16]* @length_of_year, i64 0, i64 %idxprom59
  %44 = load i16, i16* %arrayidx60, align 2
  %conv61 = sext i16 %44 to i64
  %45 = load i64, i64* %m, align 8
  %sub62 = sub nsw i64 %45, %conv61
  store i64 %sub62, i64* %m, align 8
  %46 = load i32, i32* %year, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %year, align 4
  %47 = load i32, i32* %year, align 4
  %add63 = add nsw i32 %47, 1900
  %rem64 = srem i32 %add63, 400
  %tobool65 = icmp ne i32 %rem64, 0
  br i1 %tobool65, label %lor.rhs66, label %lor.end75

lor.rhs66:                                        ; preds = %while.body
  %48 = load i32, i32* %year, align 4
  %add67 = add nsw i32 %48, 1900
  %rem68 = srem i32 %add67, 4
  %tobool69 = icmp ne i32 %rem68, 0
  br i1 %tobool69, label %land.end74, label %land.rhs70

land.rhs70:                                       ; preds = %lor.rhs66
  %49 = load i32, i32* %year, align 4
  %add71 = add nsw i32 %49, 1900
  %rem72 = srem i32 %add71, 100
  %tobool73 = icmp ne i32 %rem72, 0
  br label %land.end74

land.end74:                                       ; preds = %land.rhs70, %lor.rhs66
  %50 = phi i1 [ false, %lor.rhs66 ], [ %tobool73, %land.rhs70 ]
  br label %lor.end75

lor.end75:                                        ; preds = %land.end74, %while.body
  %51 = phi i1 [ true, %while.body ], [ %50, %land.end74 ]
  %lor.ext76 = zext i1 %51 to i32
  %cmp77 = icmp ne i32 %lor.ext76, 0
  %conv78 = zext i1 %cmp77 to i32
  store i32 %conv78, i32* %leap, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %v_tm_mon, align 4
  br label %while.cond79

while.cond79:                                     ; preds = %while.body87, %while.end
  %52 = load i64, i64* %m, align 8
  %53 = load i32, i32* %leap, align 4
  %idxprom80 = sext i32 %53 to i64
  %arrayidx81 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @days_in_month, i64 0, i64 %idxprom80
  %54 = load i32, i32* %v_tm_mon, align 4
  %idxprom82 = sext i32 %54 to i64
  %arrayidx83 = getelementptr inbounds [12 x i8], [12 x i8]* %arrayidx81, i64 0, i64 %idxprom82
  %55 = load i8, i8* %arrayidx83, align 1
  %conv84 = sext i8 %55 to i64
  %cmp85 = icmp sge i64 %52, %conv84
  br i1 %cmp85, label %while.body87, label %while.end95

while.body87:                                     ; preds = %while.cond79
  %56 = load i32, i32* %leap, align 4
  %idxprom88 = sext i32 %56 to i64
  %arrayidx89 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @days_in_month, i64 0, i64 %idxprom88
  %57 = load i32, i32* %v_tm_mon, align 4
  %idxprom90 = sext i32 %57 to i64
  %arrayidx91 = getelementptr inbounds [12 x i8], [12 x i8]* %arrayidx89, i64 0, i64 %idxprom90
  %58 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %58 to i64
  %59 = load i64, i64* %m, align 8
  %sub93 = sub nsw i64 %59, %conv92
  store i64 %sub93, i64* %m, align 8
  %60 = load i32, i32* %v_tm_mon, align 4
  %inc94 = add nsw i32 %60, 1
  store i32 %inc94, i32* %v_tm_mon, align 4
  br label %while.cond79

while.end95:                                      ; preds = %while.cond79
  br label %if.end180

if.else:                                          ; preds = %if.end33
  %61 = load i32, i32* %year, align 4
  %dec96 = add nsw i32 %61, -1
  store i32 %dec96, i32* %year, align 4
  %62 = load i64, i64* %m, align 8
  %div97 = sdiv i64 %62, 146097
  %add98 = add nsw i64 %div97, 1
  %conv99 = trunc i64 %add98 to i32
  store i32 %conv99, i32* %cycles, align 4
  %63 = load i32, i32* %cycles, align 4
  %tobool100 = icmp ne i32 %63, 0
  br i1 %tobool100, label %if.then101, label %if.end107

if.then101:                                       ; preds = %if.else
  %64 = load i32, i32* %cycles, align 4
  %conv102 = sext i32 %64 to i64
  %mul103 = mul nsw i64 %conv102, 146097
  %65 = load i64, i64* %m, align 8
  %sub104 = sub nsw i64 %65, %mul103
  store i64 %sub104, i64* %m, align 8
  %66 = load i32, i32* %cycles, align 4
  %mul105 = mul nsw i32 %66, 400
  %67 = load i32, i32* %year, align 4
  %add106 = add nsw i32 %67, %mul105
  store i32 %add106, i32* %year, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.then101, %if.else
  %68 = load i32, i32* %year, align 4
  %add108 = add nsw i32 %68, 1900
  %rem109 = srem i32 %add108, 400
  %tobool110 = icmp ne i32 %rem109, 0
  br i1 %tobool110, label %lor.rhs111, label %lor.end120

lor.rhs111:                                       ; preds = %if.end107
  %69 = load i32, i32* %year, align 4
  %add112 = add nsw i32 %69, 1900
  %rem113 = srem i32 %add112, 4
  %tobool114 = icmp ne i32 %rem113, 0
  br i1 %tobool114, label %land.end119, label %land.rhs115

land.rhs115:                                      ; preds = %lor.rhs111
  %70 = load i32, i32* %year, align 4
  %add116 = add nsw i32 %70, 1900
  %rem117 = srem i32 %add116, 100
  %tobool118 = icmp ne i32 %rem117, 0
  br label %land.end119

land.end119:                                      ; preds = %land.rhs115, %lor.rhs111
  %71 = phi i1 [ false, %lor.rhs111 ], [ %tobool118, %land.rhs115 ]
  br label %lor.end120

lor.end120:                                       ; preds = %land.end119, %if.end107
  %72 = phi i1 [ true, %if.end107 ], [ %71, %land.end119 ]
  %lor.ext121 = zext i1 %72 to i32
  %cmp122 = icmp ne i32 %lor.ext121, 0
  %conv123 = zext i1 %cmp122 to i32
  store i32 %conv123, i32* %leap, align 4
  br label %while.cond124

while.cond124:                                    ; preds = %lor.end150, %lor.end120
  %73 = load i64, i64* %m, align 8
  %74 = load i32, i32* %leap, align 4
  %idxprom125 = sext i32 %74 to i64
  %arrayidx126 = getelementptr inbounds [2 x i16], [2 x i16]* @length_of_year, i64 0, i64 %idxprom125
  %75 = load i16, i16* %arrayidx126, align 2
  %conv127 = sext i16 %75 to i32
  %sub128 = sub nsw i32 0, %conv127
  %conv129 = sext i32 %sub128 to i64
  %cmp130 = icmp slt i64 %73, %conv129
  br i1 %cmp130, label %while.body132, label %while.end154

while.body132:                                    ; preds = %while.cond124
  %76 = load i32, i32* %leap, align 4
  %idxprom133 = sext i32 %76 to i64
  %arrayidx134 = getelementptr inbounds [2 x i16], [2 x i16]* @length_of_year, i64 0, i64 %idxprom133
  %77 = load i16, i16* %arrayidx134, align 2
  %conv135 = sext i16 %77 to i64
  %78 = load i64, i64* %m, align 8
  %add136 = add nsw i64 %78, %conv135
  store i64 %add136, i64* %m, align 8
  %79 = load i32, i32* %year, align 4
  %dec137 = add nsw i32 %79, -1
  store i32 %dec137, i32* %year, align 4
  %80 = load i32, i32* %year, align 4
  %add138 = add nsw i32 %80, 1900
  %rem139 = srem i32 %add138, 400
  %tobool140 = icmp ne i32 %rem139, 0
  br i1 %tobool140, label %lor.rhs141, label %lor.end150

lor.rhs141:                                       ; preds = %while.body132
  %81 = load i32, i32* %year, align 4
  %add142 = add nsw i32 %81, 1900
  %rem143 = srem i32 %add142, 4
  %tobool144 = icmp ne i32 %rem143, 0
  br i1 %tobool144, label %land.end149, label %land.rhs145

land.rhs145:                                      ; preds = %lor.rhs141
  %82 = load i32, i32* %year, align 4
  %add146 = add nsw i32 %82, 1900
  %rem147 = srem i32 %add146, 100
  %tobool148 = icmp ne i32 %rem147, 0
  br label %land.end149

land.end149:                                      ; preds = %land.rhs145, %lor.rhs141
  %83 = phi i1 [ false, %lor.rhs141 ], [ %tobool148, %land.rhs145 ]
  br label %lor.end150

lor.end150:                                       ; preds = %land.end149, %while.body132
  %84 = phi i1 [ true, %while.body132 ], [ %83, %land.end149 ]
  %lor.ext151 = zext i1 %84 to i32
  %cmp152 = icmp ne i32 %lor.ext151, 0
  %conv153 = zext i1 %cmp152 to i32
  store i32 %conv153, i32* %leap, align 4
  br label %while.cond124

while.end154:                                     ; preds = %while.cond124
  store i32 11, i32* %v_tm_mon, align 4
  br label %while.cond155

while.cond155:                                    ; preds = %while.body165, %while.end154
  %85 = load i64, i64* %m, align 8
  %86 = load i32, i32* %leap, align 4
  %idxprom156 = sext i32 %86 to i64
  %arrayidx157 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @days_in_month, i64 0, i64 %idxprom156
  %87 = load i32, i32* %v_tm_mon, align 4
  %idxprom158 = sext i32 %87 to i64
  %arrayidx159 = getelementptr inbounds [12 x i8], [12 x i8]* %arrayidx157, i64 0, i64 %idxprom158
  %88 = load i8, i8* %arrayidx159, align 1
  %conv160 = sext i8 %88 to i32
  %sub161 = sub nsw i32 0, %conv160
  %conv162 = sext i32 %sub161 to i64
  %cmp163 = icmp slt i64 %85, %conv162
  br i1 %cmp163, label %while.body165, label %while.end173

while.body165:                                    ; preds = %while.cond155
  %89 = load i32, i32* %leap, align 4
  %idxprom166 = sext i32 %89 to i64
  %arrayidx167 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @days_in_month, i64 0, i64 %idxprom166
  %90 = load i32, i32* %v_tm_mon, align 4
  %idxprom168 = sext i32 %90 to i64
  %arrayidx169 = getelementptr inbounds [12 x i8], [12 x i8]* %arrayidx167, i64 0, i64 %idxprom168
  %91 = load i8, i8* %arrayidx169, align 1
  %conv170 = sext i8 %91 to i64
  %92 = load i64, i64* %m, align 8
  %add171 = add nsw i64 %92, %conv170
  store i64 %add171, i64* %m, align 8
  %93 = load i32, i32* %v_tm_mon, align 4
  %dec172 = add nsw i32 %93, -1
  store i32 %dec172, i32* %v_tm_mon, align 4
  br label %while.cond155

while.end173:                                     ; preds = %while.cond155
  %94 = load i32, i32* %leap, align 4
  %idxprom174 = sext i32 %94 to i64
  %arrayidx175 = getelementptr inbounds [2 x [12 x i8]], [2 x [12 x i8]]* @days_in_month, i64 0, i64 %idxprom174
  %95 = load i32, i32* %v_tm_mon, align 4
  %idxprom176 = sext i32 %95 to i64
  %arrayidx177 = getelementptr inbounds [12 x i8], [12 x i8]* %arrayidx175, i64 0, i64 %idxprom176
  %96 = load i8, i8* %arrayidx177, align 1
  %conv178 = sext i8 %96 to i64
  %97 = load i64, i64* %m, align 8
  %add179 = add nsw i64 %97, %conv178
  store i64 %add179, i64* %m, align 8
  br label %if.end180

if.end180:                                        ; preds = %while.end173, %while.end95
  %98 = load i32, i32* %year, align 4
  %99 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_year = getelementptr inbounds %struct.TM64, %struct.TM64* %99, i32 0, i32 5
  store i32 %98, i32* %tm_year, align 4
  %100 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_year181 = getelementptr inbounds %struct.TM64, %struct.TM64* %100, i32 0, i32 5
  %101 = load i32, i32* %tm_year181, align 4
  %102 = load i32, i32* %year, align 4
  %cmp182 = icmp ne i32 %101, %102
  br i1 %cmp182, label %if.then184, label %if.end185

if.then184:                                       ; preds = %if.end180
  %call = call i32* @__errno_location() #9
  store i32 75, i32* %call, align 4
  store %struct.TM64* null, %struct.TM64** %retval, align 8
  br label %return

if.end185:                                        ; preds = %if.end180
  %103 = load i64, i64* %m, align 8
  %conv186 = trunc i64 %103 to i32
  %add187 = add nsw i32 %conv186, 1
  %104 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_mday = getelementptr inbounds %struct.TM64, %struct.TM64* %104, i32 0, i32 3
  store i32 %add187, i32* %tm_mday, align 4
  %105 = load i32, i32* %leap, align 4
  %idxprom188 = sext i32 %105 to i64
  %arrayidx189 = getelementptr inbounds [2 x [12 x i16]], [2 x [12 x i16]]* @julian_days_by_month, i64 0, i64 %idxprom188
  %106 = load i32, i32* %v_tm_mon, align 4
  %idxprom190 = sext i32 %106 to i64
  %arrayidx191 = getelementptr inbounds [12 x i16], [12 x i16]* %arrayidx189, i64 0, i64 %idxprom190
  %107 = load i16, i16* %arrayidx191, align 2
  %conv192 = sext i16 %107 to i32
  %108 = load i64, i64* %m, align 8
  %conv193 = trunc i64 %108 to i32
  %add194 = add nsw i32 %conv192, %conv193
  %109 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_yday = getelementptr inbounds %struct.TM64, %struct.TM64* %109, i32 0, i32 7
  store i32 %add194, i32* %tm_yday, align 4
  %110 = load i32, i32* %v_tm_sec, align 4
  %111 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_sec = getelementptr inbounds %struct.TM64, %struct.TM64* %111, i32 0, i32 0
  store i32 %110, i32* %tm_sec, align 4
  %112 = load i32, i32* %v_tm_min, align 4
  %113 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_min = getelementptr inbounds %struct.TM64, %struct.TM64* %113, i32 0, i32 1
  store i32 %112, i32* %tm_min, align 4
  %114 = load i32, i32* %v_tm_hour, align 4
  %115 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_hour = getelementptr inbounds %struct.TM64, %struct.TM64* %115, i32 0, i32 2
  store i32 %114, i32* %tm_hour, align 4
  %116 = load i32, i32* %v_tm_mon, align 4
  %117 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_mon = getelementptr inbounds %struct.TM64, %struct.TM64* %117, i32 0, i32 4
  store i32 %116, i32* %tm_mon, align 4
  %118 = load i32, i32* %v_tm_wday, align 4
  %119 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  %tm_wday = getelementptr inbounds %struct.TM64, %struct.TM64* %119, i32 0, i32 6
  store i32 %118, i32* %tm_wday, align 4
  %120 = load %struct.TM64*, %struct.TM64** %p.addr, align 8
  store %struct.TM64* %120, %struct.TM64** %retval, align 8
  br label %return

return:                                           ; preds = %if.end185, %if.then184
  %121 = load %struct.TM64*, %struct.TM64** %retval, align 8
  ret %struct.TM64* %121
}

declare dso_local void @Perl_sv_setpvf_mg(%struct.sv*, i8*, ...) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_alarm() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.111, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sleep() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %duration = alloca i32, align 4
  %lasttime = alloca i64, align 8
  %when = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %call = call i64 @time(i64* %lasttime) #3
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp slt i32 %and, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %tobool = icmp ne %struct.sv* %8, null
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %tobool2 = icmp ne %struct.sv* %10, null
  br i1 %tobool2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  %call3 = call i32 @sleep(i32 2147450879)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr4, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** @PL_Sv, align 8
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and5 = and i32 %14, 2097408
  %cmp6 = icmp eq i32 %and5, 256
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %17, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %18 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call8 = call i64 @Perl_sv_2iv_flags(%struct.sv* %19, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %18, %cond.true ], [ %call8, %cond.false ]
  %conv9 = trunc i64 %cond to i32
  store i32 %conv9, i32* %duration, align 4
  %20 = load i32, i32* %duration, align 4
  %call10 = call i32 @sleep(i32 %20)
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %call11 = call i64 @time(i64* %when) #3
  br label %do.body

do.body:                                          ; preds = %if.end
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %22 = load i64, i64* %when, align 8
  %23 = load i64, i64* %lasttime, align 8
  %sub = sub nsw i64 %22, %23
  call void @Perl_sv_setiv(%struct.sv* %21, i64 %sub)
  br label %do.body12

do.body12:                                        ; preds = %do.body
  br label %do.body13

do.body13:                                        ; preds = %do.body12
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %25, 4194304
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %do.body13
  br i1 true, label %if.then19, label %if.end21

cond.false18:                                     ; preds = %do.body13
  br i1 false, label %if.then19, label %if.end21

if.then19:                                        ; preds = %cond.false18, %cond.true17
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %call20 = call i32 @Perl_mg_set(%struct.sv* %26)
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %cond.false18, %cond.true17
  br label %do.end

do.end:                                           ; preds = %if.end21
  br label %do.body22

do.body22:                                        ; preds = %do.end
  br label %do.body23

do.body23:                                        ; preds = %do.body22
  %27 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %28 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp24 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp24, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %do.body23
  br i1 true, label %if.then28, label %if.end30

cond.false27:                                     ; preds = %do.body23
  br i1 false, label %if.then28, label %if.end30

if.then28:                                        ; preds = %cond.false27, %cond.true26
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call29 = call %struct.sv** @Perl_stack_grow(%struct.sv** %29, %struct.sv** %30, i64 1)
  store %struct.sv** %call29, %struct.sv*** %sp, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %cond.false27, %cond.true26
  br label %do.end31

do.end31:                                         ; preds = %if.end30
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr32 = getelementptr inbounds %struct.sv*, %struct.sv** %33, i32 1
  store %struct.sv** %incdec.ptr32, %struct.sv*** %sp, align 8
  store %struct.sv* %32, %struct.sv** %incdec.ptr32, align 8
  br label %do.end33

do.end33:                                         ; preds = %do.end31
  br label %do.end34

do.end34:                                         ; preds = %do.end33
  br label %do.end35

do.end35:                                         ; preds = %do.end34
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_shmwrite() #0 {
entry:
  %call = call %struct.op* @Perl_pp_semget()
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_semget() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.112, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_semctl() #0 {
entry:
  %call = call %struct.op* @Perl_pp_semget()
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ghostent() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gnetent() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gprotoent() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gservent() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_shostent() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %stayopen = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %8 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %10, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %stayopen, align 4
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 358, label %sw.bb
    i32 360, label %sw.bb6
    i32 361, label %sw.bb14
  ]

sw.bb:                                            ; preds = %cond.end
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %idxprom = zext i32 %bf.cast4 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %13 = load i8*, i8** %arrayidx, align 8
  %call5 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %13)
  store %struct.op* %call5, %struct.op** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %cond.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type7 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load8 = load i16, i16* %op_type7, align 8
  %bf.clear9 = and i16 %bf.load8, 511
  %bf.cast10 = zext i16 %bf.clear9 to i32
  %idxprom11 = zext i32 %bf.cast10 to i64
  %arrayidx12 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom11
  %15 = load i8*, i8** %arrayidx12, align 8
  %call13 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %15)
  store %struct.op* %call13, %struct.op** %retval, align 8
  br label %return

sw.bb14:                                          ; preds = %cond.end
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type15 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load16 = load i16, i16* %op_type15, align 8
  %bf.clear17 = and i16 %bf.load16, 511
  %bf.cast18 = zext i16 %bf.clear17 to i32
  %idxprom19 = zext i32 %bf.cast18 to i64
  %arrayidx20 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom19
  %17 = load i8*, i8** %arrayidx20, align 8
  %call21 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %17)
  store %struct.op* %call21, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %cond.end
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %18, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %19, %struct.sv*** @PL_stack_sp, align 8
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 0
  %21 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %21, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb14, %sw.bb6, %sw.bb
  %22 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %22
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ehostent() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 362, label %sw.bb
    i32 363, label %sw.bb5
    i32 364, label %sw.bb13
    i32 365, label %sw.bb21
    i32 374, label %sw.bb29
    i32 375, label %sw.bb37
    i32 369, label %sw.bb45
    i32 370, label %sw.bb53
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %idxprom = zext i32 %bf.cast4 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %3)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type6 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 4
  %bf.load7 = load i16, i16* %op_type6, align 8
  %bf.clear8 = and i16 %bf.load7, 511
  %bf.cast9 = zext i16 %bf.clear8 to i32
  %idxprom10 = zext i32 %bf.cast9 to i64
  %arrayidx11 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom10
  %5 = load i8*, i8** %arrayidx11, align 8
  %call12 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %5)
  store %struct.op* %call12, %struct.op** %retval, align 8
  br label %return

sw.bb13:                                          ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type14 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load15 = load i16, i16* %op_type14, align 8
  %bf.clear16 = and i16 %bf.load15, 511
  %bf.cast17 = zext i16 %bf.clear16 to i32
  %idxprom18 = zext i32 %bf.cast17 to i64
  %arrayidx19 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom18
  %7 = load i8*, i8** %arrayidx19, align 8
  %call20 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %7)
  store %struct.op* %call20, %struct.op** %retval, align 8
  br label %return

sw.bb21:                                          ; preds = %entry
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type22 = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 4
  %bf.load23 = load i16, i16* %op_type22, align 8
  %bf.clear24 = and i16 %bf.load23, 511
  %bf.cast25 = zext i16 %bf.clear24 to i32
  %idxprom26 = zext i32 %bf.cast25 to i64
  %arrayidx27 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom26
  %9 = load i8*, i8** %arrayidx27, align 8
  %call28 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %9)
  store %struct.op* %call28, %struct.op** %retval, align 8
  br label %return

sw.bb29:                                          ; preds = %entry
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type30 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load31 = load i16, i16* %op_type30, align 8
  %bf.clear32 = and i16 %bf.load31, 511
  %bf.cast33 = zext i16 %bf.clear32 to i32
  %idxprom34 = zext i32 %bf.cast33 to i64
  %arrayidx35 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom34
  %11 = load i8*, i8** %arrayidx35, align 8
  %call36 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %11)
  store %struct.op* %call36, %struct.op** %retval, align 8
  br label %return

sw.bb37:                                          ; preds = %entry
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type38 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load39 = load i16, i16* %op_type38, align 8
  %bf.clear40 = and i16 %bf.load39, 511
  %bf.cast41 = zext i16 %bf.clear40 to i32
  %idxprom42 = zext i32 %bf.cast41 to i64
  %arrayidx43 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom42
  %13 = load i8*, i8** %arrayidx43, align 8
  %call44 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %13)
  store %struct.op* %call44, %struct.op** %retval, align 8
  br label %return

sw.bb45:                                          ; preds = %entry
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type46 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 4
  %bf.load47 = load i16, i16* %op_type46, align 8
  %bf.clear48 = and i16 %bf.load47, 511
  %bf.cast49 = zext i16 %bf.clear48 to i32
  %idxprom50 = zext i32 %bf.cast49 to i64
  %arrayidx51 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom50
  %15 = load i8*, i8** %arrayidx51, align 8
  %call52 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %15)
  store %struct.op* %call52, %struct.op** %retval, align 8
  br label %return

sw.bb53:                                          ; preds = %entry
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type54 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 4
  %bf.load55 = load i16, i16* %op_type54, align 8
  %bf.clear56 = and i16 %bf.load55, 511
  %bf.cast57 = zext i16 %bf.clear56 to i32
  %idxprom58 = zext i32 %bf.cast57 to i64
  %arrayidx59 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom58
  %17 = load i8*, i8** %arrayidx59, align 8
  %call60 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %17)
  store %struct.op* %call60, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %18 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call61 = call %struct.sv** @Perl_stack_grow(%struct.sv** %20, %struct.sv** %21, i64 1)
  store %struct.sv** %call61, %struct.sv*** %sp, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %24, %struct.sv*** @PL_stack_sp, align 8
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 0
  %26 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %26, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %sw.bb53, %sw.bb45, %sw.bb37, %sw.bb29, %sw.bb21, %sw.bb13, %sw.bb5, %sw.bb
  %27 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gpwent() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ggrent() #0 {
entry:
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* %1)
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_getlogin() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_syscall() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_func, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.114, i64 0, i64 0))
  ret %struct.op* %call
}

declare dso_local void @Perl_sv_free2(%struct.sv*, i32) #1

declare dso_local i32 @Perl_mg_size(%struct.sv*) #1

declare dso_local %struct.cv* @Perl_cv_clone(%struct.cv*) #1

declare dso_local void @Perl_save_strlen(i64*) #1

declare dso_local i32 @Perl_cxinc() #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_inc_void(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  ret void
}

declare dso_local void @Perl_pad_push(%struct.padlist*, i32) #1

declare dso_local void @Perl_save_pushptr(i8*, i32) #1

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal %struct.tm* @S_localtime_r(i64* %clock, %struct.tm* %result) #0 {
entry:
  %retval = alloca %struct.tm*, align 8
  %clock.addr = alloca i64*, align 8
  %result.addr = alloca %struct.tm*, align 8
  %static_result = alloca %struct.tm*, align 8
  store i64* %clock, i64** %clock.addr, align 8
  store %struct.tm* %result, %struct.tm** %result.addr, align 8
  %0 = load i64*, i64** %clock.addr, align 8
  %call = call %struct.tm* @localtime(i64* %0) #3
  store %struct.tm* %call, %struct.tm** %static_result, align 8
  %1 = load %struct.tm*, %struct.tm** %static_result, align 8
  %cmp = icmp eq %struct.tm* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.tm*, %struct.tm** %result.addr, align 8
  %3 = bitcast %struct.tm* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 56, i1 false)
  store %struct.tm* null, %struct.tm** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %4 = load %struct.tm*, %struct.tm** %result.addr, align 8
  %5 = bitcast %struct.tm* %4 to i8*
  %6 = load %struct.tm*, %struct.tm** %static_result, align 8
  %7 = bitcast %struct.tm* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %7, i64 56, i1 false)
  %8 = load %struct.tm*, %struct.tm** %result.addr, align 8
  store %struct.tm* %8, %struct.tm** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load %struct.tm*, %struct.tm** %retval, align 8
  ret %struct.tm* %9
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_copy_little_tm_to_big_TM(%struct.tm* %src, %struct.TM64* %dest) #0 {
entry:
  %src.addr = alloca %struct.tm*, align 8
  %dest.addr = alloca %struct.TM64*, align 8
  store %struct.tm* %src, %struct.tm** %src.addr, align 8
  store %struct.TM64* %dest, %struct.TM64** %dest.addr, align 8
  %0 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 0
  %1 = load i32, i32* %tm_sec, align 8
  %2 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_sec1 = getelementptr inbounds %struct.TM64, %struct.TM64* %2, i32 0, i32 0
  store i32 %1, i32* %tm_sec1, align 4
  %3 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 1
  %4 = load i32, i32* %tm_min, align 4
  %5 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_min2 = getelementptr inbounds %struct.TM64, %struct.TM64* %5, i32 0, i32 1
  store i32 %4, i32* %tm_min2, align 4
  %6 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 2
  %7 = load i32, i32* %tm_hour, align 8
  %8 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_hour3 = getelementptr inbounds %struct.TM64, %struct.TM64* %8, i32 0, i32 2
  store i32 %7, i32* %tm_hour3, align 4
  %9 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %9, i32 0, i32 3
  %10 = load i32, i32* %tm_mday, align 4
  %11 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_mday4 = getelementptr inbounds %struct.TM64, %struct.TM64* %11, i32 0, i32 3
  store i32 %10, i32* %tm_mday4, align 4
  %12 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 4
  %13 = load i32, i32* %tm_mon, align 8
  %14 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_mon5 = getelementptr inbounds %struct.TM64, %struct.TM64* %14, i32 0, i32 4
  store i32 %13, i32* %tm_mon5, align 4
  %15 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %15, i32 0, i32 5
  %16 = load i32, i32* %tm_year, align 4
  %17 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_year6 = getelementptr inbounds %struct.TM64, %struct.TM64* %17, i32 0, i32 5
  store i32 %16, i32* %tm_year6, align 4
  %18 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_wday = getelementptr inbounds %struct.tm, %struct.tm* %18, i32 0, i32 6
  %19 = load i32, i32* %tm_wday, align 8
  %20 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_wday7 = getelementptr inbounds %struct.TM64, %struct.TM64* %20, i32 0, i32 6
  store i32 %19, i32* %tm_wday7, align 4
  %21 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_yday = getelementptr inbounds %struct.tm, %struct.tm* %21, i32 0, i32 7
  %22 = load i32, i32* %tm_yday, align 4
  %23 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_yday8 = getelementptr inbounds %struct.TM64, %struct.TM64* %23, i32 0, i32 7
  store i32 %22, i32* %tm_yday8, align 4
  %24 = load %struct.tm*, %struct.tm** %src.addr, align 8
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %24, i32 0, i32 8
  %25 = load i32, i32* %tm_isdst, align 8
  %26 = load %struct.TM64*, %struct.TM64** %dest.addr, align 8
  %tm_isdst9 = getelementptr inbounds %struct.TM64, %struct.TM64* %26, i32 0, i32 8
  store i32 %25, i32* %tm_isdst9, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_safe_year(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %safe_year = alloca i32, align 4
  %year_cycle = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %1 = load i32, i32* %year.addr, align 4
  %call = call i32 @S_cycle_offset(i32 %1)
  %add = add nsw i32 %0, %call
  store i32 %add, i32* %year_cycle, align 4
  %2 = load i32, i32* %year.addr, align 4
  %call1 = call i32 @S_is_exception_century(i32 %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %year_cycle, align 4
  %add2 = add nsw i32 %3, 11
  store i32 %add2, i32* %year_cycle, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %4, 1
  %call3 = call i32 @S_is_exception_century(i32 %sub)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %5 = load i32, i32* %year_cycle, align 4
  %add6 = add nsw i32 %5, 17
  store i32 %add6, i32* %year_cycle, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %6 = load i32, i32* %year_cycle, align 4
  %rem = srem i32 %6, 28
  store i32 %rem, i32* %year_cycle, align 4
  %7 = load i32, i32* %year_cycle, align 4
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end7
  %8 = load i32, i32* %year_cycle, align 4
  %add9 = add nsw i32 28, %8
  store i32 %add9, i32* %year_cycle, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end7
  %9 = load i32, i32* %year_cycle, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [28 x i16], [28 x i16]* @safe_years, i64 0, i64 %idxprom
  %10 = load i16, i16* %arrayidx, align 2
  %conv = sext i16 %10 to i32
  store i32 %conv, i32* %safe_year, align 4
  %11 = load i32, i32* %safe_year, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_timegm64(%struct.TM64* %date) #0 {
entry:
  %date.addr = alloca %struct.TM64*, align 8
  %days = alloca i32, align 4
  %seconds = alloca i64, align 8
  %year = alloca i32, align 4
  store %struct.TM64* %date, %struct.TM64** %date.addr, align 8
  store i32 0, i32* %days, align 4
  store i64 0, i64* %seconds, align 8
  %0 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year = getelementptr inbounds %struct.TM64, %struct.TM64* %0, i32 0, i32 5
  %1 = load i32, i32* %tm_year, align 4
  %cmp = icmp sgt i32 %1, 70
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 70, i32* %year, align 4
  br label %while.cond

while.cond:                                       ; preds = %lor.end, %if.then
  %2 = load i32, i32* %year, align 4
  %3 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year1 = getelementptr inbounds %struct.TM64, %struct.TM64* %3, i32 0, i32 5
  %4 = load i32, i32* %tm_year1, align 4
  %cmp2 = icmp slt i32 %2, %4
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %year, align 4
  %add = add nsw i32 %5, 1900
  %rem = srem i32 %add, 400
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.body
  %6 = load i32, i32* %year, align 4
  %add3 = add nsw i32 %6, 1900
  %rem4 = srem i32 %add3, 4
  %tobool5 = icmp ne i32 %rem4, 0
  br i1 %tobool5, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs
  %7 = load i32, i32* %year, align 4
  %add6 = add nsw i32 %7, 1900
  %rem7 = srem i32 %add6, 100
  %tobool8 = icmp ne i32 %rem7, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %8 = phi i1 [ false, %lor.rhs ], [ %tobool8, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.body
  %9 = phi i1 [ true, %while.body ], [ %8, %land.end ]
  %lor.ext = zext i1 %9 to i32
  %cmp9 = icmp ne i32 %lor.ext, 0
  %conv = zext i1 %cmp9 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [2 x i16], [2 x i16]* @length_of_year, i64 0, i64 %idxprom
  %10 = load i16, i16* %arrayidx, align 2
  %conv10 = sext i16 %10 to i32
  %11 = load i32, i32* %days, align 4
  %add11 = add nsw i32 %11, %conv10
  store i32 %add11, i32* %days, align 4
  %12 = load i32, i32* %year, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %year, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end38

if.else:                                          ; preds = %entry
  %13 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year12 = getelementptr inbounds %struct.TM64, %struct.TM64* %13, i32 0, i32 5
  %14 = load i32, i32* %tm_year12, align 4
  %cmp13 = icmp slt i32 %14, 70
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.else
  store i32 69, i32* %year, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then15
  %15 = load i32, i32* %year, align 4
  %add16 = add nsw i32 %15, 1900
  %rem17 = srem i32 %add16, 400
  %tobool18 = icmp ne i32 %rem17, 0
  br i1 %tobool18, label %lor.rhs19, label %lor.end28

lor.rhs19:                                        ; preds = %do.body
  %16 = load i32, i32* %year, align 4
  %add20 = add nsw i32 %16, 1900
  %rem21 = srem i32 %add20, 4
  %tobool22 = icmp ne i32 %rem21, 0
  br i1 %tobool22, label %land.end27, label %land.rhs23

land.rhs23:                                       ; preds = %lor.rhs19
  %17 = load i32, i32* %year, align 4
  %add24 = add nsw i32 %17, 1900
  %rem25 = srem i32 %add24, 100
  %tobool26 = icmp ne i32 %rem25, 0
  br label %land.end27

land.end27:                                       ; preds = %land.rhs23, %lor.rhs19
  %18 = phi i1 [ false, %lor.rhs19 ], [ %tobool26, %land.rhs23 ]
  br label %lor.end28

lor.end28:                                        ; preds = %land.end27, %do.body
  %19 = phi i1 [ true, %do.body ], [ %18, %land.end27 ]
  %lor.ext29 = zext i1 %19 to i32
  %cmp30 = icmp ne i32 %lor.ext29, 0
  %conv31 = zext i1 %cmp30 to i32
  %idxprom32 = sext i32 %conv31 to i64
  %arrayidx33 = getelementptr inbounds [2 x i16], [2 x i16]* @length_of_year, i64 0, i64 %idxprom32
  %20 = load i16, i16* %arrayidx33, align 2
  %conv34 = sext i16 %20 to i32
  %21 = load i32, i32* %days, align 4
  %sub = sub nsw i32 %21, %conv34
  store i32 %sub, i32* %days, align 4
  %22 = load i32, i32* %year, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %year, align 4
  br label %do.cond

do.cond:                                          ; preds = %lor.end28
  %23 = load i32, i32* %year, align 4
  %24 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year35 = getelementptr inbounds %struct.TM64, %struct.TM64* %24, i32 0, i32 5
  %25 = load i32, i32* %tm_year35, align 4
  %cmp36 = icmp sge i32 %23, %25
  br i1 %cmp36, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %if.else
  br label %if.end38

if.end38:                                         ; preds = %if.end, %while.end
  %26 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year39 = getelementptr inbounds %struct.TM64, %struct.TM64* %26, i32 0, i32 5
  %27 = load i32, i32* %tm_year39, align 4
  %add40 = add nsw i32 %27, 1900
  %rem41 = srem i32 %add40, 400
  %tobool42 = icmp ne i32 %rem41, 0
  br i1 %tobool42, label %lor.rhs43, label %lor.end54

lor.rhs43:                                        ; preds = %if.end38
  %28 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year44 = getelementptr inbounds %struct.TM64, %struct.TM64* %28, i32 0, i32 5
  %29 = load i32, i32* %tm_year44, align 4
  %add45 = add nsw i32 %29, 1900
  %rem46 = srem i32 %add45, 4
  %tobool47 = icmp ne i32 %rem46, 0
  br i1 %tobool47, label %land.end53, label %land.rhs48

land.rhs48:                                       ; preds = %lor.rhs43
  %30 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_year49 = getelementptr inbounds %struct.TM64, %struct.TM64* %30, i32 0, i32 5
  %31 = load i32, i32* %tm_year49, align 4
  %add50 = add nsw i32 %31, 1900
  %rem51 = srem i32 %add50, 100
  %tobool52 = icmp ne i32 %rem51, 0
  br label %land.end53

land.end53:                                       ; preds = %land.rhs48, %lor.rhs43
  %32 = phi i1 [ false, %lor.rhs43 ], [ %tobool52, %land.rhs48 ]
  br label %lor.end54

lor.end54:                                        ; preds = %land.end53, %if.end38
  %33 = phi i1 [ true, %if.end38 ], [ %32, %land.end53 ]
  %lor.ext55 = zext i1 %33 to i32
  %cmp56 = icmp ne i32 %lor.ext55, 0
  %conv57 = zext i1 %cmp56 to i32
  %idxprom58 = sext i32 %conv57 to i64
  %arrayidx59 = getelementptr inbounds [2 x [12 x i16]], [2 x [12 x i16]]* @julian_days_by_month, i64 0, i64 %idxprom58
  %34 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_mon = getelementptr inbounds %struct.TM64, %struct.TM64* %34, i32 0, i32 4
  %35 = load i32, i32* %tm_mon, align 4
  %idxprom60 = sext i32 %35 to i64
  %arrayidx61 = getelementptr inbounds [12 x i16], [12 x i16]* %arrayidx59, i64 0, i64 %idxprom60
  %36 = load i16, i16* %arrayidx61, align 2
  %conv62 = sext i16 %36 to i32
  %37 = load i32, i32* %days, align 4
  %add63 = add nsw i32 %37, %conv62
  store i32 %add63, i32* %days, align 4
  %38 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_mday = getelementptr inbounds %struct.TM64, %struct.TM64* %38, i32 0, i32 3
  %39 = load i32, i32* %tm_mday, align 4
  %sub64 = sub nsw i32 %39, 1
  %40 = load i32, i32* %days, align 4
  %add65 = add nsw i32 %40, %sub64
  store i32 %add65, i32* %days, align 4
  %41 = load i32, i32* %days, align 4
  %conv66 = sext i32 %41 to i64
  store i64 %conv66, i64* %seconds, align 8
  %42 = load i64, i64* %seconds, align 8
  %mul = mul nsw i64 %42, 60
  %mul67 = mul nsw i64 %mul, 60
  %mul68 = mul nsw i64 %mul67, 24
  store i64 %mul68, i64* %seconds, align 8
  %43 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_hour = getelementptr inbounds %struct.TM64, %struct.TM64* %43, i32 0, i32 2
  %44 = load i32, i32* %tm_hour, align 4
  %mul69 = mul nsw i32 %44, 60
  %mul70 = mul nsw i32 %mul69, 60
  %conv71 = sext i32 %mul70 to i64
  %45 = load i64, i64* %seconds, align 8
  %add72 = add nsw i64 %45, %conv71
  store i64 %add72, i64* %seconds, align 8
  %46 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_min = getelementptr inbounds %struct.TM64, %struct.TM64* %46, i32 0, i32 1
  %47 = load i32, i32* %tm_min, align 4
  %mul73 = mul nsw i32 %47, 60
  %conv74 = sext i32 %mul73 to i64
  %48 = load i64, i64* %seconds, align 8
  %add75 = add nsw i64 %48, %conv74
  store i64 %add75, i64* %seconds, align 8
  %49 = load %struct.TM64*, %struct.TM64** %date.addr, align 8
  %tm_sec = getelementptr inbounds %struct.TM64, %struct.TM64* %49, i32 0, i32 0
  %50 = load i32, i32* %tm_sec, align 4
  %conv76 = sext i32 %50 to i64
  %51 = load i64, i64* %seconds, align 8
  %add77 = add nsw i64 %51, %conv76
  store i64 %add77, i64* %seconds, align 8
  %52 = load i64, i64* %seconds, align 8
  ret i64 %52
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #6

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_cycle_offset(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %start_year = alloca i32, align 4
  %year_diff = alloca i32, align 4
  %exceptions = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  store i32 2000, i32* %start_year, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub nsw i32 %0, 2000
  store i32 %sub, i32* %year_diff, align 4
  %1 = load i32, i32* %year.addr, align 4
  %cmp = icmp sgt i32 %1, 2000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %year_diff, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %year_diff, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %year_diff, align 4
  %div = sdiv i32 %3, 100
  store i32 %div, i32* %exceptions, align 4
  %4 = load i32, i32* %year_diff, align 4
  %div1 = sdiv i32 %4, 400
  %5 = load i32, i32* %exceptions, align 4
  %sub2 = sub nsw i32 %5, %div1
  store i32 %sub2, i32* %exceptions, align 4
  %6 = load i32, i32* %exceptions, align 4
  %mul = mul nsw i32 %6, 16
  ret i32 %mul
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_is_exception_century(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %is_exception = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %rem = srem i32 %0, 100
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %year.addr, align 4
  %rem1 = srem i32 %1, 400
  %cmp2 = icmp eq i32 %rem1, 0
  %lnot = xor i1 %cmp2, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  store i32 %land.ext, i32* %is_exception, align 4
  %3 = load i32, i32* %is_exception, align 4
  ret i32 %3
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable willreturn }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
